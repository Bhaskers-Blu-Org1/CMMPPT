head	1.10;
access;
symbols
	sce_5_01_20080919:1.7
	latest_sce_4_20_20060523:1.6.0.2
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.5.0.2
	sce_4_20_OSL:1.5
	sce_410_withVa:1.4;
locks; strict;
comment	@ * @;


1.10
date	2011.09.28.23.49.35;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.24.00.27.57;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.30.20.17.40;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.08.19.46.41;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.02.17.34.03;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.19.14.49.33;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.14.18.16.50;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.13.15.54.09;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.11.22.53.49;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.11.19.51.28;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MsgH
#define MsgH

//------------------------------------------------------------------------------
// Header file: "Msg.h"
//
// Contains the declaration of class Msg.
//------------------------------------------------------------------------------

#include <typedefs.h>

#include <mcl/src/mcl.h>

//------------------------------------------------------------------------------
// Class Msg
//
// WIT's specialization of class MclMsg.
//
// Implemented in MsgMgr.C.
//------------------------------------------------------------------------------

class WitMsg: public MclMsg
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsg (
            WitMsgMgr *      theMsgMgr,
            WitMsgID         theMsgID,
            const MclLevel & theLevel,
            const char *     textVal,
            int              extNum);
         //
         // myMsgMgr_ <-- theMsgMgr.
         // MclMsg    <<< other Args.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMsg ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, delayedSevere)
      accessFunc (bool, stopRunning)
      accessFunc (bool, throwErrorExc)
      accessFunc (bool, dupToStdout)
      accessFunc (bool, issueDuringRD)
      accessFunc (bool, idInputOnIssue)
      accessFunc (bool, testable)

      //------------------------------------------------------------------------
      // Attribute setting functions.
      //------------------------------------------------------------------------

      void delayedSevere  (bool);
      void stopRunning    (bool);
      void throwErrorExc  (bool);
      void dupToStdout    (bool);
      void issueDuringRD  (bool);
      void idInputOnIssue (bool);
      void testable       (bool);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMsg);

      virtual void postIssue ();
         //
         // Override from MclMsg.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgMgr * const myMsgMgr_;
         //
         // The MsgMgr for this Msg.

      bool delayedSevere_;
         //
         // true, iff this Msg is a severe Msg, but WIT is to delay aborting
         // until preprocessing or the end of reading the data file.

      bool stopRunning_;
         //
         // If true, then if this Msg calls MsgMgr::abort, then program process
         // will be terminated.
         // If stopRunning_ is set to true, throwErrorExc_ is automatically
         // set to false.
         // If both stopRunning_ and throwErrorExc_ are false, then if this
         // Msg calls MsgMgr::abort, the API function called by the application
         // program immediately returns.

      bool throwErrorExc_;
         //
         // If true, then if this Msg calls MsgMgr::abort, then WIT will throw
         // an exception to be caught by the application program.
         // If throwErrorExc_ is set to true, stopRunning_ is automatically
         // set to false.

      bool dupToStdout_;
         //
         // If true, then when this Msg is issued in stand-alone mode, it will
         // also display to stdout.
         // Only allowed on info Msgs.

      bool issueDuringRD_;
         //
         // This Msg is allowed to be issued during readData, iff issueDuringRD_
         // is true or GlobalComp::readDataMsgs () is true.

      bool idInputOnIssue_;
         //
         // WitRun::idInput will be called when this Msg is issued, iff
         // idInputOnIssue_ is true.

      bool testable_;
         //
         // true, iff this Msg is to be tested by the Msg testing application
         // program.
   };

#endif
@


1.9
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.8
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 2
a33 71
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMsg (
WitMsgMgr *      theMsgMgr,
WitMsgID         theMsgID,
const MclLevel & theLevel,
const char *     textVal,
int              extNum);
//
// myMsgMgr_ <-- theMsgMgr.
// MclMsg    <<< other Args.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitMsg ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (bool, delayedSevere)
accessFunc (bool, stopRunning)
accessFunc (bool, throwErrorExc)
accessFunc (bool, dupToStdout)
accessFunc (bool, issueDuringRD)
accessFunc (bool, idInputOnIssue)
accessFunc (bool, testable)

//------------------------------------------------------------------------
// Attribute setting functions.
//------------------------------------------------------------------------

void delayedSevere  (bool);
void stopRunning    (bool);
void throwErrorExc  (bool);
void dupToStdout    (bool);
void issueDuringRD  (bool);
void idInputOnIssue (bool);
void testable       (bool);

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitMsg);

virtual void postIssue ();
//
// Override from MclMsg.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMsgMgr * const myMsgMgr_;
//
// The MsgMgr for this Msg.

bool delayedSevere_;
//
// true, iff this Msg is a severe Msg, but WIT is to delay aborting
// until preprocessing or the end of reading the data file.
d35 107
a141 38
bool stopRunning_;
//
// If true, then if this Msg calls MsgMgr::abort, then program process
// will be terminated.
// If stopRunning_ is set to true, throwErrorExc_ is automatically
// set to false.
// If both stopRunning_ and throwErrorExc_ are false, then if this
// Msg calls MsgMgr::abort, the API function called by the application
// program immediately returns.

bool throwErrorExc_;
//
// If true, then if this Msg calls MsgMgr::abort, then WIT will throw
// an exception to be caught by the application program.
// If throwErrorExc_ is set to true, stopRunning_ is automatically
// set to false.

bool dupToStdout_;
//
// If true, then when this Msg is issued in stand-alone mode, it will
// also display to stdout.
// Only allowed on info Msgs.

bool issueDuringRD_;
//
// This Msg is allowed to be issued during readData, iff issueDuringRD_
// is true or GlobalComp::readDataMsgs () is true.

bool idInputOnIssue_;
//
// WitRun::idInput will be called when this Msg is issued, iff
// idInputOnIssue_ is true.

bool testable_;
//
// true, iff this Msg is to be tested by the Msg testing application
// program.
};
@


1.7
log
@witCopy<Object>Data.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 71
a102 2
   {
   public:
d104 38
a141 107
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsg (
            WitMsgMgr *      theMsgMgr,
            WitMsgID         theMsgID,
            const MclLevel & theLevel,
            const char *     textVal,
            int              extNum);
         //
         // myMsgMgr_ <-- theMsgMgr.
         // MclMsg    <<< other Args.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMsg ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, delayedSevere)
      accessFunc (bool, stopRunning)
      accessFunc (bool, throwErrorExc)
      accessFunc (bool, dupToStdout)
      accessFunc (bool, issueDuringRD)
      accessFunc (bool, idInputOnIssue)
      accessFunc (bool, testable)

      //------------------------------------------------------------------------
      // Attribute setting functions.
      //------------------------------------------------------------------------

      void delayedSevere  (bool);
      void stopRunning    (bool);
      void throwErrorExc  (bool);
      void dupToStdout    (bool);
      void issueDuringRD  (bool);
      void idInputOnIssue (bool);
      void testable       (bool);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMsg);

      virtual void postIssue ();
         //
         // Override from MclMsg.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgMgr * const myMsgMgr_;
         //
         // The MsgMgr for this Msg.

      bool delayedSevere_;
         //
         // true, iff this Msg is a severe Msg, but WIT is to delay aborting
         // until preprocessing or the end of reading the data file.

      bool stopRunning_;
         //
         // If true, then if this Msg calls MsgMgr::abort, then program process
         // will be terminated.
         // If stopRunning_ is set to true, throwErrorExc_ is automatically
         // set to false.
         // If both stopRunning_ and throwErrorExc_ are false, then if this
         // Msg calls MsgMgr::abort, the API function called by the application
         // program immediately returns.

      bool throwErrorExc_;
         //
         // If true, then if this Msg calls MsgMgr::abort, then WIT will throw
         // an exception to be caught by the application program.
         // If throwErrorExc_ is set to true, stopRunning_ is automatically
         // set to false.

      bool dupToStdout_;
         //
         // If true, then when this Msg is issued in stand-alone mode, it will
         // also display to stdout.
         // Only allowed on info Msgs.

      bool issueDuringRD_;
         //
         // This Msg is allowed to be issued during readData, iff issueDuringRD_
         // is true or GlobalComp::readDataMsgs () is true.

      bool idInputOnIssue_;
         //
         // WitRun::idInput will be called when this Msg is issued, iff
         // idInputOnIssue_ is true.

      bool testable_;
         //
         // true, iff this Msg is to be tested by the Msg testing application
         // program.
   };
@


1.6
log
@Updated the copyright date on all source files.
@
text
@d71 7
a77 7
      WitMsg * delayedSevere  (bool);
      WitMsg * stopRunning    (bool);
      WitMsg * throwErrorExc  (bool);
      WitMsg * dupToStdout    (bool);
      WitMsg * issueDuringRD  (bool);
      WitMsg * idInputOnIssue (bool);
      WitMsg * testable       (bool);
@


1.5
log
@Updated WIT's exception throwing capability.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.4
log
@[exceptions]
@
text
@d61 1
a61 1
      accessFunc (bool, throwException)
d73 1
a73 1
      WitMsg * throwException (bool);
d108 1
a108 1
         // If stopRunning_ is set to true, throwException_ is automatically
d110 1
a110 1
         // If both stopRunning_ and throwException_ are false, then if this
d114 1
a114 1
      bool throwException_;
d118 1
a118 1
         // If throwException_ is set to true, stopRunning_ is automatically
@


1.3
log
@[exceptions]
@
text
@d60 1
a60 1
      accessFunc (bool, stopOnAbort)
d72 1
a72 1
      WitMsg * stopOnAbort    (bool);
d104 1
a104 1
      bool stopOnAbort_;
d108 1
a108 1
         // If stopOnAbort_ is set to true, throwException_ is automatically
d110 1
a110 1
         // If both stopOnAbort_ and throwException_ are false, then if this
d118 1
a118 1
         // If throwException_ is set to true, stopOnAbort_ is automatically
@


1.2
log
@[exceptions]
@
text
@d27 2
@


1.1
log
@[exceptions]
@
text
@d59 1
d71 1
d104 14
a117 3
         // If this Msg calls WitRun::abort, then:
         //    If true,  the process will stop.
         //    If false, control will return to the application program.
@

