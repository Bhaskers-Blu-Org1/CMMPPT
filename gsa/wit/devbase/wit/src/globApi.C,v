head	1.150;
access;
symbols
	sce_5_01_20080919:1.129
	latest_sce_4_20_20060523:1.104.0.2
	sce_4_20_20060523:1.104
	latest_sce4_20_OSL:1.100.0.2
	sce_4_20_OSL:1.100
	sce_410_withVa:1.95
	sce_4_05_20040511:1.75
	sce_4_00_20040201:1.50
	nextGenBranch:1.36.0.2
	nextGenRoot:1.36
	sce_3_30_20030627:1.36
	EndRw-branch:1.27.0.4
	Root-of-EndRw:1.27
	rwToStl:1.27.0.2
	latest_sce_3_10_20010924:1.14.0.2
	sce_3_10_20010924:1.14
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.150
date	2011.09.28.23.50.46;	author rjw;	state Exp;
branches;
next	1.149;

1.149
date	2011.09.24.00.29.02;	author rjw;	state Exp;
branches;
next	1.148;

1.148
date	2011.08.30.20.18.27;	author rjw;	state Exp;
branches;
next	1.147;

1.147
date	2011.02.08.23.46.13;	author rjw;	state Exp;
branches;
next	1.146;

1.146
date	2010.09.30.22.04.58;	author rjw;	state Exp;
branches;
next	1.145;

1.145
date	2010.09.24.18.17.24;	author rjw;	state Exp;
branches;
next	1.144;

1.144
date	2010.09.24.15.46.16;	author rjw;	state Exp;
branches;
next	1.143;

1.143
date	2010.09.22.20.21.54;	author rjw;	state Exp;
branches;
next	1.142;

1.142
date	2010.09.21.21.19.14;	author rjw;	state Exp;
branches;
next	1.141;

1.141
date	2010.09.07.16.38.59;	author rjw;	state Exp;
branches;
next	1.140;

1.140
date	2010.09.02.18.58.25;	author rjw;	state Exp;
branches;
next	1.139;

1.139
date	2010.09.01.21.53.35;	author rjw;	state Exp;
branches;
next	1.138;

1.138
date	2010.09.01.21.11.27;	author rjw;	state Exp;
branches;
next	1.137;

1.137
date	2010.09.01.20.25.25;	author rjw;	state Exp;
branches;
next	1.136;

1.136
date	2010.07.01.22.41.22;	author rjw;	state Exp;
branches;
next	1.135;

1.135
date	2010.06.22.20.26.09;	author rjw;	state Exp;
branches;
next	1.134;

1.134
date	2010.06.14.21.15.16;	author rjw;	state Exp;
branches;
next	1.133;

1.133
date	2010.03.16.22.42.29;	author rjw;	state Exp;
branches;
next	1.132;

1.132
date	2009.06.23.21.34.40;	author rjw;	state Exp;
branches;
next	1.131;

1.131
date	2009.05.08.23.18.01;	author rjw;	state Exp;
branches;
next	1.130;

1.130
date	2009.01.30.16.07.20;	author rjw;	state Exp;
branches;
next	1.129;

1.129
date	2008.07.02.17.48.38;	author rjw;	state Exp;
branches;
next	1.128;

1.128
date	2007.10.15.21.50.36;	author rjw;	state Exp;
branches;
next	1.127;

1.127
date	2007.10.12.21.45.14;	author rjw;	state Exp;
branches;
next	1.126;

1.126
date	2007.05.10.20.08.50;	author rjw;	state Exp;
branches;
next	1.125;

1.125
date	2007.04.10.19.33.15;	author rjw;	state Exp;
branches;
next	1.124;

1.124
date	2007.04.10.18.14.55;	author rjw;	state Exp;
branches;
next	1.123;

1.123
date	2007.04.10.16.33.22;	author rjw;	state Exp;
branches;
next	1.122;

1.122
date	2007.04.09.16.05.09;	author rjw;	state Exp;
branches;
next	1.121;

1.121
date	2007.04.02.23.01.16;	author rjw;	state Exp;
branches;
next	1.120;

1.120
date	2007.03.30.22.33.04;	author rjw;	state Exp;
branches;
next	1.119;

1.119
date	2007.03.29.21.16.49;	author rjw;	state Exp;
branches;
next	1.118;

1.118
date	2007.03.28.22.14.33;	author rjw;	state Exp;
branches;
next	1.117;

1.117
date	2007.01.29.22.34.14;	author rjw;	state Exp;
branches;
next	1.116;

1.116
date	2007.01.29.21.52.04;	author rjw;	state Exp;
branches;
next	1.115;

1.115
date	2006.11.02.23.07.14;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2006.09.27.20.10.18;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2006.09.22.17.59.05;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2006.09.21.20.31.53;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2006.09.19.17.50.56;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2006.09.08.20.00.59;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2006.09.08.16.16.02;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2006.08.30.16.37.36;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2006.08.24.20.50.28;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2006.08.22.21.26.56;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2006.08.02.17.27.32;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2006.05.19.23.04.33;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2006.05.10.14.45.13;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2006.05.08.19.51.25;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2006.05.02.17.34.17;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2006.03.28.15.59.00;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2006.03.20.23.47.34;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2006.03.10.23.23.32;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2006.01.18.21.42.59;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2005.11.10.20.33.09;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2005.08.19.21.38.04;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2005.08.12.19.35.30;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2005.07.13.21.18.47;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2005.02.24.23.23.58;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2005.02.08.20.36.19;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2005.02.04.21.17.34;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2005.02.04.20.11.43;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2005.02.03.23.35.58;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2005.02.03.23.15.35;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2005.02.03.21.31.36;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2005.02.02.17.26.54;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2005.01.31.23.59.31;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2005.01.28.19.34.28;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2005.01.21.23.01.52;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2005.01.17.23.43.10;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2004.12.02.21.25.41;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2004.11.09.23.08.01;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2004.11.06.00.30.34;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2004.11.04.20.42.28;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2004.05.12.19.43.31;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2004.04.20.18.25.21;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2004.04.19.22.16.30;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2004.04.16.17.42.50;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2004.04.06.18.16.58;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2004.04.06.15.42.18;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2004.03.25.22.00.37;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2004.03.25.21.43.33;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2004.03.25.21.21.59;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2004.03.25.20.35.03;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2004.03.25.19.59.38;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2004.03.11.16.36.19;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2004.02.27.21.00.30;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2004.02.26.20.40.27;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2004.02.26.18.59.43;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2004.02.24.19.37.23;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2004.02.20.15.37.36;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2004.02.19.22.56.11;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2004.02.17.20.23.47;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2004.02.14.00.45.36;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2004.02.12.19.13.41;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2004.02.10.23.57.45;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2004.02.05.21.24.56;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2004.02.05.16.39.44;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2004.02.04.22.31.28;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2004.02.04.18.57.49;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2004.01.19.23.26.51;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2004.01.16.18.48.26;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2004.01.05.23.37.34;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2003.12.31.21.44.54;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2003.12.30.22.10.47;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2003.12.30.20.41.45;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2003.12.30.18.08.29;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2003.12.29.20.59.23;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2003.12.24.23.25.56;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2003.12.23.16.18.48;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2003.12.15.23.22.33;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2003.10.31.15.37.55;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2003.09.22.23.13.52;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2003.09.22.20.27.02;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2003.02.14.20.13.05;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2003.01.31.21.29.01;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2003.01.22.19.32.16;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2003.01.16.22.50.40;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.01.02.23.40.55;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.01.02.22.18.57;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2002.12.23.20.44.50;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2002.12.20.22.48.02;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.12.19.17.15.25;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.10.18.22.24.00;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.10.16.22.30.24;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.07.10.19.06.02;	author austel;	state Exp;
branches;
next	1.24;

1.24
date	2002.04.18.14.02.49;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2001.12.20.18.50.07;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.12.19.16.17.14;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.11.09.21.42.29;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.08.19.40.12;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.10.05.20.54.00;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.10.05.18.55.30;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.10.03.18.55.13;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.28.21.42.40;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.28.20.50.29;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.09.16.21.42.34;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.31.15.06.12;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.31.00.26.27;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.30.23.00.36;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.06.17.31.10;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.03.18.40.45;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.30.15.12.13;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.28.00.48.37;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.25.16.08.22;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.13.21.03.56;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.08.21.56.16;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.14.22.38.37;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.20;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.33;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.33;	author wit;	state Exp;
branches;
next	;


desc
@@


1.150
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "globApi.C"
//
// Inner API functions relating to global attributes, other than for
// optimizing implosion.
//------------------------------------------------------------------------------

#include <WitRun.h>
#include <ApiMgr.h>
#include <ApiCall.h>
#include <HeurAllMgr.h>
#include <Pre.h>
#include <Post.h>
#include <Part.h>
#include <GlobalComp.h>
#include <Demand.h>
#include <PclEl.h>
#include <TripStack.h>
#include <PipMgr.h>
#include <ISRealArg.h>
#include <OSRealArg.h>
#include <OVRealArg.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------

void WitRun::witClearPipSeq ()
   {
   WitGlobalCompApiCall theCall (this);

   myProblem ()->myPipMgr ()->clearShipSeq ();
   }

//------------------------------------------------------------------------------

void WitRun::witGetAppData (void * * appData)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (appData, "appData", theCall.myGlobalComp ()->appData ());

   issueGetAttrMsg ("appData");
   }

//------------------------------------------------------------------------------

void WitRun::witGetAutoPriority (WitBoolean * autoPriority)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    autoPriority, 
                              "autoPriority", 
      theCall.myGlobalComp ()->autoPriority ());


   issueGetAttrMsg ("autoPriority");
   }

//------------------------------------------------------------------------------

void WitRun::witGetBuildWhenEmpty (WitBoolean * buildWhenEmpty)
   {
   WitGlobalCompApiCall theCall (this);

   if (wit34Compatible ())
      {
      myMsgFac () ("getting34AttributeWithCompatibilityMode",
         apiFuncName (),
         "Global",
         "buildWhenEmpty",
         "Global",
         "execEmptyBom");

      witGetExecEmptyBom (buildWhenEmpty);
      }
   else
      myMsgFac () ("getting34AttributeWithoutCompatibilityMode",
         apiFuncName (),
         "Global",
         "buildWhenEmpty",
         "Global",
         "execEmptyBom");
   }

//------------------------------------------------------------------------------

void WitRun::witGetComputeCriticalList (
      WitBoolean * computeCriticalList)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (
                               computeCriticalList,
                              "computeCriticalList",
      theCall.myGlobalComp ()->computeCriticalList ());

   issueGetAttrMsg ("computeCriticalList");
   }

//------------------------------------------------------------------------------

void WitRun::witGetCriticalList (
      int  *     lenCritList,
      char * * * partList,
      int  * *   perList)
   {
   int       theIdx;
   WitPart * thePart;
   WitPeriod thePer;

   WitPairStItr <WitPart, WitPeriod> theItr;
   WitGlobalCompApiCall              theCall (this);

   forbidNullArg (lenCritList, "lenCritList");
   forbidNullArg (partList,    "critPartList");
   forbidNullArg (perList,     "critPeriod");

   * lenCritList = theCall.myGlobalComp ()->revCritList ().nElements ();

   apiAlloc (partList, * lenCritList);
   apiAlloc (perList,  * lenCritList);

   theIdx = * lenCritList;

   theCall.myGlobalComp ()->revCritList ().attachItr (theItr);

   while (theItr.advance (thePart, thePer))
      {
      theIdx --;

      (* partList)[theIdx] = thePart->partName ().apiDupCstring ();
      (* perList) [theIdx] = thePer;
      }
   }

//------------------------------------------------------------------------------

void WitRun::witGetEquitability (int * equitability)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    equitability,
                              "equitability",
      theCall.myGlobalComp ()->equitability ());

   issueGetAttrMsg ("equitability");
   }

//------------------------------------------------------------------------------

void WitRun::witGetExecEmptyBom (WitBoolean * execEmptyBom)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    execEmptyBom, 
                              "execEmptyBom", 
      theCall.myGlobalComp ()->execEmptyBom ());

   issueGetAttrMsg ("execEmptyBom");
   }

//------------------------------------------------------------------------------

void WitRun::witGetExpCutoff (const WitOSRealArg & expCutoff)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (expCutoff, "expCutoff", theCall.myGlobalComp ()->expCutoff ());

   issueGetAttrMsg ("expCutoff");
   }

//------------------------------------------------------------------------------

void WitRun::witGetFeasible (WitBoolean * feasible)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (feasible, "feasible", theCall.myGlobalComp ()->feasible ());

   issueGetAttrMsg ("feasible");
   }

//------------------------------------------------------------------------------

void WitRun::witGetForcedMultiEq (WitBoolean * forcedMultiEq)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    forcedMultiEq, 
                              "forcedMultiEq", 
      theCall.myGlobalComp ()->forcedMultiEq ());

   issueGetAttrMsg ("forcedMultiEq");
   }

//------------------------------------------------------------------------------

void WitRun::witGetHashTableSize (int * hashTableSize)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    hashTableSize, 
                              "hashTableSize", 
      theCall.myGlobalComp ()->hashTableSize ());

   issueGetAttrMsg ("hashTableSize");
   }

//------------------------------------------------------------------------------

void WitRun::witGetHeurAllocActive (WitBoolean * heurAllocActive)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (
       heurAllocActive,
      "heurAllocActive",
      myProblem ()->myHeurAllMgr ()->active ());

   issueGetAttrMsg ("heurAllocActive");
   }

//------------------------------------------------------------------------------

void WitRun::witGetHighPrecisionWD (WitBoolean * highPrecisionWD)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (highPrecisionWD, 
      "highPrecisionWD", 
      theCall.myGlobalComp ()->highPrecisionWD ());

   issueGetAttrMsg ("highPrecisionWD");
   }

//------------------------------------------------------------------------------

void WitRun::witGetIndependentOffsets (WitBoolean * independentOffsets)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    independentOffsets, 
                              "independentOffsets", 
      theCall.myGlobalComp ()->independentOffsets ());

   issueGetAttrMsg ("independentOffsets");
   }

//------------------------------------------------------------------------------

void WitRun::witGetLocalBuildAhead (WitBoolean * localBuildAhead)
   {
   WitGlobalCompApiCall theCall (this);

   myMsgFac () ("lbaWmsg", "witGetLocalBuildAhead");

   apiGet (                    localBuildAhead, 
                              "localBuildAhead",
      theCall.myGlobalComp ()->localBuildAhead ());

   issueGetAttrMsg ("localBuildAhead");
   }

//------------------------------------------------------------------------------

void WitRun::witGetLocalMultiExec (WitBoolean * localMultiExec)
   {
   WitGlobalCompApiCall theCall (this);

   myMsgFac () ("lmeWmsg", "witGetLocalMultiExec");

   apiGet (                    localMultiExec,
                              "localMultiExec",
      theCall.myGlobalComp ()->localMultiExec ());

   issueGetAttrMsg ("localMultiExec");
   }

//------------------------------------------------------------------------------

void WitRun::witGetLotSizeTol (const WitOSRealArg & lotSizeTol)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (lotSizeTol, "lotSizeTol", theCall.myGlobalComp ()->lotSizeTol ());

   issueGetAttrMsg ("lotSizeTol");
   }

//------------------------------------------------------------------------------

void WitRun::witGetMinimalExcess  (WitBoolean * minimalExcess)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    minimalExcess,
                              "minimalExcess", 
      theCall.myGlobalComp ()->minimalExcess ());

   issueGetAttrMsg ("minimalExcess");
   }

//------------------------------------------------------------------------------

void WitRun::witGetModHeurAlloc (WitBoolean * modHeurAlloc)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (modHeurAlloc, 
      "modHeurAlloc", 
      theCall.myGlobalComp ()->modHeurAlloc ());

   issueGetAttrMsg ("modHeurAlloc");
   }

//------------------------------------------------------------------------------

void WitRun::witGetMultiExec (WitBoolean * multiExec)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (multiExec, "multiExec", theCall.myGlobalComp ()->multiExec ());

   issueGetAttrMsg ("multiExec");
   }

//------------------------------------------------------------------------------

void WitRun::witGetMultiRoute  (WitBoolean * multiRoute)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (multiRoute, "multiRoute", theCall.myGlobalComp ()->multiRoute ());

   issueGetAttrMsg ("multiRoute");
   }

//------------------------------------------------------------------------------

void WitRun::witGetNPeriods (int * nPeriodsArg)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (nPeriodsArg, "nPeriods", nPeriods ());

   issueGetAttrMsg ("nPeriods");
   }

//------------------------------------------------------------------------------

void WitRun::witGetNewPipPggOrder (WitBoolean * newPipPggOrder)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    newPipPggOrder, 
                              "newPipPggOrder", 
      theCall.myGlobalComp ()->newPipPggOrder ());

   issueGetAttrMsg ("newPipPggOrder");
   }

//------------------------------------------------------------------------------

void WitRun::witGetNonMrSelSplit (WitBoolean * nonMrSelSplit)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (nonMrSelSplit, 
      "nonMrSelSplit", 
      theCall.myGlobalComp ()->nonMrSelSplit ());

   issueGetAttrMsg ("nonMrSelSplit");
   }

//------------------------------------------------------------------------------

void WitRun::witGetNstnResidual (WitBoolean * nstnResidual)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (nstnResidual, 
      "nstnResidual", 
      theCall.myGlobalComp ()->nstnResidual ());

   issueGetAttrMsg ("nstnResidual");
   }

//------------------------------------------------------------------------------

void WitRun::witGetOutputPrecision (int * outputPrecision)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    outputPrecision, 
                              "outputPrecision",
      theCall.myGlobalComp ()->outputPrecision ());

   issueGetAttrMsg ("outputPrecision");
   }

//------------------------------------------------------------------------------

void WitRun::witGetPenExec (WitBoolean * penExec)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (penExec, "penExec", theCall.myGlobalComp ()->penExec ());

   issueGetAttrMsg ("penExec");
   }

//------------------------------------------------------------------------------

void WitRun::witGetPerfPegging (WitBoolean * perfPegging)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (perfPegging, 
      "perfPegging", 
      theCall.myGlobalComp ()->perfPegging ());

   issueGetAttrMsg ("perfPegging");
   }

//------------------------------------------------------------------------------

void WitRun::witGetPgdCritList (
      int *      lenLists,
      char * * * critPartNameList,
      int * *    critPerList,
      char * * * demPartNameList,
      char * * * demandNameList,
      int * *    shipPerList)
   {
   int        theIdx;
   WitPclEl * thePclEl;

   WitGlobalCompApiCall theCall (this);

   forbidNullArg (lenLists,         "lenLists");
   forbidNullArg (critPartNameList, "critPartNameList");
   forbidNullArg (critPerList,      "critPerList");
   forbidNullArg (demPartNameList,  "demPartNameList");
   forbidNullArg (demandNameList,   "demandNameList");
   forbidNullArg (shipPerList,      "shipPerList");

   * lenLists = theCall.myGlobalComp ()->pgdCritList ().nElements ();

   apiAlloc (critPartNameList, * lenLists);
   apiAlloc (critPerList,      * lenLists);
   apiAlloc (demPartNameList,  * lenLists);
   apiAlloc (demandNameList,   * lenLists);
   apiAlloc (shipPerList,      * lenLists);

   theIdx = 0;

   forEachEl (thePclEl, theCall.myGlobalComp ()->pgdCritList ())
      {
      (* critPartNameList)[theIdx] =
         thePclEl->critPart ()->partName ().apiDupCstring ();

      (* critPerList)[theIdx] = thePclEl->critPer ();

      (* demPartNameList)[theIdx] =
         thePclEl->myDemand ()->demandedPartName ().apiDupCstring ();

      (* demandNameList)[theIdx] =
         thePclEl->myDemand ()->demandName ().apiDupCstring ();

      (* shipPerList)[theIdx] = thePclEl->myShipPer ();

      theIdx ++;
      }
   }

//------------------------------------------------------------------------------

void WitRun::witGetPgdCritListMode (WitBoolean * pgdCritListMode)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (
                               pgdCritListMode,
                              "pgdCritListMode",
      theCall.myGlobalComp ()->pgdCritListMode ());

   issueGetAttrMsg ("pgdCritListMode");
   }

//------------------------------------------------------------------------------

void WitRun::witGetPipExists (WitBoolean * pipExists)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (pipExists, "pipExists", myProblem ()->myPipMgr ()->peggingExists ());

   issueGetAttrMsg ("pipExists");
   }

//------------------------------------------------------------------------------

void WitRun::witGetPipSeq (
      int *                lenLists,
      char * * *           partNameList,
      char * * *           demandNameList,
      int * *              shipPerList,
      const WitOVRealArg & incShipVolList)
   {
   WitDemTripStack theShipSeq (myProblem ());
   int             nTrips;
   int             theIdx;
   WitDemand *     theDemand;
   WitPeriod       shipPer;
   double          incShipVol;

   WitGlobalCompApiCall theCall (this);

   myProblem ()->myPipMgr ()->getShipSeq (theShipSeq);

   nTrips = theShipSeq.nElements ();

   apiGet (lenLists, "lenLists", nTrips);

   forbidNullArg (partNameList,   "partNameList");
   forbidNullArg (demandNameList, "demandNameList");
   forbidNullArg (shipPerList,    "shipPerList");
   forbidNullArg (incShipVolList, "incShipVolList");

   apiAlloc (partNameList,   nTrips);
   apiAlloc (demandNameList, nTrips);
   apiAlloc (shipPerList,    nTrips);
   apiAlloc (incShipVolList, nTrips);

   theIdx = -1;

   while (theShipSeq.pop (theDemand, shipPer, incShipVol))
      {
      theIdx ++;

      (* partNameList)  [theIdx] =
         theDemand->demandedPartName ().apiDupCstring ();

      (* demandNameList)[theIdx] = theDemand->demandName ().apiDupCstring ();
      (* shipPerList)   [theIdx] = shipPer;
      incShipVolList    [theIdx] = incShipVol;
      }
   }

//------------------------------------------------------------------------------

void WitRun::witGetPipSeqFromHeur (WitBoolean * pipSeqFromHeur)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (pipSeqFromHeur, 
      "pipSeqFromHeur", 
      theCall.myGlobalComp ()->pipSeqFromHeur ());

   issueGetAttrMsg ("pipSeqFromHeur");
   }

//------------------------------------------------------------------------------

void WitRun::witGetPostprocessed (WitBoolean * postprocessed)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (
       postprocessed,
      "postprocessed",
      myProblem ()->myPostprocessor ()->postprocessed ());

   issueGetAttrMsg ("postprocessed");
   }

//------------------------------------------------------------------------------

void WitRun::witGetPrefHighStockSLBs (WitBoolean * prefHighStockSLBs)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (prefHighStockSLBs, 
      "prefHighStockSLBs", 
      theCall.myGlobalComp ()->prefHighStockSLBs ());

   issueGetAttrMsg ("prefHighStockSLBs");
   }

//------------------------------------------------------------------------------

void WitRun::witGetPreprocessed (WitBoolean * preprocessed)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (
       preprocessed,
      "preprocessed",
      myProblem ()->myPreprocessor ()->preprocessed ());

   issueGetAttrMsg ("preprocessed");
   }

//------------------------------------------------------------------------------

void WitRun::witGetRespectStockSLBs (WitBoolean * respectStockSLBs)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (respectStockSLBs, 
      "respectStockSLBs", 
      theCall.myGlobalComp ()->respectStockSLBs ());

   issueGetAttrMsg ("respectStockSLBs");
   }

//------------------------------------------------------------------------------

void WitRun::witGetRoundReqVols (WitBoolean * roundReqVols)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    roundReqVols, 
                              "roundReqVols", 
      theCall.myGlobalComp ()->roundReqVols ());

   issueGetAttrMsg ("roundReqVols");
   }

//------------------------------------------------------------------------------

void WitRun::witGetSelSplit (WitBoolean * selSplit)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (selSplit, 
      "selSplit", 
      theCall.myGlobalComp ()->selSplit ());

   issueGetAttrMsg ("selSplit");
   }

//------------------------------------------------------------------------------

void WitRun::witGetSelectionRecovery  (WitBoolean * selectionRecovery)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    selectionRecovery,
                              "selectionRecovery",
      theCall.myGlobalComp ()->selectionRecovery ());

   issueGetAttrMsg ("selectionRecovery");
   }

//------------------------------------------------------------------------------

void WitRun::witGetSkipFailures (WitBoolean * skipFailures)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    skipFailures, 
                              "skipFailures", 
      theCall.myGlobalComp ()->skipFailures ());

   issueGetAttrMsg ("skipFailures");
   }

//------------------------------------------------------------------------------

void WitRun::witGetStockRealloc (WitBoolean * stockRealloc)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    stockRealloc, 
                              "stockRealloc", 
      theCall.myGlobalComp ()->stockRealloc ());

   issueGetAttrMsg ("stockRealloc");
   }

//------------------------------------------------------------------------------

void WitRun::witGetStockReallocation (WitBoolean * stockReallocation)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    stockReallocation, 
                              "stockReallocation", 
      theCall.myGlobalComp ()->stockReallocation ());

   issueGetAttrMsg ("stockReallocation");
   }

//------------------------------------------------------------------------------

void WitRun::witGetSrSelSplit (WitBoolean * srSelSplit)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    srSelSplit, 
                              "srSelSplit", 
      theCall.myGlobalComp ()->srSelSplit ());

   issueGetAttrMsg ("srSelSplit");
   }

//------------------------------------------------------------------------------

void WitRun::witGetTieBreakPropRt (WitBoolean * tieBreakPropRt)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    tieBreakPropRt,
                              "tieBreakPropRt",
      theCall.myGlobalComp ()->tieBreakPropRt ());

   issueGetAttrMsg ("tieBreakPropRt");
   }

//------------------------------------------------------------------------------

void WitRun::witGetTitle (char * * title)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (title, "title", theCall.myGlobalComp ()->title ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetTruncOffsets  (WitBoolean * truncOffsets)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    truncOffsets, 
                              "truncOffsets", 
      theCall.myGlobalComp ()->truncOffsets ());

   issueGetAttrMsg ("truncOffsets");
   }

//------------------------------------------------------------------------------

void WitRun::witGetTwoWayMultiExec (WitBoolean * twoWayMultiExec)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    twoWayMultiExec, 
                              "twoWayMultiExec", 
      theCall.myGlobalComp ()->twoWayMultiExec ());

   issueGetAttrMsg ("twoWayMultiExec");
   }

//------------------------------------------------------------------------------

void WitRun::witGetUseFocusHorizons (WitBoolean * useFocusHorizons)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    useFocusHorizons,
                              "useFocusHorizons",
      theCall.myGlobalComp ()->useFocusHorizons ());

   issueGetAttrMsg ("useFocusHorizons");
   }

//------------------------------------------------------------------------------

void WitRun::witGetUserHeurStart (WitBoolean * userHeurStart)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (userHeurStart, 
      "userHeurStart", 
      theCall.myGlobalComp ()->userHeurStart ());

   issueGetAttrMsg ("userHeurStart");
   }

//------------------------------------------------------------------------------

void WitRun::witGetWit34Compatible (WitBoolean * retVal)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (retVal, "wit34Compatible", wit34Compatible ());

   issueGetAttrMsg ("wit34Compatible");
   }

//------------------------------------------------------------------------------

void WitRun::witSetAppData (void * appData)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.setAppData (appData);
   }

//------------------------------------------------------------------------------

void WitRun::witSetAutoPriority (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "autoPriority", 
      theCall.myGlobalComp ()->autoPriority (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setAutoPriority (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetBuildWhenEmpty (WitBoolean boolval)
   {
   myApiMgr_->startInnerFunc ();

   if (wit34Compatible ())
      {
      myMsgFac () ("setting34AttributeWithCompatibilityMode",
         apiFuncName (),
         "Global",
         "buildWhenEmpty",
         "Global",
         "execEmptyBom");

      witSetExecEmptyBom (asaBool (boolval));
      }
   else
      myMsgFac () ("setting34AttributeWithoutCompatibilityMode",
         apiFuncName (),
         "Global",
         "buildWhenEmpty",
         "Global",
         "execEmptyBom");
   }

//------------------------------------------------------------------------------

void WitRun::witSetComputeCriticalList (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "computeCriticalList", 
      theCall.myGlobalComp ()->computeCriticalList (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setComputeCriticalList (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetEquitability (int equit)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepRangedInt (
      "equitability",
      theCall.myGlobalComp ()->equitability (),
      equit,
      1,
      100);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setEquitability (equit);
   }

//------------------------------------------------------------------------------

void WitRun::witSetExecEmptyBom (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "execEmptyBom", 
      theCall.myGlobalComp ()->execEmptyBom (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setExecEmptyBom (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetExpCutoff (const WitISRealArg & theVal)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepLBDouble (
      "expCutoff",
      theCall.myGlobalComp ()->expCutoff (),
      theVal,
      0.999E-6,
      1.0E-6);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setExpCutoff (theVal);
   }

//------------------------------------------------------------------------------

void WitRun::witSetForcedMultiEq (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "forcedMultiEq", 
      theCall.myGlobalComp ()->forcedMultiEq (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setForcedMultiEq (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetHashTableSize (int size)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepNonNegInt (
      "hashTableSize", 
      theCall.myGlobalComp ()->hashTableSize (), 
      size);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setHashTableSize (size);
   }

//------------------------------------------------------------------------------

void WitRun::witSetHighPrecisionWD (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "highPrecisionWD", 
      theCall.myGlobalComp ()->highPrecisionWD (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setHighPrecisionWD (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetIndependentOffsets (WitBoolean theValue)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.reqNoPartsOrOpns ("independentOffsets");

   theCall.prepBool (
      "independentOffsets", 
      theCall.myGlobalComp ()->independentOffsets (), 
      theValue);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setIndependentOffsets (asaBool (theValue));
   }

//------------------------------------------------------------------------------

void WitRun::witSetLocalBuildAhead (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "localBuildAhead", 
      theCall.myGlobalComp ()->localBuildAhead (), 
      boolval);

   myMsgFac () ("lbaWmsg", "witSetLocalBuildAhead");

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setLocalBuildAhead (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetLocalMultiExec (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "localMultiExec", 
      theCall.myGlobalComp ()->localMultiExec (), 
      boolval);

   myMsgFac () ("lmeWmsg", "witSetLocalMultiExec");

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setLocalMultiExec (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetLotSizeTol (const WitISRealArg & theVal)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepNonNegDouble (
      "lotSizeTol", 
      theCall.myGlobalComp ()->lotSizeTol (),
      theVal);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setLotSizeTol (theVal);
   }

//------------------------------------------------------------------------------

void WitRun::witSetMinimalExcess (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "minimalExcess", 
      theCall.myGlobalComp ()->minimalExcess (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setMinimalExcess (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetModHeurAlloc (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "modHeurAlloc", 
      theCall.myGlobalComp ()->modHeurAlloc (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setModHeurAlloc (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetMultiExec (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (not boolval)
      if (myGlobalComp ()->twoWayMultiExec ())
         theCall.prepBool ("twoWayMultiExec", true, WitFALSE);

   theCall.prepBool (
      "multiExec", 
      theCall.myGlobalComp ()->multiExec (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setMultiExec (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetMultiRoute (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "multiRoute", 
      theCall.myGlobalComp ()->multiRoute (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setMultiRoute (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetNPeriods (int nper)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.reqNoPartsOrOpns ("nPeriods");

   theCall.prepImmPosInt (
      "nPeriods", 
      theCall.myGlobalComp ()->nPeriods (), 
      nper);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setNPeriods (nper);
   }

//------------------------------------------------------------------------------

void WitRun::witSetNewPipPggOrder (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "newPipPggOrder", 
      theCall.myGlobalComp ()->newPipPggOrder (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setNewPipPggOrder (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetNonMrSelSplit (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (boolval)
      if (myGlobalComp ()->selSplit ())
         theCall.prepBool ("selSplit", true, WitFALSE);

   theCall.prepBool (
      "nonMrSelSplit", 
      theCall.myGlobalComp ()->nonMrSelSplit (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setNonMrSelSplit (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetNstnResidual (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "nstnResidual", 
      theCall.myGlobalComp ()->nstnResidual (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setNstnResidual (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetOutputPrecision (int outputPrecisionParm)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepNonNegInt (
      "outputPrecision", 
      theCall.myGlobalComp ()->outputPrecision (), 
      outputPrecisionParm);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setOutputPrecision (outputPrecisionParm);
   }

//------------------------------------------------------------------------------

void WitRun::witSetPenExec (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool ("penExec", theCall.myGlobalComp ()->penExec (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPenExec (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetPerfPegging (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "perfPegging", 
      theCall.myGlobalComp ()->perfPegging (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPerfPegging (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetPgdCritListMode (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "pgdCritListMode", 
      theCall.myGlobalComp ()->pgdCritListMode (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPgdCritListMode (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetPipSeqFromHeur (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "pipSeqFromHeur", 
      theCall.myGlobalComp ()->pipSeqFromHeur (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPipSeqFromHeur (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetPrefHighStockSLBs (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "prefHighStockSLBs", 
      theCall.myGlobalComp ()->prefHighStockSLBs (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPrefHighStockSLBs (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetRespectStockSLBs (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "respectStockSLBs", 
      theCall.myGlobalComp ()->respectStockSLBs (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setRespectStockSLBs (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetRoundReqVols (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "roundReqVols", 
      theCall.myGlobalComp ()->roundReqVols (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setRoundReqVols (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetSelSplit (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (boolval)
      if (myGlobalComp ()->nonMrSelSplit ())
         theCall.prepBool ("nonMrSelSplit", true, WitFALSE);

   theCall.prepBool (
      "selSplit", 
      theCall.myGlobalComp ()->selSplit (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setSelSplit (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetSelectionRecovery (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "selectionRecovery", 
      theCall.myGlobalComp ()->selectionRecovery (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setSelectionRecovery (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetSkipFailures (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "skipFailures", 
      theCall.myGlobalComp ()->skipFailures (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setSkipFailures (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetStockRealloc (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (boolval)
      if (theCall.myGlobalComp ()->stockReallocation ())
         myMsgFac () ("bothTrueSmsg", "stockRealloc", "stockReallocation");

   theCall.prepBool (
      "stockRealloc", 
      theCall.myGlobalComp ()->stockRealloc (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setStockRealloc (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetStockReallocation (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (boolval)
      if (theCall.myGlobalComp ()->stockRealloc ())
         myMsgFac () ("bothTrueSmsg", "stockReallocation", "stockRealloc");

   theCall.prepBool (
      "stockReallocation", 
      theCall.myGlobalComp ()->stockReallocation (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setStockReallocation (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetSrSelSplit (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (boolval)
      if (theCall.myGlobalComp ()->stockRealloc ())
         myMsgFac () ("bothTrueSmsg", "srSelSplit", "stockRealloc");

   theCall.prepBool (
      "srSelSplit", 
      theCall.myGlobalComp ()->srSelSplit (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setSrSelSplit (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetTieBreakPropRt (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
                              "tieBreakPropRt",
      theCall.myGlobalComp ()->tieBreakPropRt (),
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setTieBreakPropRt (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetTitle (const char * newTitle)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepString ("title", theCall.myGlobalComp ()->title (), newTitle);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setTitle (newTitle);
   }

//------------------------------------------------------------------------------

void WitRun::witSetTruncOffsets  (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "truncOffsets", 
      theCall.myGlobalComp ()->truncOffsets (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setTruncOffsets (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetTwoWayMultiExec (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (boolval)
      if (not myGlobalComp ()->multiExec ())
         theCall.prepBool ("multiExec", false, WitTRUE);

   theCall.prepBool (
      "twoWayMultiExec", 
      theCall.myGlobalComp ()->twoWayMultiExec (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setTwoWayMultiExec (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetUseFocusHorizons (WitBoolean newValue)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "useFocusHorizons", 
      theCall.myGlobalComp ()->useFocusHorizons (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setUseFocusHorizons (asaBool (newValue));
   }

//------------------------------------------------------------------------------

void WitRun::witSetUserHeurStart (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "userHeurStart", 
      theCall.myGlobalComp ()->userHeurStart (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setUserHeurStart (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetWit34Compatible (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (not theCall.myGlobalComp ()->wit34Allowed ())
      myMsgFac () ("setWit34CompatibleNotAllowedSmsg");

   theCall.prepBool (
      "wit34Compatible", 
      theCall.myGlobalComp ()->wit34Compatible (), 
      boolval);

   if (boolval)
      myMsgFac () ("compatible34WarningMsg");

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setWit34Compatible (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetWit34Allowed (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "wit34Allowed", 
      theCall.myGlobalComp ()->wit34Allowed (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setWit34Allowed (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::issueGetAttrMsg (const char * theAttName) const
   {
   if (myMsgFac ().mayIssue ("getAttrMsg"))
      myMsgFac () ("getAttrMsg", theAttName);
   }

//------------------------------------------------------------------------------

bool WitRun::alwaysTrue ()
   {
   return true;
   }
@


1.149
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.148
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d37 2
a38 2
{
WitGlobalCompApiCall theCall (this);
d40 2
a41 2
myProblem ()->myPipMgr ()->clearShipSeq ();
}
d46 2
a47 2
{
WitGlobalCompApiCall theCall (this);
d49 1
a49 1
apiGet (appData, "appData", theCall.myGlobalComp ()->appData ());
d51 2
a52 2
issueGetAttrMsg ("appData");
}
d57 2
a58 2
{
WitGlobalCompApiCall theCall (this);
d60 3
a62 3
apiGet (                    autoPriority,
"autoPriority",
theCall.myGlobalComp ()->autoPriority ());
d65 2
a66 2
issueGetAttrMsg ("autoPriority");
}
d71 2
a72 2
{
WitGlobalCompApiCall theCall (this);
d74 19
a92 19
if (wit34Compatible ())
{
myMsgFac () ("getting34AttributeWithCompatibilityMode",
apiFuncName (),
"Global",
"buildWhenEmpty",
"Global",
"execEmptyBom");

witGetExecEmptyBom (buildWhenEmpty);
}
else
myMsgFac () ("getting34AttributeWithoutCompatibilityMode",
apiFuncName (),
"Global",
"buildWhenEmpty",
"Global",
"execEmptyBom");
}
d97 8
a104 8
WitBoolean * computeCriticalList)
{
WitGlobalCompApiCall theCall (this);

apiGet (
computeCriticalList,
"computeCriticalList",
theCall.myGlobalComp ()->computeCriticalList ());
d106 2
a107 2
issueGetAttrMsg ("computeCriticalList");
}
d112 32
a143 32
int  *     lenCritList,
char * * * partList,
int  * *   perList)
{
int       theIdx;
WitPart * thePart;
WitPeriod thePer;

WitPairStItr <WitPart, WitPeriod> theItr;
WitGlobalCompApiCall              theCall (this);

forbidNullArg (lenCritList, "lenCritList");
forbidNullArg (partList,    "critPartList");
forbidNullArg (perList,     "critPeriod");

* lenCritList = theCall.myGlobalComp ()->revCritList ().nElements ();

apiAlloc (partList, * lenCritList);
apiAlloc (perList,  * lenCritList);

theIdx = * lenCritList;

theCall.myGlobalComp ()->revCritList ().attachItr (theItr);

while (theItr.advance (thePart, thePer))
{
theIdx --;

(* partList)[theIdx] = thePart->partName ().apiDupCstring ();
(* perList) [theIdx] = thePer;
}
}
d148 2
a149 2
{
WitGlobalCompApiCall theCall (this);
d151 3
a153 3
apiGet (                    equitability,
"equitability",
theCall.myGlobalComp ()->equitability ());
d155 2
a156 2
issueGetAttrMsg ("equitability");
}
d161 2
a162 2
{
WitGlobalCompApiCall theCall (this);
d164 3
a166 3
apiGet (                    execEmptyBom,
"execEmptyBom",
theCall.myGlobalComp ()->execEmptyBom ());
d168 2
a169 2
issueGetAttrMsg ("execEmptyBom");
}
d174 2
a175 2
{
WitGlobalCompApiCall theCall (this);
d177 1
a177 1
apiGet (expCutoff, "expCutoff", theCall.myGlobalComp ()->expCutoff ());
d179 2
a180 2
issueGetAttrMsg ("expCutoff");
}
d185 2
a186 2
{
WitGlobalCompApiCall theCall (this);
d188 1
a188 1
apiGet (feasible, "feasible", theCall.myGlobalComp ()->feasible ());
d190 2
a191 2
issueGetAttrMsg ("feasible");
}
d196 2
a197 2
{
WitGlobalCompApiCall theCall (this);
d199 3
a201 3
apiGet (                    forcedMultiEq,
"forcedMultiEq",
theCall.myGlobalComp ()->forcedMultiEq ());
d203 2
a204 2
issueGetAttrMsg ("forcedMultiEq");
}
d209 2
a210 2
{
WitGlobalCompApiCall theCall (this);
d212 3
a214 3
apiGet (                    hashTableSize,
"hashTableSize",
theCall.myGlobalComp ()->hashTableSize ());
d216 2
a217 2
issueGetAttrMsg ("hashTableSize");
}
d222 2
a223 2
{
WitGlobalCompApiCall theCall (this);
d225 4
a228 4
apiGet (
heurAllocActive,
"heurAllocActive",
myProblem ()->myHeurAllMgr ()->active ());
d230 2
a231 2
issueGetAttrMsg ("heurAllocActive");
}
d236 2
a237 2
{
WitGlobalCompApiCall theCall (this);
d239 3
a241 3
apiGet (highPrecisionWD,
"highPrecisionWD",
theCall.myGlobalComp ()->highPrecisionWD ());
d243 2
a244 2
issueGetAttrMsg ("highPrecisionWD");
}
d249 2
a250 2
{
WitGlobalCompApiCall theCall (this);
d252 3
a254 3
apiGet (                    independentOffsets,
"independentOffsets",
theCall.myGlobalComp ()->independentOffsets ());
d256 2
a257 2
issueGetAttrMsg ("independentOffsets");
}
d262 2
a263 2
{
WitGlobalCompApiCall theCall (this);
d265 1
a265 1
myMsgFac () ("lbaWmsg", "witGetLocalBuildAhead");
d267 3
a269 3
apiGet (                    localBuildAhead,
"localBuildAhead",
theCall.myGlobalComp ()->localBuildAhead ());
d271 2
a272 2
issueGetAttrMsg ("localBuildAhead");
}
d277 2
a278 2
{
WitGlobalCompApiCall theCall (this);
d280 1
a280 1
myMsgFac () ("lmeWmsg", "witGetLocalMultiExec");
d282 3
a284 3
apiGet (                    localMultiExec,
"localMultiExec",
theCall.myGlobalComp ()->localMultiExec ());
d286 2
a287 2
issueGetAttrMsg ("localMultiExec");
}
d292 2
a293 2
{
WitGlobalCompApiCall theCall (this);
d295 1
a295 1
apiGet (lotSizeTol, "lotSizeTol", theCall.myGlobalComp ()->lotSizeTol ());
d297 2
a298 2
issueGetAttrMsg ("lotSizeTol");
}
d303 2
a304 2
{
WitGlobalCompApiCall theCall (this);
d306 3
a308 3
apiGet (                    minimalExcess,
"minimalExcess",
theCall.myGlobalComp ()->minimalExcess ());
d310 2
a311 2
issueGetAttrMsg ("minimalExcess");
}
d316 2
a317 2
{
WitGlobalCompApiCall theCall (this);
d319 3
a321 3
apiGet (modHeurAlloc,
"modHeurAlloc",
theCall.myGlobalComp ()->modHeurAlloc ());
d323 2
a324 2
issueGetAttrMsg ("modHeurAlloc");
}
d329 2
a330 2
{
WitGlobalCompApiCall theCall (this);
d332 1
a332 1
apiGet (multiExec, "multiExec", theCall.myGlobalComp ()->multiExec ());
d334 2
a335 2
issueGetAttrMsg ("multiExec");
}
d340 2
a341 2
{
WitGlobalCompApiCall theCall (this);
d343 1
a343 1
apiGet (multiRoute, "multiRoute", theCall.myGlobalComp ()->multiRoute ());
d345 2
a346 2
issueGetAttrMsg ("multiRoute");
}
d351 2
a352 2
{
WitGlobalCompApiCall theCall (this);
d354 1
a354 1
apiGet (nPeriodsArg, "nPeriods", nPeriods ());
d356 2
a357 2
issueGetAttrMsg ("nPeriods");
}
d362 2
a363 2
{
WitGlobalCompApiCall theCall (this);
d365 3
a367 3
apiGet (                    newPipPggOrder,
"newPipPggOrder",
theCall.myGlobalComp ()->newPipPggOrder ());
d369 2
a370 2
issueGetAttrMsg ("newPipPggOrder");
}
d375 2
a376 2
{
WitGlobalCompApiCall theCall (this);
d378 3
a380 3
apiGet (nonMrSelSplit,
"nonMrSelSplit",
theCall.myGlobalComp ()->nonMrSelSplit ());
d382 2
a383 2
issueGetAttrMsg ("nonMrSelSplit");
}
d388 2
a389 2
{
WitGlobalCompApiCall theCall (this);
d391 3
a393 3
apiGet (nstnResidual,
"nstnResidual",
theCall.myGlobalComp ()->nstnResidual ());
d395 2
a396 2
issueGetAttrMsg ("nstnResidual");
}
d401 2
a402 2
{
WitGlobalCompApiCall theCall (this);
d404 3
a406 3
apiGet (                    outputPrecision,
"outputPrecision",
theCall.myGlobalComp ()->outputPrecision ());
d408 2
a409 2
issueGetAttrMsg ("outputPrecision");
}
d414 2
a415 2
{
WitGlobalCompApiCall theCall (this);
d417 1
a417 1
apiGet (penExec, "penExec", theCall.myGlobalComp ()->penExec ());
d419 2
a420 2
issueGetAttrMsg ("penExec");
}
d425 2
a426 2
{
WitGlobalCompApiCall theCall (this);
d428 3
a430 3
apiGet (perfPegging,
"perfPegging",
theCall.myGlobalComp ()->perfPegging ());
d432 2
a433 2
issueGetAttrMsg ("perfPegging");
}
d438 47
a484 47
int *      lenLists,
char * * * critPartNameList,
int * *    critPerList,
char * * * demPartNameList,
char * * * demandNameList,
int * *    shipPerList)
{
int        theIdx;
WitPclEl * thePclEl;

WitGlobalCompApiCall theCall (this);

forbidNullArg (lenLists,         "lenLists");
forbidNullArg (critPartNameList, "critPartNameList");
forbidNullArg (critPerList,      "critPerList");
forbidNullArg (demPartNameList,  "demPartNameList");
forbidNullArg (demandNameList,   "demandNameList");
forbidNullArg (shipPerList,      "shipPerList");

* lenLists = theCall.myGlobalComp ()->pgdCritList ().nElements ();

apiAlloc (critPartNameList, * lenLists);
apiAlloc (critPerList,      * lenLists);
apiAlloc (demPartNameList,  * lenLists);
apiAlloc (demandNameList,   * lenLists);
apiAlloc (shipPerList,      * lenLists);

theIdx = 0;

forEachEl (thePclEl, theCall.myGlobalComp ()->pgdCritList ())
{
(* critPartNameList)[theIdx] =
thePclEl->critPart ()->partName ().apiDupCstring ();

(* critPerList)[theIdx] = thePclEl->critPer ();

(* demPartNameList)[theIdx] =
thePclEl->myDemand ()->demandedPartName ().apiDupCstring ();

(* demandNameList)[theIdx] =
thePclEl->myDemand ()->demandName ().apiDupCstring ();

(* shipPerList)[theIdx] = thePclEl->myShipPer ();

theIdx ++;
}
}
d489 2
a490 2
{
WitGlobalCompApiCall theCall (this);
d492 4
a495 4
apiGet (
pgdCritListMode,
"pgdCritListMode",
theCall.myGlobalComp ()->pgdCritListMode ());
d497 2
a498 2
issueGetAttrMsg ("pgdCritListMode");
}
d503 2
a504 2
{
WitGlobalCompApiCall theCall (this);
d506 1
a506 1
apiGet (pipExists, "pipExists", myProblem ()->myPipMgr ()->peggingExists ());
d508 2
a509 2
issueGetAttrMsg ("pipExists");
}
d514 45
a558 45
int *                lenLists,
char * * *           partNameList,
char * * *           demandNameList,
int * *              shipPerList,
const WitOVRealArg & incShipVolList)
{
WitDemTripStack theShipSeq (myProblem ());
int             nTrips;
int             theIdx;
WitDemand *     theDemand;
WitPeriod       shipPer;
double          incShipVol;

WitGlobalCompApiCall theCall (this);

myProblem ()->myPipMgr ()->getShipSeq (theShipSeq);

nTrips = theShipSeq.nElements ();

apiGet (lenLists, "lenLists", nTrips);

forbidNullArg (partNameList,   "partNameList");
forbidNullArg (demandNameList, "demandNameList");
forbidNullArg (shipPerList,    "shipPerList");
forbidNullArg (incShipVolList, "incShipVolList");

apiAlloc (partNameList,   nTrips);
apiAlloc (demandNameList, nTrips);
apiAlloc (shipPerList,    nTrips);
apiAlloc (incShipVolList, nTrips);

theIdx = -1;

while (theShipSeq.pop (theDemand, shipPer, incShipVol))
{
theIdx ++;

(* partNameList)  [theIdx] =
theDemand->demandedPartName ().apiDupCstring ();

(* demandNameList)[theIdx] = theDemand->demandName ().apiDupCstring ();
(* shipPerList)   [theIdx] = shipPer;
incShipVolList    [theIdx] = incShipVol;
}
}
d563 2
a564 2
{
WitGlobalCompApiCall theCall (this);
d566 3
a568 3
apiGet (pipSeqFromHeur,
"pipSeqFromHeur",
theCall.myGlobalComp ()->pipSeqFromHeur ());
d570 2
a571 2
issueGetAttrMsg ("pipSeqFromHeur");
}
d576 2
a577 2
{
WitGlobalCompApiCall theCall (this);
d579 4
a582 4
apiGet (
postprocessed,
"postprocessed",
myProblem ()->myPostprocessor ()->postprocessed ());
d584 2
a585 2
issueGetAttrMsg ("postprocessed");
}
d590 2
a591 2
{
WitGlobalCompApiCall theCall (this);
d593 3
a595 3
apiGet (prefHighStockSLBs,
"prefHighStockSLBs",
theCall.myGlobalComp ()->prefHighStockSLBs ());
d597 2
a598 2
issueGetAttrMsg ("prefHighStockSLBs");
}
d603 2
a604 2
{
WitGlobalCompApiCall theCall (this);
d606 4
a609 4
apiGet (
preprocessed,
"preprocessed",
myProblem ()->myPreprocessor ()->preprocessed ());
d611 2
a612 2
issueGetAttrMsg ("preprocessed");
}
d617 2
a618 2
{
WitGlobalCompApiCall theCall (this);
d620 3
a622 3
apiGet (respectStockSLBs,
"respectStockSLBs",
theCall.myGlobalComp ()->respectStockSLBs ());
d624 2
a625 2
issueGetAttrMsg ("respectStockSLBs");
}
d630 2
a631 2
{
WitGlobalCompApiCall theCall (this);
d633 3
a635 3
apiGet (                    roundReqVols,
"roundReqVols",
theCall.myGlobalComp ()->roundReqVols ());
d637 2
a638 2
issueGetAttrMsg ("roundReqVols");
}
d643 2
a644 2
{
WitGlobalCompApiCall theCall (this);
d646 3
a648 3
apiGet (selSplit,
"selSplit",
theCall.myGlobalComp ()->selSplit ());
d650 2
a651 2
issueGetAttrMsg ("selSplit");
}
d656 2
a657 2
{
WitGlobalCompApiCall theCall (this);
d659 3
a661 3
apiGet (                    selectionRecovery,
"selectionRecovery",
theCall.myGlobalComp ()->selectionRecovery ());
d663 2
a664 2
issueGetAttrMsg ("selectionRecovery");
}
d669 2
a670 2
{
WitGlobalCompApiCall theCall (this);
d672 3
a674 3
apiGet (                    skipFailures,
"skipFailures",
theCall.myGlobalComp ()->skipFailures ());
d676 2
a677 2
issueGetAttrMsg ("skipFailures");
}
d682 2
a683 2
{
WitGlobalCompApiCall theCall (this);
d685 3
a687 3
apiGet (                    stockRealloc,
"stockRealloc",
theCall.myGlobalComp ()->stockRealloc ());
d689 2
a690 2
issueGetAttrMsg ("stockRealloc");
}
d695 2
a696 2
{
WitGlobalCompApiCall theCall (this);
d698 3
a700 3
apiGet (                    stockReallocation,
"stockReallocation",
theCall.myGlobalComp ()->stockReallocation ());
d702 2
a703 2
issueGetAttrMsg ("stockReallocation");
}
d708 2
a709 2
{
WitGlobalCompApiCall theCall (this);
d711 3
a713 3
apiGet (                    srSelSplit,
"srSelSplit",
theCall.myGlobalComp ()->srSelSplit ());
d715 2
a716 2
issueGetAttrMsg ("srSelSplit");
}
d721 2
a722 2
{
WitGlobalCompApiCall theCall (this);
d724 3
a726 3
apiGet (                    tieBreakPropRt,
"tieBreakPropRt",
theCall.myGlobalComp ()->tieBreakPropRt ());
d728 2
a729 2
issueGetAttrMsg ("tieBreakPropRt");
}
d734 2
a735 2
{
WitGlobalCompApiCall theCall (this);
d737 2
a738 2
apiGet (title, "title", theCall.myGlobalComp ()->title ());
}
d743 2
a744 2
{
WitGlobalCompApiCall theCall (this);
d746 3
a748 3
apiGet (                    truncOffsets,
"truncOffsets",
theCall.myGlobalComp ()->truncOffsets ());
d750 2
a751 2
issueGetAttrMsg ("truncOffsets");
}
d756 2
a757 2
{
WitGlobalCompApiCall theCall (this);
d759 3
a761 3
apiGet (                    twoWayMultiExec,
"twoWayMultiExec",
theCall.myGlobalComp ()->twoWayMultiExec ());
d763 2
a764 2
issueGetAttrMsg ("twoWayMultiExec");
}
d769 2
a770 2
{
WitGlobalCompApiCall theCall (this);
d772 3
a774 3
apiGet (                    useFocusHorizons,
"useFocusHorizons",
theCall.myGlobalComp ()->useFocusHorizons ());
d776 2
a777 2
issueGetAttrMsg ("useFocusHorizons");
}
d782 2
a783 2
{
WitGlobalCompApiCall theCall (this);
d785 3
a787 3
apiGet (userHeurStart,
"userHeurStart",
theCall.myGlobalComp ()->userHeurStart ());
d789 2
a790 2
issueGetAttrMsg ("userHeurStart");
}
d795 2
a796 2
{
WitGlobalCompApiCall theCall (this);
d798 1
a798 1
apiGet (retVal, "wit34Compatible", wit34Compatible ());
d800 2
a801 2
issueGetAttrMsg ("wit34Compatible");
}
d806 2
a807 2
{
WitGlobalCompApiCall theCall (this);
d809 2
a810 2
theCall.setAppData (appData);
}
d815 2
a816 2
{
WitGlobalCompApiCall theCall (this);
d818 8
a825 8
theCall.prepBool (
"autoPriority",
theCall.myGlobalComp ()->autoPriority (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setAutoPriority (asaBool (boolval));
}
d830 2
a831 2
{
myApiMgr_->startInnerFunc ();
d833 19
a851 19
if (wit34Compatible ())
{
myMsgFac () ("setting34AttributeWithCompatibilityMode",
apiFuncName (),
"Global",
"buildWhenEmpty",
"Global",
"execEmptyBom");

witSetExecEmptyBom (asaBool (boolval));
}
else
myMsgFac () ("setting34AttributeWithoutCompatibilityMode",
apiFuncName (),
"Global",
"buildWhenEmpty",
"Global",
"execEmptyBom");
}
d856 2
a857 2
{
WitGlobalCompApiCall theCall (this);
d859 8
a866 8
theCall.prepBool (
"computeCriticalList",
theCall.myGlobalComp ()->computeCriticalList (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setComputeCriticalList (asaBool (boolval));
}
d871 2
a872 2
{
WitGlobalCompApiCall theCall (this);
d874 10
a883 10
theCall.prepRangedInt (
"equitability",
theCall.myGlobalComp ()->equitability (),
equit,
1,
100);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setEquitability (equit);
}
d888 2
a889 2
{
WitGlobalCompApiCall theCall (this);
d891 8
a898 8
theCall.prepBool (
"execEmptyBom",
theCall.myGlobalComp ()->execEmptyBom (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setExecEmptyBom (asaBool (boolval));
}
d903 2
a904 2
{
WitGlobalCompApiCall theCall (this);
d906 10
a915 10
theCall.prepLBDouble (
"expCutoff",
theCall.myGlobalComp ()->expCutoff (),
theVal,
0.999E-6,
1.0E-6);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setExpCutoff (theVal);
}
d920 2
a921 2
{
WitGlobalCompApiCall theCall (this);
d923 8
a930 8
theCall.prepBool (
"forcedMultiEq",
theCall.myGlobalComp ()->forcedMultiEq (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setForcedMultiEq (asaBool (boolval));
}
d935 2
a936 2
{
WitGlobalCompApiCall theCall (this);
d938 8
a945 8
theCall.prepNonNegInt (
"hashTableSize",
theCall.myGlobalComp ()->hashTableSize (),
size);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setHashTableSize (size);
}
d950 2
a951 2
{
WitGlobalCompApiCall theCall (this);
d953 7
a959 7
theCall.prepBool (
"highPrecisionWD",
theCall.myGlobalComp ()->highPrecisionWD (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setHighPrecisionWD (asaBool (boolval));
}
d964 2
a965 2
{
WitGlobalCompApiCall theCall (this);
d967 1
a967 1
theCall.reqNoPartsOrOpns ("independentOffsets");
d969 8
a976 8
theCall.prepBool (
"independentOffsets",
theCall.myGlobalComp ()->independentOffsets (),
theValue);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setIndependentOffsets (asaBool (theValue));
}
d981 2
a982 2
{
WitGlobalCompApiCall theCall (this);
d984 10
a993 10
theCall.prepBool (
"localBuildAhead",
theCall.myGlobalComp ()->localBuildAhead (),
boolval);

myMsgFac () ("lbaWmsg", "witSetLocalBuildAhead");

if (theCall.argsOK ())
theCall.myGlobalComp ()->setLocalBuildAhead (asaBool (boolval));
}
d998 2
a999 2
{
WitGlobalCompApiCall theCall (this);
d1001 10
a1010 10
theCall.prepBool (
"localMultiExec",
theCall.myGlobalComp ()->localMultiExec (),
boolval);

myMsgFac () ("lmeWmsg", "witSetLocalMultiExec");

if (theCall.argsOK ())
theCall.myGlobalComp ()->setLocalMultiExec (asaBool (boolval));
}
d1015 2
a1016 2
{
WitGlobalCompApiCall theCall (this);
d1018 8
a1025 8
theCall.prepNonNegDouble (
"lotSizeTol",
theCall.myGlobalComp ()->lotSizeTol (),
theVal);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setLotSizeTol (theVal);
}
d1030 2
a1031 2
{
WitGlobalCompApiCall theCall (this);
d1033 7
a1039 7
theCall.prepBool (
"minimalExcess",
theCall.myGlobalComp ()->minimalExcess (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setMinimalExcess (asaBool (boolval));
}
d1044 2
a1045 2
{
WitGlobalCompApiCall theCall (this);
d1047 7
a1053 7
theCall.prepBool (
"modHeurAlloc",
theCall.myGlobalComp ()->modHeurAlloc (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setModHeurAlloc (asaBool (boolval));
}
d1058 2
a1059 2
{
WitGlobalCompApiCall theCall (this);
d1061 12
a1072 12
if (not boolval)
if (myGlobalComp ()->twoWayMultiExec ())
theCall.prepBool ("twoWayMultiExec", true, WitFALSE);

theCall.prepBool (
"multiExec",
theCall.myGlobalComp ()->multiExec (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setMultiExec (asaBool (boolval));
}
d1077 2
a1078 2
{
WitGlobalCompApiCall theCall (this);
d1080 8
a1087 8
theCall.prepBool (
"multiRoute",
theCall.myGlobalComp ()->multiRoute (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setMultiRoute (asaBool (boolval));
}
d1092 2
a1093 2
{
WitGlobalCompApiCall theCall (this);
d1095 1
a1095 1
theCall.reqNoPartsOrOpns ("nPeriods");
d1097 8
a1104 8
theCall.prepImmPosInt (
"nPeriods",
theCall.myGlobalComp ()->nPeriods (),
nper);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setNPeriods (nper);
}
d1109 2
a1110 2
{
WitGlobalCompApiCall theCall (this);
d1112 8
a1119 8
theCall.prepBool (
"newPipPggOrder",
theCall.myGlobalComp ()->newPipPggOrder (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setNewPipPggOrder (asaBool (boolval));
}
d1124 2
a1125 2
{
WitGlobalCompApiCall theCall (this);
d1127 11
a1137 11
if (boolval)
if (myGlobalComp ()->selSplit ())
theCall.prepBool ("selSplit", true, WitFALSE);

theCall.prepBool (
"nonMrSelSplit",
theCall.myGlobalComp ()->nonMrSelSplit (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setNonMrSelSplit (asaBool (boolval));
}
d1142 2
a1143 2
{
WitGlobalCompApiCall theCall (this);
d1145 7
a1151 7
theCall.prepBool (
"nstnResidual",
theCall.myGlobalComp ()->nstnResidual (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setNstnResidual (asaBool (boolval));
}
d1156 2
a1157 2
{
WitGlobalCompApiCall theCall (this);
d1159 8
a1166 8
theCall.prepNonNegInt (
"outputPrecision",
theCall.myGlobalComp ()->outputPrecision (),
outputPrecisionParm);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setOutputPrecision (outputPrecisionParm);
}
d1171 2
a1172 2
{
WitGlobalCompApiCall theCall (this);
d1174 1
a1174 1
theCall.prepBool ("penExec", theCall.myGlobalComp ()->penExec (), boolval);
d1176 3
a1178 3
if (theCall.argsOK ())
theCall.myGlobalComp ()->setPenExec (asaBool (boolval));
}
d1183 2
a1184 2
{
WitGlobalCompApiCall theCall (this);
d1186 7
a1192 7
theCall.prepBool (
"perfPegging",
theCall.myGlobalComp ()->perfPegging (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setPerfPegging (asaBool (boolval));
}
d1197 2
a1198 2
{
WitGlobalCompApiCall theCall (this);
d1200 8
a1207 8
theCall.prepBool (
"pgdCritListMode",
theCall.myGlobalComp ()->pgdCritListMode (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setPgdCritListMode (asaBool (boolval));
}
d1212 2
a1213 2
{
WitGlobalCompApiCall theCall (this);
d1215 7
a1221 7
theCall.prepBool (
"pipSeqFromHeur",
theCall.myGlobalComp ()->pipSeqFromHeur (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setPipSeqFromHeur (asaBool (boolval));
}
d1226 2
a1227 2
{
WitGlobalCompApiCall theCall (this);
d1229 7
a1235 7
theCall.prepBool (
"prefHighStockSLBs",
theCall.myGlobalComp ()->prefHighStockSLBs (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setPrefHighStockSLBs (asaBool (boolval));
}
d1240 2
a1241 2
{
WitGlobalCompApiCall theCall (this);
d1243 7
a1249 7
theCall.prepBool (
"respectStockSLBs",
theCall.myGlobalComp ()->respectStockSLBs (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setRespectStockSLBs (asaBool (boolval));
}
d1254 2
a1255 2
{
WitGlobalCompApiCall theCall (this);
d1257 8
a1264 8
theCall.prepBool (
"roundReqVols",
theCall.myGlobalComp ()->roundReqVols (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setRoundReqVols (asaBool (boolval));
}
d1269 2
a1270 2
{
WitGlobalCompApiCall theCall (this);
d1272 11
a1282 11
if (boolval)
if (myGlobalComp ()->nonMrSelSplit ())
theCall.prepBool ("nonMrSelSplit", true, WitFALSE);

theCall.prepBool (
"selSplit",
theCall.myGlobalComp ()->selSplit (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setSelSplit (asaBool (boolval));
}
d1287 2
a1288 2
{
WitGlobalCompApiCall theCall (this);
d1290 8
a1297 8
theCall.prepBool (
"selectionRecovery",
theCall.myGlobalComp ()->selectionRecovery (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setSelectionRecovery (asaBool (boolval));
}
d1302 2
a1303 2
{
WitGlobalCompApiCall theCall (this);
d1305 8
a1312 8
theCall.prepBool (
"skipFailures",
theCall.myGlobalComp ()->skipFailures (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setSkipFailures (asaBool (boolval));
}
d1317 2
a1318 2
{
WitGlobalCompApiCall theCall (this);
d1320 12
a1331 12
if (boolval)
if (theCall.myGlobalComp ()->stockReallocation ())
myMsgFac () ("bothTrueSmsg", "stockRealloc", "stockReallocation");

theCall.prepBool (
"stockRealloc",
theCall.myGlobalComp ()->stockRealloc (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setStockRealloc (asaBool (boolval));
}
d1336 2
a1337 2
{
WitGlobalCompApiCall theCall (this);
d1339 11
a1349 11
if (boolval)
if (theCall.myGlobalComp ()->stockRealloc ())
myMsgFac () ("bothTrueSmsg", "stockReallocation", "stockRealloc");

theCall.prepBool (
"stockReallocation",
theCall.myGlobalComp ()->stockReallocation (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setStockReallocation (asaBool (boolval));
}
d1354 2
a1355 2
{
WitGlobalCompApiCall theCall (this);
d1357 11
a1367 11
if (boolval)
if (theCall.myGlobalComp ()->stockRealloc ())
myMsgFac () ("bothTrueSmsg", "srSelSplit", "stockRealloc");

theCall.prepBool (
"srSelSplit",
theCall.myGlobalComp ()->srSelSplit (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setSrSelSplit (asaBool (boolval));
}
d1372 2
a1373 2
{
WitGlobalCompApiCall theCall (this);
d1375 8
a1382 8
theCall.prepBool (
"tieBreakPropRt",
theCall.myGlobalComp ()->tieBreakPropRt (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setTieBreakPropRt (asaBool (boolval));
}
d1387 2
a1388 2
{
WitGlobalCompApiCall theCall (this);
d1390 1
a1390 1
theCall.prepString ("title", theCall.myGlobalComp ()->title (), newTitle);
d1392 3
a1394 3
if (theCall.argsOK ())
theCall.myGlobalComp ()->setTitle (newTitle);
}
d1399 2
a1400 2
{
WitGlobalCompApiCall theCall (this);
d1402 8
a1409 8
theCall.prepBool (
"truncOffsets",
theCall.myGlobalComp ()->truncOffsets (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setTruncOffsets (asaBool (boolval));
}
d1414 2
a1415 2
{
WitGlobalCompApiCall theCall (this);
d1417 12
a1428 12
if (boolval)
if (not myGlobalComp ()->multiExec ())
theCall.prepBool ("multiExec", false, WitTRUE);

theCall.prepBool (
"twoWayMultiExec",
theCall.myGlobalComp ()->twoWayMultiExec (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setTwoWayMultiExec (asaBool (boolval));
}
d1433 2
a1434 2
{
WitGlobalCompApiCall theCall (this);
d1436 8
a1443 8
theCall.prepBool (
"useFocusHorizons",
theCall.myGlobalComp ()->useFocusHorizons (),
newValue);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setUseFocusHorizons (asaBool (newValue));
}
d1448 2
a1449 2
{
WitGlobalCompApiCall theCall (this);
d1451 7
a1457 7
theCall.prepBool (
"userHeurStart",
theCall.myGlobalComp ()->userHeurStart (), boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setUserHeurStart (asaBool (boolval));
}
d1462 2
a1463 2
{
WitGlobalCompApiCall theCall (this);
d1465 2
a1466 2
if (not theCall.myGlobalComp ()->wit34Allowed ())
myMsgFac () ("setWit34CompatibleNotAllowedSmsg");
d1468 11
a1478 11
theCall.prepBool (
"wit34Compatible",
theCall.myGlobalComp ()->wit34Compatible (),
boolval);

if (boolval)
myMsgFac () ("compatible34WarningMsg");

if (theCall.argsOK ())
theCall.myGlobalComp ()->setWit34Compatible (asaBool (boolval));
}
d1483 2
a1484 2
{
WitGlobalCompApiCall theCall (this);
d1486 8
a1493 8
theCall.prepBool (
"wit34Allowed",
theCall.myGlobalComp ()->wit34Allowed (),
boolval);

if (theCall.argsOK ())
theCall.myGlobalComp ()->setWit34Allowed (asaBool (boolval));
}
d1498 4
a1501 4
{
if (myMsgFac ().mayIssue ("getAttrMsg"))
myMsgFac () ("getAttrMsg", theAttName);
}
d1506 3
a1508 3
{
return true;
}
@


1.147
log
@CPLEX
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d37 2
a38 2
   {
   WitGlobalCompApiCall theCall (this);
d40 2
a41 2
   myProblem ()->myPipMgr ()->clearShipSeq ();
   }
d46 2
a47 2
   {
   WitGlobalCompApiCall theCall (this);
d49 1
a49 1
   apiGet (appData, "appData", theCall.myGlobalComp ()->appData ());
d51 2
a52 2
   issueGetAttrMsg ("appData");
   }
d57 2
a58 2
   {
   WitGlobalCompApiCall theCall (this);
d60 3
a62 3
   apiGet (                    autoPriority, 
                              "autoPriority", 
      theCall.myGlobalComp ()->autoPriority ());
d65 2
a66 2
   issueGetAttrMsg ("autoPriority");
   }
d71 2
a72 2
   {
   WitGlobalCompApiCall theCall (this);
d74 19
a92 19
   if (wit34Compatible ())
      {
      myMsgFac () ("getting34AttributeWithCompatibilityMode",
         apiFuncName (),
         "Global",
         "buildWhenEmpty",
         "Global",
         "execEmptyBom");

      witGetExecEmptyBom (buildWhenEmpty);
      }
   else
      myMsgFac () ("getting34AttributeWithoutCompatibilityMode",
         apiFuncName (),
         "Global",
         "buildWhenEmpty",
         "Global",
         "execEmptyBom");
   }
d97 8
a104 8
      WitBoolean * computeCriticalList)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (
                               computeCriticalList,
                              "computeCriticalList",
      theCall.myGlobalComp ()->computeCriticalList ());
d106 2
a107 2
   issueGetAttrMsg ("computeCriticalList");
   }
d112 32
a143 32
      int  *     lenCritList,
      char * * * partList,
      int  * *   perList)
   {
   int       theIdx;
   WitPart * thePart;
   WitPeriod thePer;

   WitPairStItr <WitPart, WitPeriod> theItr;
   WitGlobalCompApiCall              theCall (this);

   forbidNullArg (lenCritList, "lenCritList");
   forbidNullArg (partList,    "critPartList");
   forbidNullArg (perList,     "critPeriod");

   * lenCritList = theCall.myGlobalComp ()->revCritList ().nElements ();

   apiAlloc (partList, * lenCritList);
   apiAlloc (perList,  * lenCritList);

   theIdx = * lenCritList;

   theCall.myGlobalComp ()->revCritList ().attachItr (theItr);

   while (theItr.advance (thePart, thePer))
      {
      theIdx --;

      (* partList)[theIdx] = thePart->partName ().apiDupCstring ();
      (* perList) [theIdx] = thePer;
      }
   }
d148 2
a149 2
   {
   WitGlobalCompApiCall theCall (this);
d151 3
a153 3
   apiGet (                    equitability,
                              "equitability",
      theCall.myGlobalComp ()->equitability ());
d155 2
a156 2
   issueGetAttrMsg ("equitability");
   }
d161 2
a162 2
   {
   WitGlobalCompApiCall theCall (this);
d164 3
a166 3
   apiGet (                    execEmptyBom, 
                              "execEmptyBom", 
      theCall.myGlobalComp ()->execEmptyBom ());
d168 2
a169 2
   issueGetAttrMsg ("execEmptyBom");
   }
d174 2
a175 2
   {
   WitGlobalCompApiCall theCall (this);
d177 1
a177 1
   apiGet (expCutoff, "expCutoff", theCall.myGlobalComp ()->expCutoff ());
d179 2
a180 2
   issueGetAttrMsg ("expCutoff");
   }
d185 2
a186 2
   {
   WitGlobalCompApiCall theCall (this);
d188 1
a188 1
   apiGet (feasible, "feasible", theCall.myGlobalComp ()->feasible ());
d190 2
a191 2
   issueGetAttrMsg ("feasible");
   }
d196 2
a197 2
   {
   WitGlobalCompApiCall theCall (this);
d199 3
a201 3
   apiGet (                    forcedMultiEq, 
                              "forcedMultiEq", 
      theCall.myGlobalComp ()->forcedMultiEq ());
d203 2
a204 2
   issueGetAttrMsg ("forcedMultiEq");
   }
d209 2
a210 2
   {
   WitGlobalCompApiCall theCall (this);
d212 3
a214 3
   apiGet (                    hashTableSize, 
                              "hashTableSize", 
      theCall.myGlobalComp ()->hashTableSize ());
d216 2
a217 2
   issueGetAttrMsg ("hashTableSize");
   }
d222 2
a223 2
   {
   WitGlobalCompApiCall theCall (this);
d225 4
a228 4
   apiGet (
       heurAllocActive,
      "heurAllocActive",
      myProblem ()->myHeurAllMgr ()->active ());
d230 2
a231 2
   issueGetAttrMsg ("heurAllocActive");
   }
d236 2
a237 2
   {
   WitGlobalCompApiCall theCall (this);
d239 3
a241 3
   apiGet (highPrecisionWD, 
      "highPrecisionWD", 
      theCall.myGlobalComp ()->highPrecisionWD ());
d243 2
a244 2
   issueGetAttrMsg ("highPrecisionWD");
   }
d249 2
a250 2
   {
   WitGlobalCompApiCall theCall (this);
d252 3
a254 3
   apiGet (                    independentOffsets, 
                              "independentOffsets", 
      theCall.myGlobalComp ()->independentOffsets ());
d256 2
a257 2
   issueGetAttrMsg ("independentOffsets");
   }
d262 2
a263 2
   {
   WitGlobalCompApiCall theCall (this);
d265 1
a265 1
   myMsgFac () ("lbaWmsg", "witGetLocalBuildAhead");
d267 3
a269 3
   apiGet (                    localBuildAhead, 
                              "localBuildAhead",
      theCall.myGlobalComp ()->localBuildAhead ());
d271 2
a272 2
   issueGetAttrMsg ("localBuildAhead");
   }
d277 2
a278 2
   {
   WitGlobalCompApiCall theCall (this);
d280 1
a280 1
   myMsgFac () ("lmeWmsg", "witGetLocalMultiExec");
d282 3
a284 3
   apiGet (                    localMultiExec,
                              "localMultiExec",
      theCall.myGlobalComp ()->localMultiExec ());
d286 2
a287 2
   issueGetAttrMsg ("localMultiExec");
   }
d292 2
a293 2
   {
   WitGlobalCompApiCall theCall (this);
d295 1
a295 1
   apiGet (lotSizeTol, "lotSizeTol", theCall.myGlobalComp ()->lotSizeTol ());
d297 2
a298 2
   issueGetAttrMsg ("lotSizeTol");
   }
d303 2
a304 2
   {
   WitGlobalCompApiCall theCall (this);
d306 3
a308 3
   apiGet (                    minimalExcess,
                              "minimalExcess", 
      theCall.myGlobalComp ()->minimalExcess ());
d310 2
a311 2
   issueGetAttrMsg ("minimalExcess");
   }
d316 2
a317 2
   {
   WitGlobalCompApiCall theCall (this);
d319 3
a321 3
   apiGet (modHeurAlloc, 
      "modHeurAlloc", 
      theCall.myGlobalComp ()->modHeurAlloc ());
d323 2
a324 2
   issueGetAttrMsg ("modHeurAlloc");
   }
d329 2
a330 2
   {
   WitGlobalCompApiCall theCall (this);
d332 1
a332 1
   apiGet (multiExec, "multiExec", theCall.myGlobalComp ()->multiExec ());
d334 2
a335 2
   issueGetAttrMsg ("multiExec");
   }
d340 2
a341 2
   {
   WitGlobalCompApiCall theCall (this);
d343 1
a343 1
   apiGet (multiRoute, "multiRoute", theCall.myGlobalComp ()->multiRoute ());
d345 2
a346 2
   issueGetAttrMsg ("multiRoute");
   }
d351 2
a352 2
   {
   WitGlobalCompApiCall theCall (this);
d354 1
a354 1
   apiGet (nPeriodsArg, "nPeriods", nPeriods ());
d356 2
a357 2
   issueGetAttrMsg ("nPeriods");
   }
d362 2
a363 2
   {
   WitGlobalCompApiCall theCall (this);
d365 3
a367 3
   apiGet (                    newPipPggOrder, 
                              "newPipPggOrder", 
      theCall.myGlobalComp ()->newPipPggOrder ());
d369 2
a370 2
   issueGetAttrMsg ("newPipPggOrder");
   }
d375 2
a376 2
   {
   WitGlobalCompApiCall theCall (this);
d378 3
a380 3
   apiGet (nonMrSelSplit, 
      "nonMrSelSplit", 
      theCall.myGlobalComp ()->nonMrSelSplit ());
d382 2
a383 2
   issueGetAttrMsg ("nonMrSelSplit");
   }
d388 2
a389 2
   {
   WitGlobalCompApiCall theCall (this);
d391 3
a393 3
   apiGet (nstnResidual, 
      "nstnResidual", 
      theCall.myGlobalComp ()->nstnResidual ());
d395 2
a396 2
   issueGetAttrMsg ("nstnResidual");
   }
d401 2
a402 2
   {
   WitGlobalCompApiCall theCall (this);
d404 3
a406 3
   apiGet (                    outputPrecision, 
                              "outputPrecision",
      theCall.myGlobalComp ()->outputPrecision ());
d408 2
a409 2
   issueGetAttrMsg ("outputPrecision");
   }
d414 2
a415 2
   {
   WitGlobalCompApiCall theCall (this);
d417 1
a417 1
   apiGet (penExec, "penExec", theCall.myGlobalComp ()->penExec ());
d419 2
a420 2
   issueGetAttrMsg ("penExec");
   }
d425 2
a426 2
   {
   WitGlobalCompApiCall theCall (this);
d428 3
a430 3
   apiGet (perfPegging, 
      "perfPegging", 
      theCall.myGlobalComp ()->perfPegging ());
d432 2
a433 2
   issueGetAttrMsg ("perfPegging");
   }
d438 47
a484 47
      int *      lenLists,
      char * * * critPartNameList,
      int * *    critPerList,
      char * * * demPartNameList,
      char * * * demandNameList,
      int * *    shipPerList)
   {
   int        theIdx;
   WitPclEl * thePclEl;

   WitGlobalCompApiCall theCall (this);

   forbidNullArg (lenLists,         "lenLists");
   forbidNullArg (critPartNameList, "critPartNameList");
   forbidNullArg (critPerList,      "critPerList");
   forbidNullArg (demPartNameList,  "demPartNameList");
   forbidNullArg (demandNameList,   "demandNameList");
   forbidNullArg (shipPerList,      "shipPerList");

   * lenLists = theCall.myGlobalComp ()->pgdCritList ().nElements ();

   apiAlloc (critPartNameList, * lenLists);
   apiAlloc (critPerList,      * lenLists);
   apiAlloc (demPartNameList,  * lenLists);
   apiAlloc (demandNameList,   * lenLists);
   apiAlloc (shipPerList,      * lenLists);

   theIdx = 0;

   forEachEl (thePclEl, theCall.myGlobalComp ()->pgdCritList ())
      {
      (* critPartNameList)[theIdx] =
         thePclEl->critPart ()->partName ().apiDupCstring ();

      (* critPerList)[theIdx] = thePclEl->critPer ();

      (* demPartNameList)[theIdx] =
         thePclEl->myDemand ()->demandedPartName ().apiDupCstring ();

      (* demandNameList)[theIdx] =
         thePclEl->myDemand ()->demandName ().apiDupCstring ();

      (* shipPerList)[theIdx] = thePclEl->myShipPer ();

      theIdx ++;
      }
   }
d489 2
a490 2
   {
   WitGlobalCompApiCall theCall (this);
d492 4
a495 4
   apiGet (
                               pgdCritListMode,
                              "pgdCritListMode",
      theCall.myGlobalComp ()->pgdCritListMode ());
d497 2
a498 2
   issueGetAttrMsg ("pgdCritListMode");
   }
d503 2
a504 2
   {
   WitGlobalCompApiCall theCall (this);
d506 1
a506 1
   apiGet (pipExists, "pipExists", myProblem ()->myPipMgr ()->peggingExists ());
d508 2
a509 2
   issueGetAttrMsg ("pipExists");
   }
d514 45
a558 45
      int *                lenLists,
      char * * *           partNameList,
      char * * *           demandNameList,
      int * *              shipPerList,
      const WitOVRealArg & incShipVolList)
   {
   WitDemTripStack theShipSeq (myProblem ());
   int             nTrips;
   int             theIdx;
   WitDemand *     theDemand;
   WitPeriod       shipPer;
   double          incShipVol;

   WitGlobalCompApiCall theCall (this);

   myProblem ()->myPipMgr ()->getShipSeq (theShipSeq);

   nTrips = theShipSeq.nElements ();

   apiGet (lenLists, "lenLists", nTrips);

   forbidNullArg (partNameList,   "partNameList");
   forbidNullArg (demandNameList, "demandNameList");
   forbidNullArg (shipPerList,    "shipPerList");
   forbidNullArg (incShipVolList, "incShipVolList");

   apiAlloc (partNameList,   nTrips);
   apiAlloc (demandNameList, nTrips);
   apiAlloc (shipPerList,    nTrips);
   apiAlloc (incShipVolList, nTrips);

   theIdx = -1;

   while (theShipSeq.pop (theDemand, shipPer, incShipVol))
      {
      theIdx ++;

      (* partNameList)  [theIdx] =
         theDemand->demandedPartName ().apiDupCstring ();

      (* demandNameList)[theIdx] = theDemand->demandName ().apiDupCstring ();
      (* shipPerList)   [theIdx] = shipPer;
      incShipVolList    [theIdx] = incShipVol;
      }
   }
d563 2
a564 2
   {
   WitGlobalCompApiCall theCall (this);
d566 3
a568 3
   apiGet (pipSeqFromHeur, 
      "pipSeqFromHeur", 
      theCall.myGlobalComp ()->pipSeqFromHeur ());
d570 2
a571 2
   issueGetAttrMsg ("pipSeqFromHeur");
   }
d576 2
a577 2
   {
   WitGlobalCompApiCall theCall (this);
d579 4
a582 4
   apiGet (
       postprocessed,
      "postprocessed",
      myProblem ()->myPostprocessor ()->postprocessed ());
d584 2
a585 2
   issueGetAttrMsg ("postprocessed");
   }
d590 2
a591 2
   {
   WitGlobalCompApiCall theCall (this);
d593 3
a595 3
   apiGet (prefHighStockSLBs, 
      "prefHighStockSLBs", 
      theCall.myGlobalComp ()->prefHighStockSLBs ());
d597 2
a598 2
   issueGetAttrMsg ("prefHighStockSLBs");
   }
d603 2
a604 2
   {
   WitGlobalCompApiCall theCall (this);
d606 4
a609 4
   apiGet (
       preprocessed,
      "preprocessed",
      myProblem ()->myPreprocessor ()->preprocessed ());
d611 2
a612 2
   issueGetAttrMsg ("preprocessed");
   }
d617 2
a618 2
   {
   WitGlobalCompApiCall theCall (this);
d620 3
a622 3
   apiGet (respectStockSLBs, 
      "respectStockSLBs", 
      theCall.myGlobalComp ()->respectStockSLBs ());
d624 2
a625 2
   issueGetAttrMsg ("respectStockSLBs");
   }
d630 2
a631 2
   {
   WitGlobalCompApiCall theCall (this);
d633 3
a635 3
   apiGet (                    roundReqVols, 
                              "roundReqVols", 
      theCall.myGlobalComp ()->roundReqVols ());
d637 2
a638 2
   issueGetAttrMsg ("roundReqVols");
   }
d643 2
a644 2
   {
   WitGlobalCompApiCall theCall (this);
d646 3
a648 3
   apiGet (selSplit, 
      "selSplit", 
      theCall.myGlobalComp ()->selSplit ());
d650 2
a651 2
   issueGetAttrMsg ("selSplit");
   }
d656 2
a657 2
   {
   WitGlobalCompApiCall theCall (this);
d659 3
a661 3
   apiGet (                    selectionRecovery,
                              "selectionRecovery",
      theCall.myGlobalComp ()->selectionRecovery ());
d663 2
a664 2
   issueGetAttrMsg ("selectionRecovery");
   }
d669 2
a670 2
   {
   WitGlobalCompApiCall theCall (this);
d672 3
a674 3
   apiGet (                    skipFailures, 
                              "skipFailures", 
      theCall.myGlobalComp ()->skipFailures ());
d676 2
a677 2
   issueGetAttrMsg ("skipFailures");
   }
d682 2
a683 2
   {
   WitGlobalCompApiCall theCall (this);
d685 3
a687 3
   apiGet (                    stockRealloc, 
                              "stockRealloc", 
      theCall.myGlobalComp ()->stockRealloc ());
d689 2
a690 2
   issueGetAttrMsg ("stockRealloc");
   }
d695 2
a696 2
   {
   WitGlobalCompApiCall theCall (this);
d698 3
a700 3
   apiGet (                    stockReallocation, 
                              "stockReallocation", 
      theCall.myGlobalComp ()->stockReallocation ());
d702 2
a703 2
   issueGetAttrMsg ("stockReallocation");
   }
d708 2
a709 2
   {
   WitGlobalCompApiCall theCall (this);
d711 3
a713 3
   apiGet (                    srSelSplit, 
                              "srSelSplit", 
      theCall.myGlobalComp ()->srSelSplit ());
d715 2
a716 2
   issueGetAttrMsg ("srSelSplit");
   }
d721 2
a722 2
   {
   WitGlobalCompApiCall theCall (this);
d724 3
a726 3
   apiGet (                    tieBreakPropRt,
                              "tieBreakPropRt",
      theCall.myGlobalComp ()->tieBreakPropRt ());
d728 2
a729 2
   issueGetAttrMsg ("tieBreakPropRt");
   }
d734 2
a735 2
   {
   WitGlobalCompApiCall theCall (this);
d737 2
a738 2
   apiGet (title, "title", theCall.myGlobalComp ()->title ());
   }
d743 2
a744 2
   {
   WitGlobalCompApiCall theCall (this);
d746 3
a748 3
   apiGet (                    truncOffsets, 
                              "truncOffsets", 
      theCall.myGlobalComp ()->truncOffsets ());
d750 2
a751 2
   issueGetAttrMsg ("truncOffsets");
   }
d756 2
a757 2
   {
   WitGlobalCompApiCall theCall (this);
d759 3
a761 3
   apiGet (                    twoWayMultiExec, 
                              "twoWayMultiExec", 
      theCall.myGlobalComp ()->twoWayMultiExec ());
d763 2
a764 2
   issueGetAttrMsg ("twoWayMultiExec");
   }
d769 2
a770 2
   {
   WitGlobalCompApiCall theCall (this);
d772 3
a774 3
   apiGet (                    useFocusHorizons,
                              "useFocusHorizons",
      theCall.myGlobalComp ()->useFocusHorizons ());
d776 2
a777 2
   issueGetAttrMsg ("useFocusHorizons");
   }
d782 2
a783 2
   {
   WitGlobalCompApiCall theCall (this);
d785 3
a787 3
   apiGet (userHeurStart, 
      "userHeurStart", 
      theCall.myGlobalComp ()->userHeurStart ());
d789 2
a790 2
   issueGetAttrMsg ("userHeurStart");
   }
d795 2
a796 2
   {
   WitGlobalCompApiCall theCall (this);
d798 1
a798 1
   apiGet (retVal, "wit34Compatible", wit34Compatible ());
d800 2
a801 2
   issueGetAttrMsg ("wit34Compatible");
   }
d806 2
a807 2
   {
   WitGlobalCompApiCall theCall (this);
d809 2
a810 2
   theCall.setAppData (appData);
   }
d815 2
a816 2
   {
   WitGlobalCompApiCall theCall (this);
d818 8
a825 8
   theCall.prepBool (
      "autoPriority", 
      theCall.myGlobalComp ()->autoPriority (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setAutoPriority (asaBool (boolval));
   }
d830 2
a831 2
   {
   myApiMgr_->startInnerFunc ();
d833 19
a851 19
   if (wit34Compatible ())
      {
      myMsgFac () ("setting34AttributeWithCompatibilityMode",
         apiFuncName (),
         "Global",
         "buildWhenEmpty",
         "Global",
         "execEmptyBom");

      witSetExecEmptyBom (asaBool (boolval));
      }
   else
      myMsgFac () ("setting34AttributeWithoutCompatibilityMode",
         apiFuncName (),
         "Global",
         "buildWhenEmpty",
         "Global",
         "execEmptyBom");
   }
d856 2
a857 2
   {
   WitGlobalCompApiCall theCall (this);
d859 8
a866 8
   theCall.prepBool (
      "computeCriticalList", 
      theCall.myGlobalComp ()->computeCriticalList (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setComputeCriticalList (asaBool (boolval));
   }
d871 2
a872 2
   {
   WitGlobalCompApiCall theCall (this);
d874 10
a883 10
   theCall.prepRangedInt (
      "equitability",
      theCall.myGlobalComp ()->equitability (),
      equit,
      1,
      100);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setEquitability (equit);
   }
d888 2
a889 2
   {
   WitGlobalCompApiCall theCall (this);
d891 8
a898 8
   theCall.prepBool (
      "execEmptyBom", 
      theCall.myGlobalComp ()->execEmptyBom (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setExecEmptyBom (asaBool (boolval));
   }
d903 2
a904 2
   {
   WitGlobalCompApiCall theCall (this);
d906 10
a915 10
   theCall.prepLBDouble (
      "expCutoff",
      theCall.myGlobalComp ()->expCutoff (),
      theVal,
      0.999E-6,
      1.0E-6);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setExpCutoff (theVal);
   }
d920 2
a921 2
   {
   WitGlobalCompApiCall theCall (this);
d923 8
a930 8
   theCall.prepBool (
      "forcedMultiEq", 
      theCall.myGlobalComp ()->forcedMultiEq (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setForcedMultiEq (asaBool (boolval));
   }
d935 2
a936 2
   {
   WitGlobalCompApiCall theCall (this);
d938 8
a945 8
   theCall.prepNonNegInt (
      "hashTableSize", 
      theCall.myGlobalComp ()->hashTableSize (), 
      size);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setHashTableSize (size);
   }
d950 2
a951 2
   {
   WitGlobalCompApiCall theCall (this);
d953 7
a959 7
   theCall.prepBool (
      "highPrecisionWD", 
      theCall.myGlobalComp ()->highPrecisionWD (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setHighPrecisionWD (asaBool (boolval));
   }
d964 2
a965 2
   {
   WitGlobalCompApiCall theCall (this);
d967 1
a967 1
   theCall.reqNoPartsOrOpns ("independentOffsets");
d969 8
a976 8
   theCall.prepBool (
      "independentOffsets", 
      theCall.myGlobalComp ()->independentOffsets (), 
      theValue);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setIndependentOffsets (asaBool (theValue));
   }
d981 2
a982 2
   {
   WitGlobalCompApiCall theCall (this);
d984 10
a993 10
   theCall.prepBool (
      "localBuildAhead", 
      theCall.myGlobalComp ()->localBuildAhead (), 
      boolval);

   myMsgFac () ("lbaWmsg", "witSetLocalBuildAhead");

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setLocalBuildAhead (asaBool (boolval));
   }
d998 2
a999 2
   {
   WitGlobalCompApiCall theCall (this);
d1001 10
a1010 10
   theCall.prepBool (
      "localMultiExec", 
      theCall.myGlobalComp ()->localMultiExec (), 
      boolval);

   myMsgFac () ("lmeWmsg", "witSetLocalMultiExec");

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setLocalMultiExec (asaBool (boolval));
   }
d1015 2
a1016 2
   {
   WitGlobalCompApiCall theCall (this);
d1018 8
a1025 8
   theCall.prepNonNegDouble (
      "lotSizeTol", 
      theCall.myGlobalComp ()->lotSizeTol (),
      theVal);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setLotSizeTol (theVal);
   }
d1030 2
a1031 2
   {
   WitGlobalCompApiCall theCall (this);
d1033 7
a1039 7
   theCall.prepBool (
      "minimalExcess", 
      theCall.myGlobalComp ()->minimalExcess (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setMinimalExcess (asaBool (boolval));
   }
d1044 2
a1045 2
   {
   WitGlobalCompApiCall theCall (this);
d1047 7
a1053 7
   theCall.prepBool (
      "modHeurAlloc", 
      theCall.myGlobalComp ()->modHeurAlloc (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setModHeurAlloc (asaBool (boolval));
   }
d1058 2
a1059 2
   {
   WitGlobalCompApiCall theCall (this);
d1061 12
a1072 12
   if (not boolval)
      if (myGlobalComp ()->twoWayMultiExec ())
         theCall.prepBool ("twoWayMultiExec", true, WitFALSE);

   theCall.prepBool (
      "multiExec", 
      theCall.myGlobalComp ()->multiExec (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setMultiExec (asaBool (boolval));
   }
d1077 2
a1078 2
   {
   WitGlobalCompApiCall theCall (this);
d1080 8
a1087 8
   theCall.prepBool (
      "multiRoute", 
      theCall.myGlobalComp ()->multiRoute (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setMultiRoute (asaBool (boolval));
   }
d1092 2
a1093 2
   {
   WitGlobalCompApiCall theCall (this);
d1095 1
a1095 1
   theCall.reqNoPartsOrOpns ("nPeriods");
d1097 8
a1104 8
   theCall.prepImmPosInt (
      "nPeriods", 
      theCall.myGlobalComp ()->nPeriods (), 
      nper);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setNPeriods (nper);
   }
d1109 2
a1110 2
   {
   WitGlobalCompApiCall theCall (this);
d1112 8
a1119 8
   theCall.prepBool (
      "newPipPggOrder", 
      theCall.myGlobalComp ()->newPipPggOrder (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setNewPipPggOrder (asaBool (boolval));
   }
d1124 2
a1125 2
   {
   WitGlobalCompApiCall theCall (this);
d1127 11
a1137 11
   if (boolval)
      if (myGlobalComp ()->selSplit ())
         theCall.prepBool ("selSplit", true, WitFALSE);

   theCall.prepBool (
      "nonMrSelSplit", 
      theCall.myGlobalComp ()->nonMrSelSplit (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setNonMrSelSplit (asaBool (boolval));
   }
d1142 2
a1143 2
   {
   WitGlobalCompApiCall theCall (this);
d1145 7
a1151 7
   theCall.prepBool (
      "nstnResidual", 
      theCall.myGlobalComp ()->nstnResidual (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setNstnResidual (asaBool (boolval));
   }
d1156 2
a1157 2
   {
   WitGlobalCompApiCall theCall (this);
d1159 8
a1166 8
   theCall.prepNonNegInt (
      "outputPrecision", 
      theCall.myGlobalComp ()->outputPrecision (), 
      outputPrecisionParm);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setOutputPrecision (outputPrecisionParm);
   }
d1171 2
a1172 2
   {
   WitGlobalCompApiCall theCall (this);
d1174 1
a1174 1
   theCall.prepBool ("penExec", theCall.myGlobalComp ()->penExec (), boolval);
d1176 3
a1178 3
   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPenExec (asaBool (boolval));
   }
d1183 2
a1184 2
   {
   WitGlobalCompApiCall theCall (this);
d1186 7
a1192 7
   theCall.prepBool (
      "perfPegging", 
      theCall.myGlobalComp ()->perfPegging (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPerfPegging (asaBool (boolval));
   }
d1197 2
a1198 2
   {
   WitGlobalCompApiCall theCall (this);
d1200 8
a1207 8
   theCall.prepBool (
      "pgdCritListMode", 
      theCall.myGlobalComp ()->pgdCritListMode (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPgdCritListMode (asaBool (boolval));
   }
d1212 2
a1213 2
   {
   WitGlobalCompApiCall theCall (this);
d1215 7
a1221 7
   theCall.prepBool (
      "pipSeqFromHeur", 
      theCall.myGlobalComp ()->pipSeqFromHeur (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPipSeqFromHeur (asaBool (boolval));
   }
d1226 2
a1227 2
   {
   WitGlobalCompApiCall theCall (this);
d1229 7
a1235 7
   theCall.prepBool (
      "prefHighStockSLBs", 
      theCall.myGlobalComp ()->prefHighStockSLBs (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPrefHighStockSLBs (asaBool (boolval));
   }
d1240 2
a1241 2
   {
   WitGlobalCompApiCall theCall (this);
d1243 7
a1249 7
   theCall.prepBool (
      "respectStockSLBs", 
      theCall.myGlobalComp ()->respectStockSLBs (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setRespectStockSLBs (asaBool (boolval));
   }
d1254 2
a1255 2
   {
   WitGlobalCompApiCall theCall (this);
d1257 8
a1264 8
   theCall.prepBool (
      "roundReqVols", 
      theCall.myGlobalComp ()->roundReqVols (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setRoundReqVols (asaBool (boolval));
   }
d1269 2
a1270 2
   {
   WitGlobalCompApiCall theCall (this);
d1272 11
a1282 11
   if (boolval)
      if (myGlobalComp ()->nonMrSelSplit ())
         theCall.prepBool ("nonMrSelSplit", true, WitFALSE);

   theCall.prepBool (
      "selSplit", 
      theCall.myGlobalComp ()->selSplit (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setSelSplit (asaBool (boolval));
   }
d1287 2
a1288 2
   {
   WitGlobalCompApiCall theCall (this);
d1290 8
a1297 8
   theCall.prepBool (
      "selectionRecovery", 
      theCall.myGlobalComp ()->selectionRecovery (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setSelectionRecovery (asaBool (boolval));
   }
d1302 2
a1303 2
   {
   WitGlobalCompApiCall theCall (this);
d1305 8
a1312 8
   theCall.prepBool (
      "skipFailures", 
      theCall.myGlobalComp ()->skipFailures (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setSkipFailures (asaBool (boolval));
   }
d1317 2
a1318 2
   {
   WitGlobalCompApiCall theCall (this);
d1320 12
a1331 12
   if (boolval)
      if (theCall.myGlobalComp ()->stockReallocation ())
         myMsgFac () ("bothTrueSmsg", "stockRealloc", "stockReallocation");

   theCall.prepBool (
      "stockRealloc", 
      theCall.myGlobalComp ()->stockRealloc (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setStockRealloc (asaBool (boolval));
   }
d1336 2
a1337 2
   {
   WitGlobalCompApiCall theCall (this);
d1339 11
a1349 11
   if (boolval)
      if (theCall.myGlobalComp ()->stockRealloc ())
         myMsgFac () ("bothTrueSmsg", "stockReallocation", "stockRealloc");

   theCall.prepBool (
      "stockReallocation", 
      theCall.myGlobalComp ()->stockReallocation (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setStockReallocation (asaBool (boolval));
   }
d1354 2
a1355 2
   {
   WitGlobalCompApiCall theCall (this);
d1357 11
a1367 11
   if (boolval)
      if (theCall.myGlobalComp ()->stockRealloc ())
         myMsgFac () ("bothTrueSmsg", "srSelSplit", "stockRealloc");

   theCall.prepBool (
      "srSelSplit", 
      theCall.myGlobalComp ()->srSelSplit (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setSrSelSplit (asaBool (boolval));
   }
d1372 2
a1373 2
   {
   WitGlobalCompApiCall theCall (this);
d1375 8
a1382 8
   theCall.prepBool (
                              "tieBreakPropRt",
      theCall.myGlobalComp ()->tieBreakPropRt (),
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setTieBreakPropRt (asaBool (boolval));
   }
d1387 2
a1388 2
   {
   WitGlobalCompApiCall theCall (this);
d1390 1
a1390 1
   theCall.prepString ("title", theCall.myGlobalComp ()->title (), newTitle);
d1392 3
a1394 3
   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setTitle (newTitle);
   }
d1399 2
a1400 2
   {
   WitGlobalCompApiCall theCall (this);
d1402 8
a1409 8
   theCall.prepBool (
      "truncOffsets", 
      theCall.myGlobalComp ()->truncOffsets (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setTruncOffsets (asaBool (boolval));
   }
d1414 2
a1415 2
   {
   WitGlobalCompApiCall theCall (this);
d1417 12
a1428 12
   if (boolval)
      if (not myGlobalComp ()->multiExec ())
         theCall.prepBool ("multiExec", false, WitTRUE);

   theCall.prepBool (
      "twoWayMultiExec", 
      theCall.myGlobalComp ()->twoWayMultiExec (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setTwoWayMultiExec (asaBool (boolval));
   }
d1433 2
a1434 2
   {
   WitGlobalCompApiCall theCall (this);
d1436 8
a1443 8
   theCall.prepBool (
      "useFocusHorizons", 
      theCall.myGlobalComp ()->useFocusHorizons (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setUseFocusHorizons (asaBool (newValue));
   }
d1448 2
a1449 2
   {
   WitGlobalCompApiCall theCall (this);
d1451 7
a1457 7
   theCall.prepBool (
      "userHeurStart", 
      theCall.myGlobalComp ()->userHeurStart (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setUserHeurStart (asaBool (boolval));
   }
d1462 2
a1463 2
   {
   WitGlobalCompApiCall theCall (this);
d1465 2
a1466 2
   if (not theCall.myGlobalComp ()->wit34Allowed ())
      myMsgFac () ("setWit34CompatibleNotAllowedSmsg");
d1468 11
a1478 11
   theCall.prepBool (
      "wit34Compatible", 
      theCall.myGlobalComp ()->wit34Compatible (), 
      boolval);

   if (boolval)
      myMsgFac () ("compatible34WarningMsg");

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setWit34Compatible (asaBool (boolval));
   }
d1483 2
a1484 2
   {
   WitGlobalCompApiCall theCall (this);
d1486 8
a1493 8
   theCall.prepBool (
      "wit34Allowed", 
      theCall.myGlobalComp ()->wit34Allowed (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setWit34Allowed (asaBool (boolval));
   }
d1498 4
a1501 4
   {
   if (myMsgFac ().mayIssue ("getAttrMsg"))
      myMsgFac () ("getAttrMsg", theAttName);
   }
d1506 3
a1508 3
   {
   return true;
   }
@


1.146
log
@Modifiable Heuristic Allocation
@
text
@d155 1
a155 1
   issueGetAttrMsg ("equitability", equitability);
d179 1
a179 1
   issueGetAttrMsg ("expCutoff", expCutoff);
d216 1
a216 1
   issueGetAttrMsg ("hashTableSize", hashTableSize);
d297 1
a297 1
   issueGetAttrMsg ("lotSizeTol", lotSizeTol);
d356 1
a356 1
   issueGetAttrMsg ("nPeriods", nPeriodsArg);
d408 1
a408 1
   issueGetAttrMsg ("outputPrecision", outputPrecision);
a1504 22
void WitRun::issueGetAttrMsg (
      const char *         theAttName,
      const WitOSRealArg & theArg)
      const
   {
   if (myMsgFac ().mayIssue ("getDblAttrMsg"))
      myMsgFac () ("getDblAttrMsg", theAttName, theArg.appVarVal ());
   }

//------------------------------------------------------------------------------

void WitRun::issueGetAttrMsg (
      const char * theAttName,
      const int *  theIntPtr)
      const
   {
   if (myMsgFac ().mayIssue ("getIntAttrMsg"))
      myMsgFac () ("getIntAttrMsg", theAttName, * theIntPtr);
   }

//------------------------------------------------------------------------------

@


1.145
log
@Modifiable heuristic allocation
@
text
@a318 3
   if (not myGlobalComp ()->modHeurAllowed ())
      myMsgFac () ("attNyaSmsg", "modHeurAlloc");

a1046 3
   if (not myGlobalComp ()->modHeurAllowed ())
      myMsgFac () ("attNyaSmsg", "modHeurAlloc");

@


1.144
log
@Heuristic Adjustment
@
text
@a220 16
void WitRun::witGetHeurAdjustEnabled (WitBoolean * heurAdjustEnabled)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myGlobalComp ()->heurAdjustAllowed ())
      myMsgFac () ("attNyaSmsg", "heurAdjustEnabled");

   apiGet (heurAdjustEnabled, 
      "heurAdjustEnabled", 
      theCall.myGlobalComp ()->heurAdjustEnabled ());

   issueGetAttrMsg ("heurAdjustEnabled");
   }

//------------------------------------------------------------------------------

d315 16
d1046 17
a1466 17
void WitRun::witSetHeurAdjustEnabled (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myGlobalComp ()->heurAdjustAllowed ())
      myMsgFac () ("attNyaSmsg", "heurAdjustEnabled");

   theCall.prepBool (
      "heurAdjustEnabled", 
      theCall.myGlobalComp ()->heurAdjustEnabled (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setHeurAdjustEnabled (asaBool (boolval));
   }

//------------------------------------------------------------------------------

@


1.143
log
@Heuristic Adjustment
@
text
@a220 17
void WitRun::witGetHeurAdjustActive (WitBoolean * heurAdjustActive)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myGlobalComp ()->heurAdjustAllowed ())
      myMsgFac () ("attNyaSmsg", "heurAdjustActive");

   apiGet (
       heurAdjustActive,
      "heurAdjustActive",
      myProblem ()->myHeurAllMgr ()->heurAdjustActive ());

   issueGetAttrMsg ("heurAdjustActive");
   }

//------------------------------------------------------------------------------

@


1.142
log
@Heuristic Adjustment
@
text
@a20 1
#include <HeurAdjuster.h>
d225 1
a225 1
   if (not myProblem ()->myHeurAdjuster ()->heurAdjustAllowed ())
d231 1
a231 1
      myProblem ()->myHeurAdjuster ()->active ());
d238 16
d1467 17
@


1.141
log
@Heuristic Adjustment
@
text
@d21 1
a21 1
#include <HeurAdjMgr.h>
d226 1
a226 1
   if (not myProblem ()->myHeurAdjMgr ()->heurAdjustAllowed ())
d232 1
a232 1
      myProblem ()->myHeurAdjMgr ()->active ());
@


1.140
log
@Pause/Resume
@
text
@d21 1
a21 1
#include <HeurPauseMgr.h>
d222 1
a222 1
void WitRun::witGetHeurAllocActive (WitBoolean * heurAllocActive)
d226 3
d230 3
a232 3
       heurAllocActive,
      "heurAllocActive",
      myProblem ()->myHeurAllMgr ()->active ());
d234 1
a234 1
   issueGetAttrMsg ("heurAllocActive");
d239 1
a239 1
void WitRun::witGetHeurAllocPaused (WitBoolean * heurAllocPaused)
a242 3
   if (not myProblem ()->myHeurPauseMgr ()->pauseResumeAllowed ())
      myMsgFac () ("attNyaSmsg", "heurAllocPaused");

d244 3
a246 3
       heurAllocPaused,
      "heurAllocPaused",
      myProblem ()->myHeurPauseMgr ()->paused ());
d248 1
a248 1
   issueGetAttrMsg ("heurAllocPaused");
@


1.139
log
@Pause/Resume
@
text
@d21 1
d240 1
a240 1
   if (not theCall.myGlobalComp ()->pauseResumeAllowed ())
d246 1
a246 1
      myProblem ()->myHeurAllMgr ()->paused ());
@


1.138
log
@Pause/resume
@
text
@d239 1
a239 1
   if (not theCall.myGlobalComp ()->pauseHeurAllowed ())
@


1.137
log
@Pause / Resume
@
text
@d239 3
@


1.136
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@d235 14
@


1.135
log
@Selection Reuse.
@
text
@d642 1
a642 1
void WitRun::witGetSelectionReuse  (WitBoolean * selectionReuse)
d646 3
a648 3
   apiGet (                    selectionReuse,
                              "selectionReuse",
      theCall.myGlobalComp ()->selectionReuse ());
d650 1
a650 1
   issueGetAttrMsg ("selectionReuse");
d1259 1
a1259 1
void WitRun::witSetSelectionReuse (WitBoolean boolval)
d1264 2
a1265 2
      "selectionReuse", 
      theCall.myGlobalComp ()->selectionReuse (), 
d1269 1
a1269 1
      theCall.myGlobalComp ()->setSelectionReuse (asaBool (boolval));
@


1.134
log
@Selection Reuse.
@
text
@a1262 3
   if (not myGlobalComp ()->selReuseAllowed ())
      myMsgFac () ("attNyaSmsg", "selectionReuse");

@


1.133
log
@Changed source file names:
   Global.h ==> GlobalComp.h
   Global.C ==> GlobalComp.C
@
text
@d642 13
d1259 18
@


1.132
log
@Revised wit34Allowed.
@
text
@d24 1
a24 1
#include <Global.h>
@


1.131
log
@Fixed two bugs:
   wit34Allowed may not be set when wit34Compatible is TRUE.
   wit34Compatible does not get copied when wit34Allowed is FALSE.
@
text
@a1430 8
   if (boolval)
      myMsgFac () ("setWit34AllowedTrueSmsg");

   if (theCall.myGlobalComp ()->wit34Compatible ())
      {
      myMsgFac () ("setWit34AllowedWhenCompatSmsg");
      }

@


1.130
log
@Implemented the undocumented "wit34Allowed" attribute.
@
text
@d1432 6
a1437 1
      myMsgFac () ("setWit34AllowTrueSmsg");
@


1.129
log
@Removed many conversions of string constant to char *.
@
text
@d1410 3
d1427 18
@


1.128
log
@Stochastic Implosion
@
text
@d1424 1
a1424 1
void WitRun::issueGetAttrMsg (WitAttr theAttr) const
d1427 1
a1427 1
      myMsgFac () ("getAttrMsg", theAttr);
d1433 1
a1433 1
      WitAttr              theAttr,
d1438 1
a1438 1
      myMsgFac () ("getDblAttrMsg", theAttr, theArg.appVarVal ());
d1443 4
a1446 1
void WitRun::issueGetAttrMsg (WitAttr theAttr, const int * theIntPtr) const
d1449 1
a1449 1
      myMsgFac () ("getIntAttrMsg", theAttr, * theIntPtr);
@


1.127
log
@Stochastic Implosion
@
text
@a187 2
   theCall.prepGetStochSolnAttr ("feasible");

@


1.126
log
@Stochastic Implosion
@
text
@d188 2
@


1.125
log
@Stochastic Implosion
@
text
@d116 3
a118 3
   int          i;
   WitPartPer * thePartPer;
   WitPart *    thePart;
d120 2
a121 1
   WitGlobalCompApiCall theCall (this);
d127 1
a127 1
   * lenCritList = theCall.myGlobalComp ()->criticalList ().nElements ();
d132 3
a134 1
   i = 0;
d136 1
a136 1
   forEachEl (thePartPer, theCall.myGlobalComp ()->criticalList ())
d138 1
a138 4
      thePart         = thePartPer->first;
      (* perList)[i]  = thePartPer->second;

      (* partList)[i] = thePart->partName ().apiDupCstring ();
d140 2
a141 1
      ++ i;
@


1.124
log
@Stochastic Implosion
@
text
@a25 3
#include <StochMgr.h>
#include <SIP.h>
#include <Scenario.h>
a346 16
void WitRun::witGetNScenarios (int * nScenarios)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "nScenarios");

   apiGet (                        nScenarios, 
                                  "nScenarios", 
      myProblem ()->myStochMgr ()->nScenarios ());

   issueGetAttrMsg ("nScenarios");
   }

//------------------------------------------------------------------------------

a627 20
void WitRun::witGetScenarioIndex (int * scenarioIndex)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "scenarioIndex");

   if (not myProblem ()->myStochMgr ()->stochImpMode ())
      myMsgFac () ("globNonStochModeSmsg", "scenarioIndex");

   apiGet (
       scenarioIndex,
      "scenarioIndex",
      myProblem ()->myStochMgr ()->mySIP ()->curScenario ()->myIndex ());

   issueGetAttrMsg ("scenarioIndex", scenarioIndex);
   }

//------------------------------------------------------------------------------

a653 32
void WitRun::witGetStageByObject (WitBoolean * stageByObject)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "stageByObject");

   apiGet (                        stageByObject, 
                                  "stageByObject", 
      myProblem ()->myStochMgr ()->stageByObject ());

   issueGetAttrMsg ("stageByObject");
   }

//------------------------------------------------------------------------------

void WitRun::witGetStochImpMode (WitBoolean * stochImpMode)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "stochImpMode");

   apiGet (                        stochImpMode, 
                                  "stochImpMode", 
      myProblem ()->myStochMgr ()->stochImpMode ());

   issueGetAttrMsg ("stochImpMode");
   }

//------------------------------------------------------------------------------

a1066 18
void WitRun::witSetNScenarios (int nScenarios)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "nScenarios");

   theCall.prepImmPosInt (
      "nScenarios", 
      myProblem ()->myStochMgr ()->nScenarios (), 
      nScenarios);

   if (theCall.argsOK ())
      myProblem ()->myStochMgr ()->setNScenarios (nScenarios);
   }

//------------------------------------------------------------------------------

a1226 31
void WitRun::witSetScenarioIndex (int scenarioIndex)
   {
   WitGlobalCompApiCall theCall (this);
   WitScenario *        theScenario;

   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "scenarioIndex");

   if (not myProblem ()->myStochMgr ()->stochImpMode ())
      myMsgFac () ("globNonStochModeSmsg", "scenarioIndex");

   theCall.setsStochAttr ();

   theCall.prepImmRangedInt (
      "scenarioIndex",
      myProblem ()->myStochMgr ()->mySIP ()->curScenario ()->myIndex (),
      scenarioIndex,
      0,
      myProblem ()->myStochMgr ()->nScenarios () - 1);

   if (theCall.argsOK ())
      {
      theScenario =
         myProblem ()->myStochMgr ()->mySIP ()->myScenario (scenarioIndex);

      myProblem ()->myStochMgr ()->mySIP ()->setCurScenario (theScenario);
      }
   }

//------------------------------------------------------------------------------

a1259 38
void WitRun::witSetStageByObject (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "stageByObject");

   theCall.prepBool (
      "stageByObject", 
      myProblem ()->myStochMgr ()->stageByObject (), 
      boolval);

   if (theCall.argsOK ())
      myProblem ()->myStochMgr ()->setStageByObject (asaBool (boolval));
   }

//------------------------------------------------------------------------------

void WitRun::witSetStochImpMode (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (not myProblem ()->myStochMgr ()->stochImpAllowed ())
      myMsgFac () ("attNYASmsg", "stochImpMode");

   theCall.setsStochAttr ();

   theCall.prepBool (
      "stochImpMode", 
      myProblem ()->myStochMgr ()->stochImpMode (), 
      boolval);

   if (theCall.argsOK ())
      myProblem ()->myStochMgr ()->setStochImpMode (asaBool (boolval));
   }

//------------------------------------------------------------------------------

@


1.123
log
@Stochastic Implosion
@
text
@d27 2
d657 4
a660 3
   apiGet (                        scenarioIndex,
                                  "scenarioIndex",
      myProblem ()->myStochMgr ()->scenarioIndex ());
d1319 1
d1331 1
a1331 1
      myProblem ()->myStochMgr ()->scenarioIndex (), 
d1337 6
a1342 1
      myProblem ()->myStochMgr ()->setScenarioIndex (scenarioIndex);
@


1.122
log
@Stochastic implosion.
@
text
@d151 2
a152 2
   apiGet (                    equitability, 
                              "equitability", 
d645 19
d1142 1
a1142 1
   theCall.prepBool (
d1313 25
d1396 2
@


1.121
log
@Stochastic implosion.
@
text
@d687 1
a687 1
void WitRun::witGetStochImpActive (WitBoolean * stochImpActive)
d692 1
a692 1
      myMsgFac () ("attNYASmsg", "stochImpActive");
d694 3
a696 3
   apiGet (                        stochImpActive, 
                                  "stochImpActive", 
      myProblem ()->myStochMgr ()->active ());
d698 1
a698 1
   issueGetAttrMsg ("stochImpActive");
d1345 1
a1345 1
void WitRun::witSetStochImpActive (WitBoolean boolval)
d1350 1
a1350 1
      myMsgFac () ("attNYASmsg", "stochImpActive");
d1353 2
a1354 2
      "stochImpActive", 
      myProblem ()->myStochMgr ()->active (), 
d1358 1
a1358 1
      myProblem ()->myStochMgr ()->setActive (asaBool (boolval));
@


1.120
log
@Stochastic Implosion.
@
text
@d696 1
a696 1
      myProblem ()->myStochMgr ()->stochImpActive ());
d1354 1
a1354 1
      myProblem ()->myStochMgr ()->stochImpActive (), 
d1358 1
a1358 1
      myProblem ()->myStochMgr ()->setStochImpActive (asaBool (boolval));
@


1.119
log
@Stochastic implosion.
@
text
@d687 16
d1345 18
@


1.118
log
@Stochastic implosion.
@
text
@d348 16
d675 3
d1100 18
d1315 3
@


1.117
log
@[backlog avoidance]
@
text
@d26 1
d655 13
d1274 15
@


1.116
log
@[backlog avoidance]
@
text
@a69 13
void WitRun::witGetBacklogAllowed  (WitBoolean * backlogAllowed)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    backlogAllowed,
                              "backlogAllowed", 
      theCall.myGlobalComp ()->backlogAllowed ());

   issueGetAttrMsg ("backlogAllowed");
   }

//-------------------------------------------------------------------------

a801 17
void WitRun::witSetBacklogAllowed (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (not theCall.myGlobalComp ()->allowBLA ())
      myMsgFac () ("attNYASmsg", "backlogAllowed");

   theCall.prepBool (
      "backlogAllowed", 
      theCall.myGlobalComp ()->backlogAllowed (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setBacklogAllowed (asaBool (boolval));
   }

//------------------------------------------------------------------------------

@


1.115
log
@External opt implosion.
@
text
@d68 13
d815 17
@


1.114
log
@Heuristic search increment.
@
text
@d506 7
a513 7
   WitDemTripStack      theShipSeq (myProblem ());
   int                  nTrips;
   int                  theIdx;
   WitDemand *          theDemand;
   WitPeriod            shipPer;
   double               incShipVol;

d804 2
@


1.113
log
@Heuristic search increment.
@
text
@a233 16
void WitRun::witGetHeurSearchInc (const WitOSRealArg & heurSearchInc)
   {
   WitGlobalCompApiCall theCall (this);

   if (not DEVELOPMENT)
      myMsgFac () ("attNotAvailSmsg", "heurSearchInc");

   apiGet (                    heurSearchInc,
                              "heurSearchInc",
      theCall.myGlobalComp ()->heurSearchInc ());

   issueGetAttrMsg ("heurSearchInc", heurSearchInc);
   }

//------------------------------------------------------------------------------

a919 20
void WitRun::witSetHeurSearchInc (const WitISRealArg & theVal)
   {
   WitGlobalCompApiCall theCall (this);

   if (not DEVELOPMENT)
      myMsgFac () ("attNotAvailSmsg", "heurSearchInc");

   theCall.prepLBDouble (
      "heurSearchInc",
      theCall.myGlobalComp ()->heurSearchInc (),
      theVal,
      0.000999,
      0.001);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setHeurSearchInc (theVal);
   }

//------------------------------------------------------------------------------

@


1.112
log
@Heuristic search increment.
@
text
@d239 1
a239 1
      myMsgFac () ("funcNotAvailSmsg", myApiMgr ()->apiFuncName ());
d941 1
a941 1
      myMsgFac () ("funcNotAvailSmsg", myApiMgr ()->apiFuncName ());
@


1.111
log
@App controlled opt implosion.
@
text
@d234 16
d936 20
@


1.110
log
@NSTN residual.
@
text
@d21 2
d568 1
a568 1
      myProblem ()->postprocessed ());
d595 1
a595 1
      myProblem ()->preprocessed ());
@


1.109
log
@NSTN residualVol.
@
text
@a1001 3
   if (not theCall.myGlobalComp ()->allowNstnRes ())
      myMsgFac () ("attNYASmsg", "minimalExcess");

a1099 3
   if (not theCall.myGlobalComp ()->allowNstnRes ())
      myMsgFac () ("attNYASmsg", "nstnResidual");

@


1.108
log
@NSTN residualVols.
@
text
@d299 13
d998 1
a998 1
void WitRun::witSetTieBreakPropRt (WitBoolean boolval)
d1002 3
d1006 2
a1007 3
                              "tieBreakPropRt",
      theCall.myGlobalComp ()->tieBreakPropRt (),
      boolval);
d1010 1
a1010 1
      theCall.myGlobalComp ()->setTieBreakPropRt (asaBool (boolval));
d1317 15
@


1.107
log
@App controlled opt implosion.
@
text
@d358 13
d1084 17
@


1.106
log
@App controlled opt implosion.
@
text
@a35 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a44 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a55 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a69 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a96 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a113 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a145 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a158 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a171 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a182 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a193 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a206 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a219 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a233 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a246 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a259 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a274 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a289 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a300 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a311 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a322 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a333 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a346 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a359 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a372 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a383 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a402 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a447 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a461 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a477 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a521 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a534 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a548 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a561 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a575 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a588 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a601 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a614 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a627 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a640 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a653 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a666 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a679 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a688 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a701 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a714 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a727 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a740 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a751 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a760 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a775 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a799 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a814 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a831 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a846 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a863 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a878 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a893 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a907 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a924 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a941 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a958 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a973 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a988 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1007 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1022 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1039 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1054 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1072 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1087 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1099 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1113 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1128 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1142 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1156 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1170 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1185 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1203 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1218 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1237 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1255 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1273 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1285 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1300 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1319 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1334 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a1348 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

@


1.105
log
@GPIP migration
@
text
@d36 4
d46 1
a46 1
   
d49 4
d64 4
d82 4
d113 4
d134 4
d170 4
d187 4
d204 4
d219 4
d234 4
d251 4
d268 4
d286 4
d303 4
d320 4
d339 4
d358 4
d373 4
d388 4
d403 4
d418 4
d435 4
d452 4
d469 4
d484 4
d507 4
d556 4
d574 4
d594 4
d642 4
d659 4
d677 4
d694 4
d712 4
d729 4
d746 4
d763 4
d780 4
d797 4
d814 4
d831 4
d848 4
d861 4
d878 4
d895 4
d912 4
d929 4
d944 4
d957 4
d976 4
d1004 4
d1023 4
d1044 4
d1063 4
d1084 4
d1103 4
d1122 4
d1140 4
d1161 4
d1182 4
d1203 4
d1222 4
d1241 4
d1264 4
d1283 4
d1304 4
d1323 4
d1345 4
d1364 4
d1380 4
d1398 4
d1417 4
d1435 4
d1453 4
d1471 4
d1490 4
d1512 4
d1531 4
d1554 4
d1576 4
d1598 4
d1614 4
d1633 4
d1656 4
d1675 4
d1693 4
@


1.104
log
@New PIP pegging order.
@
text
@a204 13
void WitRun::witGetGroupPipMode (WitBoolean * groupPipMode)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    groupPipMode, 
                              "groupPipMode", 
      theCall.myGlobalComp ()->groupPipMode ());

   issueGetAttrMsg ("groupPipMode");
   }

//------------------------------------------------------------------------------

a876 15
void WitRun::witSetGroupPipMode (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "groupPipMode", 
      theCall.myGlobalComp ()->groupPipMode (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setGroupPipMode (asaBool (boolval));
   }

//------------------------------------------------------------------------------

@


1.103
log
@New PIP pegging order.
@
text
@a1069 2
   myMsgFac () ("newPipPggOrderNYASmsg");

@


1.102
log
@New PIP pegging order.
@
text
@d1070 1
a1070 2
   if (not theCall.myGlobalComp ()->allowNewPipOrd ())
      myMsgFac () ("newPipPggOrderNYASmsg");
@


1.101
log
@Updated the copyright date on all source files.
@
text
@d345 13
d1066 18
@


1.100
log
@Continued the effort to make the apparent infinite loop in witExhaustMemory
invisible to the compiler, in order to prevent the compiler from issuing a
warning about it.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.99
log
@GPIP
@
text
@d1389 7
@


1.98
log
@GPIP
@
text
@a880 4
   if (not theCall.myGlobalComp ()->allowGpipMode ())
      myMsgFac () ("genericSmsg",
         "Group Post-Implosion Pegging is not yet implemented.");

@


1.97
log
@[shared-resource pegging]
@
text
@d205 13
a625 13
void WitRun::witGetSrpMode (WitBoolean * srpMode)
   {
   WitGlobalCompApiCall theCall (this);

   apiGet (                    srpMode, 
                              "srpMode", 
      theCall.myGlobalComp ()->srpMode ());

   issueGetAttrMsg ("srpMode");
   }

//------------------------------------------------------------------------------

d877 19
a1220 19
void WitRun::witSetSrpMode (WitBoolean boolval)
   {
   WitGlobalCompApiCall theCall (this);

   if (not theCall.myGlobalComp ()->allowSrpMode ())
      myMsgFac () ("genericSmsg",
         "Shared-Resource Pegging is not yet implemented.");

   theCall.prepBool (
      "srpMode", 
      theCall.myGlobalComp ()->srpMode (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setSrpMode (asaBool (boolval));
   }

//------------------------------------------------------------------------------

@


1.96
log
@Began [shared-resource pegging]
@
text
@a23 1
#include <PerPair.h>
d133 2
a134 1
      thePartPer->getElems (thePart, (* perList)[i]);
@


1.95
log
@[multi-thread]:
   Moved PROLOG/EPILOG responsibility from the inner layer of the API
   to the outer layer.
@
text
@d613 13
d1202 19
@


1.94
log
@[multi-threads]
@
text
@a17 1
#include <ProEpilog.h>
d35 1
a35 1
WitReturnCode WitRun::witClearPipSeq ()
a36 2
   PROLOG ("witClearPipSeq");

a39 2

   EPILOG;
d44 1
a44 1
WitReturnCode WitRun::witGetAppData (void * * appData)
a45 2
   PROLOG ("witGetAppData");

a50 2

   EPILOG;
d55 1
a55 1
WitReturnCode WitRun::witGetAutoPriority (WitBoolean * autoPriority)
a56 2
   PROLOG ("witGetAutoPriority");

a64 2

   EPILOG;
d69 1
a69 1
WitReturnCode WitRun::witGetBuildWhenEmpty (WitBoolean * buildWhenEmpty)
a70 2
   PROLOG ("witGetBuildWhenEmpty");

a90 2

   EPILOG;
d95 1
a95 1
WitReturnCode WitRun::witGetComputeCriticalList (
a97 2
   PROLOG ("witGetComputeCriticalList");

a105 2

   EPILOG;
d110 1
a110 1
WitReturnCode WitRun::witGetCriticalList (
a118 2
   PROLOG ("witGetCriticalList");

a139 2

   EPILOG;
d144 1
a144 1
WitReturnCode WitRun::witGetEquitability (int * equitability)
a145 2
   PROLOG ("witGetEquitability");

a152 2

   EPILOG;
d157 1
a157 1
WitReturnCode WitRun::witGetExecEmptyBom (WitBoolean * execEmptyBom)
a158 2
   PROLOG ("witGetExecEmptyBom");

a165 2

   EPILOG;
d170 1
a170 1
WitReturnCode WitRun::witGetExpCutoff (const WitOSRealArg & expCutoff)
a171 2
   PROLOG ("witGetExpCutoff");

a176 2

   EPILOG;
d181 1
a181 1
WitReturnCode WitRun::witGetFeasible (WitBoolean * feasible)
a182 2
   PROLOG ("witGetFeasible");

a187 2

   EPILOG;
d192 1
a192 1
WitReturnCode WitRun::witGetForcedMultiEq (WitBoolean * forcedMultiEq)
a193 2
   PROLOG ("witGetForcedMultiEq");

a200 2

   EPILOG;
d205 1
a205 1
WitReturnCode WitRun::witGetHashTableSize (int * hashTableSize)
a206 2
   PROLOG ("witGetHashTableSize");

a213 2

   EPILOG;
d218 1
a218 1
WitReturnCode WitRun::witGetHeurAllocActive (WitBoolean * heurAllocActive)
a219 2
   PROLOG ("witGetHeurAllocActive");

a227 2

   EPILOG;
d232 1
a232 1
WitReturnCode WitRun::witGetHighPrecisionWD (WitBoolean * highPrecisionWD)
a233 2
   PROLOG ("witGetHighPrecisionWD");

a240 2

   EPILOG;
d245 1
a245 1
WitReturnCode WitRun::witGetIndependentOffsets (WitBoolean * independentOffsets)
a246 2
   PROLOG ("witGetIndependentOffsets");

a253 2

   EPILOG;
d258 1
a258 1
WitReturnCode WitRun::witGetLocalBuildAhead (WitBoolean * localBuildAhead)
a259 2
   PROLOG ("witGetLocalBuildAhead");

a268 2

   EPILOG;
d273 1
a273 1
WitReturnCode WitRun::witGetLocalMultiExec (WitBoolean * localMultiExec)
a274 2
   PROLOG ("witGetLocalMultiExec");

a283 2

   EPILOG;
d288 1
a288 1
WitReturnCode WitRun::witGetLotSizeTol (const WitOSRealArg & lotSizeTol)
a289 2
   PROLOG ("witGetLotSizeTol");

a294 2

   EPILOG;
d299 1
a299 1
WitReturnCode WitRun::witGetMultiExec (WitBoolean * multiExec)
a300 2
   PROLOG ("witGetMultiExec");

a305 2

   EPILOG;
d310 1
a310 1
WitReturnCode WitRun::witGetMultiRoute  (WitBoolean * multiRoute)
a311 2
   PROLOG ("witGetMultiRoute");

a316 2

   EPILOG;
d321 1
a321 1
WitReturnCode WitRun::witGetNPeriods (int * nPeriodsArg)
a322 2
   PROLOG ("witGetNPeriods");

a327 2

   EPILOG;
d332 1
a332 1
WitReturnCode WitRun::witGetNonMrSelSplit (WitBoolean * nonMrSelSplit)
a333 2
   PROLOG ("witGetNonMrSelSplit");

a340 2

   EPILOG;
d345 1
a345 1
WitReturnCode WitRun::witGetOutputPrecision (int * outputPrecision)
a346 2
   PROLOG ("witGetOutputPrecision");

a353 2

   EPILOG;
d358 1
a358 1
WitReturnCode WitRun::witGetPenExec (WitBoolean * penExec)
a359 2
   PROLOG ("witGetPenExec");

a364 2

   EPILOG;
d369 1
a369 1
WitReturnCode WitRun::witGetPerfPegging (WitBoolean * perfPegging)
a370 2
   PROLOG ("witGetPerfPegging");

a377 2

   EPILOG;
d382 1
a382 1
WitReturnCode WitRun::witGetPgdCritList (
a392 2
   PROLOG ("witGetPgdCritList");

a428 2

   EPILOG;
d433 1
a433 1
WitReturnCode WitRun::witGetPgdCritListMode (WitBoolean * pgdCritListMode)
a434 2
   PROLOG ("witGetPgdCritListMode");

a442 2

   EPILOG;
d447 1
a447 1
WitReturnCode WitRun::witGetPipExists (WitBoolean * pipExists)
a448 2
   PROLOG ("witGetPipExists");

a453 2

   EPILOG;
d458 1
a458 1
WitReturnCode WitRun::witGetPipSeq (
a464 2
   PROLOG ("witGetPipSeq");

a502 2

   EPILOG;
d507 1
a507 1
WitReturnCode WitRun::witGetPipSeqFromHeur (WitBoolean * pipSeqFromHeur)
a508 2
   PROLOG ("witGetPipSeqFromHeur");

a515 2

   EPILOG;
d520 1
a520 1
WitReturnCode WitRun::witGetPostprocessed (WitBoolean * postprocessed)
a521 2
   PROLOG ("witGetPostprocessed");

a529 2

   EPILOG;
d534 1
a534 1
WitReturnCode WitRun::witGetPrefHighStockSLBs (WitBoolean * prefHighStockSLBs)
a535 2
   PROLOG ("witGetPrefHighStockSLBs");

a542 2

   EPILOG;
d547 1
a547 1
WitReturnCode WitRun::witGetPreprocessed (WitBoolean * preprocessed)
a548 2
   PROLOG ("witGetPreprocessed");

a556 2

   EPILOG;
d561 1
a561 1
WitReturnCode WitRun::witGetRespectStockSLBs (WitBoolean * respectStockSLBs)
a562 2
   PROLOG ("witGetRespectStockSLBs");

a569 2

   EPILOG;
d574 1
a574 1
WitReturnCode WitRun::witGetRoundReqVols (WitBoolean * roundReqVols)
a575 2
   PROLOG ("witGetRoundReqVols");

a582 2

   EPILOG;
d587 1
a587 1
WitReturnCode WitRun::witGetSelSplit (WitBoolean * selSplit)
a588 2
   PROLOG ("witGetSelSplit");

a595 2

   EPILOG;
d600 1
a600 1
WitReturnCode WitRun::witGetSkipFailures (WitBoolean * skipFailures)
a601 2
   PROLOG ("witGetSkipFailures");

a608 2

   EPILOG;
d613 1
a613 1
WitReturnCode WitRun::witGetStockRealloc (WitBoolean * stockRealloc)
a614 2
   PROLOG ("witGetStockRealloc");

a621 2

   EPILOG;
d626 1
a626 1
WitReturnCode WitRun::witGetStockReallocation (WitBoolean * stockReallocation)
a627 2
   PROLOG ("witGetStockReallocation");

a634 2

   EPILOG;
d639 1
a639 1
WitReturnCode WitRun::witGetSrSelSplit (WitBoolean * srSelSplit)
a640 2
   PROLOG ("witGetSrSelSplit");

a647 2

   EPILOG;
d652 1
a652 1
WitReturnCode WitRun::witGetTieBreakPropRt (WitBoolean * tieBreakPropRt)
a653 2
   PROLOG ("witGetTieBreakPropRt");

a660 2

   EPILOG;
d665 1
a665 1
WitReturnCode WitRun::witGetTitle (char * * title)
a666 2
   PROLOG ("witGetTitle");

a669 2

   EPILOG;
d674 1
a674 1
WitReturnCode WitRun::witGetTruncOffsets  (WitBoolean * truncOffsets)
a675 2
   PROLOG ("witGetTruncOffsets");

a682 2

   EPILOG;
d687 1
a687 1
WitReturnCode WitRun::witGetTwoWayMultiExec (WitBoolean * twoWayMultiExec)
a688 2
   PROLOG ("witGetTwoWayMultiExec");

a695 2

   EPILOG;
d700 1
a700 1
WitReturnCode WitRun::witGetUseFocusHorizons (WitBoolean * useFocusHorizons)
a701 2
   PROLOG ("witGetUseFocusHorizons");

a708 2

   EPILOG;
d713 1
a713 1
WitReturnCode WitRun::witGetUserHeurStart (WitBoolean * userHeurStart)
a714 2
   PROLOG ("witGetUserHeurStart");

a721 2

   EPILOG;
d726 1
a726 1
WitReturnCode WitRun::witGetWit34Compatible (WitBoolean * retVal)
a727 2
   PROLOG ("witGetWit34Compatible");

a732 2

   EPILOG;
d737 1
a737 1
WitReturnCode WitRun::witSetAppData (void * appData)
a738 2
   PROLOG ("witSetAppData");

a741 2

   EPILOG;
d746 1
a746 1
WitReturnCode WitRun::witSetAutoPriority (WitBoolean boolval)
a747 2
   PROLOG ("witSetAutoPriority");

a756 2

   EPILOG;
d761 1
a761 1
WitReturnCode WitRun::witSetBuildWhenEmpty (WitBoolean boolval)
a762 2
   PROLOG ("witSetBuildWhenEmpty");

a780 2

   EPILOG;
d785 1
a785 1
WitReturnCode WitRun::witSetComputeCriticalList (WitBoolean boolval)
a786 2
   PROLOG ("witSetComputeCriticalList");

a795 2

   EPILOG;
d800 1
a800 1
WitReturnCode WitRun::witSetEquitability (int equit)
a801 2
   PROLOG ("witSetEquitability");

a812 2

   EPILOG;
d817 1
a817 1
WitReturnCode WitRun::witSetExecEmptyBom (WitBoolean boolval)
a818 2
   PROLOG ("witSetExecEmptyBom");

a827 2

   EPILOG;
d832 1
a832 1
WitReturnCode WitRun::witSetExpCutoff (const WitISRealArg & theVal)
a833 2
   PROLOG ("witSetExpCutoff");

a844 2

   EPILOG;
d849 1
a849 1
WitReturnCode WitRun::witSetForcedMultiEq (WitBoolean boolval)
a850 2
   PROLOG ("witSetForcedMultiEq");

a859 2

   EPILOG;
d864 1
a864 1
WitReturnCode WitRun::witSetHashTableSize (int size)
a865 2
   PROLOG ("witSetHashTableSize");

a874 2

   EPILOG;
d879 1
a879 1
WitReturnCode WitRun::witSetHighPrecisionWD (WitBoolean boolval)
a880 2
   PROLOG ("witSetHighPrecisionWD");

a888 2

   EPILOG;
d893 1
a893 1
WitReturnCode WitRun::witSetIndependentOffsets (WitBoolean theValue)
a894 2
   PROLOG ("witSetIndependentOffsets");

a905 2

   EPILOG;
d910 1
a910 1
WitReturnCode WitRun::witSetLocalBuildAhead (WitBoolean boolval)
a911 2
   PROLOG ("witSetLocalBuildAhead");

a922 2

   EPILOG;
d927 1
a927 1
WitReturnCode WitRun::witSetLocalMultiExec (WitBoolean boolval)
a928 2
   PROLOG ("witSetLocalMultiExec");

a939 2

   EPILOG;
d944 1
a944 1
WitReturnCode WitRun::witSetLotSizeTol (const WitISRealArg & theVal)
a945 2
   PROLOG ("witSetLotSizeTol");

a954 2

   EPILOG;
d959 1
a959 1
WitReturnCode WitRun::witSetTieBreakPropRt (WitBoolean boolval)
a960 2
   PROLOG ("witSetTieBreakPropRt");

a969 2

   EPILOG;
d974 1
a974 1
WitReturnCode WitRun::witSetMultiExec (WitBoolean boolval)
a975 2
   PROLOG ("witSetMultiExec");

a988 2

   EPILOG;
d993 1
a993 1
WitReturnCode WitRun::witSetMultiRoute (WitBoolean boolval)
a994 2
   PROLOG ("witSetMultiRoute");

a1003 2

   EPILOG;
d1008 1
a1008 1
WitReturnCode WitRun::witSetNPeriods (int nper)
a1009 2
   PROLOG ("witSetNPeriods");

a1020 2

   EPILOG;
d1025 1
a1025 1
WitReturnCode WitRun::witSetNonMrSelSplit (WitBoolean boolval)
a1026 2
   PROLOG ("witSetNonMrSelSplit");

a1038 2

   EPILOG;
d1043 1
a1043 1
WitReturnCode WitRun::witSetOutputPrecision (int outputPrecisionParm)
a1044 2
   PROLOG ("witOutputPrecision");

a1053 2

   EPILOG;
d1058 1
a1058 1
WitReturnCode WitRun::witSetPenExec (WitBoolean boolval)
a1059 2
   PROLOG ("witSetPenExec");

a1065 2

   EPILOG;
d1070 1
a1070 1
WitReturnCode WitRun::witSetPerfPegging (WitBoolean boolval)
a1071 2
   PROLOG ("witSetPerfPegging");

a1079 2

   EPILOG;
d1084 1
a1084 1
WitReturnCode WitRun::witSetPgdCritListMode (WitBoolean boolval)
a1085 2
   PROLOG ("witSetPgdCritListMode");

a1094 2

   EPILOG;
d1099 1
a1099 1
WitReturnCode WitRun::witSetPipSeqFromHeur (WitBoolean boolval)
a1100 2
   PROLOG ("witSetPipSeqFromHeur");

a1108 2

   EPILOG;
d1113 1
a1113 1
WitReturnCode WitRun::witSetPrefHighStockSLBs (WitBoolean boolval)
a1114 2
   PROLOG ("witSetPrefHighStockSLBs");

a1122 2

   EPILOG;
d1127 1
a1127 1
WitReturnCode WitRun::witSetRespectStockSLBs (WitBoolean boolval)
a1128 2
   PROLOG ("witSetRespectStockSLBs");

a1136 2

   EPILOG;
d1141 1
a1141 1
WitReturnCode WitRun::witSetRoundReqVols (WitBoolean boolval)
a1142 2
   PROLOG ("witSetRoundReqVols");

a1151 2

   EPILOG;
d1156 1
a1156 1
WitReturnCode WitRun::witSetSelSplit (WitBoolean boolval)
a1157 2
   PROLOG ("witSetSelSplit");

a1169 2

   EPILOG;
d1174 1
a1174 1
WitReturnCode WitRun::witSetSkipFailures (WitBoolean boolval)
a1175 2
   PROLOG ("witSetSkipFailures");

a1184 2

   EPILOG;
d1189 1
a1189 1
WitReturnCode WitRun::witSetStockRealloc (WitBoolean boolval)
a1190 2
   PROLOG ("witSetStockRealloc");

a1203 2

   EPILOG;
d1208 1
a1208 1
WitReturnCode WitRun::witSetStockReallocation (WitBoolean boolval)
a1209 2
   PROLOG ("witSetStockReallocation");

a1221 2

   EPILOG;
d1226 1
a1226 1
WitReturnCode WitRun::witSetSrSelSplit (WitBoolean boolval)
a1227 2
   PROLOG ("witSetSrSelSplit");

a1239 2

   EPILOG;
d1244 1
a1244 1
WitReturnCode WitRun::witSetTitle (const char * newTitle)
a1245 2
   PROLOG ("witSetTitle");

a1251 2

   EPILOG;
d1256 1
a1256 1
WitReturnCode WitRun::witSetTruncOffsets  (WitBoolean boolval)
a1257 2
   PROLOG ("witSetTruncOffsets");

a1266 2

   EPILOG;
d1271 1
a1271 1
WitReturnCode WitRun::witSetTwoWayMultiExec (WitBoolean boolval)
a1272 2
   PROLOG ("witSetTwoWayMultiExec");

a1285 2

   EPILOG;
d1290 1
a1290 1
WitReturnCode WitRun::witSetUseFocusHorizons (WitBoolean newValue)
a1291 2
   PROLOG ("witSetUseFocusHorizons");

a1300 2

   EPILOG;
d1305 1
a1305 1
WitReturnCode WitRun::witSetUserHeurStart (WitBoolean boolval)
a1306 2
   PROLOG ("witSetUserHeurStart");

a1314 2

   EPILOG;
d1319 1
a1319 1
WitReturnCode WitRun::witSetWit34Compatible (WitBoolean boolval)
a1320 2
   PROLOG ("witSetWit34Compatible");

a1332 2

   EPILOG;
d1339 2
a1340 3
   if (myApiMgr ()->calledByApp ())
      if (myMsgFac ().mayIssue ("getAttrMsg"))
         myMsgFac () ("getAttrMsg", theAttr);
d1350 2
a1351 3
   if (myApiMgr ()->calledByApp ())
      if (myMsgFac ().mayIssue ("getDblAttrMsg"))
         myMsgFac () ("getDblAttrMsg", theAttr, theArg.appVarVal ());
d1358 2
a1359 3
   if (myApiMgr ()->calledByApp ())
      if (myMsgFac ().mayIssue ("getIntAttrMsg"))
         myMsgFac () ("getIntAttrMsg", theAttr, * theIntPtr);
@


1.93
log
@[exceptions]
@
text
@d1680 1
a1680 1
   if (myApiMgr ()->applicationCalled ())
d1692 1
a1692 1
   if (myApiMgr ()->applicationCalled ())
d1701 1
a1701 1
   if (myApiMgr ()->applicationCalled ())
@


1.92
log
@Vector PropRt.
@
text
@d18 1
@


1.91
log
@Pegged Critical List.
@
text
@d28 3
a30 3
#include <InScalRA.h>
#include <OutScalRA.h>
#include <OutVecRA.h>
d202 1
a202 1
WitReturnCode WitRun::witGetExpCutoff (const WitOutScalRA & expCutoff)
d356 1
a356 1
WitReturnCode WitRun::witGetLotSizeTol (const WitOutScalRA & lotSizeTol)
d571 5
a575 5
      int *               lenLists,
      char * * *          partNameList,
      char * * *          demandNameList,
      int * *             shipPerList,
      const WitOutVecRA & incShipVolList)
d1044 1
a1044 1
WitReturnCode WitRun::witSetExpCutoff (const WitInScalRA & theVal)
d1184 1
a1184 1
WitReturnCode WitRun::witSetLotSizeTol (const WitInScalRA & theVal)
d1688 1
a1688 1
      const WitOutScalRA & theArg)
@


1.90
log
@Pegged Critical List.
@
text
@d158 1
a158 1
      (* partList)[i] = dupCstring (thePart->partName ());
d517 1
a517 1
         dupCstring (thePclEl->critPart ()->partName ());
d522 1
a522 1
         dupCstring (thePclEl->myDemand ()->demandedPartName ());
d525 1
a525 1
         dupCstring (thePclEl->myDemand ()->demandName ());
d610 4
a613 2
      (* partNameList)  [theIdx] = dupCstring (theDemand->demandedPartName ());
      (* demandNameList)[theIdx] = dupCstring (theDemand->demandName ());
@


1.89
log
@Pegged Critical List.
@
text
@d484 2
d488 1
a488 3
      int * *    shipPerList,
      char * * * critPartNameList,
      int * *    critPerList)
d498 2
a502 2
   forbidNullArg (critPartNameList, "critPartNameList");
   forbidNullArg (critPerList,      "critPerList");
d506 2
a510 2
   apiAlloc (critPartNameList, * lenLists);
   apiAlloc (critPerList,      * lenLists);
d516 5
a528 5
      (* critPartNameList)[theIdx] =
         dupCstring (thePclEl->critPart ()->partName ());

      (* critPerList)[theIdx] = thePclEl->critPer ();

@


1.88
log
@Pegged Critical List.
@
text
@d506 3
a508 3
   apiAlloc (demPartNameList, *  lenLists);
   apiAlloc (demandNameList, *   lenLists);
   apiAlloc (shipPerList, *      lenLists);
d510 1
a510 1
   apiAlloc (critPerList, *      lenLists);
@


1.87
log
@Pegged Critical List.
@
text
@a496 3
   if (not theCall.myGlobalComp ()->allowPCL ())
      myMsgFac () ("pgdCritListNYISmsg");

a542 3
   if (not theCall.myGlobalComp ()->allowPCL ())
      myMsgFac () ("pgdCritListNYISmsg");

a1363 3
   if (not theCall.myGlobalComp ()->allowPCL ())
      myMsgFac () ("pgdCritListNYISmsg");

@


1.86
log
@Pegged Critical List.
@
text
@d25 1
d482 58
d546 3
@


1.85
log
@Pegged Critical List
@
text
@d481 1
a481 1
WitReturnCode WitRun::witGetPgdCritListNeeded (WitBoolean * pgdCritListNeeded)
d483 1
a483 1
   PROLOG ("witGetPgdCritListNeeded");
d488 3
a490 3
                               pgdCritListNeeded,
                              "pgdCritListNeeded",
      theCall.myGlobalComp ()->pgdCritListNeeded ());
d492 1
a492 1
   issueGetAttrMsg ("pgdCritListNeeded");
d1302 1
a1302 1
WitReturnCode WitRun::witSetPgdCritListNeeded (WitBoolean boolval)
d1304 1
a1304 1
   PROLOG ("witSetPgdCritListNeeded");
d1312 2
a1313 2
      "pgdCritListNeeded", 
      theCall.myGlobalComp ()->pgdCritListNeeded (), 
d1317 1
a1317 1
      theCall.myGlobalComp ()->setPgdCritListNeeded (asaBool (boolval));
@


1.84
log
@Pegged Critical List.
@
text
@a109 18
WitReturnCode WitRun::witGetCompPgdCritList (WitBoolean * compPgdCritList)
   {
   PROLOG ("witGetCompPgdCritList");

   WitGlobalCompApiCall theCall (this);

   apiGet (
                               compPgdCritList,
                              "compPgdCritList",
      theCall.myGlobalComp ()->compPgdCritList ());

   issueGetAttrMsg ("compPgdCritList");

   EPILOG;
   }

//------------------------------------------------------------------------------

d481 18
a926 22
WitReturnCode WitRun::witSetCompPgdCritList (WitBoolean boolval)
   {
   PROLOG ("witSetCompPgdCritList");

   WitGlobalCompApiCall theCall (this);

   if (not theCall.myGlobalComp ()->allowPCL ())
      myMsgFac () ("pgdCritListNYISmsg");

   theCall.prepBool (
      "compPgdCritList", 
      theCall.myGlobalComp ()->compPgdCritList (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setCompPgdCritList (asaBool (boolval));

   EPILOG;
   }

//------------------------------------------------------------------------------

d1302 22
@


1.83
log
@Tie Breaking Prop-Rt.
@
text
@d110 18
d927 22
@


1.82
log
@Changed terminology from "low priority proportionate routing" to
"tie breaking proportionate routing".
@
text
@d26 1
a26 1
#include <PipSysMgr.h>
d40 1
a40 1
   myProblem ()->myPipSysMgr ()->clearShipSeq ();
d487 1
a487 3
   apiGet (pipExists, 
      "pipExists", 
      myProblem ()->myPipSysMgr ()->peggingExists ());
d514 1
a514 1
   myProblem ()->myPipSysMgr ()->getShipSeq (theShipSeq);
@


1.81
log
@Low-Pri Prop-Rt.
@
text
@a369 18
WitReturnCode WitRun::witGetLowPriPropRt (WitBoolean * lowPriPropRt)
   {
   PROLOG ("witGetLowPriPropRt");

   WitGlobalCompApiCall theCall (this);

   apiGet (
                               lowPriPropRt,
                              "lowPriPropRt",
      theCall.myGlobalComp ()->lowPriPropRt ());

   issueGetAttrMsg ("lowPriPropRt");

   EPILOG;
   }

//------------------------------------------------------------------------------

d738 17
d1129 1
a1129 1
WitReturnCode WitRun::witSetLowPriPropRt (WitBoolean boolval)
d1131 1
a1131 1
   PROLOG ("witSetLowPriPropRt");
d1136 2
a1137 2
                              "lowPriPropRt",
      theCall.myGlobalComp ()->lowPriPropRt (),
d1141 1
a1141 1
      theCall.myGlobalComp ()->setLowPriPropRt (asaBool (boolval));
@


1.80
log
@Low-Pri Prop-Rt.
@
text
@a1140 3
   if (not myGlobalComp ()->allowLPPR ())
      myMsgFac () ("lowPriPropRtNYASmsg");

@


1.79
log
@Continued implmentation of low priority proportionate routing.
@
text
@d1141 1
a1141 1
   if (not myGlobalComp ()->allowLowPriPR ())
@


1.78
log
@Continued implementation of pen-exec override of prop-rt.
@
text
@d370 18
a481 18
WitReturnCode WitRun::witGetPenExecOverPropRt (WitBoolean * penExecOverPropRt)
   {
   PROLOG ("witGetPenExecOverPropRt");

   WitGlobalCompApiCall theCall (this);

   apiGet (
                               penExecOverPropRt,
                              "penExecOverPropRt",
      theCall.myGlobalComp ()->penExecOverPropRt ());

   issueGetAttrMsg ("penExecOverPropRt");

   EPILOG;
   }

//------------------------------------------------------------------------------

d1130 22
a1271 22
WitReturnCode WitRun::witSetPenExecOverPropRt (WitBoolean boolval)
   {
   PROLOG ("witSetPenExecOverPropRt");

   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
                              "penExecOverPropRt",
      theCall.myGlobalComp ()->penExecOverPropRt (),
      boolval);

   if (not myGlobalComp ()->allowPeOverPr ())
      myMsgFac () ("peOverPrNYASmsg");

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPenExecOverPropRt (asaBool (boolval));

   EPILOG;
   }

//------------------------------------------------------------------------------

@


1.77
log
@Began work on [propRouting as penExec tie-breaker].
@
text
@d1261 1
a1261 1
   if (not myGlobalComp ()->peOverPrAllowed ())
@


1.76
log
@Minor change.
@
text
@d464 18
d1250 22
@


1.75
log
@Double Precision.
@
text
@a30 1
#include <wit.h>
@


1.74
log
@Double Precision.
@
text
@d1564 2
a1565 2
      if (myMsgFac ().mayIssue ("getFltAttrMsg"))
         myMsgFac () ("getFltAttrMsg", theAttr, theArg.appVarVal ());
@


1.73
log
@Double Precision.
@
text
@a1557 9
void WitRun::issueGetAttrMsg (WitAttr theAttr, const float * theFloatPtr) const
   {
   if (myApiMgr ()->applicationCalled ())
      if (myMsgFac ().mayIssue ("getFltAttrMsg"))
         myMsgFac () ("getFltAttrMsg", theAttr, * theFloatPtr);
   }

//------------------------------------------------------------------------------

@


1.72
log
@Double Precision.
@
text
@d284 1
a284 1
WitReturnCode WitRun::witGetPipSeqFromHeur (WitBoolean * pipSeqFromHeur)
d286 1
a286 1
   PROLOG ("witGetPipSeqFromHeur");
d290 3
a292 3
   apiGet (pipSeqFromHeur, 
      "pipSeqFromHeur", 
      theCall.myGlobalComp ()->pipSeqFromHeur ());
d294 1
a294 1
   issueGetAttrMsg ("pipSeqFromHeur");
d550 17
d1013 1
a1013 1
WitReturnCode WitRun::witSetPipSeqFromHeur (WitBoolean boolval)
d1015 1
a1015 1
   PROLOG ("witSetPipSeqFromHeur");
d1020 2
a1021 2
      "pipSeqFromHeur", 
      theCall.myGlobalComp ()->pipSeqFromHeur (), boolval);
d1024 1
a1024 1
      theCall.myGlobalComp ()->setPipSeqFromHeur (asaBool (boolval));
d1245 18
@


1.71
log
@Double Precision.
@
text
@d149 2
a150 2
   apiAlloc (* partList, * lenCritList);
   apiAlloc (* perList,  * lenCritList);
d528 4
a531 5
   apiAlloc    (* partNameList,   nTrips);
   apiAlloc    (* demandNameList, nTrips);
   apiAlloc    (* shipPerList,    nTrips);

   incShipVolList.apiAlloc (nTrips);
@


1.70
log
@Double Precision.
@
text
@d29 1
d500 5
a504 5
      int *      lenLists,
      char * * * partNameList,
      char * * * demandNameList,
      int * *    shipPerList,
      float * *  incShipVolList)
d531 2
a532 1
   apiAlloc    (* incShipVolList, nTrips);
d543 1
a543 1
      (* incShipVolList)[theIdx] = incShipVol;
@


1.69
log
@Double Precision.
@
text
@d201 1
a201 1
WitReturnCode WitRun::witGetExpCutoff (WitOutScalRA expCutoff)
d355 1
a355 1
WitReturnCode WitRun::witGetLotSizeTol (WitOutScalRA lotSizeTol)
@


1.68
log
@Double Precision.
@
text
@d1027 1
a1027 1
      theCall.myGlobalComp ()->setIndependentOffsets (theValue);
d1466 1
a1466 1
      theCall.myGlobalComp ()->setUseFocusHorizons (newValue);
@


1.67
log
@Double Precision.
@
text
@d936 1
a936 1
WitReturnCode WitRun::witSetExpCutoff (WitInScalRA theVal)
d1076 1
a1076 1
WitReturnCode WitRun::witSetLotSizeTol (WitInScalRA theVal)
@


1.66
log
@Double Precision.
@
text
@d842 1
a842 1
      theCall.myGlobalComp ()->setAutoPriority (boolval);
d862 1
a862 1
      witSetExecEmptyBom (boolval);
d889 1
a889 1
      theCall.myGlobalComp ()->setComputeCriticalList (boolval);
d929 1
a929 1
      theCall.myGlobalComp ()->setExecEmptyBom (boolval);
d969 1
a969 1
      theCall.myGlobalComp ()->setForcedMultiEq (boolval);
d1006 1
a1006 1
      theCall.myGlobalComp ()->setPipSeqFromHeur (boolval);
d1048 1
a1048 1
      theCall.myGlobalComp ()->setLocalBuildAhead (boolval);
d1069 1
a1069 1
      theCall.myGlobalComp ()->setLocalMultiExec (boolval);
d1111 1
a1111 1
      theCall.myGlobalComp ()->setMultiExec (boolval);
d1130 1
a1130 1
      theCall.myGlobalComp ()->setMultiRoute (boolval);
d1173 1
a1173 1
      theCall.myGlobalComp ()->setNonMrSelSplit (boolval);
d1208 1
a1208 1
      theCall.myGlobalComp ()->setPenExec (boolval);
d1226 1
a1226 1
      theCall.myGlobalComp ()->setPerfPegging (boolval);
d1244 1
a1244 1
      theCall.myGlobalComp ()->setPrefHighStockSLBs (boolval);
d1262 1
a1262 1
      theCall.myGlobalComp ()->setRespectStockSLBs (boolval);
d1281 1
a1281 1
      theCall.myGlobalComp ()->setRoundReqVols (boolval);
d1303 1
a1303 1
      theCall.myGlobalComp ()->setSelSplit (boolval);
d1322 1
a1322 1
      theCall.myGlobalComp ()->setSkipFailures (boolval);
d1345 1
a1345 1
      theCall.myGlobalComp ()->setStockRealloc (boolval);
d1367 1
a1367 1
      theCall.myGlobalComp ()->setStockReallocation (boolval);
d1389 1
a1389 1
      theCall.myGlobalComp ()->setSrSelSplit (boolval);
d1424 1
a1424 1
      theCall.myGlobalComp ()->setTruncOffsets (boolval);
d1447 1
a1447 1
      theCall.myGlobalComp ()->setTwoWayMultiExec (boolval);
d1484 1
a1484 1
      theCall.myGlobalComp ()->setUserHeurStart (boolval);
d1506 1
a1506 1
      theCall.myGlobalComp ()->setWit34Compatible (boolval);
@


1.65
log
@Double Precision.
@
text
@d30 1
d62 1
a62 1
WitReturnCode WitRun::witGetAutoPriority (witBoolean * autoPriority)
d80 1
a80 1
WitReturnCode WitRun::witGetBuildWhenEmpty (witBoolean * buildWhenEmpty)
d111 1
a111 1
      witBoolean * computeCriticalList)
d184 1
a184 1
WitReturnCode WitRun::witGetExecEmptyBom (witBoolean * execEmptyBom)
d216 1
a216 1
WitReturnCode WitRun::witGetFeasible (witBoolean * feasible)
d231 1
a231 1
WitReturnCode WitRun::witGetForcedMultiEq (witBoolean * forcedMultiEq)
d265 1
a265 1
WitReturnCode WitRun::witGetHeurAllocActive (witBoolean * heurAllocActive)
d283 1
a283 1
WitReturnCode WitRun::witGetPipSeqFromHeur (witBoolean * pipSeqFromHeur)
d300 1
a300 1
WitReturnCode WitRun::witGetIndependentOffsets (witBoolean * independentOffsets)
d317 1
a317 1
WitReturnCode WitRun::witGetLocalBuildAhead (witBoolean * localBuildAhead)
d336 1
a336 1
WitReturnCode WitRun::witGetLocalMultiExec (witBoolean * localMultiExec)
d370 1
a370 1
WitReturnCode WitRun::witGetMultiExec (witBoolean * multiExec)
d385 1
a385 1
WitReturnCode WitRun::witGetMultiRoute  (witBoolean * multiRoute)
d415 1
a415 1
WitReturnCode WitRun::witGetNonMrSelSplit (witBoolean * nonMrSelSplit)
d449 1
a449 1
WitReturnCode WitRun::witGetPenExec (witBoolean * penExec)
d464 1
a464 1
WitReturnCode WitRun::witGetPerfPegging (witBoolean * perfPegging)
d481 1
a481 1
WitReturnCode WitRun::witGetPipExists (witBoolean * pipExists)
d549 1
a549 1
WitReturnCode WitRun::witGetPostprocessed (witBoolean * postprocessed)
d567 1
a567 1
WitReturnCode WitRun::witGetPrefHighStockSLBs (witBoolean * prefHighStockSLBs)
d584 1
a584 1
WitReturnCode WitRun::witGetPreprocessed (witBoolean * preprocessed)
d602 1
a602 1
WitReturnCode WitRun::witGetRespectStockSLBs (witBoolean * respectStockSLBs)
d619 1
a619 1
WitReturnCode WitRun::witGetRoundReqVols (witBoolean * roundReqVols)
d636 1
a636 1
WitReturnCode WitRun::witGetSelSplit (witBoolean * selSplit)
d653 1
a653 1
WitReturnCode WitRun::witGetSkipFailures (witBoolean * skipFailures)
d670 1
a670 1
WitReturnCode WitRun::witGetStockRealloc (witBoolean * stockRealloc)
d687 1
a687 1
WitReturnCode WitRun::witGetStockReallocation (witBoolean * stockReallocation)
d704 1
a704 1
WitReturnCode WitRun::witGetSrSelSplit (witBoolean * srSelSplit)
d734 1
a734 1
WitReturnCode WitRun::witGetTruncOffsets  (witBoolean * truncOffsets)
d751 1
a751 1
WitReturnCode WitRun::witGetTwoWayMultiExec (witBoolean * twoWayMultiExec)
d768 1
a768 1
WitReturnCode WitRun::witGetUseFocusHorizons (witBoolean * useFocusHorizons)
d785 1
a785 1
WitReturnCode WitRun::witGetUserHeurStart (witBoolean * userHeurStart)
d802 1
a802 1
WitReturnCode WitRun::witGetWit34Compatible (witBoolean * retVal)
d830 1
a830 1
WitReturnCode WitRun::witSetAutoPriority (witBoolean boolval)
d849 1
a849 1
WitReturnCode WitRun::witSetBuildWhenEmpty (witBoolean boolval)
d877 1
a877 1
WitReturnCode WitRun::witSetComputeCriticalList (witBoolean boolval)
d917 1
a917 1
WitReturnCode WitRun::witSetExecEmptyBom (witBoolean boolval)
d957 1
a957 1
WitReturnCode WitRun::witSetForcedMultiEq (witBoolean boolval)
d995 1
a995 1
WitReturnCode WitRun::witSetPipSeqFromHeur (witBoolean boolval)
d1013 1
a1013 1
WitReturnCode WitRun::witSetIndependentOffsets (witBoolean theValue)
d1034 1
a1034 1
WitReturnCode WitRun::witSetLocalBuildAhead (witBoolean boolval)
d1055 1
a1055 1
WitReturnCode WitRun::witSetLocalMultiExec (witBoolean boolval)
d1095 1
a1095 1
WitReturnCode WitRun::witSetMultiExec (witBoolean boolval)
d1103 1
a1103 1
         theCall.prepBool ("twoWayMultiExec", true, false);
d1118 1
a1118 1
WitReturnCode WitRun::witSetMultiRoute (witBoolean boolval)
d1158 1
a1158 1
WitReturnCode WitRun::witSetNonMrSelSplit (witBoolean boolval)
d1166 1
a1166 1
         theCall.prepBool ("selSplit", true, false);
d1199 1
a1199 1
WitReturnCode WitRun::witSetPenExec (witBoolean boolval)
d1215 1
a1215 1
WitReturnCode WitRun::witSetPerfPegging (witBoolean boolval)
d1233 1
a1233 1
WitReturnCode WitRun::witSetPrefHighStockSLBs (witBoolean boolval)
d1251 1
a1251 1
WitReturnCode WitRun::witSetRespectStockSLBs (witBoolean boolval)
d1269 1
a1269 1
WitReturnCode WitRun::witSetRoundReqVols (witBoolean boolval)
d1288 1
a1288 1
WitReturnCode WitRun::witSetSelSplit (witBoolean boolval)
d1296 1
a1296 1
         theCall.prepBool ("nonMrSelSplit", true, false);
d1310 1
a1310 1
WitReturnCode WitRun::witSetSkipFailures (witBoolean boolval)
d1329 1
a1329 1
WitReturnCode WitRun::witSetStockRealloc (witBoolean boolval)
d1352 1
a1352 1
WitReturnCode WitRun::witSetStockReallocation (witBoolean boolval)
d1374 1
a1374 1
WitReturnCode WitRun::witSetSrSelSplit (witBoolean boolval)
d1412 1
a1412 1
WitReturnCode WitRun::witSetTruncOffsets  (witBoolean boolval)
d1431 1
a1431 1
WitReturnCode WitRun::witSetTwoWayMultiExec (witBoolean boolval)
d1439 1
a1439 1
         theCall.prepBool ("multiExec", false, true);
d1454 1
a1454 1
WitReturnCode WitRun::witSetUseFocusHorizons (witBoolean newValue)
d1473 1
a1473 1
WitReturnCode WitRun::witSetUserHeurStart (witBoolean boolval)
d1491 1
a1491 1
WitReturnCode WitRun::witSetWit34Compatible (witBoolean boolval)
@


1.64
log
@Double Precision.
@
text
@a165 17
WitReturnCode WitRun::witGetDoubleMode (witBoolean * doubleMode)
   {
   PROLOG ("witGetDoubleMode");

   WitGlobalCompApiCall theCall (this);

   apiGet (                    doubleMode, 
                              "doubleMode", 
      theCall.myGlobalComp ()->doubleMode ());

   issueGetAttrMsg ("doubleMode");

   EPILOG;
   }

//------------------------------------------------------------------------------

a888 23

   EPILOG;
   }

//------------------------------------------------------------------------------

WitReturnCode WitRun::witSetDoubleMode (witBoolean boolval)
   {
   PROLOG ("witSetDoubleMode");

   WitGlobalCompApiCall theCall (this);

   if (boolval != theCall.myGlobalComp ()->doubleMode ())
      if (WitNode::totNodes () >= 1)
         myMsgFac () ("chgDblModePosNodesSmsg", WitNode::totNodes ());

   theCall.prepBool (
      "doubleMode", 
      theCall.myGlobalComp ()->doubleMode (), 
      boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setDoubleMode (boolval);
@


1.63
log
@Double Precision.
@
text
@a28 1
#include <RealVec.h>
d117 2
a118 2
       computeCriticalList,
      "computeCriticalList",
d170 5
a174 3
   apiGet (       doubleMode, 
                 "doubleMode", 
      WitRealVec::doubleMode ());
d916 5
a920 8
   if (WitProblem::nInstances () >= 1)
      myMsgFac () ("setDoubleWithInitWRSmsg", WitProblem::nInstances ());
                       
   if (myMsgFac ().mayIssue ("setBooleanAttrMsg"))
      myMsgFac () ("setBooleanAttrMsg",
         "doubleMode", 
         WitRealVec::doubleMode (), 
         boolval);
d922 7
a928 1
   WitRealVec::setDoubleMode (boolval);
@


1.62
log
@Double Precision.
@
text
@d29 1
d173 1
a173 1
      WitSession::doubleMode ());
d921 1
a921 1
         WitSession::doubleMode (), 
d924 1
a924 1
   mySession_->setDoubleMode (boolval);
@


1.61
log
@Continued double precision.
@
text
@d215 1
a215 1
WitReturnCode WitRun::witGetExpCutoff (OutScalRA expCutoff)
d369 1
a369 1
WitReturnCode WitRun::witGetLotSizeTol (OutScalRA lotSizeTol)
d970 1
a970 1
WitReturnCode WitRun::witSetExpCutoff (InScalRA theVal)
d1110 1
a1110 1
WitReturnCode WitRun::witSetLotSizeTol (InScalRA theVal)
d1565 4
a1568 1
void WitRun::issueGetAttrMsg (WitAttr theAttr, const OutScalRA & theArg) const
@


1.60
log
@Continued double precision.
@
text
@d27 2
a28 2
#include <RealSInArg.h>
#include <RealSOutArg.h>
d215 1
a215 1
WitReturnCode WitRun::witGetExpCutoff (RealSOutArg expCutoff)
d369 1
a369 1
WitReturnCode WitRun::witGetLotSizeTol (RealSOutArg lotSizeTol)
d970 1
a970 1
WitReturnCode WitRun::witSetExpCutoff (RealSInArg theVal)
d1110 1
a1110 1
WitReturnCode WitRun::witSetLotSizeTol (RealSInArg theVal)
d1565 1
a1565 1
void WitRun::issueGetAttrMsg (WitAttr theAttr, const RealSOutArg & theArg) const
@


1.59
log
@Continued double precision.
@
text
@d215 1
a215 1
WitReturnCode WitRun::witGetExpCutoff (float * expCutoff)
d970 1
a970 1
WitReturnCode WitRun::witSetExpCutoff (float newFlt)
d979 1
a979 1
      newFlt,
d984 1
a984 1
      theCall.myGlobalComp ()->setExpCutoff (static_cast <double> (newFlt));
d1110 1
a1110 1
WitReturnCode WitRun::witSetLotSizeTol (RealSInArg theArg)
d1119 1
a1119 1
      theArg);
d1122 1
a1122 1
      theCall.myGlobalComp ()->setLotSizeTol (static_cast <double> (theArg));
@


1.58
log
@Continued double precision.
@
text
@d27 2
d369 1
a369 1
WitReturnCode WitRun::witGetLotSizeTol (float * lotSizeTol)
d1110 1
a1110 1
WitReturnCode WitRun::witSetLotSizeTol (float theFloat)
d1119 1
a1119 1
      theFloat);
d1122 1
a1122 1
      theCall.myGlobalComp ()->setLotSizeTol (static_cast <double> (theFloat));
d1561 9
@


1.57
log
@Continued double precision.
@
text
@d164 1
a164 1
WitReturnCode WitRun::witGetDoublePrecision (witBoolean * doublePrecision)
d166 1
a166 1
   PROLOG ("witGetDoublePrecision");
d168 3
a170 3
   apiGet (       doublePrecision, 
                 "doublePrecision", 
      WitSession::doublePrecision ());
d172 1
a172 1
   issueGetAttrMsg ("doublePrecision");
d908 1
a908 1
WitReturnCode WitRun::witSetDoublePrecision (witBoolean boolval)
d910 1
a910 1
   PROLOG ("witSetDoublePrecision");
d917 2
a918 2
         "doublePrecision", 
         WitSession::doublePrecision (), 
d921 1
a921 1
   mySession_->setDoublePrecision (boolval);
@


1.56
log
@Continued double precision.
@
text
@d170 1
a170 1
      mySession_->doublePrecision ());
d918 1
a918 1
         mySession_->doublePrecision (), 
@


1.55
log
@Continued double precision.
@
text
@d974 1
a974 1
   theCall.prepLBStrDbl (
d982 1
a982 1
      theCall.myGlobalComp ()->setExpCutoff (StrDbl::convFloat (newFlt));
d1114 1
a1114 1
   theCall.prepNonNegStrDbl (
d1120 1
a1120 1
      theCall.myGlobalComp ()->setLotSizeTol (StrDbl::convFloat (theFloat));
@


1.54
log
@Continued double precision.
@
text
@d164 15
d908 20
d1566 1
a1566 1
      if (myMsgFac ().mayIssue ("getFltAttrMsg"))
@


1.53
log
@Removed the "pip" attribute.
@
text
@d939 1
a939 1
   theCall.prepLBFloat (
d947 1
a947 1
      theCall.myGlobalComp ()->setExpCutoff (newFlt);
d1085 1
a1085 1
      theCall.myGlobalComp ()->setLotSizeTol (floatToStrDbl (theFloat));
@


1.52
log
@Continued double precision.
@
text
@a477 17
WitReturnCode WitRun::witGetPip (witBoolean * pip)
   {
   PROLOG ("witGetPip");

   WitGlobalCompApiCall theCall (this);

   apiGet (pip, 
      "pip", 
      theCall.myGlobalComp ()->pip ());

   issueGetAttrMsg ("pip");

   EPILOG;
   }

//------------------------------------------------------------------------------

a1223 18

   EPILOG;
   }

//------------------------------------------------------------------------------

WitReturnCode WitRun::witSetPip (witBoolean boolval)
   {
   PROLOG ("witSetPip");

   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "pip", 
      theCall.myGlobalComp ()->pip (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPip (boolval);
@


1.51
log
@Continued double precision.
@
text
@d1096 1
a1096 1
   theCall.prepNonNegDouble (
d1102 1
a1102 1
      theCall.myGlobalComp ()->setLotSizeTol (floatToDouble (theFloat));
@


1.50
log
@Continued implementation of PIP.
@
text
@d1090 1
a1090 1
WitReturnCode WitRun::witSetLotSizeTol (float newFlt)
d1096 1
a1096 1
   theCall.prepNonNegFloat (
d1098 2
a1099 2
      theCall.myGlobalComp ()->lotSizeTol (), 
      newFlt);
d1102 1
a1102 1
      theCall.myGlobalComp ()->setLotSizeTol (newFlt);
@


1.49
log
@Continued implementation of PIP.
@
text
@d280 1
a280 1
WitReturnCode WitRun::witGetHeurPipSeq (witBoolean * heurPipSeq)
d282 1
a282 1
   PROLOG ("witGetHeurPipSeq");
d286 3
a288 3
   apiGet (heurPipSeq, 
      "heurPipSeq", 
      theCall.myGlobalComp ()->heurPipSeq ());
d290 1
a290 1
   issueGetAttrMsg ("heurPipSeq");
d1009 1
a1009 1
WitReturnCode WitRun::witSetHeurPipSeq (witBoolean boolval)
d1011 1
a1011 1
   PROLOG ("witSetHeurPipSeq");
d1016 2
a1017 2
      "heurPipSeq", 
      theCall.myGlobalComp ()->heurPipSeq (), boolval);
d1020 1
a1020 1
      theCall.myGlobalComp ()->setHeurPipSeq (boolval);
@


1.48
log
@Continued implementation of PIP.
@
text
@a1264 110
WitReturnCode WitRun::witSetPipSeqAppendsNow (witBoolean boolval)
   {
   PROLOG ("witSetPipSeqAppendsNow");

   WitGlobalCompApiCall theCall (this);

   if (boolval)
      witAppendToPipSeq (
         theCall.myGlobalComp ()->pipSeqPartName   ().myCstring (),
         theCall.myGlobalComp ()->pipSeqDemandName ().myCstring (),
         theCall.myGlobalComp ()->pipSeqShipPeriod (),
         theCall.myGlobalComp ()->pipSeqIncShipVol ());

   EPILOG;
   }

//------------------------------------------------------------------------------

WitReturnCode WitRun::witSetPipSeqClearsNow (witBoolean boolval)
   {
   PROLOG ("witSetPipSeqClearsNow");

   WitGlobalCompApiCall theCall (this);

   if (boolval)
      witClearPipSeq ();

   EPILOG;
   }

//------------------------------------------------------------------------------

WitReturnCode WitRun::witSetPipSeqDemandName (const char * theName)
   {
   PROLOG ("witSetPipSeqDemandName");

   WitGlobalCompApiCall theCall (this);

   theCall.prepString (
      "pipSeqDemandName",
      theCall.myGlobalComp ()->pipSeqDemandName (),
      theName);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPipSeqDemandName (theName);

   EPILOG;
   }

//------------------------------------------------------------------------------

WitReturnCode WitRun::witSetPipSeqIncShipVol (float newFlt)
   {
   PROLOG ("witSetPipSeqIncShipVol");

   WitGlobalCompApiCall theCall (this);

   theCall.prepNonNegFloat (
      "pipSeqIncShipVol", 
      theCall.myGlobalComp ()->pipSeqIncShipVol (), 
      newFlt);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPipSeqIncShipVol (newFlt);

   EPILOG;
   }

//------------------------------------------------------------------------------

WitReturnCode WitRun::witSetPipSeqPartName (const char * theName)
   {
   PROLOG ("witSetPipSeqPartName");

   WitGlobalCompApiCall theCall (this);

   theCall.prepString (
      "pipSeqPartName",
      theCall.myGlobalComp ()->pipSeqPartName (),
      theName);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPipSeqPartName (theName);

   EPILOG;
   }

//------------------------------------------------------------------------------

WitReturnCode WitRun::witSetPipSeqShipPeriod (int shipPer)
   {
   PROLOG ("witSetPipSeqShipPeriod");

   WitGlobalCompApiCall theCall (this);

   theCall.prepRangedInt (
      "pipSeqShipPeriod",
      theCall.myGlobalComp ()->pipSeqShipPeriod (),
      shipPer,
      0,
      nPeriods () - 1);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPipSeqShipPeriod (shipPer);

   EPILOG;
   }

//------------------------------------------------------------------------------

@


1.47
log
@Continued implementation of PIP.
@
text
@d1265 110
@


1.46
log
@Added API function witClearPipSeq.
@
text
@d26 1
a26 1
#include <PipMgr.h>
d37 1
a37 1
   myProblem ()->myPipMgr ()->clearShipSeq ();
d503 1
a503 1
      myProblem ()->myPipMgr ()->peggingExists ());
d530 1
a530 1
   myProblem ()->myPipMgr ()->getShipSeq (theShipSeq);
@


1.45
log
@Added API function witGetPipSeq.
@
text
@d30 13
d44 1
a44 1
WitReturnCode WitRun::witGetAppData (void ** appData)
@


1.44
log
@Added pipExists attribute.
@
text
@d23 1
d25 1
d493 51
@


1.43
log
@Continued implementation of PIP.
@
text
@d24 1
d474 17
@


1.42
log
@Continued implementation of PIP.
@
text
@a930 4
   if (not theCall.myGlobalComp ()->allowPipSeq ())
      myMsgFac () ("genericSmsg",
         "The heurPipSeq attribute is not yet available.");

@


1.41
log
@Continued implementation of PIP.
@
text
@a20 1
#include <PerPair.h>
d23 1
@


1.40
log
@Continued implementation of PIP.
@
text
@d264 17
d919 22
@


1.39
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d21 1
a21 1
#include <Dated.h>
d115 3
a117 3
   int            i;
   WitDatedPart * theDP;
   WitPart *      thePart;
d134 1
a134 1
   forEachEl (theDP, theCall.myGlobalComp ()->criticalList ())
d136 1
a136 1
      theDP->getCoords (thePart, (* perList)[i]);
@


1.38
log
@Continued implementation of post-implosion pegging.
@
text
@d428 1
a428 1
WitReturnCode WitRun::witGetPerfPIPegging (witBoolean * perfPIPegging)
d430 1
a430 1
   PROLOG ("witGetPerfPIPegging");
d434 3
a436 3
   apiGet (perfPIPegging, 
      "perfPIPegging", 
      theCall.myGlobalComp ()->perfPIPegging ());
d438 1
a438 1
   issueGetAttrMsg ("perfPIPegging");
d445 1
a445 1
WitReturnCode WitRun::witGetPerfPegging (witBoolean * perfPegging)
d447 1
a447 1
   PROLOG ("witGetPerfPegging");
d451 3
a453 3
   apiGet (perfPegging, 
      "perfPegging", 
      theCall.myGlobalComp ()->perfPegging ());
d455 1
a455 1
   issueGetAttrMsg ("perfPegging");
d1110 1
a1110 1
WitReturnCode WitRun::witSetPerfPIPegging (witBoolean boolval)
d1112 1
a1112 1
   PROLOG ("witSetPerfPIPegging");
d1117 2
a1118 2
      "perfPIPegging", 
      theCall.myGlobalComp ()->perfPIPegging (), boolval);
d1121 1
a1121 1
      theCall.myGlobalComp ()->setPerfPIPegging (boolval);
d1128 1
a1128 1
WitReturnCode WitRun::witSetPerfPegging (witBoolean boolval)
d1130 1
a1130 1
   PROLOG ("witSetPerfPegging");
d1135 2
a1136 2
      "perfPegging", 
      theCall.myGlobalComp ()->perfPegging (), boolval);
d1139 1
a1139 1
      theCall.myGlobalComp ()->setPerfPegging (boolval);
@


1.37
log
@Began implementation of post-implosion pegging.
@
text
@d428 1
a428 1
WitReturnCode WitRun::witGetPerfPegging (witBoolean * perfPegging)
d430 1
a430 1
   PROLOG ("witGetPerfPegging");
d434 3
a436 3
   apiGet (perfPegging, 
      "perfPegging", 
      theCall.myGlobalComp ()->perfPegging ());
d438 1
a438 1
   issueGetAttrMsg ("perfPegging");
d445 1
a445 1
WitReturnCode WitRun::witGetPiPegging (witBoolean * piPegging)
d447 1
a447 1
   PROLOG ("witGetPiPegging");
d451 3
a453 3
   apiGet (piPegging, 
      "piPegging", 
      theCall.myGlobalComp ()->piPegging ());
d455 1
a455 1
   issueGetAttrMsg ("piPegging");
d1110 1
a1110 1
WitReturnCode WitRun::witSetPerfPegging (witBoolean boolval)
d1112 1
a1112 1
   PROLOG ("witSetPerfPegging");
d1117 2
a1118 2
      "perfPegging", 
      theCall.myGlobalComp ()->perfPegging (), boolval);
d1121 1
a1121 1
      theCall.myGlobalComp ()->setPerfPegging (boolval);
d1128 1
a1128 1
WitReturnCode WitRun::witSetPiPegging (witBoolean boolval)
d1130 1
a1130 1
   PROLOG ("witSetPiPegging");
d1135 2
a1136 2
      "piPegging", 
      theCall.myGlobalComp ()->piPegging (), boolval);
d1139 1
a1139 1
      theCall.myGlobalComp ()->setPiPegging (boolval);
@


1.36
log
@Continued implementation of proportionate routing.
@
text
@d445 17
d1122 18
@


1.35
log
@Continued implementation of proportionate routing.
@
text
@a497 17
WitReturnCode WitRun::witGetPropRouting (witBoolean * propRouting)
   {
   PROLOG ("witGetPropRouting");

   WitGlobalCompApiCall theCall (this);

   apiGet (propRouting, 
      "propRouting", 
      theCall.myGlobalComp ()->propRouting ());

   issueGetAttrMsg ("propRouting");

   EPILOG;
   }

//------------------------------------------------------------------------------

a1122 18

   EPILOG;
   }

//------------------------------------------------------------------------------

WitReturnCode WitRun::witSetPropRouting (witBoolean boolval)
   {
   PROLOG ("witSetPropRouting");

   WitGlobalCompApiCall theCall (this);

   theCall.prepBool (
      "propRouting", 
      theCall.myGlobalComp ()->propRouting (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setPropRouting (boolval);
@


1.34
log
@Replaced some C-style casts with C++ style casts.
@
text
@d498 17
d1140 18
@


1.33
log
@Added a function to convert from witBoolean to bool.
@
text
@d738 1
a738 1
      theCall.myGlobalComp ()->setAutoPriority (asaBool (boolval));
@


1.32
log
@Internal changes.
@
text
@d738 1
a738 1
      theCall.myGlobalComp ()->setAutoPriority (boolval);
@


1.31
log
@Internal changes.
@
text
@d979 1
a979 1
   if (! boolval)
d1316 1
a1316 1
      if (! myGlobalComp ()->multiExec ())
@


1.30
log
@Continued implementation of user-specified heuristic starting solution.
@
text
@d43 1
a43 1
WitReturnCode WitRun::witGetAutoPriority (WitBoolean * autoPriority)
d61 1
a61 1
WitReturnCode WitRun::witGetBuildWhenEmpty (WitBoolean * buildWhenEmpty)
d92 1
a92 1
      WitBoolean * computeCriticalList)
d165 1
a165 1
WitReturnCode WitRun::witGetExecEmptyBom (WitBoolean * execEmptyBom)
d197 1
a197 1
WitReturnCode WitRun::witGetFeasible (WitBoolean * feasible)
d212 1
a212 1
WitReturnCode WitRun::witGetForcedMultiEq (WitBoolean * forcedMultiEq)
d246 1
a246 1
WitReturnCode WitRun::witGetHeurAllocActive (WitBoolean * heurAllocActive)
d264 1
a264 1
WitReturnCode WitRun::witGetIndependentOffsets (WitBoolean * independentOffsets)
d281 1
a281 1
WitReturnCode WitRun::witGetLocalBuildAhead (WitBoolean * localBuildAhead)
d300 1
a300 1
WitReturnCode WitRun::witGetLocalMultiExec (WitBoolean * localMultiExec)
d334 1
a334 1
WitReturnCode WitRun::witGetMultiExec (WitBoolean * multiExec)
d349 1
a349 1
WitReturnCode WitRun::witGetMultiRoute  (WitBoolean * multiRoute)
d379 1
a379 1
WitReturnCode WitRun::witGetNonMrSelSplit (WitBoolean * nonMrSelSplit)
d413 1
a413 1
WitReturnCode WitRun::witGetPenExec (WitBoolean * penExec)
d428 1
a428 1
WitReturnCode WitRun::witGetPerfPegging (WitBoolean * perfPegging)
d445 1
a445 1
WitReturnCode WitRun::witGetPostprocessed (WitBoolean * postprocessed)
d463 1
a463 1
WitReturnCode WitRun::witGetPrefHighStockSLBs (WitBoolean * prefHighStockSLBs)
d480 1
a480 1
WitReturnCode WitRun::witGetPreprocessed (WitBoolean * preprocessed)
d498 1
a498 1
WitReturnCode WitRun::witGetRespectStockSLBs (WitBoolean * respectStockSLBs)
d515 1
a515 1
WitReturnCode WitRun::witGetRoundReqVols (WitBoolean * roundReqVols)
d532 1
a532 1
WitReturnCode WitRun::witGetSelSplit (WitBoolean * selSplit)
d549 1
a549 1
WitReturnCode WitRun::witGetSkipFailures (WitBoolean * skipFailures)
d566 1
a566 1
WitReturnCode WitRun::witGetStockRealloc (WitBoolean * stockRealloc)
d583 1
a583 1
WitReturnCode WitRun::witGetStockReallocation (WitBoolean * stockReallocation)
d600 1
a600 1
WitReturnCode WitRun::witGetSrSelSplit (WitBoolean * srSelSplit)
d630 1
a630 1
WitReturnCode WitRun::witGetTruncOffsets  (WitBoolean * truncOffsets)
d647 1
a647 1
WitReturnCode WitRun::witGetTwoWayMultiExec (WitBoolean * twoWayMultiExec)
d664 1
a664 1
WitReturnCode WitRun::witGetUseFocusHorizons (WitBoolean * useFocusHorizons)
d681 1
a681 1
WitReturnCode WitRun::witGetUserHeurStart (WitBoolean * userHeurStart)
d698 1
a698 1
WitReturnCode WitRun::witGetWit34Compatible (WitBoolean * retVal)
d726 1
a726 1
WitReturnCode WitRun::witSetAutoPriority (WitBoolean boolval)
d732 1
a732 1
   theCall.prepBoolean (
d745 1
a745 1
WitReturnCode WitRun::witSetBuildWhenEmpty (WitBoolean boolval)
d773 1
a773 1
WitReturnCode WitRun::witSetComputeCriticalList (WitBoolean boolval)
d779 1
a779 1
   theCall.prepBoolean (
d813 1
a813 1
WitReturnCode WitRun::witSetExecEmptyBom (WitBoolean boolval)
d819 1
a819 1
   theCall.prepBoolean (
d853 1
a853 1
WitReturnCode WitRun::witSetForcedMultiEq (WitBoolean boolval)
d859 1
a859 1
   theCall.prepBoolean (
d891 1
a891 1
WitReturnCode WitRun::witSetIndependentOffsets (WitBoolean theValue)
d899 1
a899 1
   theCall.prepBoolean (
d912 1
a912 1
WitReturnCode WitRun::witSetLocalBuildAhead (WitBoolean boolval)
d918 1
a918 1
   theCall.prepBoolean (
d933 1
a933 1
WitReturnCode WitRun::witSetLocalMultiExec (WitBoolean boolval)
d939 1
a939 1
   theCall.prepBoolean (
d973 1
a973 1
WitReturnCode WitRun::witSetMultiExec (WitBoolean boolval)
d981 1
a981 1
         theCall.prepBoolean ("twoWayMultiExec", witTRUE, witFALSE);
d983 1
a983 1
   theCall.prepBoolean (
d996 1
a996 1
WitReturnCode WitRun::witSetMultiRoute (WitBoolean boolval)
d1002 1
a1002 1
   theCall.prepBoolean (
d1036 1
a1036 1
WitReturnCode WitRun::witSetNonMrSelSplit (WitBoolean boolval)
d1044 1
a1044 1
         theCall.prepBoolean ("selSplit", witTRUE, witFALSE);
d1046 1
a1046 1
   theCall.prepBoolean (
d1077 1
a1077 1
WitReturnCode WitRun::witSetPenExec (WitBoolean boolval)
d1083 1
a1083 1
   theCall.prepBoolean ("penExec", theCall.myGlobalComp ()->penExec (), boolval);
d1093 1
a1093 1
WitReturnCode WitRun::witSetPerfPegging (WitBoolean boolval)
d1099 1
a1099 1
   theCall.prepBoolean (
d1111 1
a1111 1
WitReturnCode WitRun::witSetPrefHighStockSLBs (WitBoolean boolval)
d1117 1
a1117 1
   theCall.prepBoolean (
d1129 1
a1129 1
WitReturnCode WitRun::witSetRespectStockSLBs (WitBoolean boolval)
d1135 1
a1135 1
   theCall.prepBoolean (
d1147 1
a1147 1
WitReturnCode WitRun::witSetRoundReqVols (WitBoolean boolval)
d1153 1
a1153 1
   theCall.prepBoolean (
d1166 1
a1166 1
WitReturnCode WitRun::witSetSelSplit (WitBoolean boolval)
d1174 1
a1174 1
         theCall.prepBoolean ("nonMrSelSplit", witTRUE, witFALSE);
d1176 1
a1176 1
   theCall.prepBoolean (
d1188 1
a1188 1
WitReturnCode WitRun::witSetSkipFailures (WitBoolean boolval)
d1194 1
a1194 1
   theCall.prepBoolean (
d1207 1
a1207 1
WitReturnCode WitRun::witSetStockRealloc (WitBoolean boolval)
d1217 1
a1217 1
   theCall.prepBoolean (
d1230 1
a1230 1
WitReturnCode WitRun::witSetStockReallocation (WitBoolean boolval)
d1240 1
a1240 1
   theCall.prepBoolean (
d1252 1
a1252 1
WitReturnCode WitRun::witSetSrSelSplit (WitBoolean boolval)
d1262 1
a1262 1
   theCall.prepBoolean (
d1290 1
a1290 1
WitReturnCode WitRun::witSetTruncOffsets  (WitBoolean boolval)
d1296 1
a1296 1
   theCall.prepBoolean (
d1309 1
a1309 1
WitReturnCode WitRun::witSetTwoWayMultiExec (WitBoolean boolval)
d1317 1
a1317 1
         theCall.prepBoolean ("multiExec", witFALSE, witTRUE);
d1319 1
a1319 1
   theCall.prepBoolean (
d1332 1
a1332 1
WitReturnCode WitRun::witSetUseFocusHorizons (WitBoolean newValue)
d1338 1
a1338 1
   theCall.prepBoolean (
d1351 1
a1351 1
WitReturnCode WitRun::witSetUserHeurStart (WitBoolean boolval)
d1357 1
a1357 1
   theCall.prepBoolean (
d1369 1
a1369 1
WitReturnCode WitRun::witSetWit34Compatible (WitBoolean boolval)
d1375 1
a1375 1
   theCall.prepBoolean (
@


1.29
log
@Continued implementation of heuristic implosion from an initial solution.
Fixed a bug in build-ahead by demand.
Removed RWClient.C.
@
text
@a263 17
WitReturnCode WitRun::witGetHeurInitSoln (WitBoolean * heurInitSoln)
   {
   PROLOG ("witGetHeurInitSoln");

   WitGlobalCompApiCall theCall (this);

   apiGet (heurInitSoln, 
      "heurInitSoln", 
      theCall.myGlobalComp ()->heurInitSoln ());

   issueGetAttrMsg ("heurInitSoln");

   EPILOG;
   }

//------------------------------------------------------------------------------

d681 17
a890 18
WitReturnCode WitRun::witSetHeurInitSoln (WitBoolean boolval)
   {
   PROLOG ("witSetHeurInitSoln");

   WitGlobalCompApiCall theCall (this);

   theCall.prepBoolean (
      "heurInitSoln", 
      theCall.myGlobalComp ()->heurInitSoln (), boolval);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setHeurInitSoln (boolval);

   EPILOG;
   }

//------------------------------------------------------------------------------

d1345 18
@


1.28
log
@Continued implementation of heuristic initial solution.
@
text
@a896 5
   if (! myGlobalComp ()->allowHIS ())
      myMsgFac () ("genericSmsg",
         "Heuristic implosion from an initial solution is not yet "
         "implemented.");

@


1.27
log
@Continued implementation of heuristic implosion from an initial solution.
Added some debugging code to Single-Source.
@
text
@d264 1
a264 1
WitReturnCode WitRun::witGetIndependentOffsets (WitBoolean * independentOffsets)
d266 1
a266 1
   PROLOG ("witGetIndependentOffsets");
d270 3
a272 3
   apiGet (                    independentOffsets, 
                              "independentOffsets", 
      theCall.myGlobalComp ()->independentOffsets ());
d274 1
a274 1
   issueGetAttrMsg ("independentOffsets");
d281 1
a281 1
WitReturnCode WitRun::witGetInitHeurSoln (WitBoolean * initHeurSoln)
d283 1
a283 1
   PROLOG ("witGetInitHeurSoln");
d287 3
a289 3
   apiGet (initHeurSoln, 
      "initHeurSoln", 
      theCall.myGlobalComp ()->initHeurSoln ());
d291 1
a291 1
   issueGetAttrMsg ("initHeurSoln");
d891 1
a891 1
WitReturnCode WitRun::witSetIndependentOffsets (WitBoolean theValue)
d893 1
a893 1
   PROLOG ("witSetIndependentOffsets");
d897 4
a900 1
   theCall.reqNoPartsOrOpns ("independentOffsets");
d903 2
a904 3
      "independentOffsets", 
      theCall.myGlobalComp ()->independentOffsets (), 
      theValue);
d907 1
a907 1
      theCall.myGlobalComp ()->setIndependentOffsets (theValue);
d914 1
a914 1
WitReturnCode WitRun::witSetInitHeurSoln (WitBoolean boolval)
d916 1
a916 1
   PROLOG ("witSetInitHeurSoln");
d920 1
a920 4
   if (! myGlobalComp ()->allowIHS ())
      myMsgFac () ("genericSmsg",
         "Heuristic implosion from an initial solution is not yet "
         "implemented.");
d923 3
a925 2
      "initHeurSoln", 
      theCall.myGlobalComp ()->initHeurSoln (), boolval);
d928 1
a928 1
      theCall.myGlobalComp ()->setInitHeurSoln (boolval);
@


1.26
log
@Began implementation of heuristic implosion from an initial solution.
@
text
@d264 1
a264 1
WitReturnCode WitRun::witGetHeurInitSoln (WitBoolean * heurInitSoln)
d266 1
a266 1
   PROLOG ("witGetHeurInitSoln");
d270 3
a272 3
   apiGet (heurInitSoln, 
      "heurInitSoln", 
      theCall.myGlobalComp ()->heurInitSoln ());
d274 1
a274 1
   issueGetAttrMsg ("heurInitSoln");
d281 1
a281 1
WitReturnCode WitRun::witGetIndependentOffsets (WitBoolean * independentOffsets)
d283 1
a283 1
   PROLOG ("witGetIndependentOffsets");
d287 3
a289 3
   apiGet (                    independentOffsets, 
                              "independentOffsets", 
      theCall.myGlobalComp ()->independentOffsets ());
d291 1
a291 1
   issueGetAttrMsg ("independentOffsets");
d891 1
a891 1
WitReturnCode WitRun::witSetHeurInitSoln (WitBoolean boolval)
d893 1
a893 1
   PROLOG ("witSetHeurInitSoln");
d897 1
a897 4
   if (! myGlobalComp ()->allowHIS ())
      myMsgFac () ("genericSmsg",
         "Heuristic implosion from an initial solution is not yet "
         "implemented.");
d900 3
a902 2
      "heurInitSoln", 
      theCall.myGlobalComp ()->heurInitSoln (), boolval);
d905 1
a905 1
      theCall.myGlobalComp ()->setHeurInitSoln (boolval);
d912 1
a912 1
WitReturnCode WitRun::witSetIndependentOffsets (WitBoolean theValue)
d914 1
a914 1
   PROLOG ("witSetIndependentOffsets");
d918 4
a921 1
   theCall.reqNoPartsOrOpns ("independentOffsets");
d924 2
a925 3
      "independentOffsets", 
      theCall.myGlobalComp ()->independentOffsets (), 
      theValue);
d928 1
a928 1
      theCall.myGlobalComp ()->setIndependentOffsets (theValue);
@


1.25
log
@Made minor changes in order for wit to compile with the vacpp compiler.
@
text
@d264 17
d885 23
@


1.24
log
@Began implementation of object iteration.
@
text
@d709 1
a709 1
WitReturnCode WitRun::witSetAutoPriority (WitBoolean bool)
d718 1
a718 1
      bool);
d721 1
a721 1
      theCall.myGlobalComp ()->setAutoPriority (bool);
d728 1
a728 1
WitReturnCode WitRun::witSetBuildWhenEmpty (WitBoolean bool)
d741 1
a741 1
      witSetExecEmptyBom (bool);
d756 1
a756 1
WitReturnCode WitRun::witSetComputeCriticalList (WitBoolean bool)
d765 1
a765 1
      bool);
d768 1
a768 1
      theCall.myGlobalComp ()->setComputeCriticalList (bool);
d796 1
a796 1
WitReturnCode WitRun::witSetExecEmptyBom (WitBoolean bool)
d805 1
a805 1
      bool);
d808 1
a808 1
      theCall.myGlobalComp ()->setExecEmptyBom (bool);
d836 1
a836 1
WitReturnCode WitRun::witSetForcedMultiEq (WitBoolean bool)
d845 1
a845 1
      bool);
d848 1
a848 1
      theCall.myGlobalComp ()->setForcedMultiEq (bool);
d895 1
a895 1
WitReturnCode WitRun::witSetLocalBuildAhead (WitBoolean bool)
d904 1
a904 1
      bool);
d909 1
a909 1
      theCall.myGlobalComp ()->setLocalBuildAhead (bool);
d916 1
a916 1
WitReturnCode WitRun::witSetLocalMultiExec (WitBoolean bool)
d925 1
a925 1
      bool);
d930 1
a930 1
      theCall.myGlobalComp ()->setLocalMultiExec (bool);
d956 1
a956 1
WitReturnCode WitRun::witSetMultiExec (WitBoolean bool)
d962 1
a962 1
   if (! bool)
d969 1
a969 1
      bool);
d972 1
a972 1
      theCall.myGlobalComp ()->setMultiExec (bool);
d979 1
a979 1
WitReturnCode WitRun::witSetMultiRoute (WitBoolean bool)
d988 1
a988 1
      bool);
d991 1
a991 1
      theCall.myGlobalComp ()->setMultiRoute (bool);
d1019 1
a1019 1
WitReturnCode WitRun::witSetNonMrSelSplit (WitBoolean bool)
d1025 1
a1025 1
   if (bool)
d1031 1
a1031 1
      theCall.myGlobalComp ()->nonMrSelSplit (), bool);
d1034 1
a1034 1
      theCall.myGlobalComp ()->setNonMrSelSplit (bool);
d1060 1
a1060 1
WitReturnCode WitRun::witSetPenExec (WitBoolean bool)
d1066 1
a1066 1
   theCall.prepBoolean ("penExec", theCall.myGlobalComp ()->penExec (), bool);
d1069 1
a1069 1
      theCall.myGlobalComp ()->setPenExec (bool);
d1076 1
a1076 1
WitReturnCode WitRun::witSetPerfPegging (WitBoolean bool)
d1084 1
a1084 1
      theCall.myGlobalComp ()->perfPegging (), bool);
d1087 1
a1087 1
      theCall.myGlobalComp ()->setPerfPegging (bool);
d1094 1
a1094 1
WitReturnCode WitRun::witSetPrefHighStockSLBs (WitBoolean bool)
d1102 1
a1102 1
      theCall.myGlobalComp ()->prefHighStockSLBs (), bool);
d1105 1
a1105 1
      theCall.myGlobalComp ()->setPrefHighStockSLBs (bool);
d1112 1
a1112 1
WitReturnCode WitRun::witSetRespectStockSLBs (WitBoolean bool)
d1120 1
a1120 1
      theCall.myGlobalComp ()->respectStockSLBs (), bool);
d1123 1
a1123 1
      theCall.myGlobalComp ()->setRespectStockSLBs (bool);
d1130 1
a1130 1
WitReturnCode WitRun::witSetRoundReqVols (WitBoolean bool)
d1139 1
a1139 1
      bool);
d1142 1
a1142 1
      theCall.myGlobalComp ()->setRoundReqVols (bool);
d1149 1
a1149 1
WitReturnCode WitRun::witSetSelSplit (WitBoolean bool)
d1155 1
a1155 1
   if (bool)
d1161 1
a1161 1
      theCall.myGlobalComp ()->selSplit (), bool);
d1164 1
a1164 1
      theCall.myGlobalComp ()->setSelSplit (bool);
d1171 1
a1171 1
WitReturnCode WitRun::witSetSkipFailures (WitBoolean bool)
d1180 1
a1180 1
      bool);
d1183 1
a1183 1
      theCall.myGlobalComp ()->setSkipFailures (bool);
d1190 1
a1190 1
WitReturnCode WitRun::witSetStockRealloc (WitBoolean bool)
d1196 1
a1196 1
   if (bool)
d1203 1
a1203 1
      bool);
d1206 1
a1206 1
      theCall.myGlobalComp ()->setStockRealloc (bool);
d1213 1
a1213 1
WitReturnCode WitRun::witSetStockReallocation (WitBoolean bool)
d1219 1
a1219 1
   if (bool)
d1225 1
a1225 1
      theCall.myGlobalComp ()->stockReallocation (), bool);
d1228 1
a1228 1
      theCall.myGlobalComp ()->setStockReallocation (bool);
d1235 1
a1235 1
WitReturnCode WitRun::witSetSrSelSplit (WitBoolean bool)
d1241 1
a1241 1
   if (bool)
d1247 1
a1247 1
      theCall.myGlobalComp ()->srSelSplit (), bool);
d1250 1
a1250 1
      theCall.myGlobalComp ()->setSrSelSplit (bool);
d1273 1
a1273 1
WitReturnCode WitRun::witSetTruncOffsets  (WitBoolean bool)
d1282 1
a1282 1
      bool);
d1285 1
a1285 1
      theCall.myGlobalComp ()->setTruncOffsets (bool);
d1292 1
a1292 1
WitReturnCode WitRun::witSetTwoWayMultiExec (WitBoolean bool)
d1298 1
a1298 1
   if (bool)
d1305 1
a1305 1
      bool);
d1308 1
a1308 1
      theCall.myGlobalComp ()->setTwoWayMultiExec (bool);
d1334 1
a1334 1
WitReturnCode WitRun::witSetWit34Compatible (WitBoolean bool)
d1343 1
a1343 1
      bool);
d1345 1
a1345 1
   if (bool)
d1349 1
a1349 1
      theCall.myGlobalComp ()->setWit34Compatible (bool);
@


1.23
log
@Finished implementation of selection splitting for multi-route.
@
text
@d11 1
a11 1
// Source file: "globApi.c"
d19 1
d23 2
a24 1
#include <ApiCall.h>
@


1.22
log
@Initial implementation of selection splitting for multi-route.
@
text
@a1022 3
   if (! theCall.myGlobalComp ()->allowNewSS ())
      myMsgFac () ("needAllowNewSSSmsg", "nonMrSelSplit");

a1151 3

   if (! theCall.myGlobalComp ()->allowNewSS ())
      myMsgFac () ("needAllowNewSSSmsg", "selSplit");
@


1.21
log
@Began implementation of selection splitting for stock reallocation.
@
text
@d377 17
d530 17
d1017 25
d1144 25
@


1.20
log
@Added a severe error for setting both stockRealloc and stockReallocation to
TRUE.
@
text
@d564 17
d1149 22
@


1.19
log
@Changed selStockRe attribute to stockReallocation (fullSR, internally).
@
text
@d1099 4
a1107 9
   if (bool)
      if (theCall.myGlobalComp ()->stockReallocation ())
         if (myMsgFac ().mayIssue ("setBooleanAttrMsg"))
            myMsgFac () (
               "setBooleanAttrMsg",
               "stockReallocation",
               witTRUE,
               witFALSE);

d1122 4
a1128 9

   if (bool)
      if (theCall.myGlobalComp ()->stockRealloc ())
         if (myMsgFac ().mayIssue ("setBooleanAttrMsg"))
            myMsgFac () (
               "setBooleanAttrMsg",
               "stockRealloc",
               witTRUE,
               witFALSE);
@


1.18
log
@Replaced uncondStockRe attribute with the old stockRealloc attribute.
@
text
@d513 1
a513 1
WitReturnCode WitRun::witGetSelStockRe (WitBoolean * selStockRe)
d515 1
a515 1
   PROLOG ("witGetSelStockRe");
d519 3
a521 3
   apiGet (                    selStockRe, 
                              "selStockRe", 
      theCall.myGlobalComp ()->selStockRe ());
d523 1
a523 1
   issueGetAttrMsg ("selStockRe");
d530 1
a530 1
WitReturnCode WitRun::witGetSkipFailures (WitBoolean * skipFailures)
d532 1
a532 1
   PROLOG ("witGetSkipFailures");
d536 3
a538 3
   apiGet (                    skipFailures, 
                              "skipFailures", 
      theCall.myGlobalComp ()->skipFailures ());
d540 1
a540 1
   issueGetAttrMsg ("skipFailures");
d547 1
a547 1
WitReturnCode WitRun::witGetStockRealloc (WitBoolean * stockRealloc)
d549 1
a549 1
   PROLOG ("witGetStockRealloc");
d553 3
a555 3
   apiGet (                    stockRealloc, 
                              "stockRealloc", 
      theCall.myGlobalComp ()->pureUncondSR ());
d557 1
a557 1
   issueGetAttrMsg ("stockRealloc");
d1074 1
a1074 1
WitReturnCode WitRun::witSetSelStockRe (WitBoolean bool)
d1076 1
a1076 1
   PROLOG ("witSetSelStockRe");
d1081 3
a1083 11
      "selStockRe", 
      theCall.myGlobalComp ()->selStockRe (), bool);

   if (bool)
      if (theCall.myGlobalComp ()->pureUncondSR ())
         if (myMsgFac ().mayIssue ("setBooleanAttrMsg"))
            myMsgFac () (
               "setBooleanAttrMsg",
               "stockRealloc",
               witTRUE,
               witFALSE);
d1086 1
a1086 1
      theCall.myGlobalComp ()->setSelStockRe (bool);
d1093 1
a1093 1
WitReturnCode WitRun::witSetSkipFailures (WitBoolean bool)
d1095 1
a1095 1
   PROLOG ("witSetSkipFailures");
d1100 2
a1101 2
      "skipFailures", 
      theCall.myGlobalComp ()->skipFailures (), 
d1104 9
d1114 1
a1114 1
      theCall.myGlobalComp ()->setSkipFailures (bool);
d1121 1
a1121 1
WitReturnCode WitRun::witSetStockRealloc (WitBoolean bool)
d1123 1
a1123 1
   PROLOG ("witSetStockRealloc");
d1128 2
a1129 3
      "stockRealloc", 
      theCall.myGlobalComp ()->pureUncondSR (), 
      bool);
d1132 1
a1132 1
      if (theCall.myGlobalComp ()->selStockRe ())
d1136 1
a1136 1
               "selStockRe",
d1141 1
a1141 1
      theCall.myGlobalComp ()->setPureUncondSR (bool);
@


1.17
log
@Renamed mandatory stock reallocation to unconditional stock reallocation.
@
text
@d555 1
a555 1
      theCall.myGlobalComp ()->uncondStockRe ());
a610 17
WitReturnCode WitRun::witGetUncondStockRe (WitBoolean * uncondStockRe)
   {
   PROLOG ("witGetUncondStockRe");

   WitGlobalCompApiCall theCall (this);

   apiGet (                    uncondStockRe, 
                              "uncondStockRe", 
      theCall.myGlobalComp ()->uncondStockRe ());

   issueGetAttrMsg ("uncondStockRe");

   EPILOG;
   }

//------------------------------------------------------------------------------

d1085 1
a1085 1
      if (theCall.myGlobalComp ()->uncondStockRe ())
d1089 1
a1089 1
               "uncondStockRe",
d1128 1
a1128 1
      theCall.myGlobalComp ()->uncondStockRe (), 
d1141 1
a1141 1
      theCall.myGlobalComp ()->setUncondStockRe (bool);
a1199 28

   EPILOG;
   }

//------------------------------------------------------------------------------

WitReturnCode WitRun::witSetUncondStockRe (WitBoolean bool)
   {
   PROLOG ("witSetUncondStockRe");

   WitGlobalCompApiCall theCall (this);

   theCall.prepBoolean (
      "uncondStockRe", 
      theCall.myGlobalComp ()->uncondStockRe (), 
      bool);

   if (bool)
      if (theCall.myGlobalComp ()->selStockRe ())
         if (myMsgFac ().mayIssue ("setBooleanAttrMsg"))
            myMsgFac () (
               "setBooleanAttrMsg",
               "selStockRe",
               witTRUE,
               witFALSE);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setUncondStockRe (bool);
@


1.16
log
@Removed allowSSR development control parameter.
@
text
@a331 17
WitReturnCode WitRun::witGetMandStockRe (WitBoolean * mandStockRe)
   {
   PROLOG ("witGetMandStockRe");

   WitGlobalCompApiCall theCall (this);

   apiGet (                    mandStockRe, 
                              "mandStockRe", 
      theCall.myGlobalComp ()->mandStockRe ());

   issueGetAttrMsg ("mandStockRe");

   EPILOG;
   }

//------------------------------------------------------------------------------

d555 1
a555 1
      theCall.myGlobalComp ()->mandStockRe ());
d611 17
a900 28
WitReturnCode WitRun::witSetMandStockRe (WitBoolean bool)
   {
   PROLOG ("witSetMandStockRe");

   WitGlobalCompApiCall theCall (this);

   theCall.prepBoolean (
      "mandStockRe", 
      theCall.myGlobalComp ()->mandStockRe (), 
      bool);

   if (bool)
      if (theCall.myGlobalComp ()->selStockRe ())
         if (myMsgFac ().mayIssue ("setBooleanAttrMsg"))
            myMsgFac () (
               "setBooleanAttrMsg",
               "selStockRe",
               witTRUE,
               witFALSE);

   if (theCall.argsOK ())
      theCall.myGlobalComp ()->setMandStockRe (bool);

   EPILOG;
   }

//------------------------------------------------------------------------------

d1102 1
a1102 1
      if (theCall.myGlobalComp ()->mandStockRe ())
d1106 1
a1106 1
               "mandStockRe",
d1145 1
a1145 1
      theCall.myGlobalComp ()->mandStockRe (), 
d1158 1
a1158 1
      theCall.myGlobalComp ()->setMandStockRe (bool);
d1217 28
@


1.15
log
@Changed attribute stockRealloc to mandStockRe.
@
text
@a535 3
   if (! theCall.myGlobalComp ()->allowSSR ())
      myMsgFac () ("ssrWoAllowSsrSmsg");

a1123 3

   if (! theCall.myGlobalComp ()->allowSSR ())
      myMsgFac () ("ssrWoAllowSsrSmsg");
@


1.14
log
@Continued implementation of selective stock reallocation.
@
text
@d332 17
d575 1
a575 1
      theCall.myGlobalComp ()->stockRealloc ());
d904 28
d1136 1
a1136 1
      if (theCall.myGlobalComp ()->stockRealloc ())
d1140 1
a1140 1
               "stockRealloc",
d1179 1
a1179 1
      theCall.myGlobalComp ()->stockRealloc (), 
d1192 1
a1192 1
      theCall.myGlobalComp ()->setStockRealloc (bool);
@


1.13
log
@Continued implementation of selective stock reallocation.
@
text
@d513 1
a513 1
WitReturnCode WitRun::witGetSelStockRealloc (WitBoolean * selStockRealloc)
d515 1
a515 1
   PROLOG ("witGetSelStockRealloc");
d522 3
a524 3
   apiGet (                    selStockRealloc, 
                              "selStockRealloc", 
      theCall.myGlobalComp ()->selStockRealloc ());
d526 1
a526 1
   issueGetAttrMsg ("selStockRealloc");
d1077 1
a1077 1
WitReturnCode WitRun::witSetSelStockRealloc (WitBoolean bool)
d1079 1
a1079 1
   PROLOG ("witSetSelStockRealloc");
d1087 2
a1088 2
      "selStockRealloc", 
      theCall.myGlobalComp ()->selStockRealloc (), bool);
d1100 1
a1100 1
      theCall.myGlobalComp ()->setSelStockRealloc (bool);
d1138 1
a1138 1
      if (theCall.myGlobalComp ()->selStockRealloc ())
d1142 1
a1142 1
               "selStockRealloc",
@


1.12
log
@Refactoring for constrained stock reallocation.
@
text
@d519 3
d1082 3
@


1.11
log
@Added selStockRealloc attribute.
@
text
@d32 1
a32 1
   apiGet (appData, "appData", theCall ()->appData ());
d47 4
a50 1
   apiGet (autoPriority, "autoPriority", theCall ()->autoPriority ());
d99 1
a99 1
      theCall ()->computeCriticalList ());
d125 1
a125 1
   * lenCritList = theCall ()->criticalList ().nElements ();
d132 1
a132 1
   forEachEl (theDP, theCall ()->criticalList ())
d152 3
a154 1
   apiGet (equitability, "equitability", theCall ()->equitability ());
d169 3
a171 1
   apiGet (execEmptyBom, "execEmptyBom", theCall ()->execEmptyBom ());
d186 1
a186 1
   apiGet (expCutoff, "expCutoff", theCall ()->expCutoff ());
d201 1
a201 1
   apiGet (feasible, "feasible", theCall ()->feasible ());
d216 3
a218 1
   apiGet (forcedMultiEq, "ForcedMultiEq", theCall ()->forcedMultiEq ());
d233 3
a235 1
   apiGet (hashTableSize, "hashTableSize", theCall ()->hashTableSize ());
d262 1
a262 1
WitReturnCode WitRun::witGetIndependentOffsets (WitBoolean * pVar)
d268 3
a270 1
   apiGet (pVar, "independentOffsets", theCall ()->independentOffsets ());
d287 3
a289 1
   apiGet (localBuildAhead, "localBuildAhead", theCall ()->localBuildAhead ());
d306 3
a308 1
   apiGet (localMultiExec, "localMultiExec", theCall ()->localMultiExec ());
d323 1
a323 1
   apiGet (lotSizeTol, "lotSizeTol", theCall ()->lotSizeTol ());
d338 1
a338 1
   apiGet (multiExec, "multiExec", theCall ()->multiExec ());
d353 1
a353 1
   apiGet (multiRoute, "multiRoute", theCall ()->multiRoute ());
d383 3
a385 1
   apiGet (outputPrecision, "outputPrecision", theCall ()->outputPrecision ());
d400 1
a400 1
   apiGet (penExec, "penExec", theCall ()->penExec ());
d417 1
a417 1
      theCall ()->perfPegging ());
d452 1
a452 1
      theCall ()->prefHighStockSLBs ());
d487 1
a487 1
      theCall ()->respectStockSLBs ());
d502 3
a504 1
   apiGet (roundReqVols, "roundReqVols", theCall ()->roundReqVols ());
d519 3
a521 1
   apiGet (selStockRealloc, "selStockRealloc", theCall ()->selStockRealloc ());
d536 3
a538 1
   apiGet (skipFailures, "skipFailures", theCall ()->skipFailures ());
d553 3
a555 1
   apiGet (stockRealloc, "stockRealloc", theCall ()->stockRealloc ());
d570 1
a570 1
   apiGet (title, "title", theCall ()->title ());
d583 3
a585 1
   apiGet (truncOffsets, "truncOffsets", theCall ()->truncOffsets ());
d600 3
a602 1
   apiGet (twoWayMultiExec, "twoWayMultiExec", theCall ()->twoWayMultiExec ());
d617 3
a619 4
   apiGet (
       useFocusHorizons,
      "useFocusHorizons",
      theCall ()->useFocusHorizons ());
d662 4
a665 1
   theCall.prepBoolean ("autoPriority", theCall ()->autoPriority (), bool);
d668 1
a668 1
      theCall ()->setAutoPriority (bool);
d711 1
a711 1
      theCall ()->computeCriticalList (), 
d715 1
a715 1
      theCall ()->setComputeCriticalList (bool);
d730 1
a730 1
      theCall ()->equitability (),
d736 1
a736 1
      theCall ()->setEquitability (equit);
d749 4
a752 1
   theCall.prepBoolean ("execEmptyBom", theCall ()->execEmptyBom (), bool);
d755 1
a755 1
      theCall ()->setExecEmptyBom (bool);
d770 1
a770 1
      theCall ()->expCutoff (),
d776 1
a776 1
      theCall ()->setExpCutoff (newFlt);
d789 4
a792 1
   theCall.prepBoolean ("forcedMultiEq", theCall ()->forcedMultiEq (), bool);
d795 1
a795 1
      theCall ()->setForcedMultiEq (bool);
d808 4
a811 1
   theCall.prepNonNegInt ("hashTableSize", theCall ()->hashTableSize (), size);
d814 1
a814 1
      theCall ()->setHashTableSize (size);
d831 1
a831 1
      theCall ()->independentOffsets (), 
d835 1
a835 1
      theCall ()->setIndependentOffsets (theValue);
d850 1
a850 1
      theCall ()->localBuildAhead (), 
d856 1
a856 1
      theCall ()->setLocalBuildAhead (bool);
d869 4
a872 1
   theCall.prepBoolean ("localMultiExec", theCall ()->localMultiExec (), bool);
d877 1
a877 1
      theCall ()->setLocalMultiExec (bool);
d890 4
a893 1
   theCall.prepNonNegFloat ("lotSizeTol", theCall ()->lotSizeTol (), newFlt);
d896 1
a896 1
      theCall ()->setLotSizeTol (newFlt);
d913 4
a916 1
   theCall.prepBoolean ("multiExec", theCall ()->multiExec (), bool);
d919 1
a919 1
      theCall ()->setMultiExec (bool);
d932 4
a935 1
   theCall.prepBoolean ("multiRoute", theCall ()->multiRoute (), bool);
d938 1
a938 1
      theCall ()->setMultiRoute (bool);
d953 4
a956 1
   theCall.prepImmPosInt ("nPeriods", theCall ()->nPeriods (), nper);
d959 1
a959 1
      theCall ()->setNPeriods (nper);
d974 1
a974 1
      theCall ()->outputPrecision (), 
d978 1
a978 1
      theCall ()->setOutputPrecision (outputPrecisionParm);
d991 1
a991 1
   theCall.prepBoolean ("penExec", theCall ()->penExec (), bool);
d994 1
a994 1
      theCall ()->setPenExec (bool);
d1009 1
a1009 1
      theCall ()->perfPegging (), bool);
d1012 1
a1012 1
      theCall ()->setPerfPegging (bool);
d1027 1
a1027 1
      theCall ()->prefHighStockSLBs (), bool);
d1030 1
a1030 1
      theCall ()->setPrefHighStockSLBs (bool);
d1045 1
a1045 1
      theCall ()->respectStockSLBs (), bool);
d1048 1
a1048 1
      theCall ()->setRespectStockSLBs (bool);
d1061 4
a1064 1
   theCall.prepBoolean ("roundReqVols", theCall ()->roundReqVols (), bool);
d1067 1
a1067 1
      theCall ()->setRoundReqVols (bool);
d1082 1
a1082 1
      theCall ()->selStockRealloc (), bool);
d1085 1
a1085 1
      if (theCall ()->stockRealloc ())
d1094 1
a1094 1
      theCall ()->setSelStockRealloc (bool);
d1107 4
a1110 1
   theCall.prepBoolean ("skipFailures", theCall ()->skipFailures (), bool);
d1113 1
a1113 1
      theCall ()->setSkipFailures (bool);
d1126 4
a1129 1
   theCall.prepBoolean ("stockRealloc", theCall ()->stockRealloc (), bool);
d1132 1
a1132 1
      if (theCall ()->selStockRealloc ())
d1141 1
a1141 1
      theCall ()->setStockRealloc (bool);
d1154 1
a1154 1
   theCall.prepString ("title", theCall ()->title (), newTitle);
d1157 1
a1157 1
      theCall ()->setTitle (newTitle);
d1170 4
a1173 1
   theCall.prepBoolean ("truncOffsets", theCall ()->truncOffsets (), bool);
d1176 1
a1176 1
      theCall ()->setTruncOffsets (bool);
d1195 1
a1195 1
      theCall ()->twoWayMultiExec (), 
d1199 1
a1199 1
      theCall ()->setTwoWayMultiExec (bool);
d1214 1
a1214 1
      theCall ()->useFocusHorizons (), 
d1218 1
a1218 1
      theCall ()->setUseFocusHorizons (newValue);
d1233 1
a1233 1
      theCall ()->wit34Compatible (), 
d1240 1
a1240 1
      theCall ()->setWit34Compatible (bool);
@


1.10
log
@Minor change.
@
text
@d492 15
d1014 27
d1064 9
@


1.9
log
@Continued implementation of pegging.
@
text
@d390 1
a390 1
WitReturnCode WitRun::witGetPeggingNeeded (WitBoolean * peggingNeeded)
d392 1
a392 1
   PROLOG ("witGetPeggingNeeded");
d396 3
a398 3
   apiGet (peggingNeeded, 
      "peggingNeeded", 
      theCall ()->peggingNeeded ());
d400 1
a400 1
   issueGetAttrMsg ("peggingNeeded");
d929 1
a929 1
WitReturnCode WitRun::witSetPeggingNeeded (WitBoolean bool)
d931 1
a931 1
   PROLOG ("witSetPeggingNeeded");
d936 2
a937 2
      "peggingNeeded", 
      theCall ()->peggingNeeded (), bool);
d940 1
a940 1
      theCall ()->setPeggingNeeded (bool);
@


1.8
log
@Continued implementation of pegging.
@
text
@d390 1
a390 1
WitReturnCode WitRun::witGetPegging (WitBoolean * pegging)
d392 1
a392 1
   PROLOG ("witGetPegging");
d396 3
a398 3
   apiGet (pegging, 
      "pegging", 
      theCall ()->pegging ());
d400 1
a400 1
   issueGetAttrMsg ("pegging");
d929 1
a929 1
WitReturnCode WitRun::witSetPegging (WitBoolean bool)
d931 1
a931 1
   PROLOG ("witSetPegging");
d936 2
a937 2
      "pegging", 
      theCall ()->pegging (), bool);
d940 1
a940 1
      theCall ()->setPegging (bool);
@


1.7
log
@Continued implementation of pegging.
@
text
@d390 1
a390 1
WitReturnCode WitRun::witGetPerfPegging (WitBoolean * perfPegging)
d392 1
a392 1
   PROLOG ("witGetPerfPegging");
d396 3
a398 3
   apiGet (perfPegging, 
      "perfPegging", 
      theCall ()->perfPegging ());
d400 1
a400 1
   issueGetAttrMsg ("perfPegging");
d929 1
a929 1
WitReturnCode WitRun::witSetPerfPegging (WitBoolean bool)
d931 1
a931 1
   PROLOG ("witSetPerfPegging");
d936 2
a937 2
      "perfPegging", 
      theCall ()->perfPegging (), bool);
d940 1
a940 1
      theCall ()->setPerfPegging (bool);
@


1.6
log
@Initial implementation of pegging.
@
text
@a142 17
WitReturnCode WitRun::witGetDoPegging (WitBoolean * doPegging)
   {
   PROLOG ("witGetDoPegging");

   WitGlobalCompApiCall theCall (this);

   apiGet (doPegging, 
      "doPegging", 
      theCall ()->doPegging ());

   issueGetAttrMsg ("doPegging");

   EPILOG;
   }

//------------------------------------------------------------------------------

d390 17
a673 18
WitReturnCode WitRun::witSetDoPegging (WitBoolean bool)
   {
   PROLOG ("witSetDoPegging");

   WitGlobalCompApiCall theCall (this);

   theCall.prepBoolean (
      "doPegging", 
      theCall ()->doPegging (), bool);

   if (theCall.argsOK ())
      theCall ()->setDoPegging (bool);

   EPILOG;
   }

//------------------------------------------------------------------------------

d923 18
@


1.5
log
@Implemented respectStockSLBs and prefHighStockSLBs global attributes.
@
text
@d19 1
a19 1
#include <HeurAll.h>
d143 17
d259 1
a259 1
      myProblem ()->myHeurAllocator ()->active ());
d668 18
@


1.4
log
@Finished implementing stock reallocation.
@
text
@d408 17
d443 17
d906 36
@


1.3
log
@Replaced WitPart.[Ch] with Part.[Ch].
@
text
@d456 15
d904 16
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d21 1
a21 1
#include <WitPart.h>
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
