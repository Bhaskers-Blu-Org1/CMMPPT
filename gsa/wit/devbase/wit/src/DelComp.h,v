head	1.24;
access;
symbols
	sce_5_01_20080919:1.19
	latest_sce_4_20_20060523:1.12.0.2
	sce_4_20_20060523:1.12
	latest_sce4_20_OSL:1.11.0.2
	sce_4_20_OSL:1.11
	sce_410_withVa:1.11
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.11
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10
	EndRw-branch:1.8.0.4
	Root-of-EndRw:1.8
	rwToStl:1.8.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.49.14;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.27.31;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.17.24;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.09.09.20.20.32;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2009.12.25.00.10.46;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.01.07.23.51.49;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.12.05.22.13.08;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.29.21.12.31;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.29.16.24.42;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.04.22.08.18;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.03.22.04.03;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.19.19.17.06;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.02.17.33.57;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.11.18.29.12;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.19.16.48.15;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.02.22.18.23;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.01.14.25.53;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.25.19.14.49;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.24.18.26.06;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.22.14.32.05;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.04.22.07.34;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.38;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.34;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef DelCompH
#define DelCompH

//------------------------------------------------------------------------------
// Header file: "DelComp.h"
//
// Contains the declaration of class
//------------------------------------------------------------------------------

#include <Component.h>

//------------------------------------------------------------------------------
// Class DelComp.
//
// A Deleteable Component.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       DelComp
//          Node
//             Part
//                Material
//                Capacity
//             Operation
//          BillEntry
//             ConsEntry
//                BomEntry
//                SubEntry
//             BopEntry
//          Demand
//
// Implemented in Component.C.
//------------------------------------------------------------------------------

class WitDelComp: public WitComponent
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDelComp ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, selForDel)

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (bool defSelForDel, false)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setSelForDel (bool);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void identifyOrAutoSel ();
         //
         // If this DelComp is selected for deletion, it is identified as being
         // selected by the user. Otherwise does automatic selection for
         // deletion, if required by the prerequisites for this DelComp.
         // Valid only during a purge.

      void identify ();
         //
         // Issues a Msg identifying this DelComp.

      virtual void identifyInstance () = 0;
         //
         // Issues a Msg distinguishing this DelComp from other instances of
         // its class.

      virtual WitDelComp * thisDelComp ();
         //
         // Override from class Component.

      virtual void writeSetClause () = 0;
         //
         // Writes a "set" clause for this DelComp to an input data file.

      void display ();
         //
         // Displays the input and preprocessing data for this DelComp.

      void prepSetScenSpecAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is allowed to be set in stochastic mode.
         // theAttName is the name of the attribute.

      virtual WitMsgFrag objTypeMsgFrag () = 0;
         //
         // Returns a message fragment indicating the object type for this
         // DelComp.

      virtual WitAttr apiObjItrState () = 0;
         //
         // Base class function.
         // Returns the API objItrState attribute value that applies when the
         // DelCompItr is located at this DelComp.

      //------------------------------------------------------------------------
      // purgeSelComps functions.
      //
      // Each of the following functions removes the elements from the argument
      // List that are selected for deletion.
      //------------------------------------------------------------------------

      static void purgeSelComps (WitList <WitPart> &);
      static void purgeSelComps (WitList <WitOperation> &);
      static void purgeSelComps (WitList <WitBomEntry> &);
      static void purgeSelComps (WitList <WitSubEntry> &);
      static void purgeSelComps (WitList <WitBopEntry> &);
      static void purgeSelComps (WitList <WitDemand> &);

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDelComp (WitCompMgr * theCompMgr);
         //
         // Component <<< theCompMgr.

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      void copyAttrsFrom (WitDelComp * theDelComp);
         //
         // Copies the input attributes of theDelComp into this DelComp.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // prereq1 <-- The first  prerequisite for this DelComp, if any,
         //             else NULL.
         // prereq2 <-- The second prerequisite for this DelComp, if any,
         //             else NULL.
         // This default version sets them to NULL.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDelComp);

      void autoSelForDel (WitDelComp * prereq);
         //
         // If prereq is not NULL and
         //    prereq is selected for deletion and
         //    this DelComp is not selected for deletion,
         // selects this DelComp for deletion.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      bool selForDel_;
         //
         // true, iff this Component is to be deleted at the next purge.
   };

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d47 2
a48 62
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitDelComp ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (bool, selForDel)

//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------

defaultValue (bool defSelForDel, false)

//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------

void setSelForDel (bool);

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void identifyOrAutoSel ();
//
// If this DelComp is selected for deletion, it is identified as being
// selected by the user. Otherwise does automatic selection for
// deletion, if required by the prerequisites for this DelComp.
// Valid only during a purge.

void identify ();
//
// Issues a Msg identifying this DelComp.

virtual void identifyInstance () = 0;
//
// Issues a Msg distinguishing this DelComp from other instances of
// its class.

virtual WitDelComp * thisDelComp ();
//
// Override from class Component.

virtual void writeSetClause () = 0;
//
// Writes a "set" clause for this DelComp to an input data file.

void display ();
//
// Displays the input and preprocessing data for this DelComp.
d50 153
a202 93
void prepSetScenSpecAttr (const char * theAttName);
//
// Takes action appropriate just before the value of an attribute is to
// be set, thereby necessitating unpostprocessing.
// The attribute is allowed to be set in stochastic mode.
// theAttName is the name of the attribute.

virtual WitMsgFrag objTypeMsgFrag () = 0;
//
// Returns a message fragment indicating the object type for this
// DelComp.

virtual WitAttr apiObjItrState () = 0;
//
// Base class function.
// Returns the API objItrState attribute value that applies when the
// DelCompItr is located at this DelComp.

//------------------------------------------------------------------------
// purgeSelComps functions.
//
// Each of the following functions removes the elements from the argument
// List that are selected for deletion.
//------------------------------------------------------------------------

static void purgeSelComps (WitList <WitPart> &);
static void purgeSelComps (WitList <WitOperation> &);
static void purgeSelComps (WitList <WitBomEntry> &);
static void purgeSelComps (WitList <WitSubEntry> &);
static void purgeSelComps (WitList <WitBopEntry> &);
static void purgeSelComps (WitList <WitDemand> &);

protected:

//------------------------------------------------------------------------
// Protected member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitDelComp (WitCompMgr * theCompMgr);
//
// Component <<< theCompMgr.

//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------

virtual void writeDataAttrs ();
//
// Override from class Component.

void copyAttrsFrom (WitDelComp * theDelComp);
//
// Copies the input attributes of theDelComp into this DelComp.

virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
//
// prereq1 <-- The first  prerequisite for this DelComp, if any,
//             else NULL.
// prereq2 <-- The second prerequisite for this DelComp, if any,
//             else NULL.
// This default version sets them to NULL.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitDelComp);

void autoSelForDel (WitDelComp * prereq);
//
// If prereq is not NULL and
//    prereq is selected for deletion and
//    this DelComp is not selected for deletion,
// selects this DelComp for deletion.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Input data.
//------------------------------------------------------------------------

bool selForDel_;
//
// true, iff this Component is to be deleted at the next purge.
};
@


1.21
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d47 62
a108 2
   {
   public:
d110 93
a202 153
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDelComp ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, selForDel)

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (bool defSelForDel, false)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setSelForDel (bool);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void identifyOrAutoSel ();
         //
         // If this DelComp is selected for deletion, it is identified as being
         // selected by the user. Otherwise does automatic selection for
         // deletion, if required by the prerequisites for this DelComp.
         // Valid only during a purge.

      void identify ();
         //
         // Issues a Msg identifying this DelComp.

      virtual void identifyInstance () = 0;
         //
         // Issues a Msg distinguishing this DelComp from other instances of
         // its class.

      virtual WitDelComp * thisDelComp ();
         //
         // Override from class Component.

      virtual void writeSetClause () = 0;
         //
         // Writes a "set" clause for this DelComp to an input data file.

      void display ();
         //
         // Displays the input and preprocessing data for this DelComp.

      void prepSetScenSpecAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is allowed to be set in stochastic mode.
         // theAttName is the name of the attribute.

      virtual WitMsgFrag objTypeMsgFrag () = 0;
         //
         // Returns a message fragment indicating the object type for this
         // DelComp.

      virtual WitAttr apiObjItrState () = 0;
         //
         // Base class function.
         // Returns the API objItrState attribute value that applies when the
         // DelCompItr is located at this DelComp.

      //------------------------------------------------------------------------
      // purgeSelComps functions.
      //
      // Each of the following functions removes the elements from the argument
      // List that are selected for deletion.
      //------------------------------------------------------------------------

      static void purgeSelComps (WitList <WitPart> &);
      static void purgeSelComps (WitList <WitOperation> &);
      static void purgeSelComps (WitList <WitBomEntry> &);
      static void purgeSelComps (WitList <WitSubEntry> &);
      static void purgeSelComps (WitList <WitBopEntry> &);
      static void purgeSelComps (WitList <WitDemand> &);

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDelComp (WitCompMgr * theCompMgr);
         //
         // Component <<< theCompMgr.

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      void copyAttrsFrom (WitDelComp * theDelComp);
         //
         // Copies the input attributes of theDelComp into this DelComp.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // prereq1 <-- The first  prerequisite for this DelComp, if any,
         //             else NULL.
         // prereq2 <-- The second prerequisite for this DelComp, if any,
         //             else NULL.
         // This default version sets them to NULL.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDelComp);

      void autoSelForDel (WitDelComp * prereq);
         //
         // If prereq is not NULL and
         //    prereq is selected for deletion and
         //    this DelComp is not selected for deletion,
         // selects this DelComp for deletion.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      bool selForDel_;
         //
         // true, iff this Component is to be deleted at the next purge.
   };
@


1.20
log
@Multi-Objective Mode
@
text
@d19 1
a19 1
#include <Compo.h>
d43 1
a43 1
// Implemented in Compo.C.
@


1.19
log
@Stochastic Implosion
@
text
@d102 4
@


1.18
log
@Stochastic Implosion
@
text
@a123 5
      virtual int stageIndex () = 0;
         //
         // Returns the stage index of this DelComp.
         // Valid only stochastic mode.

@


1.17
log
@Stochastic Implosion
@
text
@d106 1
a106 1
      void prepSetStochModeAttr (const char * theAttName);
@


1.16
log
@Stochastic Implosion
@
text
@d106 7
@


1.15
log
@Stochastic Implosion.
@
text
@d117 5
@


1.14
log
@Stochastic Implosion.
@
text
@a148 5
      void forbidAddStochAct ();
         //
         // If stochastic implosion is active, this function issues a severe
         // error msg indicating that a attempt was made to add an object.

@


1.13
log
@Replaced WIT's hash tables with std:maps.
@
text
@a92 4
      virtual WitMsgFragID classFragID () = 0;
         //
         // Returns a message fragment ID indicating the DelComp class.

d106 5
d149 5
@


1.12
log
@Updated the copyright date on all source files.
@
text
@a122 1
      static void purgeSelComps (WitList <WitNode> &);
@


1.11
log
@Removed a bad function overload.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d102 1
a102 1
      virtual WitDelComp * myDelComp ();
@


1.9
log
@Internal changes.
@
text
@d102 1
a102 1
      virtual void getDelComp (WitDelComp * &);
@


1.8
log
@Preliminary work on single source.
@
text
@d64 1
a64 1
      accessFunc (WitBoolean, selForDel)
d70 1
a70 1
      defaultValue (WitBoolean defSelForDel, witFALSE)
d76 1
a76 1
      void setSelForDel (WitBoolean);
d188 1
a188 1
      WitBoolean selForDel_;
d190 1
a190 1
         // TRUE, iff this Component is to be deleted at the next purge.
@


1.7
log
@Continued implementation of object iteration.
@
text
@d123 7
a129 7
      static void purgeSelComps (WitList (WitNode) &);
      static void purgeSelComps (WitList (WitPart) &);
      static void purgeSelComps (WitList (WitOperation) &);
      static void purgeSelComps (WitList (WitBomEntry) &);
      static void purgeSelComps (WitList (WitSubEntry) &);
      static void purgeSelComps (WitList (WitBopEntry) &);
      static void purgeSelComps (WitList (WitDemand) &);
@


1.6
log
@Continued implementation of object iteration.
@
text
@d110 1
a110 1
      virtual WitAttr apiItrState () = 0;
d113 2
a114 2
         // Returns the API attribute indicating the iteration state for when
         // object iteration is located at this DelComp.
@


1.5
log
@Continued implementation of object iteration.
@
text
@d113 2
a114 2
         // Returns the API attribute indicating the object iteration state
         // for when the DelCompItr is referencing this DelComp.
@


1.4
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@a54 8
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDelComp (WitCompMgr * theCompMgr);
         //
         // Component <<< theCompMgr.

      //------------------------------------------------------------------------
a81 4
      virtual WitBoolean isADelComp (WitDelComp * & theDelComp);
         //
         // Override from class DelComp.

d102 4
d110 6
d135 12
@


1.3
log
@Refactoring for selection splitting.
@
text
@d99 1
a99 1
         // Only valid during a purge.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d161 1
a161 3
      copyCtorAndAssignment (WitDelComp);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
