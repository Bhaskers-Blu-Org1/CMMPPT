head	1.73;
access;
symbols
	sce_5_01_20080919:1.70;
locks; strict;
comment	@ * @;


1.73
date	2011.09.28.23.50.32;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2011.09.24.00.28.47;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2011.08.30.20.18.17;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2008.03.01.00.01.04;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2008.02.09.00.11.58;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2008.02.07.21.49.36;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2008.02.07.18.41.40;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2008.01.30.21.07.16;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2008.01.21.21.47.17;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2008.01.18.22.40.59;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2008.01.14.19.21.15;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2008.01.11.21.47.42;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2008.01.08.17.20.39;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2008.01.07.23.51.50;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.12.05.22.13.09;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.12.03.19.41.34;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.11.29.21.12.32;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.11.29.19.18.04;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.11.29.16.24.43;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.11.28.23.23.49;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2007.11.27.22.24.43;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2007.10.22.19.58.53;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2007.10.22.19.20.38;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2007.10.22.18.53.58;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2007.10.18.23.14.45;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2007.10.15.21.50.35;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2007.10.12.23.04.58;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2007.10.02.22.23.06;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2007.09.27.19.57.41;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2007.09.26.22.52.52;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2007.09.11.18.09.18;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2007.09.10.21.01.35;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2007.08.29.16.24.23;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2007.08.28.17.38.35;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2007.08.24.21.12.38;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2007.08.17.22.32.24;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2007.08.14.21.20.19;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2007.08.09.22.29.08;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2007.08.07.21.22.36;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.06.21.18.49.19;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.06.20.22.41.39;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.06.20.22.10.27;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.06.20.19.07.53;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.06.19.21.45.51;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.06.18.21.53.31;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.06.15.22.15.26;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.06.14.22.08.53;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.06.14.21.38.31;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.06.14.16.09.36;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.06.13.23.12.32;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.06.08.22.47.02;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.06.08.21.54.42;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.06.08.18.26.10;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.08.18.09.41;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.25.20.55.51;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.05.24.18.52.22;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.23.22.32.30;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.22.16.06.27;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.22.15.46.53;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.21.15.31.46;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.21.15.20.10;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.18.21.51.42;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.17.22.11.46;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.17.17.59.18;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.16.22.16.46;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.15.20.28.49;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.15.19.45.43;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.14.20.25.17;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.14.19.48.41;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.11.22.49.32;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.04.23.27.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.03.20.05.15;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.30.21.52.09;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.73
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StochImpMgrH
#define StochImpMgrH

//------------------------------------------------------------------------------
// Header file: "StochImpMgr.h"
//
// Contains the declaration of class StochImpMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class StochImpMgr
//
// "Stochastic Implosion Manager"
// The interface to the stochastic implosion subsystem.
//------------------------------------------------------------------------------

class WitStochImpMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochImpMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochImpMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitStochImpMgr * theStochImpMgr);
         //
         // Copies the input attributes of theStochImpMgr into this StochImpMgr.

      void writeData ();
         //
         // Writes the section of the input data file for this StochImpMgr.

      bool skipWriteData (const char * theAttName, WitComponent * theComp);
         //
         // Returns true, iff writeData for the attribute whose name is given by
         // theAttName is to be skipped for theComp.

      void displayGlobalData ();
         //
         // Displays the global input and preprocessing data for this
         // StochImpMgr.

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (bool defStageByObject,  false)
      defaultValue (int  defNScenarios,     1)
      defaultValue (bool defStochMode,      false)
      defaultValue (int  defPeriodStageIdx, 0)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setStageByObject (bool);
      void setNScenarios    (int);
      void setStochMode     (bool);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, stageByObject)
      accessFunc (int,  nScenarios)
      accessFunc (bool, stochMode)

      //------------------------------------------------------------------------
      // The following functions are only valid in stochastic mode.
      //------------------------------------------------------------------------

      void prepSetStochModeAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of the attribute
         // whose name is given by theName is to be set.
         // The attribute is allowed to be set in stochastic mode.
         // The attribute must not be a scenario-specific attribute associated
         // with either a DelComp or a BoundSet.

      void prepSetScenSpecAttr (
            const char * theAttName,
            WitDelComp * theDelComp);
         //
         // Takes action appropriate just before the value of the
         // scenario-specific attribute whose name is given by theName is to be
         // set for theDelComp.

      void prepSetBoundSet (WitBoundSet * theBoundSet);
         //
         // Takes action appropriate just before the value of theBoundSet is to
         // be set.

      bool isScenSpec (const char * theAttName);
         //
         // Returns true, iff theAttName is the name of a scenario-specific
         // attribute.

      bool canSetInStochMode (const char * theAttName);
         //
         // Returns true, iff theAttName is the name of an attribute that can be
         // set in stochastic mode.

      bool canSetInStochSolnMode (const char * theAttName);
         //
         // Returns true, iff theAttName is the name of an attribute that can be
         // set in stochastic solution mode.

      bool uploadingData ();
         //
         // Returns true, iff the stochastic implosion subsystem is currently
         // uploading scenario-specific data to the owning Components.

      void displayDataStochMode ();
         //
         // Does portion of displayData specific to stochastic mode.

      void implode ();
         //
         // Performs stochastic implosion.

      void clearSoln ();
         //
         // Clears the stochastic implosion solution.

      //------------------------------------------------------------------------
      // "Set" functions for stochastic mode.
      //------------------------------------------------------------------------

      void setCurrentScenario (int);
      void setProbability     (double);

      void setObjectStageIdx (WitNode * theNode, int theStageIdx);
         //
         // Sets the objectStageIdx of theNode to theStageIdx.

      void setPeriodStageIdx (WitPeriod thePer, int theStageIdx);
         //
         // Sets the periodStageIdx of thePer to theStageIdx.

      //------------------------------------------------------------------------
      // Data access functions for stochastic mode.
      //------------------------------------------------------------------------

      int    currentScenario ();
      double probability     ();
      int    objectStageIdx  (WitNode *);
      int    periodStageIdx  (WitPeriod);
      bool   stochSolnMode   ();
      bool   clearingSoln    ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      bool writeDataNeeded ();
         //
         // Returns true, iff writeData needs to write anything.

      void writeDataID ();
         //
         // Writes text identifying this StochImpMgr to an input data file.

      void writeDataAttrs ();
         //
         // Writes the attributes of this StochImpMgr to an input data file.

      void setSolnAttr (
                  WitDblFlexVec &    theAttr,
            const WitTVec <double> & theTVec);
         //
         // Sets theAttr to theTVec or to 0, if theTVec is unallocated.

      accessNonNull (WitStochModeMgr *, myStochModeMgr)

      noCopyCtorAssign (WitStochImpMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool stageByObject_;
         //
         // If true,  stage-by-object mode is to be used.
         // If false, stage-by-period mode is to be used.

      int nScenarios_;
         //
         // The number of scenarios for stochastic implosion.

      bool stochMode_;
         //
         // True, iff the WitRun is currently in stochastic mode.

      WitStochModeMgr * myStochModeMgr_;
         //
         // The StochModeMgr owned by this StochImpMgr during stochastic mode;
         // otherwise NULL.
   };

#endif
@


1.72
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.71
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d29 2
a30 110
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitStochImpMgr (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitStochImpMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void copyAttrsFrom (WitStochImpMgr * theStochImpMgr);
//
// Copies the input attributes of theStochImpMgr into this StochImpMgr.

void writeData ();
//
// Writes the section of the input data file for this StochImpMgr.

bool skipWriteData (const char * theAttName, WitComponent * theComp);
//
// Returns true, iff writeData for the attribute whose name is given by
// theAttName is to be skipped for theComp.

void displayGlobalData ();
//
// Displays the global input and preprocessing data for this
// StochImpMgr.

//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------

defaultValue (bool defStageByObject,  false)
defaultValue (int  defNScenarios,     1)
defaultValue (bool defStochMode,      false)
defaultValue (int  defPeriodStageIdx, 0)

//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------

void setStageByObject (bool);
void setNScenarios    (int);
void setStochMode     (bool);

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (bool, stageByObject)
accessFunc (int,  nScenarios)
accessFunc (bool, stochMode)

//------------------------------------------------------------------------
// The following functions are only valid in stochastic mode.
//------------------------------------------------------------------------

void prepSetStochModeAttr (const char * theAttName);
//
// Takes action appropriate just before the value of the attribute
// whose name is given by theName is to be set.
// The attribute is allowed to be set in stochastic mode.
// The attribute must not be a scenario-specific attribute associated
// with either a DelComp or a BoundSet.

void prepSetScenSpecAttr (
const char * theAttName,
WitDelComp * theDelComp);
//
// Takes action appropriate just before the value of the
// scenario-specific attribute whose name is given by theName is to be
// set for theDelComp.

void prepSetBoundSet (WitBoundSet * theBoundSet);
//
// Takes action appropriate just before the value of theBoundSet is to
// be set.

bool isScenSpec (const char * theAttName);
//
// Returns true, iff theAttName is the name of a scenario-specific
// attribute.

bool canSetInStochMode (const char * theAttName);
//
// Returns true, iff theAttName is the name of an attribute that can be
// set in stochastic mode.

bool canSetInStochSolnMode (const char * theAttName);
//
// Returns true, iff theAttName is the name of an attribute that can be
// set in stochastic solution mode.

bool uploadingData ();
//
// Returns true, iff the stochastic implosion subsystem is currently
// uploading scenario-specific data to the owning Components.

void displayDataStochMode ();
//
// Does portion of displayData specific to stochastic mode.
d32 192
a223 84
void implode ();
//
// Performs stochastic implosion.

void clearSoln ();
//
// Clears the stochastic implosion solution.

//------------------------------------------------------------------------
// "Set" functions for stochastic mode.
//------------------------------------------------------------------------

void setCurrentScenario (int);
void setProbability     (double);

void setObjectStageIdx (WitNode * theNode, int theStageIdx);
//
// Sets the objectStageIdx of theNode to theStageIdx.

void setPeriodStageIdx (WitPeriod thePer, int theStageIdx);
//
// Sets the periodStageIdx of thePer to theStageIdx.

//------------------------------------------------------------------------
// Data access functions for stochastic mode.
//------------------------------------------------------------------------

int    currentScenario ();
double probability     ();
int    objectStageIdx  (WitNode *);
int    periodStageIdx  (WitPeriod);
bool   stochSolnMode   ();
bool   clearingSoln    ();

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

bool writeDataNeeded ();
//
// Returns true, iff writeData needs to write anything.

void writeDataID ();
//
// Writes text identifying this StochImpMgr to an input data file.

void writeDataAttrs ();
//
// Writes the attributes of this StochImpMgr to an input data file.

void setSolnAttr (
WitDblFlexVec &    theAttr,
const WitTVec <double> & theTVec);
//
// Sets theAttr to theTVec or to 0, if theTVec is unallocated.

accessNonNull (WitStochModeMgr *, myStochModeMgr)

noCopyCtorAssign (WitStochImpMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

bool stageByObject_;
//
// If true,  stage-by-object mode is to be used.
// If false, stage-by-period mode is to be used.

int nScenarios_;
//
// The number of scenarios for stochastic implosion.

bool stochMode_;
//
// True, iff the WitRun is currently in stochastic mode.

WitStochModeMgr * myStochModeMgr_;
//
// The StochModeMgr owned by this StochImpMgr during stochastic mode;
// otherwise NULL.
};
@


1.70
log
@Stochastic Implosion
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d29 110
a138 2
   {
   public:
d140 84
a223 192
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochImpMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochImpMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitStochImpMgr * theStochImpMgr);
         //
         // Copies the input attributes of theStochImpMgr into this StochImpMgr.

      void writeData ();
         //
         // Writes the section of the input data file for this StochImpMgr.

      bool skipWriteData (const char * theAttName, WitComponent * theComp);
         //
         // Returns true, iff writeData for the attribute whose name is given by
         // theAttName is to be skipped for theComp.

      void displayGlobalData ();
         //
         // Displays the global input and preprocessing data for this
         // StochImpMgr.

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (bool defStageByObject,  false)
      defaultValue (int  defNScenarios,     1)
      defaultValue (bool defStochMode,      false)
      defaultValue (int  defPeriodStageIdx, 0)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setStageByObject (bool);
      void setNScenarios    (int);
      void setStochMode     (bool);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, stageByObject)
      accessFunc (int,  nScenarios)
      accessFunc (bool, stochMode)

      //------------------------------------------------------------------------
      // The following functions are only valid in stochastic mode.
      //------------------------------------------------------------------------

      void prepSetStochModeAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of the attribute
         // whose name is given by theName is to be set.
         // The attribute is allowed to be set in stochastic mode.
         // The attribute must not be a scenario-specific attribute associated
         // with either a DelComp or a BoundSet.

      void prepSetScenSpecAttr (
            const char * theAttName,
            WitDelComp * theDelComp);
         //
         // Takes action appropriate just before the value of the
         // scenario-specific attribute whose name is given by theName is to be
         // set for theDelComp.

      void prepSetBoundSet (WitBoundSet * theBoundSet);
         //
         // Takes action appropriate just before the value of theBoundSet is to
         // be set.

      bool isScenSpec (const char * theAttName);
         //
         // Returns true, iff theAttName is the name of a scenario-specific
         // attribute.

      bool canSetInStochMode (const char * theAttName);
         //
         // Returns true, iff theAttName is the name of an attribute that can be
         // set in stochastic mode.

      bool canSetInStochSolnMode (const char * theAttName);
         //
         // Returns true, iff theAttName is the name of an attribute that can be
         // set in stochastic solution mode.

      bool uploadingData ();
         //
         // Returns true, iff the stochastic implosion subsystem is currently
         // uploading scenario-specific data to the owning Components.

      void displayDataStochMode ();
         //
         // Does portion of displayData specific to stochastic mode.

      void implode ();
         //
         // Performs stochastic implosion.

      void clearSoln ();
         //
         // Clears the stochastic implosion solution.

      //------------------------------------------------------------------------
      // "Set" functions for stochastic mode.
      //------------------------------------------------------------------------

      void setCurrentScenario (int);
      void setProbability     (double);

      void setObjectStageIdx (WitNode * theNode, int theStageIdx);
         //
         // Sets the objectStageIdx of theNode to theStageIdx.

      void setPeriodStageIdx (WitPeriod thePer, int theStageIdx);
         //
         // Sets the periodStageIdx of thePer to theStageIdx.

      //------------------------------------------------------------------------
      // Data access functions for stochastic mode.
      //------------------------------------------------------------------------

      int    currentScenario ();
      double probability     ();
      int    objectStageIdx  (WitNode *);
      int    periodStageIdx  (WitPeriod);
      bool   stochSolnMode   ();
      bool   clearingSoln    ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      bool writeDataNeeded ();
         //
         // Returns true, iff writeData needs to write anything.

      void writeDataID ();
         //
         // Writes text identifying this StochImpMgr to an input data file.

      void writeDataAttrs ();
         //
         // Writes the attributes of this StochImpMgr to an input data file.

      void setSolnAttr (
                  WitDblFlexVec &    theAttr,
            const WitTVec <double> & theTVec);
         //
         // Sets theAttr to theTVec or to 0, if theTVec is unallocated.

      accessNonNull (WitStochModeMgr *, myStochModeMgr)

      noCopyCtorAssign (WitStochImpMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool stageByObject_;
         //
         // If true,  stage-by-object mode is to be used.
         // If false, stage-by-period mode is to be used.

      int nScenarios_;
         //
         // The number of scenarios for stochastic implosion.

      bool stochMode_;
         //
         // True, iff the WitRun is currently in stochastic mode.

      WitStochModeMgr * myStochModeMgr_;
         //
         // The StochModeMgr owned by this StochImpMgr during stochastic mode;
         // otherwise NULL.
   };
@


1.69
log
@Stochastic Implosion
@
text
@d70 4
a73 5
      defaultValue (bool defAllowStageByPer, false)
      defaultValue (bool defStageByObject,   false)
      defaultValue (int  defNScenarios,      1)
      defaultValue (bool defStochMode,       false)
      defaultValue (int  defPeriodStageIdx,  0)
d79 3
a81 4
      void setAllowStageByPer (bool);
      void setStageByObject   (bool);
      void setNScenarios      (int);
      void setStochMode       (bool);
a86 1
      accessFunc (bool, allowStageByPer)
a205 5
      bool allowStageByPer_;
         //
         // Temporary development mode control parameter.
         // Stage-by-period mode is allowed, iff allowStageByPer_ is true.

@


1.68
log
@Stochastic Implosion
@
text
@d158 1
a158 1
      void setObjectStageIdx (WitNode * theNode, int theValue);
d160 1
a160 1
         // Sets the objectStageIdx of theNode to theValue.
d162 3
a164 1
      void setPeriodStageIdx (const int *);
@


1.67
log
@Stochastic Implosion
@
text
@d74 1
a74 2

      static int defPeriodStageIdx ();
@


1.66
log
@Stochastic Implosion
@
text
@d75 1
a75 1
      static int defPeriodStage ();
d159 1
a159 1
      void setObjectStage (WitNode * theNode, int theValue);
d161 1
a161 1
         // Sets objectStage_ (theNode) to theValue.
d163 1
a163 1
      void setPeriodStage (const int *);
d171 2
a172 2
      int    objectStage     (WitNode *);
      int    periodStage     (WitPeriod);
@


1.65
log
@Stochastic Implosion
@
text
@d169 6
a174 6
      int                   currentScenario ();
      double                probability     ();
      int                   objectStage     (WitNode *);
      const WitTVec <int> & periodStage     ();
      bool                  stochSolnMode   ();
      bool                  clearingSoln    ();
@


1.64
log
@Stochastic Implosion
@
text
@d156 2
a157 2
      void setCurScenarioIndex (int);
      void setProbability      (double);
d169 6
a174 6
      int                   curScenarioIndex ();
      double                probability      ();
      int                   objectStage      (WitNode *);
      const WitTVec <int> & periodStage      ();
      bool                  stochSolnMode    ();
      bool                  clearingSoln     ();
a193 4
      WitScenario * curScenario ();
         //
         // Returns the current Scenario;

@


1.63
log
@Stochastic Implosion
@
text
@d75 1
a75 1
      static int defPerStageIndex ();
d159 1
a159 1
      void setStageIndex (WitNode * theNode, int theValue);
d161 1
a161 1
         // Sets stageIndex_ (theNode) to theValue.
d163 1
a163 1
      void setPerStageIndex (const int *);
d171 2
a172 2
      int                   stageIndex       (WitNode *);
      const WitTVec <int> & perStageIndex    ();
@


1.62
log
@Stochastic Implosion
@
text
@d74 2
a75 1
      defaultValue (int  defStageIndex,      0)
d163 1
a163 1
      void setStageIndex (const int *);
d172 1
a172 1
      const WitTVec <int> & stageIndex       ();
@


1.61
log
@Stochastic Implosion
@
text
@d74 1
d162 2
d168 6
a173 5
      int    curScenarioIndex ();
      double probability      ();
      int    stageIndex       (WitNode *);
      bool   stochSolnMode    ();
      bool   clearingSoln     ();
@


1.60
log
@Stochastic Implosion
@
text
@d70 4
a73 3
      defaultValue (bool defStageByObject, false)
      defaultValue (int  defNScenarios,    1)
      defaultValue (bool defStochMode,     false)
d79 4
a82 3
      void setStageByObject (bool);
      void setNScenarios    (int);
      void setStochMode     (bool);
d88 1
d207 5
a215 1
         // At present, only stage-by-object mode is allowed.
@


1.59
log
@Stochastic Implosion
@
text
@a164 2
      int    stageIndex       (WitDemand *);
      int    stageIndex       (WitBillEntry *);
@


1.58
log
@Stochastic Implosion
@
text
@d96 17
a112 1
         // Takes action appropriate just before the value of an attribute is to
a113 2
         // The attribute is allowed to be set in stochastic mode.
         // theAttName is the name of the attribute.
@


1.57
log
@Stochastic Implosion
@
text
@a47 7
      void prepSetStochModeAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is allowed to be set in stochastic mode.
         // theAttName is the name of the attribute.

d94 7
@


1.56
log
@Stochastic Implosion
@
text
@d48 7
@


1.55
log
@Stochastic Implosion
@
text
@d94 5
@


1.54
log
@Stochastic Implosion
@
text
@a108 4
      int stageIndex (WitDelComp * theDelComp);
         //
         // Returns the stage index of theDelComp.

d139 2
@


1.53
log
@Stochastic Implosion
@
text
@d109 1
a109 1
      int stageIndex (WitBoundSet * theBoundSet);
d111 1
a111 1
         // Returns the stage index of theBoundSet.
@


1.52
log
@Stochastic Implosion
@
text
@d109 4
@


1.51
log
@Stochastic Implosion
@
text
@d128 1
a128 1
      void setStageNo (WitNode * theNode, int theValue);
d130 1
a130 1
         // Sets stageNo_ (theNode) to theValue.
d138 1
a138 1
      int    stageNo          (WitNode *);
@


1.50
log
@Stochastic Implosion
@
text
@d125 2
a126 2
      void setCurScenarioNo (int);
      void setProbability   (double);
d136 5
a140 5
      int    curScenarioNo ();
      double probability   ();
      int    stageNo       (WitNode *);
      bool   stochSolnMode ();
      bool   clearingSoln  ();
@


1.49
log
@Stochastic Implosion
@
text
@d117 1
a117 1
      void discardSoln ();
d119 1
a119 1
         // Discards the stochastic implosion solution.
@


1.48
log
@Stochastic Implosion
@
text
@d56 1
a56 1
      bool skipWriteData (const char * theAttName);
d59 1
a59 1
         // theAttName is to be skipped.
@


1.47
log
@Stochastic Implosion
@
text
@d140 1
@


1.46
log
@Stochastic Implosion
@
text
@a93 5
      bool isaScenSpecAtt (const char * theAttName);
         //
         // Returns true, iff theAttName is the name of a scenario-specific
         // attribute.

@


1.45
log
@Stochastic Implosion
@
text
@d78 3
a80 4
      void setStochImpAllowed (bool);
      void setStageByObject   (bool);
      void setNScenarios      (int);
      void setStochMode       (bool);
a85 1
      accessFunc (bool, stochImpAllowed)
a181 4
      bool stochImpAllowed_;
         //
         // Stochastic implosion is allowed, iff stochImpAllowed_ is true.

@


1.44
log
@Stochastic Implosion
@
text
@d96 1
a96 1
      bool isScenSpecAtt (const char * theAttName);
@


1.43
log
@Stochastic Implosion
@
text
@a60 5
      void prepWriteVector ();
         //
         // Takes action appropriate just before a vector to be written to an
         // input data file.

@


1.42
log
@Stochastic Implosion
@
text
@a133 19
      // Solution exporting functions.
      // 
      // Each of these functions sets the values of its reference arguments to
      // the portion of the implosion solution corresponding to the first
      // argument.
      // Valid only when the stochastic implosion subsystem is either exporting
      // or clearing the implosion solution.
      //------------------------------------------------------------------------

      void exportSoln (WitOptComp *,   double        &    objValueRef,
                                       double        & boundsValueRef);
      void exportSoln (WitPart *,      WitDblFlexVec &    scrapVolRef);
      void exportSoln (WitMaterial *,  WitDblFlexVec &    stockVolRef);
      void exportSoln (WitDemand *,    WitDblFlexVec &     shipVolRef,
                                       WitDblFlexVec &  cumShipVolRef);
      void exportSoln (WitOperation *, WitDblFlexVec &     execVolRef);
      void exportSoln (WitSubEntry *,  WitDblFlexVec &      subVolRef);

      //------------------------------------------------------------------------
a151 1
      bool   uploadingSoln ();
a174 10
      bool exportingSoln ();
         //
         // Returns true, iff myStochModeMgr ()->exportSoln () is currently
         // executing.

      bool clearingSoln ();
         //
         // Returns true, iff myStochModeMgr ()->clearSoln () is currently
         // executing.

@


1.41
log
@Stochastic Implosion
@
text
@d116 5
a133 14
      // Input data exporting functions.
      // 
      // Each of these functions sets the values of its reference arguments to
      // the portion of the stochastic input data corresponding to the first
      // argument.
      // Valid only when the stochastic implosion subsystem is exporting the
      // stochastic input data.
      //------------------------------------------------------------------------

      void exportInput (WitPart *,   WitDblFlexVec & supplyVolRef);
      void exportInput (WitDemand *, WitDblFlexVec & demandVolRef,
                                     WitDblFlexVec & cumDemandVolRef);

      //------------------------------------------------------------------------
a194 5
      bool exportingInput ();
         //
         // Returns true, iff myStochModeMgr ()->exportInput () is currently
         // executing.

@


1.40
log
@Stochastic Implosion
@
text
@d168 1
a168 1
      void setRecourseStage (WitNode * theNode, bool theValue);
d170 1
a170 1
         // Sets recourseStage_ (theNode) to theValue.
d178 1
a178 1
      bool   recourseStage (WitNode *);
@


1.39
log
@Stochastic Implosion
@
text
@d165 1
a165 1
      void setScenarioIndex (int);
d176 1
a176 1
      int    scenarioIndex ();
@


1.38
log
@Stochastic Implosion
@
text
@d166 1
a166 1
      void setScenarioProb  (double);
d177 1
a177 1
      double scenarioProb  ();
@


1.37
log
@Stochastic Implosion
@
text
@a83 1
      void setSingleStochLP   (bool);
a92 1
      accessFunc (bool, singleStochLP)
a236 7
      bool singleStochLP_;
         //
         // If true, the stochastic implosion problem will be solved by
         // formulating and solving a single LP problem.
         // If false, the stochastic implosion problem will be solved by
         // formulating and solving a series of LP problems.

@


1.36
log
@Stochastic Implosion
@
text
@d141 2
a142 1
      void exportInput (WitDemand *, WitDblFlexVec & demandVolRef);
@


1.35
log
@Stochastic Implosion
@
text
@d220 6
@


1.34
log
@Stochastic Implosion
@
text
@d181 1
@


1.33
log
@Stochastic Implosion
@
text
@d106 1
a106 1
         // stochastic attribute.
@


1.32
log
@Stochastic Implosion
@
text
@a70 5
      void display (WitNode * theNode);
         //
         // Displays the stochastic input and preprocessing data for theNode,
         // if needed.

@


1.31
log
@Stochastic Implosion
@
text
@d66 1
a66 1
      void display ();
d68 2
a69 1
         // Displays the input and preprocessing data for this StochImpMgr.
d123 4
@


1.30
log
@Stochastic Implosion
@
text
@d107 1
a107 1
      bool attIsScenSpec (const char * theAttName);
d112 1
a112 1
      bool attIsStochModeOK (const char * theAttName);
d117 1
a117 1
      bool attIsStochSolnModeOK (const char * theAttName);
a121 5
      bool isStochSolnModeAttName (const char * theAttName);
         //
         // Returns true, iff theAttName is the name of an input attribute that
         // can be set in stochastic solution mode.

@


1.29
log
@Stochastic Implosion
@
text
@d107 1
a107 1
      bool isSsiAttName (const char * theAttName);
d109 2
a110 2
         // Returns true, iff theAttName is the name of a Scenario-specific
         // input attribute.
d112 1
a112 1
      bool isStochModeAttName (const char * theAttName);
d114 7
a120 2
         // Returns true, iff theAttName is the name of an input attribute that
         // can be set in stochastic mode.
@


1.28
log
@Stochastic Implosion.
@
text
@d112 10
@


1.27
log
@Stochastic Implosion
@
text
@d56 1
a56 1
      bool skipWriteData (const char * theAttrName);
d59 1
a59 1
         // theAttrName is to be skipped.
d107 1
a107 1
      bool isSsiAttrName (const char * theName);
d109 2
a110 2
         // Returns true, iff theName is the name of a Scenario-specific input
         // attribute.
@


1.26
log
@Stochastic Implosion
@
text
@d56 1
a56 1
      void prepWriteStochAttr ();
d58 2
a59 8
         // Takes action appropriate just before a stochastic attribute is to be
         // written to the input data file from the original (non-Scenario)
         // object.

      bool skipVectorWrite ();
         //
         // Returns true, iff writing the current vector to the input data file
         // is to be skipped.
a245 5

      bool toWriteStochAttr_;
         //
         // True, iff a stochastic attribute is about to be written from the
         // original (non-Scenario) object.
@


1.25
log
@Stochastic Implosion
@
text
@d113 5
@


1.24
log
@Stochastic Implosion
@
text
@a80 12
      void prepStochModeAttr ();
         //
         // Takes action appropriate just before the value of a stochastic
         // attribute is to be set.
         // Takes action appropriate just before setting the value of an
         // attribute that is allowed to be set in stochastic mode.

      void prepSetAttr ();
         //
         // Takes action appropriate just before the value of any non-msg
         // attribute is to be set.

a251 5

      bool toSetStochModeAttr_;
         //
         // When an attribute is about to be set, toSetStochModeAttr_ is true,
         // iff it is allowable to set the attribute in stochastic mode.
@


1.23
log
@Stochastic Implosion
@
text
@d143 1
@


1.22
log
@Stochastic Implosion
@
text
@a25 2
//
// Implemented in StochImp.C.
@


1.21
log
@Stochastic Implosion
@
text
@d157 8
a164 8
      void exportSoln (WitPart *,        WitDblFlexVec &    scrapVolRef);
      void exportSoln (WitMaterial *,    WitDblFlexVec &    stockVolRef);
      void exportSoln (WitDemand *,      WitDblFlexVec &     shipVolRef,
                                         WitDblFlexVec &  cumShipVolRef);
      void exportSoln (WitOperation *,   WitDblFlexVec &     execVolRef);
      void exportSoln (WitSubEntry *,    WitDblFlexVec &      subVolRef);
      void exportSoln (WitOptImploder *, double        &    objValueRef,
                                         double        & boundsValueRef);
@


1.20
log
@Stochastic Implosion
@
text
@d145 1
a145 1
      void exportInput (WitDemand *, WitDblFlexVec & demandVolArg);
d157 8
a164 8
      void exportSoln (WitPart *,        WitDblFlexVec &    scrapVolArg);
      void exportSoln (WitMaterial *,    WitDblFlexVec &    stockVolArg);
      void exportSoln (WitDemand *,      WitDblFlexVec &     shipVolArg,
                                         WitDblFlexVec &  cumShipVolArg);
      void exportSoln (WitOperation *,   WitDblFlexVec &     execVolArg);
      void exportSoln (WitSubEntry *,    WitDblFlexVec &      subVolArg);
      void exportSoln (WitOptImploder *, double        &    objValueArg,
                                         double        & boundsValueArg);
@


1.19
log
@Stochastic Implosion
@
text
@d136 29
a164 15
      // Reference receiving functions.
      // Each of these functions stores its arguments on the assumption that
      // they are references to the similarly named data members of the
      // Component for which passStochRefs () is currently being called.
      //------------------------------------------------------------------------

      void receivePartRefs      (WitDblFlexVec &    scrapVolArg);
      void receiveMaterialRefs  (WitDblFlexVec &    stockVolArg);
      void receiveDemandRefs    (WitDblFlexVec &   demandVolArg,
                                 WitDblFlexVec &     shipVolArg,
                                 WitDblFlexVec &  cumShipVolArg);
      void receiveOperationRefs (WitDblFlexVec &     execVolArg);
      void receiveSubEntryRefs  (WitDblFlexVec &      subVolArg);
      void receiveOptImpData    (double        &    objValueArg,
                                 double        & boundsValueArg);
d204 19
@


1.18
log
@Stochastic Implosion
@
text
@d108 1
d118 1
d202 7
@


1.17
log
@Stochastic Implosion
@
text
@d134 15
a148 28
      // Data receiving functions.
      // Each of these functions stores its reference arguments on the
      // assumption that they are references to the similarly named data members
      // of the Component argument.
      // Valid only when myStochModeMgr ()->myStochAttMgr () is calling
      // Component::passStochData ().
      //------------------------------------------------------------------------

      void receivePartData (
            WitDblFlexVec & scrapVolArg);

      void receiveMaterialData (
            WitDblFlexVec & stockVolArg);

      void receiveDemandData (
            WitDblFlexVec & demandVolArg,
            WitDblFlexVec & shipVolArg,
            WitDblFlexVec & cumShipVolArg);

      void receiveOperationData (
            WitDblFlexVec & execVolArg);

      void receiveSubEntryData (
            WitDblFlexVec & subVolArg);

      void receiveOptImpData (
            double & objValueArg,
            double & boundsValueArg);
@


1.16
log
@Stochastic Implosion
@
text
@d159 4
a181 2
      double objValue      ();
      double boundsValue   ();
@


1.15
log
@Stochastic Implosion
@
text
@d138 1
a138 1
      // Valid only when myStochAttMgr () is calling
a199 3
      accessNonNull (WitStageMgr *,     myStageMgr)
      accessNonNull (WitScenMgr *,      myScenMgr)
      accessNonNull (WitStochAttMgr *,  myStochAttMgr)
a229 15
      WitStageMgr * myStageMgr_;
         //
         // The StageMgr for this StochImpMgr during stochastic mode;
         // otherwise NULL.

      WitScenMgr * myScenMgr_;
         //
         // The ScenMgr for this StochImpMgr during stochastic mode;
         // otherwise NULL.

      WitStochAttMgr * myStochAttMgr_;
         //
         // The StochAttMgr for this StochImpMgr during stochastic mode;
         // otherwise NULL.

@


1.14
log
@Stochastic Implosion
@
text
@d134 26
a180 8
      const WitTVec <double> & demandVol  (WitDemand    *);
      const WitTVec <double> & scrapVol   (WitPart      *);
      const WitTVec <double> & stockVol   (WitMaterial  *);
      const WitTVec <double> & shipVol    (WitDemand    *);
      const WitTVec <double> & cumShipVol (WitDemand    *);
      const WitTVec <double> & execVol    (WitOperation *);
      const WitTVec <double> & subVol     (WitSubEntry  *);

d202 1
d235 1
a235 1
         // The StageMgr for this StochImpMgr during stochastic implosion mode;
d240 6
a245 1
         // The ScenMgr for this StochImpMgr during stochastic implosion mode;
@


1.13
log
@Stochastic Implosion
@
text
@d181 1
a181 1
      accessNonNull (WitStochDataMgr *, myStochDataMgr)
d209 1
a209 1
      WitStochDataMgr * myStochDataMgr_;
d211 2
a212 2
         // The StochDataMgr owned by this StochImpMgr during stochastic
         // implosion mode; otherwise NULL.
@


1.12
log
@Stochastic Implosion
@
text
@d83 1
a83 1
      void prepStochDataModeAttr ();
d88 1
a88 1
         // attribute that is allowed to be set in stochastic data mode.
d101 1
a101 1
      defaultValue (bool defStochDataMode, false)
d110 1
a110 1
      void setStochDataMode   (bool);
d119 1
a119 1
      accessFunc (bool, stochDataMode)
d122 1
a122 1
      // The following functions are only valid in stochastic data mode.
d134 1
a134 1
      // "Set" functions for stochastic data mode.
d145 1
a145 1
      // Data access functions for stochastic data mode.
d205 1
a205 1
      bool stochDataMode_;
d207 1
a207 1
         // True, iff the WitRun is currently in stochastic data mode.
d232 1
a232 1
         // iff it is allowable to set the attribute in stochastic data mode.
@


1.11
log
@Stochastic Implosion
@
text
@d182 2
d214 10
@


1.10
log
@Stochastic Implosion
@
text
@d27 1
a27 4
// Class Hierarchy:
//
// ProbAssoc
//    StochImpMgr
@


1.9
log
@Stochastic Implosion
@
text
@d141 1
a141 1
      void setProbability   (double);
d152 1
a152 1
      double probability   ();
@


1.8
log
@Stochastic Implosion
@
text
@d143 4
@


1.7
log
@Stochastic Implosion
@
text
@d149 1
a149 1
      bool   stochRecourse (WitNode *);
@


1.6
log
@Stochastic Implosion.
@
text
@d81 5
d149 1
@


1.5
log
@Stochastic Implosion
@
text
@a134 1
      void setSglStochLP    (bool);
a141 1
      bool   sglStochLP    ();
@


1.4
log
@Stochastic Implosion
@
text
@d135 1
d143 1
@


1.3
log
@Stochastic Implosion
@
text
@d145 2
@


1.2
log
@Stochastic Implosion
@
text
@d146 8
@


1.1
log
@Stochastic Implosion
@
text
@d81 1
a81 1
      void prepSetStochAttr ();
d85 2
d200 1
a200 1
      bool toSetStochAttr_;
d202 2
a203 2
         // When an attribute is about to be set, toSetStochAttr_ is true, iff
         // the attribute is stochastic.
@

