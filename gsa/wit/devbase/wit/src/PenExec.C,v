head	1.17;
access;
symbols
	sce_5_01_20080919:1.13
	latest_sce_4_20_20060523:1.7.0.2
	sce_4_20_20060523:1.7
	latest_sce4_20_OSL:1.6.0.2
	sce_4_20_OSL:1.6
	sce_410_withVa:1.4;
locks; strict;
comment	@ * @;


1.17
date	2011.09.28.23.49.52;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.09.24.00.28.14;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.08.30.20.17.53;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.29.23.25.14;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.12.16.30.12;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.01.21.28.05;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.10.15.57.23;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.25.21.11.58;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.26.21.14.30;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.26.20.40.10;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.02.17.34.07;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.03.16.48.13;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.05.22.24.09;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.28.20.14.37;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.01.22.39.21;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.31.23.59.30;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.19.23.50.58;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "PenExec.C"
//
// Contains the implementation of the following classes:
//
//    PenExMgr
//    ExpRest
//------------------------------------------------------------------------------

#include <PenExMgr.h>
#include <ExpRest.h>
#include <RtAn.h>
#include <HeurAtor.h>
#include <Selector.h>
#include <DataRepos.h>
#include <Material.h>
#include <BopEntry.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class PenExMgr.
//------------------------------------------------------------------------------

WitPenExMgr::WitPenExMgr (WitSelector * theSelector):

      WitProbAssoc  (theSelector),
      myExpRest_    (NULL),
      myRtAnalyzer_ (NULL)
   {
   myMsgFac () ("penExecMsg");

   myExpRest_    = new WitExpRest    (theSelector->myHeurAtor ());
   myRtAnalyzer_ = new WitRtAnalyzer (theSelector, myExpRest_);
   }

//------------------------------------------------------------------------------

WitPenExMgr::~WitPenExMgr ()
   {
   delete myRtAnalyzer_;
   delete myExpRest_;
   }

//------------------------------------------------------------------------------

void WitPenExMgr::modifyRouting ()
   {
   myRtAnalyzer_->modifyRouting ();
   }

//------------------------------------------------------------------------------

void WitPenExMgr::findHypoModPts (WitObjStack <WitSelPt> & theModPts)
   {
   myRtAnalyzer_->findHypoModPts (theModPts);
   }

//------------------------------------------------------------------------------

void WitPenExMgr::recCommitVol (double commitVol)
   {
   myRtAnalyzer_->recCommitVol (commitVol);
   }

//------------------------------------------------------------------------------

void WitPenExMgr::placeReqs (
      WitPart * srcPart,
      WitPeriod srcPer,
      WitPart * reqPart,
      WitPeriod reqPer)
   {
   myExpRest_->placeReqs (srcPart, srcPer, reqPart, reqPer);
   }

//------------------------------------------------------------------------------

void WitPenExMgr::recExpBeyondNet (
      WitPart * thePart, 
      WitPeriod thePer, 
      bool      netForConsEnt)
   {
   myExpRest_->recExpBeyondNet (thePart, thePer, netForConsEnt);
   }

//------------------------------------------------------------------------------

void WitPenExMgr::postExpBomEnt ()
   {
   myExpRest_->postExpBomEnt ();
   }

//------------------------------------------------------------------------------

bool WitPenExMgr::restExpAllowed (WitBopEntry * theBopEnt, WitPeriod fillPer)
   {
   return myExpRest_->restExpAllowed (theBopEnt, fillPer);
   }

//------------------------------------------------------------------------------

void WitPenExMgr::recordFundShortage ()
   {
   myExpRest_->recordFundShortage ();
   }

//------------------------------------------------------------------------------

void WitPenExMgr::reqPsSupRep (WitPart * thePart, WitPeriod thePer)
   {
   myExpRest_->reqPsSupRep (thePart, thePer);
   }

//------------------------------------------------------------------------------

void WitPenExMgr::postTempCommit (bool success)
   {
   myExpRest_->postTempCommit (success);
   }

//------------------------------------------------------------------------------

void WitPenExMgr::updatePsSup ()
   {
   myExpRest_->updatePsSup ();
   }

//------------------------------------------------------------------------------

void WitPenExMgr::replenishPsSups ()
   {
   myExpRest_->replenishPsSups ();
   }

//------------------------------------------------------------------------------

void WitPenExMgr::print ()
   {
   myExpRest_->print ();
   }

//------------------------------------------------------------------------------

bool WitPenExMgr::failRestShortOnly ()
   {
   return myExpRest_->failRestShortOnly ();
   }

//------------------------------------------------------------------------------
// Implementation of class ExpRest.
//------------------------------------------------------------------------------

WitExpRest::WitExpRest (WitHeurAtor * theHeurAtor):

      WitProbAssoc       (theHeurAtor),
      myHeurAtor_        (theHeurAtor),
      hasPosPenalty_     (myProblem (), false),
      hasPseudoSup_      (),
      curExhaustReqs_    (myProblem ()),
      failExhaustReqs_   (myProblem ()),
      curFundShort_      (false),
      failRestShortOnly_ (false),
      repReqs_           (myProblem ()),
      unanReqs_          (myProblem (), false),
      unanReqsPairs_     (myProblem ()),
      unanByConsEntNet_  (false),
      tempMode_          (false),
      psSupRepos_        (NULL)
   {
   WitPart * thePart;

   findPosPenalties ();

   hasPseudoSup_.allocate1D (myProblem ());

   psSupRepos_ = new WitDataRepos (myProblem ());
   
   forEachPart (thePart, myProblem ())
      init (thePart);
   }

//------------------------------------------------------------------------------

WitExpRest::~WitExpRest ()
   {
   delete psSupRepos_;
   }

//------------------------------------------------------------------------------

void WitExpRest::placeReqs (
      WitPart * srcPart,
      WitPeriod srcPer,
      WitPart * reqPart,
      WitPeriod reqPer)
   {
   if (unanReqs_ (srcPart)[srcPer] or unanByConsEntNet_)
      setUnanReqs (reqPart, reqPer);
   }

//------------------------------------------------------------------------------

void WitExpRest::recExpBeyondNet (
      WitPart *  thePart, 
      WitPeriod  thePer, 
      bool       netForConsEnt)
   {
   if (not hasPseudoSup (thePart, thePer))
      return;

   curExhaustReqs_.push (thePart, thePer);

   if (netForConsEnt)
      unanByConsEntNet_ = true;
   else
      setUnanReqs (thePart, thePer);
   }

//------------------------------------------------------------------------------

void WitExpRest::postExpBomEnt ()
   {
   unanByConsEntNet_ = false;
   }

//------------------------------------------------------------------------------

bool WitExpRest::restExpAllowed (
      WitBopEntry * theBopEnt, 
      WitPeriod     fillPer)
   {
   if (hasPosPenalty_ (theBopEnt->myOperation ()))
      if (unanReqs_ (theBopEnt->myPart ())[fillPer])
         return false;

   return true;
   }

//------------------------------------------------------------------------------

void WitExpRest::recordFundShortage ()
   {
   stronglyAssert (not curFundShort_);

   curFundShort_ = true;
   }

//------------------------------------------------------------------------------

void WitExpRest::reqPsSupRep (WitPart * thePart, WitPeriod thePer)
   {
   repReqs_.push (thePart, thePer);
   }

//------------------------------------------------------------------------------

void WitExpRest::postTempCommit (bool success)
   {
   WitPart * thePart;
   WitPeriod thePer;

   if (success)
      curExhaustReqs_.clear ();
   else
      {
      failExhaustReqs_.clear ();

      failExhaustReqs_.takeContentsFrom (curExhaustReqs_);

      failRestShortOnly_ = not curFundShort_;

      while (unanReqsPairs_.pop (thePart, thePer))
         unanReqs_ (thePart)[thePer] = false;
      }

   curFundShort_ = false;
   }

//------------------------------------------------------------------------------

void WitExpRest::updatePsSup ()
   {
   WitPairStItr <WitPart, WitPeriod> theItr;
   WitPart *                         thePart;
   WitPeriod                         fillPer;
   WitMaterial *                     theMat;

   failExhaustReqs_.attachItr (theItr);

   while (theItr.advance (thePart, fillPer))
      {
      if (not hasPseudoSup_ (thePart)[fillPer])
         continue;

      exhaustPsSup (thePart, fillPer);

      if (selPrintLevelAt (3))
         printExhRep (thePart, fillPer, true);

      theMat = thePart->thisMat ();

      if (theMat != NULL)
         exhaustOtherPers (theMat, fillPer);
      }

   if (not tempMode_)
      {
      failExhaustReqs_.clear ();

      failRestShortOnly_ = false;
      }
   }

//------------------------------------------------------------------------------

void WitExpRest::startTempMode ()
   {
   stronglyAssert (not tempMode_);

   tempMode_ = true;
   }

//------------------------------------------------------------------------------

void WitExpRest::finishTempMode ()
   {
   stronglyAssert (tempMode_);

   psSupRepos_->restore ();

   tempMode_ = false;
   }

//------------------------------------------------------------------------------

void WitExpRest::replenishPsSups ()
   {
   WitPart * thePart;
   WitPeriod reqPer;
   WitPeriod thePer;

   while (repReqs_.pop (thePart, reqPer))
      {
      if (not myHeurAtor_->incAvailPos (thePart, reqPer))
         continue;

      if (not hasPseudoSup_ (thePart).isAllocated ())
         hasPseudoSup_ (thePart).allocate (myProblem (), false);

      for (thePer = reqPer; thePer < nPeriods (); thePer ++)
         {
         if (hasPseudoSup_ (thePart)[thePer])
            break;

         hasPseudoSup_ (thePart)[thePer] = true;

         if (selPrintLevelAt (3))
            printExhRep (thePart, thePer, (thePer == reqPer));

         if (not thePart->canStock (thePer))
            break;
         }
      }
   }

//------------------------------------------------------------------------------

void WitExpRest::print ()
   {
   WitPart * thePart;
   WitPeriod thePer;

   fprintf (msgFile (), 
      "\n"
      "Parts and Periods with Pseudo-Supply:\n\n");

   forEachPart (thePart, myProblem ())
      if (hasPseudoSup_ (thePart).isAllocated ())
         forEachPeriod (thePer, myProblem ())
            if (hasPseudoSup_ (thePart)[thePer])
               fprintf (msgFile (), 
                  "   Part %s, Per %d\n", 
                  thePart->partName ().myCstring (),
                  thePer);
   }

//------------------------------------------------------------------------------

void WitExpRest::exhaustOtherPers (WitMaterial * theMat, WitPeriod fillPer)
   {
   WitPeriod thePer;

   for (thePer = fillPer - 1; thePer >= 0; thePer --)
      {
      if (theMat->mandEC ()[thePer])
         break;

      if (not hasPseudoSup_ (theMat)[thePer])
         break;

      exhaustPsSup (theMat, thePer);

      if (selPrintLevelAt (3))
         printExhRep (theMat, thePer, false);
      }

   for (thePer = fillPer + 1; thePer < nPeriods (); thePer ++)
      {
      if (theMat->mandEC ()[thePer - 1])
         break;

      if (theMat->supplyVol ()[thePer] > NET_TOL)
         break;

      exhaustPsSup (theMat, thePer);

      if (selPrintLevelAt (3))
         printExhRep (theMat, thePer, false);
      }
   }

//------------------------------------------------------------------------------

void WitExpRest::exhaustPsSup (WitPart * thePart, WitPeriod thePer)
   {
   if (tempMode_)
      psSupRepos_->saveVal (hasPseudoSup_ (thePart)[thePer]);

   hasPseudoSup_ (thePart)[thePer] = false;
   }

//------------------------------------------------------------------------------

void WitExpRest::setUnanReqs (WitPart * thePart, WitPeriod thePer)
   {
   if (unanReqs_ (thePart)[thePer])
      return;

   unanReqs_ (thePart)[thePer] = true;

   unanReqsPairs_.push (thePart, thePer);
   }

//------------------------------------------------------------------------------

void WitExpRest::findPosPenalties ()
   {
   WitOperation * theOpn;
   WitBomEntry *  theBomEnt;
   WitSubEntry *  theSub;

   forEachOperation (theOpn, myProblem ())
      if (theOpn->execPenalty () > 0.0)
         hasPosPenalty_ (theOpn) = true;

   forEachBomEntry (theBomEnt, myProblem ())
      if (theBomEnt->execPenalty () > 0.0)
         hasPosPenalty_ (theBomEnt->myOperation ()) = true;

   forEachSubEntry (theSub, myProblem ())
      if (theSub->execPenalty () > 0.0)
         hasPosPenalty_ (theSub->myOperation ()) = true;
   }

//------------------------------------------------------------------------------
// init
//
// carryOver: true, iff supply from an earlier period carries over to the 
//            current period.
//------------------------------------------------------------------------------

void WitExpRest::init (WitPart * thePart)
   {
   WitPeriod fillPer;
   bool      carryOver;

   carryOver = false;

   forEachPeriod (fillPer, myProblem ())
      {
      if (not carryOver)
         if (thePart->supplyVol ()[fillPer] <= NET_TOL)
            continue;

      if (not hasPseudoSup_ (thePart).isAllocated ())
         hasPseudoSup_ (thePart).allocate (myProblem (), false);

      hasPseudoSup_ (thePart)[fillPer] = true;

      carryOver = thePart->canStock (fillPer);
      }
   }

//------------------------------------------------------------------------------

void WitExpRest::printExhRep (
      WitPart * thePart, 
      WitPeriod fillPer, 
      bool      firstPer)
   {
   const char * changeText;

   if (tempMode_)
      return;

   changeText = 
      hasPseudoSup (thePart, fillPer)?
         "replenished":
         "exhausted";

   if (firstPer)
      fprintf (msgFile (), "\n");

   fprintf (msgFile (), 
      "Pseudo-supply %s for part %s in period %d.\n",
      changeText,
      thePart->partName ().myCstring (),
      fillPer);
   }
@


1.16
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.15
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d35 9
a43 9
WitProbAssoc  (theSelector),
myExpRest_    (NULL),
myRtAnalyzer_ (NULL)
{
myMsgFac () ("penExecMsg");

myExpRest_    = new WitExpRest    (theSelector->myHeurAtor ());
myRtAnalyzer_ = new WitRtAnalyzer (theSelector, myExpRest_);
}
d48 4
a51 4
{
delete myRtAnalyzer_;
delete myExpRest_;
}
d56 3
a58 3
{
myRtAnalyzer_->modifyRouting ();
}
d63 3
a65 3
{
myRtAnalyzer_->findHypoModPts (theModPts);
}
d70 3
a72 3
{
myRtAnalyzer_->recCommitVol (commitVol);
}
d77 7
a83 7
WitPart * srcPart,
WitPeriod srcPer,
WitPart * reqPart,
WitPeriod reqPer)
{
myExpRest_->placeReqs (srcPart, srcPer, reqPart, reqPer);
}
d88 6
a93 6
WitPart * thePart,
WitPeriod thePer,
bool      netForConsEnt)
{
myExpRest_->recExpBeyondNet (thePart, thePer, netForConsEnt);
}
d98 3
a100 3
{
myExpRest_->postExpBomEnt ();
}
d105 3
a107 3
{
return myExpRest_->restExpAllowed (theBopEnt, fillPer);
}
d112 3
a114 3
{
myExpRest_->recordFundShortage ();
}
d119 3
a121 3
{
myExpRest_->reqPsSupRep (thePart, thePer);
}
d126 3
a128 3
{
myExpRest_->postTempCommit (success);
}
d133 3
a135 3
{
myExpRest_->updatePsSup ();
}
d140 3
a142 3
{
myExpRest_->replenishPsSups ();
}
d147 3
a149 3
{
myExpRest_->print ();
}
d154 3
a156 3
{
return myExpRest_->failRestShortOnly ();
}
d164 26
a189 26
WitProbAssoc       (theHeurAtor),
myHeurAtor_        (theHeurAtor),
hasPosPenalty_     (myProblem (), false),
hasPseudoSup_      (),
curExhaustReqs_    (myProblem ()),
failExhaustReqs_   (myProblem ()),
curFundShort_      (false),
failRestShortOnly_ (false),
repReqs_           (myProblem ()),
unanReqs_          (myProblem (), false),
unanReqsPairs_     (myProblem ()),
unanByConsEntNet_  (false),
tempMode_          (false),
psSupRepos_        (NULL)
{
WitPart * thePart;

findPosPenalties ();

hasPseudoSup_.allocate1D (myProblem ());

psSupRepos_ = new WitDataRepos (myProblem ());

forEachPart (thePart, myProblem ())
init (thePart);
}
d194 3
a196 3
{
delete psSupRepos_;
}
d201 8
a208 8
WitPart * srcPart,
WitPeriod srcPer,
WitPart * reqPart,
WitPeriod reqPer)
{
if (unanReqs_ (srcPart)[srcPer] or unanByConsEntNet_)
setUnanReqs (reqPart, reqPer);
}
d213 14
a226 14
WitPart *  thePart,
WitPeriod  thePer,
bool       netForConsEnt)
{
if (not hasPseudoSup (thePart, thePer))
return;

curExhaustReqs_.push (thePart, thePer);

if (netForConsEnt)
unanByConsEntNet_ = true;
else
setUnanReqs (thePart, thePer);
}
d231 3
a233 3
{
unanByConsEntNet_ = false;
}
d238 6
a243 6
WitBopEntry * theBopEnt,
WitPeriod     fillPer)
{
if (hasPosPenalty_ (theBopEnt->myOperation ()))
if (unanReqs_ (theBopEnt->myPart ())[fillPer])
return false;
d245 2
a246 2
return true;
}
d251 2
a252 2
{
stronglyAssert (not curFundShort_);
d254 2
a255 2
curFundShort_ = true;
}
d260 3
a262 3
{
repReqs_.push (thePart, thePer);
}
d267 17
a283 17
{
WitPart * thePart;
WitPeriod thePer;

if (success)
curExhaustReqs_.clear ();
else
{
failExhaustReqs_.clear ();

failExhaustReqs_.takeContentsFrom (curExhaustReqs_);

failRestShortOnly_ = not curFundShort_;

while (unanReqsPairs_.pop (thePart, thePer))
unanReqs_ (thePart)[thePer] = false;
}
d285 2
a286 2
curFundShort_ = false;
}
d291 5
a295 5
{
WitPairStItr <WitPart, WitPeriod> theItr;
WitPart *                         thePart;
WitPeriod                         fillPer;
WitMaterial *                     theMat;
d297 1
a297 1
failExhaustReqs_.attachItr (theItr);
d299 4
a302 4
while (theItr.advance (thePart, fillPer))
{
if (not hasPseudoSup_ (thePart)[fillPer])
continue;
d304 1
a304 1
exhaustPsSup (thePart, fillPer);
d306 2
a307 2
if (selPrintLevelAt (3))
printExhRep (thePart, fillPer, true);
d309 1
a309 1
theMat = thePart->thisMat ();
d311 3
a313 3
if (theMat != NULL)
exhaustOtherPers (theMat, fillPer);
}
d315 3
a317 3
if (not tempMode_)
{
failExhaustReqs_.clear ();
d319 3
a321 3
failRestShortOnly_ = false;
}
}
d326 2
a327 2
{
stronglyAssert (not tempMode_);
d329 2
a330 2
tempMode_ = true;
}
d335 2
a336 2
{
stronglyAssert (tempMode_);
d338 1
a338 1
psSupRepos_->restore ();
d340 2
a341 2
tempMode_ = false;
}
d346 28
a373 28
{
WitPart * thePart;
WitPeriod reqPer;
WitPeriod thePer;

while (repReqs_.pop (thePart, reqPer))
{
if (not myHeurAtor_->incAvailPos (thePart, reqPer))
continue;

if (not hasPseudoSup_ (thePart).isAllocated ())
hasPseudoSup_ (thePart).allocate (myProblem (), false);

for (thePer = reqPer; thePer < nPeriods (); thePer ++)
{
if (hasPseudoSup_ (thePart)[thePer])
break;

hasPseudoSup_ (thePart)[thePer] = true;

if (selPrintLevelAt (3))
printExhRep (thePart, thePer, (thePer == reqPer));

if (not thePart->canStock (thePer))
break;
}
}
}
d378 17
a394 17
{
WitPart * thePart;
WitPeriod thePer;

fprintf (msgFile (),
"\n"
"Parts and Periods with Pseudo-Supply:\n\n");

forEachPart (thePart, myProblem ())
if (hasPseudoSup_ (thePart).isAllocated ())
forEachPeriod (thePer, myProblem ())
if (hasPseudoSup_ (thePart)[thePer])
fprintf (msgFile (),
"   Part %s, Per %d\n",
thePart->partName ().myCstring (),
thePer);
}
d399 2
a400 2
{
WitPeriod thePer;
d402 4
a405 4
for (thePer = fillPer - 1; thePer >= 0; thePer --)
{
if (theMat->mandEC ()[thePer])
break;
d407 2
a408 2
if (not hasPseudoSup_ (theMat)[thePer])
break;
d410 1
a410 1
exhaustPsSup (theMat, thePer);
d412 3
a414 3
if (selPrintLevelAt (3))
printExhRep (theMat, thePer, false);
}
d416 4
a419 4
for (thePer = fillPer + 1; thePer < nPeriods (); thePer ++)
{
if (theMat->mandEC ()[thePer - 1])
break;
d421 2
a422 2
if (theMat->supplyVol ()[thePer] > NET_TOL)
break;
d424 1
a424 1
exhaustPsSup (theMat, thePer);
d426 4
a429 4
if (selPrintLevelAt (3))
printExhRep (theMat, thePer, false);
}
}
d434 3
a436 3
{
if (tempMode_)
psSupRepos_->saveVal (hasPseudoSup_ (thePart)[thePer]);
d438 2
a439 2
hasPseudoSup_ (thePart)[thePer] = false;
}
d444 3
a446 3
{
if (unanReqs_ (thePart)[thePer])
return;
d448 1
a448 1
unanReqs_ (thePart)[thePer] = true;
d450 2
a451 2
unanReqsPairs_.push (thePart, thePer);
}
d456 17
a472 17
{
WitOperation * theOpn;
WitBomEntry *  theBomEnt;
WitSubEntry *  theSub;

forEachOperation (theOpn, myProblem ())
if (theOpn->execPenalty () > 0.0)
hasPosPenalty_ (theOpn) = true;

forEachBomEntry (theBomEnt, myProblem ())
if (theBomEnt->execPenalty () > 0.0)
hasPosPenalty_ (theBomEnt->myOperation ()) = true;

forEachSubEntry (theSub, myProblem ())
if (theSub->execPenalty () > 0.0)
hasPosPenalty_ (theSub->myOperation ()) = true;
}
d477 1
a477 1
// carryOver: true, iff supply from an earlier period carries over to the
d482 20
a501 20
{
WitPeriod fillPer;
bool      carryOver;

carryOver = false;

forEachPeriod (fillPer, myProblem ())
{
if (not carryOver)
if (thePart->supplyVol ()[fillPer] <= NET_TOL)
continue;

if (not hasPseudoSup_ (thePart).isAllocated ())
hasPseudoSup_ (thePart).allocate (myProblem (), false);

hasPseudoSup_ (thePart)[fillPer] = true;

carryOver = thePart->canStock (fillPer);
}
}
d506 23
a528 23
WitPart * thePart,
WitPeriod fillPer,
bool      firstPer)
{
const char * changeText;

if (tempMode_)
return;

changeText =
hasPseudoSup (thePart, fillPer)?
"replenished":
"exhausted";

if (firstPer)
fprintf (msgFile (), "\n");

fprintf (msgFile (),
"Pseudo-supply %s for part %s in period %d.\n",
changeText,
thePart->partName ().myCstring (),
fillPer);
}
@


1.14
log
@Selection reuse.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d35 9
a43 9
      WitProbAssoc  (theSelector),
      myExpRest_    (NULL),
      myRtAnalyzer_ (NULL)
   {
   myMsgFac () ("penExecMsg");

   myExpRest_    = new WitExpRest    (theSelector->myHeurAtor ());
   myRtAnalyzer_ = new WitRtAnalyzer (theSelector, myExpRest_);
   }
d48 4
a51 4
   {
   delete myRtAnalyzer_;
   delete myExpRest_;
   }
d56 3
a58 3
   {
   myRtAnalyzer_->modifyRouting ();
   }
d63 3
a65 3
   {
   myRtAnalyzer_->findHypoModPts (theModPts);
   }
d70 3
a72 3
   {
   myRtAnalyzer_->recCommitVol (commitVol);
   }
d77 7
a83 7
      WitPart * srcPart,
      WitPeriod srcPer,
      WitPart * reqPart,
      WitPeriod reqPer)
   {
   myExpRest_->placeReqs (srcPart, srcPer, reqPart, reqPer);
   }
d88 6
a93 6
      WitPart * thePart, 
      WitPeriod thePer, 
      bool      netForConsEnt)
   {
   myExpRest_->recExpBeyondNet (thePart, thePer, netForConsEnt);
   }
d98 3
a100 3
   {
   myExpRest_->postExpBomEnt ();
   }
d105 3
a107 3
   {
   return myExpRest_->restExpAllowed (theBopEnt, fillPer);
   }
d112 3
a114 3
   {
   myExpRest_->recordFundShortage ();
   }
d119 3
a121 3
   {
   myExpRest_->reqPsSupRep (thePart, thePer);
   }
d126 3
a128 3
   {
   myExpRest_->postTempCommit (success);
   }
d133 3
a135 3
   {
   myExpRest_->updatePsSup ();
   }
d140 3
a142 3
   {
   myExpRest_->replenishPsSups ();
   }
d147 3
a149 3
   {
   myExpRest_->print ();
   }
d154 3
a156 3
   {
   return myExpRest_->failRestShortOnly ();
   }
d164 26
a189 26
      WitProbAssoc       (theHeurAtor),
      myHeurAtor_        (theHeurAtor),
      hasPosPenalty_     (myProblem (), false),
      hasPseudoSup_      (),
      curExhaustReqs_    (myProblem ()),
      failExhaustReqs_   (myProblem ()),
      curFundShort_      (false),
      failRestShortOnly_ (false),
      repReqs_           (myProblem ()),
      unanReqs_          (myProblem (), false),
      unanReqsPairs_     (myProblem ()),
      unanByConsEntNet_  (false),
      tempMode_          (false),
      psSupRepos_        (NULL)
   {
   WitPart * thePart;

   findPosPenalties ();

   hasPseudoSup_.allocate1D (myProblem ());

   psSupRepos_ = new WitDataRepos (myProblem ());
   
   forEachPart (thePart, myProblem ())
      init (thePart);
   }
d194 3
a196 3
   {
   delete psSupRepos_;
   }
d201 8
a208 8
      WitPart * srcPart,
      WitPeriod srcPer,
      WitPart * reqPart,
      WitPeriod reqPer)
   {
   if (unanReqs_ (srcPart)[srcPer] or unanByConsEntNet_)
      setUnanReqs (reqPart, reqPer);
   }
d213 14
a226 14
      WitPart *  thePart, 
      WitPeriod  thePer, 
      bool       netForConsEnt)
   {
   if (not hasPseudoSup (thePart, thePer))
      return;

   curExhaustReqs_.push (thePart, thePer);

   if (netForConsEnt)
      unanByConsEntNet_ = true;
   else
      setUnanReqs (thePart, thePer);
   }
d231 3
a233 3
   {
   unanByConsEntNet_ = false;
   }
d238 6
a243 6
      WitBopEntry * theBopEnt, 
      WitPeriod     fillPer)
   {
   if (hasPosPenalty_ (theBopEnt->myOperation ()))
      if (unanReqs_ (theBopEnt->myPart ())[fillPer])
         return false;
d245 2
a246 2
   return true;
   }
d251 2
a252 2
   {
   stronglyAssert (not curFundShort_);
d254 2
a255 2
   curFundShort_ = true;
   }
d260 3
a262 3
   {
   repReqs_.push (thePart, thePer);
   }
d267 17
a283 17
   {
   WitPart * thePart;
   WitPeriod thePer;

   if (success)
      curExhaustReqs_.clear ();
   else
      {
      failExhaustReqs_.clear ();

      failExhaustReqs_.takeContentsFrom (curExhaustReqs_);

      failRestShortOnly_ = not curFundShort_;

      while (unanReqsPairs_.pop (thePart, thePer))
         unanReqs_ (thePart)[thePer] = false;
      }
d285 2
a286 2
   curFundShort_ = false;
   }
d291 5
a295 5
   {
   WitPairStItr <WitPart, WitPeriod> theItr;
   WitPart *                         thePart;
   WitPeriod                         fillPer;
   WitMaterial *                     theMat;
d297 1
a297 1
   failExhaustReqs_.attachItr (theItr);
d299 4
a302 4
   while (theItr.advance (thePart, fillPer))
      {
      if (not hasPseudoSup_ (thePart)[fillPer])
         continue;
d304 1
a304 1
      exhaustPsSup (thePart, fillPer);
d306 2
a307 2
      if (selPrintLevelAt (3))
         printExhRep (thePart, fillPer, true);
d309 1
a309 1
      theMat = thePart->thisMat ();
d311 3
a313 3
      if (theMat != NULL)
         exhaustOtherPers (theMat, fillPer);
      }
d315 3
a317 3
   if (not tempMode_)
      {
      failExhaustReqs_.clear ();
d319 3
a321 3
      failRestShortOnly_ = false;
      }
   }
d326 2
a327 2
   {
   stronglyAssert (not tempMode_);
d329 2
a330 2
   tempMode_ = true;
   }
d335 2
a336 2
   {
   stronglyAssert (tempMode_);
d338 1
a338 1
   psSupRepos_->restore ();
d340 2
a341 2
   tempMode_ = false;
   }
d346 28
a373 28
   {
   WitPart * thePart;
   WitPeriod reqPer;
   WitPeriod thePer;

   while (repReqs_.pop (thePart, reqPer))
      {
      if (not myHeurAtor_->incAvailPos (thePart, reqPer))
         continue;

      if (not hasPseudoSup_ (thePart).isAllocated ())
         hasPseudoSup_ (thePart).allocate (myProblem (), false);

      for (thePer = reqPer; thePer < nPeriods (); thePer ++)
         {
         if (hasPseudoSup_ (thePart)[thePer])
            break;

         hasPseudoSup_ (thePart)[thePer] = true;

         if (selPrintLevelAt (3))
            printExhRep (thePart, thePer, (thePer == reqPer));

         if (not thePart->canStock (thePer))
            break;
         }
      }
   }
d378 17
a394 17
   {
   WitPart * thePart;
   WitPeriod thePer;

   fprintf (msgFile (), 
      "\n"
      "Parts and Periods with Pseudo-Supply:\n\n");

   forEachPart (thePart, myProblem ())
      if (hasPseudoSup_ (thePart).isAllocated ())
         forEachPeriod (thePer, myProblem ())
            if (hasPseudoSup_ (thePart)[thePer])
               fprintf (msgFile (), 
                  "   Part %s, Per %d\n", 
                  thePart->partName ().myCstring (),
                  thePer);
   }
d399 2
a400 2
   {
   WitPeriod thePer;
d402 4
a405 4
   for (thePer = fillPer - 1; thePer >= 0; thePer --)
      {
      if (theMat->mandEC ()[thePer])
         break;
d407 2
a408 2
      if (not hasPseudoSup_ (theMat)[thePer])
         break;
d410 1
a410 1
      exhaustPsSup (theMat, thePer);
d412 3
a414 3
      if (selPrintLevelAt (3))
         printExhRep (theMat, thePer, false);
      }
d416 4
a419 4
   for (thePer = fillPer + 1; thePer < nPeriods (); thePer ++)
      {
      if (theMat->mandEC ()[thePer - 1])
         break;
d421 2
a422 2
      if (theMat->supplyVol ()[thePer] > NET_TOL)
         break;
d424 1
a424 1
      exhaustPsSup (theMat, thePer);
d426 4
a429 4
      if (selPrintLevelAt (3))
         printExhRep (theMat, thePer, false);
      }
   }
d434 3
a436 3
   {
   if (tempMode_)
      psSupRepos_->saveVal (hasPseudoSup_ (thePart)[thePer]);
d438 2
a439 2
   hasPseudoSup_ (thePart)[thePer] = false;
   }
d444 3
a446 3
   {
   if (unanReqs_ (thePart)[thePer])
      return;
d448 1
a448 1
   unanReqs_ (thePart)[thePer] = true;
d450 2
a451 2
   unanReqsPairs_.push (thePart, thePer);
   }
d456 17
a472 17
   {
   WitOperation * theOpn;
   WitBomEntry *  theBomEnt;
   WitSubEntry *  theSub;

   forEachOperation (theOpn, myProblem ())
      if (theOpn->execPenalty () > 0.0)
         hasPosPenalty_ (theOpn) = true;

   forEachBomEntry (theBomEnt, myProblem ())
      if (theBomEnt->execPenalty () > 0.0)
         hasPosPenalty_ (theBomEnt->myOperation ()) = true;

   forEachSubEntry (theSub, myProblem ())
      if (theSub->execPenalty () > 0.0)
         hasPosPenalty_ (theSub->myOperation ()) = true;
   }
d477 1
a477 1
// carryOver: true, iff supply from an earlier period carries over to the 
d482 20
a501 20
   {
   WitPeriod fillPer;
   bool      carryOver;

   carryOver = false;

   forEachPeriod (fillPer, myProblem ())
      {
      if (not carryOver)
         if (thePart->supplyVol ()[fillPer] <= NET_TOL)
            continue;

      if (not hasPseudoSup_ (thePart).isAllocated ())
         hasPseudoSup_ (thePart).allocate (myProblem (), false);

      hasPseudoSup_ (thePart)[fillPer] = true;

      carryOver = thePart->canStock (fillPer);
      }
   }
d506 23
a528 23
      WitPart * thePart, 
      WitPeriod fillPer, 
      bool      firstPer)
   {
   const char * changeText;

   if (tempMode_)
      return;

   changeText = 
      hasPseudoSup (thePart, fillPer)?
         "replenished":
         "exhausted";

   if (firstPer)
      fprintf (msgFile (), "\n");

   fprintf (msgFile (), 
      "Pseudo-supply %s for part %s in period %d.\n",
      changeText,
      thePart->partName ().myCstring (),
      fillPer);
   }
@


1.13
log
@Stochastic Implosion
@
text
@d306 2
a307 1
      printExhRepAsNeeded (thePart, fillPer, true);
d366 2
a367 1
         printExhRepAsNeeded (thePart, thePer, (thePer == reqPer));
d412 2
a413 1
      printExhRepAsNeeded (theMat, thePer, false);
d426 2
a427 1
      printExhRepAsNeeded (theMat, thePer, false);
@


1.12
log
@Stochastic Implosion
@
text
@d24 1
a24 1
#include <Repos.h>
@


1.11
log
@ASAP Pegging Order
@
text
@d35 1
a35 1
      WitProbAssoc  (theSelector->myProblem ()),
a162 1
      WitProbAssoc       (theHeurAtor->myProblem ()),
d164 1
@


1.10
log
@Heuristic search increment.
@
text
@d277 1
a277 1
      curExhaustReqs_.passContentsTo (failExhaustReqs_);
@


1.9
log
@New PIP pegging order.
@
text
@d69 1
a69 1
void WitPenExMgr::recCommitVol (double commitVol, bool byExp)
d71 1
a71 1
   myRtAnalyzer_->recCommitVol (commitVol, byExp);
@


1.8
log
@New PIP pegging order.
@
text
@d275 2
@


1.7
log
@Updated the copyright date on all source files.
@
text
@d275 1
a275 1
      failExhaustReqs_.takeContents (curExhaustReqs_);
@


1.6
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.5
log
@[shared-resource pegging]
@
text
@d295 1
a295 1
   failExhaustReqs_.attach (theItr);
@


1.4
log
@Revised mappingIndex code.
@
text
@d295 1
a295 1
   theItr.attachTo (failExhaustReqs_);
@


1.3
log
@Pegged critical list.
@
text
@a27 1
#include <MapIdxI.h>
@


1.2
log
@Pegged Critical List.
@
text
@a41 3
   if (myGlobalComp ()->compPgdCritList ())
      myMsgFac () ("pclWPenExecNYISmsg");

@


1.1
log
@Low-Pri Prop-Rt.
@
text
@d42 3
@

