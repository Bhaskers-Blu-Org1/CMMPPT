head	1.7;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.4.0.2
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.3.0.2
	sce_4_20_OSL:1.3
	sce_410_withVa:1.2;
locks; strict;
comment	@ * @;


1.7
date	2011.09.28.23.49.40;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.24.00.28.02;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.30.20.17.44;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.02.17.34.04;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.15.21.27.23;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.11.17.20.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.24.23.23.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OSRealArgH
#define OSRealArgH

//------------------------------------------------------------------------------
// Header file: "OSRealArg.h"
//
// Contains the declaration of class OSRealArg.
//------------------------------------------------------------------------------

#include <RealArg.h>

//------------------------------------------------------------------------------
// Class OSRealArg
//
// "Output Scalar Real Argument"
//
// Provides a uniform interface to a certain kind of argument to an API
// function. The underlying argument is a pointer to a scalar real-valued
// variable belonging to the application program. Specifically, the underlying
// argument is of one of the following types:
//
//    float  *
//    double *
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const OSRealArg &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type float * and double *. These are the "underlying arguments".
//    The corresponding variables in the application program are of type float
//       and double. These are called the "application variables".
//
//
// Class Hierarchy:
//
// RealArg
//    OSRealArg
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitOSRealArg: public WitRealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOSRealArg (float *);
         //
         // Conversion from a float * underlying argument.

      WitOSRealArg (double *);
         //
         // Conversion from a double * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOSRealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void operator = (double theValue) const;
         //
         // Sets the value of the application variable to theValue, converting
         // the type of theValue, if necessary.

      operator void * () const;
         //
         // Returns the underlying argument, converted to a void *.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      double appVarVal () const;
         //
         // Returns the current value of the application variable, converted
         // (if necessary) to a double.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline float  & myFlt () const;
      inline double & myDbl () const;
         //
         // These functions return the application variable.
         // Implemented in RealArg.C.

      noCopyCtor (WitOSRealArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * const myFltPtr_;
         //
         // The underlying argument, if it is a float *.
         // Otherwise NULL.

      double * const myDblPtr_;
         //
         // The underlying argument, if it is a double *.
         // Otherwise NULL.
   };

#endif
@


1.6
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.5
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d52 2
a53 37
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitOSRealArg (float *);
//
// Conversion from a float * underlying argument.

WitOSRealArg (double *);
//
// Conversion from a double * underlying argument.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitOSRealArg ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void operator = (double theValue) const;
//
// Sets the value of the application variable to theValue, converting
// the type of theValue, if necessary.

operator void * () const;
//
// Returns the underlying argument, converted to a void *.
d55 72
a126 37
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

double appVarVal () const;
//
// Returns the current value of the application variable, converted
// (if necessary) to a double.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

inline float  & myFlt () const;
inline double & myDbl () const;
//
// These functions return the application variable.
// Implemented in RealArg.C.

noCopyCtor (WitOSRealArg);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

float * const myFltPtr_;
//
// The underlying argument, if it is a float *.
// Otherwise NULL.

double * const myDblPtr_;
//
// The underlying argument, if it is a double *.
// Otherwise NULL.
};
@


1.4
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d52 37
a88 2
   {
   public:
d90 37
a126 72
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOSRealArg (float *);
         //
         // Conversion from a float * underlying argument.

      WitOSRealArg (double *);
         //
         // Conversion from a double * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOSRealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void operator = (double theValue) const;
         //
         // Sets the value of the application variable to theValue, converting
         // the type of theValue, if necessary.

      operator void * () const;
         //
         // Returns the underlying argument, converted to a void *.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      double appVarVal () const;
         //
         // Returns the current value of the application variable, converted
         // (if necessary) to a double.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline float  & myFlt () const;
      inline double & myDbl () const;
         //
         // These functions return the application variable.
         // Implemented in RealArg.C.

      noCopyCtor (WitOSRealArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * const myFltPtr_;
         //
         // The underlying argument, if it is a float *.
         // Otherwise NULL.

      double * const myDblPtr_;
         //
         // The underlying argument, if it is a double *.
         // Otherwise NULL.
   };
@


1.3
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.2
log
@Vector PropRtg.
@
text
@a19 1
#include <TlObj.h>
@


1.1
log
@Vector PropRt.
@
text
@d27 4
a30 4
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is a pointer to a scalar real-valued variable
// belonging to the application program. Specifically, the underlying argument
// is of one of the following types:
@

