head	1.19;
access;
symbols
	sce_5_01_20080919:1.16
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.15
	sce_4_05_20040511:1.5
	sce_4_00_20040201:1.5
	nextGenBranch:1.5.0.2
	nextGenRoot:1.5
	sce_3_30_20030627:1.4
	EndRw-branch:1.4.0.6
	Root-of-EndRw:1.4
	rwToStl:1.4.0.4
	latest_sce_3_10_20010924:1.4.0.2
	sce_3_10_20010924:1.4;
locks; strict;
comment	@ * @;


1.19
date	2011.09.28.23.49.03;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.24.00.27.20;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.30.20.17.16;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.33.54;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.01.00.43.12;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.31.18.28.27;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.20.18.36.24;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.17.21.53.00;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.16.23.35.16;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.15.23.50.10;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.14.22.37.09;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.13.23.35.47;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.10.21.58.31;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.10.16.49.43;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.17.18.56.26;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.23.21.13.51;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.22.20.41.47;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.14.17.41.52;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef BaCandH
#define BaCandH

//------------------------------------------------------------------------------
// Header file: "BaCand.h"
//
// Contains the declaration of class BaCand.
//------------------------------------------------------------------------------

#include <SelCand.h>

//------------------------------------------------------------------------------
// Class BaCand
//
// "Build-Ahead Candidate"
// Represents a candidate for selection by build-ahead.
// In this case, the selection candidate is an explosion period to be used by
// some Material in order to fill requirements in some fill period.
//
// Class Hierarchy:
//
// SelCand
//    BaCand
//
// Implemented in BuildAhd.C.
//------------------------------------------------------------------------------

class WitBaCand: public WitSelCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaCand (WitPeriod, WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBaCand ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void prtID     ();
      virtual void getBaData (WitPeriod &);
         //
         // Overrides from class SelCand.

      noCopyCtorAssign (WitBaCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitPeriod myExpPer_;
         //
         // The candidate explosion period for this BaCand.
   };

#endif
@


1.18
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.17
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d38 2
a39 2
{
public:
d41 3
a43 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d45 1
a45 1
WitBaCand (WitPeriod, WitProblem *);
d47 1
a47 1
private:
d49 3
a51 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d53 1
a53 1
virtual ~WitBaCand ();
d55 3
a57 3
//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------
d59 4
a62 4
virtual void prtID     ();
virtual void getBaData (WitPeriod &);
//
// Overrides from class SelCand.
d64 1
a64 1
noCopyCtorAssign (WitBaCand);
d66 3
a68 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d70 4
a73 4
const WitPeriod myExpPer_;
//
// The candidate explosion period for this BaCand.
};
@


1.16
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d38 2
a39 2
   {
   public:
d41 3
a43 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d45 1
a45 1
      WitBaCand (WitPeriod, WitProblem *);
d47 1
a47 1
   private:
d49 3
a51 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d53 1
a53 1
      virtual ~WitBaCand ();
d55 3
a57 3
      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d59 4
a62 4
      virtual void prtID     ();
      virtual void getBaData (WitPeriod &);
         //
         // Overrides from class SelCand.
d64 1
a64 1
      noCopyCtorAssign (WitBaCand);
d66 3
a68 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d70 4
a73 4
      const WitPeriod myExpPer_;
         //
         // The candidate explosion period for this BaCand.
   };
@


1.15
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@Low-Pri Prop-Rt.
@
text
@d45 1
a45 1
      WitBaCand (WitBaPt *);
d59 2
a60 3
      virtual void prtID            ();
      virtual void restoreSelToThis ();
      virtual void getBaData        (WitPeriod &);
a69 4
      WitBaPt * const myBaPt_;
         //
         // The BaPt at which this BaCand represents a candidate for selection.

@


1.13
log
@Low-Pri Prop-Rt.
@
text
@a59 1
      virtual void updateToCurSel   ();
d75 1
a75 1
      WitPeriod myExpPer_;
@


1.12
log
@Low-Pri Prop-Rt.
@
text
@a46 6
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod, myExpPer)

d59 4
a62 4
      virtual void        prtID            ();
      virtual void        updateToCurSel   ();
      virtual void        restoreSelToThis ();
      virtual WitBaCand * myBaCand         ();
@


1.11
log
@Low-Pri Prop-Rt.
@
text
@d45 1
a45 1
      WitBaCand (WitBaMgr *);
d48 1
a48 1
      // Destructor function.
d51 3
a53 1
      virtual ~WitBaCand ();
d56 1
a56 1
      // Data access functions.
d59 1
a59 3
      accessFunc (WitPeriod, myExpPer)

   private:
d62 1
a62 1
      // Private member functions.
d66 1
a68 1
      virtual void        setToCurSelOf    (WitBaPt *);
d78 1
a78 1
      WitBaPt * myBaPt_;
a80 1
         // Valid only when this BaCand is active.
a84 1
         // Valid only when this BaCand is active.
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@d65 4
a68 3
      virtual void        prtID         ();
      virtual WitBaCand * myBaCand      ();
      virtual void        setToCurSelOf (WitBaPt *);
d78 5
d85 2
a86 2
         // The candidate explosion period for this BaCand, if any;
         // otherwise -1.
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@a53 8
      // Other public member functions.
      //------------------------------------------------------------------------

      void setToCurSel (WitBaPt * theBaPt);
         //
         // Sets this BaCand to represent the current selection at theBaPt.

      //------------------------------------------------------------------------
d65 3
a67 2
      virtual void        prtID    ();
      virtual WitBaCand * myBaCand ();
d79 2
a80 1
         // The candidate explosion period for this BaCand.
@


1.8
log
@Low-Pri Prop-Rt.
@
text
@d45 1
a45 1
      WitBaCand (WitPeriod, WitBaMgr *);
d54 8
@


1.7
log
@Low-Pri Prop-Rt.
@
text
@d45 1
a45 1
      WitBaCand (WitPeriod, WitProblem *);
d76 1
a76 1
      const WitPeriod myExpPer_;
@


1.6
log
@Low-Pri Prop-Rt.
@
text
@d45 1
a45 1
      WitBaCand (WitPeriod, WitBaMgr *);
a78 4

      WitBaMgr * const myBaMgr_;
         //
         // The BaMgr that owns this BaCand.
@


1.5
log
@Added some optional warnings on Linux.
@
text
@a53 7
      // Overrides from class SelCand.
      //------------------------------------------------------------------------

      virtual void        prtID    ();
      virtual WitBaCand * myBaCand ();

      //------------------------------------------------------------------------
d65 5
@


1.4
log
@Continued implmentation of selective stock reallocation.
@
text
@d51 1
a51 1
      ~WitBaCand ();
@


1.3
log
@Refactoring for constrained stock reallocation.
@
text
@d57 2
a58 13
      virtual void       prtID     ();
      virtual WitBoolean isaBaCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline static WitBaCand * safeCast (WitSelCand * theSelCand)
         {
         witAssert ((theSelCand == NULL) || theSelCand->isaBaCand ());

         return (WitBaCand *) theSelCand;
         }
@


1.2
log
@Refactoring for constrained stock reallocation.
@
text
@d57 1
d64 1
a64 1
      inline static WitBaCand * downCast (WitSelCand * theSelCand)
@


1.1
log
@Created class SelCand and classes derived from it.
@
text
@d54 17
@

