head	1.7;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.3.0.2
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.2.0.2
	sce_4_20_OSL:1.2
	sce_410_withVa:1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.09.28.23.49.51;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.24.00.28.12;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.30.20.17.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.28.20.04.58;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.02.17.34.07;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.30.21.57.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.03.21.20.29;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PclBldrH
#define PclBldrH

//------------------------------------------------------------------------------
// Header file: "PclBldr.h"
//
// Contains the declaration of class PclBldr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PclBldr
//
// "Pegged Critical List Builder"
// Responsible for generating the pegged critical list.
//
// Class Hierarchy:
//
// ProbAssoc
//    PclBldr
//------------------------------------------------------------------------------

class WitPclBldr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPclBldr (WitProblem *, WitList <WitPclEl> &);

      WitPclBldr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPclBldr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void initSoln ();
         //
         // Clears the pegged critical list.

      void preIncAlloc (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Takes action appropriate at the beginning of HeurAtor::inc (), for
         // the arguments.

      void recFundShortage (WitPart * thePart, WitPeriod thePer);
         //
         // Records a fundamental shortage of thePart in thePer.

      void recRestShortage ();
         //
         // Records the occurrance of a restriction shortage (from pen-exec).

      void postCmqs ();
         //
         // Takes action appropriate at the conclusion of
         // HeurAtor::commitMaxQtySel ().

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPclBldr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDemand * curDemand_;
         //
         // The Demand that the HeurAtor is currently working on.

      WitPeriod curShipPer_;
         //
         // The shipment period that the HeurAtor is currently working on.

      WitPart * shortPart_;
         //
         // The most recent short Part, if any; otherwise NULL.

      WitPeriod shortPer_;
         //
         // The most recent short period, if any; otherwise -1.
   };

#endif
@


1.6
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.5
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d34 2
a35 2
{
public:
d37 3
a39 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d41 1
a41 1
WitPclBldr (WitProblem *, WitList <WitPclEl> &);
d43 1
a43 1
WitPclBldr (WitProblem *);
d45 3
a47 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d49 1
a49 1
~WitPclBldr ();
d51 3
a53 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d55 3
a57 3
void initSoln ();
//
// Clears the pegged critical list.
d59 4
a62 4
void preIncAlloc (WitDemand * theDemand, WitPeriod shipPer);
//
// Takes action appropriate at the beginning of HeurAtor::inc (), for
// the arguments.
d64 3
a66 3
void recFundShortage (WitPart * thePart, WitPeriod thePer);
//
// Records a fundamental shortage of thePart in thePer.
d68 3
a70 3
void recRestShortage ();
//
// Records the occurrance of a restriction shortage (from pen-exec).
d72 4
a75 4
void postCmqs ();
//
// Takes action appropriate at the conclusion of
// HeurAtor::commitMaxQtySel ().
d77 1
a77 1
private:
d79 3
a81 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d83 1
a83 1
noCopyCtorAssign (WitPclBldr);
d85 3
a87 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d89 3
a91 3
WitDemand * curDemand_;
//
// The Demand that the HeurAtor is currently working on.
d93 3
a95 3
WitPeriod curShipPer_;
//
// The shipment period that the HeurAtor is currently working on.
d97 3
a99 3
WitPart * shortPart_;
//
// The most recent short Part, if any; otherwise NULL.
d101 4
a104 4
WitPeriod shortPer_;
//
// The most recent short period, if any; otherwise -1.
};
@


1.4
log
@[disallowed backlog]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d34 2
a35 2
   {
   public:
d37 3
a39 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d41 1
a41 1
      WitPclBldr (WitProblem *, WitList <WitPclEl> &);
d43 1
a43 1
      WitPclBldr (WitProblem *);
d45 3
a47 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d49 1
a49 1
      ~WitPclBldr ();
d51 3
a53 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d55 3
a57 3
      void initSoln ();
         //
         // Clears the pegged critical list.
d59 4
a62 4
      void preIncAlloc (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Takes action appropriate at the beginning of HeurAtor::inc (), for
         // the arguments.
d64 3
a66 3
      void recFundShortage (WitPart * thePart, WitPeriod thePer);
         //
         // Records a fundamental shortage of thePart in thePer.
d68 3
a70 3
      void recRestShortage ();
         //
         // Records the occurrance of a restriction shortage (from pen-exec).
d72 4
a75 4
      void postCmqs ();
         //
         // Takes action appropriate at the conclusion of
         // HeurAtor::commitMaxQtySel ().
d77 1
a77 1
   private:
d79 3
a81 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d83 1
a83 1
      noCopyCtorAssign (WitPclBldr);
d85 3
a87 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d89 3
a91 3
      WitDemand * curDemand_;
         //
         // The Demand that the HeurAtor is currently working on.
d93 3
a95 3
      WitPeriod curShipPer_;
         //
         // The shipment period that the HeurAtor is currently working on.
d97 3
a99 3
      WitPart * shortPart_;
         //
         // The most recent short Part, if any; otherwise NULL.
d101 4
a104 4
      WitPeriod shortPer_;
         //
         // The most recent short period, if any; otherwise -1.
   };
@


1.3
log
@Updated the copyright date on all source files.
@
text
@a76 9
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (
         WitList <WitPclEl> WitGlobalComp::* pgdCritListArg);

a88 13
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // theGlobalComp->*pgdCritList_ == theGlobalComp->pgdCritList_.
      //------------------------------------------------------------------------

      static WitList <WitPclEl> WitGlobalComp::* pgdCritList_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.2
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.1
log
@pegged Critical List.
@
text
@d43 2
d77 9
d98 12
a109 3
      WitList <WitPclEl> & pgdCritList_;
         //
         // Refers to the pegged critical list by myGlobalComp ().
@

