head	1.8;
access;
symbols
	sce_5_01_20080919:1.5
	latest_sce_4_20_20060523:1.5.0.2
	sce_4_20_20060523:1.5
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_410_withVa:1.2;
locks; strict;
comment	@ * @;


1.8
date	2011.09.28.23.49.40;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.24.00.28.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.30.20.17.44;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.02.17.34.04;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.21.15.44.14;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.17.17.07.17;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.11.17.20.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.24.23.23.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OTDARealArgH
#define OTDARealArgH

//------------------------------------------------------------------------------
// Header file: "OTDARealArg.h"
//
// Contains the declaration of class OTDARealArg.
//------------------------------------------------------------------------------

#include <RealArg.h>

//------------------------------------------------------------------------------
// Class OTDARealArg
//
// "Output Two-Dimensional Array Real Argument"
//
// Provides a uniform interface to a certain kind of argument to an API
// function. The underlying argument is the address of a pointer belonging to
// the application program and it is WIT's responsibility to store at this
// address the pointer to a newly created real-valued C-style 2-dimensional
// array. Specifically, the underlying argument is of one of the following
// types:
//
//    float  * * *
//    double * * *
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const OTDARealArg &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type float * * * and double * * *. These are the "underlying
//       arguments".
//    The newly created 2-D arrays are of type float * * and double * *. These
//    are called the "underlying arrays".
//
//
// Class Hierarchy:
//
// RealArg
//    OTDARealArg
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitOTDARealArg: public WitRealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOTDARealArg (float * * *);
         //
         // Conversion from a float * * * underlying argument.

      WitOTDARealArg (double * * *);
         //
         // Conversion from a double * * * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOTDARealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void apiAlloc (int nRows, int nCols) const;
         //
         // Allocates the underlying array to nRows by nCols.
         // Uses malloc, so the array can be passed back to the application
         // program.

      void copyIntoRow (
            int                   theIdx,
            const WitDblFlexVec & theDblFlexVec)
            const;
         //
         // Copies the elements of theDblFlexVec into the corresponding elements
         // of the row of the underlying array indexed by theIdx.

      operator void * () const;
         //
         // Returns the underlying argument, converted to a void *.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOTDARealArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * * * const myFltArPtr_;
         //
         // The underlying argument, if it is a float * * *.
         // Otherwise NULL.

      double * * * const myDblArPtr_;
         //
         // The underlying argument, if it is a double * * *.
         // Otherwise NULL.
   };

#endif
@


1.7
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.6
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d55 2
a56 34
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitOTDARealArg (float * * *);
//
// Conversion from a float * * * underlying argument.

WitOTDARealArg (double * * *);
//
// Conversion from a double * * * underlying argument.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitOTDARealArg ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void apiAlloc (int nRows, int nCols) const;
//
// Allocates the underlying array to nRows by nCols.
// Uses malloc, so the array can be passed back to the application
// program.
d58 66
a123 34
void copyIntoRow (
int                   theIdx,
const WitDblFlexVec & theDblFlexVec)
const;
//
// Copies the elements of theDblFlexVec into the corresponding elements
// of the row of the underlying array indexed by theIdx.

operator void * () const;
//
// Returns the underlying argument, converted to a void *.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitOTDARealArg);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

float * * * const myFltArPtr_;
//
// The underlying argument, if it is a float * * *.
// Otherwise NULL.

double * * * const myDblArPtr_;
//
// The underlying argument, if it is a double * * *.
// Otherwise NULL.
};
@


1.5
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d55 34
a88 2
   {
   public:
d90 34
a123 66
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOTDARealArg (float * * *);
         //
         // Conversion from a float * * * underlying argument.

      WitOTDARealArg (double * * *);
         //
         // Conversion from a double * * * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOTDARealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void apiAlloc (int nRows, int nCols) const;
         //
         // Allocates the underlying array to nRows by nCols.
         // Uses malloc, so the array can be passed back to the application
         // program.

      void copyIntoRow (
            int                   theIdx,
            const WitDblFlexVec & theDblFlexVec)
            const;
         //
         // Copies the elements of theDblFlexVec into the corresponding elements
         // of the row of the underlying array indexed by theIdx.

      operator void * () const;
         //
         // Returns the underlying argument, converted to a void *.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOTDARealArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * * * const myFltArPtr_;
         //
         // The underlying argument, if it is a float * * *.
         // Otherwise NULL.

      double * * * const myDblArPtr_;
         //
         // The underlying argument, if it is a double * * *.
         // Otherwise NULL.
   };
@


1.4
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.3
log
@[shared-resource pegging]
@
text
@d84 1
a84 1
      void apiAlloc (WitSiz nRows, WitSiz nCols) const;
@


1.2
log
@Vector PropRtg.
@
text
@d84 1
a84 1
      void apiAlloc (size_t nRows, size_t nCols) const;
@


1.1
log
@Vector PropRt.
@
text
@d26 6
a31 5
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is the address of a pointer belonging to the
// application program and it is WIT's responsibility to store at this address
// the pointer to a newly created real-valued C-style 2-dimensional array.
// Specifically, the underlying argument is of one of the following types:
@

