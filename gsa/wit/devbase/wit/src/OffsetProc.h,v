head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2011.09.28.23.49.44;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.24.00.28.05;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.30.20.17.46;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.07.22.58.48;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OffsetProcH
#define OffsetProcH

//------------------------------------------------------------------------------
// Header file: "OffsetProc.h"
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class OffsetProc
// "Offset preprocessor"
//
// Responsible for computing:
//    WitOperation::executable_
//    WitBillEntry::impactPeriod_
// as part of preprocessing.
//
// Implemented in PreHelp.C.
//------------------------------------------------------------------------------

class WitOffsetProc: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOffsetProc (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOffsetProc ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void roundOffsets ();
         //
         // Computes impact periods by applying a special rounding algorithm on
         // offsets, designed to avoid cumulative round-off errors.
         // Data computed:
         //    impactPeriod for each BomEntry and each BopEntry.
         //    executable for each Operation.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void truncateOffsets ();
         //
         // Computes truncOffset_;

      void truncateOffset (WitBillEntry * theBillEnt);
         //
         // Computes truncOffset_ (theBillEnt).

      bool roundOffsets (WitOperation * theOpn, WitPeriod thePer);
         //
         // Computes impactPeriods for the BomEntries and BopEntries of
         // theOpn in period t.
         // Also checks for the various conditions under which execution of
         // theOpn is to be forbidden in period t.
         // If any such condition occurs, computation is terminated and false
         // is returned, indicating forbidden execution.
         // Otherwise true is returned.

      bool compImpactPeriod (WitConsEntry * theConsEnt, WitPeriod thePer);
         //
         // Computes theConsEnt->impactPeriod_[thePer].
         // If this functions discovers that execution of
         // theConsEnt->myOperation () in thePer is to be forbidden, the
         // computation is aborted and the function returns false.
         // Otherwise returns true.

      void copyImpactPeriod (WitSubEntry * theSub, WitPeriod thePer);
         //
         // Copies impactPeriod to theSub from its BomEntry.

      bool compImpactPeriod (WitBopEntry * theBopEnt, WitPeriod thePer);
         //
         // CompImpactPeriod for a BopEntry.

      static int ltRoundDown (double leadTime);
         //
         // Returns leadTime rounded down to an int with some numerical fuzz.

      void resetExec (WitOperation * theOpn, WitPeriod thePer);
         //
         // Turns off impactPeriods and dblCumLead given theOpn cannot
         // be executed in period t.

      void updateProdCumLeads (
            WitOperation *     theOpn,
            WitTVec <double> & leadToImpact,
            WitTVec <bool> &   hasImpact);
         //
         // Updates dblCumLead_ for the Parts produced by theOpn.
         // For a given BopEntry, and Period thePer:
         //    hadImpact[thePer] is true, iff the BopEntry has an 
         //       impactPeriod == thePer
         //    leadToImpact[thePer] is the double cum lead time for impactPeriod
         //       thePer, if any.

      double workOffset (WitBillEntry * theBillEnt, WitPeriod thePer);
         //
         // Returns the "working offset" of theBillEnt in thePer, i.e., either
         // the actual offset or the truncated offset, as appropriate.

      noCopyCtorAssign (WitOffsetProc);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSchedule <WitBillEntry, double> truncOffset_;
         //
         // If truncOffsets is true,
         //    truncOffset_ (theBillEnt)[thePer] is 
         //    theBillEnt->offset ()[thePer], truncated to avoid a negative
         //    impact Period.
         // Otherwise not allocated.

      WitSchedule <WitNode, double> dblCumLead_;
         //
         // dblCumLead_ (theNode)[thePer] is the double cumulative lead time of
         // theNode for execution in thePer, if theNode is an Operation or
         // production in thePer, if theNode is a Part.
   };

#endif
@


1.3
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.2
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d33 2
a34 14
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitOffsetProc (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitOffsetProc ();
d36 110
a145 98
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void roundOffsets ();
//
// Computes impact periods by applying a special rounding algorithm on
// offsets, designed to avoid cumulative round-off errors.
// Data computed:
//    impactPeriod for each BomEntry and each BopEntry.
//    executable for each Operation.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void truncateOffsets ();
//
// Computes truncOffset_;

void truncateOffset (WitBillEntry * theBillEnt);
//
// Computes truncOffset_ (theBillEnt).

bool roundOffsets (WitOperation * theOpn, WitPeriod thePer);
//
// Computes impactPeriods for the BomEntries and BopEntries of
// theOpn in period t.
// Also checks for the various conditions under which execution of
// theOpn is to be forbidden in period t.
// If any such condition occurs, computation is terminated and false
// is returned, indicating forbidden execution.
// Otherwise true is returned.

bool compImpactPeriod (WitConsEntry * theConsEnt, WitPeriod thePer);
//
// Computes theConsEnt->impactPeriod_[thePer].
// If this functions discovers that execution of
// theConsEnt->myOperation () in thePer is to be forbidden, the
// computation is aborted and the function returns false.
// Otherwise returns true.

void copyImpactPeriod (WitSubEntry * theSub, WitPeriod thePer);
//
// Copies impactPeriod to theSub from its BomEntry.

bool compImpactPeriod (WitBopEntry * theBopEnt, WitPeriod thePer);
//
// CompImpactPeriod for a BopEntry.

static int ltRoundDown (double leadTime);
//
// Returns leadTime rounded down to an int with some numerical fuzz.

void resetExec (WitOperation * theOpn, WitPeriod thePer);
//
// Turns off impactPeriods and dblCumLead given theOpn cannot
// be executed in period t.

void updateProdCumLeads (
WitOperation *     theOpn,
WitTVec <double> & leadToImpact,
WitTVec <bool> &   hasImpact);
//
// Updates dblCumLead_ for the Parts produced by theOpn.
// For a given BopEntry, and Period thePer:
//    hadImpact[thePer] is true, iff the BopEntry has an
//       impactPeriod == thePer
//    leadToImpact[thePer] is the double cum lead time for impactPeriod
//       thePer, if any.

double workOffset (WitBillEntry * theBillEnt, WitPeriod thePer);
//
// Returns the "working offset" of theBillEnt in thePer, i.e., either
// the actual offset or the truncated offset, as appropriate.

noCopyCtorAssign (WitOffsetProc);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitSchedule <WitBillEntry, double> truncOffset_;
//
// If truncOffsets is true,
//    truncOffset_ (theBillEnt)[thePer] is
//    theBillEnt->offset ()[thePer], truncated to avoid a negative
//    impact Period.
// Otherwise not allocated.

WitSchedule <WitNode, double> dblCumLead_;
//
// dblCumLead_ (theNode)[thePer] is the double cumulative lead time of
// theNode for execution in thePer, if theNode is an Operation or
// production in thePer, if theNode is a Part.
};
@


1.1
log
@Re-organized code.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d33 14
a46 2
   {
   public:
d48 98
a145 110
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOffsetProc (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOffsetProc ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void roundOffsets ();
         //
         // Computes impact periods by applying a special rounding algorithm on
         // offsets, designed to avoid cumulative round-off errors.
         // Data computed:
         //    impactPeriod for each BomEntry and each BopEntry.
         //    executable for each Operation.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void truncateOffsets ();
         //
         // Computes truncOffset_;

      void truncateOffset (WitBillEntry * theBillEnt);
         //
         // Computes truncOffset_ (theBillEnt).

      bool roundOffsets (WitOperation * theOpn, WitPeriod thePer);
         //
         // Computes impactPeriods for the BomEntries and BopEntries of
         // theOpn in period t.
         // Also checks for the various conditions under which execution of
         // theOpn is to be forbidden in period t.
         // If any such condition occurs, computation is terminated and false
         // is returned, indicating forbidden execution.
         // Otherwise true is returned.

      bool compImpactPeriod (WitConsEntry * theConsEnt, WitPeriod thePer);
         //
         // Computes theConsEnt->impactPeriod_[thePer].
         // If this functions discovers that execution of
         // theConsEnt->myOperation () in thePer is to be forbidden, the
         // computation is aborted and the function returns false.
         // Otherwise returns true.

      void copyImpactPeriod (WitSubEntry * theSub, WitPeriod thePer);
         //
         // Copies impactPeriod to theSub from its BomEntry.

      bool compImpactPeriod (WitBopEntry * theBopEnt, WitPeriod thePer);
         //
         // CompImpactPeriod for a BopEntry.

      static int ltRoundDown (double leadTime);
         //
         // Returns leadTime rounded down to an int with some numerical fuzz.

      void resetExec (WitOperation * theOpn, WitPeriod thePer);
         //
         // Turns off impactPeriods and dblCumLead given theOpn cannot
         // be executed in period t.

      void updateProdCumLeads (
            WitOperation *     theOpn,
            WitTVec <double> & leadToImpact,
            WitTVec <bool> &   hasImpact);
         //
         // Updates dblCumLead_ for the Parts produced by theOpn.
         // For a given BopEntry, and Period thePer:
         //    hadImpact[thePer] is true, iff the BopEntry has an 
         //       impactPeriod == thePer
         //    leadToImpact[thePer] is the double cum lead time for impactPeriod
         //       thePer, if any.

      double workOffset (WitBillEntry * theBillEnt, WitPeriod thePer);
         //
         // Returns the "working offset" of theBillEnt in thePer, i.e., either
         // the actual offset or the truncated offset, as appropriate.

      noCopyCtorAssign (WitOffsetProc);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSchedule <WitBillEntry, double> truncOffset_;
         //
         // If truncOffsets is true,
         //    truncOffset_ (theBillEnt)[thePer] is 
         //    theBillEnt->offset ()[thePer], truncated to avoid a negative
         //    impact Period.
         // Otherwise not allocated.

      WitSchedule <WitNode, double> dblCumLead_;
         //
         // dblCumLead_ (theNode)[thePer] is the double cumulative lead time of
         // theNode for execution in thePer, if theNode is an Operation or
         // production in thePer, if theNode is a Part.
   };
@

