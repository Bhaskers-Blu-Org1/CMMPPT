head	1.14;
access;
symbols
	sce_5_01_20080919:1.11
	latest_sce_4_20_20060523:1.11.0.2
	sce_4_20_20060523:1.11
	latest_sce4_20_OSL:1.10.0.2
	sce_4_20_OSL:1.10
	sce_410_withVa:1.10
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.5
	nextGenBranch:1.4.0.6
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.4.0.4
	Root-of-EndRw:1.4
	rwToStl:1.4.0.2
	latest_sce_3_10_20010924:1.3.0.8
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.3.0.6
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.4
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2011.09.28.23.49.49;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.24.00.28.11;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.08.30.20.17.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.02.17.34.07;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.07.15.16.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.10.23.56.56;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.12.23.02.55;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.12.22.48.05;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.12.20.59.07;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.09.19.52.35;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.25;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.39;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ParlexH
#define ParlexH

/*------------------------------------------------------------------------------
 *
 *     Source file:    Parlex.h
 *
 *     Contains global data for WitParser, WitLexer and other classes
 *     that are part of the parser for data format 4.0.
 *
 *------------------------------------------------------------------------------
*/

#include <Str.h>

// initial state of parser
#define  INITIAL    0

// error codes
#define UNDEF_ATTR      1
#define SERIOUS_ERROR   2
#define BAD_NUM_ARGS    3
#define BAD_ARG         4
#define INDEX_ERROR     5
#define PERIOD_ERROR    6
#define PERIOD_DUP      7
#define WRONG_TYPE      8
#define SHOULD_BE_INT   9
#define UNDEF_PART     10
#define FOPEN_ERROR    11
#define STACK_OVERFLOW 12

#define STACKSIZE     30             /* maximum depth of file stack */

//------------------------------------------------------------------------------
// Enum DRPartCat::Tag
//
// "Data Reader Part Category Tag".
// A tag to identify a part category for DataRead purposes.
//------------------------------------------------------------------------------

namespace WitDRPartCat
   {
   enum Tag
      {
      capacity,
      material
      };
   }

//------------------------------------------------------------------------------
// Enum DRParmType::Tag
//
// "Data Reader Parameter Type Tag".
// A tag to identify the type of an argument to an API function for DataRead
// purposes.
//------------------------------------------------------------------------------

namespace WitDRParmType
   {
   enum Tag
      {
      undefined,
      boolScalar,
      intScalar,
      doubleScalar,
      string,
      partCat,
      boolVector,
      intVector,
      doubleVector,
      boundSet
      };
   }

//------------------------------------------------------------------------------

typedef int  WitParseRC;
   //
   // Return code for parsing

struct WitFileStackElement {

       // Constructor and destructor
       //
    WitFileStackElement ();

   ~WitFileStackElement ();

    FILE *    inputFile_;
    int       lineno_;
    WitString fileName_;
  };

class WitParlex

{
public:

  // Constructor and destructor
  WitParlex();
  ~WitParlex();

  // Operations

  // Save current lexer state and begin reading from new file
  static  WitParseRC  saveFile(const char *fname);

  // Close current input file and restore prvious lexer state
  static  WitParseRC  restoreFile();

  // Accessors
  static  int     lineno();	
  static  int     errcode();
  static  const char *fileName();

  static  void    setLineno(int);
  static  void    setErrcode(int); 
  static  void    setFileName(const char *);

private:

  // static global data
  static int    lineno_;         // current line being parsed
  static int    errcode_;        // error number
  static WitString & fileName_;    // name of current input file

  // Stack to keep track of file information:
  // When a "read filename" command is encountered, the current lexer
  // state is pushed onto the stack and we continue reading from the 
  // new file.  Then, when an end-of-file occurs, yywrap() is called and
  // the stack is popped.  Reading then continues with the old file. 

  static WitFileStackElement fileStack_[];

  static int  stackPos_;                  // next free stack position

};

#endif            // ParlexH
@


1.13
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 14
a19 9
 *     (c) Copyright IBM Corp. 2006.
 *     (Unpublished)
 *     OCO Source Modules
 *     IBM Confidential
 *
 *------------------------------------------------------------------------------

 *------------------------------------------------------------------------------
 *
@


1.12
log
@Revised the copyright date.
@
text
@d4 18
a21 18
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2011.
//     (Unpublished);
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//
//    Source file:    Parlex.h
//
//    Contains global data for WitParser, WitLexer and other classes
//    that are part of the parser
//
//------------------------------------------------------------------------------

d52 7
a58 7
{
enum Tag
{
capacity,
material
};
}
d69 15
a83 15
{
enum Tag
{
undefined,
boolScalar,
intScalar,
doubleScalar,
string,
partCat,
boolVector,
intVector,
doubleVector,
boundSet
};
}
d88 2
a89 2
//
// Return code for parsing
d93 10
a102 10
// Constructor and destructor
//
WitFileStackElement ();

~WitFileStackElement ();

FILE *    inputFile_;
int       lineno_;
WitString fileName_;
};
d109 20
a128 20
// Constructor and destructor
WitParlex();
~WitParlex();

// Operations

// Save current lexer state and begin reading from new file
static  WitParseRC  saveFile(const char *fname);

// Close current input file and restore prvious lexer state
static  WitParseRC  restoreFile();

// Accessors
static  int     lineno();
static  int     errcode();
static  const char *fileName();

static  void    setLineno(int);
static  void    setErrcode(int);
static  void    setFileName(const char *);
d132 10
a141 10
// static global data
static int    lineno_;         // current line being parsed
static int    errcode_;        // error number
static WitString & fileName_;    // name of current input file

// Stack to keep track of file information:
// When a "read filename" command is encountered, the current lexer
// state is pushed onto the stack and we continue reading from the
// new file.  Then, when an end-of-file occurs, yywrap() is called and
// the stack is popped.  Reading then continues with the old file.
d143 1
a143 1
static WitFileStackElement fileStack_[];
d145 1
a145 1
static int  stackPos_;                  // next free stack position
@


1.11
log
@Updated the copyright date on all source files.
@
text
@d4 18
a21 18
/*------------------------------------------------------------------------------
 *
 *     (c) Copyright IBM Corp. 2006.
 *     (Unpublished)
 *     OCO Source Modules
 *     IBM Confidential
 *
 *------------------------------------------------------------------------------

 *------------------------------------------------------------------------------
 *
 *     Source file:    Parlex.h
 *
 *     Contains global data for WitParser, WitLexer and other classes
 *     that are part of the parser for data format 4.0.
 *
 *------------------------------------------------------------------------------
*/
d52 7
a58 7
   {
   enum Tag
      {
      capacity,
      material
      };
   }
d69 15
a83 15
   {
   enum Tag
      {
      undefined,
      boolScalar,
      intScalar,
      doubleScalar,
      string,
      partCat,
      boolVector,
      intVector,
      doubleVector,
      boundSet
      };
   }
d88 2
a89 2
   //
   // Return code for parsing
d93 10
a102 10
       // Constructor and destructor
       //
    WitFileStackElement ();

   ~WitFileStackElement ();

    FILE *    inputFile_;
    int       lineno_;
    WitString fileName_;
  };
d109 20
a128 20
  // Constructor and destructor
  WitParlex();
  ~WitParlex();

  // Operations

  // Save current lexer state and begin reading from new file
  static  WitParseRC  saveFile(const char *fname);

  // Close current input file and restore prvious lexer state
  static  WitParseRC  restoreFile();

  // Accessors
  static  int     lineno();	
  static  int     errcode();
  static  const char *fileName();

  static  void    setLineno(int);
  static  void    setErrcode(int); 
  static  void    setFileName(const char *);
d132 10
a141 10
  // static global data
  static int    lineno_;         // current line being parsed
  static int    errcode_;        // error number
  static WitString & fileName_;    // name of current input file

  // Stack to keep track of file information:
  // When a "read filename" command is encountered, the current lexer
  // state is pushed onto the stack and we continue reading from the 
  // new file.  Then, when an end-of-file occurs, yywrap() is called and
  // the stack is popped.  Reading then continues with the old file. 
d143 1
a143 1
  static WitFileStackElement fileStack_[];
d145 1
a145 1
  static int  stackPos_;                  // next free stack position
@


1.10
log
@[exceptions]
@
text
@d6 1
a6 1
 *     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.9
log
@Vector PropRt.
@
text
@d145 1
a145 1
  static int  sp;                  // next free stack position
@


1.8
log
@Double Precision.
@
text
@d64 1
a64 1
// A tag to identify the type of an argument to an API function DataRead
d73 1
a76 1
      boolScalar,
d78 1
@


1.7
log
@Double Precision.
@
text
@d74 1
a74 1
      floatScalar,
d79 1
a79 1
      floatVector,
@


1.6
log
@Double Precision.
@
text
@d48 1
d53 29
a81 1
   enum Tag {capacity, material};
a88 3

enum pType {Undefined, Integer, Float, String, Boolean,
  Category, IntVector, FloatVector, BoundSet};
@


1.5
log
@Continued implementation of PIP.
@
text
@d44 13
a60 2
typedef enum category {none, capacity, material} category;

a62 3

// Note: do not confuse a BoundSet with a BoundSetSpec.  A BoundSet is
// a datatype for an attribute value.  A BoundSetSpec is a class.
@


1.4
log
@Continued implementation of single-source.
@
text
@d69 1
a69 1
class WitParlex: public WitUtil
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d23 1
a23 1
#include <Util.h>
d64 3
a66 3
    FILE *      inputFile_;
    int         lineno_;
    WitString & fileName_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d23 1
a23 1
#include <typedefs.h>
d69 1
a69 1
class WitParlex {
d71 1
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
 *     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
