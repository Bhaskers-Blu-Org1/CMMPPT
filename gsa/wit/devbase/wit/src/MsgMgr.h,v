head	1.19;
access;
symbols
	sce_5_01_20080919:1.16
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.14
	sce_4_05_20040511:1.12
	sce_4_00_20040201:1.12
	nextGenBranch:1.11.0.2
	nextGenRoot:1.11
	sce_3_30_20030627:1.10
	EndRw-branch:1.9.0.4
	Root-of-EndRw:1.9
	rwToStl:1.9.0.2
	latest_sce_3_10_20010924:1.7.0.2
	sce_3_10_20010924:1.7
	latest_sce_3_00_20010601:1.6.0.2
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2011.09.28.23.49.37;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.24.00.27.59;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.30.20.17.42;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.34.04;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.21.18.50.59;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.07.11.19.51.28;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.08.13.20.45.27;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.02.22.18.36;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.09.19.52.34;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.18.14.02.36;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.21.18.24.31;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.21.21.55.47;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.39;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.44;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.24;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.24;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MsgMgrH
#define MsgMgrH

//------------------------------------------------------------------------------
// Header file: "MsgMgr.h"
//
// Contains the declaration of class MsgMgr.
//------------------------------------------------------------------------------

#include <PtrVec.h>
#include <MsgFac.h>

#include <mcl/src/mcl.h>

//------------------------------------------------------------------------------
// class MsgMgr
//
// Message Manager: The internal part of a MsgFacility.
//------------------------------------------------------------------------------

class WitMsgMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsgMgr (WitMsgFacility & theMsgFac);
         //
         // myMsgFac <-- theMsgFac.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMsgMgr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitMsgFacility &, myMsgFac)
      accessFunc    (bool,             errorsIssued)
      accessFunc    (WitApiMgr *,      myApiMgr)

      accessNonNull (WitMsg *,         issuedMsg)

      inline WitSession * mySession () const
         {
         return myMsgFac ().mySession ();
         }

      inline WitOutputDisplayer & myDisp () const
         {
         return * myDispPtr_;
         }

      inline MclFacility & myMclFacility () const
         {
         return * myMclFacilityPtr_;
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void record (WitMsg * theMsg);
         //
         // Records the fact that theMsg is being constructed.

      void issue (WitMsgID theMsgID, const MclArgList & theArgList);
         //
         // Issues the Msg matching MsgID, with theArgList.

      WitMsg * myMsg (MclMsg * theMclMsg) const;
         //
         // Returns the Msg whose externalNumber matches theMclMsg.
         // Asserts that there is one.

      WitMsg * extNumMsg (int theExtNum) const;
         //
         // Returns the Msg whose externalNumber is theExtNum, if any,
         // else NULL.

      bool issueAllowed (WitMsg * theMsg) const;
         //
         // Returns true, if it is OK to issue theMsg.

      void setCrashOnFatal (bool theValue);
         //
         // crashOnFatal_ <-- theValue

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMsgMgr);

      void resizeExtNumMsg ();
         //
         // Makes extNumMsg_ the appropriate size.

      void crashForFatal ();
         //
         // Deliberately crashes WIT, to allow easier debugging.
         // To be used optionally on a fatal error.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility that owns this MsgMgr.

      WitOutputDisplayer * myDispPtr_;
         //
         // Ptr to the OutputDisplayer owned by this MsgMgr.

      MclFacility * myMclFacilityPtr_;
         //
         // Ptr to the MclFacility owned by this WitMsgMgr.

      WitApiMgr * const myApiMgr_;
         //
         // The ApiMgr for this MsgMgr.

      WitPtrVec <WitMsg> extNumMsg_;
         //
         // Data for extNumMsg.

      bool errorsIssued_;
         //
         // true, iff at least one Msg of Level >= error has been issued.

      WitMsg * issuedMsg_;
         //
         // The Msg currently being issued, if any, else NULL.
         // (The inner most Msg, if issue is called recursively.)

      bool crashOnFatal_;
         //
         // If true, WIT will deliberately crash when aborting.
         // (Useful when debugging.)
   };

#endif
@


1.18
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.17
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d31 2
a32 116
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMsgMgr (WitMsgFacility & theMsgFac);
//
// myMsgFac <-- theMsgFac.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitMsgMgr ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc    (WitMsgFacility &, myMsgFac)
accessFunc    (bool,             errorsIssued)
accessFunc    (WitApiMgr *,      myApiMgr)

accessNonNull (WitMsg *,         issuedMsg)

inline WitSession * mySession () const
{
return myMsgFac ().mySession ();
}

inline WitOutputDisplayer & myDisp () const
{
return * myDispPtr_;
}

inline MclFacility & myMclFacility () const
{
return * myMclFacilityPtr_;
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void record (WitMsg * theMsg);
//
// Records the fact that theMsg is being constructed.

void issue (WitMsgID theMsgID, const MclArgList & theArgList);
//
// Issues the Msg matching MsgID, with theArgList.

WitMsg * myMsg (MclMsg * theMclMsg) const;
//
// Returns the Msg whose externalNumber matches theMclMsg.
// Asserts that there is one.

WitMsg * extNumMsg (int theExtNum) const;
//
// Returns the Msg whose externalNumber is theExtNum, if any,
// else NULL.

bool issueAllowed (WitMsg * theMsg) const;
//
// Returns true, if it is OK to issue theMsg.

void setCrashOnFatal (bool theValue);
//
// crashOnFatal_ <-- theValue

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitMsgMgr);

void resizeExtNumMsg ();
//
// Makes extNumMsg_ the appropriate size.

void crashForFatal ();
//
// Deliberately crashes WIT, to allow easier debugging.
// To be used optionally on a fatal error.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMsgFacility & myMsgFac_;
//
// The MsgFacility that owns this MsgMgr.

WitOutputDisplayer * myDispPtr_;
//
// Ptr to the OutputDisplayer owned by this MsgMgr.

MclFacility * myMclFacilityPtr_;
//
// Ptr to the MclFacility owned by this WitMsgMgr.

WitApiMgr * const myApiMgr_;
//
// The ApiMgr for this MsgMgr.

WitPtrVec <WitMsg> extNumMsg_;
//
// Data for extNumMsg.

bool errorsIssued_;
//
// true, iff at least one Msg of Level >= error has been issued.
d34 124
a157 10
WitMsg * issuedMsg_;
//
// The Msg currently being issued, if any, else NULL.
// (The inner most Msg, if issue is called recursively.)

bool crashOnFatal_;
//
// If true, WIT will deliberately crash when aborting.
// (Useful when debugging.)
};
@


1.16
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d31 116
a146 2
   {
   public:
d148 10
a157 124
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsgMgr (WitMsgFacility & theMsgFac);
         //
         // myMsgFac <-- theMsgFac.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMsgMgr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitMsgFacility &, myMsgFac)
      accessFunc    (bool,             errorsIssued)
      accessFunc    (WitApiMgr *,      myApiMgr)

      accessNonNull (WitMsg *,         issuedMsg)

      inline WitSession * mySession () const
         {
         return myMsgFac ().mySession ();
         }

      inline WitOutputDisplayer & myDisp () const
         {
         return * myDispPtr_;
         }

      inline MclFacility & myMclFacility () const
         {
         return * myMclFacilityPtr_;
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void record (WitMsg * theMsg);
         //
         // Records the fact that theMsg is being constructed.

      void issue (WitMsgID theMsgID, const MclArgList & theArgList);
         //
         // Issues the Msg matching MsgID, with theArgList.

      WitMsg * myMsg (MclMsg * theMclMsg) const;
         //
         // Returns the Msg whose externalNumber matches theMclMsg.
         // Asserts that there is one.

      WitMsg * extNumMsg (int theExtNum) const;
         //
         // Returns the Msg whose externalNumber is theExtNum, if any,
         // else NULL.

      bool issueAllowed (WitMsg * theMsg) const;
         //
         // Returns true, if it is OK to issue theMsg.

      void setCrashOnFatal (bool theValue);
         //
         // crashOnFatal_ <-- theValue

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMsgMgr);

      void resizeExtNumMsg ();
         //
         // Makes extNumMsg_ the appropriate size.

      void crashForFatal ();
         //
         // Deliberately crashes WIT, to allow easier debugging.
         // To be used optionally on a fatal error.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility that owns this MsgMgr.

      WitOutputDisplayer * myDispPtr_;
         //
         // Ptr to the OutputDisplayer owned by this MsgMgr.

      MclFacility * myMclFacilityPtr_;
         //
         // Ptr to the MclFacility owned by this WitMsgMgr.

      WitApiMgr * const myApiMgr_;
         //
         // The ApiMgr for this MsgMgr.

      WitPtrVec <WitMsg> extNumMsg_;
         //
         // Data for extNumMsg.

      bool errorsIssued_;
         //
         // true, iff at least one Msg of Level >= error has been issued.

      WitMsg * issuedMsg_;
         //
         // The Msg currently being issued, if any, else NULL.
         // (The inner most Msg, if issue is called recursively.)

      bool crashOnFatal_;
         //
         // If true, WIT will deliberately crash when aborting.
         // (Useful when debugging.)
   };
@


1.15
log
@Minor updates.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@[exceptions]
@
text
@a119 5
      void abort (const WitMsg * theMsg) const;
         //
         // Aborts WIT: either by exiting the process or by returning directly
         // to the application program.

@


1.13
log
@Made behavior of severe errors with delayed aborting consistent between
mesgStopRunning = true mode and mesgStopRunning = false mode.
@
text
@d16 1
a16 5
// Contains the declaration of the following classes:
//
//    OutputDisplayer.
//    Msg.
//    MsgMgr.
a18 1
#include <Str.h>
a24 193

class WitMsgMgr;

//------------------------------------------------------------------------------
// Class OutputDisplayer
//
// WIT's specialization of class MclOutputDisplayer.
//------------------------------------------------------------------------------

class WitOutputDisplayer: public MclOutputDisplayer
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOutputDisplayer (WitMsgMgr * theMsgMgr);
         //
         // myMsgMgr_ <-- theMsgMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOutputDisplayer ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (FILE *,            myFile)
      accessFunc (const WitString &, fileName)
      accessFunc (const WitString &, accessMode)

      //------------------------------------------------------------------------
      // Data setting functions.
      //------------------------------------------------------------------------

      void setAccessMode (const char *);

      void setMyFile (FILE * theFile, const char * theName);
         //
         // myFile   <-- theFile.
         // fileName <-- theName.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void output (const char *);
         //
         // Override from class MclOutputDisplayer.

      virtual void outputError (const char *);
         //
         // Override from class MclOutputDisplayer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOutputDisplayer);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgMgr * const myMsgMgr_;
         //
         // The MsgMgr for this OutputDisplayer.

      FILE * myFile_;
         //
         // The file to which Msgs will be displayed.

      WitString fileName_;
         //
         // The name of myFile_.

      WitString accessMode_;
         //
         // Access mode used by fopen when opening myFile_.
   };

//------------------------------------------------------------------------------
// Class Msg
//
// WIT's specialization of class MclMsg.
//------------------------------------------------------------------------------

class WitMsg: public MclMsg
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMsg (
            WitMsgMgr *      theMsgMgr,
            WitMsgID         theMsgID,
            const MclLevel & theLevel,
            const char *     textVal,
            int              extNum);
         //
         // myMsgMgr_ <-- theMsgMgr.
         // MclMsg    <<< other Args.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMsg ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, delayedSevere)
      accessFunc (bool, stopOnAbort)
      accessFunc (bool, dupToStdout)
      accessFunc (bool, issueDuringRD)
      accessFunc (bool, idInputOnIssue)
      accessFunc (bool, testable)

      //------------------------------------------------------------------------
      // Attribute setting functions.
      //------------------------------------------------------------------------

      WitMsg * delayedSevere  (bool);
      WitMsg * stopOnAbort    (bool);
      WitMsg * dupToStdout    (bool);
      WitMsg * issueDuringRD  (bool);
      WitMsg * idInputOnIssue (bool);
      WitMsg * testable       (bool);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMsg);

      virtual void postIssue ();
         //
         // Override from MclMsg.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgMgr * const myMsgMgr_;
         //
         // The MsgMgr for this Msg.

      bool delayedSevere_;
         //
         // true, iff this Msg is a severe Msg, but WIT is to delay aborting
         // until preprocessing or the end of reading the data file.

      bool stopOnAbort_;
         //
         // If this Msg calls WitRun::abort, then:
         //    If true,  the process will stop.
         //    If false, control will return to the application program.

      bool dupToStdout_;
         //
         // If true, then when this Msg is issued in stand-alone mode, it will
         // also display to stdout.
         // Only allowed on info Msgs.

      bool issueDuringRD_;
         //
         // This Msg is allowed to be issued during readData, iff issueDuringRD_
         // is true or GlobalComp::readDataMsgs () is true.

      bool idInputOnIssue_;
         //
         // WitRun::idInput will be called when this Msg is issued, iff
         // idInputOnIssue_ is true.

      bool testable_;
         //
         // true, iff this Msg is to be tested by the Msg testing application
         // program.
   };

//------------------------------------------------------------------------------
@


1.12
log
@Continued implementation of PIP.
@
text
@d151 1
a151 1
      accessFunc (bool, abortOnIssue)
d162 6
a167 6
      WitMsg * abortOnIssue    (bool);
      WitMsg * stopOnAbort     (bool);
      WitMsg * dupToStdout     (bool);
      WitMsg * issueDuringRD   (bool);
      WitMsg * idInputOnIssue  (bool);
      WitMsg * testable        (bool);
d189 1
a189 1
      bool abortOnIssue_;
d191 2
a192 2
         // WitRun::abort will be called when this Msg is issued, iff
         // abortOnIssue_ is true.
@


1.11
log
@Added some optional warnings on Linux.
@
text
@d228 1
a228 1
class WitMsgMgr: public WitUtil
@


1.10
log
@Internal changes.
@
text
@d136 1
a136 1
            int              externalNumber);
@


1.9
log
@Continued implementation of single-source.
@
text
@d151 6
a156 6
      accessFunc (WitBoolean, abortOnIssue)
      accessFunc (WitBoolean, stopOnAbort)
      accessFunc (WitBoolean, dupToStdout)
      accessFunc (WitBoolean, issueDuringRD)
      accessFunc (WitBoolean, idInputOnIssue)
      accessFunc (WitBoolean, testable)
d162 6
a167 6
      WitMsg * abortOnIssue    (WitBoolean);
      WitMsg * stopOnAbort     (WitBoolean);
      WitMsg * dupToStdout     (WitBoolean);
      WitMsg * issueDuringRD   (WitBoolean);
      WitMsg * idInputOnIssue  (WitBoolean);
      WitMsg * testable        (WitBoolean);
d189 1
a189 1
      WitBoolean abortOnIssue_;
d192 1
a192 1
         // abortOnIssue_ is TRUE.
d194 1
a194 1
      WitBoolean stopOnAbort_;
d197 2
a198 2
         //    If TRUE,  the process will stop.
         //    If FALSE, control will return to the application program.
d200 1
a200 1
      WitBoolean dupToStdout_;
d202 1
a202 1
         // If TRUE, then when this Msg is issued in stand-alone mode, it will
d206 1
a206 1
      WitBoolean issueDuringRD_;
d209 1
a209 1
         // is TRUE or GlobalComp::readDataMsgs () is TRUE.
d211 1
a211 1
      WitBoolean idInputOnIssue_;
d214 1
a214 1
         // idInputOnIssue_ is TRUE.
d216 1
a216 1
      WitBoolean testable_;
d218 1
a218 1
         // TRUE, iff this Msg is to be tested by the Msg testing application
d251 1
a251 1
      accessFunc    (WitBoolean,       errorsIssued)
d293 1
a293 1
      WitBoolean issueAllowed (WitMsg * theMsg) const;
d295 1
a295 1
         // Returns TRUE, if it is OK to issue theMsg.
d297 1
a297 1
      void setCrashOnFatal (WitBoolean theValue);
d347 1
a347 1
      WitBoolean errorsIssued_;
d349 1
a349 1
         // TRUE, iff at least one Msg of Level >= error has been issued.
d356 1
a356 1
      WitBoolean crashOnFatal_;
d358 1
a358 1
         // If TRUE, WIT will deliberately crash when aborting.
@


1.8
log
@Began implementation of object iteration.
@
text
@d23 2
a25 1
#include <PtrVec.h>
d108 1
a108 1
      WitString & fileName_;
d112 1
a112 1
      WitString & accessMode_;
@


1.7
log
@More templates.
@
text
@d23 1
@


1.6
log
@Continued implementation of selection splitting with the new design.
@
text
@d341 1
a341 1
      WitPtrVec (WitMsg) extNumMsg_;
@


1.5
log
@Some minor changes.
@
text
@d248 5
a252 3
      accessFunc (WitMsgFacility &, myMsgFac)
      accessFunc (WitBoolean,       errorsIssued)
      accessFunc (WitApiMgr *,      myApiMgr)
a266 7
         }

      inline WitMsg * issuedMsg () const
         {
         witAssert (issuedMsg_ != NULL);

         return issuedMsg_;
@


1.4
log
@Refactoring for selection splitting.
@
text
@d23 1
a23 1
#include <Vector.h>
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d23 1
a23 1
#include <RWClient.h>
d92 1
a92 3
      copyCtorAndAssignment (WitOutputDisplayer);
         //
         // Prevents unintentional copying and assignment.
d173 1
a173 3
      copyCtorAndAssignment (WitMsg);
         //
         // Prevents unintentional copying and assignment.
d310 1
a310 3
      copyCtorAndAssignment (WitMsgMgr);
         //
         // Prevents unintentional copying and assignment.
d314 1
a314 8
         // Makes extNumMsgTl_ the appropriate size.

      inline WitMsg * & extNumMsgRef (int theExtNum)
            //
            // Updatable version of extNumMsg.
         {
         return (WitMsg * &) extNumMsgTl_[theExtNum];
         }
d346 1
a346 1
      WitVector (WitTypelessPtr) extNumMsgTl_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d230 1
a230 1
class WitMsgMgr
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
