head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2011.09.28.23.49.52;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.24.00.28.14;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.30.20.17.54;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.27.21.12.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PerSglStackH
#define PerSglStackH

//------------------------------------------------------------------------------
// Header file: "PerSglStack.h"
//
// Contains the declaration of class template PerSglStack <ObjByPtr>.
//------------------------------------------------------------------------------

#include <PairStack.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class template PerSglStack <ObjByPtr>
//
// A stack of pairs of the form: (ObjByPtr *, Period), without duplication.
//
// Implemented in Stack.C.
//------------------------------------------------------------------------------

template <typename ObjByPtr> 
      class WitPerSglStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPerSglStack (WitProblem * theProblem);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPerSglStack ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void push (ObjByPtr * theObjByPtr, WitPeriod thePer);
         //
         // Pushes (theObjByPtr, thePer) onto the top of this PerSglStack.
         // No-op, if theObjByPtr, thePer) is already in his PerSglStack.

      bool pop (ObjByPtr * & theObjByPtr, WitPeriod & thePer);
         //
         // If this PerSglStack is non-Empty, the first pair it contains is
         // removed from it and theObjByPtr and thePer are set to the removed
         // pair.
         // Returns true, iff this PerSglStack is non-empty.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPerSglStack);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPairStack <ObjByPtr, WitPeriod> myPairs_;
         //
         // The pairs held by this PerSglStack.

      WitSchedule <ObjByPtr, bool> inStack_;
         //
         // inStack_ (theObjByPtr)[thePer] is true, iff (theObjByPtr, thePer) is
         // in this PerSglStack.
         // Allocated as needed.
   };

#endif
@


1.3
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.2
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d30 55
a84 55
template <typename ObjByPtr>
class WitPerSglStack
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPerSglStack (WitProblem * theProblem);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPerSglStack ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void push (ObjByPtr * theObjByPtr, WitPeriod thePer);
//
// Pushes (theObjByPtr, thePer) onto the top of this PerSglStack.
// No-op, if theObjByPtr, thePer) is already in his PerSglStack.

bool pop (ObjByPtr * & theObjByPtr, WitPeriod & thePer);
//
// If this PerSglStack is non-Empty, the first pair it contains is
// removed from it and theObjByPtr and thePer are set to the removed
// pair.
// Returns true, iff this PerSglStack is non-empty.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitPerSglStack);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPairStack <ObjByPtr, WitPeriod> myPairs_;
//
// The pairs held by this PerSglStack.

WitSchedule <ObjByPtr, bool> inStack_;
//
// inStack_ (theObjByPtr)[thePer] is true, iff (theObjByPtr, thePer) is
// in this PerSglStack.
// Allocated as needed.
};
@


1.1
log
@Modifiable Heuristic Allocation
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d30 55
a84 55
template <typename ObjByPtr> 
      class WitPerSglStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPerSglStack (WitProblem * theProblem);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPerSglStack ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void push (ObjByPtr * theObjByPtr, WitPeriod thePer);
         //
         // Pushes (theObjByPtr, thePer) onto the top of this PerSglStack.
         // No-op, if theObjByPtr, thePer) is already in his PerSglStack.

      bool pop (ObjByPtr * & theObjByPtr, WitPeriod & thePer);
         //
         // If this PerSglStack is non-Empty, the first pair it contains is
         // removed from it and theObjByPtr and thePer are set to the removed
         // pair.
         // Returns true, iff this PerSglStack is non-empty.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPerSglStack);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPairStack <ObjByPtr, WitPeriod> myPairs_;
         //
         // The pairs held by this PerSglStack.

      WitSchedule <ObjByPtr, bool> inStack_;
         //
         // inStack_ (theObjByPtr)[thePer] is true, iff (theObjByPtr, thePer) is
         // in this PerSglStack.
         // Allocated as needed.
   };
@

