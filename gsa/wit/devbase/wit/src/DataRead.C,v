head	1.34;
access;
symbols
	sce_5_01_20080919:1.28
	latest_sce_4_20_20060523:1.28.0.2
	sce_4_20_20060523:1.28
	latest_sce4_20_OSL:1.27.0.2
	sce_4_20_OSL:1.27
	sce_410_withVa:1.17
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.11
	nextGenBranch:1.11.0.2
	nextGenRoot:1.11
	sce_3_30_20030627:1.11
	EndRw-branch:1.8.0.4
	Root-of-EndRw:1.8
	rwToStl:1.8.0.2
	latest_sce_3_10_20010924:1.5.0.4
	sce_3_10_20010924:1.5
	latest_sce_3_00_20010601:1.5.0.2
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2011.09.28.23.49.12;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.09.24.00.27.29;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.08.30.20.17.23;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.01.25.19.45.17;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2009.11.17.19.31.37;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2009.10.08.15.35.35;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.02.17.33.56;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.01.22.24.36;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.01.17.06.16;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.28.22.28.08;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.28.21.31.00;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.28.21.03.05;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.28.20.29.10;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.21.22.23.34;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.18.20.56.21;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.07.21.42.47;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.13.19.31.56;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.07.13.21.18.46;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.07.07.18.18.10;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.07.07.16.00.58;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.07.07.15.16.23;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.07.05.22.04.25;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.12.19.43.31;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.23.18.12.33;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.02.23.40.38;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.02.22.18.22;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.08.21.58.52;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.24.18.26.05;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.18.14.02.29;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.17.15.11.13;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.06.19.58.36;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.19;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.31;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "DataRead.C"
//
// Contains the implementation of class DataReader.
//------------------------------------------------------------------------------

#include <DataRead.h>
#include <Problem.h>
#include <ApiMgr.h>
#include <InputID.h>
#include <Timing.h>
#include <MsgFac.h>
#include <Parser.h>

//------------------------------------------------------------------------------

WitDataReader * WitDataReader::activeInstance_   = NULL;
bool            WitDataReader::errorHasOccurred_ = false;

//------------------------------------------------------------------------------

WitDataReader::WitDataReader (WitProblem * theProblem):

      WitProbAssoc   (theProblem),

      inputFileName_ (),
      inputFile_     (NULL)
   {
   }

//------------------------------------------------------------------------------

WitDataReader::~WitDataReader ()
   {
   }

//------------------------------------------------------------------------------

void WitDataReader::readData (const char * fileName)
   {
   myMsgFac () ("witFileParam", fileName);

   if (errorHasOccurred_)
      myMsgFac () ("postErrReadDataSmsg");

   if (activeInstance_ != NULL)
      {
      errorHasOccurred_ = true;

      myMsgFac () ("overlapReadDataSmsg");
      }

   activeInstance_ = this;

   try
      {
      protectedReadData (fileName);
      }

   catch (...)
      {
      errorHasOccurred_ = true;
      activeInstance_   = NULL;

      throw;
      }

   activeInstance_ = NULL;
   }

//------------------------------------------------------------------------------

bool WitDataReader::active ()
   {
   return (this == activeInstance_);
   }

//------------------------------------------------------------------------------

void WitDataReader::protectedReadData (const char * fileName)
   {
   WitTimer::enterSection ("input");

   inputFileName_ = fileName;

   inputFile_ =
      (inputFileName_ == WitSTDIN)?
         stdin:
         openFile (inputFileName_.myCstring (), "r");

   myApiMgr ()->myInputID ()->setDataFileName   (inputFileName_.myCstring ());
   myApiMgr ()->myInputID ()->setDataFileLineNo (0);

#if IMPLEMENT_READDATA

   WitParser::parse (myProblem (), inputFileName_.myCstring (), inputFile_);

#else

   myMsgFac () ("witReadDataNotImplementedSmsg");

#endif

   myApiMgr ()->myInputID ()->setDataFileName   (NULL);
   myApiMgr ()->myInputID ()->setDataFileLineNo (0);

   if (inputFileName_ != WitSTDIN)
      if (fclose (inputFile_) != 0)
         myMsgFac () ("fcloseSmsg", inputFileName_);

   inputFileName_ = "";

   inputFile_     = NULL;

   WitTimer::leaveSection ("input");

   myMsgFac ().abortIfErrors ();
   }
@


1.33
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.32
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d33 1
a33 1
WitProbAssoc   (theProblem),
d35 4
a38 4
inputFileName_ (),
inputFile_     (NULL)
{
}
d43 2
a44 2
{
}
d49 2
a50 2
{
myMsgFac () ("witFileParam", fileName);
d52 2
a53 2
if (errorHasOccurred_)
myMsgFac () ("postErrReadDataSmsg");
d55 3
a57 3
if (activeInstance_ != NULL)
{
errorHasOccurred_ = true;
d59 2
a60 2
myMsgFac () ("overlapReadDataSmsg");
}
d62 1
a62 1
activeInstance_ = this;
d64 4
a67 4
try
{
protectedReadData (fileName);
}
d69 4
a72 4
catch (...)
{
errorHasOccurred_ = true;
activeInstance_   = NULL;
d74 2
a75 2
throw;
}
d77 2
a78 2
activeInstance_ = NULL;
}
d83 3
a85 3
{
return (this == activeInstance_);
}
d90 2
a91 2
{
WitTimer::enterSection ("input");
d93 1
a93 1
inputFileName_ = fileName;
d95 4
a98 4
inputFile_ =
(inputFileName_ == WitSTDIN)?
stdin:
openFile (inputFileName_.myCstring (), "r");
d100 2
a101 2
myApiMgr ()->myInputID ()->setDataFileName   (inputFileName_.myCstring ());
myApiMgr ()->myInputID ()->setDataFileLineNo (0);
d105 1
a105 1
WitParser::parse (myProblem (), inputFileName_.myCstring (), inputFile_);
d109 1
a109 1
myMsgFac () ("witReadDataNotImplementedSmsg");
d113 2
a114 2
myApiMgr ()->myInputID ()->setDataFileName   (NULL);
myApiMgr ()->myInputID ()->setDataFileLineNo (0);
d116 3
a118 3
if (inputFileName_ != WitSTDIN)
if (fclose (inputFile_) != 0)
myMsgFac () ("fcloseSmsg", inputFileName_);
d120 1
a120 1
inputFileName_ = "";
d122 1
a122 1
inputFile_     = NULL;
d124 1
a124 1
WitTimer::leaveSection ("input");
d126 2
a127 2
myMsgFac ().abortIfErrors ();
}
@


1.31
log
@Multi-objective mode
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d33 1
a33 1
      WitProbAssoc   (theProblem),
d35 4
a38 4
      inputFileName_ (),
      inputFile_     (NULL)
   {
   }
d43 2
a44 2
   {
   }
d49 2
a50 2
   {
   myMsgFac () ("witFileParam", fileName);
d52 2
a53 2
   if (errorHasOccurred_)
      myMsgFac () ("postErrReadDataSmsg");
d55 3
a57 3
   if (activeInstance_ != NULL)
      {
      errorHasOccurred_ = true;
d59 2
a60 2
      myMsgFac () ("overlapReadDataSmsg");
      }
d62 1
a62 1
   activeInstance_ = this;
d64 4
a67 4
   try
      {
      protectedReadData (fileName);
      }
d69 4
a72 4
   catch (...)
      {
      errorHasOccurred_ = true;
      activeInstance_   = NULL;
d74 2
a75 2
      throw;
      }
d77 2
a78 2
   activeInstance_ = NULL;
   }
d83 3
a85 3
   {
   return (this == activeInstance_);
   }
d90 2
a91 2
   {
   WitTimer::enterSection ("input");
d93 1
a93 1
   inputFileName_ = fileName;
d95 4
a98 4
   inputFile_ =
      (inputFileName_ == WitSTDIN)?
         stdin:
         openFile (inputFileName_.myCstring (), "r");
d100 2
a101 2
   myApiMgr ()->myInputID ()->setDataFileName   (inputFileName_.myCstring ());
   myApiMgr ()->myInputID ()->setDataFileLineNo (0);
d105 1
a105 1
   WitParser::parse (myProblem (), inputFileName_.myCstring (), inputFile_);
d109 1
a109 1
   myMsgFac () ("witReadDataNotImplementedSmsg");
d113 2
a114 2
   myApiMgr ()->myInputID ()->setDataFileName   (NULL);
   myApiMgr ()->myInputID ()->setDataFileLineNo (0);
d116 3
a118 3
   if (inputFileName_ != WitSTDIN)
      if (fclose (inputFile_) != 0)
         myMsgFac () ("fcloseSmsg", inputFileName_);
d120 1
a120 1
   inputFileName_ = "";
d122 1
a122 1
   inputFile_     = NULL;
d124 1
a124 1
   WitTimer::leaveSection ("input");
d126 2
a127 2
   myMsgFac ().abortIfErrors ();
   }
@


1.30
log
@Removing objective #2.
@
text
@d93 1
a93 1
   inputFileName_.copyCstring (fileName);
d120 1
a120 1
   inputFileName_.copyCstring ("");
d122 1
a122 1
   inputFile_ = NULL;
@


1.29
log
@Minor revision.
@
text
@a21 5

#include <Parlex.h>
#include <SymTable.h>
#include <VecBS.h>
#include <Entity.h>
@


1.28
log
@Updated the copyright date on all source files.
@
text
@d64 1
a64 1
      myMsgFac () ("multiThreadReadDataSmsg");
@


1.27
log
@[error recovery]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.26
log
@Minor update.
@
text
@d60 9
d81 2
a97 5
   if (activeInstance_ != NULL)
      myMsgFac () ("multiThreadReadDataSmsg");

   activeInstance_ = this;

d127 1
a127 2
   inputFile_      = NULL;
   activeInstance_ = NULL;
@


1.25
log
@[error recovery]
@
text
@d55 5
d62 1
a62 1
      innerReadData (fileName);
d83 1
a83 1
void WitDataReader::innerReadData (const char * fileName)
a86 5
   myMsgFac () ("witFileParam", fileName);

   if (errorHasOccurred_)
      myMsgFac () ("postErrReadDataSmsg");

@


1.24
log
@[error recovery]
@
text
@d55 25
a127 19

//------------------------------------------------------------------------------

void WitDataReader::recordError ()
   {
   if (active ())
      {
      activeInstance_   = NULL;
      errorHasOccurred_ = true;
      }
   }

//------------------------------------------------------------------------------

bool WitDataReader::active ()
   {
   return (this == activeInstance_);
   }

@


1.23
log
@[error recovery]
@
text
@d109 2
d112 1
@


1.22
log
@Experiment for MS trouble with WitErrorExc.
@
text
@d31 2
a32 3
WitDataReader * WitDataReader::activeInstance_    = NULL;
bool            WitDataReader::anyReadDataActive_ = false;
bool            WitDataReader::errorHasOccurred_  = false;
d38 1
a38 1
      WitProbAssoc        (theProblem),
d40 2
a41 3
      thisReadDataActive_ (false),
      inputFileName_      (),
      inputFile_          (NULL)
d62 1
a62 1
   if (anyReadDataActive_)
d65 1
a65 5
   anyReadDataActive_ = true;

   stronglyAssert (not thisReadDataActive_);

   thisReadDataActive_ = true;
d96 2
a97 3
   inputFile_          = NULL;
   thisReadDataActive_ = false;
   anyReadDataActive_  = false;
d108 1
a108 1
   if (thisReadDataActive_)
d111 8
@


1.21
log
@[error recovery]
@
text
@d31 3
a33 2
bool WitDataReader::anyReadDataActive_ = false;
bool WitDataReader::errorHasOccurred_  = false;
@


1.20
log
@Made WIT's use of errno relatively thread-safe.
@
text
@d32 1
d38 1
a38 1
      WitProbAssoc   (theProblem),
d40 3
a42 3
      readingData_   (false),
      inputFileName_ (),
      inputFile_     (NULL)
d60 3
d68 1
a68 1
   stronglyAssert (not readingData_);
d70 1
a70 1
   readingData_ = true;
d101 3
a103 3
   inputFile_         = NULL;
   readingData_       = false;
   anyReadDataActive_ = false;
d109 8
@


1.19
log
@[multi-thread]
@
text
@d73 1
a73 1
         openFile (inputFileName_, "r");
@


1.18
log
@[multi-thread]
@
text
@d31 4
d38 1
d59 5
a64 2
      //
      // Recursive calls won't work.
d84 1
a84 1
   myMsgFac () ("witReadDataNotImplementedSmsg" );
a95 2
   inputFile_     = NULL;
   readingData_   = false;
d97 3
a99 1
   myMsgFac ().abortIfErrors ();
d102 2
@


1.17
log
@[exceptions]
@
text
@d32 2
a33 3
      myProblem_     (theProblem),
      myMsgFac_      (theProblem->myMsgFac ()),
      myApiMgr_      (theProblem->myApiMgr ()),
d67 2
a68 2
   myApiMgr_->myInputID ()->setDataFileName   (inputFileName_.myCstring ());
   myApiMgr_->myInputID ()->setDataFileLineNo (0);
d72 1
a72 1
   WitParser::parse (myProblem_, inputFileName_.myCstring (), inputFile_);
d80 2
a81 2
   myApiMgr_->myInputID ()->setDataFileName   (NULL);
   myApiMgr_->myInputID ()->setDataFileLineNo (0);
@


1.16
log
@[exceptions]
@
text
@d19 1
d68 2
a69 2
   myApiMgr_->myInputId ()->setDataFileName   (inputFileName_.myCstring ());
   myApiMgr_->myInputId ()->setDataFileLineNo (0);
d81 2
a82 2
   myApiMgr_->myInputId ()->setDataFileName   (NULL);
   myApiMgr_->myInputId ()->setDataFileLineNo (0);
@


1.15
log
@[exceptions]
@
text
@d26 1
a26 1
#include <witParse.h>
@


1.14
log
@[exceptions]
@
text
@a22 1
#include <witLexer.h>
@


1.13
log
@[exceptions]
@
text
@d86 1
a86 1
         myMsgFac () ("fcloseError", inputFileName_);
@


1.12
log
@Minor change.
@
text
@d68 2
a69 1
   setUpEnv ();
d81 2
a82 1
   restoreEnv ();
a95 24

//------------------------------------------------------------------------------

void WitDataReader::setUpEnv () const
   {
   myApiMgr_->myInputId ()->setDataFileName   (inputFileName_.myCstring ());
   myApiMgr_->myInputId ()->setDataFileLineNo (0);

      // Permit the invocation of internal api methods.
      //
   myApiMgr_->allowInternalApiMethodUse ();
   }

//------------------------------------------------------------------------------

void WitDataReader::restoreEnv () const
   {
   myApiMgr_->myInputId ()->setDataFileName   (NULL);
   myApiMgr_->myInputId ()->setDataFileLineNo (0);

      // Forbid the invocation of internal api methods.
      //
   myApiMgr_->noLongerAllowInternalApiMethodUse ();
   }
@


1.11
log
@Continued implementation of opt with COIN.
@
text
@a19 1
#include <wit.h>
@


1.10
log
@Internal changes.
@
text
@d52 1
a52 1
   WitTimingEvent theEvent ("input");
d56 1
a56 1
   witAssert (not readingData_);
d92 2
@


1.9
log
@Internal changes.
@
text
@d56 1
a56 1
   witAssert (! readingData_);
@


1.8
log
@Preliminary work on single source.
@
text
@d36 1
a36 1
      readingData_   (witFALSE),
d60 2
a61 1
   readingData_   = witTRUE;
d64 1
a64 1
   inputFile_     =
d89 1
a89 1
   readingData_   = witFALSE;
@


1.7
log
@Continued implementation of object iteration.
@
text
@d61 1
a61 1
   inputFileName_ = fileName;
d86 1
a86 1
   inputFileName_ = "";
@


1.6
log
@Began implementation of object iteration.
@
text
@d20 1
@


1.5
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d20 1
@


1.4
log
@Some minor changes.
@
text
@d66 1
a66 1
   setupEnv ();
d93 1
a93 1
void WitDataReader::setupEnv () const
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@a23 1
#include <Vector.h>
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d65 1
a65 1
         WitUtil::openFile (inputFileName_, "r");
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
