head	1.27;
access;
symbols
	sce_5_01_20080919:1.23;
locks; strict;
comment	@ * @;


1.27
date	2011.09.28.23.50.07;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.09.24.00.28.33;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.08.30.20.18.07;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.08.19.18.00.14;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.03.03.22.35.43;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.02.28.00.00.43;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.02.27.23.19.11;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.20.15.42.22;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.02.14.19.19.26;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.02.14.19.16.17;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.02.13.23.22.23;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.02.12.22.04.04;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.02.07.21.49.35;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.02.07.18.41.39;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.02.01.21.33.06;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.01.31.20.41.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.30.22.25.42;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.01.25.00.19.22;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.01.24.19.29.36;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.23.21.13.47;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.01.18.22.40.59;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.01.18.20.56.44;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.22.19.58.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.10.21.01.34;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.29.22.28.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.29.16.24.23;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.24.22.14.00;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ScenGroupH
#define ScenGroupH

//------------------------------------------------------------------------------
// Header file: "ScenGroup.h"
//
// Contains the declaration of class ScenGroup.
//------------------------------------------------------------------------------

#include <StochAssoc.h>
#include <List.h>
#include <PtrTVec.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class ScenGroup
//
// "Scenario Group"
// Represents a group of Scenarios.
// A ScenGroup is considered to belong to one of the two stages:
//    If it belongs to stage 0, then it represents the set of all Scenarios.
//    If it belongs to stage 1, then it represents one particular Scenario.
//
// Class hierarchy:
//
//    ProbAssoc
//       StochAssoc
//          ScenGroup
//
// Implemented in StochOpt.C.
//------------------------------------------------------------------------------

class WitScenGroup: public WitStochAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenGroup (WitStochImpOP *, WitStage *, const WitList <WitScenario> &);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenGroup ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void postGenFlexible ();
         //
         // Takes actions appropriate at the conclusion of generateFlexible ().

      void print ();
         //
         // Prints this ScenGroup to the OptProblem file.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc  (WitStochImpOP *,                         myStochImpOP)
      accessFunc  (WitStage *,                              myStage)
      accessFunc  (const WitList <WitScenario> &,           myScenarios)
      accessFunc  (double,                                  totalProb)
      accessFunc  (const WitList <WitStochLoc> &,           myStochLocs)
      accessFunc2 (const WitSchedule <WitDemand, double> &, cumDemandVol)

      inline WitStochLoc * myStochLocFor (WitPeriod thePer)
         {
         witAssert (myStochLocVec_[thePer] != NULL);

         return myStochLocVec_[thePer];
         }

      inline WitScenario * firstScenario ()
         {
         return myScenarios_.first ();
         }

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void compCumDemandVol ();
         //
         // Computes cumDemandVol_.

      noCopyCtorAssign (WitScenGroup);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochImpOP * const myStochImpOP_;
         //
         // The StochImpOP that owns this ScenGroup.

      WitStage * const myStage_;
         //
         // The stage to which this ScenGroup belongs.

      WitList <WitScenario> myScenarios_;
         //
         // The group of Scenarios that this ScenGroup represents.

      double totalProb_;
         //
         // The sum of the probabilities of the Scenarios represented by this
         // ScenGroup.

      WitPtrTVec <WitStochLoc> myStochLocVec_;
         //
         // myStochLocVec_[thePer] is the StochLoc owned by this ScenGroup for
         // this ScenGroup and thePer, if any; otherwise NULL.

      WitList <WitStochLoc> myStochLocs_;
         //
         // StochLocs owned by this ScenGroup.

      WitSchedule <WitDemand, double> cumDemandVol_;
         //
         // cumDemandVol_ (theDemand)[thePer] is the cumulative demand for
         // theDemand in thePer in this ScenGroup.
         // Allocated only during opt problem generation.
   };

#endif
@


1.26
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.25
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d43 2
a44 61
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitScenGroup (WitStochImpOP *, WitStage *, const WitList <WitScenario> &);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitScenGroup ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void postGenFlexible ();
//
// Takes actions appropriate at the conclusion of generateFlexible ().

void print ();
//
// Prints this ScenGroup to the OptProblem file.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc  (WitStochImpOP *,                         myStochImpOP)
accessFunc  (WitStage *,                              myStage)
accessFunc  (const WitList <WitScenario> &,           myScenarios)
accessFunc  (double,                                  totalProb)
accessFunc  (const WitList <WitStochLoc> &,           myStochLocs)
accessFunc2 (const WitSchedule <WitDemand, double> &, cumDemandVol)

inline WitStochLoc * myStochLocFor (WitPeriod thePer)
{
witAssert (myStochLocVec_[thePer] != NULL);

return myStochLocVec_[thePer];
}

inline WitScenario * firstScenario ()
{
return myScenarios_.first ();
}

private:

//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------

void compCumDemandVol ();
//
// Computes cumDemandVol_.

noCopyCtorAssign (WitScenGroup);
d46 95
a140 36
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitStochImpOP * const myStochImpOP_;
//
// The StochImpOP that owns this ScenGroup.

WitStage * const myStage_;
//
// The stage to which this ScenGroup belongs.

WitList <WitScenario> myScenarios_;
//
// The group of Scenarios that this ScenGroup represents.

double totalProb_;
//
// The sum of the probabilities of the Scenarios represented by this
// ScenGroup.

WitPtrTVec <WitStochLoc> myStochLocVec_;
//
// myStochLocVec_[thePer] is the StochLoc owned by this ScenGroup for
// this ScenGroup and thePer, if any; otherwise NULL.

WitList <WitStochLoc> myStochLocs_;
//
// StochLocs owned by this ScenGroup.

WitSchedule <WitDemand, double> cumDemandVol_;
//
// cumDemandVol_ (theDemand)[thePer] is the cumulative demand for
// theDemand in thePer in this ScenGroup.
// Allocated only during opt problem generation.
};
@


1.24
log
@CPLEX
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d43 61
a103 2
   {
   public:
d105 36
a140 95
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenGroup (WitStochImpOP *, WitStage *, const WitList <WitScenario> &);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenGroup ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void postGenFlexible ();
         //
         // Takes actions appropriate at the conclusion of generateFlexible ().

      void print ();
         //
         // Prints this ScenGroup to the OptProblem file.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc  (WitStochImpOP *,                         myStochImpOP)
      accessFunc  (WitStage *,                              myStage)
      accessFunc  (const WitList <WitScenario> &,           myScenarios)
      accessFunc  (double,                                  totalProb)
      accessFunc  (const WitList <WitStochLoc> &,           myStochLocs)
      accessFunc2 (const WitSchedule <WitDemand, double> &, cumDemandVol)

      inline WitStochLoc * myStochLocFor (WitPeriod thePer)
         {
         witAssert (myStochLocVec_[thePer] != NULL);

         return myStochLocVec_[thePer];
         }

      inline WitScenario * firstScenario ()
         {
         return myScenarios_.first ();
         }

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void compCumDemandVol ();
         //
         // Computes cumDemandVol_.

      noCopyCtorAssign (WitScenGroup);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochImpOP * const myStochImpOP_;
         //
         // The StochImpOP that owns this ScenGroup.

      WitStage * const myStage_;
         //
         // The stage to which this ScenGroup belongs.

      WitList <WitScenario> myScenarios_;
         //
         // The group of Scenarios that this ScenGroup represents.

      double totalProb_;
         //
         // The sum of the probabilities of the Scenarios represented by this
         // ScenGroup.

      WitPtrTVec <WitStochLoc> myStochLocVec_;
         //
         // myStochLocVec_[thePer] is the StochLoc owned by this ScenGroup for
         // this ScenGroup and thePer, if any; otherwise NULL.

      WitList <WitStochLoc> myStochLocs_;
         //
         // StochLocs owned by this ScenGroup.

      WitSchedule <WitDemand, double> cumDemandVol_;
         //
         // cumDemandVol_ (theDemand)[thePer] is the cumulative demand for
         // theDemand in thePer in this ScenGroup.
         // Allocated only during opt problem generation.
   };
@


1.23
log
@Stochastic Implosion
@
text
@d50 1
a50 1
      WitScenGroup (WitStochImpOM *, WitStage *, const WitList <WitScenario> &);
d68 1
a68 1
         // Prints this ScenGroup to the OptModel file.
d74 1
a74 1
      accessFunc  (WitStochImpOM *,                         myStochImpOM)
d109 1
a109 1
      WitStochImpOM * const myStochImpOM_;
d111 1
a111 1
         // The StochImpOM that owns this ScenGroup.
d139 1
a139 1
         // Allocated only during opt model generation.
@


1.22
log
@Stochastic Implosion
@
text
@d139 1
a139 1
         // Allocated only during opt problem generation.
@


1.21
log
@Stochastic Implosion
@
text
@d50 1
a50 1
      WitScenGroup (WitStochImpOP *, WitStage *, const WitList <WitScenario> &);
d74 1
a74 1
      accessFunc  (WitStochImpOP *,                         myStochImpOP)
d109 1
a109 1
      WitStochImpOP * const myStochImpOP_;
d111 1
a111 1
         // The StochImpOP that owns this ScenGroup.
@


1.20
log
@Stochastic Implosion
@
text
@d68 1
a68 1
         // Prints this ScenGroup to the OptProb file.
@


1.19
log
@Stochastic Implosion
@
text
@d90 1
a90 1
         myScenarios_.first ();
@


1.18
log
@Stochastic Implosion
@
text
@a76 1
      accessFunc  (WitScenario *,                           firstScenario)
d88 5
a120 4
      WitScenario * const firstScenario_;
         //
         // The first Scenario that this ScenGroup represents.

@


1.17
log
@Stochastic Implosion
@
text
@d50 1
a50 7
      WitScenGroup (WitStochImpOP *);
         //
         // Constructs a ScenGroup for stage 0.

      WitScenGroup (WitStochImpOP *, WitScenario * theScenario);
         //
         // Constructs a ScenGroup for stage 1 and theScenario.
a94 4
      void setUp ();
         //
         // Sets up this ScenGroup at construction time.

d117 1
a117 1
      WitScenario * firstScenario_;
@


1.16
log
@Stochastic Implosion
@
text
@d139 1
a139 1
         // this ScenGroup and thePer.
@


1.15
log
@Stochastic Implosion
@
text
@a67 5
      WitStochLoc * findStochLocForVar (WitNode * theNode, WitPeriod thePer);
         //
         // Returns the StochLoc for any StochVar for theNode and thePer that is
         // to have Coeffs in a StochCon for this ScenGroup.

@


1.14
log
@Stochastic Implosion
@
text
@d47 1
a47 1
      // Quasi constructor functions.
d50 1
a50 1
      static WitScenGroup * newStage0ScenGroup (WitStochImpOP * theStochImpOP);
d52 1
a52 2
         // Constructs and returns a new ScenGroup for stage 0, associated with
         // theStochImpOP.
d54 1
a54 3
      static WitScenGroup * newStage1ScenGroup (
            WitStochImpOP * theStochImpOP,
            WitScenario *   theScenario);
d56 1
a56 2
         // Constructs and returns a new ScenGroup for stage 1, associated with
         // theStochImpOP and theScenario.
d86 1
a86 1
      accessFunc  (int,                                     myStageIdx)
a102 6
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenGroup (WitStochImpOP * theStochImpOP, int theStageIdx);

      //------------------------------------------------------------------------
d124 1
a124 1
      const int myStageIdx_;
d126 1
a126 1
         // The index of the stage to which this ScenGroup belongs.
@


1.13
log
@Stochastic Implosion
@
text
@d90 1
a90 1
      accessFunc  (int,                                     myStage)
d110 1
a110 1
      WitScenGroup (WitStochImpOP * theStochImpOP, int theStage);
d134 1
a134 1
      const int myStage_;
d136 1
a136 1
         // The stage to which this ScenGroup belongs.
@


1.12
log
@Stochastic Implosion
@
text
@d72 5
@


1.11
log
@Stochastic Implosion
@
text
@d89 1
d94 1
a94 1
         witAssert (myStochLocs_[thePer] != NULL);
d96 1
a96 1
         return myStochLocs_[thePer];
d146 1
a146 1
      WitPtrTVec <WitStochLoc> myStochLocs_;
d148 1
a148 1
         // myStochLocs_[thePer] is the StochLoc owned by this ScenGroup for
d151 4
@


1.10
log
@Stochastic Implosion
@
text
@d93 2
@


1.9
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <Assoc.h>
d31 9
a39 1
//    If it belongs to stage 1, then it represents a particular Scenario.
d42 1
a42 1
class WitScenGroup: public WitProbAssoc
a71 4
      bool myStageIntersects (WitNode * theNode);
         //
         // Returns true, iff myStage_ intersects theNode.

d85 1
a129 4
      WitStageMgr * myStageMgr_;
         //
         // The StageMgr for this ScenGroup.

@


1.8
log
@Stochastic Implosion
@
text
@d39 1
a39 1
      // Constructor functions.
d42 11
a52 8
      WitScenGroup (
            int             theStage,
            WitScenario *   theScenario,
            WitStochImpOP * theStochImpOP);
         //
         // Requirements:
         //    Either theStage == 0 and theScenario is     NULL
         //    or     theStage == 1 and theScenario is non-NULL.
d94 1
a94 1
      // Private member functions.
d97 10
@


1.7
log
@Stochastic Implosion
@
text
@d61 4
a77 1
      accessFunc  (int,                                     myStage)
d112 4
@


1.6
log
@Stochastic Implosion
@
text
@d30 2
a31 4
//    If it belongs to the planning stage,
//       then it represents the set of all Scenarios.
//    If it belongs to the recourse stage,
//       then it represents a particular Scenario.
d43 1
a43 1
            int             stageIndexVal,
d48 2
a49 2
         //    Either stageIndexVal == 0 and theScenario is     NULL
         //    or     stageIndexVal == 1 and theScenario is non-NULL.
d74 1
a74 1
      accessFunc  (int,                                     myStageIndex)
d105 1
a105 1
      const int myStageIndex_;
d107 1
a107 1
         // Indicates the stage to which this ScenGroup belongs.
@


1.5
log
@Stochastic Implosion
@
text
@d76 1
a76 1
      accessFunc  (int,                                     stageIndex)
d107 1
a107 1
      const int stageIndex_;
@


1.4
log
@Stochastic Implosion
@
text
@d45 1
a45 1
            int             stageNoVal,
d50 2
a51 2
         //    Either stageNoVal == 0 and theScenario is     NULL
         //    or     stageNoVal == 1 and theScenario is non-NULL.
d76 1
a76 1
      accessFunc  (int,                                     stageNo)
d107 1
a107 1
      const int stageNo_;
@


1.3
log
@Stochastic Implosion
@
text
@d22 1
d63 4
d75 6
a80 5
      accessFunc (WitStochImpOP *,               myStochImpOP)
      accessFunc (int,                           stageNo)
      accessFunc (const WitList <WitScenario> &, myScenarios)
      accessFunc (WitScenario *,                 firstScenario)
      accessFunc (double,                        totalProb)
d93 4
d128 6
@


1.2
log
@Stochastic Implosion
@
text
@d43 8
a50 7
      WitScenGroup (WitStochImpOP *);
         //
         // Constructs a planning stage ScenGroup.

      WitScenGroup (WitScenario *, WitStochImpOP *);
         //
         // Constructs a recourse stage ScenGroup.
d71 1
a86 4
      void setUp ();
         //
         // Sets up this ScenGroup.

@


1.1
log
@Stochastic Implosion
@
text
@d99 1
a99 1
      const bool recourseStage_;
d101 1
a101 2
         // If true,  this ScenGroup belongs to the recourse stage.
         // If false, this ScenGroup belongs to the planning stage.
@

