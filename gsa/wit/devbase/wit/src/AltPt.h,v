head	1.30;
access;
symbols
	sce_5_01_20080919:1.23
	latest_sce_4_20_20060523:1.23.0.2
	sce_4_20_20060523:1.23
	latest_sce4_20_OSL:1.22.0.2
	sce_4_20_OSL:1.22
	sce_410_withVa:1.22
	EndRw-branch:1.16.0.8
	Root-of-EndRw:1.16
	rwToStl:1.16.0.6
	latest_sce_3_10_20010924:1.16.0.4
	sce_3_10_20010924:1.16
	latest_sce_3_00_20010601:1.16.0.2
	sce_3_00_20010601:1.16
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2011.09.28.23.49.00;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.09.24.00.27.17;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.08.30.20.17.14;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.30.20.20.12;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.07.29.21.03.11;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.07.28.19.27.45;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.29.19.56.41;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.05.02.17.33.53;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.01.15.00.20.07;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.01.13.17.24.20;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.01.06.20.34.08;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.28.22.34.26;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.28.19.21.18;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.03.23.26.36;	author rjw;	state dead;
branches;
next	1.16;

1.16
date	2001.05.10.22.31.10;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.08.21.35.43;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.04.30.21.29.40;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.26.21.25.43;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.10.21.59.33;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.06.23.23.51;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.06.19.22.07;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.03.19.23.03;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.23.19.43.23;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.20.21.03.56;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.12.19.48.02;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.20.00.44.14;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.36;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.18;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.14;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef AltPtH
#define AltPtH

//------------------------------------------------------------------------------
// Header file: "AltPt.h"
//
// Contains the declaration of class AltPt.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class AltPt
//
// "Selection Alteration Point"
// Represents a point in the problem at which selection configuration can be
// altered.
//
// Class Hierarchy:
//
// AltPt
//    DetAltPt
//    PrAltPt
//
// Implemented in Selection.C.
//------------------------------------------------------------------------------

class WitAltPt
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitAltPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool hasResAlt () = 0;
         //
         // Returns true, iff the selection configuration can be altered at this
         // AltPt in shortage-resolving manner.

      virtual void alterSelection () = 0;
         //
         // Alters the selection configuration at this AltPt.

      virtual void storeRecoveryPt () = 0;
         //
         // Records the fact that the selection configuration is being altered
         // at this AltPt.
         // Used for selection recovery.

      virtual void tempAlterSel () = 0;
         //
         // Temporarily alters the selection configuration at this AltPt.

      virtual void cancelTempAlt () = 0;
         //
         // Undoes tempAlterSel ().

      virtual WitSelPt * mySelPt () = 0;
         //
         // Returns the SelPt whose selection would be altered at the point in
         // the problem represented by this AltPt.

      virtual void printAlteration () = 0;
         //
         // Prints the alteration of the selection configuration at this AltPt.

      void setPending (bool);
         //
         // "Set" function for pending_.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, pending)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAltPt ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAltPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool pending_;
         //
         // true, iff the configuration is to be altered at this AltPt.
   };

#endif
@


1.29
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.28
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d38 2
a39 2
{
public:
d41 3
a43 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d45 1
a45 1
virtual ~WitAltPt ();
d47 3
a49 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d51 4
a54 4
virtual bool hasResAlt () = 0;
//
// Returns true, iff the selection configuration can be altered at this
// AltPt in shortage-resolving manner.
d56 3
a58 3
virtual void alterSelection () = 0;
//
// Alters the selection configuration at this AltPt.
d60 5
a64 5
virtual void storeRecoveryPt () = 0;
//
// Records the fact that the selection configuration is being altered
// at this AltPt.
// Used for selection recovery.
d66 3
a68 3
virtual void tempAlterSel () = 0;
//
// Temporarily alters the selection configuration at this AltPt.
d70 3
a72 3
virtual void cancelTempAlt () = 0;
//
// Undoes tempAlterSel ().
d74 4
a77 4
virtual WitSelPt * mySelPt () = 0;
//
// Returns the SelPt whose selection would be altered at the point in
// the problem represented by this AltPt.
d79 3
a81 3
virtual void printAlteration () = 0;
//
// Prints the alteration of the selection configuration at this AltPt.
d83 3
a85 3
void setPending (bool);
//
// "Set" function for pending_.
d87 3
a89 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d91 1
a91 1
accessFunc (bool, pending)
d93 1
a93 1
protected:
d95 3
a97 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d99 1
a99 1
WitAltPt ();
d101 1
a101 1
private:
d103 3
a105 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d107 1
a107 1
noCopyCtorAssign (WitAltPt);
d109 3
a111 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d113 4
a116 4
bool pending_;
//
// true, iff the configuration is to be altered at this AltPt.
};
@


1.27
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d38 2
a39 2
   {
   public:
d41 3
a43 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d45 1
a45 1
      virtual ~WitAltPt ();
d47 3
a49 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d51 4
a54 4
      virtual bool hasResAlt () = 0;
         //
         // Returns true, iff the selection configuration can be altered at this
         // AltPt in shortage-resolving manner.
d56 3
a58 3
      virtual void alterSelection () = 0;
         //
         // Alters the selection configuration at this AltPt.
d60 5
a64 5
      virtual void storeRecoveryPt () = 0;
         //
         // Records the fact that the selection configuration is being altered
         // at this AltPt.
         // Used for selection recovery.
d66 3
a68 3
      virtual void tempAlterSel () = 0;
         //
         // Temporarily alters the selection configuration at this AltPt.
d70 3
a72 3
      virtual void cancelTempAlt () = 0;
         //
         // Undoes tempAlterSel ().
d74 4
a77 4
      virtual WitSelPt * mySelPt () = 0;
         //
         // Returns the SelPt whose selection would be altered at the point in
         // the problem represented by this AltPt.
d79 3
a81 3
      virtual void printAlteration () = 0;
         //
         // Prints the alteration of the selection configuration at this AltPt.
d83 3
a85 3
      void setPending (bool);
         //
         // "Set" function for pending_.
d87 3
a89 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d91 1
a91 1
      accessFunc (bool, pending)
d93 1
a93 1
   protected:
d95 3
a97 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d99 1
a99 1
      WitAltPt ();
d101 1
a101 1
   private:
d103 3
a105 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d107 1
a107 1
      noCopyCtorAssign (WitAltPt);
d109 3
a111 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d113 4
a116 4
      bool pending_;
         //
         // true, iff the configuration is to be altered at this AltPt.
   };
@


1.26
log
@Selection Recovery
@
text
@d60 1
a60 1
      virtual void recAltForRecovery () = 0;
@


1.25
log
@Selection Recovery
@
text
@d60 1
a60 1
      virtual void recordAlteration () = 0;
@


1.24
log
@Selection Reuse.
@
text
@d60 6
@


1.23
log
@Updated the copyright date on all source files.
@
text
@d34 1
a34 1
// Implemented in MultiSel.C.
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d73 4
@


1.20
log
@Low-Pri Prop-Rt.
@
text
@d64 1
a64 1
      virtual void cancelTempAlt (WitSelCand * theSelCand) = 0;
a66 7
         // If the derived, class needs it, theSelCand is used to restore the
         // previous selection.

      virtual bool cancelNeedsSelCand () = 0;
         //
         // Returns true, iff the SelCand passed to cancelTempAlt () needs to be
         // non-NULL.
@


1.19
log
@Low-Pri Prop-Rt.
@
text
@d64 11
@


1.18
log
@Low-Pri Prop-Rt.
@
text
@d51 5
d58 1
a58 2
         // Alters the selection configuration in the manner represented by this
         // AltPt.
d62 1
a62 2
         // Temporarily alters the selection configuration in the manner
         // represented by this AltPt.
d66 2
a67 1
         // The SelPt at which this AltPt represents selection alteration.
@


1.17
log
@Removed all empty files from WIT (64 of them).
@
text
@d1 100
@


1.16
log
@Renamed AltPt classes to SelPt classes.
@
text
@@


1.15
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@a0 117
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef AltPtH
#define AltPtH

//------------------------------------------------------------------------------
// Header file: "AltPt.h"
//
// Contains the declaration of class AltPt.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------

typedef int WitCandIndex;
   //
   // An index into a candidate vector of MrPart or MrBomEnt.

//------------------------------------------------------------------------------
// Class AltPt
//
// "Alteration Point"
// Represents a point at which the selection scheme can be altered.
//
// Class Hierarchy:
//
// AltPt
//    PmrAltPt
//    CmrAltPt
//    BaAltPt
//    MeAltPt
//
// Implemented in MultiSel.C.
//------------------------------------------------------------------------------

class WitAltPt: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAltPt ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitAltPt ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBoolean, pending)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setPending (WitBoolean);
         //
         // "Set" function for pending_.

      virtual void alterSelection () = 0;
         //
         // Alters the selection for this AltPt.
         // Base class function.

      virtual void splitSelection (double splitBound) = 0;
         //
         // Splits the selection for this AltPt.
         // Base class function.

      virtual void printSelection () = 0;
         //
         // Prints the selection for this AltPt.
         // Base class function.

      virtual WitSelMgr * mySelMgr (WitSelector * theSelector) = 0;
         //
         // Returns the SelMgr owned by theSelector corresponding to this AltPt.
         // Base class function.

      virtual WitBoolean splittable () = 0;
         //
         // Returns TRUE, iff this AltPt belongs to a class of AltPts for which
         // selection splitting has been implemented.
         // Base class function.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAltPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBoolean pending_;
         //
         // TRUE, iff the selection scheme is to be altered at this AltPt.
   };

#endif
@


1.14
log
@Fixed uninitialized memory bugs.
Refactoring for selection splitting.
@
text
@d39 1
a39 1
//    MeSelPt
@


1.13
log
@Refactoring for selection splitting.
@
text
@d39 1
a39 1
//    MeAltPt
@


1.12
log
@Continuing development of selection splitting.
@
text
@d25 1
a25 1
   // An index into a candidate vector of a derived class of MrComp.
d36 2
a37 1
//    MrAltPt
@


1.11
log
@Continuing development of selection splitting.
@
text
@d40 1
a40 1
// Implemented in Selector.C.
@


1.10
log
@Re-worked the controls for selection splitting.
@
text
@d93 6
@


1.9
log
@Continued implementation of selection splitting.
@
text
@a92 9
      inline WitBoolean splittable ()
         {
         return (splitRes () > 0.0);
         }

      virtual float splitRes () = 0;
         //
         // Returns the split resolution for this AltPt.

@


1.8
log
@Continued implementation of selection splitting with the new design.
@
text
@d88 5
@


1.7
log
@Continued implementation of selection splitting with the new design.
@
text
@d83 1
a83 1
      virtual void printSelection (WitSelector * theSelector) = 0;
a85 1
         // theSelector should be the Selector under which this AltPt operates.
@


1.6
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d78 5
@


1.5
log
@Implemented and used class SelMgr.
@
text
@d84 9
@


1.4
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <RWClient.h>
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d90 1
a90 3
      copyCtorAndAssignment (WitAltPt);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d43 1
a43 1
class WitAltPt
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
