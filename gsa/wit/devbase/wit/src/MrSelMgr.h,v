head	1.24;
access;
symbols
	sce_5_01_20080919:1.15
	latest_sce_4_20_20060523:1.15.0.2
	sce_4_20_20060523:1.15
	latest_sce4_20_OSL:1.14.0.2
	sce_4_20_OSL:1.14
	sce_410_withVa:1.14
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.8
	nextGenBranch:1.8.0.2
	nextGenRoot:1.8
	sce_3_30_20030627:1.8;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.49.34;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.27.54;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.17.39;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.07.26.21.47.11;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.07.26.17.48.44;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.07.16.22.26.41;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.07.02.18.53.10;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.07.01.20.51.32;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.18.23.11.15;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.02.17.34.02;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.28.19.21.18;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.21.22.13.48;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.17.21.53.00;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.14.22.37.10;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.10.16.49.43;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.09.19.22.50;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.29.14.27.47;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.15.20.50.11;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.11.19.08.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.01.20.34.28;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.21.23.36.52;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2003.03.21.21.35.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.20.19.03.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.19.16.48.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MrSelMgrH
#define MrSelMgrH

//------------------------------------------------------------------------------
// Header file: "MrSelMgr.h"
//
// Contains the declaration of the following classes:
//
//    MrSelMgr.
//    PmrSelMgr.
//    CmrSelMgr.
//------------------------------------------------------------------------------

#include <SelMgr.h>
#include <PtrMap.h>

//------------------------------------------------------------------------------
// Class MrSelMgr
//
// "Multi-Route Selection Manager"
// Selection Manager for one of the two cases of Multi-Route.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelMgr
//       MrSelMgr
//          PmrSelMgr
//          CmrSelMgr
//
// Implemented in MultiRoute.C.
//------------------------------------------------------------------------------

class WitMrSelMgr: public WitSelMgr
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMrSelMgr ();

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrSelMgr (WitMrCoord *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMrCoord *, myMrCoord)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual bool selSplitNeeded ();
         //
         // Overrides from class SelMgr.

      noCopyCtorAssign (WitMrSelMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrCoord * const myMrCoord_;
         //
         // The MrCoord that owns this MrSelMgr.
   };

//------------------------------------------------------------------------------
// Class PmrSelMgr
//
// "Production Multi-Route Selection Manager"
// Selection Manager for the production case of Multi-Route.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelMgr
//       MrSelMgr
//          PmrSelMgr
//
// Implemented in MrMgr.C.
//------------------------------------------------------------------------------

class WitPmrSelMgr: public WitMrSelMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrSelMgr (WitMrCoord *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPmrSelMgr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.

      noCopyCtorAssign (WitPmrSelMgr);
   };

//------------------------------------------------------------------------------
// Class CmrSelMgr
//
// "Consumption Multi-Route Selection Manager"
// Selection Manager for the consumption case of Multi-Route.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelMgr
//       MrSelMgr
//          CmrSelMgr
//
// Implemented in MrMgr.C.
//------------------------------------------------------------------------------

class WitCmrSelMgr: public WitMrSelMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrSelMgr (WitMrCoord *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCmrSelMgr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.

      noCopyCtorAssign (WitCmrSelMgr);
   };

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d44 2
a45 2
{
public:
d47 3
a49 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d51 1
a51 1
virtual ~WitMrSelMgr ();
d53 1
a53 1
protected:
d55 3
a57 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d59 1
a59 1
WitMrSelMgr (WitMrCoord *);
d61 3
a63 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d65 1
a65 1
accessFunc (WitMrCoord *, myMrCoord)
d67 1
a67 1
private:
d69 3
a71 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d73 3
a75 3
virtual bool selSplitNeeded ();
//
// Overrides from class SelMgr.
d77 1
a77 1
noCopyCtorAssign (WitMrSelMgr);
d79 3
a81 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d83 4
a86 4
WitMrCoord * const myMrCoord_;
//
// The MrCoord that owns this MrSelMgr.
};
d105 2
a106 8
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPmrSelMgr (WitMrCoord *);
d108 28
a135 1
private:
d137 2
a138 23
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitPmrSelMgr ();

//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------

virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
WitConsEntry *,
WitPeriod,
WitPeriod);
virtual bool         validForNetting    ();
virtual bool         validForExecBounds ();
virtual bool         validForLTBounds   ();
virtual const char * selCaseName        ();
//
// Overrides from class SelMgr.

noCopyCtorAssign (WitPmrSelMgr);
};
d157 2
a158 10
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitCmrSelMgr (WitMrCoord *);

private:
d160 28
a187 20
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitCmrSelMgr ();

//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------

virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
WitConsEntry *,
WitPeriod,
WitPeriod);
virtual bool         validForNetting    ();
virtual bool         validForExecBounds ();
virtual bool         validForLTBounds   ();
virtual const char * selCaseName        ();
//
// Overrides from class SelMgr.
d189 2
a190 2
noCopyCtorAssign (WitCmrSelMgr);
};
@


1.21
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d44 2
a45 2
   {
   public:
d47 3
a49 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d51 1
a51 1
      virtual ~WitMrSelMgr ();
d53 1
a53 1
   protected:
d55 3
a57 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d59 1
a59 1
      WitMrSelMgr (WitMrCoord *);
d61 3
a63 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d65 1
a65 1
      accessFunc (WitMrCoord *, myMrCoord)
d67 1
a67 1
   private:
d69 3
a71 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d73 3
a75 3
      virtual bool selSplitNeeded ();
         //
         // Overrides from class SelMgr.
d77 1
a77 1
      noCopyCtorAssign (WitMrSelMgr);
d79 3
a81 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d83 4
a86 4
      WitMrCoord * const myMrCoord_;
         //
         // The MrCoord that owns this MrSelMgr.
   };
d105 8
a112 2
   {
   public:
d114 1
a114 28
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrSelMgr (WitMrCoord *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPmrSelMgr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.
d116 23
a138 2
      noCopyCtorAssign (WitPmrSelMgr);
   };
d157 10
a166 2
   {
   public:
d168 20
a187 28
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrSelMgr (WitMrCoord *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCmrSelMgr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAltPt *   myAltPtFor         (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual bool         validForLTBounds   ();
      virtual const char * selCaseName        ();
         //
         // Overrides from class SelMgr.
d189 2
a190 2
      noCopyCtorAssign (WitCmrSelMgr);
   };
@


1.20
log
@Selection Recovery.
@
text
@a136 5
      virtual void specSelRecoverO ();
         //
         // Override from class SelMgr.
         // Applies to both production and consumption multi-route.

@


1.19
log
@Selection Recovery
@
text
@a141 5
      virtual void recoverSelections ();
         //
         // Override from class SelMgr.
         // Applies to both production and consumption multi-route.

a193 6
      virtual void recoverSelections ();
         //
         // Override from class SelMgr.
         // This is a no-op.
         // The PmrSelMgr implementation covers both cases.

@


1.18
log
@Selection recovery.
@
text
@d137 6
a142 1
      virtual void specSelRecovery ();
d199 6
@


1.17
log
@Selection Reuse
@
text
@d137 1
a137 1
      virtual void restoreSpecConfig ();
@


1.16
log
@Lead Time Bounds
@
text
@d137 5
@


1.15
log
@Updated the copyright date on all source files.
@
text
@d132 1
d184 1
@


1.14
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.13
log
@Low-Pri Prop-Rt.
@
text
@d126 1
a126 1
      virtual WitSelAlt *  mySelAltFor        (WitBopEntry *,
d177 1
a177 1
      virtual WitSelAlt *  mySelAltFor        (WitBopEntry *,
@


1.12
log
@Low-Pri Prop-Rt.
@
text
@d126 1
a126 1
      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
d177 1
a177 1
      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
@


1.11
log
@Low-Pri Prop-Rt.
@
text
@d73 1
a73 2
      virtual WitSelCand * newSelCand     ();
      virtual bool         selSplitNeeded ();
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@d73 2
a74 1
      virtual bool selSplitNeeded ();
d76 1
a76 1
         // Override from class SelMgr.
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@d70 1
a70 1
      // Overrides from class SelMgr.
d74 2
a75 4

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d123 1
a123 1
      // Overrides from class SelMgr.
d133 2
a134 4

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d174 1
a174 1
      // Overrides from class SelMgr.
d184 2
a185 4

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d40 1
a40 1
// Implemented in MrMgr.C.
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@a52 12
      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      void recordFlowSS (
            WitRtCand * theRtCand,
            WitPeriod   thePer,
            double      incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through theRtCand in thePer, for sel-split purposes.

@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d57 2
a58 2
      void recExpRtSiteSS (
            WitRtSite * theRtSite,
d62 2
a63 2
         // Records the fact that incFlowVol additional units are being exploded
         // through theRtSite in thePer, for sel-split purposes.
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@a56 7
      void startSplitExp (
            WitRtSite * theRtSite, 
            WitPeriod   thePer,
            double      expVol);

      bool findNextSplit (WitRtCand * & theRtCand, double & splitExpVol);

@


1.4
log
@Continued implementation of propotionate routing.
@
text
@d29 2
a30 2
// Multi-Route Selection Manager.
// Base class for an interface to the multi-route subsystem.
d45 1
a45 7
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrSelMgr (WitMrCoord *);
d57 1
a57 1
      void startSplitExpMR (
d62 1
a62 1
      bool findNextSplitMR (WitRtCand * & theRtCand, double & splitExpVol);
d72 8
d112 2
a113 2
// Production Multi-Route Selection Manager.
// Production case interface to the multi-route subsystem.
d135 2
a143 32
      // Other public member functions.
      //------------------------------------------------------------------------

      WitBopEntry * selBopEnt (WitPart * thePart, WitPeriod expPer);
         //
         // Returns the currently selected BopEnt to be used when exploding thru
         // thePart in expPer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      void startSplitExp (
            WitPart * thePart, 
            WitPeriod expPer,
            double    expVol);

      bool findNextSplit (WitBopEntry * & theBopEnt, double & splitExpVol);

      bool selIsSplit (WitPart * thePart, WitPeriod expPer);

      void recExpPartSS (
            WitPart * thePart,
            WitPeriod expPer,
            double    expVol);
         //
         // Records the fact that expVol units were exploded thru thePart in
         // expPer.

   private:

      //------------------------------------------------------------------------
d165 2
a166 2
// Consumption Multi-Route Selection Manager.
// Consumption case interface to the multi-route subsystem.
d188 2
a194 32

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitConsEntry * selConsEnt (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Returns the currently selected ConsEnt to be used when exploding
         // thru theBomEnt in execPer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      void startSplitExp (
            WitBomEntry * theBomEnt, 
            WitPeriod     execPer,
            double        execVolVal);

      bool findNextSplit (WitConsEntry * & theConsEnt, double & splitExecVol);

      bool selIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer);

      void recExpBomEntSS (
            WitBomEntry * theBomsEnt, 
            WitPeriod     execPer, 
            double        deltaExecVol);
         //
         // Records the fact deltaExecVol units were exploded thru theBomEnt in
         // execPer.

   private:
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@@


1.2
log
@Continued implementation of proportionate routing.
@
text
@a147 8
      void findExpBopEnts (
            WitPart *        thePart,
            WitPeriod        expPer,
            WitBopEntStack & theBopEnts);
         //
         // Sets theBopEnts to be the set of BopEnts currently under
         // consideration for explosion from thePart in expPer.

a229 8

      void findExpConsEnts (
            WitBomEntry *     theBomEnt,
            WitPeriod         execPer,
            WitConsEntStack & theConsEnts);
         //
         // Sets theConsEnts to be the set of ConsEnts currently under
         // consideration for explosion from theBomEnt in execPer.
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d148 8
d238 8
@

