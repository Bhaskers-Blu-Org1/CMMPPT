head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2011.09.28.23.49.38;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.24.00.28.00;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.30.20.17.43;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.06.20.10.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.30.20.11.19;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.30.20.02.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.29.23.24.32;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.29.20.42.57;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.29.20.17.17;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.29.19.39.05;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.29.16.33.45;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MultiObjVecIRH
#define MultiObjVecIRH

//------------------------------------------------------------------------------
// Header file: "MultiObjVecIR.h"
//
// Contains the declaration of class MultiObjVecIR.
//------------------------------------------------------------------------------

#include <ObjVecIR.h>
#include <PtrMap.h>

//------------------------------------------------------------------------------
// Class MultiObjVecIR
//
// "Multiple-Objective Vector Internal Representation"
//
// Internal Representation of a vector of doubles that holds the value of an
// objective function attribute in multiple-objectives mode.
//
// Class hierarchy:
//
//    ObjVecIR
//      MultiObjVecIR
//
// Implemented in ObjVec.C.
//------------------------------------------------------------------------------

class WitMultiObjVecIR: public WitObjVecIR
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMultiObjVecIR (WitMultiObjMgr *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMultiObjVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void            copyInto       (WitObjVecIR *);
      virtual void            copyFrom       (WitMultiObjVecIR *);
      virtual void            writeDataMulti (const char *,
                                              WitDelComp *,
                                              WitObjective *);
      virtual void            display        (WitMsgID,
                                              WitProblem *);
      virtual WitDblFlexVec & curDblFlexVec  ();
         //
         // Overrides from class ObjVecIR.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMultiObjVecIR);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMultiObjMgr * const myMultiObjMgr_;
         //
         // The MultiObjMgr for this MultiObjVecIR.

      WitPtrMap <WitObjective, WitDblFlexVec> myDblFlexVecMap_;
         //
         // myDblFlexVecMap_.myElemAt (theObj) is the vector of doubles
         // represented by this ObjVecIR for theObj.
   };

#endif
@


1.10
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.9
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 29
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMultiObjVecIR (WitMultiObjMgr *, double initValue);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitMultiObjVecIR ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual void            copyInto       (WitObjVecIR *);
virtual void            copyFrom       (WitMultiObjVecIR *);
virtual void            writeDataMulti (const char *,
WitDelComp *,
WitObjective *);
virtual void            display        (WitMsgID,
WitProblem *);
virtual WitDblFlexVec & curDblFlexVec  ();
//
// Overrides from class ObjVecIR.
d42 48
a89 21
private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitMultiObjVecIR);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMultiObjMgr * const myMultiObjMgr_;
//
// The MultiObjMgr for this MultiObjVecIR.

WitPtrMap <WitObjective, WitDblFlexVec> myDblFlexVecMap_;
//
// myDblFlexVecMap_.myElemAt (theObj) is the vector of doubles
// represented by this ObjVecIR for theObj.
};
@


1.8
log
@Multi-objective mode
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d39 29
a67 2
   {
   public:
d69 21
a89 48
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMultiObjVecIR (WitMultiObjMgr *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMultiObjVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void            copyInto       (WitObjVecIR *);
      virtual void            copyFrom       (WitMultiObjVecIR *);
      virtual void            writeDataMulti (const char *,
                                              WitDelComp *,
                                              WitObjective *);
      virtual void            display        (WitMsgID,
                                              WitProblem *);
      virtual WitDblFlexVec & curDblFlexVec  ();
         //
         // Overrides from class ObjVecIR.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMultiObjVecIR);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMultiObjMgr * const myMultiObjMgr_;
         //
         // The MultiObjMgr for this MultiObjVecIR.

      WitPtrMap <WitObjective, WitDblFlexVec> myDblFlexVecMap_;
         //
         // myDblFlexVecMap_.myElemAt (theObj) is the vector of doubles
         // represented by this ObjVecIR for theObj.
   };
@


1.7
log
@Multi-Objective Mode
@
text
@d58 8
a65 9
      virtual void            copyInto        (WitObjVecIR *);
      virtual void            copyFrom        (WitMultiObjVecIR *);
      virtual void            writeDataMulti  (const char *,
                                               WitDelComp *,
                                               WitObjective *);
      virtual void            display         (WitMsgID,
                                               WitProblem *);
      virtual WitDblFlexVec & curDblFlexVec   ();
      virtual WitDblFlexVec & myDblFlexVecFor (WitObjective *);
@


1.6
log
@Multi-Objective Mode
@
text
@d58 2
a59 2
      virtual void            copyInto        (WitObjVecIR *)          const;
      virtual void            copyFrom        (const WitMultiObjVecIR *);
d62 3
a64 2
                                               WitObjective *)         const;
      virtual void            display         (WitMsgID, WitProblem *) const;
@


1.5
log
@Multi-Objective Mode
@
text
@d58 8
a65 7
      virtual void            copyInto       (WitObjVecIR *)          const;
      virtual void            copyFrom       (const WitMultiObjVecIR *);
      virtual void            writeDataMulti (const char *,
                                              WitDelComp *,
                                              WitObjective *)         const;
      virtual void            display        (WitMsgID, WitProblem *) const;
      virtual WitDblFlexVec & curDblFlexVec  ();
@


1.4
log
@Multi-Objective Mode
@
text
@d46 1
a46 1
      WitMultiObjVecIR (WitMultiObjMgr *);
@


1.3
log
@Multi-Objective Mode
@
text
@d58 7
a64 8
      virtual void            copyInto        (WitObjVecIR *)          const;
      virtual void            copyFrom        (const WitMultiObjVecIR *);
      virtual void            writeDataSingle (const char *)           const;
      virtual void            writeDataMulti  (const char *,
                                               WitDelComp *,
                                               WitObjective *)         const;
      virtual void            display         (WitMsgID, WitProblem *) const;
      virtual WitDblFlexVec & curDblFlexVec   ();
@


1.2
log
@Multi-Objective Mode
@
text
@d58 1
a58 1
      virtual void            copyInto        (WitObjVecIR *)  const;
d60 1
a60 1
      virtual void            writeDataSingle (const char *)   const;
d63 2
a64 2
                                               WitObjective *) const;
      virtual void            display         (WitMsgID)       const;
@


1.1
log
@Multi-Objective Mode
@
text
@d58 8
a65 8
      virtual       void               copyFrom          (const WitObjVecIR *);
      virtual       void               writeDataSingle   (const char *)   const;
      virtual       void               writeDataMulti    (const char *,
                                                          WitDelComp *,
                                                          WitObjective *) const;
      virtual       void               display           (WitMsgID)       const;
      virtual const WitMultiObjVecIR * thisMultiObjVecIR ()               const;
      virtual       WitDblFlexVec &    curDblFlexVec     ();
@

