head	1.49;
access;
symbols
	sce_5_01_20080919:1.42
	latest_sce_4_20_20060523:1.41.0.2
	sce_4_20_20060523:1.41
	latest_sce4_20_OSL:1.40.0.2
	sce_4_20_OSL:1.40
	sce_410_withVa:1.40
	sce_4_05_20040511:1.26
	sce_4_00_20040201:1.26
	nextGenBranch:1.24.0.2
	nextGenRoot:1.24
	sce_3_30_20030627:1.24;
locks; strict;
comment	@ * @;


1.49
date	2011.09.28.23.50.03;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2011.09.24.00.28.27;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2011.08.30.20.18.05;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2010.09.10.22.45.34;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2010.09.10.22.10.41;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2010.06.29.22.32.31;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2010.03.16.22.42.28;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2007.08.01.21.28.05;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2005.03.28.20.14.37;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2005.03.22.21.45.53;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2005.03.22.19.09.34;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2005.03.02.22.34.36;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2005.03.02.22.02.00;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2005.03.02.21.59.46;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2005.01.27.21.03.28;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2005.01.26.23.50.32;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2005.01.19.18.31.04;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.12.09.21.34.12;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.11.16.21.46.04;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.11.12.21.03.46;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.11.11.22.16.12;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.11.11.21.25.09;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2003.11.11.18.29.15;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2003.10.02.20.46.43;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.05.09.18.55.41;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.04.29.19.55.31;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.04.15.20.50.13;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.21.21.35.31;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.03.20.19.03.58;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.19.16.48.25;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.07.23.46.16;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.06.20.28.20;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.04.19.08.03;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.28.20.47.38;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.27.19.20.23;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.26.23.51.32;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.26.21.42.55;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.25.22.17.09;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.25.19.16.57;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.24.23.44.32;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.21.20.31.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.19.21.47.33;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.18.23.19.17;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.18.20.11.00;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.16.23.58.11;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.14.20.13.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.13.23.06.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.11.18.21.19;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.49
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "Routing.C"
//
// Contains the implementation of the following classes:
//
//    RtMgr.
//    RtSite.
//    ProdRtSite.
//    ConsRtSite.
//    RtCand.
//    ProdRtCand.
//    ConsRtCand.
//------------------------------------------------------------------------------

#include <RtMgr.h>
#include <ConcRtSite.h>
#include <ConcRtCand.h>
#include <Selector.h>
#include <Problem.h>
#include <CompMgr.h>
#include <GlobalComp.h>
#include <Part.h>
#include <Operation.h>
#include <BopEntry.h>
#include <SubEntry.h>

//------------------------------------------------------------------------------
// Implementation of class RtMgr.         
//------------------------------------------------------------------------------
                                          
WitRtMgr::WitRtMgr (WitSelector * theSelector):

      WitProbAssoc       (theSelector),
      myRtSites_         (),
      myRtCands_         (),
      myRtSiteForPart_   (myProblem ()),
      myRtSiteForBomEnt_ (myProblem ()),
      myRtCandFor_       (myProblem ()),
      mySelector_        (theSelector)
   {                                      
   WitRtSite * theRtSite;

   buildRtSites ();
   buildRtCands ();

   forEachEl (theRtSite, myRtSites_)
      theRtSite->findRtCands ();

   if (selPrintLevelAt (3))
      print ();
   }                                      

//------------------------------------------------------------------------------
                                          
WitRtMgr::~WitRtMgr ()                    
   {                                      
   WitRtSite * theRtSite;

   myRtSiteForBomEnt_.clear ();
   myRtSiteForPart_  .clear ();

   forEachEl (theRtSite, myRtSites_)
      theRtSite->clearRtCands ();

   while (not myRtCands_.isEmpty ())
      delete myRtCands_.get ();

   while (not myRtSites_.isEmpty ())
      delete myRtSites_.get ();
   }                                      

//------------------------------------------------------------------------------

void WitRtMgr::buildRtSites ()
   {
   WitPart *     thePart;
   WitBomEntry * theBomEnt;
   WitRtSite *   theRtSite;

   forEachPart (thePart, myProblem ())
      {
      theRtSite = new WitProdRtSite (thePart, this);

      myRtSites_.append (theRtSite);

      myRtSiteForPart_ (thePart) = theRtSite;
      }

   forEachBomEntry (theBomEnt, myProblem ())
      {
      theRtSite = new WitConsRtSite (theBomEnt, this);

      myRtSites_.append (theRtSite);

      myRtSiteForBomEnt_ (theBomEnt) = theRtSite;
      }
   }

//------------------------------------------------------------------------------

void WitRtMgr::buildRtCands ()
   {
   WitBopEntry * theBopEnt;
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitRtCand *   theRtCand;

   forEachBopEntry (theBopEnt, myProblem ())
      {
      theRtCand = WitProdRtCand::newInstance (theBopEnt, this);

      myRtCands_.append (theRtCand);
      }

   forEachBomEntry (theBomEnt, myProblem ())
      {
      theRtCand = WitConsRtCand::newInstance (theBomEnt, this);

      myRtCands_.append (theRtCand);

      forEachEl (theSub, theBomEnt->mySubEntries ())
         {
         theRtCand = WitConsRtCand::newInstance (theSub, this);

         myRtCands_.append (theRtCand);
         }
      }

   forEachEl (theRtCand, myRtCands_)
      myRtCandFor_ (theRtCand->myBillEnt ()) = theRtCand;
   }

//------------------------------------------------------------------------------

void WitRtMgr::print ()
   {
   fprintf (msgFile (),
      "\n"
      "Routing Element Subsystem:\n"
      "\n"
      "   # Routing Sites:      %2d\n"
      "   # Routing Candidates: %2d\n"
      "\n",
      myRtSites_.nElements (),
      myRtCands_.nElements ());
   }

//------------------------------------------------------------------------------
// Implementation of class RtSite.        
//------------------------------------------------------------------------------

WitRtSite::~WitRtSite ()                  
   {                                      
   }                                      
                                          
//------------------------------------------------------------------------------

void WitRtSite::findRtCands ()
   {
   findRtCands (myRtCands_);
   }

//------------------------------------------------------------------------------

void WitRtSite::clearRtCands ()
   {
   myRtCands_.clear ();
   }

//------------------------------------------------------------------------------

void WitRtSite::printPer (WitPeriod thePer, int labelCol, int dataCol)
   {
   fprintf (msgFile (),
      "%*s%-9s %*s%d\n",
      labelCol - 1,
      "",
      perCaseID (),
      max (0, dataCol - labelCol - 10),
      "",
      thePer);
   }

//------------------------------------------------------------------------------

int WitRtSite::nInstances (WitProblem * theProblem)
   {
   return
      WitPart    ::nInstances (theProblem) + 
      WitBomEntry::nInstances (theProblem);
   }

//------------------------------------------------------------------------------

WitRtSite::WitRtSite (WitRtMgr * theRtMgr):

      WitProbAssoc  (theRtMgr),
      mappingIndex_ (theRtMgr->myRtSites ().nElements ()),
      myRtCands_    (),
      myRtMgr_      (theRtMgr)
   {
   }

//------------------------------------------------------------------------------
// Implementation of class ProdRtSite.        
//------------------------------------------------------------------------------
                                          
WitProdRtSite::WitProdRtSite (WitPart * thePart, WitRtMgr * theRtMgr):

      WitRtSite (theRtMgr),
      myPart_   (thePart)
   {                                      
   }

//------------------------------------------------------------------------------

WitProdRtSite::~WitProdRtSite ()
   {
   }

//------------------------------------------------------------------------------

bool WitProdRtSite::isForProd ()
   {
   return true;
   }

//------------------------------------------------------------------------------

void WitProdRtSite::printID (int labelCol, int dataCol)
   {
   fprintf (msgFile (),
      "%*sPart: %*s%s\n",
      labelCol - 1,
      "",
      max (0, dataCol - labelCol - 6),
      "",
      myPart_->partName ().myCstring ());
   }

//------------------------------------------------------------------------------

bool WitProdRtSite::explodeable (WitPeriod expPer)
   {
   return myPart_->explodeable (expPer);
   }

//------------------------------------------------------------------------------

const WitFlexVec <bool> & WitProdRtSite::propRtg ()
   {
   return myPart_->propRtg ();
   }

//------------------------------------------------------------------------------

bool WitProdRtSite::singleSource ()
   {
   return myPart_->singleSource ();
   }

//------------------------------------------------------------------------------

WitPart * WitProdRtSite::mrSortPart ()
   {
   return myPart_;
   }

//------------------------------------------------------------------------------

WitRtCand * WitProdRtSite::mrDefaultRtCand (WitPeriod expPer)
   {
   WitBopEntry * theBopEnt;

   if (not myPart_->explodeable (expPer))
      return NULL;

   theBopEnt = myPart_->expBopEntry (expPer);

   return myRtMgr ()->myRtCandFor (theBopEnt);
   }

//------------------------------------------------------------------------------

int WitProdRtSite::heightIdx ()
   {
   return (myPart_->sortedPartIndex () * 2) + 1;
   }

//------------------------------------------------------------------------------

void WitProdRtSite::findRtCands (WitList <WitRtCand> & theRtCands)
   {
   WitBopEntry * theBopEnt;
   WitRtCand *   theRtCand;

   theRtCands.clear ();

   forEachEl (theBopEnt, myPart_->producingBopEntries ())
      {
      theRtCand = myRtMgr ()->myRtCandFor (theBopEnt);

      theRtCands.append (theRtCand);
      }
   }

//------------------------------------------------------------------------------

const char * WitProdRtSite::perCaseID ()
   {
   return "Exp Per:";
   }

//------------------------------------------------------------------------------
// Implementation of class ConsRtSite.
//------------------------------------------------------------------------------

WitConsRtSite::WitConsRtSite (WitBomEntry * theBomEnt, WitRtMgr * theRtMgr):

      WitRtSite (theRtMgr),
      myBomEnt_ (theBomEnt)
   {
   }

//------------------------------------------------------------------------------

WitConsRtSite::~WitConsRtSite ()
   {
   }

//------------------------------------------------------------------------------

bool WitConsRtSite::isForProd ()
   {
   return false;
   }

//------------------------------------------------------------------------------

void WitConsRtSite::printID (int labelCol, int dataCol)
   {
   fprintf (msgFile (),
      "%*sBomEntry: %*s%s #%d\n",
      labelCol - 1,
      "",
      max (0, dataCol - labelCol - 10),
      "",
      myBomEnt_->myOperationName ().myCstring (),
      myBomEnt_->localIndex ());
   }

//------------------------------------------------------------------------------

bool WitConsRtSite::explodeable (WitPeriod execPer)
   {
   return myBomEnt_->inEffect (execPer);
   }

//------------------------------------------------------------------------------

const WitFlexVec <bool> & WitConsRtSite::propRtg ()
   {
   return myBomEnt_->propRtg ();
   }

//------------------------------------------------------------------------------

bool WitConsRtSite::singleSource ()
   {
   return myBomEnt_->singleSource ();
   }

//------------------------------------------------------------------------------

WitPart * WitConsRtSite::mrSortPart ()
   {
   WitOperation * theOpn;
   int            minIdx;
   WitPart *      thePart;
   WitBopEntry *  theBopEnt;

   theOpn  = myBomEnt_->myOperation ();

   minIdx  = theOpn->myCompMgr ()->nParts ();

   thePart = NULL;

   forEachEl (theBopEnt, theOpn->bop ())
      if (theBopEnt->expAllowed ())
         if (theBopEnt->myPart ()->sortedPartIndex () < minIdx)
            {
            thePart = theBopEnt->myPart ();

            minIdx  = thePart->sortedPartIndex ();
            }

   witAssert (thePart != NULL);

   return thePart;
   }

//------------------------------------------------------------------------------

WitRtCand * WitConsRtSite::mrDefaultRtCand (WitPeriod execPer)
   {
   if (myBomEnt_->inEffect (execPer))
      return myRtMgr ()->myRtCandFor (myBomEnt_);
   else
      return NULL;
   }

//------------------------------------------------------------------------------

int WitConsRtSite::heightIdx ()
   {
   int            minIdx;
   WitOperation * theOpn;
   WitBopEntry *  theBopEnt;

   minIdx = myCompMgr ()->nParts ();

   theOpn = myBomEnt_->myOperation ();

   forEachEl (theBopEnt, theOpn->bop ())
      setToMin (minIdx, theBopEnt->myPart ()->sortedPartIndex ());

   return (minIdx * 2);
   }

//------------------------------------------------------------------------------

void WitConsRtSite::findRtCands (WitList <WitRtCand> & theRtCands)
   {
   WitSubEntry * theSub;
   WitRtCand *   theRtCand;

   theRtCands.clear ();

   theRtCand = myRtMgr ()->myRtCandFor (myBomEnt_);

   theRtCands.append (theRtCand);

   forEachEl (theSub, myBomEnt_->mySubEntries ())
      {
      theRtCand = myRtMgr ()->myRtCandFor (theSub);

      theRtCands.append (theRtCand);
      }
   }

//------------------------------------------------------------------------------

const char * WitConsRtSite::perCaseID ()
   {
   return "Exec Per:";
   }

//------------------------------------------------------------------------------
// Implementation of class RtCand.        
//------------------------------------------------------------------------------
                                          
WitRtCand::~WitRtCand ()                  
   {                                      
   }                                      
                                          
//------------------------------------------------------------------------------

int WitRtCand::nInstances (WitProblem * theProblem)
   {
   return WitBillEntry::nInstances (theProblem);
   }

//------------------------------------------------------------------------------

WitBopEntry * WitRtCand::myBopEnt ()
   {
   return myBillEnt_->thisBopEnt ();
   }

//------------------------------------------------------------------------------

WitConsEntry * WitRtCand::myConsEnt ()
   {
   return myBillEnt_->thisConsEnt ();
   }

//------------------------------------------------------------------------------

WitRtCand::WitRtCand (
         WitBillEntry * theBillEnt,
         WitRtSite *    theRtSite,
         WitRtMgr *     theRtMgr):

      WitProbAssoc  (theBillEnt),
      mappingIndex_ (theRtMgr->myRtCands ().nElements ()),
      myBillEnt_    (theBillEnt),
      myRtSite_     (theRtSite)
   {
   }

//------------------------------------------------------------------------------
// Implementation of class ProdRtCand.        
//------------------------------------------------------------------------------
                                          
WitProdRtCand * WitProdRtCand::newInstance (
      WitBopEntry * theBopEnt,
      WitRtMgr *    theRtMgr)
   {
   WitRtSite * theRtSite;

   theRtSite = theRtMgr->myRtSiteFor (theBopEnt->myPart ());

   return new WitProdRtCand (theBopEnt, theRtSite, theRtMgr);
   }

//------------------------------------------------------------------------------

WitProdRtCand::WitProdRtCand (
         WitBopEntry * theBopEnt,
         WitRtSite *   theRtSite,
         WitRtMgr *    theRtMgr):

      WitRtCand (theBopEnt, theRtSite, theRtMgr),
      myBopEnt_ (theBopEnt)                 
   {
   }

//------------------------------------------------------------------------------

WitProdRtCand::~WitProdRtCand ()
   {
   }
                                          
//------------------------------------------------------------------------------

bool WitProdRtCand::usedByMr ()
   {
   return myBopEnt_->expAllowed ();
   }

//------------------------------------------------------------------------------

void WitProdRtCand::printID (int labelCol, int dataCol)
   {
   fprintf (msgFile (),
      "%*sBopEntry: %*s%s #%d\n",
      labelCol - 1,
      "",
      max (0, dataCol - labelCol - 10),
      "",
      myBopEnt_->myOperationName ().myCstring (),
      myBopEnt_->localIndex      ());
   }

//------------------------------------------------------------------------------

bool WitProdRtCand::isEligible (WitPeriod expPer)
   {
   return myBopEnt_->expEligible (expPer);
   }

//------------------------------------------------------------------------------
// Implementation of class ConsRtCand.        
//------------------------------------------------------------------------------
                                          
WitConsRtCand * WitConsRtCand::newInstance (
      WitConsEntry * theConsEnt,
      WitRtMgr *     theRtMgr)
   {
   WitRtSite * theRtSite;

   theRtSite = theRtMgr->myRtSiteFor (theConsEnt->myBomEnt ());

   return new WitConsRtCand (theConsEnt, theRtSite, theRtMgr);
   }

//------------------------------------------------------------------------------

WitConsRtCand::WitConsRtCand (
         WitConsEntry * theConsEnt,
         WitRtSite *    theRtSite,
         WitRtMgr *     theRtMgr):

      WitRtCand  (theConsEnt, theRtSite, theRtMgr),
      myConsEnt_ (theConsEnt)                 
   {
   }

//------------------------------------------------------------------------------

WitConsRtCand::~WitConsRtCand ()
   {
   }
                                          
//------------------------------------------------------------------------------

bool WitConsRtCand::usedByMr ()
   {
   WitSubEntry * theSub;

   theSub = myConsEnt_->thisSub ();

   if (theSub == NULL)
      return true;

   if (theSub->myPart ()->producingBopEntries ().isEmpty ())
      if (theSub->netAllowed ())
         if (not theSub->myBomEnt ()->singleSource ())
            return false;

   return (theSub->expAllowed ());
   }

//------------------------------------------------------------------------------

void WitConsRtCand::printID (int labelCol, int dataCol)
   {
   WitSubEntry * theSub;

   theSub = myConsEnt_->thisSub ();

   if (theSub != NULL)
      fprintf (msgFile (), 
         "%*sCons Entry:    %*sSub #%d\n",
         labelCol - 1,
         "",
         max (0, dataCol - labelCol - 15),
         "",
         theSub->localIndex ());
   else
      fprintf (msgFile (),
         "%*sCons Entry:    %*sItself\n",
         labelCol - 1,
         "",
         max (0, dataCol - labelCol - 15),
         "");

   fprintf (msgFile (),
         "%*sConsumed Part: %*s%s\n",
         labelCol - 1,
         "",
         max (0, dataCol - labelCol - 15),
         "",
         myConsEnt_->myPartName ().myCstring ());
   }

//------------------------------------------------------------------------------

bool WitConsRtCand::isEligible (WitPeriod execPer)
   {
   return myConsEnt_->inEffect (execPer);
   }
@


1.48
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.47
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d37 1
a37 1
// Implementation of class RtMgr.
d39 1
a39 1

d42 38
a79 38
WitProbAssoc       (theSelector),
myRtSites_         (),
myRtCands_         (),
myRtSiteForPart_   (myProblem ()),
myRtSiteForBomEnt_ (myProblem ()),
myRtCandFor_       (myProblem ()),
mySelector_        (theSelector)
{
WitRtSite * theRtSite;

buildRtSites ();
buildRtCands ();

forEachEl (theRtSite, myRtSites_)
theRtSite->findRtCands ();

if (selPrintLevelAt (3))
print ();
}

//------------------------------------------------------------------------------

WitRtMgr::~WitRtMgr ()
{
WitRtSite * theRtSite;

myRtSiteForBomEnt_.clear ();
myRtSiteForPart_  .clear ();

forEachEl (theRtSite, myRtSites_)
theRtSite->clearRtCands ();

while (not myRtCands_.isEmpty ())
delete myRtCands_.get ();

while (not myRtSites_.isEmpty ())
delete myRtSites_.get ();
}
d84 4
a87 4
{
WitPart *     thePart;
WitBomEntry * theBomEnt;
WitRtSite *   theRtSite;
d89 3
a91 3
forEachPart (thePart, myProblem ())
{
theRtSite = new WitProdRtSite (thePart, this);
d93 1
a93 1
myRtSites_.append (theRtSite);
d95 2
a96 2
myRtSiteForPart_ (thePart) = theRtSite;
}
d98 3
a100 3
forEachBomEntry (theBomEnt, myProblem ())
{
theRtSite = new WitConsRtSite (theBomEnt, this);
d102 1
a102 1
myRtSites_.append (theRtSite);
d104 3
a106 3
myRtSiteForBomEnt_ (theBomEnt) = theRtSite;
}
}
d111 30
a140 30
{
WitBopEntry * theBopEnt;
WitBomEntry * theBomEnt;
WitSubEntry * theSub;
WitRtCand *   theRtCand;

forEachBopEntry (theBopEnt, myProblem ())
{
theRtCand = WitProdRtCand::newInstance (theBopEnt, this);

myRtCands_.append (theRtCand);
}

forEachBomEntry (theBomEnt, myProblem ())
{
theRtCand = WitConsRtCand::newInstance (theBomEnt, this);

myRtCands_.append (theRtCand);

forEachEl (theSub, theBomEnt->mySubEntries ())
{
theRtCand = WitConsRtCand::newInstance (theSub, this);

myRtCands_.append (theRtCand);
}
}

forEachEl (theRtCand, myRtCands_)
myRtCandFor_ (theRtCand->myBillEnt ()) = theRtCand;
}
d145 20
a164 20
{
fprintf (msgFile (),
"\n"
"Routing Element Subsystem:\n"
"\n"
"   # Routing Sites:      %2d\n"
"   # Routing Candidates: %2d\n"
"\n",
myRtSites_.nElements (),
myRtCands_.nElements ());
}

//------------------------------------------------------------------------------
// Implementation of class RtSite.
//------------------------------------------------------------------------------

WitRtSite::~WitRtSite ()
{
}

d168 3
a170 3
{
findRtCands (myRtCands_);
}
d175 3
a177 3
{
myRtCands_.clear ();
}
d182 10
a191 10
{
fprintf (msgFile (),
"%*s%-9s %*s%d\n",
labelCol - 1,
"",
perCaseID (),
max (0, dataCol - labelCol - 10),
"",
thePer);
}
d196 5
a200 5
{
return
WitPart    ::nInstances (theProblem) +
WitBomEntry::nInstances (theProblem);
}
d206 6
a211 6
WitProbAssoc  (theRtMgr),
mappingIndex_ (theRtMgr->myRtSites ().nElements ()),
myRtCands_    (),
myRtMgr_      (theRtMgr)
{
}
d214 1
a214 1
// Implementation of class ProdRtSite.
d216 1
a216 1

d219 4
a222 4
WitRtSite (theRtMgr),
myPart_   (thePart)
{
}
d227 2
a228 2
{
}
d233 3
a235 3
{
return true;
}
d240 9
a248 9
{
fprintf (msgFile (),
"%*sPart: %*s%s\n",
labelCol - 1,
"",
max (0, dataCol - labelCol - 6),
"",
myPart_->partName ().myCstring ());
}
d253 3
a255 3
{
return myPart_->explodeable (expPer);
}
d260 3
a262 3
{
return myPart_->propRtg ();
}
d267 3
a269 3
{
return myPart_->singleSource ();
}
d274 3
a276 3
{
return myPart_;
}
d281 2
a282 2
{
WitBopEntry * theBopEnt;
d284 2
a285 2
if (not myPart_->explodeable (expPer))
return NULL;
d287 1
a287 1
theBopEnt = myPart_->expBopEntry (expPer);
d289 2
a290 2
return myRtMgr ()->myRtCandFor (theBopEnt);
}
d295 3
a297 3
{
return (myPart_->sortedPartIndex () * 2) + 1;
}
d302 13
a314 13
{
WitBopEntry * theBopEnt;
WitRtCand *   theRtCand;

theRtCands.clear ();

forEachEl (theBopEnt, myPart_->producingBopEntries ())
{
theRtCand = myRtMgr ()->myRtCandFor (theBopEnt);

theRtCands.append (theRtCand);
}
}
d319 3
a321 3
{
return "Exp Per:";
}
d329 4
a332 4
WitRtSite (theRtMgr),
myBomEnt_ (theBomEnt)
{
}
d337 2
a338 2
{
}
d343 3
a345 3
{
return false;
}
d350 10
a359 10
{
fprintf (msgFile (),
"%*sBomEntry: %*s%s #%d\n",
labelCol - 1,
"",
max (0, dataCol - labelCol - 10),
"",
myBomEnt_->myOperationName ().myCstring (),
myBomEnt_->localIndex ());
}
d364 3
a366 3
{
return myBomEnt_->inEffect (execPer);
}
d371 3
a373 3
{
return myBomEnt_->propRtg ();
}
d378 3
a380 3
{
return myBomEnt_->singleSource ();
}
d385 5
a389 5
{
WitOperation * theOpn;
int            minIdx;
WitPart *      thePart;
WitBopEntry *  theBopEnt;
d391 1
a391 1
theOpn  = myBomEnt_->myOperation ();
d393 1
a393 1
minIdx  = theOpn->myCompMgr ()->nParts ();
d395 1
a395 1
thePart = NULL;
d397 5
a401 5
forEachEl (theBopEnt, theOpn->bop ())
if (theBopEnt->expAllowed ())
if (theBopEnt->myPart ()->sortedPartIndex () < minIdx)
{
thePart = theBopEnt->myPart ();
d403 2
a404 2
minIdx  = thePart->sortedPartIndex ();
}
d406 1
a406 1
witAssert (thePart != NULL);
d408 2
a409 2
return thePart;
}
d414 6
a419 6
{
if (myBomEnt_->inEffect (execPer))
return myRtMgr ()->myRtCandFor (myBomEnt_);
else
return NULL;
}
d424 4
a427 4
{
int            minIdx;
WitOperation * theOpn;
WitBopEntry *  theBopEnt;
d429 1
a429 1
minIdx = myCompMgr ()->nParts ();
d431 1
a431 1
theOpn = myBomEnt_->myOperation ();
d433 2
a434 2
forEachEl (theBopEnt, theOpn->bop ())
setToMin (minIdx, theBopEnt->myPart ()->sortedPartIndex ());
d436 2
a437 2
return (minIdx * 2);
}
d442 3
a444 3
{
WitSubEntry * theSub;
WitRtCand *   theRtCand;
d446 1
a446 1
theRtCands.clear ();
d448 1
a448 1
theRtCand = myRtMgr ()->myRtCandFor (myBomEnt_);
d450 1
a450 1
theRtCands.append (theRtCand);
d452 3
a454 3
forEachEl (theSub, myBomEnt_->mySubEntries ())
{
theRtCand = myRtMgr ()->myRtCandFor (theSub);
d456 3
a458 3
theRtCands.append (theRtCand);
}
}
d463 3
a465 3
{
return "Exec Per:";
}
d468 7
a474 7
// Implementation of class RtCand.
//------------------------------------------------------------------------------

WitRtCand::~WitRtCand ()
{
}

d478 3
a480 3
{
return WitBillEntry::nInstances (theProblem);
}
d485 3
a487 3
{
return myBillEnt_->thisBopEnt ();
}
d492 3
a494 3
{
return myBillEnt_->thisConsEnt ();
}
d499 10
a508 10
WitBillEntry * theBillEnt,
WitRtSite *    theRtSite,
WitRtMgr *     theRtMgr):

WitProbAssoc  (theBillEnt),
mappingIndex_ (theRtMgr->myRtCands ().nElements ()),
myBillEnt_    (theBillEnt),
myRtSite_     (theRtSite)
{
}
d511 1
a511 1
// Implementation of class ProdRtCand.
d513 1
a513 1

d515 4
a518 4
WitBopEntry * theBopEnt,
WitRtMgr *    theRtMgr)
{
WitRtSite * theRtSite;
d520 1
a520 1
theRtSite = theRtMgr->myRtSiteFor (theBopEnt->myPart ());
d522 2
a523 2
return new WitProdRtCand (theBopEnt, theRtSite, theRtMgr);
}
d528 8
a535 8
WitBopEntry * theBopEnt,
WitRtSite *   theRtSite,
WitRtMgr *    theRtMgr):

WitRtCand (theBopEnt, theRtSite, theRtMgr),
myBopEnt_ (theBopEnt)
{
}
d540 3
a542 3
{
}

d546 3
a548 3
{
return myBopEnt_->expAllowed ();
}
d553 10
a562 10
{
fprintf (msgFile (),
"%*sBopEntry: %*s%s #%d\n",
labelCol - 1,
"",
max (0, dataCol - labelCol - 10),
"",
myBopEnt_->myOperationName ().myCstring (),
myBopEnt_->localIndex      ());
}
d567 3
a569 3
{
return myBopEnt_->expEligible (expPer);
}
d572 1
a572 1
// Implementation of class ConsRtCand.
d574 1
a574 1

d576 4
a579 4
WitConsEntry * theConsEnt,
WitRtMgr *     theRtMgr)
{
WitRtSite * theRtSite;
d581 1
a581 1
theRtSite = theRtMgr->myRtSiteFor (theConsEnt->myBomEnt ());
d583 2
a584 2
return new WitConsRtCand (theConsEnt, theRtSite, theRtMgr);
}
d589 8
a596 8
WitConsEntry * theConsEnt,
WitRtSite *    theRtSite,
WitRtMgr *     theRtMgr):

WitRtCand  (theConsEnt, theRtSite, theRtMgr),
myConsEnt_ (theConsEnt)
{
}
d601 3
a603 3
{
}

d607 2
a608 2
{
WitSubEntry * theSub;
d610 1
a610 1
theSub = myConsEnt_->thisSub ();
d612 2
a613 2
if (theSub == NULL)
return true;
d615 4
a618 4
if (theSub->myPart ()->producingBopEntries ().isEmpty ())
if (theSub->netAllowed ())
if (not theSub->myBomEnt ()->singleSource ())
return false;
d620 2
a621 2
return (theSub->expAllowed ());
}
d626 2
a627 2
{
WitSubEntry * theSub;
d629 1
a629 1
theSub = myConsEnt_->thisSub ();
d631 24
a654 24
if (theSub != NULL)
fprintf (msgFile (),
"%*sCons Entry:    %*sSub #%d\n",
labelCol - 1,
"",
max (0, dataCol - labelCol - 15),
"",
theSub->localIndex ());
else
fprintf (msgFile (),
"%*sCons Entry:    %*sItself\n",
labelCol - 1,
"",
max (0, dataCol - labelCol - 15),
"");

fprintf (msgFile (),
"%*sConsumed Part: %*s%s\n",
labelCol - 1,
"",
max (0, dataCol - labelCol - 15),
"",
myConsEnt_->myPartName ().myCstring ());
}
d659 3
a661 3
{
return myConsEnt_->inEffect (execPer);
}
@


1.46
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d37 1
a37 1
// Implementation of class RtMgr.         
d39 1
a39 1
                                          
d42 38
a79 38
      WitProbAssoc       (theSelector),
      myRtSites_         (),
      myRtCands_         (),
      myRtSiteForPart_   (myProblem ()),
      myRtSiteForBomEnt_ (myProblem ()),
      myRtCandFor_       (myProblem ()),
      mySelector_        (theSelector)
   {                                      
   WitRtSite * theRtSite;

   buildRtSites ();
   buildRtCands ();

   forEachEl (theRtSite, myRtSites_)
      theRtSite->findRtCands ();

   if (selPrintLevelAt (3))
      print ();
   }                                      

//------------------------------------------------------------------------------
                                          
WitRtMgr::~WitRtMgr ()                    
   {                                      
   WitRtSite * theRtSite;

   myRtSiteForBomEnt_.clear ();
   myRtSiteForPart_  .clear ();

   forEachEl (theRtSite, myRtSites_)
      theRtSite->clearRtCands ();

   while (not myRtCands_.isEmpty ())
      delete myRtCands_.get ();

   while (not myRtSites_.isEmpty ())
      delete myRtSites_.get ();
   }                                      
d84 4
a87 4
   {
   WitPart *     thePart;
   WitBomEntry * theBomEnt;
   WitRtSite *   theRtSite;
d89 3
a91 3
   forEachPart (thePart, myProblem ())
      {
      theRtSite = new WitProdRtSite (thePart, this);
d93 1
a93 1
      myRtSites_.append (theRtSite);
d95 2
a96 2
      myRtSiteForPart_ (thePart) = theRtSite;
      }
d98 3
a100 3
   forEachBomEntry (theBomEnt, myProblem ())
      {
      theRtSite = new WitConsRtSite (theBomEnt, this);
d102 1
a102 1
      myRtSites_.append (theRtSite);
d104 3
a106 3
      myRtSiteForBomEnt_ (theBomEnt) = theRtSite;
      }
   }
d111 30
a140 30
   {
   WitBopEntry * theBopEnt;
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitRtCand *   theRtCand;

   forEachBopEntry (theBopEnt, myProblem ())
      {
      theRtCand = WitProdRtCand::newInstance (theBopEnt, this);

      myRtCands_.append (theRtCand);
      }

   forEachBomEntry (theBomEnt, myProblem ())
      {
      theRtCand = WitConsRtCand::newInstance (theBomEnt, this);

      myRtCands_.append (theRtCand);

      forEachEl (theSub, theBomEnt->mySubEntries ())
         {
         theRtCand = WitConsRtCand::newInstance (theSub, this);

         myRtCands_.append (theRtCand);
         }
      }

   forEachEl (theRtCand, myRtCands_)
      myRtCandFor_ (theRtCand->myBillEnt ()) = theRtCand;
   }
d145 20
a164 20
   {
   fprintf (msgFile (),
      "\n"
      "Routing Element Subsystem:\n"
      "\n"
      "   # Routing Sites:      %2d\n"
      "   # Routing Candidates: %2d\n"
      "\n",
      myRtSites_.nElements (),
      myRtCands_.nElements ());
   }

//------------------------------------------------------------------------------
// Implementation of class RtSite.        
//------------------------------------------------------------------------------

WitRtSite::~WitRtSite ()                  
   {                                      
   }                                      
                                          
d168 3
a170 3
   {
   findRtCands (myRtCands_);
   }
d175 3
a177 3
   {
   myRtCands_.clear ();
   }
d182 10
a191 10
   {
   fprintf (msgFile (),
      "%*s%-9s %*s%d\n",
      labelCol - 1,
      "",
      perCaseID (),
      max (0, dataCol - labelCol - 10),
      "",
      thePer);
   }
d196 5
a200 5
   {
   return
      WitPart    ::nInstances (theProblem) + 
      WitBomEntry::nInstances (theProblem);
   }
d206 6
a211 6
      WitProbAssoc  (theRtMgr),
      mappingIndex_ (theRtMgr->myRtSites ().nElements ()),
      myRtCands_    (),
      myRtMgr_      (theRtMgr)
   {
   }
d214 1
a214 1
// Implementation of class ProdRtSite.        
d216 1
a216 1
                                          
d219 4
a222 4
      WitRtSite (theRtMgr),
      myPart_   (thePart)
   {                                      
   }
d227 2
a228 2
   {
   }
d233 3
a235 3
   {
   return true;
   }
d240 9
a248 9
   {
   fprintf (msgFile (),
      "%*sPart: %*s%s\n",
      labelCol - 1,
      "",
      max (0, dataCol - labelCol - 6),
      "",
      myPart_->partName ().myCstring ());
   }
d253 3
a255 3
   {
   return myPart_->explodeable (expPer);
   }
d260 3
a262 3
   {
   return myPart_->propRtg ();
   }
d267 3
a269 3
   {
   return myPart_->singleSource ();
   }
d274 3
a276 3
   {
   return myPart_;
   }
d281 2
a282 2
   {
   WitBopEntry * theBopEnt;
d284 2
a285 2
   if (not myPart_->explodeable (expPer))
      return NULL;
d287 1
a287 1
   theBopEnt = myPart_->expBopEntry (expPer);
d289 2
a290 2
   return myRtMgr ()->myRtCandFor (theBopEnt);
   }
d295 3
a297 3
   {
   return (myPart_->sortedPartIndex () * 2) + 1;
   }
d302 13
a314 13
   {
   WitBopEntry * theBopEnt;
   WitRtCand *   theRtCand;

   theRtCands.clear ();

   forEachEl (theBopEnt, myPart_->producingBopEntries ())
      {
      theRtCand = myRtMgr ()->myRtCandFor (theBopEnt);

      theRtCands.append (theRtCand);
      }
   }
d319 3
a321 3
   {
   return "Exp Per:";
   }
d329 4
a332 4
      WitRtSite (theRtMgr),
      myBomEnt_ (theBomEnt)
   {
   }
d337 2
a338 2
   {
   }
d343 3
a345 3
   {
   return false;
   }
d350 10
a359 10
   {
   fprintf (msgFile (),
      "%*sBomEntry: %*s%s #%d\n",
      labelCol - 1,
      "",
      max (0, dataCol - labelCol - 10),
      "",
      myBomEnt_->myOperationName ().myCstring (),
      myBomEnt_->localIndex ());
   }
d364 3
a366 3
   {
   return myBomEnt_->inEffect (execPer);
   }
d371 3
a373 3
   {
   return myBomEnt_->propRtg ();
   }
d378 3
a380 3
   {
   return myBomEnt_->singleSource ();
   }
d385 5
a389 5
   {
   WitOperation * theOpn;
   int            minIdx;
   WitPart *      thePart;
   WitBopEntry *  theBopEnt;
d391 1
a391 1
   theOpn  = myBomEnt_->myOperation ();
d393 1
a393 1
   minIdx  = theOpn->myCompMgr ()->nParts ();
d395 1
a395 1
   thePart = NULL;
d397 5
a401 5
   forEachEl (theBopEnt, theOpn->bop ())
      if (theBopEnt->expAllowed ())
         if (theBopEnt->myPart ()->sortedPartIndex () < minIdx)
            {
            thePart = theBopEnt->myPart ();
d403 2
a404 2
            minIdx  = thePart->sortedPartIndex ();
            }
d406 1
a406 1
   witAssert (thePart != NULL);
d408 2
a409 2
   return thePart;
   }
d414 6
a419 6
   {
   if (myBomEnt_->inEffect (execPer))
      return myRtMgr ()->myRtCandFor (myBomEnt_);
   else
      return NULL;
   }
d424 4
a427 4
   {
   int            minIdx;
   WitOperation * theOpn;
   WitBopEntry *  theBopEnt;
d429 1
a429 1
   minIdx = myCompMgr ()->nParts ();
d431 1
a431 1
   theOpn = myBomEnt_->myOperation ();
d433 2
a434 2
   forEachEl (theBopEnt, theOpn->bop ())
      setToMin (minIdx, theBopEnt->myPart ()->sortedPartIndex ());
d436 2
a437 2
   return (minIdx * 2);
   }
d442 3
a444 3
   {
   WitSubEntry * theSub;
   WitRtCand *   theRtCand;
d446 1
a446 1
   theRtCands.clear ();
d448 1
a448 1
   theRtCand = myRtMgr ()->myRtCandFor (myBomEnt_);
d450 1
a450 1
   theRtCands.append (theRtCand);
d452 3
a454 3
   forEachEl (theSub, myBomEnt_->mySubEntries ())
      {
      theRtCand = myRtMgr ()->myRtCandFor (theSub);
d456 3
a458 3
      theRtCands.append (theRtCand);
      }
   }
d463 3
a465 3
   {
   return "Exec Per:";
   }
d468 7
a474 7
// Implementation of class RtCand.        
//------------------------------------------------------------------------------
                                          
WitRtCand::~WitRtCand ()                  
   {                                      
   }                                      
                                          
d478 3
a480 3
   {
   return WitBillEntry::nInstances (theProblem);
   }
d485 3
a487 3
   {
   return myBillEnt_->thisBopEnt ();
   }
d492 3
a494 3
   {
   return myBillEnt_->thisConsEnt ();
   }
d499 10
a508 10
         WitBillEntry * theBillEnt,
         WitRtSite *    theRtSite,
         WitRtMgr *     theRtMgr):

      WitProbAssoc  (theBillEnt),
      mappingIndex_ (theRtMgr->myRtCands ().nElements ()),
      myBillEnt_    (theBillEnt),
      myRtSite_     (theRtSite)
   {
   }
d511 1
a511 1
// Implementation of class ProdRtCand.        
d513 1
a513 1
                                          
d515 4
a518 4
      WitBopEntry * theBopEnt,
      WitRtMgr *    theRtMgr)
   {
   WitRtSite * theRtSite;
d520 1
a520 1
   theRtSite = theRtMgr->myRtSiteFor (theBopEnt->myPart ());
d522 2
a523 2
   return new WitProdRtCand (theBopEnt, theRtSite, theRtMgr);
   }
d528 8
a535 8
         WitBopEntry * theBopEnt,
         WitRtSite *   theRtSite,
         WitRtMgr *    theRtMgr):

      WitRtCand (theBopEnt, theRtSite, theRtMgr),
      myBopEnt_ (theBopEnt)                 
   {
   }
d540 3
a542 3
   {
   }
                                          
d546 3
a548 3
   {
   return myBopEnt_->expAllowed ();
   }
d553 10
a562 10
   {
   fprintf (msgFile (),
      "%*sBopEntry: %*s%s #%d\n",
      labelCol - 1,
      "",
      max (0, dataCol - labelCol - 10),
      "",
      myBopEnt_->myOperationName ().myCstring (),
      myBopEnt_->localIndex      ());
   }
d567 3
a569 3
   {
   return myBopEnt_->expEligible (expPer);
   }
d572 1
a572 1
// Implementation of class ConsRtCand.        
d574 1
a574 1
                                          
d576 4
a579 4
      WitConsEntry * theConsEnt,
      WitRtMgr *     theRtMgr)
   {
   WitRtSite * theRtSite;
d581 1
a581 1
   theRtSite = theRtMgr->myRtSiteFor (theConsEnt->myBomEnt ());
d583 2
a584 2
   return new WitConsRtCand (theConsEnt, theRtSite, theRtMgr);
   }
d589 8
a596 8
         WitConsEntry * theConsEnt,
         WitRtSite *    theRtSite,
         WitRtMgr *     theRtMgr):

      WitRtCand  (theConsEnt, theRtSite, theRtMgr),
      myConsEnt_ (theConsEnt)                 
   {
   }
d601 3
a603 3
   {
   }
                                          
d607 2
a608 2
   {
   WitSubEntry * theSub;
d610 1
a610 1
   theSub = myConsEnt_->thisSub ();
d612 2
a613 2
   if (theSub == NULL)
      return true;
d615 4
a618 4
   if (theSub->myPart ()->producingBopEntries ().isEmpty ())
      if (theSub->netAllowed ())
         if (not theSub->myBomEnt ()->singleSource ())
            return false;
d620 2
a621 2
   return (theSub->expAllowed ());
   }
d626 2
a627 2
   {
   WitSubEntry * theSub;
d629 1
a629 1
   theSub = myConsEnt_->thisSub ();
d631 24
a654 24
   if (theSub != NULL)
      fprintf (msgFile (), 
         "%*sCons Entry:    %*sSub #%d\n",
         labelCol - 1,
         "",
         max (0, dataCol - labelCol - 15),
         "",
         theSub->localIndex ());
   else
      fprintf (msgFile (),
         "%*sCons Entry:    %*sItself\n",
         labelCol - 1,
         "",
         max (0, dataCol - labelCol - 15),
         "");

   fprintf (msgFile (),
         "%*sConsumed Part: %*s%s\n",
         labelCol - 1,
         "",
         max (0, dataCol - labelCol - 15),
         "",
         myConsEnt_->myPartName ().myCstring ());
   }
d659 3
a661 3
   {
   return myConsEnt_->inEffect (execPer);
   }
@


1.45
log
@Heuristic Adjustment
@
text
@a33 1
#include <ConsEnt.h>
@


1.44
log
@Selection reuse.
@
text
@d32 1
a32 1
#include <Opn.h>
@


1.43
log
@Changed source file names:
   Global.h ==> GlobalComp.h
   Global.C ==> GlobalComp.C
@
text
@d59 1
a59 1
   if (myGlobalComp ()->selPrintLevel () >= 3)
@


1.42
log
@Stochastic Implosion
@
text
@d30 1
a30 1
#include <Global.h>
@


1.41
log
@Updated the copyright date on all source files.
@
text
@d43 1
a43 1
      WitProbAssoc       (theSelector->myProblem ()),
d207 1
a207 1
      WitProbAssoc  (theRtMgr->myProblem ()),
d504 1
a504 1
      WitProbAssoc  (theBillEnt->myProblem ()),
@


1.40
log
@Revised mappingIndex code.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.39
log
@Second attempt to correct a problem with header file inclusion on
g++ 3.3.3.
@
text
@a35 1
#include <MapIdxI.h>
@


1.38
log
@An attempt to correct a problem with header file inclusion on g++ 3.3.3.
@
text
@d31 1
@


1.37
log
@Vector PropRtg.
@
text
@a30 1
#include <Part.h>
a31 1
#include <BomEntry.h>
@


1.36
log
@Vector PropRtg.
@
text
@d262 1
a262 1
const WitFlexVec <bool> & WitProdRtSite::propRt ()
d264 1
a264 1
   return myPart_->propRt ();
d373 1
a373 1
const WitFlexVec <bool> & WitConsRtSite::propRt ()
d375 1
a375 1
   return myBomEnt_->propRt ();
@


1.35
log
@Vector Prop-Rtg.
@
text
@a261 7
bool WitProdRtSite::propRouting ()
   {
   return myPart_->propRouting ();
   }

//------------------------------------------------------------------------------

a372 7
bool WitConsRtSite::propRouting ()
   {
   return myBomEnt_->propRouting ();
   }

//------------------------------------------------------------------------------

@


1.34
log
@Pegged critical list.
@
text
@d269 7
d387 7
@


1.33
log
@Pegged critical list.
@
text
@d50 1
d140 3
d212 1
a212 1
      mySelector_   (theRtMgr->mySelector ())
d285 8
a292 4
   return
      myPart_->explodeable (expPer)?
         myPart_->expBopEntry (expPer)->myRtCand ():
         NULL;
d307 1
d312 5
a316 1
      theRtCands.append (theBopEnt->myRtCand ());
d418 4
a421 4
   return
      myBomEnt_->inEffect (execPer)?
         myBomEnt_->myRtCand ():
         NULL;
d447 1
d451 3
a453 1
   theRtCands.append (myBomEnt_->myRtCand ());
d456 5
a460 1
      theRtCands.append (theSub->myRtCand ());
a475 1
   myBillEnt_->detachRtCand ();
a510 1
   myBillEnt_->attach (this);
@


1.32
log
@Low-Pri Prop-Rt.
@
text
@d45 6
a50 4
      WitProbAssoc (theSelector->myProblem ()),
      myRtSites_   (),
      myRtCands_   (),
      mySelector_  (theSelector)
d70 3
d89 1
d92 7
a98 1
      myRtSites_.append (new WitProdRtSite (thePart, this));
d101 7
a107 1
      myRtSites_.append (new WitConsRtSite (theBomEnt, this));
d117 1
d120 5
a124 2
      if (theBopEnt->myPart ()->myRtSite () != NULL)
         myRtCands_.append (new WitProdRtCand (theBopEnt, this));
d127 6
a132 1
      if (theBomEnt->myRtSite () != NULL)
d134 1
a134 1
         myRtCands_.append (new WitConsRtCand (theBomEnt, this));
d136 1
a136 2
         forEachEl (theSub, theBomEnt->mySubEntries ())
            myRtCands_.append (new WitConsRtCand (theSub, this));
d138 1
a220 1
   myPart_->attach (this);
a226 1
   myPart_->detachRtSite ();
a321 1
   myBomEnt_->attach (this);
a327 1
   myBomEnt_->detachRtSite ();
d499 10
a508 1
WitProdRtCand::WitProdRtCand (WitBopEntry * theBopEnt, WitRtMgr * theRtMgr):
d510 8
a517 1
      WitRtCand (theBopEnt, theBopEnt->myPart ()->myRtSite (), theRtMgr),
d560 17
a576 1
WitConsRtCand::WitConsRtCand (WitConsEntry * theConsEnt, WitRtMgr * theRtMgr):
d578 1
a578 1
      WitRtCand  (theConsEnt, theConsEnt->myBomEnt ()->myRtSite (), theRtMgr),
@


1.31
log
@Low-Pri Prop-Rt.
@
text
@d176 1
a176 1
WitRtSite::WitRtSite (WitRtCase theRtCase, WitRtMgr * theRtMgr):
a180 1
      myRtCase_     (theRtCase),
d191 1
a191 1
      WitRtSite (prodRtCase, theRtMgr),
d206 7
d294 1
a294 1
      WitRtSite (consRtCase, theRtMgr),
d309 7
@


1.30
log
@Low-Pri Prop-Rt.
@
text
@d478 1
a478 1
bool WitProdRtCand::needsMrCand ()
d523 1
a523 1
bool WitConsRtCand::needsMrCand ()
@


1.29
log
@Low-Pri Prop-Rt.
@
text
@d558 1
a558 1
         "%*sCons Entry:    %*sSelf\n",
@


1.28
log
@Low-Pri Prop-Rt.
@
text
@a26 1
#include <RtSitePtr.h>
d448 1
a448 1
         WitRtSitePtr   theRtSite,
d465 1
a465 1
      WitRtCand (theBopEnt, theBopEnt->myPart (), theRtMgr),
d510 1
a510 1
      WitRtCand  (theConsEnt, theConsEnt->myBomEnt (), theRtMgr),
@


1.27
log
@Low-Pri Prop-Rt.
@
text
@d449 1
a449 1
         WitRtSitePtr   theRtSitePtr,
d455 1
a455 1
      myRtSite_     (theRtSitePtr ())
@


1.26
log
@Removed a bad function overload.
@
text
@d154 1
a154 1
void WitRtSite::printPer (WitPeriod thePer, int dataCol)
d157 3
a159 1
      "   %-9s %*s%d\n",
d161 1
a161 1
      max (0, dataCol - 14),
d208 1
a208 1
void WitProdRtSite::printID (int dataCol)
d211 4
a214 2
      "   Part: %*s%s\n",
      max (0, dataCol - 10),
d304 1
a304 1
void WitConsRtSite::printID (int dataCol)
d307 4
a310 2
      "   BomEntry: %*s%s #%d\n",
      max (0, dataCol - 14),
d486 1
a486 1
void WitProdRtCand::printID (int dataCol)
d489 4
a492 2
      "      BopEntry: %*s%s #%d\n",
      max (0, dataCol - 17),
d543 1
a543 1
void WitConsRtCand::printID (int dataCol)
d551 4
a554 2
         "      Cons Entry:    %*sSub #%d\n",
         max (0, dataCol - 22),
d559 4
a562 2
         "      Cons Entry:    %*sSelf\n",
         max (0, dataCol - 22),
d566 4
a569 2
         "      Consumed Part: %*s%s\n",
         max (0, dataCol - 22),
@


1.25
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d429 1
a429 1
   return myBillEnt_->myBopEnt ();
d436 1
a436 1
   return myBillEnt_->myConsEnt ();
d520 1
a520 1
   theSub = myConsEnt_->mySub ();
d539 1
a539 1
   theSub = myConsEnt_->mySub ();
@


1.24
log
@Attempt to fix syntax errors from GCC compiler.
@
text
@d38 1
a38 2

#include <PtrMapI.h>
@


1.23
log
@Continued implementation of proportionate routing.
@
text
@d27 1
a27 1
#include <RtSiteComp.h>
d444 1
a444 1
         WitRtSiteComp  theRtSiteComp,
d450 1
a450 1
      myRtSite_     (theRtSiteComp)
@


1.22
log
@Continued implementation of proportionate routing.
@
text
@d27 1
d444 1
a444 1
         WitRtSite *    theRtSite,
d450 1
a450 1
      myRtSite_     (theRtSite)
d461 1
a461 1
      WitRtCand (theBopEnt, theBopEnt->myPart ()->myRtSite (), theRtMgr),
d504 1
a504 1
      WitRtCand  (theConsEnt, theConsEnt->myBomEnt ()->myRtSite (), theRtMgr),
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d175 1
a175 1
WitRtSite::WitRtSite (bool forProdVal, WitRtMgr * theRtMgr):
d180 1
a180 1
      forProd_      (forProdVal),
d191 1
a191 1
      WitRtSite (true, theRtMgr),
d285 1
a285 1
      WitRtSite (false, theRtMgr),
d423 14
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@d435 1
a435 2
      myRtSite_     (theRtSite),
      mySelector_   (theRtMgr->mySelector ())
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d154 1
a154 1
void WitRtSite::printIDPer (WitPeriod thePer, int dataCol)
a155 2
   printID (dataCol);

@


1.18
log
@Continued implementation of proportionate routing.
@
text
@a26 1
#include <MrMgr.h>
d38 2
d154 14
d177 1
a177 1
WitRtSite::WitRtSite (WitRtMgr * theRtMgr):
d182 1
d193 1
a193 1
      WitRtSite (theRtMgr),
a218 7
const char * WitProdRtSite::perCaseID ()
   {
   return "Exp Per:";
   }

//------------------------------------------------------------------------------

d240 1
a240 1
bool WitProdRtSite::mrMultiChoice ()
d242 1
a242 1
   return mySelector ()->myPmrMgr ()->multiChoice (myPart_);
d247 1
a247 1
WitRtCand * WitProdRtSite::selMrRtCand (WitPeriod expPer)
d250 3
a252 19
      mySelector ()->myPmrMgr ()->selBopEntry (myPart_, expPer)->
         myRtCand ();
   }

//------------------------------------------------------------------------------

void WitProdRtSite::getMrRtCands (WitObjStack <WitRtCand> & theRtCands)
   {
   WitBopEntStack theBopEnts (myProblem ());
   WitBopEntry *  theBopEnt;

   mySelector ()->myPmrMgr ()->getCandBopEnts (myPart_, theBopEnts);

   theRtCands.clear ();

   while (theBopEnts.pop (theBopEnt))
      theRtCands.push (theBopEnt->myRtCand ());

   theRtCands.reverse ();
d275 7
d287 1
a287 1
      WitRtSite (theRtMgr),
a313 7
const char * WitConsRtSite::perCaseID ()
   {
   return "Exec Per:";
   }

//------------------------------------------------------------------------------

d335 1
a335 1
bool WitConsRtSite::mrMultiChoice ()
d337 4
a340 2
   return mySelector ()->myCmrMgr ()->multiChoice (myBomEnt_);
   }
d342 1
a342 1
//------------------------------------------------------------------------------
d344 1
a344 5
WitRtCand * WitConsRtSite::selMrRtCand (WitPeriod execPer)
   {
   return
      mySelector ()->myCmrMgr ()->selConsEntry (myBomEnt_, execPer)->
         myRtCand ();
d346 1
a346 2
   return NULL;
   }
d348 5
a352 1
//------------------------------------------------------------------------------
d354 2
a355 4
void WitConsRtSite::getMrRtCands (WitObjStack <WitRtCand> & theRtCands)
   {
   WitConsEntStack theConsEnts (myProblem ());
   WitConsEntry *  theConsEnt;
d357 1
a357 1
   mySelector ()->myCmrMgr ()->getCandConsEnts (myBomEnt_, theConsEnts);
d359 2
a360 1
   theRtCands.clear ();
d362 1
a362 2
   while (theConsEnts.pop (theConsEnt))
      theRtCands.push (theConsEnt->myRtCand ());
d364 6
a369 1
   theRtCands.reverse ();
d405 7
d462 7
d487 4
d492 2
a493 1
bool WitProdRtCand::prodCase ()
a494 1
   return true;
d499 1
a499 1
bool WitProdRtCand::valid (WitPeriod expPer)
a500 1
   return mySelector ()->myPmrMgr ()->valid (myBopEnt_, expPer);
d502 1
a502 1

d505 1
a505 1
void WitProdRtCand::beSelectedByMR (WitPeriod expPer)
d507 1
a507 2
   mySelector ()->myPmrMgr ()->select (myBopEnt_, expPer);
   }
d509 1
a509 5
//------------------------------------------------------------------------------
// Implementation of class ConsRtCand.        
//------------------------------------------------------------------------------
                                          
WitConsRtCand::WitConsRtCand (WitConsEntry * theConsEnt, WitRtMgr * theRtMgr):
d511 2
a512 4
      WitRtCand  (theConsEnt, theConsEnt->myBomEnt ()->myRtSite (), theRtMgr),
      myConsEnt_ (theConsEnt)                 
   {
   }
d514 4
a517 1
//------------------------------------------------------------------------------
d519 1
a519 2
WitConsRtCand::~WitConsRtCand ()
   {
d521 1
a521 1
                                          
d528 1
a528 1
   myConsEnt_->getSubEntry (theSub);
a553 21
   }

//------------------------------------------------------------------------------

bool WitConsRtCand::prodCase ()
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitConsRtCand::valid (WitPeriod execPer)
   {
   return mySelector ()->myCmrMgr ()->valid (myConsEnt_, execPer);
   }

//------------------------------------------------------------------------------

void WitConsRtCand::beSelectedByMR (WitPeriod execPer)
   {
   mySelector ()->myCmrMgr ()->select (myConsEnt_, execPer);
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@d86 1
a86 2
      if (thePart->producingBopEntries ().nElements () > 1)
         myRtSites_.append (new WitProdRtSite (thePart, this));
d89 1
a89 2
      if (not theBomEnt->mySubEntries ().isEmpty ())
         myRtSites_.append (new WitConsRtSite (theBomEnt, this));
d153 1
a153 1
int WitRtSite::nInstances (WitProblem *)
d155 3
a157 3
   stronglyAssert (false);

   return 0;
d418 1
a418 1
int WitRtCand::nInstances (WitProblem *)
d420 1
a420 3
   stronglyAssert (false);

   return 0;
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@d27 2
d43 1
a43 1
WitRtMgr::WitRtMgr (WitProblem * theProblem):
d45 1
a45 1
      WitProbAssoc (theProblem),
d47 2
a48 1
      myRtCands_   ()
d61 1
a61 1
                                          
d168 2
a169 1
      myRtCands_    ()
d194 18
d226 24
a249 1
void WitProdRtSite::prtPrBrPtID (WitPeriod expPer)
d251 18
a268 5
   fprintf (msgFile (),
      "   Part:    %s\n"
      "   Exp Per: %d\n",
      myPart_->partName ().myCstring (),
      expPer);
d304 19
d337 1
a337 1
void WitConsRtSite::prtPrBrPtID (WitPeriod execPer)
d339 54
a392 7
   fprintf (msgFile (),
      "   Operation: %s\n"
      "   Bom Ent #  %d\n"
      "   Exec Per:  %d\n",
      myBomEnt_->myOperationName ().myCstring (),
      myBomEnt_->localIndex (),
      execPer);
d437 2
a438 1
      myRtSite_     (theRtSite)
d462 1
a462 1
void WitProdRtCand::prtPrPtID ()
d465 3
a467 2
      "      Operation:      %s\n"
      "      BOP Entry #:    %d\n",
d469 1
a469 1
      myBopEnt_->localIndex ());
d487 14
d519 1
a519 1
void WitConsRtCand::prtPrPtID ()
d527 3
a529 1
         "      Cons Entry:     Sub #%d\n",
d533 3
a535 1
         "      Cons Entry:     Self\n");
d538 3
a540 1
         "      Consumed Part:  %s\n",
d556 14
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d44 2
a45 4
      nRtSites_    (0),
      nRtCands_    (0),
      myRtSites_   (myProblem ()),
      myRtCands_   (myProblem ())
d47 1
a47 1
   WitRtSiteItr theRtSiteItr;
d52 2
a53 4
   theRtSiteItr.attachTo (myRtSites_);

   while (theRtSiteItr.advance ())
      theRtSiteItr->findRtCands ();
d63 1
a63 1
   WitRtSiteItr theRtSiteItr;
d65 2
a66 1
   theRtSiteItr.attachTo (myRtSites_);
d68 2
a69 2
   while (theRtSiteItr.advance ())
      theRtSiteItr->clearRtCands ();
d71 2
a72 2
   deleteContents (myRtCands_);
   deleteContents (myRtSites_);
d84 1
a84 5
         {
         myRtSites_.push (new WitProdRtSite (thePart, this));

         nRtSites_ ++;
         }
d88 1
a88 7
         {
         myRtSites_.push (new WitConsRtSite (theBomEnt, this));

         nRtSites_ ++;
         }

   myRtSites_.reverse ();
d101 1
a101 5
         {
         myRtCands_.push (new WitProdRtCand (theBopEnt, this));

         nRtCands_ ++;
         }
d106 1
a106 3
         myRtCands_.push (new WitConsRtCand (theBomEnt, this));

         nRtCands_ ++;
d109 1
a109 5
            {
            myRtCands_.push (new WitConsRtCand (theSub, this));

            nRtCands_ ++;
            }
a110 2

   myRtCands_.reverse ();
d124 2
a125 2
      nRtSites_,
      nRtCands_);
d164 2
a165 2
      mappingIndex_ (theRtMgr->nRtSites ()),
      myRtCands_    (myProblem ())
d215 1
a215 1
void WitProdRtSite::findRtCands (WitObjStack <WitRtCand> & theRtCands)
d222 1
a222 3
      theRtCands.push (theBopEnt->myRtCand ());

   theRtCands.reverse ();
d273 1
a273 1
void WitConsRtSite::findRtCands (WitObjStack <WitRtCand> & theRtCands)
d279 1
a279 1
   theRtCands.push (myBomEnt_->myRtCand ());
d282 1
a282 3
      theRtCands.push (theSub->myRtCand ());

   theRtCands.reverse ();
d311 1
a311 1
      mappingIndex_ (theRtMgr->nRtCands ()),
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@d229 11
d287 13
d315 1
a315 1
// Implementation of class OrCand.        
d366 11
d383 7
d408 21
d432 7
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@a228 11
void WitProdRtSite::prtPrBrPtID (WitPeriod expPer)
   {
   fprintf (msgFile (),
      "   Part:    %s\n"
      "   Exp Per: %d\n",
      myPart_->partName ().myCstring (),
      expPer);
   }

//------------------------------------------------------------------------------

a275 13
void WitConsRtSite::prtPrBrPtID (WitPeriod execPer)
   {
   fprintf (msgFile (),
      "   Operation: %s\n"
      "   Bom Ent #  %d\n"
      "   Exec Per:  %d\n",
      myBomEnt_->myOperationName ().myCstring (),
      myBomEnt_->localIndex (),
      execPer);
   }

//------------------------------------------------------------------------------

a341 11
void WitProdRtCand::prtPrPtID ()
   {
   fprintf (msgFile (),
      "      Operation:      %s\n"
      "      BOP Entry #:    %d\n",
      myBopEnt_->myOperationName ().myCstring (),
      myBopEnt_->localIndex ());
   }

//------------------------------------------------------------------------------

a363 21
//------------------------------------------------------------------------------

void WitConsRtCand::prtPrPtID ()
   {
   WitSubEntry * theSub;

   myConsEnt_->getSubEntry (theSub);

   if (theSub != NULL)
      fprintf (msgFile (), 
         "      Cons Entry:     Sub #%d\n",
         theSub->localIndex ());
   else
      fprintf (msgFile (),
         "      Cons Entry:     Self\n");

   fprintf (msgFile (),
         "      Consumed Part:  %s\n",
         myConsEnt_->myPartName ().myCstring ());
   }

@


1.12
log
@Continued implementation of proportionate routing.
@
text
@d44 2
d86 6
a91 1
      myRtSites_.push (new WitProdRtSite (thePart));
d94 6
a99 1
      myRtSites_.push (new WitConsRtSite (theBomEnt));
d113 6
a118 1
      myRtCands_.push (new WitProdRtCand (theBopEnt));
d121 13
a133 6
      {
      myRtCands_.push (new WitConsRtCand (theBomEnt));

      forEachEl (theSub, theBomEnt->mySubEntries ())
         myRtCands_.push (new WitConsRtCand (theSub));
      }
d149 2
a150 2
      myRtSites_.nElements (),
      myRtCands_.nElements ());
d177 1
a177 1
int WitRtSite::nInstances (WitProblem * theProblem)
d179 3
a181 3
   return
        theProblem->myCompMgr ()->nParts ()
      + theProblem->myCompMgr ()->nBomEntries ();
d186 1
a186 1
WitRtSite::WitRtSite (int theIdx, WitProblem * theProblem):
d188 3
a190 3
      WitProbAssoc  (theProblem),
      mappingIndex_ (theIdx),
      myRtCands_    (theProblem)
d198 1
a198 1
WitProdRtSite::WitProdRtSite (WitPart * thePart):
d200 1
a200 1
      WitRtSite (thePart->mappingIndex (), thePart->myProblem ()),
d256 1
a256 1
WitConsRtSite::WitConsRtSite (WitBomEntry * theBomEnt):
d258 1
a258 1
      WitRtSite (mappingIndex (theBomEnt), theBomEnt->myProblem ()),
a299 9
int WitConsRtSite::mappingIndex (WitBomEntry * theBomEnt)
   {
   return
        theBomEnt->myCompMgr ()->nParts () 
      + theBomEnt->mappingIndex ();
   }

//------------------------------------------------------------------------------

d325 1
a325 1
int WitRtCand::nInstances (WitProblem * theProblem)
d327 3
a329 1
   return theProblem->myCompMgr ()->nBillEntries ();
d334 4
a337 1
WitRtCand::WitRtCand (WitBillEntry * theBillEnt, WitRtSite * theRtSite):
d340 1
a340 1
      mappingIndex_ (theBillEnt->mappingIndex ()),
d351 1
a351 1
WitProdRtCand::WitProdRtCand (WitBopEntry * theBopEnt):
d353 1
a353 1
      WitRtCand (theBopEnt, theBopEnt->myPart ()->myRtSite ()),
d386 1
a386 1
WitConsRtCand::WitConsRtCand (WitConsEntry * theConsEnt):
d388 1
a388 1
      WitRtCand  (theConsEnt, theConsEnt->myBomEnt ()->myRtSite ()),
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@d12 10
d23 383
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@a11 12
//
// Contains the implementation of the following classes:
//
//    RtMgr.
//    ProdRtMgr.
//    ConsRtMgr.
//    RtSite.
//    ProdRtSite.
//    ConsRtSite.
//    RtCand.
//    ProdRtCand.
//    ConsRtCand.
a12 573

#include <RtMgr.h>
#include <ConcRtSite.h>
#include <ConcRtCand.h>
#include <Part.h>
#include <Opn.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <Global.h>
#include <PtrMapI.h>

//------------------------------------------------------------------------------
// Implementation of class RtMgr.         
//------------------------------------------------------------------------------

void WitRtMgr::print ()
   {
   fprintf (msgFile (),
      "\n"
      "Routing Element Subsystem (%s Section):\n"
      "\n"
      "   # Routing Sites:      %2d\n"
      "   # Routing Candidates: %2d\n",
      sectionName (),
      nRtSites_,
      nRtCands_);
   }

//------------------------------------------------------------------------------
                                          
WitRtMgr::WitRtMgr (WitProblem * theProblem):
      WitProbAssoc (theProblem),

      nRtSites_    (0),
      nRtCands_    (0),
      myRtSites_   (myProblem ()),
      myRtCands_   (myProblem ())
   {                                      
   }                                      
                                          
//------------------------------------------------------------------------------
                                          
WitRtMgr::~WitRtMgr ()                    
   {                                      
   WitRtSiteItr theRtSiteItr;

   theRtSiteItr.attachTo (myRtSites_);

   while (theRtSiteItr.advance ())
      theRtSiteItr->clearRtCands ();

   deleteContents (myRtCands_);
   deleteContents (myRtSites_);
   }                                      

//------------------------------------------------------------------------------

void WitRtMgr::setUp ()
   {
   WitRtSiteItr theRtSiteItr;

   buildRtSites ();

   myRtSites_.reverse ();

   buildRtCands ();

   myRtCands_.reverse ();

   theRtSiteItr.attachTo (myRtSites_);

   while (theRtSiteItr.advance ())
      theRtSiteItr->findRtCands ();
   }

//------------------------------------------------------------------------------

void WitRtMgr::store (WitRtSite * theRtSite)
   {
   myRtSites_.push (theRtSite);

   nRtSites_ ++;
   }

//------------------------------------------------------------------------------

void WitRtMgr::store (WitRtCand * theRtCand)
   {
   myRtCands_.push (theRtCand);

   nRtCands_ ++;
   }

//------------------------------------------------------------------------------
// Implementation of class ProdRtMgr.         
//------------------------------------------------------------------------------

WitProdRtMgr * WitProdRtMgr::newInstance (WitProblem * theProblem)
   {
   WitProdRtMgr * theProdRtMgr;

   theProdRtMgr = new WitProdRtMgr (theProblem);

   theProdRtMgr->setUp ();

   return theProdRtMgr;
   }

//------------------------------------------------------------------------------
                                          
WitProdRtMgr::~WitProdRtMgr ()                    
   {                                      
   myRtCandFor_.clear ();
   myRtSiteFor_.clear ();
   }                                      
                                          
//------------------------------------------------------------------------------

const char * WitProdRtMgr::sectionName ()
   {
   return "Production";
   }

//------------------------------------------------------------------------------

WitRtSite * WitProdRtMgr::myRtSiteFor (WitPart * thePart)
   {
   return myRtSiteFor_ (thePart);
   }

//------------------------------------------------------------------------------

WitRtCand * WitProdRtMgr::myRtCandFor (WitBopEntry * theBopEnt)
   {
   return myRtCandFor_ (theBopEnt);
   }

//------------------------------------------------------------------------------
                                          
WitProdRtMgr::WitProdRtMgr (WitProblem * theProblem):
      WitRtMgr     (theProblem),
                                          
      myRtSiteFor_ (myProblem ()),
      myRtCandFor_ (myProblem ())
   {                                      
   }                                      
                                          
//------------------------------------------------------------------------------

void WitProdRtMgr::buildRtSites ()
   {
   WitPart *   thePart;
   WitRtSite * theRtSite;

   forEachPart (thePart, myProblem ())
      {
      theRtSite = new WitProdRtSite (thePart, this);

      myRtSiteFor_ (thePart) = theRtSite;

      store (theRtSite);
      }
   }

//------------------------------------------------------------------------------

void WitProdRtMgr::buildRtCands ()
   {
   WitBopEntry * theBopEnt;
   WitRtCand *   theRtCand;

   forEachBopEntry (theBopEnt, myProblem ())
      {
      theRtCand = new WitProdRtCand (theBopEnt, this);

      myRtCandFor_ (theBopEnt) = theRtCand;

      store (theRtCand);
      }
   }

//------------------------------------------------------------------------------
// Implementation of class ConsRtMgr.         
//------------------------------------------------------------------------------

WitConsRtMgr * WitConsRtMgr::newInstance (WitProblem * theProblem)
   {
   WitConsRtMgr * theConsRtMgr;

   theConsRtMgr = new WitConsRtMgr (theProblem);

   theConsRtMgr->setUp ();

   return theConsRtMgr;
   }

//------------------------------------------------------------------------------
                                          
WitConsRtMgr::~WitConsRtMgr ()                    
   {                                      
   myRtCandFor_.clear ();
   myRtSiteFor_.clear ();
   }                                      
                                          
//------------------------------------------------------------------------------

const char * WitConsRtMgr::sectionName ()
   {
   return "Consumption";
   }

//------------------------------------------------------------------------------

WitRtSite * WitConsRtMgr::myRtSiteFor (WitBomEntry * theBomEnt)
   {
   return myRtSiteFor_ (theBomEnt);
   }

//------------------------------------------------------------------------------

WitRtCand * WitConsRtMgr::myRtCandFor (WitConsEntry * theConsEnt)
   {
   return myRtCandFor_ (theConsEnt);
   }

//------------------------------------------------------------------------------
                                          
WitConsRtMgr::WitConsRtMgr (WitProblem * theProblem):
      WitRtMgr     (theProblem),
                                          
      myRtSiteFor_ (myProblem ()),
      myRtCandFor_ (myProblem ())
   {                                      
   }                                      
                                          
//------------------------------------------------------------------------------

void WitConsRtMgr::buildRtSites ()
   {
   WitBomEntry * theBomEnt;
   WitRtSite *   theRtSite;

   forEachBomEntry (theBomEnt, myProblem ())
      {
      theRtSite = new WitConsRtSite (theBomEnt, this);

      myRtSiteFor_ (theBomEnt) = theRtSite;

      store (theRtSite);
      }
   }

//------------------------------------------------------------------------------

void WitConsRtMgr::buildRtCands ()
   {
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitRtCand *   theRtCand;

   forEachBomEntry (theBomEnt, myProblem ())
      {
      theRtCand = new WitConsRtCand (theBomEnt, this);

      myRtCandFor_ (theBomEnt) = theRtCand;

      store (theRtCand);

      forEachEl (theSub, theBomEnt->mySubEntries ())
         {
         theRtCand = new WitConsRtCand (theSub, this);

         myRtCandFor_ (theSub) = theRtCand;

         store (theRtCand);
         }
      }
   }

//------------------------------------------------------------------------------
// Implementation of class RtSite.        
//------------------------------------------------------------------------------
                                          
WitRtSite::~WitRtSite ()                  
   {                                      
   }                                      
                                          
//------------------------------------------------------------------------------

void WitRtSite::findRtCands ()
   {
   findRtCands (myRtCands_);
   }

//------------------------------------------------------------------------------

void WitRtSite::clearRtCands ()
   {
   myRtCands_.clear ();
   }

//------------------------------------------------------------------------------

int WitRtSite::nInstances (WitProblem *)
   {
   stronglyAssert (false);

   return 0;
   }

//------------------------------------------------------------------------------

WitRtSite::WitRtSite (WitRtMgr * theRtMgr):
      WitProbAssoc  (theRtMgr->myProblem ()),

      mappingIndex_ (theRtMgr->nRtSites  ()),
      myRtCands_    (theRtMgr->myProblem ())
   {                                      
   }                                      

//------------------------------------------------------------------------------
// Implementation of class ProdRtSite.        
//------------------------------------------------------------------------------
                                          
WitProdRtSite::WitProdRtSite (WitPart * thePart, WitProdRtMgr * theProdRtMgr):
      WitRtSite    (theProdRtMgr),
                                          
      myPart_      (thePart),
      myProdRtMgr_ (theProdRtMgr)
   {                                      
   }

//------------------------------------------------------------------------------

WitProdRtSite::~WitProdRtSite ()
   {
   }

//------------------------------------------------------------------------------

bool WitProdRtSite::explodeable (WitPeriod expPer)
   {
   return myPart_->explodeable (expPer);
   }

//------------------------------------------------------------------------------

bool WitProdRtSite::propRouting ()
   {
   return myPart_->propRouting ();
   }

//------------------------------------------------------------------------------

void WitProdRtSite::prtPrBrPtID (WitPeriod expPer)
   {
   fprintf (msgFile (),
      "   Part:    %s\n"
      "   Exp Per: %d\n",
      myPart_->partName ().myCstring (),
      expPer);
   }

//------------------------------------------------------------------------------

void WitProdRtSite::findRtCands (WitObjStack <WitRtCand> & theRtCands)
   {
   WitBopEntry * theBopEnt;

   theRtCands.clear ();

   forEachEl (theBopEnt, myPart_->producingBopEntries ())
      theRtCands.push (myProdRtMgr_->myRtCandFor (theBopEnt));

   theRtCands.reverse ();
   }

//------------------------------------------------------------------------------
// Implementation of class ConsRtSite.
//------------------------------------------------------------------------------

WitConsRtSite::WitConsRtSite (
         WitBomEntry *  theBomEnt,
         WitConsRtMgr * theConsRtMgr):

      WitRtSite    (theConsRtMgr),

      myBomEnt_    (theBomEnt),
      myConsRtMgr_ (theConsRtMgr)
   {
   }

//------------------------------------------------------------------------------

WitConsRtSite::~WitConsRtSite ()
   {
   }

//------------------------------------------------------------------------------

bool WitConsRtSite::explodeable (WitPeriod execPer)
   {
   return myBomEnt_->inEffect (execPer);
   }

//------------------------------------------------------------------------------

bool WitConsRtSite::propRouting ()
   {
   return myBomEnt_->propRouting ();
   }

//------------------------------------------------------------------------------

void WitConsRtSite::prtPrBrPtID (WitPeriod execPer)
   {
   fprintf (msgFile (),
      "   Operation: %s\n"
      "   Bom Ent #  %d\n"
      "   Exec Per:  %d\n",
      myBomEnt_->myOperationName ().myCstring (),
      myBomEnt_->localIndex (),
      execPer);
   }

//------------------------------------------------------------------------------

void WitConsRtSite::findRtCands (WitObjStack <WitRtCand> & theRtCands)
   {
   WitSubEntry * theSub;

   theRtCands.clear ();

   theRtCands.push (myConsRtMgr_->myRtCandFor (myBomEnt_));

   forEachEl (theSub, myBomEnt_->mySubEntries ())
      theRtCands.push (myConsRtMgr_->myRtCandFor (theSub));

   theRtCands.reverse ();
   }

//------------------------------------------------------------------------------
// Implementation of class RtCand.        
//------------------------------------------------------------------------------
                                          
WitRtCand::~WitRtCand ()                  
   {                                      
   }                                      
                                          
//------------------------------------------------------------------------------

int WitRtCand::nInstances (WitProblem *)
   {
   stronglyAssert (false);

   return 0;
   }

//------------------------------------------------------------------------------

WitRtCand::WitRtCand (WitRtSite * theRtSite, WitRtMgr * theRtMgr):
      WitProbAssoc  (theRtMgr->myProblem ()),

      mappingIndex_ (theRtMgr->nRtCands ()),
      myRtSite_     (theRtSite)
   {                                      
   }                                      
                                          
//------------------------------------------------------------------------------
// Implementation of class ProdRtCand.        
//------------------------------------------------------------------------------
                                          
WitProdRtCand::WitProdRtCand (
         WitBopEntry *  theBopEnt,
         WitProdRtMgr * theProdRtMgr):

      WitRtCand (
         theProdRtMgr->myRtSiteFor (theBopEnt->myPart ()),
         theProdRtMgr),
                                          
      myBopEnt_ (theBopEnt)                 
   {
   }

//------------------------------------------------------------------------------

WitProdRtCand::~WitProdRtCand ()
   {
   }
                                          
//------------------------------------------------------------------------------

void WitProdRtCand::prtPrPtID ()
   {
   fprintf (msgFile (),
      "      Operation:      %s\n"
      "      BOP Entry #:    %d\n",
      myBopEnt_->myOperationName ().myCstring (),
      myBopEnt_->localIndex ());
   }

//------------------------------------------------------------------------------

bool WitProdRtCand::isEligible (WitPeriod expPer)
   {
   return myBopEnt_->expEligible (expPer);
   }

//------------------------------------------------------------------------------

WitBillEntry * WitProdRtCand::myBillEntry ()
   {
   return myBopEnt_;
   }

//------------------------------------------------------------------------------
// Implementation of class ConsRtCand.        
//------------------------------------------------------------------------------
                                          
WitConsRtCand::WitConsRtCand (
         WitConsEntry * theConsEnt,
         WitConsRtMgr * theConsRtMgr):

      WitRtCand  (
         theConsRtMgr->myRtSiteFor (theConsEnt->myBomEnt ()),
         theConsRtMgr),

      myConsEnt_ (theConsEnt)                 
   {                                      
   }

//------------------------------------------------------------------------------

WitConsRtCand::~WitConsRtCand ()
   {
   }

//------------------------------------------------------------------------------

void WitConsRtCand::prtPrPtID ()
   {
   WitSubEntry * theSub;

   myConsEnt_->getSubEntry (theSub);

   if (theSub != NULL)
      fprintf (msgFile (), 
         "      Cons Entry:     Sub #%d\n",
         theSub->localIndex ());
   else
      fprintf (msgFile (),
         "      Cons Entry:     Self\n");

   fprintf (msgFile (),
         "      Consumed Part:  %s\n",
         myConsEnt_->myPartName ().myCstring ());
   }

//------------------------------------------------------------------------------

bool WitConsRtCand::isEligible (WitPeriod execPer)
   {
   return myConsEnt_->inEffect (execPer);
   }

//------------------------------------------------------------------------------

WitBillEntry * WitConsRtCand::myBillEntry ()
   {
   return myConsEnt_;
   }

@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d35 1
a35 1
#include <PtrMapI.h>                      
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d27 2
a28 2
#include <RtSite.h>
#include <RtCand.h>
d144 7
a207 7

const char * WitProdRtMgr::sectionName ()
   {
   return "Production";
   }

//------------------------------------------------------------------------------
d232 7
a305 7

const char * WitConsRtMgr::sectionName ()
   {
   return "Consumption";
   }

//------------------------------------------------------------------------------
d339 2
d382 1
a382 1
   fprintf (myPart_->msgFile (),
d426 1
a426 1
bool WitConsRtSite::explodeable (WitPeriod)
d428 1
a428 1
   return false;
d435 1
a435 1
   return false;
d440 1
a440 1
void WitConsRtSite::prtPrBrPtID (WitPeriod)
d442 7
a448 1
   stronglyAssert (false);
d487 2
d520 1
a520 1
   fprintf (myBopEnt_->msgFile (),
d567 15
a581 1
   stronglyAssert (false);
d586 1
a586 1
bool WitConsRtCand::isEligible (WitPeriod)
d588 1
a588 3
   stronglyAssert (false);

   return false;
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@d19 2
a20 2
//    RtPart.
//    RtBomEnt.
d22 2
a23 2
//    RtBopEnt.
//    RtConsEnt.
d175 1
a175 1
      theRtSite = new WitRtPart (thePart, this);
d192 1
a192 1
      theRtCand = new WitRtBopEnt (theBopEnt, this);
d263 1
a263 1
      theRtSite = new WitRtBomEnt (theBomEnt, this);
d281 1
a281 1
      theRtCand = new WitRtConsEnt (theBomEnt, this);
d289 1
a289 1
         theRtCand = new WitRtConsEnt (theSub, this);
d345 1
a345 1
// Implementation of class RtPart.        
d348 1
a348 1
WitRtPart::WitRtPart (WitPart * thePart, WitProdRtMgr * theProdRtMgr):
d358 1
a358 1
WitRtPart::~WitRtPart ()
d364 1
a364 1
bool WitRtPart::explodeable (WitPeriod expPer)
d371 1
a371 1
bool WitRtPart::propRouting ()
d378 1
a378 1
void WitRtPart::prtPrBrPtID (WitPeriod expPer)
d389 1
a389 1
void WitRtPart::findRtCands (WitObjStack <WitRtCand> & theRtCands)
d402 1
a402 1
// Implementation of class RtBomEnt.
d405 4
a408 1
WitRtBomEnt::WitRtBomEnt (WitBomEntry * theBomEnt, WitConsRtMgr * theConsRtMgr):
d418 1
a418 1
WitRtBomEnt::~WitRtBomEnt ()
d424 1
a424 1
bool WitRtBomEnt::explodeable (WitPeriod)
d431 1
a431 1
bool WitRtBomEnt::propRouting ()
d438 1
a438 1
void WitRtBomEnt::prtPrBrPtID (WitPeriod)
d445 1
a445 1
void WitRtBomEnt::findRtCands (WitObjStack <WitRtCand> & theRtCands)
d485 1
a485 1
// Implementation of class RtBopEnt.        
d488 4
a491 1
WitRtBopEnt::WitRtBopEnt (WitBopEntry * theBopEnt, WitProdRtMgr * theProdRtMgr):
d502 1
a502 1
WitRtBopEnt::~WitRtBopEnt ()
d508 1
a508 1
void WitRtBopEnt::prtPrPtID ()
d519 1
a519 1
float WitRtBopEnt::expShare ()
d521 1
a521 1
   return myBopEnt_->expShare ();
d526 1
a526 1
bool WitRtBopEnt::isEligible (WitPeriod expPer)
d528 1
a528 1
   return myBopEnt_->expEligible (expPer);
d532 1
a532 1
// Implementation of class RtConsEnt.        
d535 1
a535 1
WitRtConsEnt::WitRtConsEnt (
d549 1
a549 1
WitRtConsEnt::~WitRtConsEnt ()
d555 1
a555 1
void WitRtConsEnt::prtPrPtID ()
d562 1
a562 1
float WitRtConsEnt::expShare ()
d564 3
a566 1
   return 0.0;
d571 1
a571 1
bool WitRtConsEnt::isEligible (WitPeriod)
d573 2
a574 1
   stronglyAssert (false);
a575 2
   return false;
   }
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d34 1
d40 15
d59 2
d87 5
a91 1
   buildRtSites (myRtSites_);
d93 1
a93 1
   buildRtCands (myRtCands_);
d102 18
d168 1
a168 1
void WitProdRtMgr::buildRtSites (WitObjStack <WitRtSite> & theRtSites)
d179 1
a179 1
      theRtSites.push (theRtSite);
a180 2

   theRtSites.reverse ();
d185 1
a185 1
void WitProdRtMgr::buildRtCands (WitObjStack <WitRtCand> & theRtCands)
d196 1
a196 1
      theRtCands.push (theRtCand);
d198 3
d202 3
a204 1
   theRtCands.reverse ();
d256 1
a256 1
void WitConsRtMgr::buildRtSites (WitObjStack <WitRtSite> & theRtSites)
d267 1
a267 1
      theRtSites.push (theRtSite);
a268 2

   theRtSites.reverse ();
d273 1
a273 1
void WitConsRtMgr::buildRtCands (WitObjStack <WitRtCand> & theRtCands)
d285 1
a285 1
      theRtCands.push (theRtCand);
d293 1
a293 1
         theRtCands.push (theRtCand);
d296 3
d300 3
a302 1
   theRtCands.reverse ();
d329 1
a329 1
int WitRtSite::nInstances (WitProblem * theProblem)
d331 3
a333 3
   return
        theProblem->myCompMgr ()->nParts      ()
      + theProblem->myCompMgr ()->nBomEntries ();
d337 4
a340 4
                                          
WitRtSite::WitRtSite (int theIdx, WitProblem * theProblem):
      mappingIndex_ (theIdx),
      myRtCands_    (theProblem)
d343 1
a343 1
                                          
d349 1
a349 1
      WitRtSite    (thePart->mappingIndex (), thePart->myProblem ()),
d406 1
a406 1
      WitRtSite    (mappingIndex (theBomEnt), theBomEnt->myProblem ()),
a456 9

int WitRtBomEnt::mappingIndex (WitBomEntry * theBomEnt)
   {
   return
        theBomEnt->myCompMgr ()->nParts () 
      + theBomEnt->mappingIndex ();
   }

//------------------------------------------------------------------------------
d466 1
a466 1
int WitRtCand::nInstances (WitProblem * theProblem)
d468 3
a470 3
   return
        theProblem->myCompMgr ()->nBopEntries  ()
      + theProblem->myCompMgr ()->nConsEntries ();
d474 3
a476 3
                                          
WitRtCand::WitRtCand (int theIdx, WitRtSite * theRtSite):
      mappingIndex_ (theIdx),
d487 2
a488 2
         theBopEnt->mappingIndex (),
         theProdRtMgr->myRtSiteFor (theBopEnt->myPart ())),
d534 2
a535 2
         mappingIndex (theConsEnt),
         theConsRtMgr->myRtSiteFor (theConsEnt->myBomEnt ())),
a567 9
   }

//------------------------------------------------------------------------------

int WitRtConsEnt::mappingIndex (WitConsEntry * theConsEnt)
   {
   return
        theConsEnt->myCompMgr ()->nBopEntries () 
      + theConsEnt->mappingIndex ();
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d17 1
d98 2
a99 4
   myRtCandForConsEnt_.clear ();
   myRtCandForBopEnt_ .clear ();
   myRtSiteForBomEnt_ .clear ();
   myRtSiteForPart_   .clear ();
d106 1
a106 1
   return myRtSiteForPart_ (thePart);
d111 58
a168 1
WitRtSite * WitProdRtMgr::myRtSiteFor (WitBomEntry * theBomEnt)
d170 7
a176 1
   return myRtSiteForBomEnt_ (theBomEnt);
d180 8
d189 1
a189 1
WitRtCand * WitProdRtMgr::myRtCandFor (WitBopEntry * theBopEnt)
d191 1
a191 1
   return myRtCandForBopEnt_ (theBopEnt);
d196 1
a196 1
WitRtCand * WitProdRtMgr::myRtCandFor (WitConsEntry * theConsEnt)
d198 1
a198 1
   return myRtCandForConsEnt_ (theConsEnt);
d203 2
a204 2
WitProdRtMgr::WitProdRtMgr (WitProblem * theProblem):
      WitRtMgr            (theProblem),
d206 2
a207 4
      myRtSiteForPart_    (myProblem ()),
      myRtSiteForBomEnt_  (myProblem ()),
      myRtCandForBopEnt_  (myProblem ()),
      myRtCandForConsEnt_ (myProblem ())
d213 1
a213 1
void WitProdRtMgr::buildRtSites (WitObjStack <WitRtSite> & theRtSites)
a214 1
   WitPart *     thePart;
a217 9
   forEachPart (thePart, myProblem ())
      {
      theRtSite = new WitRtPart (thePart, this);

      myRtSiteForPart_ (thePart) = theRtSite;

      theRtSites.push (theRtSite);
      }

d222 1
a222 1
      myRtSiteForBomEnt_ (theBomEnt) = theRtSite;
d232 1
a232 1
void WitProdRtMgr::buildRtCands (WitObjStack <WitRtCand> & theRtCands)
a233 1
   WitBopEntry * theBopEnt;
a237 9
   forEachBopEntry (theBopEnt, myProblem ())
      {
      theRtCand = new WitRtBopEnt (theBopEnt, this);

      myRtCandForBopEnt_ (theBopEnt) = theRtCand;

      theRtCands.push (theRtCand);
      }

d242 1
a242 1
      myRtCandForConsEnt_ (theBomEnt) = theRtCand;
d250 1
a250 1
         myRtCandForConsEnt_ (theSub) = theRtCand;
d359 1
a359 1
WitRtBomEnt::WitRtBomEnt (WitBomEntry * theBomEnt, WitProdRtMgr * theProdRtMgr):
d363 1
a363 1
      myProdRtMgr_ (theProdRtMgr)
d402 1
a402 1
   theRtCands.push (myProdRtMgr_->myRtCandFor (myBomEnt_));
d405 1
a405 1
      theRtCands.push (myProdRtMgr_->myRtCandFor (theSub));
d494 1
a494 1
         WitProdRtMgr * theProdRtMgr):
d498 1
a498 1
         theProdRtMgr->myRtSiteFor (theConsEnt->myBomEnt ())),
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d16 1
d34 1
a34 1
                                          
d40 4
a43 8
      WitProbAssoc        (theProblem),
                                          
      myRtSiteForPart_    (myProblem ()),
      myRtSiteForBomEnt_  (myProblem ()),
      myRtCandForBopEnt_  (myProblem ()),
      myRtCandForConsEnt_ (myProblem ()),
      myRtSites_          (myProblem ()),
      myRtCands_          (myProblem ())
a44 3
   buildRtSites ();
   buildRtCands ();
   setUpRtSites ();
d51 46
a100 3

   deleteContents (myRtCands_);
   deleteContents (myRtSites_);
d105 1
a105 1
WitRtSite * WitRtMgr::myRtSiteFor (WitPart * thePart)
d112 1
a112 1
WitRtSite * WitRtMgr::myRtSiteFor (WitBomEntry * theBomEnt)
d119 1
a119 1
WitRtCand * WitRtMgr::myRtCandFor (WitBopEntry * theBopEnt)
d126 1
a126 1
WitRtCand * WitRtMgr::myRtCandFor (WitConsEntry * theConsEnt)
d132 12
d145 1
a145 1
void WitRtMgr::buildRtSites ()
d153 1
a153 1
      theRtSite = new WitRtPart (thePart);
d157 1
a157 1
      myRtSites_.push (theRtSite);
d162 1
a162 1
      theRtSite = new WitRtBomEnt (theBomEnt);
d166 1
a166 1
      myRtSites_.push (theRtSite);
d169 1
a169 1
   myRtSites_.reverse ();
d174 1
a174 1
void WitRtMgr::buildRtCands ()
a178 1
   WitRtSite *   theRtSite;
d183 1
a183 3
      theRtSite = myRtSiteFor (theBopEnt->myPart ());

      theRtCand = new WitRtBopEnt (theBopEnt, theRtSite);
d187 1
a187 1
      myRtCands_.push (theRtCand);
d192 1
a192 3
      theRtSite = myRtSiteFor (theBomEnt);

      theRtCand = new WitRtConsEnt (theBomEnt, theRtSite);
d196 1
a196 1
      myRtCands_.push (theRtCand);
d200 1
a200 1
         theRtCand = new WitRtConsEnt (theSub, theRtSite);
d204 1
a204 1
         myRtCands_.push (theRtCand);
d208 1
a208 13
   myRtCands_.reverse ();
   }

//------------------------------------------------------------------------------

void WitRtMgr::setUpRtSites ()
   {
   WitRtSiteItr theRtSiteItr;

   theRtSiteItr.attachTo (myRtSites_);

   while (theRtSiteItr.advance ())
      theRtSiteItr->findRtCands (this);
d221 1
a221 1
void WitRtSite::findRtCands (WitRtMgr * theRtMgr)
d223 8
a230 1
   findRtCands (myRtCands_, theRtMgr);
d254 2
a255 2
WitRtPart::WitRtPart (WitPart * thePart):
      WitRtSite (thePart->mappingIndex (), thePart->myProblem ()),
d257 2
a258 1
      myPart_   (thePart)                 
d295 1
a295 3
void WitRtPart::findRtCands (
      WitObjStack <WitRtCand> & theRtCands,
      WitRtMgr *                theRtMgr)
d302 1
a302 1
      theRtCands.push (theRtMgr->myRtCandFor (theBopEnt));
d311 2
a312 2
WitRtBomEnt::WitRtBomEnt (WitBomEntry * theBomEnt):
      WitRtSite (mappingIndex (theBomEnt), theBomEnt->myProblem ()),
d314 2
a315 1
      myBomEnt_ (theBomEnt)
d348 1
a348 3
void WitRtBomEnt::findRtCands (
      WitObjStack <WitRtCand> & theRtCands,
      WitRtMgr *                theRtMgr)
d354 1
a354 1
   theRtCands.push (theRtMgr->myRtCandFor (myBomEnt_));
d357 1
a357 1
      theRtCands.push (theRtMgr->myRtCandFor (theSub));
d400 4
a403 2
WitRtBopEnt::WitRtBopEnt (WitBopEntry * theBopEnt, WitRtSite * theRtSite):
      WitRtCand (theBopEnt->mappingIndex (), theRtSite),                       
d406 1
a406 1
   {                                      
d444 8
a451 3
WitRtConsEnt::WitRtConsEnt (WitConsEntry * theConsEnt, WitRtSite * theRtSite):
      WitRtCand  (mappingIndex (theConsEnt), theRtSite),
                                          
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d39 1
a39 1
      WitProbAssoc        (theProblem),  
d215 1
a215 1
WitRtPart::WitRtPart (WitPart * thePart): 
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d230 14
d284 14
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d24 3
a31 3
#include <RtMgr.h>
#include <RtSite.h>
#include <RtCand.h>
d39 1
a39 1
      WitProbAssoc          (theProblem),  
d41 6
a46 4
      myRtSitesForParts_    (myProblem ()),
      myRtSitesForBomEnts_  (myProblem ()),
      myRtCandsForBopEnts_  (myProblem ()),
      myRtCandsForConsEnts_ (myProblem ())
d48 3
a50 19
   WitPart *     thePart;
   WitBomEntry * theBomEnt;
   WitBopEntry * theBopEnt;
   WitSubEntry * theSub;

   forEachPart (thePart, myProblem ())
      myRtSitesForParts_ (thePart) = new WitRtPart (thePart);

   forEachBomEntry (theBomEnt, myProblem ())
      myRtSitesForBomEnts_ (theBomEnt) = new WitRtBomEnt (theBomEnt);

   forEachBopEntry (theBopEnt, myProblem ())
      myRtCandsForBopEnts_ (theBopEnt) = new WitRtBopEnt (theBopEnt);

   forEachBomEntry (theBomEnt, myProblem ())
      myRtCandsForConsEnts_ (theBomEnt) = new WitRtConsEnt (theBomEnt);

   forEachSubEntry (theSub, myProblem ())
      myRtCandsForConsEnts_ (theSub) = new WitRtConsEnt (theSub);
d57 4
a60 10
   WitSubEntry * theSub;
   WitBomEntry * theBomEnt;
   WitBopEntry * theBopEnt;
   WitPart *     thePart;

   forEachSubEntry (theSub, myProblem ())
      delete myRtCandsForConsEnts_ (theSub);

   forEachBomEntry (theBomEnt, myProblem ())
      delete myRtCandsForConsEnts_ (theBomEnt);
d62 2
a63 8
   forEachBopEntry (theBopEnt, myProblem ())
      delete myRtCandsForBopEnts_ (theBopEnt);

   forEachBomEntry (theBomEnt, myProblem ())
      delete myRtSitesForBomEnts_ (theBomEnt);

   forEachPart (thePart, myProblem ())
      delete myRtSitesForParts_ (thePart);
d70 1
a70 1
   return myRtSitesForParts_ (thePart);
d77 1
a77 1
   return myRtSitesForBomEnts_ (theBomEnt);
d84 1
a84 1
   return myRtCandsForBopEnts_ (theBopEnt);
d91 86
a176 1
   return myRtCandsForConsEnts_ (theConsEnt);
d188 16
d205 3
a207 1
WitRtSite::WitRtSite ()                   
d216 1
a216 1
      WitRtSite (),                       
d229 27
d260 1
a260 1
      WitRtSite (),
d273 34
d315 9
d325 3
a327 1
WitRtCand::WitRtCand ()                   
d335 2
a336 2
WitRtBopEnt::WitRtBopEnt (WitBopEntry * theBopEnt): 
      WitRtCand (),                       
d349 25
d377 2
a378 2
WitRtConsEnt::WitRtConsEnt (WitConsEntry * theConsEnt): 
      WitRtCand  (),                       
d388 32
@

