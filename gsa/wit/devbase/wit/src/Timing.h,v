head	1.22;
access;
symbols
	sce_5_01_20080919:1.18
	latest_sce_4_20_20060523:1.18.0.2
	sce_4_20_20060523:1.18
	latest_sce4_20_OSL:1.17.0.2
	sce_4_20_OSL:1.17
	sce_410_withVa:1.15
	sce_4_05_20040511:1.14
	sce_4_00_20040201:1.14
	nextGenBranch:1.13.0.2
	nextGenRoot:1.13
	sce_3_30_20030627:1.13
	EndRw-branch:1.10.0.4
	Root-of-EndRw:1.10
	rwToStl:1.10.0.2
	latest_sce_3_10_20010924:1.8.0.2
	sce_3_10_20010924:1.8
	latest_sce_3_00_20010601:1.7.0.2
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2011.09.28.23.50.37;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.09.24.00.28.52;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.08.30.20.18.20;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.03.02.23.07.56;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.09.21.14.53.00;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.09.20.21.47.58;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.21.22.44.36;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.30.18.19.15;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.23.18.12.39;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.22.18.53;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.01.14.26.02;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.18.14.02.46;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.17.20.49.21;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.17.15.11.18;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.02.19.24.07;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.42;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.49;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.27;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef TimingH
#define TimingH

//------------------------------------------------------------------------------
// Header file: "Timing.h"
//
// Contains the declaration of the following classes:
//
//    Timer
//    TimingSection
//
// These classes constitute the timing subsystem of WIT and are used only in
// stand-alone mode.
//------------------------------------------------------------------------------

#include <Str.h>
#include <List.h>

class WitTimingSection;

//------------------------------------------------------------------------------
// class Timer.
// Owns and manages the TimingSections of a stand-alone run.
//------------------------------------------------------------------------------

class WitTimer
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTimer (WitMsgFacility & theMsgFac);
         //
         // myMsgFac_ <-- theMsgFac.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTimer ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMsgFacility &, myMsgFac)

      //------------------------------------------------------------------------
      // Static public member functions.
      //------------------------------------------------------------------------

      static void enterSection (const char * theName);
         //
         // Causes timing to enter the TimingSection matching theName.
         // No-op, when not in stand-alone mode.

      static void leaveSection (const char * theName);
         //
         // Causes timing to leave the current TimingSection, which should
         // match theName.
         // No-op, when not in stand-alone mode.

      static double getTimeAndChargeToCurrent ();
         //
         // Charges timeSincePrev () to the current TimingSection.
         // Returns timeSincePrev ().
         // No-op (returns 0), when not in stand-alone mode.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void include (WitTimingSection * theSection);
         //
         // Includes theSection in allSections_.

      double timeSincePrev ();
         //
         // Returns process time since previous time timeSincePrev () was
         // called. Sets prevTime_ to current value of cpuTime ().

      void display ();
         //
         // Displays timing data at the end of a stand-alone run.

      void reset ();
         //
         // Re-initializes timing: starts timing over again.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void addTime (const char * theName1, const char * theName2);
         //
         // Adds the time charged to the TimingSection for theName2 to
         //      the time charged to the TimingSection for theName1.

      static WitTimingSection * namedSection (const char * theName);
         //
         // Returns the TimingSection whose name is theName.
         // Generates an error, if no such TimingSection exists.
         // Uses a linear search.
         // Returns NULL, if uniqueTimer_ is NULL.

      double cpuTime () const;
         //
         // Returns the current cpu time, in seconds.

      double cpuTimeByRusage () const;
         //
         // Implementation of cpuTime () using the rusage facility.

      inline static WitTimer * uniqueTimer ()
         {
         witAssert (uniqueTimer_ != NULL);

         return uniqueTimer_;
         }

      noCopyCtorAssign (WitTimer);

      //------------------------------------------------------------------------
      // Static private member data.
      //------------------------------------------------------------------------

      static WitTimer * uniqueTimer_;
         //
         // The unique instance of the class in stand-alone mode.
         // NULL, when not in stand-alone mode.

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this Timer.

      double prevTime_;
         //
         // Value returned from cpuTime () the last time timeSincePrev was
         // called, converted to seconds.

      WitList <WitTimingSection> allSections_;
         //
         // The list of all TimingSections, in the order in which they are
         // to appear in the output.

      WitList <WitTimingSection> activeSections_;
         //
         // The LIFO stack of TimingSections entered, but not yet exited.
   };

//------------------------------------------------------------------------------
// class TimingSection.
// Represents a section of the code for timing purposes. At any time during a
// stand-alone run, the CPU time is "charged" to one of the TimingSections.
// At the end of a run, a table is printed showing how much time was charged
// to each TimingSection.
//------------------------------------------------------------------------------

class WitTimingSection
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTimingSection (
            WitTimer * theTimer,
            const char * sectionName,
            const char * sectionTitle);
         //
         // myTimer_ <-- theTimer
         // name_    <-- sectionName
         // title_   <-- sectionTitle

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTimingSection ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, name)
      accessFunc (bool,              wasTimed)
      accessFunc (double,            timeCharged)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void chargeTime ();
         //
         // Adds timeSincePrev () to timeCharged ().

      void chargeTime (double incTime);
         //
         // Adds incTime to timeCharged ().

      void reset ();
         //
         // Re-initializes this TimingSection.

      void display () const;
         //
         // Displays the time spent in this TimingSection.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTimingSection);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitString name_;
         //
         // The name of this TimingSection, used to identify it in the
         // source code.

      WitTimer * const myTimer_;
         //
         // The Timer to which this TimingSection belongs.

      const WitString title_;
         //
         // Title used when displaying this TimingSection.

      bool wasTimed_;
         //
         // true iff this TimingSection has been timed at least once.

      double timeCharged_;
         //
         // The CPU time charged to this TimingSection.
   };

#endif
@


1.21
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.20
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d36 2
a37 56
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitTimer (WitMsgFacility & theMsgFac);
//
// myMsgFac_ <-- theMsgFac.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitTimer ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitMsgFacility &, myMsgFac)

//------------------------------------------------------------------------
// Static public member functions.
//------------------------------------------------------------------------

static void enterSection (const char * theName);
//
// Causes timing to enter the TimingSection matching theName.
// No-op, when not in stand-alone mode.

static void leaveSection (const char * theName);
//
// Causes timing to leave the current TimingSection, which should
// match theName.
// No-op, when not in stand-alone mode.

static double getTimeAndChargeToCurrent ();
//
// Charges timeSincePrev () to the current TimingSection.
// Returns timeSincePrev ().
// No-op (returns 0), when not in stand-alone mode.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void include (WitTimingSection * theSection);
//
// Includes theSection in allSections_.

double timeSincePrev ();
//
// Returns process time since previous time timeSincePrev () was
// called. Sets prevTime_ to current value of cpuTime ().
d39 128
a166 74
void display ();
//
// Displays timing data at the end of a stand-alone run.

void reset ();
//
// Re-initializes timing: starts timing over again.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void addTime (const char * theName1, const char * theName2);
//
// Adds the time charged to the TimingSection for theName2 to
//      the time charged to the TimingSection for theName1.

static WitTimingSection * namedSection (const char * theName);
//
// Returns the TimingSection whose name is theName.
// Generates an error, if no such TimingSection exists.
// Uses a linear search.
// Returns NULL, if uniqueTimer_ is NULL.

double cpuTime () const;
//
// Returns the current cpu time, in seconds.

double cpuTimeByRusage () const;
//
// Implementation of cpuTime () using the rusage facility.

inline static WitTimer * uniqueTimer ()
{
witAssert (uniqueTimer_ != NULL);

return uniqueTimer_;
}

noCopyCtorAssign (WitTimer);

//------------------------------------------------------------------------
// Static private member data.
//------------------------------------------------------------------------

static WitTimer * uniqueTimer_;
//
// The unique instance of the class in stand-alone mode.
// NULL, when not in stand-alone mode.

//------------------------------------------------------------------------
// Other private member data.
//------------------------------------------------------------------------

WitMsgFacility & myMsgFac_;
//
// The MsgFacility for this Timer.

double prevTime_;
//
// Value returned from cpuTime () the last time timeSincePrev was
// called, converted to seconds.

WitList <WitTimingSection> allSections_;
//
// The list of all TimingSections, in the order in which they are
// to appear in the output.

WitList <WitTimingSection> activeSections_;
//
// The LIFO stack of TimingSections entered, but not yet exited.
};
d177 2
a178 2
{
public:
d180 80
a259 80
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitTimingSection (
WitTimer * theTimer,
const char * sectionName,
const char * sectionTitle);
//
// myTimer_ <-- theTimer
// name_    <-- sectionName
// title_   <-- sectionTitle

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitTimingSection ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (const WitString &, name)
accessFunc (bool,              wasTimed)
accessFunc (double,            timeCharged)

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void chargeTime ();
//
// Adds timeSincePrev () to timeCharged ().

void chargeTime (double incTime);
//
// Adds incTime to timeCharged ().

void reset ();
//
// Re-initializes this TimingSection.

void display () const;
//
// Displays the time spent in this TimingSection.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitTimingSection);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

const WitString name_;
//
// The name of this TimingSection, used to identify it in the
// source code.

WitTimer * const myTimer_;
//
// The Timer to which this TimingSection belongs.

const WitString title_;
//
// Title used when displaying this TimingSection.

bool wasTimed_;
//
// true iff this TimingSection has been timed at least once.

double timeCharged_;
//
// The CPU time charged to this TimingSection.
};
@


1.19
log
@Multi-Obj Mode
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d36 56
a91 2
   {
   public:
d93 74
a166 128
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTimer (WitMsgFacility & theMsgFac);
         //
         // myMsgFac_ <-- theMsgFac.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTimer ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMsgFacility &, myMsgFac)

      //------------------------------------------------------------------------
      // Static public member functions.
      //------------------------------------------------------------------------

      static void enterSection (const char * theName);
         //
         // Causes timing to enter the TimingSection matching theName.
         // No-op, when not in stand-alone mode.

      static void leaveSection (const char * theName);
         //
         // Causes timing to leave the current TimingSection, which should
         // match theName.
         // No-op, when not in stand-alone mode.

      static double getTimeAndChargeToCurrent ();
         //
         // Charges timeSincePrev () to the current TimingSection.
         // Returns timeSincePrev ().
         // No-op (returns 0), when not in stand-alone mode.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void include (WitTimingSection * theSection);
         //
         // Includes theSection in allSections_.

      double timeSincePrev ();
         //
         // Returns process time since previous time timeSincePrev () was
         // called. Sets prevTime_ to current value of cpuTime ().

      void display ();
         //
         // Displays timing data at the end of a stand-alone run.

      void reset ();
         //
         // Re-initializes timing: starts timing over again.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void addTime (const char * theName1, const char * theName2);
         //
         // Adds the time charged to the TimingSection for theName2 to
         //      the time charged to the TimingSection for theName1.

      static WitTimingSection * namedSection (const char * theName);
         //
         // Returns the TimingSection whose name is theName.
         // Generates an error, if no such TimingSection exists.
         // Uses a linear search.
         // Returns NULL, if uniqueTimer_ is NULL.

      double cpuTime () const;
         //
         // Returns the current cpu time, in seconds.

      double cpuTimeByRusage () const;
         //
         // Implementation of cpuTime () using the rusage facility.

      inline static WitTimer * uniqueTimer ()
         {
         witAssert (uniqueTimer_ != NULL);

         return uniqueTimer_;
         }

      noCopyCtorAssign (WitTimer);

      //------------------------------------------------------------------------
      // Static private member data.
      //------------------------------------------------------------------------

      static WitTimer * uniqueTimer_;
         //
         // The unique instance of the class in stand-alone mode.
         // NULL, when not in stand-alone mode.

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this Timer.

      double prevTime_;
         //
         // Value returned from cpuTime () the last time timeSincePrev was
         // called, converted to seconds.

      WitList <WitTimingSection> allSections_;
         //
         // The list of all TimingSections, in the order in which they are
         // to appear in the output.

      WitList <WitTimingSection> activeSections_;
         //
         // The LIFO stack of TimingSections entered, but not yet exited.
   };
d177 2
a178 2
   {
   public:
d180 80
a259 80
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTimingSection (
            WitTimer * theTimer,
            const char * sectionName,
            const char * sectionTitle);
         //
         // myTimer_ <-- theTimer
         // name_    <-- sectionName
         // title_   <-- sectionTitle

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTimingSection ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, name)
      accessFunc (bool,              wasTimed)
      accessFunc (double,            timeCharged)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void chargeTime ();
         //
         // Adds timeSincePrev () to timeCharged ().

      void chargeTime (double incTime);
         //
         // Adds incTime to timeCharged ().

      void reset ();
         //
         // Re-initializes this TimingSection.

      void display () const;
         //
         // Displays the time spent in this TimingSection.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTimingSection);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitString name_;
         //
         // The name of this TimingSection, used to identify it in the
         // source code.

      WitTimer * const myTimer_;
         //
         // The Timer to which this TimingSection belongs.

      const WitString title_;
         //
         // Title used when displaying this TimingSection.

      bool wasTimed_;
         //
         // true iff this TimingSection has been timed at least once.

      double timeCharged_;
         //
         // The CPU time charged to this TimingSection.
   };
@


1.18
log
@Updated the copyright date on all source files.
@
text
@d66 1
d72 7
a118 7
      inline static WitTimer * uniqueTimer ()
         {
         witAssert (uniqueTimer_ != NULL);

         return uniqueTimer_;
         }

d127 7
d143 1
a143 1
         // NULL, in not in stand-alone mode.
@


1.17
log
@Ran make depend.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.16
log
@[multi-thread]
@
text
@d109 1
a109 1
         // Returns NULL, if theInstance_ is NULL.
d111 1
a111 1
      inline static WitTimer * theInstance ()
d113 1
a113 1
         witAssert (theInstance_ != NULL);
d115 1
a115 1
         return theInstance_;
d132 1
a132 1
      static WitTimer * theInstance_;
@


1.15
log
@Minor correction.
@
text
@d135 1
a135 1
         // NULL, in API mode.
@


1.14
log
@Continued implementation of PIP.
@
text
@d99 5
d196 1
@


1.13
log
@Continued implementation of opt with COIN.
@
text
@d35 1
a35 1
class WitTimer: public WitUtil
d163 1
a163 1
class WitTimingSection: public WitUtil
@


1.12
log
@Continued implementation of opt with COIN.
@
text
@d28 2
@


1.11
log
@Internal changes.
@
text
@d18 1
a19 2
//    Timer
//    TimingEvent
a28 92
// class TimingSection.
// Represents a section of the code for timing purposes. At any time during a
// stand-alone run, the CPU time is "charged" to one of the TimingSections.
// At the end of a run, a table is printed showing how much time was charged
// to each TimingSection.
//------------------------------------------------------------------------------

class WitTimingSection: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTimingSection (
            WitTimer * theTimer,
            const char * sectionName,
            const char * sectionTitle);
         //
         // myTimer_ <-- theTimer
         // name_    <-- sectionName
         // title_   <-- sectionTitle

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTimingSection ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, name)
      accessFunc (double,            timeCharged)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void chargeTime ();
         //
         // Adds timeSincePrev () to timeCharged ().

      void chargeTime (double incTime);
         //
         // Adds incTime to timeCharged ().

      void reset ();
         //
         // Re-initializes this TimingSection.

      void display () const;
         //
         // Displays the time spent in this TimingSection.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTimingSection);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitString name_;
         //
         // The name of this TimingSection, used to identify it in the
         // source code.

      WitTimer * const myTimer_;
         //
         // The Timer to which this TimingSection belongs.

      const WitString title_;
         //
         // Title used when displaying this TimingSection.

      bool wasTimed_;
         //
         // true iff this TimingSection has been timed at least once.

      double timeCharged_;
         //
         // The CPU time charged to this TimingSection.
   };

//------------------------------------------------------------------------------
d61 3
a63 4
      inline static bool timingMode ()
         {
         return (theInstance_ != NULL);
         }
d65 1
a65 1
      static WitTimingSection * namedSection (const char * theName);
d67 2
a68 4
         // Returns the TimingSection whose name is theName.
         // Generates an error, if no such TimingSection exists.
         // Uses a linear search.
         // Returns NULL, if theInstance_ is NULL.
d97 14
d147 4
d154 5
a158 11
// class TimingEvent.
// A TimingEvent is responsible for the charging of CPU time to a
// TimingSection. Stand-alone WIT's CPU time is charged to the
// TimingSection that belongs to the most recently constructed
// TimingEvent that has not yet been destructed. Thus the charging of CPU
// time to a TimingEvent's TimingSection begins when the TimingEvent
// is constucted, it is suspended when any other TimingEvent is constructed,
// it is resumed when the other TimingEvent is destructed, and finally it is
// concluded when the TimingEvent is destructed. In effect, the
// TimingSections form a stack and they are designed to co-ordinate properly
// if they are allocated on the stack and not the heap.
d161 1
a161 1
class WitTimingEvent: public WitUtil
d169 8
a176 1
      WitTimingEvent (const char * sectionName);
d182 8
a189 1
      ~WitTimingEvent ();
d192 1
a192 1
      // Static public member functions.
d195 5
a199 1
      static void forbidCurrent ();
d201 9
a209 1
         // Issues a fatal error if current != NULL.
d217 1
a217 1
      noCopyCtorAssign (WitTimingEvent);
d220 1
a220 1
      // Static private member data.
d223 1
a223 1
      static WitTimingEvent * current;
d225 6
a230 1
         // The TimingEvent currenly charging WIT's CPU time.
d232 3
a234 3
      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------
d236 1
a236 1
      WitTimingSection * const mySection_;
d238 1
a238 1
         // The TimingSection to which this TimingEvent charges CPU time.
d240 1
a240 1
      WitTimingEvent * const previous_;
d242 1
a242 2
         // The TimingEvent that was changing WIT's CPU time just before
         // this TimingEvent was constructed.
@


1.10
log
@Preliminary work on single source.
@
text
@d112 1
a112 1
      WitBoolean wasTimed_;
d114 1
a114 1
         // TRUE iff this TimingSection has been timed at least once.
d154 1
a154 1
      inline static WitBoolean timingMode ()
@


1.9
log
@Began implementation of object iteration.
@
text
@d225 1
a225 1
      WitList (WitTimingSection) allSections_;
@


1.8
log
@Implemented an iteration upper bound for selection splitting.
@
text
@d27 1
@


1.7
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d17 4
a20 3
//   TimingSection
//   Timer
//   TimingEvent
@


1.6
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@d195 1
a195 1
      double sunProcessTime () const;
d197 1
a197 1
         // Returns process time since process started.
@


1.5
log
@Some minor changes.
@
text
@d25 1
a25 1
#include <String.h>
@


1.4
log
@Refactoring for selection splitting.
@
text
@d25 1
a25 1
#include <Vector.h>
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d91 1
a91 3
      copyCtorAndAssignment (WitTimingSection);
         //
         // Prevents unintentional copying and assignment.
d199 1
a199 3
      copyCtorAndAssignment (WitTimer);
         //
         // Prevents unintentional copying and assignment.
d273 1
a273 3
      copyCtorAndAssignment (WitTimingEvent);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d35 1
a35 1
class WitTimingSection
d126 1
a126 1
class WitTimer
d247 1
a247 1
class WitTimingEvent
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
