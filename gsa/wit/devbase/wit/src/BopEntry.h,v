head	1.58;
access;
symbols
	sce_5_01_20080919:1.52
	latest_sce_4_20_20060523:1.37.0.2
	sce_4_20_20060523:1.37
	latest_sce4_20_OSL:1.36.0.2
	sce_4_20_OSL:1.36
	sce_410_withVa:1.35
	sce_4_05_20040511:1.34
	sce_4_00_20040201:1.20
	nextGenBranch:1.19.0.2
	nextGenRoot:1.19
	sce_3_30_20030627:1.19
	EndRw-branch:1.12.0.4
	Root-of-EndRw:1.12
	rwToStl:1.12.0.2
	latest_sce_3_10_20010924:1.6.0.4
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.6.0.2
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.58
date	2011.09.28.23.49.06;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2011.09.24.00.27.23;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2011.08.30.20.17.18;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2010.09.10.22.45.33;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2010.09.09.20.20.31;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2009.12.25.00.10.46;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2008.02.25.19.37.56;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2007.11.15.17.15.32;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2007.07.31.20.39.45;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2007.06.05.21.05.59;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2007.06.05.16.15.22;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2007.06.01.20.31.29;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2007.05.30.16.01.18;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2007.05.10.21.58.10;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2007.04.03.22.04.03;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2007.03.23.19.33.08;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2007.02.27.22.59.28;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2007.02.27.19.59.30;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2007.02.10.00.08.13;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2007.01.15.22.25.29;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2006.08.02.18.06.00;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2006.05.02.17.33.55;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2005.09.30.21.57.54;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2005.02.24.23.23.55;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2004.05.07.22.15.14;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2004.05.05.21.16.50;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.04.30.15.57.19;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.04.01.21.05.12;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.31.22.56.07;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.24.22.21.28;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.03.23.19.14.23;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.22.16.37.18;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.12.17.21.54;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.10.22.53.18;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.03.05.22.19.57;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.02.12.19.13.38;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.04.22.31.26;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.01.30.23.07.51;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.11.11.18.29.11;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.19.16.48.13;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.21.18.56.23;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.14.20.12.54;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.13.23.06.25;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.31.21.28.53;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.27.21.17.16;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.02.22.18.20;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.04.23.07.17;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.08.19.21.47;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.03.23.16.35;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.25.19.14.49;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.22.14.32.03;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.18.14.02.27;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.29.22.11.25;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.37;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.20;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.25.20.12.30;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.23;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.19;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.19;	author wit;	state Exp;
branches;
next	;


desc
@@


1.58
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef BopEntryH
#define BopEntryH

//------------------------------------------------------------------------------
// Header file: "BopEntry.h"
//
// Contains the declaration of the class BopEntry
// See also the "class hierarchy" comment in Component.h.
//------------------------------------------------------------------------------

#include <BillEntry.h>

//------------------------------------------------------------------------------
// class BopEntry: "Bill-Of-Products Entry"
// A BillEntry representing the production of a Material in the execution of a
// Operation.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       DelComp
//          BillEntry
//             BopEntry
//------------------------------------------------------------------------------

class WitBopEntry: public WitBillEntry
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBopEntry (WitOperation * theOpn, WitPart * thePart);
         //
         // myOperation_ <-- theOpn.
         // BillEntry    <<< thePart.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBopEntry ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOperation *,              myOperation)
      accessFunc (const WitDblFlexVec &,       productRate)
      accessFunc (bool,                        expAllowed)
      accessFunc (double,                      expAversion)
      accessFunc (bool,                        meSelSplit)
      accessFunc (const WitDblFlexVec &,       effProdRate)
      accessFunc (const WitTVec <WitPeriod> &, expExecPeriod)

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitBopEntry)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double defProductRate, 1.0)
      defaultValue (bool   defExpAllowed,  true)
      defaultValue (double defExpAversion, 0.0)
      defaultValue (double defPipShare,    1.0)
      defaultValue (bool   defMeSelSplit,  false)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setProductRate (const WitIVRealArg &);
      void setExpAllowed  (bool);
      void setExpAversion (double);
      void setMeSelSplit  (bool);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePreEffProdRate   (const WitTVec <double> &);
      void storePreExpExecPeriod (const WitTVec <WitPeriod> &);
         //
         // Valid only when preprocessing is being performed.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool          inserted         ();
      virtual void          identifyInstance ();
      virtual void          writeSetClause   ();
      virtual void          copySelfInto     (WitCompMgr * theCompMgr);
      virtual void          recount          ();
      virtual void          unpreprocess     ();
      virtual WitBopEntry * thisBopEnt       ();
         //
         // Overrides from class Component.

      virtual WitMsgFrag objTypeMsgFrag ();
      virtual WitAttr    apiObjItrState ();
         //
         // Overrides from class DelComp.

      void display ();
         //
         // Displays the input and preprocessing data for this BopEntry.

      void copyAttrsFrom (WitBopEntry * theBopEnt);
         //
         // Copies the input attributes of theBopEnt into this BopEntry.

      bool expEligible (WitPeriod expPer)
         {
         return (expExecPeriod_[expPer] >= 0);
         }
         //
         // Returns true, iff this BopEntry is eligible for explosion in
         // period expPer.

      bool execPerOKForExp (WitPeriod execPer);
         //
         // Returns true, iff this BopEntry is eligible for explosion in
         // execution period execPer.

      static void getAllInstances (
            WitProblem *                theProblem,
            WitObjStack <WitBopEntry> & theBopEntries);
         //
         // Sets theBopEntries to be the set of all BOP entries for theProblem.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBopEntry);

      virtual WitOperation * derivedOperation ();
         //
         // Override from class BillEntry.

      virtual void writeDataID ();
         //
         // Override from class Component.

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // Override from class DelComp.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # BopEntries constructed before this BopEntry.

      WitOperation * const myOperation_;
         //
         // The Operation to which this BopEntry belongs.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitDblFlexVec productRate_;
         //
         // Production rate. Each unit of execution of myOperation in thePer
         // nominally produces productRate ()[thePer] units of myPart ().
         // Range: [0.0, +inf).

      bool expAllowed_;
         //
         // This BopEntry is allowed to be used for explosion, iff expAllowed_ 
         // is true.

      double expAversion_;
         //
         // "Explosion Aversion":
         // BopEntries with lower expAversion are preferred for explosion over
         // those with higher expAversion.
         // Range: (-inf, +inf).

      bool meSelSplit_;
         //
         // true, iff selection splitting for multi-exec is to performed at this
         // BopEntry.

      //------------------------------------------------------------------------
      // Data set by preprocessing.
      //------------------------------------------------------------------------

      WitDblFlexVec effProdRate_;
         //
         // productRate, scaled down by yieldRate. Value == 0.0 when
         // inEffect (t) is false. effProdRate_[t] units of myPart () are
         // produced when 1 unit of myOperation () is executed in completion
         // period t. This data should be used in place of productRate for all
         // implosion and explosion calculations.

      WitTVec <WitPeriod> expExecPeriod_;
         //
         // expExecPeriod_[expPer] is the preferred period in which
         // myOperation () is to be executed in order to meet demand for 
         // myPart () in period expPer for explosion purposes.
   };

#endif
@


1.57
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.56
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d37 2
a38 127
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitBopEntry (WitOperation * theOpn, WitPart * thePart);
//
// myOperation_ <-- theOpn.
// BillEntry    <<< thePart.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitBopEntry ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitOperation *,              myOperation)
accessFunc (const WitDblFlexVec &,       productRate)
accessFunc (bool,                        expAllowed)
accessFunc (double,                      expAversion)
accessFunc (bool,                        meSelSplit)
accessFunc (const WitDblFlexVec &,       effProdRate)
accessFunc (const WitTVec <WitPeriod> &, expExecPeriod)

//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------

decMappingIndex (WitBopEntry)

static int nInstances (WitProblem *);

//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------

defaultValue (double defProductRate, 1.0)
defaultValue (bool   defExpAllowed,  true)
defaultValue (double defExpAversion, 0.0)
defaultValue (double defPipShare,    1.0)
defaultValue (bool   defMeSelSplit,  false)

//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------

void setProductRate (const WitIVRealArg &);
void setExpAllowed  (bool);
void setExpAversion (double);
void setMeSelSplit  (bool);

//------------------------------------------------------------------------
// store<Activity><Attr> functions.
// Each of these functions sets the value of indicated attribute to the
// value of the argument.
// Each function is only valid when the indicated activity is being
// performed.
//------------------------------------------------------------------------

void storePreEffProdRate   (const WitTVec <double> &);
void storePreExpExecPeriod (const WitTVec <WitPeriod> &);
//
// Valid only when preprocessing is being performed.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual bool          inserted         ();
virtual void          identifyInstance ();
virtual void          writeSetClause   ();
virtual void          copySelfInto     (WitCompMgr * theCompMgr);
virtual void          recount          ();
virtual void          unpreprocess     ();
virtual WitBopEntry * thisBopEnt       ();
//
// Overrides from class Component.

virtual WitMsgFrag objTypeMsgFrag ();
virtual WitAttr    apiObjItrState ();
//
// Overrides from class DelComp.

void display ();
//
// Displays the input and preprocessing data for this BopEntry.

void copyAttrsFrom (WitBopEntry * theBopEnt);
//
// Copies the input attributes of theBopEnt into this BopEntry.

bool expEligible (WitPeriod expPer)
{
return (expExecPeriod_[expPer] >= 0);
}
//
// Returns true, iff this BopEntry is eligible for explosion in
// period expPer.

bool execPerOKForExp (WitPeriod execPer);
//
// Returns true, iff this BopEntry is eligible for explosion in
// execution period execPer.

static void getAllInstances (
WitProblem *                theProblem,
WitObjStack <WitBopEntry> & theBopEntries);
//
// Sets theBopEntries to be the set of all BOP entries for theProblem.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitBopEntry);

virtual WitOperation * derivedOperation ();
//
// Override from class BillEntry.
d40 199
a238 74
virtual void writeDataID ();
//
// Override from class Component.

virtual void writeDataAttrs ();
//
// Override from class Component.

virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
//
// Override from class DelComp.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Data set by the constructor.
//------------------------------------------------------------------------

int mappingIndex_;
//
// Mapping index: see Mapping.h.
// == # BopEntries constructed before this BopEntry.

WitOperation * const myOperation_;
//
// The Operation to which this BopEntry belongs.

//------------------------------------------------------------------------
// Input data.
//------------------------------------------------------------------------

WitDblFlexVec productRate_;
//
// Production rate. Each unit of execution of myOperation in thePer
// nominally produces productRate ()[thePer] units of myPart ().
// Range: [0.0, +inf).

bool expAllowed_;
//
// This BopEntry is allowed to be used for explosion, iff expAllowed_
// is true.

double expAversion_;
//
// "Explosion Aversion":
// BopEntries with lower expAversion are preferred for explosion over
// those with higher expAversion.
// Range: (-inf, +inf).

bool meSelSplit_;
//
// true, iff selection splitting for multi-exec is to performed at this
// BopEntry.

//------------------------------------------------------------------------
// Data set by preprocessing.
//------------------------------------------------------------------------

WitDblFlexVec effProdRate_;
//
// productRate, scaled down by yieldRate. Value == 0.0 when
// inEffect (t) is false. effProdRate_[t] units of myPart () are
// produced when 1 unit of myOperation () is executed in completion
// period t. This data should be used in place of productRate for all
// implosion and explosion calculations.

WitTVec <WitPeriod> expExecPeriod_;
//
// expExecPeriod_[expPer] is the preferred period in which
// myOperation () is to be executed in order to meet demand for
// myPart () in period expPer for explosion purposes.
};
@


1.55
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d37 127
a163 2
   {
   public:
d165 74
a238 199
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBopEntry (WitOperation * theOpn, WitPart * thePart);
         //
         // myOperation_ <-- theOpn.
         // BillEntry    <<< thePart.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBopEntry ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOperation *,              myOperation)
      accessFunc (const WitDblFlexVec &,       productRate)
      accessFunc (bool,                        expAllowed)
      accessFunc (double,                      expAversion)
      accessFunc (bool,                        meSelSplit)
      accessFunc (const WitDblFlexVec &,       effProdRate)
      accessFunc (const WitTVec <WitPeriod> &, expExecPeriod)

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitBopEntry)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double defProductRate, 1.0)
      defaultValue (bool   defExpAllowed,  true)
      defaultValue (double defExpAversion, 0.0)
      defaultValue (double defPipShare,    1.0)
      defaultValue (bool   defMeSelSplit,  false)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setProductRate (const WitIVRealArg &);
      void setExpAllowed  (bool);
      void setExpAversion (double);
      void setMeSelSplit  (bool);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePreEffProdRate   (const WitTVec <double> &);
      void storePreExpExecPeriod (const WitTVec <WitPeriod> &);
         //
         // Valid only when preprocessing is being performed.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool          inserted         ();
      virtual void          identifyInstance ();
      virtual void          writeSetClause   ();
      virtual void          copySelfInto     (WitCompMgr * theCompMgr);
      virtual void          recount          ();
      virtual void          unpreprocess     ();
      virtual WitBopEntry * thisBopEnt       ();
         //
         // Overrides from class Component.

      virtual WitMsgFrag objTypeMsgFrag ();
      virtual WitAttr    apiObjItrState ();
         //
         // Overrides from class DelComp.

      void display ();
         //
         // Displays the input and preprocessing data for this BopEntry.

      void copyAttrsFrom (WitBopEntry * theBopEnt);
         //
         // Copies the input attributes of theBopEnt into this BopEntry.

      bool expEligible (WitPeriod expPer)
         {
         return (expExecPeriod_[expPer] >= 0);
         }
         //
         // Returns true, iff this BopEntry is eligible for explosion in
         // period expPer.

      bool execPerOKForExp (WitPeriod execPer);
         //
         // Returns true, iff this BopEntry is eligible for explosion in
         // execution period execPer.

      static void getAllInstances (
            WitProblem *                theProblem,
            WitObjStack <WitBopEntry> & theBopEntries);
         //
         // Sets theBopEntries to be the set of all BOP entries for theProblem.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBopEntry);

      virtual WitOperation * derivedOperation ();
         //
         // Override from class BillEntry.

      virtual void writeDataID ();
         //
         // Override from class Component.

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // Override from class DelComp.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # BopEntries constructed before this BopEntry.

      WitOperation * const myOperation_;
         //
         // The Operation to which this BopEntry belongs.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitDblFlexVec productRate_;
         //
         // Production rate. Each unit of execution of myOperation in thePer
         // nominally produces productRate ()[thePer] units of myPart ().
         // Range: [0.0, +inf).

      bool expAllowed_;
         //
         // This BopEntry is allowed to be used for explosion, iff expAllowed_ 
         // is true.

      double expAversion_;
         //
         // "Explosion Aversion":
         // BopEntries with lower expAversion are preferred for explosion over
         // those with higher expAversion.
         // Range: (-inf, +inf).

      bool meSelSplit_;
         //
         // true, iff selection splitting for multi-exec is to performed at this
         // BopEntry.

      //------------------------------------------------------------------------
      // Data set by preprocessing.
      //------------------------------------------------------------------------

      WitDblFlexVec effProdRate_;
         //
         // productRate, scaled down by yieldRate. Value == 0.0 when
         // inEffect (t) is false. effProdRate_[t] units of myPart () are
         // produced when 1 unit of myOperation () is executed in completion
         // period t. This data should be used in place of productRate for all
         // implosion and explosion calculations.

      WitTVec <WitPeriod> expExecPeriod_;
         //
         // expExecPeriod_[expPer] is the preferred period in which
         // myOperation () is to be executed in order to meet demand for 
         // myPart () in period expPer for explosion purposes.
   };
@


1.54
log
@Heuristic Adjustment
@
text
@d20 1
a20 1
#include <Entry.h>
@


1.53
log
@Multi-Objective Mode
@
text
@d17 1
a17 1
// See also the "class hierarchy" comment in Compo.h.
@


1.52
log
@Object name change.
@
text
@d113 1
@


1.51
log
@Stochastic Implosion
@
text
@a159 9
      static WitPart * preconstruct (
            WitOperation * theOpn,
            WitPart *      thePart);
         //
         // The args are the same of those of the ctor.
         // Performs the follow actions at the beginning of construction:
         // * Validates the args.
         // * Returns thePart.

@


1.50
log
@Stochastic Implosion
@
text
@d95 13
a114 1
      virtual void          passPreRefs      ();
@


1.49
log
@Stochastic Implosion
@
text
@d134 6
@


1.48
log
@Stochastic Implosion
@
text
@a102 1
      virtual void          importPreData    ();
@


1.47
log
@Stochastic Implosion
@
text
@d102 1
@


1.46
log
@Stochastic Implosion
@
text
@a37 2
      friend class WitPreAccess;

@


1.45
log
@Stochastic Implosion
@
text
@d104 1
@


1.44
log
@Stochastic Implosion.
@
text
@d100 6
a105 1
      virtual bool inserted ();
d107 1
a107 5
         // Override from class Component.

      virtual void identifyInstance ();
         //
         // Override from class Component.
d110 1
d112 1
a112 5
         // Override from class DelComp.

      virtual WitAttr apiObjItrState ();
         //
         // Override from class DelComp.
a117 7
      virtual void          copySelfInto (WitCompMgr * theCompMgr);
      virtual void          recount      ();
      virtual void          unpreprocess ();
      virtual WitBopEntry * thisBopEnt   ();
         //
         // Overrides from class Component.

@


1.43
log
@Removed an extraneous data member.
@
text
@d104 1
a104 1
      virtual WitMsgFragID classFragID ();
d108 1
a108 1
      virtual void identifyInstance ();
d110 1
a110 1
         // Override from class Component.
@


1.42
log
@[disallowed backlog]
@
text
@a64 1
      accessFunc (const WitDblFlexVec &,       pipShare)
a215 7
      WitDblFlexVec pipShare_;
         //
         // "Post-Implosion Pegging Share"
         // In PIP, the peggedExecVol of an operation is allocated to its
         // explodeable BopEntries in proportion to their pipShare_.
         // Range: [0.0, +inf).

@


1.41
log
@Rescinded all changed made since 1/31/07.
@
text
@d38 2
a144 4
      static void transmitDMPs ();
         //
         // See comment on transmitAllDMPs in CompMgr.h.

@


1.40
log
@[disallowed backlog]
@
text
@a58 2
      accessFunc (const WitDblFlexVec &,       effProdRate)
      accessFunc (const WitTVec <WitPeriod> &, expExecPeriod)
d65 2
d121 1
d132 1
a132 1
         return (expExecPeriod ()[expPer] >= 0);
d143 1
a143 13
      //------------------------------------------------------------------------
      // Restricted public member data.
      //------------------------------------------------------------------------

      WitPreRestricted <WitDblFlexVec> effProdRate_;
         //
         // productRate, scaled down by yieldRate. Value == 0.0 when
         // inEffect (thePer) is false. effProdRate_[thePer] units of myPart ()
         // are produced when 1 unit of myOperation () is executed in completion
         // period thePer. This data should be used in place of productRate for
         // all implosion and explosion calculations.

      WitPreRestricted <WitTVec <WitPeriod> > expExecPeriod_;
d145 1
a145 3
         // expExecPeriod_[expPer] is the preferred period in which
         // myOperation () is to be executed in order to meet demand for 
         // myPart () in period expPer for explosion purposes.
d230 18
@


1.39
log
@witCopy<Object>Data
@
text
@d59 2
a66 2
      accessFunc (const WitDblFlexVec &,       effProdRate)
      accessFunc (const WitTVec <WitPeriod> &, expExecPeriod)
a120 1
      virtual void          unpreprocess ();
d131 1
a131 1
         return (expExecPeriod_[expPer] >= 0);
d142 13
a154 1
      static void transmitDMPs ();
d156 3
a158 1
         // See comment on transmitAllDMPs in CompMgr.h.
a242 18

      //------------------------------------------------------------------------
      // Data set by preprocessing.
      //------------------------------------------------------------------------

      WitDblFlexVec effProdRate_;
         //
         // productRate, scaled down by yieldRate. Value == 0.0 when
         // inEffect (t) is false. effProdRate_[t] units of myPart () are
         // produced when 1 unit of myOperation () is executed in completion
         // period t. This data should be used in place of productRate for all
         // implosion and explosion calculations.

      WitTVec <WitPeriod> expExecPeriod_;
         //
         // expExecPeriod_[expPer] is the preferred period in which
         // myOperation () is to be executed in order to meet demand for 
         // myPart () in period expPer for explosion purposes.
@


1.38
log
@GPIP migration.
@
text
@d126 4
a175 4
      void copyAttrsFrom (WitBopEntry * theBopEnt);
         //
         // Copies the input attributes of theBopEnt into this BopEntry.

@


1.37
log
@Updated the copyright date on all source files.
@
text
@a92 1
      void setPipShare    (const WitIVRealArg &);
@


1.36
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.35
log
@Vector PropRt.
@
text
@a123 1
      virtual void          loadPre      ();
d140 4
@


1.34
log
@PIP.
@
text
@d90 1
a90 1
      void setProductRate (const WitInVecRA &);
d93 1
a93 1
      void setPipShare    (const WitInVecRA &);
@


1.33
log
@PIP.
@
text
@d63 1
a63 1
      accessFunc (double,                      pipShare)
d93 1
a93 1
      void setPipShare    (double);
d217 1
a217 1
      double pipShare_;
@


1.32
log
@Continued implementation of PIP.
@
text
@d130 1
a130 1
         return (expExecPeriod ()[expPer] >= 0);
@


1.31
log
@Double Precision.
@
text
@d63 1
d83 1
d93 1
d216 7
@


1.30
log
@Double Precision.
@
text
@a87 1
      void setProductRate (const float *);
@


1.29
log
@Double Precision.
@
text
@d89 1
@


1.28
log
@Double Precision.
@
text
@d60 1
a60 1
      accessFunc (const WitFlexVec <double> &, productRate)
d64 1
a64 1
      accessFunc (const WitFlexVec <double> &, effProdRate)
d196 1
a196 1
      WitFlexVec <double> productRate_;
d223 1
a223 1
      WitFlexVec <double> effProdRate_;
@


1.27
log
@Double Precision.
@
text
@d60 1
a60 1
      accessFunc (const WitRealVec &,          productRate)
d64 1
a64 1
      accessFunc (const WitRealVec &,          effProdRate)
d196 1
a196 1
      WitRealVec productRate_;
d223 1
a223 1
      WitRealVec effProdRate_;
@


1.26
log
@Double Precision.
@
text
@d64 1
a64 1
      accessFunc (const WitRealTVc &,          effProdRate)
d223 1
a223 1
      WitRealTVc effProdRate_;
@


1.25
log
@Double Precision.
@
text
@d64 1
a64 1
      accessFunc (const WitRealVec &,          effProdRate)
d223 1
a223 1
      WitRealVec effProdRate_;
@


1.24
log
@Double Precision.
@
text
@d79 1
a79 1
      defaultValue (float  defProductRate, 1.0)
@


1.23
log
@Continued double precision.
@
text
@d60 1
a60 1
      accessFunc (const WitFlexVec <float> &,  productRate)
d64 1
a64 1
      accessFunc (const WitTVec <float> &,     effProdRate)
d196 1
a196 1
      WitFlexVec <float> productRate_;
d223 1
a223 1
      WitTVec <float> effProdRate_;
@


1.22
log
@Continued double precision.
@
text
@d62 1
a62 1
      accessFunc (StrDbl,                      expAversion)
d81 1
a81 1
      defaultValue (StrDbl defExpAversion, 0.0)
d90 1
a90 1
      void setExpAversion (StrDbl);
d207 1
a207 1
      StrDbl expAversion_;
@


1.21
log
@Continued double precision.
@
text
@d62 1
a62 1
      accessFunc (double,                      expAversion)
d81 1
a81 1
      defaultValue (double defExpAversion, 0.0)
d90 1
a90 1
      void setExpAversion (double);
d207 1
a207 1
      double expAversion_;
@


1.20
log
@Removed a bad function overload.
@
text
@d62 1
a62 1
      accessFunc (float,                       expAversion)
d79 4
a82 4
      defaultValue (float defProductRate, 1.0)
      defaultValue (bool  defExpAllowed,  true)
      defaultValue (float defExpAversion, 0.0)
      defaultValue (bool  defMeSelSplit,  false)
d90 1
a90 1
      void setExpAversion (float);
d207 1
a207 1
      float expAversion_;
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d120 1
a120 1
      virtual WitBopEntry * myBopEnt     ();
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@d117 5
a121 1
      virtual void copySelfInto (WitCompMgr * theCompMgr);
d123 1
a123 17
         // Override from class Component.

      virtual void recount ();
         //
         // Override from class Component.

      virtual void unpreprocess ();
         //
         // Override from class Component.

      virtual void getBopEntry (WitBopEntry * &);
         //
         // Override from class Component.

      virtual void loadPre ();
         //
         // Override from class Component.
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@a62 1
      accessFunc (float,                       expShare)
a81 1
      defaultValue (float defExpShare,    1.0)
a90 1
      void setExpShare    (float);
a224 8

      float expShare_;
         //
         // "Explosion Share":
         // If the proportionate routing technique is being used a Part,
         // explosion through the BopEntries of the Part is to be done in
         // proportion to the expShare_ of each BopEntry.
         // Range: [1.0, +inf)
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@d83 1
a83 1
      defaultValue (float defExpShare,    0.0)
d232 4
a235 4
         // If the Proportionate Routing technique is used, explosion through
         // the BopEntries of a Part is to be done in proportion to the
         // expShare_ of each BopEntry.
         // Range: {0.0} U [1.0, +inf)
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d68 4
d73 2
@


1.14
log
@Began implementation of Proportionate Routing.
@
text
@d63 1
a63 1
      accessFunc (float,                       expFactor)
d77 1
a77 1
      defaultValue (float defExpFactor,   0.0)
d87 1
a87 1
      void setExpFactor   (float);
d223 1
a223 1
      float expFactor_;
d225 1
a225 1
         // "Explosion Factor":
d228 2
a229 2
         // expFactor_ of each BopEntry.
         // Range: {0.0} U [.01, +inf)
@


1.13
log
@Internal changes.
@
text
@d63 1
d77 1
d87 1
d221 9
@


1.12
log
@Continued implementation of single-source.
@
text
@d61 1
a61 1
      accessFunc (WitBoolean,                  expAllowed)
d63 1
a63 1
      accessFunc (WitBoolean,                  meSelSplit)
d73 4
a76 4
      defaultValue (float      defProductRate, 1.0)
      defaultValue (WitBoolean defExpAllowed,  witTRUE)
      defaultValue (float      defExpAversion, 0.0)
      defaultValue (WitBoolean defMeSelSplit,  witFALSE)
d83 1
a83 1
      void setExpAllowed  (WitBoolean);
d85 1
a85 1
      void setMeSelSplit  (WitBoolean);
d91 1
a91 1
      virtual WitBoolean inserted ();
d131 1
a131 1
      WitBoolean expEligible (WitPeriod expPer)
d136 1
a136 1
         // Returns TRUE, iff this BopEntry is eligible for explosion in
d139 1
a139 1
      WitBoolean execPerOKForExp (WitPeriod execPer);
d141 1
a141 1
         // Returns TRUE, iff this BopEntry is eligible for explosion in
d208 1
a208 1
      WitBoolean expAllowed_;
d211 1
a211 1
         // is TRUE.
d219 1
a219 1
      WitBoolean meSelSplit_;
d221 1
a221 1
         // TRUE, iff selection splitting for multi-exec is to performed at this
d231 1
a231 1
         // inEffect (t) is FALSE. effProdRate_[t] units of myPart () are
@


1.11
log
@Preliminary work on single source.
@
text
@a87 7
      // Conditional reference access functions.
      //------------------------------------------------------------------------

      conditionalRef (WitTVec <WitPeriod>, expExecPeriod, preprocAcc ())
      conditionalRef (WitTVec <float>,     effProdRate,   preprocAcc ())

      //------------------------------------------------------------------------
d119 4
d124 4
@


1.10
log
@Continued preliminary work on single source.
@
text
@d60 1
a60 1
      accessFunc (const WitFlexVec (float) &,  productRate)
d201 1
a201 1
      WitFlexVec (float) productRate_;
@


1.9
log
@Continued implementation of object iteration.
@
text
@d64 2
a65 2
      accessFunc (const WitTVec (float) &,     effProdRate)
      accessFunc (const WitTVec (WitPeriod) &, expExecPeriod)
d91 2
a92 2
      conditionalRef (WitTVec (WitPeriod), expExecPeriod, preprocAcc ())
      conditionalRef (WitTVec (float),     effProdRate,   preprocAcc ())
d227 1
a227 1
      WitTVec (float) effProdRate_;
d235 1
a235 1
      WitTVec (WitPeriod) expExecPeriod_;
@


1.8
log
@Continued implementation of object iteration.
@
text
@d110 1
a110 1
      virtual WitAttr apiItrState ();
@


1.7
log
@Began implementation of object iteration.
@
text
@d110 4
d123 4
@


1.6
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d20 1
a20 1
#include <SubEntry.h>
d122 1
a122 1
      inline WitBoolean expEligible (WitPeriod expPer)
d130 4
a133 4
      inline WitBoolean execPerOKForExp (WitPeriod execPer)
         {
         return (effProdRate ()[execPer] >= myGlobalComp ()->expCutoff ());
         }
@


1.5
log
@Refactoring for selection splitting.
@
text
@d63 1
d76 1
d85 1
d201 2
a202 2
         // This BopEntry is allowed to be used for explosion iff expAllowed_ is
         // TRUE.
d209 5
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d138 1
a138 3
      copyCtorAndAssignment (WitBopEntry);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@d111 1
a111 1
      virtual void copyInto (WitCompMgr * theCompMgr);
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d60 1
a60 1
      accessFunc (float,                       prodRate)
d72 1
a72 1
      defaultValue (float      defProdRate,    1.0)
d80 1
a80 1
      void setProdRate    (float);
d192 1
a192 1
      float prodRate_;
d194 2
a195 2
         // Production rate. Each unit of execution of myOperation nominally
         // produces prodRate () units of myPart ().
d215 2
a216 2
         // prodRate, scaled down by yieldRate. Value == 0.0 when inEffect (t) 
         // is FALSE. effProdRate_[t] units of myPart () are
d218 1
a218 1
         // period t. This data should be used in place of prodRate for all
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
