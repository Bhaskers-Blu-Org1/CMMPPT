head	1.18;
access;
symbols
	sce_5_01_20080919:1.7;
locks; strict;
comment	@ * @;


1.18
date	2011.09.28.23.49.17;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.09.24.00.27.34;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.08.30.20.17.26;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.12.14.00.22.49;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.18.21.56.51;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.19.18.00.12;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.18.22.46.35;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.02.23.20.03.25;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.02.20.00.11.06;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.05.20.41.52;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.07.23.59.13;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.03.03.22.35.42;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.27.23.43.42;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.27.23.19.09;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.13.20.17.38;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.07.20.10.22;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.03.22.04.10;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.01.22.41.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef DetOptImpMgrH
#define DetOptImpMgrH

//------------------------------------------------------------------------------
// Header file: "DetOptImpMgr.h"
//
// Contains the declaration of class DetOptImpMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <Str.h>
#include <Schedule.h>
#include <PairStack.h>

//------------------------------------------------------------------------------
// Class DetOptImpMgr
// Responsible for performing a deterministic optimizing implosion.
//------------------------------------------------------------------------------

class WitDetOptImpMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDetOptImpMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDetOptImpMgr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, extOptActive)
      accessFunc (bool, accelerated)
      accessFunc (bool, clearingSoln)
      accessFunc (bool, uploadingSoln)

      accessNonNull (WitExtOptMgr *, myExtOptMgr)

      accessWrapper (WitOptComp *, myOptComp, myProblem ())

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void shutDown ();
         //
         // Shuts down optimizing implosion.
         // If accelerated () is true, this DetOptImpMgr is restored to an
         // unaccelerated state.

      void implode ();
         //
         // Performs an optimizing implosion.

      void evalObjectives ();
         //
         // Sets the optimization problem solution to the production and
         // shipment schedules and evaluates the objective functions for this
         // solution.

      bool boundsObjUsed () const;
         //
         // Returns true, iff the bounds objective was used.

      inline bool extOptActive ()
         {
         return (myExtOptMgr_ != NULL);
         }

      void startExtOpt ();
         //
         // Initiates external optimizing implosion.

      void finishExtOpt ();
         //
         // Concludes external optimizing implosion.

      void shutDownExtOpt ();
         //
         // Terminates external optimizing implosion without constructing the
         // implosion solution.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      accessNonNull (WitDetImpOP *, myDetImpOP)

      void startOptImp ();
         //
         // Initiates optimizing implosion.

      void finishOptImp ();
         //
         // Concludes optimizing implosion.

      void validateMipMode ();
         //
         // Verifies that the data is valid for MIP mode.

      void compInitSoln ();
         //
         // Computes the initial implosion solution, if any.

      void heurImpOnFirstObj ();
         //
         // Invokes heuristic implosion for the first objective in multi-obj
         // mode.

      void setUpOptProblem ();
         //
         // Sets up myDetImpOP_

      void compInitOptSoln ();
         //
         // Computes an initial solution to myDetImpOP_.

      void compObjectives ();
         //
         // Computes the values of the objective functions.

      void compSglObj ();
         //
         // Computes the values of the objective functions in single objective
         // mode.

      void compMultiObj ();
         //
         // Computes the values of the objective functions in multiple
         // objectives mode.

      void uploadSoln ();
         //
         // Uploads the implosion solution to the Components of myProblem ().

      double solnValue (const WitOptVar * theOptVar);
         //
         // Returns the primal solution value of theOptVar, modified as
         // appropriate for passing to myProblem ().

      void buildCritList ();
         //
         // Uses the dual solution to the optimization problem to form the
         // critical parts list.

      bool comparePotential (
            std::pair <WitPart *, WitPeriod> *,
            std::pair <WitPart *, WitPeriod> *);
         //
         // Compare function for sorting the critical part list.

      noCopyCtorAssign (WitDetOptImpMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDetImpOP * myDetImpOP_;
         //
         // The DetImpOP owned by this DetOptImpMgr, in any.

      bool extOptActive_;
         //
         // True, iff external optimizing implosion is currently active.

      WitExtOptMgr * myExtOptMgr_;
         //
         // The ExtOptMgr owned by this DetOptImpMgr, when external
         // optimizing implosion is active; otherwise NULL.
         // External optimizing implosion is currently active,
         // iff myExtOptMgr_ is not NULL.

      bool accelerated_;
         //
         // true, iff this DetOptImpMgr is eligible for an accelerated
         // implosion.

      bool clearingSoln_;
         //
         // True, iff the optimizing implosion subsystem is currently clearing
         // the solution.

      bool uploadingSoln_;
         //
         // True, iff the optimizing implosion subsystem is currently uploading
         // the solution.

      WitPartPerStack revCritList_;
         //
         // The critical part list for optimizing implosion.
         // Stored in reverse order.

      WitSchedule <WitPart, double> potential_;
         //
         // potential_(thePart)[thePer] is the estimated "potential for
         // improvement" that would result from increasing the supply of thePart
         // in period thePer. Specifically, it is the shadow price on the
         // material balance constraint for thePart in period thePer.
   };

#endif
@


1.17
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.16
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d30 2
a31 95
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitDetOptImpMgr (WitProblem * theProblem);
//
// ProbAssoc <<< theProblem.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitDetOptImpMgr ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (bool, extOptActive)
accessFunc (bool, accelerated)
accessFunc (bool, clearingSoln)
accessFunc (bool, uploadingSoln)

accessNonNull (WitExtOptMgr *, myExtOptMgr)

accessWrapper (WitOptComp *, myOptComp, myProblem ())

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void shutDown ();
//
// Shuts down optimizing implosion.
// If accelerated () is true, this DetOptImpMgr is restored to an
// unaccelerated state.

void implode ();
//
// Performs an optimizing implosion.

void evalObjectives ();
//
// Sets the optimization problem solution to the production and
// shipment schedules and evaluates the objective functions for this
// solution.

bool boundsObjUsed () const;
//
// Returns true, iff the bounds objective was used.

inline bool extOptActive ()
{
return (myExtOptMgr_ != NULL);
}

void startExtOpt ();
//
// Initiates external optimizing implosion.

void finishExtOpt ();
//
// Concludes external optimizing implosion.

void shutDownExtOpt ();
//
// Terminates external optimizing implosion without constructing the
// implosion solution.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

accessNonNull (WitDetImpOP *, myDetImpOP)

void startOptImp ();
//
// Initiates optimizing implosion.

void finishOptImp ();
//
// Concludes optimizing implosion.

void validateMipMode ();
//
// Verifies that the data is valid for MIP mode.

void compInitSoln ();
//
// Computes the initial implosion solution, if any.
d33 188
a220 95
void heurImpOnFirstObj ();
//
// Invokes heuristic implosion for the first objective in multi-obj
// mode.

void setUpOptProblem ();
//
// Sets up myDetImpOP_

void compInitOptSoln ();
//
// Computes an initial solution to myDetImpOP_.

void compObjectives ();
//
// Computes the values of the objective functions.

void compSglObj ();
//
// Computes the values of the objective functions in single objective
// mode.

void compMultiObj ();
//
// Computes the values of the objective functions in multiple
// objectives mode.

void uploadSoln ();
//
// Uploads the implosion solution to the Components of myProblem ().

double solnValue (const WitOptVar * theOptVar);
//
// Returns the primal solution value of theOptVar, modified as
// appropriate for passing to myProblem ().

void buildCritList ();
//
// Uses the dual solution to the optimization problem to form the
// critical parts list.

bool comparePotential (
std::pair <WitPart *, WitPeriod> *,
std::pair <WitPart *, WitPeriod> *);
//
// Compare function for sorting the critical part list.

noCopyCtorAssign (WitDetOptImpMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitDetImpOP * myDetImpOP_;
//
// The DetImpOP owned by this DetOptImpMgr, in any.

bool extOptActive_;
//
// True, iff external optimizing implosion is currently active.

WitExtOptMgr * myExtOptMgr_;
//
// The ExtOptMgr owned by this DetOptImpMgr, when external
// optimizing implosion is active; otherwise NULL.
// External optimizing implosion is currently active,
// iff myExtOptMgr_ is not NULL.

bool accelerated_;
//
// true, iff this DetOptImpMgr is eligible for an accelerated
// implosion.

bool clearingSoln_;
//
// True, iff the optimizing implosion subsystem is currently clearing
// the solution.

bool uploadingSoln_;
//
// True, iff the optimizing implosion subsystem is currently uploading
// the solution.

WitPartPerStack revCritList_;
//
// The critical part list for optimizing implosion.
// Stored in reverse order.

WitSchedule <WitPart, double> potential_;
//
// potential_(thePart)[thePer] is the estimated "potential for
// improvement" that would result from increasing the supply of thePart
// in period thePer. Specifically, it is the shadow price on the
// material balance constraint for thePart in period thePer.
};
@


1.15
log
@CPLEX
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d30 95
a124 2
   {
   public:
d126 95
a220 188
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDetOptImpMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDetOptImpMgr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, extOptActive)
      accessFunc (bool, accelerated)
      accessFunc (bool, clearingSoln)
      accessFunc (bool, uploadingSoln)

      accessNonNull (WitExtOptMgr *, myExtOptMgr)

      accessWrapper (WitOptComp *, myOptComp, myProblem ())

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void shutDown ();
         //
         // Shuts down optimizing implosion.
         // If accelerated () is true, this DetOptImpMgr is restored to an
         // unaccelerated state.

      void implode ();
         //
         // Performs an optimizing implosion.

      void evalObjectives ();
         //
         // Sets the optimization problem solution to the production and
         // shipment schedules and evaluates the objective functions for this
         // solution.

      bool boundsObjUsed () const;
         //
         // Returns true, iff the bounds objective was used.

      inline bool extOptActive ()
         {
         return (myExtOptMgr_ != NULL);
         }

      void startExtOpt ();
         //
         // Initiates external optimizing implosion.

      void finishExtOpt ();
         //
         // Concludes external optimizing implosion.

      void shutDownExtOpt ();
         //
         // Terminates external optimizing implosion without constructing the
         // implosion solution.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      accessNonNull (WitDetImpOP *, myDetImpOP)

      void startOptImp ();
         //
         // Initiates optimizing implosion.

      void finishOptImp ();
         //
         // Concludes optimizing implosion.

      void validateMipMode ();
         //
         // Verifies that the data is valid for MIP mode.

      void compInitSoln ();
         //
         // Computes the initial implosion solution, if any.

      void heurImpOnFirstObj ();
         //
         // Invokes heuristic implosion for the first objective in multi-obj
         // mode.

      void setUpOptProblem ();
         //
         // Sets up myDetImpOP_

      void compInitOptSoln ();
         //
         // Computes an initial solution to myDetImpOP_.

      void compObjectives ();
         //
         // Computes the values of the objective functions.

      void compSglObj ();
         //
         // Computes the values of the objective functions in single objective
         // mode.

      void compMultiObj ();
         //
         // Computes the values of the objective functions in multiple
         // objectives mode.

      void uploadSoln ();
         //
         // Uploads the implosion solution to the Components of myProblem ().

      double solnValue (const WitOptVar * theOptVar);
         //
         // Returns the primal solution value of theOptVar, modified as
         // appropriate for passing to myProblem ().

      void buildCritList ();
         //
         // Uses the dual solution to the optimization problem to form the
         // critical parts list.

      bool comparePotential (
            std::pair <WitPart *, WitPeriod> *,
            std::pair <WitPart *, WitPeriod> *);
         //
         // Compare function for sorting the critical part list.

      noCopyCtorAssign (WitDetOptImpMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDetImpOP * myDetImpOP_;
         //
         // The DetImpOP owned by this DetOptImpMgr, in any.

      bool extOptActive_;
         //
         // True, iff external optimizing implosion is currently active.

      WitExtOptMgr * myExtOptMgr_;
         //
         // The ExtOptMgr owned by this DetOptImpMgr, when external
         // optimizing implosion is active; otherwise NULL.
         // External optimizing implosion is currently active,
         // iff myExtOptMgr_ is not NULL.

      bool accelerated_;
         //
         // true, iff this DetOptImpMgr is eligible for an accelerated
         // implosion.

      bool clearingSoln_;
         //
         // True, iff the optimizing implosion subsystem is currently clearing
         // the solution.

      bool uploadingSoln_;
         //
         // True, iff the optimizing implosion subsystem is currently uploading
         // the solution.

      WitPartPerStack revCritList_;
         //
         // The critical part list for optimizing implosion.
         // Stored in reverse order.

      WitSchedule <WitPart, double> potential_;
         //
         // potential_(thePart)[thePer] is the estimated "potential for
         // improvement" that would result from increasing the supply of thePart
         // in period thePer. Specifically, it is the shadow price on the
         // material balance constraint for thePart in period thePer.
   };
@


1.14
log
@CPLEX
@
text
@a109 4
      void validateForCplex ();
         //
         // Verifies that the data is valid for optimizing implosion with CPLEX.

@


1.13
log
@CPLEX
@
text
@a125 5
      void useCrashStartForMip ();
         //
         // Assuming MIP mode, this function ensures that the crash OptStarter
         // is chosen.

@


1.12
log
@CPLEX
@
text
@d76 1
a76 1
         // Sets the optimization model solution to the production and
d108 1
a108 1
      accessNonNull (WitDetImpOM *, myDetImpOM)
d140 1
a140 1
      void setUpOptModel ();
d142 1
a142 1
         // Sets up myDetImpOM_
d146 1
a146 1
         // Computes an initial solution to myDetImpOM_.
d173 1
a173 1
         // Uses the dual solution to the optimization model to form the
d188 1
a188 1
      WitDetImpOM * myDetImpOM_;
d190 1
a190 1
         // The DetImpOM owned by this DetOptImpMgr, in any.
@


1.11
log
@Multi-Obj Mode
@
text
@d110 4
@


1.10
log
@Implemented: optInitMethed is changed to crash in MIP mode.
@
text
@d127 1
a127 1
      void compInitSoln () const;
d131 5
@


1.9
log
@multi-obj mode
@
text
@d122 5
@


1.8
log
@Multi-objective mode
@
text
@d140 1
a140 1
         // Computes the values of the objective functions in single-objective
d145 2
a146 2
         // Computes the values of the objective functions in multi-objective
         // mode.
@


1.7
log
@Stochastic Implosion
@
text
@a79 9
      void compObj2Values (
            double & revValue,
            double & invValue,
            double & servValue,
            double & subValue)
            const;
         //
         // Computes and passes back values for objective #2.

d136 11
a146 1
         // Computes the values of all the objective functions.
@


1.6
log
@Stochastic Implosion
@
text
@d76 1
a76 1
         // Sets the optimization problem solution to the production and
d158 1
a158 1
         // Uses the dual solution to the optimization problem to form the
@


1.5
log
@Stochastic Implosion
@
text
@d117 1
a117 1
      accessNonNull (WitDetImpOP *, myDetImpOP)
d137 1
a137 1
         // Sets up myDetImpOP_
d141 1
a141 1
         // Computes an initial solution to myDetImpOP_.
d173 1
a173 1
      WitDetImpOP * myDetImpOP_;
d175 1
a175 1
         // The DetImpOP owned by this DetOptImpMgr, in any.
@


1.4
log
@Stochastic Implosion
@
text
@d135 1
a135 1
      void setUpOptProb ();
@


1.3
log
@Stochastic Implosion
@
text
@d26 1
a26 1
// Responsible for performing an optimizing implosion.
d53 2
a110 26
      void exportObjs (double & objValueRef, double & boundsValueRef);
         //
         // Computes the objective function values and sets the values of the
         // reference arguments to them.
         // Valid only when the optimizing implosion subsystem is exporting the
         // objective function values.

      //------------------------------------------------------------------------
      // Solution exporting functions.
      // 
      // Each of these functions sets the values of its reference arguments to
      // the portion of the implosion solution corresponding to the first
      // argument.
      // Valid only when the optimizing implosion subsystem is exporting the
      // optimizing implosion solution.
      //------------------------------------------------------------------------

      void exportSoln (WitGlobalComp *, WitPartPerStack & revCritListRef);
      void exportSoln (WitPart *,       WitDblFlexVec   &    scrapVolRef,
                                        WitDblFlexVec   & shadowPriceRef);
      void exportSoln (WitMaterial *,   WitDblFlexVec   &    stockVolRef);
      void exportSoln (WitDemand *,     WitDblFlexVec   &     shipVolRef,
                                        WitDblFlexVec   &  cumShipVolRef);
      void exportSoln (WitOperation *,  WitDblFlexVec   &     execVolRef);
      void exportSoln (WitSubEntry *,   WitDblFlexVec   &      subVolRef);

d147 1
a147 1
      void exportSoln ();
d149 1
a149 1
         // Exports the implosion solution to the Components of myProblem ().
d193 1
a193 5
      bool exportingSoln_;
         //
         // True, iff exportSoln () is currently executing.

      WitTVec <double> exportTVec_;
d195 2
a196 2
         // TVec used by the exportSoln (...) functions.
         // Allocated only during exportSoln ().
d198 1
a198 1
      bool exportingObjs_;
d200 2
a201 1
         // True, iff exportObjs () is currently executing.
d203 1
a203 1
      WitPartPerStack criticalList_;
d206 1
a206 1
         // Stored in forward order.
@


1.2
log
@Stochastic Implosion
@
text
@a77 4
      void compObj1Values (double & primaryValue) const;
         //
         // Computes and passes back values for objective #1.

@


1.1
log
@Stochastic Implosion
@
text
@a71 5
      void verifyNoIntCons ();
         //
         // Verifies that no integrality constraints have been specified.
         // (Non-MIP mode)

@

