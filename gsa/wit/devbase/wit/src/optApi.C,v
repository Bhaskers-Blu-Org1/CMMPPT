head	1.136;
access;
symbols
	sce_5_01_20080919:1.60
	latest_sce_4_20_20060523:1.39.0.2
	sce_4_20_20060523:1.39
	latest_sce4_20_OSL:1.36.0.2
	sce_4_20_OSL:1.36
	sce_410_withVa:1.36
	sce_4_05_20040511:1.29
	sce_4_00_20040201:1.15
	nextGenBranch:1.12.0.2
	nextGenRoot:1.12
	sce_3_30_20030627:1.10
	EndRw-branch:1.8.0.4
	Root-of-EndRw:1.8
	rwToStl:1.8.0.2
	latest_sce_3_10_20010924:1.4.0.2
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.2.0.6
	sce_3_00_20010601:1.2
	latest_sce_2_31_20010308:1.2.0.4
	sce_2_31_20010308:1.2
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.136
date	2011.09.28.23.50.47;	author rjw;	state Exp;
branches;
next	1.135;

1.135
date	2011.09.24.00.29.03;	author rjw;	state Exp;
branches;
next	1.134;

1.134
date	2011.08.30.20.18.28;	author rjw;	state Exp;
branches;
next	1.133;

1.133
date	2011.08.26.22.54.57;	author rjw;	state Exp;
branches;
next	1.132;

1.132
date	2011.08.25.23.27.13;	author rjw;	state Exp;
branches;
next	1.131;

1.131
date	2011.03.02.00.21.17;	author rjw;	state Exp;
branches;
next	1.130;

1.130
date	2011.02.18.22.28.23;	author rjw;	state Exp;
branches;
next	1.129;

1.129
date	2011.02.16.17.02.52;	author rjw;	state Exp;
branches;
next	1.128;

1.128
date	2011.02.15.23.26.12;	author rjw;	state Exp;
branches;
next	1.127;

1.127
date	2011.02.15.21.20.23;	author rjw;	state Exp;
branches;
next	1.126;

1.126
date	2011.02.10.00.46.39;	author rjw;	state Exp;
branches;
next	1.125;

1.125
date	2011.02.09.19.13.29;	author rjw;	state Exp;
branches;
next	1.124;

1.124
date	2011.02.08.23.46.13;	author rjw;	state Exp;
branches;
next	1.123;

1.123
date	2011.02.08.23.21.17;	author rjw;	state Exp;
branches;
next	1.122;

1.122
date	2011.02.08.21.49.11;	author rjw;	state Exp;
branches;
next	1.121;

1.121
date	2011.02.07.15.46.07;	author rjw;	state Exp;
branches;
next	1.120;

1.120
date	2011.02.04.19.00.01;	author rjw;	state Exp;
branches;
next	1.119;

1.119
date	2011.02.03.00.23.07;	author rjw;	state Exp;
branches;
next	1.118;

1.118
date	2011.02.02.00.37.16;	author rjw;	state Exp;
branches;
next	1.117;

1.117
date	2011.01.31.21.21.59;	author rjw;	state Exp;
branches;
next	1.116;

1.116
date	2011.01.27.19.55.57;	author rjw;	state Exp;
branches;
next	1.115;

1.115
date	2011.01.27.16.34.30;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2011.01.27.15.12.50;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2011.01.27.00.31.32;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2011.01.26.22.37.27;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2011.01.26.21.25.46;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2011.01.24.23.57.13;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2011.01.14.00.35.27;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2011.01.13.00.38.51;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2011.01.12.23.09.38;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2011.01.11.22.08.34;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2010.10.14.16.07.28;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2010.10.12.22.02.22;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2010.10.12.19.48.29;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2010.05.28.18.08.31;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2010.05.28.14.40.37;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2010.05.27.23.06.03;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2010.05.21.18.17.58;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2010.05.21.15.28.01;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2010.05.20.23.18.44;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2010.05.19.21.09.05;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2010.05.19.20.34.10;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2010.05.14.23.49.07;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2010.05.14.21.42.33;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2010.05.14.17.47.15;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2010.05.12.18.38.08;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2010.05.11.22.26.29;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2010.04.12.22.23.19;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2010.03.29.21.34.23;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2010.03.26.22.37.17;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2010.03.26.22.22.54;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2010.02.01.22.10.15;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2010.01.29.23.53.01;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2010.01.29.23.22.53;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2010.01.28.23.16.59;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2010.01.28.20.10.12;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2010.01.25.19.45.20;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2009.12.17.22.57.27;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2009.12.14.21.34.55;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2009.12.12.00.47.37;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2009.12.10.22.38.29;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2009.12.09.22.51.31;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2009.12.09.21.19.32;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2009.12.09.00.15.34;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2009.12.08.21.44.06;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2009.12.08.20.10.13;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2009.12.05.00.10.21;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2009.12.04.23.30.53;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2009.12.01.22.42.27;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2009.11.26.00.24.10;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2009.11.17.23.45.48;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2009.11.17.19.31.39;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2009.11.13.19.01.28;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2009.11.12.17.36.37;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2008.08.28.20.23.09;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2008.08.25.20.47.10;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2007.10.15.21.50.36;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.10.12.21.45.15;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.08.01.22.42.00;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.06.08.21.54.42;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.03.06.19.47.12;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2006.12.06.19.52.48;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2006.12.01.21.36.37;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2006.12.01.19.55.19;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2006.11.02.23.07.14;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2006.10.12.19.43.45;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2006.10.10.19.10.47;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2006.10.09.23.25.24;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2006.10.05.20.54.54;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2006.10.02.19.27.36;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2006.09.27.20.10.18;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2006.09.22.17.59.05;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2006.09.15.23.09.42;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2006.08.24.20.50.28;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2006.08.22.21.26.56;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2006.08.18.23.32.17;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2006.08.17.19.36.41;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2006.05.16.22.01.08;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2006.05.02.17.34.17;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2006.04.18.14.31.04;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2005.08.19.21.38.04;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2005.07.13.21.18.47;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2005.05.17.17.30.44;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2005.03.30.20.23.32;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2005.03.21.21.49.27;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2005.02.24.23.23.58;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.10.12.21.29.50;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.25.22.00.37;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.03.25.21.21.59;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.25.20.35.03;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.25.19.59.38;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.24.17.12.23;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.02.26.18.59.43;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.02.24.20.10.58;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.24.19.37.23;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.20.22.46.03;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.20.16.38.01;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.20.15.37.37;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.02.12.19.13.41;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.06.20.14.14;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.06.00.17.34;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.19.18.29.01;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.03.18.09.58;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.01.21.01.38;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.28.20.46.32;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.28.20.34.13;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.24.20.40.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.02.22.18.58;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.29.17.57.52;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.23.18.09.18;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.22.14.01.51;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.18.14.02.49;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.31.00.26.27;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.29.21.37.22;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.23;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.34;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.34;	author wit;	state Exp;
branches;
next	;


desc
@@


1.136
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "optApi.C"
//
// Inner API functions relating to global attributes of optimizing implosion.
//------------------------------------------------------------------------------

#include <WitRun.h>
#include <ApiMgr.h>
#include <ApiCall.h>
#include <OptComp.h>
#include <DetOptImpMgr.h>
#include <OptStarter.h>
#include <CpxParSpecMgr.h>
#include <CpxParSpec.h>
#include <MultiObjMgr.h>
#include <Objective.h>
#include <ISRealArg.h>
#include <OSRealArg.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------

void WitRun::witAddDblCplexParSpec (
      const char *         theName,
      const WitISRealArg & theValue)
   {
   WitOptCompApiCall theCall (this);

   forbidNullArg (theName, "theName");

   if (equalCstrings (theName, "NO_PARAM"))
      myMsgFac () ("noParamCpxParamSpecSmsg");

   theCall.myCpxParSpecMgr ()->addDblCpxParSpec (theName, theValue);
   }

//------------------------------------------------------------------------------

void WitRun::witAddIntCplexParSpec (const char * theName, int theValue)
   {
   WitOptCompApiCall theCall (this);

   forbidNullArg (theName, "theName");

   if (equalCstrings (theName, "NO_PARAM"))
      myMsgFac () ("noParamCpxParamSpecSmsg");

   theCall.myCpxParSpecMgr ()->addIntCpxParSpec (theName, theValue);
   }

//------------------------------------------------------------------------------

void WitRun::witGetAccAfterOptImp (WitBoolean * accAfterOptImp)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 accAfterOptImp, 
                           "accAfterOptImp", 
      theCall.myOptComp ()->accAfterOptImp ());

   issueGetAttrMsg ("accAfterOptImp");
   }

//------------------------------------------------------------------------------

void WitRun::witGetAccAfterSoftLB (WitBoolean * accAfterSoftLB)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 accAfterSoftLB, 
                           "accAfterSoftLB", 
      theCall.myOptComp ()->accAfterSoftLB ());

   issueGetAttrMsg ("accAfterSoftLB");
   }

//------------------------------------------------------------------------------

void WitRun::witGetAccelerated (WitBoolean * accelerated)
   {
   WitOptCompApiCall theCall (this);

   apiGet (              accelerated,
                        "accelerated",
      myDetOptImpMgr ()->accelerated ());

   issueGetAttrMsg ("accelerated");
   }

//------------------------------------------------------------------------------

void WitRun::witGetBoundsValue (const WitOSRealArg & boundsValue)
   {
   WitOptCompApiCall theCall (this);

   apiGet (boundsValue, "boundsValue", theCall.myOptComp ()->boundsValue ());
   }

//------------------------------------------------------------------------------

void WitRun::witClearCplexParSpecs ()
   {
   WitOptCompApiCall theCall (this);

   theCall.myCpxParSpecMgr ()->clearCpxParSpecs ();
   }

//------------------------------------------------------------------------------

void WitRun::witGetCompPrices (WitBoolean * compPrices)
   {
   WitOptCompApiCall theCall (this);

   apiGet (compPrices, "compPrices", theCall.myOptComp ()->compPrices ());

   issueGetAttrMsg ("compPrices");
   }

//------------------------------------------------------------------------------

void WitRun::witGetCplexEmbedded (WitBoolean * cplexEmbedded)
   {
   WitOptCompApiCall theCall (this);

   apiGet (cplexEmbedded, "cplexEmbedded", WitOptComp::cplexEmbedded ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetCplexMipBound (const WitOSRealArg & cplexMipBound)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 cplexMipBound,
                           "cplexMipBound",
      theCall.myOptComp ()->cplexMipBound ());

   issueGetAttrMsg ("cplexMipBound");
   }

//------------------------------------------------------------------------------

void WitRun::witGetCplexMipRelGap (const WitOSRealArg & cplexMipRelGap)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 cplexMipRelGap,
                           "cplexMipRelGap",
      theCall.myOptComp ()->cplexMipRelGap ());

   issueGetAttrMsg ("cplexMipRelGap");
   }

//------------------------------------------------------------------------------

void WitRun::witGetCplexParSpecDblVal (const WitOSRealArg & cplexParSpecDblVal)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                       cplexParSpecDblVal,
                                 "cplexParSpecDblVal",
      theCall.myCpxParSpecMgr ()->cplexParSpecDblVal ());

   issueGetAttrMsg ("cplexParSpecDblVal");
   }

//------------------------------------------------------------------------------

void WitRun::witGetCplexParSpecIntVal (int * cplexParSpecIntVal)
   {
   WitOptCompApiCall theCall (this);

   apiGet (
                                  cplexParSpecIntVal,
                                 "cplexParSpecIntVal",
      theCall.myCpxParSpecMgr ()->cplexParSpecIntVal ());

   issueGetAttrMsg ("cplexParSpecIntVal");
   }

//------------------------------------------------------------------------------

void WitRun::witGetCplexParSpecName (char * * cplexParSpecName)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                       cplexParSpecName,
                                 "cplexParSpecName",
      theCall.myCpxParSpecMgr ()->cplexParSpecName ());

   issueGetAttrMsg ("cplexParSpecName");
   }

//------------------------------------------------------------------------------

void WitRun::witGetCplexStatusCode (int * cplexStatusCode)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 cplexStatusCode,
                           "cplexStatusCode",
      theCall.myOptComp ()->cplexStatusCode ());

   issueGetAttrMsg ("cplexStatusCode");
   }

//------------------------------------------------------------------------------

void WitRun::witGetCplexStatusText (char * * cplexStatusText)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 cplexStatusText, 
                           "cplexStatusText", 
      theCall.myOptComp ()->cplexStatusText ());

   issueGetAttrMsg ("cplexStatusText");
   }

//------------------------------------------------------------------------------

void WitRun::witGetCurrentObjective (char * * theObjName)
   {
   WitOptCompApiCall theCall (this);

   theCall.reqMultiObjMode ("currentObjective");

   apiGet (
              theObjName,
             "currentObjective",
      theCall.currentObjective ()->myObjName ());

   issueGetAttrMsg ("currentObjective");
   }

//------------------------------------------------------------------------------

void WitRun::witGetDblCplexParSpec (
      const char *         theName,
      WitBoolean *         dblSpecExists,
      const WitOSRealArg & theValue)
   {
   WitOptCompApiCall theCall (this);
   WitCpxParSpec *   theSpec;

   forbidNullArg (theName, "theName");

   * dblSpecExists = WitFALSE;

   theSpec         = theCall.myCpxParSpecMgr ()->findCpxParSpec (theName);

   if (theSpec != NULL)
      if (not theSpec->valTypeIsInt ())
         {
         * dblSpecExists = WitTRUE;

         theValue        = theSpec->myDblVal ();
         }
   }

//------------------------------------------------------------------------------

void WitRun::witGetExtOptActive (WitBoolean * extOptActive)
   {
   WitOptCompApiCall theCall (this);

   apiGet (              extOptActive,
                        "extOptActive",
      myDetOptImpMgr ()->extOptActive ());

   issueGetAttrMsg ("extOptActive");
   }

//------------------------------------------------------------------------------

void WitRun::witGetIntCplexParSpec (
      const char * theName,
      WitBoolean * intSpecExists,
      int *        theValue)
   {
   WitOptCompApiCall theCall (this);
   WitCpxParSpec *   theSpec;

   forbidNullArg (theName, "theName");

   * intSpecExists = WitFALSE;

   theSpec         = theCall.myCpxParSpecMgr ()->findCpxParSpec (theName);

   if (theSpec != NULL)
      if (theSpec->valTypeIsInt ())
         {
         * intSpecExists = WitTRUE;

         * theValue      = theSpec->myIntVal ();
         }
   }

//------------------------------------------------------------------------------

void WitRun::witGetMipMode (WitBoolean * mipMode)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 mipMode,
                           "mipMode",
      theCall.myOptComp ()->mipMode ());

   issueGetAttrMsg ("mipMode");
   }

//------------------------------------------------------------------------------

void WitRun::witGetMultiObjMode (WitBoolean * multiObjMode)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 multiObjMode,
                           "multiObjMode",
      theCall.myOptComp ()->multiObjMode ());

   issueGetAttrMsg ("multiObjMode");
   }

//------------------------------------------------------------------------------

void WitRun::witGetMultiObjTol (const WitOSRealArg & multiObjTol)
   {
   WitOptCompApiCall theCall (this);

   theCall.reqMultiObjMode ("multiObjTol");

   apiGet (                     multiObjTol,
                               "multiObjTol",
      theCall.myMultiObjMgr ()->multiObjTol ());

   issueGetAttrMsg ("multiObjTol");
   }

//------------------------------------------------------------------------------

void WitRun::witGetObjChoice (int * objChoice)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 objChoice,
                           "objChoice",
      theCall.myOptComp ()->objChoice ());

   issueGetAttrMsg ("objChoice");
   }

//------------------------------------------------------------------------------

void WitRun::witGetObjValue (const WitOSRealArg & objValue)
   {
   WitOptCompApiCall theCall (this);

   apiGet (objValue, "objValue", theCall.myOptComp ()->objValue ());

   issueGetAttrMsg ("objValue");
   }

//------------------------------------------------------------------------------

void WitRun::witGetObjValues (
      const WitOSRealArg & objValue,
      const WitOSRealArg & boundsValue)
   {
   WitOptCompApiCall theCall (this);

   apiGet (objValue,    "objValue",    theCall.myOptComp ()->objValue    ());
   apiGet (boundsValue, "boundsValue", theCall.myOptComp ()->boundsValue ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetObjectiveList (
      int  *     lenList,
      char * * * objectiveList)
   {
   WitOptCompApiCall theCall (this);
   int               theIdx;
   WitObjective *    theObj;

   theCall.reqMultiObjMode ("objectiveList");

   * lenList = theCall.myMultiObjMgr ()->myObjectives ().nElements ();

   apiAlloc (objectiveList, * lenList);

   theIdx = -1;

   forEachEl (theObj, theCall.myMultiObjMgr ()->myObjectives ())
      {
      theIdx ++;

      (* objectiveList)[theIdx] = theObj->myObjName ().apiDupCstring ();
      }
   }

//------------------------------------------------------------------------------

void WitRun::witGetObjectiveListSpec (char * * objectiveListSpec)
   {
   WitOptCompApiCall theCall (this);
   WitString         theObjListSpec;

   theCall.reqMultiObjMode ("objectiveListSpec");

   theCall.myMultiObjMgr ()->getObjectiveListSpec (theObjListSpec);

   apiGet (
       objectiveListSpec,
      "objectiveListSpec",
          theObjListSpec);

   issueGetAttrMsg ("objectiveListSpec");
   }

//------------------------------------------------------------------------------

void WitRun::witGetObjectiveRank (int * objectiveRank)
   {
   WitOptCompApiCall theCall (this);

   theCall.reqMultiObjMode ("objectiveRank");

   apiGet (
                                   objectiveRank,
                                  "objectiveRank",
      theCall.currentObjective ()->objectiveRank ());

   issueGetAttrMsg ("objectiveRank");
   }

//------------------------------------------------------------------------------

void WitRun::witGetOptInitMethod (WitAttr * optInitMethod)
   {
   WitOptCompApiCall theCall (this);

   apiGet (
       optInitMethod,
      "optInitMethod",
      theCall.myOptComp ()->optInitMethod ()->myApiAttr ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetSolverLogFileName (char * * solverLogFileName)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 solverLogFileName, 
                           "solverLogFileName", 
      theCall.myOptComp ()->solverLogFileName ());

   issueGetAttrMsg ("solverLogFileName");
   }

//------------------------------------------------------------------------------

void WitRun::witGetWbounds (const WitOSRealArg & wbounds)
   {
   WitOptCompApiCall theCall (this);

   apiGet (wbounds, "wbounds", theCall.myOptComp ()->wbounds ());

   issueGetAttrMsg ("wbounds");
   }

//------------------------------------------------------------------------------

void WitRun::witSetAccAfterOptImp (WitBoolean newValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepBool (
      "accAfterOptImp", 
      theCall.myOptComp ()->accAfterOptImp (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setAccAfterOptImp (asaBool (newValue));
   }

//------------------------------------------------------------------------------

void WitRun::witSetAccAfterSoftLB (WitBoolean newValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepBool (
      "accAfterSoftLB", 
      theCall.myOptComp ()->accAfterSoftLB (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setAccAfterSoftLB (asaBool (newValue));
   }

//------------------------------------------------------------------------------

void WitRun::witSetCompPrices (WitBoolean newValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepBool (
      "compPrices", 
      theCall.myOptComp ()->compPrices (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setCompPrices (asaBool (newValue));
   }

//------------------------------------------------------------------------------

void WitRun::witSetCplexParSpecDblVal (const WitISRealArg & cplexParSpecDblVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepDouble (
                                 "cplexParSpecDblVal", 
      theCall.myCpxParSpecMgr ()->cplexParSpecDblVal (),
                                  cplexParSpecDblVal);

   if (theCall.argsOK ())
      theCall.myCpxParSpecMgr ()->setCplexParSpecDblVal (cplexParSpecDblVal);
   }

//------------------------------------------------------------------------------

void WitRun::witSetCplexParSpecIntVal (int cplexParSpecIntVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepInt (
                                 "cplexParSpecIntVal",
      theCall.myCpxParSpecMgr ()->cplexParSpecIntVal (),
                                  cplexParSpecIntVal);

   if (theCall.argsOK ())
      theCall.myCpxParSpecMgr ()->setCplexParSpecIntVal (cplexParSpecIntVal);
   }

//------------------------------------------------------------------------------

void WitRun::witSetCplexParSpecName (const char * cplexParSpecName)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepString (
      "cplexParSpecName", 
      theCall.myCpxParSpecMgr ()->cplexParSpecName (), 
      cplexParSpecName);

   if (theCall.argsOK ())
      theCall.myCpxParSpecMgr ()->setCplexParSpecName (cplexParSpecName);
   }

//------------------------------------------------------------------------------

void WitRun::witSetCurrentObjective (const char * theObjName)
   {
   WitOptCompApiCall theCall (this);
   WitObjective *    theObj;

   theCall.reqMultiObjMode ("currentObjective");

   theCall.prepString (
      "currentObjective", 
      theCall.currentObjective ()->myObjName (), 
      theObjName);

   theObj = theCall.myMultiObjMgr ()->findObjective (theObjName);

   if (theObj == NULL)
      myMsgFac () ("setCurObjToNonMatchNameSmsg", theObjName);

   if (theCall.argsOK ())
      theCall.myMultiObjMgr ()->setCurrentObjective (theObj);
   }

//------------------------------------------------------------------------------

void WitRun::witSetMipMode (WitBoolean newValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepBool (
      "mipMode", 
      theCall.myOptComp ()->mipMode (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setMipMode (asaBool (newValue));
   }

//------------------------------------------------------------------------------

void WitRun::witSetMultiObjMode (WitBoolean newValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.reqNoPartsOrOpns ("multiObjMode");

   theCall.prepBool (
      "multiObjMode",
      theCall.myOptComp ()->multiObjMode (),
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setMultiObjMode (asaBool (newValue));
   }

//------------------------------------------------------------------------------

void WitRun::witSetMultiObjTol (const WitISRealArg & theValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.reqMultiObjMode ("multiObjTol");

   theCall.prepNonNegUBDouble (
      "multiObjTol", 
      theCall.myMultiObjMgr ()->multiObjTol (),
      theValue,
      .001001,
      .001);

   if (theCall.argsOK ())
      theCall.myMultiObjMgr ()->setMultiObjTol (theValue);
   }

//------------------------------------------------------------------------------

void WitRun::witSetObjChoice (int objChoice)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepRangedInt (
      "objChoice",
      theCall.myOptComp ()->objChoice (),
      objChoice,
      0,
      1);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setObjChoice (objChoice);
   }

//------------------------------------------------------------------------------

void WitRun::witSetObjectiveList (
      int                  lenList,
      const char * const * objectiveList)
   { 
   WitOptCompApiCall        theCall (this);
   WitVector <const char *> theObjNames;
   int                      theIdx;

   theCall.reqMultiObjMode ("objectiveList");

   theCall.reqNoPartsOrOpns ("objectiveList");

   if (lenList < 1)
      myMsgFac () ("intArgLowSmsg", "lenList", lenList, 1);

   forbidNullArg (objectiveList, "objectiveList");

   theObjNames.resize (lenList, NULL);

   theObjNames = objectiveList;

   for (theIdx = 0; theIdx < lenList; theIdx ++)
      {
      if (theObjNames[theIdx] == NULL)
         myMsgFac () ("nullVecElemSmsg", "objectiveList", theIdx);

      if (WitObjective::containsVBar      (theObjNames[theIdx]))
         myMsgFac () ("vbarInObjNameSmsg", theObjNames[theIdx]);
      }

   checkForDupObjNames (theObjNames);

   theCall.myMultiObjMgr ()->setObjectiveList (theObjNames);
   }

//------------------------------------------------------------------------------

void WitRun::witSetObjectiveListSpec (const char * objectiveListSpec)
   {
   WitOptCompApiCall        theCall (this);
   char *                   theObjName;
   WitList <char>           theObjNameList;
   WitVector <const char *> theObjNameVec;
   int                      theIdx;
   WitString                oldSpec;
   

   theCall.reqMultiObjMode  ("objectiveListSpec");
   theCall.reqNoPartsOrOpns ("objectiveListSpec");

   forbidNullArg (objectiveListSpec, "objectiveListSpec");

   parseObjectiveListSpec (objectiveListSpec, theObjNameList);

   theObjNameVec.resize (theObjNameList.nElements (), NULL);

   theIdx = -1;

   forEachEl (theObjName, theObjNameList)
      {
      theIdx ++;

      theObjNameVec[theIdx] = theObjName;
      }

   checkForDupObjNames (theObjNameVec);

   theCall.myMultiObjMgr ()->getObjectiveListSpec (oldSpec);

   if (myMsgFac ().mayIssue ("setStringAttrMsg"))
      myMsgFac () ("setStringAttrMsg",
         "objectiveListSpec",
         oldSpec,
         objectiveListSpec);

   theCall.myMultiObjMgr ()->setObjectiveList (theObjNameVec);

   theObjNameVec.clear ();

   while (not theObjNameList.isEmpty ())
      {
      delete[] theObjNameList.get ();
      }
   }

//------------------------------------------------------------------------------

void WitRun::witSetObjectiveRank (int objectiveRank)
   {
   WitOptCompApiCall theCall (this);

   theCall.reqMultiObjMode ("objectiveRank");

   theCall.prepRangedInt (
                                  "objectiveRank",
      theCall.currentObjective ()->objectiveRank (),
                                   objectiveRank,
      1,
      theCall.myMultiObjMgr ()->myObjectives ().nElements ());

   if (theCall.argsOK ())
      theCall.currentObjective ()->setObjectiveRank (objectiveRank);
   }

//------------------------------------------------------------------------------

void WitRun::witSetOptInitMethod (WitAttr optInitMethod)
   {
   WitOptCompApiCall theCall (this);

   WitOptStarter *   theOptStarter;
   WitOptStarter *   currentOptStarter;

   theOptStarter = NULL;

      // Find the OptStarter that matches the Attr.
      //
   forEachEl (currentOptStarter, theCall.myOptComp ()->allOptStarters ())
      if (currentOptStarter->myApiAttr () == optInitMethod)
         theOptStarter = currentOptStarter;

   if (theOptStarter == NULL)
      myMsgFac () ("unknownOptStarterSmsg", optInitMethod);

   if (theOptStarter == theCall.myOptComp ()->accOptStarter ())
      myMsgFac () ("setAccInitSmsg");

   myMsgFac () ("setWitAttrAttrMsg",
      "optInitMethod",
      theCall.myOptComp ()->optInitMethod ()->myApiAttr (),
      optInitMethod);

   myDetOptImpMgr ()->shutDown ();
   
   theOptStarter->beChosen ();
   }

//------------------------------------------------------------------------------

void WitRun::witSetSolverLogFileName (const char * solverLogFileName)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepString (
      "solverLogFileName", 
      theCall.myOptComp ()->solverLogFileName (), 
      solverLogFileName);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setSolverLogFileName (solverLogFileName);
   }

//------------------------------------------------------------------------------

void WitRun::witSetWbounds (const WitISRealArg & theVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepNonNegDouble (
      "wbounds", 
      theCall.myOptComp ()->wbounds (), 
      theVal);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setWbounds (theVal);
   }

//------------------------------------------------------------------------------

void WitRun::parseObjectiveListSpec (
      const char *     objectiveListSpec,
      WitList <char> & theObjNameList)
   {
   const char * curPosition;
   int          theNameLength;
   char *       theObjName;

   theObjNameList.clear ();

   curPosition = objectiveListSpec;

   while (true)
      {
      theNameLength = strcspn (curPosition, "|");

      theObjName    = new char[theNameLength + 1];

      strncpy (theObjName, curPosition, theNameLength);

      theObjName[theNameLength] = '\0';

      theObjNameList.append (theObjName);

      curPosition += theNameLength;

      if (* curPosition == '\0')
         return;

      stronglyAssert (* curPosition == '|');

      curPosition ++;
      }
   }

//------------------------------------------------------------------------------

void WitRun::checkForDupObjNames (const WitVector <const char *> & theObjNames)
   {
   int theIdx;
   int priorIdx;

   for    (theIdx   = 0; theIdx   < theObjNames.length (); theIdx   ++)
      for (priorIdx = 0; priorIdx < theIdx;                priorIdx ++)
         {
         if (equalCstrings (theObjNames[theIdx], theObjNames[priorIdx]))
            {
            myMsgFac () ("dupObjNameSmsg", theObjNames[theIdx]);
            }
      }
   }
@


1.135
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.134
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d33 4
a36 4
const char *         theName,
const WitISRealArg & theValue)
{
WitOptCompApiCall theCall (this);
d38 1
a38 1
forbidNullArg (theName, "theName");
d40 2
a41 2
if (equalCstrings (theName, "NO_PARAM"))
myMsgFac () ("noParamCpxParamSpecSmsg");
d43 2
a44 2
theCall.myCpxParSpecMgr ()->addDblCpxParSpec (theName, theValue);
}
d49 2
a50 2
{
WitOptCompApiCall theCall (this);
d52 1
a52 1
forbidNullArg (theName, "theName");
d54 2
a55 2
if (equalCstrings (theName, "NO_PARAM"))
myMsgFac () ("noParamCpxParamSpecSmsg");
d57 2
a58 2
theCall.myCpxParSpecMgr ()->addIntCpxParSpec (theName, theValue);
}
d63 2
a64 2
{
WitOptCompApiCall theCall (this);
d66 3
a68 3
apiGet (                 accAfterOptImp,
"accAfterOptImp",
theCall.myOptComp ()->accAfterOptImp ());
d70 2
a71 2
issueGetAttrMsg ("accAfterOptImp");
}
d76 2
a77 2
{
WitOptCompApiCall theCall (this);
d79 3
a81 3
apiGet (                 accAfterSoftLB,
"accAfterSoftLB",
theCall.myOptComp ()->accAfterSoftLB ());
d83 2
a84 2
issueGetAttrMsg ("accAfterSoftLB");
}
d89 2
a90 2
{
WitOptCompApiCall theCall (this);
d92 3
a94 3
apiGet (              accelerated,
"accelerated",
myDetOptImpMgr ()->accelerated ());
d96 2
a97 2
issueGetAttrMsg ("accelerated");
}
d102 2
a103 2
{
WitOptCompApiCall theCall (this);
d105 2
a106 2
apiGet (boundsValue, "boundsValue", theCall.myOptComp ()->boundsValue ());
}
d111 2
a112 2
{
WitOptCompApiCall theCall (this);
d114 2
a115 2
theCall.myCpxParSpecMgr ()->clearCpxParSpecs ();
}
d120 2
a121 2
{
WitOptCompApiCall theCall (this);
d123 1
a123 1
apiGet (compPrices, "compPrices", theCall.myOptComp ()->compPrices ());
d125 2
a126 2
issueGetAttrMsg ("compPrices");
}
d131 2
a132 2
{
WitOptCompApiCall theCall (this);
d134 2
a135 2
apiGet (cplexEmbedded, "cplexEmbedded", WitOptComp::cplexEmbedded ());
}
d140 2
a141 2
{
WitOptCompApiCall theCall (this);
d143 3
a145 3
apiGet (                 cplexMipBound,
"cplexMipBound",
theCall.myOptComp ()->cplexMipBound ());
d147 2
a148 2
issueGetAttrMsg ("cplexMipBound");
}
d153 2
a154 2
{
WitOptCompApiCall theCall (this);
d156 3
a158 3
apiGet (                 cplexMipRelGap,
"cplexMipRelGap",
theCall.myOptComp ()->cplexMipRelGap ());
d160 2
a161 2
issueGetAttrMsg ("cplexMipRelGap");
}
d166 2
a167 2
{
WitOptCompApiCall theCall (this);
d169 3
a171 3
apiGet (                       cplexParSpecDblVal,
"cplexParSpecDblVal",
theCall.myCpxParSpecMgr ()->cplexParSpecDblVal ());
d173 2
a174 2
issueGetAttrMsg ("cplexParSpecDblVal");
}
d179 2
a180 2
{
WitOptCompApiCall theCall (this);
d182 4
a185 4
apiGet (
cplexParSpecIntVal,
"cplexParSpecIntVal",
theCall.myCpxParSpecMgr ()->cplexParSpecIntVal ());
d187 2
a188 2
issueGetAttrMsg ("cplexParSpecIntVal");
}
d193 2
a194 2
{
WitOptCompApiCall theCall (this);
d196 3
a198 3
apiGet (                       cplexParSpecName,
"cplexParSpecName",
theCall.myCpxParSpecMgr ()->cplexParSpecName ());
d200 2
a201 2
issueGetAttrMsg ("cplexParSpecName");
}
d206 2
a207 2
{
WitOptCompApiCall theCall (this);
d209 3
a211 3
apiGet (                 cplexStatusCode,
"cplexStatusCode",
theCall.myOptComp ()->cplexStatusCode ());
d213 2
a214 2
issueGetAttrMsg ("cplexStatusCode");
}
d219 2
a220 2
{
WitOptCompApiCall theCall (this);
d222 3
a224 3
apiGet (                 cplexStatusText,
"cplexStatusText",
theCall.myOptComp ()->cplexStatusText ());
d226 2
a227 2
issueGetAttrMsg ("cplexStatusText");
}
d232 2
a233 2
{
WitOptCompApiCall theCall (this);
d235 1
a235 1
theCall.reqMultiObjMode ("currentObjective");
d237 4
a240 4
apiGet (
theObjName,
"currentObjective",
theCall.currentObjective ()->myObjName ());
d242 2
a243 2
issueGetAttrMsg ("currentObjective");
}
d248 21
a268 21
const char *         theName,
WitBoolean *         dblSpecExists,
const WitOSRealArg & theValue)
{
WitOptCompApiCall theCall (this);
WitCpxParSpec *   theSpec;

forbidNullArg (theName, "theName");

* dblSpecExists = WitFALSE;

theSpec         = theCall.myCpxParSpecMgr ()->findCpxParSpec (theName);

if (theSpec != NULL)
if (not theSpec->valTypeIsInt ())
{
* dblSpecExists = WitTRUE;

theValue        = theSpec->myDblVal ();
}
}
d273 2
a274 2
{
WitOptCompApiCall theCall (this);
d276 3
a278 3
apiGet (              extOptActive,
"extOptActive",
myDetOptImpMgr ()->extOptActive ());
d280 2
a281 2
issueGetAttrMsg ("extOptActive");
}
d286 21
a306 21
const char * theName,
WitBoolean * intSpecExists,
int *        theValue)
{
WitOptCompApiCall theCall (this);
WitCpxParSpec *   theSpec;

forbidNullArg (theName, "theName");

* intSpecExists = WitFALSE;

theSpec         = theCall.myCpxParSpecMgr ()->findCpxParSpec (theName);

if (theSpec != NULL)
if (theSpec->valTypeIsInt ())
{
* intSpecExists = WitTRUE;

* theValue      = theSpec->myIntVal ();
}
}
d311 2
a312 2
{
WitOptCompApiCall theCall (this);
d314 3
a316 3
apiGet (                 mipMode,
"mipMode",
theCall.myOptComp ()->mipMode ());
d318 2
a319 2
issueGetAttrMsg ("mipMode");
}
d324 2
a325 2
{
WitOptCompApiCall theCall (this);
d327 3
a329 3
apiGet (                 multiObjMode,
"multiObjMode",
theCall.myOptComp ()->multiObjMode ());
d331 2
a332 2
issueGetAttrMsg ("multiObjMode");
}
d337 2
a338 2
{
WitOptCompApiCall theCall (this);
d340 1
a340 1
theCall.reqMultiObjMode ("multiObjTol");
d342 3
a344 3
apiGet (                     multiObjTol,
"multiObjTol",
theCall.myMultiObjMgr ()->multiObjTol ());
d346 2
a347 2
issueGetAttrMsg ("multiObjTol");
}
d352 2
a353 2
{
WitOptCompApiCall theCall (this);
d355 3
a357 3
apiGet (                 objChoice,
"objChoice",
theCall.myOptComp ()->objChoice ());
d359 2
a360 2
issueGetAttrMsg ("objChoice");
}
d365 2
a366 2
{
WitOptCompApiCall theCall (this);
d368 1
a368 1
apiGet (objValue, "objValue", theCall.myOptComp ()->objValue ());
d370 2
a371 2
issueGetAttrMsg ("objValue");
}
d376 8
a383 8
const WitOSRealArg & objValue,
const WitOSRealArg & boundsValue)
{
WitOptCompApiCall theCall (this);

apiGet (objValue,    "objValue",    theCall.myOptComp ()->objValue    ());
apiGet (boundsValue, "boundsValue", theCall.myOptComp ()->boundsValue ());
}
d388 6
a393 6
int  *     lenList,
char * * * objectiveList)
{
WitOptCompApiCall theCall (this);
int               theIdx;
WitObjective *    theObj;
d395 1
a395 1
theCall.reqMultiObjMode ("objectiveList");
d397 1
a397 1
* lenList = theCall.myMultiObjMgr ()->myObjectives ().nElements ();
d399 1
a399 1
apiAlloc (objectiveList, * lenList);
d401 1
a401 1
theIdx = -1;
d403 3
a405 3
forEachEl (theObj, theCall.myMultiObjMgr ()->myObjectives ())
{
theIdx ++;
d407 3
a409 3
(* objectiveList)[theIdx] = theObj->myObjName ().apiDupCstring ();
}
}
d414 3
a416 3
{
WitOptCompApiCall theCall (this);
WitString         theObjListSpec;
d418 1
a418 1
theCall.reqMultiObjMode ("objectiveListSpec");
d420 1
a420 1
theCall.myMultiObjMgr ()->getObjectiveListSpec (theObjListSpec);
d422 4
a425 4
apiGet (
objectiveListSpec,
"objectiveListSpec",
theObjListSpec);
d427 2
a428 2
issueGetAttrMsg ("objectiveListSpec");
}
d433 2
a434 2
{
WitOptCompApiCall theCall (this);
d436 1
a436 1
theCall.reqMultiObjMode ("objectiveRank");
d438 4
a441 4
apiGet (
objectiveRank,
"objectiveRank",
theCall.currentObjective ()->objectiveRank ());
d443 2
a444 2
issueGetAttrMsg ("objectiveRank");
}
d449 2
a450 2
{
WitOptCompApiCall theCall (this);
d452 5
a456 5
apiGet (
optInitMethod,
"optInitMethod",
theCall.myOptComp ()->optInitMethod ()->myApiAttr ());
}
d461 2
a462 2
{
WitOptCompApiCall theCall (this);
d464 3
a466 3
apiGet (                 solverLogFileName,
"solverLogFileName",
theCall.myOptComp ()->solverLogFileName ());
d468 2
a469 2
issueGetAttrMsg ("solverLogFileName");
}
d474 2
a475 2
{
WitOptCompApiCall theCall (this);
d477 1
a477 1
apiGet (wbounds, "wbounds", theCall.myOptComp ()->wbounds ());
d479 2
a480 2
issueGetAttrMsg ("wbounds");
}
d485 2
a486 2
{
WitOptCompApiCall theCall (this);
d488 8
a495 8
theCall.prepBool (
"accAfterOptImp",
theCall.myOptComp ()->accAfterOptImp (),
newValue);

if (theCall.argsOK ())
theCall.myOptComp ()->setAccAfterOptImp (asaBool (newValue));
}
d500 2
a501 2
{
WitOptCompApiCall theCall (this);
d503 8
a510 8
theCall.prepBool (
"accAfterSoftLB",
theCall.myOptComp ()->accAfterSoftLB (),
newValue);

if (theCall.argsOK ())
theCall.myOptComp ()->setAccAfterSoftLB (asaBool (newValue));
}
d515 2
a516 2
{
WitOptCompApiCall theCall (this);
d518 8
a525 8
theCall.prepBool (
"compPrices",
theCall.myOptComp ()->compPrices (),
newValue);

if (theCall.argsOK ())
theCall.myOptComp ()->setCompPrices (asaBool (newValue));
}
d530 2
a531 2
{
WitOptCompApiCall theCall (this);
d533 8
a540 8
theCall.prepDouble (
"cplexParSpecDblVal",
theCall.myCpxParSpecMgr ()->cplexParSpecDblVal (),
cplexParSpecDblVal);

if (theCall.argsOK ())
theCall.myCpxParSpecMgr ()->setCplexParSpecDblVal (cplexParSpecDblVal);
}
d545 2
a546 2
{
WitOptCompApiCall theCall (this);
d548 8
a555 8
theCall.prepInt (
"cplexParSpecIntVal",
theCall.myCpxParSpecMgr ()->cplexParSpecIntVal (),
cplexParSpecIntVal);

if (theCall.argsOK ())
theCall.myCpxParSpecMgr ()->setCplexParSpecIntVal (cplexParSpecIntVal);
}
d560 2
a561 2
{
WitOptCompApiCall theCall (this);
d563 8
a570 8
theCall.prepString (
"cplexParSpecName",
theCall.myCpxParSpecMgr ()->cplexParSpecName (),
cplexParSpecName);

if (theCall.argsOK ())
theCall.myCpxParSpecMgr ()->setCplexParSpecName (cplexParSpecName);
}
d575 3
a577 3
{
WitOptCompApiCall theCall (this);
WitObjective *    theObj;
d579 1
a579 1
theCall.reqMultiObjMode ("currentObjective");
d581 4
a584 4
theCall.prepString (
"currentObjective",
theCall.currentObjective ()->myObjName (),
theObjName);
d586 1
a586 1
theObj = theCall.myMultiObjMgr ()->findObjective (theObjName);
d588 2
a589 2
if (theObj == NULL)
myMsgFac () ("setCurObjToNonMatchNameSmsg", theObjName);
d591 3
a593 3
if (theCall.argsOK ())
theCall.myMultiObjMgr ()->setCurrentObjective (theObj);
}
d598 2
a599 2
{
WitOptCompApiCall theCall (this);
d601 8
a608 8
theCall.prepBool (
"mipMode",
theCall.myOptComp ()->mipMode (),
newValue);

if (theCall.argsOK ())
theCall.myOptComp ()->setMipMode (asaBool (newValue));
}
d613 2
a614 2
{
WitOptCompApiCall theCall (this);
d616 1
a616 1
theCall.reqNoPartsOrOpns ("multiObjMode");
d618 8
a625 8
theCall.prepBool (
"multiObjMode",
theCall.myOptComp ()->multiObjMode (),
newValue);

if (theCall.argsOK ())
theCall.myOptComp ()->setMultiObjMode (asaBool (newValue));
}
d630 2
a631 2
{
WitOptCompApiCall theCall (this);
d633 1
a633 1
theCall.reqMultiObjMode ("multiObjTol");
d635 10
a644 10
theCall.prepNonNegUBDouble (
"multiObjTol",
theCall.myMultiObjMgr ()->multiObjTol (),
theValue,
.001001,
.001);

if (theCall.argsOK ())
theCall.myMultiObjMgr ()->setMultiObjTol (theValue);
}
d649 2
a650 2
{
WitOptCompApiCall theCall (this);
d652 10
a661 10
theCall.prepRangedInt (
"objChoice",
theCall.myOptComp ()->objChoice (),
objChoice,
0,
1);

if (theCall.argsOK ())
theCall.myOptComp ()->setObjChoice (objChoice);
}
d666 6
a671 6
int                  lenList,
const char * const * objectiveList)
{
WitOptCompApiCall        theCall (this);
WitVector <const char *> theObjNames;
int                      theIdx;
d673 1
a673 1
theCall.reqMultiObjMode ("objectiveList");
d675 1
a675 1
theCall.reqNoPartsOrOpns ("objectiveList");
d677 2
a678 2
if (lenList < 1)
myMsgFac () ("intArgLowSmsg", "lenList", lenList, 1);
d680 1
a680 1
forbidNullArg (objectiveList, "objectiveList");
d682 1
a682 1
theObjNames.resize (lenList, NULL);
d684 1
a684 1
theObjNames = objectiveList;
d686 4
a689 4
for (theIdx = 0; theIdx < lenList; theIdx ++)
{
if (theObjNames[theIdx] == NULL)
myMsgFac () ("nullVecElemSmsg", "objectiveList", theIdx);
d691 3
a693 3
if (WitObjective::containsVBar      (theObjNames[theIdx]))
myMsgFac () ("vbarInObjNameSmsg", theObjNames[theIdx]);
}
d695 1
a695 1
checkForDupObjNames (theObjNames);
d697 2
a698 2
theCall.myMultiObjMgr ()->setObjectiveList (theObjNames);
}
d703 8
a710 8
{
WitOptCompApiCall        theCall (this);
char *                   theObjName;
WitList <char>           theObjNameList;
WitVector <const char *> theObjNameVec;
int                      theIdx;
WitString                oldSpec;

d712 2
a713 2
theCall.reqMultiObjMode  ("objectiveListSpec");
theCall.reqNoPartsOrOpns ("objectiveListSpec");
d715 1
a715 1
forbidNullArg (objectiveListSpec, "objectiveListSpec");
d717 1
a717 1
parseObjectiveListSpec (objectiveListSpec, theObjNameList);
d719 1
a719 1
theObjNameVec.resize (theObjNameList.nElements (), NULL);
d721 1
a721 1
theIdx = -1;
d723 3
a725 3
forEachEl (theObjName, theObjNameList)
{
theIdx ++;
d727 2
a728 2
theObjNameVec[theIdx] = theObjName;
}
d730 1
a730 1
checkForDupObjNames (theObjNameVec);
d732 1
a732 1
theCall.myMultiObjMgr ()->getObjectiveListSpec (oldSpec);
d734 5
a738 5
if (myMsgFac ().mayIssue ("setStringAttrMsg"))
myMsgFac () ("setStringAttrMsg",
"objectiveListSpec",
oldSpec,
objectiveListSpec);
d740 1
a740 1
theCall.myMultiObjMgr ()->setObjectiveList (theObjNameVec);
d742 1
a742 1
theObjNameVec.clear ();
d744 5
a748 5
while (not theObjNameList.isEmpty ())
{
delete[] theObjNameList.get ();
}
}
d753 2
a754 2
{
WitOptCompApiCall theCall (this);
d756 1
a756 1
theCall.reqMultiObjMode ("objectiveRank");
d758 10
a767 10
theCall.prepRangedInt (
"objectiveRank",
theCall.currentObjective ()->objectiveRank (),
objectiveRank,
1,
theCall.myMultiObjMgr ()->myObjectives ().nElements ());

if (theCall.argsOK ())
theCall.currentObjective ()->setObjectiveRank (objectiveRank);
}
d772 2
a773 19
{
WitOptCompApiCall theCall (this);

WitOptStarter *   theOptStarter;
WitOptStarter *   currentOptStarter;

theOptStarter = NULL;

// Find the OptStarter that matches the Attr.
//
forEachEl (currentOptStarter, theCall.myOptComp ()->allOptStarters ())
if (currentOptStarter->myApiAttr () == optInitMethod)
theOptStarter = currentOptStarter;

if (theOptStarter == NULL)
myMsgFac () ("unknownOptStarterSmsg", optInitMethod);

if (theOptStarter == theCall.myOptComp ()->accOptStarter ())
myMsgFac () ("setAccInitSmsg");
d775 2
a776 4
myMsgFac () ("setWitAttrAttrMsg",
"optInitMethod",
theCall.myOptComp ()->optInitMethod ()->myApiAttr (),
optInitMethod);
d778 1
a778 1
myDetOptImpMgr ()->shutDown ();
d780 21
a800 2
theOptStarter->beChosen ();
}
d805 2
a806 2
{
WitOptCompApiCall theCall (this);
d808 8
a815 8
theCall.prepString (
"solverLogFileName",
theCall.myOptComp ()->solverLogFileName (),
solverLogFileName);

if (theCall.argsOK ())
theCall.myOptComp ()->setSolverLogFileName (solverLogFileName);
}
d820 2
a821 2
{
WitOptCompApiCall theCall (this);
d823 8
a830 8
theCall.prepNonNegDouble (
"wbounds",
theCall.myOptComp ()->wbounds (),
theVal);

if (theCall.argsOK ())
theCall.myOptComp ()->setWbounds (theVal);
}
d835 6
a840 6
const char *     objectiveListSpec,
WitList <char> & theObjNameList)
{
const char * curPosition;
int          theNameLength;
char *       theObjName;
d842 1
a842 1
theObjNameList.clear ();
d844 1
a844 1
curPosition = objectiveListSpec;
d846 3
a848 3
while (true)
{
theNameLength = strcspn (curPosition, "|");
d850 1
a850 1
theObjName    = new char[theNameLength + 1];
d852 1
a852 1
strncpy (theObjName, curPosition, theNameLength);
d854 1
a854 1
theObjName[theNameLength] = '\0';
d856 1
a856 1
theObjNameList.append (theObjName);
d858 1
a858 1
curPosition += theNameLength;
d860 2
a861 2
if (* curPosition == '\0')
return;
d863 1
a863 1
stronglyAssert (* curPosition == '|');
d865 3
a867 3
curPosition ++;
}
}
d872 13
a884 13
{
int theIdx;
int priorIdx;

for    (theIdx   = 0; theIdx   < theObjNames.length (); theIdx   ++)
for (priorIdx = 0; priorIdx < theIdx;                priorIdx ++)
{
if (equalCstrings (theObjNames[theIdx], theObjNames[priorIdx]))
{
myMsgFac () ("dupObjNameSmsg", theObjNames[theIdx]);
}
}
}
@


1.133
log
@Revisions for the removal of COIN.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d33 4
a36 4
      const char *         theName,
      const WitISRealArg & theValue)
   {
   WitOptCompApiCall theCall (this);
d38 1
a38 1
   forbidNullArg (theName, "theName");
d40 2
a41 2
   if (equalCstrings (theName, "NO_PARAM"))
      myMsgFac () ("noParamCpxParamSpecSmsg");
d43 2
a44 2
   theCall.myCpxParSpecMgr ()->addDblCpxParSpec (theName, theValue);
   }
d49 2
a50 2
   {
   WitOptCompApiCall theCall (this);
d52 1
a52 1
   forbidNullArg (theName, "theName");
d54 2
a55 2
   if (equalCstrings (theName, "NO_PARAM"))
      myMsgFac () ("noParamCpxParamSpecSmsg");
d57 2
a58 2
   theCall.myCpxParSpecMgr ()->addIntCpxParSpec (theName, theValue);
   }
d63 2
a64 2
   {
   WitOptCompApiCall theCall (this);
d66 3
a68 3
   apiGet (                 accAfterOptImp, 
                           "accAfterOptImp", 
      theCall.myOptComp ()->accAfterOptImp ());
d70 2
a71 2
   issueGetAttrMsg ("accAfterOptImp");
   }
d76 2
a77 2
   {
   WitOptCompApiCall theCall (this);
d79 3
a81 3
   apiGet (                 accAfterSoftLB, 
                           "accAfterSoftLB", 
      theCall.myOptComp ()->accAfterSoftLB ());
d83 2
a84 2
   issueGetAttrMsg ("accAfterSoftLB");
   }
d89 2
a90 2
   {
   WitOptCompApiCall theCall (this);
d92 3
a94 3
   apiGet (              accelerated,
                        "accelerated",
      myDetOptImpMgr ()->accelerated ());
d96 2
a97 2
   issueGetAttrMsg ("accelerated");
   }
d102 2
a103 2
   {
   WitOptCompApiCall theCall (this);
d105 2
a106 2
   apiGet (boundsValue, "boundsValue", theCall.myOptComp ()->boundsValue ());
   }
d111 2
a112 2
   {
   WitOptCompApiCall theCall (this);
d114 2
a115 2
   theCall.myCpxParSpecMgr ()->clearCpxParSpecs ();
   }
d120 2
a121 2
   {
   WitOptCompApiCall theCall (this);
d123 1
a123 1
   apiGet (compPrices, "compPrices", theCall.myOptComp ()->compPrices ());
d125 2
a126 2
   issueGetAttrMsg ("compPrices");
   }
d131 2
a132 2
   {
   WitOptCompApiCall theCall (this);
d134 2
a135 2
   apiGet (cplexEmbedded, "cplexEmbedded", WitOptComp::cplexEmbedded ());
   }
d140 2
a141 2
   {
   WitOptCompApiCall theCall (this);
d143 3
a145 3
   apiGet (                 cplexMipBound,
                           "cplexMipBound",
      theCall.myOptComp ()->cplexMipBound ());
d147 2
a148 2
   issueGetAttrMsg ("cplexMipBound");
   }
d153 2
a154 2
   {
   WitOptCompApiCall theCall (this);
d156 3
a158 3
   apiGet (                 cplexMipRelGap,
                           "cplexMipRelGap",
      theCall.myOptComp ()->cplexMipRelGap ());
d160 2
a161 2
   issueGetAttrMsg ("cplexMipRelGap");
   }
d166 2
a167 2
   {
   WitOptCompApiCall theCall (this);
d169 3
a171 3
   apiGet (                       cplexParSpecDblVal,
                                 "cplexParSpecDblVal",
      theCall.myCpxParSpecMgr ()->cplexParSpecDblVal ());
d173 2
a174 2
   issueGetAttrMsg ("cplexParSpecDblVal");
   }
d179 2
a180 2
   {
   WitOptCompApiCall theCall (this);
d182 4
a185 4
   apiGet (
                                  cplexParSpecIntVal,
                                 "cplexParSpecIntVal",
      theCall.myCpxParSpecMgr ()->cplexParSpecIntVal ());
d187 2
a188 2
   issueGetAttrMsg ("cplexParSpecIntVal");
   }
d193 2
a194 2
   {
   WitOptCompApiCall theCall (this);
d196 3
a198 3
   apiGet (                       cplexParSpecName,
                                 "cplexParSpecName",
      theCall.myCpxParSpecMgr ()->cplexParSpecName ());
d200 2
a201 2
   issueGetAttrMsg ("cplexParSpecName");
   }
d206 2
a207 2
   {
   WitOptCompApiCall theCall (this);
d209 3
a211 3
   apiGet (                 cplexStatusCode,
                           "cplexStatusCode",
      theCall.myOptComp ()->cplexStatusCode ());
d213 2
a214 2
   issueGetAttrMsg ("cplexStatusCode");
   }
d219 2
a220 2
   {
   WitOptCompApiCall theCall (this);
d222 3
a224 3
   apiGet (                 cplexStatusText, 
                           "cplexStatusText", 
      theCall.myOptComp ()->cplexStatusText ());
d226 2
a227 2
   issueGetAttrMsg ("cplexStatusText");
   }
d232 2
a233 2
   {
   WitOptCompApiCall theCall (this);
d235 1
a235 1
   theCall.reqMultiObjMode ("currentObjective");
d237 4
a240 4
   apiGet (
              theObjName,
             "currentObjective",
      theCall.currentObjective ()->myObjName ());
d242 2
a243 2
   issueGetAttrMsg ("currentObjective");
   }
d248 21
a268 21
      const char *         theName,
      WitBoolean *         dblSpecExists,
      const WitOSRealArg & theValue)
   {
   WitOptCompApiCall theCall (this);
   WitCpxParSpec *   theSpec;

   forbidNullArg (theName, "theName");

   * dblSpecExists = WitFALSE;

   theSpec         = theCall.myCpxParSpecMgr ()->findCpxParSpec (theName);

   if (theSpec != NULL)
      if (not theSpec->valTypeIsInt ())
         {
         * dblSpecExists = WitTRUE;

         theValue        = theSpec->myDblVal ();
         }
   }
d273 2
a274 2
   {
   WitOptCompApiCall theCall (this);
d276 3
a278 3
   apiGet (              extOptActive,
                        "extOptActive",
      myDetOptImpMgr ()->extOptActive ());
d280 2
a281 2
   issueGetAttrMsg ("extOptActive");
   }
d286 21
a306 21
      const char * theName,
      WitBoolean * intSpecExists,
      int *        theValue)
   {
   WitOptCompApiCall theCall (this);
   WitCpxParSpec *   theSpec;

   forbidNullArg (theName, "theName");

   * intSpecExists = WitFALSE;

   theSpec         = theCall.myCpxParSpecMgr ()->findCpxParSpec (theName);

   if (theSpec != NULL)
      if (theSpec->valTypeIsInt ())
         {
         * intSpecExists = WitTRUE;

         * theValue      = theSpec->myIntVal ();
         }
   }
d311 2
a312 2
   {
   WitOptCompApiCall theCall (this);
d314 3
a316 3
   apiGet (                 mipMode,
                           "mipMode",
      theCall.myOptComp ()->mipMode ());
d318 2
a319 2
   issueGetAttrMsg ("mipMode");
   }
d324 2
a325 2
   {
   WitOptCompApiCall theCall (this);
d327 3
a329 3
   apiGet (                 multiObjMode,
                           "multiObjMode",
      theCall.myOptComp ()->multiObjMode ());
d331 2
a332 2
   issueGetAttrMsg ("multiObjMode");
   }
d337 2
a338 2
   {
   WitOptCompApiCall theCall (this);
d340 1
a340 1
   theCall.reqMultiObjMode ("multiObjTol");
d342 3
a344 3
   apiGet (                     multiObjTol,
                               "multiObjTol",
      theCall.myMultiObjMgr ()->multiObjTol ());
d346 2
a347 2
   issueGetAttrMsg ("multiObjTol");
   }
d352 2
a353 2
   {
   WitOptCompApiCall theCall (this);
d355 3
a357 3
   apiGet (                 objChoice,
                           "objChoice",
      theCall.myOptComp ()->objChoice ());
d359 2
a360 2
   issueGetAttrMsg ("objChoice");
   }
d365 2
a366 2
   {
   WitOptCompApiCall theCall (this);
d368 1
a368 1
   apiGet (objValue, "objValue", theCall.myOptComp ()->objValue ());
d370 2
a371 2
   issueGetAttrMsg ("objValue");
   }
d376 8
a383 8
      const WitOSRealArg & objValue,
      const WitOSRealArg & boundsValue)
   {
   WitOptCompApiCall theCall (this);

   apiGet (objValue,    "objValue",    theCall.myOptComp ()->objValue    ());
   apiGet (boundsValue, "boundsValue", theCall.myOptComp ()->boundsValue ());
   }
d388 6
a393 6
      int  *     lenList,
      char * * * objectiveList)
   {
   WitOptCompApiCall theCall (this);
   int               theIdx;
   WitObjective *    theObj;
d395 1
a395 1
   theCall.reqMultiObjMode ("objectiveList");
d397 1
a397 1
   * lenList = theCall.myMultiObjMgr ()->myObjectives ().nElements ();
d399 1
a399 1
   apiAlloc (objectiveList, * lenList);
d401 1
a401 1
   theIdx = -1;
d403 3
a405 3
   forEachEl (theObj, theCall.myMultiObjMgr ()->myObjectives ())
      {
      theIdx ++;
d407 3
a409 3
      (* objectiveList)[theIdx] = theObj->myObjName ().apiDupCstring ();
      }
   }
d414 3
a416 3
   {
   WitOptCompApiCall theCall (this);
   WitString         theObjListSpec;
d418 1
a418 1
   theCall.reqMultiObjMode ("objectiveListSpec");
d420 1
a420 1
   theCall.myMultiObjMgr ()->getObjectiveListSpec (theObjListSpec);
d422 4
a425 4
   apiGet (
       objectiveListSpec,
      "objectiveListSpec",
          theObjListSpec);
d427 2
a428 2
   issueGetAttrMsg ("objectiveListSpec");
   }
d433 2
a434 2
   {
   WitOptCompApiCall theCall (this);
d436 1
a436 1
   theCall.reqMultiObjMode ("objectiveRank");
d438 4
a441 4
   apiGet (
                                   objectiveRank,
                                  "objectiveRank",
      theCall.currentObjective ()->objectiveRank ());
d443 2
a444 2
   issueGetAttrMsg ("objectiveRank");
   }
d449 2
a450 2
   {
   WitOptCompApiCall theCall (this);
d452 5
a456 5
   apiGet (
       optInitMethod,
      "optInitMethod",
      theCall.myOptComp ()->optInitMethod ()->myApiAttr ());
   }
d461 2
a462 2
   {
   WitOptCompApiCall theCall (this);
d464 3
a466 3
   apiGet (                 solverLogFileName, 
                           "solverLogFileName", 
      theCall.myOptComp ()->solverLogFileName ());
d468 2
a469 2
   issueGetAttrMsg ("solverLogFileName");
   }
d474 2
a475 2
   {
   WitOptCompApiCall theCall (this);
d477 1
a477 1
   apiGet (wbounds, "wbounds", theCall.myOptComp ()->wbounds ());
d479 2
a480 2
   issueGetAttrMsg ("wbounds");
   }
d485 2
a486 2
   {
   WitOptCompApiCall theCall (this);
d488 8
a495 8
   theCall.prepBool (
      "accAfterOptImp", 
      theCall.myOptComp ()->accAfterOptImp (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setAccAfterOptImp (asaBool (newValue));
   }
d500 2
a501 2
   {
   WitOptCompApiCall theCall (this);
d503 8
a510 8
   theCall.prepBool (
      "accAfterSoftLB", 
      theCall.myOptComp ()->accAfterSoftLB (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setAccAfterSoftLB (asaBool (newValue));
   }
d515 2
a516 2
   {
   WitOptCompApiCall theCall (this);
d518 8
a525 8
   theCall.prepBool (
      "compPrices", 
      theCall.myOptComp ()->compPrices (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setCompPrices (asaBool (newValue));
   }
d530 2
a531 2
   {
   WitOptCompApiCall theCall (this);
d533 8
a540 8
   theCall.prepDouble (
                                 "cplexParSpecDblVal", 
      theCall.myCpxParSpecMgr ()->cplexParSpecDblVal (),
                                  cplexParSpecDblVal);

   if (theCall.argsOK ())
      theCall.myCpxParSpecMgr ()->setCplexParSpecDblVal (cplexParSpecDblVal);
   }
d545 2
a546 2
   {
   WitOptCompApiCall theCall (this);
d548 8
a555 8
   theCall.prepInt (
                                 "cplexParSpecIntVal",
      theCall.myCpxParSpecMgr ()->cplexParSpecIntVal (),
                                  cplexParSpecIntVal);

   if (theCall.argsOK ())
      theCall.myCpxParSpecMgr ()->setCplexParSpecIntVal (cplexParSpecIntVal);
   }
d560 2
a561 2
   {
   WitOptCompApiCall theCall (this);
d563 8
a570 8
   theCall.prepString (
      "cplexParSpecName", 
      theCall.myCpxParSpecMgr ()->cplexParSpecName (), 
      cplexParSpecName);

   if (theCall.argsOK ())
      theCall.myCpxParSpecMgr ()->setCplexParSpecName (cplexParSpecName);
   }
d575 3
a577 3
   {
   WitOptCompApiCall theCall (this);
   WitObjective *    theObj;
d579 1
a579 1
   theCall.reqMultiObjMode ("currentObjective");
d581 4
a584 4
   theCall.prepString (
      "currentObjective", 
      theCall.currentObjective ()->myObjName (), 
      theObjName);
d586 1
a586 1
   theObj = theCall.myMultiObjMgr ()->findObjective (theObjName);
d588 2
a589 2
   if (theObj == NULL)
      myMsgFac () ("setCurObjToNonMatchNameSmsg", theObjName);
d591 3
a593 3
   if (theCall.argsOK ())
      theCall.myMultiObjMgr ()->setCurrentObjective (theObj);
   }
d598 2
a599 2
   {
   WitOptCompApiCall theCall (this);
d601 8
a608 8
   theCall.prepBool (
      "mipMode", 
      theCall.myOptComp ()->mipMode (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setMipMode (asaBool (newValue));
   }
d613 2
a614 2
   {
   WitOptCompApiCall theCall (this);
d616 1
a616 1
   theCall.reqNoPartsOrOpns ("multiObjMode");
d618 8
a625 8
   theCall.prepBool (
      "multiObjMode",
      theCall.myOptComp ()->multiObjMode (),
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setMultiObjMode (asaBool (newValue));
   }
d630 2
a631 2
   {
   WitOptCompApiCall theCall (this);
d633 1
a633 1
   theCall.reqMultiObjMode ("multiObjTol");
d635 10
a644 10
   theCall.prepNonNegUBDouble (
      "multiObjTol", 
      theCall.myMultiObjMgr ()->multiObjTol (),
      theValue,
      .001001,
      .001);

   if (theCall.argsOK ())
      theCall.myMultiObjMgr ()->setMultiObjTol (theValue);
   }
d649 2
a650 2
   {
   WitOptCompApiCall theCall (this);
d652 10
a661 10
   theCall.prepRangedInt (
      "objChoice",
      theCall.myOptComp ()->objChoice (),
      objChoice,
      0,
      1);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setObjChoice (objChoice);
   }
d666 6
a671 6
      int                  lenList,
      const char * const * objectiveList)
   { 
   WitOptCompApiCall        theCall (this);
   WitVector <const char *> theObjNames;
   int                      theIdx;
d673 1
a673 1
   theCall.reqMultiObjMode ("objectiveList");
d675 1
a675 1
   theCall.reqNoPartsOrOpns ("objectiveList");
d677 2
a678 2
   if (lenList < 1)
      myMsgFac () ("intArgLowSmsg", "lenList", lenList, 1);
d680 1
a680 1
   forbidNullArg (objectiveList, "objectiveList");
d682 1
a682 1
   theObjNames.resize (lenList, NULL);
d684 1
a684 1
   theObjNames = objectiveList;
d686 4
a689 4
   for (theIdx = 0; theIdx < lenList; theIdx ++)
      {
      if (theObjNames[theIdx] == NULL)
         myMsgFac () ("nullVecElemSmsg", "objectiveList", theIdx);
d691 3
a693 3
      if (WitObjective::containsVBar      (theObjNames[theIdx]))
         myMsgFac () ("vbarInObjNameSmsg", theObjNames[theIdx]);
      }
d695 1
a695 1
   checkForDupObjNames (theObjNames);
d697 2
a698 2
   theCall.myMultiObjMgr ()->setObjectiveList (theObjNames);
   }
d703 8
a710 8
   {
   WitOptCompApiCall        theCall (this);
   char *                   theObjName;
   WitList <char>           theObjNameList;
   WitVector <const char *> theObjNameVec;
   int                      theIdx;
   WitString                oldSpec;
   
d712 2
a713 2
   theCall.reqMultiObjMode  ("objectiveListSpec");
   theCall.reqNoPartsOrOpns ("objectiveListSpec");
d715 1
a715 1
   forbidNullArg (objectiveListSpec, "objectiveListSpec");
d717 1
a717 1
   parseObjectiveListSpec (objectiveListSpec, theObjNameList);
d719 1
a719 1
   theObjNameVec.resize (theObjNameList.nElements (), NULL);
d721 1
a721 1
   theIdx = -1;
d723 3
a725 3
   forEachEl (theObjName, theObjNameList)
      {
      theIdx ++;
d727 2
a728 2
      theObjNameVec[theIdx] = theObjName;
      }
d730 1
a730 1
   checkForDupObjNames (theObjNameVec);
d732 1
a732 1
   theCall.myMultiObjMgr ()->getObjectiveListSpec (oldSpec);
d734 5
a738 5
   if (myMsgFac ().mayIssue ("setStringAttrMsg"))
      myMsgFac () ("setStringAttrMsg",
         "objectiveListSpec",
         oldSpec,
         objectiveListSpec);
d740 1
a740 1
   theCall.myMultiObjMgr ()->setObjectiveList (theObjNameVec);
d742 1
a742 1
   theObjNameVec.clear ();
d744 5
a748 5
   while (not theObjNameList.isEmpty ())
      {
      delete[] theObjNameList.get ();
      }
   }
d753 2
a754 2
   {
   WitOptCompApiCall theCall (this);
d756 1
a756 1
   theCall.reqMultiObjMode ("objectiveRank");
d758 10
a767 10
   theCall.prepRangedInt (
                                  "objectiveRank",
      theCall.currentObjective ()->objectiveRank (),
                                   objectiveRank,
      1,
      theCall.myMultiObjMgr ()->myObjectives ().nElements ());

   if (theCall.argsOK ())
      theCall.currentObjective ()->setObjectiveRank (objectiveRank);
   }
d772 19
a790 2
   {
   WitOptCompApiCall theCall (this);
d792 4
a795 2
   WitOptStarter *   theOptStarter;
   WitOptStarter *   currentOptStarter;
d797 1
a797 1
   theOptStarter = NULL;
d799 2
a800 21
      // Find the OptStarter that matches the Attr.
      //
   forEachEl (currentOptStarter, theCall.myOptComp ()->allOptStarters ())
      if (currentOptStarter->myApiAttr () == optInitMethod)
         theOptStarter = currentOptStarter;

   if (theOptStarter == NULL)
      myMsgFac () ("unknownOptStarterSmsg", optInitMethod);

   if (theOptStarter == theCall.myOptComp ()->accOptStarter ())
      myMsgFac () ("setAccInitSmsg");

   myMsgFac () ("setWitAttrAttrMsg",
      "optInitMethod",
      theCall.myOptComp ()->optInitMethod ()->myApiAttr (),
      optInitMethod);

   myDetOptImpMgr ()->shutDown ();
   
   theOptStarter->beChosen ();
   }
d805 2
a806 2
   {
   WitOptCompApiCall theCall (this);
d808 8
a815 8
   theCall.prepString (
      "solverLogFileName", 
      theCall.myOptComp ()->solverLogFileName (), 
      solverLogFileName);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setSolverLogFileName (solverLogFileName);
   }
d820 2
a821 2
   {
   WitOptCompApiCall theCall (this);
d823 8
a830 8
   theCall.prepNonNegDouble (
      "wbounds", 
      theCall.myOptComp ()->wbounds (), 
      theVal);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setWbounds (theVal);
   }
d835 6
a840 6
      const char *     objectiveListSpec,
      WitList <char> & theObjNameList)
   {
   const char * curPosition;
   int          theNameLength;
   char *       theObjName;
d842 1
a842 1
   theObjNameList.clear ();
d844 1
a844 1
   curPosition = objectiveListSpec;
d846 3
a848 3
   while (true)
      {
      theNameLength = strcspn (curPosition, "|");
d850 1
a850 1
      theObjName    = new char[theNameLength + 1];
d852 1
a852 1
      strncpy (theObjName, curPosition, theNameLength);
d854 1
a854 1
      theObjName[theNameLength] = '\0';
d856 1
a856 1
      theObjNameList.append (theObjName);
d858 1
a858 1
      curPosition += theNameLength;
d860 2
a861 2
      if (* curPosition == '\0')
         return;
d863 1
a863 1
      stronglyAssert (* curPosition == '|');
d865 3
a867 3
      curPosition ++;
      }
   }
d872 13
a884 13
   {
   int theIdx;
   int priorIdx;

   for    (theIdx   = 0; theIdx   < theObjNames.length (); theIdx   ++)
      for (priorIdx = 0; priorIdx < theIdx;                priorIdx ++)
         {
         if (equalCstrings (theObjNames[theIdx], theObjNames[priorIdx]))
            {
            myMsgFac () ("dupObjNameSmsg", theObjNames[theIdx]);
            }
      }
   }
@


1.132
log
@Removed COIN from WIT.
@
text
@a25 1
#include <SolverMgr.h>
d134 1
a134 1
   apiGet (cplexEmbedded, "cplexEmbedded", WitSolverMgr::cplexEmbedded ());
@


1.131
log
@Added severe error for selecting a solver that's not embedded.
@
text
@a119 22
void WitRun::witGetCoinEmbedded (WitBoolean * coinEmbedded)
   {
   WitOptCompApiCall theCall (this);

   apiGet (coinEmbedded, "coinEmbedded", WitSolverMgr::coinEmbedded ());
   }

//------------------------------------------------------------------------------

void WitRun::witGetCoinSelected (WitBoolean * coinSelected)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 coinSelected,
                           "coinSelected",
      theCall.myOptComp ()->coinSelected ());

   issueGetAttrMsg ("coinSelected");
   }

//------------------------------------------------------------------------------

a205 13
void WitRun::witGetCplexSelected (WitBoolean * cplexSelected)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 cplexSelected,
                           "cplexSelected",
      theCall.myOptComp ()->cplexSelected ());

   issueGetAttrMsg ("cplexSelected");
   }

//------------------------------------------------------------------------------

a514 19
void WitRun::witSetCoinSelected (WitBoolean theValue)
   {
   WitOptCompApiCall theCall (this);

   if (theValue)
      if (not WitSolverMgr::coinEmbedded ())
         myMsgFac () ("solverNotEmbeddedSmsg", "COIN", "coin");

   theCall.prepBool (
      "coinSelected",
      theCall.myOptComp ()->coinSelected (),
      theValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setCoinSelected (asaBool (theValue));
   }

//------------------------------------------------------------------------------

a574 19
void WitRun::witSetCplexSelected (WitBoolean theValue)
   {
   WitOptCompApiCall theCall (this);

   if (theValue)
      if (not WitSolverMgr::cplexEmbedded ())
         myMsgFac () ("solverNotEmbeddedSmsg", "CPLEX", "cplex");

   theCall.prepBool (
      "cplexSelected", 
      theCall.myOptComp ()->cplexSelected (), 
      theValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setCplexSelected (asaBool (theValue));
   }

//------------------------------------------------------------------------------

@


1.130
log
@Fixed a bug in optInitMethod
@
text
@d554 4
d633 4
@


1.129
log
@CPLEX
@
text
@d863 1
a863 2
   if (myDetOptImpMgr ()->accelerated ())
      myDetOptImpMgr ()->shutDown ();
@


1.128
log
@CPLEX
@
text
@d162 1
a162 1
void WitRun::witGetCplexObjBound (const WitOSRealArg & cplexObjBound)
d166 3
a168 3
   apiGet (                 cplexObjBound,
                           "cplexObjBound",
      theCall.myOptComp ()->cplexObjBound ());
d170 1
a170 1
   issueGetAttrMsg ("cplexObjBound");
d175 1
a175 1
void WitRun::witGetCplexObjRelGap (const WitOSRealArg & cplexObjRelGap)
d179 3
a181 3
   apiGet (                 cplexObjRelGap,
                           "cplexObjRelGap",
      theCall.myOptComp ()->cplexObjRelGap ());
d183 1
a183 1
   issueGetAttrMsg ("cplexObjRelGap");
@


1.127
log
@CPLEX
@
text
@d162 1
a162 1
void WitRun::witGetCplexMipRelGap (const WitOSRealArg & cplexMipRelGap)
d166 3
a168 3
   apiGet (                 cplexMipRelGap,
                           "cplexMipRelGap",
      theCall.myOptComp ()->cplexMipRelGap ());
d170 1
a170 1
   issueGetAttrMsg ("cplexMipRelGap");
d175 1
a175 1
void WitRun::witGetCplexObjBound (const WitOSRealArg & cplexObjBound)
d179 3
a181 3
   apiGet (                 cplexObjBound,
                           "cplexObjBound",
      theCall.myOptComp ()->cplexObjBound ());
d183 1
a183 1
   issueGetAttrMsg ("cplexObjBound");
@


1.126
log
@CPLEX
@
text
@d162 13
@


1.125
log
@CPLEX
@
text
@d162 13
d365 1
a365 2
   apiGet (
                                multiObjTol,
@


1.124
log
@CPLEX
@
text
@d26 1
d124 1
a124 1
   apiGet (coinEmbedded, "coinEmbedded", WitNonClass::coinEmbedded ());
d157 1
a157 1
   apiGet (cplexEmbedded, "cplexEmbedded", WitNonClass::cplexEmbedded ());
@


1.123
log
@CPLEX
@
text
@d169 1
a169 1
   issueGetAttrMsg ("cplexParSpecDblVal", cplexParSpecDblVal);
d183 1
a183 1
   issueGetAttrMsg ("cplexParSpecIntVal", cplexParSpecIntVal);
d222 1
a222 1
   issueGetAttrMsg ("cplexStatusCode", cplexStatusCode);
d356 1
a356 1
   issueGetAttrMsg ("multiObjTol", multiObjTol);
d369 1
a369 1
   issueGetAttrMsg ("objChoice", objChoice);
d380 1
a380 1
   issueGetAttrMsg ("objValue", objValue);
d453 1
a453 1
   issueGetAttrMsg ("objectiveRank", objectiveRank);
d489 1
a489 1
   issueGetAttrMsg ("wbounds", wbounds);
@


1.122
log
@CPLEX
@
text
@d227 13
@


1.121
log
@CPLEX Parameters
@
text
@d214 1
a214 1
void WitRun::witGetCplexSolnStatus (int * cplexSolnStatus)
d218 3
a220 3
   apiGet (                 cplexSolnStatus,
                           "cplexSolnStatus",
      theCall.myOptComp ()->cplexSolnStatus ());
d222 1
a222 1
   issueGetAttrMsg ("cplexSolnStatus", cplexSolnStatus);
@


1.120
log
@CPLEX Parameters
@
text
@d32 1
a32 1
void WitRun::witAddDblCpxParSpec (
d48 1
a48 1
void WitRun::witAddIntCpxParSpec (const char * theName, int theValue)
d110 1
a110 1
void WitRun::witClearCpxParSpecs ()
d161 1
a161 1
void WitRun::witGetCplexSelected (WitBoolean * cplexSelected)
d165 3
a167 3
   apiGet (                 cplexSelected,
                           "cplexSelected",
      theCall.myOptComp ()->cplexSelected ());
d169 1
a169 1
   issueGetAttrMsg ("cplexSelected");
d174 1
a174 1
void WitRun::witGetCpxParSpecDblVal (const WitOSRealArg & cpxParSpecDblVal)
d178 4
a181 3
   apiGet (                       cpxParSpecDblVal,
                                 "cpxParSpecDblVal",
      theCall.myCpxParSpecMgr ()->cpxParSpecDblVal ());
d183 1
a183 1
   issueGetAttrMsg ("cpxParSpecDblVal", cpxParSpecDblVal);
d188 1
a188 1
void WitRun::witGetCpxParSpecIntVal (int * cpxParSpecIntVal)
d192 3
a194 4
   apiGet (
                                  cpxParSpecIntVal,
                                 "cpxParSpecIntVal",
      theCall.myCpxParSpecMgr ()->cpxParSpecIntVal ());
d196 1
a196 1
   issueGetAttrMsg ("cpxParSpecIntVal", cpxParSpecIntVal);
d201 1
a201 1
void WitRun::witGetCpxParSpecName (char * * cpxParSpecName)
d205 3
a207 3
   apiGet (                       cpxParSpecName,
                                 "cpxParSpecName",
      theCall.myCpxParSpecMgr ()->cpxParSpecName ());
d209 1
a209 1
   issueGetAttrMsg ("cpxParSpecName");
d214 1
a214 1
void WitRun::witGetCpxSolnStatus (int * cpxSolnStatus)
d218 3
a220 3
   apiGet (                 cpxSolnStatus,
                           "cpxSolnStatus",
      theCall.myOptComp ()->cpxSolnStatus ());
d222 1
a222 1
   issueGetAttrMsg ("cpxSolnStatus", cpxSolnStatus);
d243 1
a243 1
void WitRun::witGetDblCpxParSpec (
d281 1
a281 1
void WitRun::witGetIntCpxParSpec (
d541 1
a541 1
void WitRun::witSetCplexSelected (WitBoolean theValue)
d545 4
a548 4
   theCall.prepBool (
      "cplexSelected", 
      theCall.myOptComp ()->cplexSelected (), 
      theValue);
d551 1
a551 1
      theCall.myOptComp ()->setCplexSelected (asaBool (theValue));
d556 1
a556 1
void WitRun::witSetCpxParSpecDblVal (const WitISRealArg & cpxParSpecDblVal)
d560 4
a563 4
   theCall.prepDouble (
                                 "cpxParSpecDblVal", 
      theCall.myCpxParSpecMgr ()->cpxParSpecDblVal (),
                                  cpxParSpecDblVal);
d566 1
a566 1
      theCall.myCpxParSpecMgr ()->setCpxParSpecDblVal (cpxParSpecDblVal);
d571 1
a571 1
void WitRun::witSetCpxParSpecIntVal (int cpxParSpecIntVal)
d575 4
a578 4
   theCall.prepInt (
                                 "cpxParSpecIntVal",
      theCall.myCpxParSpecMgr ()->cpxParSpecIntVal (),
                                  cpxParSpecIntVal);
d581 1
a581 1
      theCall.myCpxParSpecMgr ()->setCpxParSpecIntVal (cpxParSpecIntVal);
d586 1
a586 1
void WitRun::witSetCpxParSpecName (const char * cpxParSpecName)
d590 4
a593 4
   theCall.prepString (
      "cpxParSpecName", 
      theCall.myCpxParSpecMgr ()->cpxParSpecName (), 
      cpxParSpecName);
d596 1
a596 1
      theCall.myCpxParSpecMgr ()->setCpxParSpecName (cpxParSpecName);
@


1.119
log
@CPLEX Parameters
@
text
@d253 3
a255 1
   theSpec = theCall.myCpxParSpecMgr ()->findCpxParSpec (theName);
a262 2

         return;
a263 2

   * dblSpecExists = WitFALSE;
d291 3
a293 1
   theSpec = theCall.myCpxParSpecMgr ()->findCpxParSpec (theName);
a300 2

         return;
a301 2

   * intSpecExists = WitFALSE;
@


1.118
log
@CPLEX Parameters
@
text
@d34 1
a34 1
      const WitISRealArg & theVal)
d43 1
a43 1
   theCall.myCpxParSpecMgr ()->addDblCpxParSpec (theName, theVal);
d48 1
a48 1
void WitRun::witAddIntCpxParSpec (const char * theName, int theVal)
d57 1
a57 1
   theCall.myCpxParSpecMgr ()->addIntCpxParSpec (theName, theVal);
@


1.117
log
@CPLEX solution status
@
text
@d174 40
a473 40
void WitRun::witGetSpecCpxParDblVal (const WitOSRealArg & specCpxParDblVal)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                       specCpxParDblVal,
                                 "specCpxParDblVal",
      theCall.myCpxParSpecMgr ()->specCpxParDblVal ());

   issueGetAttrMsg ("specCpxParDblVal", specCpxParDblVal);
   }

//------------------------------------------------------------------------------

void WitRun::witGetSpecCpxParIntVal (int * specCpxParIntVal)
   {
   WitOptCompApiCall theCall (this);

   apiGet (
                                  specCpxParIntVal,
                                 "specCpxParIntVal",
      theCall.myCpxParSpecMgr ()->specCpxParIntVal ());

   issueGetAttrMsg ("specCpxParIntVal", specCpxParIntVal);
   }

//------------------------------------------------------------------------------

void WitRun::witGetSpecCpxParName (char * * specCpxParName)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                       specCpxParName,
                                 "specCpxParName",
      theCall.myCpxParSpecMgr ()->specCpxParName ());

   issueGetAttrMsg ("specCpxParName");
   }

//------------------------------------------------------------------------------

d560 45
a850 45
void WitRun::witSetSpecCpxParDblVal (const WitISRealArg & specCpxParDblVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepDouble (
                                 "specCpxParDblVal", 
      theCall.myCpxParSpecMgr ()->specCpxParDblVal (),
                                  specCpxParDblVal);

   if (theCall.argsOK ())
      theCall.myCpxParSpecMgr ()->setSpecCpxParDblVal (specCpxParDblVal);
   }

//------------------------------------------------------------------------------

void WitRun::witSetSpecCpxParIntVal (int specCpxParIntVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepInt (
                                 "specCpxParIntVal",
      theCall.myCpxParSpecMgr ()->specCpxParIntVal (),
                                  specCpxParIntVal);

   if (theCall.argsOK ())
      theCall.myCpxParSpecMgr ()->setSpecCpxParIntVal (specCpxParIntVal);
   }

//------------------------------------------------------------------------------

void WitRun::witSetSpecCpxParName (const char * specCpxParName)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepString (
      "specCpxParName", 
      theCall.myCpxParSpecMgr ()->specCpxParName (), 
      specCpxParName);

   if (theCall.argsOK ())
      theCall.myCpxParSpecMgr ()->setSpecCpxParName (specCpxParName);
   }

//------------------------------------------------------------------------------

@


1.116
log
@CPLEX Solution Status
@
text
@d174 1
a174 1
void WitRun::witGetCpxStat (int * cpxStat)
d178 3
a180 3
   apiGet (                 cpxStat,
                           "cpxStat",
      theCall.myOptComp ()->cpxStat ());
d182 1
a182 1
   issueGetAttrMsg ("cpxStat", cpxStat);
@


1.115
log
@CPLEX Parameters
@
text
@d174 13
@


1.114
log
@CPLEX Parameters
@
text
@d110 9
@


1.113
log
@CPLEX Parameters
@
text
@d181 27
@


1.112
log
@CPLEX Parameters
@
text
@d23 1
d38 2
d52 2
d194 27
@


1.111
log
@CPLEX Parameters
@
text
@d31 14
@


1.110
log
@CPLEX Parameters
@
text
@d31 12
@


1.109
log
@CPLEX Param Specs
@
text
@a702 3
   if (not theCall.myOptComp ()->allowCpxParSpec ())
      myMsgFac () ("attNyaSmsg", "specCpxParDblVal");

a717 3
   if (not theCall.myOptComp ()->allowCpxParSpec ())
      myMsgFac () ("attNyaSmsg", "specCpxParIntVal");

a732 3
   if (not theCall.myOptComp ()->allowCpxParSpec ())
      myMsgFac () ("attNyaSmsg", "specCpxParName");

@


1.108
log
@CPLEX Param Specs.
@
text
@d223 2
d327 13
d699 18
d721 3
d739 3
@


1.107
log
@CPX Param Specs
@
text
@d196 3
a198 3
                                              multiObjTol,
                                             "multiObjTol",
      theCall.myOptComp ()->myMultiObjMgr ()->multiObjTol ());
d325 14
d343 3
a345 3
   apiGet (                                     specCpxParName,
                                               "specCpxParName",
      theCall.myOptComp ()->myCpxParSpecMgr ()->specCpxParName ());
d501 1
a501 1
      theCall.myOptComp ()->myMultiObjMgr ()->multiObjTol (),
d507 1
a507 1
      theCall.myOptComp ()->myMultiObjMgr ()->setMultiObjTol (theValue);
d684 15
d705 1
a705 1
      theCall.myOptComp ()->myCpxParSpecMgr ()->specCpxParName (), 
d709 1
a709 4
      theCall.
         myOptComp ()->
            myCpxParSpecMgr ()->
               setSpecCpxParName (specCpxParName);
@


1.106
log
@CPX Params
@
text
@d22 1
a22 1
#include <CpxParamMgr.h>
a204 13
void WitRun::witGetNameForCpxParam (char * * nameForCpxParam)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                                   nameForCpxParam,
                                             "nameForCpxParam",
      theCall.myOptComp ()->myCpxParamMgr ()->nameForCpxParam ());

   issueGetAttrMsg ("nameForCpxParam");
   }

//------------------------------------------------------------------------------

d325 13
d655 1
a655 1
void WitRun::witSetNameForCpxParam (const char * nameForCpxParam)
d660 3
a662 3
      "nameForCpxParam", 
      theCall.myOptComp ()->myCpxParamMgr ()->nameForCpxParam (), 
      nameForCpxParam);
d665 1
a665 4
      theCall.
         myOptComp ()->
            myCpxParamMgr ()->
               setNameForCpxParam (nameForCpxParam);
d670 1
a670 1
void WitRun::witSetSolverLogFileName (const char * solverLogFileName)
d675 3
a677 3
      "solverLogFileName", 
      theCall.myOptComp ()->solverLogFileName (), 
      solverLogFileName);
d680 4
a683 1
      theCall.myOptComp ()->setSolverLogFileName (solverLogFileName);
@


1.105
log
@CPLEX
@
text
@d22 1
d205 13
d655 18
@


1.104
log
@CPLEX
@
text
@a368 6
   if (theValue)
      if (not coinEmbedded ())
         {
         myMsgFac () ("solverNotEmbeddedSmsg", "coinSelected", "COIN");
         }

a398 6
   if (theValue)
      if (not cplexEmbedded ())
         {
         myMsgFac () ("solverNotEmbeddedSmsg", "cplexSelected", "CPLEX");
         }

@


1.103
log
@CPLEX
@
text
@a310 11
void WitRun::witGetSolverEmbedded (WitBoolean * solverEmbedded)
   {
   WitOptCompApiCall theCall (this);

   apiGet (        solverEmbedded,
                  "solverEmbedded",
      WitNonClass::solverEmbedded ());
   }

//------------------------------------------------------------------------------

d369 5
a373 9
   if (not theValue)
      {
      myMsgFac () ("setBoolToInvalidSmsg", "coinSelected", false);
      }

   if (not coinEmbedded ())
      {
      myMsgFac () ("solverNotEmbeddedSmsg", "coinSelected", "COIN");
      }
d376 2
a377 2
      "coinSelected", 
      theCall.myOptComp ()->coinSelected (), 
d381 1
a381 1
      theCall.myOptComp ()->setCoinSelectedTrue ();
d405 5
a409 9
   if (not theValue)
      {
      myMsgFac () ("setBoolToInvalidSmsg", "cplexSelected", false);
      }

   if (not cplexEmbedded ())
      {
      myMsgFac () ("solverNotEmbeddedSmsg", "cplexSelected", "CPLEX");
      }
d417 1
a417 1
      theCall.myOptComp ()->setCplexSelectedTrue ();
@


1.102
log
@CPLEX
@
text
@d87 13
d120 13
a321 26
void WitRun::witGetSolverIsCoin (WitBoolean * solverIsCoin)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 solverIsCoin,
                           "solverIsCoin",
      theCall.myOptComp ()->solverIsCoin ());

   issueGetAttrMsg ("solverIsCoin");
   }

//------------------------------------------------------------------------------

void WitRun::witGetSolverIsCplex (WitBoolean * solverIsCplex)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 solverIsCplex,
                           "solverIsCplex",
      theCall.myOptComp ()->solverIsCplex ());

   issueGetAttrMsg ("solverIsCplex");
   }

//------------------------------------------------------------------------------

d376 25
d416 25
a671 50
void WitRun::witSetSolverIsCoin (WitBoolean theValue)
   {
   WitOptCompApiCall theCall (this);

   if (not theValue)
      {
      myMsgFac () ("setBoolToInvalidSmsg", "solverIsCoin", false);
      }

   if (not coinEmbedded ())
      {
      myMsgFac () ("solverNotEmbeddedSmsg", "solverIsCoin", "COIN");
      }

   theCall.prepBool (
      "solverIsCoin", 
      theCall.myOptComp ()->solverIsCoin (), 
      theValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setSolverIsCoinTrue ();
   }

//------------------------------------------------------------------------------

void WitRun::witSetSolverIsCplex (WitBoolean theValue)
   {
   WitOptCompApiCall theCall (this);

   if (not theValue)
      {
      myMsgFac () ("setBoolToInvalidSmsg", "solverIsCplex", false);
      }

   if (not cplexEmbedded ())
      {
      myMsgFac () ("solverNotEmbeddedSmsg", "solverIsCplex", "CPLEX");
      }

   theCall.prepBool (
      "solverIsCplex", 
      theCall.myOptComp ()->solverIsCplex (), 
      theValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setSolverIsCplexTrue ();
   }

//------------------------------------------------------------------------------

@


1.101
log
@CPLEX
@
text
@d82 1
a82 1
   apiGet (coinEmbedded, "coinEmbedded", COIN_EMBEDDED);
d631 1
a631 1
   if (not COIN_EMBEDDED)
@


1.100
log
@CPLEX
@
text
@d289 3
a291 3
   apiGet (       solverEmbedded,
                 "solverEmbedded",
      WitOptComp::solverEmbedded ());
@


1.99
log
@CPLEX
@
text
@d102 1
a102 1
   apiGet (cplexEmbedded, "cplexEmbedded", CPLEX_EMBEDDED);
d656 1
a656 1
   if (not CPLEX_EMBEDDED)
@


1.98
log
@CPLEX
@
text
@d289 3
a291 1
   apiGet (solverEmbedded, "solverEmbedded", WitOptComp::solverEmbedded ());
d300 3
a302 1
   apiGet (solverIsCoin, "solverIsCoin", theCall.myOptComp ()->solverIsCoin ());
d309 13
d642 26
a667 1
      theCall.myOptComp ()->setSolverIsCoin (asaBool (theValue));
@


1.97
log
@CPLEX
@
text
@d82 1
a82 1
   apiGet (coinEmbedded, "coinEmbedded", WitOptComp::coinEmbedded ());
d102 1
a102 1
   apiGet (cplexEmbedded, "cplexEmbedded", WitOptComp::cplexEmbedded ());
d614 1
a614 1
   if (not WitOptComp::coinEmbedded ())
@


1.96
log
@Preparing for embedded CPLEX.
@
text
@d98 9
@


1.95
log
@Preparing for embedded CPLEX.
@
text
@d82 1
a82 1
   apiGet (coinEmbedded, "coinEmbedded", COIN_EMBEDDED);
d605 1
a605 1
   if (not COIN_EMBEDDED)
@


1.94
log
@Preparing for CPLEX.
@
text
@d280 1
a280 1
   apiGet (solverEmbedded, "solverEmbedded", SOLVER_EMBEDDED);
@


1.93
log
@Revising the build procedure.
@
text
@d285 11
d596 25
@


1.92
log
@Revising the build procedure.
@
text
@d276 9
@


1.91
log
@Revising the build procedure.
@
text
@d78 1
a78 1
void WitRun::witGetCoinEmdedded (WitBoolean * coinEmdedded)
d82 1
a82 1
   apiGet (coinEmdedded, "coinEmdedded", COIN_EMBEDDED);
@


1.90
log
@Revising the build process.
@
text
@d78 9
a299 9
void WitRun::witGetWitEmbedsCoin (WitBoolean * witEmbedsCoin)
   {
   WitOptCompApiCall theCall (this);

   apiGet (witEmbedsCoin, "witEmbedsCoin", WIT_EMBEDS_COIN);
   }

//------------------------------------------------------------------------------

@


1.89
log
@Added a message to an API function.
@
text
@a254 9
void WitRun::witGetOptImpAllowed (WitBoolean * optImpAllowed)
   {
   WitOptCompApiCall theCall (this);

   apiGet (optImpAllowed, "optImpAllowed", WitOptComp::optImpAllowed ());
   }

//------------------------------------------------------------------------------

d291 9
@


1.88
log
@Multi-Obj Mode
@
text
@d480 2
d503 8
@


1.87
log
@Multi-Obj Mode
@
text
@d239 1
a239 1
void WitRun::witGetObjectiveSeqNo (int * objectiveSeqNo)
d243 1
a243 1
   theCall.reqMultiObjMode ("objectiveSeqNo");
d246 3
a248 3
                                   objectiveSeqNo,
                                  "objectiveSeqNo",
      theCall.currentObjective ()->objectiveSeqNo ());
d250 1
a250 1
   issueGetAttrMsg ("objectiveSeqNo", objectiveSeqNo);
d513 1
a513 1
void WitRun::witSetObjectiveSeqNo (int objectiveSeqNo)
d517 1
a517 1
   theCall.reqMultiObjMode ("objectiveSeqNo");
d520 3
a522 3
                                  "objectiveSeqNo",
      theCall.currentObjective ()->objectiveSeqNo (),
                                   objectiveSeqNo,
d527 1
a527 1
      theCall.currentObjective ()->setObjectiveSeqNo (objectiveSeqNo);
@


1.86
log
@Multi-Obj Mode
@
text
@a386 2
   myMsgFac () ("multiObjModeNYSWmsg");

@


1.85
log
@Multi-objective mode
@
text
@d93 1
a93 2
   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "currentObjective");
d144 16
d202 1
a202 2
   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("funcNeedsMultiObjModeSmsg", "witGetObjectiveList");
d225 1
a225 2
   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "objectiveListSpec");
d243 1
a243 2
   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "objectiveSeqNo");
d350 1
a350 2
   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "currentObjective");
d402 19
d446 1
a446 2
   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "objectiveList");
d483 1
a483 3
   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "objectiveListSpec");

d519 1
a519 2
   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "objectiveSeqNo");
@


1.84
log
@Multi-objective mode
@
text
@d376 1
a376 2
   if (not myOptComp ()->allowMultiObj ())
      myMsgFac () ("multiObjNyaSmsg");
@


1.83
log
@Multi-objective mode
@
text
@d99 1
a99 1
      theCall.currentObjective ()->objectiveName ());
d200 1
a200 1
      (* objectiveList)[theIdx] = theObj->objectiveName ().apiDupCstring ();
d343 1
a343 1
      theCall.currentObjective ()->objectiveName (), 
a435 3
      if (WitObjective::allDigits (theObjNames[theIdx]))
         myMsgFac () ("allDigitsObjNameSmsg", theObjNames[theIdx]);

a471 3
      if (WitObjective::allDigits (theObjName))
         myMsgFac () ("allDigitsObjNameSmsg", theObjName);

@


1.82
log
@Multi-objective mode
@
text
@a144 17
void WitRun::witGetNObjectives (int * nObjectives)
   {
   WitOptCompApiCall theCall (this);

   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "nObjectives");

   apiGet (
                                nObjectives,
                               "nObjectives",
      theCall.myMultiObjMgr ()->nObjectives ());

   issueGetAttrMsg ("nObjectives", nObjectives);
   }

//------------------------------------------------------------------------------

d190 1
a190 1
   * lenList = theCall.myMultiObjMgr ()->nObjectives ();
a225 17
void WitRun::witGetObjectiveName (char * * objectiveName)
   {
   WitOptCompApiCall theCall (this);

   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "objectiveName");

   apiGet (
                                   objectiveName,
                                  "objectiveName",
      theCall.currentObjective ()->objectiveName ());

   issueGetAttrMsg ("objectiveName");
   }

//------------------------------------------------------------------------------

a391 20
void WitRun::witSetNObjectives (int nObjectives)
   {
   WitOptCompApiCall theCall (this);

   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "nObjectives");

   theCall.reqNoPartsOrOpns ("nObjectives");

   theCall.prepImmPosInt (
                               "nObjectives",
      theCall.myMultiObjMgr ()->nObjectives (),
                                nObjectives);

   if (theCall.argsOK ())
      theCall.myMultiObjMgr ()->setNObjectives (nObjectives);
   }

//------------------------------------------------------------------------------

a494 30
void WitRun::witSetObjectiveName (const char * objectiveName)
   {
   WitOptCompApiCall theCall (this);
   WitObjective *    theObj;

   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("globNeedsMultiObjModeSmsg", "objectiveName");

   if (WitObjective::allDigits (objectiveName))
      myMsgFac () ("allDigitsObjNameSmsg", objectiveName);

   if (WitObjective::containsVBar (objectiveName))
      myMsgFac () ("vbarInObjNameSmsg", objectiveName);

   theObj = theCall.myMultiObjMgr ()->findObjective (objectiveName);

   if (theObj != NULL)
      myMsgFac () ("oldDupObjNameSmsg", objectiveName);

   theCall.prepString (
                                  "objectiveName", 
      theCall.currentObjective ()->objectiveName (), 
                                   objectiveName);

   if (theCall.argsOK ())
      theCall.currentObjective ()->setObjectiveName (objectiveName);
   }

//------------------------------------------------------------------------------

d507 1
a507 1
      theCall.myMultiObjMgr ()->nObjectives ());
@


1.81
log
@Multi-objective mode.
@
text
@d226 1
d231 2
d234 3
a236 3
                                objectiveListSpec,
                               "objectiveListSpec",
      theCall.myMultiObjMgr ()->objectiveListSpec ());
@


1.80
log
@Multi-objective mode
@
text
@d223 17
d464 3
a466 5
   WitOptCompApiCall theCall (this);
   int               theIdx;
   const char *      theObjName;
   WitString         theObjNameStr;
   int               priorIdx;
d478 4
d484 2
a485 1
      theObjName = objectiveList[theIdx];
d487 38
a524 2
      if (theObjName == NULL)
         myMsgFac () ("nullVecElemSmsg", "objectiveList", theIdx);
d529 6
a534 2
      if (WitObjective::containsVBar (theObjName))
         myMsgFac () ("vbarInObjNameSmsg", theObjName);
d536 1
a536 1
      theObjNameStr = theObjName;
d538 3
a540 5
      for (priorIdx = 0; priorIdx < theIdx; priorIdx ++)
         {
         if (theObjNameStr == objectiveList[priorIdx])
            myMsgFac () ("dupObjNameSmsg", theObjNameStr);
         }
a541 2

   theCall.myMultiObjMgr ()->setObjectiveList (lenList, objectiveList);
d658 53
@


1.79
log
@Multi-Objective Mode
@
text
@d196 27
a256 27
void WitRun::witGetObjectives (
      int  *     lenList,
      char * * * objectiveList)
   {
   WitOptCompApiCall theCall (this);
   int               theIdx;
   WitObjective *    theObj;

   if (not theCall.myOptComp ()->multiObjMode ())
      myMsgFac () ("funcNeedsMultiObjModeSmsg", "witGetObjectives");

   * lenList = theCall.myMultiObjMgr ()->nObjectives ();

   apiAlloc (objectiveList, * lenList);

   theIdx = -1;

   forEachEl (theObj, theCall.myMultiObjMgr ()->myObjectives ())
      {
      theIdx ++;

      (* objectiveList)[theIdx] = theObj->objectiveName ().apiDupCstring ();
      }
   }

//------------------------------------------------------------------------------

d443 47
d498 5
a502 2
   if (not WitObjective::validObjName (objectiveName))
      myMsgFac () ("invObjNameSmsg", objectiveName);
d507 1
a507 1
      myMsgFac () ("dupObjNameSmsg", objectiveName);
@


1.78
log
@Multi-Objective Mode.
@
text
@d245 3
a247 1
   for (theIdx = 0; theIdx < (* lenList); theIdx ++)
d249 1
a249 1
      theObj = theCall.myMultiObjMgr ()->myObjectives ()[theIdx];
@


1.77
log
@Multi-Objective Mode.
@
text
@a92 2
   WitObjective * curObj;

d96 4
a99 3
   curObj = theCall.myMultiObjMgr ()->currentObjective ();

   apiGet (theObjName, "currentObjective", curObj->objectiveName ());
a199 2
   WitObjective * curObj;

d203 4
a206 1
   curObj = theCall.myMultiObjMgr ()->currentObjective ();
d208 4
a211 1
   apiGet (objectiveName, "objectiveName", curObj->objectiveName ());
d213 13
a225 1
   issueGetAttrMsg ("objectiveName");
a347 1
   WitObjective *    curObj;
a352 2
   curObj = theCall.myMultiObjMgr ()->currentObjective ();

d355 1
a355 1
      curObj->objectiveName (), 
d414 3
a416 3
                                "nObjectives",
       theCall.myMultiObjMgr ()->nObjectives (),
                                 nObjectives);
a444 1
   WitObjective *    curObj;
d457 17
a473 1
   curObj = theCall.myMultiObjMgr ()->currentObjective ();
d475 6
a480 4
   theCall.prepString (
      "objectiveName", 
      curObj->objectiveName (), 
      objectiveName);
d483 1
a483 1
      curObj->setObjectiveName (objectiveName);
@


1.76
log
@Multi-Objective Mode
@
text
@d230 1
a230 3
   theIdx = -1;

   forEachEl (theObj, theCall.myMultiObjMgr ()->myObjectives ())
d232 1
a232 1
      theIdx ++;
@


1.75
log
@Multi-Objective Mode.
@
text
@d434 1
a435 1
   WitObjective *    theObj;
d440 8
a454 5
   theObj = theCall.myMultiObjMgr ()->findObjective (objectiveName);

   if (theObj != NULL)
      myMsgFac () ("dupObjNameSmsg", objectiveName);

@


1.74
log
@Multi-objective mode.
@
text
@d221 1
d230 3
a232 1
   for (theIdx = 0; theIdx < * lenList; theIdx ++)
d234 3
a236 6
      (* objectiveList)[theIdx] = 
         theCall.
            myMultiObjMgr ()->
               myObjectives ()[theIdx]->
                  objectiveName ().
                     apiDupCstring ();
@


1.73
log
@Multi-objective mode.
@
text
@d335 2
a336 3

   WitObjective * curObj;
   WitObjective * theObj;
d431 27
@


1.72
log
@Multi-objective mode.
@
text
@d197 18
@


1.71
log
@Multi-objective mode.
@
text
@d98 1
a98 1
   curObj = theCall.myOptComp ()->myMultiObjMgr ()->currentObjective ();
d154 3
a156 3
                                              nObjectives,
                                             "nObjectives",
      theCall.myOptComp ()->myMultiObjMgr ()->nObjectives ());
d207 1
a207 1
   * lenList = theCall.myOptComp ()->myMultiObjMgr ()->nObjectives ();
d215 4
a218 5
            myOptComp ()->
               myMultiObjMgr ()->
                  myObjectives ()[theIdx]->
                     objectiveName ().
                        apiDupCstring ();
d324 1
a324 1
   curObj = theCall.myOptComp ()->myMultiObjMgr ()->currentObjective ();
d331 1
a331 1
   theObj = theCall.myOptComp ()->myMultiObjMgr ()->findObjective (theObjName);
d337 1
a337 1
      theCall.myOptComp ()->myMultiObjMgr ()->setCurrentObjective (theObj);
d387 3
a389 3
                                              "nObjectives",
       theCall.myOptComp ()->myMultiObjMgr ()->nObjectives (),
                                               nObjectives);
d392 1
a392 1
      theCall.myOptComp ()->myMultiObjMgr ()->setNObjectives (nObjectives);
@


1.70
log
@Multi-obj mode.
@
text
@d319 2
a320 4
   WitObjective *              curObj;
   bool                        matchFound;
   WitPtrVecItr <WitObjective> theItr;
   WitObjective *              theObj;
d332 1
a332 1
   theCall.myOptComp ()->myMultiObjMgr ()->myObjectives ().attachItr (theItr);
d334 1
a334 13
   matchFound = false;

   while (theItr.advance (theObj))
      {
      if (theObj->objectiveName () == theObjName)
         {
         matchFound = true;
         
         break;
         }
      }

   if (not matchFound)
@


1.69
log
@Multi-obj mode.
@
text
@d197 28
@


1.68
log
@Multi-objective mode.
@
text
@d23 1
d89 18
a195 2
// witGetOptImpAllowed ()
//------------------------------------------------------------------------------
d218 1
a218 1
void WitRun::witGetSolverLogFileName (char ** solverLogFileName)
d287 42
@


1.67
log
@Multi-objective mode.
@
text
@d312 2
@


1.66
log
@Removing objective #2.
@
text
@d22 1
d127 17
d290 1
a290 1
      myMsgFac () ("multiObjNyiSmsg");
d305 18
@


1.65
log
@Removing objective #2.
@
text
@d126 1
a126 1
void WitRun::witGetObjChoice (int * objChoiceArg)
d130 3
a132 1
   apiGet (objChoiceArg, "choice", objChoice ()->index ());
d134 1
a134 1
   issueGetAttrMsg ("objChoice", objChoiceArg);
d287 1
a287 1
void WitRun::witSetObjChoice (int choice)
d293 2
a294 2
      theCall.myOptComp ()->objChoice ()->index (),
      choice,
d299 1
a299 1
      theCall.myOptComp ()->setObjChoice (choice);
@


1.64
log
@Removing objective #2.
@
text
@a180 13
void WitRun::witGetPeriodsPerYear (const WitOSRealArg & periodsPerYear)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 periodsPerYear, 
                           "periodsPerYear",
      theCall.myOptComp ()->periodsPerYear ());

   issueGetAttrMsg ("periodsPerYear", periodsPerYear);
   }

//------------------------------------------------------------------------------

a335 15
void WitRun::witSetPeriodsPerYear (const WitISRealArg & theVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepPosDouble (
      "periodsPerYear", 
      theCall.myOptComp ()->periodsPerYear (), 
      theVal);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setPeriodsPerYear (theVal);
   }

//------------------------------------------------------------------------------

@


1.63
log
@Multi-obj mode.
@
text
@a75 11
void WitRun::witGetCapCost (const WitOSRealArg & capCost)
   {
   WitOptCompApiCall theCall (this);

   apiGet (capCost, "capCost", theCall.myOptComp ()->capCost ());

   issueGetAttrMsg ("capCost", capCost);
   }

//------------------------------------------------------------------------------

a99 11
void WitRun::witGetInvCost (const WitOSRealArg & invCost)
   {
   WitOptCompApiCall theCall (this);

   apiGet (invCost, "invCost", theCall.myOptComp ()->invCost ());

   issueGetAttrMsg ("invCost", invCost);
   }

//------------------------------------------------------------------------------

a125 44
void WitRun::witGetObj2Winv (const WitOSRealArg & obj2Winv)
   {
   WitOptCompApiCall theCall (this);

   apiGet (obj2Winv, "obj2Winv", theCall.myOptComp ()->obj2Winv ());

   issueGetAttrMsg ("obj2Winv", obj2Winv);
   }

//------------------------------------------------------------------------------

void WitRun::witGetObj2Wrev (const WitOSRealArg & obj2Wrev)
   {
   WitOptCompApiCall theCall (this);

   apiGet (obj2Wrev, "obj2Wrev", theCall.myOptComp ()->obj2Wrev ());

   issueGetAttrMsg ("obj2Wrev", obj2Wrev);
   }

//------------------------------------------------------------------------------

void WitRun::witGetObj2Wserv (const WitOSRealArg & obj2Wserv)
   {
   WitOptCompApiCall theCall (this);

   apiGet (obj2Wserv, "obj2Wserv", theCall.myOptComp ()->obj2Wserv ());

   issueGetAttrMsg ("obj2Wserv", obj2Wserv);
   }

//------------------------------------------------------------------------------

void WitRun::witGetObj2Wsub (const WitOSRealArg & obj2Wsub)
   {
   WitOptCompApiCall theCall (this);

   apiGet (obj2Wsub, "obj2Wsub", theCall.myOptComp ()->obj2Wsub ());

   issueGetAttrMsg ("obj2Wsub", obj2Wsub);
   }

//------------------------------------------------------------------------------

a156 27

void WitRun::witGetObj2Values (
      const WitOSRealArg &  revValue,
      const WitOSRealArg &  invValue,
      const WitOSRealArg & servValue,
      const WitOSRealArg &  subValue)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                                revValue,
                                          "revValue",  
      theCall.myOptComp ()->myObjFunc2 ()->revValue  ());

   apiGet (                                invValue,
                                          "invValue",
      theCall.myOptComp ()->myObjFunc2 ()->invValue  ());

   apiGet (                                servValue, 
                                          "servValue", 
      theCall.myOptComp ()->myObjFunc2 ()->servValue ());

   apiGet (                                subValue,  
                                          "subValue",
      theCall.myOptComp ()->myObjFunc2 ()->subValue  ());
   }

//------------------------------------------------------------------------------
a247 15
void WitRun::witSetCapCost (const WitISRealArg & theVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepNonNegDouble (
      "capCost", 
      theCall.myOptComp ()->capCost (), 
      theVal);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setCapCost (theVal);
   }

//------------------------------------------------------------------------------

a262 15
void WitRun::witSetInvCost (const WitISRealArg & theVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepNonNegDouble (
      "invCost", 
      theCall.myOptComp ()->invCost (), 
      theVal);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setInvCost (theVal);
   }

//------------------------------------------------------------------------------

a297 60
void WitRun::witSetObj2Winv (const WitISRealArg & theVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepNonNegDouble (
      "obj2Winv", 
      theCall.myOptComp ()->obj2Winv (), 
      theVal);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setObj2Winv (theVal);
   }

//------------------------------------------------------------------------------

void WitRun::witSetObj2Wrev (const WitISRealArg & theVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepNonNegDouble (
      "obj2Wrev", 
      theCall.myOptComp ()->obj2Wrev (), 
      theVal);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setObj2Wrev (theVal);
   }

//------------------------------------------------------------------------------

void WitRun::witSetObj2Wserv (const WitISRealArg & theVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepNonNegDouble (
      "obj2Wserv", 
      theCall.myOptComp ()->obj2Wserv (), 
      theVal);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setObj2Wserv (theVal);
   }

//------------------------------------------------------------------------------

void WitRun::witSetObj2Wsub (const WitISRealArg & theVal)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepNonNegDouble (
      "obj2Wsub", 
      theCall.myOptComp ()->obj2Wsub (), 
      theVal);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setObj2Wsub (theVal);
   }

//------------------------------------------------------------------------------

d307 1
a307 1
      theCall.myOptComp ()->allObjFuncs ().nElements () - 1);
@


1.62
log
@Changed some output text.
@
text
@d135 13
d401 20
@


1.61
log
@Added witGetObjectValue and witGetBoundsValue.
Moved witGetObjectValues to the undocumented section.
@
text
@d282 1
a282 1
   issueGetAttrMsg ("coinMessageFileName");
@


1.60
log
@Stochastic Implosion
@
text
@d67 9
d190 9
@


1.59
log
@Stochastic Implosion
@
text
@a186 3
   theCall.prepGetStochSolnAttr ("objValue");
   theCall.prepGetStochSolnAttr ("boundsValue");

@


1.58
log
@Stochastic Implosion
@
text
@d187 3
@


1.57
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <OptImp.h>
d58 3
a60 3
   apiGet (             accelerated,
                       "accelerated",
      myOptImploder ()->accelerated ());
d93 3
a95 3
   apiGet (             extOptActive,
                       "extOptActive",
      myOptImploder ()->extOptActive ());
d473 2
a474 2
   if (myOptImploder ()->accelerated ())
      myOptImploder ()->shutDown ();
@


1.56
log
@Fixed a bug in external opt implosion for non-development builds.
@
text
@d183 1
a183 1
      const WitOSRealArg & boundsObjValue)
d187 2
a188 2
   apiGet (objValue,       "objValue",       objChoice ()->objValue    ());
   apiGet (boundsObjValue, "boundsObjValue", objChoice ()->boundsValue ());
@


1.55
log
@External opt implosion.
@
text
@a92 3
   if (not DEVELOPMENT)
      myMsgFac () ("attNotAvailSmsg", "global", "extOptActive");

@


1.54
log
@External opt implosion.
@
text
@a66 13
void WitRun::witGetAllowIntCons (WitBoolean * allowIntCons)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 allowIntCons,
                           "allowIntCons",
      theCall.myOptComp ()->allowIntCons ());

   issueGetAttrMsg ("allowIntCons");
   }

//------------------------------------------------------------------------------

d116 13
a312 15
void WitRun::witSetAllowIntCons (WitBoolean newValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepBool (
      "allowIntCons", 
      theCall.myOptComp ()->allowIntCons (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setAllowIntCons (asaBool (newValue));
   }

//------------------------------------------------------------------------------

d358 15
@


1.53
log
@External opt implosion.
@
text
@d67 1
a67 1
void WitRun::witGetCapCost (const WitOSRealArg & capCost)
d71 3
a73 1
   apiGet (capCost, "capCost", theCall.myOptComp ()->capCost ());
d75 1
a75 1
   issueGetAttrMsg ("capCost", capCost);
d80 1
a80 1
void WitRun::witGetCompPrices (WitBoolean * compPrices)
d84 1
a84 1
   apiGet (compPrices, "compPrices", theCall.myOptComp ()->compPrices ());
d86 1
a86 1
   issueGetAttrMsg ("compPrices");
d91 1
a91 1
void WitRun::witGetEnforceIntCons (WitBoolean * enforceIntCons)
d95 1
a95 3
   apiGet (                 enforceIntCons,
                           "enforceIntCons",
      theCall.myOptComp ()->enforceIntCons ());
d97 1
a97 1
   issueGetAttrMsg ("enforceIntCons");
d313 15
a357 15
void WitRun::witSetEnforceIntCons (WitBoolean newValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepBool (
      "enforceIntCons", 
      theCall.myOptComp ()->enforceIntCons (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setEnforceIntCons (asaBool (newValue));
   }

//------------------------------------------------------------------------------

@


1.52
log
@External opt implosion.
@
text
@d89 13
d343 15
@


1.51
log
@External opt implosion.
@
text
@d209 11
a420 9
// witGetOptImpAllowed ()
//------------------------------------------------------------------------------

void WitRun::witGetOptImpAllowed (WitBoolean * optImpAllowed)
   {
   apiGet (optImpAllowed, "optImpAllowed", WitOptComp::optImpAllowed ());
   }

//------------------------------------------------------------------------------
@


1.50
log
@Assisted opt implosion.
@
text
@d67 1
a67 1
void WitRun::witGetAsstOptActive (WitBoolean * asstOptActive)
d71 1
a71 2
   if (not DEVELOPMENT)
      myMsgFac () ("attNotAvailSmsg", "global", "asstOptActive");
d73 1
a73 5
   apiGet (             asstOptActive,
                       "asstOptActive",
      myOptImploder ()->asstOptActive ());

   issueGetAttrMsg ("asstOptActive");
d78 1
a78 1
void WitRun::witGetCapCost (const WitOSRealArg & capCost)
d82 1
a82 1
   apiGet (capCost, "capCost", theCall.myOptComp ()->capCost ());
d84 1
a84 1
   issueGetAttrMsg ("capCost", capCost);
d89 1
a89 1
void WitRun::witGetCompPrices (WitBoolean * compPrices)
d93 6
a98 1
   apiGet (compPrices, "compPrices", theCall.myOptComp ()->compPrices ());
d100 1
a100 1
   issueGetAttrMsg ("compPrices");
@


1.49
log
@Custom opt implosion.
@
text
@d67 1
a67 1
void WitRun::witGetCapCost (const WitOSRealArg & capCost)
d71 6
a76 1
   apiGet (capCost, "capCost", theCall.myOptComp ()->capCost ());
d78 1
a78 1
   issueGetAttrMsg ("capCost", capCost);
d83 1
a83 1
void WitRun::witGetCompPrices (WitBoolean * compPrices)
d87 1
a87 1
   apiGet (compPrices, "compPrices", theCall.myOptComp ()->compPrices ());
d89 1
a89 1
   issueGetAttrMsg ("compPrices");
d94 1
a94 1
void WitRun::witGetCustOptImpActive (WitBoolean * custOptImpActive)
d98 1
a98 2
   if (not DEVELOPMENT)
      myMsgFac () ("attNotAvailSmsg", "global", "custOptImpActive");
d100 1
a100 5
   apiGet (             custOptImpActive,
                       "custOptImpActive",
      myOptImploder ()->custActive ());

   issueGetAttrMsg ("custOptImpActive");
@


1.48
log
@App controlled opt implosion.
@
text
@d89 16
a209 16
void WitRun::witGetOptImpActive (WitBoolean * optImpActive)
   {
   WitOptCompApiCall theCall (this);

   if (not DEVELOPMENT)
      myMsgFac () ("attNotAvailSmsg", "global", "optImpActive");

   apiGet (             optImpActive,
                       "optImpActive",
      myOptImploder ()->active ());

   issueGetAttrMsg ("optImpActive");
   }

//------------------------------------------------------------------------------

@


1.47
log
@App controlled opt implosion.
@
text
@d410 9
@


1.46
log
@Heuristic search increment.
@
text
@a410 18
void WitRun::witSetOptImpActive (WitBoolean optImpActive)
   {
   WitOptCompApiCall theCall (this);

   if (not DEVELOPMENT)
      myMsgFac () ("attNotAvailSmsg", "global", "optImpActive");

   theCall.prepBool (
      "optImpActive", 
      myOptImploder ()->active (),
      optImpActive);

   if (theCall.argsOK ())
      myOptImploder ()->setActive (asaBool (optImpActive));
   }

//------------------------------------------------------------------------------

@


1.45
log
@Heuristic search increment.
@
text
@d199 1
a199 1
      myMsgFac () ("attNotAvailSmsg", "optImpActive");
d416 1
a416 1
      myMsgFac () ("attNotAvailSmsg", "optImpActive");
@


1.44
log
@App controlled opt implosion.
@
text
@d198 3
d416 1
a416 1
      myMsgFac () ("funcNotAvailSmsg", "witSetOptImpActive");
@


1.43
log
@App controlled opt implosion.
@
text
@d408 18
@


1.42
log
@App controlled opt implosion.
@
text
@a29 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a42 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a55 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a68 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a79 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a90 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a101 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a112 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a123 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a134 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a145 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a158 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a172 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a195 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a208 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a220 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a233 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a246 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a257 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a272 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a287 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a302 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a317 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a332 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a347 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a362 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a377 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a392 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a409 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a443 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a458 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

a473 4
   startInnerApiFunc (
      WitInitState  ::postInit,
      WitOptImpState::any);

@


1.41
log
@App controlled opt implosion.
@
text
@d30 4
d47 4
d64 4
d81 4
d96 4
d111 4
d126 4
d141 4
d156 4
d171 4
d186 4
d203 4
d221 4
d248 4
d265 4
d281 4
d298 4
d315 4
d330 4
d349 4
d368 4
d387 4
d406 4
d425 4
d444 4
d463 4
d482 4
d501 4
d522 4
d560 4
d579 4
d598 4
@


1.40
log
@Removed optimizing implosion with lot sizes.
@
text
@d194 13
@


1.39
log
@Removed the postSolveRecovery attribute.
@
text
@a205 13
void WitRun::witGetOptWithLotSizes (WitBoolean * optWithLotSizes)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 optWithLotSizes, 
                           "optWithLotSizes", 
      theCall.myOptComp ()->optWithLotSizes ());

   issueGetAttrMsg ("optWithLotSizes");
   }

//------------------------------------------------------------------------------

a428 15
void WitRun::witSetOptWithLotSizes (WitBoolean newValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepBool (
      "optWithLotSizes", 
      theCall.myOptComp ()->optWithLotSizes (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setOptWithLotSizes (asaBool (newValue));
   }

//------------------------------------------------------------------------------

@


1.38
log
@Updated the copyright date on all source files.
@
text
@a231 13
void WitRun::witGetPostSolveRecovery (WitBoolean * postSolveRecovery)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 postSolveRecovery, 
                           "postSolveRecovery", 
      theCall.myOptComp ()->postSolveRecovery ());

   issueGetAttrMsg ("postSolveRecovery");
   }

//------------------------------------------------------------------------------

a456 15
void WitRun::witSetPostSolveRecovery (WitBoolean newValue)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepBool (
      "postSolveRecovery", 
      theCall.myOptComp ()->postSolveRecovery (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setPostSolveRecovery (asaBool (newValue));
   }

//------------------------------------------------------------------------------

@


1.37
log
@Removed access to the oslMesgFileName attribute.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.36
log
@[multi-thread]:
   Moved PROLOG/EPILOG responsibility from the inner layer of the API
   to the outer layer.
@
text
@a218 13
void WitRun::witGetOslMesgFileName (char ** oslFileName)
   {
   WitOptCompApiCall theCall (this);

   apiGet (                 oslFileName, 
                           "oslFileName", 
      theCall.myOptComp ()->oslMesgFileName ());

   issueGetAttrMsg ("oslMessageFileName");
   }

//------------------------------------------------------------------------------

a484 15
void WitRun::witSetOslMesgFileName (const char * oslMesgFileName)
   {
   WitOptCompApiCall theCall (this);

   theCall.prepString (
      "oslMesgFileName", 
      theCall.myOptComp ()->oslMesgFileName (), 
      oslMesgFileName);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setOslMesgFileName (oslMesgFileName);
   }

//------------------------------------------------------------------------------

@


1.35
log
@[exceptions]
@
text
@a16 1
#include <ProEpilog.h>
d28 1
a28 1
WitReturnCode WitRun::witGetAccAfterOptImp (WitBoolean * accAfterOptImp)
a29 2
   PROLOG ("witGetAccAfterOptImp");

a36 2

   EPILOG;
d41 1
a41 1
WitReturnCode WitRun::witGetAccAfterSoftLB (WitBoolean * accAfterSoftLB)
a42 2
   PROLOG ("witGetAccAfterSoftLB");

a49 2

   EPILOG;
d54 1
a54 1
WitReturnCode WitRun::witGetAccelerated (WitBoolean * accelerated)
a55 2
   PROLOG ("witGetAccelerated");

a62 2

   EPILOG;
d67 1
a67 1
WitReturnCode WitRun::witGetCapCost (const WitOSRealArg & capCost)
a68 2
   PROLOG ("witGetCapCost");

a73 2

   EPILOG;
d78 1
a78 1
WitReturnCode WitRun::witGetCompPrices (WitBoolean * compPrices)
a79 2
   PROLOG ("witGetCompPrices");

a84 2

   EPILOG;
d89 1
a89 1
WitReturnCode WitRun::witGetInvCost (const WitOSRealArg & invCost)
a90 2
   PROLOG ("witGetInvCost");

a95 2

   EPILOG;
d100 1
a100 1
WitReturnCode WitRun::witGetObj2Winv (const WitOSRealArg & obj2Winv)
a101 2
   PROLOG ("witGetObj2Winv");

a106 2

   EPILOG;
d111 1
a111 1
WitReturnCode WitRun::witGetObj2Wrev (const WitOSRealArg & obj2Wrev)
a112 2
   PROLOG ("witGetObj2Wrev");

a117 2

   EPILOG;
d122 1
a122 1
WitReturnCode WitRun::witGetObj2Wserv (const WitOSRealArg & obj2Wserv)
a123 2
   PROLOG ("witGetObj2Wserv");

a128 2

   EPILOG;
d133 1
a133 1
WitReturnCode WitRun::witGetObj2Wsub (const WitOSRealArg & obj2Wsub)
a134 2
   PROLOG ("witGetObj2Wsub");

a139 2

   EPILOG;
d144 1
a144 1
WitReturnCode WitRun::witGetObjChoice (int * objChoiceArg)
a145 2
   PROLOG ("witGetObjChoice");

a150 2

   EPILOG;
d155 1
a155 1
WitReturnCode WitRun::witGetObjValues (
a158 2
   PROLOG ("witGetObjValues");

a162 2

   EPILOG;
d167 1
a167 1
WitReturnCode WitRun::witGetObj2Values (
a172 2
   PROLOG ("witGetObj2Values");

a189 2

   EPILOG;
d194 1
a194 1
WitReturnCode WitRun::witGetOptInitMethod (WitAttr * optInitMethod)
a195 2
   PROLOG ("witGetOptInitMethod");

a201 2

   EPILOG;
d206 1
a206 1
WitReturnCode WitRun::witGetOptWithLotSizes (WitBoolean * optWithLotSizes)
a207 2
   PROLOG ("witGetOptWithLotSizes");

a214 2

   EPILOG;
d219 1
a219 1
WitReturnCode WitRun::witGetOslMesgFileName (char ** oslFileName)
a220 2
   PROLOG ("witGetOslMesgFileName");

a227 2

   EPILOG;
d232 1
a232 1
WitReturnCode WitRun::witGetPeriodsPerYear (const WitOSRealArg & periodsPerYear)
a233 2
   PROLOG ("witGetPeriodsPerYear");

a240 2

   EPILOG;
d245 1
a245 1
WitReturnCode WitRun::witGetPostSolveRecovery (WitBoolean * postSolveRecovery)
a246 2
   PROLOG ("witGetPostSolveRecovery");

a253 2

   EPILOG;
d258 1
a258 1
WitReturnCode WitRun::witGetSolverLogFileName (char ** solverLogFileName)
a259 2
   PROLOG ("witGetSolverLogFileName");

a266 2

   EPILOG;
d271 1
a271 1
WitReturnCode WitRun::witGetWbounds (const WitOSRealArg & wbounds)
a272 2
   PROLOG ("witGetWbounds");

a277 2

   EPILOG;
d282 1
a282 1
WitReturnCode WitRun::witSetAccAfterOptImp (WitBoolean newValue)
a283 2
   PROLOG ("witSetAccAfterOptImp");

a292 2

   EPILOG;
d297 1
a297 1
WitReturnCode WitRun::witSetAccAfterSoftLB (WitBoolean newValue)
a298 2
   PROLOG ("witSetAccAfterSoftLB");

a307 2

   EPILOG;
d312 1
a312 1
WitReturnCode WitRun::witSetCapCost (const WitISRealArg & theVal)
a313 2
   PROLOG ("witSetCapCost");

a322 2

   EPILOG;
d327 1
a327 1
WitReturnCode WitRun::witSetCompPrices (WitBoolean newValue)
a328 2
   PROLOG ("witSetCompPrices");

a337 2

   EPILOG;
d342 1
a342 1
WitReturnCode WitRun::witSetInvCost (const WitISRealArg & theVal)
a343 2
   PROLOG ("witSetInvCost");

a352 2

   EPILOG;
d357 1
a357 1
WitReturnCode WitRun::witSetObj2Winv (const WitISRealArg & theVal)
a358 2
   PROLOG ("witSetObj2Winv");

a367 2

   EPILOG;
d372 1
a372 1
WitReturnCode WitRun::witSetObj2Wrev (const WitISRealArg & theVal)
a373 2
   PROLOG ("witSetObj2Wrev");

a382 2

   EPILOG;
d387 1
a387 1
WitReturnCode WitRun::witSetObj2Wserv (const WitISRealArg & theVal)
a388 2
   PROLOG ("witSetObj2Wserv");

a397 2

   EPILOG;
d402 1
a402 1
WitReturnCode WitRun::witSetObj2Wsub (const WitISRealArg & theVal)
a403 2
   PROLOG ("witSetObj2Wsub");

a412 2

   EPILOG;
d417 1
a417 1
WitReturnCode WitRun::witSetObjChoice (int choice)
a418 2
   PROLOG ("witSetObjChoice");

a429 2

   EPILOG;
d434 1
a434 1
WitReturnCode WitRun::witSetOptInitMethod (WitAttr optInitMethod)
a435 2
   PROLOG ("witSetOptInitMethod");

a463 2

   EPILOG;
d468 1
a468 1
WitReturnCode WitRun::witSetOptWithLotSizes (WitBoolean newValue)
a469 2
   PROLOG ("witSetOptWithLotSizes");

a478 2

   EPILOG;
d483 1
a483 1
WitReturnCode WitRun::witSetPostSolveRecovery (WitBoolean newValue)
a484 2
   PROLOG ("witSetPostSolveRecovery");

a493 2

   EPILOG;
d498 1
a498 1
WitReturnCode WitRun::witSetOslMesgFileName (const char * oslMesgFileName)
a499 2
   PROLOG ("witSetOslMesgFileName");

a508 2

   EPILOG;
d513 1
a513 1
WitReturnCode WitRun::witSetPeriodsPerYear (const WitISRealArg & theVal)
a514 2
   PROLOG ("witSetPeriodsPerYear");

a523 2

   EPILOG;
d528 1
a528 1
WitReturnCode WitRun::witSetSolverLogFileName (const char * solverLogFileName)
a529 2
   PROLOG ("witSetSolverLogFileName");

a538 2

   EPILOG;
d543 1
a543 1
WitReturnCode WitRun::witSetWbounds (const WitISRealArg & theVal)
a544 2
   PROLOG ("witSetWbounds");

a553 2

   EPILOG;
@


1.34
log
@Made opt implosion use COIN unconditionally when COIN_BUILD is defined.
@
text
@d17 1
@


1.33
log
@Modified the behavior of setting optInitMethod:
   Setting it to "accelerated" is now a severe error.
   Setting it takes WIT out of an accelerated state.
@
text
@a329 17
WitReturnCode WitRun::witGetSolverIsCoin (WitBoolean * solverIsCoin)
   {
   PROLOG ("witGetSolverIsCoin");

   WitOptCompApiCall theCall (this);

   apiGet (                 solverIsCoin, 
                           "solverIsCoin", 
      theCall.myOptComp ()->solverIsCoin ());

   issueGetAttrMsg ("solverIsCoin");

   EPILOG;
   }

//------------------------------------------------------------------------------

a667 19
WitReturnCode WitRun::witSetSolverIsCoin (WitBoolean newValue)
   {
   PROLOG ("witSetSolverIsCoin");

   WitOptCompApiCall theCall (this);

   theCall.prepBool (
      "solverIsCoin", 
      theCall.myOptComp ()->solverIsCoin (), 
      newValue);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setSolverIsCoin (asaBool (newValue));

   EPILOG;
   }

//------------------------------------------------------------------------------

@


1.32
log
@Allowed obj1 attributes to be set and retrieved when objChoice != 1.
Allowed objChoice to be set when parts or operations exist.
@
text
@d591 10
a600 8
   if (theOptStarter->accConflict ())
      myMsgFac () ("accInitWhenUnaccWmsg");
   else
      {
      myMsgFac () ("setWitAttrAttrMsg",
         "optInitMethod",
         theCall.myOptComp ()->optInitMethod ()->myApiAttr (),
         optInitMethod);
d602 1
a602 2
      theOptStarter->beChosen ();
      }
@


1.31
log
@Vector PropRt.
@
text
@a555 2
   theCall.reqNoPartsOrOpns ("objChoice");

@


1.30
log
@Added "solverIsCoin" attribute.
@
text
@d22 2
a23 2
#include <InScalRA.h>
#include <OutScalRA.h>
d79 1
a79 1
WitReturnCode WitRun::witGetCapCost (const WitOutScalRA & capCost)
d109 1
a109 1
WitReturnCode WitRun::witGetInvCost (const WitOutScalRA & invCost)
d124 1
a124 1
WitReturnCode WitRun::witGetObj2Winv (const WitOutScalRA & obj2Winv)
d139 1
a139 1
WitReturnCode WitRun::witGetObj2Wrev (const WitOutScalRA & obj2Wrev)
d154 1
a154 1
WitReturnCode WitRun::witGetObj2Wserv (const WitOutScalRA & obj2Wserv)
d169 1
a169 1
WitReturnCode WitRun::witGetObj2Wsub (const WitOutScalRA & obj2Wsub)
d200 2
a201 2
      const WitOutScalRA & objValue,
      const WitOutScalRA & boundsObjValue)
d216 4
a219 4
      const WitOutScalRA &  revValue,
      const WitOutScalRA &  invValue,
      const WitOutScalRA & servValue,
      const WitOutScalRA &  subValue)
d296 1
a296 1
WitReturnCode WitRun::witGetPeriodsPerYear (const WitOutScalRA & periodsPerYear)
d364 1
a364 1
WitReturnCode WitRun::witGetWbounds (const WitOutScalRA & wbounds)
d417 1
a417 1
WitReturnCode WitRun::witSetCapCost (const WitInScalRA & theVal)
d455 1
a455 1
WitReturnCode WitRun::witSetInvCost (const WitInScalRA & theVal)
d474 1
a474 1
WitReturnCode WitRun::witSetObj2Winv (const WitInScalRA & theVal)
d493 1
a493 1
WitReturnCode WitRun::witSetObj2Wrev (const WitInScalRA & theVal)
d512 1
a512 1
WitReturnCode WitRun::witSetObj2Wserv (const WitInScalRA & theVal)
d531 1
a531 1
WitReturnCode WitRun::witSetObj2Wsub (const WitInScalRA & theVal)
d667 1
a667 1
WitReturnCode WitRun::witSetPeriodsPerYear (const WitInScalRA & theVal)
d724 1
a724 1
WitReturnCode WitRun::witSetWbounds (const WitInScalRA & theVal)
@


1.29
log
@Double Precision.
@
text
@d330 17
d680 19
@


1.28
log
@Double Precision.
@
text
@d79 1
a79 1
WitReturnCode WitRun::witGetCapCost (WitOutScalRA capCost)
d109 1
a109 1
WitReturnCode WitRun::witGetInvCost (WitOutScalRA invCost)
d124 1
a124 1
WitReturnCode WitRun::witGetObj2Winv (WitOutScalRA obj2Winv)
d139 1
a139 1
WitReturnCode WitRun::witGetObj2Wrev (WitOutScalRA obj2Wrev)
d154 1
a154 1
WitReturnCode WitRun::witGetObj2Wserv (WitOutScalRA obj2Wserv)
d169 1
a169 1
WitReturnCode WitRun::witGetObj2Wsub (WitOutScalRA obj2Wsub)
d200 2
a201 2
      WitOutScalRA objValue,
      WitOutScalRA boundsObjValue)
d216 4
a219 4
      WitOutScalRA  revValue,
      WitOutScalRA  invValue,
      WitOutScalRA servValue,
      WitOutScalRA  subValue)
d296 1
a296 1
WitReturnCode WitRun::witGetPeriodsPerYear (WitOutScalRA periodsPerYear)
d347 1
a347 1
WitReturnCode WitRun::witGetWbounds (WitOutScalRA wbounds)
@


1.27
log
@Double Precision.
@
text
@d438 1
a438 1
WitReturnCode WitRun::witSetInvCost (WitInScalRA theVal)
d457 1
a457 1
WitReturnCode WitRun::witSetObj2Winv (WitInScalRA theVal)
d476 1
a476 1
WitReturnCode WitRun::witSetObj2Wrev (WitInScalRA theVal)
d495 1
a495 1
WitReturnCode WitRun::witSetObj2Wserv (WitInScalRA theVal)
d514 1
a514 1
WitReturnCode WitRun::witSetObj2Wsub (WitInScalRA theVal)
d650 1
a650 1
WitReturnCode WitRun::witSetPeriodsPerYear (WitInScalRA theVal)
d688 1
a688 1
WitReturnCode WitRun::witSetWbounds (WitInScalRA theVal)
@


1.26
log
@Double Precision.
@
text
@d374 1
a374 1
      theCall.myOptComp ()->setAccAfterOptImp (newValue);
d393 1
a393 1
      theCall.myOptComp ()->setAccAfterSoftLB (newValue);
d431 1
a431 1
      theCall.myOptComp ()->setCompPrices (newValue);
d605 1
a605 1
      theCall.myOptComp ()->setOptWithLotSizes (newValue);
d624 1
a624 1
      theCall.myOptComp ()->setPostSolveRecovery (newValue);
@


1.25
log
@Double Precision.
@
text
@d28 1
a28 1
WitReturnCode WitRun::witGetAccAfterOptImp (witBoolean * accAfterOptImp)
d45 1
a45 1
WitReturnCode WitRun::witGetAccAfterSoftLB (witBoolean * accAfterSoftLB)
d62 1
a62 1
WitReturnCode WitRun::witGetAccelerated (witBoolean * accelerated)
d94 1
a94 1
WitReturnCode WitRun::witGetCompPrices (witBoolean * compPrices)
d262 1
a262 1
WitReturnCode WitRun::witGetOptWithLotSizes (witBoolean * optWithLotSizes)
d313 1
a313 1
WitReturnCode WitRun::witGetPostSolveRecovery (witBoolean * postSolveRecovery)
d362 1
a362 1
WitReturnCode WitRun::witSetAccAfterOptImp (witBoolean newValue)
d381 1
a381 1
WitReturnCode WitRun::witSetAccAfterSoftLB (witBoolean newValue)
d419 1
a419 1
WitReturnCode WitRun::witSetCompPrices (witBoolean newValue)
d593 1
a593 1
WitReturnCode WitRun::witSetOptWithLotSizes (witBoolean newValue)
d612 1
a612 1
WitReturnCode WitRun::witSetPostSolveRecovery (witBoolean newValue)
@


1.24
log
@Double Precision.
@
text
@d400 1
a400 1
WitReturnCode WitRun::witSetCapCost (WitInScalRA theVal)
@


1.23
log
@Continued double precision.
@
text
@d79 1
a79 1
WitReturnCode WitRun::witGetCapCost (OutScalRA capCost)
d109 1
a109 1
WitReturnCode WitRun::witGetInvCost (OutScalRA invCost)
d124 1
a124 1
WitReturnCode WitRun::witGetObj2Winv (OutScalRA obj2Winv)
d139 1
a139 1
WitReturnCode WitRun::witGetObj2Wrev (OutScalRA obj2Wrev)
d154 1
a154 1
WitReturnCode WitRun::witGetObj2Wserv (OutScalRA obj2Wserv)
d169 1
a169 1
WitReturnCode WitRun::witGetObj2Wsub (OutScalRA obj2Wsub)
d200 2
a201 2
      OutScalRA objValue,
      OutScalRA boundsObjValue)
d216 4
a219 4
      OutScalRA  revValue,
      OutScalRA  invValue,
      OutScalRA servValue,
      OutScalRA  subValue)
d296 1
a296 1
WitReturnCode WitRun::witGetPeriodsPerYear (OutScalRA periodsPerYear)
d347 1
a347 1
WitReturnCode WitRun::witGetWbounds (OutScalRA wbounds)
d400 1
a400 1
WitReturnCode WitRun::witSetCapCost (InScalRA theVal)
d438 1
a438 1
WitReturnCode WitRun::witSetInvCost (InScalRA theVal)
d457 1
a457 1
WitReturnCode WitRun::witSetObj2Winv (InScalRA theVal)
d476 1
a476 1
WitReturnCode WitRun::witSetObj2Wrev (InScalRA theVal)
d495 1
a495 1
WitReturnCode WitRun::witSetObj2Wserv (InScalRA theVal)
d514 1
a514 1
WitReturnCode WitRun::witSetObj2Wsub (InScalRA theVal)
d650 1
a650 1
WitReturnCode WitRun::witSetPeriodsPerYear (InScalRA theVal)
d688 1
a688 1
WitReturnCode WitRun::witSetWbounds (InScalRA theVal)
@


1.22
log
@Continued double precision.
@
text
@d200 2
a201 2
      float * objValue,
      float * boundsObjValue)
d216 4
a219 4
      float *  revValue,
      float *  invValue,
      float * servValue,
      float *  subValue)
@


1.21
log
@Continued double precision.
@
text
@d22 2
a23 2
#include <RealSInArg.h>
#include <RealSOutArg.h>
d79 1
a79 1
WitReturnCode WitRun::witGetCapCost (RealSOutArg capCost)
d109 1
a109 1
WitReturnCode WitRun::witGetInvCost (RealSOutArg invCost)
d124 1
a124 1
WitReturnCode WitRun::witGetObj2Winv (RealSOutArg obj2Winv)
d139 1
a139 1
WitReturnCode WitRun::witGetObj2Wrev (RealSOutArg obj2Wrev)
d154 1
a154 1
WitReturnCode WitRun::witGetObj2Wserv (RealSOutArg obj2Wserv)
d169 1
a169 1
WitReturnCode WitRun::witGetObj2Wsub (RealSOutArg obj2Wsub)
d296 1
a296 1
WitReturnCode WitRun::witGetPeriodsPerYear (RealSOutArg periodsPerYear)
d347 1
a347 1
WitReturnCode WitRun::witGetWbounds (RealSOutArg wbounds)
d400 1
a400 1
WitReturnCode WitRun::witSetCapCost (RealSInArg theVal)
d438 1
a438 1
WitReturnCode WitRun::witSetInvCost (RealSInArg theVal)
d457 1
a457 1
WitReturnCode WitRun::witSetObj2Winv (RealSInArg theVal)
d476 1
a476 1
WitReturnCode WitRun::witSetObj2Wrev (RealSInArg theVal)
d495 1
a495 1
WitReturnCode WitRun::witSetObj2Wserv (RealSInArg theVal)
d514 1
a514 1
WitReturnCode WitRun::witSetObj2Wsub (RealSInArg theVal)
d650 1
a650 1
WitReturnCode WitRun::witSetPeriodsPerYear (RealSInArg theVal)
d688 1
a688 1
WitReturnCode WitRun::witSetWbounds (RealSInArg theVal)
@


1.20
log
@Continued double precision.
@
text
@d79 1
a79 1
WitReturnCode WitRun::witGetCapCost (float * capCost)
d109 1
a109 1
WitReturnCode WitRun::witGetInvCost (float * invCost)
d124 1
a124 1
WitReturnCode WitRun::witGetObj2Winv (float * obj2Winv)
d139 1
a139 1
WitReturnCode WitRun::witGetObj2Wrev (float * obj2Wrev)
d154 1
a154 1
WitReturnCode WitRun::witGetObj2Wserv (float * obj2Wserv)
d169 1
a169 1
WitReturnCode WitRun::witGetObj2Wsub (float * obj2Wsub)
d296 1
a296 1
WitReturnCode WitRun::witGetPeriodsPerYear (float * periodsPerYear)
d400 1
a400 1
WitReturnCode WitRun::witSetCapCost (float theVal)
d412 1
a412 1
      theCall.myOptComp ()->setCapCost (doubleFromFloat (theVal));
d438 1
a438 1
WitReturnCode WitRun::witSetInvCost (float theVal)
d450 1
a450 1
      theCall.myOptComp ()->setInvCost (doubleFromFloat (theVal));
d457 1
a457 1
WitReturnCode WitRun::witSetObj2Winv (float theVal)
d469 1
a469 1
      theCall.myOptComp ()->setObj2Winv (doubleFromFloat (theVal));
d476 1
a476 1
WitReturnCode WitRun::witSetObj2Wrev (float theVal)
d488 1
a488 1
      theCall.myOptComp ()->setObj2Wrev (doubleFromFloat (theVal));
d495 1
a495 1
WitReturnCode WitRun::witSetObj2Wserv (float theVal)
d507 1
a507 1
      theCall.myOptComp ()->setObj2Wserv (doubleFromFloat (theVal));
d514 1
a514 1
WitReturnCode WitRun::witSetObj2Wsub (float theVal)
d526 1
a526 1
      theCall.myOptComp ()->setObj2Wsub (doubleFromFloat (theVal));
d650 1
a650 1
WitReturnCode WitRun::witSetPeriodsPerYear (float theVal)
d662 1
a662 1
      theCall.myOptComp ()->setPeriodsPerYear (doubleFromFloat (theVal));
@


1.19
log
@Continued double precision.
@
text
@d22 2
d347 1
a347 1
WitReturnCode WitRun::witGetWbounds (float * wbounds)
d688 1
a688 1
WitReturnCode WitRun::witSetWbounds (float theVal)
d700 1
a700 1
      theCall.myOptComp ()->setWbounds (doubleFromFloat (theVal));
@


1.18
log
@Continued double precision.
@
text
@d398 1
a398 1
WitReturnCode WitRun::witSetCapCost (float newFlt)
d407 1
a407 1
      newFlt);
d410 1
a410 1
      theCall.myOptComp ()->setCapCost (static_cast <double> (newFlt));
d436 1
a436 1
WitReturnCode WitRun::witSetInvCost (float newFlt)
d445 1
a445 1
      newFlt);
d448 1
a448 1
      theCall.myOptComp ()->setInvCost (static_cast <double> (newFlt));
d455 1
a455 1
WitReturnCode WitRun::witSetObj2Winv (float newFlt)
d464 1
a464 1
      newFlt);
d467 1
a467 1
      theCall.myOptComp ()->setObj2Winv (static_cast <double> (newFlt));
d474 1
a474 1
WitReturnCode WitRun::witSetObj2Wrev (float newFlt)
d483 1
a483 1
      newFlt);
d486 1
a486 1
      theCall.myOptComp ()->setObj2Wrev (static_cast <double> (newFlt));
d493 1
a493 1
WitReturnCode WitRun::witSetObj2Wserv (float newFlt)
d502 1
a502 1
      newFlt);
d505 1
a505 1
      theCall.myOptComp ()->setObj2Wserv (static_cast <double> (newFlt));
d512 1
a512 1
WitReturnCode WitRun::witSetObj2Wsub (float newFlt)
d521 1
a521 1
      newFlt);
d524 1
a524 1
      theCall.myOptComp ()->setObj2Wsub (static_cast <double> (newFlt));
d648 1
a648 1
WitReturnCode WitRun::witSetPeriodsPerYear (float newFlt)
d657 1
a657 1
      newFlt);
d660 1
a660 1
      theCall.myOptComp ()->setPeriodsPerYear (static_cast <double> (newFlt));
d686 1
a686 1
WitReturnCode WitRun::witSetWbounds (float newFlt)
d695 1
a695 1
      newFlt);
d698 1
a698 1
      theCall.myOptComp ()->setWbounds (static_cast <double> (newFlt));
@


1.17
log
@Continued double precision.
@
text
@d404 1
a404 1
   theCall.prepNonNegStrDbl (
d410 1
a410 1
      theCall.myOptComp ()->setCapCost (StrDbl::convFloat (newFlt));
d442 1
a442 1
   theCall.prepNonNegStrDbl (
d448 1
a448 1
      theCall.myOptComp ()->setInvCost (StrDbl::convFloat (newFlt));
d461 1
a461 1
   theCall.prepNonNegStrDbl (
d467 1
a467 1
      theCall.myOptComp ()->setObj2Winv (StrDbl::convFloat (newFlt));
d480 1
a480 1
   theCall.prepNonNegStrDbl (
d486 1
a486 1
      theCall.myOptComp ()->setObj2Wrev (StrDbl::convFloat (newFlt));
d499 1
a499 1
   theCall.prepNonNegStrDbl (
d505 1
a505 1
      theCall.myOptComp ()->setObj2Wserv (StrDbl::convFloat (newFlt));
d518 1
a518 1
   theCall.prepNonNegStrDbl (
d524 1
a524 1
      theCall.myOptComp ()->setObj2Wsub (StrDbl::convFloat (newFlt));
d654 1
a654 1
   theCall.prepPosStrDbl (
d660 1
a660 1
      theCall.myOptComp ()->setPeriodsPerYear (StrDbl::convFloat (newFlt));
d692 1
a692 1
   theCall.prepNonNegStrDbl (
d698 1
a698 1
      theCall.myOptComp ()->setWbounds (StrDbl::convFloat (newFlt));
@


1.16
log
@Continued double precision.
@
text
@d197 3
a199 2
WitReturnCode WitRun::witGetObjValues (float * objValue,
   float * boundsObjValue)
d205 1
a205 2
   apiGet (objValue, "objValue", objChoice ()->objValue ());

@


1.15
log
@Continued implementation of opt with COIN.
@
text
@d404 1
a404 1
   theCall.prepNonNegFloat (
d410 1
a410 1
      theCall.myOptComp ()->setCapCost (newFlt);
d442 1
a442 1
   theCall.prepNonNegFloat (
d448 1
a448 1
      theCall.myOptComp ()->setInvCost (newFlt);
d461 1
a461 1
   theCall.prepNonNegFloat (
d467 1
a467 1
      theCall.myOptComp ()->setObj2Winv (newFlt);
d480 1
a480 1
   theCall.prepNonNegFloat (
d486 1
a486 1
      theCall.myOptComp ()->setObj2Wrev (newFlt);
d499 1
a499 1
   theCall.prepNonNegFloat (
d505 1
a505 1
      theCall.myOptComp ()->setObj2Wserv (newFlt);
d518 1
a518 1
   theCall.prepNonNegFloat (
d524 1
a524 1
      theCall.myOptComp ()->setObj2Wsub (newFlt);
d654 1
a654 1
   theCall.prepPosFloat (
d660 1
a660 1
      theCall.myOptComp ()->setPeriodsPerYear (newFlt);
d692 1
a692 1
   theCall.prepNonNegFloat (
d698 1
a698 1
      theCall.myOptComp ()->setWbounds (newFlt);
@


1.14
log
@Continued implementation of opt with COIN.
@
text
@a293 17
WitReturnCode WitRun::witGetSolverLogFileName (char ** solverLogFileName)
   {
   PROLOG ("witGetSolverLogFileName");

   WitOptCompApiCall theCall (this);

   apiGet (                 solverLogFileName, 
                           "solverLogFileName", 
      theCall.myOptComp ()->solverLogFileName ());

   issueGetAttrMsg ("coinMessageFileName");

   EPILOG;
   }

//------------------------------------------------------------------------------

d328 17
a416 19
WitReturnCode WitRun::witSetSolverLogFileName (const char * solverLogFileName)
   {
   PROLOG ("witSetSolverLogFileName");

   WitOptCompApiCall theCall (this);

   theCall.prepString (
      "solverLogFileName", 
      theCall.myOptComp ()->solverLogFileName (), 
      solverLogFileName);

   if (theCall.argsOK ())
      theCall.myOptComp ()->setSolverLogFileName (solverLogFileName);

   EPILOG;
   }

//------------------------------------------------------------------------------

d661 19
@


1.13
log
@Continued implementation of opt with COIN.
@
text
@d294 1
a294 1
WitReturnCode WitRun::witGetCoinLogFileName (char ** coinLogFileName)
d296 1
a296 1
   PROLOG ("witGetCoinLogFileName");
d300 3
a302 3
   apiGet (                 coinLogFileName, 
                           "coinLogFileName", 
      theCall.myOptComp ()->coinLogFileName ());
d417 1
a417 1
WitReturnCode WitRun::witSetCoinLogFileName (const char * coinLogFileName)
d419 1
a419 1
   PROLOG ("witSetCoinLogFileName");
d424 3
a426 3
      "coinLogFileName", 
      theCall.myOptComp ()->coinLogFileName (), 
      coinLogFileName);
d429 1
a429 1
      theCall.myOptComp ()->setCoinLogFileName (coinLogFileName);
@


1.12
log
@Continued implementation of opt with COIN.
@
text
@d294 1
a294 1
WitReturnCode WitRun::witGetCoinMesgFileName (char ** coinMesgFileName)
d296 1
a296 1
   PROLOG ("witGetCoinMesgFileName");
d300 3
a302 3
   apiGet (                 coinMesgFileName, 
                           "coinMesgFileName", 
      theCall.myOptComp ()->coinMesgFileName ());
d417 1
a417 1
WitReturnCode WitRun::witSetCoinMesgFileName (const char * coinMesgFileName)
d419 1
a419 1
   PROLOG ("witSetCoinMesgFileName");
d424 3
a426 3
      "coinMesgFileName", 
      theCall.myOptComp ()->coinMesgFileName (), 
      coinMesgFileName);
d429 1
a429 1
      theCall.myOptComp ()->setCoinMesgFileName (coinMesgFileName);
@


1.11
log
@Continued implementation of opt with COIN.
@
text
@d304 1
a304 1
   issueGetAttrMsg ("oslMessageFileName");
@


1.10
log
@Implemented OSL postSolve error recovery.
@
text
@d294 17
d411 19
@


1.9
log
@Internal changes.
@
text
@d311 17
d587 19
@


1.8
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d26 1
a26 1
WitReturnCode WitRun::witGetAccAfterOptImp (WitBoolean * accAfterOptImp)
d43 1
a43 1
WitReturnCode WitRun::witGetAccAfterSoftLB (WitBoolean * accAfterSoftLB)
d60 1
a60 1
WitReturnCode WitRun::witGetAccelerated (WitBoolean * accelerated)
d92 1
a92 1
WitReturnCode WitRun::witGetCompPrices (WitBoolean * compPrices)
d260 1
a260 1
WitReturnCode WitRun::witGetOptWithLotSizes (WitBoolean * optWithLotSizes)
d326 1
a326 1
WitReturnCode WitRun::witSetAccAfterOptImp (WitBoolean newValue)
d332 1
a332 1
   theCall.prepBoolean (
d345 1
a345 1
WitReturnCode WitRun::witSetAccAfterSoftLB (WitBoolean newValue)
d351 1
a351 1
   theCall.prepBoolean (
d383 1
a383 1
WitReturnCode WitRun::witSetCompPrices (WitBoolean newValue)
d389 1
a389 1
   theCall.prepBoolean (
d557 1
a557 1
WitReturnCode WitRun::witSetOptWithLotSizes (WitBoolean newValue)
d563 1
a563 1
   theCall.prepBoolean (
@


1.7
log
@Continued implementation of opt implosion with lot sizes.
@
text
@a567 3
   if (! theCall.myOptComp ()->allowOWLS ())
      myMsgFac () ("owlsNotAllowedSmsg");

@


1.6
log
@Began implementation of opt implosion with lot sizes.
@
text
@d19 1
d21 1
@


1.5
log
@Began implementation of object iteration.
@
text
@d258 17
d549 22
@


1.4
log
@Refactoring for constrained stock reallocation.
@
text
@d18 1
d20 1
a20 1
#include <ApiCall.h>
@


1.3
log
@Added shadowPrice and compPrices attributes.
@
text
@d29 3
a31 1
   apiGet (accAfterOptImp, "accAfterOptImp", theCall ()->accAfterOptImp ());
d46 3
a48 1
   apiGet (accAfterSoftLB, "accAfterSoftLB", theCall ()->accAfterSoftLB ());
d63 2
a64 3
   apiGet (
       accelerated,
      "accelerated",
d80 1
a80 1
   apiGet (capCost, "capCost", theCall ()->capCost ());
d95 1
a95 1
   apiGet (compPrices, "compPrices", theCall ()->compPrices ());
d110 1
a110 1
   apiGet (invCost, "invCost", theCall ()->invCost ());
d125 1
a125 1
   apiGet (obj2Winv, "obj2Winv", theCall ()->obj2Winv ());
d140 1
a140 1
   apiGet (obj2Wrev, "obj2Wrev", theCall ()->obj2Wrev ());
d155 1
a155 1
   apiGet (obj2Wserv, "obj2Wserv", theCall ()->obj2Wserv ());
d170 1
a170 1
   apiGet (obj2Wsub, "obj2Wsub", theCall ()->obj2Wsub ());
d220 15
a234 4
   apiGet (revValue,  "revValue",  theCall ()->myObjFunc2 ()->revValue  ());
   apiGet (invValue,  "invValue",  theCall ()->myObjFunc2 ()->invValue  ());
   apiGet (servValue, "servValue", theCall ()->myObjFunc2 ()->servValue ());
   apiGet (subValue,  "subValue",  theCall ()->myObjFunc2 ()->subValue  ());
d250 1
a250 1
      theCall ()->optInitMethod ()->myApiAttr ());
d263 3
a265 1
   apiGet (oslFileName, "oslFileName", theCall ()->oslMesgFileName ());
d280 3
a282 1
   apiGet (periodsPerYear, "periodsPerYear", theCall ()->periodsPerYear ());
d297 1
a297 1
   apiGet (wbounds, "wbounds", theCall ()->wbounds ());
d314 1
a314 1
      theCall ()->accAfterOptImp (), 
d318 1
a318 1
      theCall ()->setAccAfterOptImp (newValue);
d333 1
a333 1
      theCall ()->accAfterSoftLB (), 
d337 1
a337 1
      theCall ()->setAccAfterSoftLB (newValue);
d350 4
a353 1
   theCall.prepNonNegFloat ("capCost", theCall ()->capCost (), newFlt);
d356 1
a356 1
      theCall ()->setCapCost (newFlt);
d371 1
a371 1
      theCall ()->compPrices (), 
d375 1
a375 1
      theCall ()->setCompPrices (newValue);
d388 4
a391 1
   theCall.prepNonNegFloat ("invCost", theCall ()->invCost (), newFlt);
d394 1
a394 1
      theCall ()->setInvCost (newFlt);
d407 4
a410 1
   theCall.prepNonNegFloat ("obj2Winv", theCall ()->obj2Winv (), newFlt);
d413 1
a413 1
      theCall ()->setObj2Winv (newFlt);
d426 4
a429 1
   theCall.prepNonNegFloat ("obj2Wrev", theCall ()->obj2Wrev (), newFlt);
d432 1
a432 1
      theCall ()->setObj2Wrev (newFlt);
d445 4
a448 1
   theCall.prepNonNegFloat ("obj2Wserv", theCall ()->obj2Wserv (), newFlt);
d451 1
a451 1
      theCall ()->setObj2Wserv (newFlt);
d464 4
a467 1
   theCall.prepNonNegFloat ("obj2Wsub", theCall ()->obj2Wsub (), newFlt);
d470 1
a470 1
      theCall ()->setObj2Wsub (newFlt);
d487 1
a487 1
      theCall ()->objChoice ()->index (),
d490 1
a490 1
      theCall ()->allObjFuncs ().nElements () - 1);
d493 1
a493 1
      theCall ()->setObjChoice (choice);
d513 1
a513 1
   forEachEl (currentOptStarter, theCall ()->allOptStarters ())
d526 1
a526 1
         theCall ()->optInitMethod ()->myApiAttr (),
d545 1
a545 1
      theCall ()->oslMesgFileName (), 
d549 1
a549 1
      theCall ()->setOslMesgFileName (oslMesgFileName);
d564 1
a564 1
      theCall ()->periodsPerYear (), 
d568 1
a568 1
      theCall ()->setPeriodsPerYear (newFlt);
d581 4
a584 1
   theCall.prepNonNegFloat ("wbounds", theCall ()->wbounds (), newFlt);
d587 1
a587 1
      theCall ()->setWbounds (newFlt);
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d86 15
d336 19
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
