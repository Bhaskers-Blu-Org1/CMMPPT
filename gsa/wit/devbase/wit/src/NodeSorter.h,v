head	1.24;
access;
symbols
	sce_5_01_20080919:1.21
	latest_sce_4_20_20060523:1.6.0.2
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.5.0.2
	sce_4_20_OSL:1.5
	sce_410_withVa:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.3.0.4
	Root-of-EndRw:1.3
	rwToStl:1.3.0.2;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.49.39;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.28.01;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.17.44;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.11.15.19.57.34;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.11.15.17.15.34;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.10.30.21.44.17;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.06.08.18.26.09;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.06.05.21.20.52;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.05.21.06.01;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.05.16.15.23;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.04.21.06.39;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.04.20.07.11;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.04.19.05.56;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.30.16.01.19;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.02.27.22.59.29;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.27.21.03.04;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.02.27.19.59.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.07.19.55.36;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.02.17.34.04;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.30.21.57.56;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.02.22.18.37;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.23.18.09.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.22.22.42.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.22.21.16.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef NodeSorterH
#define NodeSorterH

//------------------------------------------------------------------------------
// Header file: "NodeSorter.h"
//
// Contains the declaration of class NodeSorter.
//------------------------------------------------------------------------------

#include <Mapping.h>
#include <PtrMap.h>
#include <ObjStack.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class NodeSorter
//
// Responsible for sorting the Parts and Operations of a Problem, as part of
// preprocessing.
//
// Implemented in PreHelp.C.
//------------------------------------------------------------------------------

class WitNodeSorter: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitNodeSorter (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitNodeSorter ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void sortNodesIfNeeded ();
         //
         // Does a topological sort of the Nodes of theProblem, unless they
         // are already in order.
         // If an explodeable cycle is found, it is flagged as an error.

      void getExpCycle (
            WitObjStack <WitPart> &      theParts,
            WitObjStack <WitOperation> & theOpns);
         //
         // If the Problem contains at least one explodeable cycle, this
         // function retrieves one of them;
         // If not, this function leaves the argument Lists unaltered.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void sortNodesIfNeededInt ();
         //
         // Does a topological sort of the Nodes of theProblem, unless they
         // are already in order.

      void defineAllNodesSuccessors ();
         //
         // Sets up allNodes and successorsVector.

      bool nodesInOrder ();
         //
         // Returns true, iff the Parts and Operations are already in order.

      void sortNodes ();
         //
         // Sorts allNodes, checks for cycles, and stores the result in
         // myProblem ().

      void sortNodes (WitList <WitNode> & sortedNodes);
         //
         // Sorts allNodes and stores the result in sortedNodes.

      void constructCycle ();
         //
         // Constructs and reports a cycle in the BOM structure.
         // Assumes that the set of unsorted Nodes is non-empty and that each
         // node in this set has a predecessor in the BOM in this set.
         // This is precisely the condition that occurs when the topological
         // sort (sortNodes) fails. Under this condition, a cycle can be found
         // by following a path of unsorted predecessor Nodes until a repeat is
         // found.

      WitPart * findPartInCycle ();
         //
         // Finds and returns a Part in a cycle of unsorted predecessor Nodes.

      void storeCycle (WitPart * startingPart);
         //
         // Stores a cycle in the BOM structure starting at startingPart in
         // cycleParts_ and cycleOpns_.

      void reportCycle ();
         //
         // Issues the severe error messages for a cycle in the BOM structure.

      noCopyCtorAssign (WitNodeSorter);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitList <WitNode> allNodes_;
         //
         // All the Nodes in myProblem.

      WitPtrMap <WitNode, WitList <WitNode> > successors_;
         //
         // successors_.myElemAt (theNode) is a List of all Nodes, otherNode,
         // such that there is an BillEntry from theNode to otherNode, so that
         // otherNode must be higher in the BOM than theNode. otherNode will be
         // listed once in successors_.myElemAt (theNode) for each BillEntry
         // connecting theNode to otherNode.

      WitMapping <WitNode, bool> sorted_;
         //
         // sorted_ (theNode) is true, iff theNode has been sorted.

      WitPtrMap <WitNode, WitNode> unsortedPredFor_;
         //
         // During constructCycle, unsortedPredFor_ (theNode)
         // is an unsorted predecessor of theNode. By assumption, this exists
         // for each unsorted Node during constructCycle.

      bool cycleFound_;
         //
         // True, iff an explodeable cycle has been found.

      WitObjStack <WitPart>      cycleParts_;
      WitObjStack <WitOperation> cycleOpns_;
         //
         // If an explodeable cycle has been found, it is stored in these
         // Stacks.
   };

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d34 2
a35 60
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitNodeSorter (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitNodeSorter ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void sortNodesIfNeeded ();
//
// Does a topological sort of the Nodes of theProblem, unless they
// are already in order.
// If an explodeable cycle is found, it is flagged as an error.

void getExpCycle (
WitObjStack <WitPart> &      theParts,
WitObjStack <WitOperation> & theOpns);
//
// If the Problem contains at least one explodeable cycle, this
// function retrieves one of them;
// If not, this function leaves the argument Lists unaltered.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void sortNodesIfNeededInt ();
//
// Does a topological sort of the Nodes of theProblem, unless they
// are already in order.

void defineAllNodesSuccessors ();
//
// Sets up allNodes and successorsVector.

bool nodesInOrder ();
//
// Returns true, iff the Parts and Operations are already in order.

void sortNodes ();
//
// Sorts allNodes, checks for cycles, and stores the result in
// myProblem ().

void sortNodes (WitList <WitNode> & sortedNodes);
//
// Sorts allNodes and stores the result in sortedNodes.
d37 119
a155 61
void constructCycle ();
//
// Constructs and reports a cycle in the BOM structure.
// Assumes that the set of unsorted Nodes is non-empty and that each
// node in this set has a predecessor in the BOM in this set.
// This is precisely the condition that occurs when the topological
// sort (sortNodes) fails. Under this condition, a cycle can be found
// by following a path of unsorted predecessor Nodes until a repeat is
// found.

WitPart * findPartInCycle ();
//
// Finds and returns a Part in a cycle of unsorted predecessor Nodes.

void storeCycle (WitPart * startingPart);
//
// Stores a cycle in the BOM structure starting at startingPart in
// cycleParts_ and cycleOpns_.

void reportCycle ();
//
// Issues the severe error messages for a cycle in the BOM structure.

noCopyCtorAssign (WitNodeSorter);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitList <WitNode> allNodes_;
//
// All the Nodes in myProblem.

WitPtrMap <WitNode, WitList <WitNode> > successors_;
//
// successors_.myElemAt (theNode) is a List of all Nodes, otherNode,
// such that there is an BillEntry from theNode to otherNode, so that
// otherNode must be higher in the BOM than theNode. otherNode will be
// listed once in successors_.myElemAt (theNode) for each BillEntry
// connecting theNode to otherNode.

WitMapping <WitNode, bool> sorted_;
//
// sorted_ (theNode) is true, iff theNode has been sorted.

WitPtrMap <WitNode, WitNode> unsortedPredFor_;
//
// During constructCycle, unsortedPredFor_ (theNode)
// is an unsorted predecessor of theNode. By assumption, this exists
// for each unsorted Node during constructCycle.

bool cycleFound_;
//
// True, iff an explodeable cycle has been found.

WitObjStack <WitPart>      cycleParts_;
WitObjStack <WitOperation> cycleOpns_;
//
// If an explodeable cycle has been found, it is stored in these
// Stacks.
};
@


1.21
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d34 60
a93 2
   {
   public:
d95 61
a155 119
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitNodeSorter (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitNodeSorter ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void sortNodesIfNeeded ();
         //
         // Does a topological sort of the Nodes of theProblem, unless they
         // are already in order.
         // If an explodeable cycle is found, it is flagged as an error.

      void getExpCycle (
            WitObjStack <WitPart> &      theParts,
            WitObjStack <WitOperation> & theOpns);
         //
         // If the Problem contains at least one explodeable cycle, this
         // function retrieves one of them;
         // If not, this function leaves the argument Lists unaltered.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void sortNodesIfNeededInt ();
         //
         // Does a topological sort of the Nodes of theProblem, unless they
         // are already in order.

      void defineAllNodesSuccessors ();
         //
         // Sets up allNodes and successorsVector.

      bool nodesInOrder ();
         //
         // Returns true, iff the Parts and Operations are already in order.

      void sortNodes ();
         //
         // Sorts allNodes, checks for cycles, and stores the result in
         // myProblem ().

      void sortNodes (WitList <WitNode> & sortedNodes);
         //
         // Sorts allNodes and stores the result in sortedNodes.

      void constructCycle ();
         //
         // Constructs and reports a cycle in the BOM structure.
         // Assumes that the set of unsorted Nodes is non-empty and that each
         // node in this set has a predecessor in the BOM in this set.
         // This is precisely the condition that occurs when the topological
         // sort (sortNodes) fails. Under this condition, a cycle can be found
         // by following a path of unsorted predecessor Nodes until a repeat is
         // found.

      WitPart * findPartInCycle ();
         //
         // Finds and returns a Part in a cycle of unsorted predecessor Nodes.

      void storeCycle (WitPart * startingPart);
         //
         // Stores a cycle in the BOM structure starting at startingPart in
         // cycleParts_ and cycleOpns_.

      void reportCycle ();
         //
         // Issues the severe error messages for a cycle in the BOM structure.

      noCopyCtorAssign (WitNodeSorter);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitList <WitNode> allNodes_;
         //
         // All the Nodes in myProblem.

      WitPtrMap <WitNode, WitList <WitNode> > successors_;
         //
         // successors_.myElemAt (theNode) is a List of all Nodes, otherNode,
         // such that there is an BillEntry from theNode to otherNode, so that
         // otherNode must be higher in the BOM than theNode. otherNode will be
         // listed once in successors_.myElemAt (theNode) for each BillEntry
         // connecting theNode to otherNode.

      WitMapping <WitNode, bool> sorted_;
         //
         // sorted_ (theNode) is true, iff theNode has been sorted.

      WitPtrMap <WitNode, WitNode> unsortedPredFor_;
         //
         // During constructCycle, unsortedPredFor_ (theNode)
         // is an unsorted predecessor of theNode. By assumption, this exists
         // for each unsorted Node during constructCycle.

      bool cycleFound_;
         //
         // True, iff an explodeable cycle has been found.

      WitObjStack <WitPart>      cycleParts_;
      WitObjStack <WitOperation> cycleOpns_;
         //
         // If an explodeable cycle has been found, it is stored in these
         // Stacks.
   };
@


1.20
log
@Stochastic Implosion
@
text
@a19 1
#include <RefMap.h>
d128 1
a128 1
      WitRefMap <WitNode, WitList <WitNode> > successors_;
d130 5
a134 5
         // successors_ (theNode) is a List of all Nodes, otherNode, such that
         // there is an BillEntry from theNode to otherNode, so that otherNode
         // must be higher in the BOM than theNode. otherNode will be listed
         // once in successors_ (theNode) for each BillEntry connecting theNode
         // to otherNode.
@


1.19
log
@witGetExpCycle
@
text
@d20 1
a22 2
#include <Ref.h>
#include <RefMap.h>
a50 14
      // Reference receiving functions.
      // Each of these functions stores its reference arguments on the
      // assumption that they refer to the similarly named data members of the
      // first argument.
      //------------------------------------------------------------------------

      void receiveRefs (WitCompMgr *,
                        WitList <WitPart>      & allPartsRef,
                        WitList <WitOperation> & allOperationsRef);

      void receiveRefs (WitPart *,
                        int                    & sortedPartIndexRef);

      //------------------------------------------------------------------------
a155 8

      //------------------------------------------------------------------------
      // Reference holders to the data to be computed by this NodeSorter.
      //------------------------------------------------------------------------

      WitRef              <WitList <WitPart>      > allParts_;
      WitRef              <WitList <WitOperation> > allOperations_;
      WitRefMap  <WitPart, int>                     sortedPartIndex_;
@


1.18
log
@Stochastic Implosion
@
text
@d21 1
d73 9
d89 5
d113 1
a113 1
         // Constructs and displays a cycle in the BOM structure.
d118 15
a132 2
         // (and is found) by following a path of unsorted predecessor Nodes
         // until a repeat is found.
d162 10
@


1.17
log
@Fixed a bug:
   Two of the arguments in a function declaration had the same name.
@
text
@d58 2
a59 2
                        WitList <WitPart>      & allPartsArg,
                        WitList <WitOperation> & allOperationsArg);
d62 1
a62 1
                        int                    & sortedPartIndexArg);
@


1.16
log
@Stochastic Implosion
@
text
@d59 1
a59 1
                        WitList <WitOperation> & allPartsArg);
@


1.15
log
@Stochastic Implosion
@
text
@d42 1
a42 1
      WitNodeSorter (WitPreData *);
a111 4
      WitPreData * const myPreData_;
         //
         // The PreData for this NodeSorter.

@


1.14
log
@Stochastic Implosion
@
text
@d142 3
a144 4
      WitRef     <WitList <WitPart>      > allParts_;
      WitRef     <WitList <WitOperation> > allOperations_;

      WitRefMap  <WitPart, int>            sortedPartIndex_;
@


1.13
log
@Stochastic Implosion
@
text
@d51 14
@


1.12
log
@Stochastic Implosion
@
text
@d21 1
d127 5
@


1.11
log
@Stochastic Implosion
@
text
@d122 4
@


1.10
log
@[disallowed backlog]
@
text
@d41 1
a41 1
      WitNodeSorter (WitProblem *);
d97 4
@


1.9
log
@[disallowed backlog]
@
text
@a57 9
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (
         int                       WitPart::* sortedPartIndexArg);

a96 13
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // E.g., theCompMgr->*allParts_ == theCompMgr->allParts_.
      //------------------------------------------------------------------------

      static int WitPart::* sortedPartIndex_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.8
log
@Rescinded all changed made since 1/31/07.
@
text
@a66 4
      static void receiveDMPs (
         WitList <WitPart>      WitCompMgr::* allPartsArg,
         WitList <WitOperation> WitCompMgr::* allOperationsArg);

d113 1
a113 3
      static int                       WitPart::* sortedPartIndex_;
      static WitList <WitPart>      WitCompMgr::* allParts_;
      static WitList <WitOperation> WitCompMgr::* allOperations_;
@


1.7
log
@[disallowed backlog]
@
text
@d65 3
d117 1
@


1.6
log
@Updated the copyright date on all source files.
@
text
@a64 3
         int                       WitPart::* sortedPartIndexArg);

      static void receiveDMPs (
a113 1
      static int                       WitPart::* sortedPartIndex_;
@


1.5
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.4
log
@Internal changes.
@
text
@a21 1
#include <Ref.h>
d50 1
a50 1
      // Data loading functions.
d53 4
a56 7
      void loadDataFrom (
            WitPart *,
            int &                       sortedPartIndexArg);

      void loadDataFromCompMgr (
            WitList    <WitPart>      & allPartsArg,
            WitList    <WitOperation> & allOperationsArg);
d59 3
a61 1
      // Other public member functions.
d64 2
a65 3
      void allocLoadedData ();
         //
         // Allocates the data to be loaded in from the components.
d67 3
a69 8
      void clearLoadedData ();
         //
         // Clears the data that was loaded in from the components.

      void sortNodesIfNeeded ();
         //
         // Does a topological sort of the Nodes of theProblem, unless they
         // are already in order.
d111 4
a114 1
      // Mappings to data loaded in from Components, etc.
d117 3
a119 4
      WitRef             <WitList <WitPart>      > allParts_;
      WitRef             <WitList <WitOperation> > allOperations_;

      WitRefMap <WitPart, int                    > sortedPartIndex_;
@


1.3
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d89 1
a89 1
      WitBoolean nodesInOrder ();
d91 1
a91 1
         // Returns TRUE, iff the Parts and Operations are already in order.
d143 1
a143 1
      WitMapping <WitNode, WitBoolean> sorted_;
d145 1
a145 1
         // sorted_ (theNode) is TRUE, iff theNode has been sorted.
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d31 1
a31 1
// Implemented in Pre.C.
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d28 4
a31 1
// Responsible for sorting the Parts and Operations of a Problem.
@

