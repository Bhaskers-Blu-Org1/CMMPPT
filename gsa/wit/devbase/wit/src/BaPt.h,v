head	1.41;
access;
symbols
	sce_5_01_20080919:1.29
	latest_sce_4_20_20060523:1.29.0.2
	sce_4_20_20060523:1.29
	latest_sce4_20_OSL:1.28.0.2
	sce_4_20_OSL:1.28
	sce_410_withVa:1.28
	sce_4_05_20040511:1.12
	sce_4_00_20040201:1.12
	nextGenBranch:1.12.0.2
	nextGenRoot:1.12
	sce_3_30_20030627:1.12
	EndRw-branch:1.10.0.4
	Root-of-EndRw:1.10
	rwToStl:1.10.0.2
	latest_sce_3_10_20010924:1.2.0.2
	sce_3_10_20010924:1.2;
locks; strict;
comment	@ * @;


1.41
date	2011.09.28.23.49.04;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.09.24.00.27.21;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2011.08.30.20.17.17;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2010.07.30.20.20.13;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2010.07.29.21.03.11;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2010.07.28.19.27.45;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2010.07.16.22.26.40;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2010.07.15.23.49.24;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.07.13.17.41.28;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2010.07.02.18.53.09;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.06.29.19.56.41;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2010.06.24.23.37.32;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.02.17.33.54;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2005.01.15.00.20.07;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.01.13.17.24.20;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2005.01.06.20.34.08;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.01.01.00.43.12;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.12.28.22.34.26;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.22.19.57.25;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.21.22.13.48;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.20.21.13.09;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.17.21.53.00;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.16.23.35.16;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.15.23.50.10;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.14.22.37.09;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.12.13.20.42.09;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.12.10.21.58.31;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.09.22.06.07;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.09.21.34.11;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.05.16.09.58;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.22.18.19;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.02.21.53.01;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.24.23.00.02;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.15.21.21.34;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.12.21.01.57;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.11.15.36.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.20.22.51.16;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.19.16.20.54;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.15.23.17.28;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.17.18.56.27;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.30.20.29.22;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef BaPtH
#define BaPtH

//------------------------------------------------------------------------------
// Header file: "BaPt.h"
//
// Contains the declaration of class BaPt.
//------------------------------------------------------------------------------

#include <DetSelPt.h>

//------------------------------------------------------------------------------
// Class BaPt
//
// "Build-Ahead Point"
// A SelPt for build-ahead.
// A BaPt represents a Material and fill period at which an explosion period
// must be selected.
//
// Class Hierarchy:
//
// SelPt
//    DetSelPt
//       BaPt
//
// Implemented in BuildAhd.C.
//------------------------------------------------------------------------------

class WitBaPt: public WitDetSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaPt (WitBaMat *, WitPeriod fillPer);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitBaPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static void setInitSelExpPers (WitBaMat * theBaMat);
         //
         // Sets the selected explosion period for each BaPt for theBaMat to its
         // initial value.

      void advanceSel ();
         //
         // Advances selExpPer_ to the next useable explosion period, if any;
         // otherwise, sets selExpPer_ to -1.

      void select (WitPeriod expPer);
         //
         // Sets the explosion period currently selected by this BaPt to expPer.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBaMat *, myBaMat)
      accessFunc (WitPeriod,  selExpPer)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
         //
         // Overrides from class SelPt.

      virtual bool hasResAlt       ();
      virtual void alterSelection  ();
      virtual void storeRecoveryPt ();
      virtual void tempAlterSel    ();
      virtual void cancelTempAlt   ();
      virtual void printAlteration ();
         //
         // Overrides from class DetSelPt.

      noCopyCtorAssign (WitBaPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBaMat * const myBaMat_;
         //
         // The BaMat that owns this BaPt.

      const WitPeriod myFillPer_;
         //
         // The fill period associated with this BaPt.

      WitPeriod selExpPer_;
         //
         // The explosion period currently selected by this BaPt, if any,
         // otherwise -1.
   };

#endif
@


1.40
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.39
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 32
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitBaPt (WitBaMat *, WitPeriod fillPer);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitBaPt ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static void setInitSelExpPers (WitBaMat * theBaMat);
//
// Sets the selected explosion period for each BaPt for theBaMat to its
// initial value.

void advanceSel ();
//
// Advances selExpPer_ to the next useable explosion period, if any;
// otherwise, sets selExpPer_ to -1.

void select (WitPeriod expPer);
//
// Sets the explosion period currently selected by this BaPt to expPer.
d42 79
a120 49
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitBaMat *, myBaMat)
accessFunc (WitPeriod,  selExpPer)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual WitSelMgr *  mySelMgr    ();
virtual void         prtID       ();
virtual bool         splittable  ();
virtual void         getSortData (WitPart * &, WitPeriod &);
virtual WitSelCand * newSelCand  ();
//
// Overrides from class SelPt.

virtual bool hasResAlt       ();
virtual void alterSelection  ();
virtual void storeRecoveryPt ();
virtual void tempAlterSel    ();
virtual void cancelTempAlt   ();
virtual void printAlteration ();
//
// Overrides from class DetSelPt.

noCopyCtorAssign (WitBaPt);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitBaMat * const myBaMat_;
//
// The BaMat that owns this BaPt.

const WitPeriod myFillPer_;
//
// The fill period associated with this BaPt.

WitPeriod selExpPer_;
//
// The explosion period currently selected by this BaPt, if any,
// otherwise -1.
};
@


1.38
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 32
a70 2
   {
   public:
d72 49
a120 79
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaPt (WitBaMat *, WitPeriod fillPer);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitBaPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static void setInitSelExpPers (WitBaMat * theBaMat);
         //
         // Sets the selected explosion period for each BaPt for theBaMat to its
         // initial value.

      void advanceSel ();
         //
         // Advances selExpPer_ to the next useable explosion period, if any;
         // otherwise, sets selExpPer_ to -1.

      void select (WitPeriod expPer);
         //
         // Sets the explosion period currently selected by this BaPt to expPer.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBaMat *, myBaMat)
      accessFunc (WitPeriod,  selExpPer)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
         //
         // Overrides from class SelPt.

      virtual bool hasResAlt       ();
      virtual void alterSelection  ();
      virtual void storeRecoveryPt ();
      virtual void tempAlterSel    ();
      virtual void cancelTempAlt   ();
      virtual void printAlteration ();
         //
         // Overrides from class DetSelPt.

      noCopyCtorAssign (WitBaPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBaMat * const myBaMat_;
         //
         // The BaMat that owns this BaPt.

      const WitPeriod myFillPer_;
         //
         // The fill period associated with this BaPt.

      WitPeriod selExpPer_;
         //
         // The explosion period currently selected by this BaPt, if any,
         // otherwise -1.
   };
@


1.37
log
@Selection Recovery
@
text
@d93 6
a98 6
      virtual bool hasResAlt         ();
      virtual void alterSelection    ();
      virtual void recAltForRecovery ();
      virtual void tempAlterSel      ();
      virtual void cancelTempAlt     ();
      virtual void printAlteration   ();
@


1.36
log
@Selection Recovery
@
text
@d93 6
a98 6
      virtual bool hasResAlt        ();
      virtual void alterSelection   ();
      virtual void recordAlteration ();
      virtual void tempAlterSel     ();
      virtual void cancelTempAlt    ();
      virtual void printAlteration  ();
@


1.35
log
@Selection Recovery
@
text
@d93 6
a98 5
      virtual bool hasResAlt       ();
      virtual void alterSelection  ();
      virtual void tempAlterSel    ();
      virtual void cancelTempAlt   ();
      virtual void printAlteration ();
@


1.34
log
@Re-implemented selection recovery for build-ahead.
@
text
@d85 5
a89 7
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
      virtual void         printRecovery  ();
      virtual void         recoverInitSel ();
@


1.33
log
@Selection Recovery.
@
text
@d46 1
a46 1
      WitBaPt (WitBaMat *, WitPeriod fillPer, WitPeriod expPer);
d58 5
d70 1
a70 2
         // Sets expPer to be the explosion period currently selected by this
         // BaPt.
@


1.32
log
@Selection recovery.
@
text
@d86 1
a87 1
      virtual void         prtRecInitSel  ();
@


1.31
log
@Selection Reuse.
@
text
@d86 2
a87 2
      virtual void         restoreInitSel ();
      virtual void         prtRestInitSel ();
@


1.30
log
@Selection reuse.
@
text
@d87 1
@


1.29
log
@Updated the copyright date on all source files.
@
text
@d81 6
a86 5
      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
@


1.28
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.27
log
@Low-Pri Prop-Rt.
@
text
@d81 5
a85 6
      virtual void         printSelection ();
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
d89 5
a93 4
      virtual bool hasResAlt      ();
      virtual void alterSelection ();
      virtual void tempAlterSel   ();
      virtual void cancelTempAlt  ();
@


1.26
log
@Low-Pri Prop-Rt.
@
text
@d90 4
a93 5
      virtual bool hasResAlt          ();
      virtual void alterSelection     ();
      virtual void tempAlterSel       ();
      virtual void cancelTempAlt      (WitSelCand *);
      virtual bool cancelNeedsSelCand ();
@


1.25
log
@Low-Pri Prop-Rt.
@
text
@a84 1
      virtual void         restoreSelTo   (WitSelCand *);
d90 5
a94 3
      virtual bool hasResAlt      ();
      virtual void alterSelection ();
      virtual void tempAlterSel   ();
@


1.24
log
@Low-Pri Prop-Rt.
@
text
@d85 1
@


1.23
log
@Low-Pri Prop-Rt.
@
text
@a80 1
      virtual bool         hasResAlt      ();
d90 1
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@a86 1
      virtual void         tempAlterSel   ();
d92 1
d94 1
a94 1
         // Override from class DetSelPt.
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@a81 1
      virtual void         alterSelection ();
d92 4
@


1.20
log
@Low-Pri Prop-Rt.
@
text
@d19 1
a19 1
#include <SelPt.h>
d32 2
a33 1
//    BaPt
d38 1
a38 1
class WitBaPt: public WitSelPt
@


1.19
log
@Low-Pri Prop-Rt.
@
text
@d71 2
a72 1
      accessFunc (WitPeriod, selExpPer)
d88 1
a88 1
      virtual void         setToMyCurSel  (WitSelCand *);
@


1.18
log
@Low-Pri Prop-Rt.
@
text
@d62 5
a86 1
      virtual void         restoreSel     (WitSelCand *);
a90 5
      void select (WitPeriod expPer);
         //
         // Sets expPer to be the explosion period currently selected by this
         // BaPt.

@


1.17
log
@Low-Pri Prop-Rt.
@
text
@d83 1
a83 1
      virtual void         setToCurSel    (WitSelCand *);
@


1.16
log
@Low-Pri Prop-Rt.
@
text
@a78 1
      virtual WitSelCand * curSelCand     ();
d83 1
@


1.15
log
@Low-Pri Prop-Rt.
@
text
@d59 2
a60 2
         // Advances selBaCand () to the BaCand that represents the next useable
         // explosion period, if any; otherwise, sets selBaCand () to NULL.
a65 8
      inline WitBaCand * selBaCand ()
         {
         return
            (selSelCand () == NULL)?
               NULL:
               selSelCand ()->myBaCand ();
         }

@


1.14
log
@Low-Pri Prop-Rt.
@
text
@d45 1
a45 1
      WitBaPt (WitBaMat *, WitPeriod, WitBaCand *);
d74 2
d95 5
d113 5
@


1.13
log
@Low-Pri Prop-Rt.
@
text
@a53 15
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual bool         hasResAlt      ();
      virtual void         alterSelection ();
      virtual void         printSelection ();
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual WitSelCand * curSelCand     ();
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual void         tempAlterSel   ();
      virtual void         restoreSel     (WitSelCand *);

      //------------------------------------------------------------------------
d80 13
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@d57 10
a66 9
      virtual bool        hasResAlt      ();
      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual bool        splittable     ();   
      virtual void        getSortData    (WitPart * &, WitPeriod &);
      virtual void        tempAlterSel   ();
      virtual void        restoreSel     (WitSelCand *);
@


1.11
log
@Internal changes.
@
text
@a63 1
      virtual WitPeriod   myPeriod       ();
@


1.10
log
@Continued implementation of Single-Source.
@
text
@d57 1
a57 1
      virtual WitBoolean  hasResAlt      ();
d62 1
a62 1
      virtual WitBoolean  splittable     ();   
@


1.9
log
@Continued implementation of single-source.
@
text
@d64 1
@


1.8
log
@Continued implementation of sel-split for pen-exec.
@
text
@d57 1
d83 3
a85 3
            (selSelCand () != NULL)?
               selSelCand ()->myBaCand ():
               NULL;
@


1.7
log
@Continued implementation of sel-split for pen-exec.
@
text
@d62 1
a62 1
      virtual void        getSortData    (WitPart * &, int &, WitPeriod &);
@


1.6
log
@Continued implementation of sel-split for pen-exec.
@
text
@a61 1
      virtual WitPart *   myFillPart     ();
@


1.5
log
@Continued implementation of sel-split for pen-exec.
@
text
@d63 1
a63 2
      virtual WitPart *   mySortPart     ();
      virtual int         caseIndex      ();
@


1.4
log
@Continued implementation of sel-split for pen-exec.
@
text
@d63 1
a63 1
      virtual WitPart *   sortPart       ();
@


1.3
log
@Continued implementation of sel-split for pen-exec.
@
text
@d63 2
a64 1
      virtual int         sspeIndex      ();
@


1.2
log
@Continued implmentation of selective stock reallocation.
@
text
@d63 3
@


1.1
log
@Refactoring for constrained stock reallocation.
@
text
@d79 4
a82 1
         return WitBaCand::safeCast (selSelCand ());
@

