head	1.52;
access;
symbols
	sce_5_01_20080919:1.38
	latest_sce_4_20_20060523:1.35.0.2
	sce_4_20_20060523:1.35
	latest_sce4_20_OSL:1.31.0.2
	sce_4_20_OSL:1.31
	sce_410_withVa:1.25
	sce_4_05_20040511:1.22
	sce_4_00_20040201:1.21
	nextGenBranch:1.19.0.2
	nextGenRoot:1.19
	sce_3_30_20030627:1.18
	EndRw-branch:1.9.0.4
	Root-of-EndRw:1.9
	rwToStl:1.9.0.2
	latest_sce_3_10_20010924:1.5.0.4
	sce_3_10_20010924:1.5
	latest_sce_3_00_20010601:1.5.0.2
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.3.0.4
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.52
date	2011.09.28.23.50.45;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2011.09.24.00.29.01;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2011.08.30.20.50.57;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2011.08.30.20.18.26;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2010.05.28.22.06.49;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2010.05.28.20.51.43;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2010.05.27.23.27.56;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2010.05.21.15.28.01;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2010.05.19.21.09.04;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2010.05.19.20.34.10;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2010.05.14.21.20.56;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2010.05.12.18.38.08;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2010.05.07.23.19.00;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2010.05.06.22.00.39;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2006.10.05.20.54.54;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2006.08.18.22.29.03;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2006.08.18.18.43.40;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.02.17.34.16;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.01.18.42.15;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2006.04.18.19.06.56;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2006.04.14.19.18.59;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2006.02.16.22.54.10;	author fasano;	state Exp;
branches;
next	1.30;

1.30
date	2005.11.16.16.52.56;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2005.11.07.20.01.12;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2005.11.07.19.49.10;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.10.19.20.53.08;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2005.09.13.19.31.58;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.09.06.15.52.11;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2005.08.23.19.45.20;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2005.07.05.20.07.19;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.03.31.20.43.43;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.21.19.31.41;	author fasano;	state Exp;
branches;
next	1.20;

1.20
date	2003.10.03.21.05.21;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.10.22.58.17;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.21.17.13.51;	author dpc;	state Exp;
branches;
next	1.17;

1.17
date	2003.04.29.19.55.34;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.29.15.04.01;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.28.17.48.34;	author dpc;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.21.20.16.52;	author fasano;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.08.19.22.38;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.06.17.46.17;	author fasano;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.23.40.54;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.25.15.15.22;	author rwToStl;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.15.20.03.48;	author rjw;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2002.08.15.15.43.33;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.02.17.03.37;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.06.23.26.56;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.17.15.11.19;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.15.15.30.27;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.10.23.17.48;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.17;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.33;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.9.2.1
date	2002.11.10.17.14.38;	author fasano;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.24.13.53.33;	author wit;	state Exp;
branches;
next	;


desc
@@


1.52
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef defines_h
#define defines_h

//------------------------------------------------------------------------------
// Header file: "defines.h"
// Defines used for conditional compilation of WIT
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Set defines for target platform:
// Supported platforms:
//   RS6K, AS400, WATCOM_WINDOWS, WATCOM_OS2
//   __OS2__ (IBM Visual Age C++ 3.0 for OS2)
// Working, but not explicitly support
//   SUN4, __BCPLUPLUS__ (Borland C++ V4.0)
// Not tested since C++ conversion
//   WATCOM_DOS
//------------------------------------------------------------------------------

#ifdef RS6K
#  define USE_RUSAGE
#endif

#ifdef SUN4

#define USE_RUSAGE
#define SPRINTF_NON_INT_RET
#define OLD_STYLE_MALLOC_FREE
// Sun C++ V2 required -DNULL=0
#define NULL 0
#endif

#ifdef WATCOM_WINDOWS
#define WATCOM
#endif

#ifdef WATCOM_DOS
#define WATCOM
#endif

#ifdef WATCOM_OS2
#define WATCOM
#endif

#ifdef WATCOM
#define DOS_FILE_NAMES
#endif

#ifdef __OS2__
#define DOS_FILE_NAMES
#endif

#ifdef __BCPLUSPLUS__
#define DOS_FILE_NAMES
#endif

// Microsoft Compiler

#if defined(_MSC_VER)

#define NO_AND_OR_NOT
#define NO_BAD_ALLOC
#pragma warning(disable:4786)
#pragma warning(disable:4099)
#pragma warning(disable:4660)
#pragma warning(disable:4661)
#pragma warning(disable:4018)
#pragma warning(disable:4800)
#pragma warning(disable:4101)
#pragma warning(disable:4102)

#endif

#ifdef WIN32
#define DOS_FILE_NAMES
#endif

#ifdef __WINDOWS__
#define DOS_FILE_NAMES
#endif


#ifdef NO_AND_OR_NOT

#define and &&
#define or  ||
#define not !

#endif

//------------------------------------------------------------------------------
// DEVELOPMENT == 1  Enables  code used during development.
//             == 0  Disables code used during development.
//
// The default value is 0.
//------------------------------------------------------------------------------

#ifndef DEVELOPMENT

#define DEVELOPMENT 0

#endif

//------------------------------------------------------------------------------
// Release info
//------------------------------------------------------------------------------

#define RELEASE_NO "8.0"

//------------------------------------------------------------------------------
// In "demo" mode, the number of parts allowed is limited and the code for
// optimizing implosion is excluded.
// Otherwise, the number of parts is unlimited and the code for optimizing
// implosion is unaffected.
//------------------------------------------------------------------------------

#ifdef DEMO

#define PART_LIMIT 100
   //
   // No more than 100 parts can be constructed.

#else

#define PART_LIMIT -1
   //
   // An unlimited number of parts can be constructed.

#endif

//------------------------------------------------------------------------------
// DEBUG_MODE
//
// 1 only if DEBUG is defined.
//------------------------------------------------------------------------------

#ifdef DEBUG

#define DEBUG_MODE 1

#else

#define DEBUG_MODE 0

#endif

//------------------------------------------------------------------------------
// IMPLEMENT_READDATA
//
// 1, iff witReadData is supported
//------------------------------------------------------------------------------

#ifndef IMPLEMENT_READDATA

#define IMPLEMENT_READDATA 1

#endif

//------------------------------------------------------------------------------
// WIT_DLLEXPORT
//
// Defining WIT_DLLEXPORT will cause wit.h to export symbols to a wit dll.
// WIT_DLLEXPORT will not be defined in WIT application programs.
// This will cause wit.h to import symbols from the wit dll.
// Thus, with one exception, any file in WIT that #includes wit.h must first
// (directly or indirectly) #include defines.h. The exception is wit.C, which
// #includes wit.h first, in order to import symbols.
//------------------------------------------------------------------------------

#define WIT_DLLEXPORT

//------------------------------------------------------------------------------
// NO_TIME_T
// 
// Defining NO_TIME_T will cause wit to be built without using the 
// ANSI c data structure time_t.  It will also cause the string "Unknown"
// to be printed in messages which determine the time from time_t.
// This is being done to support ITS's desire to build the wit library 
// on a back level of AIX which has a different sizeof (time_t) when
// compared to the current level.
//------------------------------------------------------------------------------

// #define NO_TIME_T

//------------------------------------------------------------------------------
// ERROR_EXC_AVAIL
//
// True, iff WIT's error exception capability is available on the platform
// being used.
//------------------------------------------------------------------------------

#define ERROR_EXC_AVAIL true

#if defined(_MSC_VER)
#if _MSC_VER <= 1200
   //
   // MS Visual C++ V6 or less.

#undef  ERROR_EXC_AVAIL
#define ERROR_EXC_AVAIL false

#endif // _MSC_VER <= 1200
#endif // defined(_MSC_VER)

//------------------------------------------------------------------------------

#endif
@


1.51
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 6
a6 1
//------------------------------------------------------------------------------
d8 1
a8 4
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
d10 4
a13 1
//------------------------------------------------------------------------------
@


1.50
log
@Revised the release # to 8.0.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d129 2
a130 2
//
// No more than 100 parts can be constructed.
d135 2
a136 2
//
// An unlimited number of parts can be constructed.
d183 2
a184 2
//
// Defining NO_TIME_T will cause wit to be built without using the
d187 1
a187 1
// This is being done to support ITS's desire to build the wit library
d205 2
a206 2
//
// MS Visual C++ V6 or less.
@


1.49
log
@Revised the copyright date.
@
text
@d117 1
a117 1
#define RELEASE_NO "7.0"
@


1.48
log
@Removing the DISGUISE logic from WIT.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d129 2
a130 2
   //
   // No more than 100 parts can be constructed.
d135 2
a136 2
   //
   // An unlimited number of parts can be constructed.
d183 2
a184 2
// 
// Defining NO_TIME_T will cause wit to be built without using the 
d187 1
a187 1
// This is being done to support ITS's desire to build the wit library 
d205 2
a206 2
   //
   // MS Visual C++ V6 or less.
@


1.47
log
@CPLEX
@
text
@a119 16
// Disguise symbols by replacing with symbols defined in disguise.h
// DISGUISE=1   Replace WIT Symbols
//         =0   Do not replace WIT Symbols
//------------------------------------------------------------------------------

#if    not DEVELOPMENT                 
                                 // Always disguise non-develoment code
#undef    DISGUISE
#define   DISGUISE      1
#endif

#ifndef DISGUISE                    // Default DISGUISE to 1
#define DISGUISE        1
#endif

//------------------------------------------------------------------------------
@


1.46
log
@CPLEX
@
text
@a100 17
// COIN_EMBEDDED
//
// If COIN_EMBEDDED == 1, COIN is     to be embedded into WIT.
// If COIN_EMBEDDED == 0, COIN is not to be embedded into WIT.
// If COIN_EMBEDDED == anything else, a syntax error results.
//
// COIN_EMBEDDED can be specified in the compilation command, e.g.,
// -DCOIN_EMBEDDED=1. Otherwise, it defaults to 0
//
// The following code implements 0 as the default value of COIN_EMBEDDED.
//------------------------------------------------------------------------------

#ifndef COIN_EMBEDDED
#define COIN_EMBEDDED 0
#endif

//------------------------------------------------------------------------------
@


1.45
log
@CPLEX
@
text
@a117 17
// CPLEX_EMBEDDED
//
// If CPLEX_EMBEDDED == 1, CPLEX is     to be embedded into WIT.
// If CPLEX_EMBEDDED == 0, CPLEX is not to be embedded into WIT.
// If CPLEX_EMBEDDED == anything else, a syntax error results.
//
// CPLEX_EMBEDDED can be specified in the compilation command, e.g.,
// -DCPLEX_EMBEDDED=1. Otherwise, it defaults to 0
//
// The following code implements 0 as the default value of CPLEX_EMBEDDED.
//------------------------------------------------------------------------------

#ifndef CPLEX_EMBEDDED
#define CPLEX_EMBEDDED 0
#endif

//------------------------------------------------------------------------------
@


1.44
log
@Preparing for embedded CPLEX.
@
text
@d101 34
@


1.43
log
@Preparing for embedded CPLEX.
@
text
@a100 15
// COIN_EMBEDDED
//
// 1, if COIN will     be embedded into WIT.
// 0, if COIN will not be embedded into WIT.
//
// The default value is 1.
//------------------------------------------------------------------------------

#ifndef COIN_EMBEDDED

#define COIN_EMBEDDED 1

#endif

//------------------------------------------------------------------------------
@


1.42
log
@Revising the build procedure.
@
text
@a115 11
// SOLVER_EMBEDDED
//
// 1, if a  solver will be embedded into WIT.
// 0, if no solver will be embedded into WIT.
//
// Currently, the only solver is COIN.
//------------------------------------------------------------------------------

#define SOLVER_EMBEDDED COIN_EMBEDDED

//------------------------------------------------------------------------------
@


1.41
log
@Revising the build procedure.
@
text
@d116 11
@


1.40
log
@Revising the build procedure.
@
text
@d101 1
a101 1
// WIT_EMBEDS_COIN
d109 1
a109 1
#ifndef WIT_EMBEDS_COIN
d111 1
a111 1
#define WIT_EMBEDS_COIN 1
@


1.39
log
@Revising the build process.
@
text
@d101 15
d117 1
a117 1
//             == 0  Disables code used during development
@


1.38
log
@App controlled opt implosion.
@
text
@a30 1
#  define OPT_IMPLODE
a69 1
#define OPT_IMPLODE
a82 4
#if defined(__GNUC__)
#define OPT_IMPLODE
#endif

a147 2
#undef OPT_IMPLODE

a210 8
// Non-OPT_IMPLODE Test
//
// Make the following line a non-comment to test WIT in non-OPT_IMPLODE mode.
//------------------------------------------------------------------------------

// #undef OPT_IMPLODE
           
//------------------------------------------------------------------------------
@


1.37
log
@App controlled opt implode.
@
text
@a226 17
// OPT_IMP_MODE
//
// true, iff the build is in opt implosion mode, i.e.,
// optimizing implosion is allowed.
//------------------------------------------------------------------------------

#ifdef OPT_IMPLODE

#define OPT_IMP_MODE true

#else

#define OPT_IMP_MODE false

#endif

//------------------------------------------------------------------------------
@


1.36
log
@App controlled opt implosion.
@
text
@d225 17
@


1.35
log
@Updated the copyright date on all source files.
@
text
@d209 1
a209 1
// ANSCI c data structure time_t.  It will also the the string "Unknown"
@


1.34
log
@Updated release number to 7.0.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.33
log
@Removed class OslSolver.
@
text
@d123 1
a123 1
#define RELEASE_NO      "6.0"
@


1.32
log
@Cut-over to COIN-only mode.
@
text
@a246 6
// All builds are to be in COIN mode.
//------------------------------------------------------------------------------

#define COIN_BUILD

//------------------------------------------------------------------------------
@


1.31
log
@Added some pragmas to windows build to reduce warning messages
@
text
@d247 6
@


1.30
log
@[shared-resource pegging]
Update to error exceptions.
@
text
@d75 7
@


1.29
log
@Error exceptions.
@
text
@a75 9
#if _MSC_VER <= 1200

#define NO_ERROR_EXC
   //
   // The error exception capability is not available on MS Visual C++ V6 or
   // less.

#endif

d219 22
@


1.28
log
@Made the WitErrorExc capability unavailable on MS Visual C++ V6.
@
text
@d79 3
@


1.27
log
@Setting bad_alloc behavior for the MS compiler.
@
text
@d31 1
a31 4
// osl does not support 64 bit addressing
//#  if !defined(__64BIT__)
#    define OPT_IMPLODE
//#  endif
d76 4
d82 1
@


1.26
log
@[multi-thread]
@
text
@d76 1
@


1.25
log
@[multi-thread]
@
text
@a38 2
// Platform lacks ansi function strerror
#define NO_ANSI_STRERROR
@


1.24
log
@[multi-thread]
@
text
@a26 2
// Supported at one time, but not since the C++ conversion
//   VM, MVS
a28 14
#ifdef VM
#define C370
#define EXT_SYM_LEN_7
#define VECTOR_HARDWARE
#define OPT_IMPLODE
#endif

#ifdef MVS
#define C370
#define EXT_SYM_LEN_7
#define VECTOR_HARDWARE
#define OPT_IMPLODE
#endif

d194 1
a194 1
// The WIT_DLLEXPORT will not be defined by API users.
@


1.23
log
@Removed #define TRY_THROW_CATCH_NOT_SUPPORTED.
@
text
@a17 2
#include <includes.h>

@


1.22
log
@Modified non-OPT_IMPLODE mode.
@
text
@a32 3
// TRY_THROW_CATCH_NOT_SUPPORTED  :  Define for platforms without try,
//                                   throw, and catch support.

a60 1
#define TRY_THROW_CATCH_NOT_SUPPORTED
a78 1
#define TRY_THROW_CATCH_NOT_SUPPORTED
@


1.21
log
@modified to build OPT_IMPLODE on aix 64 bit
@
text
@a174 1
#ifdef OPT_IMPLODE
a175 1
#endif
d238 8
@


1.20
log
@Turned off OPT_IMPLODE in 64 bit mode.
@
text
@d53 1
a53 1
#  if !defined(__64BIT__)
d55 1
a55 1
#  endif
@


1.19
log
@Added some optional warnings on Linux.
@
text
@d52 2
a53 2
// // osl does not support 64 bit addressing
// #  if !defined(__64BIT__)
d55 1
a55 1
// #  endif
@


1.18
log
@Removed NO_AND_OR_NOT from the Linux stanza in defines.h
Added logic to test for either linux or zlinux platform in appl.mk
@
text
@d91 1
a91 1
#if __BCPLUSPLUS__
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@a107 1
#define NO_AND_OR_NOT
@


1.16
log
@Minor changes relating to the Linux port.
@
text
@d122 2
a124 2
#define or  ||
#define and &&
@


1.15
log
@added stanza for gnuc
@
text
@d96 1
d98 1
d100 1
d103 1
a103 3
#define not !
#define or  ||
#define and &&
a104 1
#endif
d108 1
a108 3
#define not !
#define or  ||
#define and &&
d117 9
@


1.14
log
@modified to build witOptImplode when doing AIX 64 bit build
@
text
@d106 7
@


1.13
log
@Fixed the "twoLevelLotSizes" bug that was discovered on windows.
@
text
@d52 2
a53 2
// osl does not support 64 bit addressing
#  if !defined(__64BIT__)
d55 1
a55 1
#  endif
@


1.12
log
@updated to compile on windows
@
text
@a35 4
#ifdef AS400
#define VA_LIST_ASSIGNMENT_BY_MEMCPY
#endif

a40 1
#define VA_LIST_ASSIGNMENT_BY_MEMCPY
a47 1
#define VA_LIST_ASSIGNMENT_BY_MEMCPY
a84 1
#define VA_LIST_ASSIGNMENT_BY_MEMCPY
d101 1
a101 1
#define or ||
@


1.11
log
@Internal changes.
@
text
@d106 5
@


1.10
log
@modications to change rogueWave tools.h++ to STL
@
text
@d141 1
a141 1
#if    ! DEVELOPMENT                 
@


1.9
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d105 1
@


1.9.2.1
log
@Added pragma to surpress MS compler warnings
@
text
@a104 1
#pragma warning(disable:4786)
@


1.8
log
@OSL V3 cut-over: Optimizing implosion now uses OSL V3.
@
text
@a228 25
//------------------------------------------------------------------------------
// If OSL_VERSION == 2, WIT uses OSL V. 2.
// If OSL_VERSION == 3, WIT uses OSL V. 3.
// Otherwise,           a syntax error is generated.
//
// The default value is 3.
//------------------------------------------------------------------------------

#ifndef OSL_VERSION

#define OSL_VERSION 3

#endif


#if OSL_VERSION != 2
#if OSL_VERSION != 3

Invalid_OSL_Version
   //
   // Deliberate syntax error.

#endif
#endif

@


1.7
log
@Began implementation of optimizing implosion with OSL V3.
@
text
@d234 1
a234 1
// The default value is 2.
d239 1
a239 1
#define OSL_VERSION 2
@


1.6
log
@modifed to work with new makedepend
@
text
@d223 1
a223 1
// on a back level of AIX which has a different sizeof(time_t) when
d230 23
@


1.5
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d140 2
a141 1
#if    ! DEVELOPMENT                 // Always disguise non-develoment code
@


1.4
log
@Implemented timing wrap-around adjustment.
@
text
@d57 1
a57 7
#  define MCLOCK
#  if defined(AIX_VERSION)
#    if AIX_VERSION >= 430
#      undef MCLOCK
#      define AIX_CLOCK
#    endif
#  endif
d68 1
@


1.3
log
@Replaced "PRM" with "WIT".
Replaced "Production Resource Manager" with "Watson Implosion Technology".
Upgraded release # to 6.0.
@
text
@d61 1
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d136 1
a136 1
#define RELEASE_NO      "5.0"
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
