head	1.19;
access;
symbols
	sce_5_01_20080919:1.15
	latest_sce_4_20_20060523:1.15.0.2
	sce_4_20_20060523:1.15
	latest_sce4_20_OSL:1.14.0.8
	sce_4_20_OSL:1.14
	sce_410_withVa:1.14
	sce_4_05_20040511:1.14
	sce_4_00_20040201:1.14
	nextGenBranch:1.14.0.6
	nextGenRoot:1.14
	sce_3_30_20030627:1.14
	EndRw-branch:1.14.0.4
	Root-of-EndRw:1.14
	rwToStl:1.14.0.2
	latest_sce_3_10_20010924:1.12.0.2
	sce_3_10_20010924:1.12
	latest_sce_3_00_20010601:1.9.0.2
	sce_3_00_20010601:1.9
	latest_sce_2_31_20010308:1.7.0.2
	sce_2_31_20010308:1.7
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2011.09.28.23.50.03;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.24.00.28.27;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.30.20.18.04;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.29.19.56.42;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.04.19.14.58;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.07.20.15.03;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.25.16.08.19;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.18.21.44.45;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.20.20.07.06;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.25.14.53.27;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.10.21.59.35;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.22.16.18.27;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.20.20.08.37;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.05.19.05.31;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.48;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.21.20.03.27;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.52;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.30;	author wit;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ReqPtMgrH
#define ReqPtMgrH

//------------------------------------------------------------------------------
// Header file: "ReqPtMgr.h"
//
// Contains the declaration of class ReqPtMgr. 
//------------------------------------------------------------------------------

#include <ObjStack.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class ReqPtMgr
//
// ReqPt Manager.
// Responsible for managing the ReqPts used by a Selector.
//
// Implemented in Selection.C.
//------------------------------------------------------------------------------

class WitReqPtMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitReqPtMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitReqPtMgr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitReqPt * myReqPt (WitPart * thePart, WitPeriod thePer);
         //
         // myReqPt (thePart, thePer) is the ReqPt for thePart in thePer,
         // constructing it, if necessary.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void reset ();
         //
         // Deletes all ReqPts.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitReqPtMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitPart, WitReqPt> myReqPts_;
         //
         // myReqPts_.myPtrAt (thePart, thePer) is the ReqPt for thePart in 
         // thePer, or NULL, if there is none.

      WitObjStack <WitReqPt *> allocedSlots_;
         //
         // Non-NULL slots in myReqPts_.

      WitObjStack <WitReqPt> unusedPoints_;
         //
         // The ReqPts not currently in use.
   };

#endif
@


1.18
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.17
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d16 1
a16 1
// Contains the declaration of class ReqPtMgr.
d32 2
a33 2
{
public:
d35 3
a37 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d39 3
a41 3
WitReqPtMgr (WitProblem * theProblem);
//
// ProbAssoc <<< theProblem.
d43 3
a45 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d47 1
a47 1
~WitReqPtMgr ();
d49 3
a51 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d53 4
a56 4
WitReqPt * myReqPt (WitPart * thePart, WitPeriod thePer);
//
// myReqPt (thePart, thePer) is the ReqPt for thePart in thePer,
// constructing it, if necessary.
d58 3
a60 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d62 3
a64 3
void reset ();
//
// Deletes all ReqPts.
d66 1
a66 1
private:
d68 3
a70 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d72 1
a72 1
noCopyCtorAssign (WitReqPtMgr);
d74 3
a76 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d78 4
a81 4
WitPtrSched <WitPart, WitReqPt> myReqPts_;
//
// myReqPts_.myPtrAt (thePart, thePer) is the ReqPt for thePart in
// thePer, or NULL, if there is none.
d83 3
a85 3
WitObjStack <WitReqPt *> allocedSlots_;
//
// Non-NULL slots in myReqPts_.
d87 4
a90 4
WitObjStack <WitReqPt> unusedPoints_;
//
// The ReqPts not currently in use.
};
@


1.16
log
@Selection Reuse.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d16 1
a16 1
// Contains the declaration of class ReqPtMgr. 
d32 2
a33 2
   {
   public:
d35 3
a37 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d39 3
a41 3
      WitReqPtMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.
d43 3
a45 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d47 1
a47 1
      ~WitReqPtMgr ();
d49 3
a51 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d53 4
a56 4
      WitReqPt * myReqPt (WitPart * thePart, WitPeriod thePer);
         //
         // myReqPt (thePart, thePer) is the ReqPt for thePart in thePer,
         // constructing it, if necessary.
d58 3
a60 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d62 3
a64 3
      void reset ();
         //
         // Deletes all ReqPts.
d66 1
a66 1
   private:
d68 3
a70 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d72 1
a72 1
      noCopyCtorAssign (WitReqPtMgr);
d74 3
a76 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d78 4
a81 4
      WitPtrSched <WitPart, WitReqPt> myReqPts_;
         //
         // myReqPts_.myPtrAt (thePart, thePer) is the ReqPt for thePart in 
         // thePer, or NULL, if there is none.
d83 3
a85 3
      WitObjStack <WitReqPt *> allocedSlots_;
         //
         // Non-NULL slots in myReqPts_.
d87 4
a90 4
      WitObjStack <WitReqPt> unusedPoints_;
         //
         // The ReqPts not currently in use.
   };
@


1.15
log
@Updated the copyright date on all source files.
@
text
@d28 1
a28 1
// Implemented in MultiSel.C.
@


1.14
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.13
log
@Continued preliminary work on single source.
@
text
@a18 1
#include <Part.h>
a20 1
#include <Assoc.h>
@


1.12
log
@Initial implementation of pegging.
@
text
@d19 1
@


1.11
log
@Implemented class template PtrSched <*, *>.
@
text
@d79 1
a79 1
      WitPtrSched <WitPart, WitReqPt> myReqPtSched_;
d81 1
a81 1
         // myReqPtSched_.ptrAt (thePart, thePer) is the ReqPt for thePart in 
d86 1
a86 1
         // Non-NULL slots in myReqPtSched_.
@


1.10
log
@Converted several generic classes into class templates.
@
text
@d20 2
a21 1
#include <Schedule.h>
a75 13
      // Private access functions.
      //------------------------------------------------------------------------

      inline WitReqPt * & myReqPtRef (WitPart * thePart, WitPeriod thePer)
            //
            // myReqPtRef (thePart, thePer) is the ReqPt for thePart in thePer, 
            // or NULL, if there is none.
            // Returns an lvalue.
         {
         return (WitReqPt * &) myReqPtTl_ (thePart)[thePer];
         }

      //------------------------------------------------------------------------
d79 1
a79 1
      WitSchedule (WitPart, WitTlObjPtr) myReqPtTl_;
d81 2
a82 1
         // Data for myReqPt (Part *, Period).
d86 1
a86 1
         // Non-NULL slots in myReqPtRef (...).
@


1.9
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d95 1
a95 1
      WitObjStack (WitReqPtPtr) allocedSlots_;
d99 1
a99 1
      WitObjStack (WitReqPt) unusedPoints_;
@


1.8
log
@Continuing development of selection splitting.
@
text
@d91 1
a91 1
      WitSchedule (WitPart, WitTlPtr) myReqPtTl_;
@


1.7
log
@Further development of coarse selection splitting.
@
text
@d28 1
a28 1
// Implemented in Selector.C.
@


1.6
log
@Further development of coarse selection splitting.
@
text
@d19 1
a19 1
#include <Stack.h>
@


1.5
log
@Some minor modifications.
@
text
@d91 1
a91 1
      WitSchedule (WitPart, WitTypelessPtr) myReqPtTl_;
@


1.4
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <DynStack.h>
d95 1
a95 1
      WitObjDynStack (WitReqPtPtr) allocedSlots_;
d99 1
a99 1
      WitObjDynStack (WitReqPt) unusedPoints_;
@


1.3
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d72 1
a72 3
      copyCtorAndAssignment (WitReqPtMgr);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d97 1
a97 1
      WitDynStack (WitReqPtPtr) allocedSlots_;
d101 1
a101 1
      WitDynStack (WitReqPt) unusedPoints_;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
