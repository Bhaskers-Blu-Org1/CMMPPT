head	1.24;
access;
symbols
	sce_5_01_20080919:1.20
	latest_sce_4_20_20060523:1.10.0.2
	sce_4_20_20060523:1.10
	latest_sce4_20_OSL:1.9.0.2
	sce_4_20_OSL:1.9
	sce_410_withVa:1.9
	sce_4_05_20040511:1.9
	sce_4_00_20040201:1.7
	nextGenBranch:1.7.0.2
	nextGenRoot:1.7
	sce_3_30_20030627:1.7
	EndRw-branch:1.6.0.4
	Root-of-EndRw:1.6
	rwToStl:1.6.0.2
	latest_sce_3_10_20010924:1.4.0.2
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.3.0.4
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.49.39;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.28.01;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.17.43;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.09.09.20.20.32;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.25.19.37.57;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.02.25.16.36.33;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.02.22.21.36.10;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.01.07.23.51.49;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.29.16.24.43;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.11.28.20.40.33;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.10.22.19.58.52;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.10.18.23.14.44;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.10.17.14.58.47;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.24.21.22.03;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.02.17.34.04;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.11.16.36.18;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.27.21.00.29;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.13.23.06.29;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.22.14.32.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.18.14.02.37;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.25.16.08.17;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.44;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.26;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef NodeH
#define NodeH

//------------------------------------------------------------------------------
// Header file: "Node.h"
//
// Contains the declaration of class Node.
//------------------------------------------------------------------------------

#include <DelComp.h>
#include <Str.h>

//------------------------------------------------------------------------------
// Class Node.
//
// A Node in the BOM graph.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       Node
//          Part
//             Material
//             Capacity
//          Operation
//
// Implemented in Component.C.
//------------------------------------------------------------------------------

class WitNode: public WitDelComp
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitNode ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, nodeName)

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      inline int mappingIndex () const
         {                                                       
         return nodeIndex ();
         }                                                       
         //
         // Mapping index: See Mapping.h.

      inline static void verifyMappingIndex (WitNode * &)
         {
         }
         //
         // See decMappingIndex in macs.h.

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storeCompMgrNodeName (const char *);
         //
         // Valid only when myCompMgr is setting a nodeName.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual WitNode * thisNode ();
         //
         // Overrides from class Component.

      static const WitString & nodeName (const WitNode * theNode);
         //
         // Returns theNode->nodeName ();

      virtual int nodeIndex () const = 0;
         //
         // Base class function.
         // Mapping index for Nodes.
         // Note the value returned depends on the # of Parts in myProblem ().

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitNode (const char * theName, WitCompMgr * theCompMgr);
         //
         // nodeName_ <-- theName.
         // Component <<< theCompMgr.

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      void copyAttrsFrom (WitNode * theNode);
         //
         // Copies the input attributes of theNode into this Node.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitNode);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      WitString nodeName_;
         //
         // The string that uniquely identifies this Node, among Parts or
         // Operations (a Part may have the same name as an Operation.)
   };

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d41 2
a42 73
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitNode ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (const WitString &, nodeName)

//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------

inline int mappingIndex () const
{
return nodeIndex ();
}
//
// Mapping index: See Mapping.h.

inline static void verifyMappingIndex (WitNode * &)
{
}
//
// See decMappingIndex in macs.h.

static int nInstances (WitProblem *);

//------------------------------------------------------------------------
// store<Activity><Attr> functions.
// Each of these functions sets the value of indicated attribute to the
// value of the argument.
// Each function is only valid when the indicated activity is being
// performed.
//------------------------------------------------------------------------

void storeCompMgrNodeName (const char *);
//
// Valid only when myCompMgr is setting a nodeName.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual WitNode * thisNode ();
//
// Overrides from class Component.

static const WitString & nodeName (const WitNode * theNode);
//
// Returns theNode->nodeName ();

virtual int nodeIndex () const = 0;
//
// Base class function.
// Mapping index for Nodes.
// Note the value returned depends on the # of Parts in myProblem ().

protected:

//------------------------------------------------------------------------
// Protected member functions.
//------------------------------------------------------------------------
d44 113
a156 42
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitNode (const char * theName, WitCompMgr * theCompMgr);
//
// nodeName_ <-- theName.
// Component <<< theCompMgr.

//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------

virtual void writeDataAttrs ();
//
// Override from class Component.

void copyAttrsFrom (WitNode * theNode);
//
// Copies the input attributes of theNode into this Node.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitNode);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Data set by the constructor.
//------------------------------------------------------------------------

WitString nodeName_;
//
// The string that uniquely identifies this Node, among Parts or
// Operations (a Part may have the same name as an Operation.)
};
@


1.21
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d41 73
a113 2
   {
   public:
d115 42
a156 113
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitNode ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, nodeName)

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      inline int mappingIndex () const
         {                                                       
         return nodeIndex ();
         }                                                       
         //
         // Mapping index: See Mapping.h.

      inline static void verifyMappingIndex (WitNode * &)
         {
         }
         //
         // See decMappingIndex in macs.h.

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storeCompMgrNodeName (const char *);
         //
         // Valid only when myCompMgr is setting a nodeName.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual WitNode * thisNode ();
         //
         // Overrides from class Component.

      static const WitString & nodeName (const WitNode * theNode);
         //
         // Returns theNode->nodeName ();

      virtual int nodeIndex () const = 0;
         //
         // Base class function.
         // Mapping index for Nodes.
         // Note the value returned depends on the # of Parts in myProblem ().

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitNode (const char * theName, WitCompMgr * theCompMgr);
         //
         // nodeName_ <-- theName.
         // Component <<< theCompMgr.

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      void copyAttrsFrom (WitNode * theNode);
         //
         // Copies the input attributes of theNode into this Node.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitNode);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      WitString nodeName_;
         //
         // The string that uniquely identifies this Node, among Parts or
         // Operations (a Part may have the same name as an Operation.)
   };
@


1.20
log
@Object name change.
@
text
@d37 1
a37 1
// Implemented in Compo.C.
@


1.19
log
@Object name change.
@
text
@a143 10
      static WitCompMgr * preconstruct (
            const char * theName,
            WitCompMgr * theCompMgr);
         //
         // The args are the same of those of the ctor.
         // Performs the follow actions at the beginning of construction:
         // * Validates the args.
         // * Notifies the Problem.
         // * Returns theCompMgr.

@


1.18
log
@Object name changing.
@
text
@d80 5
a84 1
      // "Set" functions.
d87 1
a87 1
      void setNodeName (const char *);
d89 1
a89 1
         // Valid only when called from CompMgr.
@


1.17
log
@Stochastic Implosion
@
text
@d80 8
d158 1
a158 1
      const WitString nodeName_;
@


1.16
log
@Stochastic Implosion
@
text
@a86 4
      virtual int stageIndex ();
         //
         // Overrides from class DelComp.

@


1.15
log
@Stochastic Implosion
@
text
@d87 4
@


1.14
log
@Stochastic Implosion
@
text
@d83 1
a83 2
      virtual int       stageIndex ();
      virtual WitNode * thisNode   ();
@


1.13
log
@Stochastic Implosion
@
text
@d83 2
a84 2
      virtual int       stageNo  ();
      virtual WitNode * thisNode ();
@


1.12
log
@Stochastic Implosion
@
text
@d83 1
d86 1
a86 1
         // Override from class Component.
@


1.11
log
@Stochastic Implosion
@
text
@d83 4
d89 1
a89 1
         // Return theNode->nodeName ();
@


1.10
log
@Updated the copyright date on all source files.
@
text
@a64 3
            //
            // Mapping index: See Mapping.h.
            //
d68 2
a69 2

#if DEBUG_MODE
a71 3
            //
            // See decMappingIndex in macs.h.
            //
d74 2
a75 2

#endif
@


1.9
log
@Double Precision.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.8
log
@Double Precision.
@
text
@a98 4
      static int totNodes ();
         //
         // Returns the total # of Nodes in the program processes.

a146 4

      static int totNodes_;
         //
         // The total # of Nodes in the program processes.
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@d99 4
d151 4
@


1.6
log
@Continued implementation of object iteration.
@
text
@d61 1
a61 5
      // Other public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Mapping functions: See Mapping.h.
d82 2
@


1.5
log
@Began implementation of object iteration.
@
text
@a48 9
      // Constructor functions.
      //------------------------------------------------------------------------

      WitNode (const char * theName, WitCompMgr * theCompMgr);
         //
         // nodeName_ <-- theName.
         // Component <<< theCompMgr.

      //------------------------------------------------------------------------
a90 14
      inline WitPart * asaPart ()
         {
         witAssert (isaPart ());

         return (WitPart *) this;
         }

      inline WitOperation * asanOperation ()
         {
         witAssert (isanOperation ());

         return (WitOperation *) this;
         }

d101 9
a109 5
      virtual WitBoolean isaPart ();
         //
         // Base class function.
         // Returns TRUE iff this Node is actually a Part.
         // The base class implementation returns FALSE.
d111 1
a111 1
      virtual WitBoolean isanOperation ();
d113 2
a114 5
         // Base class function.
         // Returns TRUE iff this Node is actually an Operation.
         // The base class implementation returns FALSE.

   protected:
d117 1
a117 1
      // Protected member functions.
@


1.4
log
@Initial implementation of pegging.
@
text
@d19 2
a20 1
#include <Global.h>
@


1.3
log
@Refactoring for selection splitting.
@
text
@d16 1
a16 1
// Contains the declaration of class
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d155 1
a155 3
      copyCtorAndAssignment (WitNode);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
