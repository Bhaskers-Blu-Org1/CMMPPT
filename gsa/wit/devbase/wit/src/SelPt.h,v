head	1.69;
access;
symbols
	sce_5_01_20080919:1.56
	latest_sce_4_20_20060523:1.56.0.2
	sce_4_20_20060523:1.56
	latest_sce4_20_OSL:1.55.0.2
	sce_4_20_OSL:1.55
	sce_410_withVa:1.55
	sce_4_05_20040511:1.39
	sce_4_00_20040201:1.39
	nextGenBranch:1.38.0.2
	nextGenRoot:1.38
	sce_3_30_20030627:1.38
	EndRw-branch:1.32.0.4
	Root-of-EndRw:1.32
	rwToStl:1.32.0.2
	latest_sce_3_10_20010924:1.14.0.2
	sce_3_10_20010924:1.14
	latest_sce_3_00_20010601:1.4.0.2
	sce_3_00_20010601:1.4;
locks; strict;
comment	@ * @;


1.69
date	2011.09.28.23.50.10;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2011.09.24.00.28.36;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2011.08.30.20.18.09;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2010.07.27.23.18.55;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2010.07.16.22.37.43;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2010.07.16.22.26.42;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2010.07.16.20.21.21;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2010.07.13.17.41.29;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2010.07.02.19.15.50;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2010.07.02.18.53.10;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2010.07.01.22.41.21;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2010.06.29.19.56.42;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2010.06.24.23.37.33;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2006.05.02.17.34.12;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2005.01.15.00.20.08;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2005.01.06.20.34.10;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2005.01.05.19.32.45;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2004.12.28.22.34.27;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2004.12.28.19.21.19;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2004.12.22.19.57.26;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2004.12.21.22.13.49;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2004.12.20.21.13.10;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2004.12.17.21.53.01;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2004.12.16.23.35.17;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2004.12.15.23.50.11;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2004.12.14.22.37.11;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2004.12.13.20.42.10;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2004.12.10.16.49.44;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2004.12.09.21.34.12;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2003.05.05.16.10.02;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2003.04.29.14.27.50;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2003.03.19.16.48.27;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2003.01.02.22.18.47;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2002.12.03.00.43.28;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2002.11.26.23.28.49;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2002.09.26.19.05.31;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2002.07.19.16.10.51;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2002.07.02.21.53.07;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2002.07.02.19.20.58;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.05.24.23.00.07;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.05.21.19.10.27;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.04.15.21.21.37;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.04.12.21.02.03;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2002.04.11.15.36.30;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.20.22.51.19;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.19.16.20.57;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.15.23.17.31;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2002.03.14.15.05.49;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.13.19.27.20;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.07.23.24.29;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.09.00.43.49;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.12.17.16.25.42;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.01.00.25.40;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.30.20.29.25;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.24.22.03.22;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.23.21.13.55;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.22.20.41.53;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.17.22.00.12;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.12.17.57.02;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.15.20.53.37;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.14.17.41.55;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.13.20.30.24;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.01.19.23.35;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.29.22.11.28;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.25.22.59.14;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.25.14.53.27;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.10.22.31.14;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.69
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SelPtH
#define SelPtH

//------------------------------------------------------------------------------
// Header file: "SelPt.h"
//
// Contains the declaration of class SelPt.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class SelPt
//
// "Selection Point"
// Represents a point in the problem at which a selection must be made.
//
// Class Hierarchy:
//
// SelPt
//    DetSelPt
//       MrPt
//       BaPt
//       MePt
//       SsrPt
//    PrSelPt
//
// Implemented in Selection.C.
//------------------------------------------------------------------------------

class WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      void attachSplitPt (WitSplitPt * theSplitPt);
         //
         // Associates theSplitPt with this SelPt.

      void detachSplitPt ();
         //
         // Makes this SelPt unassociated with any SplitPt.

      void recordFlowSS (double incFlowVol);
         //
         // See WitFlowMonitor::recordFlow.

      virtual WitSelMgr * mySelMgr () = 0;
         //
         // Returns the SelMgr for this SelPt.

      virtual void prtID () = 0;
         //
         // Prints info identifying this SelPt.

      virtual bool splittable () = 0;
         //
         // Returns true, iff selection splitting is to be performed at this
         // SelPt.

      virtual void getSortData (WitPart * & thePart, WitPeriod & thePer) = 0;
         //
         // Sets the args to the Part and Period associated with this SelPt, for
         // determining the lowest ZeroPt in sel-split.

      virtual WitSelCand * newSelCand () = 0;
         //
         // Constructs and returns a new instance of a class derived from
         // SelCand, where the derived class corresponds to the derived class of
         // which this SelPt is an instance.
         // Sets the SelCand to represent the current selection at this SelPt.
         // Ownership of the SelCand is transfered to the calling function.
         // This is an application of the "factory method" design pattern.

      virtual bool sglSrcMode ();
         //
         // Returns true, iff this SelPt is currently in sgl-src mode.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessNonNull (WitSplitPt *, mySplitPt)

      inline bool isSplit ()
         {
         return (mySplitPt_ != NULL);
         }

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSelPt ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSelPt ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void recSplit ();
         //
         // Records the fact that the selection at this SelPt is splitting,
         // if the derived class needs to do this.
         // The default behavior is no-op.

      virtual void recUnsplit ();
         //
         // Records the fact that the selection at this SelPt is unsplitting,
         // if the derived class needs to do this.
         // The default behavior is no-op.

      noCopyCtorAssign (WitSelPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSplitPt * mySplitPt_;
         //
         // If the selection for this SelPt is currently split, mySplitPt_ is
         // the SplitPt that represents the split; otherwise mySplitPt_ is NULL.
   };

#endif
@


1.68
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.67
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d41 2
a42 22
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

void attachSplitPt (WitSplitPt * theSplitPt);
//
// Associates theSplitPt with this SelPt.

void detachSplitPt ();
//
// Makes this SelPt unassociated with any SplitPt.

void recordFlowSS (double incFlowVol);
//
// See WitFlowMonitor::recordFlow.

virtual WitSelMgr * mySelMgr () = 0;
//
// Returns the SelMgr for this SelPt.
d44 101
a144 81
virtual void prtID () = 0;
//
// Prints info identifying this SelPt.

virtual bool splittable () = 0;
//
// Returns true, iff selection splitting is to be performed at this
// SelPt.

virtual void getSortData (WitPart * & thePart, WitPeriod & thePer) = 0;
//
// Sets the args to the Part and Period associated with this SelPt, for
// determining the lowest ZeroPt in sel-split.

virtual WitSelCand * newSelCand () = 0;
//
// Constructs and returns a new instance of a class derived from
// SelCand, where the derived class corresponds to the derived class of
// which this SelPt is an instance.
// Sets the SelCand to represent the current selection at this SelPt.
// Ownership of the SelCand is transfered to the calling function.
// This is an application of the "factory method" design pattern.

virtual bool sglSrcMode ();
//
// Returns true, iff this SelPt is currently in sgl-src mode.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessNonNull (WitSplitPt *, mySplitPt)

inline bool isSplit ()
{
return (mySplitPt_ != NULL);
}

protected:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSelPt ();

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitSelPt ();

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

virtual void recSplit ();
//
// Records the fact that the selection at this SelPt is splitting,
// if the derived class needs to do this.
// The default behavior is no-op.

virtual void recUnsplit ();
//
// Records the fact that the selection at this SelPt is unsplitting,
// if the derived class needs to do this.
// The default behavior is no-op.

noCopyCtorAssign (WitSelPt);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitSplitPt * mySplitPt_;
//
// If the selection for this SelPt is currently split, mySplitPt_ is
// the SplitPt that represents the split; otherwise mySplitPt_ is NULL.
};
@


1.66
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d41 22
a62 2
   {
   public:
d64 81
a144 101
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      void attachSplitPt (WitSplitPt * theSplitPt);
         //
         // Associates theSplitPt with this SelPt.

      void detachSplitPt ();
         //
         // Makes this SelPt unassociated with any SplitPt.

      void recordFlowSS (double incFlowVol);
         //
         // See WitFlowMonitor::recordFlow.

      virtual WitSelMgr * mySelMgr () = 0;
         //
         // Returns the SelMgr for this SelPt.

      virtual void prtID () = 0;
         //
         // Prints info identifying this SelPt.

      virtual bool splittable () = 0;
         //
         // Returns true, iff selection splitting is to be performed at this
         // SelPt.

      virtual void getSortData (WitPart * & thePart, WitPeriod & thePer) = 0;
         //
         // Sets the args to the Part and Period associated with this SelPt, for
         // determining the lowest ZeroPt in sel-split.

      virtual WitSelCand * newSelCand () = 0;
         //
         // Constructs and returns a new instance of a class derived from
         // SelCand, where the derived class corresponds to the derived class of
         // which this SelPt is an instance.
         // Sets the SelCand to represent the current selection at this SelPt.
         // Ownership of the SelCand is transfered to the calling function.
         // This is an application of the "factory method" design pattern.

      virtual bool sglSrcMode ();
         //
         // Returns true, iff this SelPt is currently in sgl-src mode.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessNonNull (WitSplitPt *, mySplitPt)

      inline bool isSplit ()
         {
         return (mySplitPt_ != NULL);
         }

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSelPt ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSelPt ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void recSplit ();
         //
         // Records the fact that the selection at this SelPt is splitting,
         // if the derived class needs to do this.
         // The default behavior is no-op.

      virtual void recUnsplit ();
         //
         // Records the fact that the selection at this SelPt is unsplitting,
         // if the derived class needs to do this.
         // The default behavior is no-op.

      noCopyCtorAssign (WitSelPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSplitPt * mySplitPt_;
         //
         // If the selection for this SelPt is currently split, mySplitPt_ is
         // the SplitPt that represents the split; otherwise mySplitPt_ is NULL.
   };
@


1.65
log
@Selection Recovery
@
text
@a90 13
      virtual void printRecoverO ();
         //
         // Does printing for recoverInitSeO ().
         // To be called optionally just before calling recoverInitSeO ().
         // (Old approach)
         // Default implementation: fatal error.

      virtual void recoverInitSeO ();
         //
         // Recovers the initial selection of this SelPt.
         // (Old approach)
         // Default implementation: fatal error.

a115 11
      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void recAlteratOld ();
         //
         // Records the fact that the selection configuration is being altered
         // at this SelPt.
         // (Used in selection recovery.)
         // (Old approach)

@


1.64
log
@Selection Recovery
@
text
@d133 1
a133 1
      void recAlteration ();
d138 1
@


1.63
log
@Selection Recovery
@
text
@d91 1
a91 1
      virtual void printRecovery () = 0;
d93 4
a96 2
         // Does printing for recoverInitSel ().
         // To be called optionally just before calling recoverInitSel ().
d98 1
a98 1
      virtual void recoverInitSel () = 0;
d101 2
@


1.62
log
@Selection Recovery.
@
text
@d35 1
a35 1
//    PrPt
@


1.61
log
@Selection Recovery.
@
text
@a34 1
//       PoPt
d91 1
a91 1
      virtual void recoverInitSel () = 0;
d93 2
a94 1
         // Reverts this SelPt to its initial selection.
d96 1
a96 1
      virtual void prtRecInitSel () = 0;
d98 1
a98 2
         // Does printing for recoverInitSel ().
         // To be called optionally just before calling recoverInitSel ().
@


1.60
log
@Selection recovery.
@
text
@d92 1
a92 1
      virtual void recoverInitSel ();
a94 1
         // Default behavior: fatal error.
d96 1
a96 1
      virtual void prtRecInitSel ();
a99 1
         // Default behavior: fatal error.
@


1.59
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@d92 1
a92 1
      virtual void restoreInitSel ();
d94 1
a94 1
         // Restores this SelPt to its initial selection.
d97 1
a97 1
      virtual void prtRestInitSel ();
d99 2
a100 2
         // Does printing for restoreInitSel ().
         // To be called optionally just before calling restoreInitSel ().
@


1.58
log
@Selection Reuse.
@
text
@d136 1
a136 1
         // (Used in selection reuse.)
@


1.57
log
@Selection reuse.
@
text
@d38 1
a38 1
// Implemented in MultiSel.C.
d97 6
d128 10
@


1.56
log
@Updated the copyright date on all source files.
@
text
@d92 5
@


1.55
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.54
log
@Low-Pri Prop-Rt.
@
text
@a60 4
      virtual void printSelection () = 0;
         //
         // Prints the selection for this SelPt.

@


1.53
log
@Low-Pri Prop-Rt.
@
text
@a77 5
      virtual void restoreSelTo (WitSelCand * theSelCand) = 0;
         //
         // Restores the selection at this SelPt to that represented by
         // theSelCand.

@


1.52
log
@Low-Pri Prop-Rt.
@
text
@d134 3
a136 1
         // Records the fact that the selection at this SelPt is splitting.
d140 3
a142 1
         // Records the fact that the selection at this SelPt is unsplitting.
@


1.51
log
@Low-Pri Prop-Rt.
@
text
@d78 5
@


1.50
log
@Low-Pri Prop-Rt.
@
text
@a60 5
      virtual bool hasResAlt () = 0;
         //
         // true, iff this SelPt currently has a selection and an 
         // shortage-resolving alternative to the current selection exists.

@


1.49
log
@Low-Pri Prop-Rt.
@
text
@d36 1
@


1.48
log
@Low-Pri Prop-Rt.
@
text
@a86 4
      virtual void tempAlterSel () = 0;
         //
         // Temporarily alters the selection for this SelPt.

@


1.47
log
@Low-Pri Prop-Rt.
@
text
@a47 4
      void setPending (bool);
         //
         // "Set" function for pending_.

a64 4
      virtual void alterSelection () = 0;
         //
         // Alters the selection for this SelPt.

a107 1
      accessFunc    (bool,         pending)
a148 4
      bool pending_;
         //
         // true, iff the configuration is to be altered at this SelPt.

@


1.46
log
@Low-Pri Prop-Rt.
@
text
@d30 6
a35 5
//    MrPt
//    BaPt
//    MePt
//    SsrPt
//    PoPt
@


1.45
log
@Low-Pri Prop-Rt.
@
text
@d98 1
a98 1
      virtual void setToMyCurSel (WitSelCand * theSelCand) = 0;
d100 6
a105 1
         // Sets theSelCand to represent the current selection at this SelPt.
@


1.44
log
@Low-Pri Prop-Rt.
@
text
@a97 4
      virtual void restoreSel (WitSelCand * theSelCand) = 0;
         //
         // Restores the selection for this SelPt to theSelCand.

@


1.43
log
@Low-Pri Prop-Rt.
@
text
@d102 1
a102 1
      virtual void setToCurSel (WitSelCand * theSelCand) = 0;
@


1.42
log
@Low-Pri Prop-Rt.
@
text
@a83 5
      virtual WitSelCand * curSelCand () = 0;
         //
         // Returns the currently selected SelCand for this SelPt, if any;
         // otherwise NULL.

d102 4
@


1.41
log
@Low-Pri Prop-Rt.
@
text
@a136 10
      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void select (WitSelCand * theSelCand);
         //
         // Tells this SelPt to select theSelCand.

      accessFunc (WitSelCand *, selSelCand)

a156 5
      WitSelCand * selSelCand_;
         //
         // The currently selected SelCand for this SelPt, if any; otherwise
         // NULL.

@


1.40
log
@Low-Pri Prop-Rt.
@
text
@a30 1
//    PoPt
d34 1
@


1.39
log
@Continued implementation of PIP.
@
text
@d31 1
d84 5
a114 1
      accessFunc    (WitSelCand *, selSelCand)
d145 2
@


1.38
log
@Continued implementation of proportionate routing.
@
text
@d38 1
a38 1
class WitSelPt: public WitUtil
@


1.37
log
@Continued implementation of proportionate routing.
@
text
@a92 5
      virtual WitPeriod myPeriod ();
         //
         // If there is a period associated with this SelPt, it is returned;
         // otherwise, a fatal error is issued.

@


1.36
log
@Continued implementation of proportionate routing.
@
text
@d58 4
d150 8
@


1.35
log
@Internal changes.
@
text
@a105 10
      virtual WitPart * myPmrPart ();
         //
         // If this SelPt is actually an MrPt for PMR, this function returns
         // the corrsponding Part. Otherwise returns NULL.

      virtual WitBomEntry * myCmrBomEnt ();
         //
         // If this SelPt is actually an MrPt for CMR, this function returns
         // the corrsponding BomEntry. Otherwise returns NULL.

@


1.34
log
@Continued implementation of single-source by the new algorithm.
@
text
@d46 1
a46 1
      void setPending (WitBoolean);
d58 1
a58 1
      virtual WitBoolean hasResAlt () = 0;
d60 1
a60 1
         // TRUE, iff this SelPt currently has a selection and an 
d79 1
a79 1
      virtual WitBoolean splittable () = 0;
d81 1
a81 1
         // Returns TRUE, iff selection splitting is to be performed at this
d102 1
a102 1
      virtual WitBoolean sglSrcMode ();
d104 1
a104 1
         // Returns TRUE, iff this SelPt is currently in sgl-src mode.
d121 1
a121 1
      accessFunc    (WitBoolean,   pending)
d124 1
a124 1
      inline WitBoolean isSplit ()
d168 1
a168 1
      WitBoolean pending_;
d170 1
a170 1
         // TRUE, iff the configuration is to be altered at this SelPt.
@


1.33
log
@Continued implementation of single-source by the new algorithm.
@
text
@d87 1
a87 1
         // determining the lowest ZeroPt.
@


1.32
log
@Began implementation of multi-level lot sizes.
@
text
@d102 4
@


1.31
log
@Continued implementation of Single-Source.
@
text
@d30 1
a30 2
//    MrPt <Pmr>
//    MrPt <Cmr>
d104 2
a105 2
         // If this SelPt is actually an MrPt <Pmr>, this function returns the
         // corrsponding Part. Otherwise returns NULL.
d109 2
a110 2
         // If this SelPt is actually an MrPt <Cmr>, this function returns the
         // corrsponding BomEntry. Otherwise returns NULL.
d137 1
a137 1
      ~WitSelPt ();
@


1.30
log
@Continued implementation of Single-Source.
@
text
@a147 5
      virtual void postSplit ();
         //
         // Takes actions appropriate just after mySplitPt_ has been detached,
         // if any.

@


1.29
log
@Continued implementation of Single-Source.
@
text
@d90 5
@


1.28
log
@Continued implementation of single-source.
@
text
@d100 1
a100 1
         // If this SelPt is actually an MrPart <Pmr>, this function returns the
d102 5
@


1.27
log
@Continued implementation of single-source.
@
text
@d59 5
d98 1
a98 1
      virtual WitBoolean sglSrcMode ();
d100 2
a101 2
         // Returns TRUE, iff this SelPt is currently in single-source mode.
         // Invalid, if single-source is not active.
@


1.26
log
@Continued implementation of sel-split for pen-exec.
@
text
@d93 5
@


1.25
log
@Continued implementation of sel-split for pen-exec.
@
text
@d80 1
a80 4
      virtual void getSortData (
            WitPart * & thePart,
            int &       caseIdx,
            WitPeriod & thePer) = 0;
d82 2
a83 2
         // Sets the args to the Part, case index and Period associated with
         // this SelPt, for determining the lowest ZeroPt.
@


1.24
log
@Continued implementation of sel-split for pen-exec.
@
text
@a79 4
      virtual WitPart * myFillPart () = 0;
         //
         // Returns the fill Part associated with this SelPt.

@


1.23
log
@Continued implementation of sel-split for pen-exec.
@
text
@d84 4
a87 1
      virtual WitPart * mySortPart () = 0;
d89 2
a90 6
         // Returns the Part to be used for sorting this SelPt.

      virtual int caseIndex () = 0;
         //
         // Returns an index for this SelPt's the selection case, for sorting
         // purposes. Higher index means higher in the BOM structure.
@


1.22
log
@Continued implementation of sel-split for pen-exec.
@
text
@d84 1
a84 1
      virtual WitPart * sortPart () = 0;
d93 1
a93 1
      virtual void tempAlterSel ();
a95 1
         // Issues a fatal error in cases not implemented.
d97 1
a97 1
      virtual void restoreSel (WitSelCand * theSelCand);
a99 1
         // Issues a fatal error in cases not implemented.
@


1.21
log
@Continued implementation of sel-split for pen-exec.
@
text
@d84 1
a84 1
      virtual int sspeIndex ();
d86 6
a91 2
         // Computes and returns an index to be used by sel-split for pen-exec.
         // Issues a fatal error in cases not implemented.
@


1.20
log
@Continued implementation of sel-split for pen-exec.
@
text
@d89 1
a89 1
      virtual void setMrSelPrevSel (WitBoolean theVal);
d91 7
a97 3
         // If this SelPt is actually an MrPt, prevSel of selSelCand in this
         // MrPt's period is set to theVal.
         // Otherwise a fatal error is issued.
@


1.19
log
@Continued implementation of sel-split for pen-exec.
@
text
@d89 1
a89 1
      virtual WitMrPt <Pmr> * myPmrPtIfAny ();
d91 3
a93 7
         // If this SelPt is actually an MrPt <Pmr>, the MrPt <Pmr> is returned;
         // otherwise NULL is returned.

      virtual WitMrPt <Cmr> * myCmrPtIfAny ();
         //
         // If this SelPt is actually an MrPt <Cmr>, the MrPt <Cmr> is returned;
         // otherwise NULL is returned.
@


1.18
log
@Continued implementation of sel-split fpr pen-exec.
@
text
@d84 6
a89 1
      virtual WitMrPt <Pmr> * myMrPtPmrIfAny ();
d92 5
@


1.17
log
@Fixed a subtle bug in sel-split for stock reallocation.
Continued implementation of sel-split for pen-exec.
@
text
@d84 5
@


1.16
log
@Implementing Selection Splitting for Stock Reallocation.
@
text
@d119 5
@


1.15
log
@Changed some comments.
@
text
@d34 1
@


1.14
log
@Refactoring for constrained stock reallocation.
@
text
@d137 1
a137 1
         // TRUE, iff the selection scheme is to be altered at this SelPt.
@


1.13
log
@Refactoring for constrained stock reallocation.
@
text
@d30 4
a33 4
//    MrSelPt <Pmr>
//    MrSelPt <Cmr>
//    BaSelPt
//    MeSelPt
@


1.12
log
@Refactoring for constrained stock reallocation.
@
text
@a78 8
      virtual void adjustSplitBound (
            WitSelCand * theSelCand, 
            double &     splitBound) = 0;
         //
         // Makes whatever adjustment to splitBound is appropriate when 
         // performing a split explosion to theSelCand.
         // Valid only in sel-split mode.

@


1.11
log
@Refactoring for constrained stock reallocation.
@
text
@a57 5
      virtual WitTlObj * selectedObj () = 0;
         //
         // Returns the object currently selected for this SelPt.
         // Asserts that there is a currently selected object.

d80 2
a81 2
            WitTlObj * theTlObj, 
            double &   splitBound) = 0;
d84 1
a84 1
         // performing a split explosion to theTlObj.
d95 1
a124 6

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSelCand *, selSelCand)
@


1.10
log
@Implemented selection splitting speed-up by partial allocation reuse.
@
text
@d30 2
a31 2
//    MrSelPt <PmrArgs>
//    MrSelPt <CmrArgs>
d122 14
d147 5
@


1.9
log
@Templatized consumption multi-route.
@
text
@d92 4
@


1.8
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@d30 2
a31 2
//    PmrSelPt
//    CmrSelPt
@


1.7
log
@Created class SelCand and classes derived from it.
@
text
@a21 6

typedef int WitCandIndex;
   //
   // An index into a candidate vector of PmrPart or CmrBomEnt.

//------------------------------------------------------------------------------
@


1.6
log
@Fixed bug in two-way multi-exec:
   NSTN and ASAP multi-exec collisions were not being adequately detected.
@
text
@d25 1
a25 1
   // An index into a candidate vector of MrPart or MrBomEnt.
d49 1
a49 13
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSelPt ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSelPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
d109 14
@


1.5
log
@Continued development of selection splitting for multi=exec.
@
text
@d89 1
a89 1
      virtual WitSelMgr * mySelMgr (WitSelector * theSelector) = 0;
d91 1
a91 1
         // Returns the SelMgr owned by theSelector corresponding to this SelPt.
@


1.4
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@a79 1
         // Base class function.
a83 1
         // Base class function.
a87 1
         // Base class function.
d92 4
a95 1
         // Base class function.
a100 1
         // Base class function.
a105 1
         // Base class function.
a107 12
         // Valid only in sel-split mode.

      virtual void prtSplitting (double splitBound) = 0;
         //
         // Prints the data that define the current splitting of the selection
         // at this SelPt, using splitBound.
         // Base class function.

      virtual void prtSplitExp (WitTlObj * splitObj) = 0;
         //
         // Base class function.
         // Prints data for a split explosion.
@


1.3
log
@Various refactorings for sel-split for multi-exec.
@
text
@d99 2
a100 2
         // Returns TRUE, iff this SelPt belongs to a class of SelPts for which
         // selection splitting has been implemented.
d102 9
@


1.2
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d76 1
a76 1
      virtual WitTlObj * selection () = 0;
d78 2
a79 2
         // Returns the current selection for this SelPt as a TlObj.
         // Asserts that the selection exists.
d108 6
@


1.1
log
@Renamed AltPt classes to SelPt classes.
@
text
@a60 6
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBoolean, pending)

      //------------------------------------------------------------------------
d68 9
a76 1
      virtual void alterSelection () = 0;
d78 2
a79 1
         // Alters the selection for this SelPt.
d82 1
a82 1
      virtual void splitSelection (double splitBound) = 0;
d84 1
a84 1
         // Splits the selection for this SelPt.
d103 18
d136 5
@

