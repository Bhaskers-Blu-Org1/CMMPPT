head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2011.09.28.23.49.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.24.00.28.01;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.30.20.17.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.10.22.10.39;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.07.19.27.33;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "NodeSorter.C"
//
// Contains the implementation of class NodeSorter.
//------------------------------------------------------------------------------

#include <NodeSorter.h>
#include <BopEntry.h>
#include <Part.h>
#include <Operation.h>
#include <SubEntry.h>
#include <ObjStack.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class NodeSorter.
//------------------------------------------------------------------------------

WitNodeSorter::WitNodeSorter (WitProblem * theProblem):

      WitProbAssoc     (theProblem),
      allNodes_        (),
      successors_      (),
      sorted_          (),
      unsortedPredFor_ (),
      cycleFound_      (false),
      cycleParts_      (myProblem ()),
      cycleOpns_       (myProblem ())
   {
   }

//------------------------------------------------------------------------------

WitNodeSorter::~WitNodeSorter ()
   {
   }

//------------------------------------------------------------------------------

void WitNodeSorter::sortNodesIfNeeded ()
   {
   sortNodesIfNeededInt ();

   if (cycleFound_)
      reportCycle ();
   }

//------------------------------------------------------------------------------

void WitNodeSorter::getExpCycle (
      WitObjStack <WitPart> &      theParts,
      WitObjStack <WitOperation> & theOpns)
   {
   sortNodesIfNeededInt ();

   theParts.takeContentsFrom (cycleParts_);
   theOpns .takeContentsFrom (cycleOpns_);
   }

//------------------------------------------------------------------------------

void WitNodeSorter::sortNodesIfNeededInt ()
   {
   int            nBefore;
   WitPart *      thePart;
   WitOperation * theOpn;

   successors_.allocate (myProblem ());

   forEachPart (thePart, myProblem ())
      successors_ (thePart) = new WitList <WitNode>;

   forEachOperation (theOpn, myProblem ())
      successors_ (theOpn)  = new WitList <WitNode>;

   defineAllNodesSuccessors ();

   if (not nodesInOrder ())
      sortNodes ();

   forEachOperation (theOpn, myProblem ())
      delete successors_ (theOpn);

   forEachPart (thePart, myProblem ())
      delete successors_ (thePart);

   allNodes_  .clear ();
   successors_.clear ();

   if (cycleFound_)
      return;

   nBefore = 0;

   forEachPart (thePart, myProblem ())
      {
      thePart->storePreSortedPartIndex (nBefore);

      nBefore ++;
      }
   }

//------------------------------------------------------------------------------

void WitNodeSorter::defineAllNodesSuccessors ()
   {
   WitPart      * thePart;
   WitOperation * theOpn;
   WitBomEntry  * theBomEnt;
   WitSubEntry  * theSub;
   WitBopEntry  * theBopEnt;

   forEachPart (thePart, myProblem ())
      allNodes_.append (thePart);

   forEachOperation (theOpn, myProblem ())
      allNodes_.append (theOpn);

   forEachOperation (theOpn, myProblem ())
      {
      forEachEl (theBomEnt, theOpn->bom ())
         {
         successors_.myElemAt (theBomEnt->myPart ()).append (theOpn);

         forEachEl (theSub, theBomEnt->mySubEntries ())
            successors_.myElemAt (theSub->myPart ()).append (theOpn);
         }
      }

   forEachPart (thePart, myProblem ())
      forEachEl (theBopEnt, thePart->producingBopEntries ())
         if (theBopEnt->expAllowed ())
            successors_.myElemAt (theBopEnt->myOperation ()).append (thePart);
   }

//------------------------------------------------------------------------------
// nodesInOrder.
// Returns true, iff the Parts and Operations are already in order.
// Variables:
//
//    nBefore
//       nBefore (theNode) is the # of Nodes listed before theNode in allNodes_
//       This indicates the order of the Nodes in allNodes_.
//
//    nBeforeSuccs
//       nBeforeSuccs (theNode) is the minimum # of Nodes listed before
//       any successor to theNode.
//
// The Nodes are considered to be in order iff the Parts are in order and the
// Operations are in order. Since allNodes_ is just a temporary List, a Part
// is allowed to be out of order with respect to an Operation. Abstractly, this
// means that a Node should not be compared to its successors, which are of the
// opposite derived class (Part vs. Operation). Instead, a Node should be
// compared to the successors of its successors, which are of the same derived
// class. Specifically, the Nodes are out of order, iff there exists a Node,
// theNode and a successor to it, succNode, such that:
//
//    nBefore (theNode) >= nBeforeSuccs (succNode)
//------------------------------------------------------------------------------

bool WitNodeSorter::nodesInOrder ()
   {
   WitMapping <WitNode, int> nBefore      (myProblem (), 0);
   WitMapping <WitNode, int> nBeforeSuccs (myProblem (), 0);

   WitNode * theNode;
   WitNode * succNode;
   int nScanned;

   nScanned = 0;

   forEachEl (theNode, allNodes_)
      nBefore (theNode) = nScanned ++;

   forEachEl (theNode, allNodes_)
       {
       nBeforeSuccs (theNode) = myCompMgr ()->nNodes ();

       forEachEl (succNode, successors_.myElemAt (theNode))
          nBeforeSuccs (theNode) =
             min (nBeforeSuccs (theNode), nBefore (succNode));
       }

   forEachEl (theNode, allNodes_)
       forEachEl (succNode, successors_.myElemAt (theNode))
          if (nBefore (theNode) >= nBeforeSuccs (succNode))
             return false;

   return true;
   }

//------------------------------------------------------------------------------

void WitNodeSorter::sortNodes ()
   {
   WitList <WitNode> sortedNodes;
      //
      // The sorted List of all Nodes.

   myMsgFac () ("sortNodesMsg");

   sorted_.allocate (myProblem (), false);

   sortNodes (sortedNodes);

   if (sortedNodes.nElements () != myCompMgr ()->nNodes ())
      constructCycle ();

   sorted_.clear ();

   if (not cycleFound_)
      myCompMgr ()->storePreSortedNodes (sortedNodes);
   }

//------------------------------------------------------------------------------
// sortNodes.
// Variables:
//
//    nUnsortedPreds
//       nUnsortedPreds (theNode) is the # of BillEntries to predecessors to
//       theNode that have not yet been sorted. When this value is 0,
//       theNode is eligible to be sorted.
//
//    eligibleNodes
//       The list of all Nodes currently eligible to be sorted: those with
//       no unsorted predecessors.
//------------------------------------------------------------------------------

void WitNodeSorter::sortNodes (WitList <WitNode> & sortedNodes)
   {
   WitMapping <WitNode, int> nUnsortedPreds (myProblem (), 0);

   WitList <WitNode> eligibleNodes;

   WitNode * theNode;
   WitNode * succNode;

   forEachEl (theNode, allNodes_)
      forEachEl (succNode, successors_.myElemAt (theNode))
         ++ nUnsortedPreds (succNode);

   forEachEl (theNode, allNodes_)
      if (nUnsortedPreds (theNode) == 0)
         eligibleNodes.append (theNode);

   while (not eligibleNodes.isEmpty ())
      {
      theNode = eligibleNodes.get ();

      sortedNodes.append (theNode);

      sorted_ (theNode) = true;

      forEachEl (succNode, successors_.myElemAt (theNode))
         {
         -- nUnsortedPreds (succNode);

         if (nUnsortedPreds (succNode) == 0)
             eligibleNodes.append (succNode);
         }
      }
   }

//------------------------------------------------------------------------------

void WitNodeSorter::constructCycle ()
   {
   WitNode * theNode;
   WitNode * succNode;
   WitPart * startingPart;

   unsortedPredFor_.allocate (myProblem ());

   forEachEl (theNode, allNodes_)
      if (not sorted_ (theNode))
         forEachEl (succNode, successors_.myElemAt (theNode))
            unsortedPredFor_ (succNode) = theNode;

   startingPart = findPartInCycle ();

   storeCycle (startingPart);

   unsortedPredFor_.clear ();

   cycleFound_ = true;
   }

//------------------------------------------------------------------------------
// findPartInCycle
// Local Variable:
//
//    scanned
//       scanned (theNode) is true, iff theNode has already been scanned in
//       the search for a cycle. A cycle has been found when a Node gets
//       scanned twice.
//------------------------------------------------------------------------------

WitPart * WitNodeSorter::findPartInCycle ()
   {
   WitMapping <WitNode, bool> scanned (myProblem (), false);
   WitNode *                  theNode;
   WitPart *                  thePart;

   forEachEl (theNode, allNodes_)
      if (not sorted_ (theNode))
         break;

   while (not scanned (theNode))
      {
      scanned (theNode) = true;

      theNode           = unsortedPredFor_ (theNode);
      }

   thePart = theNode->thisPart ();

   if (thePart != NULL)
      return thePart;

   thePart = unsortedPredFor_ (theNode)->thisPart ();

   stronglyAssert (thePart != NULL);

   return thePart;
   }

//------------------------------------------------------------------------------

void WitNodeSorter::storeCycle (WitPart * startingPart)
   {
   WitPart *      thePart;
   WitOperation * theOpn;

   thePart = startingPart;

   do
      {
      cycleParts_.push (thePart);

      theOpn  = unsortedPredFor_ (thePart)->thisOpn ();

      stronglyAssert (theOpn  != NULL);

      cycleOpns_.push (theOpn);

      thePart = unsortedPredFor_ (theOpn) ->thisPart ();

      stronglyAssert (thePart != NULL);
      }
      while (thePart != startingPart);

   cycleParts_.reverse ();
   cycleOpns_ .reverse ();
   }

//------------------------------------------------------------------------------

void WitNodeSorter::reportCycle ()
   {
   WitPart *      firstPart;
   WitPart *      thePart;
   WitOperation * theOpn;
   WitPart *      nextPart;

   myMsgFac () ("bomCycleHeadingSmsg");

   firstPart = cycleParts_.firstObject ();

   while (cycleParts_.pop (thePart))
      {
      cycleOpns_.pop (theOpn);

      nextPart =
         cycleParts_.isNonEmpty ()?
            cycleParts_.firstObject ():
            firstPart;

      myMsgFac () ("bomCycleNodesSmsg",
         thePart ->partName      (),
         theOpn  ->operationName (),
         nextPart->partName      ());
      }

   myMsgFac () ("bomCycleSmsg");
   }
@


1.4
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.3
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d30 10
a39 10
WitProbAssoc     (theProblem),
allNodes_        (),
successors_      (),
sorted_          (),
unsortedPredFor_ (),
cycleFound_      (false),
cycleParts_      (myProblem ()),
cycleOpns_       (myProblem ())
{
}
d44 2
a45 2
{
}
d50 2
a51 2
{
sortNodesIfNeededInt ();
d53 3
a55 3
if (cycleFound_)
reportCycle ();
}
d60 8
a67 8
WitObjStack <WitPart> &      theParts,
WitObjStack <WitOperation> & theOpns)
{
sortNodesIfNeededInt ();

theParts.takeContentsFrom (cycleParts_);
theOpns .takeContentsFrom (cycleOpns_);
}
d72 4
a75 4
{
int            nBefore;
WitPart *      thePart;
WitOperation * theOpn;
d77 1
a77 1
successors_.allocate (myProblem ());
d79 2
a80 2
forEachPart (thePart, myProblem ())
successors_ (thePart) = new WitList <WitNode>;
d82 2
a83 2
forEachOperation (theOpn, myProblem ())
successors_ (theOpn)  = new WitList <WitNode>;
d85 1
a85 1
defineAllNodesSuccessors ();
d87 2
a88 2
if (not nodesInOrder ())
sortNodes ();
d90 2
a91 2
forEachOperation (theOpn, myProblem ())
delete successors_ (theOpn);
d93 2
a94 2
forEachPart (thePart, myProblem ())
delete successors_ (thePart);
d96 2
a97 2
allNodes_  .clear ();
successors_.clear ();
d99 2
a100 2
if (cycleFound_)
return;
d102 1
a102 1
nBefore = 0;
d104 3
a106 3
forEachPart (thePart, myProblem ())
{
thePart->storePreSortedPartIndex (nBefore);
d108 3
a110 3
nBefore ++;
}
}
d115 29
a143 29
{
WitPart      * thePart;
WitOperation * theOpn;
WitBomEntry  * theBomEnt;
WitSubEntry  * theSub;
WitBopEntry  * theBopEnt;

forEachPart (thePart, myProblem ())
allNodes_.append (thePart);

forEachOperation (theOpn, myProblem ())
allNodes_.append (theOpn);

forEachOperation (theOpn, myProblem ())
{
forEachEl (theBomEnt, theOpn->bom ())
{
successors_.myElemAt (theBomEnt->myPart ()).append (theOpn);

forEachEl (theSub, theBomEnt->mySubEntries ())
successors_.myElemAt (theSub->myPart ()).append (theOpn);
}
}

forEachPart (thePart, myProblem ())
forEachEl (theBopEnt, thePart->producingBopEntries ())
if (theBopEnt->expAllowed ())
successors_.myElemAt (theBopEnt->myOperation ()).append (thePart);
}
d171 26
a196 26
{
WitMapping <WitNode, int> nBefore      (myProblem (), 0);
WitMapping <WitNode, int> nBeforeSuccs (myProblem (), 0);

WitNode * theNode;
WitNode * succNode;
int nScanned;

nScanned = 0;

forEachEl (theNode, allNodes_)
nBefore (theNode) = nScanned ++;

forEachEl (theNode, allNodes_)
{
nBeforeSuccs (theNode) = myCompMgr ()->nNodes ();

forEachEl (succNode, successors_.myElemAt (theNode))
nBeforeSuccs (theNode) =
min (nBeforeSuccs (theNode), nBefore (succNode));
}

forEachEl (theNode, allNodes_)
forEachEl (succNode, successors_.myElemAt (theNode))
if (nBefore (theNode) >= nBeforeSuccs (succNode))
return false;
d198 2
a199 2
return true;
}
d204 4
a207 4
{
WitList <WitNode> sortedNodes;
//
// The sorted List of all Nodes.
d209 1
a209 1
myMsgFac () ("sortNodesMsg");
d211 1
a211 1
sorted_.allocate (myProblem (), false);
d213 1
a213 1
sortNodes (sortedNodes);
d215 2
a216 2
if (sortedNodes.nElements () != myCompMgr ()->nNodes ())
constructCycle ();
d218 1
a218 1
sorted_.clear ();
d220 3
a222 3
if (not cycleFound_)
myCompMgr ()->storePreSortedNodes (sortedNodes);
}
d239 2
a240 2
{
WitMapping <WitNode, int> nUnsortedPreds (myProblem (), 0);
d242 1
a242 1
WitList <WitNode> eligibleNodes;
d244 2
a245 2
WitNode * theNode;
WitNode * succNode;
d247 3
a249 3
forEachEl (theNode, allNodes_)
forEachEl (succNode, successors_.myElemAt (theNode))
++ nUnsortedPreds (succNode);
d251 3
a253 3
forEachEl (theNode, allNodes_)
if (nUnsortedPreds (theNode) == 0)
eligibleNodes.append (theNode);
d255 3
a257 3
while (not eligibleNodes.isEmpty ())
{
theNode = eligibleNodes.get ();
d259 1
a259 1
sortedNodes.append (theNode);
d261 1
a261 1
sorted_ (theNode) = true;
d263 3
a265 3
forEachEl (succNode, successors_.myElemAt (theNode))
{
-- nUnsortedPreds (succNode);
d267 5
a271 5
if (nUnsortedPreds (succNode) == 0)
eligibleNodes.append (succNode);
}
}
}
d276 4
a279 4
{
WitNode * theNode;
WitNode * succNode;
WitPart * startingPart;
d281 1
a281 1
unsortedPredFor_.allocate (myProblem ());
d283 4
a286 4
forEachEl (theNode, allNodes_)
if (not sorted_ (theNode))
forEachEl (succNode, successors_.myElemAt (theNode))
unsortedPredFor_ (succNode) = theNode;
d288 1
a288 1
startingPart = findPartInCycle ();
d290 1
a290 1
storeCycle (startingPart);
d292 1
a292 1
unsortedPredFor_.clear ();
d294 2
a295 2
cycleFound_ = true;
}
d308 4
a311 4
{
WitMapping <WitNode, bool> scanned (myProblem (), false);
WitNode *                  theNode;
WitPart *                  thePart;
d313 3
a315 3
forEachEl (theNode, allNodes_)
if (not sorted_ (theNode))
break;
d317 3
a319 3
while (not scanned (theNode))
{
scanned (theNode) = true;
d321 2
a322 2
theNode           = unsortedPredFor_ (theNode);
}
d324 1
a324 1
thePart = theNode->thisPart ();
d326 2
a327 2
if (thePart != NULL)
return thePart;
d329 1
a329 1
thePart = unsortedPredFor_ (theNode)->thisPart ();
d331 1
a331 1
stronglyAssert (thePart != NULL);
d333 2
a334 2
return thePart;
}
d339 3
a341 3
{
WitPart *      thePart;
WitOperation * theOpn;
d343 1
a343 1
thePart = startingPart;
d345 3
a347 3
do
{
cycleParts_.push (thePart);
d349 1
a349 1
theOpn  = unsortedPredFor_ (thePart)->thisOpn ();
d351 1
a351 1
stronglyAssert (theOpn  != NULL);
d353 1
a353 1
cycleOpns_.push (theOpn);
d355 1
a355 1
thePart = unsortedPredFor_ (theOpn) ->thisPart ();
d357 3
a359 3
stronglyAssert (thePart != NULL);
}
while (thePart != startingPart);
d361 3
a363 3
cycleParts_.reverse ();
cycleOpns_ .reverse ();
}
d368 24
a391 24
{
WitPart *      firstPart;
WitPart *      thePart;
WitOperation * theOpn;
WitPart *      nextPart;

myMsgFac () ("bomCycleHeadingSmsg");

firstPart = cycleParts_.firstObject ();

while (cycleParts_.pop (thePart))
{
cycleOpns_.pop (theOpn);

nextPart =
cycleParts_.isNonEmpty ()?
cycleParts_.firstObject ():
firstPart;

myMsgFac () ("bomCycleNodesSmsg",
thePart ->partName      (),
theOpn  ->operationName (),
nextPart->partName      ());
}
d393 2
a394 2
myMsgFac () ("bomCycleSmsg");
}
@


1.2
log
@Heuristic Adjustment
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d30 10
a39 10
      WitProbAssoc     (theProblem),
      allNodes_        (),
      successors_      (),
      sorted_          (),
      unsortedPredFor_ (),
      cycleFound_      (false),
      cycleParts_      (myProblem ()),
      cycleOpns_       (myProblem ())
   {
   }
d44 2
a45 2
   {
   }
d50 2
a51 2
   {
   sortNodesIfNeededInt ();
d53 3
a55 3
   if (cycleFound_)
      reportCycle ();
   }
d60 8
a67 8
      WitObjStack <WitPart> &      theParts,
      WitObjStack <WitOperation> & theOpns)
   {
   sortNodesIfNeededInt ();

   theParts.takeContentsFrom (cycleParts_);
   theOpns .takeContentsFrom (cycleOpns_);
   }
d72 4
a75 4
   {
   int            nBefore;
   WitPart *      thePart;
   WitOperation * theOpn;
d77 1
a77 1
   successors_.allocate (myProblem ());
d79 2
a80 2
   forEachPart (thePart, myProblem ())
      successors_ (thePart) = new WitList <WitNode>;
d82 2
a83 2
   forEachOperation (theOpn, myProblem ())
      successors_ (theOpn)  = new WitList <WitNode>;
d85 1
a85 1
   defineAllNodesSuccessors ();
d87 2
a88 2
   if (not nodesInOrder ())
      sortNodes ();
d90 2
a91 2
   forEachOperation (theOpn, myProblem ())
      delete successors_ (theOpn);
d93 2
a94 2
   forEachPart (thePart, myProblem ())
      delete successors_ (thePart);
d96 2
a97 2
   allNodes_  .clear ();
   successors_.clear ();
d99 2
a100 2
   if (cycleFound_)
      return;
d102 1
a102 1
   nBefore = 0;
d104 3
a106 3
   forEachPart (thePart, myProblem ())
      {
      thePart->storePreSortedPartIndex (nBefore);
d108 3
a110 3
      nBefore ++;
      }
   }
d115 29
a143 29
   {
   WitPart      * thePart;
   WitOperation * theOpn;
   WitBomEntry  * theBomEnt;
   WitSubEntry  * theSub;
   WitBopEntry  * theBopEnt;

   forEachPart (thePart, myProblem ())
      allNodes_.append (thePart);

   forEachOperation (theOpn, myProblem ())
      allNodes_.append (theOpn);

   forEachOperation (theOpn, myProblem ())
      {
      forEachEl (theBomEnt, theOpn->bom ())
         {
         successors_.myElemAt (theBomEnt->myPart ()).append (theOpn);

         forEachEl (theSub, theBomEnt->mySubEntries ())
            successors_.myElemAt (theSub->myPart ()).append (theOpn);
         }
      }

   forEachPart (thePart, myProblem ())
      forEachEl (theBopEnt, thePart->producingBopEntries ())
         if (theBopEnt->expAllowed ())
            successors_.myElemAt (theBopEnt->myOperation ()).append (thePart);
   }
d171 26
a196 26
   {
   WitMapping <WitNode, int> nBefore      (myProblem (), 0);
   WitMapping <WitNode, int> nBeforeSuccs (myProblem (), 0);

   WitNode * theNode;
   WitNode * succNode;
   int nScanned;

   nScanned = 0;

   forEachEl (theNode, allNodes_)
      nBefore (theNode) = nScanned ++;

   forEachEl (theNode, allNodes_)
       {
       nBeforeSuccs (theNode) = myCompMgr ()->nNodes ();

       forEachEl (succNode, successors_.myElemAt (theNode))
          nBeforeSuccs (theNode) =
             min (nBeforeSuccs (theNode), nBefore (succNode));
       }

   forEachEl (theNode, allNodes_)
       forEachEl (succNode, successors_.myElemAt (theNode))
          if (nBefore (theNode) >= nBeforeSuccs (succNode))
             return false;
d198 2
a199 2
   return true;
   }
d204 4
a207 4
   {
   WitList <WitNode> sortedNodes;
      //
      // The sorted List of all Nodes.
d209 1
a209 1
   myMsgFac () ("sortNodesMsg");
d211 1
a211 1
   sorted_.allocate (myProblem (), false);
d213 1
a213 1
   sortNodes (sortedNodes);
d215 2
a216 2
   if (sortedNodes.nElements () != myCompMgr ()->nNodes ())
      constructCycle ();
d218 1
a218 1
   sorted_.clear ();
d220 3
a222 3
   if (not cycleFound_)
      myCompMgr ()->storePreSortedNodes (sortedNodes);
   }
d239 2
a240 2
   {
   WitMapping <WitNode, int> nUnsortedPreds (myProblem (), 0);
d242 1
a242 1
   WitList <WitNode> eligibleNodes;
d244 2
a245 2
   WitNode * theNode;
   WitNode * succNode;
d247 3
a249 3
   forEachEl (theNode, allNodes_)
      forEachEl (succNode, successors_.myElemAt (theNode))
         ++ nUnsortedPreds (succNode);
d251 3
a253 3
   forEachEl (theNode, allNodes_)
      if (nUnsortedPreds (theNode) == 0)
         eligibleNodes.append (theNode);
d255 3
a257 3
   while (not eligibleNodes.isEmpty ())
      {
      theNode = eligibleNodes.get ();
d259 1
a259 1
      sortedNodes.append (theNode);
d261 1
a261 1
      sorted_ (theNode) = true;
d263 3
a265 3
      forEachEl (succNode, successors_.myElemAt (theNode))
         {
         -- nUnsortedPreds (succNode);
d267 5
a271 5
         if (nUnsortedPreds (succNode) == 0)
             eligibleNodes.append (succNode);
         }
      }
   }
d276 4
a279 4
   {
   WitNode * theNode;
   WitNode * succNode;
   WitPart * startingPart;
d281 1
a281 1
   unsortedPredFor_.allocate (myProblem ());
d283 4
a286 4
   forEachEl (theNode, allNodes_)
      if (not sorted_ (theNode))
         forEachEl (succNode, successors_.myElemAt (theNode))
            unsortedPredFor_ (succNode) = theNode;
d288 1
a288 1
   startingPart = findPartInCycle ();
d290 1
a290 1
   storeCycle (startingPart);
d292 1
a292 1
   unsortedPredFor_.clear ();
d294 2
a295 2
   cycleFound_ = true;
   }
d308 4
a311 4
   {
   WitMapping <WitNode, bool> scanned (myProblem (), false);
   WitNode *                  theNode;
   WitPart *                  thePart;
d313 3
a315 3
   forEachEl (theNode, allNodes_)
      if (not sorted_ (theNode))
         break;
d317 3
a319 3
   while (not scanned (theNode))
      {
      scanned (theNode) = true;
d321 2
a322 2
      theNode           = unsortedPredFor_ (theNode);
      }
d324 1
a324 1
   thePart = theNode->thisPart ();
d326 2
a327 2
   if (thePart != NULL)
      return thePart;
d329 1
a329 1
   thePart = unsortedPredFor_ (theNode)->thisPart ();
d331 1
a331 1
   stronglyAssert (thePart != NULL);
d333 2
a334 2
   return thePart;
   }
d339 3
a341 3
   {
   WitPart *      thePart;
   WitOperation * theOpn;
d343 1
a343 1
   thePart = startingPart;
d345 3
a347 3
   do
      {
      cycleParts_.push (thePart);
d349 1
a349 1
      theOpn  = unsortedPredFor_ (thePart)->thisOpn ();
d351 1
a351 1
      stronglyAssert (theOpn  != NULL);
d353 1
a353 1
      cycleOpns_.push (theOpn);
d355 1
a355 1
      thePart = unsortedPredFor_ (theOpn) ->thisPart ();
d357 3
a359 3
      stronglyAssert (thePart != NULL);
      }
      while (thePart != startingPart);
d361 3
a363 3
   cycleParts_.reverse ();
   cycleOpns_ .reverse ();
   }
d368 24
a391 24
   {
   WitPart *      firstPart;
   WitPart *      thePart;
   WitOperation * theOpn;
   WitPart *      nextPart;

   myMsgFac () ("bomCycleHeadingSmsg");

   firstPart = cycleParts_.firstObject ();

   while (cycleParts_.pop (thePart))
      {
      cycleOpns_.pop (theOpn);

      nextPart =
         cycleParts_.isNonEmpty ()?
            cycleParts_.firstObject ():
            firstPart;

      myMsgFac () ("bomCycleNodesSmsg",
         thePart ->partName      (),
         theOpn  ->operationName (),
         nextPart->partName      ());
      }
d393 2
a394 2
   myMsgFac () ("bomCycleSmsg");
   }
@


1.1
log
@Put the implementation of class NodeSorter into its own .C file.
@
text
@d19 1
a19 1
#include <Opn.h>
@

