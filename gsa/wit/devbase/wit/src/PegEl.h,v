head	1.13;
access;
symbols
	sce_5_01_20080919:1.10
	latest_sce_4_20_20060523:1.10.0.2
	sce_4_20_20060523:1.10
	latest_sce4_20_OSL:1.9.0.2
	sce_4_20_OSL:1.9
	sce_410_withVa:1.9
	sce_4_05_20040511:1.9
	sce_4_00_20040201:1.9
	nextGenBranch:1.8.0.2
	nextGenRoot:1.8
	sce_3_30_20030627:1.8
	EndRw-branch:1.5.0.2
	Root-of-EndRw:1.5
	rwToStl:1.4.0.2
	latest_sce_3_10_20010924:1.2.0.2
	sce_3_10_20010924:1.2;
locks; strict;
comment	@ * @;


1.13
date	2011.09.28.23.49.51;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.09.24.00.28.13;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.08.30.20.17.53;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.02.17.34.07;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.27.23.26.13;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.17.21.32.50;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.05.19.32.52;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.15.20.27.12;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.12.23.36.14;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.11.22.48.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.27.21.28.39;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.25.16.08.18;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PegElH
#define PegElH

//------------------------------------------------------------------------------
// Header file: "PegEl.h"
//
// Contains the declaration of the following classes:
//
//    PegEl.
//    FixedPegEl.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class PegEl.
//
// An element in a pegging.
// A PegEl is explicitly associated with a DelComp and an allocation period
// (allocPer) and implicitly associated with a Demand and shipPer. 
// The DelComp is either an Operation or a SubEntry. It stores the
// amount by which heuristic allocation increased the execVol or subVol for the
// DelComp in allocPer in order to add (to the exisiting schedule) a shipment
// for the Demand in shipPer.
//
// Implemented in Pegging.C.
//------------------------------------------------------------------------------

class WitPegEl
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPegEl (WitDelComp * theDelComp, WitPeriod);
         //
         // theDelComp must be either an Operation or a Sub.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPegEl ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void saveStateIn (WitSglSrcMgr * theSglSrcMgr);
         //
         // Saves the current state of this PegEl in theSglSrcMgr.

      void pegDeltaVol (double deltaVol);
         //
         // Increments peggedVol_ by deltaVol.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod,       myExecPer)
      accessFunc (double,          peggedVol)
      accessFunc (WitFixedPegEl *, myFixedPegEl)

      WitOperation * myOpn () const;
         //
         // Returns the Operation for this PegEl, if any, else NULL.

      WitSubEntry * mySub () const;
         //
         // Returns the Sub       for this PegEl, if any, else NULL.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPegEl);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDelComp * const myDelComp_;
         //
         // The DelComp for this PegEl.

      const WitPeriod myExecPer_;
         //
         // The execPer for this PegEl.

      double peggedVol_;
         //
         // Let theOpn or theSub = myDelComp_, as appropriate.
         // peggedVol_ is the amount by which heuristic allocation increased
         // theOpn->execVol_[myExecPer_] or 
         // theSub-> subVol_[myExecPer_] in order to add a shipment for
         // this PegEl's Demand in the shipPer to the exisiting schedule. 
         // Specifically, it's the total amount since the last time the pegging
         // was cleared.

      WitFixedPegEl * myFixedPegEl_;
         //
         // The FixedPegEl owned by this PegEl.
   };

//------------------------------------------------------------------------------
// Class FixedPegEl.
//
// Similar to a PegEl, but with fixed data.
//
// Implemented in Pegging.C.
//------------------------------------------------------------------------------

class WitFixedPegEl
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFixedPegEl (WitPegEl *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitFixedPegEl ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessWrapper (WitPeriod,      myExecPer, myPegEl_);
      accessWrapper (double,         peggedVol, myPegEl_);
      accessWrapper (WitOperation *, myOpn,     myPegEl_);
      accessWrapper (WitSubEntry *,  mySub,     myPegEl_);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitFixedPegEl);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPegEl * const myPegEl_;
         //
         // The PegEl that owns this FixedPegEl.
   };

#endif
@


1.12
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.11
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d29 1
a29 1
// (allocPer) and implicitly associated with a Demand and shipPer.
d39 2
a40 10
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPegEl (WitDelComp * theDelComp, WitPeriod);
//
// theDelComp must be either an Operation or a Sub.
d42 76
a117 68
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPegEl ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void saveStateIn (WitSglSrcMgr * theSglSrcMgr);
//
// Saves the current state of this PegEl in theSglSrcMgr.

void pegDeltaVol (double deltaVol);
//
// Increments peggedVol_ by deltaVol.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitPeriod,       myExecPer)
accessFunc (double,          peggedVol)
accessFunc (WitFixedPegEl *, myFixedPegEl)

WitOperation * myOpn () const;
//
// Returns the Operation for this PegEl, if any, else NULL.

WitSubEntry * mySub () const;
//
// Returns the Sub       for this PegEl, if any, else NULL.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitPegEl);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitDelComp * const myDelComp_;
//
// The DelComp for this PegEl.

const WitPeriod myExecPer_;
//
// The execPer for this PegEl.

double peggedVol_;
//
// Let theOpn or theSub = myDelComp_, as appropriate.
// peggedVol_ is the amount by which heuristic allocation increased
// theOpn->execVol_[myExecPer_] or
// theSub-> subVol_[myExecPer_] in order to add a shipment for
// this PegEl's Demand in the shipPer to the exisiting schedule.
// Specifically, it's the total amount since the last time the pegging
// was cleared.

WitFixedPegEl * myFixedPegEl_;
//
// The FixedPegEl owned by this PegEl.
};
d128 2
a129 2
{
public:
d131 3
a133 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d135 1
a135 1
WitFixedPegEl (WitPegEl *);
d137 3
a139 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d141 1
a141 1
~WitFixedPegEl ();
d143 3
a145 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d147 4
a150 4
accessWrapper (WitPeriod,      myExecPer, myPegEl_);
accessWrapper (double,         peggedVol, myPegEl_);
accessWrapper (WitOperation *, myOpn,     myPegEl_);
accessWrapper (WitSubEntry *,  mySub,     myPegEl_);
d152 1
a152 1
private:
d154 3
a156 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d158 1
a158 1
noCopyCtorAssign (WitFixedPegEl);
d160 3
a162 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d164 4
a167 4
WitPegEl * const myPegEl_;
//
// The PegEl that owns this FixedPegEl.
};
@


1.10
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d29 1
a29 1
// (allocPer) and implicitly associated with a Demand and shipPer. 
d39 10
a48 2
   {
   public:
d50 68
a117 76
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPegEl (WitDelComp * theDelComp, WitPeriod);
         //
         // theDelComp must be either an Operation or a Sub.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPegEl ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void saveStateIn (WitSglSrcMgr * theSglSrcMgr);
         //
         // Saves the current state of this PegEl in theSglSrcMgr.

      void pegDeltaVol (double deltaVol);
         //
         // Increments peggedVol_ by deltaVol.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod,       myExecPer)
      accessFunc (double,          peggedVol)
      accessFunc (WitFixedPegEl *, myFixedPegEl)

      WitOperation * myOpn () const;
         //
         // Returns the Operation for this PegEl, if any, else NULL.

      WitSubEntry * mySub () const;
         //
         // Returns the Sub       for this PegEl, if any, else NULL.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPegEl);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDelComp * const myDelComp_;
         //
         // The DelComp for this PegEl.

      const WitPeriod myExecPer_;
         //
         // The execPer for this PegEl.

      double peggedVol_;
         //
         // Let theOpn or theSub = myDelComp_, as appropriate.
         // peggedVol_ is the amount by which heuristic allocation increased
         // theOpn->execVol_[myExecPer_] or 
         // theSub-> subVol_[myExecPer_] in order to add a shipment for
         // this PegEl's Demand in the shipPer to the exisiting schedule. 
         // Specifically, it's the total amount since the last time the pegging
         // was cleared.

      WitFixedPegEl * myFixedPegEl_;
         //
         // The FixedPegEl owned by this PegEl.
   };
d128 2
a129 2
   {
   public:
d131 3
a133 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d135 1
a135 1
      WitFixedPegEl (WitPegEl *);
d137 3
a139 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d141 1
a141 1
      ~WitFixedPegEl ();
d143 3
a145 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d147 4
a150 4
      accessWrapper (WitPeriod,      myExecPer, myPegEl_);
      accessWrapper (double,         peggedVol, myPegEl_);
      accessWrapper (WitOperation *, myOpn,     myPegEl_);
      accessWrapper (WitSubEntry *,  mySub,     myPegEl_);
d152 1
a152 1
   private:
d154 3
a156 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d158 1
a158 1
      noCopyCtorAssign (WitFixedPegEl);
d160 3
a162 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d164 4
a167 4
      WitPegEl * const myPegEl_;
         //
         // The PegEl that owns this FixedPegEl.
   };
@


1.9
log
@Continued implementation of PIP.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.8
log
@Removed all const_casts from WIT.
@
text
@d38 1
a38 1
class WitPegEl: public WitUtil
d127 1
a127 1
class WitFixedPegEl: public WitUtil
@


1.7
log
@Removed implementation of single-source by the old algorithm.
@
text
@d16 4
a19 1
// Contains the declaration of class PegEl.
d72 3
a74 2
      accessFunc (WitPeriod, myExecPer)
      accessFunc (double,    peggedVol)
d113 54
@


1.6
log
@Continued implementation of single-source by the new algorithm.
@
text
@a56 4
      void saveStateIn (WitOldSglMgr * theOldSglMgr);
         //
         // Saves the current state of this PegEl in theOldSglMgr.

@


1.5
log
@Began implementation of the new single-source algorithm.
@
text
@d61 4
@


1.4
log
@Continued implementation of Single-Source.
@
text
@d57 1
a57 1
      void saveStateIn (WitSglSrcMgr * theSglSrcMgr);
d59 1
a59 1
         // Saves the current state of this PegEl in theSglSrcMgr.
@


1.3
log
@Continued implementation of Single-Source.
@
text
@d57 4
@


1.2
log
@Continued implementation of pegging.
@
text
@d16 1
a16 1
// Contains the declaration of class template PegEl <AllocComp>.
d22 1
a22 1
// Class template PegEl <AllocComp>
d24 4
a27 4
// AllocComp may be either class Operation or class SubEntry.
// An element in a pegging for AllocComp instances.
// A PegEl is explicitly associated with an AllocComp and an allocation period
// (allocPer) and implicitly associated with a Demand and shipPer. It stores the
d29 1
a29 1
// AllocComp in allocPer in order to add (to the exisiting schedule) a shipment
d31 2
a32 2
// 
// All implementation is inline.
d35 1
a35 2
template <class AllocComp>
      class WitPegEl: public WitUtil
d43 3
a45 6
      inline WitPegEl (AllocComp * theAllocComp, WitPeriod execPer):
            myAllocComp_ (theAllocComp),
            myExecPer_   (execPer),
            peggedVol_   (0.0)
         {
         }
d51 1
a51 3
      inline ~WitPegEl ()
         {
         }
d57 3
a59 4
      inline void pegDeltaVol (double deltaVol)
         {
         peggedVol_ += deltaVol;
         }
d65 10
a74 3
      accessFunc (AllocComp *, myAllocComp)
      accessFunc (WitPeriod,   myExecPer)
      accessFunc (double,      peggedVol)
d82 1
a82 1
      noCopyCtorAssignTemp (WitPegEl, AllocComp);
d88 1
a88 1
      AllocComp * const myAllocComp_;
d90 1
a90 1
         // The AllocComp for this PegEl.
d98 4
a101 3
         // The amount by which heuristic allocation increased
         // myAllocComp_->execVol_[myExecPer_] or 
         // myAllocComp_-> subVol_[myExecPer_] in order to add a shipment for
@


1.1
log
@Initial implementation of pegging.
@
text
@d16 1
a16 1
// Contains the declaration of class PegEl.
d22 1
a22 1
// Class PegEl
d24 7
a30 5
// An element in a pegging.
// A PegEl is explicitly associated with an Operation and execPer and implicitly
// associated with a Demand and shipPer. It stores the amount by which heuristic
// allocation increased the execVol for the Operation in the execPer in order to
// add (to the exisiting schedule) a shipment for the Demand in the shipPer.
d32 1
a32 1
// Implemented in Pegging.C.
d35 2
a36 1
class WitPegEl: public WitUtil
d44 6
a49 1
      WitPegEl (WitOperation *, WitPeriod);
d55 3
a57 1
      ~WitPegEl ();
d63 4
a66 4
      void recIncExecVol (double deltaVol);
         //
         // Records the following event: 
         //    myOpn_->execVol_[myExecPer_] += deltaVol.
d72 3
a74 3
      accessFunc (WitOperation *, myOpn)
      accessFunc (WitPeriod,      myExecPer)
      accessFunc (double,         deltaExecVol)
d82 1
a82 1
      noCopyCtorAssign (WitPegEl);
d88 1
a88 1
      WitOperation * const myOpn_;
d90 1
a90 1
         // The Operation for this PegEl.
d96 1
a96 1
      double deltaExecVol_;
d99 3
a101 2
         // myOpn_->execVol_[myExecPer_] in order to add a shipment for this
         // PegEl's Demand in the shipPer to the exisiting schedule. 
@

