head	1.24;
access;
symbols
	sce_5_01_20080919:1.21
	latest_sce_4_20_20060523:1.19.0.2
	sce_4_20_20060523:1.19
	latest_sce4_20_OSL:1.18.0.2
	sce_4_20_OSL:1.18
	sce_410_withVa:1.18
	sce_4_05_20040511:1.15
	sce_4_00_20040201:1.15
	nextGenBranch:1.13.0.2
	nextGenRoot:1.13
	sce_3_30_20030627:1.13
	EndRw-branch:1.8.0.4
	Root-of-EndRw:1.8
	rwToStl:1.8.0.2
	latest_sce_3_10_20010924:1.4.0.2
	sce_3_10_20010924:1.4;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.50.00;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.28.24;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.18.02;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.11.15.19.57.34;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.01.22.25.07;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.28.20.14.37;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.24.18.42.04;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.26.23.50.32;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.02.20.46.43;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.06.20.28.20;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.07.20.20.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.04.18.45.54;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.15.21.01.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.13.22.22.12;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.18.18.55.42;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.11.18.53.16;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.13.21.50.13;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.03.22.35.21;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.25.16.08.19;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.06.23.36.02;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.06.22.29.06;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.02.17.33.18;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PtrMapH
#define PtrMapH

//------------------------------------------------------------------------------
// Header file: "PtrMap.h"
//
// Contains the declaration of class template PtrMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <PtrVec.h>

//------------------------------------------------------------------------------
// Template argument macros for class template PtrMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#define PtrMapArgDecs typename DomEl, typename RangeEl
#define PtrMapArgs             DomEl,          RangeEl

//------------------------------------------------------------------------------
// Class template PtrMap <DomEl, RangeEl>
//
// A mapping from the instances of class DomEl (domain element) in a Problem to
// pointers to instances of class RangeEl (range element).
//------------------------------------------------------------------------------

template <PtrMapArgDecs>
      class WitPtrMap
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPtrMap ();
         //
         // Constructs an empty PtrMap (one that does not map any DomEls).

      WitPtrMap (WitProblem * theProblem);
         //
         // Constructs a PtrMap for those DomEls that are owned by theProblem.
         // Sets every element of this PtrMap to NULL.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPtrMap ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void allocate (WitProblem * theProblem);
         //
         // Resizes this PtrMap to cover the DomEls owned by theProblem. 
         // The value of this mapping for each DomEl will be set to NULL.

      void allocate (int nInst);
         //
         // Same as above, but # instances is specified explicitly.

      void clear ();
         //
         // Resizes this PtrMap to cover no DomEls.

      inline RangeEl * & operator () (DomEl * theDomEl);
         //
         // Returns a reference to the value of this PtrMap for theDomEl.

      inline RangeEl * operator () (DomEl * theDomEl) const;
         //
         // Const version.

      inline RangeEl & myElemAt (DomEl * theDomEl) const;
         //
         // Returns a ref to the RangeEl of this PtrMap for theDomEl.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPtrMap);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <RangeEl> myPtrVec_;
         //
         // Stores the member value for each DomEl.
   };

//------------------------------------------------------------------------------
// Implementation of inlines.
//------------------------------------------------------------------------------

template <PtrMapArgDecs>
      inline RangeEl * & WitPtrMap <PtrMapArgs>::operator () (DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_[theDomEl->mappingIndex ()];
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs>
      inline RangeEl * WitPtrMap <PtrMapArgs>::operator () (
         DomEl * theDomEl)
         const
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_[theDomEl->mappingIndex ()];
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs>
      inline RangeEl & WitPtrMap <PtrMapArgs>::myElemAt (DomEl * theDomEl) const
   {
   witAssert (theDomEl != NULL);

   witAssert (myPtrVec_[theDomEl->mappingIndex ()] != NULL);

   return   * myPtrVec_[theDomEl->mappingIndex ()];
   }

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d36 72
a107 72
class WitPtrMap
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPtrMap ();
//
// Constructs an empty PtrMap (one that does not map any DomEls).

WitPtrMap (WitProblem * theProblem);
//
// Constructs a PtrMap for those DomEls that are owned by theProblem.
// Sets every element of this PtrMap to NULL.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPtrMap ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void allocate (WitProblem * theProblem);
//
// Resizes this PtrMap to cover the DomEls owned by theProblem.
// The value of this mapping for each DomEl will be set to NULL.

void allocate (int nInst);
//
// Same as above, but # instances is specified explicitly.

void clear ();
//
// Resizes this PtrMap to cover no DomEls.

inline RangeEl * & operator () (DomEl * theDomEl);
//
// Returns a reference to the value of this PtrMap for theDomEl.

inline RangeEl * operator () (DomEl * theDomEl) const;
//
// Const version.

inline RangeEl & myElemAt (DomEl * theDomEl) const;
//
// Returns a ref to the RangeEl of this PtrMap for theDomEl.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitPtrMap);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPtrVec <RangeEl> myPtrVec_;
//
// Stores the member value for each DomEl.
};
d114 3
a116 3
inline RangeEl * & WitPtrMap <PtrMapArgs>::operator () (DomEl * theDomEl)
{
witAssert (theDomEl != NULL);
d118 2
a119 2
return myPtrVec_[theDomEl->mappingIndex ()];
}
d124 5
a128 5
inline RangeEl * WitPtrMap <PtrMapArgs>::operator () (
DomEl * theDomEl)
const
{
witAssert (theDomEl != NULL);
d130 2
a131 2
return myPtrVec_[theDomEl->mappingIndex ()];
}
d136 3
a138 3
inline RangeEl & WitPtrMap <PtrMapArgs>::myElemAt (DomEl * theDomEl) const
{
witAssert (theDomEl != NULL);
d140 1
a140 1
witAssert (myPtrVec_[theDomEl->mappingIndex ()] != NULL);
d142 2
a143 2
return   * myPtrVec_[theDomEl->mappingIndex ()];
}
@


1.21
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d36 72
a107 72
      class WitPtrMap
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPtrMap ();
         //
         // Constructs an empty PtrMap (one that does not map any DomEls).

      WitPtrMap (WitProblem * theProblem);
         //
         // Constructs a PtrMap for those DomEls that are owned by theProblem.
         // Sets every element of this PtrMap to NULL.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPtrMap ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void allocate (WitProblem * theProblem);
         //
         // Resizes this PtrMap to cover the DomEls owned by theProblem. 
         // The value of this mapping for each DomEl will be set to NULL.

      void allocate (int nInst);
         //
         // Same as above, but # instances is specified explicitly.

      void clear ();
         //
         // Resizes this PtrMap to cover no DomEls.

      inline RangeEl * & operator () (DomEl * theDomEl);
         //
         // Returns a reference to the value of this PtrMap for theDomEl.

      inline RangeEl * operator () (DomEl * theDomEl) const;
         //
         // Const version.

      inline RangeEl & myElemAt (DomEl * theDomEl) const;
         //
         // Returns a ref to the RangeEl of this PtrMap for theDomEl.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPtrMap);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <RangeEl> myPtrVec_;
         //
         // Stores the member value for each DomEl.
   };
d114 3
a116 3
      inline RangeEl * & WitPtrMap <PtrMapArgs>::operator () (DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);
d118 2
a119 2
   return myPtrVec_[theDomEl->mappingIndex ()];
   }
d124 5
a128 5
      inline RangeEl * WitPtrMap <PtrMapArgs>::operator () (
         DomEl * theDomEl)
         const
   {
   witAssert (theDomEl != NULL);
d130 2
a131 2
   return myPtrVec_[theDomEl->mappingIndex ()];
   }
d136 3
a138 3
      inline RangeEl & WitPtrMap <PtrMapArgs>::myElemAt (DomEl * theDomEl) const
   {
   witAssert (theDomEl != NULL);
d140 1
a140 1
   witAssert (myPtrVec_[theDomEl->mappingIndex ()] != NULL);
d142 2
a143 2
   return   * myPtrVec_[theDomEl->mappingIndex ()];
   }
@


1.20
log
@Stochastic Implosion
@
text
@d88 4
d133 12
@


1.19
log
@Updated the copyright date on all source files.
@
text
@d84 4
d117 12
@


1.18
log
@Revised mappingIndex code.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.17
log
@Revised mappingIndex code.
@
text
@a19 1
#include <MapIdx.h>
@


1.16
log
@Pegged critical list.
@
text
@d111 1
a111 1
   return myPtrVec_[mappingIndex (theDomEl)];
@


1.15
log
@Continued implementation of PIP.
@
text
@a33 2
//
// Implemented in PtrMapI.h.
@


1.14
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d39 1
a39 1
      class WitPtrMap: public WitUtil
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@d20 1
d103 12
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@d74 4
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@a81 4
      inline RangeEl * operator () (DomEl * theDomEl) const;
         //
         // Returns the value of this PtrMap for theDomEl.

@


1.10
log
@Various internal changes.
@
text
@d82 4
@


1.9
log
@Various internal changes.
@
text
@d88 1
a88 1
      noCopyCtorAssignTemp (WitPtrMap, PtrMapArgs);
@


1.8
log
@fixed microsoft compile time issue
@
text
@d25 2
a26 2
#define PtrMapArgDecs  class DomEl, class RangeEl
#define PtrMapArgs           DomEl,       RangeEl
@


1.7
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d63 1
a63 3
      ~WitPtrMap ()
         {
         }
@


1.6
log
@Continued implementation of Single-Source.
@
text
@a19 1
#include <CompMgr.h>
d34 1
a34 1
// All implementation is inline.
d50 1
a50 1
      inline WitPtrMap ();
d54 1
a54 1
      inline WitPtrMap (WitProblem * theProblem);
d63 1
a63 1
      inline ~WitPtrMap ()
d71 1
a71 1
      inline void allocate (WitProblem * theProblem);
d76 1
a76 1
      inline void clear ();
a99 53

//------------------------------------------------------------------------------
// Implementation of class template PtrMap <DomEl>.
//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      inline WitPtrMap <PtrMapArgs>::WitPtrMap ():
         myPtrVec_ ()
   {
   ifDebug (DomEl * theDomEl);

   ifDebug (DomEl::verifyMappingIndex (theDomEl));
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      inline WitPtrMap <PtrMapArgs>::WitPtrMap (WitProblem * theProblem):

         myPtrVec_ ()
   {
   allocate (theProblem);
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      inline void WitPtrMap <PtrMapArgs>::allocate (WitProblem * theProblem)
   {
   int nInst;

   nInst = theProblem->myCompMgr ()->nInstances ((DomEl *) NULL);

   myPtrVec_.resize (nInst);
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      inline void WitPtrMap <PtrMapArgs>::clear ()
   {
   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs>
      inline RangeEl * & WitPtrMap <PtrMapArgs>::operator () (DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_[theDomEl->mappingIndex ()];
   }
@


1.5
log
@Continued implementation of single-source.
@
text
@d77 4
d135 8
@


1.4
log
@Initial implementation of pegging.
@
text
@d77 1
a77 1
      inline RangeEl * & operator () (const DomEl * theDomEl);
d136 1
a136 2
      inline RangeEl * & WitPtrMap <PtrMapArgs>::operator () (
         const DomEl * theDomEl)
@


1.3
log
@Replaced Mapping (*, WitTlObjPtr) with PtrMap <*, *>.
@
text
@d19 1
a20 1
#include <PtrVec.h>
@


1.2
log
@Implemented class template PtrMap.
@
text
@a71 4
      inline void clear ();
         //
         // Resizes this PtrMap to map 0 instances.

d77 1
a77 5
      inline RangeEl * valFor (const DomEl * theDomEl) const;
         //
         // Returns the value of this PtrMap for theDomEl.

      inline RangeEl * & refFor (const DomEl * theDomEl);
a80 9
      inline void setTo (RangeEl * theRangeEl);
         //
         // Sets every element of this PtrMap to theRangeEl.

      inline void copyFrom (const WitPtrMap <PtrMapArgs> & thePtrMap);
         //
         // Copies the elements of thePtrMap into the corresponding
         // elements of this PtrMap.

d136 1
a136 13
      inline RangeEl * WitPtrMap <PtrMapArgs>::valFor (
         const DomEl * theDomEl) 
         const
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_[theDomEl->mappingIndex ()];
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs>
      inline RangeEl * & WitPtrMap <PtrMapArgs>::refFor (
a141 25
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      inline void WitPtrMap <PtrMapArgs>::clear ()
   {
   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      inline void WitPtrMap <PtrMapArgs>::setTo (RangeEl * theRangeEl)
   {
   myPtrVec_ = theRangeEl;
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      inline void WitPtrMap <PtrMapArgs>::copyFrom (
         const WitPtrMap <PtrMapArgs> & thePtrMap)
   {
   myPtrVec_ = thePtrMap.myPtrVec_;
@


1.1
log
@Some more template stuff.
@
text
@d16 1
a16 1
// Contains the declaration of class template AbsPtrMap <DomInst>.
d23 1
a23 1
// Class template AbsPtrMap <DomInst>
d26 2
a27 6
template <class DomInst>
      class WitAbsPtrMap: public WitUtil
   {
      //------------------------------------------------------------------------
      // Friends.
      //------------------------------------------------------------------------
d29 8
a36 1
      friend void witImplementAbsPtrMap ();
d38 3
a46 10
      size_t domainSize () const;
         //
         // Returns # DomInsts mapped.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

d51 1
a51 1
      WitAbsPtrMap ();
d53 1
a53 1
         // Constructs an empty AbsPtrMap (one that does not map any DomInsts).
d55 1
a55 1
      WitAbsPtrMap (WitProblem * theProblem);
d57 2
a58 3
         // Constructs a AbsPtrMap for those DomInsts that are owned by
         // theProblem.
         // Sets every element of this AbsPtrMap to NULL.
d64 3
a66 1
      ~WitAbsPtrMap ();
d69 1
a69 1
      // Other protected member functions.
d72 1
a72 1
      void clearAbs ();
d74 1
a74 1
         // Resizes this AbsPtrMap to map 0 instances.
d76 1
a76 1
      void allocateAbs (WitProblem * theProblem);
d78 2
a79 2
         // Resizes this AbsPtrMap to cover the DomInsts owned by theProblem. 
         // The value of this mapping for each DomInst will be set to NULL.
d81 1
a81 1
      inline WitTlObj * valForAbs (const DomInst * theDomInst) const;
d83 1
a83 1
         // Returns the value of this AbsPtrMap for theDomInst.
d85 1
a85 1
      inline WitTlObj * & refForAbs (const DomInst * theDomInst);
d87 1
a87 1
         // Returns a reference to the value of this AbsPtrMap for theDomInst.
d89 1
a89 1
      void setToAbs (WitTlObj * theTlObj);
d91 1
a91 1
         // Sets every element of this AbsPtrMap to theTlObj.
d93 1
a93 1
      void copyFromAbs (const WitAbsPtrMap <DomInst> & theAbsPtrMap);
d95 2
a96 4
         // Copies the elements of theAbsPtrMap into the corresponding
         // elements of this AbsPtrMap.

      accessFunc (const WitPtrVec <WitTlObj> &, myPtrVec)
d104 1
a104 1
      noCopyCtorAssignTemp (WitAbsPtrMap, DomInst);
d110 1
a110 1
      WitPtrVec <WitTlObj> myPtrVec_;
d112 1
a112 1
         // Stores the member value for each DomInst.
d116 12
a127 1
// Implementations of inlines.
d130 25
a154 3
template <class DomInst>
      inline WitTlObj * WitAbsPtrMap <DomInst>::valForAbs (const DomInst *
         theDomInst) 
d157 1
a157 1
   witAssert (theDomInst != NULL);
d159 1
a159 1
   return myPtrVec_[theDomInst->mappingIndex ()];
d164 3
a166 3
template <class DomInst>
      inline WitTlObj * & WitAbsPtrMap <DomInst>::refForAbs (const DomInst * 
         theDomInst)
d168 6
a173 1
   witAssert (theDomInst != NULL);
d175 21
a195 1
   return myPtrVec_[theDomInst->mappingIndex ()];
@

