head	1.66;
access;
symbols
	sce_5_01_20080919:1.61
	latest_sce_4_20_20060523:1.45.0.2
	sce_4_20_20060523:1.45
	latest_sce4_20_OSL:1.44.0.2
	sce_4_20_OSL:1.44
	sce_410_withVa:1.41
	sce_4_05_20040511:1.33
	sce_4_00_20040201:1.26
	nextGenBranch:1.25.0.2
	nextGenRoot:1.25
	sce_3_30_20030627:1.25
	EndRw-branch:1.17.0.4
	Root-of-EndRw:1.17
	rwToStl:1.17.0.2
	latest_sce_3_10_20010924:1.5.0.6
	sce_3_10_20010924:1.5
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.66
date	2011.09.28.23.49.05;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2011.09.24.00.27.22;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2011.08.30.20.17.18;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2010.09.10.22.45.33;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2009.12.25.00.10.46;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2008.02.25.19.37.56;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2007.11.15.17.15.32;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.11.13.20.17.37;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.11.07.21.50.11;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.06.05.21.05.59;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.06.05.16.15.22;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.06.01.22.25.07;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.05.30.16.01.18;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2007.05.10.21.58.10;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2007.04.17.20.19.01;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2007.04.03.22.04.03;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2007.02.27.22.59.28;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2007.02.27.21.03.03;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2007.02.27.19.59.30;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2007.02.10.00.08.13;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2007.01.15.22.25.29;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.02.17.33.55;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2006.03.14.21.10.12;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2005.11.15.21.27.22;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2005.09.30.21.57.54;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2005.03.16.17.00.30;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2005.03.03.21.25.12;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2005.03.02.23.56.51;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2005.03.02.22.34.35;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2005.03.02.21.59.45;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2005.02.25.21.26.10;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2005.02.24.23.23.55;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2005.01.26.23.50.31;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2004.04.09.21.24.26;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.04.02.23.45.20;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.03.31.22.56.07;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.24.22.21.28;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.05.22.19.56;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.02.12.19.13.38;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.02.07.00.12.09;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2003.11.11.18.29.11;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2003.03.19.16.48.12;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.03.07.23.46.13;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.26.23.51.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.02.26.21.42.52;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.21.18.56.23;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.13.23.06.25;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.01.23.19.13.19;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.02.22.18.19;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.08.02.17.03.33;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.24.22.02.24;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.04.23.07.17;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.03.22.35.16;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.03.16.01.45;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.30.20.08.56;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.29.21.35.43;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.08.19.21.46;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.01.14.25.52;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.25.19.14.48;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.22.14.32.03;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.18.14.02.26;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.37;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.20;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.29.21.22.42;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.22;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.19;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.19;	author wit;	state Exp;
branches;
next	;


desc
@@


1.66
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef BomEntryH
#define BomEntryH

//------------------------------------------------------------------------------
// Header file: "BomEntry.h"
//
// Contains the declaration of the class BomEntry
//------------------------------------------------------------------------------

#include <ConsEntry.h>

//------------------------------------------------------------------------------
// class BomEntry: "Bill-Of-Manufacturing Entry"
// An BillEntry representing the consumption of a Part in the execution of an
// Operation.
// The part consumed is considered to be the "normal" part consumed.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       DelComp
//          BillEntry
//             ConsEntry
//                BomEntry
//------------------------------------------------------------------------------

class WitBomEntry: public WitConsEntry
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBomEntry (WitOperation * theOpn, WitPart * thePart);
         //
         // myOperation_ <-- theOpn.
         // ConsEntry    <<< thePart.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBomEntry ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOperation *,                myOperation)
      accessFunc (const WitList <WitSubEntry> &, mySubEntries)
      accessFunc (bool,                          mandEC)
      accessFunc (bool,                          singleSource)
      accessFunc (const WitFlexVec <bool> &,     propRtg)
      accessFunc (const WitFlexVec <bool> &,     hasSubsInEffect)

      const WitDblFlexVec & nonSubVol ();

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitBomEntry)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (bool defMandEC,       false)
      defaultValue (bool defSingleSource, false)
      defaultValue (bool defPropRtg,      false)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setMandEC       (bool);
      void setSingleSource (bool);
      void setPropRtg      (const WitBoolean *);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePreMySubEntries    (const WitList <WitSubEntry> &);
      void storePreHasSubsInEffect (const WitTVec <bool> &);
         //
         // Valid only when preprocessing is being performed.

      void storePostNonSubVol (const WitTVec <double> &);
         //
         // Valid only when postprocessing is being performed.

      void storeOptNonSubVol (WitPeriod, double);
         //
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.

      //------------------------------------------------------------------------
      // Insert functions.
      // Each of these functions does an appendUniquely on the argument for the
      // appropriate List.
      //------------------------------------------------------------------------

      void insert (WitSubEntry *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool          inserted         ();
      virtual void          identifyInstance ();
      virtual void          writeSetClause   ();
      virtual void          copySelfInto     (WitCompMgr * theCompMgr);
      virtual void          recount          ();
      virtual void          unpreprocess     ();
      virtual WitBomEntry * thisBomEnt       ();
         //
         // Overrides from class Component.

      virtual WitMsgFrag objTypeMsgFrag ();
      virtual WitAttr    apiObjItrState ();
         //
         // Override from class DelComp.

      void copyAttrsFrom (WitBomEntry * theBomEnt);
         //
         // Copies the input attributes of theBomEnt into this BomEntry.

      inline static WitBomEntry * key (WitListItr & theItr)
         {
         return reinterpret_cast <WitBomEntry *> (theItr.key ());
         }
         //
         // Used by forEach<object> macros.

      void setUsageTime34 (double theValue);
         //
         // Assigns a value to offset that emulates the WIT 3.4
         // attribute of usageTime == theValue, given the current value of
         // myOperation ()->cycleTime34 ().
         // Issues a fatal error, if not in wit34Compatible mode.

      double usageTime34 (WitPeriod thePer);
         //
         // Computes and returns a value of the WIT 3.4 usageTime attribute
         // corresponding to the current values of offset ()[thePer] and
         // myOperation ()->cycleTime34 ()[thePer].
         // Issues a fatal error, if not in wit34Compatible mode.

      double usageTime34 ();
         //
         // Returns usageTime34 (0), which is the convention for determining
         // usageTime from offset and cycleTime34 ().

      void adjustOffset (const WitIVRealArg & newCycleTime34);
         //
         // Adjusts offset () so that usageTime34 () will give the same result
         // after myOperation ()->cycleTime34 () is changed from its current
         // value to newCycleTime34.

      void display ();
         //
         // Displays the input and preprocessing data for this BomEntry.

      void writeSubSoln ();
         //
         // Prints the comprehensive implosion solution for the SubEntries
         // for this BomEntry.

      void writeMrpSubSoln ();
         //
         // Prints the comprehensive MRP solution for the SubEntries
         // for this BomEntry.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBomEntry);

      virtual WitOperation * derivedOperation ();
         //
         // Override from class BillEntry.

      virtual void displayMandEC ();
         //
         // Override from class BillEntry.
         // Displays mandEC.

      virtual WitBomEntry * derivedBomEntry ();
         //
         // Override from class ConsEntry.

      virtual void writeDataID ();
         //
         // Override from class Component.

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // Override from class DelComp.

      virtual void purgeCompListsSpec ();
         //
         // Override from class Component.

      virtual void clearDepListsSpec ();
         //
         // Override from class Component.

      void writeOffset34 ();
         //
         // Writes offset to the WIT data file in 3.4 compatible mode. 
         // In this case, offset must be written unconditionally, because it's
         // initialized to cycleTime34 rather than defOffset ().

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # BomEntries constructed before this one.

      WitOperation * const myOperation_;
         //
         // The Operation to which this BomEntry belongs.

      //------------------------------------------------------------------------
      // Data maintained by myCompMgr ().
      //------------------------------------------------------------------------

      WitList <WitSubEntry> mySubEntries_;
         //
         // The list of substitutes for the BomEntry.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      bool mandEC_;
         //
         // true, iff effectivity dates reflect a mandatory engineering change.

      bool singleSource_;
         //
         // The single-source technique is to be applied to this BomEntry, iff
         // singleSource_ is true.

      WitFlexVec <bool> propRtg_;
         //
         // The proportionate routing technique is to be applied to this
         // BomEntry in thePer, iff propRtg_[thePer] is true.

      //------------------------------------------------------------------------
      // Data set by general preprocessing.
      //------------------------------------------------------------------------

      WitFlexVec <bool> hasSubsInEffect_;
         //
         // hasSubsInEffect_[execPer] is true, iff this BomEntry has at least
         // one SubEntry in effect in execPer.

      //------------------------------------------------------------------------
      // Data set by postprocessing.
      //------------------------------------------------------------------------

      WitDblFlexVec nonSubVol_;
         //
         // nonSubVol_[thePer] is the amount of 
         // myOperation ()->execVol ()[thePer]
         // that is not due to substitution of this BomEntry.
         // Not used if mySubEntries () is empty.
   };

#endif
@


1.65
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.64
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d38 2
a39 114
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitBomEntry (WitOperation * theOpn, WitPart * thePart);
//
// myOperation_ <-- theOpn.
// ConsEntry    <<< thePart.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitBomEntry ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitOperation *,                myOperation)
accessFunc (const WitList <WitSubEntry> &, mySubEntries)
accessFunc (bool,                          mandEC)
accessFunc (bool,                          singleSource)
accessFunc (const WitFlexVec <bool> &,     propRtg)
accessFunc (const WitFlexVec <bool> &,     hasSubsInEffect)

const WitDblFlexVec & nonSubVol ();

//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------

decMappingIndex (WitBomEntry)

static int nInstances (WitProblem *);

//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------

defaultValue (bool defMandEC,       false)
defaultValue (bool defSingleSource, false)
defaultValue (bool defPropRtg,      false)

//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------

void setMandEC       (bool);
void setSingleSource (bool);
void setPropRtg      (const WitBoolean *);

//------------------------------------------------------------------------
// store<Activity><Attr> functions.
// Each of these functions sets the value of indicated attribute to the
// value of the argument.
// Each function is only valid when the indicated activity is being
// performed.
//------------------------------------------------------------------------

void storePreMySubEntries    (const WitList <WitSubEntry> &);
void storePreHasSubsInEffect (const WitTVec <bool> &);
//
// Valid only when preprocessing is being performed.

void storePostNonSubVol (const WitTVec <double> &);
//
// Valid only when postprocessing is being performed.

void storeOptNonSubVol (WitPeriod, double);
//
// Valid only when the optimizing implosion subsystem is uploading the
// solution.

//------------------------------------------------------------------------
// Insert functions.
// Each of these functions does an appendUniquely on the argument for the
// appropriate List.
//------------------------------------------------------------------------

void insert (WitSubEntry *);

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual bool          inserted         ();
virtual void          identifyInstance ();
virtual void          writeSetClause   ();
virtual void          copySelfInto     (WitCompMgr * theCompMgr);
virtual void          recount          ();
virtual void          unpreprocess     ();
virtual WitBomEntry * thisBomEnt       ();
//
// Overrides from class Component.

virtual WitMsgFrag objTypeMsgFrag ();
virtual WitAttr    apiObjItrState ();
//
// Override from class DelComp.

void copyAttrsFrom (WitBomEntry * theBomEnt);
//
// Copies the input attributes of theBomEnt into this BomEntry.

inline static WitBomEntry * key (WitListItr & theItr)
{
return reinterpret_cast <WitBomEntry *> (theItr.key ());
}
//
// Used by forEach<object> macros.
d41 261
a301 149
void setUsageTime34 (double theValue);
//
// Assigns a value to offset that emulates the WIT 3.4
// attribute of usageTime == theValue, given the current value of
// myOperation ()->cycleTime34 ().
// Issues a fatal error, if not in wit34Compatible mode.

double usageTime34 (WitPeriod thePer);
//
// Computes and returns a value of the WIT 3.4 usageTime attribute
// corresponding to the current values of offset ()[thePer] and
// myOperation ()->cycleTime34 ()[thePer].
// Issues a fatal error, if not in wit34Compatible mode.

double usageTime34 ();
//
// Returns usageTime34 (0), which is the convention for determining
// usageTime from offset and cycleTime34 ().

void adjustOffset (const WitIVRealArg & newCycleTime34);
//
// Adjusts offset () so that usageTime34 () will give the same result
// after myOperation ()->cycleTime34 () is changed from its current
// value to newCycleTime34.

void display ();
//
// Displays the input and preprocessing data for this BomEntry.

void writeSubSoln ();
//
// Prints the comprehensive implosion solution for the SubEntries
// for this BomEntry.

void writeMrpSubSoln ();
//
// Prints the comprehensive MRP solution for the SubEntries
// for this BomEntry.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitBomEntry);

virtual WitOperation * derivedOperation ();
//
// Override from class BillEntry.

virtual void displayMandEC ();
//
// Override from class BillEntry.
// Displays mandEC.

virtual WitBomEntry * derivedBomEntry ();
//
// Override from class ConsEntry.

virtual void writeDataID ();
//
// Override from class Component.

virtual void writeDataAttrs ();
//
// Override from class Component.

virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
//
// Override from class DelComp.

virtual void purgeCompListsSpec ();
//
// Override from class Component.

virtual void clearDepListsSpec ();
//
// Override from class Component.

void writeOffset34 ();
//
// Writes offset to the WIT data file in 3.4 compatible mode.
// In this case, offset must be written unconditionally, because it's
// initialized to cycleTime34 rather than defOffset ().

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Data set by the constructor.
//------------------------------------------------------------------------

int mappingIndex_;
//
// Mapping index: see Mapping.h.
// == # BomEntries constructed before this one.

WitOperation * const myOperation_;
//
// The Operation to which this BomEntry belongs.

//------------------------------------------------------------------------
// Data maintained by myCompMgr ().
//------------------------------------------------------------------------

WitList <WitSubEntry> mySubEntries_;
//
// The list of substitutes for the BomEntry.

//------------------------------------------------------------------------
// Input data.
//------------------------------------------------------------------------

bool mandEC_;
//
// true, iff effectivity dates reflect a mandatory engineering change.

bool singleSource_;
//
// The single-source technique is to be applied to this BomEntry, iff
// singleSource_ is true.

WitFlexVec <bool> propRtg_;
//
// The proportionate routing technique is to be applied to this
// BomEntry in thePer, iff propRtg_[thePer] is true.

//------------------------------------------------------------------------
// Data set by general preprocessing.
//------------------------------------------------------------------------

WitFlexVec <bool> hasSubsInEffect_;
//
// hasSubsInEffect_[execPer] is true, iff this BomEntry has at least
// one SubEntry in effect in execPer.

//------------------------------------------------------------------------
// Data set by postprocessing.
//------------------------------------------------------------------------

WitDblFlexVec nonSubVol_;
//
// nonSubVol_[thePer] is the amount of
// myOperation ()->execVol ()[thePer]
// that is not due to substitution of this BomEntry.
// Not used if mySubEntries () is empty.
};
@


1.63
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d38 114
a151 2
   {
   public:
d153 149
a301 261
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBomEntry (WitOperation * theOpn, WitPart * thePart);
         //
         // myOperation_ <-- theOpn.
         // ConsEntry    <<< thePart.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBomEntry ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOperation *,                myOperation)
      accessFunc (const WitList <WitSubEntry> &, mySubEntries)
      accessFunc (bool,                          mandEC)
      accessFunc (bool,                          singleSource)
      accessFunc (const WitFlexVec <bool> &,     propRtg)
      accessFunc (const WitFlexVec <bool> &,     hasSubsInEffect)

      const WitDblFlexVec & nonSubVol ();

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitBomEntry)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (bool defMandEC,       false)
      defaultValue (bool defSingleSource, false)
      defaultValue (bool defPropRtg,      false)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setMandEC       (bool);
      void setSingleSource (bool);
      void setPropRtg      (const WitBoolean *);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePreMySubEntries    (const WitList <WitSubEntry> &);
      void storePreHasSubsInEffect (const WitTVec <bool> &);
         //
         // Valid only when preprocessing is being performed.

      void storePostNonSubVol (const WitTVec <double> &);
         //
         // Valid only when postprocessing is being performed.

      void storeOptNonSubVol (WitPeriod, double);
         //
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.

      //------------------------------------------------------------------------
      // Insert functions.
      // Each of these functions does an appendUniquely on the argument for the
      // appropriate List.
      //------------------------------------------------------------------------

      void insert (WitSubEntry *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool          inserted         ();
      virtual void          identifyInstance ();
      virtual void          writeSetClause   ();
      virtual void          copySelfInto     (WitCompMgr * theCompMgr);
      virtual void          recount          ();
      virtual void          unpreprocess     ();
      virtual WitBomEntry * thisBomEnt       ();
         //
         // Overrides from class Component.

      virtual WitMsgFrag objTypeMsgFrag ();
      virtual WitAttr    apiObjItrState ();
         //
         // Override from class DelComp.

      void copyAttrsFrom (WitBomEntry * theBomEnt);
         //
         // Copies the input attributes of theBomEnt into this BomEntry.

      inline static WitBomEntry * key (WitListItr & theItr)
         {
         return reinterpret_cast <WitBomEntry *> (theItr.key ());
         }
         //
         // Used by forEach<object> macros.

      void setUsageTime34 (double theValue);
         //
         // Assigns a value to offset that emulates the WIT 3.4
         // attribute of usageTime == theValue, given the current value of
         // myOperation ()->cycleTime34 ().
         // Issues a fatal error, if not in wit34Compatible mode.

      double usageTime34 (WitPeriod thePer);
         //
         // Computes and returns a value of the WIT 3.4 usageTime attribute
         // corresponding to the current values of offset ()[thePer] and
         // myOperation ()->cycleTime34 ()[thePer].
         // Issues a fatal error, if not in wit34Compatible mode.

      double usageTime34 ();
         //
         // Returns usageTime34 (0), which is the convention for determining
         // usageTime from offset and cycleTime34 ().

      void adjustOffset (const WitIVRealArg & newCycleTime34);
         //
         // Adjusts offset () so that usageTime34 () will give the same result
         // after myOperation ()->cycleTime34 () is changed from its current
         // value to newCycleTime34.

      void display ();
         //
         // Displays the input and preprocessing data for this BomEntry.

      void writeSubSoln ();
         //
         // Prints the comprehensive implosion solution for the SubEntries
         // for this BomEntry.

      void writeMrpSubSoln ();
         //
         // Prints the comprehensive MRP solution for the SubEntries
         // for this BomEntry.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBomEntry);

      virtual WitOperation * derivedOperation ();
         //
         // Override from class BillEntry.

      virtual void displayMandEC ();
         //
         // Override from class BillEntry.
         // Displays mandEC.

      virtual WitBomEntry * derivedBomEntry ();
         //
         // Override from class ConsEntry.

      virtual void writeDataID ();
         //
         // Override from class Component.

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      virtual void findPrereqs (WitDelComp * & prereq1, WitDelComp * & prereq2);
         //
         // Override from class DelComp.

      virtual void purgeCompListsSpec ();
         //
         // Override from class Component.

      virtual void clearDepListsSpec ();
         //
         // Override from class Component.

      void writeOffset34 ();
         //
         // Writes offset to the WIT data file in 3.4 compatible mode. 
         // In this case, offset must be written unconditionally, because it's
         // initialized to cycleTime34 rather than defOffset ().

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # BomEntries constructed before this one.

      WitOperation * const myOperation_;
         //
         // The Operation to which this BomEntry belongs.

      //------------------------------------------------------------------------
      // Data maintained by myCompMgr ().
      //------------------------------------------------------------------------

      WitList <WitSubEntry> mySubEntries_;
         //
         // The list of substitutes for the BomEntry.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      bool mandEC_;
         //
         // true, iff effectivity dates reflect a mandatory engineering change.

      bool singleSource_;
         //
         // The single-source technique is to be applied to this BomEntry, iff
         // singleSource_ is true.

      WitFlexVec <bool> propRtg_;
         //
         // The proportionate routing technique is to be applied to this
         // BomEntry in thePer, iff propRtg_[thePer] is true.

      //------------------------------------------------------------------------
      // Data set by general preprocessing.
      //------------------------------------------------------------------------

      WitFlexVec <bool> hasSubsInEffect_;
         //
         // hasSubsInEffect_[execPer] is true, iff this BomEntry has at least
         // one SubEntry in effect in execPer.

      //------------------------------------------------------------------------
      // Data set by postprocessing.
      //------------------------------------------------------------------------

      WitDblFlexVec nonSubVol_;
         //
         // nonSubVol_[thePer] is the amount of 
         // myOperation ()->execVol ()[thePer]
         // that is not due to substitution of this BomEntry.
         // Not used if mySubEntries () is empty.
   };
@


1.62
log
@Multi-Objective Mode
@
text
@d19 1
a19 1
#include <ConsEnt.h>
@


1.61
log
@Object name change.
@
text
@d129 1
@


1.60
log
@Stochastic Implosion
@
text
@a198 9
      static WitPart * preconstruct (
            WitOperation * theOpn,
            WitPart *      thePart);
         //
         // The args are the same of those of the ctor.
         // Performs the follow actions at the beginning of construction:
         // * Validates the args.
         // * Returns thePart.

@


1.59
log
@Stochastic Implosion
@
text
@d101 5
a130 1
      virtual void          passPreRefs      ();
@


1.58
log
@Stochastic Implosion
@
text
@d105 5
@


1.57
log
@Stochastic Implosion
@
text
@a38 2
      friend class WitPostAccess;

d94 12
@


1.56
log
@Stochastic Implosion
@
text
@a111 1
      virtual void          importPreData    ();
@


1.55
log
@Stochastic Implosion
@
text
@d111 1
@


1.54
log
@Stochastic Implosion
@
text
@a38 1
      friend class WitPreAccess;
@


1.53
log
@Stochastic Implosion
@
text
@d112 1
@


1.52
log
@Stochastic Implosion
@
text
@d108 6
a113 1
      virtual bool inserted ();
d115 1
a115 5
         // Override from class Component.

      virtual void identifyInstance ();
         //
         // Override from class Component.
d118 1
a121 11
      virtual WitAttr apiObjItrState ();
         //
         // Override from class DelComp.

      virtual void          copySelfInto (WitCompMgr * theCompMgr);
      virtual void          recount      ();
      virtual void          unpreprocess ();
      virtual WitBomEntry * thisBomEnt   ();
         //
         // Overrides from class Component.

@


1.51
log
@Stochastic Implosion.
@
text
@d231 6
@


1.50
log
@[disallowed backlog]
@
text
@d112 1
a112 1
      virtual WitMsgFragID classFragID ();
d116 1
a116 1
      virtual void identifyInstance ();
d118 1
a118 1
         // Override from class Component.
@


1.49
log
@[disallowed backlog]
@
text
@d39 1
a180 4
      static void transmitDMPs ();
         //
         // See comment on transmitAllDMPs in CompMgr.h.

@


1.48
log
@Rescinded all changed made since 1/31/07.
@
text
@d39 2
@


1.47
log
@[disallowed backlog]
@
text
@a59 1
      accessFunc (const WitFlexVec <bool> &,     hasSubsInEffect)
d65 1
a167 5
      static void sortSubEntries (WitProblem * theProblem);
         //
         // Sorts the SubEntries of each BomEntry in order of non-decreasing
         // expNetAversion.

a181 9
      //------------------------------------------------------------------------
      // Restricted public member data.
      //------------------------------------------------------------------------

      WitPreRestricted <WitFlexVec <bool> > hasSubsInEffect_;
         //
         // hasSubsInEffect_[execPer] is true, iff this BomEntry has at least
         // one SubEntry in effect in execPer.

d276 9
@


1.46
log
@witCopy<Object>Data
@
text
@d60 1
a65 1
      accessFunc (const WitFlexVec <bool> &,     hasSubsInEffect)
d168 5
d187 9
a289 9
      // Data set by general preprocessing.
      //------------------------------------------------------------------------

      WitFlexVec <bool> hasSubsInEffect_;
         //
         // hasSubsInEffect_[execPer] is true, iff this BomEntry has at least
         // one SubEntry in effect in execPer.

      //------------------------------------------------------------------------
@


1.45
log
@Updated the copyright date on all source files.
@
text
@d128 4
a219 4
      void copyAttrsFrom (WitBomEntry * theBomEnt);
         //
         // Copies the input attributes of theBomEnt into this BomEntry.

@


1.44
log
@GPIP
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.43
log
@[shared-resource pegging]
@
text
@d281 2
a282 2
         // hasSubsInEffect_[thePer] is true, iff this BomEntry has at least one
         // SubEntry in effect in thePer.
@


1.42
log
@[multi-thread]
@
text
@d130 1
a130 1
         return fromTlObj_cast <WitBomEntry> (theItr.key ());
@


1.41
log
@Vector PropRtg.
@
text
@a124 2
      virtual void          loadPre      ();
      virtual void          loadPost     ();
d174 4
@


1.40
log
@Vector PropRtg.
@
text
@a90 1
      void setPropRouting  (bool);
@


1.39
log
@Vector PropRtg.
@
text
@a63 1
      accessFunc (bool,                          propRouting)
a82 1
      defaultValue (bool defPropRouting,  false)
a268 5
      bool propRouting_;
         //
         // Same as propRtg_[0].
         // To be removed.

d272 1
a272 1
         // BomEntry in thePer, iff propRouting_[thePer] is true.
@


1.38
log
@Vector PropRtg.
@
text
@d273 2
a274 2
         // The proportionate routing technique is to be applied to this
         // BomEntry, iff propRouting_ is true.
d278 2
a279 1
         // propRtg_[thePer] == propRouting_ in all periods.
@


1.37
log
@Vector Prop-Rtg.
@
text
@d65 1
a65 1
      accessFunc (const WitFlexVec <bool> &,     propRt)
d85 1
a85 1
      defaultValue (bool defPropRt,       false)
d94 1
a94 1
      void setPropRt       (const WitBoolean *);
d276 1
a276 1
      WitFlexVec <bool> propRt_;
d278 1
a278 1
         // propRt_[thePer] == propRouting_ in all periods.
@


1.36
log
@Vector PropRt.
@
text
@d278 1
a278 1
         // Under construction.
@


1.35
log
@Vector PropRt.
@
text
@d65 1
d85 1
d94 1
d276 4
@


1.34
log
@Pegged critical list.
@
text
@d156 1
a156 1
      void adjustOffset (const WitInVecRA & newCycleTime34);
@


1.33
log
@Double Precision.
@
text
@a66 2
      accessNonNull (WitRtSite *,                myRtSite)

a175 5
      void attach       (WitRtSite *);
      void detachRtSite ();
         //
         // Sets and resets myRtSite_.

a291 9

      //------------------------------------------------------------------------
      // Data set by heuristic allocation.
      //------------------------------------------------------------------------

      WitRtSite * myRtSite_;
         //
         // The RtSite that represents this BomEntry, during heuristic
         // allocation. NULL, when heuristic allocation is inactive.
@


1.32
log
@Double Precision.
@
text
@d158 1
a158 1
      void adjustOffset (const float * newCycleTime34);
@


1.31
log
@Double Precision.
@
text
@a163 6
      void adjustOffset (const WitInVecRA & newCycleTime34);
         //
         // Adjusts offset () so that usageTime34 () will give the same result
         // after myOperation ()->cycleTime34 () is changed from its current
         // value to newCycleTime34.

@


1.30
log
@Double Precision.
@
text
@d164 6
@


1.29
log
@Double Precision.
@
text
@d69 1
a69 1
      const WitFlexVec <double> & nonSubVol ();
d293 1
a293 1
      WitFlexVec <double> nonSubVol_;
@


1.28
log
@Continued double precision.
@
text
@d146 1
a146 1
      double usageTime34 (WitPeriod t);
d149 2
a150 2
         // corresponding to the current values of offset ()[t] and
         // myOperation ()->cycleTime34 ()[t].
@


1.27
log
@Continued double precision.
@
text
@d139 1
a139 1
      void setUsageTime34 (StrDbl theValue);
d146 1
a146 1
      StrDbl usageTime34 (WitPeriod t);
d153 1
a153 1
      StrDbl usageTime34 ();
@


1.26
log
@Removed a bad function overload.
@
text
@d139 1
a139 1
      void setUsageTime34 (float theValue);
d146 1
a146 1
      float usageTime34 (WitPeriod t);
d153 1
a153 1
      float usageTime34 ();
@


1.25
log
@Continued implementation of proportionate routing.
@
text
@d126 1
a126 1
      virtual WitBomEntry * myBomEnt     ();
@


1.24
log
@Continued implementation of proportionate routing.
@
text
@d123 6
a128 1
      virtual void copySelfInto (WitCompMgr * theCompMgr);
d130 1
a130 16
         // Override from class Component.

      virtual void recount ();
         //
         // Override from class Component.

      virtual void unpreprocess ();
         //
         // Override from class Component.

      virtual void getBomEntry (WitBomEntry * &);
         //
         // Override from class Component.

      virtual void loadPre  ();
      virtual void loadPost ();
@


1.23
log
@Continued implementation of proportionate routing.
@
text
@d66 2
a67 1
      accessFunc (WitRtSite *,                   myRtSite)
@


1.22
log
@Continued implementation of proportionate routing.
@
text
@d66 1
a66 2

      accessNonNull (WitRtSite *, myRtSite)
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d67 2
d188 5
d309 9
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@d64 1
d83 1
d91 1
d277 5
@


1.19
log
@Replaced some C style casts with C++ style casts.
@
text
@d66 6
d74 1
a74 1
      const WitFlexVec <double> & nonSubVol ();
@


1.18
log
@Internal changes.
@
text
@d133 1
a133 1
         return (WitBomEntry *) theItr.key ();
@


1.17
log
@Began implementation of optimizing implosion with OSL V3.
@
text
@d60 5
a64 5
      accessFunc (WitOperation *,                  myOperation)
      accessFunc (const WitList <WitSubEntry> &,   mySubEntries)
      accessFunc (WitBoolean,                      mandEC)
      accessFunc (WitBoolean,                      singleSource)
      accessFunc (const WitFlexVec <WitBoolean> &, hasSubsInEffect)
d74 2
a75 2
      defaultValue (WitBoolean defMandEC,       witFALSE)
      defaultValue (WitBoolean defSingleSource, witFALSE)
d81 2
a82 2
      void setMandEC       (WitBoolean);
      void setSingleSource (WitBoolean);
d96 1
a96 1
      virtual WitBoolean inserted ();
d260 1
a260 1
      WitBoolean mandEC_;
d262 1
a262 1
         // TRUE, iff effectivity dates reflect a mandatory engineering change.
d264 1
a264 1
      WitBoolean singleSource_;
d267 1
a267 1
         // singleSource_ is TRUE.
d273 1
a273 1
      WitFlexVec <WitBoolean> hasSubsInEffect_;
d275 1
a275 1
         // hasSubsInEffect_[thePer] is TRUE, iff this BomEntry has at least one
@


1.16
log
@Continued implementation of Single-Source.
@
text
@d289 1
@


1.15
log
@Continued implementation of single-source.
@
text
@d63 1
d74 2
a75 1
      defaultValue (WitBoolean defMandEC, witFALSE)
d81 2
a82 1
      void setMandEC (WitBoolean);
d263 5
@


1.14
log
@Continued implementation of single-source.
@
text
@a81 8
      // Conditional reference access functions.
      //------------------------------------------------------------------------

      conditionalRef (WitList <WitSubEntry>,   mySubEntries,    preprocAcc ())
      conditionalRef (WitFlexVec <WitBoolean>, hasSubsInEffect, preprocAcc ())
      conditionalRef (WitFlexVec <double>,     nonSubVol,       preprocAcc ())

      //------------------------------------------------------------------------
d117 4
d125 1
@


1.13
log
@Continued implementation of single-source.
@
text
@d87 1
a87 2
      conditionalRef (WitFlexVec <double>,     nonSubVol,       preprocAcc () ||
                                                               postprocAcc ())
d128 2
@


1.12
log
@Continued implementation of single-source.
@
text
@d87 2
a88 1
      conditionalRef (WitFlexVec <double>,     nonSubVol,       preprocAcc ())
a164 4

      void compNonSubVol ();
         //
         // Computes nonSubVol_.
@


1.11
log
@Continued implementation of single-source.
@
text
@a128 4
      virtual void importPostprocResults ();
         //
         // Override from class Component.

d164 4
@


1.10
log
@Preliminary work on single source.
@
text
@d87 1
a87 2
      conditionalRef (WitFlexVec <double>,     nonSubVol,       preprocAcc () ||
                                                               postprocAcc ())
d126 4
@


1.9
log
@Preliminary work on single source.
@
text
@d63 1
a63 1
      accessFunc (const WitFlexVec (WitBoolean) &, hasSubsInEffect)
d67 1
a67 1
      const WitFlexVec (double) & nonSubVol ();
d86 2
a87 2
      conditionalRef (WitFlexVec (WitBoolean), hasSubsInEffect, preprocAcc ())
      conditionalRef (WitFlexVec (double),     nonSubVol,       preprocAcc () ||
d267 1
a267 1
      WitFlexVec (WitBoolean) hasSubsInEffect_;
d276 1
a276 1
      WitFlexVec (double) nonSubVol_;
@


1.8
log
@Continued implementation of object iteration.
@
text
@d61 1
a61 1
      accessFunc (const WitList (WitSubEntry) &,   mySubEntries)
d85 1
a85 1
      conditionalRef (WitList (WitSubEntry),   mySubEntries,    preprocAcc ())
d251 1
a251 1
      WitList (WitSubEntry) mySubEntries_;
@


1.7
log
@Continued implementation of object iteration.
@
text
@d114 1
a114 1
      virtual WitAttr apiItrState ();
@


1.6
log
@Began implementation of object iteration.
@
text
@d114 4
d123 4
@


1.5
log
@Refactoring for selection splitting.
@
text
@d67 1
a67 7
      inline const WitFlexVec (double) & nonSubVol ()
         {
         if (mySubEntries ().isEmpty ())
            return myOperation ()->execVol ();
         else
            return nonSubVol_;
         }
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d180 1
a180 3
      copyCtorAndAssignment (WitBomEntry);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@d120 1
a120 1
      virtual void copyInto (WitCompMgr * theCompMgr);
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d67 1
a67 1
      inline const WitTVec (float) & nonSubVol ()
d93 1
a93 1
      conditionalRef (WitTVec (float),         nonSubVol,       preprocAcc () ||
d276 1
a276 1
      WitTVec (float) nonSubVol_;
d278 2
a279 1
         // nonSubVol_[t] is the amount of myOperation ()->execVol ()[t]
d281 1
a281 1
         // Unallocated if mySubEntries () is empty.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
