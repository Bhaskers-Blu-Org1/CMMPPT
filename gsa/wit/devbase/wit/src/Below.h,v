head	1.37;
access;
symbols
	sce_5_01_20080919:1.34
	latest_sce_4_20_20060523:1.25.0.2
	sce_4_20_20060523:1.25
	latest_sce4_20_OSL:1.24.0.2
	sce_4_20_OSL:1.24
	sce_410_withVa:1.16
	sce_4_05_20040511:1.15
	sce_4_00_20040201:1.15
	nextGenBranch:1.15.0.2
	nextGenRoot:1.15
	sce_3_30_20030627:1.15
	EndRw-branch:1.14.0.4
	Root-of-EndRw:1.14
	rwToStl:1.14.0.2
	latest_sce_3_10_20010924:1.5.0.6
	sce_3_10_20010924:1.5
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.37
date	2011.09.28.23.49.04;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.09.24.00.27.21;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.08.30.20.17.17;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.11.15.17.15.31;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.06.08.18.26.07;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.06.05.21.05.59;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.06.04.21.06.39;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.06.04.20.07.11;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.30.16.01.17;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.02.27.22.59.28;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.02.27.19.59.29;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.02.07.22.14.54;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.02.17.33.55;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.01.23.33.32;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.01.23.31.13;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.01.19.23.24;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.09.30.22.58.57;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.09.30.21.57.54;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.27.20.31.00;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.27.17.56.33;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.09.26.18.47.56;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.06.14.15.32.20;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.02.22.18.19;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.08.23.18.09.09;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.22.22.42.20;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.22.21.16.19;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.09.20.49.48;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.05.19.31.29;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.04.23.07.16;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.07.20.14.53;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.06.20.04.13;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.03.19.58.26;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.36;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.37;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.18;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.20;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.19;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.19;	author wit;	state Exp;
branches;
next	;


desc
@@


1.37
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef BelowH
#define BelowH

//------------------------------------------------------------------------------
// Header file: "Below.h"
//
// Contains the declaration of class BelowLister.
//------------------------------------------------------------------------------

#include <Mapping.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class BelowLister
//
// Responsible for building the below list for each Part, as part of
// preprocessing.
//
// Implemented in PreHelp.C.
//------------------------------------------------------------------------------

class WitBelowLister: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBelowLister (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitBelowLister ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void buildBelow ();
         //
         // Builds the below list for each Part in myProblem ().

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBelowLister);

      void buildBelow (WitPart * currentPart);
         //
         // Builds the below list for currentPart.

      void mergeBelow (
            WitConsEntry *          theConsEnt,
            WitObjStack <WitPart> & theParts);
         //
         // Merges the below list for theConsEnt's consumed Part into theParts.

      bool compareParts (WitPart *, WitPart *);
         //
         // Compare function for sorting the below list of a Part.
         // The sort is by # Parts before the Part.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMapping <WitPart, bool> isBelowCurrent_;
         //
         // isBelowCurrent_ (thePart) is true iff thePart is in the below list
         // of the current Part.
   };

#endif
@


1.36
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.35
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 2
a33 2
{
public:
d35 3
a37 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d39 1
a39 1
WitBelowLister (WitProblem *);
d41 3
a43 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d45 1
a45 1
~WitBelowLister ();
d47 3
a49 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d51 3
a53 3
void buildBelow ();
//
// Builds the below list for each Part in myProblem ().
d55 1
a55 1
private:
d57 3
a59 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d61 1
a61 1
noCopyCtorAssign (WitBelowLister);
d63 3
a65 3
void buildBelow (WitPart * currentPart);
//
// Builds the below list for currentPart.
d67 5
a71 5
void mergeBelow (
WitConsEntry *          theConsEnt,
WitObjStack <WitPart> & theParts);
//
// Merges the below list for theConsEnt's consumed Part into theParts.
d73 4
a76 4
bool compareParts (WitPart *, WitPart *);
//
// Compare function for sorting the below list of a Part.
// The sort is by # Parts before the Part.
d78 3
a80 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d82 5
a86 5
WitMapping <WitPart, bool> isBelowCurrent_;
//
// isBelowCurrent_ (thePart) is true iff thePart is in the below list
// of the current Part.
};
@


1.34
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 2
a33 2
   {
   public:
d35 3
a37 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d39 1
a39 1
      WitBelowLister (WitProblem *);
d41 3
a43 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d45 1
a45 1
      ~WitBelowLister ();
d47 3
a49 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d51 3
a53 3
      void buildBelow ();
         //
         // Builds the below list for each Part in myProblem ().
d55 1
a55 1
   private:
d57 3
a59 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d61 1
a61 1
      noCopyCtorAssign (WitBelowLister);
d63 3
a65 3
      void buildBelow (WitPart * currentPart);
         //
         // Builds the below list for currentPart.
d67 5
a71 5
      void mergeBelow (
            WitConsEntry *          theConsEnt,
            WitObjStack <WitPart> & theParts);
         //
         // Merges the below list for theConsEnt's consumed Part into theParts.
d73 4
a76 4
      bool compareParts (WitPart *, WitPart *);
         //
         // Compare function for sorting the below list of a Part.
         // The sort is by # Parts before the Part.
d78 3
a80 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d82 5
a86 5
      WitMapping <WitPart, bool> isBelowCurrent_;
         //
         // isBelowCurrent_ (thePart) is true iff thePart is in the below list
         // of the current Part.
   };
@


1.33
log
@Stochastic Implosion
@
text
@a19 1
#include <RefMap.h>
a47 10
      // Reference receiving functions.
      // Each of these functions stores its reference arguments on the
      // assumption that they refer to the similarly named data members of the
      // first argument.
      //------------------------------------------------------------------------

      void receiveRefs (WitPart *,
                        WitPtrVec <WitPart> & belowListRef);

      //------------------------------------------------------------------------
a85 6

      //------------------------------------------------------------------------
      // Reference holders to the data to be computed by this BelowLister.
      //------------------------------------------------------------------------

      WitRefMap <WitPart, WitPtrVec <WitPart> > belowList_;
@


1.32
log
@Stochastic Implosion
@
text
@d56 1
a56 1
                        WitPtrVec <WitPart> & belowListArg);
@


1.31
log
@Stochastic Implosion
@
text
@d40 1
a40 1
      WitBelowLister (WitPreData *);
a92 4
      WitPreData * const myPreData_;
         //
         // The PreData for this BelowLister.

@


1.30
log
@Stochastic Implosion
@
text
@d49 10
@


1.29
log
@Stochastic Implosion
@
text
@d20 1
d91 6
@


1.28
log
@[disallowed backlog]
@
text
@d39 1
a39 1
      WitBelowLister (WitProblem *);
d82 1
a82 1
      WitMapping <WitPart, int> nPartsBefore_;
d84 1
a84 2
         // nPartsBefore_ (thePart) == # parts that appear before thePart in
         // myCompMgr ()->allParts ().
@


1.27
log
@Rescinded all changed made since 1/31/07.
@
text
@a54 8
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (WitPtrVec <WitPart> WitPart::* belowListArg);

a81 13
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // thePart->*belowList_ == thePart->belowList_.
      //------------------------------------------------------------------------

      static WitPtrVec <WitPart> WitPart::* belowList_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.26
log
@[disallowed backlog]
@
text
@d55 8
d90 13
@


1.25
log
@Updated the copyright date on all source files.
@
text
@a54 8
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (WitPtrVec <WitPart> WitPart::* belowListArg);

a81 13
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // thePart->*belowList_ == thePart->belowList_.
      //------------------------------------------------------------------------

      static WitPtrVec <WitPart> WitPart::* belowList_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.24
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.23
log
@[shared-resource pegging]
@
text
@a80 5
      static int compareNPartsBefore (WitPart *, WitPart *, void *);
         //
         // Compare function for sorting the below list of a Part.
         // The sort is by # Parts before the Part.

@


1.22
log
@[shared-resource pegging]
@
text
@a19 1
#include <Dense.h>
d75 3
a77 1
      void mergeBelow (WitConsEntry * theConsEnt);
d79 1
a79 2
         // Merges the below list for theConsEnt's consumed Part into that of
         // current Part.
d86 5
a116 4

      WitDenseList <WitPart> belowCurrent_;
         //
         // List of Parts found below the current Part.
@


1.21
log
@[multi-thread]
@
text
@d62 1
a62 1
      static void receiveDMPs (WitDenseList <WitPart> WitPart::* belowListArg);
d97 1
a97 1
      static WitDenseList <WitPart> WitPart::* belowList_;
@


1.20
log
@[multi-thread]
@
text
@a102 5
      static WitBelowLister * activeInstance_;
         //
         // The unique BelowLister (if any) currently executing its buildBelow
         // function.

@


1.19
log
@[multi-thread]
@
text
@d49 1
a49 1
      // Data loading functions.
d52 3
a54 1
      void loadDataFrom (WitPart *, WitDenseList <WitPart> & belowListArg);
d57 3
a59 1
      // Other public member functions.
d62 1
a62 11
      void allocLoadedData ();
         //
         // Allocates the data to be loaded in from the components.

      void clearLoadedData ();
         //
         // Clears the data that was loaded in from the components.

      void buildBelow ();
         //
         // Builds the below list for each Part in myProblem ().
d91 4
a94 1
      // Mappings to data loaded in from Components.
d97 1
a97 1
      WitRefMap <WitPart, WitDenseList <WitPart> > belowList_;
@


1.18
log
@[multi-thread]
@
text
@d87 1
a87 1
      static int compareNPartsBefore (WitPart *, WitPart *, WitBelowLister *);
@


1.17
log
@[multi-thread]
@
text
@d87 1
a87 1
      int compareNPartsBefore (WitPart * thePart1, WitPart * thePart2);
@


1.16
log
@Altered the below list to improve robustness.
@
text
@d87 1
a87 1
      static int compareNPartsBefore (WitPart * thePart1, WitPart * thePart2);
@


1.15
log
@Internal changes.
@
text
@d82 1
a82 1
      void recordBelowCurrent (WitPart * thePart);
d84 2
a85 2
         // Records the fact that thePart is to be added to the below list of
         // the current Part.
@


1.14
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d116 1
a116 1
      WitMapping <WitPart, WitBoolean> isBelowCurrent_;
d118 1
a118 1
         // isBelowCurrent_ (thePart) is TRUE iff thePart is in the below list
@


1.13
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d29 1
a29 1
// Implemented in Pre.C.
@


1.12
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d26 2
a27 1
// Responsible for building the below list for each Part.
@


1.11
log
@Continued implementation of Single-Source.
@
text
@a18 1
#include <Assoc.h>
d21 1
d39 1
a39 3
      WitBelowLister (
            WitProblem *,
            WitRefMap <WitPart, WitDenseList <WitPart> > & belowListArg);
d48 1
a48 1
      // Data access functions.
d51 2
d57 8
d99 1
a99 1
      WitRefMap <WitPart, WitDenseList <WitPart> > & belowList_;
@


1.10
log
@Continued implementation of single-source.
@
text
@d21 1
d112 1
a112 1
      WitDenseList <WitPart> & belowCurrent_;
@


1.9
log
@Continued implementation of single-source.
@
text
@a20 1
#include <Ref.h>
@


1.8
log
@Continued preliminary work on single source.
@
text
@d19 1
d21 1
a21 1
#include <Assoc.h>
d39 3
a41 4
      WitBelowLister (WitProblem * theProblem, WitAccFlag * theAccFlag);
         //
         // ProbAssoc  <<< theProblem.
         // myAccFlag_ <-- theAccFlag.
a60 4
      void unpreprocess ();
         //
         // Clears the below lists.

a66 10
      //------------------------------------------------------------------------
      // Component data access functions.
      //------------------------------------------------------------------------

      refAccess (WitPart, WitDenseList <WitPart>, belowList)

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

d87 9
a95 3
      WitAccFlag * myAccFlag_;
         //
         // Ptr to Preprocessor::myAccFlag_.
@


1.7
log
@Continued preliminary work on single source.
@
text
@d19 1
d110 1
a110 1
      WitMapping (WitPart, int) nPartsBefore_;
d115 1
a115 1
      WitMapping (WitPart, WitBoolean) isBelowCurrent_;
@


1.6
log
@More preliminary work on single source.
@
text
@d19 1
a19 1
#include <Dense.h>
d119 1
a119 1
      WitDenseList <WitPart> belowCurrent_;
@


1.5
log
@Some minor changes.
@
text
@d74 1
a74 1
      refAccess (WitPart, WitDenseList (WitPart), belowList)
d119 1
a119 1
      WitDenseList (WitPart) belowCurrent_;
@


1.4
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <Util.h>
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d80 1
a80 3
      copyCtorAndAssignment (WitBelowLister);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d19 1
a19 1
#include <typedefs.h>
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
