head	1.32;
access;
symbols
	sce_5_01_20080919:1.29
	latest_sce_4_20_20060523:1.27.0.2
	sce_4_20_20060523:1.27
	latest_sce4_20_OSL:1.26.0.2
	sce_4_20_OSL:1.26
	sce_410_withVa:1.21
	sce_4_05_20040511:1.20
	sce_4_00_20040201:1.20
	nextGenBranch:1.15.0.2
	nextGenRoot:1.15
	sce_3_30_20030627:1.15
	EndRw-branch:1.9.0.4
	Root-of-EndRw:1.9
	rwToStl:1.9.0.2
	latest_sce_3_10_20010924:1.5.0.2
	sce_3_10_20010924:1.5;
locks; strict;
comment	@ * @;


1.32
date	2011.09.28.23.49.48;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.09.24.00.28.09;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.08.30.20.17.50;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.07.10.15.57.23;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.26.20.40.10;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.02.17.34.06;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.03.16.48.12;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.05.22.24.08;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2005.12.05.20.47.34;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.15.21.27.23;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.15.19.55.21;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.12.17.02.44;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.24.20.12.34;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.24.17.11.17;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.23.17.56.20;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.19.19.01.01;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.06.21.12.27;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.23.19.13.22;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.22.19.32.12;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.15.21.01.22;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.13.22.22.11;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.23.40.46;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.02.22.18.41;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.21.21.52.20;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.21.18.13.43;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.08.21.58.56;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.01.14.25.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.27.21.12.13;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.24.22.03.21;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.09.22.09.45;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.05.18.50.18;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.03.20.07.30;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PairStackH
#define PairStackH

//------------------------------------------------------------------------------
// Header file: "PairStack.h"
//
// Contains the declaration of the following templates:
//
//    PairStack <ObjByPtr, ObjByVal>
//    PairStItr <ObjByPtr, ObjByVal>
//------------------------------------------------------------------------------

#include <Stack.h>

//------------------------------------------------------------------------------
// Class template PairStack <ObjByPtr, ObjByVal>
//
// A.K.A. PairStack <PairStArgs>
//
// A stack of pairs of the form: (ObjByPtr *, ObjByVal).
//
// Class Hierarchy:
//
// AbsStack
//    PairStack <PairStArgs>
//
// Implemented in Stack.C.
//------------------------------------------------------------------------------

#define PairStArgDecs  typename ObjByPtr, typename ObjByVal
#define PairStArgs              ObjByPtr,          ObjByVal
   //
   // Template argument macros.

//------------------------------------------------------------------------------

template <PairStArgDecs> 
      class WitPairStack: public WitAbsStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPairStack (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPairStack ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void push (ObjByPtr * theObjByPtr, ObjByVal theObjByVal);
         //
         // Pushes (theObjByPtr, theObjByVal) onto the top of this PairStack.

      bool pop (ObjByPtr * & theObjByPtr, ObjByVal & theObjByVal);
         //
         // If this PairStack is non-Empty, the first pair it contains is
         // removed from it and (theObjByPtr, theObjByVal) is set to the removed
         // pair.
         // Returns true, iff this PairStack is non-empty.

      void revCopyFrom (const WitPairStack & thePairStack);
         //
         // Copies the contents of thePairStack into this PairStack in reverse
         // order.

      inline void takeContentsFrom (WitPairStack & thatPairStack)
         {
         takeContentsFromAbs (thatPairStack);
         }

      inline void attachItr (WitPairStItr <PairStArgs> & thePairStItr) const
         {
         attachItrAbs (thePairStItr);
         }

      ObjByPtr * firstObject () const;
         //
         // Asserts that this PairStack is not empty.
         // Returns the first object in this PairStack.

      ObjByVal firstValue () const;
         //
         // Asserts that this PairStack is not empty.
         // Returns the first value in this PairStack.

      static bool advance (
            WitPairStItr <PairStArgs> & theItr,
            ObjByPtr * &                theObjByPtr,
            ObjByVal &                  theObjByVal);
         //
         // See AbsStItr::advanceAbs.
         // Sets theObjByPtr and theObjByVal, if the advance is successful.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline WitPairLink <ObjByVal> * firstPairLink () const
         {
         return static_cast <WitPairLink <ObjByVal> *> (firstAbsLink ());
         }

      noCopyCtorAssign (WitPairStack);
   };

//------------------------------------------------------------------------------
// Class template PairStItr <ObjByPtr, ObjByVal>
//
// A.K.A. PairStItr <PairStArgs>
//
// Responsible for iterating through the elements of a PairStack <PairStArgs>.
//
// Class Hierarchy:
//
// AbsStItr
//    PairStItr <PairStArgs>
//
// All implementation is inline.
//------------------------------------------------------------------------------

template <PairStArgDecs> 
      class WitPairStItr: public WitAbsStItr
   {
      friend class WitPairStack <PairStArgs>;

   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPairStItr ():
            WitAbsStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPairStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline bool advance (ObjByPtr * & theObjByPtr, ObjByVal & theObjByVal)
         {
         return
            WitPairStack <PairStArgs>::advance (
               * this,
                 theObjByPtr,
                 theObjByVal);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPairStItr);
   };

#endif
@


1.31
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.30
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d41 2
a42 2
//
// Template argument macros.
d46 75
a120 75
template <PairStArgDecs>
class WitPairStack: public WitAbsStack
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPairStack (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPairStack ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void push (ObjByPtr * theObjByPtr, ObjByVal theObjByVal);
//
// Pushes (theObjByPtr, theObjByVal) onto the top of this PairStack.

bool pop (ObjByPtr * & theObjByPtr, ObjByVal & theObjByVal);
//
// If this PairStack is non-Empty, the first pair it contains is
// removed from it and (theObjByPtr, theObjByVal) is set to the removed
// pair.
// Returns true, iff this PairStack is non-empty.

void revCopyFrom (const WitPairStack & thePairStack);
//
// Copies the contents of thePairStack into this PairStack in reverse
// order.

inline void takeContentsFrom (WitPairStack & thatPairStack)
{
takeContentsFromAbs (thatPairStack);
}

inline void attachItr (WitPairStItr <PairStArgs> & thePairStItr) const
{
attachItrAbs (thePairStItr);
}

ObjByPtr * firstObject () const;
//
// Asserts that this PairStack is not empty.
// Returns the first object in this PairStack.

ObjByVal firstValue () const;
//
// Asserts that this PairStack is not empty.
// Returns the first value in this PairStack.

static bool advance (
WitPairStItr <PairStArgs> & theItr,
ObjByPtr * &                theObjByPtr,
ObjByVal &                  theObjByVal);
//
// See AbsStItr::advanceAbs.
// Sets theObjByPtr and theObjByVal, if the advance is successful.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

inline WitPairLink <ObjByVal> * firstPairLink () const
{
return static_cast <WitPairLink <ObjByVal> *> (firstAbsLink ());
}
d122 2
a123 2
noCopyCtorAssign (WitPairStack);
};
d140 42
a181 42
template <PairStArgDecs>
class WitPairStItr: public WitAbsStItr
{
friend class WitPairStack <PairStArgs>;

public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

inline WitPairStItr ():
WitAbsStItr ()
{
}

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

inline ~WitPairStItr ()
{
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline bool advance (ObjByPtr * & theObjByPtr, ObjByVal & theObjByVal)
{
return
WitPairStack <PairStArgs>::advance (
* this,
theObjByPtr,
theObjByVal);
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d183 2
a184 2
noCopyCtorAssign (WitPairStItr);
};
@


1.29
log
@ASAP Pegging Order
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d41 2
a42 2
   //
   // Template argument macros.
d46 75
a120 75
template <PairStArgDecs> 
      class WitPairStack: public WitAbsStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPairStack (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPairStack ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void push (ObjByPtr * theObjByPtr, ObjByVal theObjByVal);
         //
         // Pushes (theObjByPtr, theObjByVal) onto the top of this PairStack.

      bool pop (ObjByPtr * & theObjByPtr, ObjByVal & theObjByVal);
         //
         // If this PairStack is non-Empty, the first pair it contains is
         // removed from it and (theObjByPtr, theObjByVal) is set to the removed
         // pair.
         // Returns true, iff this PairStack is non-empty.

      void revCopyFrom (const WitPairStack & thePairStack);
         //
         // Copies the contents of thePairStack into this PairStack in reverse
         // order.

      inline void takeContentsFrom (WitPairStack & thatPairStack)
         {
         takeContentsFromAbs (thatPairStack);
         }

      inline void attachItr (WitPairStItr <PairStArgs> & thePairStItr) const
         {
         attachItrAbs (thePairStItr);
         }

      ObjByPtr * firstObject () const;
         //
         // Asserts that this PairStack is not empty.
         // Returns the first object in this PairStack.

      ObjByVal firstValue () const;
         //
         // Asserts that this PairStack is not empty.
         // Returns the first value in this PairStack.

      static bool advance (
            WitPairStItr <PairStArgs> & theItr,
            ObjByPtr * &                theObjByPtr,
            ObjByVal &                  theObjByVal);
         //
         // See AbsStItr::advanceAbs.
         // Sets theObjByPtr and theObjByVal, if the advance is successful.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline WitPairLink <ObjByVal> * firstPairLink () const
         {
         return static_cast <WitPairLink <ObjByVal> *> (firstAbsLink ());
         }
d122 2
a123 2
      noCopyCtorAssign (WitPairStack);
   };
d140 42
a181 42
template <PairStArgDecs> 
      class WitPairStItr: public WitAbsStItr
   {
      friend class WitPairStack <PairStArgs>;

   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPairStItr ():
            WitAbsStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPairStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline bool advance (ObjByPtr * & theObjByPtr, ObjByVal & theObjByVal)
         {
         return
            WitPairStack <PairStArgs>::advance (
               * this,
                 theObjByPtr,
                 theObjByVal);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d183 2
a184 2
      noCopyCtorAssign (WitPairStItr);
   };
@


1.28
log
@New PIP pegging order.
@
text
@d83 1
a83 1
      inline void passContentsTo (WitPairStack & thePairStack)
d85 1
a85 1
         passContentsToAbs (thePairStack);
@


1.27
log
@Updated the copyright date on all source files.
@
text
@d83 1
a83 1
      inline void takeContents (WitPairStack & thePairStack)
d85 1
a85 1
         takeContentsAbs (thePairStack);
@


1.26
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.25
log
@[shared-resource pegging]
@
text
@d88 1
a88 1
      inline void attach (WitPairStItr <PairStArgs> & thePairStItr) const
d90 1
a90 1
         attachAbs (thePairStItr);
@


1.24
log
@[shared-resource pegging]
@
text
@d88 5
a167 5
      inline void attachTo (const WitPairStack <PairStArgs> & thePairStack)
         {
         attachToAbs (thePairStack);
         }

@


1.23
log
@[shared-resource pegging]
@
text
@d138 2
@


1.22
log
@[shared-resource pegging]
@
text
@a22 1
#include <TlObj.h>
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d18 2
a19 2
//    PairStack <ObjType, ValType>
//    PairStItr <ObjType, ValType>
d26 1
a26 1
// Class template PairStack <ObjType, ValType>
d30 1
a30 1
// A stack of pairs of the form: (ObjType *, ValType).
d40 2
a41 2
#define PairStArgDecs  typename ObjType, typename ValType
#define PairStArgs              ObjType,          ValType
d68 1
a68 1
      void push (ObjType * theObject, ValType theVal);
d70 1
a70 1
         // Pushes (theObject, theVal) onto the top of this PairStack.
d72 1
a72 1
      bool pop (ObjType * & theObject, ValType & theVal);
d75 2
a76 1
         // removed from it and (theObject, theVal) is set to the removed pair.
d89 1
a89 1
      ObjType * firstObject () const;
d94 1
a94 1
      ValType firstValue () const;
d101 2
a102 2
            ObjType * &                 theObject,
            ValType &                   theVal);
d105 1
a105 1
         // Sets theObject and theVal, if the advance is successful.
d113 1
a113 1
      inline WitPairLink <ValType> * firstPairLink () const
d115 1
a115 1
         return static_cast <WitPairLink <ValType> *> (firstAbsLink ());
d122 1
a122 1
// Class template PairStItr <ObjType, ValType>
d167 1
a167 1
      inline bool advance (ObjType * & theObject, ValType & theVal)
d169 5
a173 1
         return WitPairStack <PairStArgs>::advance (* this, theObject, theVal);
@


1.20
log
@Continued implementation of PIP.
@
text
@d93 5
a105 5
      inline WitPairLink <ValType> * firstPairLink () const
         {
         return static_cast <WitPairLink <ValType> *> (firstAbsLink ());
         }

d112 5
@


1.19
log
@Continued implementation of PIP.
@
text
@d80 2
a81 1
         // Copies the contents of thePairStack into this PairStack.
@


1.18
log
@Continued implementation of PIP.
@
text
@a22 1
#include <LinkMgr.h>
d87 4
a90 6
      inline ObjType * firstObject () const
         {
         witAssert (not isEmpty ());

         return fromTlObj_cast <ObjType> (firstPairLink ()->myTlObj ());
         }
@


1.17
log
@Continued implementation of PIP.
@
text
@a176 21
//------------------------------------------------------------------------------
// NonClass function template pop (FirstEl, Period, double).
//------------------------------------------------------------------------------

namespace WitNonClass
{

template <typename FirstEl> 
      bool pop (
         WitPairStack <WitPerPair <FirstEl>, double> & theTriples,
         FirstEl * &                                   theFirstEl,
         WitPeriod &                                   thePer,
         double &                                      theVol);
   //
   // Returns true, iff theTriples is non-empty.
   // If it is non-empty, removes the top triple and sets the args to its
   // elements.

// Leaving namespace NonClass.
}; 

@


1.16
log
@Continued implementation of post-implosion pegging.
@
text
@d177 21
@


1.15
log
@Replaced some C style casts with C++ style casts.
@
text
@d38 1
a38 1
// All implementation is inline.
d57 1
a57 1
      inline WitPairStack (WitProblem *);
d63 1
a63 3
      inline ~WitPairStack ()
         {
         }
d69 1
a69 1
      inline void push (ObjType * theObject, ValType theVal);
d73 1
a73 1
      inline bool pop (ObjType * & theObject, ValType & theVal);
d79 1
a79 1
      inline void revCopyFrom (const WitPairStack & thePairStack);
d95 1
a95 1
      inline static bool advance (
a175 85

//------------------------------------------------------------------------------
// Inline implementation of class template PairStack <ObjType, ValType>.
//------------------------------------------------------------------------------

template <PairStArgDecs> 
      inline WitPairStack <PairStArgs>::WitPairStack (WitProblem * theProblem):

            WitAbsStack (WitPairLinkMgr <ValType>::theInstanceFor (theProblem))
   {
   }

//------------------------------------------------------------------------------

template <PairStArgDecs> 
      inline void WitPairStack <PairStArgs>::push (
         ObjType * theObject, 
         ValType   theVal)
   {
   pushAbs ();

   firstPairLink ()->setDataTo (toTlObj_cast (theObject), theVal);
   }

//------------------------------------------------------------------------------

template <PairStArgDecs> 
      inline bool WitPairStack <PairStArgs>::pop (
         ObjType * & theObject, 
         ValType &   theVal)
   {
   if (isEmpty ())
      return false;

   theObject = fromTlObj_cast <ObjType> (firstPairLink ()->myTlObj ());

   theVal    = firstPairLink ()->myValue ();

   popAbs ();

   return true;
   }

//------------------------------------------------------------------------------

template <PairStArgDecs> 
      inline void WitPairStack <PairStArgs>::revCopyFrom (
            const WitPairStack & thePairStack)
   {
   WitPairStItr <PairStArgs> theItr;
   ObjType *                 theObject;
   ValType                   theVal;

   clear ();

   theItr.attachTo (thePairStack);

   while (theItr.advance (theObject, theVal))
      push (theObject, theVal);
   }

//------------------------------------------------------------------------------

template <PairStArgDecs> 
      inline bool WitPairStack <PairStArgs>::advance (
            WitPairStItr <PairStArgs> & theItr,
            ObjType * &                 theObject,
            ValType &                   theVal)
   {
   const WitPairLink <ValType> * thePairLink;

   theItr.advanceAbs ();

   thePairLink =
      static_cast <const WitPairLink <ValType> *> (theItr.curAbsLink ());

   if (thePairLink == NULL)
      return false;

   theObject = fromTlObj_cast <ObjType> (thePairLink->myTlObj ());

   theVal    = thePairLink->myValue ();

   return true;
   }
@


1.14
log
@Replaced some C-style casts with C++ style casts.
@
text
@d107 1
a107 1
         return (WitPairLink <ValType> *) firstAbsLink ();
d251 2
a252 1
   thePairLink = (const WitPairLink <ValType> *) theItr.curAbsLink ();
@


1.13
log
@Various internal changes.
@
text
@d24 1
d94 1
a94 1
         return (ObjType *) firstPairLink ()->myTlObj ();
d199 1
a199 1
   firstPairLink ()->setDataTo ((WitTlObj *) theObject, theVal);
d212 3
a214 2
   theObject = (ObjType *) firstPairLink ()->myTlObj ();
   theVal    =             firstPairLink ()->myValue ();
d256 3
a258 2
   theObject = (ObjType *) thePairLink->myTlObj ();
   theVal    =             thePairLink->myValue ();
@


1.12
log
@Various internal changes.
@
text
@d115 1
a115 1
      noCopyCtorAssignTemp (WitPairStack, PairStArgs);
d175 1
a175 1
      noCopyCtorAssignTemp (WitPairStItr, PairStArgs);
@


1.11
log
@Internal changes.
@
text
@d40 2
a41 2
#define PairStArgDecs  class ObjType, class ValType
#define PairStArgs           ObjType,       ValType
d80 1
a80 1
      inline void revCopyFrom (const WitPairStack <PairStArgs> & thePairStack);
d84 1
a84 1
      inline void takeContents (WitPairStack <PairStArgs> & thePairStack)
d223 1
a223 1
            const WitPairStack <PairStArgs> & thePairStack)
@


1.10
log
@Internal changes.
@
text
@d91 1
a91 1
         witAssert (! isEmpty ());
@


1.9
log
@Continued implementation of Single-Source.
@
text
@d74 1
a74 1
      inline WitBoolean pop (ObjType * & theObject, ValType & theVal);
d78 1
a78 1
         // Returns TRUE, iff this PairStack is non-empty.
d96 1
a96 1
      inline static WitBoolean advance (
d164 1
a164 1
      inline WitBoolean advance (ObjType * & theObject, ValType & theVal)
d204 1
a204 1
      inline WitBoolean WitPairStack <PairStArgs>::pop (
d209 1
a209 1
      return witFALSE;
d216 1
a216 1
   return witTRUE;
d240 1
a240 1
      inline WitBoolean WitPairStack <PairStArgs>::advance (
d252 1
a252 1
      return witFALSE;
d257 1
a257 1
   return witTRUE;
@


1.8
log
@Continued implementation of Single-Source.
@
text
@a259 6
//------------------------------------------------------------------------------
// Global function for WitTlPerItr.
//------------------------------------------------------------------------------

WitBoolean advancePerItr (WitTlPerItr & theItr, WitPeriod & thePer);

@


1.7
log
@Preliminary work on single source.
@
text
@d260 6
@


1.6
log
@Preliminary work on single source.
@
text
@d115 1
a115 6
      WitPairStack (const WitPairStack <PairStArgs> &);

      WitPairStack <PairStArgs> & operator = (
            const WitPairStack <PairStArgs> &);
         //
         // See noCopyCtorAssign in macs.h.
d175 1
a175 6
      WitPairStItr (const WitPairStItr <PairStArgs> &);

      WitPairStItr <PairStArgs> & operator = (
            const WitPairStItr <PairStArgs> &);
         //
         // See noCopyCtorAssign in macs.h.
@


1.5
log
@Fixed a latent bug.
@
text
@d115 4
a118 2
      WitPairStack                          (const WitPairStack <PairStArgs> &);
      WitPairStack <PairStArgs> & operator= (const WitPairStack <PairStArgs> &);
d180 3
a182 1
      WitPairStItr                                (
a183 2

      WitPairStItr <PairStArgs> & operator =(const WitPairStItr <PairStArgs> &);
@


1.4
log
@Refactoring for constrained stock reallocation.
@
text
@d80 1
a80 1
      inline void revCopyOf (const WitPairStack <PairStArgs> & thePairStack);
d230 1
a230 1
      inline void WitPairStack <PairStArgs>::revCopyOf (
@


1.3
log
@Removed class template AbsPairStack <*,*>.
@
text
@d28 2
d35 1
a35 1
//    PairStack <ObjType, ValType>
d40 8
a47 1
template <class ObjType, class ValType> 
d80 1
a80 1
      inline void slowAppend (ObjType * theObject, ValType theVal);
d82 1
a82 2
         // Appends (theObject, theVal) to the end of this PairStack, in linear
         // time.
d84 1
a84 1
      inline void takeContents (WitPairStack <ObjType, ValType> & thePairStack)
d97 3
a99 3
            WitPairStItr <ObjType, ValType> & theItr,
            ObjType * &                       theObject,
            ValType &                         theVal);
d115 2
a116 5
      WitPairStack                                 (
            const WitPairStack <ObjType, ValType> &);

      WitPairStack <ObjType, ValType> & operator = (
            const WitPairStack <ObjType, ValType> &);
d124 3
a126 2
// Responsible for iterating through the elements of a
// PairStack <ObjType, ValType>.
d131 1
a131 1
//    PairStItr <ObjType, ValType>
d136 1
a136 1
template <class ObjType, class ValType> 
d162 1
a162 2
      inline void attachTo (
            const WitPairStack <ObjType, ValType> & thePairStack)
d169 1
a169 5
         return
            WitPairStack <ObjType, ValType>::advance (
               * this,
                 theObject,
                 theVal);
d178 2
a179 2
      WitPairStItr                                 (
            const WitPairStItr <ObjType, ValType> &);
d181 1
a181 2
      WitPairStItr <ObjType, ValType> & operator = (
            const WitPairStItr <ObjType, ValType> &);
d190 2
a191 3
template <class ObjType, class ValType> 
      inline WitPairStack <ObjType, ValType>::WitPairStack (
               WitProblem * theProblem):
d199 2
a200 2
template <class ObjType, class ValType> 
      inline void WitPairStack <ObjType, ValType>::push (
d211 2
a212 2
template <class ObjType, class ValType> 
      inline WitBoolean WitPairStack <ObjType, ValType>::pop (
d229 3
a231 4
template <class ObjType, class ValType> 
      inline void WitPairStack <ObjType, ValType>::slowAppend (
         ObjType * theObject, 
         ValType   theVal)
d233 5
a237 1
   WitPairLink <ValType> * thePairLink;
d239 1
a239 1
   thePairLink = (WitPairLink <ValType> *) slowAppendAbs ();
d241 2
a242 1
   thePairLink->setDataTo ((WitTlObj *) theObject, theVal);
d247 5
a251 5
template <class ObjType, class ValType> 
      inline WitBoolean WitPairStack <ObjType, ValType>::advance (
            WitPairStItr <ObjType, ValType> & theItr,
            ObjType * &                       theObject,
            ValType &                         theVal)
@


1.2
log
@An attempt to resolve link troubles on Windows.
@
text
@a17 1
//    AbsPairStack       <ValType>
a19 4
//
// Contains the implementation of the following templates:
//
//    AbsPairStack       <ValType>
a25 83
// Class template AbsPairStack <ValType>
//
// A stack of pairs of the form: (WitTlObj *, ValType).
//
// Class Hierarchy:
//
// AbsStack
//    AbsPairStack          <ValType>
//       PairStack <ObjType, ValType>
//
// Implemented in this file.
//------------------------------------------------------------------------------

template <class ValType> 
      class WitAbsPairStack: public WitAbsStack
   {
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsPairStack (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsPairStack ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void pushAbsPair (WitTlObj * theTlObj, ValType theVal);
         //
         // Pushes (theTlObj, theVal) onto the top of this AbsPairStack.

      WitBoolean popAbsPair (WitTlObj * & theTlObj, ValType & theVal);
         //
         // If this AbsPairStack is non-Empty, the first pair it contains
         // is removed from it and (theTlObj, theVal) is set to the removed
         // pair. Returns TRUE, iff this AbsPairStack is non-empty.

      void slowAppendAbsPair (WitTlObj * theTlObj, ValType theVal);
         //
         // Appends (theTlObj, theVal) to the end of this AbsPairStack, in
         // linear time.

      WitTlObj * firstTlObj () const;
         //
         // Returns the first object in this AbsPairStack.
         // Not to be called if this AbsPairStack is empty.

      static WitBoolean advanceAbsPair (
            WitAbsStItr & theItr,
            WitTlObj * &  theTlObj,
            ValType &     theVal);
         //
         // See AbsStItr::advanceAbs.
         // Sets theTlObj and theVal, if the advance is successful.

      inline WitPairLink <ValType> * firstPairLink () const
         {
         return (WitPairLink <ValType> *) firstAbsLink ();
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static WitPairLinkMgr <ValType> * thePairLinkMgrFor (
            WitProblem * theProblem);
         //
         // Returns the PairLinkMgr <ValType> owned by theProblem.
         // Implemented non-parametrically in Stack.C.

      noCopyCtorAssignTemp (WitAbsPairStack, ValType);
  };

//------------------------------------------------------------------------------
d33 1
a33 2
//    AbsPairStack          <ValType>
//       PairStack <ObjType, ValType>
d35 1
a35 1
// All implemented is inline.
d39 1
a39 1
      class WitPairStack: public WitAbsPairStack <ValType>
d47 1
a47 4
      inline WitPairStack (WitProblem * theProblem):
            WitAbsPairStack <ValType> (theProblem)
         {
         }
d61 3
a63 4
      inline void push (ObjType * theObject, ValType theVal)
         {
         pushAbsPair ((WitTlObj *) theObject, theVal);
         }
d65 5
a69 4
      inline WitBoolean pop (ObjType * & theObject, ValType & theVal)
         {
         return popAbsPair ((WitTlObj * &) theObject, theVal);
         }
d71 4
a74 4
      inline void slowAppend (ObjType * theObject, ValType theVal)
         {
         slowAppendAbsPair ((WitTlObj *) theObject, theVal);
         }
d83 3
a85 1
         return (ObjType *) firstTlObj ();
d91 6
a96 1
            ValType &                         theVal)
d98 1
a98 1
         return advanceAbsPair (theItr, (WitTlObj * &) theObject, theVal);
d127 1
a127 1
// All implemented is inline.
d187 1
a187 1
// Implementation of class template AbsPairStack <ValType>.
d190 3
a192 3
template <class ValType> 
      WitAbsPairStack <ValType>::WitAbsPairStack (
            WitProblem * theProblem):
d194 1
a194 1
         WitAbsStack (thePairLinkMgrFor (theProblem))
d200 4
a203 11
template <class ValType> 
      WitAbsPairStack <ValType>::~WitAbsPairStack ()
   {
   }

//------------------------------------------------------------------------------

template <class ValType> 
      void WitAbsPairStack <ValType>::pushAbsPair (
         WitTlObj * theTlObj,
         ValType    theVal)
d207 1
a207 1
   firstPairLink ()->setDataTo (theTlObj, theVal);
d212 4
a215 4
template <class ValType> 
      WitBoolean WitAbsPairStack <ValType>::popAbsPair (
         WitTlObj * & theTlObj,
         ValType &    theVal)
d220 2
a221 2
   theTlObj = firstPairLink ()->myTlObj ();
   theVal   = firstPairLink ()->myValue ();
d230 4
a233 4
template <class ValType> 
      void WitAbsPairStack <ValType>::slowAppendAbsPair (
         WitTlObj * theTlObj,
         ValType    theVal)
d239 1
a239 1
   thePairLink->setDataTo (theTlObj, theVal);
d244 5
a248 15
template <class ValType> 
      WitTlObj * WitAbsPairStack <ValType>::firstTlObj () const
   {
   witAssert (! isEmpty ());

   return firstPairLink ()->myTlObj ();
   }

//------------------------------------------------------------------------------

template <class ValType> 
      WitBoolean WitAbsPairStack <ValType>::advanceAbsPair (
         WitAbsStItr & theItr,
         WitTlObj * &  theTlObj,
         ValType &     theVal)
d259 2
a260 2
   theTlObj = thePairLink->myTlObj ();
   theVal   = thePairLink->myValue ();
@


1.1
log
@Moved Stack template implementations to header files.
@
text
@d108 1
a364 16
   }

//------------------------------------------------------------------------------

WitPairLinkMgr <WitPeriod> * WitAbsPairStack <WitPeriod>::thePairLinkMgrFor (
      WitProblem * theProblem)
   {
   return theProblem->myPerPairLinkMgr ();
   }

//------------------------------------------------------------------------------

WitPairLinkMgr <double> * WitAbsPairStack <double>::thePairLinkMgrFor (
      WitProblem * theProblem)
   {
   return theProblem->myDblPairLinkMgr ();
@

