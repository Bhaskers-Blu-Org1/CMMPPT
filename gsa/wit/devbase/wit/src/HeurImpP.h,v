head	1.27;
access;
symbols
	sce_5_01_20080919:1.24
	latest_sce_4_20_20060523:1.24.0.2
	sce_4_20_20060523:1.24
	latest_sce4_20_OSL:1.23.0.2
	sce_4_20_OSL:1.23
	sce_410_withVa:1.19
	sce_4_05_20040511:1.19
	sce_4_00_20040201:1.18
	nextGenBranch:1.18.0.2
	nextGenRoot:1.18
	sce_3_30_20030627:1.18
	EndRw-branch:1.15.0.4
	Root-of-EndRw:1.15
	rwToStl:1.15.0.2
	latest_sce_3_10_20010924:1.10.0.2
	sce_3_10_20010924:1.10
	latest_sce_3_00_20010601:1.9.0.4
	sce_3_00_20010601:1.9
	latest_sce_2_31_20010308:1.9.0.2
	sce_2_31_20010308:1.9
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2011.09.28.23.49.26;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.09.24.00.27.46;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.08.30.20.17.34;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.05.02.17.34.00;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.02.19.19.09;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.09.27.21.50.18;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.09.27.17.56.33;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.09.26.18.47.56;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.16.22.17.26;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.02.22.18.30;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.12.23.20.44.46;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.12.19.17.15.21;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.10.18.22.23.55;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.09.20.49.49;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.07.20.14.58;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.06.20.04.14;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.03.19.58.27;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.03.20.07.30;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.26.21.46.01;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.22.16.18.25;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.06.19.58.37;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.05.19.05.29;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.04.22.07.37;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.41;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.21.20.03.24;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.58;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef HeurImpPH
#define HeurImpPH

//------------------------------------------------------------------------------
// Header file: "HeurImpP.h"
//
// Contains the declaration of the class HeurImpPerf
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <PairStack.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// class HeurImpPerf
//
// This class is responsible for actually performing a heuristic implosion.
// An instance of this class only exists during heuristic implosion.
//------------------------------------------------------------------------------

class WitHeurImpPerf: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurImpPerf (WitProblem * theProblem, bool forOptVal);
         //
         // ProbAssoc <<< theProblem.
         // forOptVal == true indicates heur implosion for opt implosion.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurImpPerf ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void implode ();
         //
         // Actually performs a heuristic implosion.

      int origPriority (WitDemand * theDemand, WitPeriod thePer) const;
         //
         // Returns the priority (either temp or perm) for theDemand in thePer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitHeurImpPerf);

      accessWrapper (WitEqAllocator *, myEqAllocator, myProblem ())

      void genPriorities ();
         //
         // Generates priorities either temporarily, or perminantly, or not at
         // all, as appropriate.

      void init ();
         //
         // Initializes this HeurImpPerf for an implosion.

      void allocShipVols ();
         //
         // In userHeurStart mode, allocates shipVols to demandVols.

      void mainLoop ();
         //
         // The triple nested loop that defines the greedy ordering in which
         // the implosion heuristic performs its allocation.

      bool prioritiesAreDifferent (WitPeriod demPer);
         //
         // Returns true, iff there is at least one Demand whose priority
         // in demPer is different from in demPer - 1 or demPer == 0.

      bool compareDemands (WitDemand * theDemand1, WitDemand * theDemand2);
         //
         // Compare function used to compare the priority of two demands.
         // The rules are:
         //    Low positive numbers have higher priority.
         //    Priorities <= 0 are all equally the lowest priority.
         //    Ties are broken in favor of lower index.
         //    theContext is a HeurImpPerf cast to void *, which will used as
         //    the context for the comparison.

      void allocSortedDemands (WitPeriod demPer, WitPeriod shipPer);
         //
         // Allocates to the Demands, as sorted, and within the given
         // demPer and shipPer.

      void selectForEqAlloc (
            WitDemand * theDemand,
            WitPeriod   demPer,
            WitPeriod   shipPer);
         //
         // Selects theDemand, demPer, and shipPer for equitable allocation,
         // performing equitable allocation as needed.

      void eqAlloc (WitPeriod demPer);
         //
         // Performs on equitable allocation on selDemPers_
         // for the given demPer. Clears selDemPers_.

      void incAlloc (
            WitDemand * theDemand,
            WitPeriod   demPer,
            WitPeriod   shipPer);
         //
         // Increments heuristic allocation (non-equitable) for theDemand,
         // demPer, and shipPer);

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

      const bool forOpt_;
         //
         // true iff the heuristic implosion so for optimizing implosion.

      WitSchedule <WitDemand, int> tempPriority_;
         //
         // Schedule of temporary priorities.

      WitPtrVec <WitDemand> sortedDemVec_;
         //
         // Vector of all demands in priority order.

      WitSchedule <WitDemand, int> modPriority_;
         //
         // Original priority, modified so that the lower numerical value
         // always means higher priority.
         // Specifically:
         //    All positive priorities are reduced by 1.
         //    All non-postive priorities are set to a value larger than 
         //    the largest positive priority.

      int curDemPer_;
         //
         // Demand period to be used when sorting demands.

      WitSchedule <WitDemand, double> unmetDemandVol_;
         //
         // Unmet demand volume.

      WitDemPerStack selDemPers_;
         //
         // A list of (Demand, Period)s selected for equitable allocation.
         // Stored in reverse order, until eqAlloc.
   };

#endif
@


1.26
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.25
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d31 2
a32 62
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitHeurImpPerf (WitProblem * theProblem, bool forOptVal);
//
// ProbAssoc <<< theProblem.
// forOptVal == true indicates heur implosion for opt implosion.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitHeurImpPerf ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void implode ();
//
// Actually performs a heuristic implosion.

int origPriority (WitDemand * theDemand, WitPeriod thePer) const;
//
// Returns the priority (either temp or perm) for theDemand in thePer.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitHeurImpPerf);

accessWrapper (WitEqAllocator *, myEqAllocator, myProblem ())

void genPriorities ();
//
// Generates priorities either temporarily, or perminantly, or not at
// all, as appropriate.

void init ();
//
// Initializes this HeurImpPerf for an implosion.

void allocShipVols ();
//
// In userHeurStart mode, allocates shipVols to demandVols.

void mainLoop ();
//
// The triple nested loop that defines the greedy ordering in which
// the implosion heuristic performs its allocation.

bool prioritiesAreDifferent (WitPeriod demPer);
//
// Returns true, iff there is at least one Demand whose priority
// in demPer is different from in demPer - 1 or demPer == 0.
d34 134
a167 74
bool compareDemands (WitDemand * theDemand1, WitDemand * theDemand2);
//
// Compare function used to compare the priority of two demands.
// The rules are:
//    Low positive numbers have higher priority.
//    Priorities <= 0 are all equally the lowest priority.
//    Ties are broken in favor of lower index.
//    theContext is a HeurImpPerf cast to void *, which will used as
//    the context for the comparison.

void allocSortedDemands (WitPeriod demPer, WitPeriod shipPer);
//
// Allocates to the Demands, as sorted, and within the given
// demPer and shipPer.

void selectForEqAlloc (
WitDemand * theDemand,
WitPeriod   demPer,
WitPeriod   shipPer);
//
// Selects theDemand, demPer, and shipPer for equitable allocation,
// performing equitable allocation as needed.

void eqAlloc (WitPeriod demPer);
//
// Performs on equitable allocation on selDemPers_
// for the given demPer. Clears selDemPers_.

void incAlloc (
WitDemand * theDemand,
WitPeriod   demPer,
WitPeriod   shipPer);
//
// Increments heuristic allocation (non-equitable) for theDemand,
// demPer, and shipPer);

//------------------------------------------------------------------------
// Other private member data.
//------------------------------------------------------------------------

const bool forOpt_;
//
// true iff the heuristic implosion so for optimizing implosion.

WitSchedule <WitDemand, int> tempPriority_;
//
// Schedule of temporary priorities.

WitPtrVec <WitDemand> sortedDemVec_;
//
// Vector of all demands in priority order.

WitSchedule <WitDemand, int> modPriority_;
//
// Original priority, modified so that the lower numerical value
// always means higher priority.
// Specifically:
//    All positive priorities are reduced by 1.
//    All non-postive priorities are set to a value larger than
//    the largest positive priority.

int curDemPer_;
//
// Demand period to be used when sorting demands.

WitSchedule <WitDemand, double> unmetDemandVol_;
//
// Unmet demand volume.

WitDemPerStack selDemPers_;
//
// A list of (Demand, Period)s selected for equitable allocation.
// Stored in reverse order, until eqAlloc.
};
@


1.24
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d31 62
a92 2
   {
   public:
d94 74
a167 134
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurImpPerf (WitProblem * theProblem, bool forOptVal);
         //
         // ProbAssoc <<< theProblem.
         // forOptVal == true indicates heur implosion for opt implosion.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurImpPerf ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void implode ();
         //
         // Actually performs a heuristic implosion.

      int origPriority (WitDemand * theDemand, WitPeriod thePer) const;
         //
         // Returns the priority (either temp or perm) for theDemand in thePer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitHeurImpPerf);

      accessWrapper (WitEqAllocator *, myEqAllocator, myProblem ())

      void genPriorities ();
         //
         // Generates priorities either temporarily, or perminantly, or not at
         // all, as appropriate.

      void init ();
         //
         // Initializes this HeurImpPerf for an implosion.

      void allocShipVols ();
         //
         // In userHeurStart mode, allocates shipVols to demandVols.

      void mainLoop ();
         //
         // The triple nested loop that defines the greedy ordering in which
         // the implosion heuristic performs its allocation.

      bool prioritiesAreDifferent (WitPeriod demPer);
         //
         // Returns true, iff there is at least one Demand whose priority
         // in demPer is different from in demPer - 1 or demPer == 0.

      bool compareDemands (WitDemand * theDemand1, WitDemand * theDemand2);
         //
         // Compare function used to compare the priority of two demands.
         // The rules are:
         //    Low positive numbers have higher priority.
         //    Priorities <= 0 are all equally the lowest priority.
         //    Ties are broken in favor of lower index.
         //    theContext is a HeurImpPerf cast to void *, which will used as
         //    the context for the comparison.

      void allocSortedDemands (WitPeriod demPer, WitPeriod shipPer);
         //
         // Allocates to the Demands, as sorted, and within the given
         // demPer and shipPer.

      void selectForEqAlloc (
            WitDemand * theDemand,
            WitPeriod   demPer,
            WitPeriod   shipPer);
         //
         // Selects theDemand, demPer, and shipPer for equitable allocation,
         // performing equitable allocation as needed.

      void eqAlloc (WitPeriod demPer);
         //
         // Performs on equitable allocation on selDemPers_
         // for the given demPer. Clears selDemPers_.

      void incAlloc (
            WitDemand * theDemand,
            WitPeriod   demPer,
            WitPeriod   shipPer);
         //
         // Increments heuristic allocation (non-equitable) for theDemand,
         // demPer, and shipPer);

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

      const bool forOpt_;
         //
         // true iff the heuristic implosion so for optimizing implosion.

      WitSchedule <WitDemand, int> tempPriority_;
         //
         // Schedule of temporary priorities.

      WitPtrVec <WitDemand> sortedDemVec_;
         //
         // Vector of all demands in priority order.

      WitSchedule <WitDemand, int> modPriority_;
         //
         // Original priority, modified so that the lower numerical value
         // always means higher priority.
         // Specifically:
         //    All positive priorities are reduced by 1.
         //    All non-postive priorities are set to a value larger than 
         //    the largest positive priority.

      int curDemPer_;
         //
         // Demand period to be used when sorting demands.

      WitSchedule <WitDemand, double> unmetDemandVol_;
         //
         // Unmet demand volume.

      WitDemPerStack selDemPers_;
         //
         // A list of (Demand, Period)s selected for equitable allocation.
         // Stored in reverse order, until eqAlloc.
   };
@


1.23
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.22
log
@[multi-thread]
@
text
@d21 1
a21 1
#include <Dense.h>
d94 1
a94 4
      static int comparePriorities (
            WitDemand * theDemand1,
            WitDemand * theDemand2,
            void *      theContext);
d142 1
a142 1
      WitDenseList <WitDemand> sortedDemands_;
d144 1
a144 1
         // List of all demands in priority order.
d155 1
a155 1
      int currDemandPeriod_;
@


1.21
log
@[multi-thread]
@
text
@d95 3
a97 3
            WitDemand *      theDemand1,
            WitDemand *      theDemand2,
            WitHeurImpPerf * theHeurImpPerf);
d104 2
@


1.20
log
@[multi-thread]
@
text
@d94 4
a97 1
      int comparePriorities (WitDemand * d1, WitDemand * d2);
@


1.19
log
@Fixed a bug that occurred when a priority was specified as MAX_INT.
@
text
@d94 1
a94 1
      static int comparePriorities (WitDemand * d1, WitDemand * d2);
a128 8
      // Static private member data.
      //------------------------------------------------------------------------

      static WitHeurImpPerf * sortingInstance_;
         //
         // The HeurImpPerf that's currently invoking sort.

      //------------------------------------------------------------------------
@


1.18
log
@Internal changes.
@
text
@d152 1
a152 1
      WitSchedule <WitDemand, int> priority_;
d154 6
a159 1
         // Original priority, modified to be all positive
@


1.17
log
@Continued implementation of user-specified heuristic starting solution.
@
text
@d38 1
a38 1
      WitHeurImpPerf (WitProblem * theProblem, WitBoolean forOptVal);
d41 1
a41 1
         // forOptVal == TRUE indicates heur implosion for opt implosion.
d89 1
a89 1
      WitBoolean prioritiesAreDifferent (WitPeriod demPer);
d91 1
a91 1
         // Returns TRUE, iff there is at least one Demand whose priority
d140 1
a140 1
      const WitBoolean forOpt_;
d142 1
a142 1
         // TRUE iff the heuristic implosion so for optimizing implosion.
@


1.16
log
@Continued implementation of heuristic initial solution.
@
text
@d82 1
a82 1
         // In heurInitSoln mode, allocates shipVols to demandVols.
@


1.15
log
@Continued implementation of heuristic implosion from an initial solution.
Added some debugging code to Single-Source.
@
text
@d80 4
@


1.14
log
@Continued implementation of Single-Source.
@
text
@d85 1
a85 1
      WitBoolean prioritiesAreDifferent (WitPeriod demandPer);
d88 1
a88 2
         // in demandPer is different from in demandPer - 1 or
         // demandPer == 0.
d98 1
a98 1
      void allocSortedDemands (WitPeriod demandPer, WitPeriod shipPer);
d101 1
a101 1
         // demandPer and shipPer.
d105 1
a105 1
            WitPeriod   demandPer,
d108 2
a109 2
         // Selects theDemand, demandPer, and shipPer for equitable
         // allocation, performing equitable allocation as needed.
d111 1
a111 1
      void eqAlloc (WitPeriod demandPer);
d114 1
a114 1
         // for the given demandPer. Clears selDemPers_.
d118 1
a118 1
            WitPeriod   demandPer,
d122 1
a122 6
         // demandPer, and shipPer);

      void decUnmetDemand (
         WitDemand * theDemand,
         WitPeriod   demandPer,
         double      incVolVal);
@


1.13
log
@Continued preliminary work on single source.
@
text
@d21 1
d150 1
a150 1
      WitDenseList <WitDemand> & sortedDemands_;
@


1.12
log
@Continued preliminary work on single source.
@
text
@d145 1
a145 1
      WitSchedule (WitDemand, int) tempPriority_;
d153 1
a153 1
      WitSchedule (WitDemand, int) priority_;
d161 1
a161 1
      WitSchedule (WitDemand, double) unmetDemandVol_;
@


1.11
log
@More preliminary work on single source.
@
text
@a20 1
#include <Dense.h>
d149 1
a149 1
      WitDenseList <WitDemand> sortedDemands_;
@


1.10
log
@Moved Stack template implementations to header files.
@
text
@d150 1
a150 1
      WitDenseList (WitDemand) sortedDemands_;
@


1.9
log
@Implemented coarse selection splitting for multiple exec periods.
@
text
@d20 1
a20 1
#include <PairSt.h>
@


1.8
log
@Further development of coarse selection splitting.
@
text
@a169 5

      WitBoolean asapMultiExec_;
         //
         // The value of the asapMultiExec argument to be passed to
         // the HeurAllocator and the EqAllocator. 
@


1.7
log
@Some minor changes.
@
text
@d20 1
a20 1
#include <Stack.h>
@


1.6
log
@Some minor modifications.
@
text
@d21 1
@


1.5
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d20 1
a20 1
#include <DynStack.h>
@


1.4
log
@Refactoring for selection splitting.
@
text
@d165 1
a165 1
      WitDemPerDynStack selDemPers_;
@


1.3
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d66 1
a66 3
      copyCtorAndAssignment (WitHeurImpPerf);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d20 1
a20 1
#include <DynPer.h>
d167 1
a167 1
      WitDemPerStack selDemPers_;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
