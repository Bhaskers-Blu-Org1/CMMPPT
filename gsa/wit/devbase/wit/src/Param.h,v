head	1.15;
access;
symbols
	sce_5_01_20080919:1.11
	latest_sce_4_20_20060523:1.11.0.2
	sce_4_20_20060523:1.11
	latest_sce4_20_OSL:1.10.0.2
	sce_4_20_OSL:1.10
	sce_410_withVa:1.10
	sce_4_05_20040511:1.10
	sce_4_00_20040201:1.10
	nextGenBranch:1.9.0.2
	nextGenRoot:1.9
	sce_3_30_20030627:1.9
	EndRw-branch:1.8.0.4
	Root-of-EndRw:1.8
	rwToStl:1.8.0.2
	latest_sce_3_10_20010924:1.6.0.6
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.6.0.4
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2011.09.28.23.49.48;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.24.00.28.10;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.08.30.20.17.50;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.03.04.22.18.35;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.02.17.34.06;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.02.22.18.41;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.01.14.25.59;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.18.14.02.39;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.02.19.24.06;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.40;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.45;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.25;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.36;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ParamH
#define ParamH

//------------------------------------------------------------------------------
// Header file: "Param.h"
//
// Contains the declaration of the following classes:
//
//    Param
//    StringParam
//    IntParam
//    DoubleParam
//    ChoiceParam
//------------------------------------------------------------------------------

#include <Str.h>
#include <List.h>

class WitParamMgr;

//------------------------------------------------------------------------------
// class Param
//
// A control parameter to stand-alone WIT.
//
// Class Hierarchy:
//
// Param
//    StringParam
//    IntParam
//    DoubleParam
//    ChoiceParam
//------------------------------------------------------------------------------

class WitParam
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitParam ();

      //------------------------------------------------------------------------
      // Public pure virtual member functions.
      //------------------------------------------------------------------------

      virtual void parse (const WitString & theToken) = 0;
         //
         // Parses theToken and sets the value of this Param accordingly.

      virtual void print () = 0;
         //
         // Prints myName_, myText_, and the value of this Param.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, myName)
      accessFunc (WitMsgFacility &,  myMsgFac)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static const WitString & itsName (const WitParam * theParam);
         //
         // Return theParam->myName ();

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitParam (
            const char *  theName,
            const char *  theText,
            WitParamMgr * theParamMgr);
         //
         // myName_     <-- theName.
         // myText_     <-- theText.
         // myParamMgr_ <-- theParamMgr.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, myText)
      accessFunc (WitParamMgr *,     myParamMgr)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitParam);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitString myName_;
         //
         // The name of this Param.
         // See ctor for length limit.

      const WitString myText_;
         //
         // Text describing the meaning of this Param.
         // See ctor for length limit.

      WitParamMgr * const myParamMgr_;
         //
         // The ParamMgr that owns this Param.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this Param.
   };

//------------------------------------------------------------------------------
// class StringParam
//
// A String-valued control parameter.
//
// Class Hierarchy:
//
// Param
//    StringParam
//------------------------------------------------------------------------------

class WitStringParam: public WitParam
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStringParam (
            const char *  theName,
            const char *  theText,
            const char *  initValue,
            WitParamMgr * theParamMgr);
         //
         // myValue_ <-- initValue

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitStringParam ();

      //------------------------------------------------------------------------
      // Public overiding virtual member functions.
      //------------------------------------------------------------------------

      virtual void parse (const WitString & theToken);

      virtual void print ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, myValue)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static const WitString & itsName (const WitStringParam * theStringParam);
         //
         // Return theStringParam->myName ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitStringParam);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitString myValue_;
         //
         // The "value" of this StringParam.
   };

//------------------------------------------------------------------------------
// class IntParam
//
// An int-valued control parameter.
//
// Class Hierarchy:
//
// Param
//    IntParam
//------------------------------------------------------------------------------

class WitIntParam: public WitParam
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitIntParam (
            const char *  theName,
            const char *  theText,
            int           theLB,
            int           theUB,
            int           initValue,
            WitParamMgr * theParamMgr);
         //
         // lb_      <-- theLB.
         // ub_      <-- theUB.
         // myValue_ <-- initValue

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitIntParam ();

      //------------------------------------------------------------------------
      // Public overiding virtual member functions.
      //------------------------------------------------------------------------

      virtual void parse (const WitString & theToken);

      virtual void print ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (int, myValue)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static const WitString & itsName (const WitIntParam * theIntParam);
         //
         // Return theIntParam->myName ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitIntParam);

      bool lbSatisfied (int theValue);
         //
         // Returns true, iff theValue satisfies the lower bound on this
         // IntParam.

      bool ubSatisfied (int theValue);
         //
         // Returns true, iff theValue satisfies the upper bound on this
         // IntParam.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int lb_;
      const int ub_;
         //
         // Lower and upper bounds on the valid values.
         // In both cases, a negative number means no bound.

      int myValue_;
         //
         // The "value" of this IntParam.
   };

//------------------------------------------------------------------------------
// class DoubleParam
//
// A double-valued control parameter.
//
// Class Hierarchy:
//
// Param
//    DoubleParam
//------------------------------------------------------------------------------

class WitDoubleParam: public WitParam
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDoubleParam (
            const char *  theName,
            const char *  theText,
            double        theLB,
            double        initValue,
            WitParamMgr * theParamMgr);
         //
         // lb_      <-- theLB.
         // myValue_ <-- initValue

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDoubleParam ();

      //------------------------------------------------------------------------
      // Public overiding virtual member functions.
      //------------------------------------------------------------------------

      virtual void parse (const WitString & theToken);

      virtual void print ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (double, myValue)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static const WitString & itsName (const WitDoubleParam * theDoubleParam);
         //
         // Return theDoubleParam->myName ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDoubleParam);

      bool lbSatisfied (double theValue);
         //
         // Returns true, iff theValue satisfies the lower bound on this
         // DoubleParam.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const double lb_;
         //
         // Lower bound on the valid values.
         // A negative number means no bound.

      double myValue_;
         //
         // The "value" of this DoubleParam.
   };

//------------------------------------------------------------------------------
// class ChoiceParam
//
// A multiple-choice-valued control parameter.
// I.e., the value is a String that is an element of a List of valid values.
//
// Class Hierarchy:
//
// Param
//    ChoiceParam
//------------------------------------------------------------------------------

class WitChoiceParam: public WitParam
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitChoiceParam (
            const char *  theName,
            const char *  theText,
            WitParamMgr * theParamMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitChoiceParam ();

      //------------------------------------------------------------------------
      // Public overiding virtual member functions.
      //------------------------------------------------------------------------

      virtual void parse (const WitString & theToken);

      virtual void print ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline const WitString & myValue ()
         {
         witAssert (myValue_ != NULL);

         return * myValue_;
         }
            //
            // Returns the value of this ChoiceParam.
            // An initial value must be set prior to invoking this function.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void addChoice (const char * theChoice);
         //
         // Adds theChoice to allChoices_.

      void choose (const char * theChoice);
         //
         // Sets the value of this ChoiceParam to theChoice.
         // Should only be invoked after addChoice has been used.

      static const WitString & itsName (const WitChoiceParam * theChoiceParam);
         //
         // Return theChoiceParam->myName ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitChoiceParam);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitList <WitString> allChoices_;
         //
         // The List of all valid choices for this ChoiceParam.

      const WitString * myValue_;
         //
         // The "value" of this ChoiceParam, an element of allChoices_.
   };

#endif
@


1.14
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
// 
//------------------------------------------------------------------------------
@


1.13
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d7 1
a7 1
//
d45 2
a46 54
{
public:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitParam ();

//------------------------------------------------------------------------
// Public pure virtual member functions.
//------------------------------------------------------------------------

virtual void parse (const WitString & theToken) = 0;
//
// Parses theToken and sets the value of this Param accordingly.

virtual void print () = 0;
//
// Prints myName_, myText_, and the value of this Param.

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (const WitString &, myName)
accessFunc (WitMsgFacility &,  myMsgFac)

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static const WitString & itsName (const WitParam * theParam);
//
// Return theParam->myName ();

protected:

//------------------------------------------------------------------------
// Protected member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitParam (
const char *  theName,
const char *  theText,
WitParamMgr * theParamMgr);
//
// myName_     <-- theName.
// myText_     <-- theText.
// myParamMgr_ <-- theParamMgr.
d48 89
a136 37
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (const WitString &, myText)
accessFunc (WitParamMgr *,     myParamMgr)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitParam);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

const WitString myName_;
//
// The name of this Param.
// See ctor for length limit.

const WitString myText_;
//
// Text describing the meaning of this Param.
// See ctor for length limit.

WitParamMgr * const myParamMgr_;
//
// The ParamMgr that owns this Param.

WitMsgFacility & myMsgFac_;
//
// The MsgFacility for this Param.
};
d150 2
a151 2
{
public:
d153 3
a155 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d157 7
a163 7
WitStringParam (
const char *  theName,
const char *  theText,
const char *  initValue,
WitParamMgr * theParamMgr);
//
// myValue_ <-- initValue
d165 3
a167 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d169 1
a169 1
virtual ~WitStringParam ();
d171 3
a173 3
//------------------------------------------------------------------------
// Public overiding virtual member functions.
//------------------------------------------------------------------------
d175 1
a175 1
virtual void parse (const WitString & theToken);
d177 1
a177 1
virtual void print ();
d179 3
a181 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d183 1
a183 1
accessFunc (const WitString &, myValue)
d185 3
a187 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d189 3
a191 3
static const WitString & itsName (const WitStringParam * theStringParam);
//
// Return theStringParam->myName ();
d193 1
a193 1
private:
d195 3
a197 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d199 1
a199 1
noCopyCtorAssign (WitStringParam);
d201 3
a203 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d205 4
a208 4
WitString myValue_;
//
// The "value" of this StringParam.
};
d222 2
a223 2
{
public:
d225 76
a300 76
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitIntParam (
const char *  theName,
const char *  theText,
int           theLB,
int           theUB,
int           initValue,
WitParamMgr * theParamMgr);
//
// lb_      <-- theLB.
// ub_      <-- theUB.
// myValue_ <-- initValue

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitIntParam ();

//------------------------------------------------------------------------
// Public overiding virtual member functions.
//------------------------------------------------------------------------

virtual void parse (const WitString & theToken);

virtual void print ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (int, myValue)

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static const WitString & itsName (const WitIntParam * theIntParam);
//
// Return theIntParam->myName ();

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitIntParam);

bool lbSatisfied (int theValue);
//
// Returns true, iff theValue satisfies the lower bound on this
// IntParam.

bool ubSatisfied (int theValue);
//
// Returns true, iff theValue satisfies the upper bound on this
// IntParam.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

const int lb_;
const int ub_;
//
// Lower and upper bounds on the valid values.
// In both cases, a negative number means no bound.

int myValue_;
//
// The "value" of this IntParam.
};
d314 2
a315 2
{
public:
d317 3
a319 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d321 9
a329 9
WitDoubleParam (
const char *  theName,
const char *  theText,
double        theLB,
double        initValue,
WitParamMgr * theParamMgr);
//
// lb_      <-- theLB.
// myValue_ <-- initValue
d331 3
a333 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d335 1
a335 1
virtual ~WitDoubleParam ();
d337 3
a339 3
//------------------------------------------------------------------------
// Public overiding virtual member functions.
//------------------------------------------------------------------------
d341 1
a341 1
virtual void parse (const WitString & theToken);
d343 1
a343 1
virtual void print ();
d345 3
a347 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d349 1
a349 1
accessFunc (double, myValue)
d351 3
a353 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d355 3
a357 3
static const WitString & itsName (const WitDoubleParam * theDoubleParam);
//
// Return theDoubleParam->myName ();
d359 1
a359 1
private:
d361 3
a363 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d365 1
a365 1
noCopyCtorAssign (WitDoubleParam);
d367 4
a370 4
bool lbSatisfied (double theValue);
//
// Returns true, iff theValue satisfies the lower bound on this
// DoubleParam.
d372 3
a374 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d376 4
a379 4
const double lb_;
//
// Lower bound on the valid values.
// A negative number means no bound.
d381 4
a384 4
double myValue_;
//
// The "value" of this DoubleParam.
};
d399 2
a400 2
{
public:
d402 3
a404 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d406 4
a409 4
WitChoiceParam (
const char *  theName,
const char *  theText,
WitParamMgr * theParamMgr);
d411 3
a413 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d415 1
a415 1
virtual ~WitChoiceParam ();
d417 3
a419 3
//------------------------------------------------------------------------
// Public overiding virtual member functions.
//------------------------------------------------------------------------
d421 1
a421 1
virtual void parse (const WitString & theToken);
d423 1
a423 1
virtual void print ();
d425 3
a427 3
//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------
d429 3
a431 3
inline const WitString & myValue ()
{
witAssert (myValue_ != NULL);
d433 5
a437 5
return * myValue_;
}
//
// Returns the value of this ChoiceParam.
// An initial value must be set prior to invoking this function.
d439 3
a441 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d443 3
a445 3
void addChoice (const char * theChoice);
//
// Adds theChoice to allChoices_.
d447 4
a450 4
void choose (const char * theChoice);
//
// Sets the value of this ChoiceParam to theChoice.
// Should only be invoked after addChoice has been used.
d452 3
a454 3
static const WitString & itsName (const WitChoiceParam * theChoiceParam);
//
// Return theChoiceParam->myName ();
d456 1
a456 1
private:
d458 3
a460 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d462 1
a462 1
noCopyCtorAssign (WitChoiceParam);
d464 3
a466 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d468 3
a470 3
WitList <WitString> allChoices_;
//
// The List of all valid choices for this ChoiceParam.
d472 4
a475 4
const WitString * myValue_;
//
// The "value" of this ChoiceParam, an element of allChoices_.
};
@


1.12
log
@Multi-Obj Mode
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d7 1
a7 1
// 
d45 54
a98 2
   {
   public:
d100 37
a136 89
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitParam ();

      //------------------------------------------------------------------------
      // Public pure virtual member functions.
      //------------------------------------------------------------------------

      virtual void parse (const WitString & theToken) = 0;
         //
         // Parses theToken and sets the value of this Param accordingly.

      virtual void print () = 0;
         //
         // Prints myName_, myText_, and the value of this Param.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, myName)
      accessFunc (WitMsgFacility &,  myMsgFac)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static const WitString & itsName (const WitParam * theParam);
         //
         // Return theParam->myName ();

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitParam (
            const char *  theName,
            const char *  theText,
            WitParamMgr * theParamMgr);
         //
         // myName_     <-- theName.
         // myText_     <-- theText.
         // myParamMgr_ <-- theParamMgr.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, myText)
      accessFunc (WitParamMgr *,     myParamMgr)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitParam);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitString myName_;
         //
         // The name of this Param.
         // See ctor for length limit.

      const WitString myText_;
         //
         // Text describing the meaning of this Param.
         // See ctor for length limit.

      WitParamMgr * const myParamMgr_;
         //
         // The ParamMgr that owns this Param.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this Param.
   };
d150 2
a151 2
   {
   public:
d153 3
a155 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d157 7
a163 7
      WitStringParam (
            const char *  theName,
            const char *  theText,
            const char *  initValue,
            WitParamMgr * theParamMgr);
         //
         // myValue_ <-- initValue
d165 3
a167 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d169 1
a169 1
      virtual ~WitStringParam ();
d171 3
a173 3
      //------------------------------------------------------------------------
      // Public overiding virtual member functions.
      //------------------------------------------------------------------------
d175 1
a175 1
      virtual void parse (const WitString & theToken);
d177 1
a177 1
      virtual void print ();
d179 3
a181 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d183 1
a183 1
      accessFunc (const WitString &, myValue)
d185 3
a187 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d189 3
a191 3
      static const WitString & itsName (const WitStringParam * theStringParam);
         //
         // Return theStringParam->myName ();
d193 1
a193 1
   private:
d195 3
a197 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d199 1
a199 1
      noCopyCtorAssign (WitStringParam);
d201 3
a203 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d205 4
a208 4
      WitString myValue_;
         //
         // The "value" of this StringParam.
   };
d222 2
a223 2
   {
   public:
d225 76
a300 76
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitIntParam (
            const char *  theName,
            const char *  theText,
            int           theLB,
            int           theUB,
            int           initValue,
            WitParamMgr * theParamMgr);
         //
         // lb_      <-- theLB.
         // ub_      <-- theUB.
         // myValue_ <-- initValue

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitIntParam ();

      //------------------------------------------------------------------------
      // Public overiding virtual member functions.
      //------------------------------------------------------------------------

      virtual void parse (const WitString & theToken);

      virtual void print ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (int, myValue)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static const WitString & itsName (const WitIntParam * theIntParam);
         //
         // Return theIntParam->myName ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitIntParam);

      bool lbSatisfied (int theValue);
         //
         // Returns true, iff theValue satisfies the lower bound on this
         // IntParam.

      bool ubSatisfied (int theValue);
         //
         // Returns true, iff theValue satisfies the upper bound on this
         // IntParam.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int lb_;
      const int ub_;
         //
         // Lower and upper bounds on the valid values.
         // In both cases, a negative number means no bound.

      int myValue_;
         //
         // The "value" of this IntParam.
   };
d314 2
a315 2
   {
   public:
d317 3
a319 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d321 9
a329 9
      WitDoubleParam (
            const char *  theName,
            const char *  theText,
            double        theLB,
            double        initValue,
            WitParamMgr * theParamMgr);
         //
         // lb_      <-- theLB.
         // myValue_ <-- initValue
d331 3
a333 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d335 1
a335 1
      virtual ~WitDoubleParam ();
d337 3
a339 3
      //------------------------------------------------------------------------
      // Public overiding virtual member functions.
      //------------------------------------------------------------------------
d341 1
a341 1
      virtual void parse (const WitString & theToken);
d343 1
a343 1
      virtual void print ();
d345 3
a347 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d349 1
a349 1
      accessFunc (double, myValue)
d351 3
a353 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d355 3
a357 3
      static const WitString & itsName (const WitDoubleParam * theDoubleParam);
         //
         // Return theDoubleParam->myName ();
d359 1
a359 1
   private:
d361 3
a363 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d365 1
a365 1
      noCopyCtorAssign (WitDoubleParam);
d367 4
a370 4
      bool lbSatisfied (double theValue);
         //
         // Returns true, iff theValue satisfies the lower bound on this
         // DoubleParam.
d372 3
a374 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d376 4
a379 4
      const double lb_;
         //
         // Lower bound on the valid values.
         // A negative number means no bound.
d381 4
a384 4
      double myValue_;
         //
         // The "value" of this DoubleParam.
   };
d399 2
a400 2
   {
   public:
d402 3
a404 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d406 4
a409 4
      WitChoiceParam (
            const char *  theName,
            const char *  theText,
            WitParamMgr * theParamMgr);
d411 3
a413 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d415 1
a415 1
      virtual ~WitChoiceParam ();
d417 3
a419 3
      //------------------------------------------------------------------------
      // Public overiding virtual member functions.
      //------------------------------------------------------------------------
d421 1
a421 1
      virtual void parse (const WitString & theToken);
d423 1
a423 1
      virtual void print ();
d425 3
a427 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d429 3
a431 3
      inline const WitString & myValue ()
         {
         witAssert (myValue_ != NULL);
d433 5
a437 5
         return * myValue_;
         }
            //
            // Returns the value of this ChoiceParam.
            // An initial value must be set prior to invoking this function.
d439 3
a441 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d443 3
a445 3
      void addChoice (const char * theChoice);
         //
         // Adds theChoice to allChoices_.
d447 4
a450 4
      void choose (const char * theChoice);
         //
         // Sets the value of this ChoiceParam to theChoice.
         // Should only be invoked after addChoice has been used.
d452 3
a454 3
      static const WitString & itsName (const WitChoiceParam * theChoiceParam);
         //
         // Return theChoiceParam->myName ();
d456 1
a456 1
   private:
d458 3
a460 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d462 1
a462 1
      noCopyCtorAssign (WitChoiceParam);
d464 3
a466 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d468 3
a470 3
      WitList <WitString> allChoices_;
         //
         // The List of all valid choices for this ChoiceParam.
d472 4
a475 4
      const WitString * myValue_;
         //
         // The "value" of this ChoiceParam, an element of allChoices_.
   };
@


1.11
log
@Updated the copyright date on all source files.
@
text
@d21 1
d40 1
d303 84
@


1.10
log
@Continued implementation of PIP.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.9
log
@Internal changes.
@
text
@d42 1
a42 1
class WitParam: public WitUtil
@


1.8
log
@Preliminary work on single source.
@
text
@d275 1
a275 1
      WitBoolean lbSatisfied (int theValue);
d277 1
a277 1
         // Returns TRUE, iff theValue satisfies the lower bound on this
d280 1
a280 1
      WitBoolean ubSatisfied (int theValue);
d282 1
a282 1
         // Returns TRUE, iff theValue satisfies the upper bound on this
@


1.7
log
@Began implementation of object iteration.
@
text
@d382 1
a382 1
      WitList (WitString) allChoices_;
@


1.6
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@d25 1
@


1.5
log
@Some minor changes.
@
text
@d24 1
a24 1
#include <String.h>
@


1.4
log
@Refactoring for selection splitting.
@
text
@d24 1
a24 1
#include <Vector.h>
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d110 1
a110 3
      copyCtorAndAssignment (WitParam);
         //
         // Prevents unintentional copying and assignment.
d196 1
a196 3
      copyCtorAndAssignment (WitStringParam);
         //
         // Prevents unintentional copying and assignment.
d272 1
a272 3
      copyCtorAndAssignment (WitIntParam);
         //
         // Prevents unintentional copying and assignment.
d375 1
a375 3
      copyCtorAndAssignment (WitChoiceParam);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d41 1
a41 1
class WitParam
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
