head	1.8;
access;
symbols
	sce_5_01_20080919:1.5
	latest_sce_4_20_20060523:1.5.0.2
	sce_4_20_20060523:1.5
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_410_withVa:1.4
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.0.4
	Root-of-EndRw:1.1
	rwToStl:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2011.09.28.23.50.37;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.24.00.28.52;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.30.20.18.20;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.13.15.54.10;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.02.22.18.53;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.09.19.52.38;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef TempMsgFileH
#define TempMsgFileH

//------------------------------------------------------------------------------
// Header file: "TempMsgFile.h"
//
// Contains the declaration of class TempMsgFile.
//------------------------------------------------------------------------------

#include <Str.h>

//------------------------------------------------------------------------------
// class TempMsgFile.
// Implements a temporary assignment of the message file to a different file.
// An instance of this class fulfils the following responsibility:
//    * When it is constructed, it assigns the message file to a specified
//      temporary file.
//    * When it is destructed, it restores the message file back to the
//      file to which it was assigned just prior to construction of the
//      WitTempMsgFile.
//
// An instance of this class is intended to be constructed (on the stack) near
// the beginning of any function that has an output file name parameter, where
// the output file is to be written to using the message facility. At the end
// of the function, the instance will be automatically destructed, thereby
// restoring the message file.
//
// Implemented in MsgFac.C.
//------------------------------------------------------------------------------

class WitTempMsgFile
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTempMsgFile (WitMsgFacility & theMsgFac, const char * theFileName);
         //
         // myMsgFac_ <-- theMsgFac
         // fileName is the name of the file to which the message file is to
         // be temporarily assigned.
         // The body of this ctor performs the temporary assignment of the
         // message file.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTempMsgFile ();
         //
         // The body of this dtor restores the message file and closes the
         // temporary file.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTempMsgFile);

      accessFunc (WitMsgFacility &, myMsgFac)

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this TempMsgFile.

      bool active_;
         //
         // true, iff a temporary file was actually used.

      FILE * prevFile_;
         //
         // myMsgFac ().myFile () before the temp file was used.

      WitString prevFileName_;
         //
         // myMsgFac ().fileName () before the temp file was used.
   };

#endif
@


1.7
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.6
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d41 2
a42 31
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitTempMsgFile (WitMsgFacility & theMsgFac, const char * theFileName);
//
// myMsgFac_ <-- theMsgFac
// fileName is the name of the file to which the message file is to
// be temporarily assigned.
// The body of this ctor performs the temporary assignment of the
// message file.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitTempMsgFile ();
//
// The body of this dtor restores the message file and closes the
// temporary file.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitTempMsgFile);
d44 51
a94 22
accessFunc (WitMsgFacility &, myMsgFac)

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMsgFacility & myMsgFac_;
//
// The MsgFacility for this TempMsgFile.

bool active_;
//
// true, iff a temporary file was actually used.

FILE * prevFile_;
//
// myMsgFac ().myFile () before the temp file was used.

WitString prevFileName_;
//
// myMsgFac ().fileName () before the temp file was used.
};
@


1.5
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d41 31
a71 2
   {
   public:
d73 22
a94 51
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTempMsgFile (WitMsgFacility & theMsgFac, const char * theFileName);
         //
         // myMsgFac_ <-- theMsgFac
         // fileName is the name of the file to which the message file is to
         // be temporarily assigned.
         // The body of this ctor performs the temporary assignment of the
         // message file.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTempMsgFile ();
         //
         // The body of this dtor restores the message file and closes the
         // temporary file.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTempMsgFile);

      accessFunc (WitMsgFacility &, myMsgFac)

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this TempMsgFile.

      bool active_;
         //
         // true, iff a temporary file was actually used.

      FILE * prevFile_;
         //
         // myMsgFac ().myFile () before the temp file was used.

      WitString prevFileName_;
         //
         // myMsgFac ().fileName () before the temp file was used.
   };
@


1.4
log
@[exceptions]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.3
log
@Continued implementation of PIP.
@
text
@d36 2
@


1.2
log
@Internal changes.
@
text
@d38 1
a38 1
class WitTempMsgFile: public WitUtil
@


1.1
log
@Continued implementation of single-source.
@
text
@d81 1
a81 1
      WitBoolean active_;
d83 1
a83 1
         // TRUE, iff a temporary file was actually used.
@

