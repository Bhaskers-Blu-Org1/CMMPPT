head	1.52;
access;
symbols
	sce_5_01_20080919:1.49
	latest_sce_4_20_20060523:1.47.0.2
	sce_4_20_20060523:1.47
	latest_sce4_20_OSL:1.46.0.2
	sce_4_20_OSL:1.46
	sce_410_withVa:1.40;
locks; strict;
comment	@ * @;


1.52
date	2011.09.28.23.49.54;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2011.09.24.00.28.16;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2011.08.30.20.17.55;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2006.08.09.18.36.40;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2006.08.08.18.31.19;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.02.17.34.08;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2006.03.08.23.57.11;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2006.03.06.19.59.46;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2006.03.02.23.29.02;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2006.01.12.20.07.43;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2005.11.17.22.04.42;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2005.11.11.23.29.13;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2005.01.28.19.34.27;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2003.12.31.21.44.53;	author rjw;	state dead;
branches;
next	1.38;

1.38
date	2003.12.30.21.47.02;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2003.12.30.18.08.29;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2003.12.29.19.13.43;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2003.12.29.16.25.32;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2003.12.24.23.25.56;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2003.12.24.21.09.47;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.12.23.22.24.31;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.12.23.19.02.52;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2003.12.23.16.18.47;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2003.12.19.19.01.02;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2003.12.17.22.29.59;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2003.12.17.21.23.00;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.17.16.53.52;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.15.19.35.59;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.10.23.45.57;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.10.23.20.43;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.04.22.44.56;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.04.16.45.16;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.04.16.20.41;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.31.15.37.55;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.29.00.15.50;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.28.22.49.12;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.28.22.38.59;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.24.15.37.46;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.23.19.33.12;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.22.22.42.53;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.22.22.30.10;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.22.22.11.15;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.22.20.37.29;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.21.19.28.45;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.16.22.29.39;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.16.16.18.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.09.21.31.51;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.01.15.59.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.01.14.17.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.30.15.40.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.52
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PipMgrH
#define PipMgrH

//------------------------------------------------------------------------------
// Header file: "PipMgr.h"
//
// Contains the declaration of class PipMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PipMgr
// "Post-Implosion Pegging System Manager"
// Owner, Manager and Public Interface of the Post-Implosion Pegging Subsystem.
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

class WitPipMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipMgr ();

      //------------------------------------------------------------------------
      // Public member functions relating to the shipment sequence.
      //------------------------------------------------------------------------

      void clearShipSeq ();
         //
         // Clears the shipment sequence.

      void appendToShipSeq (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
         //
         // Appends the args to the end of the shipment sequence.

      void getShipSeq (WitDemTripStack & theShipSeq);
         //
         // Sets theShipSeq to the (forward) shipment sequence.

      void displayShipSeq ();
         //
         // Displays the shipment sequence.

      void copyShipSeq (WitPipMgr * thePipMgr);
         //
         // Copies the shipment sequence from thePipMgr into this PipMgr.

      void writeShipSeqData ();
         //
         // Writes the shipment sequence in the input data file format.

      void setShipSeqShipPer (WitPeriod);

      WitPeriod shipSeqShipPer ();
         //
         // Returns the shipment period to be used by readData when appending to
         // the shipment sequence.

      //------------------------------------------------------------------------
      // Public member functions relating to the pegging.
      //------------------------------------------------------------------------

      void buildPegging ();
         //
         // Builds the pegging.

      void clearPegging ();
         //
         // Clears the pegging, if any.

      void printPegging ();
         //
         // Prints the pegging, if any.

      inline bool peggingExists ()
         {
         return (myPgg_ != NULL);
         }

      //------------------------------------------------------------------------
      // get---PegTrips functions.
      // Each of these functions sets its last arg to a pegging for theDemand
      // and shipPer, where the peggings are for:
      //
      //    execVol
      //    coExecVol
      //    subVol
      //    supplyVol
      //    prodVol
      //    consVol
      //    sideVol
      //------------------------------------------------------------------------

      void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips);

      void getCoExecVolTrips (
            WitDemand *          theDemand,
            WitPeriod            shipPer,
            WitBopEntTripStack & coExecVolTrips);

      void getSubVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitSubTripStack & subVolTrips);

      void getSupplyVolTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPartTripStack & supplyVolTrips);

      void getProdVolTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPartTripStack & prodVolTrips);

      void getConsVolTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPartTripStack & consVolTrips);

      void getSideVolTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPartTripStack & sideVolTrips);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void checkRestrictions ();
         //
         // Verifies that the various data restrictions for PIP are met.

      accessNonNull (WitPipPgg *, myPgg)

      noCopyCtorAssign (WitPipMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipSeqMgr * mySeqMgr_;
         //
         // The PipSeqMgr owned by this PipMgr.

      WitPipPgg * myPgg_;
         //
         // The PipPgg owned by this PipMgr when a pegging exists;
         // otherwise NULL.
   };

#endif
@


1.51
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.50
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d30 2
a31 47
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPipMgr (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPipMgr ();

//------------------------------------------------------------------------
// Public member functions relating to the shipment sequence.
//------------------------------------------------------------------------

void clearShipSeq ();
//
// Clears the shipment sequence.

void appendToShipSeq (
WitDemand * theDemand,
WitPeriod   shipPer,
double      incShipVol);
//
// Appends the args to the end of the shipment sequence.

void getShipSeq (WitDemTripStack & theShipSeq);
//
// Sets theShipSeq to the (forward) shipment sequence.

void displayShipSeq ();
//
// Displays the shipment sequence.

void copyShipSeq (WitPipMgr * thePipMgr);
//
// Copies the shipment sequence from thePipMgr into this PipMgr.

void writeShipSeqData ();
//
// Writes the shipment sequence in the input data file format.

void setShipSeqShipPer (WitPeriod);
d33 147
a179 102
WitPeriod shipSeqShipPer ();
//
// Returns the shipment period to be used by readData when appending to
// the shipment sequence.

//------------------------------------------------------------------------
// Public member functions relating to the pegging.
//------------------------------------------------------------------------

void buildPegging ();
//
// Builds the pegging.

void clearPegging ();
//
// Clears the pegging, if any.

void printPegging ();
//
// Prints the pegging, if any.

inline bool peggingExists ()
{
return (myPgg_ != NULL);
}

//------------------------------------------------------------------------
// get---PegTrips functions.
// Each of these functions sets its last arg to a pegging for theDemand
// and shipPer, where the peggings are for:
//
//    execVol
//    coExecVol
//    subVol
//    supplyVol
//    prodVol
//    consVol
//    sideVol
//------------------------------------------------------------------------

void getExecVolTrips (
WitDemand *       theDemand,
WitPeriod         shipPer,
WitOpnTripStack & execVolTrips);

void getCoExecVolTrips (
WitDemand *          theDemand,
WitPeriod            shipPer,
WitBopEntTripStack & coExecVolTrips);

void getSubVolTrips (
WitDemand *       theDemand,
WitPeriod         shipPer,
WitSubTripStack & subVolTrips);

void getSupplyVolTrips (
WitDemand *        theDemand,
WitPeriod          shipPer,
WitPartTripStack & supplyVolTrips);

void getProdVolTrips (
WitDemand *        theDemand,
WitPeriod          shipPer,
WitPartTripStack & prodVolTrips);

void getConsVolTrips (
WitDemand *        theDemand,
WitPeriod          shipPer,
WitPartTripStack & consVolTrips);

void getSideVolTrips (
WitDemand *        theDemand,
WitPeriod          shipPer,
WitPartTripStack & sideVolTrips);

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void checkRestrictions ();
//
// Verifies that the various data restrictions for PIP are met.

accessNonNull (WitPipPgg *, myPgg)

noCopyCtorAssign (WitPipMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPipSeqMgr * mySeqMgr_;
//
// The PipSeqMgr owned by this PipMgr.

WitPipPgg * myPgg_;
//
// The PipPgg owned by this PipMgr when a pegging exists;
// otherwise NULL.
};
@


1.49
log
@ExecVol pegging for BOP entries.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d30 47
a76 2
   {
   public:
d78 102
a179 147
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipMgr ();

      //------------------------------------------------------------------------
      // Public member functions relating to the shipment sequence.
      //------------------------------------------------------------------------

      void clearShipSeq ();
         //
         // Clears the shipment sequence.

      void appendToShipSeq (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
         //
         // Appends the args to the end of the shipment sequence.

      void getShipSeq (WitDemTripStack & theShipSeq);
         //
         // Sets theShipSeq to the (forward) shipment sequence.

      void displayShipSeq ();
         //
         // Displays the shipment sequence.

      void copyShipSeq (WitPipMgr * thePipMgr);
         //
         // Copies the shipment sequence from thePipMgr into this PipMgr.

      void writeShipSeqData ();
         //
         // Writes the shipment sequence in the input data file format.

      void setShipSeqShipPer (WitPeriod);

      WitPeriod shipSeqShipPer ();
         //
         // Returns the shipment period to be used by readData when appending to
         // the shipment sequence.

      //------------------------------------------------------------------------
      // Public member functions relating to the pegging.
      //------------------------------------------------------------------------

      void buildPegging ();
         //
         // Builds the pegging.

      void clearPegging ();
         //
         // Clears the pegging, if any.

      void printPegging ();
         //
         // Prints the pegging, if any.

      inline bool peggingExists ()
         {
         return (myPgg_ != NULL);
         }

      //------------------------------------------------------------------------
      // get---PegTrips functions.
      // Each of these functions sets its last arg to a pegging for theDemand
      // and shipPer, where the peggings are for:
      //
      //    execVol
      //    coExecVol
      //    subVol
      //    supplyVol
      //    prodVol
      //    consVol
      //    sideVol
      //------------------------------------------------------------------------

      void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips);

      void getCoExecVolTrips (
            WitDemand *          theDemand,
            WitPeriod            shipPer,
            WitBopEntTripStack & coExecVolTrips);

      void getSubVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitSubTripStack & subVolTrips);

      void getSupplyVolTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPartTripStack & supplyVolTrips);

      void getProdVolTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPartTripStack & prodVolTrips);

      void getConsVolTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPartTripStack & consVolTrips);

      void getSideVolTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPartTripStack & sideVolTrips);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void checkRestrictions ();
         //
         // Verifies that the various data restrictions for PIP are met.

      accessNonNull (WitPipPgg *, myPgg)

      noCopyCtorAssign (WitPipMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipSeqMgr * mySeqMgr_;
         //
         // The PipSeqMgr owned by this PipMgr.

      WitPipPgg * myPgg_;
         //
         // The PipPgg owned by this PipMgr when a pegging exists;
         // otherwise NULL.
   };
@


1.48
log
@BOP entry execVol pegging.
@
text
@d110 1
a110 1
      //    coexVol
d123 1
a123 1
      void getCoexVolTrips (
d126 1
a126 1
            WitBopEntTripStack & coexVolTrips);
@


1.47
log
@Updated the copyright date on all source files.
@
text
@d110 1
d123 5
@


1.46
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.45
log
@[shared-resource pegging]
@
text
@a19 1
#include <PipPartAtt.h>
a111 1
      //    sideVol
d114 1
d127 16
a142 1
      void getPartPegTrips (
d145 1
a145 2
            WitPipPartAtt::Tag theAttTag,
            WitPartTripStack & thePegTrips);
@


1.44
log
@[shared-resource pegging]
@
text
@d102 1
a102 1
         return (myPipOwner_ != NULL);
d144 1
a144 1
      accessNonNull (WitPipOwner *, myPipOwner)
d152 1
a152 1
      WitPipSeqMgr * myPipSeqMgr_;
d156 1
a156 1
      WitPipOwner * myPipOwner_;
d158 1
a158 1
         // The PipOwner owned by this PipMgr when a pegging exists;
@


1.43
log
@[shared-resource pegging]
@
text
@a26 5
// Class Hierarchy:
//
// ProbAssoc
//    PipMgr
//
d140 4
@


1.42
log
@[shared-resource pegging]
@
text
@d107 1
a107 1
         return (myPipCoord_ != NULL);
d145 1
a145 1
      accessNonNull (WitPipCoord *, myPipCoord)
d157 1
a157 1
      WitPipCoord * myPipCoord_;
d159 1
a159 1
         // The PipCoord owned by this PipMgr when a pegging exists;
@


1.41
log
@[shared-resource pegging]
@
text
@d153 4
a160 4

      WitPipSeqMgr * myPipSeqMgr_;
         //
         // The PipSeqMgr owned by this PipMgr.
@


1.40
log
@Tie Breaking Prop-Rt.
@
text
@a22 6
// Namespace Pip.
//
// Namespace for the Post-Implosion Pegging Subsystem.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
d107 1
a107 1
         return (myPegMgr_ != NULL);
d145 1
a145 1
      accessNonNull (WitPipPegMgr *, myPegMgr)
d153 1
a153 1
      WitPipPegMgr * myPegMgr_;
d155 1
a155 1
         // The PipPegMgr owned by this PipMgr when a pegging exists;
d158 1
a158 1
      WitPipSeqMgr * mySeqMgr_;
@


1.39
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class Pip::SubsysMgr.
d29 2
a30 2
// Class Pip::SubsysMgr
// "Post-Implosion Pegging Subsystem Manager"
d36 1
a36 1
//    SubsysMgr
d41 1
a41 4
namespace WitPip
{

class SubsysMgr: public WitProbAssoc
d49 1
a49 1
      SubsysMgr (WitProblem *);
d55 1
a55 1
      ~SubsysMgr ();
d58 1
a58 1
      // Other public member functions.
d76 15
a90 1
      void copyShipSeq (SubsysMgr * theSubSysMgr);
d92 6
a97 1
         // Copies the shipment sequence from theSubSysMgr into this SubSysMgr.
d142 1
a142 1
            PartAtt            thePartAtt,
d151 1
a151 1
      accessNonNull (PegMgr *, myPegMgr)
d153 1
a153 1
      noCopyCtorAssign (SubsysMgr);
d159 1
a159 1
      PegMgr * myPegMgr_;
d161 1
a161 1
         // The PegMgr owned by this SubsysMgr when a pegging exists;
d164 1
a164 1
      SeqMgr * mySeqMgr_;
d166 1
a166 1
         // The SeqMgr owned by this SubsysMgr.
a168 3
// Leaving namespace Pip.
}   

@


1.38
log
@Implemented copying of the PIP shipment sequence.
@
text
@@


1.37
log
@Added pipExists attribute.
@
text
@d79 4
@


1.36
log
@Continued implementation of PIP.
@
text
@d91 5
a129 5

      inline bool peggingExists ()
         {
         return (myPegMgr_ != NULL);
         }
@


1.35
log
@Continued implementation of PIP.
@
text
@d21 6
a26 1
#include <TripStack.h>
a125 9
      void reduceShipSeq ();
         //
         // Makes the shipment sequence feasible for the shipment schedule, by
         // reducing the incShipVols, as needed.

      void printShipSeq ();
         //
         // Prints the shipment sequence to the solution file.

d141 1
a141 1
         // The PegMgr owned by this SubsysMgr in PI pegging mode;
d144 3
a146 7
      WitDemTripStack revShipSeq_;
         //       
         // Represents the ordered list of triples
         // (theDemand, shipPer, incShipVol) such that
         // theDemand->shipVol ()[shipPer] is to be increased by incShipVol,
         // pegging the resulting resource utilization to theDemand in shipPer.
         // Stored in reverse order.
@


1.34
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class Pip::Mgr.
d24 3
a26 3
// Class Pip::Mgr
// "Post-Implosion Pegging Manager"
// Manager of the Post-Implosion Pegging Subsystem.
d31 1
a31 1
//    Mgr
d39 1
a39 1
class Mgr: public WitProbAssoc
d47 1
a47 1
      Mgr (WitProblem *);
d53 1
a53 1
      ~Mgr ();
d123 1
a123 1
         // Makes the shipment sequence feasible for the shipment schedule, but
d132 1
a132 1
         return (myCoord_ != NULL);
d135 1
a135 1
      accessNonNull (Coord *, myCoord)
d137 1
a137 1
      noCopyCtorAssign (Mgr);
d143 1
a143 1
      Coord * myCoord_;
d145 1
a145 1
         // The Coord owned by this Mgr in PI pegging mode;
@


1.33
log
@Continued implementation of PIP.
@
text
@d102 1
a102 1
            WitOpnTripStOld & execVolTrips);
d107 1
a107 1
            WitSubTripStOld & subVolTrips);
d113 1
a113 1
            WitPartTripStOld & thePegTrips);
@


1.32
log
@Continued implementation of PIP.
@
text
@d21 1
a21 1
#include <PairStack.h>
d102 1
a102 1
            WitOpnTripStack & execVolTrips);
d107 1
a107 1
            WitSubTripStack & subVolTrips);
d113 1
a113 1
            WitPartTripStack & thePegTrips);
@


1.31
log
@Continued implementation of PIP.
@
text
@d121 5
@


1.30
log
@Continued implementation of PIP.
@
text
@d121 4
@


1.29
log
@Continued implementation of PIP.
@
text
@d63 1
a63 1
      void recIncShipVol (
d68 1
a68 1
         // Records an increase of incShipVol to theDemand->shipVol ()[shipPer].
d80 1
a80 1
         // Clears the pegging.
d84 1
a84 1
         // Prints the pegging.
@


1.28
log
@Continued implementation of PIP.
@
text
@d70 1
a70 1
      void getShipSeq (ShipSeq & theShipSeq);
d87 1
a87 1
      // get---PegPairs functions.
d99 15
a113 15
      void getExecVolPairs (
            WitDemand *    theDemand,
            WitPeriod      shipPer,
            OpnPairStack & execVolPairs);

      void getSubVolPairs (
            WitDemand *    theDemand,
            WitPeriod      shipPer,
            SubPairStack & subVolPairs);

      void getPartPegPairs (
            WitDemand *     theDemand,
            WitPeriod       shipPer,
            PartAtt         thePartAtt,
            PartPairStack & thePartPairs);
d139 1
a139 1
      ShipSeq revShipSeq_;
@


1.27
log
@Continued implementation of PIP.
@
text
@d21 1
a21 7
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Namespace Pip.
//
// Namespace for the Post-Implosion Pegging Subsystem.
//------------------------------------------------------------------------------
a24 1
//
d26 1
a26 1
// Responsible for owning and maintaining the post-implosion pegging.
d47 1
a47 1
      Mgr (Int *);
d56 1
a56 1
      // Functions called from class Int.
d59 23
d87 1
a87 1
      // get---Pairs functions.
a114 14
      Targ * myTargFor (WitDemPer * theDemPer);
         //
         // Returns the Targ for theDemPer, asserting that it exists.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (Int *,                   myInt)

      accessNonNull (SrcMgr <WitOperation> *, myOpnSrcMgr)
      accessNonNull (SrcMgr <WitSubEntry> *,  mySubSrcMgr)
      accessNonNull (SrcMgr <WitPart> *,      myPartSrcMgr)

d121 4
a124 3
      void checkRestrictions ();
         //
         // Verifies that the various data restrictions for PIP are met.
d126 1
a126 4
      void buildTargs ();
         //
         // Builds the Targs corresponding to the DemPers in the shipment
         // sequence.
d134 1
a134 1
      Int * const myInt_;
d136 2
a137 1
         // The Int that owns this Mgr.
d139 7
a145 10
      WitPtrSched <WitDemand, Targ> myTargs_;
         //
         // myTargs_.myPtrAt (theDemand, shipPer) is the Targ owned
         // this Mgr for theDemand in shipPer.

      SrcMgr <WitOperation> * myOpnSrcMgr_;
      SrcMgr <WitSubEntry>  * mySubSrcMgr_;
      SrcMgr <WitPart>      * myPartSrcMgr_;
         //
         // The SrcMgrs owned by this Mgr.
@


1.26
log
@Continued implementation of PIP.
@
text
@a65 8
      void buildPegging ();
         //
         // Builds the pegging.

      void clearPegging ();
         //
         // Clears the pegging.

a147 4

      bool pegged_;
         //
         // true, iff a pegging currently exists.
@


1.25
log
@Continued implementation of PIP.
@
text
@a21 1
#include <PairStack.h>
d54 1
a54 1
      Mgr (WitProblem *);
a65 11
      void recIncShipVol (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
         //
         // Records an increase of incShipVol to theDemand->shipVol ()[shipPer].

      void clearTargs ();
         //
         // Clears the Targs owned by this Mgr.

d107 4
d115 2
d131 5
d142 4
a149 8

      WitPairStack <Targ, double> revShipSeq_;
         //       
         // Represents the ordered list of triples
         // (theDemand, shipPer, incShipVol) such that
         // theDemand->shipVol ()[shipPer] is to be increased by incShipVol,
         // pegging the resulting resource utilization to theDemand in shipPer.
         // Stored in reverse order.
@


1.24
log
@Continued implementation of PIP.
@
text
@d91 3
a93 3
      // get---PegPairs functions.
      // Each of these functions sets thePegPairs to a pegging for theDemand and
      // shipPer, where the peggings are for:
d104 3
a106 3
            WitDemand *      theDemand,
            WitPeriod        shipPer,
            WitOpnPipStack & thePegPairs);
d109 3
a111 3
            WitDemand *      theDemand,
            WitPeriod        shipPer,
            WitSubPipStack & thePegPairs);
d114 4
a117 4
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            PartAtt           thePartAtt,
            WitPartPipStack & thePegPairs);
@


1.23
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class PipMgr.
d31 1
a31 1
// Class PipMgr
d39 1
a39 1
//    PipMgr
d44 1
a44 1
namespace WitPIP
d47 1
a47 1
class WitPipMgr: public WitProbAssoc
d55 1
a55 1
      WitPipMgr (WitProblem *);
d61 1
a61 1
      ~WitPipMgr ();
d64 1
a64 1
      // Functions called from class PipInt.
d76 1
a76 1
         // Clears the PipTargs owned by this PipMgr.
d123 3
a125 3
      accessNonNull (WitPipSrcMgr <WitOperation> *, myOpnPipSrcMgr)
      accessNonNull (WitPipSrcMgr <WitSubEntry> *,  mySubPipSrcMgr)
      accessNonNull (WitPipSrcMgr <WitPart> *,      myPartPipSrcMgr)
d137 1
a137 1
      noCopyCtorAssign (WitPipMgr);
d143 1
a143 1
      WitPtrSched <WitDemand, WitPipTarg> myPipTargs_;
d145 2
a146 2
         // myPipTargs_.myPtrAt (theDemand, shipPer) is the PipTarg owned
         // this PipMgr for theDemand in shipPer.
d148 1
a148 1
      WitPairStack <WitPipTarg, double> revShipSeq_;
d156 3
a158 3
      WitPipSrcMgr <WitOperation> * myOpnPipSrcMgr_;
      WitPipSrcMgr <WitSubEntry>  * mySubPipSrcMgr_;
      WitPipSrcMgr <WitPart>      * myPartPipSrcMgr_;
d160 1
a160 1
         // The PipSrcMgrs owned by this PipMgr.
d167 1
a167 1
// Leaving namespace PIP
@


1.22
log
@Continued implementation of PIP.
@
text
@d25 6
d44 3
d116 1
a116 1
            WitPip::PartAtt   thePartAtt,
d166 3
@


1.21
log
@Continued implementation of PIP.
@
text
@d104 1
a104 1
      void getPegPairs (
@


1.20
log
@Continued implementation of PIP.
@
text
@d20 1
d104 1
a104 16
      void getSupplyVolPairs (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitPartPipStack & thePegPairs);

      void getSideVolPairs (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitPartPipStack & thePegPairs);

      void getProdVolPairs (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitPartPipStack & thePegPairs);

      void getConsVolPairs (
d107 1
@


1.19
log
@Continued implementation of PIP.
@
text
@d139 1
a139 7
         // Verifies that the various data restrictions for PIP in
         // no-side-effects mode are met.

      void checkNoSideRest ();
         //
         // Verifies that the various data restrictions for PIP in
         // no-side-effects mode are met.
@


1.18
log
@Continued implementation of PIP.
@
text
@d88 1
d104 5
@


1.17
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d133 7
a139 1
         // Verifies that the various data restrictions for PIP are met.
@


1.16
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d80 13
a92 1
      void getExecPegPairs (
a95 2
         //
         // Sets thePegPairs to the execVol pegging for theDemand and shipPer.
d97 1
a97 1
      void getSubPegPairs (
a100 2
         //
         // Sets thePegPairs to the subVol pegging for theDemand and shipPer.
d102 6
a107 1
      void getSupplyPegPairs (
a110 2
         //
         // Sets thePegPairs to the supplyVol pegging for theDemand and shipPer.
d112 1
a112 1
      void getProdPegPairs (
a115 2
         //
         // Sets thePegPairs to the prodVol pegging for theDemand and shipPer.
@


1.15
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d20 1
a153 4

      WitSchedule <WitPart, double> consPartSched_;
         //
         // Working Schedule for consolidate ().
@


1.14
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d153 4
@


1.13
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d80 3
a82 3
            WitDemand *                                       theDemand,
            WitPeriod                                         shipPer,
            WitPairStack <WitPipSrc <WitOperation>, double> & thePegPairs);
d87 3
a89 3
            WitDemand *                                      theDemand,
            WitPeriod                                        shipPer,
            WitPairStack <WitPipSrc <WitSubEntry>, double> & thePegPairs);
d94 3
a96 3
            WitDemand *                                  theDemand,
            WitPeriod                                    shipPer,
            WitPairStack <WitPipSrc <WitPart>, double> & thePegPairs);
d99 7
@


1.12
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a78 7
      void getSupplyPegPairs (
            WitDemand *                                  theDemand,
            WitPeriod                                    shipPer,
            WitPairStack <WitPipSrc <WitPart>, double> & thePegPairs);
         //
         // Sets thePegPairs to the supplyVol pegging for theDemand and shipPer.

d93 7
a103 1
      accessNonNull (WitPipSrcMgr <WitPart> *,      myPartPipSrcMgr)
d106 1
a136 1
      WitPipSrcMgr <WitPart>      * myPartPipSrcMgr_;
d139 1
@


1.11
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d79 4
a82 4
      void getSupPegPairs (
            WitDemand *                            theDemand,
            WitPeriod                              shipPer,
            WitPairStack <WitPartPipSrc, double> & thePegPairs);
d87 3
a89 3
            WitDemand *                           theDemand,
            WitPeriod                             shipPer,
            WitPairStack <WitOpnPipSrc, double> & thePegPairs);
d93 7
d106 1
d139 1
@


1.10
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d97 2
a98 2
      accessNonNull (WitPipSrcMgr <WitPart> *,      myPartSrcMgr)
      accessNonNull (WitPipSrcMgr <WitOperation> *, myOpnSrcMgr)
d129 2
a130 2
      WitPipSrcMgr <WitPart>      * myPartSrcMgr_;
      WitPipSrcMgr <WitOperation> * myOpnSrcMgr_;
@


1.9
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d106 4
@


1.8
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a105 4
      void innerBuildPegging ();
         //
         // Inner aspects of building the pegging.

@


1.7
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a20 1
#include <PtrSched.h>
d94 1
a94 1
      // Other public member functions.
d97 2
a98 9
      WitPartPipSrc * myPartPipSrcFor (WitPart * thePart, WitPeriod thePer);
         //
         // Returns the PartPipSrc owned by this PipMgr for thePart and thePer,
         // creating it, if necessary.

      WitOpnPipSrc * myOpnPipSrcFor (WitOperation * theOpn, WitPeriod thePer);
         //
         // Returns the OpnPipSrc owned by this PipMgr for theOpn and thePer,
         // creating it, if necessary.
d129 2
a130 6
      WitPtrSched <WitPart, WitPartPipSrc> myPartPipSrcs_;
         //
         // myPartPipSrcs_.myPtrAt (thePart, thePer) is the PartPipSrc owned by
         // this PipMgr for thePart in thePer.

      WitPtrSched <WitOperation, WitOpnPipSrc> myOpnPipSrcs_;
d132 1
a132 2
         // myOpnPipSrcs_.myPtrAt (theOpn, thePer) is the OpnPipSrc owned by
         // this PipMgr for theOpn in thePer.
@


1.6
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d80 1
a80 1
      void getSupVolPegging (
d83 1
a83 1
            WitPairStack <WitPartPipSrc, double> & thePegging);
d85 1
a85 1
         // Sets thePegging to the supplyVol pegging for theDemand and shipPer.
d87 1
a87 1
      void getExecVolPegging (
d90 1
a90 1
            WitPairStack <WitOpnPipSrc, double> & thePegging);
d92 1
a92 1
         // Sets thePegging to the execVol pegging for theDemand and shipPer.
@


1.5
log
@Continued implementation of post-implosion pegging.
@
text
@d87 7
d103 5
d141 5
@


1.4
log
@Continued implementation of post-implosion pegging.
@
text
@d81 3
a83 3
            WitDemand *                        theDemand,
            WitPeriod                          shipPer,
            WitPairStack <WitPipSrc, double> & thePegging);
d91 1
a91 1
      WitPipSrc * myPipSrcFor (WitPart * thePart, WitPeriod thePer);
d93 1
a93 1
         // Returns the PipSrc owned by this PipMgr for thePart and thePer,
d125 1
a125 1
      WitPtrSched <WitPart, WitPipSrc> myPipSrcs_;
d127 2
a128 2
         // myPipSrcs_.myPtrAt (thePart, thePer) is the PipSrc owned by this
         // PipMgr for thePart in thePer.
@


1.3
log
@Continued implementation of post-implosion pegging.
@
text
@d33 2
@


1.2
log
@Continued implementation of post-implosion pegging.
@
text
@d52 1
a52 1
      // Other public member functions.
d73 15
@


1.1
log
@Continued implementation of post-implosion pegging.
@
text
@a19 1
#include <ObjStack.h>
d58 1
a58 1
            double      incVol);
d60 1
a60 1
         // Records an increase of incVol to theDemand->shipVol ()[shipPer].
d74 4
a77 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
d95 1
a95 1
      WitObjStack <WitPipTarg> myPipTargs_;
d97 1
a97 5
         // The PipTargs owned by this PipMgr.

      WitPtrSched <WitDemand, WitPipTarg> eachPipTarg_;
         //
         // eachPipTarg_.myPtrAt (theDemand, shipPer) is the PipTarg owned
d100 1
a100 1
      WitPairStack <WitPipTarg, double> myShipIncs_;
d102 4
a105 4
         // Represents the ordered list of triples (theDemand, shipPer, incVol)
         // such that theDemand->shipVol ()[shipPer] is to be increased by
         // incVol, pegging the resulting resource utilization to theDemand in
         // shipPer.
d107 5
@

