head	1.15;
access;
symbols
	sce_5_01_20080919:1.8
	latest_sce_4_20_20060523:1.4.0.2
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.1.0.2
	sce_4_20_OSL:1.1;
locks; strict;
comment	@ * @;


1.15
date	2011.09.28.23.50.51;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.24.00.29.06;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.08.30.20.50.58;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.08.30.20.18.30;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.08.21.14.45;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.02.20.34.03;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.02.19.27.00;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.02.14.17.36;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.03.21.14.56.33;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.08.14.45.50;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.08.14.28.25;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.02.17.34.19;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.01.20.25.01;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.01.18.42.15;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.21.22.05.39;	author dpc;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Revised the source code proprietary statement.
@
text
@/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     RELEASE = 258,
     ADD = 259,
     SET = 260,
     READ = 261,
     PROBLEM = 262,
     PART = 263,
     OPERATION = 264,
     BOM_ENTRY = 265,
     SUB_ENTRY = 266,
     BOP_ENTRY = 267,
     DEMAND = 268,
     PART_WITH_OPERATION = 269,
     SINGLE = 270,
     SPARSE = 271,
     DENSE = 272,
     END_BOUNDS = 273,
     HARDLB = 274,
     SOFTLB = 275,
     HARDUB = 276,
     CAPACITY = 277,
     MATERIAL = 278,
     IDENTIFIER = 279,
     STRING = 280,
     DOUBLE = 281,
     INTEGER = 282,
     BOOLEAN = 283,
     CATEGORY = 284,
     EXEC_BOUNDS = 285,
     STOCK_BOUNDS = 286,
     CUM_SHIP_BOUNDS = 287
   };
#endif
/* Tokens.  */
#define RELEASE 258
#define ADD 259
#define SET 260
#define READ 261
#define PROBLEM 262
#define PART 263
#define OPERATION 264
#define BOM_ENTRY 265
#define SUB_ENTRY 266
#define BOP_ENTRY 267
#define DEMAND 268
#define PART_WITH_OPERATION 269
#define SINGLE 270
#define SPARSE 271
#define DENSE 272
#define END_BOUNDS 273
#define HARDLB 274
#define SOFTLB 275
#define HARDUB 276
#define CAPACITY 277
#define MATERIAL 278
#define IDENTIFIER 279
#define STRING 280
#define DOUBLE 281
#define INTEGER 282
#define BOOLEAN 283
#define CATEGORY 284
#define EXEC_BOUNDS 285
#define STOCK_BOUNDS 286
#define CUM_SHIP_BOUNDS 287




/* Copy the first part of user declarations.  */
#line 1 "../src/witParse.y"

//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

/*------------------------------------------------------------------------------
 *
 *     Source file:    witParse.y
 *
 *     Parser for WIT 4.0 Input Data File Format
 *
 *     To create an executable parser file:
 *
 *           yacc -d  witParse.y             (creates y.tab.c and y.tab.h)
 *           mv -f y.tab.c witParse.C
 *           mv -f y.tab.h ytab.h
 *           lex  witLexer.l                 (creates lex.yy.c)    
 *           mv -f lex.yy.c witLexer.C
 *           xlC witLexer.C witParse.C -o witParse -ly -ll
 *    
 *           Notes:
 *           
 *              -d   causes y.tab.h to be created.  This is the token
 *                   name definition file.
 *
 *              -ly  causes the yacc library to be included. This 
 *                   library is in /usr/lib/liby.a
 *
 *              -ll  causes the lex library to be included. This
 *                   library is in /usr/lib/libl.a      
 *
 *------------------------------------------------------------------------------
 *
 */

#include <Parser.h>
#include <Problem.h>
#include <ApiMgr.h>
#include <InputID.h>
#include <VecBS.h>
#include <Entity.h>
#include <MsgFac.h>

#include <errno.h>

extern  FILE *yyin;

//#if defined(__GNUC__)
extern int yylex (void);
extern void yyrestart (FILE *);
//#endif

extern "C" void yyerror(const char *)
{
}

//#if defined (WIN32) or defined (__OS2__)
//extern void yy_reset(void);
//extern char yytext[];
//#else
extern char yytext[];
//#endif

void prterror();                     /* print line number and filename */ 

    /* variables used by the parser */
//RWCollectableString   *rulePtr;
WitSymTabEntry        *entryPtr;     /* ptr to current symbol table entry */
WitEntity::argVecDef  *argPtr;
WitVectorSpec         *vecPtr;       /* pointer to current vector format */
WitBoundSetSpec       *bndPtr;
WitParseRC            retcode;
WitEntity::eType      entityType;    /* type of the current entity */
WitAttribute::aType   attrType;      /* type of the current attribute */  
WitParser::PS         commandState;  /* current command state */
const char            *s1, *s2, *s3; /* temporary strings     */

const char * relnum[] = {"4.0", "5.0", "6.0", "7.0", "8.0"};
   //
   // Valid WIT release numbers
   // (i.e., valid values for the "release" specification)

#define   NRELS     (sizeof relnum / sizeof relnum[0])

const char * checkrel(char *);         /* check for a valid release number */   



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 99 "../src/witParse.y"
{
    int    intval;
    double doubleval;
    char * strval;
    bool   boolval;
    int    cval;
    int    pval;
    int    btype;
}
/* Line 187 of yacc.c.  */
#line 268 "witParse.tab.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 281 "witParse.tab.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  5
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   77

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  37
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  55
/* YYNRULES -- Number of rules.  */
#define YYNRULES  82
/* YYNRULES -- Number of states.  */
#define YYNSTATES  110

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   287

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      34,    35,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    36,    33,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint8 yyprhs[] =
{
       0,     0,     3,     6,     7,    10,    12,    14,    16,    17,
      18,    24,    26,    27,    28,    35,    37,    39,    40,    46,
      47,    53,    55,    57,    59,    61,    63,    65,    67,    69,
      70,    74,    76,    77,    80,    82,    85,    87,    89,    91,
      93,    96,    98,   100,   102,   104,   106,   108,   110,   111,
     112,   113,   121,   122,   123,   130,   131,   132,   139,   140,
     143,   144,   149,   151,   154,   156,   158,   159,   164,   166,
     168,   170,   171,   174,   175,   179,   181,   183,   185,   186,
     187,   188,   196
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int8 yyrhs[] =
{
      38,     0,    -1,    41,    39,    -1,    -1,    39,    40,    -1,
      45,    -1,    49,    -1,    87,    -1,    -1,    -1,     3,    42,
      44,    43,    33,    -1,    25,    -1,    -1,    -1,     4,    46,
      48,    47,    55,    33,    -1,    53,    -1,    14,    -1,    -1,
       5,     7,    50,    54,    33,    -1,    -1,     5,    51,    52,
      55,    33,    -1,    53,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,    12,    -1,    13,    -1,    58,    -1,    -1,
      59,    56,    58,    -1,    29,    -1,    -1,    58,    61,    -1,
      60,    -1,    59,    60,    -1,    65,    -1,    57,    -1,    62,
      -1,    80,    -1,    63,    64,    -1,    24,    -1,    65,    -1,
      66,    -1,    25,    -1,    27,    -1,    26,    -1,    28,    -1,
      -1,    -1,    -1,    15,    67,    34,    68,    78,    69,    35,
      -1,    -1,    -1,    16,    70,    34,    71,    74,    35,    -1,
      -1,    -1,    17,    72,    34,    73,    77,    35,    -1,    -1,
      74,    75,    -1,    -1,    79,    36,    76,    78,    -1,    78,
      -1,    77,    78,    -1,    65,    -1,    27,    -1,    -1,    82,
      81,    83,    18,    -1,    30,    -1,    31,    -1,    32,    -1,
      -1,    83,    84,    -1,    -1,    86,    85,    66,    -1,    19,
      -1,    20,    -1,    21,    -1,    -1,    -1,    -1,     6,    88,
      91,    89,    33,    90,    41,    -1,    25,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   146,   146,   149,   150,   153,   162,   171,   183,   186,
     182,   197,   213,   220,   212,   251,   263,   282,   281,   304,
     303,   316,   352,   359,   366,   373,   380,   387,   395,   399,
     398,   461,   468,   469,   517,   518,   521,   578,   610,   612,
     615,   618,   656,   708,   712,   715,   718,   721,   726,   751,
     756,   725,   766,   790,   765,   801,   824,   800,   835,   836,
     844,   842,   855,   856,   859,   960,   977,   976,  1001,  1028,
    1055,  1082,  1083,  1092,  1091,  1114,  1125,  1136,  1149,  1157,
    1162,  1148,  1199
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "RELEASE", "ADD", "SET", "READ",
  "PROBLEM", "PART", "OPERATION", "BOM_ENTRY", "SUB_ENTRY", "BOP_ENTRY",
  "DEMAND", "PART_WITH_OPERATION", "SINGLE", "SPARSE", "DENSE",
  "END_BOUNDS", "HARDLB", "SOFTLB", "HARDUB", "CAPACITY", "MATERIAL",
  "IDENTIFIER", "STRING", "DOUBLE", "INTEGER", "BOOLEAN", "CATEGORY",
  "EXEC_BOUNDS", "STOCK_BOUNDS", "CUM_SHIP_BOUNDS", "';'", "'('", "')'",
  "':'", "$accept", "data_specification", "command_list", "command",
  "release_specification", "@@1", "@@2", "release_num", "add_command", "@@3",
  "@@4", "add_clause", "set_command", "@@5", "@@6", "set_clause",
  "entity_name", "global_specification", "entity_specification", "@@7",
  "category", "attribute_list", "argument_list", "argument", "attribute",
  "simple_attribute", "attribute_name", "attribute_value", "simple_value",
  "vector_format", "@@8", "@@9", "@@10", "@@11", "@@12", "@@13", "@@14",
  "sparse_list", "period_value", "@@15", "value_list", "vector_value",
  "period", "bound_set_attribute", "@@16", "bound_set_type",
  "bounds_specification", "bound_item", "@@17", "bound_type",
  "read_command", "@@18", "@@19", "@@20", "file_name", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,    59,    40,    41,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    37,    38,    39,    39,    40,    40,    40,    42,    43,
      41,    44,    46,    47,    45,    48,    48,    50,    49,    51,
      49,    52,    53,    53,    53,    53,    53,    53,    54,    56,
      55,    57,    58,    58,    59,    59,    60,    60,    61,    61,
      62,    63,    64,    64,    65,    65,    65,    65,    67,    68,
      69,    66,    70,    71,    66,    72,    73,    66,    74,    74,
      76,    75,    77,    77,    78,    79,    81,    80,    82,    82,
      82,    83,    83,    85,    84,    86,    86,    86,    88,    89,
      90,    87,    91
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     0,     2,     1,     1,     1,     0,     0,
       5,     1,     0,     0,     6,     1,     1,     0,     5,     0,
       5,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     0,     2,     1,     2,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     0,     0,
       0,     7,     0,     0,     6,     0,     0,     6,     0,     2,
       0,     4,     1,     2,     1,     1,     0,     4,     1,     1,
       1,     0,     2,     0,     3,     1,     1,     1,     0,     0,
       0,     7,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       0,     8,     0,     3,     0,     1,     2,    11,     9,    12,
      19,    78,     4,     5,     6,     7,     0,     0,    17,     0,
       0,    10,    22,    23,    24,    25,    26,    27,    16,    13,
      15,    32,     0,    21,    82,    79,     0,     0,    28,    44,
      46,    45,    47,    31,     0,    37,    29,    34,    36,     0,
       0,    18,    41,    68,    69,    70,    33,    38,     0,    39,
      66,    20,    32,    35,    80,    14,    48,    52,    55,    40,
      42,    43,    71,    30,     0,     0,     0,     0,     0,    81,
      49,    53,    56,    67,    75,    76,    77,    72,    73,     0,
      58,     0,     0,    64,    50,     0,     0,    62,    74,     0,
      65,    54,    59,     0,    57,    63,    51,    60,     0,    61
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int8 yydefgoto[] =
{
      -1,     2,     6,    12,     3,     4,    16,     8,    13,    17,
      36,    29,    14,    31,    19,    32,    30,    37,    44,    62,
      45,    38,    46,    47,    56,    57,    58,    69,    93,    71,
      75,    89,    99,    76,    90,    77,    91,    95,   102,   108,
      96,    94,   103,    59,    72,    60,    78,    87,    92,    88,
      15,    20,    49,    74,    35
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -91
static const yytype_int8 yypact[] =
{
      -1,   -91,     3,   -91,   -18,   -91,    54,   -91,   -91,   -91,
       1,   -91,   -91,   -91,   -91,   -91,   -21,    30,   -91,    23,
     -10,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,
     -91,   -91,    20,   -91,   -91,   -91,    20,   -17,    -7,   -91,
     -91,   -91,   -91,   -91,    31,   -91,    20,   -91,   -91,    33,
      34,   -91,   -91,   -91,   -91,   -91,   -91,   -91,    -6,   -91,
     -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,
     -91,   -91,   -91,    -7,    -1,    35,    36,    37,    32,   -91,
     -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,    29,
     -91,    29,    46,   -91,   -91,   -22,     2,   -91,   -91,    38,
     -91,   -91,   -91,    39,   -91,   -91,   -91,   -91,    29,   -91
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int8 yypgoto[] =
{
     -91,   -91,   -91,   -91,    -9,   -91,   -91,   -91,   -91,   -91,
     -91,   -91,   -91,   -91,   -91,   -91,    49,   -91,    40,   -91,
     -91,    10,   -91,    28,   -91,   -91,   -91,   -91,   -32,   -15,
     -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,
     -91,   -90,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,
     -91,   -91,   -91,   -91,   -91
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1
static const yytype_uint8 yytable[] =
{
      48,    97,     1,     5,    48,   100,   105,     7,    18,    66,
      67,    68,    21,   101,    48,    34,    51,    52,   109,    39,
      40,    41,    42,    53,    54,    55,    70,    39,    40,    41,
      42,    22,    23,    24,    25,    26,    27,   104,    22,    23,
      24,    25,    26,    27,    28,    39,    40,    41,    42,    43,
      83,    84,    85,    86,    39,    40,    41,    42,     9,    10,
      11,    66,    67,    68,    61,    79,    64,    65,    33,    80,
      81,    82,    73,   106,    63,   107,    50,    98
};

static const yytype_uint8 yycheck[] =
{
      32,    91,     3,     0,    36,    27,    96,    25,     7,    15,
      16,    17,    33,    35,    46,    25,    33,    24,   108,    25,
      26,    27,    28,    30,    31,    32,    58,    25,    26,    27,
      28,     8,     9,    10,    11,    12,    13,    35,     8,     9,
      10,    11,    12,    13,    14,    25,    26,    27,    28,    29,
      18,    19,    20,    21,    25,    26,    27,    28,     4,     5,
       6,    15,    16,    17,    33,    74,    33,    33,    19,    34,
      34,    34,    62,    35,    46,    36,    36,    92
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     3,    38,    41,    42,     0,    39,    25,    44,     4,
       5,     6,    40,    45,    49,    87,    43,    46,     7,    51,
      88,    33,     8,     9,    10,    11,    12,    13,    14,    48,
      53,    50,    52,    53,    25,    91,    47,    54,    58,    25,
      26,    27,    28,    29,    55,    57,    59,    60,    65,    89,
      55,    33,    24,    30,    31,    32,    61,    62,    63,    80,
      82,    33,    56,    60,    33,    33,    15,    16,    17,    64,
      65,    66,    81,    58,    90,    67,    70,    72,    83,    41,
      34,    34,    34,    18,    19,    20,    21,    84,    86,    68,
      71,    73,    85,    65,    78,    74,    77,    78,    66,    69,
      27,    35,    75,    79,    35,    78,    35,    36,    76,    78
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 5:
#line 154 "../src/witParse.y"
    {
      delete WitParser::instance ()->currentEntity_;
      WitParser::instance ()->currentEntity_ = NULL;
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ = NULL;
    ;}
    break;

  case 6:
#line 163 "../src/witParse.y"
    { 
      delete WitParser::instance ()->currentEntity_;
      WitParser::instance ()->currentEntity_ = NULL;
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ = NULL;
    ;}
    break;

  case 7:
#line 172 "../src/witParse.y"
    {
      if (WitParser::instance ()->currentEntity_ != NULL)
        delete WitParser::instance ()->currentEntity_;
      WitParser::instance ()->currentEntity_ = NULL;
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ = NULL;
    ;}
    break;

  case 8:
#line 183 "../src/witParse.y"
    { WitParser::instance ()->setParseState(WitParser::PS_release); ;}
    break;

  case 9:
#line 186 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
    break;

  case 10:
#line 191 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
      free (yylval.strval);     
    ;}
    break;

  case 11:
#line 198 "../src/witParse.y"
    { if (!checkrel(yylval.strval)) {    /* check table of valid releases */
         WitParser::instance ()->myMsgFac () ("invalidRelMsg", yylval.strval);

         int i;

         for (i = 0; i < NRELS; ++ i)
            WitParser::instance ()->myMsgFac () ("validRelSmsg", relnum[i]);

         prterror();
         WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
    ;}
    break;

  case 12:
#line 213 "../src/witParse.y"
    { 
      WitParser::instance ()->setParseState(WitParser::PS_add);
      commandState = WitParser::PS_add;     /* save command state */
      WitParser::instance ()->currentRule_ = "add";
    ;}
    break;

  case 13:
#line 220 "../src/witParse.y"
    {
      /* lookup rule for this entity and save symbol table pointer */
      entryPtr = WitParser::instance ()->currentEntity_->
        lookupRule(
           WitParser::instance ()->theSymTable_,
           WitParser::instance ()->currentRule_);

      /* Issue error message if no entry found in symbol table */
      if (entryPtr == NULL) {
        switch (commandState) {
          case WitParser::PS_add:
            WitParser::instance ()->myMsgFac () ("noParamAddMsg",
              WitParser::instance ()->currentEntity_->entityID());
            break;
          case WitParser::PS_set:
            WitParser::instance ()->myMsgFac () ("noParamSetMsg",
              WitParser::instance ()->currentEntity_->entityID());
            break;
        };
        WitParser::instance ()->currentEntity_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
    ;}
    break;

  case 14:
#line 246 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
    ;}
    break;

  case 15:
#line 252 "../src/witParse.y"
    {
      // create a WitEntity object
      WitParser::instance ()->currentEntity_ =
         new WitEntity (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            entityType);
      free (yylval.strval); 
      WitParser::instance ()->currentAttr_ = NULL;
    ;}
    break;

  case 16:
#line 264 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_partOperation);
      WitParser::instance ()->currentRule_ = "add_partWithOperation";

      // create a WitEntity object
      WitParser::instance ()->currentEntity_ =
         new WitEntity (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitEntity::partWithOperation);

      free (yylval.strval);
      WitParser::instance ()->currentAttr_ = NULL;
      entityType = WitEntity::partWithOperation;
    ;}
    break;

  case 17:
#line 282 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_setProblem);
      commandState = WitParser::PS_set;     /* save command state */

      // create a WitEntity object
      WitParser::instance ()->currentEntity_ =
         new WitEntity (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitEntity::problem);
      free (yylval.strval);
      WitParser::instance ()->currentAttr_ = NULL;

      WitParser::instance ()->currentRule_ = "set_problem";
    ;}
    break;

  case 18:
#line 299 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
    ;}
    break;

  case 19:
#line 304 "../src/witParse.y"
    { 
      WitParser::instance ()->setParseState(WitParser::PS_set);
      commandState = WitParser::PS_set;     /* save command state */
      WitParser::instance ()->currentRule_ = "set";
    ;}
    break;

  case 20:
#line 311 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
    ;}
    break;

  case 21:
#line 317 "../src/witParse.y"
    {
      // create a WitEntity object
      WitParser::instance ()->currentEntity_ =
         new WitEntity (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            entityType);
      free (yylval.strval);
      WitParser::instance ()->currentAttr_ = NULL;

      /* lookup rule for this entity and save symbol table pointer */
      entryPtr = WitParser::instance ()->currentEntity_->
        lookupRule (
           WitParser::instance ()->theSymTable_,
           WitParser::instance ()->currentRule_);

      /* Issue error message if no entry found in symbol table */
      if (entryPtr == NULL) {
        switch (commandState) {
          case WitParser::PS_add:
            WitParser::instance ()->myMsgFac () ("noParamAddMsg",
              WitParser::instance ()->currentEntity_->entityID());
            break;
          case WitParser::PS_set:
            WitParser::instance ()->myMsgFac () ("noParamSetMsg",
              WitParser::instance ()->currentEntity_->entityID());
            break;
        };
        WitParser::instance ()->currentEntity_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
    ;}
    break;

  case 22:
#line 353 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_part);
      WitParser::instance ()->currentRule_ += "_part";
      entityType = WitEntity::part;
    ;}
    break;

  case 23:
#line 360 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_operation);
      WitParser::instance ()->currentRule_ += "_operation";
      entityType = WitEntity::operation;
    ;}
    break;

  case 24:
#line 367 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_bomEntry);
      WitParser::instance ()->currentRule_ += "_bomEntry";
      entityType = WitEntity::bomEntry;
    ;}
    break;

  case 25:
#line 374 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_subEntry);
      WitParser::instance ()->currentRule_ += "_subEntry";
      entityType = WitEntity::subEntry;
    ;}
    break;

  case 26:
#line 381 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_bopEntry);
      WitParser::instance ()->currentRule_ += "_bopEntry";
      entityType = WitEntity::bopEntry;
    ;}
    break;

  case 27:
#line 388 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_demand);
      WitParser::instance ()->currentRule_ += "_demand";
      entityType = WitEntity::demand;
    ;}
    break;

  case 29:
#line 399 "../src/witParse.y"
    {
      /*------------------------------------------------------*
       * we have created the entity object and the argument   *
       * vector; we also know the current rule; if there is   *
       * an entry for the rule, then invoke the function.     *
       *------------------------------------------------------*/

      if (entryPtr != NULL) {
        /* before invoking the function, check the validity of the arguments */
        /* by comparing the arg. types against the types in the symbol table */

        retcode = WitParser::instance ()->currentEntity_->checkArgs(entryPtr);
        if (retcode == BAD_NUM_ARGS) {
          if (entryPtr->nparms() == 1)
            s2 = "argument";
          else s2 = "arguments";
          if (WitParser::instance ()->currentEntity()->argc() == 1)
            s3 = "was found";
          else s3 = "were found";

          s1 = "";
          if (commandState == WitParser::PS_add)
            s1 = "add "; 
          if (commandState == WitParser::PS_set)
            s1 = "set ";

          WitParser::instance ()->myMsgFac () ("incorrectNumberArgMsg",
             s1,
             WitParser::instance ()->currentEntity_->entityID(),
             entryPtr->nparms(),
             s2,
             WitParser::instance ()->currentEntity()->argc(),
             s3);

          WitParser::instance ()->currentEntity_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
        else
        if (retcode) {
          WitParser::instance ()->currentEntity_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }

        else                                    /* if arguments O.K.  */
        if (entryPtr->func() != NULL) {         /* if function exists */

          /* if entity has been invalidated because of an error,      */
          /* then, skip invocations of API functions for the entity   */
          if (!WitParser::instance ()->currentEntity_->invalid())
            (entryPtr->func())();               /* invoke function */
        }
      };  

      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
    ;}
    break;

  case 31:
#line 462 "../src/witParse.y"
    { 
      if (WitParser::instance ()->parseState() == WitParser::PS_part)
      (yyval.cval) = (yyvsp[(1) - (1)].cval);
    ;}
    break;

  case 33:
#line 470 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextAttr);

      /* If an entry exists for the current rule, then invoke   */
      /* the function.                                          */

      if (entryPtr == NULL) {
        WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
          WitParser::instance ()->currentAttr_->attrID(),
          WitParser::instance ()->currentEntity_->entityID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
      else
      {
        retcode = WitParser::instance ()->currentAttr_->checkArgs(entryPtr);
        if (retcode == PERIOD_ERROR) {
           WitParser::instance ()->currentAttr_->setInvalid(true);
           prterror();
        }            
        else
        if (retcode) {
          WitParser::instance ()->currentAttr_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
        else 
        if (entryPtr->func() != NULL) {        /* if function exists  */

          /* if entity or attr has been invalidated because of error, */
          /* then, skip invocations of API function for attributes    */
          if (!WitParser::instance ()->currentEntity_->invalid() and
            !WitParser::instance ()->currentAttr_->invalid())
            retcode = (entryPtr->func())();    /* invoke wrapper function */
            if (retcode) {
              WitParser::instance ()->currentAttr_->setInvalid(true);
              prterror();
            }; 
        } 
      };                   

      WitParser::instance ()->currentRule_ =
         WitParser::instance ()->previousRule_;
    ;}
    break;

  case 36:
#line 522 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextArg);
      switch((yyvsp[(1) - (1)].pval)) {
        case WitDRParmType::intScalar:
          argPtr =
             WitParser::instance ()->currentEntity_->setIntArg(yylval.intval);
          break;
        case WitDRParmType::doubleScalar:
          argPtr =
             WitParser::instance ()->currentEntity_->
                setDoubleArg(yylval.doubleval);
          break;
        case WitDRParmType::boolScalar:
          argPtr = WitParser::instance ()->currentEntity_->
            setBoolArg(yylval.boolval);
          break;
        case WitDRParmType::string:
          argPtr =
             WitParser::instance ()->currentEntity_->
                setStringArg(yylval.strval);

          /* string was created by the lexer and it's no longer needed */
          free (yylval.strval);
          break;
        default:
          return 0;
      };
      if (argPtr == NULL) {
        s1 = "";
        if (commandState == WitParser::PS_add)
          s1 = "add ";
        if (commandState == WitParser::PS_set)
          s1 = "set ";

        /* if rule is not defined in symbol table, skip message now. */
        /* However, error message will be issued after all arguments */
        /* are processed.  We don't know the correct number of args. */

        if (entryPtr != NULL) {
          if (entryPtr->nparms() == 1)
            s2 = "argument is";
          else s2 = "arguments are";

          WitParser::instance ()->myMsgFac () ("tooManyArgsMsg",
             s1,
             WitParser::instance ()->currentEntity_->entityID(),
             entryPtr->nparms(),
             s2);

          WitParser::instance ()->currentEntity_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
      }
    ;}
    break;

  case 37:
#line 579 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextArg);
      argPtr = WitParser::instance ()->currentEntity_->
        setCatArg (static_cast <WitDRPartCat::Tag> (yylval.cval));
      if (argPtr == NULL) {
        s1 = "";
        if (commandState == WitParser::PS_add)
          s1 = "add ";
        if (commandState == WitParser::PS_set)
          s1 = "set ";

        /* If rule is not defined, skip message. See comment above */
        if (entryPtr != NULL) {
          if (entryPtr->nparms() == 1)
            s2 = "argument is";
          else s2 = "arguments are";

          WitParser::instance ()->myMsgFac () ("tooManyArgsMsg",
             s1,
             WitParser::instance ()->currentEntity_->entityID(),
             entryPtr->nparms(),
             s2);

          WitParser::instance ()->currentEntity_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
     }
    ;}
    break;

  case 41:
#line 619 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_attr);
      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");

      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;

      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (WitParser::instance ()->myProblem (), yylval.strval);

      free (yylval.strval);

      /* lookup rule for this attribute and save symbol table pointer */
      /* this will be helpful to check the datatype of a vector       */
      entryPtr = WitParser::instance ()->currentAttr_->
        lookupRule(WitParser::instance ()->theSymTable_,
           WitParser::instance ()->currentRule_);

      /* if attribute name is not in the symbol table, we can't       */
      /* continue because we don't know the expected argument types   */
      if (entryPtr == NULL) {
        WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
          WitParser::instance ()->currentAttr_->attrID(),
          WitParser::instance ()->currentEntity_->entityID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }

      (yyval.strval) = (yyvsp[(1) - (1)].strval);
    ;}
    break;

  case 42:
#line 657 "../src/witParse.y"
    {
      switch((yyvsp[(1) - (1)].pval)) {
        case WitDRParmType::intScalar:
          argPtr =
             WitParser::instance ()->currentAttr_->setIntArg(yylval.intval);
          break;
        case WitDRParmType::doubleScalar:
          argPtr =
             WitParser::instance ()->currentAttr_->setDoubleArg(
                yylval.doubleval);
          break;
        case WitDRParmType::boolScalar:
          argPtr = WitParser::instance ()->currentAttr_->
            setBoolArg(yylval.boolval);
          break;
        case WitDRParmType::string:
          argPtr =
             WitParser::instance ()->currentAttr_->setStringArg(yylval.strval);

          /* string was created by the lexer and it's no longer needed */
          free (yylval.strval);
          break;
        default:
          return 0;
      };

      if (argPtr == NULL) {
        s1 = "";
        if (commandState == WitParser::PS_add)
          s1 = "add ";
        if (commandState == WitParser::PS_set)
          s1 = "set ";

        if (entryPtr != NULL) {
          if (entryPtr->nparms() == 1)
            s2 = "argument is";
          else s2 = "arguments are";

          WitParser::instance ()->myMsgFac () ("tooManyArgsMsg",
             s1,
             WitParser::instance ()->currentAttr_->attrID(),
             entryPtr->nparms(),
             s2);

          WitParser::instance ()->currentAttr_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
      }
    ;}
    break;

  case 43:
#line 709 "../src/witParse.y"
    { (yyval.pval) = WitDRParmType::undefined; ;}
    break;

  case 44:
#line 713 "../src/witParse.y"
    { (yyval.pval) = WitDRParmType::string; ;}
    break;

  case 45:
#line 716 "../src/witParse.y"
    { (yyval.pval) = WitDRParmType::intScalar; ;}
    break;

  case 46:
#line 719 "../src/witParse.y"
    { (yyval.pval) = WitDRParmType::doubleScalar; ;}
    break;

  case 47:
#line 722 "../src/witParse.y"
    { (yyval.pval) = WitDRParmType::boolScalar; ;}
    break;

  case 48:
#line 726 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_single);

      // Construct a VectorSpec object
      if (WitParser::instance ()->currentAttr_->attrType() ==
          WitAttribute::simple) {
        if (entryPtr != NULL) {
          vecPtr =
             new WitVectorSpec (
                WitParser::instance ()->myProblem (),
                WitVectorSpec::single_,
                entryPtr->parmTypes()[0]);

          argPtr = WitParser::instance ()->currentAttr_->setVectorArg(vecPtr);
        }
      }
      else 
        vecPtr =
           new WitVectorSpec (
              WitParser::instance ()->myProblem (),
              WitVectorSpec::single_,
              WitDRParmType::doubleVector);
    ;}
    break;

  case 49:
#line 751 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_singleParen);
    ;}
    break;

  case 50:
#line 756 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_singleValue);
    ;}
    break;

  case 51:
#line 761 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
    break;

  case 52:
#line 766 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_sparse);

      /* Construct a VectorSpec object */
      if (WitParser::instance ()->currentAttr_->attrType() ==
          WitAttribute::simple) {
        if (entryPtr != NULL) {
          vecPtr =
             new WitVectorSpec (
                WitParser::instance ()->myProblem (),
                WitVectorSpec::sparse_,
                entryPtr->parmTypes()[0]);
          argPtr = WitParser::instance ()->currentAttr_->setVectorArg(vecPtr);
        }
      }
      else
         vecPtr =
            new WitVectorSpec (
               WitParser::instance ()->myProblem (),
               WitVectorSpec::sparse_,
               WitDRParmType::doubleVector);
    ;}
    break;

  case 53:
#line 790 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_sparseParen);
    ;}
    break;

  case 54:
#line 796 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
    break;

  case 55:
#line 801 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_dense);

      // Construct a VectorSpec object
      if (WitParser::instance ()->currentAttr_->attrType() ==
          WitAttribute::simple) {
        if (entryPtr != NULL) {
          vecPtr =
             new WitVectorSpec (WitParser::instance ()->myProblem (),
                WitVectorSpec::dense_,
                entryPtr->parmTypes()[0]);
          argPtr = WitParser::instance ()->currentAttr_->setVectorArg(vecPtr);
        }
      }
      else
         vecPtr =
            new WitVectorSpec (
               WitParser::instance ()->myProblem (),
               WitVectorSpec::dense_,
               WitDRParmType::doubleVector);
    ;}
    break;

  case 56:
#line 824 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_denseParen);
    ;}
    break;

  case 57:
#line 830 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
    break;

  case 59:
#line 837 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_sparseValue);
    ;}
    break;

  case 60:
#line 844 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_periodColon);
    ;}
    break;

  case 61:
#line 849 "../src/witParse.y"
    { 
      WitParser::instance ()->setParseState(WitParser::PS_sparseParen);
      (yyval.pval) = (yyvsp[(4) - (4)].pval); 
    ;}
    break;

  case 64:
#line 860 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_denseValue);

      if (entryPtr != NULL) {
      switch((yyvsp[(1) - (1)].pval)) {

        case WitDRParmType::intScalar:
          if (entryPtr->parmTypes()[0] == WitDRParmType::doubleVector) {
            retcode =
               vecPtr->addDoubleVal(static_cast <double> (yylval.intval));

            break;
          };
          if (entryPtr->parmTypes()[0] == WitDRParmType::intVector) {
            retcode = vecPtr->addIntVal(yylval.intval);
            break;
          };
          if (entryPtr->parmTypes()[0] == WitDRParmType::boundSet) {
            retcode =
               vecPtr->addDoubleVal(static_cast <double> (yylval.intval));
            break;
          }
          else {
            retcode = WRONG_TYPE;
            break;
          };
          
        case WitDRParmType::doubleScalar:
         if (entryPtr->parmTypes()[0] == WitDRParmType::intVector) {
            vecPtr->addIntVal(static_cast <int> (yylval.doubleval));
            retcode = SHOULD_BE_INT;
            break;
          };
          if (entryPtr->parmTypes()[0] == WitDRParmType::doubleVector) {
            retcode = vecPtr->addDoubleVal(yylval.doubleval);
            break;
          };
          if (entryPtr->parmTypes()[0] == WitDRParmType::boundSet) {
            retcode = vecPtr->addDoubleVal(yylval.doubleval);
            break;
          }
          else {
            retcode = WRONG_TYPE;
            break;
          };

        case WitDRParmType::boolScalar:
           {
           if (entryPtr->parmTypes()[0] == WitDRParmType::boolVector)
              {
              retcode = vecPtr->addBoolVal (yylval.boolval);

              break;
              };

           WitParser::instance ()->myMsgFac () ("booleanVectorMsg",
              WitParser::instance ()->currentAttr_->attrID ());

           WitParser::instance ()->currentAttr_->setInvalid (true);

           prterror ();

           retcode = 0;

           WitParser::instance ()->myMsgFac () ("parsingStopsMsg");

           break;
           }

        case WitDRParmType::string:
          WitParser::instance ()->myMsgFac () ("stringVectorMsg",
             WitParser::instance ()->currentAttr_->attrID());
          WitParser::instance ()->currentAttr_->setInvalid(true);
          prterror();
          free (yylval.strval);
          retcode = 0;
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
          break;
      }

      if (retcode == WRONG_TYPE) {
        WitParser::instance ()->myMsgFac () ("vecTypeNotValidMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        retcode = 0;
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
      if (retcode == SHOULD_BE_INT) {
        WitParser::instance ()->myMsgFac () ("vecValueNotIntMsg",
           WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        retcode = 0;
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
      }
    ;}
    break;

  case 65:
#line 961 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_period);

      retcode = vecPtr->addPeriodVal(yylval.intval);
      if (retcode == PERIOD_ERROR) {
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      }
      if (retcode == PERIOD_DUP) {
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      }
    ;}
    break;

  case 66:
#line 977 "../src/witParse.y"
    {  
      /* lookup rule for this attribute and save symbol table pointer */
      entryPtr = WitParser::instance ()->currentAttr_->
         lookupRule (
            WitParser::instance ()->theSymTable_,
            WitParser::instance ()->currentRule_);

      if (entryPtr == NULL) {
        WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
          WitParser::instance ()->currentAttr_->attrID(),
          WitParser::instance ()->currentEntity_->entityID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
    ;}
    break;

  case 67:
#line 995 "../src/witParse.y"
    {
      bndPtr = NULL;
      WitParser::instance ()->setParseState(WitParser::PS_endBounds);
    ;}
    break;

  case 68:
#line 1002 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);

      // Construct a BoundSetSpec object
      bndPtr = new WitBoundSetSpec(WitBoundSetSpec::exec);

      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;

      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitAttribute::boundSet);

      argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

      free (yylval.strval);
      (yyval.strval) = (yyvsp[(1) - (1)].strval);
    ;}
    break;

  case 69:
#line 1029 "../src/witParse.y"
    { 
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);

      // Construct a BoundSetSpec object
      bndPtr = new WitBoundSetSpec(WitBoundSetSpec::stock);

      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;

      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitAttribute::boundSet);

      argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

      free (yylval.strval);
      (yyval.strval) = (yyvsp[(1) - (1)].strval);
    ;}
    break;

  case 70:
#line 1056 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);

      // Construct a BoundSetSpec object
      bndPtr = new WitBoundSetSpec(WitBoundSetSpec::cumShip);

      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;

      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitAttribute::boundSet);
      argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

      free (yylval.strval);
      (yyval.strval) = (yyvsp[(1) - (1)].strval);
    ;}
    break;

  case 72:
#line 1086 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);
    ;}
    break;

  case 73:
#line 1092 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_boundType);
    ;}
    break;

  case 74:
#line 1097 "../src/witParse.y"
    {
       switch ((yyvsp[(1) - (3)].btype)) {
         case WitBoundSetSpec::hardlb:
           bndPtr->setHardLBVec(vecPtr);
           break;

         case WitBoundSetSpec::softlb:
           bndPtr->setSoftLBVec(vecPtr);
           break;

         case WitBoundSetSpec::hardub:
           bndPtr->setHardUBVec(vecPtr);
           break;
       }
    ;}
    break;

  case 75:
#line 1115 "../src/witParse.y"
    {
      if (bndPtr->hardLBVec() != NULL) {
        WitParser::instance ()->myMsgFac () ("duplicateHardLBMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      };
      (yyval.btype) = WitBoundSetSpec::hardlb;
    ;}
    break;

  case 76:
#line 1126 "../src/witParse.y"
    {
      if (bndPtr->softLBVec() != NULL) {
        WitParser::instance ()->myMsgFac () ("duplicateSoftLBMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      };
      (yyval.btype) = WitBoundSetSpec::softlb;
    ;}
    break;

  case 77:
#line 1137 "../src/witParse.y"
    {
      if (bndPtr->hardUBVec() != NULL) {
        WitParser::instance ()->myMsgFac () ("duplicateHardUBMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      };
      (yyval.btype) = WitBoundSetSpec::hardub;
    ;}
    break;

  case 78:
#line 1149 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_read);
      commandState = WitParser::PS_read;
      WitParser::instance ()->currentRule_ = "read";
      // printf("Current rule is: %s\n", WitParser::instance ()->currentRule_);
    ;}
    break;

  case 79:
#line 1157 "../src/witParse.y"
    {
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
    break;

  case 80:
#line 1162 "../src/witParse.y"
    {
      /* save lexer state and shift input stream to new file */
      errno   = 0;
      retcode = WitParlex::saveFile(yylval.strval);
      if (retcode == FOPEN_ERROR) {
        yylval.strval[strlen(yylval.strval)-1] = '\0';
        WitParser::instance ()->myMsgFac () ("fopenSmsg",
           yylval.strval+1,
          "r",
          errno,
          strerror(errno));
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }

      if (retcode == STACK_OVERFLOW) {
        WitParser::instance ()->myMsgFac () ("stackOverflowMsg", STACKSIZE);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }

//    printf("Lexer is now reading from file %s\n", WitParlex::fileName());

      WitParser::instance ()->setDataFileName   ();
      WitParser::instance ()->setDataFileLineNo ();

      //#if defined (__GNUC__)
      yyrestart(yyin);
      //#endif

      WitParser::instance ()->setParseState(WitParser::PS_initial);
      free (yylval.strval);
    ;}
    break;


/* Line 1267 of yacc.c.  */
#line 2703 "witParse.tab.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 1202 "../src/witParse.y"


//------------------------------------------------------------------------------

WitParser * WitParser::instance_ = NULL;

//------------------------------------------------------------------------------

void WitParser::parse (WitProblem * theProblem, const char * fileName, FILE * f)
   {
   witAssert (instance_ == NULL);

   instance_ = new WitParser;

   instance ()->parseIt (theProblem, fileName, f);

   delete instance ();

   instance_ = NULL;
   }

//------------------------------------------------------------------------------

// accessors

WitParser::PS    WitParser::parseState() const
{ return parseState_; }

WitEntity     *WitParser::currentEntity() const
{ return currentEntity_; }

WitAttribute  *WitParser::currentAttr() const
{ return currentAttr_; }

WitMsgFacility & WitParser::myMsgFac () const
   {
   return myProblem ()->myMsgFac ();
   }

void WitParser::setParseState(PS st)
{ parseState_ = st; }


void prterror()
{
  WitParser::instance ()->myMsgFac () ("lineNumberMsg",
    reinterpret_cast <const char *> (yytext),
    WitParlex::lineno(), WitParlex::fileName());
}

//  check for a valid release number     
const char * checkrel(char *s)       /* s = char. string, in quotes */
{
  if (strlen(s) <= 2) return NULL;
  for (int i = 0; i < NRELS; i++)
    if (strncmp(s+1, relnum[i], strlen(s)-2) == 0)
      return relnum[i];
  return NULL;
}

//-----------------------------------------------------------------------------
// WitParser::prtSyntaxError
//
//     Implementation of syntax checker
//
//     Contains function to check the state of the parser and generate
//     a meaninful error message when a syntax error occurs.
//
// The parse states are defined in Parser.h:
//
//  PS_initial               // initial state, looking for "release"
//  PS_add                   // found "add", looking for <entity_name>
//  PS_set                   // found "set", looking for <entity_name>
//  PS_read                  // found "read", looking for <data_file>
//  PS_release               // found "release", looking for release_spec
//  PS_part                  // found "part", looking for <category>
//  PS_operation             // found "operation", looking for <arg>
//  PS_bomEntry              // found "bomEntry", looking for <arg>
//  PS_subEntry              // found "subEntry", looking for <arg>
//  PS_bopEntry              // found "bopEntry", looking for <arg>
//  PS_demand                // found "demand", looking for <arg>
//  PS_partOperation         // found "partWithOperation, looking for <arg>
//  PS_nextArg               // looking for another <arg> or a ";"
//  PS_attr                  // found <attr_name>, looking for <attr_value>
//  PS_single                // found "single", looking for "("
//  PS_dense                 // found "dense", looking for "("
//  PS_sparse                // found "sparse", looking for "("
//  PS_singleParen           // found "single (", looking for <vector_value>
//  PS_denseParen            // found "dense (", looking for <vector_value>
//  PS_sparseParen           // found "sparse (", looking for <period>
//  PS_singleValue           // found single value, looking for ")"
//  PS_denseValue            // found <value>, looking for <value> or ")"
//  PS_sparseValue           // found <period_val>, looking for <period> or ")"
//  PS_nextAttr              // looking for <attr_name> or ";"
//  PS_nextCommand           // found ";" and looking for <command>
//  PS_commandEnd            // looking for ";"
//  PS_period                // found <period>, looking for ":"
//  PS_periodColon	     // found ":", looking for <vector_value>
//  PS_nextBound             // found <bound_set_type>, looking for <bounds>
//  PS_boundType             // found <bound_type>, looking for <vector>
//  PS_endBounds             // found "endBounds", looking for ";" or next attr
//  PS_setProblem            // found "set problem", looking for
//                           //        <attribute name>
//-----------------------------------------------------------------------------

void WitParser::prtSyntaxError(WitSymTabEntry *pEntry,
                WitParser::PS parseState, const char * yytext) const
{
  const char * s1;

  // Print syntax error message, depending on current parser state
  switch (parseState) {
    case WitParser::PS_initial:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
         "\"release\"", yytext);
      break;
    case WitParser::PS_commandEnd:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg", "a \";\"", yytext);
      break;
    case WitParser::PS_nextCommand:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
      "a command name (e.g., set, add, read)", yytext);
      break;
    case WitParser::PS_add:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of an addable object type after \"add\"", yytext);
      break;
    case WitParser::PS_set:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of a settable object type after \"set\"", yytext);
      break;
    case WitParser::PS_setProblem:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of an attribute after \"set problem\"", yytext);
      break;
    case WitParser::PS_read:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a string (the name of a file) after \"read\"", yytext);
      break;
    case WitParser::PS_release:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a quoted string (the release number) after \"release\"", yytext);
      break;
    case WitParser::PS_part:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "part", yytext);
      break;
    case WitParser::PS_operation:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "operation", yytext);
      break;
    case WitParser::PS_bomEntry:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "bomEntry", yytext);
      break;
    case WitParser::PS_subEntry:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "subEntry", yytext);
      break;
    case WitParser::PS_bopEntry:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "bopEntry", yytext);
      break;
    case WitParser::PS_demand:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "demand", yytext);
      break;
    case WitParser::PS_partOperation:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "partWithOperation", yytext);
      break;
    case WitParser::PS_nextArg:

      // Check to see if we have the correct number of argumenta.
      // If so, we are looking for an attribute or a semicolon
      if (WitParser::instance ()->currentEntity()->argc() >= pEntry->nparms()) {
        WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
          "the name of an attribute or a \";\"", yytext);
        break;
      };

      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
         "another argument",
         yytext);
      break;
    case WitParser::PS_attr:
      switch (pEntry->parmTypes()[0]) {   // what the value should be
        case WitDRParmType::intScalar:
          s1 = "integer";	
          break;
        case WitDRParmType::doubleScalar:
          s1 = "double";
          break;
        case WitDRParmType::string:
          s1 = "string";
          break;
        case WitDRParmType::boolScalar:
          s1 = "boolean";
          break;
        case WitDRParmType::partCat:
          s1 = "\"category\"";
          break;
        case WitDRParmType::boolVector:
          s1 = "\"boolean vector\"";
          break;
        case WitDRParmType::intVector:
          s1 = "\"integer vector\"";
          break;
        case WitDRParmType::doubleVector:
          s1 = "\"double vector\"";
          break;
        case WitDRParmType::boundSet:
          s1 = "\"bound set\"";
          break;
        default:
          s1 = "unknown";
          break;
      };
      WitParser::instance ()->myMsgFac () ("attrValueNotFound",
        s1, WitParser::instance ()->currentAttr()->attrID(), yytext);
      break;
    case WitParser::PS_nextAttr:
    case WitParser::PS_endBounds:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of an attribute or a \";\"", yytext);
      break;
    case WitParser::PS_nextBound:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a bound set attribute (e.g., softLB, hardLB, hardUB)"
        " or \"endBounds\"", yytext);
      break;
    case WitParser::PS_boundType:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector format (e.g, single, dense, sparse)", yytext);
      break;
    case WitParser::PS_single:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \"(\" after \"single\"", yytext);
      break;
    case WitParser::PS_dense:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \"(\" after \"dense\"", yytext);
      break;
    case WitParser::PS_sparse:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \"(\" after \"sparse\"", yytext);
      break;
    case WitParser::PS_singleParen:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector element for a \"single\" vector specification",
        yytext);
      break;
    case WitParser::PS_denseParen:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector element for a \"dense\" vector specification",
        yytext);
      break;
    case WitParser::PS_sparseParen:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a period (an integer) in \"sparse\" vector specification", yytext);
      break;
    case WitParser::PS_singleValue:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \")\" after the one vector value in a \"single\" vector "
        "specification", yytext);
      break;
    case WitParser::PS_denseValue:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector value or a \")\"", yytext);
      break;
    case WitParser::PS_sparseValue:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a period (an integer) or a \")\"", yytext);
      break;
    case WitParser::PS_period:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \":\" in \"sparse\" vector specification", yytext);
      break;
    case WitParser::PS_periodColon:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector value (a number) after the \":\"", yytext);
      break;
  }
}

//------------------------------------------------------------------------------

void WitParser::setDataFileName () const
   {
   myProblem ()->myApiMgr ()->myInputID ()->setDataFileName (fileName ());
   }

//------------------------------------------------------------------------------

void WitParser::setDataFileLineNo () const
   {
   myProblem ()->myApiMgr ()->myInputID ()->setDataFileLineNo (lineno ());
   }

//-----------------------------------------------------------------------------

// Constructor and destructor

WitParser::WitParser ():
      theSymTable_   (NULL),
      currentRule_   (),
      previousRule_  (),
      currentEntity_ (NULL),
      currentAttr_   (NULL),
      parseState_    (PS_initial),
      myProblem_     (NULL)
   {
   commandState = PS_initial;
   }

WitParser::~WitParser ()
   {
   }

//------------------------------------------------------------------------------

// Parse the input stream
int WitParser::parseIt(WitProblem * theProblem, const char* fileName, FILE* f)
{
  int   rc;

  WitParlex::setFileName (fileName);   // save current file name
  yyin = f;                            // save pointer to FILE

  myProblem_   = theProblem;
  theSymTable_ = new WitSymTable (theProblem->myWitRun ());
  rc           = theSymTable_->registerRules ();

  if (rc)
     return rc;

  //#if defined (WIN32) or defined (__OS2__)

  //  yy_reset();

  //#endif

  rc = yyparse();

  if (rc)
  {
    WitParser::instance ()->prtSyntaxError(entryPtr,
       WitParser::instance ()->parseState(),
      reinterpret_cast <const char *> (yytext));
    WitParser::instance ()->myMsgFac () ("lineNumberMsg",
      reinterpret_cast <const char *> (yytext),
      WitParlex::lineno(), WitParlex::fileName());
    WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
  }

  delete theSymTable_;
  return rc;
}

@


1.14
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d139 14
a154 9
 *     (c) Copyright IBM Corp. 2006.
 *     (Unpublished)
 *     OCO Source Modules
 *     IBM Confidential
 *
 *------------------------------------------------------------------------------

 *------------------------------------------------------------------------------
 *
d256 1
a256 1
#line 94 "../src/witParse.y"
d267 1
a267 1
#line 263 "witParse.tab.c"
d280 1
a280 1
#line 276 "witParse.tab.c"
d591 9
a599 9
       0,   141,   141,   144,   145,   148,   157,   166,   178,   181,
     177,   192,   208,   215,   207,   246,   258,   277,   276,   299,
     298,   311,   347,   354,   361,   368,   375,   382,   390,   394,
     393,   456,   463,   464,   512,   513,   516,   573,   605,   607,
     610,   613,   651,   703,   707,   710,   713,   716,   721,   746,
     751,   720,   761,   785,   760,   796,   819,   795,   830,   831,
     839,   837,   850,   851,   854,   955,   972,   971,   996,  1023,
    1050,  1077,  1078,  1087,  1086,  1109,  1120,  1131,  1144,  1152,
    1157,  1143,  1194
d1584 1
a1584 1
#line 149 "../src/witParse.y"
d1595 1
a1595 1
#line 158 "../src/witParse.y"
d1606 1
a1606 1
#line 167 "../src/witParse.y"
d1618 1
a1618 1
#line 178 "../src/witParse.y"
d1623 1
a1623 1
#line 181 "../src/witParse.y"
d1630 1
a1630 1
#line 186 "../src/witParse.y"
d1638 1
a1638 1
#line 193 "../src/witParse.y"
d1654 1
a1654 1
#line 208 "../src/witParse.y"
d1663 1
a1663 1
#line 215 "../src/witParse.y"
d1691 1
a1691 1
#line 241 "../src/witParse.y"
d1698 1
a1698 1
#line 247 "../src/witParse.y"
d1712 1
a1712 1
#line 259 "../src/witParse.y"
d1731 1
a1731 1
#line 277 "../src/witParse.y"
d1750 1
a1750 1
#line 294 "../src/witParse.y"
d1757 1
a1757 1
#line 299 "../src/witParse.y"
d1766 1
a1766 1
#line 306 "../src/witParse.y"
d1773 1
a1773 1
#line 312 "../src/witParse.y"
d1810 1
a1810 1
#line 348 "../src/witParse.y"
d1819 1
a1819 1
#line 355 "../src/witParse.y"
d1828 1
a1828 1
#line 362 "../src/witParse.y"
d1837 1
a1837 1
#line 369 "../src/witParse.y"
d1846 1
a1846 1
#line 376 "../src/witParse.y"
d1855 1
a1855 1
#line 383 "../src/witParse.y"
d1864 1
a1864 1
#line 394 "../src/witParse.y"
d1926 1
a1926 1
#line 457 "../src/witParse.y"
d1934 1
a1934 1
#line 465 "../src/witParse.y"
d1983 1
a1983 1
#line 517 "../src/witParse.y"
d2042 1
a2042 1
#line 574 "../src/witParse.y"
d2075 1
a2075 1
#line 614 "../src/witParse.y"
d2114 1
a2114 1
#line 652 "../src/witParse.y"
d2168 1
a2168 1
#line 704 "../src/witParse.y"
d2173 1
a2173 1
#line 708 "../src/witParse.y"
d2178 1
a2178 1
#line 711 "../src/witParse.y"
d2183 1
a2183 1
#line 714 "../src/witParse.y"
d2188 1
a2188 1
#line 717 "../src/witParse.y"
d2193 1
a2193 1
#line 721 "../src/witParse.y"
d2220 1
a2220 1
#line 746 "../src/witParse.y"
d2227 1
a2227 1
#line 751 "../src/witParse.y"
d2234 1
a2234 1
#line 756 "../src/witParse.y"
d2241 1
a2241 1
#line 761 "../src/witParse.y"
d2267 1
a2267 1
#line 785 "../src/witParse.y"
d2274 1
a2274 1
#line 791 "../src/witParse.y"
d2281 1
a2281 1
#line 796 "../src/witParse.y"
d2306 1
a2306 1
#line 819 "../src/witParse.y"
d2313 1
a2313 1
#line 825 "../src/witParse.y"
d2320 1
a2320 1
#line 832 "../src/witParse.y"
d2327 1
a2327 1
#line 839 "../src/witParse.y"
d2334 1
a2334 1
#line 844 "../src/witParse.y"
d2342 1
a2342 1
#line 855 "../src/witParse.y"
d2444 1
a2444 1
#line 956 "../src/witParse.y"
d2461 1
a2461 1
#line 972 "../src/witParse.y"
d2481 1
a2481 1
#line 990 "../src/witParse.y"
d2489 1
a2489 1
#line 997 "../src/witParse.y"
d2518 1
a2518 1
#line 1024 "../src/witParse.y"
d2547 1
a2547 1
#line 1051 "../src/witParse.y"
d2575 1
a2575 1
#line 1081 "../src/witParse.y"
d2582 1
a2582 1
#line 1087 "../src/witParse.y"
d2589 1
a2589 1
#line 1092 "../src/witParse.y"
d2608 1
a2608 1
#line 1110 "../src/witParse.y"
d2621 1
a2621 1
#line 1121 "../src/witParse.y"
d2634 1
a2634 1
#line 1132 "../src/witParse.y"
d2647 1
a2647 1
#line 1144 "../src/witParse.y"
d2657 1
a2657 1
#line 1152 "../src/witParse.y"
d2664 1
a2664 1
#line 1157 "../src/witParse.y"
d2702 1
a2702 1
#line 2698 "witParse.tab.c"
d2916 1
a2916 1
#line 1197 "../src/witParse.y"
@


1.13
log
@Revised the release # to 8.0.
@
text
@d140 37
a176 37
*
*     (c) Copyright IBM Corp. 2011.
*     (Unpublished)
*     OCO Source Modules
*     IBM Confidential
*
*------------------------------------------------------------------------------

*------------------------------------------------------------------------------
*
*     Source file:    witParse.y
*
*     Parser for WIT 4.0 Input Data File Format
*
*     To create an executable parser file:
*
*           yacc -d  witParse.y             (creates y.tab.c and y.tab.h)
*           mv -f y.tab.c witParse.C
*           mv -f y.tab.h ytab.h
*           lex  witLexer.l                 (creates lex.yy.c)
*           mv -f lex.yy.c witLexer.C
*           xlC witLexer.C witParse.C -o witParse -ly -ll
*
*           Notes:
*
*              -d   causes y.tab.h to be created.  This is the token
*                   name definition file.
*
*              -ly  causes the yacc library to be included. This
*                   library is in /usr/lib/liby.a
*
*              -ll  causes the lex library to be included. This
*                   library is in /usr/lib/libl.a
*
*------------------------------------------------------------------------------
*
*/
d206 1
a206 1
void prterror();                     /* print line number and filename */
d208 1
a208 1
/* variables used by the parser */
d216 1
a216 1
WitAttribute::aType   attrType;      /* type of the current attribute */
d221 3
a223 3
//
// Valid WIT release numbers
// (i.e., valid values for the "release" specification)
d227 1
a227 1
const char * checkrel(char *);         /* check for a valid release number */
d253 7
a259 7
int    intval;
double doubleval;
char * strval;
bool   boolval;
int    cval;
int    pval;
int    btype;
d1581 6
a1586 6
delete WitParser::instance ()->currentEntity_;
WitParser::instance ()->currentEntity_ = NULL;
if (WitParser::instance ()->currentAttr_ != NULL)
delete WitParser::instance ()->currentAttr_;
WitParser::instance ()->currentAttr_ = NULL;
;}
d1591 7
a1597 7
    {
delete WitParser::instance ()->currentEntity_;
WitParser::instance ()->currentEntity_ = NULL;
if (WitParser::instance ()->currentAttr_ != NULL)
delete WitParser::instance ()->currentAttr_;
WitParser::instance ()->currentAttr_ = NULL;
;}
d1603 7
a1609 7
if (WitParser::instance ()->currentEntity_ != NULL)
delete WitParser::instance ()->currentEntity_;
WitParser::instance ()->currentEntity_ = NULL;
if (WitParser::instance ()->currentAttr_ != NULL)
delete WitParser::instance ()->currentAttr_;
WitParser::instance ()->currentAttr_ = NULL;
;}
d1620 2
a1621 2
WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
;}
d1627 3
a1629 3
WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
free (yylval.strval);
;}
d1635 1
a1635 1
WitParser::instance ()->myMsgFac () ("invalidRelMsg", yylval.strval);
d1637 1
a1637 1
int i;
d1639 2
a1640 2
for (i = 0; i < NRELS; ++ i)
WitParser::instance ()->myMsgFac () ("validRelSmsg", relnum[i]);
d1642 4
a1645 4
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
;}
d1650 5
a1654 5
    {
WitParser::instance ()->setParseState(WitParser::PS_add);
commandState = WitParser::PS_add;     /* save command state */
WitParser::instance ()->currentRule_ = "add";
;}
d1660 23
a1682 23
/* lookup rule for this entity and save symbol table pointer */
entryPtr = WitParser::instance ()->currentEntity_->
lookupRule(
WitParser::instance ()->theSymTable_,
WitParser::instance ()->currentRule_);

/* Issue error message if no entry found in symbol table */
if (entryPtr == NULL) {
switch (commandState) {
case WitParser::PS_add:
WitParser::instance ()->myMsgFac () ("noParamAddMsg",
WitParser::instance ()->currentEntity_->entityID());
break;
case WitParser::PS_set:
WitParser::instance ()->myMsgFac () ("noParamSetMsg",
WitParser::instance ()->currentEntity_->entityID());
break;
};
WitParser::instance ()->currentEntity_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
;}
d1688 2
a1689 2
WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
;}
d1695 9
a1703 9
// create a WitEntity object
WitParser::instance ()->currentEntity_ =
new WitEntity (
WitParser::instance ()->myProblem (),
yylval.strval,
entityType);
free (yylval.strval);
WitParser::instance ()->currentAttr_ = NULL;
;}
d1709 2
a1710 2
WitParser::instance ()->setParseState(WitParser::PS_partOperation);
WitParser::instance ()->currentRule_ = "add_partWithOperation";
d1712 11
a1722 11
// create a WitEntity object
WitParser::instance ()->currentEntity_ =
new WitEntity (
WitParser::instance ()->myProblem (),
yylval.strval,
WitEntity::partWithOperation);

free (yylval.strval);
WitParser::instance ()->currentAttr_ = NULL;
entityType = WitEntity::partWithOperation;
;}
d1728 2
a1729 2
WitParser::instance ()->setParseState(WitParser::PS_setProblem);
commandState = WitParser::PS_set;     /* save command state */
d1731 8
a1738 8
// create a WitEntity object
WitParser::instance ()->currentEntity_ =
new WitEntity (
WitParser::instance ()->myProblem (),
yylval.strval,
WitEntity::problem);
free (yylval.strval);
WitParser::instance ()->currentAttr_ = NULL;
d1740 2
a1741 2
WitParser::instance ()->currentRule_ = "set_problem";
;}
d1747 2
a1748 2
WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
;}
d1753 5
a1757 5
    {
WitParser::instance ()->setParseState(WitParser::PS_set);
commandState = WitParser::PS_set;     /* save command state */
WitParser::instance ()->currentRule_ = "set";
;}
d1763 2
a1764 2
WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
;}
d1770 32
a1801 32
// create a WitEntity object
WitParser::instance ()->currentEntity_ =
new WitEntity (
WitParser::instance ()->myProblem (),
yylval.strval,
entityType);
free (yylval.strval);
WitParser::instance ()->currentAttr_ = NULL;

/* lookup rule for this entity and save symbol table pointer */
entryPtr = WitParser::instance ()->currentEntity_->
lookupRule (
WitParser::instance ()->theSymTable_,
WitParser::instance ()->currentRule_);

/* Issue error message if no entry found in symbol table */
if (entryPtr == NULL) {
switch (commandState) {
case WitParser::PS_add:
WitParser::instance ()->myMsgFac () ("noParamAddMsg",
WitParser::instance ()->currentEntity_->entityID());
break;
case WitParser::PS_set:
WitParser::instance ()->myMsgFac () ("noParamSetMsg",
WitParser::instance ()->currentEntity_->entityID());
break;
};
WitParser::instance ()->currentEntity_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
;}
d1807 4
a1810 4
WitParser::instance ()->setParseState(WitParser::PS_part);
WitParser::instance ()->currentRule_ += "_part";
entityType = WitEntity::part;
;}
d1816 4
a1819 4
WitParser::instance ()->setParseState(WitParser::PS_operation);
WitParser::instance ()->currentRule_ += "_operation";
entityType = WitEntity::operation;
;}
d1825 4
a1828 4
WitParser::instance ()->setParseState(WitParser::PS_bomEntry);
WitParser::instance ()->currentRule_ += "_bomEntry";
entityType = WitEntity::bomEntry;
;}
d1834 4
a1837 4
WitParser::instance ()->setParseState(WitParser::PS_subEntry);
WitParser::instance ()->currentRule_ += "_subEntry";
entityType = WitEntity::subEntry;
;}
d1843 4
a1846 4
WitParser::instance ()->setParseState(WitParser::PS_bopEntry);
WitParser::instance ()->currentRule_ += "_bopEntry";
entityType = WitEntity::bopEntry;
;}
d1852 4
a1855 4
WitParser::instance ()->setParseState(WitParser::PS_demand);
WitParser::instance ()->currentRule_ += "_demand";
entityType = WitEntity::demand;
;}
d1861 57
a1917 57
/*------------------------------------------------------*
* we have created the entity object and the argument   *
* vector; we also know the current rule; if there is   *
* an entry for the rule, then invoke the function.     *
*------------------------------------------------------*/

if (entryPtr != NULL) {
/* before invoking the function, check the validity of the arguments */
/* by comparing the arg. types against the types in the symbol table */

retcode = WitParser::instance ()->currentEntity_->checkArgs(entryPtr);
if (retcode == BAD_NUM_ARGS) {
if (entryPtr->nparms() == 1)
s2 = "argument";
else s2 = "arguments";
if (WitParser::instance ()->currentEntity()->argc() == 1)
s3 = "was found";
else s3 = "were found";

s1 = "";
if (commandState == WitParser::PS_add)
s1 = "add ";
if (commandState == WitParser::PS_set)
s1 = "set ";

WitParser::instance ()->myMsgFac () ("incorrectNumberArgMsg",
s1,
WitParser::instance ()->currentEntity_->entityID(),
entryPtr->nparms(),
s2,
WitParser::instance ()->currentEntity()->argc(),
s3);

WitParser::instance ()->currentEntity_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
else
if (retcode) {
WitParser::instance ()->currentEntity_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}

else                                    /* if arguments O.K.  */
if (entryPtr->func() != NULL) {         /* if function exists */

/* if entity has been invalidated because of an error,      */
/* then, skip invocations of API functions for the entity   */
if (!WitParser::instance ()->currentEntity_->invalid())
(entryPtr->func())();               /* invoke function */
}
};

WitParser::instance ()->previousRule_ =
WitParser::instance ()->currentRule_.replace(0, 3, "set");
;}
d1922 4
a1925 4
    {
if (WitParser::instance ()->parseState() == WitParser::PS_part)
(yyval.cval) = (yyvsp[(1) - (1)].cval);
;}
d1931 1
a1931 1
WitParser::instance ()->setParseState(WitParser::PS_nextAttr);
d1933 2
a1934 2
/* If an entry exists for the current rule, then invoke   */
/* the function.                                          */
d1936 39
a1974 39
if (entryPtr == NULL) {
WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
WitParser::instance ()->currentAttr_->attrID(),
WitParser::instance ()->currentEntity_->entityID());
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
else
{
retcode = WitParser::instance ()->currentAttr_->checkArgs(entryPtr);
if (retcode == PERIOD_ERROR) {
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
}
else
if (retcode) {
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
else
if (entryPtr->func() != NULL) {        /* if function exists  */

/* if entity or attr has been invalidated because of error, */
/* then, skip invocations of API function for attributes    */
if (!WitParser::instance ()->currentEntity_->invalid() and
!WitParser::instance ()->currentAttr_->invalid())
retcode = (entryPtr->func())();    /* invoke wrapper function */
if (retcode) {
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
};
}
};

WitParser::instance ()->currentRule_ =
WitParser::instance ()->previousRule_;
;}
d1980 54
a2033 54
WitParser::instance ()->setParseState(WitParser::PS_nextArg);
switch((yyvsp[(1) - (1)].pval)) {
case WitDRParmType::intScalar:
argPtr =
WitParser::instance ()->currentEntity_->setIntArg(yylval.intval);
break;
case WitDRParmType::doubleScalar:
argPtr =
WitParser::instance ()->currentEntity_->
setDoubleArg(yylval.doubleval);
break;
case WitDRParmType::boolScalar:
argPtr = WitParser::instance ()->currentEntity_->
setBoolArg(yylval.boolval);
break;
case WitDRParmType::string:
argPtr =
WitParser::instance ()->currentEntity_->
setStringArg(yylval.strval);

/* string was created by the lexer and it's no longer needed */
free (yylval.strval);
break;
default:
return 0;
};
if (argPtr == NULL) {
s1 = "";
if (commandState == WitParser::PS_add)
s1 = "add ";
if (commandState == WitParser::PS_set)
s1 = "set ";

/* if rule is not defined in symbol table, skip message now. */
/* However, error message will be issued after all arguments */
/* are processed.  We don't know the correct number of args. */

if (entryPtr != NULL) {
if (entryPtr->nparms() == 1)
s2 = "argument is";
else s2 = "arguments are";

WitParser::instance ()->myMsgFac () ("tooManyArgsMsg",
s1,
WitParser::instance ()->currentEntity_->entityID(),
entryPtr->nparms(),
s2);

WitParser::instance ()->currentEntity_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
}
;}
d2039 28
a2066 28
WitParser::instance ()->setParseState(WitParser::PS_nextArg);
argPtr = WitParser::instance ()->currentEntity_->
setCatArg (static_cast <WitDRPartCat::Tag> (yylval.cval));
if (argPtr == NULL) {
s1 = "";
if (commandState == WitParser::PS_add)
s1 = "add ";
if (commandState == WitParser::PS_set)
s1 = "set ";

/* If rule is not defined, skip message. See comment above */
if (entryPtr != NULL) {
if (entryPtr->nparms() == 1)
s2 = "argument is";
else s2 = "arguments are";

WitParser::instance ()->myMsgFac () ("tooManyArgsMsg",
s1,
WitParser::instance ()->currentEntity_->entityID(),
entryPtr->nparms(),
s2);

WitParser::instance ()->currentEntity_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
}
;}
d2072 31
a2102 31
WitParser::instance ()->setParseState(WitParser::PS_attr);
WitParser::instance ()->previousRule_ =
WitParser::instance ()->currentRule_.replace(0, 3, "set");

WitParser::instance ()->currentRule_ += "_";
WitParser::instance ()->currentRule_ += yylval.strval;

/* create a new WitAttribute object */
if (WitParser::instance ()->currentAttr_ != NULL)
delete WitParser::instance ()->currentAttr_;
WitParser::instance ()->currentAttr_ =
new WitAttribute (WitParser::instance ()->myProblem (), yylval.strval);

free (yylval.strval);

/* lookup rule for this attribute and save symbol table pointer */
/* this will be helpful to check the datatype of a vector       */
entryPtr = WitParser::instance ()->currentAttr_->
lookupRule(WitParser::instance ()->theSymTable_,
WitParser::instance ()->currentRule_);

/* if attribute name is not in the symbol table, we can't       */
/* continue because we don't know the expected argument types   */
if (entryPtr == NULL) {
WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
WitParser::instance ()->currentAttr_->attrID(),
WitParser::instance ()->currentEntity_->entityID());
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
d2104 2
a2105 2
(yyval.strval) = (yyvsp[(1) - (1)].strval);
;}
d2111 49
a2159 49
switch((yyvsp[(1) - (1)].pval)) {
case WitDRParmType::intScalar:
argPtr =
WitParser::instance ()->currentAttr_->setIntArg(yylval.intval);
break;
case WitDRParmType::doubleScalar:
argPtr =
WitParser::instance ()->currentAttr_->setDoubleArg(
yylval.doubleval);
break;
case WitDRParmType::boolScalar:
argPtr = WitParser::instance ()->currentAttr_->
setBoolArg(yylval.boolval);
break;
case WitDRParmType::string:
argPtr =
WitParser::instance ()->currentAttr_->setStringArg(yylval.strval);

/* string was created by the lexer and it's no longer needed */
free (yylval.strval);
break;
default:
return 0;
};

if (argPtr == NULL) {
s1 = "";
if (commandState == WitParser::PS_add)
s1 = "add ";
if (commandState == WitParser::PS_set)
s1 = "set ";

if (entryPtr != NULL) {
if (entryPtr->nparms() == 1)
s2 = "argument is";
else s2 = "arguments are";

WitParser::instance ()->myMsgFac () ("tooManyArgsMsg",
s1,
WitParser::instance ()->currentAttr_->attrID(),
entryPtr->nparms(),
s2);

WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
}
;}
d2190 1
a2190 1
WitParser::instance ()->setParseState(WitParser::PS_single);
d2192 9
a2200 9
// Construct a VectorSpec object
if (WitParser::instance ()->currentAttr_->attrType() ==
WitAttribute::simple) {
if (entryPtr != NULL) {
vecPtr =
new WitVectorSpec (
WitParser::instance ()->myProblem (),
WitVectorSpec::single_,
entryPtr->parmTypes()[0]);
d2202 10
a2211 10
argPtr = WitParser::instance ()->currentAttr_->setVectorArg(vecPtr);
}
}
else
vecPtr =
new WitVectorSpec (
WitParser::instance ()->myProblem (),
WitVectorSpec::single_,
WitDRParmType::doubleVector);
;}
d2217 2
a2218 2
WitParser::instance ()->setParseState(WitParser::PS_singleParen);
;}
d2224 2
a2225 2
WitParser::instance ()->setParseState(WitParser::PS_singleValue);
;}
d2231 2
a2232 2
WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
;}
d2238 1
a2238 1
WitParser::instance ()->setParseState(WitParser::PS_sparse);
d2240 19
a2258 19
/* Construct a VectorSpec object */
if (WitParser::instance ()->currentAttr_->attrType() ==
WitAttribute::simple) {
if (entryPtr != NULL) {
vecPtr =
new WitVectorSpec (
WitParser::instance ()->myProblem (),
WitVectorSpec::sparse_,
entryPtr->parmTypes()[0]);
argPtr = WitParser::instance ()->currentAttr_->setVectorArg(vecPtr);
}
}
else
vecPtr =
new WitVectorSpec (
WitParser::instance ()->myProblem (),
WitVectorSpec::sparse_,
WitDRParmType::doubleVector);
;}
d2264 2
a2265 2
WitParser::instance ()->setParseState(WitParser::PS_sparseParen);
;}
d2271 2
a2272 2
WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
;}
d2278 1
a2278 1
WitParser::instance ()->setParseState(WitParser::PS_dense);
d2280 18
a2297 18
// Construct a VectorSpec object
if (WitParser::instance ()->currentAttr_->attrType() ==
WitAttribute::simple) {
if (entryPtr != NULL) {
vecPtr =
new WitVectorSpec (WitParser::instance ()->myProblem (),
WitVectorSpec::dense_,
entryPtr->parmTypes()[0]);
argPtr = WitParser::instance ()->currentAttr_->setVectorArg(vecPtr);
}
}
else
vecPtr =
new WitVectorSpec (
WitParser::instance ()->myProblem (),
WitVectorSpec::dense_,
WitDRParmType::doubleVector);
;}
d2303 2
a2304 2
WitParser::instance ()->setParseState(WitParser::PS_denseParen);
;}
d2310 2
a2311 2
WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
;}
d2317 2
a2318 2
WitParser::instance ()->setParseState(WitParser::PS_sparseValue);
;}
d2324 2
a2325 2
WitParser::instance ()->setParseState(WitParser::PS_periodColon);
;}
d2330 4
a2333 4
    {
WitParser::instance ()->setParseState(WitParser::PS_sparseParen);
(yyval.pval) = (yyvsp[(4) - (4)].pval);
;}
d2339 1
a2339 1
WitParser::instance ()->setParseState(WitParser::PS_denseValue);
d2341 2
a2342 2
if (entryPtr != NULL) {
switch((yyvsp[(1) - (1)].pval)) {
d2344 73
a2416 4
case WitDRParmType::intScalar:
if (entryPtr->parmTypes()[0] == WitDRParmType::doubleVector) {
retcode =
vecPtr->addDoubleVal(static_cast <double> (yylval.intval));
d2418 18
a2435 87
break;
};
if (entryPtr->parmTypes()[0] == WitDRParmType::intVector) {
retcode = vecPtr->addIntVal(yylval.intval);
break;
};
if (entryPtr->parmTypes()[0] == WitDRParmType::boundSet) {
retcode =
vecPtr->addDoubleVal(static_cast <double> (yylval.intval));
break;
}
else {
retcode = WRONG_TYPE;
break;
};

case WitDRParmType::doubleScalar:
if (entryPtr->parmTypes()[0] == WitDRParmType::intVector) {
vecPtr->addIntVal(static_cast <int> (yylval.doubleval));
retcode = SHOULD_BE_INT;
break;
};
if (entryPtr->parmTypes()[0] == WitDRParmType::doubleVector) {
retcode = vecPtr->addDoubleVal(yylval.doubleval);
break;
};
if (entryPtr->parmTypes()[0] == WitDRParmType::boundSet) {
retcode = vecPtr->addDoubleVal(yylval.doubleval);
break;
}
else {
retcode = WRONG_TYPE;
break;
};

case WitDRParmType::boolScalar:
{
if (entryPtr->parmTypes()[0] == WitDRParmType::boolVector)
{
retcode = vecPtr->addBoolVal (yylval.boolval);

break;
};

WitParser::instance ()->myMsgFac () ("booleanVectorMsg",
WitParser::instance ()->currentAttr_->attrID ());

WitParser::instance ()->currentAttr_->setInvalid (true);

prterror ();

retcode = 0;

WitParser::instance ()->myMsgFac () ("parsingStopsMsg");

break;
}

case WitDRParmType::string:
WitParser::instance ()->myMsgFac () ("stringVectorMsg",
WitParser::instance ()->currentAttr_->attrID());
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
free (yylval.strval);
retcode = 0;
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
break;
}

if (retcode == WRONG_TYPE) {
WitParser::instance ()->myMsgFac () ("vecTypeNotValidMsg",
WitParser::instance ()->currentAttr_->attrID());
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
retcode = 0;
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
if (retcode == SHOULD_BE_INT) {
WitParser::instance ()->myMsgFac () ("vecValueNotIntMsg",
WitParser::instance ()->currentAttr_->attrID());
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
retcode = 0;
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
}
;}
d2441 1
a2441 1
WitParser::instance ()->setParseState(WitParser::PS_period);
d2443 10
a2452 10
retcode = vecPtr->addPeriodVal(yylval.intval);
if (retcode == PERIOD_ERROR) {
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
}
if (retcode == PERIOD_DUP) {
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
}
;}
d2457 16
a2472 16
    {
/* lookup rule for this attribute and save symbol table pointer */
entryPtr = WitParser::instance ()->currentAttr_->
lookupRule (
WitParser::instance ()->theSymTable_,
WitParser::instance ()->currentRule_);

if (entryPtr == NULL) {
WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
WitParser::instance ()->currentAttr_->attrID(),
WitParser::instance ()->currentEntity_->entityID());
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
;}
d2478 3
a2480 3
bndPtr = NULL;
WitParser::instance ()->setParseState(WitParser::PS_endBounds);
;}
d2486 1
a2486 1
WitParser::instance ()->setParseState(WitParser::PS_nextBound);
d2488 2
a2489 2
// Construct a BoundSetSpec object
bndPtr = new WitBoundSetSpec(WitBoundSetSpec::exec);
d2491 19
a2509 19
WitParser::instance ()->previousRule_ =
WitParser::instance ()->currentRule_.replace(0, 3, "set");
WitParser::instance ()->currentRule_ += "_";
WitParser::instance ()->currentRule_ += yylval.strval;

/* create a new WitAttribute object */
if (WitParser::instance ()->currentAttr_ != NULL)
delete WitParser::instance ()->currentAttr_;
WitParser::instance ()->currentAttr_ =
new WitAttribute (
WitParser::instance ()->myProblem (),
yylval.strval,
WitAttribute::boundSet);

argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

free (yylval.strval);
(yyval.strval) = (yyvsp[(1) - (1)].strval);
;}
d2514 2
a2515 2
    {
WitParser::instance ()->setParseState(WitParser::PS_nextBound);
d2517 2
a2518 2
// Construct a BoundSetSpec object
bndPtr = new WitBoundSetSpec(WitBoundSetSpec::stock);
d2520 19
a2538 19
WitParser::instance ()->previousRule_ =
WitParser::instance ()->currentRule_.replace(0, 3, "set");
WitParser::instance ()->currentRule_ += "_";
WitParser::instance ()->currentRule_ += yylval.strval;

/* create a new WitAttribute object */
if (WitParser::instance ()->currentAttr_ != NULL)
delete WitParser::instance ()->currentAttr_;
WitParser::instance ()->currentAttr_ =
new WitAttribute (
WitParser::instance ()->myProblem (),
yylval.strval,
WitAttribute::boundSet);

argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

free (yylval.strval);
(yyval.strval) = (yyvsp[(1) - (1)].strval);
;}
d2544 1
a2544 1
WitParser::instance ()->setParseState(WitParser::PS_nextBound);
d2546 2
a2547 2
// Construct a BoundSetSpec object
bndPtr = new WitBoundSetSpec(WitBoundSetSpec::cumShip);
d2549 18
a2566 18
WitParser::instance ()->previousRule_ =
WitParser::instance ()->currentRule_.replace(0, 3, "set");
WitParser::instance ()->currentRule_ += "_";
WitParser::instance ()->currentRule_ += yylval.strval;

/* create a new WitAttribute object */
if (WitParser::instance ()->currentAttr_ != NULL)
delete WitParser::instance ()->currentAttr_;
WitParser::instance ()->currentAttr_ =
new WitAttribute (
WitParser::instance ()->myProblem (),
yylval.strval,
WitAttribute::boundSet);
argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

free (yylval.strval);
(yyval.strval) = (yyvsp[(1) - (1)].strval);
;}
d2572 2
a2573 2
WitParser::instance ()->setParseState(WitParser::PS_nextBound);
;}
d2579 2
a2580 2
WitParser::instance ()->setParseState(WitParser::PS_boundType);
;}
d2586 14
a2599 14
switch ((yyvsp[(1) - (3)].btype)) {
case WitBoundSetSpec::hardlb:
bndPtr->setHardLBVec(vecPtr);
break;

case WitBoundSetSpec::softlb:
bndPtr->setSoftLBVec(vecPtr);
break;

case WitBoundSetSpec::hardub:
bndPtr->setHardUBVec(vecPtr);
break;
}
;}
d2605 8
a2612 8
if (bndPtr->hardLBVec() != NULL) {
WitParser::instance ()->myMsgFac () ("duplicateHardLBMsg",
WitParser::instance ()->currentAttr_->attrID());
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
};
(yyval.btype) = WitBoundSetSpec::hardlb;
;}
d2618 8
a2625 8
if (bndPtr->softLBVec() != NULL) {
WitParser::instance ()->myMsgFac () ("duplicateSoftLBMsg",
WitParser::instance ()->currentAttr_->attrID());
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
};
(yyval.btype) = WitBoundSetSpec::softlb;
;}
d2631 8
a2638 8
if (bndPtr->hardUBVec() != NULL) {
WitParser::instance ()->myMsgFac () ("duplicateHardUBMsg",
WitParser::instance ()->currentAttr_->attrID());
WitParser::instance ()->currentAttr_->setInvalid(true);
prterror();
};
(yyval.btype) = WitBoundSetSpec::hardub;
;}
d2644 5
a2648 5
WitParser::instance ()->setParseState(WitParser::PS_read);
commandState = WitParser::PS_read;
WitParser::instance ()->currentRule_ = "read";
// printf("Current rule is: %s\n", WitParser::instance ()->currentRule_);
;}
d2654 2
a2655 2
WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
;}
d2661 13
a2673 13
/* save lexer state and shift input stream to new file */
errno   = 0;
retcode = WitParlex::saveFile(yylval.strval);
if (retcode == FOPEN_ERROR) {
yylval.strval[strlen(yylval.strval)-1] = '\0';
WitParser::instance ()->myMsgFac () ("fopenSmsg",
yylval.strval+1,
"r",
errno,
strerror(errno));
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
d2675 5
a2679 5
if (retcode == STACK_OVERFLOW) {
WitParser::instance ()->myMsgFac () ("stackOverflowMsg", STACKSIZE);
prterror();
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
d2683 2
a2684 2
WitParser::instance ()->setDataFileName   ();
WitParser::instance ()->setDataFileLineNo ();
d2686 7
a2692 7
//#if defined (__GNUC__)
yyrestart(yyin);
//#endif

WitParser::instance ()->setParseState(WitParser::PS_initial);
free (yylval.strval);
;}
d2921 2
a2922 2
{
witAssert (instance_ == NULL);
d2924 1
a2924 1
instance_ = new WitParser;
d2926 1
a2926 1
instance ()->parseIt (theProblem, fileName, f);
d2928 1
a2928 1
delete instance ();
d2930 2
a2931 2
instance_ = NULL;
}
d2947 3
a2949 3
{
return myProblem ()->myMsgFac ();
}
d2957 3
a2959 3
WitParser::instance ()->myMsgFac () ("lineNumberMsg",
reinterpret_cast <const char *> (yytext),
WitParlex::lineno(), WitParlex::fileName());
d2962 1
a2962 1
//  check for a valid release number
d2965 5
a2969 5
if (strlen(s) <= 2) return NULL;
for (int i = 0; i < NRELS; i++)
if (strncmp(s+1, relnum[i], strlen(s)-2) == 0)
return relnum[i];
return NULL;
d3018 1
a3018 1
WitParser::PS parseState, const char * yytext) const
d3020 1
a3020 1
const char * s1;
d3022 201
a3222 201
// Print syntax error message, depending on current parser state
switch (parseState) {
case WitParser::PS_initial:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"\"release\"", yytext);
break;
case WitParser::PS_commandEnd:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg", "a \";\"", yytext);
break;
case WitParser::PS_nextCommand:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a command name (e.g., set, add, read)", yytext);
break;
case WitParser::PS_add:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"the name of an addable object type after \"add\"", yytext);
break;
case WitParser::PS_set:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"the name of a settable object type after \"set\"", yytext);
break;
case WitParser::PS_setProblem:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"the name of an attribute after \"set problem\"", yytext);
break;
case WitParser::PS_read:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a string (the name of a file) after \"read\"", yytext);
break;
case WitParser::PS_release:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a quoted string (the release number) after \"release\"", yytext);
break;
case WitParser::PS_part:
if (pEntry->nparms() == 1)
s1 = "argument";
else
s1 = "arguments";
WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
"part", yytext);
break;
case WitParser::PS_operation:
if (pEntry->nparms() == 1)
s1 = "argument";
else
s1 = "arguments";
WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
"operation", yytext);
break;
case WitParser::PS_bomEntry:
if (pEntry->nparms() == 1)
s1 = "argument";
else
s1 = "arguments";
WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
"bomEntry", yytext);
break;
case WitParser::PS_subEntry:
if (pEntry->nparms() == 1)
s1 = "argument";
else
s1 = "arguments";
WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
"subEntry", yytext);
break;
case WitParser::PS_bopEntry:
if (pEntry->nparms() == 1)
s1 = "argument";
else
s1 = "arguments";
WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
"bopEntry", yytext);
break;
case WitParser::PS_demand:
if (pEntry->nparms() == 1)
s1 = "argument";
else
s1 = "arguments";
WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
"demand", yytext);
break;
case WitParser::PS_partOperation:
if (pEntry->nparms() == 1)
s1 = "argument";
else
s1 = "arguments";
WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
"partWithOperation", yytext);
break;
case WitParser::PS_nextArg:

// Check to see if we have the correct number of argumenta.
// If so, we are looking for an attribute or a semicolon
if (WitParser::instance ()->currentEntity()->argc() >= pEntry->nparms()) {
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"the name of an attribute or a \";\"", yytext);
break;
};

WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"another argument",
yytext);
break;
case WitParser::PS_attr:
switch (pEntry->parmTypes()[0]) {   // what the value should be
case WitDRParmType::intScalar:
s1 = "integer";
break;
case WitDRParmType::doubleScalar:
s1 = "double";
break;
case WitDRParmType::string:
s1 = "string";
break;
case WitDRParmType::boolScalar:
s1 = "boolean";
break;
case WitDRParmType::partCat:
s1 = "\"category\"";
break;
case WitDRParmType::boolVector:
s1 = "\"boolean vector\"";
break;
case WitDRParmType::intVector:
s1 = "\"integer vector\"";
break;
case WitDRParmType::doubleVector:
s1 = "\"double vector\"";
break;
case WitDRParmType::boundSet:
s1 = "\"bound set\"";
break;
default:
s1 = "unknown";
break;
};
WitParser::instance ()->myMsgFac () ("attrValueNotFound",
s1, WitParser::instance ()->currentAttr()->attrID(), yytext);
break;
case WitParser::PS_nextAttr:
case WitParser::PS_endBounds:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"the name of an attribute or a \";\"", yytext);
break;
case WitParser::PS_nextBound:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a bound set attribute (e.g., softLB, hardLB, hardUB)"
" or \"endBounds\"", yytext);
break;
case WitParser::PS_boundType:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a vector format (e.g, single, dense, sparse)", yytext);
break;
case WitParser::PS_single:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a \"(\" after \"single\"", yytext);
break;
case WitParser::PS_dense:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a \"(\" after \"dense\"", yytext);
break;
case WitParser::PS_sparse:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a \"(\" after \"sparse\"", yytext);
break;
case WitParser::PS_singleParen:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a vector element for a \"single\" vector specification",
yytext);
break;
case WitParser::PS_denseParen:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a vector element for a \"dense\" vector specification",
yytext);
break;
case WitParser::PS_sparseParen:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a period (an integer) in \"sparse\" vector specification", yytext);
break;
case WitParser::PS_singleValue:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a \")\" after the one vector value in a \"single\" vector "
"specification", yytext);
break;
case WitParser::PS_denseValue:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a vector value or a \")\"", yytext);
break;
case WitParser::PS_sparseValue:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a period (an integer) or a \")\"", yytext);
break;
case WitParser::PS_period:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a \":\" in \"sparse\" vector specification", yytext);
break;
case WitParser::PS_periodColon:
WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
"a vector value (a number) after the \":\"", yytext);
break;
}
d3228 3
a3230 3
{
myProblem ()->myApiMgr ()->myInputID ()->setDataFileName (fileName ());
}
d3235 3
a3237 3
{
myProblem ()->myApiMgr ()->myInputID ()->setDataFileLineNo (lineno ());
}
d3244 10
a3253 10
theSymTable_   (NULL),
currentRule_   (),
previousRule_  (),
currentEntity_ (NULL),
currentAttr_   (NULL),
parseState_    (PS_initial),
myProblem_     (NULL)
{
commandState = PS_initial;
}
d3256 2
a3257 2
{
}
d3264 1
a3264 1
int   rc;
d3266 2
a3267 2
WitParlex::setFileName (fileName);   // save current file name
yyin = f;                            // save pointer to FILE
d3269 3
a3271 3
myProblem_   = theProblem;
theSymTable_ = new WitSymTable (theProblem->myWitRun ());
rc           = theSymTable_->registerRules ();
d3273 2
a3274 2
if (rc)
return rc;
d3276 1
a3276 1
//#if defined (WIN32) or defined (__OS2__)
d3278 1
a3278 1
//  yy_reset();
d3280 1
a3280 1
//#endif
d3282 1
a3282 1
rc = yyparse();
d3284 10
a3293 10
if (rc)
{
WitParser::instance ()->prtSyntaxError(entryPtr,
WitParser::instance ()->parseState(),
reinterpret_cast <const char *> (yytext));
WitParser::instance ()->myMsgFac () ("lineNumberMsg",
reinterpret_cast <const char *> (yytext),
WitParlex::lineno(), WitParlex::fileName());
WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
}
d3295 2
a3296 2
delete theSymTable_;
return rc;
@


1.12
log
@Revised the copyright date.
@
text
@d220 1
a220 1
const char * relnum[] = {"4.0", "5.0", "6.0", "7.0"};
@


1.11
log
@Corrected an incorrect error message.
@
text
@d140 37
a176 37
 *
 *     (c) Copyright IBM Corp. 2006.
 *     (Unpublished)
 *     OCO Source Modules
 *     IBM Confidential
 *
 *------------------------------------------------------------------------------

 *------------------------------------------------------------------------------
 *
 *     Source file:    witParse.y
 *
 *     Parser for WIT 4.0 Input Data File Format
 *
 *     To create an executable parser file:
 *
 *           yacc -d  witParse.y             (creates y.tab.c and y.tab.h)
 *           mv -f y.tab.c witParse.C
 *           mv -f y.tab.h ytab.h
 *           lex  witLexer.l                 (creates lex.yy.c)    
 *           mv -f lex.yy.c witLexer.C
 *           xlC witLexer.C witParse.C -o witParse -ly -ll
 *    
 *           Notes:
 *           
 *              -d   causes y.tab.h to be created.  This is the token
 *                   name definition file.
 *
 *              -ly  causes the yacc library to be included. This 
 *                   library is in /usr/lib/liby.a
 *
 *              -ll  causes the lex library to be included. This
 *                   library is in /usr/lib/libl.a      
 *
 *------------------------------------------------------------------------------
 *
 */
d206 1
a206 1
void prterror();                     /* print line number and filename */ 
d208 1
a208 1
    /* variables used by the parser */
d216 1
a216 1
WitAttribute::aType   attrType;      /* type of the current attribute */  
d221 3
a223 3
   //
   // Valid WIT release numbers
   // (i.e., valid values for the "release" specification)
d227 1
a227 1
const char * checkrel(char *);         /* check for a valid release number */   
d253 7
a259 7
    int    intval;
    double doubleval;
    char * strval;
    bool   boolval;
    int    cval;
    int    pval;
    int    btype;
d1581 6
a1586 6
      delete WitParser::instance ()->currentEntity_;
      WitParser::instance ()->currentEntity_ = NULL;
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ = NULL;
    ;}
d1591 7
a1597 7
    { 
      delete WitParser::instance ()->currentEntity_;
      WitParser::instance ()->currentEntity_ = NULL;
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ = NULL;
    ;}
d1603 7
a1609 7
      if (WitParser::instance ()->currentEntity_ != NULL)
        delete WitParser::instance ()->currentEntity_;
      WitParser::instance ()->currentEntity_ = NULL;
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ = NULL;
    ;}
d1620 2
a1621 2
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
d1627 3
a1629 3
      WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
      free (yylval.strval);     
    ;}
d1635 1
a1635 1
         WitParser::instance ()->myMsgFac () ("invalidRelMsg", yylval.strval);
d1637 1
a1637 1
         int i;
d1639 2
a1640 2
         for (i = 0; i < NRELS; ++ i)
            WitParser::instance ()->myMsgFac () ("validRelSmsg", relnum[i]);
d1642 4
a1645 4
         prterror();
         WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
    ;}
d1650 5
a1654 5
    { 
      WitParser::instance ()->setParseState(WitParser::PS_add);
      commandState = WitParser::PS_add;     /* save command state */
      WitParser::instance ()->currentRule_ = "add";
    ;}
d1660 23
a1682 23
      /* lookup rule for this entity and save symbol table pointer */
      entryPtr = WitParser::instance ()->currentEntity_->
        lookupRule(
           WitParser::instance ()->theSymTable_,
           WitParser::instance ()->currentRule_);

      /* Issue error message if no entry found in symbol table */
      if (entryPtr == NULL) {
        switch (commandState) {
          case WitParser::PS_add:
            WitParser::instance ()->myMsgFac () ("noParamAddMsg",
              WitParser::instance ()->currentEntity_->entityID());
            break;
          case WitParser::PS_set:
            WitParser::instance ()->myMsgFac () ("noParamSetMsg",
              WitParser::instance ()->currentEntity_->entityID());
            break;
        };
        WitParser::instance ()->currentEntity_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
    ;}
d1688 2
a1689 2
      WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
    ;}
d1695 9
a1703 9
      // create a WitEntity object
      WitParser::instance ()->currentEntity_ =
         new WitEntity (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            entityType);
      free (yylval.strval); 
      WitParser::instance ()->currentAttr_ = NULL;
    ;}
d1709 2
a1710 2
      WitParser::instance ()->setParseState(WitParser::PS_partOperation);
      WitParser::instance ()->currentRule_ = "add_partWithOperation";
d1712 11
a1722 11
      // create a WitEntity object
      WitParser::instance ()->currentEntity_ =
         new WitEntity (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitEntity::partWithOperation);

      free (yylval.strval);
      WitParser::instance ()->currentAttr_ = NULL;
      entityType = WitEntity::partWithOperation;
    ;}
d1728 2
a1729 2
      WitParser::instance ()->setParseState(WitParser::PS_setProblem);
      commandState = WitParser::PS_set;     /* save command state */
d1731 8
a1738 8
      // create a WitEntity object
      WitParser::instance ()->currentEntity_ =
         new WitEntity (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitEntity::problem);
      free (yylval.strval);
      WitParser::instance ()->currentAttr_ = NULL;
d1740 2
a1741 2
      WitParser::instance ()->currentRule_ = "set_problem";
    ;}
d1747 2
a1748 2
      WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
    ;}
d1753 5
a1757 5
    { 
      WitParser::instance ()->setParseState(WitParser::PS_set);
      commandState = WitParser::PS_set;     /* save command state */
      WitParser::instance ()->currentRule_ = "set";
    ;}
d1763 2
a1764 2
      WitParser::instance ()->setParseState(WitParser::PS_nextCommand);
    ;}
d1770 32
a1801 32
      // create a WitEntity object
      WitParser::instance ()->currentEntity_ =
         new WitEntity (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            entityType);
      free (yylval.strval);
      WitParser::instance ()->currentAttr_ = NULL;

      /* lookup rule for this entity and save symbol table pointer */
      entryPtr = WitParser::instance ()->currentEntity_->
        lookupRule (
           WitParser::instance ()->theSymTable_,
           WitParser::instance ()->currentRule_);

      /* Issue error message if no entry found in symbol table */
      if (entryPtr == NULL) {
        switch (commandState) {
          case WitParser::PS_add:
            WitParser::instance ()->myMsgFac () ("noParamAddMsg",
              WitParser::instance ()->currentEntity_->entityID());
            break;
          case WitParser::PS_set:
            WitParser::instance ()->myMsgFac () ("noParamSetMsg",
              WitParser::instance ()->currentEntity_->entityID());
            break;
        };
        WitParser::instance ()->currentEntity_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
    ;}
d1807 4
a1810 4
      WitParser::instance ()->setParseState(WitParser::PS_part);
      WitParser::instance ()->currentRule_ += "_part";
      entityType = WitEntity::part;
    ;}
d1816 4
a1819 4
      WitParser::instance ()->setParseState(WitParser::PS_operation);
      WitParser::instance ()->currentRule_ += "_operation";
      entityType = WitEntity::operation;
    ;}
d1825 4
a1828 4
      WitParser::instance ()->setParseState(WitParser::PS_bomEntry);
      WitParser::instance ()->currentRule_ += "_bomEntry";
      entityType = WitEntity::bomEntry;
    ;}
d1834 4
a1837 4
      WitParser::instance ()->setParseState(WitParser::PS_subEntry);
      WitParser::instance ()->currentRule_ += "_subEntry";
      entityType = WitEntity::subEntry;
    ;}
d1843 4
a1846 4
      WitParser::instance ()->setParseState(WitParser::PS_bopEntry);
      WitParser::instance ()->currentRule_ += "_bopEntry";
      entityType = WitEntity::bopEntry;
    ;}
d1852 4
a1855 4
      WitParser::instance ()->setParseState(WitParser::PS_demand);
      WitParser::instance ()->currentRule_ += "_demand";
      entityType = WitEntity::demand;
    ;}
d1861 57
a1917 57
      /*------------------------------------------------------*
       * we have created the entity object and the argument   *
       * vector; we also know the current rule; if there is   *
       * an entry for the rule, then invoke the function.     *
       *------------------------------------------------------*/

      if (entryPtr != NULL) {
        /* before invoking the function, check the validity of the arguments */
        /* by comparing the arg. types against the types in the symbol table */

        retcode = WitParser::instance ()->currentEntity_->checkArgs(entryPtr);
        if (retcode == BAD_NUM_ARGS) {
          if (entryPtr->nparms() == 1)
            s2 = "argument";
          else s2 = "arguments";
          if (WitParser::instance ()->currentEntity()->argc() == 1)
            s3 = "was found";
          else s3 = "were found";

          s1 = "";
          if (commandState == WitParser::PS_add)
            s1 = "add "; 
          if (commandState == WitParser::PS_set)
            s1 = "set ";

          WitParser::instance ()->myMsgFac () ("incorrectNumberArgMsg",
             s1,
             WitParser::instance ()->currentEntity_->entityID(),
             entryPtr->nparms(),
             s2,
             WitParser::instance ()->currentEntity()->argc(),
             s3);

          WitParser::instance ()->currentEntity_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
        else
        if (retcode) {
          WitParser::instance ()->currentEntity_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }

        else                                    /* if arguments O.K.  */
        if (entryPtr->func() != NULL) {         /* if function exists */

          /* if entity has been invalidated because of an error,      */
          /* then, skip invocations of API functions for the entity   */
          if (!WitParser::instance ()->currentEntity_->invalid())
            (entryPtr->func())();               /* invoke function */
        }
      };  

      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
    ;}
d1922 4
a1925 4
    { 
      if (WitParser::instance ()->parseState() == WitParser::PS_part)
      (yyval.cval) = (yyvsp[(1) - (1)].cval);
    ;}
d1931 1
a1931 1
      WitParser::instance ()->setParseState(WitParser::PS_nextAttr);
d1933 2
a1934 2
      /* If an entry exists for the current rule, then invoke   */
      /* the function.                                          */
d1936 39
a1974 39
      if (entryPtr == NULL) {
        WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
          WitParser::instance ()->currentAttr_->attrID(),
          WitParser::instance ()->currentEntity_->entityID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
      else
      {
        retcode = WitParser::instance ()->currentAttr_->checkArgs(entryPtr);
        if (retcode == PERIOD_ERROR) {
           WitParser::instance ()->currentAttr_->setInvalid(true);
           prterror();
        }            
        else
        if (retcode) {
          WitParser::instance ()->currentAttr_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
        else 
        if (entryPtr->func() != NULL) {        /* if function exists  */

          /* if entity or attr has been invalidated because of error, */
          /* then, skip invocations of API function for attributes    */
          if (!WitParser::instance ()->currentEntity_->invalid() and
            !WitParser::instance ()->currentAttr_->invalid())
            retcode = (entryPtr->func())();    /* invoke wrapper function */
            if (retcode) {
              WitParser::instance ()->currentAttr_->setInvalid(true);
              prterror();
            }; 
        } 
      };                   

      WitParser::instance ()->currentRule_ =
         WitParser::instance ()->previousRule_;
    ;}
d1980 54
a2033 54
      WitParser::instance ()->setParseState(WitParser::PS_nextArg);
      switch((yyvsp[(1) - (1)].pval)) {
        case WitDRParmType::intScalar:
          argPtr =
             WitParser::instance ()->currentEntity_->setIntArg(yylval.intval);
          break;
        case WitDRParmType::doubleScalar:
          argPtr =
             WitParser::instance ()->currentEntity_->
                setDoubleArg(yylval.doubleval);
          break;
        case WitDRParmType::boolScalar:
          argPtr = WitParser::instance ()->currentEntity_->
            setBoolArg(yylval.boolval);
          break;
        case WitDRParmType::string:
          argPtr =
             WitParser::instance ()->currentEntity_->
                setStringArg(yylval.strval);

          /* string was created by the lexer and it's no longer needed */
          free (yylval.strval);
          break;
        default:
          return 0;
      };
      if (argPtr == NULL) {
        s1 = "";
        if (commandState == WitParser::PS_add)
          s1 = "add ";
        if (commandState == WitParser::PS_set)
          s1 = "set ";

        /* if rule is not defined in symbol table, skip message now. */
        /* However, error message will be issued after all arguments */
        /* are processed.  We don't know the correct number of args. */

        if (entryPtr != NULL) {
          if (entryPtr->nparms() == 1)
            s2 = "argument is";
          else s2 = "arguments are";

          WitParser::instance ()->myMsgFac () ("tooManyArgsMsg",
             s1,
             WitParser::instance ()->currentEntity_->entityID(),
             entryPtr->nparms(),
             s2);

          WitParser::instance ()->currentEntity_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
      }
    ;}
d2039 28
a2066 28
      WitParser::instance ()->setParseState(WitParser::PS_nextArg);
      argPtr = WitParser::instance ()->currentEntity_->
        setCatArg (static_cast <WitDRPartCat::Tag> (yylval.cval));
      if (argPtr == NULL) {
        s1 = "";
        if (commandState == WitParser::PS_add)
          s1 = "add ";
        if (commandState == WitParser::PS_set)
          s1 = "set ";

        /* If rule is not defined, skip message. See comment above */
        if (entryPtr != NULL) {
          if (entryPtr->nparms() == 1)
            s2 = "argument is";
          else s2 = "arguments are";

          WitParser::instance ()->myMsgFac () ("tooManyArgsMsg",
             s1,
             WitParser::instance ()->currentEntity_->entityID(),
             entryPtr->nparms(),
             s2);

          WitParser::instance ()->currentEntity_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
     }
    ;}
d2072 31
a2102 31
      WitParser::instance ()->setParseState(WitParser::PS_attr);
      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");

      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;

      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (WitParser::instance ()->myProblem (), yylval.strval);

      free (yylval.strval);

      /* lookup rule for this attribute and save symbol table pointer */
      /* this will be helpful to check the datatype of a vector       */
      entryPtr = WitParser::instance ()->currentAttr_->
        lookupRule(WitParser::instance ()->theSymTable_,
           WitParser::instance ()->currentRule_);

      /* if attribute name is not in the symbol table, we can't       */
      /* continue because we don't know the expected argument types   */
      if (entryPtr == NULL) {
        WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
          WitParser::instance ()->currentAttr_->attrID(),
          WitParser::instance ()->currentEntity_->entityID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
d2104 2
a2105 2
      (yyval.strval) = (yyvsp[(1) - (1)].strval);
    ;}
d2111 49
a2159 49
      switch((yyvsp[(1) - (1)].pval)) {
        case WitDRParmType::intScalar:
          argPtr =
             WitParser::instance ()->currentAttr_->setIntArg(yylval.intval);
          break;
        case WitDRParmType::doubleScalar:
          argPtr =
             WitParser::instance ()->currentAttr_->setDoubleArg(
                yylval.doubleval);
          break;
        case WitDRParmType::boolScalar:
          argPtr = WitParser::instance ()->currentAttr_->
            setBoolArg(yylval.boolval);
          break;
        case WitDRParmType::string:
          argPtr =
             WitParser::instance ()->currentAttr_->setStringArg(yylval.strval);

          /* string was created by the lexer and it's no longer needed */
          free (yylval.strval);
          break;
        default:
          return 0;
      };

      if (argPtr == NULL) {
        s1 = "";
        if (commandState == WitParser::PS_add)
          s1 = "add ";
        if (commandState == WitParser::PS_set)
          s1 = "set ";

        if (entryPtr != NULL) {
          if (entryPtr->nparms() == 1)
            s2 = "argument is";
          else s2 = "arguments are";

          WitParser::instance ()->myMsgFac () ("tooManyArgsMsg",
             s1,
             WitParser::instance ()->currentAttr_->attrID(),
             entryPtr->nparms(),
             s2);

          WitParser::instance ()->currentAttr_->setInvalid(true);
          prterror();
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
        }
      }
    ;}
d2190 1
a2190 1
      WitParser::instance ()->setParseState(WitParser::PS_single);
d2192 9
a2200 9
      // Construct a VectorSpec object
      if (WitParser::instance ()->currentAttr_->attrType() ==
          WitAttribute::simple) {
        if (entryPtr != NULL) {
          vecPtr =
             new WitVectorSpec (
                WitParser::instance ()->myProblem (),
                WitVectorSpec::single_,
                entryPtr->parmTypes()[0]);
d2202 10
a2211 10
          argPtr = WitParser::instance ()->currentAttr_->setVectorArg(vecPtr);
        }
      }
      else 
        vecPtr =
           new WitVectorSpec (
              WitParser::instance ()->myProblem (),
              WitVectorSpec::single_,
              WitDRParmType::doubleVector);
    ;}
d2217 2
a2218 2
      WitParser::instance ()->setParseState(WitParser::PS_singleParen);
    ;}
d2224 2
a2225 2
      WitParser::instance ()->setParseState(WitParser::PS_singleValue);
    ;}
d2231 2
a2232 2
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
d2238 1
a2238 1
      WitParser::instance ()->setParseState(WitParser::PS_sparse);
d2240 19
a2258 19
      /* Construct a VectorSpec object */
      if (WitParser::instance ()->currentAttr_->attrType() ==
          WitAttribute::simple) {
        if (entryPtr != NULL) {
          vecPtr =
             new WitVectorSpec (
                WitParser::instance ()->myProblem (),
                WitVectorSpec::sparse_,
                entryPtr->parmTypes()[0]);
          argPtr = WitParser::instance ()->currentAttr_->setVectorArg(vecPtr);
        }
      }
      else
         vecPtr =
            new WitVectorSpec (
               WitParser::instance ()->myProblem (),
               WitVectorSpec::sparse_,
               WitDRParmType::doubleVector);
    ;}
d2264 2
a2265 2
      WitParser::instance ()->setParseState(WitParser::PS_sparseParen);
    ;}
d2271 2
a2272 2
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
d2278 1
a2278 1
      WitParser::instance ()->setParseState(WitParser::PS_dense);
d2280 18
a2297 18
      // Construct a VectorSpec object
      if (WitParser::instance ()->currentAttr_->attrType() ==
          WitAttribute::simple) {
        if (entryPtr != NULL) {
          vecPtr =
             new WitVectorSpec (WitParser::instance ()->myProblem (),
                WitVectorSpec::dense_,
                entryPtr->parmTypes()[0]);
          argPtr = WitParser::instance ()->currentAttr_->setVectorArg(vecPtr);
        }
      }
      else
         vecPtr =
            new WitVectorSpec (
               WitParser::instance ()->myProblem (),
               WitVectorSpec::dense_,
               WitDRParmType::doubleVector);
    ;}
d2303 2
a2304 2
      WitParser::instance ()->setParseState(WitParser::PS_denseParen);
    ;}
d2310 2
a2311 2
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
d2317 2
a2318 2
      WitParser::instance ()->setParseState(WitParser::PS_sparseValue);
    ;}
d2324 2
a2325 2
      WitParser::instance ()->setParseState(WitParser::PS_periodColon);
    ;}
d2330 4
a2333 4
    { 
      WitParser::instance ()->setParseState(WitParser::PS_sparseParen);
      (yyval.pval) = (yyvsp[(4) - (4)].pval); 
    ;}
d2339 9
a2347 1
      WitParser::instance ()->setParseState(WitParser::PS_denseValue);
d2349 15
a2363 2
      if (entryPtr != NULL) {
      switch((yyvsp[(1) - (1)].pval)) {
d2365 52
a2416 73
        case WitDRParmType::intScalar:
          if (entryPtr->parmTypes()[0] == WitDRParmType::doubleVector) {
            retcode =
               vecPtr->addDoubleVal(static_cast <double> (yylval.intval));

            break;
          };
          if (entryPtr->parmTypes()[0] == WitDRParmType::intVector) {
            retcode = vecPtr->addIntVal(yylval.intval);
            break;
          };
          if (entryPtr->parmTypes()[0] == WitDRParmType::boundSet) {
            retcode =
               vecPtr->addDoubleVal(static_cast <double> (yylval.intval));
            break;
          }
          else {
            retcode = WRONG_TYPE;
            break;
          };
          
        case WitDRParmType::doubleScalar:
         if (entryPtr->parmTypes()[0] == WitDRParmType::intVector) {
            vecPtr->addIntVal(static_cast <int> (yylval.doubleval));
            retcode = SHOULD_BE_INT;
            break;
          };
          if (entryPtr->parmTypes()[0] == WitDRParmType::doubleVector) {
            retcode = vecPtr->addDoubleVal(yylval.doubleval);
            break;
          };
          if (entryPtr->parmTypes()[0] == WitDRParmType::boundSet) {
            retcode = vecPtr->addDoubleVal(yylval.doubleval);
            break;
          }
          else {
            retcode = WRONG_TYPE;
            break;
          };

        case WitDRParmType::boolScalar:
           {
           if (entryPtr->parmTypes()[0] == WitDRParmType::boolVector)
              {
              retcode = vecPtr->addBoolVal (yylval.boolval);

              break;
              };

           WitParser::instance ()->myMsgFac () ("booleanVectorMsg",
              WitParser::instance ()->currentAttr_->attrID ());

           WitParser::instance ()->currentAttr_->setInvalid (true);

           prterror ();

           retcode = 0;

           WitParser::instance ()->myMsgFac () ("parsingStopsMsg");

           break;
           }

        case WitDRParmType::string:
          WitParser::instance ()->myMsgFac () ("stringVectorMsg",
             WitParser::instance ()->currentAttr_->attrID());
          WitParser::instance ()->currentAttr_->setInvalid(true);
          prterror();
          free (yylval.strval);
          retcode = 0;
          WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
          break;
      }
d2418 18
a2435 18
      if (retcode == WRONG_TYPE) {
        WitParser::instance ()->myMsgFac () ("vecTypeNotValidMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        retcode = 0;
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
      if (retcode == SHOULD_BE_INT) {
        WitParser::instance ()->myMsgFac () ("vecValueNotIntMsg",
           WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        retcode = 0;
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
      }
    ;}
d2441 1
a2441 1
      WitParser::instance ()->setParseState(WitParser::PS_period);
d2443 10
a2452 10
      retcode = vecPtr->addPeriodVal(yylval.intval);
      if (retcode == PERIOD_ERROR) {
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      }
      if (retcode == PERIOD_DUP) {
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      }
    ;}
d2457 16
a2472 16
    {  
      /* lookup rule for this attribute and save symbol table pointer */
      entryPtr = WitParser::instance ()->currentAttr_->
         lookupRule (
            WitParser::instance ()->theSymTable_,
            WitParser::instance ()->currentRule_);

      if (entryPtr == NULL) {
        WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
          WitParser::instance ()->currentAttr_->attrID(),
          WitParser::instance ()->currentEntity_->entityID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
    ;}
d2478 3
a2480 3
      bndPtr = NULL;
      WitParser::instance ()->setParseState(WitParser::PS_endBounds);
    ;}
d2486 1
a2486 1
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);
d2488 2
a2489 2
      // Construct a BoundSetSpec object
      bndPtr = new WitBoundSetSpec(WitBoundSetSpec::exec);
d2491 19
a2509 19
      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;

      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitAttribute::boundSet);

      argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

      free (yylval.strval);
      (yyval.strval) = (yyvsp[(1) - (1)].strval);
    ;}
d2514 2
a2515 2
    { 
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);
d2517 2
a2518 2
      // Construct a BoundSetSpec object
      bndPtr = new WitBoundSetSpec(WitBoundSetSpec::stock);
d2520 19
a2538 19
      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;

      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitAttribute::boundSet);

      argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

      free (yylval.strval);
      (yyval.strval) = (yyvsp[(1) - (1)].strval);
    ;}
d2544 1
a2544 1
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);
d2546 2
a2547 2
      // Construct a BoundSetSpec object
      bndPtr = new WitBoundSetSpec(WitBoundSetSpec::cumShip);
d2549 18
a2566 18
      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;

      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitAttribute::boundSet);
      argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

      free (yylval.strval);
      (yyval.strval) = (yyvsp[(1) - (1)].strval);
    ;}
d2572 2
a2573 2
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);
    ;}
d2579 2
a2580 2
      WitParser::instance ()->setParseState(WitParser::PS_boundType);
    ;}
d2586 14
a2599 14
       switch ((yyvsp[(1) - (3)].btype)) {
         case WitBoundSetSpec::hardlb:
           bndPtr->setHardLBVec(vecPtr);
           break;

         case WitBoundSetSpec::softlb:
           bndPtr->setSoftLBVec(vecPtr);
           break;

         case WitBoundSetSpec::hardub:
           bndPtr->setHardUBVec(vecPtr);
           break;
       }
    ;}
d2605 8
a2612 8
      if (bndPtr->hardLBVec() != NULL) {
        WitParser::instance ()->myMsgFac () ("duplicateHardLBMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      };
      (yyval.btype) = WitBoundSetSpec::hardlb;
    ;}
d2618 8
a2625 8
      if (bndPtr->softLBVec() != NULL) {
        WitParser::instance ()->myMsgFac () ("duplicateSoftLBMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      };
      (yyval.btype) = WitBoundSetSpec::softlb;
    ;}
d2631 8
a2638 8
      if (bndPtr->hardUBVec() != NULL) {
        WitParser::instance ()->myMsgFac () ("duplicateHardUBMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      };
      (yyval.btype) = WitBoundSetSpec::hardub;
    ;}
d2644 5
a2648 5
      WitParser::instance ()->setParseState(WitParser::PS_read);
      commandState = WitParser::PS_read;
      WitParser::instance ()->currentRule_ = "read";
      // printf("Current rule is: %s\n", WitParser::instance ()->currentRule_);
    ;}
d2654 2
a2655 2
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    ;}
d2661 13
a2673 13
      /* save lexer state and shift input stream to new file */
      errno   = 0;
      retcode = WitParlex::saveFile(yylval.strval);
      if (retcode == FOPEN_ERROR) {
        yylval.strval[strlen(yylval.strval)-1] = '\0';
        WitParser::instance ()->myMsgFac () ("fopenSmsg",
           yylval.strval+1,
          "r",
          errno,
          strerror(errno));
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
d2675 5
a2679 5
      if (retcode == STACK_OVERFLOW) {
        WitParser::instance ()->myMsgFac () ("stackOverflowMsg", STACKSIZE);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
d2683 2
a2684 2
      WitParser::instance ()->setDataFileName   ();
      WitParser::instance ()->setDataFileLineNo ();
d2686 7
a2692 7
      //#if defined (__GNUC__)
      yyrestart(yyin);
      //#endif

      WitParser::instance ()->setParseState(WitParser::PS_initial);
      free (yylval.strval);
    ;}
d2921 2
a2922 2
   {
   witAssert (instance_ == NULL);
d2924 1
a2924 1
   instance_ = new WitParser;
d2926 1
a2926 1
   instance ()->parseIt (theProblem, fileName, f);
d2928 1
a2928 1
   delete instance ();
d2930 2
a2931 2
   instance_ = NULL;
   }
d2947 3
a2949 3
   {
   return myProblem ()->myMsgFac ();
   }
d2957 3
a2959 3
  WitParser::instance ()->myMsgFac () ("lineNumberMsg",
    reinterpret_cast <const char *> (yytext),
    WitParlex::lineno(), WitParlex::fileName());
d2962 1
a2962 1
//  check for a valid release number     
d2965 5
a2969 5
  if (strlen(s) <= 2) return NULL;
  for (int i = 0; i < NRELS; i++)
    if (strncmp(s+1, relnum[i], strlen(s)-2) == 0)
      return relnum[i];
  return NULL;
d3018 1
a3018 1
                WitParser::PS parseState, const char * yytext) const
d3020 100
a3119 1
  const char * s1;
d3121 102
a3222 201
  // Print syntax error message, depending on current parser state
  switch (parseState) {
    case WitParser::PS_initial:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
         "\"release\"", yytext);
      break;
    case WitParser::PS_commandEnd:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg", "a \";\"", yytext);
      break;
    case WitParser::PS_nextCommand:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
      "a command name (e.g., set, add, read)", yytext);
      break;
    case WitParser::PS_add:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of an addable object type after \"add\"", yytext);
      break;
    case WitParser::PS_set:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of a settable object type after \"set\"", yytext);
      break;
    case WitParser::PS_setProblem:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of an attribute after \"set problem\"", yytext);
      break;
    case WitParser::PS_read:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a string (the name of a file) after \"read\"", yytext);
      break;
    case WitParser::PS_release:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a quoted string (the release number) after \"release\"", yytext);
      break;
    case WitParser::PS_part:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "part", yytext);
      break;
    case WitParser::PS_operation:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "operation", yytext);
      break;
    case WitParser::PS_bomEntry:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "bomEntry", yytext);
      break;
    case WitParser::PS_subEntry:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "subEntry", yytext);
      break;
    case WitParser::PS_bopEntry:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "bopEntry", yytext);
      break;
    case WitParser::PS_demand:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "demand", yytext);
      break;
    case WitParser::PS_partOperation:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "partWithOperation", yytext);
      break;
    case WitParser::PS_nextArg:

      // Check to see if we have the correct number of argumenta.
      // If so, we are looking for an attribute or a semicolon
      if (WitParser::instance ()->currentEntity()->argc() >= pEntry->nparms()) {
        WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
          "the name of an attribute or a \";\"", yytext);
        break;
      };

      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
         "another argument",
         yytext);
      break;
    case WitParser::PS_attr:
      switch (pEntry->parmTypes()[0]) {   // what the value should be
        case WitDRParmType::intScalar:
          s1 = "integer";	
          break;
        case WitDRParmType::doubleScalar:
          s1 = "double";
          break;
        case WitDRParmType::string:
          s1 = "string";
          break;
        case WitDRParmType::boolScalar:
          s1 = "boolean";
          break;
        case WitDRParmType::partCat:
          s1 = "\"category\"";
          break;
        case WitDRParmType::boolVector:
          s1 = "\"boolean vector\"";
          break;
        case WitDRParmType::intVector:
          s1 = "\"integer vector\"";
          break;
        case WitDRParmType::doubleVector:
          s1 = "\"double vector\"";
          break;
        case WitDRParmType::boundSet:
          s1 = "\"bound set\"";
          break;
        default:
          s1 = "unknown";
          break;
      };
      WitParser::instance ()->myMsgFac () ("attrValueNotFound",
        s1, WitParser::instance ()->currentAttr()->attrID(), yytext);
      break;
    case WitParser::PS_nextAttr:
    case WitParser::PS_endBounds:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of an attribute or a \";\"", yytext);
      break;
    case WitParser::PS_nextBound:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a bound set attribute (e.g., softLB, hardLB, hardUB)"
        " or \"endBounds\"", yytext);
      break;
    case WitParser::PS_boundType:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector format (e.g, single, dense, sparse)", yytext);
      break;
    case WitParser::PS_single:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \"(\" after \"single\"", yytext);
      break;
    case WitParser::PS_dense:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \"(\" after \"dense\"", yytext);
      break;
    case WitParser::PS_sparse:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \"(\" after \"sparse\"", yytext);
      break;
    case WitParser::PS_singleParen:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector element for a \"single\" vector specification",
        yytext);
      break;
    case WitParser::PS_denseParen:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector element for a \"dense\" vector specification",
        yytext);
      break;
    case WitParser::PS_sparseParen:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a period (an integer) in \"sparse\" vector specification", yytext);
      break;
    case WitParser::PS_singleValue:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \")\" after the one vector value in a \"single\" vector "
        "specification", yytext);
      break;
    case WitParser::PS_denseValue:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector value or a \")\"", yytext);
      break;
    case WitParser::PS_sparseValue:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a period (an integer) or a \")\"", yytext);
      break;
    case WitParser::PS_period:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \":\" in \"sparse\" vector specification", yytext);
      break;
    case WitParser::PS_periodColon:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector value (a number) after the \":\"", yytext);
      break;
  }
d3228 3
a3230 3
   {
   myProblem ()->myApiMgr ()->myInputID ()->setDataFileName (fileName ());
   }
d3235 3
a3237 3
   {
   myProblem ()->myApiMgr ()->myInputID ()->setDataFileLineNo (lineno ());
   }
d3244 10
a3253 10
      theSymTable_   (NULL),
      currentRule_   (),
      previousRule_  (),
      currentEntity_ (NULL),
      currentAttr_   (NULL),
      parseState_    (PS_initial),
      myProblem_     (NULL)
   {
   commandState = PS_initial;
   }
d3256 2
a3257 2
   {
   }
d3264 1
a3264 1
  int   rc;
d3266 2
a3267 2
  WitParlex::setFileName (fileName);   // save current file name
  yyin = f;                            // save pointer to FILE
d3269 3
a3271 3
  myProblem_   = theProblem;
  theSymTable_ = new WitSymTable (theProblem->myWitRun ());
  rc           = theSymTable_->registerRules ();
d3273 2
a3274 2
  if (rc)
     return rc;
d3276 1
a3276 1
  //#if defined (WIN32) or defined (__OS2__)
d3278 1
a3278 1
  //  yy_reset();
d3280 1
a3280 1
  //#endif
d3282 1
a3282 1
  rc = yyparse();
d3284 10
a3293 10
  if (rc)
  {
    WitParser::instance ()->prtSyntaxError(entryPtr,
       WitParser::instance ()->parseState(),
      reinterpret_cast <const char *> (yytext));
    WitParser::instance ()->myMsgFac () ("lineNumberMsg",
      reinterpret_cast <const char *> (yytext),
      WitParlex::lineno(), WitParlex::fileName());
    WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
  }
d3295 2
a3296 2
  delete theSymTable_;
  return rc;
@


1.10
log
@Removed some more conversions from string constant to char *.
@
text
@d3188 4
d3194 1
a3194 1
        "a vector value (a number) for a \"single\" vector specification",
@


1.9
log
@Removed some more conversions of string constants to char *.
@
text
@d195 1
a195 1
extern "C" void yyerror(char *)
@


1.8
log
@Removed some implicit conversions from string constant to char *.
@
text
@d3020 1
a3020 1
  char  *s1;
@


1.7
log
@Source files generated by a new version of Flex and Bison.
@
text
@d218 1
a218 1
char                  *s1, *s2, *s3; /* temporary strings     */
d220 1
a220 1
char * relnum[] = {"4.0", "5.0", "6.0", "7.0"};
d227 1
a227 1
char      *checkrel(char *);         /* check for a valid release number */   
d2963 1
a2963 1
char     *checkrel(char *s)       /* s = char. string, in quotes */
@


1.6
log
@Changed some #includes.
@
text
@d1 1
a1 1
/* A Bison parser, made by GNU Bison 1.875c.  */
d3 4
a6 2
/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d20 12
a31 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d33 2
a34 4
/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */
d36 2
a37 2
/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */
d49 3
d101 1
d244 7
a250 1
#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
d252 1
a252 1
typedef union YYSTYPE {
d260 4
a263 3
} YYSTYPE;
/* Line 191 of yacc.c.  */
#line 243 "witParse.tab.c"
d274 86
a359 2
/* Line 214 of yacc.c.  */
#line 255 "witParse.tab.c"
d361 1
a361 1
#if ! defined (yyoverflow) || YYERROR_VERBOSE
a366 6
#   define YYSTACK_ALLOC alloca
#  endif
# else
#  if defined (alloca) || defined (_ALLOCA_H)
#   define YYSTACK_ALLOC alloca
#  else
d369 16
d390 9
a398 2
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
d400 8
a407 1
#  if defined (__STDC__) || defined (__cplusplus)
d409 17
a425 1
#   define YYSIZE_T size_t
a426 2
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
d428 1
a428 1
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */
d431 3
a433 3
#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))
d438 1
a438 1
  short yyss;
d448 1
a448 1
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
d454 1
a454 1
#  if defined (__GNUC__) && 1 < __GNUC__
d461 1
a461 1
	  register YYSIZE_T yyi;		\
d465 1
a465 1
      while (0)
d483 1
a483 3
    while (0)

#endif
a484 4
#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
d487 1
a487 1
/* YYFINAL -- State number of the termination state. */
d492 1
a492 1
/* YYNTOKENS -- Number of terminals. */
d494 1
a494 1
/* YYNNTS -- Number of nonterminals. */
d496 1
a496 1
/* YYNRULES -- Number of rules. */
d498 1
a498 1
/* YYNRULES -- Number of states. */
d505 1
a505 1
#define YYTRANSLATE(YYX) 						\
d509 1
a509 1
static const unsigned char yytranslate[] =
d545 1
a545 1
static const unsigned char yyprhs[] =
d558 2
a559 2
/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const yysigned_char yyrhs[] =
d584 1
a584 1
static const unsigned short yyrline[] =
d598 3
a600 3
#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
d626 1
a626 1
static const unsigned short yytoknum[] =
d636 1
a636 1
static const unsigned char yyr1[] =
d650 1
a650 1
static const unsigned char yyr2[] =
d666 1
a666 1
static const unsigned char yydefact[] =
d681 2
a682 2
/* YYDEFGOTO[NTERM-NUM]. */
static const yysigned_char yydefgoto[] =
d695 1
a695 1
static const yysigned_char yypact[] =
d711 1
a711 1
static const yysigned_char yypgoto[] =
d726 1
a726 1
static const unsigned char yytable[] =
d738 1
a738 1
static const unsigned char yycheck[] =
d752 1
a752 1
static const unsigned char yystos[] =
a766 16
#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

d792 1
a792 1
      YYPOPSTACK;						\
d796 2
a797 2
    { 								\
      yyerror ("syntax error: cannot back up");\
d800 2
a801 1
while (0)
a805 2
/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */
d807 5
d813 33
a845 5
# define YYLLOC_DEFAULT(Current, Rhs, N)		\
   ((Current).first_line   = (Rhs)[1].first_line,	\
    (Current).first_column = (Rhs)[1].first_column,	\
    (Current).last_line    = (Rhs)[N].last_line,	\
    (Current).last_column  = (Rhs)[N].last_column)
d848 1
d869 12
a880 1
} while (0)
a881 5
# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)
d883 57
a939 10
# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)
d946 2
a947 1
#if defined (__STDC__) || defined (__cplusplus)
d949 1
a949 1
yy_stack_print (short *bottom, short *top)
d953 2
a954 2
    short *bottom;
    short *top;
d958 1
a958 1
  for (/* Nothing. */; bottom <= top; ++bottom)
d967 1
a967 1
} while (0)
d974 2
a975 1
#if defined (__STDC__) || defined (__cplusplus)
d977 1
a977 1
yy_reduce_print (int yyrule)
d980 2
a981 1
yy_reduce_print (yyrule)
d985 1
d987 12
a998 7
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
d1004 2
a1005 2
    yy_reduce_print (Rule);		\
} while (0)
d1012 1
a1012 2
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
d1027 1
a1027 1
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
a1029 4
#if defined (YYMAXDEPTH) && YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

d1039 1
a1039 1
#  if defined (__GLIBC__) && defined (_STRING_H)
d1043 2
a1045 1
#   if defined (__STDC__) || defined (__cplusplus)
d1047 2
a1048 1
#   else
d1050 2
a1051 2
     const char *yystr;
#   endif
d1053 2
a1054 3
  register const char *yys = yystr;

  while (*yys++ != '\0')
d1056 1
a1056 2

  return yys - yystr - 1;
d1062 1
a1062 1
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
d1067 2
a1069 1
#   if defined (__STDC__) || defined (__cplusplus)
d1071 2
a1072 1
#   else
d1074 3
a1076 3
     char *yydest;
     const char *yysrc;
#   endif
d1078 2
a1079 2
  register char *yyd = yydest;
  register const char *yys = yysrc;
d1089 40
a1128 1
#endif /* !YYERROR_VERBOSE */
d1130 2
a1131 1

d1133 3
a1135 4
#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/
d1137 9
a1145 10
#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
d1147 1
a1147 2
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
d1149 3
a1151 1
  if (yytype < YYNTOKENS)
d1153 17
a1169 3
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
d1171 48
a1218 3
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
d1220 22
a1241 4
  switch (yytype)
    {
      default:
        break;
a1242 1
  YYFPRINTF (yyoutput, ")");
d1244 2
a1246 1
#endif /* ! YYDEBUG */
d1251 3
a1253 1
#if defined (__STDC__) || defined (__cplusplus)
d1255 1
a1255 1
yydestruct (int yytype, YYSTYPE *yyvaluep)
d1258 2
a1259 1
yydestruct (yytype, yyvaluep)
d1264 5
a1268 2
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
d1274 1
a1274 1
        break;
d1282 1
a1282 1
# if defined (__STDC__) || defined (__cplusplus)
d1284 1
a1284 1
# else
d1286 1
a1286 1
# endif
d1288 1
a1288 1
#if defined (__STDC__) || defined (__cplusplus)
d1297 1
a1297 1
/* The lookahead symbol.  */
d1300 1
a1300 1
/* The semantic value of the lookahead symbol.  */
d1313 9
a1321 6
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
d1323 2
a1324 1
#if defined (__STDC__) || defined (__cplusplus)
d1335 2
a1336 2
  register int yystate;
  register int yyn;
d1340 1
a1340 1
  /* Lookahead token as an internal (translated) token number.  */
d1342 6
d1358 3
a1360 3
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;
d1365 1
a1365 1
  register YYSTYPE *yyvsp;
d1369 1
a1369 1
#define YYPOPSTACK   (yyvsp--, yyssp--)
d1378 3
a1380 3
  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;
d1404 1
a1404 2
     have just been pushed. so pushing a state here evens the stacks.
     */
d1417 1
a1417 1
	/* Give user a chance to reallocate the stack. Use copies of
d1421 1
a1421 1
	short *yyss1 = yyss;
d1428 1
a1428 1
	yyoverflow ("parser stack overflow",
d1439 1
a1439 1
      goto yyoverflowlab;
d1443 1
a1443 1
	goto yyoverflowlab;
d1449 1
a1449 1
	short *yyss1 = yyss;
d1453 1
a1453 1
	  goto yyoverflowlab;
d1484 2
a1485 5
/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */
d1487 1
d1492 1
a1492 1
  /* Not known => get a lookahead token if don't already have one.  */
d1494 1
a1494 1
  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
d1509 1
a1509 1
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
d1529 4
a1532 2
  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));
d1534 4
a1537 1
  /* Discard the token being shifted unless it is eof.  */
d1541 1
a1543 7

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
d1924 1
a1924 1
      yyval.cval = yyvsp[0].cval;
d1981 1
a1981 1
      switch(yyvsp[0].pval) {
d2104 1
a2104 1
      yyval.strval = yyvsp[0].strval;
d2111 1
a2111 1
      switch(yyvsp[0].pval) {
d2164 1
a2164 1
    { yyval.pval = WitDRParmType::undefined; ;}
d2169 1
a2169 1
    { yyval.pval = WitDRParmType::string; ;}
d2174 1
a2174 1
    { yyval.pval = WitDRParmType::intScalar; ;}
d2179 1
a2179 1
    { yyval.pval = WitDRParmType::doubleScalar; ;}
d2184 1
a2184 1
    { yyval.pval = WitDRParmType::boolScalar; ;}
d2332 1
a2332 1
      yyval.pval = yyvsp[0].pval; 
d2342 1
a2342 1
      switch(yyvsp[0].pval) {
d2508 1
a2508 1
      yyval.strval = yyvsp[0].strval;
d2537 1
a2537 1
      yyval.strval = yyvsp[0].strval;
d2565 1
a2565 1
      yyval.strval = yyvsp[0].strval;
d2586 1
a2586 1
       switch (yyvsp[-2].btype) {
d2611 1
a2611 1
      yyval.btype = WitBoundSetSpec::hardlb;
d2624 1
a2624 1
      yyval.btype = WitBoundSetSpec::softlb;
d2637 1
a2637 1
      yyval.btype = WitBoundSetSpec::hardub;
d2696 3
d2700 1
d2702 2
a2703 7
/* Line 993 of yacc.c.  */
#line 2359 "witParse.tab.c"

  yyvsp -= yylen;
  yyssp -= yylen;


d2732 16
a2747 23
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  const char* yyprefix;
	  char *yymsg;
	  int yyx;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
d2749 2
a2750 7
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
d2752 1
a2752 7
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);
d2754 13
a2766 20
	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			yyp = yystpcpy (yyp, yyprefix);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yyprefix = " or ";
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
d2773 1
a2773 1
      /* If just tried and failed to reuse lookahead token after an
d2777 2
a2778 3
        {
          /* If at end of input, pop the error token,
	     then the rest of the stack, then return failure.  */
d2780 2
a2781 9
	     for (;;)
	       {
		 YYPOPSTACK;
		 if (yyssp == yyss)
		   YYABORT;
		 YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
		 yydestruct (yystos[*yyssp], yyvsp);
	       }
        }
d2784 2
a2785 2
	  YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
	  yydestruct (yytoken, &yylval);
a2786 1

d2790 1
a2790 1
  /* Else will try to reuse lookahead token after shifting the error
d2800 4
a2803 4
#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
a2804 1
#endif
d2806 5
a2810 2
  yyvsp -= yylen;
  yyssp -= yylen;
d2839 4
a2842 3
      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      YYPOPSTACK;
d2850 1
a2850 1
  YYDPRINTF ((stderr, "Shifting error token, "));
a2851 1
  *++yyvsp = yylval;
d2853 2
d2875 5
a2879 5
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
d2885 13
d2902 6
a2907 1
  return yyresult;
@


1.5
log
@Switched from using yacc to bison.
@
text
@d164 7
a170 7
#include <wit/src/Parser.h>
#include <wit/src/Problem.h>
#include <wit/src/ApiMgr.h>
#include <wit/src/InputID.h>
#include <wit/src/VecBS.h>
#include <wit/src/Entity.h>
#include <wit/src/MsgFac.h>
@


1.4
log
@Updated the copyright date on all source files.
@
text
@d1 124
a124 16
#ifndef lint
static char const 
yyrcsid[] = "$FreeBSD: src/usr.bin/yacc/skeleton.c,v 1.28 2000/01/17 02:04:06 bde Exp $";
#endif
#include <stdlib.h>
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYLEX yylex()
#define YYEMPTY -1
#define yyclearin (yychar=(YYEMPTY))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING() (yyerrflag!=0)
static int yygrowstack();
#define YYPREFIX "yy"
#line 2 "../src/witParse.y"
d176 1
a176 1
/*#if defined(__GNUC__)*/
d179 1
a179 1
/*#endif*/
d185 4
a188 4
/*#if defined (WIN32) or defined (__OS2__)*/
/*extern void yy_reset(void);*/
/*extern char yytext[];*/
/*#else*/
d190 1
a190 1
/*#endif*/
d195 1
a195 1
/*RWCollectableString   *rulePtr;*/
d207 3
a209 3
   /**/
   /* Valid WIT release numbers*/
   /* (i.e., valid values for the "release" specification)*/
d215 16
d232 1
a232 1
typedef union {
d241 242
a482 42
#line 118 "y.tab.c"
#define YYERRCODE 256
#define RELEASE 257
#define ADD 258
#define SET 259
#define READ 260
#define PROBLEM 261
#define PART 262
#define OPERATION 263
#define BOM_ENTRY 264
#define SUB_ENTRY 265
#define BOP_ENTRY 266
#define DEMAND 267
#define PART_WITH_OPERATION 268
#define SINGLE 269
#define SPARSE 270
#define DENSE 271
#define END_BOUNDS 272
#define HARDLB 273
#define SOFTLB 274
#define HARDUB 275
#define CAPACITY 276
#define MATERIAL 277
#define IDENTIFIER 278
#define STRING 279
#define DOUBLE 280
#define INTEGER 281
#define BOOLEAN 282
#define CATEGORY 283
#define EXEC_BOUNDS 284
#define STOCK_BOUNDS 285
#define CUM_SHIP_BOUNDS 286
const short yylhs[] = {                                        -1,
    0,   15,   15,   16,   16,   16,   21,   22,   14,   20,
   24,   26,   17,   23,   23,   28,   18,   30,   18,   29,
    5,    5,    5,    5,    5,    5,   27,   33,   25,    4,
   31,   31,   32,   32,   10,   10,   34,   34,   35,    1,
    8,    8,    6,    6,    6,    6,   37,   38,   39,   36,
   40,   42,   36,   43,   45,   36,   41,   41,   46,    7,
   44,   44,    9,   13,   48,    3,    2,    2,    2,   47,
   47,   49,   12,   11,   11,   11,   51,   52,   53,   19,
   50,
d484 11
a494 10
const short yylen[] = {                                         2,
    2,    0,    2,    1,    1,    1,    0,    0,    5,    1,
    0,    0,    6,    1,    1,    0,    5,    0,    5,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    3,    1,
    0,    2,    1,    2,    1,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    0,    0,    0,    7,
    0,    0,    6,    0,    0,    6,    0,    2,    0,    4,
    1,    2,    1,    1,    0,    4,    1,    1,    1,    0,
    2,    0,    3,    1,    1,    1,    0,    0,    0,    7,
    1,
d496 14
a509 12
const short yydefred[] = {                                      0,
    7,    0,    2,    0,    0,   10,    8,   11,    0,   77,
    3,    4,    5,    6,    0,    0,   16,    0,    0,    9,
   21,   22,   23,   24,   25,   26,   15,   14,   12,   31,
   20,    0,   81,   78,    0,    0,    0,   43,   45,   44,
   46,   30,   36,   35,   33,    0,    0,    0,    0,   17,
   40,   67,   68,   69,    0,   65,   38,   32,   37,   19,
   34,   31,   79,   13,   47,   51,   54,   41,   39,   42,
   70,    0,    0,    0,    0,    0,    0,   80,   48,   52,
   55,   66,   74,   75,   76,   72,   71,    0,   57,    0,
    0,   63,   49,    0,   61,    0,   73,    0,   64,   53,
   58,    0,   56,   62,   50,   59,    0,   60,
d511 13
a523 7
const short yydgoto[] = {                                       2,
   55,   56,   57,   43,   28,   92,  101,   69,   93,   45,
   86,   87,  102,    3,    5,   11,   12,   13,   14,    7,
    4,   15,   29,   16,   46,   35,   36,   30,   32,   18,
   37,   47,   62,   58,   59,   70,   74,   88,   98,   75,
   94,   89,   76,   96,   90,  107,   77,   71,   91,   34,
   19,   48,   73,
d525 17
a541 12
const short yysindex[] = {                                   -252,
    0,    0,    0, -272, -199,    0,    0,    0, -253,    0,
    0,    0,    0,    0,  -48, -235,    0, -228, -260,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -233,    0,    0, -233,    6, -269,    0,    0,    0,
    0,    0,    0,    0,    0,    7, -233,    8,    9,    0,
    0,    0,    0,    0, -257,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -269, -252,  -20,   29,   30, -221,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -224,    0, -224,
 -207,    0,    0,  -39,    0,  -41,    0,   31,    0,    0,
    0,   13,    0,    0,    0,    0, -224,    0,
d543 10
a552 12
const short yyrindex[] = {                                      0,
    0,    0,    0,    0,   73,    0,    0,    0, -222,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   15,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -58,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   16,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
d554 17
a570 7
const short yygindex[] = {                                      0,
    0,    0,    0,    0,   58,  -29,    0,    0,  -86,   32,
    0,    0,    0,    4,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,    0,    0,    0,    0,
   18,    0,    0,    0,    0,  -10,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
d572 10
a581 27
#define YYTABLESIZE 242
const short yytable[] = {                                     103,
   28,  100,   44,   95,    1,   44,    6,   17,   51,  104,
   20,   65,   66,   67,   52,   53,   54,   44,   33,   79,
  108,   38,   39,   40,   41,   68,   21,   22,   23,   24,
   25,   26,   27,   21,   22,   23,   24,   25,   26,   18,
   18,   18,   18,   18,   18,   38,   39,   40,   41,   42,
   82,   83,   84,   85,   38,   39,   40,   41,    8,    9,
   10,   65,   66,   67,   50,   60,   63,   64,   80,   81,
  106,  105,    1,   27,   29,   31,   78,   49,   61,   72,
   97,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
    0,    0,    0,    0,    0,   28,   28,   28,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,   39,   40,
   41,   99,
d583 16
a598 26
const short yycheck[] = {                                      41,
   59,   41,   32,   90,  257,   35,  279,  261,  278,   96,
   59,  269,  270,  271,  284,  285,  286,   47,  279,   40,
  107,  279,  280,  281,  282,   55,  262,  263,  264,  265,
  266,  267,  268,  262,  263,  264,  265,  266,  267,  262,
  263,  264,  265,  266,  267,  279,  280,  281,  282,  283,
  272,  273,  274,  275,  279,  280,  281,  282,  258,  259,
  260,  269,  270,  271,   59,   59,   59,   59,   40,   40,
   58,   41,    0,   59,   59,   18,   73,   35,   47,   62,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,   -1,  284,  285,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,  281,
  282,  281,
d600 11
a610 18
#define YYFINAL 2
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 286
#if YYDEBUG
const char * const yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"':'","';'",0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"RELEASE","ADD",
"SET","READ","PROBLEM","PART","OPERATION","BOM_ENTRY","SUB_ENTRY","BOP_ENTRY",
"DEMAND","PART_WITH_OPERATION","SINGLE","SPARSE","DENSE","END_BOUNDS","HARDLB",
"SOFTLB","HARDUB","CAPACITY","MATERIAL","IDENTIFIER","STRING","DOUBLE",
"INTEGER","BOOLEAN","CATEGORY","EXEC_BOUNDS","STOCK_BOUNDS","CUM_SHIP_BOUNDS",
d612 16
a627 83
const char * const yyrule[] = {
"$accept : data_specification",
"data_specification : release_specification command_list",
"command_list :",
"command_list : command_list command",
"command : add_command",
"command : set_command",
"command : read_command",
"$$1 :",
"$$2 :",
"release_specification : RELEASE $$1 release_num $$2 ';'",
"release_num : STRING",
"$$3 :",
"$$4 :",
"add_command : ADD $$3 add_clause $$4 entity_specification ';'",
"add_clause : entity_name",
"add_clause : PART_WITH_OPERATION",
"$$5 :",
"set_command : SET PROBLEM $$5 global_specification ';'",
"$$6 :",
"set_command : SET $$6 set_clause entity_specification ';'",
"set_clause : entity_name",
"entity_name : PART",
"entity_name : OPERATION",
"entity_name : BOM_ENTRY",
"entity_name : SUB_ENTRY",
"entity_name : BOP_ENTRY",
"entity_name : DEMAND",
"global_specification : attribute_list",
"$$7 :",
"entity_specification : argument_list $$7 attribute_list",
"category : CATEGORY",
"attribute_list :",
"attribute_list : attribute_list attribute",
"argument_list : argument",
"argument_list : argument_list argument",
"argument : simple_value",
"argument : category",
"attribute : simple_attribute",
"attribute : bound_set_attribute",
"simple_attribute : attribute_name attribute_value",
"attribute_name : IDENTIFIER",
"attribute_value : simple_value",
"attribute_value : vector_format",
"simple_value : STRING",
"simple_value : INTEGER",
"simple_value : DOUBLE",
"simple_value : BOOLEAN",
"$$8 :",
"$$9 :",
"$$10 :",
"vector_format : SINGLE $$8 '(' $$9 vector_value $$10 ')'",
"$$11 :",
"$$12 :",
"vector_format : SPARSE $$11 '(' $$12 sparse_list ')'",
"$$13 :",
"$$14 :",
"vector_format : DENSE $$13 '(' $$14 value_list ')'",
"sparse_list :",
"sparse_list : sparse_list period_value",
"$$15 :",
"period_value : period ':' $$15 vector_value",
"value_list : vector_value",
"value_list : value_list vector_value",
"vector_value : simple_value",
"period : INTEGER",
"$$16 :",
"bound_set_attribute : bound_set_type $$16 bounds_specification END_BOUNDS",
"bound_set_type : EXEC_BOUNDS",
"bound_set_type : STOCK_BOUNDS",
"bound_set_type : CUM_SHIP_BOUNDS",
"bounds_specification :",
"bounds_specification : bounds_specification bound_item",
"$$17 :",
"bound_item : bound_type $$17 vector_format",
"bound_type : HARDLB",
"bound_type : SOFTLB",
"bound_type : HARDUB",
"$$18 :",
"$$19 :",
"$$20 :",
"read_command : READ $$18 file_name $$19 ';' $$20 release_specification",
"file_name : STRING",
d629 12
d642 51
a692 2
#if YYDEBUG
#include <stdio.h>
d694 5
a698 3
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
d700 42
a741 2
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
d743 4
a746 2
#define YYSTACKSIZE 10000
#define YYMAXDEPTH 10000
d748 25
d774 19
a792 1
#define YYINITSTACKSIZE 200
d794 7
a800 12
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short *yyss;
short *yysslim;
YYSTYPE *yyvs;
int yystacksize;
#line 1198 "../src/witParse.y"
a801 1
//------------------------------------------------------------------------------
d803 4
a806 1
WitParser * WitParser::instance_ = NULL;
d808 2
a809 1
//------------------------------------------------------------------------------
d811 3
a813 3
void WitParser::parse (WitProblem * theProblem, const char * fileName, FILE * f)
   {
   witAssert (instance_ == NULL);
d815 3
a817 1
   instance_ = new WitParser;
d819 3
a821 1
   instance ()->parseIt (theProblem, fileName, f);
d823 1
a823 1
   delete instance ();
d825 1
a825 2
   instance_ = NULL;
   }
d827 14
a840 1
//------------------------------------------------------------------------------
d842 2
a843 1
// accessors
d845 4
a848 2
WitParser::PS    WitParser::parseState() const
{ return parseState_; }
d850 17
a866 2
WitEntity     *WitParser::currentEntity() const
{ return currentEntity_; }
d868 2
a869 2
WitAttribute  *WitParser::currentAttr() const
{ return currentAttr_; }
d871 4
a874 4
WitMsgFacility & WitParser::myMsgFac () const
   {
   return myProblem ()->myMsgFac ();
   }
d876 1
a876 2
void WitParser::setParseState(PS st)
{ parseState_ = st; }
d878 1
d880 15
a894 1
void prterror()
d896 19
a914 3
  WitParser::instance ()->myMsgFac () ("lineNumberMsg",
    reinterpret_cast <const char *> (yytext),
    WitParlex::lineno(), WitParlex::fileName());
d917 14
a930 2
//  check for a valid release number     
char     *checkrel(char *s)       /* s = char. string, in quotes */
d932 9
a940 5
  if (strlen(s) <= 2) return NULL;
  for (int i = 0; i < NRELS; i++)
    if (strncmp(s+1, relnum[i], strlen(s)-2) == 0)
      return relnum[i];
  return NULL;
d942 30
d973 18
a990 44
//-----------------------------------------------------------------------------
// WitParser::prtSyntaxError
//
//     Implementation of syntax checker
//
//     Contains function to check the state of the parser and generate
//     a meaninful error message when a syntax error occurs.
//
// The parse states are defined in Parser.h:
//
//  PS_initial               // initial state, looking for "release"
//  PS_add                   // found "add", looking for <entity_name>
//  PS_set                   // found "set", looking for <entity_name>
//  PS_read                  // found "read", looking for <data_file>
//  PS_release               // found "release", looking for release_spec
//  PS_part                  // found "part", looking for <category>
//  PS_operation             // found "operation", looking for <arg>
//  PS_bomEntry              // found "bomEntry", looking for <arg>
//  PS_subEntry              // found "subEntry", looking for <arg>
//  PS_bopEntry              // found "bopEntry", looking for <arg>
//  PS_demand                // found "demand", looking for <arg>
//  PS_partOperation         // found "partWithOperation, looking for <arg>
//  PS_nextArg               // looking for another <arg> or a ";"
//  PS_attr                  // found <attr_name>, looking for <attr_value>
//  PS_single                // found "single", looking for "("
//  PS_dense                 // found "dense", looking for "("
//  PS_sparse                // found "sparse", looking for "("
//  PS_singleParen           // found "single (", looking for <vector_value>
//  PS_denseParen            // found "dense (", looking for <vector_value>
//  PS_sparseParen           // found "sparse (", looking for <period>
//  PS_singleValue           // found single value, looking for ")"
//  PS_denseValue            // found <value>, looking for <value> or ")"
//  PS_sparseValue           // found <period_val>, looking for <period> or ")"
//  PS_nextAttr              // looking for <attr_name> or ";"
//  PS_nextCommand           // found ";" and looking for <command>
//  PS_commandEnd            // looking for ";"
//  PS_period                // found <period>, looking for ":"
//  PS_periodColon	     // found ":", looking for <vector_value>
//  PS_nextBound             // found <bound_set_type>, looking for <bounds>
//  PS_boundType             // found <bound_type>, looking for <vector>
//  PS_endBounds             // found "endBounds", looking for ";" or next attr
//  PS_setProblem            // found "set problem", looking for
//                           //        <attribute name>
//-----------------------------------------------------------------------------
d992 2
a993 2
void WitParser::prtSyntaxError(WitSymTabEntry *pEntry,
                WitParser::PS parseState, const char * yytext) const
d995 163
a1157 1
  char  *s1;
d1159 10
a1168 90
  // Print syntax error message, depending on current parser state
  switch (parseState) {
    case WitParser::PS_initial:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
         "\"release\"", yytext);
      break;
    case WitParser::PS_commandEnd:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg", "a \";\"", yytext);
      break;
    case WitParser::PS_nextCommand:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
      "a command name (e.g., set, add, read)", yytext);
      break;
    case WitParser::PS_add:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of an addable object type after \"add\"", yytext);
      break;
    case WitParser::PS_set:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of a settable object type after \"set\"", yytext);
      break;
    case WitParser::PS_setProblem:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of an attribute after \"set problem\"", yytext);
      break;
    case WitParser::PS_read:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a string (the name of a file) after \"read\"", yytext);
      break;
    case WitParser::PS_release:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a quoted string (the release number) after \"release\"", yytext);
      break;
    case WitParser::PS_part:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "part", yytext);
      break;
    case WitParser::PS_operation:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "operation", yytext);
      break;
    case WitParser::PS_bomEntry:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "bomEntry", yytext);
      break;
    case WitParser::PS_subEntry:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "subEntry", yytext);
      break;
    case WitParser::PS_bopEntry:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "bopEntry", yytext);
      break;
    case WitParser::PS_demand:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "demand", yytext);
      break;
    case WitParser::PS_partOperation:
      if (pEntry->nparms() == 1)
        s1 = "argument";
      else
        s1 = "arguments";
      WitParser::instance ()->myMsgFac () ("noArgsMsg", pEntry->nparms(), s1,
        "partWithOperation", yytext);
      break;
    case WitParser::PS_nextArg:
d1170 13
a1182 7
      // Check to see if we have the correct number of argumenta.
      // If so, we are looking for an attribute or a semicolon
      if (WitParser::instance ()->currentEntity()->argc() >= pEntry->nparms()) {
        WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
          "the name of an attribute or a \";\"", yytext);
        break;
      };
d1184 2
a1185 99
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
         "another argument",
         yytext);
      break;
    case WitParser::PS_attr:
      switch (pEntry->parmTypes()[0]) {   // what the value should be
        case WitDRParmType::intScalar:
          s1 = "integer";	
          break;
        case WitDRParmType::doubleScalar:
          s1 = "double";
          break;
        case WitDRParmType::string:
          s1 = "string";
          break;
        case WitDRParmType::boolScalar:
          s1 = "boolean";
          break;
        case WitDRParmType::partCat:
          s1 = "\"category\"";
          break;
        case WitDRParmType::boolVector:
          s1 = "\"boolean vector\"";
          break;
        case WitDRParmType::intVector:
          s1 = "\"integer vector\"";
          break;
        case WitDRParmType::doubleVector:
          s1 = "\"double vector\"";
          break;
        case WitDRParmType::boundSet:
          s1 = "\"bound set\"";
          break;
        default:
          s1 = "unknown";
          break;
      };
      WitParser::instance ()->myMsgFac () ("attrValueNotFound",
        s1, WitParser::instance ()->currentAttr()->attrID(), yytext);
      break;
    case WitParser::PS_nextAttr:
    case WitParser::PS_endBounds:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "the name of an attribute or a \";\"", yytext);
      break;
    case WitParser::PS_nextBound:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a bound set attribute (e.g., softLB, hardLB, hardUB)"
        " or \"endBounds\"", yytext);
      break;
    case WitParser::PS_boundType:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector format (e.g, single, dense, sparse)", yytext);
      break;
    case WitParser::PS_single:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \"(\" after \"single\"", yytext);
      break;
    case WitParser::PS_dense:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \"(\" after \"dense\"", yytext);
      break;
    case WitParser::PS_sparse:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \"(\" after \"sparse\"", yytext);
      break;
    case WitParser::PS_singleParen:
    case WitParser::PS_denseParen:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector value (a number) for a \"single\" vector specification",
        yytext);
      break;
    case WitParser::PS_sparseParen:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a period (an integer) in \"sparse\" vector specification", yytext);
      break;
    case WitParser::PS_singleValue:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \")\" after the one vector value in a \"single\" vector "
        "specification", yytext);
      break;
    case WitParser::PS_denseValue:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector value or a \")\"", yytext);
      break;
    case WitParser::PS_sparseValue:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a period (an integer) or a \")\"", yytext);
      break;
    case WitParser::PS_period:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a \":\" in \"sparse\" vector specification", yytext);
      break;
    case WitParser::PS_periodColon:
      WitParser::instance ()->myMsgFac () ("syntaxErrorMsg",
        "a vector value (a number) after the \":\"", yytext);
      break;
  }
}
d1187 2
a1188 1
//------------------------------------------------------------------------------
d1190 3
a1192 4
void WitParser::setDataFileName () const
   {
   myProblem ()->myApiMgr ()->myInputID ()->setDataFileName (fileName ());
   }
d1194 1
a1194 1
//------------------------------------------------------------------------------
a1195 4
void WitParser::setDataFileLineNo () const
   {
   myProblem ()->myApiMgr ()->myInputID ()->setDataFileLineNo (lineno ());
   }
d1197 4
a1200 1
//-----------------------------------------------------------------------------
d1202 2
a1203 1
// Constructor and destructor
a1204 11
WitParser::WitParser ():
      theSymTable_   (NULL),
      currentRule_   (),
      previousRule_  (),
      currentEntity_ (NULL),
      currentAttr_   (NULL),
      parseState_    (PS_initial),
      myProblem_     (NULL)
   {
   commandState = PS_initial;
   }
d1206 8
a1213 3
WitParser::~WitParser ()
   {
   }
a1214 1
//------------------------------------------------------------------------------
d1216 6
a1221 4
// Parse the input stream
int WitParser::parseIt(WitProblem * theProblem, const char* fileName, FILE* f)
{
  int   rc;
d1223 2
a1224 2
  WitParlex::setFileName (fileName);   // save current file name
  yyin = f;                            // save pointer to FILE
d1226 6
a1231 3
  myProblem_   = theProblem;
  theSymTable_ = new WitSymTable (theProblem->myWitRun ());
  rc           = theSymTable_->registerRules ();
a1232 2
  if (rc)
     return rc;
d1234 13
a1246 1
  //#if defined (WIN32) or defined (__OS2__)
d1248 10
a1257 1
  //  yy_reset();
d1259 2
a1260 154
  //#endif

  rc = yyparse();

  if (rc)
  {
    WitParser::instance ()->prtSyntaxError(entryPtr,
       WitParser::instance ()->parseState(),
      reinterpret_cast <const char *> (yytext));
    WitParser::instance ()->myMsgFac () ("lineNumberMsg",
      reinterpret_cast <const char *> (yytext),
      WitParlex::lineno(), WitParlex::fileName());
    WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
  }

  delete theSymTable_;
  return rc;
}
#line 795 "y.tab.c"
/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack()
{
    int newsize, i;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = yystacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;
    i = yyssp - yyss;
    newss = yyss ? (short *)realloc(yyss, newsize * sizeof *newss) :
      (short *)malloc(newsize * sizeof *newss);
    if (newss == NULL)
        return -1;
    yyss = newss;
    yyssp = newss + i;
    newvs = yyvs ? (YYSTYPE *)realloc(yyvs, newsize * sizeof *newvs) :
      (YYSTYPE *)malloc(newsize * sizeof *newvs);
    if (newvs == NULL)
        return -1;
    yyvs = newvs;
    yyvsp = newvs + i;
    yystacksize = newsize;
    yysslim = yyss + newsize - 1;
    return 0;
}

#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab

#ifndef YYPARSE_PARAM
#if defined(__cplusplus) || __STDC__
#define YYPARSE_PARAM_ARG void
#define YYPARSE_PARAM_DECL
#else	/* ! ANSI-C/C++ */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif	/* ANSI-C/C++ */
#else	/* YYPARSE_PARAM */
#ifndef YYPARSE_PARAM_TYPE
#define YYPARSE_PARAM_TYPE void *
#endif
#if defined(__cplusplus) || __STDC__
#define YYPARSE_PARAM_ARG YYPARSE_PARAM_TYPE YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else	/* ! ANSI-C/C++ */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL YYPARSE_PARAM_TYPE YYPARSE_PARAM;
#endif	/* ANSI-C/C++ */
#endif	/* ! YYPARSE_PARAM */

int
yyparse (YYPARSE_PARAM_ARG)
    YYPARSE_PARAM_DECL
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register const char *yys;

    if ((yys = getenv("YYDEBUG")))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    if (yyss == NULL && yygrowstack()) goto yyoverflow;
    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if ((yyn = yydefred[yystate])) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yysslim && yygrowstack())
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#if defined(lint) || defined(__GNUC__)
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#if defined(lint) || defined(__GNUC__)
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
a1261 81
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yysslim && yygrowstack())
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 4:
#line 149 "../src/witParse.y"
{
      delete WitParser::instance ()->currentEntity_;
      WitParser::instance ()->currentEntity_ = NULL;
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ = NULL;
    }
break;
case 5:
#line 158 "../src/witParse.y"
{ 
      delete WitParser::instance ()->currentEntity_;
      WitParser::instance ()->currentEntity_ = NULL;
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ = NULL;
    }
break;
case 6:
#line 167 "../src/witParse.y"
{
d1268 4
a1271 3
    }
break;
case 7:
d1273 4
a1276 3
{ WitParser::instance ()->setParseState(WitParser::PS_release); }
break;
case 8:
d1278 1
a1278 1
{
d1280 4
a1283 3
    }
break;
case 9:
d1285 1
a1285 1
{
d1288 4
a1291 3
    }
break;
case 10:
d1293 1
a1293 1
{ if (!checkrel(yylval.strval)) {    /* check table of valid releases */
d1304 4
a1307 3
    }
break;
case 11:
d1309 1
a1309 1
{ 
d1313 4
a1316 3
    }
break;
case 12:
d1318 1
a1318 1
{
d1341 4
a1344 3
    }
break;
case 13:
d1346 1
a1346 1
{
d1348 4
a1351 3
    }
break;
case 14:
d1353 2
a1354 2
{
      /* create a WitEntity object*/
d1362 4
a1365 3
    }
break;
case 15:
d1367 1
a1367 1
{
d1371 1
a1371 1
      /* create a WitEntity object*/
d1381 4
a1384 3
    }
break;
case 16:
d1386 1
a1386 1
{
d1390 1
a1390 1
      /* create a WitEntity object*/
d1400 4
a1403 3
    }
break;
case 17:
d1405 1
a1405 1
{
d1407 4
a1410 3
    }
break;
case 18:
d1412 1
a1412 1
{ 
d1416 4
a1419 3
    }
break;
case 19:
d1421 1
a1421 1
{
d1423 4
a1426 3
    }
break;
case 20:
d1428 2
a1429 2
{
      /* create a WitEntity object*/
d1460 4
a1463 3
    }
break;
case 21:
d1465 1
a1465 1
{
d1469 4
a1472 3
    }
break;
case 22:
d1474 1
a1474 1
{
d1478 4
a1481 3
    }
break;
case 23:
d1483 1
a1483 1
{
d1487 4
a1490 3
    }
break;
case 24:
d1492 1
a1492 1
{
d1496 4
a1499 3
    }
break;
case 25:
d1501 1
a1501 1
{
d1505 4
a1508 3
    }
break;
case 26:
d1510 1
a1510 1
{
d1514 4
a1517 3
    }
break;
case 28:
d1519 1
a1519 1
{
d1576 4
a1579 3
    }
break;
case 30:
d1581 1
a1581 1
{ 
d1584 4
a1587 3
    }
break;
case 32:
d1589 1
a1589 1
{
d1633 4
a1636 3
    }
break;
case 35:
d1638 1
a1638 1
{
d1692 4
a1695 3
    }
break;
case 36:
d1697 1
a1697 1
{
d1725 4
a1728 3
    }
break;
case 40:
d1730 1
a1730 1
{
d1764 4
a1767 3
    }
break;
case 41:
d1769 1
a1769 1
{
d1818 4
a1821 3
    }
break;
case 42:
d1823 4
a1826 3
{ yyval.pval = WitDRParmType::undefined; }
break;
case 43:
d1828 4
a1831 3
{ yyval.pval = WitDRParmType::string; }
break;
case 44:
d1833 4
a1836 3
{ yyval.pval = WitDRParmType::intScalar; }
break;
case 45:
d1838 4
a1841 3
{ yyval.pval = WitDRParmType::doubleScalar; }
break;
case 46:
d1843 4
a1846 3
{ yyval.pval = WitDRParmType::boolScalar; }
break;
case 47:
d1848 1
a1848 1
{
d1851 1
a1851 1
      /* Construct a VectorSpec object*/
d1870 4
a1873 3
    }
break;
case 48:
d1875 1
a1875 1
{
d1877 4
a1880 3
    }
break;
case 49:
d1882 1
a1882 1
{
d1884 4
a1887 3
    }
break;
case 50:
d1889 1
a1889 1
{
d1891 4
a1894 3
    }
break;
case 51:
d1896 1
a1896 1
{
d1917 4
a1920 3
    }
break;
case 52:
d1922 1
a1922 1
{
d1924 4
a1927 3
    }
break;
case 53:
d1929 1
a1929 1
{
d1931 4
a1934 3
    }
break;
case 54:
d1936 1
a1936 1
{
d1939 1
a1939 1
      /* Construct a VectorSpec object*/
d1956 4
a1959 3
    }
break;
case 55:
d1961 1
a1961 1
{
d1963 4
a1966 3
    }
break;
case 56:
d1968 1
a1968 1
{
d1970 4
a1973 3
    }
break;
case 58:
d1975 1
a1975 1
{
d1977 4
a1980 3
    }
break;
case 59:
d1982 1
a1982 1
{
d1984 4
a1987 3
    }
break;
case 60:
d1989 1
a1989 1
{ 
d1992 4
a1995 3
    }
break;
case 63:
d1997 1
a1997 1
{
d2088 804
a2891 12
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        retcode = 0;
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
      }
    }
break;
case 64:
#line 956 "../src/witParse.y"
{
      WitParser::instance ()->setParseState(WitParser::PS_period);
d2893 1
a2893 19
      retcode = vecPtr->addPeriodVal(yylval.intval);
      if (retcode == PERIOD_ERROR) {
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      }
      if (retcode == PERIOD_DUP) {
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      }
    }
break;
case 65:
#line 972 "../src/witParse.y"
{  
      /* lookup rule for this attribute and save symbol table pointer */
      entryPtr = WitParser::instance ()->currentAttr_->
         lookupRule (
            WitParser::instance ()->theSymTable_,
            WitParser::instance ()->currentRule_);
d2895 4
a2898 21
      if (entryPtr == NULL) {
        WitParser::instance ()->myMsgFac () ("noAttributeDefMsg",
          WitParser::instance ()->currentAttr_->attrID(),
          WitParser::instance ()->currentEntity_->entityID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
    }
break;
case 66:
#line 990 "../src/witParse.y"
{
      bndPtr = NULL;
      WitParser::instance ()->setParseState(WitParser::PS_endBounds);
    }
break;
case 67:
#line 997 "../src/witParse.y"
{
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);
d2900 1
a2900 2
      /* Construct a BoundSetSpec object*/
      bndPtr = new WitBoundSetSpec(WitBoundSetSpec::exec);
d2902 4
a2905 4
      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;
d2907 1
a2907 8
      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitAttribute::boundSet);
d2909 1
a2909 1
      argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);
d2911 11
a2921 8
      free (yylval.strval);
      yyval.strval = yyvsp[0].strval;
    }
break;
case 68:
#line 1024 "../src/witParse.y"
{ 
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);
d2923 3
a2925 2
      /* Construct a BoundSetSpec object*/
      bndPtr = new WitBoundSetSpec(WitBoundSetSpec::stock);
d2927 1
a2927 4
      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;
d2929 2
a2930 17
      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitAttribute::boundSet);

      argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);

      free (yylval.strval);
      yyval.strval = yyvsp[0].strval;
    }
break;
case 69:
#line 1051 "../src/witParse.y"
d2932 1
a2932 1
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);
d2934 2
a2935 2
      /* Construct a BoundSetSpec object*/
      bndPtr = new WitBoundSetSpec(WitBoundSetSpec::cumShip);
d2937 3
a2939 4
      WitParser::instance ()->previousRule_ =
         WitParser::instance ()->currentRule_.replace(0, 3, "set");
      WitParser::instance ()->currentRule_ += "_";
      WitParser::instance ()->currentRule_ += yylval.strval;
d2941 2
a2942 9
      /* create a new WitAttribute object */
      if (WitParser::instance ()->currentAttr_ != NULL)
        delete WitParser::instance ()->currentAttr_;
      WitParser::instance ()->currentAttr_ =
         new WitAttribute (
            WitParser::instance ()->myProblem (),
            yylval.strval,
            WitAttribute::boundSet);
      argPtr = WitParser::instance ()->currentAttr_->setBoundSetArg(bndPtr);
d2944 1
a2944 23
      free (yylval.strval);
      yyval.strval = yyvsp[0].strval;
    }
break;
case 71:
#line 1081 "../src/witParse.y"
{
      WitParser::instance ()->setParseState(WitParser::PS_nextBound);
    }
break;
case 72:
#line 1087 "../src/witParse.y"
{
      WitParser::instance ()->setParseState(WitParser::PS_boundType);
    }
break;
case 73:
#line 1092 "../src/witParse.y"
{
       switch (yyvsp[-2].btype) {
         case WitBoundSetSpec::hardlb:
           bndPtr->setHardLBVec(vecPtr);
           break;
d2946 1
a2946 3
         case WitBoundSetSpec::softlb:
           bndPtr->setSoftLBVec(vecPtr);
           break;
d2948 1
a2948 73
         case WitBoundSetSpec::hardub:
           bndPtr->setHardUBVec(vecPtr);
           break;
       }
    }
break;
case 74:
#line 1110 "../src/witParse.y"
{
      if (bndPtr->hardLBVec() != NULL) {
        WitParser::instance ()->myMsgFac () ("duplicateHardLBMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      };
      yyval.btype = WitBoundSetSpec::hardlb;
    }
break;
case 75:
#line 1121 "../src/witParse.y"
{
      if (bndPtr->softLBVec() != NULL) {
        WitParser::instance ()->myMsgFac () ("duplicateSoftLBMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      };
      yyval.btype = WitBoundSetSpec::softlb;
    }
break;
case 76:
#line 1132 "../src/witParse.y"
{
      if (bndPtr->hardUBVec() != NULL) {
        WitParser::instance ()->myMsgFac () ("duplicateHardUBMsg",
          WitParser::instance ()->currentAttr_->attrID());
        WitParser::instance ()->currentAttr_->setInvalid(true);
        prterror();
      };
      yyval.btype = WitBoundSetSpec::hardub;
    }
break;
case 77:
#line 1144 "../src/witParse.y"
{
      WitParser::instance ()->setParseState(WitParser::PS_read);
      commandState = WitParser::PS_read;
      WitParser::instance ()->currentRule_ = "read";
      /* printf("Current rule is: %s\n", WitParser::instance ()->currentRule_);*/
    }
break;
case 78:
#line 1152 "../src/witParse.y"
{
      WitParser::instance ()->setParseState(WitParser::PS_commandEnd);
    }
break;
case 79:
#line 1157 "../src/witParse.y"
{
      /* save lexer state and shift input stream to new file */
      errno   = 0;
      retcode = WitParlex::saveFile(yylval.strval);
      if (retcode == FOPEN_ERROR) {
        yylval.strval[strlen(yylval.strval)-1] = '\0';
        WitParser::instance ()->myMsgFac () ("fopenSmsg",
           yylval.strval+1,
          "r",
          errno,
          strerror(errno));
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
d2950 1
a2950 5
      if (retcode == STACK_OVERFLOW) {
        WitParser::instance ()->myMsgFac () ("stackOverflowMsg", STACKSIZE);
        prterror();
        WitParser::instance ()->myMsgFac () ("parsingStopsMsg");
      }
d2952 10
a2961 1
/*    printf("Lexer is now reading from file %s\n", WitParlex::fileName());*/
d2963 3
a2965 6
      WitParser::instance ()->setDataFileName   ();
      WitParser::instance ()->setDataFileLineNo ();

      /*#if defined (__GNUC__)*/
      yyrestart(yyin);
      /*#endif*/
a2966 61
      WitParser::instance ()->setParseState(WitParser::PS_initial);
      free (yylval.strval);
    }
break;
#line 2043 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yysslim && yygrowstack())
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
@


1.3
log
@Changed a comment.
@
text
@d19 1
a19 1
 *     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.2
log
@Updated release number to 7.0.
@
text
@d101 1
a101 1
   /* (i.e., valid values for the "release" statement)*/
@


1.1
log
@Adding witLexer.C, witParse.C and ytab.h to the src code.  Also modified
witLexer.l and witParse.y to remove gnu and win32 dependencies.
@
text
@d98 5
a102 2
    /* valid "release" numbers (i.e,, the version of the software) */
char      *relnum[] = {"4.0", "5.0", "6.0"};
d107 1
a107 1
#line 91 "../src/witParse.y"
d117 1
a117 1
#line 115 "y.tab.c"
d412 1
a412 1
#line 1195 "../src/witParse.y"
d794 1
a794 1
#line 792 "y.tab.c"
d990 1
a990 1
#line 146 "../src/witParse.y"
d1000 1
a1000 1
#line 155 "../src/witParse.y"
d1010 1
a1010 1
#line 164 "../src/witParse.y"
d1021 1
a1021 1
#line 175 "../src/witParse.y"
d1025 1
a1025 1
#line 178 "../src/witParse.y"
d1031 1
a1031 1
#line 183 "../src/witParse.y"
d1038 1
a1038 1
#line 190 "../src/witParse.y"
d1053 1
a1053 1
#line 205 "../src/witParse.y"
d1061 1
a1061 1
#line 212 "../src/witParse.y"
d1088 1
a1088 1
#line 238 "../src/witParse.y"
d1094 1
a1094 1
#line 244 "../src/witParse.y"
d1107 1
a1107 1
#line 256 "../src/witParse.y"
d1125 1
a1125 1
#line 274 "../src/witParse.y"
d1143 1
a1143 1
#line 291 "../src/witParse.y"
d1149 1
a1149 1
#line 296 "../src/witParse.y"
d1157 1
a1157 1
#line 303 "../src/witParse.y"
d1163 1
a1163 1
#line 309 "../src/witParse.y"
d1199 1
a1199 1
#line 345 "../src/witParse.y"
d1207 1
a1207 1
#line 352 "../src/witParse.y"
d1215 1
a1215 1
#line 359 "../src/witParse.y"
d1223 1
a1223 1
#line 366 "../src/witParse.y"
d1231 1
a1231 1
#line 373 "../src/witParse.y"
d1239 1
a1239 1
#line 380 "../src/witParse.y"
d1247 1
a1247 1
#line 391 "../src/witParse.y"
d1308 1
a1308 1
#line 454 "../src/witParse.y"
d1315 1
a1315 1
#line 462 "../src/witParse.y"
d1363 1
a1363 1
#line 514 "../src/witParse.y"
d1421 1
a1421 1
#line 571 "../src/witParse.y"
d1453 1
a1453 1
#line 611 "../src/witParse.y"
d1491 1
a1491 1
#line 649 "../src/witParse.y"
d1544 1
a1544 1
#line 701 "../src/witParse.y"
d1548 1
a1548 1
#line 705 "../src/witParse.y"
d1552 1
a1552 1
#line 708 "../src/witParse.y"
d1556 1
a1556 1
#line 711 "../src/witParse.y"
d1560 1
a1560 1
#line 714 "../src/witParse.y"
d1564 1
a1564 1
#line 718 "../src/witParse.y"
d1590 1
a1590 1
#line 743 "../src/witParse.y"
d1596 1
a1596 1
#line 748 "../src/witParse.y"
d1602 1
a1602 1
#line 753 "../src/witParse.y"
d1608 1
a1608 1
#line 758 "../src/witParse.y"
d1633 1
a1633 1
#line 782 "../src/witParse.y"
d1639 1
a1639 1
#line 788 "../src/witParse.y"
d1645 1
a1645 1
#line 793 "../src/witParse.y"
d1669 1
a1669 1
#line 816 "../src/witParse.y"
d1675 1
a1675 1
#line 822 "../src/witParse.y"
d1681 1
a1681 1
#line 829 "../src/witParse.y"
d1687 1
a1687 1
#line 836 "../src/witParse.y"
d1693 1
a1693 1
#line 841 "../src/witParse.y"
d1700 1
a1700 1
#line 852 "../src/witParse.y"
d1801 1
a1801 1
#line 953 "../src/witParse.y"
d1817 1
a1817 1
#line 969 "../src/witParse.y"
d1836 1
a1836 1
#line 987 "../src/witParse.y"
d1843 1
a1843 1
#line 994 "../src/witParse.y"
d1871 1
a1871 1
#line 1021 "../src/witParse.y"
d1899 1
a1899 1
#line 1048 "../src/witParse.y"
d1926 1
a1926 1
#line 1078 "../src/witParse.y"
d1932 1
a1932 1
#line 1084 "../src/witParse.y"
d1938 1
a1938 1
#line 1089 "../src/witParse.y"
d1956 1
a1956 1
#line 1107 "../src/witParse.y"
d1968 1
a1968 1
#line 1118 "../src/witParse.y"
d1980 1
a1980 1
#line 1129 "../src/witParse.y"
d1992 1
a1992 1
#line 1141 "../src/witParse.y"
d2001 1
a2001 1
#line 1149 "../src/witParse.y"
d2007 1
a2007 1
#line 1154 "../src/witParse.y"
d2042 1
a2042 1
#line 2040 "y.tab.c"
@

