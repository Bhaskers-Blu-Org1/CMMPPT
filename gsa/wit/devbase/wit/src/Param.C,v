head	1.20;
access;
symbols
	sce_5_01_20080919:1.15
	latest_sce_4_20_20060523:1.15.0.2
	sce_4_20_20060523:1.15
	latest_sce4_20_OSL:1.14.0.2
	sce_4_20_OSL:1.14
	sce_410_withVa:1.14
	sce_4_05_20040511:1.14
	sce_4_00_20040201:1.13
	nextGenBranch:1.13.0.2
	nextGenRoot:1.13
	sce_3_30_20030627:1.13
	EndRw-branch:1.10.0.4
	Root-of-EndRw:1.10
	rwToStl:1.10.0.2
	latest_sce_3_10_20010924:1.8.0.6
	sce_3_10_20010924:1.8
	latest_sce_3_00_20010601:1.8.0.4
	sce_3_00_20010601:1.8
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8
	latest_sce_2_31_20001003:1.7.0.2
	sce_2_31_20001003:1.7
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2011.09.28.23.49.48;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.24.00.28.09;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.30.20.17.50;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.03.04.22.18.35;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.01.25.19.45.18;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.02.17.34.06;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.13.21.50.14;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.11.19.35.38;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.02.23.40.46;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.22.18.41;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.08.21.58.56;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.18.14.02.39;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.20.00.44.20;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.07.16.56.36;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.07.16.12.44;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.01.21.01.35;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.01.17.57.02;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.01.16.19.42;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.01.16.14.36;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.27;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.27;	author wit;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "Param.C"
//
// Contains the implementation of the following classes:
//
//    Param
//    StringParam
//    IntParam
//    DoubleParam
//    ChoiceParm
//------------------------------------------------------------------------------

#include <Param.h>
#include <ParamMgr.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class Param.
//------------------------------------------------------------------------------

WitParam::~WitParam ()
   {
   }

//------------------------------------------------------------------------------

const WitString & WitParam::itsName (const WitParam * theParam)
   {
   return theParam->myName ();
   }

//------------------------------------------------------------------------------

WitParam::WitParam (
         const char *  theName,
         const char *  theText,
         WitParamMgr * theParamMgr):

      myName_     (theName),
      myText_     (theText),
      myParamMgr_ (theParamMgr),
      myMsgFac_   (theParamMgr->myMsgFac ())
   {
   stronglyAssert (myName_.length () <= 15);
   stronglyAssert (myText_.length () <= 39);

   myParamMgr ()->store (this);
   }

//------------------------------------------------------------------------------
// Implementation of class StringParam.
//------------------------------------------------------------------------------

WitStringParam::WitStringParam (
         const char *  theName,
         const char *  theText,
         const char *  initValue,
         WitParamMgr * theParamMgr):

      WitParam (theName, theText, theParamMgr),

      myValue_ (initValue)
   {
   }

//------------------------------------------------------------------------------

WitStringParam::~WitStringParam ()
   {
   }

//------------------------------------------------------------------------------

void WitStringParam::parse (const WitString & theToken)
   {
   myValue_ = theToken;
   }

//------------------------------------------------------------------------------

void WitStringParam::print ()
   {
   myMsgFac () ("stringParamMsg", myName (), myText (), myValue ());
   }

//------------------------------------------------------------------------------

const WitString & WitStringParam::itsName (
      const WitStringParam * theStringParam)
   {
   return theStringParam->myName ();
   }

//------------------------------------------------------------------------------
// Implementation of class IntParam.
//------------------------------------------------------------------------------

WitIntParam::WitIntParam (
         const char *  theName,
         const char *  theText,
         int           theLB,
         int           theUB,
         int           initValue,
         WitParamMgr * theParamMgr):

      WitParam (theName, theText, theParamMgr),

      lb_      (theLB),
      ub_      (theUB),
      myValue_ (0)
   {
   stronglyAssert (lbSatisfied (initValue));
   stronglyAssert (ubSatisfied (initValue));

   myValue_ = initValue;
   }

//------------------------------------------------------------------------------

WitIntParam::~WitIntParam ()
   {
   }

//------------------------------------------------------------------------------

bool WitIntParam::lbSatisfied (int theValue)
   {
   return
      (lb_ < 0)?
         true:
         (theValue >= lb_);
   }

//------------------------------------------------------------------------------

bool WitIntParam::ubSatisfied (int theValue)
   {
   return
      (ub_ < 0)?
         true:
         (theValue <= ub_);
   }

//------------------------------------------------------------------------------

void WitIntParam::parse (const WitString & theToken)
   {
   int scanResult;
   int theValue;

   scanResult = sscanf (theToken.myCstring (), "%d", & theValue);

   if (scanResult != 1)
      myMsgFac () (
         "paramMustBeIntSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken);

   if (not lbSatisfied (theValue))
      myMsgFac () (
         "intParamTooLowSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken,
         lb_);

   if (not ubSatisfied (theValue))
      myMsgFac () (
         "intParamTooHighSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken,
         ub_);

   myValue_ = theValue;
   }

//------------------------------------------------------------------------------

void WitIntParam::print ()
   {
   myMsgFac () ("intParamMsg", myName (), myText (), myValue ());
   }

//------------------------------------------------------------------------------

const WitString & WitIntParam::itsName (const WitIntParam * theIntParam)
   {
   return theIntParam->myName ();
   }

//------------------------------------------------------------------------------
// Implementation of class DoubleParam.
//------------------------------------------------------------------------------

WitDoubleParam::WitDoubleParam (
         const char *  theName,
         const char *  theText,
         double        theLB,
         double        initValue,
         WitParamMgr * theParamMgr):

      WitParam (theName, theText, theParamMgr),

      lb_      (theLB),
      myValue_ (0.0)
   {
   stronglyAssert (lbSatisfied (initValue));

   myValue_ = initValue;
   }

//------------------------------------------------------------------------------

WitDoubleParam::~WitDoubleParam ()
   {
   }

//------------------------------------------------------------------------------

bool WitDoubleParam::lbSatisfied (double theValue)
   {
   return
      (lb_ < 0.0)?
         true:
         (theValue >= lb_ * .999);
   }

//------------------------------------------------------------------------------

void WitDoubleParam::parse (const WitString & theToken)
   {
   int    scanResult;
   double theValue;

   scanResult = sscanf (theToken.myCstring (), "%lf", & theValue);

   if (scanResult != 1)
      myMsgFac () (
         "paramMustBeDblSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken);

   if (not lbSatisfied (theValue))
      myMsgFac () (
         "dblParamTooLowSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken,
         lb_);

   myValue_ = theValue;
   }

//------------------------------------------------------------------------------

void WitDoubleParam::print ()
   {
   myMsgFac () ("dblParamMsg", myName (), myText (), myValue ());
   }

//------------------------------------------------------------------------------

const WitString & WitDoubleParam::itsName (
      const WitDoubleParam * theDoubleParam)
   {
   return theDoubleParam->myName ();
   }

//------------------------------------------------------------------------------
// Implementation of class ChoiceParam.
//------------------------------------------------------------------------------

WitChoiceParam::WitChoiceParam (
         const char *  theName,
         const char *  theText,
         WitParamMgr * theParamMgr):

      WitParam (theName, theText, theParamMgr),

      allChoices_ (),
      myValue_    (NULL)
   {
   }

//------------------------------------------------------------------------------

WitChoiceParam::~WitChoiceParam ()
   {
   while (not allChoices_.isEmpty ())
      delete allChoices_.get ();
   }

//------------------------------------------------------------------------------

void WitChoiceParam::parse (const WitString & theToken)
   {
   const WitString * theChoice;
   WitString *       validChoice;

   theChoice =
      allChoices_.find (& WitString::thisString, theToken.myCstring ());

   if (theChoice == NULL)
      {
      myMsgFac () (
         "paramReadErrorInvalidChoiceMain",
         myParamMgr ()->fileName (),
         myName (),
         theToken);

      forEachEl (validChoice, allChoices_)
         myMsgFac () ("paramReadErrorInvalidChoiceAlt", (* validChoice));

      myMsgFac () ("paramReadErrorInvalidChoiceEnd");
      }

   myValue_ = theChoice;
   }

//------------------------------------------------------------------------------

void WitChoiceParam::print ()
   {
   myMsgFac () ("stringParamMsg", myName (), myText (), myValue ());
   }

//------------------------------------------------------------------------------

void WitChoiceParam::addChoice (const char * theChoice)
   {
   allChoices_.append (new WitString (theChoice));
   }

//------------------------------------------------------------------------------

void WitChoiceParam::choose (const char * theCstring)
   {
   const WitString * theChoice;

   theChoice = allChoices_.find (& WitString::thisString, theCstring);

   stronglyAssert (theChoice != NULL);

   myValue_ = theChoice;
   }
//------------------------------------------------------------------------------

const WitString & WitChoiceParam::itsName (
      const WitChoiceParam * theChoiceParam)
   {
   return theChoiceParam->myName ();
   }
@


1.19
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.18
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d31 2
a32 2
{
}
d37 3
a39 3
{
return theParam->myName ();
}
d44 11
a54 11
const char *  theName,
const char *  theText,
WitParamMgr * theParamMgr):

myName_     (theName),
myText_     (theText),
myParamMgr_ (theParamMgr),
myMsgFac_   (theParamMgr->myMsgFac ())
{
stronglyAssert (myName_.length () <= 15);
stronglyAssert (myText_.length () <= 39);
d56 2
a57 2
myParamMgr ()->store (this);
}
d64 10
a73 10
const char *  theName,
const char *  theText,
const char *  initValue,
WitParamMgr * theParamMgr):

WitParam (theName, theText, theParamMgr),

myValue_ (initValue)
{
}
d78 2
a79 2
{
}
d84 3
a86 3
{
myValue_ = theToken;
}
d91 3
a93 3
{
myMsgFac () ("stringParamMsg", myName (), myText (), myValue ());
}
d98 4
a101 4
const WitStringParam * theStringParam)
{
return theStringParam->myName ();
}
d108 15
a122 15
const char *  theName,
const char *  theText,
int           theLB,
int           theUB,
int           initValue,
WitParamMgr * theParamMgr):

WitParam (theName, theText, theParamMgr),

lb_      (theLB),
ub_      (theUB),
myValue_ (0)
{
stronglyAssert (lbSatisfied (initValue));
stronglyAssert (ubSatisfied (initValue));
d124 2
a125 2
myValue_ = initValue;
}
d130 2
a131 2
{
}
d136 6
a141 6
{
return
(lb_ < 0)?
true:
(theValue >= lb_);
}
d146 6
a151 6
{
return
(ub_ < 0)?
true:
(theValue <= ub_);
}
d156 28
a183 28
{
int scanResult;
int theValue;

scanResult = sscanf (theToken.myCstring (), "%d", & theValue);

if (scanResult != 1)
myMsgFac () (
"paramMustBeIntSmsg",
myParamMgr ()->fileName (),
myName (),
theToken);

if (not lbSatisfied (theValue))
myMsgFac () (
"intParamTooLowSmsg",
myParamMgr ()->fileName (),
myName (),
theToken,
lb_);

if (not ubSatisfied (theValue))
myMsgFac () (
"intParamTooHighSmsg",
myParamMgr ()->fileName (),
myName (),
theToken,
ub_);
d185 2
a186 2
myValue_ = theValue;
}
d191 3
a193 3
{
myMsgFac () ("intParamMsg", myName (), myText (), myValue ());
}
d198 3
a200 3
{
return theIntParam->myName ();
}
d207 12
a218 12
const char *  theName,
const char *  theText,
double        theLB,
double        initValue,
WitParamMgr * theParamMgr):

WitParam (theName, theText, theParamMgr),

lb_      (theLB),
myValue_ (0.0)
{
stronglyAssert (lbSatisfied (initValue));
d220 2
a221 2
myValue_ = initValue;
}
d226 2
a227 2
{
}
d232 6
a237 6
{
return
(lb_ < 0.0)?
true:
(theValue >= lb_ * .999);
}
d242 20
a261 20
{
int    scanResult;
double theValue;

scanResult = sscanf (theToken.myCstring (), "%lf", & theValue);

if (scanResult != 1)
myMsgFac () (
"paramMustBeDblSmsg",
myParamMgr ()->fileName (),
myName (),
theToken);

if (not lbSatisfied (theValue))
myMsgFac () (
"dblParamTooLowSmsg",
myParamMgr ()->fileName (),
myName (),
theToken,
lb_);
d263 2
a264 2
myValue_ = theValue;
}
d269 3
a271 3
{
myMsgFac () ("dblParamMsg", myName (), myText (), myValue ());
}
d276 4
a279 4
const WitDoubleParam * theDoubleParam)
{
return theDoubleParam->myName ();
}
d286 10
a295 10
const char *  theName,
const char *  theText,
WitParamMgr * theParamMgr):

WitParam (theName, theText, theParamMgr),

allChoices_ (),
myValue_    (NULL)
{
}
d300 4
a303 4
{
while (not allChoices_.isEmpty ())
delete allChoices_.get ();
}
d308 14
a321 14
{
const WitString * theChoice;
WitString *       validChoice;

theChoice =
allChoices_.find (& WitString::thisString, theToken.myCstring ());

if (theChoice == NULL)
{
myMsgFac () (
"paramReadErrorInvalidChoiceMain",
myParamMgr ()->fileName (),
myName (),
theToken);
d323 2
a324 2
forEachEl (validChoice, allChoices_)
myMsgFac () ("paramReadErrorInvalidChoiceAlt", (* validChoice));
d326 2
a327 2
myMsgFac () ("paramReadErrorInvalidChoiceEnd");
}
d329 2
a330 2
myValue_ = theChoice;
}
d335 3
a337 3
{
myMsgFac () ("stringParamMsg", myName (), myText (), myValue ());
}
d342 3
a344 3
{
allChoices_.append (new WitString (theChoice));
}
d349 2
a350 2
{
const WitString * theChoice;
d352 1
a352 1
theChoice = allChoices_.find (& WitString::thisString, theCstring);
d354 1
a354 1
stronglyAssert (theChoice != NULL);
d356 2
a357 2
myValue_ = theChoice;
}
d361 4
a364 4
const WitChoiceParam * theChoiceParam)
{
return theChoiceParam->myName ();
}
@


1.17
log
@Multi-Obj Mode
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d31 2
a32 2
   {
   }
d37 3
a39 3
   {
   return theParam->myName ();
   }
d44 11
a54 11
         const char *  theName,
         const char *  theText,
         WitParamMgr * theParamMgr):

      myName_     (theName),
      myText_     (theText),
      myParamMgr_ (theParamMgr),
      myMsgFac_   (theParamMgr->myMsgFac ())
   {
   stronglyAssert (myName_.length () <= 15);
   stronglyAssert (myText_.length () <= 39);
d56 2
a57 2
   myParamMgr ()->store (this);
   }
d64 10
a73 10
         const char *  theName,
         const char *  theText,
         const char *  initValue,
         WitParamMgr * theParamMgr):

      WitParam (theName, theText, theParamMgr),

      myValue_ (initValue)
   {
   }
d78 2
a79 2
   {
   }
d84 3
a86 3
   {
   myValue_ = theToken;
   }
d91 3
a93 3
   {
   myMsgFac () ("stringParamMsg", myName (), myText (), myValue ());
   }
d98 4
a101 4
      const WitStringParam * theStringParam)
   {
   return theStringParam->myName ();
   }
d108 15
a122 15
         const char *  theName,
         const char *  theText,
         int           theLB,
         int           theUB,
         int           initValue,
         WitParamMgr * theParamMgr):

      WitParam (theName, theText, theParamMgr),

      lb_      (theLB),
      ub_      (theUB),
      myValue_ (0)
   {
   stronglyAssert (lbSatisfied (initValue));
   stronglyAssert (ubSatisfied (initValue));
d124 2
a125 2
   myValue_ = initValue;
   }
d130 2
a131 2
   {
   }
d136 6
a141 6
   {
   return
      (lb_ < 0)?
         true:
         (theValue >= lb_);
   }
d146 6
a151 6
   {
   return
      (ub_ < 0)?
         true:
         (theValue <= ub_);
   }
d156 28
a183 28
   {
   int scanResult;
   int theValue;

   scanResult = sscanf (theToken.myCstring (), "%d", & theValue);

   if (scanResult != 1)
      myMsgFac () (
         "paramMustBeIntSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken);

   if (not lbSatisfied (theValue))
      myMsgFac () (
         "intParamTooLowSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken,
         lb_);

   if (not ubSatisfied (theValue))
      myMsgFac () (
         "intParamTooHighSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken,
         ub_);
d185 2
a186 2
   myValue_ = theValue;
   }
d191 3
a193 3
   {
   myMsgFac () ("intParamMsg", myName (), myText (), myValue ());
   }
d198 3
a200 3
   {
   return theIntParam->myName ();
   }
d207 12
a218 12
         const char *  theName,
         const char *  theText,
         double        theLB,
         double        initValue,
         WitParamMgr * theParamMgr):

      WitParam (theName, theText, theParamMgr),

      lb_      (theLB),
      myValue_ (0.0)
   {
   stronglyAssert (lbSatisfied (initValue));
d220 2
a221 2
   myValue_ = initValue;
   }
d226 2
a227 2
   {
   }
d232 6
a237 6
   {
   return
      (lb_ < 0.0)?
         true:
         (theValue >= lb_ * .999);
   }
d242 20
a261 20
   {
   int    scanResult;
   double theValue;

   scanResult = sscanf (theToken.myCstring (), "%lf", & theValue);

   if (scanResult != 1)
      myMsgFac () (
         "paramMustBeDblSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken);

   if (not lbSatisfied (theValue))
      myMsgFac () (
         "dblParamTooLowSmsg",
         myParamMgr ()->fileName (),
         myName (),
         theToken,
         lb_);
d263 2
a264 2
   myValue_ = theValue;
   }
d269 3
a271 3
   {
   myMsgFac () ("dblParamMsg", myName (), myText (), myValue ());
   }
d276 4
a279 4
      const WitDoubleParam * theDoubleParam)
   {
   return theDoubleParam->myName ();
   }
d286 10
a295 10
         const char *  theName,
         const char *  theText,
         WitParamMgr * theParamMgr):

      WitParam (theName, theText, theParamMgr),

      allChoices_ (),
      myValue_    (NULL)
   {
   }
d300 4
a303 4
   {
   while (not allChoices_.isEmpty ())
      delete allChoices_.get ();
   }
d308 14
a321 14
   {
   const WitString * theChoice;
   WitString *       validChoice;

   theChoice =
      allChoices_.find (& WitString::thisString, theToken.myCstring ());

   if (theChoice == NULL)
      {
      myMsgFac () (
         "paramReadErrorInvalidChoiceMain",
         myParamMgr ()->fileName (),
         myName (),
         theToken);
d323 2
a324 2
      forEachEl (validChoice, allChoices_)
         myMsgFac () ("paramReadErrorInvalidChoiceAlt", (* validChoice));
d326 2
a327 2
      myMsgFac () ("paramReadErrorInvalidChoiceEnd");
      }
d329 2
a330 2
   myValue_ = theChoice;
   }
d335 3
a337 3
   {
   myMsgFac () ("stringParamMsg", myName (), myText (), myValue ());
   }
d342 3
a344 3
   {
   allChoices_.append (new WitString (theChoice));
   }
d349 2
a350 2
   {
   const WitString * theChoice;
d352 1
a352 1
   theChoice = allChoices_.find (& WitString::thisString, theCstring);
d354 1
a354 1
   stronglyAssert (theChoice != NULL);
d356 2
a357 2
   myValue_ = theChoice;
   }
d361 4
a364 4
      const WitChoiceParam * theChoiceParam)
   {
   return theChoiceParam->myName ();
   }
@


1.16
log
@Multi-objective mode
@
text
@d18 1
d53 2
a54 2
   witAssert (myName_.length () <= 15);
   witAssert (myText_.length () <= 39);
d121 2
a122 2
   witAssert (lbSatisfied (initValue));
   witAssert (ubSatisfied (initValue));
d137 4
a140 3
   return (lb_ < 0)?
      true:
      (theValue >= lb_);
d147 4
a150 3
   return (ub_ < 0)?
      true:
      (theValue <= ub_);
d157 1
a158 2
      //
      // The value parsed.
d160 3
a162 1
   if (sscanf (theToken.myCstring (), "%d", & theValue) != 1)
d164 1
a164 1
         "paramReadErrorInt",
d171 1
a171 1
         "paramReadErrorTooLow",
d179 1
a179 1
         "paramReadErrorTooHigh",
d203 79
d354 1
a354 1
   witAssert (theChoice != NULL);
@


1.15
log
@Updated the copyright date on all source files.
@
text
@d70 1
a70 1
      myValue_ ()
a71 1
   myValue_.copyCstring (initValue);
@


1.14
log
@Double Precision.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.13
log
@Modifications for Linux port.
@
text
@d85 1
a85 1
   myValue_.copy (theToken);
@


1.12
log
@Internal changes.
@
text
@d230 2
a231 1
   theChoice = allChoices_.find (WitString::thisString, theToken.myCstring ());
d270 1
a270 1
   theChoice = allChoices_.find (WitString::thisString, theCstring);
@


1.11
log
@Internal changes.
@
text
@d166 1
a166 1
   if (! lbSatisfied (theValue))
d174 1
a174 1
   if (! ubSatisfied (theValue))
d219 1
a219 1
   while (!  allChoices_.isEmpty ())
@


1.10
log
@Preliminary work on single source.
@
text
@d135 1
a135 1
WitBoolean WitIntParam::lbSatisfied (int theValue)
d138 1
a138 1
      witTRUE:
d144 1
a144 1
WitBoolean WitIntParam::ubSatisfied (int theValue)
d147 1
a147 1
      witTRUE:
@


1.9
log
@Began implementation of object iteration.
@
text
@d72 1
a72 1
   myValue_ = initValue;
d85 1
a85 1
   myValue_ = theToken;
@


1.8
log
@Implemented and used class SelMgr.
@
text
@d23 1
@


1.7
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@a57 6

implementClearContents (WitParam)
   //
   // See RWClient.h.

//------------------------------------------------------------------------------
d218 2
a219 1
   allChoices_.clearContents ();
@


1.6
log
@Testing CVS commit.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
a18 4
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Test of CVS commit, 3/7/00.
@


1.5
log
@Testing CVS commit.
@
text
@d21 4
@


1.4
log
@testing cvs commit
@
text
@a8 1
// Testing cvs commit comment
@


1.3
log
@Removed changes for testing CVS commit.
@
text
@d9 1
@


1.2
log
@Testing CVS commit.
@
text
@a20 4
//------------------------------------------------------------------------------
// The purpose of this comment is to test cvs commit on the /u/wit directory.
//------------------------------------------------------------------------------

@


1.1
log
@Initial revision
@
text
@d21 4
@


1.1.1.1
log
@Import wit
@
text
@@
