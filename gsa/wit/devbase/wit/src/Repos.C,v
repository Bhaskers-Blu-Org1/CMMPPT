head	1.11;
access;
symbols
	sce_5_01_20080919:1.7
	latest_sce_4_20_20060523:1.5.0.2
	sce_4_20_20060523:1.5
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_410_withVa:1.1
	sce_4_05_20040511:1.1
	sce_4_00_20040201:1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.09.28.23.50.02;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.24.00.28.26;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.30.20.18.04;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.10.22.10.41;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.11.12.16.30.12;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.11.09.00.40.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.15.21.45.26;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.15.21.27.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.15.20.09.01;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.24.17.11.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "Repos.C"
//
// Contains the implementation of the following classes and templates:
//
//    DataRepos
//    VarRepos <Variable>
//    AttRepos <Object>
//------------------------------------------------------------------------------

#include <DataRepos.h>
#include <VarRepos.h>
#include <AttRepos.h>
#include <Operation.h>
#include <SubEntry.h>

//------------------------------------------------------------------------------
// Implementation of class DataRepos.
//------------------------------------------------------------------------------

WitDataRepos::WitDataRepos (WitProblem * theProblem):

      WitProbAssoc  (theProblem),
      myIntRepos_   (NULL),
      myBoolRepos_  (NULL),
      myDblRepos_   (NULL),
      myPtrRepos_   (NULL),
      execVolRepos_ (NULL),
      subVolRepos_  (NULL)
   {
   myIntRepos_   = new WitVarRepos <int>    (theProblem);
   myBoolRepos_  = new WitVarRepos <bool>   (theProblem);
   myDblRepos_   = new WitVarRepos <double> (theProblem);
   myPtrRepos_   = new WitVarRepos <void *> (theProblem);

   execVolRepos_ =
      new WitAttRepos <WitOperation> (theProblem,
                     & WitOperation:: execVol,
                     & WitOperation:: storeHeurExecVol);

   subVolRepos_ =
      new WitAttRepos  <WitSubEntry> (theProblem,
                      & WitSubEntry:: subVol,
                      & WitSubEntry:: storeHeurSubVol);
   }

//------------------------------------------------------------------------------

WitDataRepos::~WitDataRepos ()
   {
   delete subVolRepos_;
   delete execVolRepos_;
   delete myPtrRepos_;
   delete myDblRepos_;
   delete myBoolRepos_;
   delete myIntRepos_;
   }

//------------------------------------------------------------------------------

void WitDataRepos::saveVal (int & theVar)
   {
   myIntRepos_->saveVal (theVar);
   }

//------------------------------------------------------------------------------

void WitDataRepos::saveVal (bool & theVar)
   {
   myBoolRepos_->saveVal (theVar);
   }

//------------------------------------------------------------------------------

void WitDataRepos::saveVal (double & theVar)
   {
   myDblRepos_->saveVal (theVar);
   }

//------------------------------------------------------------------------------

void WitDataRepos::saveExecVol (WitOperation * theOpn, WitPeriod thePer)
   {
   execVolRepos_->saveValAt (theOpn, thePer);
   }

//------------------------------------------------------------------------------

void WitDataRepos::saveSubVol (WitSubEntry * theSub, WitPeriod thePer)
   {
   subVolRepos_->saveValAt (theSub, thePer);
   }

//------------------------------------------------------------------------------

void WitDataRepos::restore ()
   {
   myIntRepos_  ->restore ();
   myBoolRepos_ ->restore ();
   myDblRepos_  ->restore ();
   myPtrRepos_  ->restore ();
   execVolRepos_->restore ();
   subVolRepos_ ->restore ();
   }

//------------------------------------------------------------------------------

void WitDataRepos::restoreAndSave (WitDataRepos * theDataRepos)
   {
   myIntRepos_  ->restoreAndSave (theDataRepos->myIntRepos_);
   myBoolRepos_ ->restoreAndSave (theDataRepos->myBoolRepos_);
   myDblRepos_  ->restoreAndSave (theDataRepos->myDblRepos_);
   myPtrRepos_  ->restoreAndSave (theDataRepos->myPtrRepos_);
   execVolRepos_->restoreAndSave (theDataRepos->execVolRepos_);
   subVolRepos_ ->restoreAndSave (theDataRepos->subVolRepos_);
   }

//------------------------------------------------------------------------------

void WitDataRepos::clear ()
   {
   myIntRepos_  ->clear ();
   myBoolRepos_ ->clear ();
   myDblRepos_  ->clear ();
   myPtrRepos_  ->clear ();
   execVolRepos_->clear ();
   subVolRepos_ ->clear ();
   }

//------------------------------------------------------------------------------

bool WitDataRepos::isEmpty ()
   {
   return
          myIntRepos_ ->isEmpty ()
      and myBoolRepos_->isEmpty ()
      and myDblRepos_ ->isEmpty ()
      and myPtrRepos_ ->isEmpty ();
   }

//------------------------------------------------------------------------------

void WitDataRepos::savePtrVal (void * & theVoidPtr)
   {
   myPtrRepos_->saveVal (theVoidPtr);
   }

//------------------------------------------------------------------------------
// Implementation of class template VarRepos <Variable>.
//------------------------------------------------------------------------------

template <typename Variable>
      WitVarRepos <Variable>::WitVarRepos (WitProblem * theProblem):

         WitProbAssoc (theProblem),
         savedPairs_  (theProblem)
   {
   }

//------------------------------------------------------------------------------

template <typename Variable>
      WitVarRepos <Variable>::~WitVarRepos ()
   {
   }

//------------------------------------------------------------------------------

template <typename Variable>
      void WitVarRepos <Variable>::saveVal (Variable & theVar)
   {
   savedPairs_.push (& theVar, theVar);
   }

//------------------------------------------------------------------------------
    
template <typename Variable>
      void WitVarRepos <Variable>::restore ()
   {
   Variable * theVarPtr;
   Variable   theVal;

   while (savedPairs_.pop (theVarPtr, theVal))
      * theVarPtr = theVal;
   }

//------------------------------------------------------------------------------
    
template <typename Variable>
      void WitVarRepos <Variable>::restoreAndSave (WitVarRepos * theVarRepos)
   {
   Variable * theVarPtr;
   Variable   theVal;

   theVarRepos->clear ();

   while (savedPairs_.pop (theVarPtr, theVal))
      {
      theVarRepos->saveVal (* theVarPtr);

      * theVarPtr = theVal;
      }
   }

//------------------------------------------------------------------------------

template <typename Variable>
      void WitVarRepos <Variable>::clear ()
   {
   savedPairs_.clear ();
   }

//------------------------------------------------------------------------------
// Implementation of class template AttRepos <Object>.
//------------------------------------------------------------------------------

template <typename Object>
      WitAttRepos <Object>::WitAttRepos (
            WitProblem *                     theProblem,
            const WitDblFlexVec & (Object::* theAccFunc)   () const,
            void                  (Object::* theStoreFunc) (WitPeriod, double)):

         WitProbAssoc (theProblem),
         savedTrips_  (theProblem),
         myAccFunc_   (theAccFunc),
         myStoreFunc_ (theStoreFunc)
   {
   }

//------------------------------------------------------------------------------

template <typename Object>
      WitAttRepos <Object>::~WitAttRepos ()
   {
   }

//------------------------------------------------------------------------------

template <typename Object>
      void WitAttRepos <Object>::saveValAt (
         Object *  theObject,
         WitPeriod thePer)
   {
   double theValue;

   theValue = (theObject->*myAccFunc_) ()[thePer]; 

   savedTrips_.push (theObject, thePer, theValue);
   }

//------------------------------------------------------------------------------

template <typename Object>
      void WitAttRepos <Object>::restore ()
   {
   Object *  theObject;
   WitPeriod thePer;
   double    theValue;

   while (savedTrips_.pop (theObject, thePer, theValue))
      (theObject->*myStoreFunc_) (thePer, theValue);
   }

//------------------------------------------------------------------------------

template <typename Object>
      void WitAttRepos <Object>::restoreAndSave (WitAttRepos * theAttRepos)
   {
   Object *  theObject;
   WitPeriod thePer;
   double    theValue;

   witAssert (theAttRepos->myAccFunc_   == myAccFunc_);
   witAssert (theAttRepos->myStoreFunc_ == myStoreFunc_);

   theAttRepos->clear ();

   while (savedTrips_.pop (theObject, thePer, theValue))
      {
      theAttRepos->saveValAt (theObject, thePer);

      (theObject->*myStoreFunc_) (thePer, theValue);
      }
   }

//------------------------------------------------------------------------------

template <typename Object>
      void WitAttRepos <Object>::clear ()
   {
   savedTrips_.clear ();
   }
@


1.10
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.9
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 23
a54 23
WitProbAssoc  (theProblem),
myIntRepos_   (NULL),
myBoolRepos_  (NULL),
myDblRepos_   (NULL),
myPtrRepos_   (NULL),
execVolRepos_ (NULL),
subVolRepos_  (NULL)
{
myIntRepos_   = new WitVarRepos <int>    (theProblem);
myBoolRepos_  = new WitVarRepos <bool>   (theProblem);
myDblRepos_   = new WitVarRepos <double> (theProblem);
myPtrRepos_   = new WitVarRepos <void *> (theProblem);

execVolRepos_ =
new WitAttRepos <WitOperation> (theProblem,
& WitOperation:: execVol,
& WitOperation:: storeHeurExecVol);

subVolRepos_ =
new WitAttRepos  <WitSubEntry> (theProblem,
& WitSubEntry:: subVol,
& WitSubEntry:: storeHeurSubVol);
}
d59 8
a66 8
{
delete subVolRepos_;
delete execVolRepos_;
delete myPtrRepos_;
delete myDblRepos_;
delete myBoolRepos_;
delete myIntRepos_;
}
d71 3
a73 3
{
myIntRepos_->saveVal (theVar);
}
d78 3
a80 3
{
myBoolRepos_->saveVal (theVar);
}
d85 3
a87 3
{
myDblRepos_->saveVal (theVar);
}
d92 3
a94 3
{
execVolRepos_->saveValAt (theOpn, thePer);
}
d99 3
a101 3
{
subVolRepos_->saveValAt (theSub, thePer);
}
d106 8
a113 8
{
myIntRepos_  ->restore ();
myBoolRepos_ ->restore ();
myDblRepos_  ->restore ();
myPtrRepos_  ->restore ();
execVolRepos_->restore ();
subVolRepos_ ->restore ();
}
d118 8
a125 8
{
myIntRepos_  ->restoreAndSave (theDataRepos->myIntRepos_);
myBoolRepos_ ->restoreAndSave (theDataRepos->myBoolRepos_);
myDblRepos_  ->restoreAndSave (theDataRepos->myDblRepos_);
myPtrRepos_  ->restoreAndSave (theDataRepos->myPtrRepos_);
execVolRepos_->restoreAndSave (theDataRepos->execVolRepos_);
subVolRepos_ ->restoreAndSave (theDataRepos->subVolRepos_);
}
d130 8
a137 8
{
myIntRepos_  ->clear ();
myBoolRepos_ ->clear ();
myDblRepos_  ->clear ();
myPtrRepos_  ->clear ();
execVolRepos_->clear ();
subVolRepos_ ->clear ();
}
d142 7
a148 7
{
return
myIntRepos_ ->isEmpty ()
and myBoolRepos_->isEmpty ()
and myDblRepos_ ->isEmpty ()
and myPtrRepos_ ->isEmpty ();
}
d153 3
a155 3
{
myPtrRepos_->saveVal (theVoidPtr);
}
d162 1
a162 1
WitVarRepos <Variable>::WitVarRepos (WitProblem * theProblem):
d164 4
a167 4
WitProbAssoc (theProblem),
savedPairs_  (theProblem)
{
}
d172 3
a174 3
WitVarRepos <Variable>::~WitVarRepos ()
{
}
d179 4
a182 4
void WitVarRepos <Variable>::saveVal (Variable & theVar)
{
savedPairs_.push (& theVar, theVar);
}
d185 6
d192 3
a194 9
template <typename Variable>
void WitVarRepos <Variable>::restore ()
{
Variable * theVarPtr;
Variable   theVal;

while (savedPairs_.pop (theVarPtr, theVal))
* theVarPtr = theVal;
}
d197 1
a197 1

d199 14
a212 14
void WitVarRepos <Variable>::restoreAndSave (WitVarRepos * theVarRepos)
{
Variable * theVarPtr;
Variable   theVal;

theVarRepos->clear ();

while (savedPairs_.pop (theVarPtr, theVal))
{
theVarRepos->saveVal (* theVarPtr);

* theVarPtr = theVal;
}
}
d217 4
a220 4
void WitVarRepos <Variable>::clear ()
{
savedPairs_.clear ();
}
d227 11
a237 11
WitAttRepos <Object>::WitAttRepos (
WitProblem *                     theProblem,
const WitDblFlexVec & (Object::* theAccFunc)   () const,
void                  (Object::* theStoreFunc) (WitPeriod, double)):

WitProbAssoc (theProblem),
savedTrips_  (theProblem),
myAccFunc_   (theAccFunc),
myStoreFunc_ (theStoreFunc)
{
}
d242 3
a244 3
WitAttRepos <Object>::~WitAttRepos ()
{
}
d249 5
a253 5
void WitAttRepos <Object>::saveValAt (
Object *  theObject,
WitPeriod thePer)
{
double theValue;
d255 1
a255 1
theValue = (theObject->*myAccFunc_) ()[thePer];
d257 2
a258 2
savedTrips_.push (theObject, thePer, theValue);
}
d263 9
a271 9
void WitAttRepos <Object>::restore ()
{
Object *  theObject;
WitPeriod thePer;
double    theValue;

while (savedTrips_.pop (theObject, thePer, theValue))
(theObject->*myStoreFunc_) (thePer, theValue);
}
d276 18
a293 18
void WitAttRepos <Object>::restoreAndSave (WitAttRepos * theAttRepos)
{
Object *  theObject;
WitPeriod thePer;
double    theValue;

witAssert (theAttRepos->myAccFunc_   == myAccFunc_);
witAssert (theAttRepos->myStoreFunc_ == myStoreFunc_);

theAttRepos->clear ();

while (savedTrips_.pop (theObject, thePer, theValue))
{
theAttRepos->saveValAt (theObject, thePer);

(theObject->*myStoreFunc_) (thePer, theValue);
}
}
d298 4
a301 4
void WitAttRepos <Object>::clear ()
{
savedTrips_.clear ();
}
@


1.8
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 23
a54 23
      WitProbAssoc  (theProblem),
      myIntRepos_   (NULL),
      myBoolRepos_  (NULL),
      myDblRepos_   (NULL),
      myPtrRepos_   (NULL),
      execVolRepos_ (NULL),
      subVolRepos_  (NULL)
   {
   myIntRepos_   = new WitVarRepos <int>    (theProblem);
   myBoolRepos_  = new WitVarRepos <bool>   (theProblem);
   myDblRepos_   = new WitVarRepos <double> (theProblem);
   myPtrRepos_   = new WitVarRepos <void *> (theProblem);

   execVolRepos_ =
      new WitAttRepos <WitOperation> (theProblem,
                     & WitOperation:: execVol,
                     & WitOperation:: storeHeurExecVol);

   subVolRepos_ =
      new WitAttRepos  <WitSubEntry> (theProblem,
                      & WitSubEntry:: subVol,
                      & WitSubEntry:: storeHeurSubVol);
   }
d59 8
a66 8
   {
   delete subVolRepos_;
   delete execVolRepos_;
   delete myPtrRepos_;
   delete myDblRepos_;
   delete myBoolRepos_;
   delete myIntRepos_;
   }
d71 3
a73 3
   {
   myIntRepos_->saveVal (theVar);
   }
d78 3
a80 3
   {
   myBoolRepos_->saveVal (theVar);
   }
d85 3
a87 3
   {
   myDblRepos_->saveVal (theVar);
   }
d92 3
a94 3
   {
   execVolRepos_->saveValAt (theOpn, thePer);
   }
d99 3
a101 3
   {
   subVolRepos_->saveValAt (theSub, thePer);
   }
d106 8
a113 8
   {
   myIntRepos_  ->restore ();
   myBoolRepos_ ->restore ();
   myDblRepos_  ->restore ();
   myPtrRepos_  ->restore ();
   execVolRepos_->restore ();
   subVolRepos_ ->restore ();
   }
d118 8
a125 8
   {
   myIntRepos_  ->restoreAndSave (theDataRepos->myIntRepos_);
   myBoolRepos_ ->restoreAndSave (theDataRepos->myBoolRepos_);
   myDblRepos_  ->restoreAndSave (theDataRepos->myDblRepos_);
   myPtrRepos_  ->restoreAndSave (theDataRepos->myPtrRepos_);
   execVolRepos_->restoreAndSave (theDataRepos->execVolRepos_);
   subVolRepos_ ->restoreAndSave (theDataRepos->subVolRepos_);
   }
d130 8
a137 8
   {
   myIntRepos_  ->clear ();
   myBoolRepos_ ->clear ();
   myDblRepos_  ->clear ();
   myPtrRepos_  ->clear ();
   execVolRepos_->clear ();
   subVolRepos_ ->clear ();
   }
d142 7
a148 7
   {
   return
          myIntRepos_ ->isEmpty ()
      and myBoolRepos_->isEmpty ()
      and myDblRepos_ ->isEmpty ()
      and myPtrRepos_ ->isEmpty ();
   }
d153 3
a155 3
   {
   myPtrRepos_->saveVal (theVoidPtr);
   }
d162 1
a162 1
      WitVarRepos <Variable>::WitVarRepos (WitProblem * theProblem):
d164 4
a167 4
         WitProbAssoc (theProblem),
         savedPairs_  (theProblem)
   {
   }
d172 3
a174 3
      WitVarRepos <Variable>::~WitVarRepos ()
   {
   }
d179 4
a182 4
      void WitVarRepos <Variable>::saveVal (Variable & theVar)
   {
   savedPairs_.push (& theVar, theVar);
   }
d185 1
a185 1
    
d187 8
a194 4
      void WitVarRepos <Variable>::restore ()
   {
   Variable * theVarPtr;
   Variable   theVal;
d196 1
a196 3
   while (savedPairs_.pop (theVarPtr, theVal))
      * theVarPtr = theVal;
   }
a197 2
//------------------------------------------------------------------------------
    
d199 14
a212 14
      void WitVarRepos <Variable>::restoreAndSave (WitVarRepos * theVarRepos)
   {
   Variable * theVarPtr;
   Variable   theVal;

   theVarRepos->clear ();

   while (savedPairs_.pop (theVarPtr, theVal))
      {
      theVarRepos->saveVal (* theVarPtr);

      * theVarPtr = theVal;
      }
   }
d217 4
a220 4
      void WitVarRepos <Variable>::clear ()
   {
   savedPairs_.clear ();
   }
d227 11
a237 11
      WitAttRepos <Object>::WitAttRepos (
            WitProblem *                     theProblem,
            const WitDblFlexVec & (Object::* theAccFunc)   () const,
            void                  (Object::* theStoreFunc) (WitPeriod, double)):

         WitProbAssoc (theProblem),
         savedTrips_  (theProblem),
         myAccFunc_   (theAccFunc),
         myStoreFunc_ (theStoreFunc)
   {
   }
d242 3
a244 3
      WitAttRepos <Object>::~WitAttRepos ()
   {
   }
d249 5
a253 5
      void WitAttRepos <Object>::saveValAt (
         Object *  theObject,
         WitPeriod thePer)
   {
   double theValue;
d255 1
a255 1
   theValue = (theObject->*myAccFunc_) ()[thePer]; 
d257 2
a258 2
   savedTrips_.push (theObject, thePer, theValue);
   }
d263 9
a271 9
      void WitAttRepos <Object>::restore ()
   {
   Object *  theObject;
   WitPeriod thePer;
   double    theValue;

   while (savedTrips_.pop (theObject, thePer, theValue))
      (theObject->*myStoreFunc_) (thePer, theValue);
   }
d276 18
a293 18
      void WitAttRepos <Object>::restoreAndSave (WitAttRepos * theAttRepos)
   {
   Object *  theObject;
   WitPeriod thePer;
   double    theValue;

   witAssert (theAttRepos->myAccFunc_   == myAccFunc_);
   witAssert (theAttRepos->myStoreFunc_ == myStoreFunc_);

   theAttRepos->clear ();

   while (savedTrips_.pop (theObject, thePer, theValue))
      {
      theAttRepos->saveValAt (theObject, thePer);

      (theObject->*myStoreFunc_) (thePer, theValue);
      }
   }
d298 4
a301 4
      void WitAttRepos <Object>::clear ()
   {
   savedTrips_.clear ();
   }
@


1.7
log
@Stochastic Implosion
@
text
@d23 1
a23 1
#include <Opn.h>
@


1.6
log
@Stochastic Implosion
@
text
@d16 2
a17 2
//    TypedRepos <Variable>
//    AttRepos   <Object>
d20 2
a21 2
#include <Repos.h>
#include <TypedRepos.h>
d24 1
d37 2
a38 1
      execVolRepos_ (NULL)
d40 4
a43 4
   myIntRepos_   = new WitTypedRepos <int>    (theProblem);
   myBoolRepos_  = new WitTypedRepos <bool>   (theProblem);
   myDblRepos_   = new WitTypedRepos <double> (theProblem);
   myPtrRepos_   = new WitTypedRepos <void *> (theProblem);
d49 5
d60 1
d91 1
a91 1
void WitDataRepos::saveHeurExecVol (WitOperation * theOpn, WitPeriod thePer)
d98 7
d112 1
d124 1
d136 1
d158 1
a158 1
// Implementation of class template TypedRepos <Variable>.
d162 1
a162 1
      WitTypedRepos <Variable>::WitTypedRepos (WitProblem * theProblem):
d172 1
a172 1
      WitTypedRepos <Variable>::~WitTypedRepos ()
d179 1
a179 1
      void WitTypedRepos <Variable>::saveVal (Variable & theVar)
d187 1
a187 1
      void WitTypedRepos <Variable>::restore ()
d199 1
a199 2
      void WitTypedRepos <Variable>::restoreAndSave (
         WitTypedRepos * theTypedRepos)
d204 1
a204 1
   theTypedRepos->clear ();
d208 1
a208 1
      theTypedRepos->saveVal (* theVarPtr);
d217 1
a217 1
      void WitTypedRepos <Variable>::clear ()
d282 3
@


1.5
log
@Updated the copyright date on all source files.
@
text
@d17 1
d22 2
a29 1
      WitProbAssoc (theProblem),
d31 16
a46 9
      myIntRepos_  (NULL),
      myBoolRepos_ (NULL),
      myDblRepos_  (NULL),
      myPtrRepos_  (NULL)
   {
   myIntRepos_  = new WitTypedRepos <int>    (theProblem);
   myBoolRepos_ = new WitTypedRepos <bool>   (theProblem);
   myDblRepos_  = new WitTypedRepos <double> (theProblem);
   myPtrRepos_  = new WitTypedRepos <void *> (theProblem);
d53 1
d83 7
d92 5
a96 4
   myIntRepos_ ->restore ();
   myBoolRepos_->restore ();
   myDblRepos_ ->restore ();
   myPtrRepos_ ->restore ();
d103 5
a107 4
   myIntRepos_ ->restoreAndSave (theDataRepos->myIntRepos_);
   myBoolRepos_->restoreAndSave (theDataRepos->myBoolRepos_);
   myDblRepos_ ->restoreAndSave (theDataRepos->myDblRepos_);
   myPtrRepos_ ->restoreAndSave (theDataRepos->myPtrRepos_);
d114 5
a118 4
   myIntRepos_ ->clear ();
   myBoolRepos_->clear ();
   myDblRepos_ ->clear ();
   myPtrRepos_ ->clear ();
d204 78
@


1.4
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.3
log
@[shared-resource pegging]
@
text
@d114 1
a114 1
void WitDataRepos::savePtrVal (void * & theTlPtr)
d116 1
a116 1
   myPtrRepos_->saveVal (theTlPtr);
@


1.2
log
@[shared-resource pegging]
@
text
@d34 4
a37 4
   myIntRepos_  = new WitTypedRepos <int>        (theProblem);
   myBoolRepos_ = new WitTypedRepos <bool>       (theProblem);
   myDblRepos_  = new WitTypedRepos <double>     (theProblem);
   myPtrRepos_  = new WitTypedRepos <WitTlObj *> (theProblem);
d114 1
a114 1
void WitDataRepos::savePtrVal (WitTlObj * & theTlPtr)
@


1.1
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
//    TypedRepos <VarType>
d120 1
a120 1
// Implementation of class template TypedRepos <VarType>.
d123 2
a124 2
template <typename VarType>
      WitTypedRepos <VarType>::WitTypedRepos (WitProblem * theProblem):
d133 2
a134 2
template <typename VarType>
      WitTypedRepos <VarType>::~WitTypedRepos ()
d140 2
a141 2
template <typename VarType>
      void WitTypedRepos <VarType>::saveVal (VarType & theVar)
d148 2
a149 2
template <typename VarType>
      void WitTypedRepos <VarType>::restore ()
d151 2
a152 2
   VarType * theVarPtr;
   VarType   theVal;
d160 2
a161 2
template <typename VarType>
      void WitTypedRepos <VarType>::restoreAndSave (
d164 2
a165 2
   VarType * theVarPtr;
   VarType   theVal;
d179 2
a180 2
template <typename VarType>
      void WitTypedRepos <VarType>::clear ()
@

