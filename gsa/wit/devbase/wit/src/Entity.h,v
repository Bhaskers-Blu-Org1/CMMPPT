head	1.20;
access;
symbols
	sce_5_01_20080919:1.17
	latest_sce_4_20_20060523:1.15.0.2
	sce_4_20_20060523:1.15
	latest_sce4_20_OSL:1.14.0.2
	sce_4_20_OSL:1.14
	sce_410_withVa:1.14
	sce_4_05_20040511:1.13
	sce_4_00_20040201:1.8
	nextGenBranch:1.6.0.2
	nextGenRoot:1.6
	sce_3_30_20030627:1.5
	EndRw-branch:1.3.0.12
	Root-of-EndRw:1.3
	rwToStl:1.3.0.10
	latest_sce_3_10_20010924:1.3.0.8
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.3.0.6
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.4
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2011.09.28.23.49.18;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.24.00.27.37;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.30.20.17.28;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.07.02.14.17.35;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.07.01.19.48.35;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.02.17.33.57;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.23.19.45.19;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.13.18.59.01;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.12.22.48.05;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.12.20.59.07;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.09.19.52.32;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.08.22.24.24;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.11.20.42.46;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.02.22.18.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.25.15.15.22;	author rwToStl;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.21;	author bobw;	state Exp;
branches
	1.3.10.1;
next	1.2;

1.2
date	2000.03.07.16.55.41;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.3.10.1
date	2002.11.08.16.11.34;	author rwToStl;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef WitEntitH
#define WitEntitH

//------------------------------------------------------------------------------
//
//     Source file: Entity.h
//
//     Definition of classes Entity and Attribute
//
//------------------------------------------------------------------------------

#include <string.h>
#include <string>

#include <Problem.h>

//------------------------------------------------------------------------------
//
//     Definition of class WitEntity -- this class represents a Wit Entity.
//     A Wit Entity may be a part, an operation, a bomEntry, a subEntry, a
//     bopEntry, or a demand.  For the purposes of the parser, there may
//     be two additional special entities: a problem and a partWithOperation.
//     A "problem" entity is used to specify global attributes only.
//
//------------------------------------------------------------------------------

#define MAX_ARGS   10

class WitEntity
{

public:
  typedef enum eType {undefined, problem, part, operation, bomEntry, subEntry,
    bopEntry, demand, partWithOperation} eType;

  typedef struct argVecDef {
    WitDRParmType::Tag   argType; // type of argument, 
                                  //   as defined in Parlex.h
    union {
      int               ival;     // type is Integer
      double            dval;     // type is Double
      const char *      sval;     // type is String
      bool              bval;     // type is Boolean
      WitDRPartCat::Tag cval;     // type is Category
      WitBoundSetSpec * bsval;    // type is a bound set
      WitVectorSpec *   vval;     // type is a vector

    } argValue;
  } argVecDef; 

  // Constructors and destructors

  WitEntity (
        WitProblem *,
        const char * id = "unnamed",
        eType type      = undefined);

  virtual ~WitEntity();

  // Operations
  virtual WitSymTabEntry *lookupRule(WitSymTable *, std::string);
  virtual WitParseRC     checkArgs(WitSymTabEntry * entryPtr);

  // Accessors
  virtual int      argc() const;
  eType            entityType() const;
  const char *     entityID() const;
  WitSymTabEntry * attrPtr() const;
  bool             invalid() const;

  accessFunc (WitProblem *, myProblem)

  WitMsgFacility & myMsgFac () const;

  accessWrapper (WitCompMgr *, myCompMgr, myProblem ())

  void           setEntityType(const eType);
  void           setEntityID(const char * const);
  void           setAttrPtr(WitSymTabEntry * const);
  void           setInvalid(bool);
  virtual void   setArgc(const int);

  // get an argument value
  virtual int          getIntArg(int i);     // where i= argument number
  virtual double       getDoubleArg(int i);   //   0, 1, ..., MAX_ARGS-1
  virtual const char * getStringArg(int i);
  virtual bool         getBoolArg(int i);
  WitDRPartCat::Tag    getCatArg(int i);
  WitVectorSpec *      getVectorArg(int i);
  WitBoundSetSpec *    getBoundSetArg(int i);

  // store the next argument value
  virtual argVecDef*  setIntArg(int);      
  virtual argVecDef*  setDoubleArg(double);
  virtual argVecDef*  setBoolArg(bool);
  virtual argVecDef*  setStringArg(const char *);
  argVecDef*          setCatArg(WitDRPartCat::Tag); 
  argVecDef*          setVectorArg(WitVectorSpec *);
  argVecDef*          setBoundSetArg(WitBoundSetSpec *);

  // The following functions are used to obtain various values
  // needed as arguments by the "set attribute" functions	
  const char * getPartName();
  const char * getDemandName();      
  const char * getOperationName();
  int          getBomEntryIndex();
  int          getSubEntryIndex();
  int          getBopEntryIndex();

protected:

  int            argc_;             // number of arguments found
  argVecDef      argVector_[MAX_ARGS];  // arguments for entity

private:

  eType            entityType_;    // code for type of entity
  char *           entityID_;      // name of entity
  WitSymTabEntry * attrPtr_;       // pointer to entry in symbol table
                                   // for "set" or add" rule
  bool             invalid_;       // true: means entity is invalid
                                   // (set if entity error occurs)

  WitProblem * const myProblem_;

  void           prtInvalidMsg(int arg, const char *s);
};

//------------------------------------------------------------------------------
//
//     Definition of class WitAttribute -- this class represents a Wit
//     attribute.  Wit attributes are associated with entities and describe
//     characteristics of the entity.  There may also be "global attributes"
//     associated with the pseudo-entity "problem."  A "set" or "add"
//     command consists of two parts: an entity part and an attribute part.
//     The attribute part contains zero or more attribute specifications
//     for the associated entity.
//
//------------------------------------------------------------------------------

class WitAttribute: public WitEntity {

public:

  typedef enum aType {undefined, simple, boundSet} aType;

  // Constructors and destructors
  WitAttribute();

  WitAttribute (
     WitProblem * theProblem,
     const char * id   = "unnamed",
     aType        type = simple);

  ~WitAttribute();

  // Operations

  // Accessors
  aType            attrType() const;
  const char *     attrID() const;
  WitSymTabEntry * attrPtr() const;
  bool             invalid() const;

  void           setAttrType(const aType);
  void           setAttrID(const char * const);
  void           setAttrPtr(WitSymTabEntry * const);
  void           setInvalid(bool);

private:

  aType            attrType_;        // code for type of attribute
  char *           attrID_;          // name of attribute
  WitSymTabEntry * attrPtr_;         // pointer to entry in symbol table
  bool             invalid_;         // true: means entity is invalid

};

#endif     // WitEntityH
@


1.19
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 14
a19 9
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished);
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//
@


1.18
log
@Revised the copyright date.
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 2011.
d42 2
a43 2
typedef enum eType {undefined, problem, part, operation, bomEntry, subEntry,
bopEntry, demand, partWithOperation} eType;
d45 73
a117 73
typedef struct argVecDef {
WitDRParmType::Tag   argType; // type of argument,
//   as defined in Parlex.h
union {
int               ival;     // type is Integer
double            dval;     // type is Double
const char *      sval;     // type is String
bool              bval;     // type is Boolean
WitDRPartCat::Tag cval;     // type is Category
WitBoundSetSpec * bsval;    // type is a bound set
WitVectorSpec *   vval;     // type is a vector

} argValue;
} argVecDef;

// Constructors and destructors

WitEntity (
WitProblem *,
const char * id = "unnamed",
eType type      = undefined);

virtual ~WitEntity();

// Operations
virtual WitSymTabEntry *lookupRule(WitSymTable *, std::string);
virtual WitParseRC     checkArgs(WitSymTabEntry * entryPtr);

// Accessors
virtual int      argc() const;
eType            entityType() const;
const char *     entityID() const;
WitSymTabEntry * attrPtr() const;
bool             invalid() const;

accessFunc (WitProblem *, myProblem)

WitMsgFacility & myMsgFac () const;

accessWrapper (WitCompMgr *, myCompMgr, myProblem ())

void           setEntityType(const eType);
void           setEntityID(const char * const);
void           setAttrPtr(WitSymTabEntry * const);
void           setInvalid(bool);
virtual void   setArgc(const int);

// get an argument value
virtual int          getIntArg(int i);     // where i= argument number
virtual double       getDoubleArg(int i);   //   0, 1, ..., MAX_ARGS-1
virtual const char * getStringArg(int i);
virtual bool         getBoolArg(int i);
WitDRPartCat::Tag    getCatArg(int i);
WitVectorSpec *      getVectorArg(int i);
WitBoundSetSpec *    getBoundSetArg(int i);

// store the next argument value
virtual argVecDef*  setIntArg(int);
virtual argVecDef*  setDoubleArg(double);
virtual argVecDef*  setBoolArg(bool);
virtual argVecDef*  setStringArg(const char *);
argVecDef*          setCatArg(WitDRPartCat::Tag);
argVecDef*          setVectorArg(WitVectorSpec *);
argVecDef*          setBoundSetArg(WitBoundSetSpec *);

// The following functions are used to obtain various values
// needed as arguments by the "set attribute" functions
const char * getPartName();
const char * getDemandName();
const char * getOperationName();
int          getBomEntryIndex();
int          getSubEntryIndex();
int          getBopEntryIndex();
d121 2
a122 2
int            argc_;             // number of arguments found
argVecDef      argVector_[MAX_ARGS];  // arguments for entity
d126 6
a131 6
eType            entityType_;    // code for type of entity
char *           entityID_;      // name of entity
WitSymTabEntry * attrPtr_;       // pointer to entry in symbol table
// for "set" or add" rule
bool             invalid_;       // true: means entity is invalid
// (set if entity error occurs)
d133 1
a133 1
WitProblem * const myProblem_;
d135 1
a135 1
void           prtInvalidMsg(int arg, const char *s);
d154 1
a154 1
typedef enum aType {undefined, simple, boundSet} aType;
d156 2
a157 2
// Constructors and destructors
WitAttribute();
d159 19
a177 19
WitAttribute (
WitProblem * theProblem,
const char * id   = "unnamed",
aType        type = simple);

~WitAttribute();

// Operations

// Accessors
aType            attrType() const;
const char *     attrID() const;
WitSymTabEntry * attrPtr() const;
bool             invalid() const;

void           setAttrType(const aType);
void           setAttrID(const char * const);
void           setAttrPtr(WitSymTabEntry * const);
void           setInvalid(bool);
d181 4
a184 4
aType            attrType_;        // code for type of attribute
char *           attrID_;          // name of attribute
WitSymTabEntry * attrPtr_;         // pointer to entry in symbol table
bool             invalid_;         // true: means entity is invalid
@


1.17
log
@Removed some implicit conversions from string constant to char *.
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 2006.
d42 2
a43 2
  typedef enum eType {undefined, problem, part, operation, bomEntry, subEntry,
    bopEntry, demand, partWithOperation} eType;
d45 73
a117 73
  typedef struct argVecDef {
    WitDRParmType::Tag   argType; // type of argument, 
                                  //   as defined in Parlex.h
    union {
      int               ival;     // type is Integer
      double            dval;     // type is Double
      const char *      sval;     // type is String
      bool              bval;     // type is Boolean
      WitDRPartCat::Tag cval;     // type is Category
      WitBoundSetSpec * bsval;    // type is a bound set
      WitVectorSpec *   vval;     // type is a vector

    } argValue;
  } argVecDef; 

  // Constructors and destructors

  WitEntity (
        WitProblem *,
        const char * id = "unnamed",
        eType type      = undefined);

  virtual ~WitEntity();

  // Operations
  virtual WitSymTabEntry *lookupRule(WitSymTable *, std::string);
  virtual WitParseRC     checkArgs(WitSymTabEntry * entryPtr);

  // Accessors
  virtual int      argc() const;
  eType            entityType() const;
  const char *     entityID() const;
  WitSymTabEntry * attrPtr() const;
  bool             invalid() const;

  accessFunc (WitProblem *, myProblem)

  WitMsgFacility & myMsgFac () const;

  accessWrapper (WitCompMgr *, myCompMgr, myProblem ())

  void           setEntityType(const eType);
  void           setEntityID(const char * const);
  void           setAttrPtr(WitSymTabEntry * const);
  void           setInvalid(bool);
  virtual void   setArgc(const int);

  // get an argument value
  virtual int          getIntArg(int i);     // where i= argument number
  virtual double       getDoubleArg(int i);   //   0, 1, ..., MAX_ARGS-1
  virtual const char * getStringArg(int i);
  virtual bool         getBoolArg(int i);
  WitDRPartCat::Tag    getCatArg(int i);
  WitVectorSpec *      getVectorArg(int i);
  WitBoundSetSpec *    getBoundSetArg(int i);

  // store the next argument value
  virtual argVecDef*  setIntArg(int);      
  virtual argVecDef*  setDoubleArg(double);
  virtual argVecDef*  setBoolArg(bool);
  virtual argVecDef*  setStringArg(const char *);
  argVecDef*          setCatArg(WitDRPartCat::Tag); 
  argVecDef*          setVectorArg(WitVectorSpec *);
  argVecDef*          setBoundSetArg(WitBoundSetSpec *);

  // The following functions are used to obtain various values
  // needed as arguments by the "set attribute" functions	
  const char * getPartName();
  const char * getDemandName();      
  const char * getOperationName();
  int          getBomEntryIndex();
  int          getSubEntryIndex();
  int          getBopEntryIndex();
d121 2
a122 2
  int            argc_;             // number of arguments found
  argVecDef      argVector_[MAX_ARGS];  // arguments for entity
d126 6
a131 6
  eType            entityType_;    // code for type of entity
  char *           entityID_;      // name of entity
  WitSymTabEntry * attrPtr_;       // pointer to entry in symbol table
                                   // for "set" or add" rule
  bool             invalid_;       // true: means entity is invalid
                                   // (set if entity error occurs)
d133 1
a133 1
  WitProblem * const myProblem_;
d135 1
a135 1
  void           prtInvalidMsg(int arg, const char *s);
d154 1
a154 1
  typedef enum aType {undefined, simple, boundSet} aType;
d156 2
a157 2
  // Constructors and destructors
  WitAttribute();
d159 19
a177 19
  WitAttribute (
     WitProblem * theProblem,
     const char * id   = "unnamed",
     aType        type = simple);

  ~WitAttribute();

  // Operations

  // Accessors
  aType            attrType() const;
  const char *     attrID() const;
  WitSymTabEntry * attrPtr() const;
  bool             invalid() const;

  void           setAttrType(const aType);
  void           setAttrID(const char * const);
  void           setAttrPtr(WitSymTabEntry * const);
  void           setInvalid(bool);
d181 4
a184 4
  aType            attrType_;        // code for type of attribute
  char *           attrID_;          // name of attribute
  WitSymTabEntry * attrPtr_;         // pointer to entry in symbol table
  bool             invalid_;         // true: means entity is invalid
@


1.16
log
@Removed many instances of converting a string constant to a char *.
@
text
@d51 1
a51 1
      char *            sval;     // type is String
d64 2
a65 2
        char * id  = "unnamed",
        eType type = undefined);
d74 5
a78 5
  virtual int    argc() const;
  eType          entityType() const;
  char           *entityID() const;
  WitSymTabEntry *attrPtr() const;
  bool           invalid() const;
d87 1
a87 1
  void           setEntityID(char * const);
d93 7
a99 7
  virtual int       getIntArg(int i);     // where i= argument number
  virtual double    getDoubleArg(int i);   //   0, 1, ..., MAX_ARGS-1
  virtual char *    getStringArg(int i);
  virtual bool      getBoolArg(int i);
  WitDRPartCat::Tag getCatArg(int i);
  WitVectorSpec *   getVectorArg(int i);
  WitBoundSetSpec * getBoundSetArg(int i);
d105 1
a105 1
  virtual argVecDef*  setStringArg(char *);
d126 3
a128 3
  eType          entityType_;       // code for type of entity
  char           *entityID_;        // name of entity
  WitSymTabEntry *attrPtr_;         // pointer to entry in symbol table
d130 1
a130 1
  bool           invalid_;          // true: means entity is invalid
d135 1
a135 1
  void           prtInvalidMsg(int arg, char *s);
d161 1
a161 1
     char *       id   = "unnamed",
d169 4
a172 4
  aType          attrType() const;
  char           *attrID() const;
  WitSymTabEntry *attrPtr() const;
  bool           invalid() const;
d175 1
a175 1
  void           setAttrID(char * const);
d181 4
a184 4
  aType          attrType_;         // code for type of attribute
  char           *attrID_;          // name of attribute
  WitSymTabEntry *attrPtr_;         // pointer to entry in symbol table
  bool           invalid_;          // true: means entity is invalid
@


1.15
log
@Updated the copyright date on all source files.
@
text
@a71 1
  virtual void           printArgs(const char * const);
@


1.14
log
@[multi-thread]
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.13
log
@Double Precision.
@
text
@a20 1
#include <stdlib.h>
@


1.12
log
@Double Precision.
@
text
@d51 1
a51 1
      double            fval;     // type is Float
d96 1
a96 1
  virtual double    getFloatArg(int i);   //   0, 1, ..., MAX_ARGS-1
d105 1
a105 1
  virtual argVecDef*  setFloatArg(double);
@


1.11
log
@Double Precision.
@
text
@d47 2
a48 2
    pType         argType;       // type of argument, 
                                 //   as defined in Parlex.h
d50 7
a56 7
      int               ival;    // type is Integer
      double            fval;    // type is Float
      char *            sval;    // type is String
      bool              bval;    // type is Boolean
      WitDRPartCat::Tag cval;    // type is Category
      WitBoundSetSpec * bsval;   // type is a bound set
      WitVectorSpec *   vval;    // type is a vector
@


1.10
log
@Double Precision.
@
text
@d47 2
a48 2
    pType         argType;         // type of argument, 
                                   //   as defined in Parlex.h
d50 7
a56 7
      int               ival;      // type is Integer
      double            fval;      // type is Float
      char              *sval;     // type is String
      bool              bval;      // type is Boolean
      category          cval;      // type is Category
      WitBoundSetSpec  *bsval;     // type is a bound set
      WitVectorSpec     *vval;     // type is a vector
d95 7
a101 7
  virtual int         getIntArg(int i);     // where i= argument number
  virtual double      getFloatArg(int i);   //   0, 1, ..., MAX_ARGS-1
  virtual char        *getStringArg(int i);
  virtual bool        getBoolArg(int i);
  category            getCatArg(int i);
  WitVectorSpec*      getVectorArg(int i);
  WitBoundSetSpec*    getBoundSetArg(int i);
d108 1
a108 1
  argVecDef*          setCatArg(category); 
@


1.9
log
@Double Precision.
@
text
@a96 6
          float       getOldFloatArg  (int i);
                         //
                         // Same as getFloatArg, but returns an actual float.
                         // Used to interface with old, undocumented, float-only
                         // API functions.

@


1.8
log
@Continued implementation of PIP.
@
text
@d51 1
a51 1
      float             fval;      // type is Float
d96 7
a102 1
  virtual float       getFloatArg(int i);   //   0, 1, ..., MAX_ARGS-1
d111 1
a111 1
  virtual argVecDef*  setFloatArg(float);
@


1.7
log
@Minor corrections.
@
text
@d39 1
a39 1
class WitEntity: public WitUtil
@


1.6
log
@Added some optional warnings on Linux.
@
text
@d114 6
a119 6
  const char * const  getPartName();
  const char * const  getDemandName();      
  const char * const  getOperationName();
  int                 getBomEntryIndex();
  int                 getSubEntryIndex();
  int                 getBopEntryIndex();
@


1.5
log
@Internal changes.
@
text
@d121 5
a137 5

protected:

  int            argc_;             // number of arguments found
  argVecDef      argVector_[MAX_ARGS];  // arguments for entity
@


1.4
log
@modications to change rogueWave tools.h++ to STL
@
text
@d53 1
a53 1
      WitBoolean        bval;      // type is Boolean
d80 1
a80 1
  WitBoolean     invalid() const;
d91 1
a91 1
  void           setInvalid(WitBoolean);
d98 1
a98 1
  virtual WitBoolean  getBoolArg(int i);
d106 1
a106 1
  virtual argVecDef*  setBoolArg(WitBoolean);
d127 1
a127 1
  WitBoolean     invalid_;          // true: means entity is invalid
d174 1
a174 1
  WitBoolean     invalid() const;
d179 1
a179 1
  void           setInvalid(WitBoolean);
d186 1
a186 1
  WitBoolean     invalid_;          // true: means entity is invalid
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@a20 1
#include <rw/cstring.h>
d23 1
d71 1
a71 1
  virtual WitSymTabEntry *lookupRule(WitSymTable *, RWCString);
@


1.3.10.1
log
@Migration from Roguewave tools.h++ to STL
@
text
@d21 1
a23 1
#include <string>
d71 1
a71 1
  virtual WitSymTabEntry *lookupRule(WitSymTable *, std::string);
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d39 1
a39 1
class WitEntity
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
