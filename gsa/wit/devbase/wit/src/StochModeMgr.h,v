head	1.43;
access;
symbols
	sce_5_01_20080919:1.40;
locks; strict;
comment	@ * @;


1.43
date	2011.09.28.23.50.33;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.09.24.00.28.48;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.08.30.20.18.18;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.01.29.23.51.49;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.01.14.21.44.02;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.01.09.20.28.23;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.01.09.19.35.49;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.01.08.20.44.22;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2007.11.29.15.35.02;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.11.27.21.05.02;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.10.22.18.53.59;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.10.15.21.50.36;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.10.08.18.56.37;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.09.26.22.52.52;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.09.25.21.03.06;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.09.20.18.46.17;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.09.19.22.39.54;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.09.12.23.09.01;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.09.12.21.55.01;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.09.11.18.09.18;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.09.10.21.01.35;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.09.06.18.59.14;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.09.04.18.10.09;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.17.22.32.24;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.08.08.20.18.13;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.07.21.22.37;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.07.19.17.44;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.25.22.30.03;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.19.21.45.51;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.18.17.42.17;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.15.23.02.20;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.15.22.15.26;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.14.22.08.53;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.14.21.38.32;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.11.21.04.27;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.08.22.47.02;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.08.18.09.41;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.25.23.26.52;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.25.20.55.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.24.21.57.11;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.23.22.32.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.22.15.46.53;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.21.15.31.47;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.43
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StochModeMgrH
#define StochModeMgrH

//------------------------------------------------------------------------------
// Header file: "StochModeMgr.h"
//
// Contains the declaration of class StochModeMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class StochModeMgr
//
// "Stochastic Mode Manager"
// Coordinates and participates in the aspects of stochastic implosion that
// require stochastic mode. An instance of this class exists in a WitRun,
// iff the WitRun is currently in stochastic mode.
//
// Implemented in StochMode.C.
//------------------------------------------------------------------------------

class WitStochModeMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochModeMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochModeMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitStochModeMgr * theStochModeMgr);
         //
         // Copies the input attributes of theStochModeMgr into this
         // StochModeMgr.

      void uploadInput ();
         //
         // Uploads the values of the stochastic input attributes from the
         // current Scenario to the owning Components.

      void uploadSoln ();
         //
         // Uploads the values of the stochastic solution attributes from the
         // current Scenario to the owning Components.

      void implode ();
         //
         // Performs stochastic implosion.

      void clearSoln ();
         //
         // Clears the stochastic implosion solution.

      void clearCompSoln ();
         //
         // Clears the stochastic implosion solution in the Components.

      //------------------------------------------------------------------------
      // pass<SolnAttr> functions.
      // Each of these functions passes the value of indicated stochastic
      // solution attribute directly on to the owning Component.
      // Valid only when the stochastic implosion solution is being uploaded
      // from the StochOptMgr.
      //------------------------------------------------------------------------

      void passObjValue    (double);
      void passBoundsValue (double);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitStochAttMgr *, myStochAttMgr)
      accessFunc    (WitStageMgr *,    myStageMgr)
      accessFunc    (WitScenMgr *,     myScenMgr)
      accessFunc    (WitScenAttMgr *,  myScenAttMgr)
      accessFunc    (bool,             uploadingData)
      accessFunc    (bool,             stochSolnMode)
      accessFunc    (bool,             clearingSoln)

      accessNonNull (WitStochOptMgr *, myStochOptMgr)

      inline bool imploding ()
         {
         return (myStochOptMgr_ != NULL);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void validateCoreData ();
         //
         // Verifies that the input data for the core problem is valid for
         // entering stochastic mode.

      void verifyGlobalBool (
            const char * theAttName,
            bool         theVal,
            bool         reqVal);
         //
         // Verifies the value of a global boolean attribute.
         // theAttName is the       name of the attribute.
         // theVal is the          value of the attribute.
         // reqVal is the required value of the attribute.

      noCopyCtorAssign (WitStochModeMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochAttMgr * myStochAttMgr_;
         //
         // The StochAttMgr owned by this StochModeMgr.

      WitStageMgr * myStageMgr_;
         //
         // The StageMgr owned by this StochModeMgr.

      WitScenMgr * myScenMgr_;
         //
         // The ScenMgr owned by this StochModeMgr.

      WitScenAttMgr * myScenAttMgr_;
         //
         // The ScenAttMgr owned by this StochModeMgr.

      WitStochOptMgr * myStochOptMgr_;
         //
         // The StochOptMgr owned by this StochModeMgr during stochastic
         // implosion; otherwise NULL.

      bool uploadingData_;
         //
         // True, iff the stochastic implosion subsystem is currently uploading
         // scenario-specific data to the owning Components.

      bool stochSolnMode_;
         //
         // True, iff the WitRun is currently in stochastic solution mode.

      bool clearingSoln_;
         //
         // True, iff the stochastic solution is currently being cleared.
   };

#endif
@


1.42
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.41
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d33 2
a34 81
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitStochModeMgr (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitStochModeMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void copyAttrsFrom (WitStochModeMgr * theStochModeMgr);
//
// Copies the input attributes of theStochModeMgr into this
// StochModeMgr.

void uploadInput ();
//
// Uploads the values of the stochastic input attributes from the
// current Scenario to the owning Components.

void uploadSoln ();
//
// Uploads the values of the stochastic solution attributes from the
// current Scenario to the owning Components.

void implode ();
//
// Performs stochastic implosion.

void clearSoln ();
//
// Clears the stochastic implosion solution.

void clearCompSoln ();
//
// Clears the stochastic implosion solution in the Components.

//------------------------------------------------------------------------
// pass<SolnAttr> functions.
// Each of these functions passes the value of indicated stochastic
// solution attribute directly on to the owning Component.
// Valid only when the stochastic implosion solution is being uploaded
// from the StochOptMgr.
//------------------------------------------------------------------------

void passObjValue    (double);
void passBoundsValue (double);

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc    (WitStochAttMgr *, myStochAttMgr)
accessFunc    (WitStageMgr *,    myStageMgr)
accessFunc    (WitScenMgr *,     myScenMgr)
accessFunc    (WitScenAttMgr *,  myScenAttMgr)
accessFunc    (bool,             uploadingData)
accessFunc    (bool,             stochSolnMode)
accessFunc    (bool,             clearingSoln)

accessNonNull (WitStochOptMgr *, myStochOptMgr)

inline bool imploding ()
{
return (myStochOptMgr_ != NULL);
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d36 134
a169 55
void validateCoreData ();
//
// Verifies that the input data for the core problem is valid for
// entering stochastic mode.

void verifyGlobalBool (
const char * theAttName,
bool         theVal,
bool         reqVal);
//
// Verifies the value of a global boolean attribute.
// theAttName is the       name of the attribute.
// theVal is the          value of the attribute.
// reqVal is the required value of the attribute.

noCopyCtorAssign (WitStochModeMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitStochAttMgr * myStochAttMgr_;
//
// The StochAttMgr owned by this StochModeMgr.

WitStageMgr * myStageMgr_;
//
// The StageMgr owned by this StochModeMgr.

WitScenMgr * myScenMgr_;
//
// The ScenMgr owned by this StochModeMgr.

WitScenAttMgr * myScenAttMgr_;
//
// The ScenAttMgr owned by this StochModeMgr.

WitStochOptMgr * myStochOptMgr_;
//
// The StochOptMgr owned by this StochModeMgr during stochastic
// implosion; otherwise NULL.

bool uploadingData_;
//
// True, iff the stochastic implosion subsystem is currently uploading
// scenario-specific data to the owning Components.

bool stochSolnMode_;
//
// True, iff the WitRun is currently in stochastic solution mode.

bool clearingSoln_;
//
// True, iff the stochastic solution is currently being cleared.
};
@


1.40
log
@Stochastic Implosion
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d33 81
a113 2
   {
   public:
d115 55
a169 134
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochModeMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochModeMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitStochModeMgr * theStochModeMgr);
         //
         // Copies the input attributes of theStochModeMgr into this
         // StochModeMgr.

      void uploadInput ();
         //
         // Uploads the values of the stochastic input attributes from the
         // current Scenario to the owning Components.

      void uploadSoln ();
         //
         // Uploads the values of the stochastic solution attributes from the
         // current Scenario to the owning Components.

      void implode ();
         //
         // Performs stochastic implosion.

      void clearSoln ();
         //
         // Clears the stochastic implosion solution.

      void clearCompSoln ();
         //
         // Clears the stochastic implosion solution in the Components.

      //------------------------------------------------------------------------
      // pass<SolnAttr> functions.
      // Each of these functions passes the value of indicated stochastic
      // solution attribute directly on to the owning Component.
      // Valid only when the stochastic implosion solution is being uploaded
      // from the StochOptMgr.
      //------------------------------------------------------------------------

      void passObjValue    (double);
      void passBoundsValue (double);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitStochAttMgr *, myStochAttMgr)
      accessFunc    (WitStageMgr *,    myStageMgr)
      accessFunc    (WitScenMgr *,     myScenMgr)
      accessFunc    (WitScenAttMgr *,  myScenAttMgr)
      accessFunc    (bool,             uploadingData)
      accessFunc    (bool,             stochSolnMode)
      accessFunc    (bool,             clearingSoln)

      accessNonNull (WitStochOptMgr *, myStochOptMgr)

      inline bool imploding ()
         {
         return (myStochOptMgr_ != NULL);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void validateCoreData ();
         //
         // Verifies that the input data for the core problem is valid for
         // entering stochastic mode.

      void verifyGlobalBool (
            const char * theAttName,
            bool         theVal,
            bool         reqVal);
         //
         // Verifies the value of a global boolean attribute.
         // theAttName is the       name of the attribute.
         // theVal is the          value of the attribute.
         // reqVal is the required value of the attribute.

      noCopyCtorAssign (WitStochModeMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochAttMgr * myStochAttMgr_;
         //
         // The StochAttMgr owned by this StochModeMgr.

      WitStageMgr * myStageMgr_;
         //
         // The StageMgr owned by this StochModeMgr.

      WitScenMgr * myScenMgr_;
         //
         // The ScenMgr owned by this StochModeMgr.

      WitScenAttMgr * myScenAttMgr_;
         //
         // The ScenAttMgr owned by this StochModeMgr.

      WitStochOptMgr * myStochOptMgr_;
         //
         // The StochOptMgr owned by this StochModeMgr during stochastic
         // implosion; otherwise NULL.

      bool uploadingData_;
         //
         // True, iff the stochastic implosion subsystem is currently uploading
         // scenario-specific data to the owning Components.

      bool stochSolnMode_;
         //
         // True, iff the WitRun is currently in stochastic solution mode.

      bool clearingSoln_;
         //
         // True, iff the stochastic solution is currently being cleared.
   };
@


1.39
log
@Stochastic Implosion
@
text
@a101 2
      accessNonNull (WitObjStageMgr *, myObjStageMgr)
      accessNonNull (WitPerStageMgr *, myPerStageMgr)
a129 5
      void buildStageMgr ();
         //
         // Creates the appropriate StageMgr for this StochModeMgr and stores
         // ptrs to it.

a143 10
      WitObjStageMgr * myObjStageMgr_;
         //
         // The ObjStageMgr owned by this StochModeMgr, in stage-by-object mode;
         // otherwise NULL.

      WitPerStageMgr * myPerStageMgr_;
         //
         // The PerStageMgr owned by this StochModeMgr, in stage-by-period mode;
         // otherwise NULL.

@


1.38
log
@Stochastic Implosion
@
text
@d117 1
a117 1
      void verifyData ();
d119 2
a120 2
         // Verifies that the input data is valid for entering stochastic data
         // mode.
d132 5
@


1.37
log
@Stochastic Implosion
@
text
@d103 1
d148 7
a154 1
         // The ObjStageMgr owned by this StochModeMgr, if any; otherwise NULL.
@


1.36
log
@Stochastic Implosion
@
text
@d95 1
a95 1
      accessFunc    (WitObjStageMgr *, myObjStageMgr)
d102 1
d141 4
d147 1
a147 1
         // The ObjStageMgr owned by this StochModeMgr.
@


1.35
log
@Stochastic Implosion
@
text
@d95 1
a95 1
      accessFunc    (WitStageMgr *,    myStageMgr)
d140 1
a140 1
      WitStageMgr * myStageMgr_;
d142 1
a142 1
         // The StageMgr owned by this StochModeMgr.
@


1.34
log
@Stochastic Implosion
@
text
@a95 1
      accessFunc    (WitStBSMgr *,     myStBSMgr)
a143 4
      WitStBSMgr * myStBSMgr_;
         //
         // The StBSMgr owned by this StochModeMgr.

@


1.33
log
@Stochastic Implosion
@
text
@d96 1
d145 4
@


1.32
log
@Stochastic Implosion
@
text
@d71 1
a71 1
      void discardSoln ();
d73 1
a73 1
         // Discards the stochastic implosion solution.
@


1.31
log
@Stochastic Implosion
@
text
@a66 4
      void uploadZeroObj ();
         //
         // Sets the objective function values to zero.

d75 4
d100 1
d165 4
@


1.30
log
@Stochastic Implosion
@
text
@d97 1
d147 4
@


1.29
log
@Stochastic Implosion
@
text
@a70 17
      void startWriteCompData (WitComponent * theComp);
         //
         // Begins writeData for theComp.

      void finishWriteCompData ();
         //
         // Concludes writeData for a Component.

      bool isWritingComp ();
         //
         // Returns true, iff the stochastic implosion subsystem is currently
         // performing writeData for a Component.

      void prepWriteVector ();
         //
         // Prepares for a vector to be written to an input data file.

a158 9

      WitComponent * curWriteComp_;
         //
         // The current Component for writeData, if any; othwewise NULL.

      bool vectorWritten_;
         //
         // True, iff there is a current Component for writeData and a vector
         // has been written for it.
@


1.28
log
@Stochastic Implosion
@
text
@a113 1
      accessFunc    (WitScenAttMgr *,  myScenAttMgr)
a162 4
      WitScenAttMgr * myScenAttMgr_;
         //
         // The ScenAttMgr owned by this StochModeMgr.

@


1.27
log
@Stochastic Implosion
@
text
@d67 1
a67 1
      void uploadZeroSoln ();
d69 1
a69 1
         // Clears each solution attribute in the owning Component.
@


1.26
log
@Stochastic Implosion
@
text
@d67 1
a67 1
      void clearSoln ();
@


1.25
log
@Stochastic Implosion
@
text
@d114 1
@


1.24
log
@Stochastic Implosion
@
text
@d163 4
@


1.23
log
@Stochastic Implosion
@
text
@d57 1
a57 1
      void exportSoln ();
d59 1
a59 1
         // Exports the values of the stochastic solution attributes from the
d62 1
a62 1
      void clearSoln ();
d64 2
a65 1
         // Clears the stochastic solution.
d67 1
a67 1
      void uploadInput ();
d69 1
a69 2
         // Uploads the values of the stochastic input attributes from the
         // current Scenario to the owning Components.
d97 11
a113 2
      accessFunc    (bool,             exportingSoln)
      accessFunc    (bool,             clearingSoln)
a167 8
      bool exportingSoln_;
         //
         // True, iff exportSoln () is currently executing.

      bool clearingSoln_;
         //
         // True, iff clearSoln () is currently executing.

@


1.22
log
@Stochastic Implosion
@
text
@a56 5
      void exportInput ();
         //
         // Exports the values of the stochastic input attributes from the
         // current Scenario to the owning Components.

d66 5
a102 1
      accessFunc    (bool,             exportingInput)
d105 1
a158 4
      bool exportingInput_;
         //
         // True, iff exportInput () is currently executing.

d167 5
@


1.21
log
@Stochastic Implosion
@
text
@a135 5
      void verifyBounds ();
         //
         // Verifies that the BoundSets are valid for entering stochastic data
         // mode.

@


1.20
log
@Stochastic Implosion
@
text
@d136 5
@


1.19
log
@Stochastic Implosion
@
text
@d88 1
a88 1
      void implodeSeriesLP ();
d90 1
a90 5
         // Performs stochastic implosion using a series of LP problems.

      void implodeSingleLP ();
         //
         // Performs stochastic implosion using a single LP problem.
a106 2
      accessFunc    (double,           objValue)
      accessFunc    (double,           boundsValue)
a174 5
      double objValue_;
      double boundsValue_;
         //
         // Stochastic versions of the objective function values.

@


1.18
log
@Stochastic Implosion
@
text
@d75 4
a87 4
      void finishWriteCompData ();
         //
         // Concludes writeData for a Component.

@


1.17
log
@Stochastic Implosion
@
text
@d116 5
@


1.16
log
@Stochastic Implosion
@
text
@d104 9
a112 9
      accessFunc    (WitStochAttMgr *,   myStochAttMgr)
      accessFunc    (WitStageMgr *,      myStageMgr)
      accessFunc    (WitScenMgr *,       myScenMgr)
      accessFunc    (bool,               exportingInput)
      accessFunc    (bool,               exportingSoln)
      accessFunc    (bool,               clearingSoln)
      accessFunc    (bool,               stochSolnMode)
      accessFunc    (double,             objValue)
      accessFunc    (double,             boundsValue)
d114 1
a114 1
      accessNonNull (WitStochImploder *, myStochImploder)
d155 1
a155 1
      WitStochImploder * myStochImploder_;
d157 1
a157 1
         // The StochImploder owned by this StochModeMgr during stochastic
@


1.15
log
@Stochastic Implosion
@
text
@d104 11
a114 9
      accessFunc (WitStochAttMgr *, myStochAttMgr)
      accessFunc (WitStageMgr *,    myStageMgr)
      accessFunc (WitScenMgr *,     myScenMgr)
      accessFunc (bool,             exportingInput)
      accessFunc (bool,             exportingSoln)
      accessFunc (bool,             clearingSoln)
      accessFunc (bool,             stochSolnMode)
      accessFunc (double,           objValue)
      accessFunc (double,           boundsValue)
@


1.14
log
@Stochastic Implosion
@
text
@a19 2
#include <PtrVec.h>
#include <List.h>
a51 5
      bool isSsiAttName (const char * theAttName);
         //
         // Returns true, iff theAttName is the name of a Scenario-specific
         // input attribute. Uses a binary search.

d104 9
a112 8
      accessFunc (WitStageMgr *, myStageMgr)
      accessFunc (WitScenMgr *,  myScenMgr)
      accessFunc (bool,          exportingInput)
      accessFunc (bool,          exportingSoln)
      accessFunc (bool,          clearingSoln)
      accessFunc (bool,          stochSolnMode)
      accessFunc (double,        objValue)
      accessFunc (double,        boundsValue)
a134 14
      void setUpSsiAttNames ();
         //
         // Sets up ssiAttNames_.

      void specAllSsiAttNames ();
         //
         // Specifies the names of all scenario-specific input attributes,
         // storing them in tempSsiAttNames_.

      void specSsiAttName (const char * theAttName);
         //
         // Specifies theAttName as the name of a scenario-specific input
         // attribute, storing it in tempSsiAttNames_.

d141 4
a178 10
      WitPtrVec <WitString> ssiAttNames_;
         //
         // The set of all the names of all scenario-specific input attributes,
         // listed in alphabetical order.

      WitList <WitString> tempSsiAttNames_;
         //
         // Same as ssiAttNames_, but as a List.
         // Valid only during setUpSsiAttNames ().

@


1.13
log
@Stochastic Implosion
@
text
@d57 1
a57 1
         // input attribute.
@


1.12
log
@Stochastic Implosion.
@
text
@d21 1
a21 1
#include <ObjStack.h>
d145 1
a145 1
      void defineAllSsiAttNames ();
d147 2
a148 1
         // Sets up tempSsiAttNames_.
d150 1
a150 1
      void addSsiAttName (const char * theAttName);
d152 2
a153 1
         // Adds theAttName to tempSsiAttNames_.
d200 1
a200 1
      WitObjStack <WitString> tempSsiAttNames_;
d202 1
a202 1
         // Same as ssiAttNames_, but in reverse order.
@


1.11
log
@Stochastic Implosion
@
text
@d54 1
a54 1
      bool isSsiAttrName (const char * theName);
d56 2
a57 2
         // Returns true, iff theName is the name of a Scenario-specific input
         // attribute.
d141 1
a141 1
      void setUpSsiAttrNames ();
d143 1
a143 1
         // Sets up ssiAttrNames_.
d145 1
a145 1
      void defineAllSsiAttrNames ();
d147 1
a147 1
         // Sets up tempSsiAttrNames_.
d149 1
a149 1
      void addSsiAttrName (const char * theName);
d151 1
a151 1
         // Adds theName to tempSsiAttrNames_.
d193 1
a193 1
      WitPtrVec <WitString> ssiAttrNames_;
d198 1
a198 1
      WitObjStack <WitString> tempSsiAttrNames_;
d200 2
a201 2
         // Same as ssiAttrNames_, but in reverse order.
         // Valid only during setUpSsiAttrNames ().
@


1.10
log
@Stochastic Implosion
@
text
@d82 5
@


1.9
log
@Stochastic Implosion
@
text
@d20 2
d54 5
d136 12
d188 10
@


1.8
log
@Stochastic Implosion
@
text
@d143 5
@


1.7
log
@Stochastic Implosion
@
text
@d29 1
a29 1
// Implemented in StochImp.C.
@


1.6
log
@Stochastic Implosion
@
text
@d57 14
d99 8
a106 4
      accessFunc (WitStageMgr *,    myStageMgr)
      accessFunc (WitScenMgr *,     myScenMgr)
      accessFunc (WitStochRefMgr *, myStochRefMgr)
      accessFunc (bool,             stochSolnMode)
d143 1
a143 1
      WitStochRefMgr * myStochRefMgr_;
d145 9
a153 1
         // The StochRefMgr owned by this StochModeMgr.
d159 5
@


1.5
log
@Stochastic Implosion
@
text
@d69 1
a69 1
      void implodeMultiLP ();
@


1.4
log
@Stochastic Implosion
@
text
@d69 1
a69 1
      void implode ();
d71 5
a75 1
         // Performs stochastic implosion.
@


1.3
log
@Stochastic Implosion
@
text
@d83 1
a83 1
      accessFunc (WitStochAttMgr *, myStochAttMgr)
d121 1
a121 1
      WitStochAttMgr * myStochAttMgr_;
d123 1
a123 1
         // The StochAttMgr owned by this StochModeMgr.
@


1.2
log
@Stochastic Implosion
@
text
@a84 2
      accessFunc (double,           objValue)
      accessFunc (double,           boundsValue)
a136 5

      double objValue_;
      double boundsValue_;
         //
         // Objective function values.
@


1.1
log
@Stochastic Implosion
@
text
@d81 6
a86 5
      accessFunc (WitStageMgr *, myStageMgr)
      accessFunc (WitScenMgr *,  myScenMgr)
      accessFunc (bool,          stochSolnMode)
      accessFunc (double,        objValue)
      accessFunc (double,        boundsValue)
d123 4
@

