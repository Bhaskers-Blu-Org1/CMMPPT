head	1.38;
access;
symbols
	sce_5_01_20080919:1.26
	latest_sce_4_20_20060523:1.26.0.2
	sce_4_20_20060523:1.26
	latest_sce4_20_OSL:1.25.0.2
	sce_4_20_OSL:1.25
	sce_410_withVa:1.25
	sce_4_05_20040511:1.24
	sce_4_00_20040201:1.24
	nextGenBranch:1.24.0.2
	nextGenRoot:1.24
	sce_3_30_20030627:1.24
	EndRw-branch:1.23.0.4
	Root-of-EndRw:1.23
	rwToStl:1.23.0.2
	latest_sce_3_10_20010924:1.22.0.2
	sce_3_10_20010924:1.22
	latest_sce_3_00_20010601:1.17.0.2
	sce_3_00_20010601:1.17
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.38
date	2011.09.28.23.49.03;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.09.24.00.27.20;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.08.30.20.17.16;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2010.07.30.20.20.13;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2010.07.27.18.12.33;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.07.21.18.50.14;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2010.07.15.23.49.24;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.07.02.18.53.09;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2010.07.01.22.41.20;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.06.29.19.56.41;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.06.25.15.42.51;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.06.24.23.37.32;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.02.17.33.54;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.12.10.21.58.31;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.01.02.22.18.18;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.05.03.23.16.35;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2001.08.30.20.29.21;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.08.22.20.41.47;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.07.03.17.00.56;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.21.18.24.29;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.06.11.19.29.08;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.05.29.22.11.24;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.05.25.14.53.22;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.10.22.31.11;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.04.04.21.54.16;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.03.19.23.03;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.30.23.29.54;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.30.21.23.07;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.30.18.54.47;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.29.00.10.15;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.27.20.07.25;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.20.21.03.57;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.08.16.37.03;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.11.16.35.07;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.06.19.58.35;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.36;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.19;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef BaMatH
#define BaMatH

//------------------------------------------------------------------------------
// Header file: "BaMat.h"
//
// Contains the declaration of class BaMat.
//------------------------------------------------------------------------------

#include <PtrTVec.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class BaMat
//
// "Build-Ahead Material"
// Represents a Material at which global build-ahead is requested.
//
// Implemented in BuildAhd.C.
//------------------------------------------------------------------------------

class WitBaMat: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaMat (WitMaterial *, WitBaDir *, WitBaMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitBaMat ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMaterial *,                myMaterial)
      accessFunc (WitBaMgr *,                   myBaMgr)
      accessFunc (const WitPtrTVec <WitBaPt> &, myBaPt)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void findInitExpPers (WitTVec <WitPeriod> & expPerVec);
         //
         // On return, expPerVec[fillPer] is the initial explosion period to be
         // used when filling requirements for myMaterial_ in fillPer.

      void reject (WitPeriod expPer);
         //
         // Designates expPer as an unuseable explosion period for myMaterial_.

      WitPeriod nextUseableExpPer (WitPeriod fillPer);
         //
         // Returns the next useable explosion period beyond fillPer, if any;
         // otherwise -1.

      WitPeriod findInitExpPer (WitPeriod fillPer);
         //
         // Returns the initial explosion period to be used when filling
         // requirements for myMaterial_ in fillPer.

      void print ();
         //
         // Prints this BaMat.

      void recoverInitState ();
         //
         // Restores the Build-Ahead configuration at this BaPt to its initial
         // state.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void rejectUnexplodablePers ();
         //
         // Rejects each period that's not explodeable for myMaterial_.

      void deselect (WitPeriod expPer);
         //
         // Causes expPer not to be selected by any BaPt.

      void printRecovery ();
         //
         // Prints the restoration of the Build-Ahead configuration at this
         // BaMat to its initial state.

      noCopyCtorAssign (WitBaMat);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMaterial * const myMaterial_;
         //
         // The Material at which global build-ahead is to be considered.

      WitBaDir * const myBaDir_;
         //
         // The BaDir for this BaMat.

      WitBaMgr * const myBaMgr_;
         //
         // TheBaMgr that owns this BaMat.

      WitPtrTVec <WitBaPt> myBaPt_;
         //
         // myBaPt_[fillPer] is the BaPt for this BaMat in fillPer.

      WitTVec <bool> useable_;
         //
         // useable_[expPer] is true, iff expPer is currently considered to be
         // useable as an explosion period.
   };

#endif
@


1.37
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.36
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d32 2
a33 54
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitBaMat (WitMaterial *, WitBaDir *, WitBaMgr *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitBaMat ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitMaterial *,                myMaterial)
accessFunc (WitBaMgr *,                   myBaMgr)
accessFunc (const WitPtrTVec <WitBaPt> &, myBaPt)

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void findInitExpPers (WitTVec <WitPeriod> & expPerVec);
//
// On return, expPerVec[fillPer] is the initial explosion period to be
// used when filling requirements for myMaterial_ in fillPer.

void reject (WitPeriod expPer);
//
// Designates expPer as an unuseable explosion period for myMaterial_.

WitPeriod nextUseableExpPer (WitPeriod fillPer);
//
// Returns the next useable explosion period beyond fillPer, if any;
// otherwise -1.

WitPeriod findInitExpPer (WitPeriod fillPer);
//
// Returns the initial explosion period to be used when filling
// requirements for myMaterial_ in fillPer.

void print ();
//
// Prints this BaMat.

void recoverInitState ();
//
// Restores the Build-Ahead configuration at this BaPt to its initial
// state.
d35 98
a132 46
private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void rejectUnexplodablePers ();
//
// Rejects each period that's not explodeable for myMaterial_.

void deselect (WitPeriod expPer);
//
// Causes expPer not to be selected by any BaPt.

void printRecovery ();
//
// Prints the restoration of the Build-Ahead configuration at this
// BaMat to its initial state.

noCopyCtorAssign (WitBaMat);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitMaterial * const myMaterial_;
//
// The Material at which global build-ahead is to be considered.

WitBaDir * const myBaDir_;
//
// The BaDir for this BaMat.

WitBaMgr * const myBaMgr_;
//
// TheBaMgr that owns this BaMat.

WitPtrTVec <WitBaPt> myBaPt_;
//
// myBaPt_[fillPer] is the BaPt for this BaMat in fillPer.

WitTVec <bool> useable_;
//
// useable_[expPer] is true, iff expPer is currently considered to be
// useable as an explosion period.
};
@


1.35
log
@Selection Recovery
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d32 54
a85 2
   {
   public:
d87 46
a132 98
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaMat (WitMaterial *, WitBaDir *, WitBaMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitBaMat ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMaterial *,                myMaterial)
      accessFunc (WitBaMgr *,                   myBaMgr)
      accessFunc (const WitPtrTVec <WitBaPt> &, myBaPt)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void findInitExpPers (WitTVec <WitPeriod> & expPerVec);
         //
         // On return, expPerVec[fillPer] is the initial explosion period to be
         // used when filling requirements for myMaterial_ in fillPer.

      void reject (WitPeriod expPer);
         //
         // Designates expPer as an unuseable explosion period for myMaterial_.

      WitPeriod nextUseableExpPer (WitPeriod fillPer);
         //
         // Returns the next useable explosion period beyond fillPer, if any;
         // otherwise -1.

      WitPeriod findInitExpPer (WitPeriod fillPer);
         //
         // Returns the initial explosion period to be used when filling
         // requirements for myMaterial_ in fillPer.

      void print ();
         //
         // Prints this BaMat.

      void recoverInitState ();
         //
         // Restores the Build-Ahead configuration at this BaPt to its initial
         // state.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void rejectUnexplodablePers ();
         //
         // Rejects each period that's not explodeable for myMaterial_.

      void deselect (WitPeriod expPer);
         //
         // Causes expPer not to be selected by any BaPt.

      void printRecovery ();
         //
         // Prints the restoration of the Build-Ahead configuration at this
         // BaMat to its initial state.

      noCopyCtorAssign (WitBaMat);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMaterial * const myMaterial_;
         //
         // The Material at which global build-ahead is to be considered.

      WitBaDir * const myBaDir_;
         //
         // The BaDir for this BaMat.

      WitBaMgr * const myBaMgr_;
         //
         // TheBaMgr that owns this BaMat.

      WitPtrTVec <WitBaPt> myBaPt_;
         //
         // myBaPt_[fillPer] is the BaPt for this BaMat in fillPer.

      WitTVec <bool> useable_;
         //
         // useable_[expPer] is true, iff expPer is currently considered to be
         // useable as an explosion period.
   };
@


1.34
log
@Selection Recovery
@
text
@d84 2
a85 2
         // Restores this BaMat in its initial state.
         // (To be used by selection recovery.)
d103 2
a104 1
         // Prints the recovery of the initial state of this BaMat.
@


1.33
log
@Selection Recovery.
@
text
@d103 1
a103 1
         // Prints for recoverInitState ().
@


1.32
log
@Re-implemented selection recovery for build-ahead.
@
text
@a86 5
      void printRecovery ();
         //
         // Prints for recoverInitState ().
         // (To be used by selection recovery.)

d101 4
@


1.31
log
@Selection recovery.
@
text
@d59 5
d82 1
a82 1
      void recover (WitPeriod expPer);
d84 2
a85 2
         // Recovers expPer as a useable explosion period for myMaterial_.
         // (Used in selection recovery.)
d87 1
a87 1
      void prtRecover (WitPeriod expPer);
d89 2
a90 3
         // Prints for recover (expPer).
         // To be called before recover (expPer).
         // (Used in selection recovery.)
d98 8
@


1.30
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@d77 1
a77 1
      void restore (WitPeriod expPer);
d79 1
a79 1
         // Restores expPer as a useable explosion period for myMaterial_.
d82 1
a82 1
      void prtRestore (WitPeriod expPer);
d84 2
a85 2
         // Prints for restore (expPer).
         // To be called before restore (expPer).
@


1.29
log
@Selection Reuse.
@
text
@d80 1
a80 1
         // (Used in selection reuse.)
d86 1
a86 1
         // (Used in selection reuse.)
@


1.28
log
@Selection reuse.
@
text
@d80 7
a86 1
         // Valid only in selection reuse mode.
@


1.27
log
@Selection reuse.
@
text
@d77 5
@


1.26
log
@Updated the copyright date on all source files.
@
text
@d65 1
a65 1
         // Returns the next useable explosion period beyonf fillPer, if any;
d68 5
@


1.25
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.24
log
@Internal changes.
@
text
@d63 1
a63 1
      WitBaCand * nextUseableBaCand (WitPeriod fillPer, WitBaCand * theBaCand);
d65 2
a66 2
         // Return the BaCand that represents the next useable explosion period,
         // if any; otherwise NULL.
@


1.23
log
@Continued preliminary work on single source.
@
text
@d100 1
a100 1
      WitTVec <WitBoolean> useable_;
d102 1
a102 1
         // useable_[expPer] is TRUE, iff expPer is currently considered to be
@


1.22
log
@Refactoring for constrained stock reallocation.
@
text
@d100 1
a100 1
      WitTVec (WitBoolean) useable_;
@


1.21
log
@Refactoring for constrained stock reallocation.
@
text
@d51 3
a53 3
      accessFunc (WitMaterial *,                   myMaterial)
      accessFunc (WitBaMgr *,                      myBaMgr)
      accessFunc (const WitPtrTVec <WitBaSelPt> &, myBaSelPt)
d96 1
a96 1
      WitPtrTVec <WitBaSelPt> myBaSelPt_;
d98 1
a98 1
         // myBaSelPt_[fillPer] is the BaSelPt for this BaMat in fillPer.
@


1.20
log
@Refactoring build-ahead.
@
text
@d63 1
a63 1
      void advanceToUseableBaCand (WitPeriod fillPer, WitBaCand * & theBaCand);
d65 2
a66 2
         // Sets theBaCand to the BaCand that represents the next useable
         // explosion period, if any; otherwise, sets theBaCand to NULL.
@


1.19
log
@More templates.
@
text
@a53 1
      accessFunc (const WitTVec (WitPeriod) &,     selExpPer)
a58 4
      void alterSelection (WitPeriod fillPer);
         //
         // Alters the build-ahead period selection at fillPer.

d63 1
a63 1
      void advanceToUseableExpPer (WitPeriod fillPer, WitPeriod & expPer);
d65 2
a66 2
         // Sets expPer to match the next useable explosion period, if any;
         // otherwise, sets expPer to -1.
a98 6

      WitTVec (WitPeriod) selExpPer_;
         //
         // selExpPer_[fillPer] is the currently selected explosion period to be
         // used when filling requirements for myMaterial_ in fillPer, or -1,
         // if there is none.
@


1.18
log
@Refactoring.
@
text
@d53 1
a53 1
      accessFunc (const WitPtrTVec (WitBaSelPt) &, myBaSelPt)
d101 1
a101 1
      WitPtrTVec (WitBaSelPt) myBaSelPt_;
@


1.17
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d54 1
a54 1
      accessFunc (const WitTVec (WitPeriod) &,     selExpPeriod)
d105 1
a105 1
      WitTVec (WitPeriod) selExpPeriod_;
d107 2
a108 2
         // selExpPeriod_[fillPer] is the currently selected explosion period to
         // be used when filling requirements for myMaterial_ in fillPer, or -1,
@


1.16
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d64 4
a71 4

      void reject (WitPeriod expPer);
         //
         // Designates expPer as an unuseable explosion period for myMaterial_.
@


1.15
log
@Renamed AltPt classes to SelPt classes.
@
text
@d52 1
a62 5

      void splitSelection (WitPeriod fillPer, double splitBound);
         //
         // Splits the build-ahead period selection at fillPer, applying
         // splitBound.
@


1.14
log
@Refactoring build-ahead for selection splitting.
@
text
@d52 1
a52 1
      accessFunc (const WitPtrTVec (WitBaAltPt) &, myBaAltPt)
d105 1
a105 1
      WitPtrTVec (WitBaAltPt) myBaAltPt_;
d107 1
a107 1
         // myBaAltPt_[fillPer] is the BaAltPt for this BaMat in fillPer.
@


1.13
log
@Continued implementation of selection splitting.
@
text
@a88 5
      void advanceSelExpPer (WitPeriod fillPer);
         //
         // Sets the selected explosion period for fillPer to match the next
         // useable explosion period, if any; otherwise, sets it to -1.

a113 5

      WitTVec (WitPeriod) lastFillPer_;
         //
         // lastFillPer_[expPer] is an upper bound on the max fillPer such that
         // selExpPeriod_[fillPer] == expPer.
@


1.12
log
@Removed lazy evaluation from build-ahead.
@
text
@d39 1
a39 1
      WitBaMat (WitMaterial *, WitBaDir *);
d73 4
d89 1
a89 1
      void advanceAllFrom (WitPeriod expPer);
d91 2
a92 2
         // Advances selExpPeriod_ for each fillPer that currently selects 
         // expPer.
d105 4
@


1.11
log
@Refactoring build-ahead for selection splitting.
@
text
@a51 1
      accessFunc (WitBaDir *,                      myBaDir)
d53 1
a53 1
      accessFunc (const WitTVec (WitBoolean) &,    useable)
a58 6
      WitPeriod selExpPeriod (WitPeriod fillPer);
         //
         // selExpPeriod (fillPer) is the currently selected explosion period to
         // be used when filling requirements for myMaterial_ in fillPer, or -1,
         // if there is none, updating it, as needed ("lazy evaluation").

d85 5
d111 5
@


1.10
log
@Continued implementation of selection splitting.
@
text
@d60 1
a60 1
      void reject (WitPeriod expPer);
d62 12
a73 1
         // Sets marks expPer as an unuseable explosion period.
d107 6
@


1.9
log
@Re-factoring for selection splitting.
@
text
@d64 1
a64 3
      WitBoolean nextUseableExpPerExists (
            WitPeriod   fillPer, 
            WitPeriod & expPer);
d66 2
a67 2
         // Updates expPer to match the next useable explosion period, if any.
         // Returns TRUE, iff there is one.
@


1.8
log
@Re-factoring build-ahead for selection splitting.
@
text
@d45 1
a45 1
      virtual ~WitBaMat ();
d54 1
d60 1
a60 1
      WitBoolean hasExpPer (WitPeriod fillPer, WitPeriod & expPer);
d62 1
a62 4
         // Returns TRUE, iff there is a Period selected for exploding in
         // fillPer.
         // Sets expPer to the selected Period, if any, else -1.
         // Uses "lazy evaluation", i.e., updates expPeriod_ as needed.
d68 1
a68 1
         // Updates expPer to match the next useable BaAltPt, if any.
d97 1
a97 1
         // myBaAltPt_[thePer] is the BaAltPt for this BaMat in thePer.
d99 1
a99 1
      WitTVec (WitPeriod) expPeriod_;
d101 2
a102 2
         // expPeriod_[fillPer] is the Period selected for exploding internal
         // demands on myMaterial_ in fillPer, if any, else -1.
@


1.7
log
@Continued implementation of selection splitting with the new design.
@
text
@d16 1
a16 5
// Contains the declaration of the following classes:
//
//    BaMat.
//    NstnMat.
//    AsapMat.
d36 6
d52 1
a52 1
      accessFunc (WitBaMgr *,                      myBaMgr)
a76 29
   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaMat (WitMaterial *, WitBaMgr *);

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      inline WitTVec (WitPeriod) & expPeriod ()
         {
         return expPeriod_;
         }

      virtual WitBoolean updatedExpPerIsValid (
            WitPeriod   fillPer, 
            WitPeriod & expPer) = 0;
         //
         // Moves expPer one period in the appropriate direction.
         // Returns TRUE, iff the new value is an appropriate explosion period
         // for fillPer.

d93 1
a93 1
      WitBaMgr * const myBaMgr_;
d95 1
a95 1
         // The BaMgr that owns this BaMat.
a104 89
   };

//------------------------------------------------------------------------------
// Class NstnMat
//
// "No-Sooner-Than-Necessary Build-Ahead Material"
// Represents a Material at which no-sooner-than-necessary build-ahead is
// requested.
//
// Implemented in BuildAhd.C.
//------------------------------------------------------------------------------

class WitNstnMat: public WitBaMat
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitNstnMat (WitMaterial * theMat, WitBaMgr *);
         //
         // theMat must have buildNstn () TRUE.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitNstnMat ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitNstnMat);

      virtual WitBoolean updatedExpPerIsValid (WitPeriod, WitPeriod &);
         //
         // Override from class BaMat.
   };

//------------------------------------------------------------------------------
// Class AsapMat
//
// "As-Sooner-As-Possible Build-Ahead Material"
// Represents a Material at which as-soon-as-possible build-ahead is requested.
//
// Implemented in BuildAhd.C.
//------------------------------------------------------------------------------

class WitAsapMat: public WitBaMat
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAsapMat (WitMaterial * theMat, WitBaMgr *);
         //
         // theMat must have buildAsap () TRUE.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitAsapMat ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAsapMat);

      virtual WitBoolean updatedExpPerIsValid (WitPeriod, WitPeriod &);
         //
         // Override from class BaMat.
@


1.6
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d50 1
@


1.5
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@a73 4
      void splitSel (WitPeriod expPer);
         //
         // Records a split selection at this BaMat in expPer.

@


1.4
log
@Some minor changes.
@
text
@a69 4
      void print (WitBaAltPt * theBaAltPt);
         // 
         // Prints this BaMat, if it owns theBaAltPt);

d74 4
d88 1
a88 3
      WitBaMat (WitMaterial * theMat);
         //
         // myMaterial_ <-- theMat.
d123 4
d159 1
a159 1
      WitNstnMat (WitMaterial * theMat);
a160 1
         // BaMat <<< theMat.
d203 1
a203 1
      WitAsapMat (WitMaterial * theMat);
a204 1
         // BaMat <<< theMat.
@


1.3
log
@Refactoring for selection splitting.
@
text
@d23 1
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d48 2
a49 6
      accessFunc (WitMaterial *, myMaterial)

      inline WitBaAltPt * myBaAltPt (WitPeriod thePer)
         {
         return myBaAltPtRef (thePer);
         }
d114 1
a114 14
      copyCtorAndAssignment (WitBaMat);
         //
         // Prevents unintentional copying and assignment.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitBaAltPt * & myBaAltPtRef (WitPeriod thePer)
            //
            // Returns the BaAltPt for this BaMat in period thePer.
         {
         return (WitBaAltPt * &) myBaAltPtTl_[thePer];
         }
d124 1
a124 1
      WitTVec (WitTypelessPtr) myBaAltPtTl_;
d126 1
a126 1
         // Data for myBaAltPt.
d173 1
a173 3
      copyCtorAndAssignment (WitNstnMat);
         //
         // Prevents unintentional copying and assignment.
d218 1
a218 3
      copyCtorAndAssignment (WitAsapMat);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
