head	1.34;
access;
symbols
	sce_5_01_20080919:1.26
	latest_sce_4_20_20060523:1.23.0.2
	sce_4_20_20060523:1.23
	latest_sce4_20_OSL:1.22.0.2
	sce_4_20_OSL:1.22
	sce_410_withVa:1.18
	sce_4_05_20040511:1.15
	sce_4_00_20040201:1.13
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10
	EndRw-branch:1.7.0.4
	Root-of-EndRw:1.7
	rwToStl:1.7.0.2
	latest_sce_3_10_20010924:1.2.0.6
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.2.0.4
	sce_3_00_20010601:1.2
	latest_sce_2_31_20010308:1.2.0.2
	sce_2_31_20010308:1.2;
locks; strict;
comment	@ * @;


1.34
date	2011.09.28.23.50.34;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.09.24.00.28.50;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.08.30.20.18.19;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.01.28.23.16.58;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2010.01.28.20.10.12;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.01.25.19.45.19;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2009.12.10.22.38.29;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2009.06.09.18.13.39;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.06.18.21.53.31;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.06.18.17.42.17;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.08.24.17.50.53;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.02.21.15.44.15;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.17.17.07.18;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.01.18.57.04;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.31.22.00.50;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.06.19.47.58;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.22.20.38.59;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.02.08.20.36.19;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.13.21.50.14;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.03.22.36.22;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.11.18.37.27;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.09.22.44.06;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.23.19.13.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.02.23.40.52;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.02.22.18.52;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.26.15.38.27;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.08.21.58.58;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.02.20.53.16;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.24.18.26.08;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.18.14.02.45;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.02.19.59.53;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.02.19.24.07;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StrH
#define StrH

//------------------------------------------------------------------------------
// Header file: "Str.h"
//
// Contains the declaration of class String.
//------------------------------------------------------------------------------

#include <Vector.h>

//------------------------------------------------------------------------------
// class String.
// A character string.
// Implemented in terms of a Vector (char)
// Implemented in Vecs.C.
//------------------------------------------------------------------------------

class WitString
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitString ();
         //
         // Constructs a null String.

      explicit WitString (const char * theCstring);
         //
         // Constructs a copy of theCstring.

      explicit WitString (int nBlanks);
         //
         // Constructs a string containing nBlanks blanks.

      explicit WitString (const WitString &);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitString ();

      //------------------------------------------------------------------------
      // Public member operators.
      //------------------------------------------------------------------------

      inline char operator [] (int theIndex) const
            //
            // Returns the character element of this String.
            // Bounds checking is performed (by WIT), iff the compile is in
            // DEBUG  mode.
            // Returned value is not an lvalue.
         {
         return myVector_[theIndex];
         }

      inline char & operator [] (int theIndex)
            //
            // Same as the preceeding operator [], except that this Vector is
            // non-const and the returned value is an lvalue.
         {
         return myVector_[theIndex];
         }

      inline void operator = (const WitString & theString)
         {
         operator = (theString.myCstring ());
         }

      void operator = (const char * theCstring);
         //
         // Copies theCstring into this String.

      inline bool operator == (const char * theCstring) const
         {
         return equalCstrings (myCstring (), theCstring);
         }

      inline bool operator == (const WitString & theString) const
         {
         return ((* this) == theString.myCstring ());
         }

      inline bool operator != (const char *      theCstring) const
         {
         return not ((* this) == theCstring);
         }

      inline bool operator != (const WitString & theString) const
         {
         return not ((* this) == theString);
         }

      bool operator < (const char * theCstring) const;

      inline bool operator < (const WitString & theString) const
         {
         return ((* this) < theString.myCstring ());
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline const char * myCstring () const
         {
         return myVector_.myCVec ();
         }

      inline char * myCstringForUpdate ()
            //
            // Returns the char * representation of this String, for updating
            // purposes.
            // Use with discretion.
         {
         return myVector_.myCVecForUpdate ();
         }

      inline bool isNull () const
            //
            // Returns true iff this String is a null (0 length) String.
         {
         return ((* this)[0] == '\0');
         }

      inline int length () const
            //
            // Returns the length of this String.
         {
         return strlen (myVector_.myCVec ());
         }

      void resize (int nChars);
         //
         // Resizes this String to nChars blanks.

      inline int maxLength () const
         {
         return myVector_.length () - 1;
         }

      inline static const WitString & thisString (const WitString * pTheString)
            //
            // Used for List::find ().
         {
         return * pTheString;
         }

      char * apiDupCstring () const;
         //
         // Allocates and returns a char * copy of this String for API purposes.
         // Uses malloc, so the returned value can be passed to the application
         // program.

      void copyInto (char * theCstring) const;
         //
         // Copies this String into theCstring.
         // theCstring must have enough room for the contents of this String.

   private:

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitVector <char> myVector_;
         //
         // The Vector thru which this String is implemented.
         // Its length is normally one greater than the length of this String,
         // in order to store the terminating null character.
   };

//------------------------------------------------------------------------------
// NonClass operators that use Strings.
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   inline bool operator == (const char * lhs, const WitString & rhs)
      {
      return (rhs == lhs);
      }

   inline bool operator != (const char * lhs, const WitString & rhs)
      {
      return not (lhs == rhs);
      }
   };

#endif
@


1.33
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.32
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d29 2
a30 93
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitString ();
//
// Constructs a null String.

explicit WitString (const char * theCstring);
//
// Constructs a copy of theCstring.

explicit WitString (int nBlanks);
//
// Constructs a string containing nBlanks blanks.

explicit WitString (const WitString &);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitString ();

//------------------------------------------------------------------------
// Public member operators.
//------------------------------------------------------------------------

inline char operator [] (int theIndex) const
//
// Returns the character element of this String.
// Bounds checking is performed (by WIT), iff the compile is in
// DEBUG  mode.
// Returned value is not an lvalue.
{
return myVector_[theIndex];
}

inline char & operator [] (int theIndex)
//
// Same as the preceeding operator [], except that this Vector is
// non-const and the returned value is an lvalue.
{
return myVector_[theIndex];
}

inline void operator = (const WitString & theString)
{
operator = (theString.myCstring ());
}

void operator = (const char * theCstring);
//
// Copies theCstring into this String.

inline bool operator == (const char * theCstring) const
{
return equalCstrings (myCstring (), theCstring);
}

inline bool operator == (const WitString & theString) const
{
return ((* this) == theString.myCstring ());
}

inline bool operator != (const char *      theCstring) const
{
return not ((* this) == theCstring);
}

inline bool operator != (const WitString & theString) const
{
return not ((* this) == theString);
}

bool operator < (const char * theCstring) const;

inline bool operator < (const WitString & theString) const
{
return ((* this) < theString.myCstring ());
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline const char * myCstring () const
{
return myVector_.myCVec ();
}
d32 153
a184 62
inline char * myCstringForUpdate ()
//
// Returns the char * representation of this String, for updating
// purposes.
// Use with discretion.
{
return myVector_.myCVecForUpdate ();
}

inline bool isNull () const
//
// Returns true iff this String is a null (0 length) String.
{
return ((* this)[0] == '\0');
}

inline int length () const
//
// Returns the length of this String.
{
return strlen (myVector_.myCVec ());
}

void resize (int nChars);
//
// Resizes this String to nChars blanks.

inline int maxLength () const
{
return myVector_.length () - 1;
}

inline static const WitString & thisString (const WitString * pTheString)
//
// Used for List::find ().
{
return * pTheString;
}

char * apiDupCstring () const;
//
// Allocates and returns a char * copy of this String for API purposes.
// Uses malloc, so the returned value can be passed to the application
// program.

void copyInto (char * theCstring) const;
//
// Copies this String into theCstring.
// theCstring must have enough room for the contents of this String.

private:

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitVector <char> myVector_;
//
// The Vector thru which this String is implemented.
// Its length is normally one greater than the length of this String,
// in order to store the terminating null character.
};
d191 11
a201 11
{
inline bool operator == (const char * lhs, const WitString & rhs)
{
return (rhs == lhs);
}

inline bool operator != (const char * lhs, const WitString & rhs)
{
return not (lhs == rhs);
}
};
@


1.31
log
@Multi-objective mode
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d29 93
a121 2
   {
   public:
d123 62
a184 153
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitString ();
         //
         // Constructs a null String.

      explicit WitString (const char * theCstring);
         //
         // Constructs a copy of theCstring.

      explicit WitString (int nBlanks);
         //
         // Constructs a string containing nBlanks blanks.

      explicit WitString (const WitString &);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitString ();

      //------------------------------------------------------------------------
      // Public member operators.
      //------------------------------------------------------------------------

      inline char operator [] (int theIndex) const
            //
            // Returns the character element of this String.
            // Bounds checking is performed (by WIT), iff the compile is in
            // DEBUG  mode.
            // Returned value is not an lvalue.
         {
         return myVector_[theIndex];
         }

      inline char & operator [] (int theIndex)
            //
            // Same as the preceeding operator [], except that this Vector is
            // non-const and the returned value is an lvalue.
         {
         return myVector_[theIndex];
         }

      inline void operator = (const WitString & theString)
         {
         operator = (theString.myCstring ());
         }

      void operator = (const char * theCstring);
         //
         // Copies theCstring into this String.

      inline bool operator == (const char * theCstring) const
         {
         return equalCstrings (myCstring (), theCstring);
         }

      inline bool operator == (const WitString & theString) const
         {
         return ((* this) == theString.myCstring ());
         }

      inline bool operator != (const char *      theCstring) const
         {
         return not ((* this) == theCstring);
         }

      inline bool operator != (const WitString & theString) const
         {
         return not ((* this) == theString);
         }

      bool operator < (const char * theCstring) const;

      inline bool operator < (const WitString & theString) const
         {
         return ((* this) < theString.myCstring ());
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline const char * myCstring () const
         {
         return myVector_.myCVec ();
         }

      inline char * myCstringForUpdate ()
            //
            // Returns the char * representation of this String, for updating
            // purposes.
            // Use with discretion.
         {
         return myVector_.myCVecForUpdate ();
         }

      inline bool isNull () const
            //
            // Returns true iff this String is a null (0 length) String.
         {
         return ((* this)[0] == '\0');
         }

      inline int length () const
            //
            // Returns the length of this String.
         {
         return strlen (myVector_.myCVec ());
         }

      void resize (int nChars);
         //
         // Resizes this String to nChars blanks.

      inline int maxLength () const
         {
         return myVector_.length () - 1;
         }

      inline static const WitString & thisString (const WitString * pTheString)
            //
            // Used for List::find ().
         {
         return * pTheString;
         }

      char * apiDupCstring () const;
         //
         // Allocates and returns a char * copy of this String for API purposes.
         // Uses malloc, so the returned value can be passed to the application
         // program.

      void copyInto (char * theCstring) const;
         //
         // Copies this String into theCstring.
         // theCstring must have enough room for the contents of this String.

   private:

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitVector <char> myVector_;
         //
         // The Vector thru which this String is implemented.
         // Its length is normally one greater than the length of this String,
         // in order to store the terminating null character.
   };
d191 11
a201 11
   {
   inline bool operator == (const char * lhs, const WitString & rhs)
      {
      return (rhs == lhs);
      }

   inline bool operator != (const char * lhs, const WitString & rhs)
      {
      return not (lhs == rhs);
      }
   };
@


1.30
log
@Multi-objective mode.
@
text
@d168 5
@


1.29
log
@Multi-objective mode
@
text
@a186 11
   bool equal (const char * lhs, const char * rhs);
      //
      // String equality.
   };

//------------------------------------------------------------------------------
// NonClass operators that use Strings.
//------------------------------------------------------------------------------

namespace WitNonClass
   {
@


1.28
log
@Multi-Objective Mode
@
text
@d40 1
a40 1
      WitString (const char * theCstring);
d44 1
a44 1
      WitString (int nBlanks);
d48 1
a48 1
      WitString (const WitString &);
d78 6
a83 1
      void operator = (const WitString & theString);
d85 1
a85 1
         // Copies theString into this String.
a117 4
      void copyCstring (const char * theCstring);
         //
         // Copies theCstring into this String.

@


1.27
log
@When comparing a file name to WitSTDOUT, changed from pointer equality
to string equality.
@
text
@d62 1
a62 1
            // Returns the indexed element of this Vector.
@


1.26
log
@Stochastic Implosion
@
text
@a21 11
// NonClass function used by class String.
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   bool equal (const char * lhs, const char * rhs);
      //
      // String equality.
   };

//------------------------------------------------------------------------------
d84 1
a84 1
         return equal (myCstring (), theCstring);
@


1.25
log
@Stochastic Implosion
@
text
@d22 11
d93 4
a96 1
      bool operator == (const char * theCstring) const;
d197 11
@


1.24
log
@App controlled opt implosion.
@
text
@d78 4
d99 6
a104 1
      bool operator < (const WitString & theString) const;
a113 4
      void operator = (const WitString & theString);
         //
         // Copies theString into this String.

@


1.23
log
@Updated the copyright date on all source files.
@
text
@d95 2
@


1.22
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.21
log
@[shared-resource pegging]
@
text
@d44 1
a44 1
      WitString (WitSiz nBlanks);
d128 1
a128 1
      inline WitSiz length () const
d135 1
a135 1
      void resize (WitSiz nChars);
@


1.20
log
@Minor update.
@
text
@d44 1
a44 1
      WitString (size_t nBlanks);
d128 1
a128 1
      inline size_t length () const
d135 1
a135 1
      void resize (size_t nChars);
@


1.19
log
@Minor update.
@
text
@d48 1
a48 1
      explicit WitString (const WitString &);
@


1.18
log
@[multi-thread]
@
text
@d48 2
a159 6
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtor (WitString);

      //------------------------------------------------------------------------
@


1.17
log
@[multi-threads]
@
text
@a178 8

{
inline bool operator == (const char * lhs, const WitString & rhs)
   {
   return (rhs == lhs);
   }

inline bool operator != (const char * lhs, const WitString & rhs)
d180 4
a183 2
   return not (lhs == rhs);
   }
d185 5
a189 3
};
   //
   // Leaving namespace NonClass.
@


1.16
log
@Pegged Critical List.
@
text
@a190 1
// Leaving namespace NonClass.
d192 2
@


1.15
log
@Double Precision.
@
text
@d149 6
@


1.14
log
@Double Precision.
@
text
@d101 1
a101 1
      void copy (const WitString & theString);
d155 1
a155 1
      noCopyCtorAssign (WitString);
@


1.13
log
@Continued implementation of PIP.
@
text
@d107 1
a107 1
         return myVector_.myCvector ();
d116 1
a116 1
         return myVector_.myCvectorForUpdate ();
d130 1
a130 1
         return strlen (myVector_.myCvector ());
@


1.12
log
@Continued implementation of PIP.
@
text
@d173 8
d182 2
a183 4
   inline bool operator == (const char * lhs, const WitString & rhs)
      {
      return (rhs == lhs);
      }
d185 2
a186 5
   inline bool operator != (const char * lhs, const WitString & rhs)
      {
      return not (lhs == rhs);
      }
   };
@


1.11
log
@Continued implementation of PIP.
@
text
@d169 1
a169 1
// Global operators that use Strings.
d172 1
a172 1
inline bool operator == (const char * lhs, const WitString & rhs)
d174 4
a177 2
   return (rhs == lhs);
   }
d179 5
a183 4
inline bool operator != (const char * lhs, const WitString & rhs)
   {
   return not (lhs == rhs);
   }
@


1.10
log
@Replaced some C style casts with C++ style casts.
@
text
@d28 1
a28 1
class WitString: public WitUtil
@


1.9
log
@Internal changes.
@
text
@d112 1
a112 1
            // Returns the (char *) representation of this String, for updating
@


1.8
log
@Internal changes.
@
text
@d85 1
a85 1
         return ! ((* this) == theCstring);
d90 1
a90 1
         return ! ((* this) == theString);
d179 1
a179 1
   return ! (lhs == rhs);
@


1.7
log
@Minor change.
@
text
@d76 1
a76 1
      WitBoolean operator == (const char * theCstring) const;
d78 1
a78 1
      inline WitBoolean operator == (const WitString & theString) const
d83 1
a83 1
      inline WitBoolean operator != (const char *      theCstring) const
d88 1
a88 1
      inline WitBoolean operator != (const WitString & theString) const
d119 1
a119 1
      inline WitBoolean isNull () const
d121 1
a121 1
            // Returns TRUE iff this String is a null (0 length) String.
d172 1
a172 1
inline WitBoolean operator == (const char * lhs, const WitString & rhs)
d177 1
a177 1
inline WitBoolean operator != (const char * lhs, const WitString & rhs)
@


1.6
log
@Preliminary work on single source.
@
text
@d76 17
d172 1
a172 6
inline WitBoolean operator == (const WitString & lhs, const char *      rhs)
   {
   return (strcmp (lhs.myCstring (), rhs) == 0);
   }

inline WitBoolean operator == (const char *      lhs, const WitString & rhs)
d177 1
a177 16
inline WitBoolean operator == (const WitString & lhs, const WitString & rhs)
   {
   return (lhs == rhs.myCstring ());
   }

inline WitBoolean operator != (const WitString & lhs, const char *      rhs)
   {
   return ! (lhs == rhs);
   }

inline WitBoolean operator != (const char *      lhs, const WitString & rhs)
   {
   return ! (lhs == rhs);
   }

inline WitBoolean operator != (const WitString & lhs, const WitString & rhs)
@


1.5
log
@Preliminary work on single source.
@
text
@a43 4
      WitString (const WitString & theString);
         //
         // Constructs a copy of theString.

d76 5
a80 1
      void operator = (const char * theCstring);
d84 1
a84 1
      void operator = (const WitString & theString);
a87 4
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

d133 6
@


1.4
log
@Continued implementation of object iteration.
@
text
@d64 1
a64 1
            // Returns the indexed element of this WitVector.
d74 2
a75 2
            // Same as the preceeding operator [], except that this WitVector
            // is non-const and the returned value is an lvalue.
d142 1
a142 1
      WitVector (char) myVector_;
@


1.3
log
@Began implementation of object iteration.
@
text
@d155 1
a155 1
   return WitUtil::streq (lhs.myCstring (), rhs);
@


1.2
log
@Minor tweak.
@
text
@d19 1
a19 1
#include <List.h>
@


1.1
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@d10 2
a11 2
#ifndef StringH
#define StringH
d14 1
a14 1
// Header file: "String.h"
@

