head	1.12;
access;
symbols
	sce_5_01_20080919:1.9
	latest_sce_4_20_20060523:1.8.0.2
	sce_4_20_20060523:1.8
	latest_sce4_20_OSL:1.7.0.2
	sce_4_20_OSL:1.7
	sce_410_withVa:1.7
	sce_4_05_20040511:1.5
	sce_4_00_20040201:1.5;
locks; strict;
comment	@ * @;


1.12
date	2011.09.28.23.49.56;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.24.00.28.19;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.30.20.17.57;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.17.22.11.46;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.02.17.34.08;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.28.19.34.27;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.12.15.25.57;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.16.18.48.25;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.06.21.13.28;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.31.23.18.57;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.30.21.47.02;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.29.19.13.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PipSeqMgrH
#define PipSeqMgrH

//------------------------------------------------------------------------------
// Header file: "PipSeqMgr.h"
//
// Contains the declaration of class PipSeqMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <TripStack.h>
 
//------------------------------------------------------------------------------
// Class PipSeqMgr
//
// Owns and manages the shipment sequence for the Post-Implosion Pegging
// Subsystem.
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

class WitPipSeqMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipSeqMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipSeqMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void clear ();
         //
         // Clears the shipment sequence.

      void append (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
         //
         // Appends the args to the end of the shipment sequence.

      void get (WitDemTripStack & theShipSeq);
         //
         // Sets theShipSeq to the (forward) shipment sequence.

      void reduce ();
         //
         // Makes the shipment sequence feasible for the shipment schedule, by
         // reducing the incShipVols, as needed.

      void display ();
         //
         // Displays the shipment sequence.

      void copy (WitPipSeqMgr * theSeqMgr);
         //
         // Copies the contents of theSeqMgr into this SeqMgr.

      void writeData ();
         //
         // Writes the shipment sequence in the input data file format.

      void setShipPerForRead (WitPeriod);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod, shipPerForRead)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPipSeqMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDemTripStack revShipSeq_;
         //       
         // The shipment sequence for PIP, stored in reverse order.
         // This is the ordered list of triples
         // (theDemand, shipPer, incShipVol) such that the PIP algorithm is to
         // increase theDemand->shipVol ()[shipPer] by incShipVol, and peg the
         // resulting resource utilization to theDemand in shipPer.

      WitPeriod shipPerForRead_;
         //
         // The shipment period to be used by the DataReader when appending to
         // the shipment sequence.
   };

#endif
@


1.11
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.10
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d21 1
a21 1

d32 2
a33 38
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPipSeqMgr (WitProblem *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPipSeqMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void clear ();
//
// Clears the shipment sequence.

void append (
WitDemand * theDemand,
WitPeriod   shipPer,
double      incShipVol);
//
// Appends the args to the end of the shipment sequence.

void get (WitDemTripStack & theShipSeq);
//
// Sets theShipSeq to the (forward) shipment sequence.

void reduce ();
//
// Makes the shipment sequence feasible for the shipment schedule, by
// reducing the incShipVols, as needed.
d35 81
a115 45
void display ();
//
// Displays the shipment sequence.

void copy (WitPipSeqMgr * theSeqMgr);
//
// Copies the contents of theSeqMgr into this SeqMgr.

void writeData ();
//
// Writes the shipment sequence in the input data file format.

void setShipPerForRead (WitPeriod);

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitPeriod, shipPerForRead)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitPipSeqMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitDemTripStack revShipSeq_;
//
// The shipment sequence for PIP, stored in reverse order.
// This is the ordered list of triples
// (theDemand, shipPer, incShipVol) such that the PIP algorithm is to
// increase theDemand->shipVol ()[shipPer] by incShipVol, and peg the
// resulting resource utilization to theDemand in shipPer.

WitPeriod shipPerForRead_;
//
// The shipment period to be used by the DataReader when appending to
// the shipment sequence.
};
@


1.9
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d21 1
a21 1
 
d32 38
a69 2
   {
   public:
d71 45
a115 81
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipSeqMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipSeqMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void clear ();
         //
         // Clears the shipment sequence.

      void append (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
         //
         // Appends the args to the end of the shipment sequence.

      void get (WitDemTripStack & theShipSeq);
         //
         // Sets theShipSeq to the (forward) shipment sequence.

      void reduce ();
         //
         // Makes the shipment sequence feasible for the shipment schedule, by
         // reducing the incShipVols, as needed.

      void display ();
         //
         // Displays the shipment sequence.

      void copy (WitPipSeqMgr * theSeqMgr);
         //
         // Copies the contents of theSeqMgr into this SeqMgr.

      void writeData ();
         //
         // Writes the shipment sequence in the input data file format.

      void setShipPerForRead (WitPeriod);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod, shipPerForRead)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPipSeqMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDemTripStack revShipSeq_;
         //       
         // The shipment sequence for PIP, stored in reverse order.
         // This is the ordered list of triples
         // (theDemand, shipPer, incShipVol) such that the PIP algorithm is to
         // increase theDemand->shipVol ()[shipPer] by incShipVol, and peg the
         // resulting resource utilization to theDemand in shipPer.

      WitPeriod shipPerForRead_;
         //
         // The shipment period to be used by the DataReader when appending to
         // the shipment sequence.
   };
@


1.8
log
@Updated the copyright date on all source files.
@
text
@a27 5
// Class Hierarchy:
//
// ProbAssoc
//    PipSeqMgr
//
@


1.7
log
@Tie Breaking Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.6
log
@PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class Pip::SeqMgr.
d23 1
a23 1
// Class Pip::SeqMgr
d31 1
a31 1
//    Pip::SeqMgr
d36 1
a36 4
namespace WitPip
{

class SeqMgr: public WitProbAssoc
d44 1
a44 1
      SeqMgr (WitProblem *);
d50 1
a50 1
      ~SeqMgr ();
d80 1
a80 1
      void copy (SeqMgr * theSeqMgr);
d102 1
a102 1
      noCopyCtorAssign (SeqMgr);
a121 3
// Leaving namespace Pip.
}   

@


1.5
log
@Continued implementation of PIP.
@
text
@d31 1
a31 1
//    SeqMgr
@


1.4
log
@Continued implementation of PIP.
@
text
@d91 8
d118 5
@


1.3
log
@Added the PIP shipment sequence to the output of displayData.
@
text
@d87 4
@


1.2
log
@Implemented copying of the PIP shipment sequence.
@
text
@d79 1
a79 1
      void print ();
d81 1
a81 1
         // Prints the shipment sequence to the solution file.
@


1.1
log
@Continued implementation of PIP.
@
text
@d83 4
@

