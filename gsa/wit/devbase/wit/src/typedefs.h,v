head	1.417;
access;
symbols
	sce_5_01_20080919:1.381
	latest_sce_4_20_20060523:1.291.0.2
	sce_4_20_20060523:1.291
	latest_sce4_20_OSL:1.287.0.2
	sce_4_20_OSL:1.287
	sce_410_withVa:1.221
	sce_4_05_20040511:1.193
	sce_4_00_20040201:1.163
	nextGenBranch:1.133.0.2
	nextGenRoot:1.133
	sce_3_30_20030627:1.133
	EndRw-branch:1.91.0.2
	Root-of-EndRw:1.91
	rwToStl:1.89.0.2
	latest_sce_3_10_20010924:1.53.0.2
	sce_3_10_20010924:1.53
	latest_sce_3_00_20010601:1.34.0.2
	sce_3_00_20010601:1.34
	latest_sce_2_31_20010308:1.25.0.2
	sce_2_31_20010308:1.25
	latest_sce_2_31_20001003:1.9.0.2
	sce_2_31_20001003:1.9
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.417
date	2011.09.28.23.50.49;	author rjw;	state Exp;
branches;
next	1.416;

1.416
date	2011.09.24.00.29.04;	author rjw;	state Exp;
branches;
next	1.415;

1.415
date	2011.08.30.20.18.29;	author rjw;	state Exp;
branches;
next	1.414;

1.414
date	2011.08.30.18.14.59;	author rjw;	state Exp;
branches;
next	1.413;

1.413
date	2011.01.12.23.09.38;	author rjw;	state Exp;
branches;
next	1.412;

1.412
date	2011.01.07.19.46.09;	author rjw;	state Exp;
branches;
next	1.411;

1.411
date	2010.09.28.19.25.17;	author rjw;	state Exp;
branches;
next	1.410;

1.410
date	2010.09.24.18.17.24;	author rjw;	state Exp;
branches;
next	1.409;

1.409
date	2010.09.21.21.19.14;	author rjw;	state Exp;
branches;
next	1.408;

1.408
date	2010.09.07.16.39.00;	author rjw;	state Exp;
branches;
next	1.407;

1.407
date	2010.09.02.18.58.25;	author rjw;	state Exp;
branches;
next	1.406;

1.406
date	2010.08.19.18.00.15;	author rjw;	state Exp;
branches;
next	1.405;

1.405
date	2010.07.30.20.20.15;	author rjw;	state Exp;
branches;
next	1.404;

1.404
date	2010.07.27.20.57.57;	author rjw;	state Exp;
branches;
next	1.403;

1.403
date	2010.07.16.20.21.22;	author rjw;	state Exp;
branches;
next	1.402;

1.402
date	2010.03.24.21.31.04;	author rjw;	state Exp;
branches;
next	1.401;

1.401
date	2010.03.23.22.45.22;	author rjw;	state Exp;
branches;
next	1.400;

1.400
date	2010.03.18.22.46.29;	author rjw;	state Exp;
branches;
next	1.399;

1.399
date	2010.03.18.22.35.02;	author rjw;	state Exp;
branches;
next	1.398;

1.398
date	2010.03.16.20.39.22;	author rjw;	state Exp;
branches;
next	1.397;

1.397
date	2010.03.13.00.35.50;	author rjw;	state Exp;
branches;
next	1.396;

1.396
date	2010.03.04.22.18.36;	author rjw;	state Exp;
branches;
next	1.395;

1.395
date	2010.01.13.19.52.09;	author rjw;	state Exp;
branches;
next	1.394;

1.394
date	2010.01.08.22.51.54;	author rjw;	state Exp;
branches;
next	1.393;

1.393
date	2010.01.06.23.20.48;	author rjw;	state Exp;
branches;
next	1.392;

1.392
date	2010.01.06.00.27.31;	author rjw;	state Exp;
branches;
next	1.391;

1.391
date	2010.01.04.22.11.24;	author rjw;	state Exp;
branches;
next	1.390;

1.390
date	2009.12.29.20.17.19;	author rjw;	state Exp;
branches;
next	1.389;

1.389
date	2009.12.29.16.33.46;	author rjw;	state Exp;
branches;
next	1.388;

1.388
date	2009.12.23.00.21.49;	author rjw;	state Exp;
branches;
next	1.387;

1.387
date	2009.12.21.23.09.55;	author rjw;	state Exp;
branches;
next	1.386;

1.386
date	2009.12.18.23.47.58;	author rjw;	state Exp;
branches;
next	1.385;

1.385
date	2009.11.26.00.24.10;	author rjw;	state Exp;
branches;
next	1.384;

1.384
date	2009.11.19.21.05.11;	author rjw;	state Exp;
branches;
next	1.383;

1.383
date	2009.11.18.19.00.02;	author rjw;	state Exp;
branches;
next	1.382;

1.382
date	2009.11.13.19.01.28;	author rjw;	state Exp;
branches;
next	1.381;

1.381
date	2008.02.28.00.00.44;	author rjw;	state Exp;
branches;
next	1.380;

1.380
date	2008.02.27.23.43.42;	author rjw;	state Exp;
branches;
next	1.379;

1.379
date	2008.02.27.23.19.12;	author rjw;	state Exp;
branches;
next	1.378;

1.378
date	2008.02.27.22.49.18;	author rjw;	state Exp;
branches;
next	1.377;

1.377
date	2008.02.21.23.58.46;	author rjw;	state Exp;
branches;
next	1.376;

1.376
date	2008.02.07.18.41.41;	author rjw;	state Exp;
branches;
next	1.375;

1.375
date	2008.01.09.20.28.23;	author rjw;	state Exp;
branches;
next	1.374;

1.374
date	2008.01.09.19.35.49;	author rjw;	state Exp;
branches;
next	1.373;

1.373
date	2008.01.08.20.44.22;	author rjw;	state Exp;
branches;
next	1.372;

1.372
date	2007.11.29.15.35.02;	author rjw;	state Exp;
branches;
next	1.371;

1.371
date	2007.11.27.21.05.03;	author rjw;	state Exp;
branches;
next	1.370;

1.370
date	2007.11.15.19.57.35;	author rjw;	state Exp;
branches;
next	1.369;

1.369
date	2007.10.08.18.56.37;	author rjw;	state Exp;
branches;
next	1.368;

1.368
date	2007.09.25.21.03.06;	author rjw;	state Exp;
branches;
next	1.367;

1.367
date	2007.09.21.17.47.14;	author rjw;	state Exp;
branches;
next	1.366;

1.366
date	2007.09.21.14.47.32;	author rjw;	state Exp;
branches;
next	1.365;

1.365
date	2007.09.18.18.43.14;	author rjw;	state Exp;
branches;
next	1.364;

1.364
date	2007.09.17.21.46.32;	author rjw;	state Exp;
branches;
next	1.363;

1.363
date	2007.09.17.18.32.00;	author rjw;	state Exp;
branches;
next	1.362;

1.362
date	2007.09.14.22.38.32;	author rjw;	state Exp;
branches;
next	1.361;

1.361
date	2007.09.12.21.55.01;	author rjw;	state Exp;
branches;
next	1.360;

1.360
date	2007.09.07.20.10.23;	author rjw;	state Exp;
branches;
next	1.359;

1.359
date	2007.09.07.15.19.30;	author rjw;	state Exp;
branches;
next	1.358;

1.358
date	2007.09.06.18.59.14;	author rjw;	state Exp;
branches;
next	1.357;

1.357
date	2007.09.05.22.23.59;	author rjw;	state Exp;
branches;
next	1.356;

1.356
date	2007.08.24.22.14.02;	author rjw;	state Exp;
branches;
next	1.355;

1.355
date	2007.08.24.15.48.08;	author rjw;	state Exp;
branches;
next	1.354;

1.354
date	2007.08.22.22.45.30;	author rjw;	state Exp;
branches;
next	1.353;

1.353
date	2007.08.22.22.16.17;	author rjw;	state Exp;
branches;
next	1.352;

1.352
date	2007.08.21.18.43.47;	author rjw;	state Exp;
branches;
next	1.351;

1.351
date	2007.08.20.22.48.00;	author rjw;	state Exp;
branches;
next	1.350;

1.350
date	2007.08.16.21.27.42;	author rjw;	state Exp;
branches;
next	1.349;

1.349
date	2007.08.15.21.36.43;	author rjw;	state Exp;
branches;
next	1.348;

1.348
date	2007.08.14.15.03.02;	author rjw;	state Exp;
branches;
next	1.347;

1.347
date	2007.08.08.23.27.44;	author rjw;	state Exp;
branches;
next	1.346;

1.346
date	2007.08.07.19.17.44;	author rjw;	state Exp;
branches;
next	1.345;

1.345
date	2007.08.01.22.42.00;	author rjw;	state Exp;
branches;
next	1.344;

1.344
date	2007.07.31.20.39.46;	author rjw;	state Exp;
branches;
next	1.343;

1.343
date	2007.07.27.21.08.53;	author rjw;	state Exp;
branches;
next	1.342;

1.342
date	2007.07.27.19.53.38;	author rjw;	state Exp;
branches;
next	1.341;

1.341
date	2007.07.27.16.33.32;	author rjw;	state Exp;
branches;
next	1.340;

1.340
date	2007.07.26.21.53.57;	author rjw;	state Exp;
branches;
next	1.339;

1.339
date	2007.07.26.19.23.36;	author rjw;	state Exp;
branches;
next	1.338;

1.338
date	2007.07.25.19.53.27;	author rjw;	state Exp;
branches;
next	1.337;

1.337
date	2007.07.24.22.17.32;	author rjw;	state Exp;
branches;
next	1.336;

1.336
date	2007.07.12.21.27.48;	author rjw;	state Exp;
branches;
next	1.335;

1.335
date	2007.06.29.21.57.51;	author rjw;	state Exp;
branches;
next	1.334;

1.334
date	2007.06.29.15.25.50;	author rjw;	state Exp;
branches;
next	1.333;

1.333
date	2007.06.22.21.23.57;	author rjw;	state Exp;
branches;
next	1.332;

1.332
date	2007.06.22.19.04.04;	author rjw;	state Exp;
branches;
next	1.331;

1.331
date	2007.06.19.21.45.51;	author rjw;	state Exp;
branches;
next	1.330;

1.330
date	2007.06.08.23.17.59;	author rjw;	state Exp;
branches;
next	1.329;

1.329
date	2007.06.08.18.09.41;	author rjw;	state Exp;
branches;
next	1.328;

1.328
date	2007.06.05.21.06.02;	author rjw;	state Exp;
branches;
next	1.327;

1.327
date	2007.05.30.21.02.12;	author rjw;	state Exp;
branches;
next	1.326;

1.326
date	2007.05.30.16.01.20;	author rjw;	state Exp;
branches;
next	1.325;

1.325
date	2007.05.24.21.57.11;	author rjw;	state Exp;
branches;
next	1.324;

1.324
date	2007.05.22.15.46.53;	author rjw;	state Exp;
branches;
next	1.323;

1.323
date	2007.05.21.15.31.47;	author rjw;	state Exp;
branches;
next	1.322;

1.322
date	2007.05.18.21.20.50;	author rjw;	state Exp;
branches;
next	1.321;

1.321
date	2007.05.17.22.11.46;	author rjw;	state Exp;
branches;
next	1.320;

1.320
date	2007.05.10.21.14.42;	author rjw;	state Exp;
branches;
next	1.319;

1.319
date	2007.05.09.22.44.27;	author rjw;	state Exp;
branches;
next	1.318;

1.318
date	2007.05.08.20.11.23;	author rjw;	state Exp;
branches;
next	1.317;

1.317
date	2007.04.30.21.52.10;	author rjw;	state Exp;
branches;
next	1.316;

1.316
date	2007.04.30.21.34.59;	author rjw;	state Exp;
branches;
next	1.315;

1.315
date	2007.04.19.20.22.31;	author rjw;	state Exp;
branches;
next	1.314;

1.314
date	2007.04.16.21.32.59;	author rjw;	state Exp;
branches;
next	1.313;

1.313
date	2007.04.10.20.49.29;	author rjw;	state Exp;
branches;
next	1.312;

1.312
date	2007.04.10.16.33.23;	author rjw;	state Exp;
branches;
next	1.311;

1.311
date	2007.04.09.18.41.24;	author rjw;	state Exp;
branches;
next	1.310;

1.310
date	2007.03.30.22.33.04;	author rjw;	state Exp;
branches;
next	1.309;

1.309
date	2007.03.22.20.01.17;	author rjw;	state Exp;
branches;
next	1.308;

1.308
date	2006.12.27.22.45.41;	author rjw;	state Exp;
branches;
next	1.307;

1.307
date	2006.11.22.21.45.08;	author rjw;	state Exp;
branches;
next	1.306;

1.306
date	2006.11.02.23.07.15;	author rjw;	state Exp;
branches;
next	1.305;

1.305
date	2006.10.31.22.58.32;	author rjw;	state Exp;
branches;
next	1.304;

1.304
date	2006.10.19.21.54.31;	author rjw;	state Exp;
branches;
next	1.303;

1.303
date	2006.09.21.15.42.27;	author rjw;	state Exp;
branches;
next	1.302;

1.302
date	2006.08.29.17.37.54;	author rjw;	state Exp;
branches;
next	1.301;

1.301
date	2006.08.24.17.50.53;	author rjw;	state Exp;
branches;
next	1.300;

1.300
date	2006.08.18.19.32.53;	author rjw;	state Exp;
branches;
next	1.299;

1.299
date	2006.08.18.18.43.40;	author rjw;	state Exp;
branches;
next	1.298;

1.298
date	2006.08.17.19.36.41;	author rjw;	state Exp;
branches;
next	1.297;

1.297
date	2006.08.08.18.31.21;	author rjw;	state Exp;
branches;
next	1.296;

1.296
date	2006.08.03.18.59.33;	author rjw;	state Exp;
branches;
next	1.295;

1.295
date	2006.08.03.17.38.34;	author rjw;	state Exp;
branches;
next	1.294;

1.294
date	2006.07.19.19.17.07;	author rjw;	state Exp;
branches;
next	1.293;

1.293
date	2006.06.06.15.42.40;	author rjw;	state Exp;
branches;
next	1.292;

1.292
date	2006.05.26.20.40.11;	author rjw;	state Exp;
branches;
next	1.291;

1.291
date	2006.05.02.17.34.18;	author rjw;	state Exp;
branches;
next	1.290;

1.290
date	2006.04.21.21.40.04;	author rjw;	state Exp;
branches;
next	1.289;

1.289
date	2006.04.21.21.02.50;	author rjw;	state Exp;
branches;
next	1.288;

1.288
date	2006.04.18.19.06.56;	author rjw;	state Exp;
branches;
next	1.287;

1.287
date	2006.03.11.00.03.46;	author rjw;	state Exp;
branches;
next	1.286;

1.286
date	2006.03.08.23.57.12;	author rjw;	state Exp;
branches;
next	1.285;

1.285
date	2006.03.06.19.59.47;	author rjw;	state Exp;
branches;
next	1.284;

1.284
date	2006.03.03.22.22.05;	author rjw;	state Exp;
branches;
next	1.283;

1.283
date	2006.03.03.20.46.57;	author rjw;	state Exp;
branches;
next	1.282;

1.282
date	2006.03.02.21.55.49;	author rjw;	state Exp;
branches;
next	1.281;

1.281
date	2006.03.02.21.40.36;	author rjw;	state Exp;
branches;
next	1.280;

1.280
date	2006.02.27.21.19.54;	author rjw;	state Exp;
branches;
next	1.279;

1.279
date	2006.02.21.15.44.15;	author rjw;	state Exp;
branches;
next	1.278;

1.278
date	2006.02.18.00.38.49;	author rjw;	state Exp;
branches;
next	1.277;

1.277
date	2006.02.17.20.53.15;	author rjw;	state Exp;
branches;
next	1.276;

1.276
date	2006.02.17.17.07.18;	author rjw;	state Exp;
branches;
next	1.275;

1.275
date	2006.02.16.22.19.23;	author rjw;	state Exp;
branches;
next	1.274;

1.274
date	2006.02.16.16.24.46;	author rjw;	state Exp;
branches;
next	1.273;

1.273
date	2006.02.10.17.09.52;	author rjw;	state Exp;
branches;
next	1.272;

1.272
date	2006.02.09.21.54.43;	author rjw;	state Exp;
branches;
next	1.271;

1.271
date	2006.02.07.19.18.43;	author rjw;	state Exp;
branches;
next	1.270;

1.270
date	2006.02.02.22.37.45;	author rjw;	state Exp;
branches;
next	1.269;

1.269
date	2006.02.01.20.45.46;	author rjw;	state Exp;
branches;
next	1.268;

1.268
date	2006.01.31.22.40.39;	author rjw;	state Exp;
branches;
next	1.267;

1.267
date	2006.01.27.21.14.35;	author rjw;	state Exp;
branches;
next	1.266;

1.266
date	2006.01.26.22.10.56;	author rjw;	state Exp;
branches;
next	1.265;

1.265
date	2006.01.23.20.54.05;	author rjw;	state Exp;
branches;
next	1.264;

1.264
date	2006.01.23.16.43.02;	author rjw;	state Exp;
branches;
next	1.263;

1.263
date	2006.01.20.17.00.47;	author rjw;	state Exp;
branches;
next	1.262;

1.262
date	2006.01.19.22.20.42;	author rjw;	state Exp;
branches;
next	1.261;

1.261
date	2006.01.18.23.20.06;	author rjw;	state Exp;
branches;
next	1.260;

1.260
date	2006.01.18.21.42.59;	author rjw;	state Exp;
branches;
next	1.259;

1.259
date	2006.01.18.20.03.00;	author rjw;	state Exp;
branches;
next	1.258;

1.258
date	2006.01.13.22.50.18;	author rjw;	state Exp;
branches;
next	1.257;

1.257
date	2006.01.12.23.10.48;	author rjw;	state Exp;
branches;
next	1.256;

1.256
date	2006.01.12.20.23.30;	author rjw;	state Exp;
branches;
next	1.255;

1.255
date	2006.01.12.20.07.43;	author rjw;	state Exp;
branches;
next	1.254;

1.254
date	2006.01.12.16.28.34;	author rjw;	state Exp;
branches;
next	1.253;

1.253
date	2006.01.11.23.18.35;	author rjw;	state Exp;
branches;
next	1.252;

1.252
date	2006.01.09.20.02.31;	author rjw;	state Exp;
branches;
next	1.251;

1.251
date	2006.01.03.19.00.04;	author rjw;	state Exp;
branches;
next	1.250;

1.250
date	2006.01.03.17.12.43;	author rjw;	state Exp;
branches;
next	1.249;

1.249
date	2005.12.30.23.37.56;	author rjw;	state Exp;
branches;
next	1.248;

1.248
date	2005.12.28.18.57.50;	author rjw;	state Exp;
branches;
next	1.247;

1.247
date	2005.12.27.19.43.40;	author rjw;	state Exp;
branches;
next	1.246;

1.246
date	2005.12.20.20.15.25;	author rjw;	state Exp;
branches;
next	1.245;

1.245
date	2005.12.20.19.04.55;	author rjw;	state Exp;
branches;
next	1.244;

1.244
date	2005.12.20.17.09.36;	author rjw;	state Exp;
branches;
next	1.243;

1.243
date	2005.12.19.19.29.26;	author rjw;	state Exp;
branches;
next	1.242;

1.242
date	2005.12.16.20.33.56;	author rjw;	state Exp;
branches;
next	1.241;

1.241
date	2005.12.05.22.24.10;	author rjw;	state Exp;
branches;
next	1.240;

1.240
date	2005.11.22.22.20.28;	author rjw;	state Exp;
branches;
next	1.239;

1.239
date	2005.11.21.20.08.49;	author rjw;	state Exp;
branches;
next	1.238;

1.238
date	2005.11.18.23.36.33;	author rjw;	state Exp;
branches;
next	1.237;

1.237
date	2005.11.18.20.38.11;	author rjw;	state Exp;
branches;
next	1.236;

1.236
date	2005.11.17.22.04.42;	author rjw;	state Exp;
branches;
next	1.235;

1.235
date	2005.11.16.23.24.49;	author rjw;	state Exp;
branches;
next	1.234;

1.234
date	2005.11.16.20.42.15;	author rjw;	state Exp;
branches;
next	1.233;

1.233
date	2005.11.15.21.27.24;	author rjw;	state Exp;
branches;
next	1.232;

1.232
date	2005.11.15.19.55.22;	author rjw;	state Exp;
branches;
next	1.231;

1.231
date	2005.11.15.19.13.57;	author rjw;	state Exp;
branches;
next	1.230;

1.230
date	2005.11.14.22.29.02;	author rjw;	state Exp;
branches;
next	1.229;

1.229
date	2005.11.11.23.29.14;	author rjw;	state Exp;
branches;
next	1.228;

1.228
date	2005.09.26.21.44.32;	author rjw;	state Exp;
branches;
next	1.227;

1.227
date	2005.09.26.18.47.57;	author rjw;	state Exp;
branches;
next	1.226;

1.226
date	2005.09.22.14.59.51;	author rjw;	state Exp;
branches;
next	1.225;

1.225
date	2005.09.15.19.47.10;	author rjw;	state Exp;
branches;
next	1.224;

1.224
date	2005.09.15.18.11.23;	author rjw;	state Exp;
branches;
next	1.223;

1.223
date	2005.09.14.21.54.46;	author rjw;	state Exp;
branches;
next	1.222;

1.222
date	2005.09.08.19.29.46;	author rjw;	state Exp;
branches;
next	1.221;

1.221
date	2005.09.06.19.47.59;	author rjw;	state Exp;
branches;
next	1.220;

1.220
date	2005.09.06.15.52.11;	author rjw;	state Exp;
branches;
next	1.219;

1.219
date	2005.08.31.22.11.01;	author rjw;	state Exp;
branches;
next	1.218;

1.218
date	2005.08.23.19.45.20;	author rjw;	state Exp;
branches;
next	1.217;

1.217
date	2005.08.22.20.39.00;	author rjw;	state Exp;
branches;
next	1.216;

1.216
date	2005.07.14.15.44.23;	author rjw;	state Exp;
branches;
next	1.215;

1.215
date	2005.07.13.21.18.48;	author rjw;	state Exp;
branches;
next	1.214;

1.214
date	2005.07.13.15.54.10;	author rjw;	state Exp;
branches;
next	1.213;

1.213
date	2005.07.11.22.53.50;	author rjw;	state Exp;
branches;
next	1.212;

1.212
date	2005.07.08.23.00.30;	author rjw;	state Exp;
branches;
next	1.211;

1.211
date	2005.07.08.15.59.43;	author rjw;	state Exp;
branches;
next	1.210;

1.210
date	2005.02.24.23.23.58;	author rjw;	state Exp;
branches;
next	1.209;

1.209
date	2005.02.03.21.20.30;	author rjw;	state Exp;
branches;
next	1.208;

1.208
date	2005.01.31.23.59.31;	author rjw;	state Exp;
branches;
next	1.207;

1.207
date	2005.01.28.19.34.28;	author rjw;	state Exp;
branches;
next	1.206;

1.206
date	2005.01.19.23.50.58;	author rjw;	state Exp;
branches;
next	1.205;

1.205
date	2005.01.10.22.34.49;	author rjw;	state Exp;
branches;
next	1.204;

1.204
date	2004.12.28.22.34.27;	author rjw;	state Exp;
branches;
next	1.203;

1.203
date	2004.12.28.19.21.20;	author rjw;	state Exp;
branches;
next	1.202;

1.202
date	2004.12.27.22.33.17;	author rjw;	state Exp;
branches;
next	1.201;

1.201
date	2004.12.24.00.02.27;	author rjw;	state Exp;
branches;
next	1.200;

1.200
date	2004.12.23.20.09.36;	author rjw;	state Exp;
branches;
next	1.199;

1.199
date	2004.12.22.22.27.11;	author rjw;	state Exp;
branches;
next	1.198;

1.198
date	2004.12.20.22.39.36;	author rjw;	state Exp;
branches;
next	1.197;

1.197
date	2004.12.15.16.39.25;	author rjw;	state Exp;
branches;
next	1.196;

1.196
date	2004.12.06.22.38.17;	author rjw;	state Exp;
branches;
next	1.195;

1.195
date	2004.11.12.21.03.46;	author rjw;	state Exp;
branches;
next	1.194;

1.194
date	2004.05.12.15.25.57;	author rjw;	state Exp;
branches;
next	1.193;

1.193
date	2004.04.19.18.25.18;	author rjw;	state Exp;
branches;
next	1.192;

1.192
date	2004.04.09.15.52.47;	author rjw;	state Exp;
branches;
next	1.191;

1.191
date	2004.04.05.20.06.11;	author rjw;	state Exp;
branches;
next	1.190;

1.190
date	2004.03.26.17.03.33;	author rjw;	state Exp;
branches;
next	1.189;

1.189
date	2004.03.25.19.59.39;	author rjw;	state Exp;
branches;
next	1.188;

1.188
date	2004.03.24.22.21.33;	author rjw;	state Exp;
branches;
next	1.187;

1.187
date	2004.03.23.19.14.26;	author rjw;	state Exp;
branches;
next	1.186;

1.186
date	2004.03.22.21.45.52;	author rjw;	state Exp;
branches;
next	1.185;

1.185
date	2004.03.22.16.37.19;	author rjw;	state Exp;
branches;
next	1.184;

1.184
date	2004.03.20.00.12.12;	author rjw;	state Exp;
branches;
next	1.183;

1.183
date	2004.03.18.16.49.52;	author rjw;	state Exp;
branches;
next	1.182;

1.182
date	2004.03.17.16.07.35;	author rjw;	state Exp;
branches;
next	1.181;

1.181
date	2004.03.16.23.29.50;	author rjw;	state Exp;
branches;
next	1.180;

1.180
date	2004.03.16.22.39.29;	author rjw;	state Exp;
branches;
next	1.179;

1.179
date	2004.03.12.17.21.56;	author rjw;	state Exp;
branches;
next	1.178;

1.178
date	2004.03.11.16.59.10;	author rjw;	state Exp;
branches;
next	1.177;

1.177
date	2004.03.11.16.36.19;	author rjw;	state Exp;
branches;
next	1.176;

1.176
date	2004.03.10.22.53.22;	author rjw;	state Exp;
branches;
next	1.175;

1.175
date	2004.03.08.22.00.22;	author rjw;	state Exp;
branches;
next	1.174;

1.174
date	2004.03.08.21.11.44;	author rjw;	state Exp;
branches;
next	1.173;

1.173
date	2004.03.08.16.54.30;	author rjw;	state Exp;
branches;
next	1.172;

1.172
date	2004.03.03.20.05.07;	author rjw;	state Exp;
branches;
next	1.171;

1.171
date	2004.03.03.19.07.28;	author rjw;	state Exp;
branches;
next	1.170;

1.170
date	2004.03.02.16.19.32;	author rjw;	state Exp;
branches;
next	1.169;

1.169
date	2004.02.26.18.59.43;	author rjw;	state Exp;
branches;
next	1.168;

1.168
date	2004.02.24.19.37.24;	author rjw;	state Exp;
branches;
next	1.167;

1.167
date	2004.02.19.21.21.28;	author rjw;	state Exp;
branches;
next	1.166;

1.166
date	2004.02.18.00.05.25;	author rjw;	state Exp;
branches;
next	1.165;

1.165
date	2004.02.14.00.45.36;	author rjw;	state Exp;
branches;
next	1.164;

1.164
date	2004.02.04.22.31.28;	author rjw;	state Exp;
branches;
next	1.163;

1.163
date	2003.12.31.21.44.54;	author rjw;	state Exp;
branches;
next	1.162;

1.162
date	2003.12.29.19.13.43;	author rjw;	state Exp;
branches;
next	1.161;

1.161
date	2003.12.29.16.25.32;	author rjw;	state Exp;
branches;
next	1.160;

1.160
date	2003.12.24.23.25.57;	author rjw;	state Exp;
branches;
next	1.159;

1.159
date	2003.12.24.21.09.47;	author rjw;	state Exp;
branches;
next	1.158;

1.158
date	2003.12.24.20.12.34;	author rjw;	state Exp;
branches;
next	1.157;

1.157
date	2003.12.19.19.01.02;	author rjw;	state Exp;
branches;
next	1.156;

1.156
date	2003.12.17.22.30.00;	author rjw;	state Exp;
branches;
next	1.155;

1.155
date	2003.12.17.16.53.53;	author rjw;	state Exp;
branches;
next	1.154;

1.154
date	2003.12.15.23.22.33;	author rjw;	state Exp;
branches;
next	1.153;

1.153
date	2003.12.15.19.36.00;	author rjw;	state Exp;
branches;
next	1.152;

1.152
date	2003.12.12.21.20.15;	author rjw;	state Exp;
branches;
next	1.151;

1.151
date	2003.12.12.19.49.45;	author rjw;	state Exp;
branches;
next	1.150;

1.150
date	2003.12.11.21.56.34;	author rjw;	state Exp;
branches;
next	1.149;

1.149
date	2003.12.11.18.37.27;	author rjw;	state Exp;
branches;
next	1.148;

1.148
date	2003.12.08.19.27.44;	author rjw;	state Exp;
branches;
next	1.147;

1.147
date	2003.10.28.22.38.59;	author rjw;	state Exp;
branches;
next	1.146;

1.146
date	2003.10.23.19.33.13;	author rjw;	state Exp;
branches;
next	1.145;

1.145
date	2003.10.22.20.37.29;	author rjw;	state Exp;
branches;
next	1.144;

1.144
date	2003.10.21.19.28.45;	author rjw;	state Exp;
branches;
next	1.143;

1.143
date	2003.10.16.22.29.40;	author rjw;	state Exp;
branches;
next	1.142;

1.142
date	2003.10.16.16.18.03;	author rjw;	state Exp;
branches;
next	1.141;

1.141
date	2003.10.01.14.17.43;	author rjw;	state Exp;
branches;
next	1.140;

1.140
date	2003.09.30.15.40.55;	author rjw;	state Exp;
branches;
next	1.139;

1.139
date	2003.09.29.19.25.50;	author rjw;	state Exp;
branches;
next	1.138;

1.138
date	2003.09.26.20.55.13;	author rjw;	state Exp;
branches;
next	1.137;

1.137
date	2003.09.25.22.58.26;	author rjw;	state Exp;
branches;
next	1.136;

1.136
date	2003.09.25.16.26.25;	author rjw;	state Exp;
branches;
next	1.135;

1.135
date	2003.09.24.23.08.18;	author rjw;	state Exp;
branches;
next	1.134;

1.134
date	2003.09.18.18.30.17;	author rjw;	state Exp;
branches;
next	1.133;

1.133
date	2003.05.30.18.19.15;	author rjw;	state Exp;
branches;
next	1.132;

1.132
date	2003.05.28.22.19.33;	author rjw;	state Exp;
branches;
next	1.131;

1.131
date	2003.05.13.20.43.26;	author rjw;	state Exp;
branches;
next	1.130;

1.130
date	2003.05.09.18.55.43;	author rjw;	state Exp;
branches;
next	1.129;

1.129
date	2003.05.06.20.22.46;	author rjw;	state Exp;
branches;
next	1.128;

1.128
date	2003.04.30.21.07.49;	author rjw;	state Exp;
branches;
next	1.127;

1.127
date	2003.04.29.19.55.35;	author rjw;	state Exp;
branches;
next	1.126;

1.126
date	2003.04.29.14.27.51;	author rjw;	state Exp;
branches;
next	1.125;

1.125
date	2003.04.14.22.00.37;	author rjw;	state Exp;
branches;
next	1.124;

1.124
date	2003.04.11.19.08.31;	author rjw;	state Exp;
branches;
next	1.123;

1.123
date	2003.04.01.20.34.32;	author rjw;	state Exp;
branches;
next	1.122;

1.122
date	2003.03.28.23.05.34;	author rjw;	state Exp;
branches;
next	1.121;

1.121
date	2003.03.21.23.36.56;	author rjw;	state Exp;
branches;
next	1.120;

1.120
date	2003.03.21.21.35.34;	author rjw;	state Exp;
branches;
next	1.119;

1.119
date	2003.03.19.16.48.32;	author rjw;	state Exp;
branches;
next	1.118;

1.118
date	2003.03.06.20.28.25;	author rjw;	state Exp;
branches;
next	1.117;

1.117
date	2003.03.03.21.40.10;	author rjw;	state Exp;
branches;
next	1.116;

1.116
date	2003.03.03.21.07.35;	author rjw;	state Exp;
branches;
next	1.115;

1.115
date	2003.02.28.20.47.41;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2003.02.27.19.20.25;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2003.02.26.21.42.57;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2003.02.25.22.17.11;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2003.02.24.23.44.34;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2003.02.21.20.31.07;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2003.02.21.18.56.31;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2003.02.19.22.41.39;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2003.02.19.21.47.35;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2003.02.18.23.19.19;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2003.02.18.20.11.02;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2003.02.16.23.58.13;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2003.02.13.23.06.34;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2003.02.11.18.21.21;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2003.02.07.20.20.52;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2003.02.04.18.45.55;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2003.02.03.21.57.28;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2003.01.31.21.29.02;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2003.01.27.23.26.14;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2003.01.22.19.32.17;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2003.01.13.22.22.16;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2003.01.02.22.18.59;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2002.12.24.22.50.49;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2002.12.17.21.32.53;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2002.11.21.22.54.01;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2002.11.15.20.27.15;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2002.10.04.21.26.29;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2002.09.30.21.36.42;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2002.09.26.19.05.33;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2002.09.11.18.53.19;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2002.09.06.19.56.11;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2002.08.29.23.06.30;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2002.08.26.22.49.08;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2002.08.23.21.00.42;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2002.08.15.20.03.49;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2002.08.02.17.03.38;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2002.07.12.20.09.41;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2002.07.11.22.48.31;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2002.07.09.19.52.40;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2002.06.28.19.40.18;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2002.06.26.18.42.54;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2002.06.21.21.52.23;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2002.06.21.18.13.45;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2002.06.05.19.31.38;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2002.06.04.23.07.25;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2002.06.03.22.35.23;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2002.05.21.19.10.29;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2002.05.13.21.31.44;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2002.05.10.18.02.15;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2002.05.08.21.58.59;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2002.05.08.19.22.01;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2002.05.07.20.15.07;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2002.05.03.23.16.46;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2002.05.03.19.58.31;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2002.05.02.20.53.18;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2002.05.01.14.26.03;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2002.04.22.14.32.17;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2002.04.15.21.21.40;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2002.04.12.21.02.07;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2002.04.11.15.36.34;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2002.01.10.22.06.59;	author bobw;	state Exp;
branches;
next	1.54;

1.54
date	2001.10.07.23.03.56;	author bobw;	state Exp;
branches;
next	1.53;

1.53
date	2001.09.16.21.42.34;	author bobw;	state Exp;
branches;
next	1.52;

1.52
date	2001.09.04.15.44.40;	author bobw;	state Exp;
branches;
next	1.51;

1.51
date	2001.08.30.20.29.25;	author bobw;	state Exp;
branches;
next	1.50;

1.50
date	2001.08.28.20.30.27;	author bobw;	state Exp;
branches;
next	1.49;

1.49
date	2001.08.28.19.19.02;	author bobw;	state Exp;
branches;
next	1.48;

1.48
date	2001.08.23.21.13.55;	author bobw;	state Exp;
branches;
next	1.47;

1.47
date	2001.08.22.20.41.53;	author bobw;	state Exp;
branches;
next	1.46;

1.46
date	2001.08.17.22.00.12;	author bobw;	state Exp;
branches;
next	1.45;

1.45
date	2001.08.14.20.43.55;	author bobw;	state Exp;
branches;
next	1.44;

1.44
date	2001.08.01.14.55.32;	author bobw;	state Exp;
branches;
next	1.43;

1.43
date	2001.07.27.21.28.41;	author bobw;	state Exp;
branches;
next	1.42;

1.42
date	2001.07.25.16.08.23;	author bobw;	state Exp;
branches;
next	1.41;

1.41
date	2001.07.12.17.57.03;	author bobw;	state Exp;
branches;
next	1.40;

1.40
date	2001.06.27.21.45.13;	author bobw;	state Exp;
branches;
next	1.39;

1.39
date	2001.06.21.18.24.34;	author bobw;	state Exp;
branches;
next	1.38;

1.38
date	2001.06.20.20.07.10;	author bobw;	state Exp;
branches;
next	1.37;

1.37
date	2001.06.18.18.42.23;	author bobw;	state Exp;
branches;
next	1.36;

1.36
date	2001.06.15.20.53.37;	author bobw;	state Exp;
branches;
next	1.35;

1.35
date	2001.06.14.17.41.55;	author bobw;	state Exp;
branches;
next	1.34;

1.34
date	2001.05.25.14.53.29;	author bobw;	state Exp;
branches;
next	1.33;

1.33
date	2001.05.17.15.11.20;	author bobw;	state Exp;
branches;
next	1.32;

1.32
date	2001.05.10.22.31.15;	author bobw;	state Exp;
branches;
next	1.31;

1.31
date	2001.05.10.17.58.19;	author bobw;	state Exp;
branches;
next	1.30;

1.30
date	2001.05.08.21.35.45;	author bobw;	state Exp;
branches;
next	1.29;

1.29
date	2001.04.26.21.25.46;	author bobw;	state Exp;
branches;
next	1.28;

1.28
date	2001.04.25.20.54.37;	author bobw;	state Exp;
branches;
next	1.27;

1.27
date	2001.03.27.20.07.26;	author bobw;	state Exp;
branches;
next	1.26;

1.26
date	2001.03.12.19.48.10;	author bobw;	state Exp;
branches;
next	1.25;

1.25
date	2001.01.27.00.24.40;	author bobw;	state Exp;
branches;
next	1.24;

1.24
date	2001.01.24.20.05.58;	author bobw;	state Exp;
branches;
next	1.23;

1.23
date	2001.01.20.00.44.24;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.01.11.16.35.12;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.01.04.22.27.54;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2000.12.28.22.13.40;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2000.12.22.16.18.29;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2000.12.20.20.22.28;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.20.20.08.39;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.15.23.46.00;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2000.12.13.19.57.27;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.06.19.58.43;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2000.12.05.19.05.33;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2000.12.04.22.07.40;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.22.23.11.51;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.21.20.03.30;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.25.20.12.38;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.14.20.27.33;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.29.21.22.48;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.18.00.16.01;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.21.17.42.49;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.19.22.35.36;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.30.16.33.09;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.26;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.34;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.34;	author wit;	state Exp;
branches;
next	;


desc
@@


1.417
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef typedefs_h
#define typedefs_h

//------------------------------------------------------------------------------
// Header file: "typedefs.h"
// Typedefs, forward declarations, and some global constants.
//------------------------------------------------------------------------------

#include <macs.h>

#include <stdio.h>
#include <string.h>
#include <math.h>

//------------------------------------------------------------------------------
// Namespace NonClass.
//
// Namespace for various names in WIT that are not for classes, but would
// otherwise be in the global namespace, e.g.:
//
//    enums
//    enum values
//    non-member functions
//
// Contributions to this namespace are made in various header files of WIT.
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   }

using namespace WitNonClass;

//------------------------------------------------------------------------------
// Forward declarations.
//------------------------------------------------------------------------------

class WitAbortApiExc;
class WitAbsLink;
class WitAbsLinkMgr;
class WitAbsList;
class WitAbsObjStItr;
class WitAbsScenInputAtt;
class WitAbsScenSolnAtt;
class WitAbsStItr;
class WitAltPt;
class WitApiCall;
class WitApiMgr;
class WitAsapBaDir;
class WitAsapMeDir;
class WitAttribute;
class WitAvailSched;
class WitBaCand;
class WitBaDir;
class WitBaMat;
class WitBaMgr;
class WitBaPt;
class WitBelowLister;
class WitBillEntry;
class WitBomEntry;
class WitBopEntry;
class WitBoundPair;
class WitBoundSet;
class WitBoundedVar;
class WitCapacity;
class WitChoiceParam;
class WitCoeff;
class WitCompMgr;
class WitComponent;
class WitConsEntry;
class WitCplexGateway;
class WitCplexMgr;
class WitCpxParSpec;
class WitCpxParSpecMgr;
class WitCumShipVar;
class WitDLSortEl;
class WitDataReader;
class WitDataRepos;
class WitDataWriter;
class WitDblFlexVec;
class WitDelComp;
class WitDelCompItr;
class WitDemand;
class WitDetAltPt;
class WitDetImpOP;
class WitDetOptImpMgr;
class WitDetVar;
class WitDoubleParam;
class WitEntity;
class WitEqAllPerf;
class WitEqAllocator;
class WitExecVar;
class WitExpRest;
class WitExtOptMgr;
class WitFSS;
class WitFeasChkr;
class WitFixedPegEl;
class WitFixedPer;
class WitFlexVAsst;
class WitFlowMonitor;
class WitFssMrpExp;
class WitGlobalComp;
class WitHeurAllMgr;
class WitHeurAtor;
class WitHeurCritList;
class WitHeurImpPerf;
class WitHeurImploder;
class WitHeurModifier;
class WitISRealArg;
class WitIVRealArg;
class WitInputID;
class WitIntParam;
class WitIssueMsgExc;
class WitMaterial;
class WitMeCand;
class WitMeDir;
class WitMeMgr;
class WitMePt;
class WitMeSitePt;
class WitMrCand;
class WitMrCoord;
class WitMrMgr;
class WitMrPt;
class WitMrSelMgr;
class WitMrSite;
class WitMsg;
class WitMsgArg;
class WitMsgFacility;
class WitMsgFrag;
class WitMsgMgr;
class WitMultiObjCon;
class WitMultiObjMgr;
class WitMultiObjVar;
class WitMultiObjVecIR;
class WitNode;
class WitNodeTable;
class WitNonSubVar;
class WitNstnBaDir;
class WitNstnMeDir;
class WitNtbvVar;
class WitOSRealArg;
class WitOTDARealArg;
class WitOVRAElem;
class WitOVRealArg;
class WitObjLink;
class WitObjLinkMgr;
class WitObjStageMgr;
class WitObjVec;
class WitObjective;
class WitOperation;
class WitOptComp;
class WitOptCon;
class WitOptProblem;
class WitOptStarter;
class WitOptVC;
class WitOptVar;
class WitOrigMrpExp;
class WitOutputDisplayer;
class WitParam;
class WitParamMgr;
class WitPart;
class WitPclBldr;
class WitPclEl;
class WitPegEl;
class WitPegger;
class WitPenExMgr;
class WitPerStageMgr;
class WitPipBldr;
class WitPipMgr;
class WitPipPartReqMgr;
class WitPipPgg;
class WitPipReqMgr;
class WitPipReqSpec;
class WitPipReqSrc;
class WitPipSeqEl;
class WitPipSeqMgr;
class WitPostprocessor;
class WitPrAltPt;
class WitPrCoord;
class WitPrMgr;
class WitPrSelMgr;
class WitPrSelPt;
class WitPreprocessor;
class WitProblem;
class WitReqPt;
class WitReqPtMgr;
class WitReqSched;
class WitResourceCon;
class WitRtAnalyzer;
class WitRtCand;
class WitRtMgr;
class WitRtSite;
class WitRun;
class WitSaeMgr;
class WitScenAttMgr;
class WitScenGroup;
class WitScenMgr;
class WitScenario;
class WitScrapVar;
class WitSelCand;
class WitSelMgr;
class WitSelPt;
class WitSelector;
class WitSession;
class WitSglObjVecIR;
class WitSglSrcMgr;
class WitSglSrcSite;
class WitShipCon;
class WitShipVar;
class WitSlbCon;
class WitSlbvVar;
class WitSolnWriter;
class WitSplitCntr;
class WitSplitPt;
class WitSplitter;
class WitSsrCand;
class WitSsrMgr;
class WitSsrPt;
class WitStBddVar;
class WitStCumShipVar;
class WitStExecVar;
class WitStNonSubVar;
class WitStResCon;
class WitStScrapVar;
class WitStShipCon;
class WitStShipVar;
class WitStSlbvVar;
class WitStStockVar;
class WitStSubCon;
class WitStSubVar;
class WitStage;
class WitStageMgr;
class WitStochAtt;
class WitStochAttMgr;
class WitStochImpMgr;
class WitStochImpOP;
class WitStochLoc;
class WitStochModeMgr;
class WitStochOptMgr;
class WitStochVar;
class WitStockVar;
class WitString;
class WitStringParam;
class WitSubCon;
class WitSubEntry;
class WitSubVar;
class WitTbvCon;
class WitTimer;
class WitTripLink;
class WitTripLinkMgr;
class WitVariant;

//------------------------------------------------------------------------------
// Forward declaration templates.
//------------------------------------------------------------------------------

template <typename Elem>                        class WitList;
template <typename Elem>                        class WitVector;
template <typename Elem>                        class WitTVec;
template <typename Elem>                        class WitPtrVec;
template <typename Elem>                        class WitPtrVecItr;
template <typename Elem>                        class WitPtrTVec;
template <typename Elem>                        class WitRef;

template <typename Elem>                        class WitFlexVec;

template <typename DomEl,   typename RangeEl>   class WitMapping;
template <typename DomEl,   typename RangeEl>   class WitSchedule;
template <typename DomEl,   typename RangeEl>   class WitPtrMap;
template <typename DomEl,   typename RangeEl>   class WitPtrSched;

template <typename ObjByPtr>                    class WitObjStItr;
template <typename ObjByPtr>                    class WitObjStack;

template                   <typename ObjByVal>  class WitPairLink;
template                   <typename ObjByVal>  class WitPairLinkMgr;

template <typename ObjByPtr, typename ObjByVal> class WitPairStItr;
template <typename ObjByPtr, typename ObjByVal> class WitPairStack;

template <typename ObjByPtr>                    class WitTripStack;

template <typename Elem>                        class WitAbsPVecCompFtor;

template <typename DerNode>                     class WitDerNodeTable;

template <typename SrcComp>                     class WitPipAttPgg;

template <typename SortEntry>                   class WitAvSorter;

template <typename Entry>                       class WitExecPerSched;

template <typename Owner>                       class WitScenInputAtt;
template <typename Owner>                       class WitScenSolnAtt;
template <typename Owner>                       class WitScenAtt;

namespace std
   {
   template <class T1, class T2> struct pair;
   };

//------------------------------------------------------------------------------
// Useful constants.
//------------------------------------------------------------------------------

#define FLOAT_EPSILON 1.0E-06

//------------------------------------------------------------------------------
// NET_TOL, the tolerance used for netting and explosions.
//------------------------------------------------------------------------------

#define NET_TOL 1.0E-08

//------------------------------------------------------------------------------
// SEARCH_TOL, the tolerance used by the heuristic for search.
//------------------------------------------------------------------------------

#define SEARCH_TOL 1.0E-03

//------------------------------------------------------------------------------
// FEAS_TOL, the tolerance used for feasibility tests.
//------------------------------------------------------------------------------

#define FEAS_TOL 0.001

//------------------------------------------------------------------------------

typedef int WitPeriod;
   //
   // Used to index into arrays of size nPeriods.

typedef char * WitAttr;
typedef int    WitReturnCode;
typedef char * WitFileFormat;
typedef int    WitBoolean;
   //
   // Typedefs used by the API.
   // Equivalent to witAttr and witFileFormat, but internal typedefs normally
   // start with upper case.

typedef const char * WitMsgID;
   //
   // Declaring a variable to be of type MsgID indicates that it is a
   // const char * intended to be used as the ID string for a Msg.

typedef const char * WitMsgFragID;
   //
   // Declaring a variable to be of type MsgFragID indicates that it is a
   // const char * intended to be used as the ID string for a MsgFrag.

//------------------------------------------------------------------------------
// Typedefs for template classes.
//------------------------------------------------------------------------------

typedef class WitObjStack  <WitRtCand>               WitRtCandStack;

typedef class WitPairStack <WitPart,      WitPeriod> WitPartPerStack;
typedef class WitPairStack <WitDemand,    WitPeriod> WitDemPerStack;
typedef class WitPairStack <WitRtCand,    WitPeriod> WitRtCandPerStack;

typedef class WitPairStack <WitSelPt,       double>  WitSelPtDblStack;
typedef class WitPairStack <WitSelCand,     double>  WitSelCandDblStack;
typedef class WitPairStack <WitRtCand,      double>  WitRtCandDblStack;
typedef class WitPairStack <WitFixedPer,    double>  WitPerDblStack;

typedef class WitPairStItr <WitDemand, WitPeriod>    WitDemPerItr;

typedef class WitTripStack <WitPart>                 WitPartTripStack;
typedef class WitTripStack <WitOperation>            WitOpnTripStack;
typedef class WitTripStack <WitBopEntry>             WitBopEntTripStack;
typedef class WitTripStack <WitSubEntry>             WitSubTripStack;
typedef class WitTripStack <WitDemand>               WitDemTripStack;

typedef class WitPtrVecItr <WitCoeff>                WitCoeffItr;

typedef class WitPairStack <WitPipReqSrc, double>    WitPipReqList;
typedef class WitPairStItr <WitPipReqSrc, double>    WitPipReqListItr;
typedef class WitObjStack  <WitPipReqSrc>            WitPipReqSrcStack;
typedef class WitPtrVecItr <WitPipSeqEl>             WitPipSeqElItr;
typedef class WitTripStack <WitPipReqSrc>            WitPipReqSeq;

//------------------------------------------------------------------------------

#endif
@


1.416
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 2
a2 6
//----------------------------------------------------------------------------
// 
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
d4 10
a13 1
// ---------------------------------------------------------------------------
@


1.415
log
@Revised the copyright date.
@
text
@d2 2
a3 2
//
//     (c) Copyright IBM Corp. 2011.
d38 2
a39 2
{
}
d307 3
a309 3
{
template <class T1, class T2> struct pair;
};
d338 2
a339 2
//
// Used to index into arrays of size nPeriods.
d345 4
a348 4
//
// Typedefs used by the API.
// Equivalent to witAttr and witFileFormat, but internal typedefs normally
// start with upper case.
d351 3
a353 3
//
// Declaring a variable to be of type MsgID indicates that it is a
// const char * intended to be used as the ID string for a Msg.
d356 3
a358 3
//
// Declaring a variable to be of type MsgFragID indicates that it is a
// const char * intended to be used as the ID string for a MsgFrag.
@


1.414
log
@Replaced class SolverMgr with class CplexGateway.
@
text
@d2 2
a3 2
// 
//     (c) Copyright IBM Corp. 2006.
d38 2
a39 2
   {
   }
d307 3
a309 3
   {
   template <class T1, class T2> struct pair;
   };
d338 2
a339 2
   //
   // Used to index into arrays of size nPeriods.
d345 4
a348 4
   //
   // Typedefs used by the API.
   // Equivalent to witAttr and witFileFormat, but internal typedefs normally
   // start with upper case.
d351 3
a353 3
   //
   // Declaring a variable to be of type MsgID indicates that it is a
   // const char * intended to be used as the ID string for a Msg.
d356 3
a358 3
   //
   // Declaring a variable to be of type MsgFragID indicates that it is a
   // const char * intended to be used as the ID string for a MsgFrag.
@


1.413
log
@CPX Param Specs
@
text
@d80 2
a221 1
class WitSolverMgr;
@


1.412
log
@CPX Params
@
text
@d80 2
a81 2
class WitCpxParam;
class WitCpxParamMgr;
@


1.411
log
@Modifiable Heuristic Allocation
@
text
@d80 2
@


1.410
log
@Modifiable heuristic allocation
@
text
@a302 2
template <typename Owner, typename Site>        class WitRecoverySet;

@


1.409
log
@Heuristic Adjustment
@
text
@a107 1
class WitHeurAdjuster;
d113 1
@


1.408
log
@Heuristic Adjustment
@
text
@d108 1
a108 1
class WitHeurAdjMgr;
@


1.407
log
@Pause/Resume
@
text
@d108 1
a113 1
class WitHeurPauseMgr;
@


1.406
log
@CPLEX
@
text
@d113 1
@


1.405
log
@Selection Recovery
@
text
@d90 1
a90 1
class WitDetImpOM;
d157 1
a157 1
class WitOptModel;
d241 1
a241 1
class WitStochImpOM;
@


1.404
log
@Selection Recovery
@
text
@d302 1
a302 1
template <typename Owner, typename Site>        class WitAltSet;
@


1.403
log
@Selection Recovery
@
text
@d302 2
@


1.402
log
@Removed OptObj classes.
@
text
@a184 1
class WitPrPt;
d186 1
@


1.401
log
@Removed class StBoundsObj.
@
text
@a90 1
class WitDetObj;   
a157 1
class WitOptObj;
a243 1
class WitStochObj;
@


1.400
log
@Removed class PrimaryObj.
@
text
@a226 1
class WitStBoundsObj;
@


1.399
log
@Removed class BoundsObj.
@
text
@a189 1
class WitPrimaryObj;
@


1.398
log
@Multi-Obj Mode
@
text
@a73 1
class WitBoundsObj;
@


1.397
log
@Multi-Obj Mode
@
text
@d146 1
a258 1
class WitTbvVar;
@


1.396
log
@Multi-Obj Mode
@
text
@d257 2
@


1.395
log
@Multi-objective mode
@
text
@d82 1
d95 1
a95 1
class WitDLSortEl;
@


1.394
log
@Multi-objective mode
@
text
@a77 1
class WitCoinSolver;
a158 1
class WitOptSolver;
d219 1
@


1.393
log
@Multi-objective mode
@
text
@d137 1
@


1.392
log
@Multi-objective mode
@
text
@a136 1
class WitMultiObjCon;
@


1.391
log
@Multi-objective mode
@
text
@d137 1
@


1.390
log
@Multi-Objective Mode
@
text
@d138 1
@


1.389
log
@Multi-Objective Mode
@
text
@d151 1
@


1.388
log
@Multi-Objective Mode
@
text
@d138 1
a138 1
class WitMultiObjVec;
d210 1
a214 1
class WitSingleObjVec;
@


1.387
log
@Multi-Objective Mode
@
text
@d138 1
d214 1
@


1.386
log
@Multi-Objective Mode
@
text
@a137 1
class WitMultiObjVec;
a212 1
class WitSingleObjVec;
@


1.385
log
@Multi-objective mode.
@
text
@d138 1
d214 1
@


1.384
log
@Obj1Obj ==> DetObj
@
text
@d137 1
d150 1
@


1.383
log
@Removing objective #2.
@
text
@d92 1
a145 1
class WitObj1Obj;   
@


1.382
log
@Removing objective #2.
@
text
@a147 2
class WitObjFunc;
class WitObjFunc1;
@


1.381
log
@Stochastic Implosion
@
text
@a117 1
class WitInvObj;    
a145 1
class WitObj2Obj;   
a149 1
class WitObjFunc2;
a192 1
class WitRevObj;    
a207 1
class WitServObj;   
a250 1
class WitSubObj;    
@


1.380
log
@Stochastic Implosion
@
text
@d245 1
a245 1
class WitStochImpOP;
@


1.379
log
@Stochastic Implosion
@
text
@d91 1
a91 1
class WitDetImpOP;
@


1.378
log
@Stochastic Implosion
@
text
@d157 1
a158 1
class WitOptProb;
@


1.377
log
@Object name change.
@
text
@a158 1
class WitOptProbEl;
d161 1
@


1.376
log
@Stochastic Implosion
@
text
@d295 2
@


1.375
log
@Stochastic Implosion
@
text
@d240 1
@


1.374
log
@Stochastic Implosion
@
text
@d173 1
@


1.373
log
@Stochastic Implosion
@
text
@d239 1
@


1.372
log
@Stochastic Implosion
@
text
@d153 1
a238 1
class WitStageMgr;
@


1.371
log
@Stochastic Implosion
@
text
@a53 1
class WitAbsStBS;
a224 1
class WitStBSMgr;
@


1.370
log
@Stochastic Implosion
@
text
@d54 1
d226 1
@


1.369
log
@Stochastic Implosion
@
text
@a275 1
template <typename DomEl,   typename RangeEl>   class WitRefMap;
@


1.368
log
@Stochastic Implosion
@
text
@d201 1
@


1.367
log
@Stochastic Implosion
@
text
@a200 1
class WitScenAttMgr;
@


1.366
log
@Stochastic Implosion
@
text
@d301 1
a301 1
template <typename Owner>                       class WitScenAttTable;
@


1.365
log
@Stochastic Implosion
@
text
@d52 2
a202 1
class WitScenInputAtt;
a203 1
class WitScenSolnAtt;
d299 2
a300 2
template <typename Owner>                       class WitConcScenInputAtt;
template <typename Owner>                       class WitConcScenSolnAtt;
@


1.364
log
@Stochastic Implosion
@
text
@d301 1
a301 1
template <typename Owner>                       class WitScenAtt;
@


1.363
log
@Stochastic Implosion
@
text
@a198 1
class WitScenTmp;
d201 1
d203 1
@


1.362
log
@Stochastic Implosion
@
text
@d199 1
a199 1
class WitScenAtt;
d298 3
a300 2
template <typename Owner>                       class WitInputScenAtt;
template <typename Owner>                       class WitSolnScenAtt;
@


1.361
log
@Stochastic Implosion
@
text
@d298 2
a299 2
template <typename Owner>                       class WitScenInputAtt;
template <typename Owner>                       class WitScenSolnAtt;
@


1.360
log
@Stochastic Implosion
@
text
@d199 2
d298 2
@


1.359
log
@Stochastic Implosion
@
text
@a226 1
class WitStPrimaryObj;
@


1.358
log
@Stochastic Implosion
@
text
@d223 1
d227 1
@


1.357
log
@Stochastic Implosion
@
text
@d230 1
@


1.356
log
@Stochastic Implosion
@
text
@d222 1
@


1.355
log
@Stochastic Implosion
@
text
@d199 1
a200 1
class WitScenSet;
@


1.354
log
@Stochastic Implosion
@
text
@a199 1
class WitScenPer;
@


1.353
log
@Stochastic Implosion
@
text
@a201 1
class WitScenSetPer;
d238 1
@


1.352
log
@Stochastic Implosion
@
text
@a293 2
template <typename DerComp,  typename StOptEl>  class WitStOptElMgr;

@


1.351
log
@Stochastic Implosion
@
text
@d202 1
@


1.350
log
@Stochastic Implosion
@
text
@d201 1
@


1.349
log
@Stochastic Implosion
@
text
@d224 1
d230 2
@


1.348
log
@Stochastic Implosion
@
text
@d228 1
@


1.347
log
@Stochastic Implosion
@
text
@d222 1
d226 2
@


1.346
log
@Stochastic Implosion
@
text
@d91 1
d233 1
@


1.345
log
@Stochastic Implosion
@
text
@a228 1
class WitStochImploder;
d231 1
@


1.344
log
@Stochastic Implosion
@
text
@d90 1
a152 1
class WitOptImploder;
@


1.343
log
@Stochastic Implosion
@
text
@a93 3
class WitExecPerItr;
class WitExecPerMgr;
class WitExecPerSched;
d281 2
@


1.342
log
@Stochastic Implosion
@
text
@d234 1
@


1.341
log
@Stochastic Implosion
@
text
@d225 1
@


1.340
log
@Stochastic Implosion
@
text
@d225 1
@


1.339
log
@Stochastic Implosion
@
text
@d281 2
@


1.338
log
@Stochastic Implosion
@
text
@d202 1
@


1.337
log
@Stochastic Implosion
@
text
@d280 1
@


1.336
log
@ASAP Pegging Order
@
text
@d223 1
@


1.335
log
@ASAP Pegging Order.
@
text
@a172 1
class WitPipMatPgr;
d174 1
@


1.334
log
@ASAP Pegging Order
@
text
@d362 1
@


1.333
log
@Stochastic Implosion
@
text
@d172 2
@


1.332
log
@Stochastic Implosion
@
text
@d225 1
@


1.331
log
@Stochastic Implosion
@
text
@d89 1
a114 1
class WitImpOptProb;
@


1.330
log
@Stochastic Implosion.
@
text
@d222 2
@


1.329
log
@Stochastic Implosion
@
text
@d223 1
@


1.328
log
@Stochastic Implosion
@
text
@a223 1
class WitStochRefMgr;
@


1.327
log
@Stochastic Implosion
@
text
@a184 1
class WitPreData;
@


1.326
log
@Stochastic Implosion
@
text
@d94 1
@


1.325
log
@Stochastic Implosion
@
text
@d184 1
@


1.324
log
@Stochastic Implosion
@
text
@a220 1
class WitStochAttMgr;
d223 1
@


1.323
log
@Stochastic Implosion
@
text
@d221 1
@


1.322
log
@Stochastic Implosion
@
text
@a220 1
class WitStochDataMgr;
d222 1
@


1.321
log
@Stochastic Implosion
@
text
@d198 1
@


1.320
log
@Stochastic Implosion
@
text
@d219 1
@


1.319
log
@Stochastic Implosion
@
text
@a353 2
typedef struct std::pair   <WitPart *, WitPeriod>    WitPartPer;

@


1.318
log
@Stochastic Implosion
@
text
@a57 2
class WitAttMgr;
class WitAttRep;
@


1.317
log
@Stochastic Implosion
@
text
@d58 2
@


1.316
log
@Stochastic Implosion
@
text
@d220 1
a220 1
class WitStochMgr;
@


1.315
log
@Stochastic Implosion
@
text
@d219 1
a219 1
class WitStochImploder;
@


1.314
log
@Stochastic Implosion
@
text
@d219 1
a220 1
class WitStochModeMgr;
@


1.313
log
@Stochastic Implosion
@
text
@d220 1
a220 1
class WitStochProb;
@


1.312
log
@Stochastic Implosion
@
text
@a196 1
class WitSIP;
d220 1
@


1.311
log
@Stochastic Implosion.
@
text
@d199 1
@


1.310
log
@Stochastic Implosion.
@
text
@d197 1
a218 1
class WitStProblem;
@


1.309
log
@Stochastic Implosion.
@
text
@d218 1
@


1.308
log
@External opt implosion.
@
text
@d218 1
@


1.307
log
@external opt implosion.
@
text
@d97 1
a97 1
class WitExtOptHandler;
@


1.306
log
@External opt implosion.
@
text
@d99 1
@


1.305
log
@External opt implosion.
@
text
@a52 1
class WitAfrMgr;
a54 1
class WitApiFuncRep;
@


1.304
log
@External opt implosion.
@
text
@d99 1
a99 1
class WitExtOptPerf;
@


1.303
log
@App controlled opt implosion.
@
text
@d99 1
@


1.302
log
@App controlled opt implosion.
@
text
@a82 1
class WitDataAlt;
@


1.301
log
@App controlled opt implosion.
@
text
@d53 1
a53 1
class WitAfaMgr;
d56 1
a56 1
class WitApiFuncAid;
@


1.300
log
@App controlled opt implode.
@
text
@d53 1
d56 1
@


1.299
log
@App controlled opt implosion.
@
text
@d157 1
@


1.298
log
@Removed optimizing implosion with lot sizes.
@
text
@d112 1
a112 1
class WitImpOM;
a122 1
class WitModelEl;
a153 1
class WitOptModel;
d155 2
@


1.297
log
@BOP entry execVol pegging.
@
text
@a111 1
class WitIlsMultVar;
a116 1
class WitLotSizeCon;
a122 2
class WitMlsCon;
class WitMlsMultVar;
@


1.296
log
@GPIP migration.
@
text
@d342 1
@


1.295
log
@GPIP migration.
@
text
@d347 2
a348 2
typedef class WitPairStack <WitPipReqSrc, double>    WitGpipReqList;
typedef class WitPairStItr <WitPipReqSrc, double>    WitGpipReqListItr;
@


1.294
log
@Replaced WIT's hash tables with std:maps.
@
text
@a104 4
class WitGpipReqMgr;
class WitGpipReqSpec;
class WitGpipReqSrc;
class WitGpipSeqEl;
d175 4
d347 4
a350 4
typedef class WitPairStack <WitGpipReqSrc, double>   WitGpipReqList;
typedef class WitPairStItr <WitGpipReqSrc, double>   WitGpipReqListItr;
typedef class WitObjStack  <WitGpipReqSrc>           WitGpipReqSrcStack;
typedef class WitPtrVecItr <WitGpipSeqEl>            WitGpipSeqElItr;
@


1.293
log
@New PIP pegging order.
@
text
@a108 1
class WitHashTable;
d144 1
a159 1
class WitOperationHashTable;
a171 1
class WitPartHashTable;
@


1.292
log
@New PIP pegging order.
@
text
@d349 2
a350 2
typedef class WitObjStack  <WitGpipReqSpec>          WitGpipReqList;
typedef class WitObjStItr  <WitGpipReqSpec>          WitGpipReqSpecItr;
@


1.291
log
@Updated the copyright date on all source files.
@
text
@d350 1
@


1.290
log
@Removed some more OSL items.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.289
log
@Removed class OptSolver.
@
text
@a281 4
#define OSL_INFTY     1.0E+31
   //
   // infinity for OSL

@


1.288
log
@Removed class OslSolver.
@
text
@d76 1
a165 1
class WitOptSolver;
@


1.287
log
@GPIP
@
text
@a168 1
class WitOslSolver;
@


1.286
log
@[shared-resource pegging]
@
text
@d104 4
a219 4
class WitSrpReqMgr;
class WitSrpReqSpec;
class WitSrpReqSrc;
class WitSrpSeqEl;
d354 3
a356 3
typedef class WitObjStack  <WitSrpReqSpec>           WitSrpReqList;
typedef class WitObjStack  <WitSrpReqSrc>            WitSrpReqSrcStack;
typedef class WitPtrVecItr <WitSrpSeqEl>             WitSrpSeqElItr;
@


1.285
log
@[shared-resource pegging]
@
text
@a232 1
class WitPipTarg;
d268 1
a268 1
template <typename SrcComp>                     class WitPipPegList;
@


1.284
log
@[shared-resource pegging]
@
text
@d177 1
a177 1
class WitPipOwner;
@


1.283
log
@[shared-resource pegging]
@
text
@a215 1
class WitSrpOwner;
a232 1
class WitUrpOwner;
@


1.282
log
@[shared-resource pegging]
@
text
@d235 1
a235 1
class WitUrpTarg;
d271 1
a271 1
template <typename SrcComp>                     class WitUrpPegList;
@


1.281
log
@[shared-resource pegging]
@
text
@a47 1
class WitAbsDLSorter;
a244 1
template <typename Elem>                        class WitDenseList;
@


1.280
log
@[shared-resource pegging]
@
text
@d357 2
@


1.279
log
@[shared-resource pegging]
@
text
@d95 1
@


1.278
log
@[shared-resource pegging]
@
text
@a333 4
typedef int WitSiz;
   //
   // Temporary typedef.

@


1.277
log
@[shared-resource pegging]
@
text
@d247 1
d362 1
@


1.276
log
@[shared-resource pegging]
@
text
@d269 1
a269 1
template <typename Elem>                        class WitAbsPVecSorter;
@


1.275
log
@Corrected typedef declaration of PartPer.
@
text
@d333 4
@


1.274
log
@[shared-resource pegging]
@
text
@d277 1
a277 1
   template <class T1, class T2>                   struct pair;
a354 2
typedef class std::pair    <WitPart *, WitPeriod>    WitPartPer;

d358 2
@


1.273
log
@[shared-resource pegging]
@
text
@d269 2
@


1.272
log
@[shared-resource pegging]
@
text
@a356 1
typedef class WitObjStack  <WitSrpSeqEl>             WitSrpSeqElStack;
@


1.271
log
@[shared-resource pegging]
@
text
@a357 1
typedef class WitObjStItr  <WitSrpSeqEl>             WitSrpSeqElItr;
@


1.270
log
@[shared-resource pegging]
@
text
@d357 1
@


1.269
log
@[shared-resource pegging]
@
text
@d356 1
a356 1

@


1.268
log
@[shared-resource pegging]
@
text
@d357 2
@


1.267
log
@[shared-resource pegging]
@
text
@d355 1
a355 1
typedef class WitPairStack <WitSrpReqSrc, double>    WitSrpReqPairStack;
@


1.266
log
@[shared-resource pegging]
@
text
@d217 1
a217 1
class WitSrpReqList;
@


1.265
log
@[shared-resource pegging]
@
text
@d219 1
d355 1
a355 1
typedef class WitPairStack <WitSrpSeqEl, double>     WitSrpReqPairStack;
@


1.264
log
@[shared-resource pegging]
@
text
@d354 1
a354 1
typedef class WitPairStack <WitSrpSeqEl, double>     WitSrpReqSet;
@


1.263
log
@[shared-resource pegging]
@
text
@d218 1
a218 1
class WitSrpReqPair;
@


1.262
log
@[shared-resource pegging]
@
text
@d354 2
@


1.261
log
@[shared-resource pegging]
@
text
@d218 1
a352 1
typedef class std::pair    <WitSrpSeqEl *, double>   WitSrpReqPair;
@


1.260
log
@[shared-resource pegging]
@
text
@d352 1
@


1.259
log
@[shared-resource pegging]
@
text
@a264 2
template <typename FirstEl>                     class WitPerPair;

d271 5
d333 1
a333 1
typedef class WitObjStack  <WitRtCand>                  WitRtCandStack;
d335 2
a336 2
typedef class WitPairStack <WitPart,      WitPeriod>   WitPartPerStack;
typedef class WitPairStack <WitDemand,    WitPeriod>    WitDemPerStack;
d339 2
a340 2
typedef class WitPairStack <WitSelPt,       double>   WitSelPtDblStack;
typedef class WitPairStack <WitSelCand,     double> WitSelCandDblStack;
d342 1
a342 1
typedef class WitPairStack <WitFixedPer,    double>     WitPerDblStack;
d344 1
a344 1
typedef class WitPairStItr <WitDemand, WitPeriod> WitDemPerItr;
d346 4
a349 1
typedef class WitPerPair   <WitPart> WitPartPer;
d351 1
a351 4
typedef class WitTripStack <WitPart>                           WitPartTripStack;
typedef class WitTripStack <WitOperation>                       WitOpnTripStack;
typedef class WitTripStack <WitSubEntry>                        WitSubTripStack;
typedef class WitTripStack <WitDemand>                          WitDemTripStack;
@


1.258
log
@[shared-resource pegging]
@
text
@d217 1
a217 1
class WitSrpReqSpec;
@


1.257
log
@[shared-resource pegging]
@
text
@d217 1
a349 2
typedef class WitPairStack <WitSrpSeqEl, double> WitSrpReqSpec;

@


1.256
log
@[shared-resource pegging]
@
text
@d349 2
@


1.255
log
@[shared-resource pegging]
@
text
@d231 1
a231 1
class WitUrpCoord;
@


1.254
log
@[shared-resource pegging]
@
text
@a175 1
class WitPipCoord;
d177 1
@


1.253
log
@[shared-resource pegging]
@
text
@d216 1
a216 1
class WitSrpCoord;
@


1.252
log
@[shared-resource pegging]
@
text
@d217 1
@


1.251
log
@[shared-resource pegging]
@
text
@a84 3
class WitDblDblLinkMgr;
class WitDblDblStItr;
class WitDblDblStack;
a216 3
class WitSrpExpSpec;
class WitSrpExpSync;
class WitSrpPegger;
@


1.250
log
@[shared-resource pegging]
@
text
@a221 2
class WitSrpFillMeth;
class WitSrpOldSpec;
d334 1
a334 1
typedef class WitObjStack  <WitRtCand>                      WitRtCandStack;
d336 8
a343 9
typedef class WitPairStack <WitPart,      WitPeriod>       WitPartPerStack;
typedef class WitPairStack <WitDemand,    WitPeriod>        WitDemPerStack;
typedef class WitPairStack <WitRtCand,    WitPeriod>     WitRtCandPerStack;

typedef class WitPairStack <WitSelPt,       double>       WitSelPtDblStack;
typedef class WitPairStack <WitSelCand,     double>     WitSelCandDblStack;
typedef class WitPairStack <WitRtCand,      double>      WitRtCandDblStack;
typedef class WitPairStack <WitFixedPer,    double>         WitPerDblStack;
typedef class WitPairStack <WitSrpFillMeth, double> WitSrpFillMethDblStack;
@


1.249
log
@[shared-resource pegging]
@
text
@d220 1
@


1.248
log
@[shared-resource peging]
@
text
@a219 1
class WitSrpExpSpec;
d222 1
@


1.247
log
@[shared-resource pegging]
@
text
@d335 1
a335 1
typedef class WitObjStack  <WitRtCand>                   WitRtCandStack;
d337 3
a339 3
typedef class WitPairStack <WitPart,      WitPeriod>    WitPartPerStack;
typedef class WitPairStack <WitDemand,    WitPeriod>     WitDemPerStack;
typedef class WitPairStack <WitRtCand,    WitPeriod>  WitRtCandPerStack;
d341 5
a345 4
typedef class WitPairStack <WitSelPt,     double>      WitSelPtDblStack;
typedef class WitPairStack <WitSelCand,   double>    WitSelCandDblStack;
typedef class WitPairStack <WitRtCand,    double>     WitRtCandDblStack;
typedef class WitPairStack <WitFixedPer,  double>        WitPerDblStack;
d347 1
a347 1
typedef class WitPairStItr <WitDemand,    WitPeriod>       WitDemPerItr;
d349 1
a349 1
typedef class WitPerPair   <WitPart>                         WitPartPer;
@


1.246
log
@[shared-resource pegging]
@
text
@d220 1
a220 1
class WitSrpExpGuide;
@


1.245
log
@[shared-resource pegging]
@
text
@d223 1
a223 1
class WitSrpGlobPgr;
@


1.244
log
@[shared-resource pegging]
@
text
@d221 1
a223 1
class WitSrpLocPgg;
@


1.243
log
@[shared-resource pegging]
@
text
@d220 1
a220 1
class WitSrpExpSpec;
@


1.242
log
@[shared-resource pegging]
@
text
@d220 1
@


1.241
log
@[shared-resource pegging]
@
text
@d220 1
@


1.240
log
@[shared-resource pegging]
@
text
@d52 1
@


1.239
log
@[shared-resource pegging]
@
text
@d85 1
@


1.238
log
@[shared-resource pegging]
@
text
@d217 1
@


1.237
log
@[shared-resource pegging]
@
text
@a216 1
class WitSrpCoord;
d218 1
@


1.236
log
@[shared-resource pegging]
@
text
@d217 2
@


1.235
log
@[shared-resource pegging]
@
text
@a230 1
class WitUrpPrtr;
@


1.234
log
@[shared-resource pegging]
@
text
@d85 1
@


1.233
log
@[shared-resource pegging]
@
text
@d84 1
@


1.232
log
@[shared-resource pegging]
@
text
@a225 1
class WitTlObj;
@


1.231
log
@[shared-resource pegging]
@
text
@d238 7
a244 7
template <typename Elem>                      class WitList;
template <typename Elem>                      class WitVector;
template <typename Elem>                      class WitTVec;
template <typename Elem>                      class WitDenseList;
template <typename Elem>                      class WitPtrVec;
template <typename Elem>                      class WitPtrTVec;
template <typename Elem>                      class WitRef;
d246 1
a246 1
template <typename Elem>                      class WitFlexVec;
d248 5
a252 5
template <typename DomEl,   typename RangeEl> class WitMapping;
template <typename DomEl,   typename RangeEl> class WitSchedule;
template <typename DomEl,   typename RangeEl> class WitRefMap;
template <typename DomEl,   typename RangeEl> class WitPtrMap;
template <typename DomEl,   typename RangeEl> class WitPtrSched;
d254 2
a255 2
template <typename ObjType>                   class WitObjStItr;
template <typename ObjType>                   class WitObjStack;
d257 2
a258 2
template                   <typename ValType> class WitPairLink;
template                   <typename ValType> class WitPairLinkMgr;
d260 2
a261 2
template <typename ObjType, typename ValType> class WitPairStItr;
template <typename ObjType, typename ValType> class WitPairStack;
d263 1
a263 1
template <typename FirstEl>                   class WitPerPair;
d265 1
a265 1
template <typename ObjType>                   class WitTripStack;
d267 1
a267 1
template <typename SrcComp>                   class WitUrpPegList;
d269 1
a269 1
template <typename SortEntry>                 class WitAvSorter;
@


1.230
log
@[shared-resource pegging]
@
text
@d238 7
a244 7
template <typename Elem>                           class WitList;
template <typename Elem>                           class WitVector;
template <typename Elem>                           class WitTVec;
template <typename Elem>                           class WitDenseList;
template <typename Elem>                           class WitPtrVec;
template <typename Elem>                           class WitPtrTVec;
template <typename Elem>                           class WitRef;
d246 1
a246 1
template <typename Elem>                           class WitFlexVec;
d248 5
a252 5
template <typename DomainType, typename RangeType> class WitMapping;
template <typename DomainType, typename RangeType> class WitSchedule;
template <typename DomEl,      typename RangeEl>   class WitRefMap;
template <typename DomEl,      typename RangeEl>   class WitPtrMap;
template <typename DomEl,      typename RangeEl>   class WitPtrSched;
d254 2
a255 2
template <typename ObjType>                        class WitObjStItr;
template <typename ObjType>                        class WitObjStack;
d257 2
a258 2
template                      <typename ValType>   class WitPairLink;
template                      <typename ValType>   class WitPairLinkMgr;
d260 2
a261 2
template <typename ObjType,    typename ValType>   class WitPairStItr;
template <typename ObjType,    typename ValType>   class WitPairStack;
d263 1
a263 1
template <typename FirstEl>                        class WitPerPair;
d265 1
a265 1
template <typename ObjType>                        class WitTripStack;
d267 1
a267 1
template <typename SrcComp>                        class WitUrpPegList;
d269 1
a269 1
template <typename SortEntry>                      class WitAvSorter;
@


1.229
log
@[shared-resource pegging]
@
text
@a176 1
class WitPipPrtr;
a177 1
class WitPipTarg;
d230 2
d267 1
a267 1
template <typename SrcComp>                        class WitPipPegList;
@


1.228
log
@[multi-thread]
@
text
@d175 1
a176 1
class WitPipPegMgr;
d231 1
@


1.227
log
@[multi-thread]
@
text
@d48 1
a48 1
class WitAbsDLSortCrit;
a267 2
template <typename Elem>                           class WitGenDLSortCrit;

@


1.226
log
@[multi-thread]
@
text
@d48 1
a51 1
class WitAbsSortRule;
d65 1
d89 1
d151 2
d268 4
@


1.225
log
@[multi-thread]
@
text
@d51 1
d233 7
a239 7
template <typename TheType>                        class WitList;
template <typename TheType>                        class WitVector;
template <typename TheType>                        class WitTVec;
template <typename TheType>                        class WitDenseList;
template <typename TheType>                        class WitPtrVec;
template <typename TheType>                        class WitPtrTVec;
template <typename TheType>                        class WitRef;
@


1.224
log
@[multi-thread]
@
text
@d113 1
a133 1
class WitMsgIssueExc;
@


1.223
log
@[multi-thread]
@
text
@d47 1
a227 2
struct WitAbortApiExc;

@


1.222
log
@[multi-thread]
@
text
@d132 1
@


1.221
log
@[multi-thread]
@
text
@a50 1
class WitAloneRun;
d160 1
d192 1
d220 1
@


1.220
log
@[multi-thread]
@
text
@d38 2
a39 2
{
}
@


1.219
log
@[multi-thread]
@
text
@d219 1
@


1.218
log
@[multi-thread]
@
text
@a53 1
class WitApiGroup;
@


1.217
log
@[multi-threads]
@
text
@d20 4
@


1.216
log
@[exceptions]
@
text
@d50 1
@


1.215
log
@[exceptions]
@
text
@d290 4
a293 5
typedef char *              WitAttr;
typedef int                 WitReturnCode;
typedef char *              WitFileFormat;
typedef int                 WitBoolean;
typedef struct witException WitException;
@


1.214
log
@[exceptions]
@
text
@d53 1
d83 1
d106 1
a106 1
class WitInputId;
@


1.213
log
@[exceptions]
@
text
@d288 5
a292 5
typedef char *             WitAttr;
typedef int                WitReturnCode;
typedef char *             WitFileFormat;
typedef int                WitBoolean;
typedef struct witErrorExc WitErrorExc;
@


1.212
log
@[exceptions]
@
text
@d217 2
@


1.211
log
@[exceptions]
@
text
@d286 5
a290 5
typedef char *                   WitAttr;
typedef int                      WitReturnCode;
typedef char *                   WitFileFormat;
typedef int                      WitBoolean;
typedef struct witErrorExcStruct WitErrorExc;
@


1.210
log
@Vector PropRt.
@
text
@d286 5
a290 4
typedef char * WitAttr;
typedef int    WitReturnCode;
typedef char * WitFileFormat;
typedef int    WitBoolean;
@


1.209
log
@pegged Critical List.
@
text
@d100 2
a103 2
class WitInScalRA;
class WitInVecRA;
d132 2
d135 1
a152 3
class WitOut2DARA;
class WitOutScalRA;
class WitOutVecRA;
@


1.208
log
@Pegged Critical List.
@
text
@d157 1
a158 1
class WitPclMgr;
@


1.207
log
@Tie Breaking Prop-Rt.
@
text
@d157 2
@


1.206
log
@Low-Pri Prop-Rt.
@
text
@d160 5
d248 1
a248 17
//------------------------------------------------------------------------------
// Forward declarations for namespace Pip.
//------------------------------------------------------------------------------

namespace WitPip
{

class PegMgr;
class Printer;
class SeqMgr;
class SysMgr;
class Targ;

template <typename SrcComp> class PegList;

// Leaving namespace Pip.
}
@


1.205
log
@Low-Pri Prop-Rt.
@
text
@d159 1
@


1.204
log
@Low-Pri Prop-Rt.
@
text
@a158 6
class WitPoBrPt;
class WitPoCand;
class WitPoCoord;
class WitPoMgr;
class WitPoPt;
class WitPoSelMgr;
@


1.203
log
@Low-Pri Prop-Rt.
@
text
@d81 1
@


1.202
log
@Low-Pri Prop-Rt.
@
text
@d48 1
d165 1
a165 1
class WitPrAlt;
a183 1
class WitSelAlt;
@


1.201
log
@Low-Pri Prop-Rt.
@
text
@d164 1
@


1.200
log
@Low-Pri Prop-Rt.
@
text
@d166 2
@


1.199
log
@Low-Pri Prop-Rt.
@
text
@d164 1
@


1.198
log
@Low-Pri Prop-Rt.
@
text
@d164 1
@


1.197
log
@Low-Pri Prop-Rt.
@
text
@d178 1
@


1.196
log
@Low-Pri Prop-Rt.
@
text
@a107 1
class WitMeCoordPt;
d111 1
@


1.195
log
@Low-Pri Prop-Rt.
@
text
@d157 6
a163 6
class WitPrBrPt;
class WitPrCand;
class WitPrCoord;
class WitPrMgr;
class WitPrPt;
class WitPrSelMgr;
@


1.194
log
@PIP.
@
text
@a175 1
class WitRtSitePtr;
@


1.193
log
@Double Precision.
@
text
@d250 1
@


1.192
log
@Double Precision.
@
text
@d48 1
@


1.191
log
@Double Precision.
@
text
@d147 1
@


1.190
log
@Double Precision.
@
text
@d129 1
@


1.189
log
@Double Precision.
@
text
@d147 1
@


1.188
log
@Double Precision.
@
text
@d292 1
@


1.187
log
@Double Precision.
@
text
@d75 1
@


1.186
log
@Double Precision.
@
text
@a161 1
class WitRealVec;
d323 1
a323 1
typedef class WitPerPair  <WitPart>                          WitPartPer;
@


1.185
log
@Double Precision.
@
text
@d86 1
@


1.184
log
@Double Precision.
@
text
@a74 1
class WitDblRealVec;
a86 2
class WitFltRealTVc;
class WitFltRealVec;
d161 1
@


1.183
log
@Double Precision.
@
text
@a212 1
template <typename TheType>                        class WitOFlxVec;
d218 1
a218 1
template <typename Elem>                           class WitNFlxVec;
@


1.182
log
@Double Precision.
@
text
@d101 1
@


1.181
log
@Double Precision.
@
text
@a332 18
// Define USE_DBL_STORAGE.
//------------------------------------------------------------------------------

#define USE_DBL_STORAGE 0

#if USE_DBL_STORAGE

   typedef WitDblRealVec WitRealVec;
   typedef WitDblRealVec WitRealTVc;

#else

   typedef WitFltRealVec WitRealVec;
   typedef WitFltRealTVc WitRealTVc;

#endif

//------------------------------------------------------------------------------
@


1.180
log
@Double Precision.
@
text
@d212 1
a212 1
template <typename TheType>                        class WitFlexVec;
d340 2
a341 2
typedef WitDblRealVec WitRealVec;
typedef WitDblRealVec WitRealTVc;
d345 2
a346 2
typedef WitFltRealVec WitRealVec;
typedef WitFltRealTVc WitRealTVc;
@


1.179
log
@Double Precision.
@
text
@d218 2
@


1.178
log
@Double Precision.
@
text
@d75 1
d88 2
d338 2
a339 1
typedef class WitDblRealVec WitRealVec;
d343 2
a344 1
typedef class WitFltRealVec WitRealVec;
@


1.177
log
@Double Precision.
@
text
@d328 1
a328 1
// Typedef RealVec.
d331 11
a341 2
   typedef class WitFltRealVec WitRealVec;
// typedef class WitDblRealVec WitRealVec;
@


1.176
log
@Double Precision.
@
text
@d331 2
a332 3
   typedef class WitFBTRealVec WitRealVec;
// typedef class WitDBTRealVec WitRealVec;
// typedef class  WitRTRealVec WitRealVec;
@


1.175
log
@Double Precision.
@
text
@a255 2
   //
   // small float values
@


1.174
log
@Double Precision.
@
text
@d335 1
a335 2
// typedef class WitVRTRealVec WitRealVec;
// typedef class WitCRTRealVec WitRealVec;
@


1.173
log
@Double Precision.
@
text
@d335 2
a336 1
// typedef class WitRTRealVec  WitRealVec;
@


1.172
log
@Double Precision.
@
text
@d333 3
a335 11
#define Use_ModeRV 0

#if Use_ModeRV

typedef class WitModeRV  WitRealVec;

#else

typedef class WitFixedRV WitRealVec;

#endif
@


1.171
log
@Double Precision.
@
text
@d333 1
a333 1
#define Use_ModeRV 1
@


1.170
log
@Double Precision.
@
text
@d333 1
a333 1
#define Use_ModeRV 0
@


1.169
log
@Double Precision.
@
text
@d329 18
@


1.168
log
@Continued double precision.
@
text
@a39 14
// Namespace Wit.
//
// General-purpose namespace for various names in WIT.
//
// Contributions to this namespace are made in various header files of WIT.
//------------------------------------------------------------------------------

namespace Wit
{
}

using namespace Wit;

//------------------------------------------------------------------------------
d97 1
d143 1
a232 13

//------------------------------------------------------------------------------
// Forward declarations for namespace Wit.
//------------------------------------------------------------------------------

namespace Wit
{

class InScalRA;
class OutScalRA;

// Leaving namespace Wit.
}
@


1.167
log
@Continued double precision.
@
text
@d253 2
a254 2
class RealSInArg;
class RealSOutArg;
@


1.166
log
@Continued double precision.
@
text
@d253 1
@


1.165
log
@Continued double precision.
@
text
@d253 1
a253 2
class RealOutArg;
class RealOutArgRep;
@


1.164
log
@Continued double precision.
@
text
@d247 13
@


1.163
log
@Continued implementation of PIP.
@
text
@a29 1
// These names do not need to begin with "Wit".
d38 14
@


1.162
log
@Continued implementation of PIP.
@
text
@d242 1
a242 1
class SubsysMgr;
@


1.161
log
@Continued implementation of PIP.
@
text
@d241 1
@


1.160
log
@Continued implementation of PIP.
@
text
@d240 2
a241 2
class Coord;
class Mgr;
@


1.159
log
@Continued implementation of PIP.
@
text
@a229 1
template <typename FirstEl>                        class WitPerPairMgr;
a320 5
typedef class WitPerPair  <WitDemand>                         WitDemPer;

typedef class WitPairStack <WitPerPair <WitPart>,      double> WitPartTripStOld;
typedef class WitPairStack <WitPerPair <WitOperation>, double>  WitOpnTripStOld;
typedef class WitPairStack <WitPerPair <WitSubEntry>,  double>  WitSubTripStOld;
d322 3
@


1.158
log
@Continued implementation of PIP.
@
text
@d232 2
d324 5
a328 4
typedef class WitPairStack <WitPerPair <WitPart>,      double> WitPartTripStack;
typedef class WitPairStack <WitPerPair <WitOperation>, double>  WitOpnTripStack;
typedef class WitPairStack <WitPerPair <WitSubEntry>,  double>  WitSubTripStack;
typedef class WitPairStack <WitPerPair <WitDemand>,    double>  WitDemTripStack;
@


1.157
log
@Continued implementation of PIP.
@
text
@d197 2
@


1.156
log
@Continued implementation of PIP.
@
text
@d228 1
a241 2
template <typename SrcComp> class Src;
template <typename SrcComp> class SrcMgr;
d320 4
a323 14
//------------------------------------------------------------------------------
// Typedefs for namespace Pip.
//------------------------------------------------------------------------------

namespace WitPip
{
typedef class WitPairStack <WitDemPer,          double>       ShipSeq;

typedef class WitPairStack <Src <WitPart>,      double> PartPairStack;
typedef class WitPairStack <Src <WitOperation>, double>  OpnPairStack;
typedef class WitPairStack <Src <WitSubEntry>,  double>  SubPairStack;

// Leaving namespace Pip.
}
@


1.155
log
@Continued implementation of PIP.
@
text
@d236 1
a236 1
class Int;
@


1.154
log
@Continued implementation of PIP.
@
text
@d327 1
@


1.153
log
@Continued implementation of PIP.
@
text
@a75 1
class WitDatedPart;
d227 2
d317 3
@


1.152
log
@Continued implementation of PIP.
@
text
@d239 1
a239 1
template <typename SrcComp> class Pegging;
d324 3
a326 3
typedef class WitPairStack <Src <WitPart>,      double> WitPartPipStack;
typedef class WitPairStack <Src <WitOperation>, double>  WitOpnPipStack;
typedef class WitPairStack <Src <WitSubEntry>,  double>  WitSubPipStack;
@


1.151
log
@Continued implementation of PIP.
@
text
@d239 1
a239 1
template <typename SrcComp> class Peg;
@


1.150
log
@Continued implementation of PIP.
@
text
@a149 2
class WitPipMgr;
class WitPipTarg;
d229 1
a229 1
// Forward declarations for namespace PIP.
d232 1
a232 1
namespace WitPIP
d235 7
a241 7
class WitPipInt;
class WitPipMgr;
class WitPipTarg;

template <typename SrcComp> class WitPipPeg;
template <typename SrcComp> class WitPipSrc;
template <typename SrcComp> class WitPipSrcMgr;
d243 1
a243 1
// Leaving namespace PIP.
d318 1
a318 1
// Typedefs for namespace PIP.
d321 1
a321 1
namespace WitPIP
d324 3
a326 3
typedef class WitPairStack <WitPipSrc <WitPart>,      double> WitPartPipStack;
typedef class WitPairStack <WitPipSrc <WitOperation>, double>  WitOpnPipStack;
typedef class WitPairStack <WitPipSrc <WitSubEntry>,  double>  WitSubPipStack;
d328 1
a328 1
// Leaving namespace PIP.
@


1.149
log
@Continued implementation of PIP.
@
text
@d21 20
a149 1
class WitPipInt;
d230 17
a246 3
template <typename SrcComp>                        class WitPipPeg;
template <typename SrcComp>                        class WitPipSrcMgr;
template <typename SrcComp>                        class WitPipSrc;
d319 7
d330 1
a330 16
//------------------------------------------------------------------------------
// Namespace NonClass.
//
// Namespace for various names in WIT that are not for classes, but would
// otherwise be in the global namespace, e.g.:
//
//    enums
//    enum values
//    non-member functions
//
// These names do not need to begin with "Wit".
// Contributions to this namespace are made in various header files of WIT.
//------------------------------------------------------------------------------

namespace WitNonClass
{
a331 2

using namespace WitNonClass;
@


1.148
log
@Continued implementation of PIP.
@
text
@d305 2
a306 2
   {
   };
@


1.147
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d290 20
@


1.146
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d286 4
@


1.145
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a285 3
typedef class WitPipSrc <WitPart>      WitPartPipSrc;
typedef class WitPipSrc <WitOperation>  WitOpnPipSrc;

@


1.144
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d211 2
a213 1
template <typename SrcComp>                        class WitPipPeg;
a287 3

typedef class WitPipPeg <WitPart>      WitPartPipPeg;
typedef class WitPipPeg <WitOperation>  WitOpnPipPeg;
@


1.143
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d212 1
d287 3
@


1.142
log
@Continued implementation of post-implosion pegging.
@
text
@d284 2
a285 1
typedef class WitPipSrc <WitPart> WitPartPipSrc;
@


1.141
log
@Continued implementation of post-implosion pegging.
@
text
@a131 1
class WitPipSrc;
d211 2
d268 1
a268 1
// Convenience typedefs for PairStack and PairStItr classes.
d283 2
@


1.140
log
@Continued implementation of post-implosion pegging.
@
text
@a124 3
class WitPipInt;
class WitPipMgr;
class WitPipTarg;
d130 4
@


1.139
log
@Continued implementation of post-implosion pegging.
@
text
@d125 3
a127 3
class WitPIPegInt;
class WitPIPegMgr;
class WitPIPegTarg;
@


1.138
log
@Continued implementation of post-implosion pegging.
@
text
@a210 2
template <typename ObjType>                        class WitPerVolTriple;

a280 5

//------------------------------------------------------------------------------

typedef class WitPerVolTriple <WitDemand>  WitDemPerVol;
typedef class WitPerVolTriple <WitPart>   WitPartPerVol;
@


1.137
log
@Continued implementation of post-implosion pegging.
@
text
@d286 2
a287 1
typedef class WitPerVolTriple <WitDemand> WitDemPerVol;
@


1.136
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d127 1
@


1.135
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d210 1
a210 1
template <typename ObjType>                        class WitPerVolTrip;
d285 1
a285 1
typedef class WitPerVolTrip <WitDemand> WitDemPerVol;
@


1.134
log
@Continued implementation of opt with COIN.
@
text
@d125 2
d210 2
d282 4
@


1.133
log
@Continued implementation of opt with COIN.
@
text
@d123 1
a123 1
class WitOslMgr;
@


1.132
log
@Continued implementation of opt with COIN.
@
text
@a177 2
class WitTimer;
class WitTimingSection;
a277 13

//------------------------------------------------------------------------------
// Enum OptSolveMethod
//
// Designates a method for solving the optimization problem.
//------------------------------------------------------------------------------

enum WitOptSolveMethod
   {
   dirOslMethod, // Solve using direct calls to OSL
   osiOslMethod, // Solve using OSL with the OSI interface
   clpMethod     // Solve using CLP through the OSI interface
   };
@


1.131
log
@Continued implementation of opt with COIN.
@
text
@d281 12
@


1.130
log
@Attempt to fix syntax errors from GCC compiler.
@
text
@d119 1
@


1.129
log
@Continued implementation of proportionate routing.
@
text
@d148 1
a148 1
class WitRtSiteComp;
@


1.128
log
@Continued implementation of proportionate routing.
@
text
@d267 1
a267 1
typedef class WitObjStack  <WitPrPt>                       WitPrPtStack;
@


1.127
log
@Continued implementation of proportionate routing.
@
text
@a276 1
typedef class WitPairStack <WitPrPt,      double>       WitPrPtDblStack;
@


1.126
log
@Continued implementation of proportionate routing.
@
text
@d148 1
@


1.125
log
@Continued implementation of proportionate routing.
@
text
@d266 2
d276 1
d279 1
@


1.124
log
@Continued implementation of proportionate routing.
@
text
@d67 1
d273 1
a273 1
typedef class WitPairStack <WitPeriod,    double>        WitPerDblStack;
@


1.123
log
@Continued implementation of proportionate routing.
@
text
@d270 3
@


1.122
log
@Continued implementation of proportionate routing.
@
text
@a46 1
class WitCmrMgr;
a50 1
class WitCprMgr;
d95 1
a127 1
class WitPmrMgr;
a128 1
class WitPprMgr;
d134 1
@


1.121
log
@Continued implementation of propotionate routing.
@
text
@a266 5
typedef class WitObjStack  <WitRtCand>                   WitRtCandStack;
typedef class WitObjStack  <WitBopEntry>                 WitBopEntStack;
typedef class WitObjStack  <WitConsEntry>               WitConsEntStack;
typedef class WitObjStack  <WitRtCand>                   WitRtCandStack;

a268 1
typedef class WitPairStack <WitOperation, WitPeriod>     WitOpnPerStack;
a269 2
typedef class WitPairStack <WitBopEntry,  WitPeriod>  WitBopEntPerStack;
typedef class WitPairStack <WitConsEntry, WitPeriod> WitConsEntPerStack;
a273 4

typedef class WitObjStItr  <WitMrCand>                     WitMrCandItr;
typedef class WitObjStItr  <WitRtSite>                     WitRtSiteItr;
typedef class WitObjStItr  <WitRtCand>                     WitRtCandItr;
@


1.120
log
@Continued implementation of proportionate routing.
@
text
@d47 1
d52 1
a52 2
class WitCmrSelMgr;
class WitCprSelMgr;
a96 1
class WitMrSelMgr;
d129 1
a129 1
class WitPmrSelMgr;
d131 1
a131 1
class WitPprSelMgr;
@


1.119
log
@Continued implementation of proportionate routing.
@
text
@d271 1
d282 1
a282 1
typedef class WitPairStItr <WitDemand,    WitPeriod>     WitDemPerItr;
d284 3
a286 4
typedef class WitObjStItr  <WitMrCand>                   WitMrCandItr;

typedef class WitObjStItr  <WitRtSite>                   WitRtSiteItr;
typedef class WitObjStItr  <WitRtCand>                   WitRtCandItr;
@


1.118
log
@Continued implementation of proportionate routing.
@
text
@a46 2
class WitCmrMgr;
class WitCmrSite;
d51 2
d94 1
d97 1
d130 1
a130 2
class WitPmrMgr;
class WitPmrSite;
d132 1
a209 2
template <typename SelComp,    typename CandComp>  class WitSpecMrMgr;

d268 1
d275 1
@


1.117
log
@Continued implementation of proportionate routing.
@
text
@a155 1
class WitSglSrcCand;
d196 1
@


1.116
log
@Continued implementation of proportionate routing.
@
text
@a52 1
class WitConsOrMgr;
a119 3
class WitOrCand;
class WitOrMgr;
class WitOrSite;
a138 1
class WitProdOrMgr;
a281 3

typedef class WitObjStItr  <WitOrSite>                   WitOrSiteItr;
typedef class WitObjStItr  <WitOrCand>                   WitOrCandItr;
@


1.115
log
@Continued implementation of proportionate routing.
@
text
@a52 1
class WitConsOpMgr;
a53 1
class WitConsPrSelMgr;
a111 4
class WitOpBrPt;
class WitOpCand;
class WitOpCoord;
class WitOpPt;
a142 1
class WitProdOpMgr;
a143 1
class WitProdPrSelMgr;
@


1.114
log
@Continued implementation of proportionate routing.
@
text
@d55 1
d141 5
a145 1
class WitOpCoord;
d151 1
@


1.113
log
@Continued implementation of proportionate routing.
@
text
@d53 1
a54 1
class WitConsPrMgr;
d113 4
d140 1
a140 4
class WitPrBrPt;
class WitPrCand;
class WitPrCoord;
class WitPrPt;
d144 1
a145 1
class WitProdPrMgr;
@


1.112
log
@Continued implementation of proportionate routing.
@
text
@d151 3
d291 3
@


1.111
log
@Continued implementation of proportionate routing.
@
text
@d53 1
a54 1
class WitConsRtMgr;
d122 3
d143 1
a144 1
class WitProdRtMgr;
a150 3
class WitRtCand;
class WitRtMgr;
class WitRtSite;
d286 2
a287 2
typedef class WitObjStItr  <WitRtSite>                   WitRtSiteItr;
typedef class WitObjStItr  <WitRtCand>                   WitRtCandItr;
@


1.110
log
@Continued implementation of proportionate routing.
@
text
@d53 1
@


1.109
log
@Continued implementation of proportionate routing.
@
text
@a146 1
class WitRtBomEnt;
a148 1
class WitRtPart;
@


1.108
log
@Continued implementation of proportionate routing.
@
text
@a131 1
class WitPprMgr;
d139 1
@


1.107
log
@Continued implementation of proportionate routing.
@
text
@d149 1
@


1.106
log
@Continued implementation of proportionate routing.
@
text
@d200 1
@


1.105
log
@Continued implementation of proportionate routing.
@
text
@d53 1
@


1.104
log
@Continued implementation of proportionate routing.
@
text
@d139 1
a147 1
class WitRtMgr;
@


1.103
log
@Continued implementation of proportionate routing.
@
text
@d131 1
a134 1
class WitPrMgr;
@


1.102
log
@Continued implementation of proportionate routing.
@
text
@d284 3
@


1.101
log
@Continued implementation of proportionate routing.
@
text
@d145 5
@


1.100
log
@Continued implementation of proportionate routing.
@
text
@d131 1
a135 1
class WitPrSite;
@


1.99
log
@Continued implementation of proportionate routing.
@
text
@d132 1
@


1.98
log
@Continued implementation of proportionate routing.
@
text
@d134 1
@


1.97
log
@Removed all const_casts from WIT.
@
text
@d131 3
@


1.96
log
@Replaced some C-style casts with C++ style casts.
@
text
@d68 1
@


1.95
log
@Various internal changes.
@
text
@a235 9
class WitTlObj;
   //
   // "Typeless Object"
   // Forward reference to a non-existent class.
   // Declaring a variable to be of type TlObj * means that it must be
   // cast to be assigned the value of a pointer to a different type. This is in
   // contrast to type void *, which need not be cast in such a case. This is
   // used to encourage type safety.

@


1.94
log
@Internal changes.
@
text
@d176 8
a183 8
template <class TheType>                     class WitList;
template <class TheType>                     class WitVector;
template <class TheType>                     class WitTVec;
template <class TheType>                     class WitFlexVec;
template <class TheType>                     class WitDenseList;
template <class TheType>                     class WitPtrVec;
template <class TheType>                     class WitPtrTVec;
template <class TheType>                     class WitRef;
d185 3
a187 3
template <class DomainType, class RangeType> class WitMapping;
template <class DomainType, class RangeType> class WitSchedule;
template <class DomEl,      class RangeEl>   class WitRefMap;
d189 2
a190 2
template <class ObjType>                     class WitObjStItr;
template <class ObjType>                     class WitObjStack;
d192 2
a193 2
template                   <class ValType>   class WitPairLink;
template                   <class ValType>   class WitPairLinkMgr;
d195 2
a196 2
template <class ObjType,    class ValType>   class WitPairStItr;
template <class ObjType,    class ValType>   class WitPairStack;
d198 1
a198 1
template <class SelComp,    class CandComp>  class WitSpecMrMgr;
@


1.93
log
@Continued implementation of user-specified heuristic starting solution.
@
text
@a231 10
typedef int WitBoolean;

enum {
      witTRUE  = 1,
      witFALSE = 0};
   //
   // Variables of type WitBoolean should only take on these values.

//------------------------------------------------------------------------------

@


1.92
log
@Removed implementation of single-source by the old algorithm.
@
text
@d225 6
@


1.91
log
@Continued implementation of single-source with the new algorithm.
@
text
@a109 3
class WitOldSglCand;
class WitOldSglMgr;
class WitOldSglSite;
@


1.90
log
@Began implementation of the new single-source algorithm.
@
text
@d150 3
@


1.89
log
@Continued implementation of 2-level lot sizes.
@
text
@d110 3
a149 3
class WitSglSrcCand;
class WitSglSrcMgr;
class WitSglSrcSite;
@


1.88
log
@Continued implementation of two-level lot sizes.
@
text
@a224 6
// LOT_SIZE_TOL, the tolerance used for some lot size purposes.
//------------------------------------------------------------------------------

#define LOT_SIZE_TOL 0.0009

//------------------------------------------------------------------------------
@


1.87
log
@Began implementation of multi-level lot sizes.
@
text
@d225 6
@


1.86
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d48 1
d92 4
a126 1
class WitPmrCand;
d128 1
a128 2
class WitPmrPart;
class WitPmrSelPt;
d198 1
a198 4
template <class SelComp,    class CandComp>  class WitMrMgr;
template <class SelComp,    class CandComp>  class WitMrSelSite;
template <class SelComp,    class CandComp>  class WitMrCand;
template <class SelComp,    class CandComp>  class WitMrPt;
d283 2
@


1.85
log
@Continued implementation of opt implosion with lot sizes.
@
text
@a77 1
class WitIncLotSizeCon;
d81 1
d88 2
@


1.84
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d76 1
d78 1
@


1.83
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d44 1
d52 1
d64 1
d79 1
d93 1
d96 2
d124 1
d129 2
d133 1
d138 1
d143 4
d154 1
d157 1
d159 2
@


1.82
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d73 1
a73 1
class WitImpMp;
a82 4
class WitMpCon;
class WitMpModel;
class WitMpObj;
class WitMpVar;
d97 1
d99 2
d102 1
@


1.81
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d73 1
a73 1
class WitImpLp;
a75 4
class WitLpCon;
class WitLpModel;
class WitLpObj;
class WitLpVar;
d83 4
@


1.80
log
@Began implementation of optimizing implosion with OSL V3.
@
text
@a103 1
class WitOsl3Mgr;
@


1.79
log
@Continued implementation of Single-Source.
@
text
@d104 1
@


1.78
log
@Continued implementation of Single-Source.
@
text
@a109 1
class WitPegSite;
@


1.77
log
@Continued implementation of single-source.
@
text
@d109 1
a109 1
class WitPegMgr;
d111 1
a176 3
template <class AllocComp>                   class WitPegEl;
template <class AllocComp>                   class WitPegger;

a242 3

typedef WitPegEl <WitOperation> WitOpnPegEl;
typedef WitPegEl <WitSubEntry>  WitSubPegEl;
@


1.76
log
@Continued implementation of Single-Source.
@
text
@d87 2
d90 2
d105 1
@


1.75
log
@Continued implementation of Single-Source.
@
text
@d123 1
@


1.74
log
@Continued implementation of Single-Source.
@
text
@a105 2
class WitPerLink;
class WitPerLinkMgr;
@


1.73
log
@Continued implementation of Single-Source.
@
text
@d106 2
a260 2

typedef class WitPairStItr <WitTlObj,     WitPeriod>     WitTlPerItr;
@


1.72
log
@Continued implementation of single-source.
@
text
@d260 2
@


1.71
log
@Continued implementation of single-source.
@
text
@a27 1
class WitAccFlag;
d150 1
d154 1
@


1.70
log
@Continued implementation of single-source.
@
text
@a154 2
template <class DomEl,      class RangeEl>   class WitRefMap;

@


1.69
log
@Continued implementation of single-source.
@
text
@d155 2
@


1.68
log
@Continued implementation of single source.
@
text
@d125 1
@


1.67
log
@Continued implementation of single source.
@
text
@d124 1
@


1.66
log
@Preliminary work on single source.
@
text
@d54 1
a168 2

template <class VarType>                     class WitArchive;
@


1.65
log
@Preliminary work on single source.
@
text
@a219 2
typedef WitTlObj * WitTlObjPtr;

@


1.64
log
@Continued preliminary work on single source.
@
text
@a63 3
class WitFlexVec (float);
class WitFlexVec (double);
class WitFlexVec (int);
d144 1
a241 7

//------------------------------------------------------------------------------
// Typedefs for specific cases of generic classes that use Boolean as a
// parameter.
//------------------------------------------------------------------------------

typedef class WitFlexVec (int) WitFlexVec (WitBoolean);
@


1.63
log
@Continued preliminary work on single source.
@
text
@a82 1
class WitMapping (WitPart, int);
a120 2
class WitSchedule (WitDemand, int);
class WitSchedule (WitNode,   float);
d144 23
a166 20
template <class TheType>                 class WitList;
template <class TheType>                 class WitVector;
template <class TheType>                 class WitTVec;
template <class TheType>                 class WitDenseList;
template <class TheType>                 class WitPtrVec;
template <class TheType>                 class WitPtrTVec;

template <class ObjType>                 class WitObjStItr;
template <class ObjType>                 class WitObjStack;

template                <class ValType>  class WitPairLink;
template                <class ValType>  class WitPairLinkMgr;

template <class ObjType, class ValType>  class WitPairStItr;
template <class ObjType, class ValType>  class WitPairStack;

template <class SelComp, class CandComp> class WitMrMgr;
template <class SelComp, class CandComp> class WitMrSelSite;
template <class SelComp, class CandComp> class WitMrCand;
template <class SelComp, class CandComp> class WitMrPt;
d168 2
a169 2
template <class AllocComp>               class WitPegEl;
template <class AllocComp>               class WitPegger;
d171 1
a171 1
template <class VarType>                 class WitArchive;
d250 1
a250 34
typedef class WitFlexVec  (              int)   
              WitFlexVec  (              WitBoolean);

typedef class WitMapping  (WitNode,      int)
              WitMapping  (WitNode,      WitBoolean);

typedef class WitMapping  (WitPart,      int)
              WitMapping  (WitPart,      WitBoolean);

typedef class WitMapping  (WitMaterial,  int)
              WitMapping  (WitMaterial,  WitBoolean);

typedef class WitSchedule (WitPart,      int)
              WitSchedule (WitPart,      WitBoolean);

typedef class WitSchedule (WitDemand,    int)
              WitSchedule (WitDemand,    WitBoolean);

typedef class WitSchedule (WitBopEntry,  int)
              WitSchedule (WitBopEntry,  WitBoolean);

//------------------------------------------------------------------------------
// Typedefs for specific cases of generic classes that use Period as a
// parameter.
//------------------------------------------------------------------------------

typedef class WitMapping  (WitPart,       int)
              WitMapping  (WitPart,       WitPeriod);

typedef class WitMapping   (WitMaterial,  int)
              WitMapping   (WitMaterial,  WitPeriod);

typedef class WitSchedule  (WitPart,      int)
              WitSchedule  (WitPart,      WitPeriod);
@


1.62
log
@More preliminary work on single source.
@
text
@a138 1
class WitTVec (float);
d149 1
a249 3
typedef class WitTVec     (              int)
              WitTVec     (              WitBoolean);

a274 3

typedef class WitTVec      (              int)
              WitTVec      (              WitPeriod);
@


1.61
log
@Preliminary work on single source.
@
text
@a58 4
class WitDenseList (WitBopEntry);
class WitDenseList (WitDemand);
class WitDenseList (WitPart);
class WitDenseList (WitSubEntry);
d150 1
@


1.60
log
@Preliminary work on single source.
@
text
@a146 2
class WitVector (double);
class WitVector (float);
d153 1
a252 3
typedef class WitVector   (              int)
              WitVector   (              WitBoolean);

a280 3

typedef class WitVector    (              int)
              WitVector    (              WitPeriod);
@


1.59
log
@Continued implementation of object iteration.
@
text
@a82 1
class WitList (WitNode);
d154 1
a290 3

typedef class WitList      (              int)
              WitList      (              WitPeriod);
@


1.58
log
@Continued implementation of sel-split for pen-exec.
@
text
@d57 1
@


1.57
log
@Continued implementation of sel-split for pen-exec.
@
text
@d70 1
@


1.56
log
@Continued implementation of sel-split for pen-exec.
@
text
@a135 1
class WitSplitMgr;
@


1.55
log
@Implemented initial prototype of sel-split for pen-exec.
@
text
@d136 1
a136 1
class WitSsPeMgr;
@


1.54
log
@Made stock reallocation use ssr vs. usr on a part-by-part basis.
@
text
@d136 1
a246 3

typedef WitArchive <double>    WitDblArch;
typedef WitArchive <WitPeriod> WitPerArch;
@


1.53
log
@Continued implementation of selective stock reallocation.
@
text
@d264 3
d270 2
a271 2
typedef class WitMapping  (WitNode,      int)
              WitMapping  (WitNode,      WitBoolean);
@


1.52
log
@Continuing implementation of selective stock reallocation.
@
text
@d136 1
d138 1
@


1.51
log
@Refactoring for constrained stock reallocation.
@
text
@d136 1
@


1.50
log
@Refactoring for constrained stock reallocation.
@
text
@d38 1
a38 1
class WitBaSelPt;
d92 1
a92 1
class WitMeSelPt;
d165 1
a165 1
template <class SelComp, class CandComp> class WitMrSelPt;
@


1.49
log
@Refactoring for constrained stock reallocation.
@
text
@d162 1
@


1.48
log
@Refactoring for constrained stock reallocation.
@
text
@d133 1
@


1.47
log
@Refactoring for constrained stock reallocation.
@
text
@a66 1
class WitFixedPer;
a309 1
typedef class WitPairStack <WitTlObj,     double>         WitTlDblStack;
@


1.46
log
@Implemented selection splitting speed-up by partial allocation reuse.
@
text
@d128 1
@


1.45
log
@Created and used Archive template.
@
text
@d242 3
@


1.44
log
@Continued implementation of pegging.
@
text
@a28 1
class WitAllocMode;
a129 1
class WitSplitter;
d134 1
d167 2
@


1.43
log
@Continued implementation of pegging.
@
text
@d113 2
a165 1
template <class AllocComp>               class WitPegSite;
a166 1
template <class AllocComp>               class WitPegMgr;
@


1.42
log
@Initial implementation of pegging.
@
text
@a112 4
class WitPegEl;
class WitPegMgr;
class WitPegSite;
class WitPegger;
d164 5
d237 3
@


1.41
log
@Templatized consumption multi-route.
@
text
@d75 2
a76 2
class WitHeurAllPerf;
class WitHeurAllocator;
d113 4
@


1.40
log
@Initial implementation of multi-route class templates.
@
text
@a47 2
class WitCmrBomEnt;
class WitCmrCand;
a48 1
class WitCmrSelPt;
d289 2
a290 5
typedef class WitObjStack  <WitBopEntry>               WitBopEntStack;
typedef class WitObjStack  <WitConsEntry>             WitConsEntStack;

typedef class WitObjStItr  <WitPmrCand>               WitPmrCandItr;
typedef class WitObjStItr  <WitCmrCand>               WitCmrCandItr;
@


1.39
log
@More templates.
@
text
@d151 2
a152 2
template <class TheType>                class WitPtrVec;
template <class TheType>                class WitPtrTVec;
d154 2
a155 2
template <class ObjType>                class WitObjStItr;
template <class ObjType>                class WitObjStack;
d157 2
a158 2
template                <class ValType> class WitPairLink;
template                <class ValType> class WitPairLinkMgr;
d160 6
a165 2
template <class ObjType, class ValType> class WitPairStItr;
template <class ObjType, class ValType> class WitPairStack;
@


1.38
log
@Converted several generic classes into class templates.
@
text
@a122 6
class WitPtrTVec (WitBopEntry);
class WitPtrTVec (WitFixedPer);
class WitPtrTVec (WitVector (WitPeriod));
class WitPtrVec (WitList (WitNode));
class WitPtrVec (WitString);
class WitPtrVec (WitTlObjPtrTVec);
d151 3
a212 2

typedef class WitPtrTVec (WitTlObj) WitTlObjPtrTVec;
@


1.37
log
@Replaced use of CandIndex with CmrCand in Consumption Multi-Route subsystem.
@
text
@a104 3
class WitObjStack (double);
class WitObjStack (WitPart);
class WitObjStack (WitTlObj);
a112 5
class WitPairLinkMgr (WitPeriod);
class WitPairLinkMgr (double);
class WitPairStItr (WitDemand, WitPeriod);
class WitPairStack (WitTlObj, double);
class WitPairStack (double, double);
d154 13
d293 2
a294 2
typedef class WitObjStack  (WitBopEntry)               WitBopEntStack;
typedef class WitObjStack  (WitConsEntry)             WitConsEntStack;
d296 2
a297 2
typedef class WitObjStItr  (WitPmrCand)               WitPmrCandItr;
typedef class WitObjStItr  (WitCmrCand)               WitCmrCandItr;
d299 5
a303 5
typedef class WitPairStack (WitPart,      WitPeriod)    WitPartPerStack;
typedef class WitPairStack (WitDemand,    WitPeriod)     WitDemPerStack;
typedef class WitPairStack (WitOperation, WitPeriod)     WitOpnPerStack;
typedef class WitPairStack (WitBopEntry,  WitPeriod)  WitBopEntPerStack;
typedef class WitPairStack (WitConsEntry, WitPeriod) WitConsEntPerStack;
d305 2
a306 2
typedef class WitPairStack (WitTlObj,     double)         WitTlDblStack;
typedef class WitPairStack (WitSelPt,     double)      WitSelPtDblStack;
d308 1
a308 1
typedef class WitPairStItr (WitDemand,    WitPeriod)     WitDemPerItr;
@


1.36
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@d292 1
@


1.35
log
@Created class SelCand and classes derived from it.
@
text
@d35 1
d49 1
d93 1
d124 1
d290 2
@


1.34
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d47 1
a95 2
class WitMrBomEnt;
class WitMrPart;
d122 1
@


1.33
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d105 1
a105 1
class WitObjStack (WitTl);
d117 1
a117 1
class WitPairStack (WitTl, double);
d132 1
a132 1
class WitPtrVec (WitTlPtrTVec);
d146 1
d197 1
a197 1
class WitTl;
d199 1
a199 1
   // "Typeless"
d201 1
a201 7
   // See TlPtr.

typedef WitTl * WitTlPtr;
   //
   // "Typeless Pointer"
   // Pointer to a non-existent class.
   // Declaring a variable to be of type TlPtr or Tl * means that it must be
d206 3
a208 1
typedef class WitPtrTVec (WitTl) WitTlPtrTVec;
d293 1
a293 1
typedef class WitPairStack (WitTl,        double)         WitTlDblStack;
@


1.32
log
@Renamed AltPt classes to SelPt classes.
@
text
@d117 1
@


1.31
log
@Removed class MePrinter.
@
text
@a30 1
class WitAltPt;
a34 1
class WitBaAltPt;
d38 1
a46 1
class WitCmrAltPt;
d48 1
a89 1
class WitMeAltPt;
d93 1
a120 1
class WitPmrAltPt;
d122 1
d140 1
d296 1
a296 1
typedef class WitPairStack (WitAltPt,     double)      WitAltPtDblStack;
@


1.30
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@a94 1
class WitMePrinter;
@


1.29
log
@Refactoring for selection splitting.
@
text
@a95 1
class WitMeSelPt;
@


1.28
log
@Refactoring for selection splitting.
@
text
@d48 1
a97 1
class WitMrAltPt;
a98 1
class WitMrComp;
d124 1
@


1.27
log
@Re-factoring build-ahead for selection splitting.
@
text
@d48 1
a52 1
class WitConsRtr;
d125 1
a128 1
class WitProdRtr;
@


1.26
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d33 1
d37 1
d103 1
@


1.25
log
@Further implementation of coarse selection splitting.
@
text
@d140 1
d295 1
@


1.24
log
@Further development of coarse selection splitting.
@
text
@d66 1
a101 1
class WitPairStItr (WitDemand, WitPeriod);
d117 1
d127 1
a127 1
class WitPtrTVec (WitPeriod);
a227 2
typedef const WitPeriod WitConstPer;

a293 2
typedef class WitPairStack (WitConstPer,  double)        WitPerDblStack;
typedef class WitPairStack (WitConsEntry, double)    WitConsEntDblStack;
@


1.23
log
@Implemented and used class SelMgr.
@
text
@d294 1
a295 1
typedef class WitPairStack (WitBopEntry,  double)     WitBopEntDblStack;
@


1.22
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d24 2
d80 1
a80 2
class WitAbsLink;
class WitAbsLinkMgr;
d138 1
@


1.21
log
@Coarse selection splitting.
@
text
@d25 1
d100 1
a100 1
class WitPairStackItr (WitDemand, WitPeriod);
d125 1
d225 2
d280 1
a280 1
// Convenience typedefs for PairStack and PairStackItr classes.
d283 2
a284 2
typedef class WitObjStack     (WitBopEntry)               WitBopEntStack;
typedef class WitObjStack     (WitConsEntry)             WitConsEntStack;
d286 5
a290 5
typedef class WitPairStack    (WitPart,      WitPeriod)    WitPartPerStack;
typedef class WitPairStack    (WitDemand,    WitPeriod)     WitDemPerStack;
typedef class WitPairStack    (WitOperation, WitPeriod)     WitOpnPerStack;
typedef class WitPairStack    (WitBopEntry,  WitPeriod)  WitBopEntPerStack;
typedef class WitPairStack    (WitConsEntry, WitPeriod) WitConsEntPerStack;
d292 3
a294 2
typedef class WitPairStack    (WitBopEntry,  double)     WitBopEntDblStack;
typedef class WitPairStack    (WitConsEntry, double)    WitConsEntDblStack;
d296 1
a296 1
typedef class WitPairStackItr (WitDemand,    WitPeriod)     WitDemPerItr;
@


1.20
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d47 1
a94 1
class WitMrMgr;
d122 1
@


1.19
log
@Further development of coarse selection splitting.
@
text
@d287 1
@


1.18
log
@Minor correction.
@
text
@d76 2
a136 4
class WitStack;
class WitStackItr;
class WitLink;
class WitLinkMgr;
@


1.17
log
@Further development of coarse selection splitting.
@
text
@a99 2
class WitObjPerDblLink;
class WitObjPerDblLinkMgr;
@


1.16
log
@Futher development of selection splitting.
@
text
@d104 1
d126 1
d191 1
a191 1
class WitNoClass;
d193 1
d195 1
a195 1
   // See TypelessPtr.
d197 1
a197 1
typedef WitNoClass * WitTypelessPtr;
d199 1
d201 2
a202 2
   // Declaring a variable to be of type TypelessPtr means that it must be cast
   // to be assigned the value of a pointer to a different type. This is in
d206 2
d282 2
a283 2
typedef class WitObjStack     (WitBopEntry)                  WitBopEntStack;
typedef class WitObjStack     (WitConsEntry)                WitConsEntStack;
d285 5
a289 6
typedef class WitPairStack    (WitPart,      WitPeriod)     WitPartPerStack;
typedef class WitPairStack    (WitDemand,    WitPeriod)      WitDemPerStack;
typedef class WitPairStack    (WitOperation, WitPeriod)      WitOpnPerStack;
typedef class WitPairStack    (WitBopEntry,  WitPeriod)   WitBopEntPerStack;
typedef class WitPairStack    (WitConsEntry, WitPeriod)  WitConsEntPerStack;
typedef class WitPairStack    (WitMrBomEnt,  WitPeriod) WitMrBomEntPerStack;
d291 1
a291 1
typedef class WitPairStack    (WitConsEntry, double)     WitConsEntDblStack;
d293 1
a293 2
typedef class WitPairStackItr (WitDemand,    WitPeriod)      WitDemPerItr;
typedef class WitPairStackItr (WitConsEntry, double)     WitConsEntDblItr;
@


1.15
log
@Further development of selection splitting for multi-route on substitutes.
@
text
@d102 1
d114 1
a289 3



@


1.14
log
@Some minor changes.
@
text
@d98 4
a101 2
class WitObjStackLink;
class WitObjStackLinkMgr;
d111 2
a112 2
class WitPairStackLinkMgr (WitPeriod);
class WitPairStackLinkMgr (double);
d135 2
a136 2
class WitStackLink;
class WitStackLinkMgr;
d274 15
a288 2
typedef class WitObjStack     (WitBopEntry)                 WitBopEntStack;
typedef class WitObjStack     (WitConsEntry)               WitConsEntStack;
a289 6
typedef class WitPairStack    (WitPart,      WitPeriod)    WitPartPerStack;
typedef class WitPairStack    (WitDemand,    WitPeriod)     WitDemPerStack;
typedef class WitPairStack    (WitOperation, WitPeriod)     WitOpnPerStack;
typedef class WitPairStack    (WitBopEntry,  WitPeriod)  WitBopEntPerStack;
typedef class WitPairStack    (WitConsEntry, WitPeriod) WitConsEntPerStack;
typedef class WitPairStack    (WitConsEntry, double)    WitConsEntDblStack;
a290 2
typedef class WitPairStackItr (WitDemand,    WitPeriod)     WitDemPerItr;
typedef class WitPairStackItr (WitConsEntry, double)    WitConsEntDblItr;
@


1.13
log
@Some minor modifications.
@
text
@d53 4
a56 4
class WitStackItr;
class WitStackLink;
class WitStackLinkMgr;
class WitStack;
d117 4
d131 4
a257 6

typedef class WitRefVector (WitList (     int))
              WitRefVector (WitList (     WitPeriod));

typedef class WitRefVector (WitVector (   int))
              WitRefVector (WitVector (   WitPeriod));
@


1.12
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d53 4
a56 4
class WitDynItr;
class WitDynLink;
class WitDynLinkMgr;
class WitDynStack;
d97 4
a100 6
class WitPairDynItr (WitDemand, WitPeriod);
class WitObjDynLink;
class WitObjDynLinkMgr;
class WitObjDynStack (WitBopEntry);
class WitObjDynStack (WitConsEntry);
class WitObjDynStack (WitPart);
d109 2
a110 2
class WitPairDynLinkMgr (WitPeriod);
class WitPairDynLinkMgr (double);
d267 1
a267 1
// Convenience typedefs for PairDynStack and PairDynItr classes.
d270 2
a271 6
typedef class WitPairDynStack (WitPart,      WitPeriod)    WitPartPerStack;
typedef class WitPairDynStack (WitDemand,    WitPeriod)     WitDemPerStack;
typedef class WitPairDynStack (WitOperation, WitPeriod)     WitOpnPerStack;
typedef class WitPairDynStack (WitBopEntry,  WitPeriod)  WitBopEntPerStack;
typedef class WitPairDynStack (WitConsEntry, WitPeriod) WitConsEntPerStack;
typedef class WitPairDynStack (WitConsEntry, double)    WitConsEntDblStack;
d273 9
a281 2
typedef class WitPairDynItr   (WitDemand,    WitPeriod)     WitDemPerItr;
typedef class WitPairDynItr   (WitConsEntry, double)    WitConsEntDblItr;
@


1.11
log
@Refactoring for selection splitting.
@
text
@d272 6
a277 6
typedef class WitPairDynStack (WitPart,      WitPeriod)    WitPartPerDynStack;
typedef class WitPairDynStack (WitDemand,    WitPeriod)     WitDemPerDynStack;
typedef class WitPairDynStack (WitOperation, WitPeriod)     WitOpnPerDynStack;
typedef class WitPairDynStack (WitBopEntry,  WitPeriod)  WitBopEntPerDynStack;
typedef class WitPairDynStack (WitConsEntry, WitPeriod) WitConsEntPerDynStack;
typedef class WitPairDynStack (WitConsEntry, double)    WitConsEntDblDynStack;
d279 2
a280 1
typedef class WitPairDynItr   (WitDemand,    WitPeriod)     WitDemPerDynItr;
@


1.10
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d112 1
d277 1
@


1.9
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@a23 1
class WitAbsDynPerItr;
d53 1
d56 1
a56 9
class WitDynPerItr (WitDemand);
class WitDynPerLink;
class WitDynPerLinkMgr;
class WitDynPerStack (WitBopEntry);
class WitDynPerStack (WitDemand);
class WitDynPerStack (WitPart);
class WitDynStack (WitBopEntry);
class WitDynStack (WitConsEntry);
class WitDynStack (WitPart);
d97 6
d111 1
a209 5

typedef WitDynPerStack (WitDemand) WitDemPerStack;
typedef WitDynPerItr   (WitDemand) WitDemPerItr;

//------------------------------------------------------------------------------
d266 12
@


1.8
log
@Outer API: Merged all no-longer-documented functions into one section.
Outer API: Moved build-ahead by demand functions into the no-longer-documented
   section.
Simplified the rules for two-way multiple execution periods.
@
text
@d132 1
@


1.7
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@a92 1
class WitMeDirMgr;
@


1.6
log
@Began implementation of stock bounds.
Changed the default value of the stockRealloc attribute to FALSE.
@
text
@d71 1
@


1.5
log
@Continued implementation of stock reallocation.
@
text
@a177 6
typedef void * WitVoidStar;
   //
   // This typedef can be used as an argument to generic classes.
   // Note that "void *" cannot be used as an argument to a generic class,
   // because it's two tokens.

d188 2
a189 2
   // contrast to type void *, which need not be cast in such a case. This can
   // be used to encourage type safety.
@


1.4
log
@Continued implementation of stock re-allocation.
@
text
@d32 1
@


1.3
log
@Initial implementation of stock re-allocation.
@
text
@d120 1
d267 3
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d155 6
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
