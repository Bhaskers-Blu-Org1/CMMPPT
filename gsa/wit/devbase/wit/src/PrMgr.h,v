head	1.63;
access;
symbols
	sce_5_01_20080919:1.56
	latest_sce_4_20_20060523:1.56.0.2
	sce_4_20_20060523:1.56
	latest_sce4_20_OSL:1.55.0.2
	sce_4_20_OSL:1.55
	sce_410_withVa:1.55
	sce_4_05_20040511:1.35
	sce_4_00_20040201:1.35
	nextGenBranch:1.35.0.2
	nextGenRoot:1.35
	sce_3_30_20030627:1.35;
locks; strict;
comment	@ * @;


1.63
date	2011.09.28.23.49.58;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2011.09.24.00.28.21;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2011.08.30.20.17.58;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2010.09.28.19.25.16;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2010.07.30.20.20.14;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2010.07.30.16.07.52;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2010.07.28.21.40.40;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2006.05.02.17.34.09;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2005.03.02.22.56.28;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2005.01.26.23.50.32;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2005.01.19.18.31.04;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2005.01.18.22.45.42;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2005.01.18.20.03.29;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2005.01.14.00.01.17;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2005.01.10.19.02.25;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2005.01.07.23.40.56;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2004.12.23.20.30.07;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2004.12.23.20.09.36;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2004.12.22.22.27.10;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2004.12.10.16.49.44;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2004.12.06.22.38.16;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2004.11.30.20.24.49;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2004.11.30.00.19.47;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2004.11.29.21.26.23;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2004.11.24.22.45.30;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2004.11.23.20.50.07;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2004.11.12.21.03.46;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2004.11.11.22.16.12;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2003.05.09.18.55.40;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2003.05.01.22.42.32;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2003.04.30.21.07.48;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.04.29.19.55.30;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.04.29.14.27.48;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2003.04.21.17.11.08;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2003.04.15.20.50.12;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2003.04.11.19.08.28;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2003.04.01.22.39.33;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2003.04.01.20.34.29;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2003.03.28.23.05.32;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.03.21.23.36.53;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.03.21.21.35.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.03.19.16.48.24;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.06.20.28.19;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.03.03.21.07.31;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.01.01.17.31;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.28.20.47.37;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.27.19.20.22;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.25.22.17.08;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.25.19.16.56;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.24.23.44.31;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.21.18.56.26;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.19.22.41.38;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.18.20.10.59;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.16.23.58.11;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.14.20.12.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.13.23.06.31;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.10.20.53.53;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.07.23.29.11;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.07.20.20.50;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.04.18.45.53;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.03.21.57.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.31.21.28.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.29.19.16.48;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.63
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PrMgrH
#define PrMgrH

//------------------------------------------------------------------------------
// Header file: "PrMgr.h"
//
// Contains the declaration of class PrMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PrMgr
//
// "Proportionate Routing Manager"
//
// Main Interface to the Proportionate Routing Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    PrMgr
//
// Implemented in PropRtg.C.
//------------------------------------------------------------------------------

class WitPrMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitProblem * theProblem);
         //
         // Returns TRUE, iff a PrMgr is needed for theProblem.

      void print ();
         //
         // Prints the proportionate routing subsystem.

      void definePropExp (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at
         // theRtSite in thePer.

      void definePropExp (
            WitPart *           thePart, 
            WitPeriod           expPer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at
         // thePart in expPer.

      void definePropExp (
            WitBomEntry *       theBomEnt, 
            WitPeriod           execPer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Similar to definePropExp (WitPart *, ...).

      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Each returns true, iff proportionate routing is currently active for
         // theRtCand in thePer.

      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
         //
         // Sets the "active for prop-rt status" of theRtCand in thePer to
         // theValue.

      bool allowed (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Each returns true, iff proportionate routing is currently allowed
         // for theRtCand in thePer.

      WitSelPt * mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns the prop-rt SelPt for theRtSite and thePer.

      void storeRecoveryPair (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Stores (theRtCand, thePer) as a pair at which the prop-rtg
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the prop-rtg configuration to its initial state.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      bool selIsSplit (WitPart * thePart, WitPeriod expPer);
         //
         // Returns true, iff the proportionate routing thru thePart in
         // expPer is split. Valid only in sel-split mode.

      bool selIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Similar to selIsSplit (WitPart *, ...).

      void defineSplit (
            WitPart *           thePart, 
            WitPeriod           expPer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Defines a split proportionate explosion of expVol units at
         // thePart in expPer, by setting the following arguments:
         //
         // theExpPairs: The explosion pairs for the bounded portion of the
         //              split.
         // unbddVol:    The splitVol for the unbounded portion of the split.

      void defineSplit (
            WitBomEntry *       theBomEnt, 
            WitPeriod           execPer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Similar to defineSplit (WitPart *, ...).

      void recordFlowSS (
            WitPart * thePart,
            WitPeriod expPer,
            double    incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through thePart in expPer, for sel-split purposes.

      void recordFlowSS (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        incFlowVol);
         //
         // Similar to recordFlowSS (WitPart *, ...).

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitSelMgr * mySelMgrForProd ();
      WitSelMgr * mySelMgrForCons ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPrCoord * myPrCoord_;
         //
         // The PrCoord owned by this PrMgr.

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr for this PrMgr.
   };

#endif
@


1.62
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.61
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d37 2
a38 78
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPrMgr (WitSelector *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitPrMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static bool instNeededFor (WitProblem * theProblem);
//
// Returns TRUE, iff a PrMgr is needed for theProblem.

void print ();
//
// Prints the proportionate routing subsystem.

void definePropExp (
WitRtSite *         theRtSite,
WitPeriod           thePer,
double              expVol,
WitRtCandDblStack & theExpPairs);
//
// Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
// that define a proportionate explosion of expVol units at
// theRtSite in thePer.

void definePropExp (
WitPart *           thePart,
WitPeriod           expPer,
double              expVol,
WitRtCandDblStack & theExpPairs);
//
// Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
// that define a proportionate explosion of expVol units at
// thePart in expPer.

void definePropExp (
WitBomEntry *       theBomEnt,
WitPeriod           execPer,
double              expVol,
WitRtCandDblStack & theExpPairs);
//
// Similar to definePropExp (WitPart *, ...).

bool active (WitRtCand * theRtCand, WitPeriod thePer);
//
// Each returns true, iff proportionate routing is currently active for
// theRtCand in thePer.

void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
//
// Sets the "active for prop-rt status" of theRtCand in thePer to
// theValue.

bool allowed (WitRtCand * theRtCand, WitPeriod thePer);
//
// Each returns true, iff proportionate routing is currently allowed
// for theRtCand in thePer.

WitSelPt * mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
//
// Returns the prop-rt SelPt for theRtSite and thePer.

void storeRecoveryPair (WitRtCand * theRtCand, WitPeriod thePer);
//
// Stores (theRtCand, thePer) as a pair at which the prop-rtg
// configuration is to be restored to its initial state.
d40 158
a197 82
void recoverInitState ();
//
// Restores the prop-rtg configuration to its initial state.

//------------------------------------------------------------------------
// Selection splitting functions.
//------------------------------------------------------------------------

bool selIsSplit (WitPart * thePart, WitPeriod expPer);
//
// Returns true, iff the proportionate routing thru thePart in
// expPer is split. Valid only in sel-split mode.

bool selIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer);
//
// Similar to selIsSplit (WitPart *, ...).

void defineSplit (
WitPart *           thePart,
WitPeriod           expPer,
double              expVol,
WitRtCandDblStack & theExpPairs,
double &            unbddVol);
//
// Defines a split proportionate explosion of expVol units at
// thePart in expPer, by setting the following arguments:
//
// theExpPairs: The explosion pairs for the bounded portion of the
//              split.
// unbddVol:    The splitVol for the unbounded portion of the split.

void defineSplit (
WitBomEntry *       theBomEnt,
WitPeriod           execPer,
double              expVol,
WitRtCandDblStack & theExpPairs,
double &            unbddVol);
//
// Similar to defineSplit (WitPart *, ...).

void recordFlowSS (
WitPart * thePart,
WitPeriod expPer,
double    incFlowVol);
//
// Records the fact that incFlowVol additional units are being flowed
// through thePart in expPer, for sel-split purposes.

void recordFlowSS (
WitBomEntry * theBomEnt,
WitPeriod     execPer,
double        incFlowVol);
//
// Similar to recordFlowSS (WitPart *, ...).

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

WitSelMgr * mySelMgrForProd ();
WitSelMgr * mySelMgrForCons ();

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitPrMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPrCoord * myPrCoord_;
//
// The PrCoord owned by this PrMgr.

WitRtMgr * const myRtMgr_;
//
// The RtMgr for this PrMgr.
};
@


1.60
log
@Modifiable Heuristic Allocation
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d37 78
a114 2
   {
   public:
d116 82
a197 158
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitProblem * theProblem);
         //
         // Returns TRUE, iff a PrMgr is needed for theProblem.

      void print ();
         //
         // Prints the proportionate routing subsystem.

      void definePropExp (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at
         // theRtSite in thePer.

      void definePropExp (
            WitPart *           thePart, 
            WitPeriod           expPer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at
         // thePart in expPer.

      void definePropExp (
            WitBomEntry *       theBomEnt, 
            WitPeriod           execPer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Similar to definePropExp (WitPart *, ...).

      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Each returns true, iff proportionate routing is currently active for
         // theRtCand in thePer.

      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
         //
         // Sets the "active for prop-rt status" of theRtCand in thePer to
         // theValue.

      bool allowed (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Each returns true, iff proportionate routing is currently allowed
         // for theRtCand in thePer.

      WitSelPt * mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns the prop-rt SelPt for theRtSite and thePer.

      void storeRecoveryPair (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Stores (theRtCand, thePer) as a pair at which the prop-rtg
         // configuration is to be restored to its initial state.

      void recoverInitState ();
         //
         // Restores the prop-rtg configuration to its initial state.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      bool selIsSplit (WitPart * thePart, WitPeriod expPer);
         //
         // Returns true, iff the proportionate routing thru thePart in
         // expPer is split. Valid only in sel-split mode.

      bool selIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Similar to selIsSplit (WitPart *, ...).

      void defineSplit (
            WitPart *           thePart, 
            WitPeriod           expPer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Defines a split proportionate explosion of expVol units at
         // thePart in expPer, by setting the following arguments:
         //
         // theExpPairs: The explosion pairs for the bounded portion of the
         //              split.
         // unbddVol:    The splitVol for the unbounded portion of the split.

      void defineSplit (
            WitBomEntry *       theBomEnt, 
            WitPeriod           execPer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Similar to defineSplit (WitPart *, ...).

      void recordFlowSS (
            WitPart * thePart,
            WitPeriod expPer,
            double    incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through thePart in expPer, for sel-split purposes.

      void recordFlowSS (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        incFlowVol);
         //
         // Similar to recordFlowSS (WitPart *, ...).

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitSelMgr * mySelMgrForProd ();
      WitSelMgr * mySelMgrForCons ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPrCoord * myPrCoord_;
         //
         // The PrCoord owned by this PrMgr.

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr for this PrMgr.
   };
@


1.59
log
@Selection Recovery
@
text
@d111 1
a111 1
      void storeRecoveryPt (WitRtCand * theRtCand, WitPeriod thePer);
d113 1
a113 1
         // Stores (theRtCand, thePer) as a point at which the prop-rtg
d118 1
a118 1
         // Restores the prop-rtg selection configuration to its initial state.
@


1.58
log
@Selection Recovery
@
text
@d111 1
a111 1
      void recAltForRecovery (WitRtCand * theRtCand, WitPeriod thePer);
d113 2
a114 3
         // Records the fact that the prop-trg configuration is being altered
         // at theRtCand and thePer.
         // Used for selection recovery.
d116 1
a116 1
      void recoverSelections ();
d118 1
a118 2
         // Restores the prop-rtg selection configuration to its original state.
         // Valid only in selection recovery mode.
@


1.57
log
@Selection Recovery
@
text
@d111 6
@


1.56
log
@Updated the copyright date on all source files.
@
text
@d111 5
@


1.55
log
@Vector PropRtg.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.54
log
@Pegged critical list.
@
text
@d33 1
a33 1
// Implemented in PropRt.C.
@


1.53
log
@Low-Pri Prop-Rt.
@
text
@d74 18
d115 1
a115 1
      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
d117 6
a122 2
         // Returns true, iff the proportionate routing thru theRtSite in
         // thePer is split. Valid only in sel-split mode.
d125 2
a126 2
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
d132 1
a132 1
         // theRtSite in thePer, by setting the following arguments:
d138 9
d148 3
a150 3
            WitRtSite * theRtSite,
            WitPeriod   thePer,
            double      incFlowVol);
d153 8
a160 1
         // through theRtSite in thePer, for sel-split purposes.
d184 4
@


1.52
log
@Low-Pri Prop-Rt.
@
text
@a18 1
#include <RtCase.h>
@


1.51
log
@Low-Pri Prop-Rt.
@
text
@d129 2
a130 1
      WitSelMgr * mySelMgrFor (WitRtCase theRtCase);
@


1.50
log
@Low-Pri Prop-Rt.
@
text
@a27 1
// New Version
@


1.49
log
@Low-Pri Prop-Rt.
@
text
@d91 4
@


1.48
log
@Low-Pri Prop-Rt.
@
text
@d76 1
a76 1
      bool lpprAct (WitRtCand * theRtCand, WitPeriod thePer);
d81 1
a81 1
      void setLpprAct (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
d86 1
a86 1
      bool active (WitRtCand * theRtCand, WitPeriod thePer);
d88 2
a89 2
         // Returns true, iff proportionate routing thru theRtCand in thePer has
         // not been permanently ruled out.
@


1.47
log
@Low-Pri Prop-Rt.
@
text
@d76 1
a76 1
      bool active (WitRtCand * theRtCand, WitPeriod thePer);
d81 1
a81 1
      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
d86 1
a86 1
      bool potActive (WitRtCand * theRtCand, WitPeriod thePer);
a89 2
         // Note that funcActive () and active () return the same value, except
         // in low-pri prop-rt mode.
@


1.46
log
@Low-Pri Prop-Rt.
@
text
@a92 4
      WitSelPt * mySelPtFor (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns the prop-rt SelPt for theRtCand and thePer.

@


1.45
log
@Low-Pri Prop-Rt.
@
text
@d145 4
@


1.44
log
@Low-Pri Prop-Rt.
@
text
@d15 2
d19 128
@


1.43
log
@Low-Pri Prop-Rt.
@
text
@d10 2
a11 2
#ifndef SkeletonH
#define SkeletonH
d14 1
a14 1
// Header file: "Skeleton.h"
@


1.42
log
@Low-Pri Prop-Rt.
@
text
@d10 2
a11 2
#ifndef PrMgrH
#define PrMgrH
d14 1
a14 3
// Header file: "PrMgr.h"
//
// Contains the declaration of class PrMgr.
a16 131
#include <RtCase.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PrMgr
//
// "Proportionate Routing Manager"
//
// Main Interface to the Proportionate Routing Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    PrMgr
//
// Implemented in PropRt.C.
//------------------------------------------------------------------------------

class WitPrMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitProblem * theProblem);
         //
         // Returns TRUE, iff a PrMgr is needed for theProblem.

      void print ();
         //
         // Prints the proportionate routing subsystem.

      void definePropExp (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at
         // theRtSite in thePer.

      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Each returns true, iff proportionate routing is currently active for
         // theRtCand in thePer.

      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
         //
         // Sets the "active for prop-rt status" of theRtCand in thePer to
         // theValue.

      bool potActive (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff proportionate routing thru theRtCand in thePer has
         // not been permanently ruled out.
         // Note that funcActive () and active () return the same value, except
         // in low-pri prop-rt mode.

      WitSelPt * mySelPtFor (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns the prop-rt SelPt for theRtCand and thePer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff the proportionate routing thru theRtSite in
         // thePer is split. Valid only in sel-split mode.

      void defineSplit (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Defines a split proportionate explosion of expVol units at
         // theRtSite in thePer, by setting the following arguments:
         //
         // theExpPairs: The explosion pairs for the bounded portion of the
         //              split.
         // unbddVol:    The splitVol for the unbounded portion of the split.

      void recordFlowSS (
            WitRtSite * theRtSite,
            WitPeriod   thePer,
            double      incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through theRtSite in thePer, for sel-split purposes.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitSelMgr * mySelMgr (WitRtCase theRtCase);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPrCoord * myPrCoord_;
         //
         // The PrCoord owned by this PrMgr.
   };

@


1.41
log
@Low-Pri Prop-Rt.
@
text
@d88 1
a88 1
         // not been ruled out by a fundamental shortage.
@


1.40
log
@Low-Pri Prop-Rt.
@
text
@d92 4
@


1.39
log
@Low-Pri Prop-Rt.
@
text
@d85 1
a85 1
      bool fundActive (WitRtCand * theRtCand, WitPeriod thePer);
@


1.38
log
@Low-Pri Prop-Rt.
@
text
@d85 7
@


1.37
log
@Low-Pri Prop-Rt.
@
text
@d80 5
@


1.36
log
@Low-Pri Prop-Rt.
@
text
@d66 1
a66 1
            WitRtSitePtr        theRtSite, 
d84 1
a84 1
      bool selIsSplit (WitRtSitePtr theRtSite, WitPeriod thePer);
d90 1
a90 1
            WitRtSitePtr        theRtSite, 
d104 3
a106 3
            WitRtSitePtr theRtSite,
            WitPeriod    thePer,
            double       incFlowVol);
@


1.35
log
@Attempt to fix syntax errors from GCC compiler.
@
text
@d66 1
a66 1
            WitRtSitePtr        theRtSitePtr, 
d73 1
a73 1
         // theRtSitePtr in thePer.
d84 1
a84 1
      bool selIsSplit (WitRtSitePtr theRtSitePtr, WitPeriod thePer);
d86 1
a86 1
         // Returns true, iff the proportionate routing thru theRtSitePtr in
d90 1
a90 1
            WitRtSitePtr        theRtSitePtr, 
d97 1
a97 1
         // theRtSitePtr in thePer, by setting the following arguments:
d104 1
a104 1
            WitRtSitePtr theRtSitePtr,
d109 1
a109 1
         // through theRtSitePtr in thePer, for sel-split purposes.
@


1.34
log
@Continued implementation of proportionate routing.
@
text
@d66 1
a66 1
            WitRtSiteComp       theRtSiteComp, 
d73 1
a73 1
         // theRtSiteComp in thePer.
d84 1
a84 1
      bool selIsSplit (WitRtSiteComp theRtSiteComp, WitPeriod thePer);
d86 1
a86 1
         // Returns true, iff the proportionate routing thru theRtSiteComp in
d90 1
a90 1
            WitRtSiteComp       theRtSiteComp, 
d97 1
a97 1
         // theRtSiteComp in thePer, by setting the following arguments:
d104 3
a106 3
            WitRtSiteComp theRtSiteComp,
            WitPeriod     thePer,
            double        incFlowVol);
d109 1
a109 1
         // through theRtSiteComp in thePer, for sel-split purposes.
@


1.33
log
@Continued implementation of proportionate routing.
@
text
@d93 1
a93 1
            WitRtCandDblStack & theSplitPairs,
d99 3
a101 12
         // theSplitPairs: The split pairs for the bounded portion of the split.
         // unbddVol:      The splitVol  for the unbounded portion of the split.

      void defineSplitPropExp (
            WitRtCand *         theRtCand,
            WitPeriod           thePer,
            double              splitVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a theRtCand's portion of a split proportionate explosion
         // of splitVol units at the RtSite for theRtCand in thePer.
a103 30
            WitRtSiteComp theRtSiteComp,
            WitPeriod     thePer,
            double        incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through theRtSiteComp in thePer, for sel-split purposes.

      //------------------------------------------------------------------------
      // Old Selection splitting functions.
      //------------------------------------------------------------------------

      bool selIsSplitOld (WitRtSiteComp theRtSiteComp, WitPeriod thePer);
         //
         // Returns true, iff the proportionate routing thru theRtSiteComp in
         // thePer is split. Valid only in sel-split mode.

      void defineSplitOld (
            WitRtSiteComp       theRtSiteComp, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Defines a split proportionate explosion of expVol units at
         // theRtSiteComp in thePer, by setting the following arguments:
         //
         // theExpPairs: The exp pairs for the bounded   portion of the split.
         // unbddVol:    The splitVol  for the unbounded portion of the split.

      void recordFlowSSOld (
@


1.32
log
@Continued implementation of proportionate routing.
@
text
@d93 40
d142 1
a142 1
      void recordFlowSS (
@


1.31
log
@Continued implementation of proportionate routing.
@
text
@d66 1
a66 1
            WitRtSite *         theRtSite, 
d72 2
a73 2
         // that define a proportionate explosion of expVol units at theRtSite
         // in thePer.
d84 1
a84 1
      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
d86 2
a87 2
         // Returns true, iff the proportionate routing thru theRtSite in thePer
         // is split. Valid only in sel-split mode.
d90 1
a90 1
            WitRtSite *         theRtSite, 
d96 2
a97 2
         // Defines a split proportionate explosion of expVol units at theRtSite
         // in thePer, by setting the following arguments:
d103 3
a105 3
            WitRtSite * theRtSite,
            WitPeriod   thePer,
            double      incFlowVol);
d108 1
a108 1
         // through theRtSite in thePer, for sel-split purposes.
@


1.30
log
@Continued implementation of proportionate routing.
@
text
@a64 11
      bool active (WitRtCand *    theRtCand,  WitPeriod thePer);
      bool active (WitBillEntry * theBillEnt, WitPeriod thePer);
         //
         // Each returns true, iff proportionate routing is currently active for
         // the arguments.

      double normExpShare (WitBillEntry * theBillEnt, WitPeriod thePer);
         //
         // Returns the normalized explosion share for the theBillEnt in thePer.
         // Valid only if active (theBillEnt, thePer) is true.

d75 5
d83 26
@


1.29
log
@Continued implementation of proportionate routing.
@
text
@d68 2
a69 2
         // Each returns true, iff proportionate roouting is currently active
         // for the arguments.
d75 10
@


1.28
log
@Continued implementation of proportionate routing.
@
text
@d19 1
d84 1
a84 2
      WitSelMgr * mySelMgrForProd ();
      WitSelMgr * mySelMgrForCons ();
@


1.27
log
@Continued implementation of proportionate routing.
@
text
@d76 4
@


1.26
log
@Continued implementation of proportionate routing.
@
text
@a63 7
      bool propRouting (WitRtSite *   theRtSite, WitPeriod thePer);
      bool propRouting (WitPart *     thePart,   WitPeriod expPer);
      bool propRouting (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Each returns true, iff proportionate routing is to be used for the
         // arguments.

@


1.25
log
@Continued implementation of proportionate routing.
@
text
@d64 3
a66 1
      bool propRouting (WitRtSite * theRtSite, WitPeriod thePer);
d68 2
a69 2
         // Returns true, iff proportionate routing is to be used at theRtSite
         // in thePer.
d71 2
a72 1
      bool active (WitRtCand * theRtCand, WitPeriod thePer);
d74 7
a80 2
         // Returns true, iff theRtCand is currently active for proportionate
         // explosions in thePer.
d86 2
a87 2
      WitPprMgr * myPprMgr ();
      WitCprMgr * myCprMgr ();
@


1.24
log
@Continued implementation of propotionate routing.
@
text
@d64 1
a64 4
      void findExpRtCands (
            WitRtSite *      theRtSite,
            WitPeriod        thePer,
            WitRtCandStack & theRtCands);
d66 7
a72 2
         // Sets theRtCands to be the set of RtCands currently under
         // consideration for proportionate explosions from theRtSite in thePer.
@


1.23
log
@Continued implementation of proportionate routing.
@
text
@d26 1
a26 1
// External Interface to the Proportionate Routing Subsystem.
d76 2
a77 2
      WitPprSelMgr * myPprSelMgr ();
      WitCprSelMgr * myCprSelMgr ();
@


1.22
log
@Continued implementation of proportionate routing.
@
text
@d64 8
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d26 1
a26 1
// Manager of the Proportionate Routing Subsystem.
a63 15
      bool propRouting (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff proportionate routing is to be used at theRtSite
         // in thePer.

      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff theRtCand is currently active for proportionate
         // explosions in thePer.

      double normExpShare (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns the normalized explosion share for theRtCand in thePer.
         // Valid only if active (theRtCand, thePer) is true.

d68 2
a69 2
      WitSelMgr * mySelMgrForProd ();
      WitSelMgr * mySelMgrForCons ();
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@d56 1
a56 1
      static bool instNeededFor (WitRtMgr * theRtMgr);
d58 1
a58 1
         // Returns TRUE, iff a PrMgr is needed for theRtMgr.
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d64 15
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@a63 5
      WitSelPt * mySelPtForAlt (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns the proportionate routing value for SelMgr::mySelPtForAlt
         // given the arguments.

d68 2
a69 2
      accessFunc (WitSelMgr *, mySelMgrForProd)
      accessFunc (WitSelMgr *, mySelMgrForCons)
a81 6

      WitSelMgr * mySelMgrForProd_;
      WitSelMgr * mySelMgrForCons_;
         //
         // The SelMgrs for the production and consumption cases of
         // proportionate routing owned by this PrMgr.
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@d15 2
d18 80
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@a14 6
//
// Contains the declaration of the following classes
//
//    PrMgr.
//    ProdPrMgr.
//    ConsPrMgr.
a15 254

#include <SelMgr.h>

//------------------------------------------------------------------------------
// Class PrMgr
//
// "Proportionate Routing Manager"
// Abstract interface to a section of the Proportional Routing subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelMgr
//       PrMgr
//          ProdPrMgr
//          ConsPrMgr
//
// Implemented in PropRt.C.
//------------------------------------------------------------------------------

class WitPrMgr: public WitSelMgr
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the section of the proportionate routing subsystem owned by
         // this PrMgr.

      //------------------------------------------------------------------------
      // Selection Splitting functions.
      //------------------------------------------------------------------------

      virtual bool selSplitNeeded ();
         //
         // Override from class SelMgr.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrMgr (WitOrMgr *, WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrMgr ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      WitSelPt * mySelPtForAltByPrPt (WitPrPt * thePrPt);
         //
         // Returns SelMgr::mySelPtForAlt for arguments correponding to thePrPt
         // for this PrMgr.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPrCoord *, myPrCoord)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPrCoord * myPrCoord_;
         //
         // The PrCoord owned by this PrMgr.
   };

//------------------------------------------------------------------------------
// Class ProdPrMgr
//
// "Production Proportionate Routing Manager"
// Interface to the production section of the Proportionate Routing subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelMgr
//       PrMgr
//          ProdPrMgr
//
// Implemented in PropRt.C.
//------------------------------------------------------------------------------

class WitProdPrMgr: public WitPrMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProdPrMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitProdPrMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool propRouting (WitPart * thePart, WitPeriod expPer);
         //
         // Returns true, iff proportionate routing is to be used at thePart in
         // expPer.

      bool active (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns true, iff theBopEnt is currently active for proportionate
         // explosions in expPer.

      double normExpShare (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns the normalized explosion share for theBopEnt in expPer.
         // Valid only if active (theBopEnt, expPer) is true.

      //------------------------------------------------------------------------
      // Overrides from class SelMgr.
      //------------------------------------------------------------------------

      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual const char * selCaseName        ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitPrPt * myPrPtFor (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns the PrPt for theBopEnt and expPer, if any; otherwise NULL.

      noCopyCtorAssign (WitProdPrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitProdOrMgr * const myProdOrMgr_;
         //
         // The ProdOrMgr for this ProdPrMgr.
   };

//------------------------------------------------------------------------------
// Class ConsPrMgr
//
// "Consumption Proportionate Routing Manager"
// Interface to the consumption section of the Proportionate Routing subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    SelMgr
//       PrMgr
//          ConsPrMgr
//
// Implemented in PropRt.C.
//------------------------------------------------------------------------------

class WitConsPrMgr: public WitPrMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsPrMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitConsPrMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool propRouting (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Returns true, iff proportionate routing is to be used at theBomEnt
         // in execPer.

      bool active (WitConsEntry * theConsEnt, WitPeriod execPer);
         //
         // Returns true, iff theConsEnt is currently active for proportionate
         // explosions in execPer.

      double normExpShare (WitConsEntry * theConsEnt, WitPeriod execPer);
         //
         // Returns the normalized explosion share for theConsEnt in execPer.
         // Valid only if active (theConsEnt, execPer) is true.

      //------------------------------------------------------------------------
      // Overrides from class SelMgr.
      //------------------------------------------------------------------------

      virtual WitSelPt *   mySelPtForAlt      (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod);
      virtual bool         validForNetting    ();
      virtual bool         validForExecBounds ();
      virtual const char * selCaseName        ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitPrPt * myPrPtFor (WitConsEntry * theConsEnt, WitPeriod execPer);
         //
         // Returns the PrPt for theConsEnt and execPer, if any; otherwise NULL.

      noCopyCtorAssign (WitConsPrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitConsOrMgr * const myConsOrMgr_;
         //
         // The ConsOrMgr for this ConsPrMgr.
   };
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d69 1
a69 1
      WitPrMgr (WitRtMgr *, WitSelector *);
d188 1
a188 1
      WitProdRtMgr * const myProdRtMgr_;
d190 1
a190 1
         // The ProdRtMgr for this ProdPrMgr.
d272 1
a272 1
      WitConsRtMgr * const myConsRtMgr_;
d274 1
a274 1
         // The ConsRtMgr for this ConsPrMgr.
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@d150 1
a150 1
      bool included (WitBopEntry * theBopEnt, WitPeriod expPer);
d152 1
a152 1
         // Returns true, iff theBopEnt is to be included in proportionate
d158 1
a158 1
         // Valid only if included (theBopEnt, expPer) is true.
d234 1
a234 1
      bool included (WitConsEntry * theConsEnt, WitPeriod execPer);
d236 1
a236 1
         // Returns true, iff theConsEnt is to be included in proportionate
d242 1
a242 1
         // Valid only if included (theConsEnt, execPer) is true.
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@d20 1
d37 1
d44 19
d78 9
a144 4
      static bool instNeededFor (WitProblem * theProblem);
         //
         // Returns true, iff a ProdPrMgr is needed for theProblem.

a153 1
         // Valid only if theBopEnt->expShare () > 0.0.
a159 4
      void print ();
         //
         // Prints the proportionate routing subsystem.

d172 14
d187 40
a226 1
      // Selection Splitting functions.
d229 11
a239 1
      virtual bool selSplitNeeded ();
d241 14
a254 1
         // Override from class SelMgr.
d262 1
a262 1
      WitPrPt * myPrPtFor (WitBopEntry * theBopEnt, WitPeriod expPer);
d264 1
a264 1
         // Returns the PrPt for theBopEnt and expPer, if any; otherwise NULL.
d266 1
a266 1
      noCopyCtorAssign (WitProdPrMgr);
d272 1
a272 1
      WitProdRtMgr * const myProdRtMgr_;
d274 1
a274 1
         // The ProdRtMgr for this ProdPrMgr.
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@d19 1
a19 1
//    PprMgr.
d28 1
a28 1
// An abstract interface to the Proportional Routing subsystem.
d35 1
a35 1
//          PprMgr
d80 1
a80 1
// Class PprMgr
d83 1
a83 1
// Production-oriented interface to the Proportional Routing subsystem.
d90 1
a90 1
//          PprMgr
d95 1
a95 1
class WitPprMgr: public WitPrMgr
d103 1
a103 1
      WitPprMgr (WitSelector *);
d109 1
a109 1
      virtual ~WitPprMgr ();
d117 1
a117 1
         // Returns true, iff a PprMgr is needed for theProblem.
d169 1
a169 1
      noCopyCtorAssign (WitPprMgr);
d177 1
a177 1
         // The ProdRtMgr for this PprMgr.
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@d48 1
a48 1
      WitPrMgr (WitSelector *);
d60 1
a60 2
      accessFunc (WitProdRtMgr *, myProdRtMgr)
      accessFunc (WitPrCoord *,   myPrCoord)
a73 4
      WitProdRtMgr * const myProdRtMgr_;
         //
         // The ProdRtMgr for this PrMgr.

d170 8
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d60 2
a61 2
      accessFunc (WitRtMgr *,   myRtMgr)
      accessFunc (WitPrCoord *, myPrCoord)
d75 1
a75 1
      WitRtMgr * const myRtMgr_;
d77 1
a77 1
         // The RtMgr for this PrMgr.
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d16 4
a19 1
// Contains the declaration of class PrMgr.
d28 1
a28 1
// Interface to the Proportional Routing subsystem.
d35 1
d42 1
a42 1
   public:
d57 60
d122 1
a122 1
         // Returns true, iff a PrMgr is needed for theProblem.
d174 1
a174 13
      noCopyCtorAssign (WitPrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr for this PrMgr.

      WitPrCoord * myPrCoord_;
         //
         // The PrCoord owned by this PrMgr.
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@a59 4
      static bool propRouting (WitPart * thePart);
         //
         // Returns true, iff proportionate routing is to be used at thePart.

@


1.7
log
@Continued implementation of Proportionate Routing.
@
text
@d110 4
d119 4
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d58 5
a62 1
         // Returns TRUE, iff a PrMgr is needed for theProblem.
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d76 4
d84 1
a84 1
      virtual WitSelPt *   mySelPt            (WitBopEntry *,
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d60 1
a60 1
      bool propRouting (WitPart * thePart);
d62 2
a63 1
         // Returns true, iff proportionate routing is to be used at thePart.
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@a19 2
#include <PtrMap.h>
#include <PtrSched.h>
d24 2
a25 1
// Manager of the Proportional Routing subsystem.
a94 12
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPrCand *, includedCand)
      accessFunc (WitPrCand *, excludedCand)

      inline const WitPtrSched <WitBopEntry, WitPrPt> & myPrPts ()
         {
         return myPrPts_;
         }

a100 12
      void buildPrSites ();
         //
         // Creates the PrSites owned by this PrMgr.

      void buildPrPts ();
         //
         // Creates the PrPts owned by this PrMgr.

      void initTotInclShare ();
         //
         // Initializes totInclShare_ for each PrSite.

d107 1
a107 14
      WitPrCand * includedCand_;
      WitPrCand * excludedCand_;
         //
         // The PrCands owned by this PrMgr:
         //
         //    includedCand_->included () == true
         //    excludedCand_->included () == false

      WitPtrMap <WitPart, WitPrSite> myPrSiteFor_;
         //
         // myPrSiteFor_ (thePart) is the PrSite owned by this PrMgr that
         // represents thePart.

      WitPtrSched <WitBopEntry, WitPrPt> myPrPts_;
d109 1
a109 2
         // myPrPts_.myPtrAt (theBopEnt, expPer) is the PrPt owned by this
         // PrMgr that represents theBopEnt and expPer, if any; else NULL.
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d20 1
a21 1
#include <Schedule.h>
d103 5
d114 4
d124 1
a124 5
         // Initializes totInclShare_.

      void calcTotInclShare (WitPart * thePart, WitPeriod expPer);
         //
         // Calculates totInclShare_ (thePart, expPer).
d140 5
d148 1
a148 7
         // SsrMgr that represents theBopEnt and expPer, if any; else NULL.

      WitSchedule <WitPart, double> totInclShare_;
         //
         // totInclShare_ (thePart)[expPer] is the sum of theBopEnt->expShare ()
         // over all BopEnts for thePart that are to be included in
         // proportionate explosion in expPer.
@


1.1
log
@Continued implementation of Proportionate Routing.
@
text
@d20 2
d26 1
a26 1
// Interface to the Proportional Routing subsystem.
d54 23
a88 4
      // Other public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
d100 3
d109 12
d126 19
@

