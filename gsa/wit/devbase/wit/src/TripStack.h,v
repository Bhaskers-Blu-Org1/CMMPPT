head	1.14;
access;
symbols
	sce_5_01_20080919:1.11
	latest_sce_4_20_20060523:1.9.0.2
	sce_4_20_20060523:1.9
	latest_sce4_20_OSL:1.8.0.2
	sce_4_20_OSL:1.8
	sce_410_withVa:1.4
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.2;
locks; strict;
comment	@ * @;


1.14
date	2011.09.28.23.50.37;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.24.00.28.53;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.08.30.20.18.21;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.10.15.57.24;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.26.20.40.11;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.28.18.57.50;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.05.22.24.10;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.15.21.27.24;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.15.19.55.22;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.14.15.05.32;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.19.22.00.53;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.24.21.09.47;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.24.20.12.34;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef TripStackH
#define TripStackH

//------------------------------------------------------------------------------
// Header file: "TripStack.h"
//
// Contains the declaration of the following classes and templates:
//
//    AbsTripStack
//    TripStack <ObjByPtr>
//------------------------------------------------------------------------------

#include <Stack.h>
#include <Link.h>

//------------------------------------------------------------------------------
// Class AbsTripStack
//
// A stack of triples, (ObjByVP, Period, Double), where ObjByVP is an object of
// undefined type, accessed by pointer.
//
// Class Hierarchy:
//
// AbsStack
//    AbsTripStack
//       TripStack <ObjByPtr>
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitAbsTripStack: public WitAbsStack
   {
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsTripStack (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsTripStack ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void pushAbsTrip (void *, WitPeriod, double);
         //
         // Pushes a triple formed from the args onto the top of this
         // AbsObjStack.

      bool popAbsTrip (void * &, WitPeriod &, double &);
         //
         // If this AbsTripStack is non-Empty, the first triple it contains is
         // removed from it and the args are set to the elements of the removed
         // triple. Returns true, iff this AbsTripStack is non-empty.

      void revCopyFromAbs (const WitAbsTripStack & theAbsTripStack);
         //
         // Copies the contents of theAbsTripStack into this AbsTripStack in 
         // reverse order.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitTripLink * firstTripLink () const;

      noCopyCtorAssign (WitAbsTripStack);
   };

//------------------------------------------------------------------------------
// Class template TripStack <ObjByPtr>
//
// A stack of triples, (ObjByPtr, Period, Double).
//
// Class Hierarchy:
//
// AbsStack
//    AbsTripStack
//       TripStack <ObjByPtr>
//
// All implementation is inline.
//------------------------------------------------------------------------------

template <typename ObjByPtr> 
      class WitTripStack: public WitAbsTripStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitTripStack (WitProblem * theProblem):
            WitAbsTripStack (theProblem)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitTripStack ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void push (
            ObjByPtr * theObject,
            WitPeriod  thePer,
            double     theDbl)
         {
         pushAbsTrip (theObject, thePer, theDbl);
         }

      inline bool pop (
            ObjByPtr * & theObject,
            WitPeriod &  thePer,
            double &     theDbl)
         {
         return
            popAbsTrip (
               reinterpret_cast <void * &> (theObject),
               thePer,
               theDbl);
         }

      inline void takeContentsFrom (WitTripStack & thatTripStack)
         {
         takeContentsFromAbs (thatTripStack);
         }

      inline void revCopyFrom (const WitTripStack & theTripStack)
         {
         revCopyFromAbs (theTripStack);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTripStack);
   };

#endif
@


1.13
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.12
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d41 2
a42 2
{
protected:
d44 3
a46 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d48 1
a48 1
WitAbsTripStack (WitProblem *);
d50 3
a52 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d54 1
a54 1
~WitAbsTripStack ();
d56 3
a58 3
//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------
d60 4
a63 4
void pushAbsTrip (void *, WitPeriod, double);
//
// Pushes a triple formed from the args onto the top of this
// AbsObjStack.
d65 5
a69 5
bool popAbsTrip (void * &, WitPeriod &, double &);
//
// If this AbsTripStack is non-Empty, the first triple it contains is
// removed from it and the args are set to the elements of the removed
// triple. Returns true, iff this AbsTripStack is non-empty.
d71 4
a74 4
void revCopyFromAbs (const WitAbsTripStack & theAbsTripStack);
//
// Copies the contents of theAbsTripStack into this AbsTripStack in
// reverse order.
d76 1
a76 1
private:
d78 3
a80 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d82 1
a82 1
WitTripLink * firstTripLink () const;
d84 2
a85 2
noCopyCtorAssign (WitAbsTripStack);
};
d101 61
a161 61
template <typename ObjByPtr>
class WitTripStack: public WitAbsTripStack
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

inline WitTripStack (WitProblem * theProblem):
WitAbsTripStack (theProblem)
{
}

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

inline ~WitTripStack ()
{
}

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline void push (
ObjByPtr * theObject,
WitPeriod  thePer,
double     theDbl)
{
pushAbsTrip (theObject, thePer, theDbl);
}

inline bool pop (
ObjByPtr * & theObject,
WitPeriod &  thePer,
double &     theDbl)
{
return
popAbsTrip (
reinterpret_cast <void * &> (theObject),
thePer,
theDbl);
}

inline void takeContentsFrom (WitTripStack & thatTripStack)
{
takeContentsFromAbs (thatTripStack);
}

inline void revCopyFrom (const WitTripStack & theTripStack)
{
revCopyFromAbs (theTripStack);
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d163 2
a164 2
noCopyCtorAssign (WitTripStack);
};
@


1.11
log
@ASAP Pegging Order
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d41 2
a42 2
   {
   protected:
d44 3
a46 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d48 1
a48 1
      WitAbsTripStack (WitProblem *);
d50 3
a52 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d54 1
a54 1
      ~WitAbsTripStack ();
d56 3
a58 3
      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------
d60 4
a63 4
      void pushAbsTrip (void *, WitPeriod, double);
         //
         // Pushes a triple formed from the args onto the top of this
         // AbsObjStack.
d65 5
a69 5
      bool popAbsTrip (void * &, WitPeriod &, double &);
         //
         // If this AbsTripStack is non-Empty, the first triple it contains is
         // removed from it and the args are set to the elements of the removed
         // triple. Returns true, iff this AbsTripStack is non-empty.
d71 4
a74 4
      void revCopyFromAbs (const WitAbsTripStack & theAbsTripStack);
         //
         // Copies the contents of theAbsTripStack into this AbsTripStack in 
         // reverse order.
d76 1
a76 1
   private:
d78 3
a80 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d82 1
a82 1
      WitTripLink * firstTripLink () const;
d84 2
a85 2
      noCopyCtorAssign (WitAbsTripStack);
   };
d101 61
a161 61
template <typename ObjByPtr> 
      class WitTripStack: public WitAbsTripStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitTripStack (WitProblem * theProblem):
            WitAbsTripStack (theProblem)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitTripStack ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void push (
            ObjByPtr * theObject,
            WitPeriod  thePer,
            double     theDbl)
         {
         pushAbsTrip (theObject, thePer, theDbl);
         }

      inline bool pop (
            ObjByPtr * & theObject,
            WitPeriod &  thePer,
            double &     theDbl)
         {
         return
            popAbsTrip (
               reinterpret_cast <void * &> (theObject),
               thePer,
               theDbl);
         }

      inline void takeContentsFrom (WitTripStack & thatTripStack)
         {
         takeContentsFromAbs (thatTripStack);
         }

      inline void revCopyFrom (const WitTripStack & theTripStack)
         {
         revCopyFromAbs (theTripStack);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d163 2
a164 2
      noCopyCtorAssign (WitTripStack);
   };
@


1.10
log
@New PIP pegging order.
@
text
@d147 1
a147 1
      inline void passContentsTo (WitTripStack & theTripStack)
d149 1
a149 1
         passContentsToAbs (theTripStack);
@


1.9
log
@Updated the copyright date on all source files.
@
text
@d147 1
a147 1
      inline void takeContents (WitTripStack & theTripStack)
d149 1
a149 1
         takeContentsAbs (theTripStack);
@


1.8
log
@[shared-resource peging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.7
log
@[shared-resource pegging]
@
text
@d29 1
a29 1
// undefinded type, accessed by pointer.
@


1.6
log
@[shared-resource pegging]
@
text
@d28 2
a29 1
// A stack of individual objects of undefined type.
@


1.5
log
@[shared-resource pegging]
@
text
@a23 1
#include <TlObj.h>
d59 1
a59 1
      void pushAbsTrip (WitTlObj *, WitPeriod, double);
d64 1
a64 1
      bool popAbsTrip (WitTlObj * &, WitPeriod &, double &);
d131 1
a131 1
         pushAbsTrip (toTlObj_cast (theObject), thePer, theDbl);
d139 5
a143 1
         return popAbsTrip (toTlObjRef_cast (theObject), thePer, theDbl);
@


1.4
log
@PIP.
@
text
@d19 1
a19 1
//    TripStack <ObjType>
d35 1
a35 1
//       TripStack <ObjType>
d88 1
a88 1
// Class template TripStack <ObjType>
d90 1
a90 1
// A stack of triples, (ObjType, Period, Double).
d96 1
a96 1
//       TripStack <ObjType>
d101 1
a101 1
template <typename ObjType> 
d128 3
a130 3
            ObjType * theObject,
            WitPeriod thePer,
            double    theDbl)
d136 3
a138 3
            ObjType * & theObject,
            WitPeriod & thePer,
            double &    theDbl)
@


1.3
log
@Double Precision.
@
text
@d19 1
a19 1
//    ObjStack <ObjType>
@


1.2
log
@Continued implementation of PIP.
@
text
@d90 1
a90 1
// A stack of triples, (ObType, Period, Double).
@


1.1
log
@Continued implementation of PIP.
@
text
@d135 1
a135 1
      inline void pop (
d140 1
a140 1
         popAbsTrip (toTlObjRef_cast (theObject), thePer, theDbl);
@

