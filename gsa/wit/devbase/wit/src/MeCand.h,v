head	1.20;
access;
symbols
	sce_5_01_20080919:1.17
	latest_sce_4_20_20060523:1.17.0.2
	sce_4_20_20060523:1.17
	latest_sce4_20_OSL:1.16.0.2
	sce_4_20_OSL:1.16
	sce_410_withVa:1.16
	sce_4_05_20040511:1.6
	sce_4_00_20040201:1.6
	nextGenBranch:1.6.0.2
	nextGenRoot:1.6
	sce_3_30_20030627:1.5
	EndRw-branch:1.5.0.6
	Root-of-EndRw:1.5
	rwToStl:1.5.0.4
	latest_sce_3_10_20010924:1.5.0.2
	sce_3_10_20010924:1.5;
locks; strict;
comment	@ * @;


1.20
date	2011.09.28.23.49.30;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.24.00.27.51;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.30.20.17.37;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.02.17.34.01;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.12.31.18.28.28;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.20.18.36.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.17.21.53.00;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.16.23.35.16;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.15.23.50.10;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.14.22.37.09;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.13.23.35.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.13.18.58.21;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.10.16.49.43;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.17.18.56.27;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.23.21.13.52;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.22.20.41.48;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.21.17.31.44;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.14.17.41.53;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MeCandH
#define MeCandH

//------------------------------------------------------------------------------
// Header file: "MeCand.h"
//
// Contains the declaration of class MeCand.
//------------------------------------------------------------------------------

#include <SelCand.h>

//------------------------------------------------------------------------------
// Class MeCand
//
// "Multi-Exec Candidate"
// Represents a candidate for selection by multi-exec.
// In this case, the selection candidate is an execution period to be used by
// some BopEntry to produce in some explosion period.
//
// Class Hierarchy:
//
// SelCand
//    MeCand
//
// Implemented in MultiEx.C.
//------------------------------------------------------------------------------

class WitMeCand: public WitSelCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeCand (WitPeriod, WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMeCand ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void prtID     ();
      virtual void getMeData (WitPeriod &);
         //
         // Overrides from class SelCand.

      noCopyCtorAssign (WitMeCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitPeriod myExecPer_;
         //
         // The candidate execution period for this MeCand.
   };

#endif
@


1.19
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.18
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d38 2
a39 2
{
public:
d41 3
a43 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d45 1
a45 1
WitMeCand (WitPeriod, WitProblem *);
d47 1
a47 1
private:
d49 3
a51 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d53 1
a53 1
virtual ~WitMeCand ();
d55 3
a57 3
//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------
d59 4
a62 4
virtual void prtID     ();
virtual void getMeData (WitPeriod &);
//
// Overrides from class SelCand.
d64 1
a64 1
noCopyCtorAssign (WitMeCand);
d66 3
a68 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d70 4
a73 4
const WitPeriod myExecPer_;
//
// The candidate execution period for this MeCand.
};
@


1.17
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d38 2
a39 2
   {
   public:
d41 3
a43 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d45 1
a45 1
      WitMeCand (WitPeriod, WitProblem *);
d47 1
a47 1
   private:
d49 3
a51 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d53 1
a53 1
      virtual ~WitMeCand ();
d55 3
a57 3
      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d59 4
a62 4
      virtual void prtID     ();
      virtual void getMeData (WitPeriod &);
         //
         // Overrides from class SelCand.
d64 1
a64 1
      noCopyCtorAssign (WitMeCand);
d66 3
a68 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d70 4
a73 4
      const WitPeriod myExecPer_;
         //
         // The candidate execution period for this MeCand.
   };
@


1.16
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.15
log
@Low-Pri Prop-Rt.
@
text
@d45 1
a45 1
      WitMeCand (WitMePt *);
d59 2
a60 3
      virtual void prtID            ();
      virtual void restoreSelToThis ();
      virtual void getMeData        (WitPeriod &);
a69 4
      WitMePt * const myMePt_;
         //
         // The MePt at which this MeCand represents a candidate for selection.

@


1.14
log
@Low-Pri Prop-Rt.
@
text
@a59 1
      virtual void updateToCurSel   ();
d75 1
a75 1
      WitPeriod myExecPer_;
@


1.13
log
@Low-Pri Prop-Rt.
@
text
@a41 4
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
a46 6
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod, myExecPer)

d59 4
a62 4
      virtual void        prtID            ();
      virtual void        updateToCurSel   ();
      virtual void        restoreSelToThis ();
      virtual WitMeCand * myMeCand         ();
@


1.12
log
@Low-Pri Prop-Rt.
@
text
@d49 1
a49 1
      WitMeCand (WitMeMgr *);
d52 1
a52 1
      // Destructor function.
d55 3
a57 1
      virtual ~WitMeCand ();
d60 1
a60 1
      // Data access functions.
d63 1
a63 3
      accessFunc (WitPeriod, myExecPer)

   private:
d66 1
a66 1
      // Private member functions.
d70 1
a72 1
      virtual void        setToCurSelOf    (WitMePt *);
d82 1
a82 1
      WitMePt * myMePt_;
a84 1
         // Valid only when this MeCand is active.
a88 1
         // Valid only when this MeCand is active.
@


1.11
log
@Low-Pri Prop-Rt.
@
text
@d69 4
a72 3
      virtual void        prtID         ();
      virtual WitMeCand * myMeCand      ();
      virtual void        setToCurSelOf (WitMePt *);
d82 5
d89 2
a90 2
         // The candidate execution period for this MeCand, if any;
         // otherwise -1.
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@a57 8
      // Other public member functions.
      //------------------------------------------------------------------------

      void setToCurSel (WitMePt * theMePt);
         //
         // Sets this MeCand to represent the current selection at theMePt.

      //------------------------------------------------------------------------
d69 3
a71 2
      virtual void        prtID    ();
      virtual WitMeCand * myMeCand ();
d83 2
a84 1
         // The candidate execution period for this MeCand.
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@d49 1
a49 1
      WitMeCand (WitPeriod, WitMeMgr *);
d58 8
@


1.8
log
@
Low-Pri Prop-Rt.
@
text
@d49 1
a49 1
      WitMeCand (WitPeriod, WitProblem *);
d80 1
a80 1
      const WitPeriod myExecPer_;
@


1.7
log
@Low-Pri Prop-Rt.
@
text
@d49 1
a49 3
      WitMeCand (WitPeriod, WitMeCand * theMeCand, WitMeMgr *);
         //
         // prev_ <-- theMeCand.
d61 1
a61 3
      accessFunc (WitPeriod,   myExecPer)
      accessFunc (WitMeCand *, prev)
      accessFunc (WitMeCand *, next)
d69 1
a69 1
      virtual void       prtID     ();
a82 10

      WitMeCand * prev_;
      WitMeCand * next_;
         //
         // The MeCand for myExecPer_ - 1 and myExecPer_ + 1, respectively, or
         // NULL, if none exists.

      WitMeMgr * const myMeMgr_;
         //
         // The MeMgr that owns this MeCand.
@


1.6
log
@Added some optional warnings on Linux.
@
text
@a59 7
      // Overrides from class SelCand.
      //------------------------------------------------------------------------

      virtual void       prtID     ();
      virtual WitMeCand * myMeCand ();

      //------------------------------------------------------------------------
d73 5
@


1.5
log
@Continued implmentation of selective stock reallocation.
@
text
@d57 1
a57 1
      ~WitMeCand ();
@


1.4
log
@Refactoring for constrained stock reallocation.
@
text
@d63 2
a64 13
      virtual void       prtID      ();
      virtual WitBoolean isanMeCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline static WitMeCand * safeCast (WitSelCand * theSelCand)
         {
         witAssert ((theSelCand == NULL) || theSelCand->isanMeCand ());

         return (WitMeCand *) theSelCand;
         }
@


1.3
log
@Refactoring for constrained stock reallocation.
@
text
@d63 1
d70 1
a70 1
      inline static WitMeCand * downCast (WitSelCand * theSelCand)
@


1.2
log
@Refactoring for constrained stock reallocation.
@
text
@d60 17
@


1.1
log
@Created class SelCand and classes derived from it.
@
text
@d42 4
d49 3
a51 1
      WitMeCand (WitPeriod, WitMeMgr *);
d63 3
a65 1
      accessFunc (WitPeriod, myExecPer)
d82 6
@

