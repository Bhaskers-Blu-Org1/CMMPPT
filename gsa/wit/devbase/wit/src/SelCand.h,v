head	1.34;
access;
symbols
	sce_5_01_20080919:1.31
	latest_sce_4_20_20060523:1.31.0.2
	sce_4_20_20060523:1.31
	latest_sce4_20_OSL:1.30.0.2
	sce_4_20_OSL:1.30
	sce_410_withVa:1.30
	sce_4_05_20040511:1.15
	sce_4_00_20040201:1.15
	nextGenBranch:1.15.0.2
	nextGenRoot:1.15
	sce_3_30_20030627:1.14
	EndRw-branch:1.8.0.4
	Root-of-EndRw:1.8
	rwToStl:1.8.0.2
	latest_sce_3_10_20010924:1.6.0.2
	sce_3_10_20010924:1.6;
locks; strict;
comment	@ * @;


1.34
date	2011.09.28.23.50.09;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.09.24.00.28.36;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.08.30.20.18.09;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.02.17.34.12;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2005.01.10.22.34.49;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2005.01.05.19.32.45;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2005.01.04.20.09.36;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.12.31.18.28.28;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.12.20.18.36.24;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.12.17.21.53.01;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.16.23.35.17;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.15.23.50.11;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.15.20.20.50;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.14.22.37.10;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.13.23.35.48;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.10.16.49.44;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.09.23.57.03;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.12.06.22.38.16;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.10.22.58.17;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.19.16.48.27;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.03.21.07.33;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.28.20.47.39;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.27.19.20.23;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.14.20.13.01;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.31.21.28.57;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.26.19.05.30;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.13.19.27.20;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.17.18.56.29;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.16.21.42.31;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.23.21.13.55;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.22.20.41.53;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.12.17.57.02;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.14.17.41.54;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef SelCandH
#define SelCandH

//------------------------------------------------------------------------------
// Header file: "SelCand.h"
//
// Contains the declaration of class SelCand.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class SelCand
//
// "Selection Candidate"
//
// Abstract representation of a candidate for selection.
//
// Class Hierarchy:
//
// SelCand
//    MrCand
//    BaCand
//    MeCand
//    SsrCand
//    PrCand
//
// Implemented in SelSplit.C.
//------------------------------------------------------------------------------

class WitSelCand: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSelCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void prtID () = 0;
         //
         // Prints info identifying this SelCand.

      virtual void getMrData  (WitRtCand * &    theRtCand);
      virtual void getBaData  (WitPeriod &      expPer);
      virtual void getMeData  (WitPeriod &      execPer);
      virtual void getSsrData (bool &           srAllowedVal);
      virtual void getPoData  (bool &           activeVal,
                               bool &           potActiveVal);
      virtual void getPrData  (WitRtCandStack & theRtCands);
         //
         // Each of these functions sets it arguments to the selection state
         // data for this SelCand for a particular selection case.
         // If this SelCand does not belong to the indicated case, a fatal error
         // is issued.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSelCand (WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSelCand);
   };

#endif
@


1.33
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.32
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d41 2
a42 43
{
public:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitSelCand ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual void prtID () = 0;
//
// Prints info identifying this SelCand.

virtual void getMrData  (WitRtCand * &    theRtCand);
virtual void getBaData  (WitPeriod &      expPer);
virtual void getMeData  (WitPeriod &      execPer);
virtual void getSsrData (bool &           srAllowedVal);
virtual void getPoData  (bool &           activeVal,
bool &           potActiveVal);
virtual void getPrData  (WitRtCandStack & theRtCands);
//
// Each of these functions sets it arguments to the selection state
// data for this SelCand for a particular selection case.
// If this SelCand does not belong to the indicated case, a fatal error
// is issued.

protected:

//------------------------------------------------------------------------
// Protected member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitSelCand (WitProblem *);

private:
d44 44
a87 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d89 2
a90 2
noCopyCtorAssign (WitSelCand);
};
@


1.31
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d41 43
a83 2
   {
   public:
d85 3
a87 44
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSelCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void prtID () = 0;
         //
         // Prints info identifying this SelCand.

      virtual void getMrData  (WitRtCand * &    theRtCand);
      virtual void getBaData  (WitPeriod &      expPer);
      virtual void getMeData  (WitPeriod &      execPer);
      virtual void getSsrData (bool &           srAllowedVal);
      virtual void getPoData  (bool &           activeVal,
                               bool &           potActiveVal);
      virtual void getPrData  (WitRtCandStack & theRtCands);
         //
         // Each of these functions sets it arguments to the selection state
         // data for this SelCand for a particular selection case.
         // If this SelCand does not belong to the indicated case, a fatal error
         // is issued.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSelCand (WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d89 2
a90 2
      noCopyCtorAssign (WitSelCand);
   };
@


1.30
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.29
log
@Low-Pri Prop-Rt.
@
text
@a34 1
//    PoCand
@


1.28
log
@Low-Pri Prop-Rt.
@
text
@d59 7
a65 6
      virtual void getMrData  (WitRtCand * & theRtCand);
      virtual void getBaData  (WitPeriod &   expPer);
      virtual void getMeData  (WitPeriod &   execPer);
      virtual void getSsrData (bool &        srAllowedVal);
      virtual void getPoData  (bool &        activeVal,
                               bool &        potActiveVal);
@


1.27
log
@Low-Pri Prop-Rt.
@
text
@d36 1
d38 1
a38 1
// Implemented in MultiSel.C.
@


1.26
log
@Low-Pri Prop-Rt.
@
text
@a57 5
      virtual void restoreSelToThis () = 0;
         //
         // Restores the selection of the SelPt associated with this SelCand to
         // that represented by this SelCand.

@


1.25
log
@Low-Pri Prop-Rt.
@
text
@a57 5
      virtual void updateToCurSel () = 0;
         //
         // Causes this SelCand to represent the current selection at the SelPt 
         // associated with this SelCand.

@


1.24
log
@Low-Pri Prop-Rt.
@
text
@d68 6
a73 5
      virtual WitMrCand *  myMrCand  ();
      virtual WitBaCand *  myBaCand  ();
      virtual WitMeCand *  myMeCand  ();
      virtual WitSsrCand * mySsrCand ();
      virtual WitPoCand *  myPoCand  ();
d75 4
a78 3
         // For each of these functions, if this SelCand is actually an instance
         // of the indicated derived class, that instance is returned.
         // Otherwise, a fatal error is issued.
@


1.23
log
@Low-Pri Prop-Rt.
@
text
@d58 1
a58 1
      void activate ();
d60 2
a61 9
         // Makes this SelCand active.

      void deactivate ();
         //
         // Makes this SelCand inactive.

      void verifyAsInactive ();
         //
         // Verifies that this SelCand is inactive.
d66 1
a66 1
         // this SelCand.
a77 17
      virtual void setToCurSelOf (WitMrPt  *);
      virtual void setToCurSelOf (WitBaPt  *);
      virtual void setToCurSelOf (WitMePt  *);
      virtual void setToCurSelOf (WitSsrPt *);
      virtual void setToCurSelOf (WitPoPt  *);
         //
         // Each of these functions sets this SelCand to represent the current
         // selection at the argument, if the argument belongs to the same
         // selection case as this SelCand.
         // Otherwise, a fatal error is issued.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSelMgr *, mySelMgr)

d88 1
a88 7
      WitSelCand (WitSelMgr *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, active)
a96 12

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSelMgr * const mySelMgr_;
         //
         // The SelMgr for this SelCand.

      bool active_;
         //
         // true, iff this SelCand is currently being used.
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@d70 5
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d77 13
a89 2
         // of the indicated derived class, that instance is returned; 
         // otherwise a fatal error is issued.
@


1.20
log
@Low-Pri Prop-Rt.
@
text
@d58 1
a58 1
      void use ();
d60 1
a60 1
         // Marks this SelCand as currently in use.
d62 1
a62 1
      void recycle ();
d64 5
a68 1
         // Stores this SelCand in its SelMgr for later re-use.
a84 1
      accessFunc (bool,        inUse)
d98 6
d120 1
a120 1
      bool inUse_;
@


1.19
log
@Low-Pri Prop-Rt.
@
text
@d45 7
a51 1
      // Public member functions.
d58 8
d70 1
d76 7
a94 6
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSelCand ();

d110 4
@


1.18
log
@Low-Pri Prop-Rt.
@
text
@d71 1
a71 1
      WitSelCand (WitProblem *);
d86 8
@


1.17
log
@Low-Pri Prop-Rt.
@
text
@a31 1
//    PoCand
d35 1
@


1.16
log
@Low-Pri Prop-Rt.
@
text
@a52 1
      virtual WitPoCand *  myPoCand  ();
@


1.15
log
@Added some optional warnings on Linux.
@
text
@d32 1
a32 1
//    PrCand
d53 1
a53 1
      virtual WitPrCand *  myPrCand  ();
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@d78 1
a78 1
      ~WitSelCand ();
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@d25 1
d32 1
a32 2
//       PmrCand
//       CmrCand
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@a52 1
      virtual WitOpCand *  myOpCand  ();
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@d54 1
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d53 1
a53 1
      virtual WitPrCand *  myPrCand  ();
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d72 1
a72 1
      WitSelCand (WitProbAssoc *);
@


1.8
log
@Began implementation of multi-level lot sizes.
@
text
@d53 1
@


1.7
log
@Continued implementation of sel-split for pen-exec.
@
text
@d30 3
a32 2
//    MrCand <Pmr>
//    MrCand <Cmr>
d52 4
a55 5
      virtual WitMrCand <Pmr> * myPmrCand ();
      virtual WitMrCand <Cmr> * myCmrCand ();
      virtual WitBaCand *       myBaCand  ();
      virtual WitMeCand *       myMeCand  ();
      virtual WitSsrCand *      mySsrCand ();
@


1.6
log
@Continued implmentation of selective stock reallocation.
@
text
@d51 5
a55 5
      virtual WitMrCand <Pmr> * myMrCandPmr ();
      virtual WitMrCand <Cmr> * myMrCandCmr ();
      virtual WitBaCand *       myBaCand    ();
      virtual WitMeCand *       myMeCand    ();
      virtual WitSsrCand *      mySsrCand   ();
@


1.5
log
@Continued implementation of selective stock reallocation.
@
text
@d51 5
a55 5
      virtual WitBoolean isaPmrCand ();
      virtual WitBoolean isaCmrCand ();
      virtual WitBoolean isaBaCand ();
      virtual WitBoolean isanMeCand ();
      virtual WitBoolean isanSsrCand ();
d57 3
a59 6
         // Returns TRUE, iff this SelCand is actually:
         //    an MrCand <Pmr>
         //    an MrCand <Cmr>
         //    a  BaCand
         //    an MeCand
         //    an SsrCand
@


1.4
log
@Refactoring for constrained stock reallocation.
@
text
@d34 1
d55 1
d58 2
a59 2
         //    a  MrCand <Pmr>
         //    a  MrCand <Cmr>
d62 1
@


1.3
log
@Refactoring for constrained stock reallocation.
@
text
@d46 4
@


1.2
log
@Templatized consumption multi-route.
@
text
@d30 2
a31 2
//    MrCand <PmrArgs>
//    MrCand <CmrArgs>
d46 11
d58 4
@


1.1
log
@Created class SelCand and classes derived from it.
@
text
@d30 2
a31 2
//    PmrCand
//    CmrCand
@

