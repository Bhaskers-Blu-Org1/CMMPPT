head	1.24;
access;
symbols;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.49.23;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.27.42;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.17.32;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.02.09.23.31.41;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.09.30.22.04.58;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.09.24.18.17.20;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.09.22.20.21.52;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.09.10.22.10.38;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.09.02.18.58.24;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.01.21.53.35;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.01.18.21.42;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.01.16.28.23;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.06.22.19.04;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.03.23.50.02;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.07.01.22.41.20;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.24.23.37.33;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.22.20.26.09;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.22.19.55.34;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.17.16.29.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.16.15.38.42;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.14.21.15.14;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.10.23.26.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.10.21.19.01;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.16.22.42.25;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "GlobalComp.C"
//
// Contains the implementation of class GlobalComp.
//------------------------------------------------------------------------------

#include <GlobalComp.h>
#include <CompMgr.h>
#include <DataWrit.h>
#include <Pre.h>
#include <Post.h>
#include <FSS.h>
#include <PipMgr.h>
#include <HeurAllMgr.h>
#include <PclEl.h>
#include <DetOptImpMgr.h>
#include <Part.h>
#include <Demand.h>
#include <Operation.h>
#include <MsgFac.h>
#include <MsgFrag.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------

WitGlobalComp::WitGlobalComp (WitCompMgr * theCompMgr):

      WitComponent         (theCompMgr),

      title_               (defTitle               ()),
      nPeriods_            (defNPeriods            ()),
      independentOffsets_  (defIndependentOffsets  ()),
      execEmptyBom_        (defExecEmptyBom        ()),
      hashTableSize_       (defHashTableSize       ()),
      roundReqVols_        (defRoundReqVols        ()),
      outputPrecision_     (defOutputPrecision     ()),
      computeCriticalList_ (defComputeCriticalList ()),
      pgdCritListMode_     (defPgdCritListMode     ()),
      wit34Compatible_     (defWit34Compatible     ()),
      wit34Allowed_        (defWit34Allowed        ()),
      useFocusHorizons_    (defUseFocusHorizons    ()),
      localBuildAhead_     (defLocalBuildAhead     ()),
      multiExec_           (defMultiExec           ()),
      twoWayMultiExec_     (defTwoWayMultiExec     ()),
      localMultiExec_      (defLocalMultiExec      ()),
      equitability_        (defEquitability        ()),
      forcedMultiEq_       (defForcedMultiEq       ()),
      autoPriority_        (defAutoPriority        ()),
      skipFailures_        (defSkipFailures        ()),
      multiRoute_          (defMultiRoute          ()),
      truncOffsets_        (defTruncOffsets        ()),
      lotSizeTol_          (defLotSizeTol          ()),
      expCutoff_           (defExpCutoff           ()),
      penExec_             (defPenExec             ()),
      tieBreakPropRt_      (defTieBreakPropRt      ()),
      stockRealloc_        (defStockRealloc        ()),
      stockReallocation_   (defStockReallocation   ()),
      srSelSplit_          (defSrSelSplit          ()),
      respectStockSLBs_    (defRespectStockSLBs    ()),
      prefHighStockSLBs_   (defPrefHighStockSLBs   ()),
      perfPegging_         (defPerfPegging         ()),
      selSplit_            (defSelSplit            ()),
      nonMrSelSplit_       (defNonMrSelSplit       ()),
      selectionRecovery_   (defSelectionRecovery   ()),
      userHeurStart_       (defUserHeurStart       ()),
      modHeurAlloc_        (defModHeurAlloc        ()),
      pipSeqFromHeur_      (defPipSeqFromHeur      ()),
      newPipPggOrder_      (defNewPipPggOrder      ()),
      highPrecisionWD_     (defHighPrecisionWD     ()),
      nstnResidual_        (defNstnResidual        ()),
      minimalExcess_       (defMinimalExcess       ()),

      readDataMsgs_        (false),
      printIncAlloc_       (false),
      printEqAlloc_        (false),
      selPrintLevel_       (0),
      twmeByDemand_        (false),
      splitTol_            (1.0),
      splitRes_            (1.0),
      splitItrUB_          (20),
      inputPauses_         (false),
      prtPipMaxRatio_      (false),
      printDebug_          (false),
      printExcessVol_      (false),
      tempPar_             (* new WitPtrVec <WitString>),

      lotSizesExist_       (false),
      revCritList_         (myProblem ()),
      pgdCritList_         (),
      feasible_            (false)
   {
      // The following statement normally sets nTempPars to 1, but it can be
      // altered to a larger number for testing purposes:
      //
   setNTempPars (1);

   myCompMgr ()->insert (this);
   }

//------------------------------------------------------------------------------

WitGlobalComp::~WitGlobalComp ()
   {
   clearPgdCritList ();

   setNTempPars (0);

   delete & tempPar_;
   }

//------------------------------------------------------------------------------

const WitString & WitGlobalComp::tempPar (int index) const
   {
   checkTempParIndex (index);

   return tempPar_.myElemAt (index);
   }

//------------------------------------------------------------------------------

int WitGlobalComp::nTempPars () const
   {
   return tempPar_.length () - 1;
   }

//------------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------------

void WitGlobalComp::setTitle (const char * theValue)
   {
   witAssert (theValue != NULL);

   prepSetNonUnpostAttr ();

   title_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setNPeriods (int theValue)
   {
   witAssert (myCompMgr ()->nNodes () == 0);

   witAssert (theValue >= 1);

   prepSetUnpreAttr ();

   nPeriods_ = theValue;

   myProblem ()->updateNPeriods ();
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setIndependentOffsets (bool theValue)
   {
   witAssert (myCompMgr ()->nNodes () == 0);

   prepSetUnpreAttr ();

   independentOffsets_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setExecEmptyBom (bool theValue)
   {
   prepSetUnpreAttr ();

   execEmptyBom_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setHashTableSize (int theValue)
   {
   witAssert (theValue >= 0);

   prepSetNonUnpostAttr ();

   hashTableSize_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setRoundReqVols (bool theValue)
   {
   prepSetUnpostAttr ();

   roundReqVols_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setOutputPrecision (int theValue)
   {
   witAssert (theValue >= 0);

   prepSetNonUnpostAttr ();

   outputPrecision_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setComputeCriticalList (bool theValue)
   {
   prepSetUnpostAttr ();

   computeCriticalList_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPgdCritListMode (bool theValue)
   {
   if (pgdCritListMode_)
      if (not theValue)
         clearPgdCritList ();

   prepSetUnpostAttr ();

   pgdCritListMode_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setWit34Compatible (bool theValue)
   {
   WitOperation * theOpn;

   prepSetUnpreAttr ();

   if (myCompMgr ()->nOperations () > 0)
      myMsgFac () ("setWit34CompatibleCpuWmsg");

   forEachOperation (theOpn, myProblem ())
      theOpn->setWit34Compatible (theValue);

   wit34Compatible_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setWit34Allowed (bool theValue)
   {
   prepSetUnpreAttr ();

   wit34Allowed_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setUseFocusHorizons (bool theValue)
   {
   prepSetNonUnpostAttr ();

   myProblem ()->myFSS ()->uncompute ();

   useFocusHorizons_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setLocalBuildAhead (bool theValue)
   {
   prepSetUnpostAttr ();

   localBuildAhead_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setMultiExec (bool theValue)
   {
   if (theValue)
      setLocalMultiExec  (false);

   if (not theValue)
      setTwoWayMultiExec (false);

   prepSetUnpreAttr ();

   multiExec_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setTwoWayMultiExec (bool theValue)
   {
   if (theValue)
      setMultiExec (true);

   prepSetUnpreAttr ();

   twoWayMultiExec_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setLocalMultiExec (bool theValue)
   {
   if (theValue)
      setMultiExec (false);

   prepSetUnpreAttr ();

   localMultiExec_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setEquitability (int theValue)
   {
   witAssert (theValue >=   1);
   witAssert (theValue <= 100);

   prepSetUnpostAttr ();

   equitability_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setForcedMultiEq (bool theValue)
   {
   prepSetUnpostAttr ();

   forcedMultiEq_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setAutoPriority (bool theValue)
   {
   prepSetUnpostAttr ();

   autoPriority_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setSkipFailures (bool theValue)
   {
   prepSetUnpostAttr ();

   skipFailures_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setMultiRoute (bool theValue)
   {
   prepSetUnpreAttr ();

   multiRoute_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setTruncOffsets (bool theValue)
   {
   prepSetUnpreAttr ();

   truncOffsets_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setLotSizeTol (double theValue)
   {
   witAssert (theValue >= 0.0);

   prepSetUnpostAttr ();

   lotSizeTol_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setExpCutoff (double theValue)
   {
   witAssert (theValue > 0.999E-6);

   prepSetUnpreAttr ();

   expCutoff_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPenExec (bool theValue)
   {
   prepSetUnpostAttr ();

   penExec_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setTieBreakPropRt (bool theValue)
   {
   prepSetUnpostAttr ();

   tieBreakPropRt_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setStockRealloc (bool theValue)
   {
   if (theValue)
      witAssert (not stockReallocation_);

   prepSetUnpostAttr ();

   stockRealloc_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setStockReallocation (bool theValue)
   {
   if (theValue)
      witAssert (not stockRealloc_);

   prepSetUnpostAttr ();

   stockReallocation_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setSrSelSplit (bool theValue)
   {
   prepSetUnpostAttr ();

   srSelSplit_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setRespectStockSLBs (bool theValue)
   {
   prepSetUnpostAttr ();

   respectStockSLBs_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPrefHighStockSLBs (bool theValue)
   {
   prepSetUnpostAttr ();

   prefHighStockSLBs_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPerfPegging (bool theValue)
   {
   prepSetUnpostAttr ();

   if (perfPegging_ == theValue)
      return;

   perfPegging_ = theValue;

   if (theValue)
      myProblem ()->myHeurAllMgr ()->setUpPegging ();
   else
      myProblem ()->myHeurAllMgr ()->shutDownPegging ();
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setSelSplit (bool theValue)
   {
   prepSetUnpostAttr ();

   if (theValue)
      nonMrSelSplit_ = false;

   selSplit_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setNonMrSelSplit (bool theValue)
   {
   prepSetUnpostAttr ();

   if (theValue)
      selSplit_ = false;

   nonMrSelSplit_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setSelectionRecovery (bool theValue)
   {
   prepSetUnpostAttr ();

   selectionRecovery_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setUserHeurStart (bool theValue)
   {
   prepSetUnpostAttr ();

   userHeurStart_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setModHeurAlloc (bool theValue)
   {
   prepSetUnpostAttr ();

   modHeurAlloc_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPipSeqFromHeur (bool theValue)
   {
   prepSetUnpostAttr ();

   pipSeqFromHeur_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setNewPipPggOrder (bool theValue)
   {
   prepSetNonUnpostAttr ();

   myProblem ()->myPipMgr ()->clearPegging ();

   newPipPggOrder_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setHighPrecisionWD (bool theValue)
   {
   prepSetUnpostAttr ();

   highPrecisionWD_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setNstnResidual (bool theValue)
   {
   prepSetUnpostAttr ();

   nstnResidual_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setMinimalExcess (bool theValue)
   {
   prepSetUnpostAttr ();

   minimalExcess_ = theValue;
   }

//------------------------------------------------------------------------------
// Other functions.
//------------------------------------------------------------------------------

void WitGlobalComp::setReadDataMsgs (bool theValue)
   {
   readDataMsgs_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPrintIncAlloc (bool theValue)
   {
   printIncAlloc_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPrintEqAlloc (bool theValue)
   {
   printEqAlloc_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setSelPrintLevel (int theValue)
   {
   selPrintLevel_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setTwmeByDemand (bool theValue)
   {
   twmeByDemand_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setSplitTol (double theValue)
   {
   splitTol_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setSplitRes (double theValue)
   {
   splitRes_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setSplitItrUB (int theValue)
   {
   splitItrUB_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setInputPauses (bool theValue)
   {
   inputPauses_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPrtPipMaxRatio (bool theValue)
   {
   prtPipMaxRatio_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPrintDebug (bool theValue)
   {
   printDebug_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setPrintExcessVol (bool theValue)
   {
   printExcessVol_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setTempPar (int index, const WitString & theValue)
   {
   checkTempParIndex (index);

   tempPar_.myElemAt (index) = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::storePreLotSizesExist (bool theValue)
   {
   witAssert (myPreprocessor ()->preprocessing ());

   lotSizesExist_ = theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::storePostFeasible (bool theValue)
   {
   witAssert (myPostprocessor ()->postprocessing ());

   feasible_ = theValue;
   }

//------------------------------------------------------------------------------

bool WitGlobalComp::inserted ()
   {
   return (myCompMgr ()->myGlobalComp () == this);
   }

//------------------------------------------------------------------------------

void WitGlobalComp::copySelfInto (WitCompMgr * theCompMgr)
   {
   theCompMgr->myGlobalComp ()->copyAttrsFrom (this);
   }

//------------------------------------------------------------------------------

void WitGlobalComp::recount ()
   {
   myCompMgr ()->recountGlobalComp (this);
   }

//------------------------------------------------------------------------------

void WitGlobalComp::unpreprocess ()
   {
   lotSizesExist_ = false;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::clearOptSoln  ()
   {                              
   witAssert (myDetOptImpMgr ()->clearingSoln ());

   revCritList_.clear ();
   }

//------------------------------------------------------------------------------

void WitGlobalComp::clearStochSoln ()
   {
   WitComponent::clearStochSoln ();

   feasible_ = false;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::display ()
   {
   myMsgFac () ("globalComp1DdMsg",
      multiExecNeeded (),
      twoWayMultiExec (),
      equitability    (),
      forcedMultiEq   (),
      userHeurStart   (),
      modHeurAlloc    (),
      autoPriority    (),
      skipFailures    (),
      multiRoute      (),
      penExec         (),
      tieBreakPropRt  ());

   myMsgFac () ("globalComp2DdMsg",
      stockReallocation (),
      selSplit          (),
      selectionRecovery (),
      respectStockSLBs  (),
      prefHighStockSLBs (),
      perfPegging       (),
      pipSeqFromHeur    (),
      newPipPggOrder    (),
      truncOffsets      (),
      highPrecisionWD   (),
      nstnResidual      (),
      minimalExcess     (),
      lotSizeTol        (),
      expCutoff         ());
   }

//------------------------------------------------------------------------------

bool WitGlobalComp::multiExecNeeded ()
   {
   return (multiExec_ or localMultiExec_);
   }

//------------------------------------------------------------------------------

void WitGlobalComp::unpostprocess ()
   {
   feasible_ = false;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::clearRevCritListForHeur ()
   {
   witAssert (myHeurAllMgr ()->updatingSoln ());

   revCritList_.clear ();
   }

//------------------------------------------------------------------------------

void WitGlobalComp::addToRevCritListForHeur (
      WitPart * thePart,
      WitPeriod thePer)
   {
   witAssert (myHeurAllMgr ()->updatingSoln ());

   revCritList_.push (thePart, thePer);
   }

//------------------------------------------------------------------------------

void WitGlobalComp::receiveOptRevCritList (WitPartPerStack & thePartPerStack)
   {
   witAssert (myDetOptImpMgr ()->uploadingSoln ());

   revCritList_.takeContentsFrom (thePartPerStack);
   }

//------------------------------------------------------------------------------

void WitGlobalComp::writePdgCritList ()
   {
   WitPclEl * thePclEl;

   stronglyAssert (DEVELOPMENT);

   fprintf (solnFile (),
      "\n"
      "Pegged Critical List:\n"
      "\n"
      "---------------------------\n"
      "Crit  Crit   Dem  Dem  Ship\n"
      "Part   Per  Part        Per\n"
      "---------------------------\n"
      );

   forEachEl (thePclEl, pgdCritList_)
      fprintf (solnFile (),
         "%4s   %3d    %2s  %3s   %3d\n",
         thePclEl->critPart ()->partName ()        .myCstring (),
         thePclEl->critPer (),
         thePclEl->myDemand ()->demandedPartName ().myCstring (),
         thePclEl->myDemand ()->demandName ()      .myCstring (),
         thePclEl->myShipPer ());
   }

//------------------------------------------------------------------------------

void WitGlobalComp::clearPgdCritList ()
   {
   while (not pgdCritList_.isEmpty ())
      delete pgdCritList_.get ();
   }

//------------------------------------------------------------------------------

void WitGlobalComp::appendToPgdCritListForHeur (WitPclEl * thePclEl)
   {
   witAssert (myHeurAllMgr ()->updatingSoln ());

   pgdCritList_.append (thePclEl);
   }

//------------------------------------------------------------------------------

bool WitGlobalComp::tempParIsSet (int index)
   {
   checkTempParIndex (index);

   return (tempPar (index) != "");
   }

//------------------------------------------------------------------------------

bool WitGlobalComp::tempParAsBool (int index)
   {
   checkTempParIndex (index);

   if (tempPar (index) == "yes")
      return true;

   if (tempPar (index) == "no")
      return false;

   myMsgFac () ("invalidBoolTempParSmsg", index, tempPar (index));

   return false;
   }

//------------------------------------------------------------------------------

int WitGlobalComp::tempParAsInt (int index)
   {
   int theValue;

   checkTempParIndex (index);

   if (sscanf (tempPar (index).myCstring (), "%d", & theValue) != 1)
      myMsgFac () ("invalidIntTempParSmsg", index, tempPar (index));

   return theValue;
   }

//------------------------------------------------------------------------------

double WitGlobalComp::tempParAsDouble (int index)
   {
   double theValue;

   checkTempParIndex (index);

   if (sscanf (tempPar (index).myCstring (), "%lg", & theValue) != 1)
      myMsgFac () ("invalidDoubleTempParSmsg", index, tempPar (index));

   return theValue;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::setNTempPars (int theValue)
   {
   int idx;

   for (idx = 1; idx <= nTempPars (); idx ++)
      delete tempPar_[idx];

   tempPar_.resize (theValue + 1);

   for (idx = 1; idx <= nTempPars (); idx ++)
      tempPar_[idx] = new WitString;
   }

//------------------------------------------------------------------------------

void WitGlobalComp::checkTempParIndex (int i) const
   {
   stronglyAssert (i >= 1);
   stronglyAssert (i <= nTempPars ());
   }

//------------------------------------------------------------------------------

void WitGlobalComp::writeDataID ()
   {
   myDataWriter ()->writeFirstKeyWord ("set");
   myDataWriter ()->writeKeyWord      ("problem");
   }

//------------------------------------------------------------------------------

void WitGlobalComp::writeDataAttrs ()
   {
   WitComponent::writeDataAttrs ();

   myDataWriter ()->writeString (
        "title",
         title (),
      defTitle ());

   myDataWriter ()->writeInt (
        "nPeriods",
         nPeriods (),
      defNPeriods ());

   myDataWriter ()->writeBool (
        "independentOffsets",
         independentOffsets (),
      defIndependentOffsets ());

   myDataWriter ()->writeBool (
        "execEmptyBom",
         execEmptyBom (),
      defExecEmptyBom ());

   myDataWriter ()->writeInt (
        "hashTableSize",
         hashTableSize (),
      defHashTableSize ());

   myDataWriter ()->writeBool (
        "roundReqVols",
         roundReqVols (),
      defRoundReqVols ());

   myDataWriter ()->writeInt (
        "outputPrecision",
         outputPrecision (),
      defOutputPrecision ());

   myDataWriter ()->writeBool (
        "computeCriticalList",
         computeCriticalList (),
      defComputeCriticalList ());

   myDataWriter ()->writeBool (
        "pgdCritListMode",
         pgdCritListMode (),
      defPgdCritListMode ());

   myDataWriter ()->writeBool (
        "wit34Compatible",
         wit34Compatible (),
      defWit34Compatible ());

   myDataWriter ()->writeBool (
        "useFocusHorizons",
         useFocusHorizons (),
      defUseFocusHorizons ());

   myDataWriter ()->writeBool (
        "localBuildAhead",
         localBuildAhead (),
      defLocalBuildAhead ());

   myDataWriter ()->writeBool (
        "multiExec",
         multiExec (),
      defMultiExec ());

   myDataWriter ()->writeBool (
        "twoWayMultiExec",
         twoWayMultiExec (),
      defTwoWayMultiExec ());

   myDataWriter ()->writeBool (
        "localMultiExec",
         localMultiExec (),
      defLocalMultiExec ());

   myDataWriter ()->writeInt (
        "equitability",
         equitability (),
      defEquitability ());

   myDataWriter ()->writeBool (
        "forcedMultiEq",
         forcedMultiEq (),
      defForcedMultiEq ());

   myDataWriter ()->writeBool (
        "autoPriority",
         autoPriority (),
      defAutoPriority ());

   myDataWriter ()->writeBool (
        "skipFailures",
         skipFailures (),
      defSkipFailures ());

   myDataWriter ()->writeBool (
        "multiRoute",
         multiRoute (),
      defMultiRoute ());

   myDataWriter ()->writeBool (
        "truncOffsets",
         truncOffsets (),
      defTruncOffsets ());

   myDataWriter ()->writeDouble (
        "lotSizeTol",
         lotSizeTol (),
      defLotSizeTol ());

   myDataWriter ()->writeDouble (
        "expCutoff",
         expCutoff (),
      defExpCutoff ());

   myDataWriter ()->writeBool (
        "penExec",
         penExec (),
      defPenExec ());

   myDataWriter ()->writeBool (
        "tieBreakPropRt",
         tieBreakPropRt (),
      defTieBreakPropRt ());

   myDataWriter ()->writeBool (
        "stockRealloc",
         stockRealloc (),
      defStockRealloc ());

   myDataWriter ()->writeBool (
        "stockReallocation",
         stockReallocation (),
      defStockReallocation ());

   myDataWriter ()->writeBool (
        "srSelSplit",
         srSelSplit (),
      defSrSelSplit ());

   myDataWriter ()->writeBool (
        "respectStockSLBs",
         respectStockSLBs (),
      defRespectStockSLBs ());

   myDataWriter ()->writeBool (
        "prefHighStockSLBs",
         prefHighStockSLBs (),
      defPrefHighStockSLBs ());

   myDataWriter ()->writeBool (
        "perfPegging",
         perfPegging (),
      defPerfPegging ());

   myDataWriter ()->writeBool (
        "selSplit",
         selSplit (),
      defSelSplit ());

   myDataWriter ()->writeBool (
        "nonMrSelSplit",
         nonMrSelSplit (),
      defNonMrSelSplit ());

   myDataWriter ()->writeBool (
        "selectionRecovery",
         selectionRecovery (),
      defSelectionRecovery ());

   myDataWriter ()->writeBool (
        "userHeurStart",
         userHeurStart (),
      defUserHeurStart ());

   myDataWriter ()->writeBool (
        "modHeurAlloc",
         modHeurAlloc (),
      defModHeurAlloc ());

   myDataWriter ()->writeBool (
        "pipSeqFromHeur",
         pipSeqFromHeur (),
      defPipSeqFromHeur ());

   myDataWriter ()->writeBool (
        "newPipPggOrder",
         newPipPggOrder (),
      defNewPipPggOrder ());

   myDataWriter ()->writeBool (
        "highPrecisionWD",
         highPrecisionWD (),
      defHighPrecisionWD ());

   myDataWriter ()->writeBool (
        "nstnResidual",
         nstnResidual (),
      defNstnResidual ());

   myDataWriter ()->writeBool (
        "minimalExcess",
         minimalExcess (),
      defMinimalExcess ());
   }

//------------------------------------------------------------------------------

void WitGlobalComp::copyAttrsFrom (WitGlobalComp * theGlobalComp)
   {
   WitComponent::copyAttrsFrom (theGlobalComp);

   title_               = theGlobalComp->title_;
   nPeriods_            = theGlobalComp->nPeriods_;
   independentOffsets_  = theGlobalComp->independentOffsets_;
   execEmptyBom_        = theGlobalComp->execEmptyBom_;
   hashTableSize_       = theGlobalComp->hashTableSize_;
   roundReqVols_        = theGlobalComp->roundReqVols_;
   outputPrecision_     = theGlobalComp->outputPrecision_;
   computeCriticalList_ = theGlobalComp->computeCriticalList_;
   wit34Allowed_        = theGlobalComp->wit34Allowed_;
   localBuildAhead_     = theGlobalComp->localBuildAhead_;
   multiExec_           = theGlobalComp->multiExec_;
   twoWayMultiExec_     = theGlobalComp->twoWayMultiExec_;
   localMultiExec_      = theGlobalComp->localMultiExec_;
   equitability_        = theGlobalComp->equitability_;
   forcedMultiEq_       = theGlobalComp->forcedMultiEq_;
   autoPriority_        = theGlobalComp->autoPriority_;
   skipFailures_        = theGlobalComp->skipFailures_;
   multiRoute_          = theGlobalComp->multiRoute_;
   truncOffsets_        = theGlobalComp->truncOffsets_;
   lotSizeTol_          = theGlobalComp->lotSizeTol_;
   expCutoff_           = theGlobalComp->expCutoff_;
   penExec_             = theGlobalComp->penExec_;
   tieBreakPropRt_      = theGlobalComp->tieBreakPropRt_;
   stockRealloc_        = theGlobalComp->stockRealloc_;
   stockReallocation_   = theGlobalComp->stockReallocation_;
   srSelSplit_          = theGlobalComp->srSelSplit_;
   respectStockSLBs_    = theGlobalComp->respectStockSLBs_;
   prefHighStockSLBs_   = theGlobalComp->prefHighStockSLBs_;
   selSplit_            = theGlobalComp->selSplit_;
   nonMrSelSplit_       = theGlobalComp->nonMrSelSplit_;
   selectionRecovery_   = theGlobalComp->selectionRecovery_;
   userHeurStart_       = theGlobalComp->userHeurStart_;
   modHeurAlloc_        = theGlobalComp->modHeurAlloc_;
   pipSeqFromHeur_      = theGlobalComp->pipSeqFromHeur_;
   newPipPggOrder_      = theGlobalComp->newPipPggOrder_;
   highPrecisionWD_     = theGlobalComp->highPrecisionWD_;
   nstnResidual_        = theGlobalComp->nstnResidual_;
   minimalExcess_       = theGlobalComp->minimalExcess_;

   setPgdCritListMode    (theGlobalComp->pgdCritListMode_);
   setUseFocusHorizons   (theGlobalComp->useFocusHorizons_);
   setPerfPegging        (theGlobalComp->perfPegging_);

   setWit34Compatible (theGlobalComp->wit34Compatible_);

   myProblem ()->
      myPipMgr ()->
         copyShipSeq (theGlobalComp->myProblem ()->myPipMgr ());

   myProblem ()->updateNPeriods ();
   }
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d37 1
a37 1
WitComponent         (theCompMgr),
d39 66
a104 66
title_               (defTitle               ()),
nPeriods_            (defNPeriods            ()),
independentOffsets_  (defIndependentOffsets  ()),
execEmptyBom_        (defExecEmptyBom        ()),
hashTableSize_       (defHashTableSize       ()),
roundReqVols_        (defRoundReqVols        ()),
outputPrecision_     (defOutputPrecision     ()),
computeCriticalList_ (defComputeCriticalList ()),
pgdCritListMode_     (defPgdCritListMode     ()),
wit34Compatible_     (defWit34Compatible     ()),
wit34Allowed_        (defWit34Allowed        ()),
useFocusHorizons_    (defUseFocusHorizons    ()),
localBuildAhead_     (defLocalBuildAhead     ()),
multiExec_           (defMultiExec           ()),
twoWayMultiExec_     (defTwoWayMultiExec     ()),
localMultiExec_      (defLocalMultiExec      ()),
equitability_        (defEquitability        ()),
forcedMultiEq_       (defForcedMultiEq       ()),
autoPriority_        (defAutoPriority        ()),
skipFailures_        (defSkipFailures        ()),
multiRoute_          (defMultiRoute          ()),
truncOffsets_        (defTruncOffsets        ()),
lotSizeTol_          (defLotSizeTol          ()),
expCutoff_           (defExpCutoff           ()),
penExec_             (defPenExec             ()),
tieBreakPropRt_      (defTieBreakPropRt      ()),
stockRealloc_        (defStockRealloc        ()),
stockReallocation_   (defStockReallocation   ()),
srSelSplit_          (defSrSelSplit          ()),
respectStockSLBs_    (defRespectStockSLBs    ()),
prefHighStockSLBs_   (defPrefHighStockSLBs   ()),
perfPegging_         (defPerfPegging         ()),
selSplit_            (defSelSplit            ()),
nonMrSelSplit_       (defNonMrSelSplit       ()),
selectionRecovery_   (defSelectionRecovery   ()),
userHeurStart_       (defUserHeurStart       ()),
modHeurAlloc_        (defModHeurAlloc        ()),
pipSeqFromHeur_      (defPipSeqFromHeur      ()),
newPipPggOrder_      (defNewPipPggOrder      ()),
highPrecisionWD_     (defHighPrecisionWD     ()),
nstnResidual_        (defNstnResidual        ()),
minimalExcess_       (defMinimalExcess       ()),

readDataMsgs_        (false),
printIncAlloc_       (false),
printEqAlloc_        (false),
selPrintLevel_       (0),
twmeByDemand_        (false),
splitTol_            (1.0),
splitRes_            (1.0),
splitItrUB_          (20),
inputPauses_         (false),
prtPipMaxRatio_      (false),
printDebug_          (false),
printExcessVol_      (false),
tempPar_             (* new WitPtrVec <WitString>),

lotSizesExist_       (false),
revCritList_         (myProblem ()),
pgdCritList_         (),
feasible_            (false)
{
// The following statement normally sets nTempPars to 1, but it can be
// altered to a larger number for testing purposes:
//
setNTempPars (1);
d106 2
a107 2
myCompMgr ()->insert (this);
}
d112 2
a113 2
{
clearPgdCritList ();
d115 1
a115 1
setNTempPars (0);
d117 2
a118 2
delete & tempPar_;
}
d123 2
a124 2
{
checkTempParIndex (index);
d126 2
a127 2
return tempPar_.myElemAt (index);
}
d132 3
a134 3
{
return tempPar_.length () - 1;
}
d141 2
a142 2
{
witAssert (theValue != NULL);
d144 1
a144 1
prepSetNonUnpostAttr ();
d146 2
a147 2
title_ = theValue;
}
d152 2
a153 2
{
witAssert (myCompMgr ()->nNodes () == 0);
d155 1
a155 1
witAssert (theValue >= 1);
d157 1
a157 1
prepSetUnpreAttr ();
d159 1
a159 1
nPeriods_ = theValue;
d161 2
a162 2
myProblem ()->updateNPeriods ();
}
d167 2
a168 2
{
witAssert (myCompMgr ()->nNodes () == 0);
d170 1
a170 1
prepSetUnpreAttr ();
d172 2
a173 2
independentOffsets_ = theValue;
}
d178 2
a179 2
{
prepSetUnpreAttr ();
d181 2
a182 2
execEmptyBom_ = theValue;
}
d187 2
a188 2
{
witAssert (theValue >= 0);
d190 1
a190 1
prepSetNonUnpostAttr ();
d192 2
a193 2
hashTableSize_ = theValue;
}
d198 2
a199 2
{
prepSetUnpostAttr ();
d201 2
a202 2
roundReqVols_ = theValue;
}
d207 2
a208 2
{
witAssert (theValue >= 0);
d210 1
a210 1
prepSetNonUnpostAttr ();
d212 2
a213 2
outputPrecision_ = theValue;
}
d218 2
a219 2
{
prepSetUnpostAttr ();
d221 2
a222 2
computeCriticalList_ = theValue;
}
d227 4
a230 4
{
if (pgdCritListMode_)
if (not theValue)
clearPgdCritList ();
d232 1
a232 1
prepSetUnpostAttr ();
d234 2
a235 2
pgdCritListMode_ = theValue;
}
d240 2
a241 2
{
WitOperation * theOpn;
d243 1
a243 1
prepSetUnpreAttr ();
d245 2
a246 2
if (myCompMgr ()->nOperations () > 0)
myMsgFac () ("setWit34CompatibleCpuWmsg");
d248 2
a249 2
forEachOperation (theOpn, myProblem ())
theOpn->setWit34Compatible (theValue);
d251 2
a252 2
wit34Compatible_ = theValue;
}
d257 2
a258 2
{
prepSetUnpreAttr ();
d260 2
a261 2
wit34Allowed_ = theValue;
}
d266 2
a267 2
{
prepSetNonUnpostAttr ();
d269 1
a269 1
myProblem ()->myFSS ()->uncompute ();
d271 2
a272 2
useFocusHorizons_ = theValue;
}
d277 2
a278 2
{
prepSetUnpostAttr ();
d280 2
a281 2
localBuildAhead_ = theValue;
}
d286 3
a288 3
{
if (theValue)
setLocalMultiExec  (false);
d290 2
a291 2
if (not theValue)
setTwoWayMultiExec (false);
d293 1
a293 1
prepSetUnpreAttr ();
d295 2
a296 2
multiExec_ = theValue;
}
d301 3
a303 3
{
if (theValue)
setMultiExec (true);
d305 1
a305 1
prepSetUnpreAttr ();
d307 2
a308 2
twoWayMultiExec_ = theValue;
}
d313 3
a315 3
{
if (theValue)
setMultiExec (false);
d317 1
a317 1
prepSetUnpreAttr ();
d319 2
a320 2
localMultiExec_ = theValue;
}
d325 3
a327 3
{
witAssert (theValue >=   1);
witAssert (theValue <= 100);
d329 1
a329 1
prepSetUnpostAttr ();
d331 2
a332 2
equitability_ = theValue;
}
d337 2
a338 2
{
prepSetUnpostAttr ();
d340 2
a341 2
forcedMultiEq_ = theValue;
}
d346 2
a347 2
{
prepSetUnpostAttr ();
d349 2
a350 2
autoPriority_ = theValue;
}
d355 2
a356 2
{
prepSetUnpostAttr ();
d358 2
a359 2
skipFailures_ = theValue;
}
d364 2
a365 2
{
prepSetUnpreAttr ();
d367 2
a368 2
multiRoute_ = theValue;
}
d373 2
a374 2
{
prepSetUnpreAttr ();
d376 2
a377 2
truncOffsets_ = theValue;
}
d382 2
a383 2
{
witAssert (theValue >= 0.0);
d385 1
a385 1
prepSetUnpostAttr ();
d387 2
a388 2
lotSizeTol_ = theValue;
}
d393 2
a394 2
{
witAssert (theValue > 0.999E-6);
d396 1
a396 1
prepSetUnpreAttr ();
d398 2
a399 2
expCutoff_ = theValue;
}
d404 2
a405 2
{
prepSetUnpostAttr ();
d407 2
a408 2
penExec_ = theValue;
}
d413 2
a414 2
{
prepSetUnpostAttr ();
d416 2
a417 2
tieBreakPropRt_ = theValue;
}
d422 3
a424 3
{
if (theValue)
witAssert (not stockReallocation_);
d426 1
a426 1
prepSetUnpostAttr ();
d428 2
a429 2
stockRealloc_ = theValue;
}
d434 3
a436 3
{
if (theValue)
witAssert (not stockRealloc_);
d438 1
a438 1
prepSetUnpostAttr ();
d440 2
a441 2
stockReallocation_ = theValue;
}
d446 2
a447 2
{
prepSetUnpostAttr ();
d449 2
a450 2
srSelSplit_ = theValue;
}
d455 2
a456 2
{
prepSetUnpostAttr ();
d458 2
a459 2
respectStockSLBs_ = theValue;
}
d464 2
a465 2
{
prepSetUnpostAttr ();
d467 2
a468 2
prefHighStockSLBs_ = theValue;
}
d473 2
a474 2
{
prepSetUnpostAttr ();
d476 2
a477 2
if (perfPegging_ == theValue)
return;
d479 1
a479 1
perfPegging_ = theValue;
d481 5
a485 5
if (theValue)
myProblem ()->myHeurAllMgr ()->setUpPegging ();
else
myProblem ()->myHeurAllMgr ()->shutDownPegging ();
}
d490 2
a491 2
{
prepSetUnpostAttr ();
d493 2
a494 2
if (theValue)
nonMrSelSplit_ = false;
d496 2
a497 2
selSplit_ = theValue;
}
d502 2
a503 2
{
prepSetUnpostAttr ();
d505 2
a506 2
if (theValue)
selSplit_ = false;
d508 2
a509 2
nonMrSelSplit_ = theValue;
}
d514 2
a515 2
{
prepSetUnpostAttr ();
d517 2
a518 2
selectionRecovery_ = theValue;
}
d523 2
a524 2
{
prepSetUnpostAttr ();
d526 2
a527 2
userHeurStart_ = theValue;
}
d532 2
a533 2
{
prepSetUnpostAttr ();
d535 2
a536 2
modHeurAlloc_ = theValue;
}
d541 2
a542 2
{
prepSetUnpostAttr ();
d544 2
a545 2
pipSeqFromHeur_ = theValue;
}
d550 2
a551 2
{
prepSetNonUnpostAttr ();
d553 1
a553 1
myProblem ()->myPipMgr ()->clearPegging ();
d555 2
a556 2
newPipPggOrder_ = theValue;
}
d561 2
a562 2
{
prepSetUnpostAttr ();
d564 2
a565 2
highPrecisionWD_ = theValue;
}
d570 2
a571 2
{
prepSetUnpostAttr ();
d573 2
a574 2
nstnResidual_ = theValue;
}
d579 2
a580 2
{
prepSetUnpostAttr ();
d582 2
a583 2
minimalExcess_ = theValue;
}
d590 3
a592 3
{
readDataMsgs_ = theValue;
}
d597 3
a599 3
{
printIncAlloc_ = theValue;
}
d604 3
a606 3
{
printEqAlloc_ = theValue;
}
d611 3
a613 3
{
selPrintLevel_ = theValue;
}
d618 3
a620 3
{
twmeByDemand_ = theValue;
}
d625 3
a627 3
{
splitTol_ = theValue;
}
d632 3
a634 3
{
splitRes_ = theValue;
}
d639 3
a641 3
{
splitItrUB_ = theValue;
}
d646 3
a648 3
{
inputPauses_ = theValue;
}
d653 3
a655 3
{
prtPipMaxRatio_ = theValue;
}
d660 3
a662 3
{
printDebug_ = theValue;
}
d667 3
a669 3
{
printExcessVol_ = theValue;
}
d674 2
a675 2
{
checkTempParIndex (index);
d677 2
a678 2
tempPar_.myElemAt (index) = theValue;
}
d683 2
a684 2
{
witAssert (myPreprocessor ()->preprocessing ());
d686 2
a687 2
lotSizesExist_ = theValue;
}
d692 2
a693 2
{
witAssert (myPostprocessor ()->postprocessing ());
d695 2
a696 2
feasible_ = theValue;
}
d701 3
a703 3
{
return (myCompMgr ()->myGlobalComp () == this);
}
d708 3
a710 3
{
theCompMgr->myGlobalComp ()->copyAttrsFrom (this);
}
d715 3
a717 3
{
myCompMgr ()->recountGlobalComp (this);
}
d722 3
a724 3
{
lotSizesExist_ = false;
}
d729 2
a730 2
{
witAssert (myDetOptImpMgr ()->clearingSoln ());
d732 2
a733 2
revCritList_.clear ();
}
d738 2
a739 2
{
WitComponent::clearStochSoln ();
d741 2
a742 2
feasible_ = false;
}
d747 30
a776 30
{
myMsgFac () ("globalComp1DdMsg",
multiExecNeeded (),
twoWayMultiExec (),
equitability    (),
forcedMultiEq   (),
userHeurStart   (),
modHeurAlloc    (),
autoPriority    (),
skipFailures    (),
multiRoute      (),
penExec         (),
tieBreakPropRt  ());

myMsgFac () ("globalComp2DdMsg",
stockReallocation (),
selSplit          (),
selectionRecovery (),
respectStockSLBs  (),
prefHighStockSLBs (),
perfPegging       (),
pipSeqFromHeur    (),
newPipPggOrder    (),
truncOffsets      (),
highPrecisionWD   (),
nstnResidual      (),
minimalExcess     (),
lotSizeTol        (),
expCutoff         ());
}
d781 3
a783 3
{
return (multiExec_ or localMultiExec_);
}
d788 3
a790 3
{
feasible_ = false;
}
d795 2
a796 2
{
witAssert (myHeurAllMgr ()->updatingSoln ());
d798 2
a799 2
revCritList_.clear ();
}
d804 4
a807 4
WitPart * thePart,
WitPeriod thePer)
{
witAssert (myHeurAllMgr ()->updatingSoln ());
d809 2
a810 2
revCritList_.push (thePart, thePer);
}
d815 2
a816 2
{
witAssert (myDetOptImpMgr ()->uploadingSoln ());
d818 2
a819 2
revCritList_.takeContentsFrom (thePartPerStack);
}
d824 2
a825 2
{
WitPclEl * thePclEl;
d827 1
a827 1
stronglyAssert (DEVELOPMENT);
d829 19
a847 19
fprintf (solnFile (),
"\n"
"Pegged Critical List:\n"
"\n"
"---------------------------\n"
"Crit  Crit   Dem  Dem  Ship\n"
"Part   Per  Part        Per\n"
"---------------------------\n"
);

forEachEl (thePclEl, pgdCritList_)
fprintf (solnFile (),
"%4s   %3d    %2s  %3s   %3d\n",
thePclEl->critPart ()->partName ()        .myCstring (),
thePclEl->critPer (),
thePclEl->myDemand ()->demandedPartName ().myCstring (),
thePclEl->myDemand ()->demandName ()      .myCstring (),
thePclEl->myShipPer ());
}
d852 4
a855 4
{
while (not pgdCritList_.isEmpty ())
delete pgdCritList_.get ();
}
d860 2
a861 2
{
witAssert (myHeurAllMgr ()->updatingSoln ());
d863 2
a864 2
pgdCritList_.append (thePclEl);
}
d869 2
a870 2
{
checkTempParIndex (index);
d872 2
a873 2
return (tempPar (index) != "");
}
d878 2
a879 2
{
checkTempParIndex (index);
d881 2
a882 2
if (tempPar (index) == "yes")
return true;
d884 2
a885 2
if (tempPar (index) == "no")
return false;
d887 1
a887 1
myMsgFac () ("invalidBoolTempParSmsg", index, tempPar (index));
d889 2
a890 2
return false;
}
d895 2
a896 2
{
int theValue;
d898 1
a898 1
checkTempParIndex (index);
d900 2
a901 2
if (sscanf (tempPar (index).myCstring (), "%d", & theValue) != 1)
myMsgFac () ("invalidIntTempParSmsg", index, tempPar (index));
d903 2
a904 2
return theValue;
}
d909 2
a910 2
{
double theValue;
d912 1
a912 1
checkTempParIndex (index);
d914 2
a915 2
if (sscanf (tempPar (index).myCstring (), "%lg", & theValue) != 1)
myMsgFac () ("invalidDoubleTempParSmsg", index, tempPar (index));
d917 2
a918 2
return theValue;
}
d923 2
a924 2
{
int idx;
d926 2
a927 2
for (idx = 1; idx <= nTempPars (); idx ++)
delete tempPar_[idx];
d929 1
a929 1
tempPar_.resize (theValue + 1);
d931 3
a933 3
for (idx = 1; idx <= nTempPars (); idx ++)
tempPar_[idx] = new WitString;
}
d938 4
a941 4
{
stronglyAssert (i >= 1);
stronglyAssert (i <= nTempPars ());
}
d946 4
a949 4
{
myDataWriter ()->writeFirstKeyWord ("set");
myDataWriter ()->writeKeyWord      ("problem");
}
d954 2
a955 2
{
WitComponent::writeDataAttrs ();
d957 205
a1161 205
myDataWriter ()->writeString (
"title",
title (),
defTitle ());

myDataWriter ()->writeInt (
"nPeriods",
nPeriods (),
defNPeriods ());

myDataWriter ()->writeBool (
"independentOffsets",
independentOffsets (),
defIndependentOffsets ());

myDataWriter ()->writeBool (
"execEmptyBom",
execEmptyBom (),
defExecEmptyBom ());

myDataWriter ()->writeInt (
"hashTableSize",
hashTableSize (),
defHashTableSize ());

myDataWriter ()->writeBool (
"roundReqVols",
roundReqVols (),
defRoundReqVols ());

myDataWriter ()->writeInt (
"outputPrecision",
outputPrecision (),
defOutputPrecision ());

myDataWriter ()->writeBool (
"computeCriticalList",
computeCriticalList (),
defComputeCriticalList ());

myDataWriter ()->writeBool (
"pgdCritListMode",
pgdCritListMode (),
defPgdCritListMode ());

myDataWriter ()->writeBool (
"wit34Compatible",
wit34Compatible (),
defWit34Compatible ());

myDataWriter ()->writeBool (
"useFocusHorizons",
useFocusHorizons (),
defUseFocusHorizons ());

myDataWriter ()->writeBool (
"localBuildAhead",
localBuildAhead (),
defLocalBuildAhead ());

myDataWriter ()->writeBool (
"multiExec",
multiExec (),
defMultiExec ());

myDataWriter ()->writeBool (
"twoWayMultiExec",
twoWayMultiExec (),
defTwoWayMultiExec ());

myDataWriter ()->writeBool (
"localMultiExec",
localMultiExec (),
defLocalMultiExec ());

myDataWriter ()->writeInt (
"equitability",
equitability (),
defEquitability ());

myDataWriter ()->writeBool (
"forcedMultiEq",
forcedMultiEq (),
defForcedMultiEq ());

myDataWriter ()->writeBool (
"autoPriority",
autoPriority (),
defAutoPriority ());

myDataWriter ()->writeBool (
"skipFailures",
skipFailures (),
defSkipFailures ());

myDataWriter ()->writeBool (
"multiRoute",
multiRoute (),
defMultiRoute ());

myDataWriter ()->writeBool (
"truncOffsets",
truncOffsets (),
defTruncOffsets ());

myDataWriter ()->writeDouble (
"lotSizeTol",
lotSizeTol (),
defLotSizeTol ());

myDataWriter ()->writeDouble (
"expCutoff",
expCutoff (),
defExpCutoff ());

myDataWriter ()->writeBool (
"penExec",
penExec (),
defPenExec ());

myDataWriter ()->writeBool (
"tieBreakPropRt",
tieBreakPropRt (),
defTieBreakPropRt ());

myDataWriter ()->writeBool (
"stockRealloc",
stockRealloc (),
defStockRealloc ());

myDataWriter ()->writeBool (
"stockReallocation",
stockReallocation (),
defStockReallocation ());

myDataWriter ()->writeBool (
"srSelSplit",
srSelSplit (),
defSrSelSplit ());

myDataWriter ()->writeBool (
"respectStockSLBs",
respectStockSLBs (),
defRespectStockSLBs ());

myDataWriter ()->writeBool (
"prefHighStockSLBs",
prefHighStockSLBs (),
defPrefHighStockSLBs ());

myDataWriter ()->writeBool (
"perfPegging",
perfPegging (),
defPerfPegging ());

myDataWriter ()->writeBool (
"selSplit",
selSplit (),
defSelSplit ());

myDataWriter ()->writeBool (
"nonMrSelSplit",
nonMrSelSplit (),
defNonMrSelSplit ());

myDataWriter ()->writeBool (
"selectionRecovery",
selectionRecovery (),
defSelectionRecovery ());

myDataWriter ()->writeBool (
"userHeurStart",
userHeurStart (),
defUserHeurStart ());

myDataWriter ()->writeBool (
"modHeurAlloc",
modHeurAlloc (),
defModHeurAlloc ());

myDataWriter ()->writeBool (
"pipSeqFromHeur",
pipSeqFromHeur (),
defPipSeqFromHeur ());

myDataWriter ()->writeBool (
"newPipPggOrder",
newPipPggOrder (),
defNewPipPggOrder ());

myDataWriter ()->writeBool (
"highPrecisionWD",
highPrecisionWD (),
defHighPrecisionWD ());

myDataWriter ()->writeBool (
"nstnResidual",
nstnResidual (),
defNstnResidual ());

myDataWriter ()->writeBool (
"minimalExcess",
minimalExcess (),
defMinimalExcess ());
}
d1166 2
a1167 2
{
WitComponent::copyAttrsFrom (theGlobalComp);
d1169 48
a1216 48
title_               = theGlobalComp->title_;
nPeriods_            = theGlobalComp->nPeriods_;
independentOffsets_  = theGlobalComp->independentOffsets_;
execEmptyBom_        = theGlobalComp->execEmptyBom_;
hashTableSize_       = theGlobalComp->hashTableSize_;
roundReqVols_        = theGlobalComp->roundReqVols_;
outputPrecision_     = theGlobalComp->outputPrecision_;
computeCriticalList_ = theGlobalComp->computeCriticalList_;
wit34Allowed_        = theGlobalComp->wit34Allowed_;
localBuildAhead_     = theGlobalComp->localBuildAhead_;
multiExec_           = theGlobalComp->multiExec_;
twoWayMultiExec_     = theGlobalComp->twoWayMultiExec_;
localMultiExec_      = theGlobalComp->localMultiExec_;
equitability_        = theGlobalComp->equitability_;
forcedMultiEq_       = theGlobalComp->forcedMultiEq_;
autoPriority_        = theGlobalComp->autoPriority_;
skipFailures_        = theGlobalComp->skipFailures_;
multiRoute_          = theGlobalComp->multiRoute_;
truncOffsets_        = theGlobalComp->truncOffsets_;
lotSizeTol_          = theGlobalComp->lotSizeTol_;
expCutoff_           = theGlobalComp->expCutoff_;
penExec_             = theGlobalComp->penExec_;
tieBreakPropRt_      = theGlobalComp->tieBreakPropRt_;
stockRealloc_        = theGlobalComp->stockRealloc_;
stockReallocation_   = theGlobalComp->stockReallocation_;
srSelSplit_          = theGlobalComp->srSelSplit_;
respectStockSLBs_    = theGlobalComp->respectStockSLBs_;
prefHighStockSLBs_   = theGlobalComp->prefHighStockSLBs_;
selSplit_            = theGlobalComp->selSplit_;
nonMrSelSplit_       = theGlobalComp->nonMrSelSplit_;
selectionRecovery_   = theGlobalComp->selectionRecovery_;
userHeurStart_       = theGlobalComp->userHeurStart_;
modHeurAlloc_        = theGlobalComp->modHeurAlloc_;
pipSeqFromHeur_      = theGlobalComp->pipSeqFromHeur_;
newPipPggOrder_      = theGlobalComp->newPipPggOrder_;
highPrecisionWD_     = theGlobalComp->highPrecisionWD_;
nstnResidual_        = theGlobalComp->nstnResidual_;
minimalExcess_       = theGlobalComp->minimalExcess_;

setPgdCritListMode    (theGlobalComp->pgdCritListMode_);
setUseFocusHorizons   (theGlobalComp->useFocusHorizons_);
setPerfPegging        (theGlobalComp->perfPegging_);

setWit34Compatible (theGlobalComp->wit34Compatible_);

myProblem ()->
myPipMgr ()->
copyShipSeq (theGlobalComp->myProblem ()->myPipMgr ());
d1218 2
a1219 2
myProblem ()->updateNPeriods ();
}
@


1.21
log
@CPLEX
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d37 1
a37 1
      WitComponent         (theCompMgr),
d39 66
a104 66
      title_               (defTitle               ()),
      nPeriods_            (defNPeriods            ()),
      independentOffsets_  (defIndependentOffsets  ()),
      execEmptyBom_        (defExecEmptyBom        ()),
      hashTableSize_       (defHashTableSize       ()),
      roundReqVols_        (defRoundReqVols        ()),
      outputPrecision_     (defOutputPrecision     ()),
      computeCriticalList_ (defComputeCriticalList ()),
      pgdCritListMode_     (defPgdCritListMode     ()),
      wit34Compatible_     (defWit34Compatible     ()),
      wit34Allowed_        (defWit34Allowed        ()),
      useFocusHorizons_    (defUseFocusHorizons    ()),
      localBuildAhead_     (defLocalBuildAhead     ()),
      multiExec_           (defMultiExec           ()),
      twoWayMultiExec_     (defTwoWayMultiExec     ()),
      localMultiExec_      (defLocalMultiExec      ()),
      equitability_        (defEquitability        ()),
      forcedMultiEq_       (defForcedMultiEq       ()),
      autoPriority_        (defAutoPriority        ()),
      skipFailures_        (defSkipFailures        ()),
      multiRoute_          (defMultiRoute          ()),
      truncOffsets_        (defTruncOffsets        ()),
      lotSizeTol_          (defLotSizeTol          ()),
      expCutoff_           (defExpCutoff           ()),
      penExec_             (defPenExec             ()),
      tieBreakPropRt_      (defTieBreakPropRt      ()),
      stockRealloc_        (defStockRealloc        ()),
      stockReallocation_   (defStockReallocation   ()),
      srSelSplit_          (defSrSelSplit          ()),
      respectStockSLBs_    (defRespectStockSLBs    ()),
      prefHighStockSLBs_   (defPrefHighStockSLBs   ()),
      perfPegging_         (defPerfPegging         ()),
      selSplit_            (defSelSplit            ()),
      nonMrSelSplit_       (defNonMrSelSplit       ()),
      selectionRecovery_   (defSelectionRecovery   ()),
      userHeurStart_       (defUserHeurStart       ()),
      modHeurAlloc_        (defModHeurAlloc        ()),
      pipSeqFromHeur_      (defPipSeqFromHeur      ()),
      newPipPggOrder_      (defNewPipPggOrder      ()),
      highPrecisionWD_     (defHighPrecisionWD     ()),
      nstnResidual_        (defNstnResidual        ()),
      minimalExcess_       (defMinimalExcess       ()),

      readDataMsgs_        (false),
      printIncAlloc_       (false),
      printEqAlloc_        (false),
      selPrintLevel_       (0),
      twmeByDemand_        (false),
      splitTol_            (1.0),
      splitRes_            (1.0),
      splitItrUB_          (20),
      inputPauses_         (false),
      prtPipMaxRatio_      (false),
      printDebug_          (false),
      printExcessVol_      (false),
      tempPar_             (* new WitPtrVec <WitString>),

      lotSizesExist_       (false),
      revCritList_         (myProblem ()),
      pgdCritList_         (),
      feasible_            (false)
   {
      // The following statement normally sets nTempPars to 1, but it can be
      // altered to a larger number for testing purposes:
      //
   setNTempPars (1);
d106 2
a107 2
   myCompMgr ()->insert (this);
   }
d112 2
a113 2
   {
   clearPgdCritList ();
d115 1
a115 1
   setNTempPars (0);
d117 2
a118 2
   delete & tempPar_;
   }
d123 2
a124 2
   {
   checkTempParIndex (index);
d126 2
a127 2
   return tempPar_.myElemAt (index);
   }
d132 3
a134 3
   {
   return tempPar_.length () - 1;
   }
d141 2
a142 2
   {
   witAssert (theValue != NULL);
d144 1
a144 1
   prepSetNonUnpostAttr ();
d146 2
a147 2
   title_ = theValue;
   }
d152 2
a153 2
   {
   witAssert (myCompMgr ()->nNodes () == 0);
d155 1
a155 1
   witAssert (theValue >= 1);
d157 1
a157 1
   prepSetUnpreAttr ();
d159 1
a159 1
   nPeriods_ = theValue;
d161 2
a162 2
   myProblem ()->updateNPeriods ();
   }
d167 2
a168 2
   {
   witAssert (myCompMgr ()->nNodes () == 0);
d170 1
a170 1
   prepSetUnpreAttr ();
d172 2
a173 2
   independentOffsets_ = theValue;
   }
d178 2
a179 2
   {
   prepSetUnpreAttr ();
d181 2
a182 2
   execEmptyBom_ = theValue;
   }
d187 2
a188 2
   {
   witAssert (theValue >= 0);
d190 1
a190 1
   prepSetNonUnpostAttr ();
d192 2
a193 2
   hashTableSize_ = theValue;
   }
d198 2
a199 2
   {
   prepSetUnpostAttr ();
d201 2
a202 2
   roundReqVols_ = theValue;
   }
d207 2
a208 2
   {
   witAssert (theValue >= 0);
d210 1
a210 1
   prepSetNonUnpostAttr ();
d212 2
a213 2
   outputPrecision_ = theValue;
   }
d218 2
a219 2
   {
   prepSetUnpostAttr ();
d221 2
a222 2
   computeCriticalList_ = theValue;
   }
d227 4
a230 4
   {
   if (pgdCritListMode_)
      if (not theValue)
         clearPgdCritList ();
d232 1
a232 1
   prepSetUnpostAttr ();
d234 2
a235 2
   pgdCritListMode_ = theValue;
   }
d240 2
a241 2
   {
   WitOperation * theOpn;
d243 1
a243 1
   prepSetUnpreAttr ();
d245 2
a246 2
   if (myCompMgr ()->nOperations () > 0)
      myMsgFac () ("setWit34CompatibleCpuWmsg");
d248 2
a249 2
   forEachOperation (theOpn, myProblem ())
      theOpn->setWit34Compatible (theValue);
d251 2
a252 2
   wit34Compatible_ = theValue;
   }
d257 2
a258 2
   {
   prepSetUnpreAttr ();
d260 2
a261 2
   wit34Allowed_ = theValue;
   }
d266 2
a267 2
   {
   prepSetNonUnpostAttr ();
d269 1
a269 1
   myProblem ()->myFSS ()->uncompute ();
d271 2
a272 2
   useFocusHorizons_ = theValue;
   }
d277 2
a278 2
   {
   prepSetUnpostAttr ();
d280 2
a281 2
   localBuildAhead_ = theValue;
   }
d286 3
a288 3
   {
   if (theValue)
      setLocalMultiExec  (false);
d290 2
a291 2
   if (not theValue)
      setTwoWayMultiExec (false);
d293 1
a293 1
   prepSetUnpreAttr ();
d295 2
a296 2
   multiExec_ = theValue;
   }
d301 3
a303 3
   {
   if (theValue)
      setMultiExec (true);
d305 1
a305 1
   prepSetUnpreAttr ();
d307 2
a308 2
   twoWayMultiExec_ = theValue;
   }
d313 3
a315 3
   {
   if (theValue)
      setMultiExec (false);
d317 1
a317 1
   prepSetUnpreAttr ();
d319 2
a320 2
   localMultiExec_ = theValue;
   }
d325 3
a327 3
   {
   witAssert (theValue >=   1);
   witAssert (theValue <= 100);
d329 1
a329 1
   prepSetUnpostAttr ();
d331 2
a332 2
   equitability_ = theValue;
   }
d337 2
a338 2
   {
   prepSetUnpostAttr ();
d340 2
a341 2
   forcedMultiEq_ = theValue;
   }
d346 2
a347 2
   {
   prepSetUnpostAttr ();
d349 2
a350 2
   autoPriority_ = theValue;
   }
d355 2
a356 2
   {
   prepSetUnpostAttr ();
d358 2
a359 2
   skipFailures_ = theValue;
   }
d364 2
a365 2
   {
   prepSetUnpreAttr ();
d367 2
a368 2
   multiRoute_ = theValue;
   }
d373 2
a374 2
   {
   prepSetUnpreAttr ();
d376 2
a377 2
   truncOffsets_ = theValue;
   }
d382 2
a383 2
   {
   witAssert (theValue >= 0.0);
d385 1
a385 1
   prepSetUnpostAttr ();
d387 2
a388 2
   lotSizeTol_ = theValue;
   }
d393 2
a394 2
   {
   witAssert (theValue > 0.999E-6);
d396 1
a396 1
   prepSetUnpreAttr ();
d398 2
a399 2
   expCutoff_ = theValue;
   }
d404 2
a405 2
   {
   prepSetUnpostAttr ();
d407 2
a408 2
   penExec_ = theValue;
   }
d413 2
a414 2
   {
   prepSetUnpostAttr ();
d416 2
a417 2
   tieBreakPropRt_ = theValue;
   }
d422 3
a424 3
   {
   if (theValue)
      witAssert (not stockReallocation_);
d426 1
a426 1
   prepSetUnpostAttr ();
d428 2
a429 2
   stockRealloc_ = theValue;
   }
d434 3
a436 3
   {
   if (theValue)
      witAssert (not stockRealloc_);
d438 1
a438 1
   prepSetUnpostAttr ();
d440 2
a441 2
   stockReallocation_ = theValue;
   }
d446 2
a447 2
   {
   prepSetUnpostAttr ();
d449 2
a450 2
   srSelSplit_ = theValue;
   }
d455 2
a456 2
   {
   prepSetUnpostAttr ();
d458 2
a459 2
   respectStockSLBs_ = theValue;
   }
d464 2
a465 2
   {
   prepSetUnpostAttr ();
d467 2
a468 2
   prefHighStockSLBs_ = theValue;
   }
d473 2
a474 2
   {
   prepSetUnpostAttr ();
d476 2
a477 2
   if (perfPegging_ == theValue)
      return;
d479 1
a479 1
   perfPegging_ = theValue;
d481 5
a485 5
   if (theValue)
      myProblem ()->myHeurAllMgr ()->setUpPegging ();
   else
      myProblem ()->myHeurAllMgr ()->shutDownPegging ();
   }
d490 2
a491 2
   {
   prepSetUnpostAttr ();
d493 2
a494 2
   if (theValue)
      nonMrSelSplit_ = false;
d496 2
a497 2
   selSplit_ = theValue;
   }
d502 2
a503 2
   {
   prepSetUnpostAttr ();
d505 2
a506 2
   if (theValue)
      selSplit_ = false;
d508 2
a509 2
   nonMrSelSplit_ = theValue;
   }
d514 2
a515 2
   {
   prepSetUnpostAttr ();
d517 2
a518 2
   selectionRecovery_ = theValue;
   }
d523 2
a524 2
   {
   prepSetUnpostAttr ();
d526 2
a527 2
   userHeurStart_ = theValue;
   }
d532 2
a533 2
   {
   prepSetUnpostAttr ();
d535 2
a536 2
   modHeurAlloc_ = theValue;
   }
d541 2
a542 2
   {
   prepSetUnpostAttr ();
d544 2
a545 2
   pipSeqFromHeur_ = theValue;
   }
d550 2
a551 2
   {
   prepSetNonUnpostAttr ();
d553 1
a553 1
   myProblem ()->myPipMgr ()->clearPegging ();
d555 2
a556 2
   newPipPggOrder_ = theValue;
   }
d561 2
a562 2
   {
   prepSetUnpostAttr ();
d564 2
a565 2
   highPrecisionWD_ = theValue;
   }
d570 2
a571 2
   {
   prepSetUnpostAttr ();
d573 2
a574 2
   nstnResidual_ = theValue;
   }
d579 2
a580 2
   {
   prepSetUnpostAttr ();
d582 2
a583 2
   minimalExcess_ = theValue;
   }
d590 3
a592 3
   {
   readDataMsgs_ = theValue;
   }
d597 3
a599 3
   {
   printIncAlloc_ = theValue;
   }
d604 3
a606 3
   {
   printEqAlloc_ = theValue;
   }
d611 3
a613 3
   {
   selPrintLevel_ = theValue;
   }
d618 3
a620 3
   {
   twmeByDemand_ = theValue;
   }
d625 3
a627 3
   {
   splitTol_ = theValue;
   }
d632 3
a634 3
   {
   splitRes_ = theValue;
   }
d639 3
a641 3
   {
   splitItrUB_ = theValue;
   }
d646 3
a648 3
   {
   inputPauses_ = theValue;
   }
d653 3
a655 3
   {
   prtPipMaxRatio_ = theValue;
   }
d660 3
a662 3
   {
   printDebug_ = theValue;
   }
d667 3
a669 3
   {
   printExcessVol_ = theValue;
   }
d674 2
a675 2
   {
   checkTempParIndex (index);
d677 2
a678 2
   tempPar_.myElemAt (index) = theValue;
   }
d683 2
a684 2
   {
   witAssert (myPreprocessor ()->preprocessing ());
d686 2
a687 2
   lotSizesExist_ = theValue;
   }
d692 2
a693 2
   {
   witAssert (myPostprocessor ()->postprocessing ());
d695 2
a696 2
   feasible_ = theValue;
   }
d701 3
a703 3
   {
   return (myCompMgr ()->myGlobalComp () == this);
   }
d708 3
a710 3
   {
   theCompMgr->myGlobalComp ()->copyAttrsFrom (this);
   }
d715 3
a717 3
   {
   myCompMgr ()->recountGlobalComp (this);
   }
d722 3
a724 3
   {
   lotSizesExist_ = false;
   }
d729 2
a730 2
   {                              
   witAssert (myDetOptImpMgr ()->clearingSoln ());
d732 2
a733 2
   revCritList_.clear ();
   }
d738 2
a739 2
   {
   WitComponent::clearStochSoln ();
d741 2
a742 2
   feasible_ = false;
   }
d747 30
a776 30
   {
   myMsgFac () ("globalComp1DdMsg",
      multiExecNeeded (),
      twoWayMultiExec (),
      equitability    (),
      forcedMultiEq   (),
      userHeurStart   (),
      modHeurAlloc    (),
      autoPriority    (),
      skipFailures    (),
      multiRoute      (),
      penExec         (),
      tieBreakPropRt  ());

   myMsgFac () ("globalComp2DdMsg",
      stockReallocation (),
      selSplit          (),
      selectionRecovery (),
      respectStockSLBs  (),
      prefHighStockSLBs (),
      perfPegging       (),
      pipSeqFromHeur    (),
      newPipPggOrder    (),
      truncOffsets      (),
      highPrecisionWD   (),
      nstnResidual      (),
      minimalExcess     (),
      lotSizeTol        (),
      expCutoff         ());
   }
d781 3
a783 3
   {
   return (multiExec_ or localMultiExec_);
   }
d788 3
a790 3
   {
   feasible_ = false;
   }
d795 2
a796 2
   {
   witAssert (myHeurAllMgr ()->updatingSoln ());
d798 2
a799 2
   revCritList_.clear ();
   }
d804 4
a807 4
      WitPart * thePart,
      WitPeriod thePer)
   {
   witAssert (myHeurAllMgr ()->updatingSoln ());
d809 2
a810 2
   revCritList_.push (thePart, thePer);
   }
d815 2
a816 2
   {
   witAssert (myDetOptImpMgr ()->uploadingSoln ());
d818 2
a819 2
   revCritList_.takeContentsFrom (thePartPerStack);
   }
d824 2
a825 2
   {
   WitPclEl * thePclEl;
d827 1
a827 1
   stronglyAssert (DEVELOPMENT);
d829 19
a847 19
   fprintf (solnFile (),
      "\n"
      "Pegged Critical List:\n"
      "\n"
      "---------------------------\n"
      "Crit  Crit   Dem  Dem  Ship\n"
      "Part   Per  Part        Per\n"
      "---------------------------\n"
      );

   forEachEl (thePclEl, pgdCritList_)
      fprintf (solnFile (),
         "%4s   %3d    %2s  %3s   %3d\n",
         thePclEl->critPart ()->partName ()        .myCstring (),
         thePclEl->critPer (),
         thePclEl->myDemand ()->demandedPartName ().myCstring (),
         thePclEl->myDemand ()->demandName ()      .myCstring (),
         thePclEl->myShipPer ());
   }
d852 4
a855 4
   {
   while (not pgdCritList_.isEmpty ())
      delete pgdCritList_.get ();
   }
d860 2
a861 2
   {
   witAssert (myHeurAllMgr ()->updatingSoln ());
d863 2
a864 2
   pgdCritList_.append (thePclEl);
   }
d869 2
a870 2
   {
   checkTempParIndex (index);
d872 2
a873 2
   return (tempPar (index) != "");
   }
d878 2
a879 2
   {
   checkTempParIndex (index);
d881 2
a882 2
   if (tempPar (index) == "yes")
      return true;
d884 2
a885 2
   if (tempPar (index) == "no")
      return false;
d887 1
a887 1
   myMsgFac () ("invalidBoolTempParSmsg", index, tempPar (index));
d889 2
a890 2
   return false;
   }
d895 2
a896 2
   {
   int theValue;
d898 1
a898 1
   checkTempParIndex (index);
d900 2
a901 2
   if (sscanf (tempPar (index).myCstring (), "%d", & theValue) != 1)
      myMsgFac () ("invalidIntTempParSmsg", index, tempPar (index));
d903 2
a904 2
   return theValue;
   }
d909 2
a910 2
   {
   double theValue;
d912 1
a912 1
   checkTempParIndex (index);
d914 2
a915 2
   if (sscanf (tempPar (index).myCstring (), "%lg", & theValue) != 1)
      myMsgFac () ("invalidDoubleTempParSmsg", index, tempPar (index));
d917 2
a918 2
   return theValue;
   }
d923 2
a924 2
   {
   int idx;
d926 2
a927 2
   for (idx = 1; idx <= nTempPars (); idx ++)
      delete tempPar_[idx];
d929 1
a929 1
   tempPar_.resize (theValue + 1);
d931 3
a933 3
   for (idx = 1; idx <= nTempPars (); idx ++)
      tempPar_[idx] = new WitString;
   }
d938 4
a941 4
   {
   stronglyAssert (i >= 1);
   stronglyAssert (i <= nTempPars ());
   }
d946 4
a949 4
   {
   myDataWriter ()->writeFirstKeyWord ("set");
   myDataWriter ()->writeKeyWord      ("problem");
   }
d954 2
a955 2
   {
   WitComponent::writeDataAttrs ();
d957 205
a1161 205
   myDataWriter ()->writeString (
        "title",
         title (),
      defTitle ());

   myDataWriter ()->writeInt (
        "nPeriods",
         nPeriods (),
      defNPeriods ());

   myDataWriter ()->writeBool (
        "independentOffsets",
         independentOffsets (),
      defIndependentOffsets ());

   myDataWriter ()->writeBool (
        "execEmptyBom",
         execEmptyBom (),
      defExecEmptyBom ());

   myDataWriter ()->writeInt (
        "hashTableSize",
         hashTableSize (),
      defHashTableSize ());

   myDataWriter ()->writeBool (
        "roundReqVols",
         roundReqVols (),
      defRoundReqVols ());

   myDataWriter ()->writeInt (
        "outputPrecision",
         outputPrecision (),
      defOutputPrecision ());

   myDataWriter ()->writeBool (
        "computeCriticalList",
         computeCriticalList (),
      defComputeCriticalList ());

   myDataWriter ()->writeBool (
        "pgdCritListMode",
         pgdCritListMode (),
      defPgdCritListMode ());

   myDataWriter ()->writeBool (
        "wit34Compatible",
         wit34Compatible (),
      defWit34Compatible ());

   myDataWriter ()->writeBool (
        "useFocusHorizons",
         useFocusHorizons (),
      defUseFocusHorizons ());

   myDataWriter ()->writeBool (
        "localBuildAhead",
         localBuildAhead (),
      defLocalBuildAhead ());

   myDataWriter ()->writeBool (
        "multiExec",
         multiExec (),
      defMultiExec ());

   myDataWriter ()->writeBool (
        "twoWayMultiExec",
         twoWayMultiExec (),
      defTwoWayMultiExec ());

   myDataWriter ()->writeBool (
        "localMultiExec",
         localMultiExec (),
      defLocalMultiExec ());

   myDataWriter ()->writeInt (
        "equitability",
         equitability (),
      defEquitability ());

   myDataWriter ()->writeBool (
        "forcedMultiEq",
         forcedMultiEq (),
      defForcedMultiEq ());

   myDataWriter ()->writeBool (
        "autoPriority",
         autoPriority (),
      defAutoPriority ());

   myDataWriter ()->writeBool (
        "skipFailures",
         skipFailures (),
      defSkipFailures ());

   myDataWriter ()->writeBool (
        "multiRoute",
         multiRoute (),
      defMultiRoute ());

   myDataWriter ()->writeBool (
        "truncOffsets",
         truncOffsets (),
      defTruncOffsets ());

   myDataWriter ()->writeDouble (
        "lotSizeTol",
         lotSizeTol (),
      defLotSizeTol ());

   myDataWriter ()->writeDouble (
        "expCutoff",
         expCutoff (),
      defExpCutoff ());

   myDataWriter ()->writeBool (
        "penExec",
         penExec (),
      defPenExec ());

   myDataWriter ()->writeBool (
        "tieBreakPropRt",
         tieBreakPropRt (),
      defTieBreakPropRt ());

   myDataWriter ()->writeBool (
        "stockRealloc",
         stockRealloc (),
      defStockRealloc ());

   myDataWriter ()->writeBool (
        "stockReallocation",
         stockReallocation (),
      defStockReallocation ());

   myDataWriter ()->writeBool (
        "srSelSplit",
         srSelSplit (),
      defSrSelSplit ());

   myDataWriter ()->writeBool (
        "respectStockSLBs",
         respectStockSLBs (),
      defRespectStockSLBs ());

   myDataWriter ()->writeBool (
        "prefHighStockSLBs",
         prefHighStockSLBs (),
      defPrefHighStockSLBs ());

   myDataWriter ()->writeBool (
        "perfPegging",
         perfPegging (),
      defPerfPegging ());

   myDataWriter ()->writeBool (
        "selSplit",
         selSplit (),
      defSelSplit ());

   myDataWriter ()->writeBool (
        "nonMrSelSplit",
         nonMrSelSplit (),
      defNonMrSelSplit ());

   myDataWriter ()->writeBool (
        "selectionRecovery",
         selectionRecovery (),
      defSelectionRecovery ());

   myDataWriter ()->writeBool (
        "userHeurStart",
         userHeurStart (),
      defUserHeurStart ());

   myDataWriter ()->writeBool (
        "modHeurAlloc",
         modHeurAlloc (),
      defModHeurAlloc ());

   myDataWriter ()->writeBool (
        "pipSeqFromHeur",
         pipSeqFromHeur (),
      defPipSeqFromHeur ());

   myDataWriter ()->writeBool (
        "newPipPggOrder",
         newPipPggOrder (),
      defNewPipPggOrder ());

   myDataWriter ()->writeBool (
        "highPrecisionWD",
         highPrecisionWD (),
      defHighPrecisionWD ());

   myDataWriter ()->writeBool (
        "nstnResidual",
         nstnResidual (),
      defNstnResidual ());

   myDataWriter ()->writeBool (
        "minimalExcess",
         minimalExcess (),
      defMinimalExcess ());
   }
d1166 2
a1167 2
   {
   WitComponent::copyAttrsFrom (theGlobalComp);
d1169 48
a1216 48
   title_               = theGlobalComp->title_;
   nPeriods_            = theGlobalComp->nPeriods_;
   independentOffsets_  = theGlobalComp->independentOffsets_;
   execEmptyBom_        = theGlobalComp->execEmptyBom_;
   hashTableSize_       = theGlobalComp->hashTableSize_;
   roundReqVols_        = theGlobalComp->roundReqVols_;
   outputPrecision_     = theGlobalComp->outputPrecision_;
   computeCriticalList_ = theGlobalComp->computeCriticalList_;
   wit34Allowed_        = theGlobalComp->wit34Allowed_;
   localBuildAhead_     = theGlobalComp->localBuildAhead_;
   multiExec_           = theGlobalComp->multiExec_;
   twoWayMultiExec_     = theGlobalComp->twoWayMultiExec_;
   localMultiExec_      = theGlobalComp->localMultiExec_;
   equitability_        = theGlobalComp->equitability_;
   forcedMultiEq_       = theGlobalComp->forcedMultiEq_;
   autoPriority_        = theGlobalComp->autoPriority_;
   skipFailures_        = theGlobalComp->skipFailures_;
   multiRoute_          = theGlobalComp->multiRoute_;
   truncOffsets_        = theGlobalComp->truncOffsets_;
   lotSizeTol_          = theGlobalComp->lotSizeTol_;
   expCutoff_           = theGlobalComp->expCutoff_;
   penExec_             = theGlobalComp->penExec_;
   tieBreakPropRt_      = theGlobalComp->tieBreakPropRt_;
   stockRealloc_        = theGlobalComp->stockRealloc_;
   stockReallocation_   = theGlobalComp->stockReallocation_;
   srSelSplit_          = theGlobalComp->srSelSplit_;
   respectStockSLBs_    = theGlobalComp->respectStockSLBs_;
   prefHighStockSLBs_   = theGlobalComp->prefHighStockSLBs_;
   selSplit_            = theGlobalComp->selSplit_;
   nonMrSelSplit_       = theGlobalComp->nonMrSelSplit_;
   selectionRecovery_   = theGlobalComp->selectionRecovery_;
   userHeurStart_       = theGlobalComp->userHeurStart_;
   modHeurAlloc_        = theGlobalComp->modHeurAlloc_;
   pipSeqFromHeur_      = theGlobalComp->pipSeqFromHeur_;
   newPipPggOrder_      = theGlobalComp->newPipPggOrder_;
   highPrecisionWD_     = theGlobalComp->highPrecisionWD_;
   nstnResidual_        = theGlobalComp->nstnResidual_;
   minimalExcess_       = theGlobalComp->minimalExcess_;

   setPgdCritListMode    (theGlobalComp->pgdCritListMode_);
   setUseFocusHorizons   (theGlobalComp->useFocusHorizons_);
   setPerfPegging        (theGlobalComp->perfPegging_);

   setWit34Compatible (theGlobalComp->wit34Compatible_);

   myProblem ()->
      myPipMgr ()->
         copyShipSeq (theGlobalComp->myProblem ()->myPipMgr ());
d1218 2
a1219 2
   myProblem ()->updateNPeriods ();
   }
@


1.20
log
@Modifiable Heuristic Allocation
@
text
@a706 7
WitMsgFrag WitGlobalComp::classMsgFrag ()
   {
   return myMsgFac ().myFrag ("globalFrag");
   }

//------------------------------------------------------------------------------

@


1.19
log
@Modifiable heuristic allocation
@
text
@a95 2
      modHeurAllowed_      (false),

a532 2
   stronglyAssert (modHeurAllowed_);

a681 7
void WitGlobalComp::setModHeurAllowed (bool theValue)
   {
   modHeurAllowed_ = theValue;
   }

//------------------------------------------------------------------------------

@


1.18
log
@Heuristic Adjustment
@
text
@d75 1
a75 1
      heurAdjustEnabled_   (defHeurAdjustEnabled   ()),
d96 1
a96 1
      heurAdjustAllowed_   (false),
d533 1
a533 1
void WitGlobalComp::setHeurAdjustEnabled (bool theValue)
d535 1
a535 1
   stronglyAssert (heurAdjustAllowed_);
d539 1
a539 1
   heurAdjustEnabled_ = theValue;
d686 1
a686 1
void WitGlobalComp::setHeurAdjustAllowed (bool theValue)
d688 1
a688 1
   heurAdjustAllowed_ = theValue;
d767 11
a777 11
      multiExecNeeded   (),
      twoWayMultiExec   (),
      equitability      (),
      forcedMultiEq     (),
      userHeurStart     (),
      heurAdjustEnabled (),
      autoPriority      (),
      skipFailures      (),
      multiRoute        (),
      penExec           (),
      tieBreakPropRt    ());
d1151 3
a1153 3
        "heurAdjustEnabled",
         heurAdjustEnabled (),
      defHeurAdjustEnabled ());
d1219 1
a1219 1
   heurAdjustEnabled_   = theGlobalComp->heurAdjustEnabled_;
@


1.17
log
@Heuristic Adjustment
@
text
@d75 1
d96 2
d533 11
d686 7
d767 11
a777 10
      multiExecNeeded (),
      twoWayMultiExec (),
      equitability    (),
      forcedMultiEq   (),
      userHeurStart   (),
      autoPriority    (),
      skipFailures    (),
      multiRoute      (),
      penExec         (),
      tieBreakPropRt  ());
d1151 5
d1219 1
@


1.16
log
@Pause/Resume
@
text
@d28 1
a28 1
#include <Opn.h>
@


1.15
log
@Pause/Resume
@
text
@a94 2
      pauseResumeAllowed_  (false),

a662 7
void WitGlobalComp::setPauseResumeAllowed (bool theValue)
   {
   pauseResumeAllowed_ = theValue;
   }

//------------------------------------------------------------------------------

@


1.14
log
@Pause / Resume
@
text
@d95 1
a95 1
      pauseHeurAllowed_    (false),
d665 1
a665 1
void WitGlobalComp::setPauseHeurAllowed (bool theValue)
d667 1
a667 1
   pauseHeurAllowed_ = theValue;
@


1.13
log
@pause/resume
@
text
@d95 2
d665 7
@


1.12
log
@Selection Recovery
@
text
@d89 1
a89 1
      pauses_              (false),
d635 1
a635 1
void WitGlobalComp::setPauses (bool theValue)
d637 1
a637 1
   pauses_ = theValue;
@


1.11
log
@Selection Recovery.
@
text
@d514 1
a514 1
   prepSetUnpreAttr ();
@


1.10
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@a92 1
      newSelRec_           (false),
a662 7
void WitGlobalComp::setNewSelRec (bool theValue)
   {
   newSelRec_ = theValue;
   }

//------------------------------------------------------------------------------

@


1.9
log
@Selection reuse.
@
text
@d73 1
a73 1
      selectionReuse_      (defSelectionReuse      ()),
d93 1
a93 1
      newSelReuse_         (false),
d513 1
a513 1
void WitGlobalComp::setSelectionReuse (bool theValue)
d517 1
a517 1
   selectionReuse_ = theValue;
d664 1
a664 1
void WitGlobalComp::setNewSelReuse (bool theValue)
d666 1
a666 1
   newSelReuse_ = theValue;
d768 1
a768 1
      selectionReuse    (),
d1127 3
a1129 3
        "selectionReuse",
         selectionReuse (),
      defSelectionReuse ());
d1198 1
a1198 1
   selectionReuse_      = theGlobalComp->selectionReuse_;
@


1.8
log
@Selection Reuse.
@
text
@d93 1
d664 7
@


1.7
log
@Lead Time Bounds
@
text
@a80 1
      selReuseAllowed_     (false),
a513 2
   stronglyAssert (selReuseAllowed_);

a578 7
void WitGlobalComp::setSelReuseAllowed (bool theValue)
   {
   selReuseAllowed_ = theValue;
   }

//------------------------------------------------------------------------------

@


1.6
log
@Lead Time Bounds.
@
text
@a81 1
      ltbAllowed_          (false),
a588 7
void WitGlobalComp::setLtbAllowed (bool theValue)
   {
   ltbAllowed_ = theValue;
   }

//------------------------------------------------------------------------------

@


1.5
log
@Bounded Lead Times
@
text
@d82 1
a82 1
      bltAllowed_          (false),
d590 1
a590 1
void WitGlobalComp::setBltAllowed (bool theValue)
d592 1
a592 1
   bltAllowed_ = theValue;
@


1.4
log
@Selection Reuse.
@
text
@d82 1
d590 7
@


1.3
log
@Changed a development parameter.
@
text
@d73 1
d513 11
d770 1
d1129 5
d1200 1
@


1.2
log
@Production Horizons.
@
text
@d80 1
a80 1
      horizonsAllowed_     (false),
d570 1
a570 1
void WitGlobalComp::setHorizonsAllowed (bool theValue)
d572 1
a572 1
   horizonsAllowed_ = theValue;
@


1.1
log
@Changed source file names:
   Global.h ==> GlobalComp.h
   Global.C ==> GlobalComp.C
@
text
@d80 1
d570 7
@

