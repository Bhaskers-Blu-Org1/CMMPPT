head	1.10;
access;
symbols
	sce_5_01_20080919:1.7
	latest_sce_4_20_20060523:1.6.0.2
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.5.0.2
	sce_4_20_OSL:1.5
	sce_410_withVa:1.2;
locks; strict;
comment	@ * @;


1.10
date	2011.09.28.23.49.40;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.24.00.28.03;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.30.20.17.45;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.04.18.45.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.02.17.34.04;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.21.15.44.14;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.17.17.07.17;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.15.21.27.23;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.11.17.20.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.24.23.23.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef OVRealArgH
#define OVRealArgH

//------------------------------------------------------------------------------
// Header file: "OVRealArg.h"
//
// Contains:
//    The declaration           of class OVRealArg.
//    The declaration           of class OVRAElem.
//    The inline implementation of class OVRealArg.
//    The inline implementation of class OVRAElem.
//------------------------------------------------------------------------------

#include <RealArg.h>

//------------------------------------------------------------------------------
// Class OVRealArg
//
// "Output Vector Real Argument"
//
// Provides a uniform interface to a certain kind of argument to an API
// function. The underlying argument is the address of a pointer belonging to
// the application program and it is WIT's responsibility to store at this
// address the pointer to a newly created real-valued c-vector. Specifically,
// the underlying argument is of one of the following types:
//
//    float  * *
//    double * *
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const OVRealArg &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type float * * and double * *. These are the "underlying arguments".
//    The newly created c-vectors are of type float * and double *. These are
//    called the "underlying c-vectors".
//
//
// Class Hierarchy:
//
// RealArg
//    OVRealArg
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitOVRealArg: public WitRealArg
   {
   friend class WitOVRAElem;

   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOVRealArg (float * *);
         //
         // Conversion from a float * * underlying argument.

      WitOVRealArg (double * *);
         //
         // Conversion from a double * * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOVRealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void apiAlloc (int nElems) const;
         //
         // Allocates the underlying c-vector to nElems elements.
         // Uses malloc, so the c-vector can be passed back to the application
         // program.

      void operator = (const WitDblFlexVec & theDblFlexVec) const;
         //
         // Copies the elements of theDblFlexVec into the corresponding elements
         // of the underlying c-vector.

      void operator = (const WitVector <double> & theDblVec) const;
         //
         // Copies the elements of theDblVec into the corresponding elements
         // of the underlying c-vector.

      inline WitOVRAElem operator [] (int theIdx) const;
         //
         // Constructs and returns an OVRAElem that represents the element of
         // this OVRealArg indexed by theIdx.

      operator void * () const;
         //
         // Returns the underlying argument, converted to a void *.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline float  * & myFltCVec () const;
      inline double * & myDblCVec () const;
         //
         // These functions return the underlying c-vector.

      noCopyCtorAssign (WitOVRealArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * * const myFltCVecPtr_;
         //
         // The underlying argument, if it is a float * *.
         // Otherwise NULL.

      double * * const myDblCVecPtr_;
         //
         // The underlying argument, if it is a double * *.
         // Otherwise NULL.
   };

//------------------------------------------------------------------------------
// Class OVRAElem
//
// "Output Vector Real Argument Element"
// Represents an element of an OVRealArg.
// All implementation is inline.
//------------------------------------------------------------------------------

class WitOVRAElem
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitOVRAElem (const WitOVRealArg &, int);

      inline WitOVRAElem (const WitOVRAElem &);
         //
         // Copy ctor.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitOVRAElem ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void operator = (double theVal) const;
         //
         // Sets the element represented by this OVRAElem to theVal.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitOVRAElem & operator = (const WitOVRAElem &);
         //
         // Not implemented.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitOVRealArg & myOVRealArg_;
      const int            myIdx_;
         //
         // This OVRAElem represents the element of myOVRealArg_ indexed by
         // myIdx_.
   };

//------------------------------------------------------------------------------
// Inline implementation of class OVRealArg.
//------------------------------------------------------------------------------

inline WitOVRAElem WitOVRealArg::operator [] (int theIdx) const
   {
   return WitOVRAElem (* this, theIdx);
   }

//------------------------------------------------------------------------------

inline float * & WitOVRealArg::myFltCVec () const
   {
   witAssert (floatCase ());

   return (* myFltCVecPtr_);
   }

//------------------------------------------------------------------------------

inline double * & WitOVRealArg::myDblCVec () const
   {
   witAssert (doubleCase ());

   return (* myDblCVecPtr_);
   }

//------------------------------------------------------------------------------
// Inline implementation of class OVRAElem.
//------------------------------------------------------------------------------

inline WitOVRAElem::WitOVRAElem (const WitOVRealArg & theOVRealArg, int theIdx):

      myOVRealArg_ (theOVRealArg),
      myIdx_       (theIdx)
   {
   }

//------------------------------------------------------------------------------

inline WitOVRAElem::WitOVRAElem (const WitOVRAElem & theOVRAElem):

      myOVRealArg_ (theOVRAElem.myOVRealArg_),
      myIdx_       (theOVRAElem.myIdx_)
   {
   }

//------------------------------------------------------------------------------

inline WitOVRAElem::~WitOVRAElem ()
   {
   }

//------------------------------------------------------------------------------

inline void WitOVRAElem::operator = (double theVal) const
   {
   if (myOVRealArg_.floatCase ())
      myOVRealArg_.myFltCVec ()[myIdx_] = fltFromDbl (theVal);
   else
      myOVRealArg_.myDblCVec ()[myIdx_] =             theVal;
   }

#endif
@


1.9
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.8
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d57 2
a58 24
{
friend class WitOVRAElem;

public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitOVRealArg (float * *);
//
// Conversion from a float * * underlying argument.

WitOVRealArg (double * *);
//
// Conversion from a double * * underlying argument.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d60 1
a60 1
~WitOVRealArg ();
d62 78
a139 56
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void apiAlloc (int nElems) const;
//
// Allocates the underlying c-vector to nElems elements.
// Uses malloc, so the c-vector can be passed back to the application
// program.

void operator = (const WitDblFlexVec & theDblFlexVec) const;
//
// Copies the elements of theDblFlexVec into the corresponding elements
// of the underlying c-vector.

void operator = (const WitVector <double> & theDblVec) const;
//
// Copies the elements of theDblVec into the corresponding elements
// of the underlying c-vector.

inline WitOVRAElem operator [] (int theIdx) const;
//
// Constructs and returns an OVRAElem that represents the element of
// this OVRealArg indexed by theIdx.

operator void * () const;
//
// Returns the underlying argument, converted to a void *.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

inline float  * & myFltCVec () const;
inline double * & myDblCVec () const;
//
// These functions return the underlying c-vector.

noCopyCtorAssign (WitOVRealArg);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

float * * const myFltCVecPtr_;
//
// The underlying argument, if it is a float * *.
// Otherwise NULL.

double * * const myDblCVecPtr_;
//
// The underlying argument, if it is a double * *.
// Otherwise NULL.
};
d150 2
a151 2
{
public:
d153 3
a155 3
//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------
d157 3
a159 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d161 1
a161 1
inline WitOVRAElem (const WitOVRealArg &, int);
d163 3
a165 3
inline WitOVRAElem (const WitOVRAElem &);
//
// Copy ctor.
d167 3
a169 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d171 1
a171 1
inline ~WitOVRAElem ();
d173 3
a175 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d177 3
a179 3
inline void operator = (double theVal) const;
//
// Sets the element represented by this OVRAElem to theVal.
d181 1
a181 1
private:
d183 3
a185 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d187 3
a189 3
WitOVRAElem & operator = (const WitOVRAElem &);
//
// Not implemented.
d191 3
a193 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d195 6
a200 6
const WitOVRealArg & myOVRealArg_;
const int            myIdx_;
//
// This OVRAElem represents the element of myOVRealArg_ indexed by
// myIdx_.
};
d207 3
a209 3
{
return WitOVRAElem (* this, theIdx);
}
d214 2
a215 2
{
witAssert (floatCase ());
d217 2
a218 2
return (* myFltCVecPtr_);
}
d223 2
a224 2
{
witAssert (doubleCase ());
d226 2
a227 2
return (* myDblCVecPtr_);
}
d235 4
a238 4
myOVRealArg_ (theOVRealArg),
myIdx_       (theIdx)
{
}
d244 4
a247 4
myOVRealArg_ (theOVRAElem.myOVRealArg_),
myIdx_       (theOVRAElem.myIdx_)
{
}
d252 2
a253 2
{
}
d258 6
a263 6
{
if (myOVRealArg_.floatCase ())
myOVRealArg_.myFltCVec ()[myIdx_] = fltFromDbl (theVal);
else
myOVRealArg_.myDblCVec ()[myIdx_] =             theVal;
}
@


1.7
log
@App controlled opt implosion.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d57 24
a80 2
   {
   friend class WitOVRAElem;
d82 1
a82 1
   public:
d84 56
a139 78
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOVRealArg (float * *);
         //
         // Conversion from a float * * underlying argument.

      WitOVRealArg (double * *);
         //
         // Conversion from a double * * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOVRealArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void apiAlloc (int nElems) const;
         //
         // Allocates the underlying c-vector to nElems elements.
         // Uses malloc, so the c-vector can be passed back to the application
         // program.

      void operator = (const WitDblFlexVec & theDblFlexVec) const;
         //
         // Copies the elements of theDblFlexVec into the corresponding elements
         // of the underlying c-vector.

      void operator = (const WitVector <double> & theDblVec) const;
         //
         // Copies the elements of theDblVec into the corresponding elements
         // of the underlying c-vector.

      inline WitOVRAElem operator [] (int theIdx) const;
         //
         // Constructs and returns an OVRAElem that represents the element of
         // this OVRealArg indexed by theIdx.

      operator void * () const;
         //
         // Returns the underlying argument, converted to a void *.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline float  * & myFltCVec () const;
      inline double * & myDblCVec () const;
         //
         // These functions return the underlying c-vector.

      noCopyCtorAssign (WitOVRealArg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * * const myFltCVecPtr_;
         //
         // The underlying argument, if it is a float * *.
         // Otherwise NULL.

      double * * const myDblCVecPtr_;
         //
         // The underlying argument, if it is a double * *.
         // Otherwise NULL.
   };
d150 2
a151 2
   {
   public:
d153 3
a155 3
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------
d157 3
a159 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d161 1
a161 1
      inline WitOVRAElem (const WitOVRealArg &, int);
d163 3
a165 3
      inline WitOVRAElem (const WitOVRAElem &);
         //
         // Copy ctor.
d167 3
a169 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d171 1
a171 1
      inline ~WitOVRAElem ();
d173 3
a175 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d177 3
a179 3
      inline void operator = (double theVal) const;
         //
         // Sets the element represented by this OVRAElem to theVal.
d181 1
a181 1
   private:
d183 3
a185 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d187 3
a189 3
      WitOVRAElem & operator = (const WitOVRAElem &);
         //
         // Not implemented.
d191 3
a193 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d195 6
a200 6
      const WitOVRealArg & myOVRealArg_;
      const int            myIdx_;
         //
         // This OVRAElem represents the element of myOVRealArg_ indexed by
         // myIdx_.
   };
d207 3
a209 3
   {
   return WitOVRAElem (* this, theIdx);
   }
d214 2
a215 2
   {
   witAssert (floatCase ());
d217 2
a218 2
   return (* myFltCVecPtr_);
   }
d223 2
a224 2
   {
   witAssert (doubleCase ());
d226 2
a227 2
   return (* myDblCVecPtr_);
   }
d235 4
a238 4
      myOVRealArg_ (theOVRealArg),
      myIdx_       (theIdx)
   {
   }
d244 4
a247 4
      myOVRealArg_ (theOVRAElem.myOVRealArg_),
      myIdx_       (theOVRAElem.myIdx_)
   {
   }
d252 2
a253 2
   {
   }
d258 6
a263 6
   {
   if (myOVRealArg_.floatCase ())
      myOVRealArg_.myFltCVec ()[myIdx_] = fltFromDbl (theVal);
   else
      myOVRealArg_.myDblCVec ()[myIdx_] =             theVal;
   }
@


1.6
log
@Updated the copyright date on all source files.
@
text
@d58 2
d99 5
a108 4
      void setElem (int theIdx, double theVal) const;
         //
         // Sets the element of this OVRealArg indexed by theIdx to theVal.

d259 4
a262 1
   myOVRealArg_.setElem (myIdx_, theVal);
@


1.5
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.4
log
@[shared-resource pegging]
@
text
@d86 1
a86 1
      void apiAlloc (WitSiz nElems) const;
@


1.3
log
@[shared-resource pegging]
@
text
@d86 1
a86 1
      void apiAlloc (size_t nElems) const;
@


1.2
log
@Vector PropRtg.
@
text
@a23 1
#include <TlObj.h>
@


1.1
log
@Vector PropRt.
@
text
@d31 5
a35 5
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is the address of a pointer belonging to the
// application program and it is WIT's responsibility to store at this address
// the pointer to a newly created real-valued c-vector. Specifically, the
// underlying argument is of one of the following types:
@

