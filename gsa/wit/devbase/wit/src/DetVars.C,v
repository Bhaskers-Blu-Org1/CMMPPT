head	1.41;
access;
symbols
	sce_5_01_20080919:1.17;
locks; strict;
comment	@ * @;


1.41
date	2011.09.28.23.49.18;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.09.24.00.27.34;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2011.08.30.20.17.27;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2010.09.10.22.10.38;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2010.08.19.18.00.12;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2010.03.31.20.38.52;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2010.03.24.21.31.02;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2010.03.18.23.28.02;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.03.18.22.35.02;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2010.03.16.20.39.21;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.03.16.20.22.38;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2010.03.13.00.35.50;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.03.11.22.36.23;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.02.16.20.47.03;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.01.29.23.53.00;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.01.26.21.06.11;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.01.16.00.09.08;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.01.15.17.13.02;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.01.07.23.59.13;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.01.06.21.13.12;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.01.04.23.21.33;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.01.04.22.11.23;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2009.12.31.21.47.39;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2009.11.13.19.01.24;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.02.29.23.24.29;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.02.27.23.43.42;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.02.27.23.19.09;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.12.06.22.53.01;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.13.20.17.38;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.05.22.23.58;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.15.22.02.08;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.08.15.19.15.32;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.14.15.03.00;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.08.09.20.17.42;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.09.19.30.36;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.08.23.27.44;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.02.19.39.47;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.01.22.41.56;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.01.20.12.25;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.26.20.01.30;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.26.19.06.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "DetVars.C"
//
// Implementation the following classes:
//
//    DetVar
//    ScrapVar
//    NonSubVar
//    SubVar
//    ShipVar
//    BoundedVar
//    ExecVar
//    StockVar
//    CumShipVar
//    SlbvVar
//    MultiObjVar
//    NtbvVar
//------------------------------------------------------------------------------

#include <DetVars.h>
#include <DetImpOP.h>
#include <DetOptImpMgr.h>
#include <OptComp.h>
#include <Material.h>
#include <Operation.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <Demand.h>
#include <BoundSet.h>
#include <Objective.h>
#include <MsgFac.h>

#include <float.h>

//------------------------------------------------------------------------------
// Implementation of class DetVar.
//------------------------------------------------------------------------------

WitDetVar::WitDetVar (WitDetImpOP * theDetImpOP, WitPeriod thePer):

      WitOptVar   (theDetImpOP),
      myDetImpOP_ (theDetImpOP),
      myPeriod_   (thePer)
   {
   witAssert (thePer >= 0);
   }

//------------------------------------------------------------------------------

WitDetVar::WitDetVar (WitDetImpOP * theDetImpOP):

      WitOptVar   (theDetImpOP),
      myDetImpOP_ (theDetImpOP),
      myPeriod_   (-1)
   {
   }

//------------------------------------------------------------------------------

WitDetVar::~WitDetVar ()
   {
   }

//------------------------------------------------------------------------------

WitOptProblem * WitDetVar::myOptProblem ()
   {
   return myDetImpOP_;
   }

//------------------------------------------------------------------------------

WitDetVar * WitDetVar::mandDetVar ()
   {
   return this;
   }

//------------------------------------------------------------------------------

bool WitDetVar::isSlbvVar ()
   {
   return false;
   }

//------------------------------------------------------------------------------

void WitDetVar::printSource ()
   {
   printItem ();

   if (hasPeriod ())
      {
      myDetImpOP_->printPeriod (myPeriod ());
      }
   else
      {
      myDetImpOP_->printNonPeriod ();
      }
   }

//------------------------------------------------------------------------------
// Implementation of class ScrapVar.
//------------------------------------------------------------------------------

WitScrapVar::WitScrapVar (
         WitPart *     thePart,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitDetVar (theDetImpOP, t),

      myPart_   (thePart)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitScrapVar::~WitScrapVar ()
   {
   }

//------------------------------------------------------------------------------

double WitScrapVar::compObjCoeff ()
   {
   return - myPart ()->scrapCost ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

double WitScrapVar::upperBoundVal ()
   {
   return DBL_MAX;
   }

//------------------------------------------------------------------------------

double WitScrapVar::lowerBoundVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

const char * WitScrapVar::classText ()
   {
   return "Scrap";
   }

//------------------------------------------------------------------------------

void WitScrapVar::printItem ()
   {
   myDetImpOP ()->printItem (myPart ());
   }

//------------------------------------------------------------------------------

double WitScrapVar::indepInitValue ()
   {
   return myPart ()->scrapVol ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

void WitScrapVar::uploadSoln ()
   {
   myPart ()->storeOptScrapVol (myPeriod (), primalValue ());
   }

//------------------------------------------------------------------------------
// Implementation of class NonSubVar.
//------------------------------------------------------------------------------

WitNonSubVar::WitNonSubVar (
          WitBomEntry * theBomEnt,
          WitPeriod     t,
          WitDetImpOP * theDetImpOP):

      WitDetVar (theDetImpOP, t),

      myBomEnt_ (theBomEnt)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitNonSubVar::~WitNonSubVar ()
   {
   }

//------------------------------------------------------------------------------

double WitNonSubVar::compObjCoeff ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitNonSubVar::upperBoundVal ()
   {
   return DBL_MAX;
   }

//------------------------------------------------------------------------------

double WitNonSubVar::lowerBoundVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

const char * WitNonSubVar::classText ()
   {
   return "Non-Sub";
   }

//------------------------------------------------------------------------------

void WitNonSubVar::printItem ()
   {
   myDetImpOP ()->printItem (myBomEnt ());
   }

//------------------------------------------------------------------------------

double WitNonSubVar::indepInitValue ()
   {
   return myBomEnt ()->nonSubVol ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

void WitNonSubVar::uploadSoln ()
   {
   myBomEnt ()->storeOptNonSubVol (myPeriod (), primalValue ());
   }

//------------------------------------------------------------------------------
// Implementation of class SubVar.
//------------------------------------------------------------------------------

WitSubVar::WitSubVar (
          WitSubEntry * theSub,
          WitPeriod     t,
          WitDetImpOP * theDetImpOP):

      WitDetVar (theDetImpOP, t),

      mySub_    (theSub)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitSubVar::~WitSubVar ()
   {
   }

//------------------------------------------------------------------------------

double WitSubVar::compObjCoeff ()
   {
   return - mySub ()->subCost ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

double WitSubVar::upperBoundVal ()
   {
   return DBL_MAX;
   }

//------------------------------------------------------------------------------

double WitSubVar::lowerBoundVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

const char * WitSubVar::classText ()
   {
   return "Substitute";
   }

//------------------------------------------------------------------------------

void WitSubVar::printItem ()
   {
   myDetImpOP ()->printItem (mySub ());
   }

//------------------------------------------------------------------------------

double WitSubVar::indepInitValue ()
   {
   return mySub ()->subVol ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

bool WitSubVar::isAnIntVar ()
   {
   return mySub ()->intSubVols ();
   }

//------------------------------------------------------------------------------

void WitSubVar::uploadSoln ()
   {
   mySub ()->storeOptSubVol (myPeriod (), primalValue ());
   }

//------------------------------------------------------------------------------
// Implementation of class ShipVar.
//------------------------------------------------------------------------------

WitShipVar::WitShipVar (
         WitDemand *   theDemand,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitDetVar (theDetImpOP, t),

      myDemand_ (theDemand)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitShipVar::~WitShipVar ()
   {
   }

//------------------------------------------------------------------------------

double WitShipVar::compObjCoeff ()
   {
   return + myDemand ()->shipReward ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

double WitShipVar::upperBoundVal ()
   {
   return
      myDemand ()->shipLateAllowed ()?
         DBL_MAX:
         myDemand ()->demandVol ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

double WitShipVar::lowerBoundVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

const char * WitShipVar::classText ()
   {
   return "Shipment";
   }

//------------------------------------------------------------------------------

void WitShipVar::printItem ()
   {
   myDetImpOP ()->printItem (myDemand ());
   }

//------------------------------------------------------------------------------

double WitShipVar::indepInitValue ()
   {
   return myDemand ()->shipVol ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

bool WitShipVar::isAnIntVar ()
   {
   return myDemand ()->intShipVols ();
   }

//------------------------------------------------------------------------------

void WitShipVar::uploadSoln ()
   {
   myDemand ()->storeOptShipVol (myPeriod (), primalValue ());
   }

//------------------------------------------------------------------------------
// Implementation of class BoundedVar.
//------------------------------------------------------------------------------

WitBoundedVar::WitBoundedVar (WitDetImpOP * theDetImpOP, WitPeriod t):

      WitDetVar (theDetImpOP, t)
   {
   myDetImpOP ()->storeBoundedVar (this);
   }

//------------------------------------------------------------------------------

WitBoundedVar::~WitBoundedVar ()
   {
   }

//------------------------------------------------------------------------------

double WitBoundedVar::hardLB ()
   {
   return myBoundSet ()->hardLB () [myPeriod ()];
   }

//------------------------------------------------------------------------------

double WitBoundedVar::softLB ()
   {
   return myBoundSet ()->softLB () [myPeriod ()];
   }

//------------------------------------------------------------------------------

double WitBoundedVar::hardUB ()
   {
   return
      (myBoundSet ()->hardUBIsFinite (myPeriod ()))?
         myBoundSet ()->hardUB () [myPeriod ()]:
         + DBL_MAX;
   }

//------------------------------------------------------------------------------

bool WitBoundedVar::needsAnSlbvVar ()
   {
   if (myProblem ()->myOptComp ()->accAfterSoftLB ())
      return true;

   if (softLB () > hardLB () + FLOAT_EPSILON)
      return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitBoundedVar::printBoundInfo ()
   {
   fprintf      (myDetImpOP ()->optProbFile (), "%8d",            index ());
   fprintf      (myDetImpOP ()->optProbFile (), " %9.1f",         hardLB ());
   fprintf      (myDetImpOP ()->optProbFile (), " %9.1f",         softLB ());
   writeExtReal (myDetImpOP ()->optProbFile (), " %9.1f", " %9s", hardUB ());
   fprintf      (myDetImpOP ()->optProbFile (), "\n");
   }

//------------------------------------------------------------------------------

void WitBoundedVar::printSoln ()
   {
   WitSlbvVar * theSlbvVar;
   double       slbvVal;

   theSlbvVar = myDetImpOP ()->mySlbvVar (this);

   slbvVal =
      (theSlbvVar == NULL)?
         0.0:
         theSlbvVar->primalValue ();

   fprintf      (myDetImpOP ()->solnFile (), " %8d",   index ());
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", hardLB ());
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", softLB ());
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", slbvVal);
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", primalValue ());
   writeExtReal (myDetImpOP ()->solnFile (), " %9.1f", " %9s",   hardUB ());
   fprintf      (myDetImpOP ()->solnFile (), "\n");
   }

//------------------------------------------------------------------------------
// Implementation of class ExecVar.
//------------------------------------------------------------------------------

WitExecVar::WitExecVar (
         WitOperation * theOpn,
         WitPeriod      thePer,
         WitDetImpOP *  theDetImpOP):

      WitBoundedVar (theDetImpOP, thePer),

      myOperation_  (theOpn)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitExecVar::~WitExecVar ()
   {
   }

//------------------------------------------------------------------------------

double WitExecVar::compObjCoeff ()
   {
   return - myOperation ()->execCost ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

double WitExecVar::upperBoundVal ()
   {
   return hardUB ();
   }

//------------------------------------------------------------------------------

double WitExecVar::lowerBoundVal ()
   {
   return hardLB ();
   }

//------------------------------------------------------------------------------

const char * WitExecVar::classText ()
   {
   return "Execution";
   }

//------------------------------------------------------------------------------

void WitExecVar::printItem ()
   {
   myDetImpOP ()->printItem (myOperation ());
   }

//------------------------------------------------------------------------------

double WitExecVar::indepInitValue ()
   {
   return myOperation ()->execVol ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

bool WitExecVar::isAnIntVar ()
   {
   return myOperation ()->intExecVols ();
   }

//------------------------------------------------------------------------------

void WitExecVar::uploadSoln ()
   {
   myOperation ()->storeOptExecVol (myPeriod (), primalValue ());
   }

//------------------------------------------------------------------------------

WitBoundSet * WitExecVar::myBoundSet ()
   {
   return myOperation ()->execBounds ();
   }

//------------------------------------------------------------------------------
// Implementation of class StockVar.
//------------------------------------------------------------------------------

WitStockVar::WitStockVar (
         WitMaterial * theMat,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitBoundedVar (theDetImpOP, t),

      myMaterial_   (theMat)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitStockVar::~WitStockVar ()
   {
   }

//------------------------------------------------------------------------------

double WitStockVar::compObjCoeff ()
   {
   return - myMaterial ()->stockCost ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

double WitStockVar::upperBoundVal ()
   {
   return hardUB ();
   }

//------------------------------------------------------------------------------

double WitStockVar::lowerBoundVal ()
   {
   return hardLB ();
   }

//------------------------------------------------------------------------------

const char * WitStockVar::classText ()
   {
   return "Stock";
   }

//------------------------------------------------------------------------------

void WitStockVar::printItem ()
   {
   myDetImpOP ()->printItem (myMaterial ());
   }

//------------------------------------------------------------------------------

double WitStockVar::indepInitValue ()
   {
   return myMaterial ()->stockVol ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

void WitStockVar::uploadSoln ()
   {
   myMaterial ()->storeOptStockVol (myPeriod (), primalValue ());
   }

//------------------------------------------------------------------------------

WitBoundSet * WitStockVar::myBoundSet ()
   {
   return myMaterial ()->stockBounds ();
   }

//------------------------------------------------------------------------------
// Implementation of class CumShipVar.
//------------------------------------------------------------------------------

WitCumShipVar::WitCumShipVar (
         WitDemand *   theDemand,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitBoundedVar (theDetImpOP, t),

      myDemand_     (theDemand)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitCumShipVar::~WitCumShipVar ()
   {
   }

//------------------------------------------------------------------------------

double WitCumShipVar::compObjCoeff ()
   {
   return + myDemand ()->cumShipReward ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

double WitCumShipVar::upperBoundVal ()
   {
   return
      min (
         myDemand ()->cumDemandVol ()[myPeriod ()],
         hardUB ());
   }

//------------------------------------------------------------------------------

double WitCumShipVar::lowerBoundVal ()
   {
   return hardLB ();
   }

//------------------------------------------------------------------------------

const char * WitCumShipVar::classText ()
   {
   return "Cum. Ship";
   }

//------------------------------------------------------------------------------

void WitCumShipVar::printItem ()
   {
   myDetImpOP ()->printItem (myDemand ());
   }

//------------------------------------------------------------------------------

double WitCumShipVar::indepInitValue ()
   {
   return myDemand ()->cumShipVol ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

void WitCumShipVar::uploadSoln ()
   {
   myDemand ()->storeOptCumShipVol (myPeriod (), primalValue ());
   }

//------------------------------------------------------------------------------

WitBoundSet * WitCumShipVar::myBoundSet ()
   {
   return myDemand ()->cumShipBounds ();
   }

//------------------------------------------------------------------------------
// Implementation of class SlbvVar.
//------------------------------------------------------------------------------

WitSlbvVar::WitSlbvVar (
         WitBoundedVar * theBoundedVar,
         WitDetImpOP *   theDetImpOP):

      WitDetVar     (theDetImpOP, theBoundedVar->myPeriod ()),

      myBoundedVar_ (theBoundedVar)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitSlbvVar::~WitSlbvVar ()
   {
   }

//------------------------------------------------------------------------------

double WitSlbvVar::compObjCoeff ()
   {
   return - myProblem ()->myOptComp ()->wbounds ();
   }

//------------------------------------------------------------------------------

double WitSlbvVar::upperBoundVal ()
   {
   return DBL_MAX;
   }

//------------------------------------------------------------------------------

double WitSlbvVar::lowerBoundVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

const char * WitSlbvVar::classText ()
   {
   return "S. L. B. V.";
   }

//------------------------------------------------------------------------------

void WitSlbvVar::printItem ()
   {
   myDetImpOP ()->printItem (myBoundedVar_);
   }

//------------------------------------------------------------------------------

void WitSlbvVar::uploadSoln ()
   {
   }

//------------------------------------------------------------------------------

bool WitSlbvVar::isSlbvVar ()
   {
   return true;
   }

//------------------------------------------------------------------------------
// Implementation of class MultiObjVar.
//------------------------------------------------------------------------------

WitMultiObjVar::WitMultiObjVar (
         WitObjective * theObj,
         WitDetImpOP *  theDetImpOP):

      WitDetVar (theDetImpOP),
      myObj_    (theObj)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitMultiObjVar::~WitMultiObjVar ()
   {
   }

//------------------------------------------------------------------------------

double WitMultiObjVar::compObjCoeff ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

void WitMultiObjVar::uploadSoln ()
   {
   }

//------------------------------------------------------------------------------

const char * WitMultiObjVar::lexObjElemName ()
   {
   return myObj_->myObjName ().myCstring ();
   }

//------------------------------------------------------------------------------

void WitMultiObjVar::reportLexUnbounded ()
   {
   if (myObj_->hasNegativeCosts ())
      myDetImpOP ()->myMsgFac () ("lexUnboundedSmsg", myObj_->myObjName ());
   }

//------------------------------------------------------------------------------

double WitMultiObjVar::upperBoundVal ()
   {
   return DBL_MAX;
   }

//------------------------------------------------------------------------------

double WitMultiObjVar::lowerBoundVal ()
   {
   return - DBL_MAX;
   }

//------------------------------------------------------------------------------

const char * WitMultiObjVar::classText ()
   {
   return "Multi-Obj";
   }

//------------------------------------------------------------------------------

void WitMultiObjVar::printItem ()
   {
   myDetImpOP ()->printItem (myObj_);
   }

//------------------------------------------------------------------------------
// Implementation of class NtbvVar.
//------------------------------------------------------------------------------

WitNtbvVar::WitNtbvVar (WitDetImpOP * theDetImpOP):

      WitDetVar (theDetImpOP)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitNtbvVar::~WitNtbvVar ()
   {
   }

//------------------------------------------------------------------------------

double WitNtbvVar::compObjCoeff ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

void WitNtbvVar::uploadSoln ()
   {
   }

//------------------------------------------------------------------------------

const char * WitNtbvVar::lexObjElemName ()
   {
   return "Total Soft Lower Bounds Violation";
   }

//------------------------------------------------------------------------------

void WitNtbvVar::reportLexUnbounded ()
   {
   }

//------------------------------------------------------------------------------

double WitNtbvVar::upperBoundVal ()
   {
   return DBL_MAX;
   }

//------------------------------------------------------------------------------

double WitNtbvVar::lowerBoundVal ()
   {
   return - DBL_MAX;
   }

//------------------------------------------------------------------------------

const char * WitNtbvVar::classText ()
   {
   return "T. B. V.";
   }

//------------------------------------------------------------------------------

void WitNtbvVar::printItem ()
   {
   myDetImpOP ()->printItem ();
   }
@


1.40
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 6
a6 1
//------------------------------------------------------------------------------
d8 1
a8 4
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
d10 4
a13 1
//------------------------------------------------------------------------------
@


1.39
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d51 6
a56 6
WitOptVar   (theDetImpOP),
myDetImpOP_ (theDetImpOP),
myPeriod_   (thePer)
{
witAssert (thePer >= 0);
}
d62 5
a66 5
WitOptVar   (theDetImpOP),
myDetImpOP_ (theDetImpOP),
myPeriod_   (-1)
{
}
d71 2
a72 2
{
}
d77 3
a79 3
{
return myDetImpOP_;
}
d84 3
a86 3
{
return this;
}
d91 3
a93 3
{
return false;
}
d98 2
a99 2
{
printItem ();
d101 9
a109 9
if (hasPeriod ())
{
myDetImpOP_->printPeriod (myPeriod ());
}
else
{
myDetImpOP_->printNonPeriod ();
}
}
d116 10
a125 10
WitPart *     thePart,
WitPeriod     t,
WitDetImpOP * theDetImpOP):

WitDetVar (theDetImpOP, t),

myPart_   (thePart)
{
myDetImpOP ()->storeDerived (this);
}
d130 2
a131 2
{
}
d136 3
a138 3
{
return - myPart ()->scrapCost ()[myPeriod ()];
}
d143 3
a145 3
{
return DBL_MAX;
}
d150 3
a152 3
{
return 0.0;
}
d157 3
a159 3
{
return "Scrap";
}
d164 3
a166 3
{
myDetImpOP ()->printItem (myPart ());
}
d171 3
a173 3
{
return myPart ()->scrapVol ()[myPeriod ()];
}
d178 3
a180 3
{
myPart ()->storeOptScrapVol (myPeriod (), primalValue ());
}
d187 10
a196 10
WitBomEntry * theBomEnt,
WitPeriod     t,
WitDetImpOP * theDetImpOP):

WitDetVar (theDetImpOP, t),

myBomEnt_ (theBomEnt)
{
myDetImpOP ()->storeDerived (this);
}
d201 2
a202 2
{
}
d207 3
a209 3
{
return 0.0;
}
d214 3
a216 3
{
return DBL_MAX;
}
d221 3
a223 3
{
return 0.0;
}
d228 3
a230 3
{
return "Non-Sub";
}
d235 3
a237 3
{
myDetImpOP ()->printItem (myBomEnt ());
}
d242 3
a244 3
{
return myBomEnt ()->nonSubVol ()[myPeriod ()];
}
d249 3
a251 3
{
myBomEnt ()->storeOptNonSubVol (myPeriod (), primalValue ());
}
d258 10
a267 10
WitSubEntry * theSub,
WitPeriod     t,
WitDetImpOP * theDetImpOP):

WitDetVar (theDetImpOP, t),

mySub_    (theSub)
{
myDetImpOP ()->storeDerived (this);
}
d272 2
a273 2
{
}
d278 3
a280 3
{
return - mySub ()->subCost ()[myPeriod ()];
}
d285 3
a287 3
{
return DBL_MAX;
}
d292 3
a294 3
{
return 0.0;
}
d299 3
a301 3
{
return "Substitute";
}
d306 3
a308 3
{
myDetImpOP ()->printItem (mySub ());
}
d313 3
a315 3
{
return mySub ()->subVol ()[myPeriod ()];
}
d320 3
a322 3
{
return mySub ()->intSubVols ();
}
d327 3
a329 3
{
mySub ()->storeOptSubVol (myPeriod (), primalValue ());
}
d336 10
a345 10
WitDemand *   theDemand,
WitPeriod     t,
WitDetImpOP * theDetImpOP):

WitDetVar (theDetImpOP, t),

myDemand_ (theDemand)
{
myDetImpOP ()->storeDerived (this);
}
d350 2
a351 2
{
}
d356 3
a358 3
{
return + myDemand ()->shipReward ()[myPeriod ()];
}
d363 6
a368 6
{
return
myDemand ()->shipLateAllowed ()?
DBL_MAX:
myDemand ()->demandVol ()[myPeriod ()];
}
d373 3
a375 3
{
return 0.0;
}
d380 3
a382 3
{
return "Shipment";
}
d387 3
a389 3
{
myDetImpOP ()->printItem (myDemand ());
}
d394 3
a396 3
{
return myDemand ()->shipVol ()[myPeriod ()];
}
d401 3
a403 3
{
return myDemand ()->intShipVols ();
}
d408 3
a410 3
{
myDemand ()->storeOptShipVol (myPeriod (), primalValue ());
}
d418 4
a421 4
WitDetVar (theDetImpOP, t)
{
myDetImpOP ()->storeBoundedVar (this);
}
d426 2
a427 2
{
}
d432 3
a434 3
{
return myBoundSet ()->hardLB () [myPeriod ()];
}
d439 3
a441 3
{
return myBoundSet ()->softLB () [myPeriod ()];
}
d446 6
a451 6
{
return
(myBoundSet ()->hardUBIsFinite (myPeriod ()))?
myBoundSet ()->hardUB () [myPeriod ()]:
+ DBL_MAX;
}
d456 3
a458 3
{
if (myProblem ()->myOptComp ()->accAfterSoftLB ())
return true;
d460 2
a461 2
if (softLB () > hardLB () + FLOAT_EPSILON)
return true;
d463 2
a464 2
return false;
}
d469 7
a475 7
{
fprintf      (myDetImpOP ()->optProbFile (), "%8d",            index ());
fprintf      (myDetImpOP ()->optProbFile (), " %9.1f",         hardLB ());
fprintf      (myDetImpOP ()->optProbFile (), " %9.1f",         softLB ());
writeExtReal (myDetImpOP ()->optProbFile (), " %9.1f", " %9s", hardUB ());
fprintf      (myDetImpOP ()->optProbFile (), "\n");
}
d480 19
a498 19
{
WitSlbvVar * theSlbvVar;
double       slbvVal;

theSlbvVar = myDetImpOP ()->mySlbvVar (this);

slbvVal =
(theSlbvVar == NULL)?
0.0:
theSlbvVar->primalValue ();

fprintf      (myDetImpOP ()->solnFile (), " %8d",   index ());
fprintf      (myDetImpOP ()->solnFile (), " %9.1f", hardLB ());
fprintf      (myDetImpOP ()->solnFile (), " %9.1f", softLB ());
fprintf      (myDetImpOP ()->solnFile (), " %9.1f", slbvVal);
fprintf      (myDetImpOP ()->solnFile (), " %9.1f", primalValue ());
writeExtReal (myDetImpOP ()->solnFile (), " %9.1f", " %9s",   hardUB ());
fprintf      (myDetImpOP ()->solnFile (), "\n");
}
d505 10
a514 10
WitOperation * theOpn,
WitPeriod      thePer,
WitDetImpOP *  theDetImpOP):

WitBoundedVar (theDetImpOP, thePer),

myOperation_  (theOpn)
{
myDetImpOP ()->storeDerived (this);
}
d519 2
a520 2
{
}
d525 3
a527 3
{
return - myOperation ()->execCost ()[myPeriod ()];
}
d532 3
a534 3
{
return hardUB ();
}
d539 3
a541 3
{
return hardLB ();
}
d546 3
a548 3
{
return "Execution";
}
d553 3
a555 3
{
myDetImpOP ()->printItem (myOperation ());
}
d560 3
a562 3
{
return myOperation ()->execVol ()[myPeriod ()];
}
d567 3
a569 3
{
return myOperation ()->intExecVols ();
}
d574 3
a576 3
{
myOperation ()->storeOptExecVol (myPeriod (), primalValue ());
}
d581 3
a583 3
{
return myOperation ()->execBounds ();
}
d590 10
a599 10
WitMaterial * theMat,
WitPeriod     t,
WitDetImpOP * theDetImpOP):

WitBoundedVar (theDetImpOP, t),

myMaterial_   (theMat)
{
myDetImpOP ()->storeDerived (this);
}
d604 2
a605 2
{
}
d610 3
a612 3
{
return - myMaterial ()->stockCost ()[myPeriod ()];
}
d617 3
a619 3
{
return hardUB ();
}
d624 3
a626 3
{
return hardLB ();
}
d631 3
a633 3
{
return "Stock";
}
d638 3
a640 3
{
myDetImpOP ()->printItem (myMaterial ());
}
d645 3
a647 3
{
return myMaterial ()->stockVol ()[myPeriod ()];
}
d652 3
a654 3
{
myMaterial ()->storeOptStockVol (myPeriod (), primalValue ());
}
d659 3
a661 3
{
return myMaterial ()->stockBounds ();
}
d668 10
a677 10
WitDemand *   theDemand,
WitPeriod     t,
WitDetImpOP * theDetImpOP):

WitBoundedVar (theDetImpOP, t),

myDemand_     (theDemand)
{
myDetImpOP ()->storeDerived (this);
}
d682 2
a683 2
{
}
d688 3
a690 3
{
return + myDemand ()->cumShipReward ()[myPeriod ()];
}
d695 6
a700 6
{
return
min (
myDemand ()->cumDemandVol ()[myPeriod ()],
hardUB ());
}
d705 3
a707 3
{
return hardLB ();
}
d712 3
a714 3
{
return "Cum. Ship";
}
d719 3
a721 3
{
myDetImpOP ()->printItem (myDemand ());
}
d726 3
a728 3
{
return myDemand ()->cumShipVol ()[myPeriod ()];
}
d733 3
a735 3
{
myDemand ()->storeOptCumShipVol (myPeriod (), primalValue ());
}
d740 3
a742 3
{
return myDemand ()->cumShipBounds ();
}
d749 2
a750 2
WitBoundedVar * theBoundedVar,
WitDetImpOP *   theDetImpOP):
d752 1
a752 1
WitDetVar     (theDetImpOP, theBoundedVar->myPeriod ()),
d754 4
a757 4
myBoundedVar_ (theBoundedVar)
{
myDetImpOP ()->storeDerived (this);
}
d762 2
a763 2
{
}
d768 3
a770 3
{
return - myProblem ()->myOptComp ()->wbounds ();
}
d775 3
a777 3
{
return DBL_MAX;
}
d782 3
a784 3
{
return 0.0;
}
d789 3
a791 3
{
return "S. L. B. V.";
}
d796 3
a798 3
{
myDetImpOP ()->printItem (myBoundedVar_);
}
d803 2
a804 2
{
}
d809 3
a811 3
{
return true;
}
d818 2
a819 2
WitObjective * theObj,
WitDetImpOP *  theDetImpOP):
d821 5
a825 5
WitDetVar (theDetImpOP),
myObj_    (theObj)
{
myDetImpOP ()->storeDerived (this);
}
d830 2
a831 2
{
}
d836 3
a838 3
{
return 0.0;
}
d843 2
a844 2
{
}
d849 3
a851 3
{
return myObj_->myObjName ().myCstring ();
}
d856 4
a859 4
{
if (myObj_->hasNegativeCosts ())
myDetImpOP ()->myMsgFac () ("lexUnboundedSmsg", myObj_->myObjName ());
}
d864 3
a866 3
{
return DBL_MAX;
}
d871 3
a873 3
{
return - DBL_MAX;
}
d878 3
a880 3
{
return "Multi-Obj";
}
d885 3
a887 3
{
myDetImpOP ()->printItem (myObj_);
}
d895 4
a898 4
WitDetVar (theDetImpOP)
{
myDetImpOP ()->storeDerived (this);
}
d903 2
a904 2
{
}
d909 3
a911 3
{
return 0.0;
}
d916 2
a917 2
{
}
d922 3
a924 3
{
return "Total Soft Lower Bounds Violation";
}
d929 2
a930 2
{
}
d935 3
a937 3
{
return DBL_MAX;
}
d942 3
a944 3
{
return - DBL_MAX;
}
d949 3
a951 3
{
return "T. B. V.";
}
d956 3
a958 3
{
myDetImpOP ()->printItem ();
}
@


1.38
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d51 6
a56 6
      WitOptVar   (theDetImpOP),
      myDetImpOP_ (theDetImpOP),
      myPeriod_   (thePer)
   {
   witAssert (thePer >= 0);
   }
d62 5
a66 5
      WitOptVar   (theDetImpOP),
      myDetImpOP_ (theDetImpOP),
      myPeriod_   (-1)
   {
   }
d71 2
a72 2
   {
   }
d77 3
a79 3
   {
   return myDetImpOP_;
   }
d84 3
a86 3
   {
   return this;
   }
d91 3
a93 3
   {
   return false;
   }
d98 2
a99 2
   {
   printItem ();
d101 9
a109 9
   if (hasPeriod ())
      {
      myDetImpOP_->printPeriod (myPeriod ());
      }
   else
      {
      myDetImpOP_->printNonPeriod ();
      }
   }
d116 10
a125 10
         WitPart *     thePart,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitDetVar (theDetImpOP, t),

      myPart_   (thePart)
   {
   myDetImpOP ()->storeDerived (this);
   }
d130 2
a131 2
   {
   }
d136 3
a138 3
   {
   return - myPart ()->scrapCost ()[myPeriod ()];
   }
d143 3
a145 3
   {
   return DBL_MAX;
   }
d150 3
a152 3
   {
   return 0.0;
   }
d157 3
a159 3
   {
   return "Scrap";
   }
d164 3
a166 3
   {
   myDetImpOP ()->printItem (myPart ());
   }
d171 3
a173 3
   {
   return myPart ()->scrapVol ()[myPeriod ()];
   }
d178 3
a180 3
   {
   myPart ()->storeOptScrapVol (myPeriod (), primalValue ());
   }
d187 10
a196 10
          WitBomEntry * theBomEnt,
          WitPeriod     t,
          WitDetImpOP * theDetImpOP):

      WitDetVar (theDetImpOP, t),

      myBomEnt_ (theBomEnt)
   {
   myDetImpOP ()->storeDerived (this);
   }
d201 2
a202 2
   {
   }
d207 3
a209 3
   {
   return 0.0;
   }
d214 3
a216 3
   {
   return DBL_MAX;
   }
d221 3
a223 3
   {
   return 0.0;
   }
d228 3
a230 3
   {
   return "Non-Sub";
   }
d235 3
a237 3
   {
   myDetImpOP ()->printItem (myBomEnt ());
   }
d242 3
a244 3
   {
   return myBomEnt ()->nonSubVol ()[myPeriod ()];
   }
d249 3
a251 3
   {
   myBomEnt ()->storeOptNonSubVol (myPeriod (), primalValue ());
   }
d258 10
a267 10
          WitSubEntry * theSub,
          WitPeriod     t,
          WitDetImpOP * theDetImpOP):

      WitDetVar (theDetImpOP, t),

      mySub_    (theSub)
   {
   myDetImpOP ()->storeDerived (this);
   }
d272 2
a273 2
   {
   }
d278 3
a280 3
   {
   return - mySub ()->subCost ()[myPeriod ()];
   }
d285 3
a287 3
   {
   return DBL_MAX;
   }
d292 3
a294 3
   {
   return 0.0;
   }
d299 3
a301 3
   {
   return "Substitute";
   }
d306 3
a308 3
   {
   myDetImpOP ()->printItem (mySub ());
   }
d313 3
a315 3
   {
   return mySub ()->subVol ()[myPeriod ()];
   }
d320 3
a322 3
   {
   return mySub ()->intSubVols ();
   }
d327 3
a329 3
   {
   mySub ()->storeOptSubVol (myPeriod (), primalValue ());
   }
d336 10
a345 10
         WitDemand *   theDemand,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitDetVar (theDetImpOP, t),

      myDemand_ (theDemand)
   {
   myDetImpOP ()->storeDerived (this);
   }
d350 2
a351 2
   {
   }
d356 3
a358 3
   {
   return + myDemand ()->shipReward ()[myPeriod ()];
   }
d363 6
a368 6
   {
   return
      myDemand ()->shipLateAllowed ()?
         DBL_MAX:
         myDemand ()->demandVol ()[myPeriod ()];
   }
d373 3
a375 3
   {
   return 0.0;
   }
d380 3
a382 3
   {
   return "Shipment";
   }
d387 3
a389 3
   {
   myDetImpOP ()->printItem (myDemand ());
   }
d394 3
a396 3
   {
   return myDemand ()->shipVol ()[myPeriod ()];
   }
d401 3
a403 3
   {
   return myDemand ()->intShipVols ();
   }
d408 3
a410 3
   {
   myDemand ()->storeOptShipVol (myPeriod (), primalValue ());
   }
d418 4
a421 4
      WitDetVar (theDetImpOP, t)
   {
   myDetImpOP ()->storeBoundedVar (this);
   }
d426 2
a427 2
   {
   }
d432 3
a434 3
   {
   return myBoundSet ()->hardLB () [myPeriod ()];
   }
d439 3
a441 3
   {
   return myBoundSet ()->softLB () [myPeriod ()];
   }
d446 6
a451 6
   {
   return
      (myBoundSet ()->hardUBIsFinite (myPeriod ()))?
         myBoundSet ()->hardUB () [myPeriod ()]:
         + DBL_MAX;
   }
d456 3
a458 3
   {
   if (myProblem ()->myOptComp ()->accAfterSoftLB ())
      return true;
d460 2
a461 2
   if (softLB () > hardLB () + FLOAT_EPSILON)
      return true;
d463 2
a464 2
   return false;
   }
d469 7
a475 7
   {
   fprintf      (myDetImpOP ()->optProbFile (), "%8d",            index ());
   fprintf      (myDetImpOP ()->optProbFile (), " %9.1f",         hardLB ());
   fprintf      (myDetImpOP ()->optProbFile (), " %9.1f",         softLB ());
   writeExtReal (myDetImpOP ()->optProbFile (), " %9.1f", " %9s", hardUB ());
   fprintf      (myDetImpOP ()->optProbFile (), "\n");
   }
d480 19
a498 19
   {
   WitSlbvVar * theSlbvVar;
   double       slbvVal;

   theSlbvVar = myDetImpOP ()->mySlbvVar (this);

   slbvVal =
      (theSlbvVar == NULL)?
         0.0:
         theSlbvVar->primalValue ();

   fprintf      (myDetImpOP ()->solnFile (), " %8d",   index ());
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", hardLB ());
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", softLB ());
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", slbvVal);
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", primalValue ());
   writeExtReal (myDetImpOP ()->solnFile (), " %9.1f", " %9s",   hardUB ());
   fprintf      (myDetImpOP ()->solnFile (), "\n");
   }
d505 10
a514 10
         WitOperation * theOpn,
         WitPeriod      thePer,
         WitDetImpOP *  theDetImpOP):

      WitBoundedVar (theDetImpOP, thePer),

      myOperation_  (theOpn)
   {
   myDetImpOP ()->storeDerived (this);
   }
d519 2
a520 2
   {
   }
d525 3
a527 3
   {
   return - myOperation ()->execCost ()[myPeriod ()];
   }
d532 3
a534 3
   {
   return hardUB ();
   }
d539 3
a541 3
   {
   return hardLB ();
   }
d546 3
a548 3
   {
   return "Execution";
   }
d553 3
a555 3
   {
   myDetImpOP ()->printItem (myOperation ());
   }
d560 3
a562 3
   {
   return myOperation ()->execVol ()[myPeriod ()];
   }
d567 3
a569 3
   {
   return myOperation ()->intExecVols ();
   }
d574 3
a576 3
   {
   myOperation ()->storeOptExecVol (myPeriod (), primalValue ());
   }
d581 3
a583 3
   {
   return myOperation ()->execBounds ();
   }
d590 10
a599 10
         WitMaterial * theMat,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitBoundedVar (theDetImpOP, t),

      myMaterial_   (theMat)
   {
   myDetImpOP ()->storeDerived (this);
   }
d604 2
a605 2
   {
   }
d610 3
a612 3
   {
   return - myMaterial ()->stockCost ()[myPeriod ()];
   }
d617 3
a619 3
   {
   return hardUB ();
   }
d624 3
a626 3
   {
   return hardLB ();
   }
d631 3
a633 3
   {
   return "Stock";
   }
d638 3
a640 3
   {
   myDetImpOP ()->printItem (myMaterial ());
   }
d645 3
a647 3
   {
   return myMaterial ()->stockVol ()[myPeriod ()];
   }
d652 3
a654 3
   {
   myMaterial ()->storeOptStockVol (myPeriod (), primalValue ());
   }
d659 3
a661 3
   {
   return myMaterial ()->stockBounds ();
   }
d668 10
a677 10
         WitDemand *   theDemand,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitBoundedVar (theDetImpOP, t),

      myDemand_     (theDemand)
   {
   myDetImpOP ()->storeDerived (this);
   }
d682 2
a683 2
   {
   }
d688 3
a690 3
   {
   return + myDemand ()->cumShipReward ()[myPeriod ()];
   }
d695 6
a700 6
   {
   return
      min (
         myDemand ()->cumDemandVol ()[myPeriod ()],
         hardUB ());
   }
d705 3
a707 3
   {
   return hardLB ();
   }
d712 3
a714 3
   {
   return "Cum. Ship";
   }
d719 3
a721 3
   {
   myDetImpOP ()->printItem (myDemand ());
   }
d726 3
a728 3
   {
   return myDemand ()->cumShipVol ()[myPeriod ()];
   }
d733 3
a735 3
   {
   myDemand ()->storeOptCumShipVol (myPeriod (), primalValue ());
   }
d740 3
a742 3
   {
   return myDemand ()->cumShipBounds ();
   }
d749 2
a750 2
         WitBoundedVar * theBoundedVar,
         WitDetImpOP *   theDetImpOP):
d752 1
a752 1
      WitDetVar     (theDetImpOP, theBoundedVar->myPeriod ()),
d754 4
a757 4
      myBoundedVar_ (theBoundedVar)
   {
   myDetImpOP ()->storeDerived (this);
   }
d762 2
a763 2
   {
   }
d768 3
a770 3
   {
   return - myProblem ()->myOptComp ()->wbounds ();
   }
d775 3
a777 3
   {
   return DBL_MAX;
   }
d782 3
a784 3
   {
   return 0.0;
   }
d789 3
a791 3
   {
   return "S. L. B. V.";
   }
d796 3
a798 3
   {
   myDetImpOP ()->printItem (myBoundedVar_);
   }
d803 2
a804 2
   {
   }
d809 3
a811 3
   {
   return true;
   }
d818 2
a819 2
         WitObjective * theObj,
         WitDetImpOP *  theDetImpOP):
d821 5
a825 5
      WitDetVar (theDetImpOP),
      myObj_    (theObj)
   {
   myDetImpOP ()->storeDerived (this);
   }
d830 2
a831 2
   {
   }
d836 3
a838 3
   {
   return 0.0;
   }
d843 2
a844 2
   {
   }
d849 3
a851 3
   {
   return myObj_->myObjName ().myCstring ();
   }
d856 4
a859 4
   {
   if (myObj_->hasNegativeCosts ())
      myDetImpOP ()->myMsgFac () ("lexUnboundedSmsg", myObj_->myObjName ());
   }
d864 3
a866 3
   {
   return DBL_MAX;
   }
d871 3
a873 3
   {
   return - DBL_MAX;
   }
d878 3
a880 3
   {
   return "Multi-Obj";
   }
d885 3
a887 3
   {
   myDetImpOP ()->printItem (myObj_);
   }
d895 4
a898 4
      WitDetVar (theDetImpOP)
   {
   myDetImpOP ()->storeDerived (this);
   }
d903 2
a904 2
   {
   }
d909 3
a911 3
   {
   return 0.0;
   }
d916 2
a917 2
   {
   }
d922 3
a924 3
   {
   return "Total Soft Lower Bounds Violation";
   }
d929 2
a930 2
   {
   }
d935 3
a937 3
   {
   return DBL_MAX;
   }
d942 3
a944 3
   {
   return - DBL_MAX;
   }
d949 3
a951 3
   {
   return "T. B. V.";
   }
d956 3
a958 3
   {
   myDetImpOP ()->printItem ();
   }
@


1.37
log
@CPLEX
@
text
@d34 1
a34 1
#include <Opn.h>
@


1.36
log
@Multi-Obj Mode.
@
text
@d30 1
a30 1
#include <DetImpOM.h>
d49 1
a49 1
WitDetVar::WitDetVar (WitDetImpOM * theDetImpOM, WitPeriod thePer):
d51 2
a52 2
      WitOptVar   (theDetImpOM),
      myDetImpOM_ (theDetImpOM),
d60 1
a60 1
WitDetVar::WitDetVar (WitDetImpOM * theDetImpOM):
d62 2
a63 2
      WitOptVar   (theDetImpOM),
      myDetImpOM_ (theDetImpOM),
d76 1
a76 1
WitOptModel * WitDetVar::myOptModel ()
d78 1
a78 1
   return myDetImpOM_;
d103 1
a103 1
      myDetImpOM_->printPeriod (myPeriod ());
d107 1
a107 1
      myDetImpOM_->printNonPeriod ();
d118 1
a118 1
         WitDetImpOM * theDetImpOM):
d120 1
a120 1
      WitDetVar (theDetImpOM, t),
d124 1
a124 1
   myDetImpOM ()->storeDerived (this);
d165 1
a165 1
   myDetImpOM ()->printItem (myPart ());
d189 1
a189 1
          WitDetImpOM * theDetImpOM):
d191 1
a191 1
      WitDetVar (theDetImpOM, t),
d195 1
a195 1
   myDetImpOM ()->storeDerived (this);
d236 1
a236 1
   myDetImpOM ()->printItem (myBomEnt ());
d260 1
a260 1
          WitDetImpOM * theDetImpOM):
d262 1
a262 1
      WitDetVar (theDetImpOM, t),
d266 1
a266 1
   myDetImpOM ()->storeDerived (this);
d307 1
a307 1
   myDetImpOM ()->printItem (mySub ());
d338 1
a338 1
         WitDetImpOM * theDetImpOM):
d340 1
a340 1
      WitDetVar (theDetImpOM, t),
d344 1
a344 1
   myDetImpOM ()->storeDerived (this);
d388 1
a388 1
   myDetImpOM ()->printItem (myDemand ());
d416 1
a416 1
WitBoundedVar::WitBoundedVar (WitDetImpOM * theDetImpOM, WitPeriod t):
d418 1
a418 1
      WitDetVar (theDetImpOM, t)
d420 1
a420 1
   myDetImpOM ()->storeBoundedVar (this);
d470 5
a474 5
   fprintf      (myDetImpOM ()->modelFile (), "%8d",            index ());
   fprintf      (myDetImpOM ()->modelFile (), " %9.1f",         hardLB ());
   fprintf      (myDetImpOM ()->modelFile (), " %9.1f",         softLB ());
   writeExtReal (myDetImpOM ()->modelFile (), " %9.1f", " %9s", hardUB ());
   fprintf      (myDetImpOM ()->modelFile (), "\n");
d484 1
a484 1
   theSlbvVar = myDetImpOM ()->mySlbvVar (this);
d491 7
a497 7
   fprintf      (myDetImpOM ()->solnFile (), " %8d",   index ());
   fprintf      (myDetImpOM ()->solnFile (), " %9.1f", hardLB ());
   fprintf      (myDetImpOM ()->solnFile (), " %9.1f", softLB ());
   fprintf      (myDetImpOM ()->solnFile (), " %9.1f", slbvVal);
   fprintf      (myDetImpOM ()->solnFile (), " %9.1f", primalValue ());
   writeExtReal (myDetImpOM ()->solnFile (), " %9.1f", " %9s",   hardUB ());
   fprintf      (myDetImpOM ()->solnFile (), "\n");
d507 1
a507 1
         WitDetImpOM *  theDetImpOM):
d509 1
a509 1
      WitBoundedVar (theDetImpOM, thePer),
d513 1
a513 1
   myDetImpOM ()->storeDerived (this);
d554 1
a554 1
   myDetImpOM ()->printItem (myOperation ());
d592 1
a592 1
         WitDetImpOM * theDetImpOM):
d594 1
a594 1
      WitBoundedVar (theDetImpOM, t),
d598 1
a598 1
   myDetImpOM ()->storeDerived (this);
d639 1
a639 1
   myDetImpOM ()->printItem (myMaterial ());
d670 1
a670 1
         WitDetImpOM * theDetImpOM):
d672 1
a672 1
      WitBoundedVar (theDetImpOM, t),
d676 1
a676 1
   myDetImpOM ()->storeDerived (this);
d720 1
a720 1
   myDetImpOM ()->printItem (myDemand ());
d750 1
a750 1
         WitDetImpOM *   theDetImpOM):
d752 1
a752 1
      WitDetVar     (theDetImpOM, theBoundedVar->myPeriod ()),
d756 1
a756 1
   myDetImpOM ()->storeDerived (this);
d797 1
a797 1
   myDetImpOM ()->printItem (myBoundedVar_);
d819 1
a819 1
         WitDetImpOM *  theDetImpOM):
d821 1
a821 1
      WitDetVar (theDetImpOM),
d824 1
a824 1
   myDetImpOM ()->storeDerived (this);
d858 1
a858 1
      myDetImpOM ()->myMsgFac () ("lexUnboundedSmsg", myObj_->myObjName ());
d886 1
a886 1
   myDetImpOM ()->printItem (myObj_);
d893 1
a893 1
WitNtbvVar::WitNtbvVar (WitDetImpOM * theDetImpOM):
d895 1
a895 1
      WitDetVar (theDetImpOM)
d897 1
a897 1
   myDetImpOM ()->storeDerived (this);
d957 1
a957 1
   myDetImpOM ()->printItem ();
@


1.35
log
@Removed OptObj classes.
@
text
@d923 1
a923 1
   return "Negative Total Bounds Violation";
@


1.34
log
@Removed some unneeded functions.
@
text
@d135 7
a176 7
double WitScrapVar::detCoeffVal ()
   {
   return - myPart ()->scrapCost ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

d206 7
a247 7
double WitNonSubVar::detCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

d277 7
a325 7
double WitSubVar::detCoeffVal ()
   {
   return - mySub ()->subCost ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

d355 7
a406 7
double WitShipVar::detCoeffVal ()
   {
   return + myDemand ()->shipReward ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

d524 7
a572 7
double WitExecVar::detCoeffVal ()
   {
   return - myOperation ()->execCost ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

d609 7
a650 7
double WitStockVar::detCoeffVal ()
   {
   return - myMaterial ()->stockCost ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

d687 7
a731 7
double WitCumShipVar::detCoeffVal ()
   {
   return + myDemand ()->cumShipReward ()[myPeriod ()];
   }

//------------------------------------------------------------------------------

d767 7
a801 7
double WitSlbvVar::detCoeffVal ()
   {
   return - myProblem ()->myOptComp ()->wbounds ();
   }

//------------------------------------------------------------------------------

d835 1
a835 1
double WitMultiObjVar::detCoeffVal ()
d908 1
a908 1
double WitNtbvVar::detCoeffVal ()
@


1.33
log
@Removed class BoundsObj.
@
text
@a89 14
double WitDetVar::boundsCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitDetVar::primaryCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

d170 1
a170 1
double WitScrapVar::primaryCoeffVal ()
d241 7
d319 1
a319 1
double WitSubVar::primaryCoeffVal ()
d400 1
a400 1
double WitShipVar::primaryCoeffVal ()
d566 1
a566 1
double WitExecVar::primaryCoeffVal ()
d644 1
a644 1
double WitStockVar::primaryCoeffVal ()
d725 1
a725 1
void WitCumShipVar::uploadSoln ()
d727 1
a727 1
   myDemand ()->storeOptCumShipVol (myPeriod (), primalValue ());
d732 1
a732 1
WitBoundSet * WitCumShipVar::myBoundSet ()
d734 1
a734 1
   return myDemand ()->cumShipBounds ();
d739 1
a739 1
double WitCumShipVar::primaryCoeffVal ()
d741 1
a741 1
   return + myDemand ()->cumShipReward ()[myPeriod ()];
d795 1
a795 1
double WitSlbvVar::boundsCoeffVal ()
d797 1
a797 1
   return 1.0;
d835 7
d908 7
@


1.32
log
@Multi-Obj Mode
@
text
@d104 7
d814 7
@


1.31
log
@Multi-Obj Mode
@
text
@d26 1
a26 1
//    TbvVar
d876 1
a876 1
// Implementation of class TbvVar.
d879 1
a879 1
WitTbvVar::WitTbvVar (WitDetImpOM * theDetImpOM):
d888 1
a888 1
WitTbvVar::~WitTbvVar ()
d894 1
a894 1
void WitTbvVar::uploadSoln ()
d900 1
a900 1
const char * WitTbvVar::lexObjElemName ()
d907 1
a907 1
void WitTbvVar::reportLexUnbounded ()
d913 1
a913 1
double WitTbvVar::upperBoundVal ()
d920 1
a920 1
double WitTbvVar::lowerBoundVal ()
d927 1
a927 1
const char * WitTbvVar::classText ()
d934 1
a934 1
void WitTbvVar::printItem ()
@


1.30
log
@Multi-Obj Mode
@
text
@d902 1
a902 1
   return "Total Bounds Violation";
@


1.29
log
@Multi-Obj Mode
@
text
@d26 1
d874 64
@


1.28
log
@Multi-Obj Mode
@
text
@d833 1
a833 1
const char * WitMultiObjVar::lexObjCompName ()
@


1.27
log
@Multi-objective mode
@
text
@d833 1
a833 1
const char * WitMultiObjVar::lexObjElemName ()
@


1.26
log
@Multi-objective mode
@
text
@d835 1
a835 1
   return myObj_->objectiveName ().myCstring ();
d843 1
a843 1
      myDetImpOM ()->myMsgFac () ("lexUnboundedSmsg", myObj_->objectiveName ());
@


1.25
log
@Multi-objective mode
@
text
@d833 1
a833 1
const WitString & WitMultiObjVar::lexObjElemName ()
d835 1
a835 1
   return myObj_->objectiveName ();
@


1.24
log
@Multi-objective mode
@
text
@d40 1
d840 8
@


1.23
log
@Multi-objective mode
@
text
@d832 7
@


1.22
log
@Multi-objective mode
@
text
@a827 1
   myObj_->storeOptObjValue (primalValue ());
@


1.21
log
@Multi-objective mode
@
text
@d842 1
a842 3
// return - DBL_MAX;

   return myObj_->objectiveSeqNo () + 100.0;
@


1.20
log
@Multi-objective mode
@
text
@d842 3
a844 1
   return - DBL_MAX;
@


1.19
log
@Multi-objective mode
@
text
@d25 1
d39 1
d53 11
d106 8
a113 1
   myDetImpOM_->printPeriod (myPeriod ());
d803 55
@


1.18
log
@Removing objective #2.
@
text
@a88 28
double WitDetVar::revCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitDetVar::invCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitDetVar::servCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitDetVar::subCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

a161 7
double WitScrapVar::revCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

a225 10
double WitNonSubVar::invCoeffVal ()
   {
   return
      myBomEnt ()->effCost (myPeriod ())                        *
      (myPeriod () - myBomEnt ()->impactPeriod ()[myPeriod ()]) /
      static_cast <double> (myProblem ()->nPeriods ());
   }

//------------------------------------------------------------------------------

a303 25
double WitSubVar::revCoeffVal ()
   {
   return + mySub ()->myBomEnt ()->effCost (myPeriod ())
          - mySub ()             ->effCost (myPeriod ());
   }

//------------------------------------------------------------------------------

double WitSubVar::invCoeffVal ()
   {
   return
      mySub ()->effCost (myPeriod ())                        *
      (myPeriod () - mySub ()->impactPeriod ()[myPeriod ()]) /
      static_cast <double> (myProblem ()->nPeriods ());
   }

//------------------------------------------------------------------------------

double WitSubVar::subCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

a384 7
double WitShipVar::revCoeffVal ()
   {
   return + myDemand ()->netRev ();
   }

//------------------------------------------------------------------------------

a550 27
double WitExecVar::revCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitExecVar::invCoeffVal ()
   {
   WitBomEntry * theBomEnt;
   WitBopEntry * theBopEnt;
   double        sum;

   sum = 0.0;

   forEachEl (theBomEnt, myOperation ()->bom ())
      if (theBomEnt->inEffect (myPeriod ()))
         if (not theBomEnt->hasSubsInEffect ()[myPeriod ()])
            sum +=
               (myPeriod () - theBomEnt->impactPeriod ()[myPeriod ()]) *
               theBomEnt->effCost (myPeriod ());

   return sum / static_cast <double> (myProblem ()->nPeriods ());
   }

//------------------------------------------------------------------------------

a628 7
double WitStockVar::invCoeffVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

a722 9

double WitCumShipVar::servCoeffVal ()
   {
   stronglyAssert (false);

   return 0.0;
   }

//------------------------------------------------------------------------------
@


1.17
log
@Stochastic Implosion
@
text
@d192 1
a192 1
   return - myPart ()->unitCost ();
d369 1
a369 1
   return mySub ()->obj2SubPenalty ();
d630 1
a630 1
   return - myOperation ()->obj2AuxCost ();
a649 7
   forEachEl (theBopEnt, myOperation ()->bop ())
      if (theBopEnt->inEffect (myPeriod ()))
         sum -=
            (myPeriod () - theBopEnt->impactPeriod ()[myPeriod ()]) *
            theBopEnt->effProdRate ()[myPeriod ()] *
            theBopEnt->myPart ()->unitCost ();

d735 1
a735 3
   return
        myMaterial ()->unitCost ()
      / static_cast <double> (myProblem ()->nPeriods ());
d837 1
a837 3
   if (   myProblem ()->myOptComp ()->myObjFunc2 ()->totalServiceScale ()
       <= FLOAT_EPSILON)
      return 0.0;
d839 1
a839 3
   return
        myDemand ()->netRev ()
      / myProblem ()->myOptComp ()->myObjFunc2 ()->totalServiceScale ();
@


1.16
log
@Stochastic Implosion
@
text
@d525 5
a529 5
   fprintf      (myDetImpOM ()->optProbFile (), "%8d",            index ());
   fprintf      (myDetImpOM ()->optProbFile (), " %9.1f",         hardLB ());
   fprintf      (myDetImpOM ()->optProbFile (), " %9.1f",         softLB ());
   writeExtReal (myDetImpOM ()->optProbFile (), " %9.1f", " %9s", hardUB ());
   fprintf      (myDetImpOM ()->optProbFile (), "\n");
@


1.15
log
@Stochastic Implosion
@
text
@d28 1
a28 1
#include <DetImpOP.h>
d45 1
a45 1
WitDetVar::WitDetVar (WitDetImpOP * theDetImpOP, WitPeriod thePer):
d47 2
a48 2
      WitOptVar   (theDetImpOP),
      myDetImpOP_ (theDetImpOP),
d63 1
a63 1
   return myDetImpOP_;
d121 1
a121 1
   myDetImpOP_->printPeriod (myPeriod ());
d131 1
a131 1
         WitDetImpOP * theDetImpOP):
d133 1
a133 1
      WitDetVar (theDetImpOP, t),
d137 1
a137 1
   myDetImpOP ()->storeDerived (this);
d171 1
a171 1
   myDetImpOP ()->printItem (myPart ());
d209 1
a209 1
          WitDetImpOP * theDetImpOP):
d211 1
a211 1
      WitDetVar (theDetImpOP, t),
d215 1
a215 1
   myDetImpOP ()->storeDerived (this);
d249 1
a249 1
   myDetImpOP ()->printItem (myBomEnt ());
d283 1
a283 1
          WitDetImpOP * theDetImpOP):
d285 1
a285 1
      WitDetVar (theDetImpOP, t),
d289 1
a289 1
   myDetImpOP ()->storeDerived (this);
d323 1
a323 1
   myDetImpOP ()->printItem (mySub ());
d386 1
a386 1
         WitDetImpOP * theDetImpOP):
d388 1
a388 1
      WitDetVar (theDetImpOP, t),
d392 1
a392 1
   myDetImpOP ()->storeDerived (this);
d429 1
a429 1
   myDetImpOP ()->printItem (myDemand ());
d471 1
a471 1
WitBoundedVar::WitBoundedVar (WitDetImpOP * theDetImpOP, WitPeriod t):
d473 1
a473 1
      WitDetVar (theDetImpOP, t)
d475 1
a475 1
   myDetImpOP ()->storeBoundedVar (this);
d525 5
a529 5
   fprintf      (myDetImpOP ()->optProbFile (), "%8d",            index ());
   fprintf      (myDetImpOP ()->optProbFile (), " %9.1f",         hardLB ());
   fprintf      (myDetImpOP ()->optProbFile (), " %9.1f",         softLB ());
   writeExtReal (myDetImpOP ()->optProbFile (), " %9.1f", " %9s", hardUB ());
   fprintf      (myDetImpOP ()->optProbFile (), "\n");
d539 1
a539 1
   theSlbvVar = myDetImpOP ()->mySlbvVar (this);
d546 7
a552 7
   fprintf      (myDetImpOP ()->solnFile (), " %8d",   index ());
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", hardLB ());
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", softLB ());
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", slbvVal);
   fprintf      (myDetImpOP ()->solnFile (), " %9.1f", primalValue ());
   writeExtReal (myDetImpOP ()->solnFile (), " %9.1f", " %9s",   hardUB ());
   fprintf      (myDetImpOP ()->solnFile (), "\n");
d562 1
a562 1
         WitDetImpOP *  theDetImpOP):
d564 1
a564 1
      WitBoundedVar (theDetImpOP, thePer),
d568 1
a568 1
   myDetImpOP ()->storeDerived (this);
d602 1
a602 1
   myDetImpOP ()->printItem (myOperation ());
d681 1
a681 1
         WitDetImpOP * theDetImpOP):
d683 1
a683 1
      WitBoundedVar (theDetImpOP, t),
d687 1
a687 1
   myDetImpOP ()->storeDerived (this);
d721 1
a721 1
   myDetImpOP ()->printItem (myMaterial ());
d768 1
a768 1
         WitDetImpOP * theDetImpOP):
d770 1
a770 1
      WitBoundedVar (theDetImpOP, t),
d774 1
a774 1
   myDetImpOP ()->storeDerived (this);
d811 1
a811 1
   myDetImpOP ()->printItem (myDemand ());
d861 1
a861 1
         WitDetImpOP *   theDetImpOP):
d863 1
a863 1
      WitDetVar     (theDetImpOP, theBoundedVar->myPeriod ()),
d867 1
a867 1
   myDetImpOP ()->storeDerived (this);
d901 1
a901 1
   myDetImpOP ()->printItem (myBoundedVar_);
@


1.14
log
@Stochastic Implosion
@
text
@d61 1
a61 1
WitOptProb * WitDetVar::myOptProb ()
@


1.13
log
@Stochastic Implosion
@
text
@d669 1
a669 1
const WitBoundSet * WitExecVar::myBoundSet ()
d756 1
a756 1
const WitBoundSet * WitStockVar::myBoundSet ()
d830 1
a830 1
const WitBoundSet * WitCumShipVar::myBoundSet ()
@


1.12
log
@Stochastic Implosion
@
text
@d196 7
d270 7
d373 7
d461 7
d662 7
d749 7
d823 7
d910 6
@


1.11
log
@Stochastic Implosion
@
text
@a19 1
//    SlbvVar
d24 1
a439 56
// Implementation of class SlbvVar.
//------------------------------------------------------------------------------

WitSlbvVar::WitSlbvVar (
         WitBoundedVar * theBoundedVar,
         WitDetImpOP *   theDetImpOP):

      WitDetVar     (theDetImpOP, theBoundedVar->myPeriod ()),

      myBoundedVar_ (theBoundedVar)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitSlbvVar::~WitSlbvVar ()
   {
   }

//------------------------------------------------------------------------------

double WitSlbvVar::upperBoundVal ()
   {
   return DBL_MAX;
   }

//------------------------------------------------------------------------------

double WitSlbvVar::lowerBoundVal ()
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

const char * WitSlbvVar::classText ()
   {
   return "S. L. B. V.";
   }

//------------------------------------------------------------------------------

void WitSlbvVar::printItem ()
   {
   myDetImpOP ()->printItem (myBoundedVar_);
   }

//------------------------------------------------------------------------------

double WitSlbvVar::boundsCoeffVal ()
   {
   return 1.0;
   }

//------------------------------------------------------------------------------
d805 56
@


1.10
log
@Stochastic Implosion
@
text
@d148 1
a148 1
double WitScrapVar::compUpperBound ()
d155 1
a155 1
double WitScrapVar::compLowerBound ()
d219 1
a219 1
double WitNonSubVar::compUpperBound ()
d226 1
a226 1
double WitNonSubVar::compLowerBound ()
d286 1
a286 1
double WitSubVar::compUpperBound ()
d293 1
a293 1
double WitSubVar::compLowerBound ()
d382 1
a382 1
double WitShipVar::compUpperBound ()
d392 1
a392 1
double WitShipVar::compLowerBound ()
d462 1
a462 1
double WitSlbvVar::compUpperBound ()
d469 1
a469 1
double WitSlbvVar::compLowerBound ()
d607 1
a607 1
double WitExecVar::compUpperBound ()
d614 1
a614 1
double WitExecVar::compLowerBound ()
d719 1
a719 1
double WitStockVar::compUpperBound ()
d726 1
a726 1
double WitStockVar::compLowerBound ()
d799 1
a799 1
double WitCumShipVar::compUpperBound ()
d809 1
a809 1
double WitCumShipVar::compLowerBound ()
@


1.9
log
@Stochastic Implosion
@
text
@d148 14
d219 14
d286 14
d382 11
a392 1
const char * WitShipVar::classText ()
d394 1
a394 1
   return "Shipment";
d399 1
a399 1
void WitShipVar::printItem ()
d401 1
a401 1
   myDetImpOP ()->printItem (myDemand ());
d406 1
a406 1
void WitShipVar::compBounds ()
d408 1
a408 4
   if (myDemand ()->shipLateAllowed ())
      WitOptVar::compBounds ();
   else
      setBoundsTo (0.0, myDemand ()->demandVol ()[myPeriod ()]);
d462 14
a513 10
void WitBoundedVar::compBounds ()
   {
   compSpecBounds ();

   setToMax (bounds ().lower (), hardLB ());
   setToMin (bounds ().upper (), hardUB ());
   }

//------------------------------------------------------------------------------

a583 7

void WitBoundedVar::compSpecBounds ()
   {
   setBoundsTo (0.0, + DBL_MAX);
   }

//------------------------------------------------------------------------------
d607 14
d719 14
d799 17
a860 7

//------------------------------------------------------------------------------

void WitCumShipVar::compSpecBounds ()
   {
   setBoundsTo (0.0, myDemand ()->cumDemandVol ()[myPeriod ()]);
   }
@


1.8
log
@Stochastic Implosion
@
text
@d357 1
a357 1
      WitDetVar::compBounds ();
@


1.7
log
@Stochastic Implosion
@
text
@d75 1
a75 1
double WitDetVar::boundsCoeffVal () const
d82 1
a82 1
double WitDetVar::primaryCoeffVal () const
d89 1
a89 1
double WitDetVar::revCoeffVal () const
d110 1
a110 1
double WitDetVar::subCoeffVal () const
d155 1
a155 1
void WitScrapVar::printItem () const
d169 1
a169 1
double WitScrapVar::primaryCoeffVal () const
d176 1
a176 1
double WitScrapVar::revCoeffVal () const
d212 1
a212 1
void WitNonSubVar::printItem () const
d265 1
a265 1
void WitSubVar::printItem () const
d286 1
a286 1
double WitSubVar::primaryCoeffVal () const
d293 1
a293 1
double WitSubVar::revCoeffVal () const
d311 1
a311 1
double WitSubVar::subCoeffVal () const
d347 1
a347 1
void WitShipVar::printItem () const
d378 1
a378 1
double WitShipVar::primaryCoeffVal () const
d385 1
a385 1
double WitShipVar::revCoeffVal () const
d420 1
a420 1
void WitSlbvVar::printItem () const
d427 1
a427 1
double WitSlbvVar::boundsCoeffVal () const
d461 1
a461 1
double WitBoundedVar::hardLB () const
d468 1
a468 1
double WitBoundedVar::softLB () const
d475 1
a475 1
double WitBoundedVar::hardUB () const
d568 1
a568 1
void WitExecVar::printItem () const
d589 1
a589 1
double WitExecVar::primaryCoeffVal () const
d596 1
a596 1
double WitExecVar::revCoeffVal () const
d630 1
a630 1
const WitBoundSet * WitExecVar::myBoundSet () const
d666 1
a666 1
void WitStockVar::printItem () const
d680 1
a680 1
double WitStockVar::primaryCoeffVal () const
d696 1
a696 1
const WitBoundSet * WitStockVar::myBoundSet () const
d732 1
a732 1
void WitCumShipVar::printItem () const
d746 1
a746 1
const WitBoundSet * WitCumShipVar::myBoundSet () const
d753 1
a753 1
double WitCumShipVar::primaryCoeffVal () const
@


1.6
log
@Stochastic Implosion
@
text
@d61 1
a61 1
WitOptProb * WitDetVar::myOptProb () const
d68 1
a68 1
const WitDetVar * WitDetVar::mandDetVar () const
d96 1
a96 1
double WitDetVar::invCoeffVal () const
d103 1
a103 1
double WitDetVar::servCoeffVal () const
d117 1
a117 1
void WitDetVar::printSource () const
d148 1
a148 1
const char * WitScrapVar::classText () const
d162 1
a162 1
double WitScrapVar::indepInitValue () const
d205 1
a205 1
const char * WitNonSubVar::classText () const
d219 1
a219 1
double WitNonSubVar::indepInitValue () const
d226 1
a226 1
double WitNonSubVar::invCoeffVal () const
d258 1
a258 1
const char * WitSubVar::classText () const
d272 1
a272 1
double WitSubVar::indepInitValue () const
d279 1
a279 1
bool WitSubVar::isAnIntVar () const
d301 1
a301 1
double WitSubVar::invCoeffVal () const
d340 1
a340 1
const char * WitShipVar::classText () const
d364 1
a364 1
double WitShipVar::indepInitValue () const
d371 1
a371 1
bool WitShipVar::isAnIntVar () const
d413 1
a413 1
const char * WitSlbvVar::classText () const
d485 1
a485 1
bool WitBoundedVar::needsAnSlbvVar () const
d561 1
a561 1
const char * WitExecVar::classText () const
d575 1
a575 1
double WitExecVar::indepInitValue () const
d582 1
a582 1
bool WitExecVar::isAnIntVar () const
d603 1
a603 1
double WitExecVar::invCoeffVal () const
d659 1
a659 1
const char * WitStockVar::classText () const
d673 1
a673 1
double WitStockVar::indepInitValue () const
d687 1
a687 1
double WitStockVar::invCoeffVal () const
d725 1
a725 1
const char * WitCumShipVar::classText () const
d739 1
a739 1
double WitCumShipVar::indepInitValue () const
d760 1
a760 1
double WitCumShipVar::servCoeffVal () const
@


1.5
log
@Stochastic Implosion
@
text
@d68 7
@


1.4
log
@Stochastic Implosion
@
text
@d68 42
d272 7
a309 7

bool WitSubVar::isAnIntVar () const
   {
   return mySub ()->intSubVols ();
   }

//------------------------------------------------------------------------------
d364 1
a364 1
double WitShipVar::primaryCoeffVal () const
d366 1
a366 1
   return + myDemand ()->shipReward ()[myPeriod ()];
d371 1
a371 1
double WitShipVar::revCoeffVal () const
d373 1
a373 1
   return + myDemand ()->netRev ();
d378 1
a378 1
bool WitShipVar::isAnIntVar () const
d380 1
a380 1
   return myDemand ()->intShipVols ();
d575 7
a622 7
bool WitExecVar::isAnIntVar () const
   {
   return myOperation ()->intExecVols ();
   }

//------------------------------------------------------------------------------

@


1.3
log
@Stochastic Implosion
@
text
@d29 1
a29 1
#include <OptImp.h>
@


1.2
log
@Stochastic Implosion
@
text
@d182 1
a182 1
      static_cast <double> (myOptImploder ()->nPeriods ());
d250 1
a250 1
      static_cast <double> (myOptImploder ()->nPeriods ());
d438 1
a438 1
   if (myOptImploder ()->myOptComp ()->accAfterSoftLB ())
d569 1
a569 1
   return sum / static_cast <double> (myOptImploder ()->nPeriods ());
d642 1
a642 1
      / static_cast <double> (myOptImploder ()->nPeriods ());
d713 1
a713 1
   if (   myOptImploder ()->myOptComp ()->myObjFunc2 ()->totalServiceScale ()
d718 2
a719 2
      myDemand ()->netRev () /
      myOptImploder ()->myOptComp ()->myObjFunc2 ()->totalServiceScale ();
@


1.1
log
@Stochastic Implosion
@
text
@d45 1
a45 1
WitDetVar::WitDetVar (WitDetImpOP * theDetImpOP, WitPeriod t):
d47 7
a53 1
      WitOptVar (theDetImpOP),
d55 1
a55 1
      myPeriod_ (t)
d61 1
a61 1
WitDetVar::~WitDetVar ()
d63 1
d72 1
a72 1
   myDetImpOP ()->printPeriod (myPeriod ());
d451 5
a455 5
   fprintf      (myOptProb ()->optProbFile (), "%8d",            index ());
   fprintf      (myOptProb ()->optProbFile (), " %9.1f",         hardLB ());
   fprintf      (myOptProb ()->optProbFile (), " %9.1f",         softLB ());
   writeExtReal (myOptProb ()->optProbFile (), " %9.1f", " %9s", hardUB ());
   fprintf      (myOptProb ()->optProbFile (), "\n");
@

