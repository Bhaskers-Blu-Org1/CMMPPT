head	1.48;
access;
symbols
	sce_5_01_20080919:1.45;
locks; strict;
comment	@ * @;


1.48
date	2011.09.28.23.50.30;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2011.09.24.00.28.45;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2011.08.30.20.18.15;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2008.02.13.16.50.44;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2008.02.09.00.40.45;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2008.02.09.00.11.58;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2008.02.08.23.33.47;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2008.02.08.21.38.33;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2008.02.08.00.08.09;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2008.02.07.23.30.11;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2008.02.07.21.49.36;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2008.02.07.18.41.40;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2008.01.30.22.25.43;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2008.01.30.21.07.16;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2008.01.30.18.47.06;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2008.01.29.23.51.49;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2008.01.29.19.50.01;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2008.01.29.00.29.01;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2008.01.28.23.53.37;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2008.01.25.00.19.23;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2008.01.23.21.13.47;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.01.18.22.40.59;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.01.15.23.37.26;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.01.14.22.59.01;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.01.09.20.28.23;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.01.09.19.35.48;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.01.08.20.44.22;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.01.08.19.57.24;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.01.04.20.25.28;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.11.29.16.24.43;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.11.28.23.23.48;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.10.22.19.58.53;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.10.11.19.16.57;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.28.22.08.27;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.21.23.06.09;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.09.04.16.58.02;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.30.19.39.02;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.29.16.24.23;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.21.18.49.19;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.21.18.25.44;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.20.22.41.38;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.20.22.10.27;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.13.23.12.32;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.08.22.47.02;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.31.14.13.47;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.23.15.33.52;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.22.21.55.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.17.22.11.46;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.48
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StageMgrH
#define StageMgrH

//------------------------------------------------------------------------------
// Header file: "StageMgr.h"
//
// Contains the declaration of class StageMgr.
//------------------------------------------------------------------------------

#include <StochAssoc.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// Class StageMgr
//
// "Object Stage Manager"
// Manages the stage data for stochastic implosion in either mode.
//
// Class hierarchy:
//
//    ProbAssoc
//       StageMgr
//          ObjStageMgr
//          PerStageMgr
//
// Implemented in Stage.C.
//------------------------------------------------------------------------------

class WitStageMgr: public WitStochAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitStageMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static WitStageMgr * newStageMgr (WitStochModeMgr *);
         //
         // Constructs a new StageMgr and returns of the appropriate derived
         // class.

      virtual void setObjectStageIdx (WitNode * theNode, int theStageIdx) = 0;
         //
         // In stage-by-object mode, sets the objectStage of theNode to the
         //                          Stage whose index is theStageIdx.
         // In stage-by-period mode, issues a fatal error.

      virtual void setPeriodStageIdx (WitPeriod thePer, int theStageIdx) = 0;
         //
         // In stage-by-object mode, issues a fatal error.
         // In stage-by-period mode, sets the periodStage of thePer to the Stage
         //                          whose index is theStageIdx.

      virtual WitStage * objectStage (WitNode * theNode) = 0;
         //
         // In stage-by-object mode, returns the objectStage of theNode.
         // In stage-by-period mode, issues a fatal error.

      virtual WitStage * periodStage (WitPeriod thePer) = 0;
         //
         // In stage-by-object mode, issues a fatal error.
         // In stage-by-period mode, returns the periodStage of thePer.

      virtual WitStage * myStageOf (WitNode * theNode, WitPeriod thePer) = 0;
         //
         // Returns the stage of either theNode or thePer,
         // depending on the stage-by mode.

      virtual bool includesNode (WitStage * theStage, WitNode * theNode) = 0;
         //
         // Stage-by-object mode: returns true, iff theNode belongs to
         //                       theStage.
         // Stage-by-period mode: returns true, unconditionally.

      virtual bool includesPeriod (WitStage * theStage, WitPeriod thePer) = 0;
         //
         // Stage-by-object mode: returns true, unconditionally.
         // Stage-by-period mode: returns true, iff thePer belongs to
         //                       theStage.

      virtual void writeData () = 0;
         //
         // Writes the section of the input data file for the stage data owned
         // by this ObjStageMgr.

      virtual void displayData () = 0;
         //
         // Does displayData for the stage data owned by this ObjStageMgr.

      virtual void copyAttrsFrom (WitStageMgr * origStageMgr) = 0;
         //
         // Copies the input attributes of origStageMgr into this StochModeMgr.

      virtual void validateData () = 0;
         //
         // Verifies that the stage attributes have valid values for a
         // stochastic implosion.

      virtual void issueAttMisMatchHeadMsg () = 0;
         //
         // Issues the heading msg for an attribute mis-match.

      inline WitStage * myStageFor (int theIdx)
         {
         return myStageVec_[theIdx];
         }

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStageMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      inline WitStage * defStage ()
         {
         return myStageFor (0);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitStageMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitStage> myStageVec_;
         //
         // myStageVec_[theIdx] is the Stage owned by this StageMgr whose index
         // is theIdx.
   };

#endif
@


1.47
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.46
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 17
{
public:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitStageMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static WitStageMgr * newStageMgr (WitStochModeMgr *);
//
// Constructs a new StageMgr and returns of the appropriate derived
// class.
d42 115
a156 100
virtual void setObjectStageIdx (WitNode * theNode, int theStageIdx) = 0;
//
// In stage-by-object mode, sets the objectStage of theNode to the
//                          Stage whose index is theStageIdx.
// In stage-by-period mode, issues a fatal error.

virtual void setPeriodStageIdx (WitPeriod thePer, int theStageIdx) = 0;
//
// In stage-by-object mode, issues a fatal error.
// In stage-by-period mode, sets the periodStage of thePer to the Stage
//                          whose index is theStageIdx.

virtual WitStage * objectStage (WitNode * theNode) = 0;
//
// In stage-by-object mode, returns the objectStage of theNode.
// In stage-by-period mode, issues a fatal error.

virtual WitStage * periodStage (WitPeriod thePer) = 0;
//
// In stage-by-object mode, issues a fatal error.
// In stage-by-period mode, returns the periodStage of thePer.

virtual WitStage * myStageOf (WitNode * theNode, WitPeriod thePer) = 0;
//
// Returns the stage of either theNode or thePer,
// depending on the stage-by mode.

virtual bool includesNode (WitStage * theStage, WitNode * theNode) = 0;
//
// Stage-by-object mode: returns true, iff theNode belongs to
//                       theStage.
// Stage-by-period mode: returns true, unconditionally.

virtual bool includesPeriod (WitStage * theStage, WitPeriod thePer) = 0;
//
// Stage-by-object mode: returns true, unconditionally.
// Stage-by-period mode: returns true, iff thePer belongs to
//                       theStage.

virtual void writeData () = 0;
//
// Writes the section of the input data file for the stage data owned
// by this ObjStageMgr.

virtual void displayData () = 0;
//
// Does displayData for the stage data owned by this ObjStageMgr.

virtual void copyAttrsFrom (WitStageMgr * origStageMgr) = 0;
//
// Copies the input attributes of origStageMgr into this StochModeMgr.

virtual void validateData () = 0;
//
// Verifies that the stage attributes have valid values for a
// stochastic implosion.

virtual void issueAttMisMatchHeadMsg () = 0;
//
// Issues the heading msg for an attribute mis-match.

inline WitStage * myStageFor (int theIdx)
{
return myStageVec_[theIdx];
}

protected:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitStageMgr (WitStochModeMgr *);

//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------

inline WitStage * defStage ()
{
return myStageFor (0);
}

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitStageMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitPtrVec <WitStage> myStageVec_;
//
// myStageVec_[theIdx] is the Stage owned by this StageMgr whose index
// is theIdx.
};
@


1.45
log
@Stochastic Implosion
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d39 17
a55 2
   {
   public:
d57 100
a156 115
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitStageMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static WitStageMgr * newStageMgr (WitStochModeMgr *);
         //
         // Constructs a new StageMgr and returns of the appropriate derived
         // class.

      virtual void setObjectStageIdx (WitNode * theNode, int theStageIdx) = 0;
         //
         // In stage-by-object mode, sets the objectStage of theNode to the
         //                          Stage whose index is theStageIdx.
         // In stage-by-period mode, issues a fatal error.

      virtual void setPeriodStageIdx (WitPeriod thePer, int theStageIdx) = 0;
         //
         // In stage-by-object mode, issues a fatal error.
         // In stage-by-period mode, sets the periodStage of thePer to the Stage
         //                          whose index is theStageIdx.

      virtual WitStage * objectStage (WitNode * theNode) = 0;
         //
         // In stage-by-object mode, returns the objectStage of theNode.
         // In stage-by-period mode, issues a fatal error.

      virtual WitStage * periodStage (WitPeriod thePer) = 0;
         //
         // In stage-by-object mode, issues a fatal error.
         // In stage-by-period mode, returns the periodStage of thePer.

      virtual WitStage * myStageOf (WitNode * theNode, WitPeriod thePer) = 0;
         //
         // Returns the stage of either theNode or thePer,
         // depending on the stage-by mode.

      virtual bool includesNode (WitStage * theStage, WitNode * theNode) = 0;
         //
         // Stage-by-object mode: returns true, iff theNode belongs to
         //                       theStage.
         // Stage-by-period mode: returns true, unconditionally.

      virtual bool includesPeriod (WitStage * theStage, WitPeriod thePer) = 0;
         //
         // Stage-by-object mode: returns true, unconditionally.
         // Stage-by-period mode: returns true, iff thePer belongs to
         //                       theStage.

      virtual void writeData () = 0;
         //
         // Writes the section of the input data file for the stage data owned
         // by this ObjStageMgr.

      virtual void displayData () = 0;
         //
         // Does displayData for the stage data owned by this ObjStageMgr.

      virtual void copyAttrsFrom (WitStageMgr * origStageMgr) = 0;
         //
         // Copies the input attributes of origStageMgr into this StochModeMgr.

      virtual void validateData () = 0;
         //
         // Verifies that the stage attributes have valid values for a
         // stochastic implosion.

      virtual void issueAttMisMatchHeadMsg () = 0;
         //
         // Issues the heading msg for an attribute mis-match.

      inline WitStage * myStageFor (int theIdx)
         {
         return myStageVec_[theIdx];
         }

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStageMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      inline WitStage * defStage ()
         {
         return myStageFor (0);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitStageMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitStage> myStageVec_;
         //
         // myStageVec_[theIdx] is the Stage owned by this StageMgr whose index
         // is theIdx.
   };
@


1.44
log
@Stochastic Implosion
@
text
@d137 1
a137 1
         myStageFor (0);
@


1.43
log
@Stochastic Implosion
@
text
@d57 1
a57 1
      void setObjectStageIdx (WitNode * theNode, int theStageIdx);
d63 1
a63 1
      void setPeriodStageIdx (WitPeriod thePer, int theStageIdx);
a145 10
      virtual void setObjectStage (WitNode * theNode, WitStage * theStage) = 0;
         //
         // In stage-by-object mode, sets the objectStage of theNode to theStage
         // In stage-by-period mode, issues a fatal error.

      virtual void setPeriodStage (WitPeriod thePer, WitStage * theStage) = 0;
         //
         // In stage-by-object mode, issues a fatal error.
         // In stage-by-period mode, sets the periodStage of thePer to theStage.

@


1.42
log
@Srochastic Implosion
@
text
@d57 1
a57 1
      virtual void setObjectStage (WitNode * theNode, WitStage * theStage) = 0;
d59 2
a60 1
         // In stage-by-object mode, sets the objectStage of theNode to theStage
d63 1
a63 1
      virtual void setPeriodStage (WitPeriod thePer, WitStage * theStage) = 0;
d66 2
a67 1
         // In stage-by-period mode, sets the periodStage of thePer to theStage.
d146 10
@


1.41
log
@Stochastic Implosion
@
text
@d77 1
a77 1
      virtual WitStage * stageOf (WitNode * theNode, WitPeriod thePer) = 0;
@


1.40
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <Assoc.h>
d38 1
a38 1
class WitStageMgr: public WitProbAssoc
d52 1
a52 1
      static WitStageMgr * newStageMgr (WitProblem * theProblem);
d127 1
a127 1
      WitStageMgr (WitProblem *);
@


1.39
log
@Stochastic Implosion
@
text
@d62 1
a62 1
      virtual void setPeriodStage (const WitPtrTVec <WitStage> & theVec) = 0;
d65 1
a65 1
         // In stage-by-period mode, sets the periodStage vector to theVec.
@


1.38
log
@Stochastic Implosion
@
text
@d82 1
a82 3
      virtual bool stageIncludesNode (
            WitStage * theStage,
            WitNode *  theNode) = 0;
d88 1
a88 3
      virtual bool stageIncludesPeriod (
            WitStage * theStage,
            WitPeriod  thePer) = 0;
@


1.37
log
@Stochastic Implosion
@
text
@d91 1
a91 1
            WitStage * theStageIdx,
d125 8
d137 1
a137 3
      defaultValue (int defPeriodStageIdx, 0)

      inline WitStage * defObjectStageIdx ()
a141 8
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStageMgr (WitProblem *);

@


1.36
log
@Stochastic Implosion
@
text
@d20 1
d34 2
d57 1
a57 1
      virtual void setObjectStage (WitNode * theNode, int theValue) = 0;
d59 1
a59 1
         // In stage-by-object mode, sets the objectStage of theNode to theValue
d62 1
a62 1
      virtual void setPeriodStage (const int * theValue) = 0;
d65 1
a65 1
         // In stage-by-period mode, sets the periodStage vector to theValue.
d67 1
a67 1
      virtual int objectStage (WitNode * theNode) = 0;
d72 1
a72 1
      virtual int periodStage (WitPeriod thePer) = 0;
d77 1
a77 1
      virtual int stageOf (WitNode * theNode, WitPeriod thePer) = 0;
d82 3
a84 1
      virtual bool stageIncludesNode (int theStage, WitNode * theNode) = 0;
d86 2
a87 1
         // Stage-by-object mode: returns true, iff theNode belongs to theStage.
d90 3
a92 1
      virtual bool stageIncludesPeriod (int theStage, WitPeriod thePer) = 0;
d95 2
a96 1
         // Stage-by-period mode: returns true, iff thePer belongs to theStage.
d120 5
d129 6
a134 2
      defaultValue (int defObjectStage, 0)
      defaultValue (int defPeriodStage, 0)
d151 9
@


1.35
log
@Stochastic Implosion
@
text
@d61 1
a62 1
         // In stage-by-object mode, issues a fatal error.
d71 1
a72 1
         // In stage-by-object mode, issues a fatal error.
d77 11
a87 1
         // depending on the mode.
@


1.34
log
@Stochastic Implosion
@
text
@d54 25
a100 25
      virtual void setObjectStage (WitNode * theNode, int theValue) = 0;
         //
         // In stage-by-object mode, sets the objectStage of theNode to theValue
         // In stage-by-period mode, issues a fatal error.

      virtual void setPeriodStage (const int * theValue) = 0;
         //
         // In stage-by-period mode, sets the periodStage vector to theValue.
         // In stage-by-object mode, issues a fatal error.

      virtual int stageOf (WitNode * theNode, WitPeriod thePer) = 0;
         //
         // Returns the stage of either theNode or thePer,
         // depending on the mode.

      virtual int objectStage (WitNode * theNode) = 0;
         //
         // In stage-by-object mode, returns the objectStage of theNode.
         // In stage-by-period mode, issues a fatal error.

      virtual const WitTVec <int> & periodStage () = 0;
         //
         // In stage-by-period mode, returns the periodStage vector.
         // In stage-by-object mode, issues a fatal error.

@


1.33
log
@Stochastic Implosion
@
text
@d29 4
a32 3
//    StageMgr
//       ObjStageMgr
//       PerStageMgr
a122 4

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
@


1.32
log
@Stochastic Implosion
@
text
@d48 5
d62 1
a62 1
      virtual void copyAttrsFrom (WitStochModeMgr * origStochModeMgr) = 0;
d64 1
a64 2
         // Copies the input attributes of the StageMgr for origStochModeMgr
         // into this StochModeMgr.
d75 10
d90 17
@


1.31
log
@Stochastic Implosion
@
text
@d71 1
a71 1
      virtual bool nodeBelongsToStage (WitNode * theNode, int theStage) = 0;
d73 2
a74 9
         // Returns true, iff theNode belongs to theStage, i.e.:
         // stage-by-object mode is in effect and the objectStage of theNode is
         // theStage.

      virtual bool perBelongsToStage (WitPeriod thePer, int theStage) = 0;
         //
         // Returns true, iff thePer belongs to theStage, i.e.:
         // stage-by-period mode is in effect and the periodStage of thePer is
         // theStage.
@


1.30
log
@Stochastic Implosion
@
text
@d73 3
a75 2
         // Returns true, iff theNode belongs theStage, i.e.:
         // stage-by-object mode is in effect and theNode belongs to theStage.
d79 3
a81 10
         // Returns true, iff thePer belongs theStage, i.e.:
         // stage-by-period mode is in effect and thePer belongs to theStage.

      virtual bool nodeIntersectsStage (WitNode * theNode, int theStage) = 0;
         //
         // Returns true, iff theNode "intersects" theStage, i.e.
         // either:
         //    stage-by-object mode is in effect and theNode belongs to theStage
         // or:
         //    stage-by-period mode is in effect.
@


1.29
log
@Stochastic Implosion
@
text
@d62 1
a62 1
      virtual void validateData ();
a65 1
         // The default implementation does nothing.
d71 10
d83 5
a87 2
         // Returns true, iff theNode "intersects" theStage, i.e., constraints
         // and variables are to generated for theNode in theStage.
@


1.28
log
@Stochastic Implosion
@
text
@d72 1
a72 1
      virtual bool intersectsStage (int theStage, WitNode * theNode) = 0;
@


1.27
log
@Stochastic Implosion
@
text
@d72 5
@


1.26
log
@Stochastic Implosion
@
text
@d64 1
a64 1
         // Verifies that the stageIndex attributes have valid values for a
@


1.25
log
@Stochastic Implosion
@
text
@d68 4
@


1.24
log
@Stochastic Implosion
@
text
@d62 1
a62 1
      virtual void validateData () = 0;
d66 1
@


1.23
log
@Stochastic Implosion
@
text
@d26 6
a31 1
// (Abstract base class.)
@


1.22
log
@Stochastic Implosion
@
text
@d15 2
d19 64
@


1.21
log
@Stochastic Implosion
@
text
@a14 2
//
// Contains the declaration of class StageMgr.
a16 118
#include <Assoc.h>
#include <Mapping.h>

//------------------------------------------------------------------------------
// Class StageMgr
//
// "Stage Manager"
// Manages the stage data for stochastic implosion.
//
// Implemented in StochMode.C.
//------------------------------------------------------------------------------

class WitStageMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStageMgr (WitStochModeMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStageMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void writeData ();
         //
         // Writes the section of the input data file for the stage data owned
         // by this StageMgr.

      void displayData ();
         //
         // Does displayData for the stage data owned by this StageMgr.

      void copyAttrsFrom (WitStageMgr * origStageMgr);
         //
         // Copies the input attributes of origStageMgr into this StageMgr.

      void validateData ();
         //
         // Verifies that the stageIndex attributes have valid values for a
         // stochastic implosion.
         // Verifies that there is no BOM entry, substitute, or BOP entry
         // connecting a stage 1 Operation to a stage 0 part.

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (int defStageIndex, 0)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setStageIndex (WitNode * theNode, int theValue);
         //
         // Sets stageIndex_ (theNode) to theValue.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      int stageIndex (WitNode      *);
      int stageIndex (WitDemand    *);
      int stageIndex (WitBillEntry *);
      int stageIndex (WitBoundSet  *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void writeStageIndex (WitNode * theNode, const char * nodeTypeName);
         //
         // Writes stageIndex for theNode to the input data file.
         // objTypeName indicates the type the theNode.

      void validateBomEnts ();
         //
         // Verifies that there is no BOM entry connecting a stage 1 Operation
         // to a stage 0 part.

      void validateSubs ();
         //
         // Verifies that there is no substitute connecting a stage 1 Operation
         // to a stage 0 part.

      void validateBopEnts ();
         //
         // Verifies that there is no BOP entry connecting a stage 1 Operation
         // to a stage 0 part.

      noCopyCtorAssign (WitStageMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochModeMgr * const myStochModeMgr_;
         //
         // the StochModeMgr that owns this StageMgr.

      WitMapping <WitNode, int> stageIndex_;
         //
         // stageIndex_ (theNode) is the index of the stage to which theNode
         // belongs.
         // Valid values: 0 and 1.
   };

@


1.20
log
@Stochastic Implosion
@
text
@d19 1
@


1.19
log
@Stochastic Implosion
@
text
@d67 2
d88 2
a89 2
      int stageIndex (WitNode *);
      int stageIndex (WitDemand *);
d91 1
d106 2
a107 2
         // Verifies that all BomEntries connect Nodes whose stageIndex
         // attributes have a valid relationship.
d111 2
a112 2
         // Verifies that all SubEntries connect Nodes whose stageIndex
         // attributes have a valid relationship.
d116 2
a117 2
         // Verifies that all BopEntries connect Nodes whose stageIndex
         // attributes have a valid relationship.
@


1.18
log
@Stochastic Implosion
@
text
@a67 5
      int stageIndex (WitDelComp * theDelComp);
         //
         // Returns the stage index for theDelComp, based in the derived class
         // to which it belongs.

d87 2
@


1.17
log
@Stochastic Implosion
@
text
@d68 5
@


1.16
log
@Stochastic Implosion
@
text
@d65 1
a65 1
         // Verifies that the stageNo attributes have valid values for a
d72 1
a72 1
      defaultValue (int defStageNo, 0)
d78 1
a78 1
      void setStageNo (WitNode * theNode, int theValue);
d80 1
a80 1
         // Sets stageNo_ (theNode) to theValue.
d86 1
a86 1
      int stageNo (WitNode *);
d94 1
a94 1
      void writeStageNo (WitNode * theNode, const char * nodeTypeName);
d96 1
a96 1
         // Writes stageNo for theNode to the input data file.
d101 2
a102 2
         // Verifies that all BomEntries connect Nodes whose stageNo attributes
         // have a valid relationship.
d106 2
a107 2
         // Verifies that all SubEntries connect Nodes whose stageNo attributes
         // have a valid relationship.
d111 2
a112 2
         // Verifies that all BopEntries connect Nodes whose stageNo attributes
         // have a valid relationship.
d124 1
a124 1
      WitMapping <WitNode, int> stageNo_;
d126 2
a127 1
         // stageNo_ (theNode) is the stage number of theNode.
@


1.15
log
@Stochastic Implosion
@
text
@d86 1
a86 8
      //------------------------------------------------------------------------
      // StageNo functions.
      // Each of these functions returns the stage # for its argument.
      //------------------------------------------------------------------------

      int stageNo (WitNode   *);
      int stageNo (WitDemand *);
      int stageNo (WitBoundSet *);
@


1.14
log
@Stochastic Implosion
@
text
@d93 1
@


1.13
log
@Stochastic Implosion
@
text
@a18 1
#include <Node.h>
a67 5
      void checkAttsInStage0 (WitScenario *, WitScenario *);
         //
         // Verifies that all scenario-specific attributes of stage 0 objects
         // match between the two Scenarios.

d86 7
a92 4
      inline int stageNo (WitNode * theNode)
         {
         return stageNo_ (theNode);
         }
@


1.12
log
@Stochastic Implosion
@
text
@d19 1
@


1.11
log
@Stochastic Implosion
@
text
@a72 5
      void verifyAllStage1 ();
         //
         // Verifies that the stageNo attributes are set to 1.
         // (This is a temporary requirement.)

@


1.10
log
@Stochastic Implosion
@
text
@d65 1
a65 1
         // Verifies that the recourseStage attributes have valid values for a
d68 1
a68 1
      void checkNonRecAtts (WitScenario *, WitScenario *);
d70 2
a71 2
         // Verifies that all scenario-specific attributes of non-recourse
         // objects match between the two Scenarios.
d73 1
a73 1
      void verifyAllRecourse ();
d75 1
a75 1
         // Verifies that the recourseStage attributes are set to true.
d82 1
a82 1
      defaultValue (bool defRecourseStage, false)
d88 1
a88 1
      void setRecourseStage (WitNode * theNode, bool theValue);
d90 1
a90 1
         // Sets recourseStage_ (theNode) to theValue.
d96 4
a99 1
      accessFunc2 (const WitMapping <WitNode, bool> &, recourseStage)
d107 1
a107 1
      void writeRecourseStage (WitNode * theNode, const char * nodeTypeName);
d109 1
a109 1
         // Writes recourseStage for theNode to the input data file.
d114 2
a115 2
         // Verifies that all BomEntries connect Nodes whose recourseStage
         // attributes have a valid relationship.
d119 2
a120 2
         // Verifies that all SubEntries connect Nodes whose recourseStage
         // attributes have a valid relationship.
d124 2
a125 2
         // Verifies that all BopEntries connect Nodes whose recourseStage
         // attributes have a valid relationship.
d137 1
a137 1
      WitMapping <WitNode, bool> recourseStage_;
d139 2
a140 2
         // recourseStage_ (theNode) is true, iff theNode is in the recourse
         // stage.
@


1.9
log
@Stochastic Implosion
@
text
@d70 2
a71 2
         // Verifies that all stochastic attributes of non-recourse objects
         // match between the two Scenarios.
@


1.8
log
@Stochastic Implosion
@
text
@d68 10
a123 5
      void verifyAllRecourse ();
         //
         // Verifies that the recourseStage attributes are set to true.
         // (This is a temporary requirement.)

@


1.7
log
@Stochastic Implosion
@
text
@a58 4
      void display (WitNode * theNode);
         //
         // Displays the stochastic input and preprocessing data for theNode.

@


1.6
log
@Stochastic Implosion
@
text
@d55 4
@


1.5
log
@Stochastic Implosion
@
text
@d38 1
a38 1
      WitStageMgr (WitProblem *);
d125 4
@


1.4
log
@Stochastic Implosion
@
text
@d27 1
a27 1
// Implemented in StochImp.C.
@


1.3
log
@Stochastic Implosion
@
text
@d86 1
a86 4
      inline bool recourseStage (WitNode * theNode)
         {
         return recourseStage_ (theNode);
         }
@


1.2
log
@Stochastic Implosion
@
text
@d102 1
a102 1
      void validateBillEntries ();
d104 11
a114 1
         // Verifies that all BillEntries connect Nodes whose recourseStage
@


1.1
log
@Stochastic Implosion
@
text
@d102 10
@

