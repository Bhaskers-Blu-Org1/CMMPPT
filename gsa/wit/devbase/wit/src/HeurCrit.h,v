head	1.23;
access;
symbols
	sce_5_01_20080919:1.19
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.14
	sce_4_05_20040511:1.12
	sce_4_00_20040201:1.12
	nextGenBranch:1.11.0.2
	nextGenRoot:1.11
	sce_3_30_20030627:1.11
	EndRw-branch:1.10.0.4
	Root-of-EndRw:1.10
	rwToStl:1.10.0.2
	latest_sce_3_10_20010924:1.5.0.2
	sce_3_10_20010924:1.5
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2011.09.28.23.49.25;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.09.24.00.27.45;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.08.30.20.17.33;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.03.16.22.42.25;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.02.27.21.03.04;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.02.27.19.59.31;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.13.23.40.13;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.34.00;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.09.30.21.57.55;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.02.08.22.33.25;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.03.21.20.29;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.15.23.22.32;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.22.18.29;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.06.18.53.38;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.05.19.31.33;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.07.20.14.57;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.01.14.25.56;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.18.14.02.34;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.25.16.08.16;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.41;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.19.22.35.31;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.56;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef HeurCritH
#define HeurCritH

//------------------------------------------------------------------------------
// Header file: "HeurCrit.h"
//
// Contains the declaration of class HeurCritList.
//------------------------------------------------------------------------------

#include <GlobalComp.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class HeurCritList
//
// Responsible for the critical part list in heuristic allocation.
//
// Implemented in HeurAll.C.
//------------------------------------------------------------------------------

class WitHeurCritList: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurCritList (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurCritList ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void initSoln ();
         //
         // Resets the critical list.

      void recFundShortage (WitPart * thePart, WitPeriod thePer);
         //
         // Records a fundamental shortage of thePart in thePer.

      void recRestShortage ();
         //
         // Records the occurrance of a restriction shortage (from pen-exec).

      void postCmqs ();
         //
         // Takes action appropriate at the conclusion of
         // HeurAtor::commitMaxQtySel ().

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitHeurCritList);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPart * culpritPart_;
         //
         // Latest culprit found

      WitPeriod culpritPeriod_;
         //
         // Period in which culprit is short

      WitSchedule <WitPart, bool> listed_;
         //
         // thePart->listed_[t] == true iff thePart is in the critical part
         // list for period t.
   };

#endif
@


1.22
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.21
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d31 2
a32 2
{
public:
d34 3
a36 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d38 1
a38 1
WitHeurCritList (WitProblem *);
d40 3
a42 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d44 1
a44 1
~WitHeurCritList ();
d46 3
a48 3
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------
d50 3
a52 3
void initSoln ();
//
// Resets the critical list.
d54 3
a56 3
void recFundShortage (WitPart * thePart, WitPeriod thePer);
//
// Records a fundamental shortage of thePart in thePer.
d58 3
a60 3
void recRestShortage ();
//
// Records the occurrance of a restriction shortage (from pen-exec).
d62 4
a65 4
void postCmqs ();
//
// Takes action appropriate at the conclusion of
// HeurAtor::commitMaxQtySel ().
d67 1
a67 1
private:
d69 3
a71 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d73 1
a73 1
noCopyCtorAssign (WitHeurCritList);
d75 3
a77 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d79 3
a81 3
WitPart * culpritPart_;
//
// Latest culprit found
d83 3
a85 3
WitPeriod culpritPeriod_;
//
// Period in which culprit is short
d87 5
a91 5
WitSchedule <WitPart, bool> listed_;
//
// thePart->listed_[t] == true iff thePart is in the critical part
// list for period t.
};
@


1.20
log
@Changed source file names:
   Global.h ==> GlobalComp.h
   Global.C ==> GlobalComp.C
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d31 2
a32 2
   {
   public:
d34 3
a36 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d38 1
a38 1
      WitHeurCritList (WitProblem *);
d40 3
a42 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d44 1
a44 1
      ~WitHeurCritList ();
d46 3
a48 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d50 3
a52 3
      void initSoln ();
         //
         // Resets the critical list.
d54 3
a56 3
      void recFundShortage (WitPart * thePart, WitPeriod thePer);
         //
         // Records a fundamental shortage of thePart in thePer.
d58 3
a60 3
      void recRestShortage ();
         //
         // Records the occurrance of a restriction shortage (from pen-exec).
d62 4
a65 4
      void postCmqs ();
         //
         // Takes action appropriate at the conclusion of
         // HeurAtor::commitMaxQtySel ().
d67 1
a67 1
   private:
d69 3
a71 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d73 1
a73 1
      noCopyCtorAssign (WitHeurCritList);
d75 3
a77 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d79 3
a81 3
      WitPart * culpritPart_;
         //
         // Latest culprit found
d83 3
a85 3
      WitPeriod culpritPeriod_;
         //
         // Period in which culprit is short
d87 5
a91 5
      WitSchedule <WitPart, bool> listed_;
         //
         // thePart->listed_[t] == true iff thePart is in the critical part
         // list for period t.
   };
@


1.19
log
@[disallowed backlog]
@
text
@d19 1
a19 1
#include <Global.h>
@


1.18
log
@Rescinded all changed made since 1/31/07.
@
text
@a66 9
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (
         WitList <WitPartPer> WitGlobalComp::* criticalListArg);

a78 13
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // theGlobalComp->*criticalList_ == theGlobalComp->criticalList_.
      //------------------------------------------------------------------------

      static WitList <WitPartPer> WitGlobalComp::* criticalList_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.17
log
@[disallowed backlog]
@
text
@a100 4
//    WitList <WitPartPer> & criticalLisN_;
         //
         // Reference to myGlobalComp ()->criticalList_.

@


1.16
log
@Updated the copyright date on all source files.
@
text
@d101 4
@


1.15
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@Pegged Critical List.
@
text
@d38 1
a38 1
      WitHeurCritList (WitProblem *, WitList <WitPartPer> & criticalListArg);
d67 9
d88 12
a99 3
      WitList <WitPartPer> & criticalList_;
         //
         // Ref to GlobalComp::criticalList_.
@


1.13
log
@pegged Critical List.
@
text
@d50 5
a54 1
      void setCulprit (WitPart * thePart, WitPeriod thePer);
d56 1
a56 1
         // Identifies thePart and thePer as the culprit.
d58 1
a58 1
      void appendCulprit ();
d60 1
a60 1
         // Appends the culprit to the critical part list, if appropriate.
d62 1
a62 1
      void initSoln ();
d64 2
a65 1
         // Resets the critical list.
@


1.12
log
@Continued implementation of PIP.
@
text
@d38 1
a38 3
      WitHeurCritList (
            WitProblem *, 
            WitRef <WitList <WitPartPer> > & criticalListArg);
d74 1
a74 1
      WitRef <WitList <WitPartPer> > & criticalList_;
@


1.11
log
@Internal changes.
@
text
@d40 1
a40 1
            WitRef <WitList <WitDatedPart> > & criticalListArg);
d76 1
a76 1
      WitRef <WitList <WitDatedPart> > & criticalList_;
@


1.10
log
@Continued implementation of Single-Source.
@
text
@d88 1
a88 1
      WitSchedule <WitPart, WitBoolean> listed_;
d90 1
a90 1
         // thePart->listed_[t] == TRUE iff thePart is in the critical part
@


1.9
log
@Continued implementation of single-source.
@
text
@d20 1
d88 1
a88 1
      WitSchedule <WitPart, WitBoolean> & listed_;
@


1.8
log
@Continued preliminary work on single source.
@
text
@a19 1
#include <AccFlag.h>
d38 2
a39 5
            WitProblem * theProblem,
            WitAccFlag * theAccFlag);
         //
         // ProbAssoc  <<< theProblem.
         // myAccFlag_ <-- theAccFlag.
a68 10
      //------------------------------------------------------------------------
      // Component data access functions.
      //------------------------------------------------------------------------

      refAccess (WitGlobalComp, WitList <WitDatedPart>, criticalList)

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

d75 1
a75 1
      WitAccFlag * myAccFlag_;
d77 1
a77 1
         // Ptr to HeurAllMgr::myAccFlag_.
@


1.7
log
@Preliminary work on single source.
@
text
@a18 1
#include <Schedule.h>
d101 1
a101 1
      WitSchedule (WitPart, WitBoolean) listed_;
@


1.6
log
@Began implementation of object iteration.
@
text
@d78 1
a78 1
      refAccess (WitGlobalComp, WitList (WitDatedPart), criticalList)
@


1.5
log
@Initial implementation of pegging.
@
text
@d20 1
@


1.4
log
@Refactoring for selection splitting.
@
text
@d27 1
a27 1
// Implemented in HeurAllS.C.
d91 1
a91 1
         // Ptr to HeurAllocator::myAccFlag_.
@


1.3
log
@Continued implementation of stock re-allocation.
@
text
@d83 1
a83 3
      copyCtorAndAssignment (WitHeurCritList);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d27 1
a27 1
// Implemented in HeurAll.C.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
