head	1.21;
access;
symbols
	sce_5_01_20080919:1.18
	latest_sce_4_20_20060523:1.18.0.2
	sce_4_20_20060523:1.18
	latest_sce4_20_OSL:1.17.0.2
	sce_4_20_OSL:1.17
	sce_410_withVa:1.17
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.8
	nextGenBranch:1.8.0.2
	nextGenRoot:1.8
	sce_3_30_20030627:1.7;
locks; strict;
comment	@ * @;


1.21
date	2011.09.28.23.49.57;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.09.24.00.28.20;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.08.30.20.17.58;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.02.17.34.09;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.02.22.56.28;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.18.20.03.28;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.05.19.32.45;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.31.18.28.28;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.30.18.31.00;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.10.16.49.44;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.06.22.38.16;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.29.21.26.23;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.10.22.58.17;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.28.20.47.37;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.27.19.20.21;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.25.22.17.08;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.25.19.16.55;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.16.23.58.11;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.13.23.06.31;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.31.21.28.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef PrCandH
#define PrCandH

//------------------------------------------------------------------------------
// Header file: "PrCand.h"
//
// Contains the declaration of class PrCand.
//------------------------------------------------------------------------------

#include <SelCand.h>
#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class PrCand
//
// "Proportionate Routing Candidate"
// Represents a candidate for selection by proportionate routing.
// In this case, the selection candidate specifies the set of RtCands that are
// to be active for proportionate routing at some RtSite in some period.
//
// Class Hierarchy:
//
// SelCand
//    PrCand
//
// Implemented in PropRtg.C.
//------------------------------------------------------------------------------

class WitPrCand: public WitSelCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrCand (
            WitPrCoord * thePrCoord,
            WitRtSite *  theRtSite,
            WitPeriod    thePer);
         //
         // Constructs a PrCand specifying the set of RtCands that are active
         // for proportionate routing at theRtSite in thePer, according to
         // thePrCoord.

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrCand ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void prtID     ();
      virtual void getPrData (WitRtCandStack &);
         //
         // Overrides from class SelCand.

      noCopyCtorAssign (WitPrCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitRtCand> actRtCands_;
         //
         // The set of RtCands that are to be active for proportionate routing
         // at the RtSite in the period at which this PrCand is selected.
   };

#endif
@


1.20
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.19
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d39 2
a40 23
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPrCand (
WitPrCoord * thePrCoord,
WitRtSite *  theRtSite,
WitPeriod    thePer);
//
// Constructs a PrCand specifying the set of RtCands that are active
// for proportionate routing at theRtSite in thePer, according to
// thePrCoord.

private:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitPrCand ();
d42 41
a82 20
//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------

virtual void prtID     ();
virtual void getPrData (WitRtCandStack &);
//
// Overrides from class SelCand.

noCopyCtorAssign (WitPrCand);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitObjStack <WitRtCand> actRtCands_;
//
// The set of RtCands that are to be active for proportionate routing
// at the RtSite in the period at which this PrCand is selected.
};
@


1.18
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d39 23
a61 2
   {
   public:
d63 20
a82 41
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrCand (
            WitPrCoord * thePrCoord,
            WitRtSite *  theRtSite,
            WitPeriod    thePer);
         //
         // Constructs a PrCand specifying the set of RtCands that are active
         // for proportionate routing at theRtSite in thePer, according to
         // thePrCoord.

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrCand ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void prtID     ();
      virtual void getPrData (WitRtCandStack &);
         //
         // Overrides from class SelCand.

      noCopyCtorAssign (WitPrCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitRtCand> actRtCands_;
         //
         // The set of RtCands that are to be active for proportionate routing
         // at the RtSite in the period at which this PrCand is selected.
   };
@


1.17
log
@Vector PropRtg.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.16
log
@Low-Pri Prop-Rt.
@
text
@d35 1
a35 1
// Implemented in PropRt.C.
@


1.15
log
@Low-Pri Prop-Rt.
@
text
@a28 1
// New Version
d80 1
a80 1
         // The set of RtCands that are to be active for Proportionate Routing
@


1.14
log
@Low-Pri Prop-Rt.
@
text
@d68 2
a69 1
      virtual void prtID ();
@


1.13
log
@Low-Pri Prop-Rt.
@
text
@d28 1
a28 2
// to be active for proportionate routing at a particular RtSite in a particular
// period.
d47 8
a54 1
      WitPrCand (WitPrCoord *, WitRtSite *, WitPeriod);
d68 1
a68 2
      virtual void prtID            ();
      virtual void restoreSelToThis ();
a77 14
      WitPrCoord * const myPrCoord_;
         //
         // The PrCoord for this PrCand.

      WitRtSite * const myRtSite_;
         //
         // The RtSite at which this PrCand represents a selection candidate for
         // Proportionate Routing

      const WitPeriod myPer_;
         //
         // The period at which this PrCand represents a selection candidate for
         // Proportionate Routing

d80 2
a81 2
         // The set of RtCands that are to be active for proprtionate Routing
         // at myRtSite in myPer_ which this PrCand is selected.
@


1.12
log
@Low-Pri Prop-Rt.
@
text
@a62 1
      virtual void updateToCurSel   ();
@


1.11
log
@Low-Pri Prop-Rt.
@
text
@d15 2
d19 75
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@d10 2
a11 2
#ifndef SkeletonH
#define SkeletonH
d14 1
a14 1
// Header file: "Skeleton.h"
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@d10 2
a11 2
#ifndef PrCandH
#define PrCandH
d14 1
a14 3
// Header file: "PrCand.h"
//
// Contains the declaration of class PrCand.
a16 74
#include <SelCand.h>

//------------------------------------------------------------------------------
// Class PrCand
//
// "Proportionate Routing Candidate"
// Represents a candidate for selection by proportionate routing.
// In this case, the selection candidate specifies whether the RtCand for the
// PrPt that selects this PrCand is currently active for proportionate
// explosions from the corresponding RtSite in the corresponding period.
//
// Class Hierarchy:
//
// SelCand
//    PrCand
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitPrCand: public WitSelCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrCand (bool activeVal, bool potActiveVal, WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrCand ();

      //------------------------------------------------------------------------
      // Overrides from class SelCand.
      //------------------------------------------------------------------------

      virtual void        prtID    ();
      virtual WitPrCand * myPrCand ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, active)
      accessFunc (bool, potActive)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPrCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const bool active_;
         //
         // For any PrPt that selects this PrCand, the PrPt's RtCand is
         // currently active for proportionate explosions in the PtPt's period,
         // iff active_ is true.

      const bool potActive_;
         //
         // For any PrPt that selects this PrCand, the PrPt's RtCand is
         // considered to be potentially active for proportionate explosions in 
         // the PtPt's period, iff potActive_ is true.
   };

@


1.8
log
@Added some optional warnings on Linux.
@
text
@d46 1
a46 3
      WitPrCand (bool activeVal, WitProblem *);
         //
         // active_ <-- activeVal
d66 1
d85 6
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@d54 1
a54 1
      ~WitPrCand ();
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d15 2
d18 69
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@a14 2
//
// Contains the declaration of class PrCand.
a15 69

#include <SelCand.h>

//------------------------------------------------------------------------------
// Class PrCand
//
// "Proportionate Routing Candidate"
// Represents a candidate for selection by proportionate routing.
// In this case, the selection candidate specifies whether the OrCand for the
// PrPt that selects it is currently active for proportionate explosions from
// the corresponding OrSite in the corresponding period.
//
// Class Hierarchy:
//
// SelCand
//    PrCand
//
// Implemented in PropRt.C.
//------------------------------------------------------------------------------

class WitPrCand: public WitSelCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrCand (bool activeVal, WitProblem *);
         //
         // active_ <-- activeVal

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrCand ();

      //------------------------------------------------------------------------
      // Overrides from class SelCand.
      //------------------------------------------------------------------------

      virtual void        prtID    ();
      virtual WitPrCand * myPrCand ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, active)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPrCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const bool active_;
         //
         // For any PrPt that selects this PrCand, the PrPt's OrCand is
         // currently active for proportionate explosions in the PtPt's period,
         // iff active_ is true.
   };
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d26 1
a26 1
// In this case, the selection candidate specifies whether the RtCand for the
d28 1
a28 1
// the corresponding RtSite in the corresponding period.
d83 1
a83 1
         // For any PrPt that selects this PrCand, the PrPt's RtCand is
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d27 2
a28 2
// PrPt that selects it is currently included in or excluded from proportionate
// explosions from the corresponding RtSite in the corresponding period.
d46 1
a46 1
      WitPrCand (bool includedVal, WitProblem *);
d48 1
a48 1
         // included_ <-- includedVal
d67 1
a67 1
      accessFunc (bool, included)
d81 1
a81 1
      const bool included_;
d83 3
a85 3
         // If true, then the RtCand for any PrPt that selects this PrCand is
         // to be included in proportionate explosions in the PrPt's period.
         // If false, the RtCand is to be excluded.
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d46 1
a46 1
      WitPrCand (bool includedVal, WitPrMgr * thePrMgr);
a48 1
         // SelCand   <<< thePrMgr
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d26 1
a26 1
// In this case, the selection candidate specifies whether the BopEntry for the
d28 1
a28 1
// explosions from the corresponding Part in the corresponding expPer.
d84 3
a86 3
         // If true, then the BopEntry for any PrPt that selects this PrCand is
         // to be included in proportionate explosions in the PrPt's expPer.
         // If false, the BopEntry is to be excluded.
@

