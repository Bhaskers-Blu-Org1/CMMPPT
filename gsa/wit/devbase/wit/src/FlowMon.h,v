head	1.7;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.4.0.2
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_410_withVa:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.4
	Root-of-EndRw:1.2
	rwToStl:1.2.0.2;
locks; strict;
comment	@ * @;


1.7
date	2011.09.28.23.49.23;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.24.00.27.42;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.30.20.17.31;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.02.17.33.58;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.02.22.18.27;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.02.19.04.12;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.15.21.21.35;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef FlowMonH
#define FlowMonH

//------------------------------------------------------------------------------
// Header file: "FlowMon.h"
//
// Contains the declaration of class FlowMonitor.
//------------------------------------------------------------------------------

#include <PairStack.h>

//------------------------------------------------------------------------------
// Class FlowMonitor
//
// Responsible for flow monitoring for selection splitting.
// 
// Implemented in SelSplit.C.
//------------------------------------------------------------------------------

class WitFlowMonitor: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFlowMonitor (WitHeurAtor *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitFlowMonitor ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void activate ();
         //
         // Activates flow-monitoring.

      void deactivate ();
         //
         // Deactivates flow-monitoring.

      void recordFlow (WitSelPt * theSelPt, double incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // thru theSelPt.
         // No-op, if this FlowMonitor is not currently active.

      void postTempCommit (bool success);
         //
         // Performs the actions to be taken for flow monitoring, just
         // after a temp-commit.

      bool splitIsNeeded (
            WitSelPt * theSelPt, 
            bool       compToSuccess,
            double &   flowGap);
         //
         // Returns true, iff the selection needs to be split at theSelPt. 
         // If compToSuccess is true, the failing flow will be compared to the
         // successful flow; otherwise it will be compared to 0.
         // On Return, flowGap will be the flow gap at theSelPt.
         // Valid only in active mode.

      void setTotFlowVols ();
         //
         // Sets the totFlowVols of the SplitPts whose flow is being measured,
         // according to the most recent successful tempCommit.
         // Valid only in active mode.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      double flowThruSelPt (
            WitSelPt *               theSelPt,
            const WitSelPtDblStack & theFlowPairs);
         //
         // Returns the total flow through theSelPt, that's recorded in
         // theFlowPairs.

      noCopyCtorAssign (WitFlowMonitor);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitHeurAtor * myHeurAtor_;
         //
         // The HeurAtor for this FlowMonitor.

      bool active_;
         //
         // true, iff this FlowMonitor Splitter is currently active.

      WitSelPtDblStack curFlowPairs_;
         //
         // For each SelPt, theSelPt the total flowVol thru theSelPt during the
         // current temp-commit is given by:
         //
         //    sum over (theSelPt, incFlowVol) in curFlowPairs_ of incFlowVol.

      WitSelPtDblStack okFlowPairs_;
         //
         // Same as curFlowPairs_, but for the most recent successful 
         // temp-commit, if any.

      WitSelPtDblStack failFlowPairs_;
         //
         // Same as curFlowPairs_, but for the most recent failing temp-commit,
         // if any.
   };

#endif
@


1.6
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.5
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d25 1
a25 1
//
d30 2
a31 77
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitFlowMonitor (WitHeurAtor *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitFlowMonitor ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void activate ();
//
// Activates flow-monitoring.

void deactivate ();
//
// Deactivates flow-monitoring.

void recordFlow (WitSelPt * theSelPt, double incFlowVol);
//
// Records the fact that incFlowVol additional units are being flowed
// thru theSelPt.
// No-op, if this FlowMonitor is not currently active.

void postTempCommit (bool success);
//
// Performs the actions to be taken for flow monitoring, just
// after a temp-commit.

bool splitIsNeeded (
WitSelPt * theSelPt,
bool       compToSuccess,
double &   flowGap);
//
// Returns true, iff the selection needs to be split at theSelPt.
// If compToSuccess is true, the failing flow will be compared to the
// successful flow; otherwise it will be compared to 0.
// On Return, flowGap will be the flow gap at theSelPt.
// Valid only in active mode.

void setTotFlowVols ();
//
// Sets the totFlowVols of the SplitPts whose flow is being measured,
// according to the most recent successful tempCommit.
// Valid only in active mode.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

double flowThruSelPt (
WitSelPt *               theSelPt,
const WitSelPtDblStack & theFlowPairs);
//
// Returns the total flow through theSelPt, that's recorded in
// theFlowPairs.

noCopyCtorAssign (WitFlowMonitor);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitHeurAtor * myHeurAtor_;
//
// The HeurAtor for this FlowMonitor.
d33 96
a128 21
bool active_;
//
// true, iff this FlowMonitor Splitter is currently active.

WitSelPtDblStack curFlowPairs_;
//
// For each SelPt, theSelPt the total flowVol thru theSelPt during the
// current temp-commit is given by:
//
//    sum over (theSelPt, incFlowVol) in curFlowPairs_ of incFlowVol.

WitSelPtDblStack okFlowPairs_;
//
// Same as curFlowPairs_, but for the most recent successful
// temp-commit, if any.

WitSelPtDblStack failFlowPairs_;
//
// Same as curFlowPairs_, but for the most recent failing temp-commit,
// if any.
};
@


1.4
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d25 1
a25 1
// 
d30 77
a106 2
   {
   public:
d108 21
a128 96
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFlowMonitor (WitHeurAtor *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitFlowMonitor ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void activate ();
         //
         // Activates flow-monitoring.

      void deactivate ();
         //
         // Deactivates flow-monitoring.

      void recordFlow (WitSelPt * theSelPt, double incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // thru theSelPt.
         // No-op, if this FlowMonitor is not currently active.

      void postTempCommit (bool success);
         //
         // Performs the actions to be taken for flow monitoring, just
         // after a temp-commit.

      bool splitIsNeeded (
            WitSelPt * theSelPt, 
            bool       compToSuccess,
            double &   flowGap);
         //
         // Returns true, iff the selection needs to be split at theSelPt. 
         // If compToSuccess is true, the failing flow will be compared to the
         // successful flow; otherwise it will be compared to 0.
         // On Return, flowGap will be the flow gap at theSelPt.
         // Valid only in active mode.

      void setTotFlowVols ();
         //
         // Sets the totFlowVols of the SplitPts whose flow is being measured,
         // according to the most recent successful tempCommit.
         // Valid only in active mode.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      double flowThruSelPt (
            WitSelPt *               theSelPt,
            const WitSelPtDblStack & theFlowPairs);
         //
         // Returns the total flow through theSelPt, that's recorded in
         // theFlowPairs.

      noCopyCtorAssign (WitFlowMonitor);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitHeurAtor * myHeurAtor_;
         //
         // The HeurAtor for this FlowMonitor.

      bool active_;
         //
         // true, iff this FlowMonitor Splitter is currently active.

      WitSelPtDblStack curFlowPairs_;
         //
         // For each SelPt, theSelPt the total flowVol thru theSelPt during the
         // current temp-commit is given by:
         //
         //    sum over (theSelPt, incFlowVol) in curFlowPairs_ of incFlowVol.

      WitSelPtDblStack okFlowPairs_;
         //
         // Same as curFlowPairs_, but for the most recent successful 
         // temp-commit, if any.

      WitSelPtDblStack failFlowPairs_;
         //
         // Same as curFlowPairs_, but for the most recent failing temp-commit,
         // if any.
   };
@


1.3
log
@Internal changes.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.2
log
@Fixed a bug in selection splitting discovered by Fukunaga.
@
text
@d63 1
a63 1
      void postTempCommit (WitBoolean success);
d68 1
a68 1
      WitBoolean splitIsNeeded (
d70 1
a70 1
            WitBoolean compToSuccess,
d73 2
a74 2
         // Returns TRUE, iff the selection needs to be split at theSelPt. 
         // If compToSuccess is TRUE, the failing flow will be compared to the
d108 1
a108 1
      WitBoolean active_;
d110 1
a110 1
         // TRUE, iff this FlowMonitor Splitter is currently active.
@


1.1
log
@Continued implementation of sel-split for pen-exec.
@
text
@d37 1
a37 1
      WitFlowMonitor (WitProblem *);
d103 4
@

