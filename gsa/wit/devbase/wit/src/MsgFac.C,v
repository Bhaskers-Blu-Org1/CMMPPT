head	1.60;
access;
symbols
	sce_5_01_20080919:1.54
	latest_sce_4_20_20060523:1.53.0.2
	sce_4_20_20060523:1.53
	latest_sce4_20_OSL:1.52.0.2
	sce_4_20_OSL:1.52
	sce_410_withVa:1.42
	sce_4_05_20040511:1.35
	sce_4_00_20040201:1.19
	nextGenBranch:1.17.0.2
	nextGenRoot:1.17
	sce_3_30_20030627:1.16
	EndRw-branch:1.12.0.4
	Root-of-EndRw:1.12
	rwToStl:1.12.0.2
	latest_sce_3_10_20010924:1.9.0.2
	sce_3_10_20010924:1.9
	latest_sce_3_00_20010601:1.8.0.4
	sce_3_00_20010601:1.8
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8
	latest_sce_2_31_20001003:1.5.0.2
	sce_2_31_20001003:1.5
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.60
date	2011.09.28.23.49.36;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2011.09.24.00.27.58;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2011.08.30.20.17.41;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2010.12.29.22.35.56;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2010.04.08.21.07.40;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2009.06.09.18.13.38;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.01.11.22.53.25;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2006.05.02.17.34.03;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2005.11.04.19.30.21;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2005.10.18.20.56.21;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2005.10.03.15.55.52;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2005.09.20.20.02.20;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2005.09.19.14.49.33;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2005.09.15.19.58.21;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2005.09.15.19.47.10;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2005.09.15.18.57.52;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2005.09.14.21.54.45;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2005.09.13.19.31.57;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2005.07.14.18.16.50;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2005.07.11.22.53.49;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2005.07.11.19.51.28;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2005.07.07.15.16.23;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2005.02.24.23.23.56;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2005.02.24.19.46.27;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2004.05.12.21.50.59;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2004.04.19.22.16.28;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2004.04.16.21.32.56;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2004.04.15.21.15.42;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.04.13.21.50.13;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.04.09.19.37.57;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.25.21.21.58;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.25.19.59.37;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.03.12.15.09.23;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.04.16.31.46;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.03.22.36.22;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.26.18.59.42;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.02.24.21.32.06;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.02.20.15.37.35;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.12.19.13.39;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.04.22.31.27;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.01.30.23.07.51;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.08.19.27.44;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.18.21.12.48;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.23.20.47.17;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.02.23.40.43;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.02.22.18.35;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.09.19.52.33;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.08.21.58.55;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.02.20.53.13;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.25.16.08.17;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.02.19.24.06;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.06.19.58.39;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.13.21.03.54;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.28.19.23.03;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.24.19.55.24;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.10.23.17.45;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.22;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches;
next	;


desc
@@


1.60
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "MsgFac.C"
//
// Contains the implementation of the following classes:
//
//    MsgArg.
//    MsgFacility.
//    TempMsgFile.
//    IssueMsgExc.
//    AbortApiExc.
//
// Also contains the declaration and implementation of
// global operator << (MclArgList, WitMsgArg).
//------------------------------------------------------------------------------

#include <MsgMgr.h>
#include <MsgFrag.h>
#include <Session.h>
#include <TempMsgFile.h>
#include <IssueMsgExc.h>
#include <AbortApiExc.h>
#include <Msg.h>
#include <OutDisp.h>
#include <ISRealArg.h>
#include <wit.h>

//------------------------------------------------------------------------------
// Implementation of class MsgArg.
//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg ():
      myMclArgPtr_ (NULL)
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (bool rawArg):
      myMclArgPtr_ (new MclBoolArg (rawArg))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (int rawArg):
      myMclArgPtr_ (new MclIntArg (rawArg))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (size_t rawArg):
      myMclArgPtr_ (new MclIntArg (rawArg))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (long rawArg):
      myMclArgPtr_ (new MclIntArg (static_cast <int> (rawArg)))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (double rawArg):
      myMclArgPtr_ (new MclDoubleArg (rawArg))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const WitISRealArg & rawArg):
      myMclArgPtr_ (new MclDoubleArg (rawArg.asaDbl ()))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const char * rawArg):
      myMclArgPtr_ (new MclStringArg (rawArg))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const WitString & rawArg):
      myMclArgPtr_ (new MclStringArg (rawArg.myCstring ()))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const WitMsgFrag & rawArg):
      myMclArgPtr_ (new MclMsgFragArg (rawArg.myMclMsgFrag_))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const int * rawArg, int length):
      myMclArgPtr_ (new MclIntVectorArg (rawArg, length))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const float * rawArg, int length):
      myMclArgPtr_ (new MclFloatVectorArg (rawArg, length))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const double * rawArg, int length):
      myMclArgPtr_ (new MclDoubleVectorArg (rawArg, length))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const WitVector <bool> & rawArg):
      myMclArgPtr_ (
         new MclBoolVectorArg (rawArg.myCVec (), rawArg.length ()))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const WitVector <int> & rawArg):
      myMclArgPtr_ (
         new MclIntVectorArg (rawArg.myCVec (), rawArg.length ()))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const WitVector <double> & rawArg):
      myMclArgPtr_ (
         new MclDoubleVectorArg (rawArg.myCVec (), rawArg.length ()))
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::~WitMsgArg ()
   {
   delete myMclArgPtr_;
   }

//------------------------------------------------------------------------------

void WitMsgArg::operator = (const WitMsgArg & theMsgArg)
   {
   delete myMclArgPtr_;

   myMclArgPtr_ =
      theMsgArg.hasArg ()?
         theMsgArg.myMclArg ().clone ():
         NULL;
   }

//------------------------------------------------------------------------------
// Global operator << (MclArgList, WitMsgArg).
//
// Conditional argument appending.
//------------------------------------------------------------------------------

inline MclArgList & operator << (
      MclArgList &      theArgList,
      const WitMsgArg & theMsgArg)
   {
   if (theMsgArg.hasArg ())
      theArgList << theMsgArg.myMclArg ();

   return theArgList;
   }

//------------------------------------------------------------------------------
// Implementation of class MsgFacility.
//------------------------------------------------------------------------------

const WitMsgArg * WitMsgFacility::emptyArgPtr_       = NULL;
bool              WitMsgFacility::stopRunningWasSet_ = false;

//------------------------------------------------------------------------------

inline MclFacility & WitMsgFacility::myMclFacility ()
   {
   return myMsgMgr_->myMclFacility ();
   }

//------------------------------------------------------------------------------

inline WitOutputDisplayer & WitMsgFacility::myDisp ()
   {
   return myMsgMgr_->myDisp ();
   }

//------------------------------------------------------------------------------

WitMsgFacility::WitMsgFacility (WitSession * theSession):
      mySession_     (theSession),
      myMsgMgr_      (NULL),
      usingTempFile_ (false),
      nonTempFile_   (NULL)
   {
   if (emptyArgPtr_ == NULL)
      emptyArgPtr_ = new WitMsgArg;

   myMsgMgr_ = new WitMsgMgr (* this);
   }

//------------------------------------------------------------------------------

WitMsgFacility::~WitMsgFacility ()
   {
   delete myMsgMgr_;
   }

//------------------------------------------------------------------------------

FILE * WitMsgFacility::myFile ()
   {
   return myDisp ().myFile ();
   }

//------------------------------------------------------------------------------

const WitString & WitMsgFacility::fileName ()
   {
   return myDisp ().fileName ();
   }

//------------------------------------------------------------------------------

const WitString & WitMsgFacility::accessMode ()
   {
   return myDisp ().accessMode ();
   }

//------------------------------------------------------------------------------

int WitMsgFacility::lineLength ()
   {
   return myMclFacility ().lineLength ();
   }

//------------------------------------------------------------------------------

const char * WitMsgFacility::boolText (bool theValue)
   {
   return myMclFacility ().booleanText (theValue);
   }

//------------------------------------------------------------------------------

bool WitMsgFacility::displayExternalNumber (int theExtNum)
   {
   return extNumMsg (theExtNum)->displayExternalNumber ();
   }

//------------------------------------------------------------------------------

bool WitMsgFacility::stopRunning (int theExtNum)
   {
   return extNumMsg (theExtNum)->stopRunning ();
   }

//------------------------------------------------------------------------------

bool WitMsgFacility::throwErrorExc (int theExtNum)
   {
   return extNumMsg (theExtNum)->throwErrorExc ();
   }

//------------------------------------------------------------------------------

int WitMsgFacility::maxTimesIssued (int theExtNum)
   {
   return extNumMsg (theExtNum)->maxTimesIssued ();
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setAccessMode (const char * theValue)
   {
   myDisp ().setAccessMode (theValue);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setLineLength (int theValue)
   {
   myMclFacility ().lineLength (theValue);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setMyFile (FILE * theFile, const char * theName)
   {
   myDisp ().setMyFile (theFile, theName);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setBoolMsgFrags (
      WitMsgFrag theTrueFrag,
      WitMsgFrag theFalseFrag)
   {
   myMclFacility ().
      booleanMsgFrags (
         theTrueFrag .myMclMsgFrag_,
         theFalseFrag.myMclMsgFrag_);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setDisplayExternalNumber (int theExtNum, bool theValue)
   {
   extNumMsg (theExtNum)->displayExternalNumber (theValue);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setStopRunning (int theExtNum, bool theValue)
   {
   stopRunningWasSet_ = true;

   extNumMsg (theExtNum)->stopRunning (theValue);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setThrowErrorExc (int theExtNum, bool theValue)
   {
   stopRunningWasSet_ = true;

   extNumMsg (theExtNum)->throwErrorExc (theValue);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setMaxTimesIssued (int theExtNum, int theValue)
   {
   extNumMsg (theExtNum)->maxTimesIssued (theValue);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setDisplayExternalNumberByLevel (
      int  theExtNum,
      bool theValue)
   {
   myMclFacility ().displayExternalNumber (extNumLevel (theExtNum), theValue);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setStopRunningByLevel (int theExtNum, bool theValue)
   {
   const MclLevel & theLevel = extNumLevel (theExtNum);

   MclMsgUnitItr theItr (myMclFacility ());
   MclMsg *      theMclMsg;

   stopRunningWasSet_ = true;

   theMclMsg = theItr.nextMsgForChange (theLevel);

   while (theMclMsg != NULL)
      {
      myMsgMgr_->myMsg (theMclMsg)->stopRunning (theValue);

      theMclMsg = theItr.nextMsgForChange (theLevel);
      }
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setThrowErrorExcByLevel (int theExtNum, bool theValue)
   {
   const MclLevel & theLevel = extNumLevel (theExtNum);

   MclMsgUnitItr theItr (myMclFacility ());
   MclMsg *      theMclMsg;

   stopRunningWasSet_ = true;

   theMclMsg = theItr.nextMsgForChange (theLevel);

   while (theMclMsg != NULL)
      {
      myMsgMgr_->myMsg (theMclMsg)->throwErrorExc (theValue);

      theMclMsg = theItr.nextMsgForChange (theLevel);
      }
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setMaxTimesIssuedByLevel (int theExtNum, int theValue)
   {
   myMclFacility ().maxTimesIssued (extNumLevel (theExtNum), theValue);
   }

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

void WitMsgFacility::operator () (
        WitMsgID          theMsgID
      )
   {
   MclArgList theArgList;

   myMsgMgr_->issue (theMsgID, theArgList);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::operator () (
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      ;

   myMsgMgr_->issue (theMsgID, theArgList);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::operator () (
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      ;

   myMsgMgr_->issue (theMsgID, theArgList);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::operator () (
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      , const WitMsgArg & theMsgArg3
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      << theMsgArg3
      ;

   myMsgMgr_->issue (theMsgID, theArgList);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::operator () (
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      , const WitMsgArg & theMsgArg3
      , const WitMsgArg & theMsgArg4
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      << theMsgArg3
      << theMsgArg4
      ;

   myMsgMgr_->issue (theMsgID, theArgList);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::operator () (
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      , const WitMsgArg & theMsgArg3
      , const WitMsgArg & theMsgArg4
      , const WitMsgArg & theMsgArg5
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      << theMsgArg3
      << theMsgArg4
      << theMsgArg5
      ;

   myMsgMgr_->issue (theMsgID, theArgList);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::operator () (
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      , const WitMsgArg & theMsgArg3
      , const WitMsgArg & theMsgArg4
      , const WitMsgArg & theMsgArg5
      , const WitMsgArg & theMsgArg6
      , const WitMsgArg & theMsgArg7
      , const WitMsgArg & theMsgArg8
      , const WitMsgArg & theMsgArg9
      , const WitMsgArg & theMsgArg10
      , const WitMsgArg & theMsgArg11
      , const WitMsgArg & theMsgArg12
      , const WitMsgArg & theMsgArg13
      , const WitMsgArg & theMsgArg14
      , const WitMsgArg & theMsgArg15
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      << theMsgArg3
      << theMsgArg4
      << theMsgArg5
      << theMsgArg6
      << theMsgArg7
      << theMsgArg8
      << theMsgArg9
      << theMsgArg10
      << theMsgArg11
      << theMsgArg12
      << theMsgArg13
      << theMsgArg14
      << theMsgArg15
      ;

   myMsgMgr_->issue (theMsgID, theArgList);
   }

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

void WitMsgFacility::issueByException (
      WitMsgID          theMsgID,
      const WitMsgArg & theMsgArg1,
      const WitMsgArg & theMsgArg2,
      const WitMsgArg & theMsgArg3)
   {
   WitIssueMsgExc theIssueMsgExc (
      theMsgID,
      theMsgArg1,
      theMsgArg2,
      theMsgArg3);

   throw theIssueMsgExc;
   }

//------------------------------------------------------------------------------

void WitMsgFacility::abortIfErrors ()
   {
   if (myMsgMgr_->errorsIssued ())
      (* this) ("inputErrorRepSmsg");
   }

//------------------------------------------------------------------------------

WitMsgFrag WitMsgFacility::myFrag (WitMsgFragID theFragID)
   {
   MclMsgFrag * theMclMsgFrag;

   theMclMsgFrag = myMclFacility ().findMsgFrag (theFragID);

   if (theMclMsgFrag == NULL)
      myMsgFac () ("invalidMsgFragIDFmsg", theFragID);

   return WitMsgFrag (theMclMsgFrag);
   }

//------------------------------------------------------------------------------

const char * WitMsgFacility::fragText (WitMsgFragID theFragID)
   {
   return myFrag (theFragID).myMclMsgFrag_->text ();
   }

//------------------------------------------------------------------------------

bool WitMsgFacility::mayIssue (WitMsgID theMsgID)
   {
   MclMsg * theMclMsg;
   WitMsg * theMsg;

   theMclMsg = myMclFacility ().findMsg (theMsgID);

   nonMsgAssert (theMclMsg != NULL);

   theMsg = myMsgMgr_->myMsg (theMclMsg);

   if (myMsgMgr_->issueAllowed (theMsg))
      {
      if (theMsg->maxTimesIssued () < 0)
         return true;

      if (theMsg->timesIssued () < theMsg->maxTimesIssued ())
         return true;
      }

   return false;
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setMaxTimesIssued (WitMsgID theMsgID, int theValue)
   {
   MclMsg * theMclMsg;

   theMclMsg = myMclFacility ().findMsg (theMsgID);

   nonMsgAssert (theMclMsg != NULL);

   theMclMsg->maxTimesIssued (theValue);
   }

//------------------------------------------------------------------------------

bool WitMsgFacility::isExtNumOfMsg (int theExtNum)
   {
   return (myMsgMgr_->extNumMsg (theExtNum) != NULL);
   }

//------------------------------------------------------------------------------

bool WitMsgFacility::isExtNumOfLevel (int theExtNum)
   {
   return (extNumLevelPtr (theExtNum) != NULL);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::listUnissuedMsgs ()
   {
   MclMsgUnitItr theItr (myMclFacility ());
   MclMsg *      theMclMsg;
   WitMsg *      theMsg;
   int           nUnissued;

   nUnissued = 0;

   theMclMsg = theItr.nextMsg ();

   while (theMclMsg != NULL)
      {
      theMsg = myMsgMgr_->myMsg (theMclMsg);

      if (theMsg->testable ())
         if (theMsg->timesIssued () == 0)
            ++ nUnissued;

      theMclMsg = theItr.nextMsg ();
      }

   if (nUnissued == 0)
      {
      myMsgFac () ("allIssuedMsg");

      return;
      }

   myMsgFac () ("nUnissuedMsg", nUnissued);

   theItr.reset ();

   theMclMsg = theItr.nextMsg ();

   while (theMclMsg != NULL)
      {
      theMsg = myMsgMgr_->myMsg (theMclMsg);

      if (theMsg->testable ())
         if (theMsg->timesIssued () == 0)
            myMsgFac () ("unissuedMsgMsg",
               theMsg->externalNumber (),
               theMsg->id ());

      theMclMsg = theItr.nextMsg ();
      }
   }

//------------------------------------------------------------------------------

bool WitMsgFacility::displayStateChange (
      WitMsgID theMsgID,
      bool     currentMode,
      bool     newMode)
   {
   if (newMode != currentMode)
      myMsgFac () (theMsgID);

   return newMode;
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setCrashOnFatal (bool theValue)
   {
   myMsgMgr_->setCrashOnFatal (theValue);
   }

//------------------------------------------------------------------------------

void WitMsgFacility::divide ()
   {
   bool shortLine;

   shortLine =
      myMclFacility ().findMsg ("shortDividerMsg")->displayExternalNumber ();

   if (shortLine)
      {
      if (mayIssue ("shortDividerMsg"))
         myMsgFac () ("shortDividerMsg");
      }
   else
      {
      if (mayIssue ("longDividerMsg"))
         myMsgFac () ("longDividerMsg");
      }
   }

//------------------------------------------------------------------------------

WitMsg * WitMsgFacility::extNumMsg (int theExtNum)
   {
   WitMsg * theMsg;

   theMsg = myMsgMgr_->extNumMsg (theExtNum);

   nonMsgAssert (theMsg != NULL);

   return theMsg;
   }

//------------------------------------------------------------------------------

const MclLevel & WitMsgFacility::extNumLevel (int theExtNum)
   {
   const MclLevel * theLevelPtr;

   theLevelPtr = extNumLevelPtr (theExtNum);

   nonMsgAssert (theLevelPtr != NULL);

   return * theLevelPtr;
   }

//------------------------------------------------------------------------------

const MclLevel * WitMsgFacility::extNumLevelPtr (int theExtNum)
   {
   return
      (theExtNum == WitINFORMATIONAL_MESSAGES)? & MclLevel::info    ():
      (theExtNum ==       WitWARNING_MESSAGES)? & MclLevel::warning ():
      (theExtNum ==        WitSEVERE_MESSAGES)? & MclLevel::severe  ():
      (theExtNum ==         WitFATAL_MESSAGES)? & MclLevel::fatal   ():
                                                NULL;
   }

//------------------------------------------------------------------------------
// Implementation of class TempMsgFile.
//------------------------------------------------------------------------------

WitTempMsgFile::WitTempMsgFile (
         WitMsgFacility & theMsgFac,
         const char *     theFileName):

      myMsgFac_     (theMsgFac),
      active_       (false),
      prevFile_     (NULL),
      prevFileName_ ()
   {
   FILE * tempFile;

   if (theFileName == NULL)
      return;
         //
         // No filename given; no temporary assignment is needed.

   if (theFileName == myMsgFac ().fileName ())
      return;
         //
         // no temporary assignment is needed.

   active_   = true;
   prevFile_ = myMsgFac ().myFile ();

   prevFileName_ = myMsgFac ().fileName ();

   if (equalCstrings (theFileName, WitSTDOUT))
      {
      myMsgFac ().setMyFile (stdout, theFileName);
      }
   else
      {
      tempFile =
         myMsgFac ().
            mySession ()->
               openFile (theFileName, myMsgFac ().accessMode ().myCstring ());

      myMsgFac ().setMyFile (tempFile, theFileName);
      }
   }

//------------------------------------------------------------------------------

WitTempMsgFile::~WitTempMsgFile ()
   {
   if (active_)
      {
      if (myMsgFac ().myFile () != NULL)
         fclose (myMsgFac ().myFile ());

      myMsgFac ().setMyFile (prevFile_, prevFileName_.myCstring ());
      }
   }

//------------------------------------------------------------------------------
// Implementation of class WitIssueMsgExc.
//------------------------------------------------------------------------------

WitIssueMsgExc::WitIssueMsgExc (
         WitMsgID          theMsgID,
         const WitMsgArg & theMsgArg1,
         const WitMsgArg & theMsgArg2,
         const WitMsgArg & theMsgArg3):

      myMsgID_   (theMsgID),
      myMsgArg1_ (),
      myMsgArg2_ (),
      myMsgArg3_ ()
   {
   myMsgArg1_ = theMsgArg1;
   myMsgArg2_ = theMsgArg2;
   myMsgArg3_ = theMsgArg3;
   }

//------------------------------------------------------------------------------

WitIssueMsgExc::WitIssueMsgExc (const WitIssueMsgExc & theIssueMsgExc):

      myMsgID_   (theIssueMsgExc.myMsgID_),
      myMsgArg1_ (),
      myMsgArg2_ (),
      myMsgArg3_ ()
   {
   myMsgArg1_ = theIssueMsgExc.myMsgArg1_;
   myMsgArg2_ = theIssueMsgExc.myMsgArg2_;
   myMsgArg3_ = theIssueMsgExc.myMsgArg3_;
   }

//------------------------------------------------------------------------------

WitIssueMsgExc::~WitIssueMsgExc ()
   {
   }

//------------------------------------------------------------------------------
// Implementation of class AbortApiExc.
//------------------------------------------------------------------------------

WitAbortApiExc::WitAbortApiExc (WitMsg * theMsg):

      myMsg_ (theMsg)
   {
   }

//------------------------------------------------------------------------------

WitAbortApiExc::WitAbortApiExc (const WitAbortApiExc & theAbortApiExc):

      myMsg_ (theAbortApiExc.myMsg_)
   {
   }

//------------------------------------------------------------------------------

WitAbortApiExc::~WitAbortApiExc ()
   {
   }

//------------------------------------------------------------------------------

int WitAbortApiExc::myMsgNum ()
   {
   return myMsg_->externalNumber ();
   }

//------------------------------------------------------------------------------

bool WitAbortApiExc::stopRunning ()
   {
   return myMsg_->stopRunning ();
   }

//------------------------------------------------------------------------------

bool WitAbortApiExc::throwErrorExc ()
   {
   return myMsg_->throwErrorExc ();
   }
@


1.59
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.58
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d41 3
a43 3
myMclArgPtr_ (NULL)
{
}
d48 3
a50 3
myMclArgPtr_ (new MclBoolArg (rawArg))
{
}
d55 3
a57 3
myMclArgPtr_ (new MclIntArg (rawArg))
{
}
d62 3
a64 3
myMclArgPtr_ (new MclIntArg (rawArg))
{
}
d69 3
a71 3
myMclArgPtr_ (new MclIntArg (static_cast <int> (rawArg)))
{
}
d76 3
a78 3
myMclArgPtr_ (new MclDoubleArg (rawArg))
{
}
d83 3
a85 3
myMclArgPtr_ (new MclDoubleArg (rawArg.asaDbl ()))
{
}
d90 3
a92 3
myMclArgPtr_ (new MclStringArg (rawArg))
{
}
d97 3
a99 3
myMclArgPtr_ (new MclStringArg (rawArg.myCstring ()))
{
}
d104 3
a106 3
myMclArgPtr_ (new MclMsgFragArg (rawArg.myMclMsgFrag_))
{
}
d111 3
a113 3
myMclArgPtr_ (new MclIntVectorArg (rawArg, length))
{
}
d118 3
a120 3
myMclArgPtr_ (new MclFloatVectorArg (rawArg, length))
{
}
d125 3
a127 3
myMclArgPtr_ (new MclDoubleVectorArg (rawArg, length))
{
}
d132 4
a135 4
myMclArgPtr_ (
new MclBoolVectorArg (rawArg.myCVec (), rawArg.length ()))
{
}
d140 4
a143 4
myMclArgPtr_ (
new MclIntVectorArg (rawArg.myCVec (), rawArg.length ()))
{
}
d148 4
a151 4
myMclArgPtr_ (
new MclDoubleVectorArg (rawArg.myCVec (), rawArg.length ()))
{
}
d156 3
a158 3
{
delete myMclArgPtr_;
}
d163 2
a164 2
{
delete myMclArgPtr_;
d166 5
a170 5
myMclArgPtr_ =
theMsgArg.hasArg ()?
theMsgArg.myMclArg ().clone ():
NULL;
}
d179 5
a183 5
MclArgList &      theArgList,
const WitMsgArg & theMsgArg)
{
if (theMsgArg.hasArg ())
theArgList << theMsgArg.myMclArg ();
d185 2
a186 2
return theArgList;
}
d198 3
a200 3
{
return myMsgMgr_->myMclFacility ();
}
d205 3
a207 3
{
return myMsgMgr_->myDisp ();
}
d212 7
a218 7
mySession_     (theSession),
myMsgMgr_      (NULL),
usingTempFile_ (false),
nonTempFile_   (NULL)
{
if (emptyArgPtr_ == NULL)
emptyArgPtr_ = new WitMsgArg;
d220 2
a221 2
myMsgMgr_ = new WitMsgMgr (* this);
}
d226 3
a228 3
{
delete myMsgMgr_;
}
d233 3
a235 3
{
return myDisp ().myFile ();
}
d240 3
a242 3
{
return myDisp ().fileName ();
}
d247 3
a249 3
{
return myDisp ().accessMode ();
}
d254 3
a256 3
{
return myMclFacility ().lineLength ();
}
d261 3
a263 3
{
return myMclFacility ().booleanText (theValue);
}
d268 3
a270 3
{
return extNumMsg (theExtNum)->displayExternalNumber ();
}
d275 3
a277 3
{
return extNumMsg (theExtNum)->stopRunning ();
}
d282 3
a284 3
{
return extNumMsg (theExtNum)->throwErrorExc ();
}
d289 3
a291 3
{
return extNumMsg (theExtNum)->maxTimesIssued ();
}
d296 3
a298 3
{
myDisp ().setAccessMode (theValue);
}
d303 3
a305 3
{
myMclFacility ().lineLength (theValue);
}
d310 3
a312 3
{
myDisp ().setMyFile (theFile, theName);
}
d317 8
a324 8
WitMsgFrag theTrueFrag,
WitMsgFrag theFalseFrag)
{
myMclFacility ().
booleanMsgFrags (
theTrueFrag .myMclMsgFrag_,
theFalseFrag.myMclMsgFrag_);
}
d329 3
a331 3
{
extNumMsg (theExtNum)->displayExternalNumber (theValue);
}
d336 2
a337 2
{
stopRunningWasSet_ = true;
d339 2
a340 2
extNumMsg (theExtNum)->stopRunning (theValue);
}
d345 2
a346 2
{
stopRunningWasSet_ = true;
d348 2
a349 2
extNumMsg (theExtNum)->throwErrorExc (theValue);
}
d354 3
a356 3
{
extNumMsg (theExtNum)->maxTimesIssued (theValue);
}
d361 5
a365 5
int  theExtNum,
bool theValue)
{
myMclFacility ().displayExternalNumber (extNumLevel (theExtNum), theValue);
}
d370 2
a371 2
{
const MclLevel & theLevel = extNumLevel (theExtNum);
d373 2
a374 2
MclMsgUnitItr theItr (myMclFacility ());
MclMsg *      theMclMsg;
d376 1
a376 1
stopRunningWasSet_ = true;
d378 1
a378 1
theMclMsg = theItr.nextMsgForChange (theLevel);
d380 3
a382 3
while (theMclMsg != NULL)
{
myMsgMgr_->myMsg (theMclMsg)->stopRunning (theValue);
d384 3
a386 3
theMclMsg = theItr.nextMsgForChange (theLevel);
}
}
d391 2
a392 2
{
const MclLevel & theLevel = extNumLevel (theExtNum);
d394 2
a395 2
MclMsgUnitItr theItr (myMclFacility ());
MclMsg *      theMclMsg;
d397 1
a397 1
stopRunningWasSet_ = true;
d399 1
a399 1
theMclMsg = theItr.nextMsgForChange (theLevel);
d401 3
a403 3
while (theMclMsg != NULL)
{
myMsgMgr_->myMsg (theMclMsg)->throwErrorExc (theValue);
d405 3
a407 3
theMclMsg = theItr.nextMsgForChange (theLevel);
}
}
d412 3
a414 3
{
myMclFacility ().maxTimesIssued (extNumLevel (theExtNum), theValue);
}
d421 4
a424 4
WitMsgID          theMsgID
)
{
MclArgList theArgList;
d426 2
a427 2
myMsgMgr_->issue (theMsgID, theArgList);
}
d432 9
a440 9
WitMsgID          theMsgID
, const WitMsgArg & theMsgArg1
)
{
MclArgList theArgList;

theArgList
<< theMsgArg1
;
d442 2
a443 2
myMsgMgr_->issue (theMsgID, theArgList);
}
d448 11
a458 11
WitMsgID          theMsgID
, const WitMsgArg & theMsgArg1
, const WitMsgArg & theMsgArg2
)
{
MclArgList theArgList;

theArgList
<< theMsgArg1
<< theMsgArg2
;
d460 2
a461 2
myMsgMgr_->issue (theMsgID, theArgList);
}
d466 13
a478 13
WitMsgID          theMsgID
, const WitMsgArg & theMsgArg1
, const WitMsgArg & theMsgArg2
, const WitMsgArg & theMsgArg3
)
{
MclArgList theArgList;

theArgList
<< theMsgArg1
<< theMsgArg2
<< theMsgArg3
;
d480 2
a481 2
myMsgMgr_->issue (theMsgID, theArgList);
}
d486 15
a500 15
WitMsgID          theMsgID
, const WitMsgArg & theMsgArg1
, const WitMsgArg & theMsgArg2
, const WitMsgArg & theMsgArg3
, const WitMsgArg & theMsgArg4
)
{
MclArgList theArgList;

theArgList
<< theMsgArg1
<< theMsgArg2
<< theMsgArg3
<< theMsgArg4
;
d502 2
a503 2
myMsgMgr_->issue (theMsgID, theArgList);
}
d508 17
a524 17
WitMsgID          theMsgID
, const WitMsgArg & theMsgArg1
, const WitMsgArg & theMsgArg2
, const WitMsgArg & theMsgArg3
, const WitMsgArg & theMsgArg4
, const WitMsgArg & theMsgArg5
)
{
MclArgList theArgList;

theArgList
<< theMsgArg1
<< theMsgArg2
<< theMsgArg3
<< theMsgArg4
<< theMsgArg5
;
d526 2
a527 2
myMsgMgr_->issue (theMsgID, theArgList);
}
d532 37
a568 37
WitMsgID          theMsgID
, const WitMsgArg & theMsgArg1
, const WitMsgArg & theMsgArg2
, const WitMsgArg & theMsgArg3
, const WitMsgArg & theMsgArg4
, const WitMsgArg & theMsgArg5
, const WitMsgArg & theMsgArg6
, const WitMsgArg & theMsgArg7
, const WitMsgArg & theMsgArg8
, const WitMsgArg & theMsgArg9
, const WitMsgArg & theMsgArg10
, const WitMsgArg & theMsgArg11
, const WitMsgArg & theMsgArg12
, const WitMsgArg & theMsgArg13
, const WitMsgArg & theMsgArg14
, const WitMsgArg & theMsgArg15
)
{
MclArgList theArgList;

theArgList
<< theMsgArg1
<< theMsgArg2
<< theMsgArg3
<< theMsgArg4
<< theMsgArg5
<< theMsgArg6
<< theMsgArg7
<< theMsgArg8
<< theMsgArg9
<< theMsgArg10
<< theMsgArg11
<< theMsgArg12
<< theMsgArg13
<< theMsgArg14
<< theMsgArg15
;
d570 2
a571 2
myMsgMgr_->issue (theMsgID, theArgList);
}
d578 10
a587 10
WitMsgID          theMsgID,
const WitMsgArg & theMsgArg1,
const WitMsgArg & theMsgArg2,
const WitMsgArg & theMsgArg3)
{
WitIssueMsgExc theIssueMsgExc (
theMsgID,
theMsgArg1,
theMsgArg2,
theMsgArg3);
d589 2
a590 2
throw theIssueMsgExc;
}
d595 4
a598 4
{
if (myMsgMgr_->errorsIssued ())
(* this) ("inputErrorRepSmsg");
}
d603 2
a604 2
{
MclMsgFrag * theMclMsgFrag;
d606 1
a606 1
theMclMsgFrag = myMclFacility ().findMsgFrag (theFragID);
d608 2
a609 2
if (theMclMsgFrag == NULL)
myMsgFac () ("invalidMsgFragIDFmsg", theFragID);
d611 2
a612 2
return WitMsgFrag (theMclMsgFrag);
}
d617 3
a619 3
{
return myFrag (theFragID).myMclMsgFrag_->text ();
}
d624 3
a626 3
{
MclMsg * theMclMsg;
WitMsg * theMsg;
d628 1
a628 1
theMclMsg = myMclFacility ().findMsg (theMsgID);
d630 1
a630 1
nonMsgAssert (theMclMsg != NULL);
d632 1
a632 1
theMsg = myMsgMgr_->myMsg (theMclMsg);
d634 4
a637 4
if (myMsgMgr_->issueAllowed (theMsg))
{
if (theMsg->maxTimesIssued () < 0)
return true;
d639 3
a641 3
if (theMsg->timesIssued () < theMsg->maxTimesIssued ())
return true;
}
d643 2
a644 2
return false;
}
d649 2
a650 2
{
MclMsg * theMclMsg;
d652 1
a652 1
theMclMsg = myMclFacility ().findMsg (theMsgID);
d654 1
a654 1
nonMsgAssert (theMclMsg != NULL);
d656 2
a657 2
theMclMsg->maxTimesIssued (theValue);
}
d662 3
a664 3
{
return (myMsgMgr_->extNumMsg (theExtNum) != NULL);
}
d669 3
a671 3
{
return (extNumLevelPtr (theExtNum) != NULL);
}
d676 5
a680 5
{
MclMsgUnitItr theItr (myMclFacility ());
MclMsg *      theMclMsg;
WitMsg *      theMsg;
int           nUnissued;
d682 1
a682 1
nUnissued = 0;
d684 1
a684 1
theMclMsg = theItr.nextMsg ();
d686 3
a688 3
while (theMclMsg != NULL)
{
theMsg = myMsgMgr_->myMsg (theMclMsg);
d690 3
a692 3
if (theMsg->testable ())
if (theMsg->timesIssued () == 0)
++ nUnissued;
d694 2
a695 2
theMclMsg = theItr.nextMsg ();
}
d697 3
a699 3
if (nUnissued == 0)
{
myMsgFac () ("allIssuedMsg");
d701 2
a702 2
return;
}
d704 1
a704 1
myMsgFac () ("nUnissuedMsg", nUnissued);
d706 1
a706 1
theItr.reset ();
d708 1
a708 1
theMclMsg = theItr.nextMsg ();
d710 3
a712 3
while (theMclMsg != NULL)
{
theMsg = myMsgMgr_->myMsg (theMclMsg);
d714 5
a718 5
if (theMsg->testable ())
if (theMsg->timesIssued () == 0)
myMsgFac () ("unissuedMsgMsg",
theMsg->externalNumber (),
theMsg->id ());
d720 3
a722 3
theMclMsg = theItr.nextMsg ();
}
}
d727 6
a732 6
WitMsgID theMsgID,
bool     currentMode,
bool     newMode)
{
if (newMode != currentMode)
myMsgFac () (theMsgID);
d734 2
a735 2
return newMode;
}
d740 3
a742 3
{
myMsgMgr_->setCrashOnFatal (theValue);
}
d747 2
a748 2
{
bool shortLine;
d750 2
a751 2
shortLine =
myMclFacility ().findMsg ("shortDividerMsg")->displayExternalNumber ();
d753 11
a763 11
if (shortLine)
{
if (mayIssue ("shortDividerMsg"))
myMsgFac () ("shortDividerMsg");
}
else
{
if (mayIssue ("longDividerMsg"))
myMsgFac () ("longDividerMsg");
}
}
d768 2
a769 2
{
WitMsg * theMsg;
d771 1
a771 1
theMsg = myMsgMgr_->extNumMsg (theExtNum);
d773 1
a773 1
nonMsgAssert (theMsg != NULL);
d775 2
a776 2
return theMsg;
}
d781 2
a782 2
{
const MclLevel * theLevelPtr;
d784 1
a784 1
theLevelPtr = extNumLevelPtr (theExtNum);
d786 1
a786 1
nonMsgAssert (theLevelPtr != NULL);
d788 2
a789 2
return * theLevelPtr;
}
d794 8
a801 8
{
return
(theExtNum == WitINFORMATIONAL_MESSAGES)? & MclLevel::info    ():
(theExtNum ==       WitWARNING_MESSAGES)? & MclLevel::warning ():
(theExtNum ==        WitSEVERE_MESSAGES)? & MclLevel::severe  ():
(theExtNum ==         WitFATAL_MESSAGES)? & MclLevel::fatal   ():
NULL;
}
d808 2
a809 24
WitMsgFacility & theMsgFac,
const char *     theFileName):

myMsgFac_     (theMsgFac),
active_       (false),
prevFile_     (NULL),
prevFileName_ ()
{
FILE * tempFile;

if (theFileName == NULL)
return;
//
// No filename given; no temporary assignment is needed.

if (theFileName == myMsgFac ().fileName ())
return;
//
// no temporary assignment is needed.

active_   = true;
prevFile_ = myMsgFac ().myFile ();

prevFileName_ = myMsgFac ().fileName ();
d811 36
a846 14
if (equalCstrings (theFileName, WitSTDOUT))
{
myMsgFac ().setMyFile (stdout, theFileName);
}
else
{
tempFile =
myMsgFac ().
mySession ()->
openFile (theFileName, myMsgFac ().accessMode ().myCstring ());

myMsgFac ().setMyFile (tempFile, theFileName);
}
}
d851 9
a859 9
{
if (active_)
{
if (myMsgFac ().myFile () != NULL)
fclose (myMsgFac ().myFile ());

myMsgFac ().setMyFile (prevFile_, prevFileName_.myCstring ());
}
}
d866 14
a879 14
WitMsgID          theMsgID,
const WitMsgArg & theMsgArg1,
const WitMsgArg & theMsgArg2,
const WitMsgArg & theMsgArg3):

myMsgID_   (theMsgID),
myMsgArg1_ (),
myMsgArg2_ (),
myMsgArg3_ ()
{
myMsgArg1_ = theMsgArg1;
myMsgArg2_ = theMsgArg2;
myMsgArg3_ = theMsgArg3;
}
d885 9
a893 9
myMsgID_   (theIssueMsgExc.myMsgID_),
myMsgArg1_ (),
myMsgArg2_ (),
myMsgArg3_ ()
{
myMsgArg1_ = theIssueMsgExc.myMsgArg1_;
myMsgArg2_ = theIssueMsgExc.myMsgArg2_;
myMsgArg3_ = theIssueMsgExc.myMsgArg3_;
}
d898 2
a899 2
{
}
d907 3
a909 3
myMsg_ (theMsg)
{
}
d915 3
a917 3
myMsg_ (theAbortApiExc.myMsg_)
{
}
d922 2
a923 2
{
}
d928 3
a930 3
{
return myMsg_->externalNumber ();
}
d935 3
a937 3
{
return myMsg_->stopRunning ();
}
d942 3
a944 3
{
return myMsg_->throwErrorExc ();
}
@


1.57
log
@Revised makefiles to use the MCL library instead of the MCL .o files.
This should eliminate putting mcl/unitTest into libwit.a, which resulted in
WIT application programs with two main functions.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d41 3
a43 3
      myMclArgPtr_ (NULL)
   {
   }
d48 3
a50 3
      myMclArgPtr_ (new MclBoolArg (rawArg))
   {
   }
d55 3
a57 3
      myMclArgPtr_ (new MclIntArg (rawArg))
   {
   }
d62 3
a64 3
      myMclArgPtr_ (new MclIntArg (rawArg))
   {
   }
d69 3
a71 3
      myMclArgPtr_ (new MclIntArg (static_cast <int> (rawArg)))
   {
   }
d76 3
a78 3
      myMclArgPtr_ (new MclDoubleArg (rawArg))
   {
   }
d83 3
a85 3
      myMclArgPtr_ (new MclDoubleArg (rawArg.asaDbl ()))
   {
   }
d90 3
a92 3
      myMclArgPtr_ (new MclStringArg (rawArg))
   {
   }
d97 3
a99 3
      myMclArgPtr_ (new MclStringArg (rawArg.myCstring ()))
   {
   }
d104 3
a106 3
      myMclArgPtr_ (new MclMsgFragArg (rawArg.myMclMsgFrag_))
   {
   }
d111 3
a113 3
      myMclArgPtr_ (new MclIntVectorArg (rawArg, length))
   {
   }
d118 3
a120 3
      myMclArgPtr_ (new MclFloatVectorArg (rawArg, length))
   {
   }
d125 3
a127 3
      myMclArgPtr_ (new MclDoubleVectorArg (rawArg, length))
   {
   }
d132 4
a135 4
      myMclArgPtr_ (
         new MclBoolVectorArg (rawArg.myCVec (), rawArg.length ()))
   {
   }
d140 4
a143 4
      myMclArgPtr_ (
         new MclIntVectorArg (rawArg.myCVec (), rawArg.length ()))
   {
   }
d148 4
a151 4
      myMclArgPtr_ (
         new MclDoubleVectorArg (rawArg.myCVec (), rawArg.length ()))
   {
   }
d156 3
a158 3
   {
   delete myMclArgPtr_;
   }
d163 2
a164 2
   {
   delete myMclArgPtr_;
d166 5
a170 5
   myMclArgPtr_ =
      theMsgArg.hasArg ()?
         theMsgArg.myMclArg ().clone ():
         NULL;
   }
d179 5
a183 5
      MclArgList &      theArgList,
      const WitMsgArg & theMsgArg)
   {
   if (theMsgArg.hasArg ())
      theArgList << theMsgArg.myMclArg ();
d185 2
a186 2
   return theArgList;
   }
d198 3
a200 3
   {
   return myMsgMgr_->myMclFacility ();
   }
d205 3
a207 3
   {
   return myMsgMgr_->myDisp ();
   }
d212 7
a218 7
      mySession_     (theSession),
      myMsgMgr_      (NULL),
      usingTempFile_ (false),
      nonTempFile_   (NULL)
   {
   if (emptyArgPtr_ == NULL)
      emptyArgPtr_ = new WitMsgArg;
d220 2
a221 2
   myMsgMgr_ = new WitMsgMgr (* this);
   }
d226 3
a228 3
   {
   delete myMsgMgr_;
   }
d233 3
a235 3
   {
   return myDisp ().myFile ();
   }
d240 3
a242 3
   {
   return myDisp ().fileName ();
   }
d247 3
a249 3
   {
   return myDisp ().accessMode ();
   }
d254 3
a256 3
   {
   return myMclFacility ().lineLength ();
   }
d261 3
a263 3
   {
   return myMclFacility ().booleanText (theValue);
   }
d268 3
a270 3
   {
   return extNumMsg (theExtNum)->displayExternalNumber ();
   }
d275 3
a277 3
   {
   return extNumMsg (theExtNum)->stopRunning ();
   }
d282 3
a284 3
   {
   return extNumMsg (theExtNum)->throwErrorExc ();
   }
d289 3
a291 3
   {
   return extNumMsg (theExtNum)->maxTimesIssued ();
   }
d296 3
a298 3
   {
   myDisp ().setAccessMode (theValue);
   }
d303 3
a305 3
   {
   myMclFacility ().lineLength (theValue);
   }
d310 3
a312 3
   {
   myDisp ().setMyFile (theFile, theName);
   }
d317 8
a324 8
      WitMsgFrag theTrueFrag,
      WitMsgFrag theFalseFrag)
   {
   myMclFacility ().
      booleanMsgFrags (
         theTrueFrag .myMclMsgFrag_,
         theFalseFrag.myMclMsgFrag_);
   }
d329 3
a331 3
   {
   extNumMsg (theExtNum)->displayExternalNumber (theValue);
   }
d336 2
a337 2
   {
   stopRunningWasSet_ = true;
d339 2
a340 2
   extNumMsg (theExtNum)->stopRunning (theValue);
   }
d345 2
a346 2
   {
   stopRunningWasSet_ = true;
d348 2
a349 2
   extNumMsg (theExtNum)->throwErrorExc (theValue);
   }
d354 3
a356 3
   {
   extNumMsg (theExtNum)->maxTimesIssued (theValue);
   }
d361 5
a365 5
      int  theExtNum,
      bool theValue)
   {
   myMclFacility ().displayExternalNumber (extNumLevel (theExtNum), theValue);
   }
d370 2
a371 2
   {
   const MclLevel & theLevel = extNumLevel (theExtNum);
d373 2
a374 2
   MclMsgUnitItr theItr (myMclFacility ());
   MclMsg *      theMclMsg;
d376 1
a376 1
   stopRunningWasSet_ = true;
d378 1
a378 1
   theMclMsg = theItr.nextMsgForChange (theLevel);
d380 3
a382 3
   while (theMclMsg != NULL)
      {
      myMsgMgr_->myMsg (theMclMsg)->stopRunning (theValue);
d384 3
a386 3
      theMclMsg = theItr.nextMsgForChange (theLevel);
      }
   }
d391 2
a392 2
   {
   const MclLevel & theLevel = extNumLevel (theExtNum);
d394 2
a395 2
   MclMsgUnitItr theItr (myMclFacility ());
   MclMsg *      theMclMsg;
d397 1
a397 1
   stopRunningWasSet_ = true;
d399 1
a399 1
   theMclMsg = theItr.nextMsgForChange (theLevel);
d401 3
a403 3
   while (theMclMsg != NULL)
      {
      myMsgMgr_->myMsg (theMclMsg)->throwErrorExc (theValue);
d405 3
a407 3
      theMclMsg = theItr.nextMsgForChange (theLevel);
      }
   }
d412 3
a414 3
   {
   myMclFacility ().maxTimesIssued (extNumLevel (theExtNum), theValue);
   }
d421 4
a424 4
        WitMsgID          theMsgID
      )
   {
   MclArgList theArgList;
d426 2
a427 2
   myMsgMgr_->issue (theMsgID, theArgList);
   }
d432 9
a440 9
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      ;
d442 2
a443 2
   myMsgMgr_->issue (theMsgID, theArgList);
   }
d448 11
a458 11
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      ;
d460 2
a461 2
   myMsgMgr_->issue (theMsgID, theArgList);
   }
d466 13
a478 13
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      , const WitMsgArg & theMsgArg3
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      << theMsgArg3
      ;
d480 2
a481 2
   myMsgMgr_->issue (theMsgID, theArgList);
   }
d486 15
a500 15
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      , const WitMsgArg & theMsgArg3
      , const WitMsgArg & theMsgArg4
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      << theMsgArg3
      << theMsgArg4
      ;
d502 2
a503 2
   myMsgMgr_->issue (theMsgID, theArgList);
   }
d508 17
a524 17
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      , const WitMsgArg & theMsgArg3
      , const WitMsgArg & theMsgArg4
      , const WitMsgArg & theMsgArg5
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      << theMsgArg3
      << theMsgArg4
      << theMsgArg5
      ;
d526 2
a527 2
   myMsgMgr_->issue (theMsgID, theArgList);
   }
d532 37
a568 37
        WitMsgID          theMsgID
      , const WitMsgArg & theMsgArg1
      , const WitMsgArg & theMsgArg2
      , const WitMsgArg & theMsgArg3
      , const WitMsgArg & theMsgArg4
      , const WitMsgArg & theMsgArg5
      , const WitMsgArg & theMsgArg6
      , const WitMsgArg & theMsgArg7
      , const WitMsgArg & theMsgArg8
      , const WitMsgArg & theMsgArg9
      , const WitMsgArg & theMsgArg10
      , const WitMsgArg & theMsgArg11
      , const WitMsgArg & theMsgArg12
      , const WitMsgArg & theMsgArg13
      , const WitMsgArg & theMsgArg14
      , const WitMsgArg & theMsgArg15
      )
   {
   MclArgList theArgList;

   theArgList
      << theMsgArg1
      << theMsgArg2
      << theMsgArg3
      << theMsgArg4
      << theMsgArg5
      << theMsgArg6
      << theMsgArg7
      << theMsgArg8
      << theMsgArg9
      << theMsgArg10
      << theMsgArg11
      << theMsgArg12
      << theMsgArg13
      << theMsgArg14
      << theMsgArg15
      ;
d570 2
a571 2
   myMsgMgr_->issue (theMsgID, theArgList);
   }
d578 10
a587 10
      WitMsgID          theMsgID,
      const WitMsgArg & theMsgArg1,
      const WitMsgArg & theMsgArg2,
      const WitMsgArg & theMsgArg3)
   {
   WitIssueMsgExc theIssueMsgExc (
      theMsgID,
      theMsgArg1,
      theMsgArg2,
      theMsgArg3);
d589 2
a590 2
   throw theIssueMsgExc;
   }
d595 4
a598 4
   {
   if (myMsgMgr_->errorsIssued ())
      (* this) ("inputErrorRepSmsg");
   }
d603 2
a604 2
   {
   MclMsgFrag * theMclMsgFrag;
d606 1
a606 1
   theMclMsgFrag = myMclFacility ().findMsgFrag (theFragID);
d608 2
a609 2
   if (theMclMsgFrag == NULL)
      myMsgFac () ("invalidMsgFragIDFmsg", theFragID);
d611 2
a612 2
   return WitMsgFrag (theMclMsgFrag);
   }
d617 3
a619 3
   {
   return myFrag (theFragID).myMclMsgFrag_->text ();
   }
d624 3
a626 3
   {
   MclMsg * theMclMsg;
   WitMsg * theMsg;
d628 1
a628 1
   theMclMsg = myMclFacility ().findMsg (theMsgID);
d630 1
a630 1
   nonMsgAssert (theMclMsg != NULL);
d632 1
a632 1
   theMsg = myMsgMgr_->myMsg (theMclMsg);
d634 4
a637 4
   if (myMsgMgr_->issueAllowed (theMsg))
      {
      if (theMsg->maxTimesIssued () < 0)
         return true;
d639 3
a641 3
      if (theMsg->timesIssued () < theMsg->maxTimesIssued ())
         return true;
      }
d643 2
a644 2
   return false;
   }
d649 2
a650 2
   {
   MclMsg * theMclMsg;
d652 1
a652 1
   theMclMsg = myMclFacility ().findMsg (theMsgID);
d654 1
a654 1
   nonMsgAssert (theMclMsg != NULL);
d656 2
a657 2
   theMclMsg->maxTimesIssued (theValue);
   }
d662 3
a664 3
   {
   return (myMsgMgr_->extNumMsg (theExtNum) != NULL);
   }
d669 3
a671 3
   {
   return (extNumLevelPtr (theExtNum) != NULL);
   }
d676 5
a680 5
   {
   MclMsgUnitItr theItr (myMclFacility ());
   MclMsg *      theMclMsg;
   WitMsg *      theMsg;
   int           nUnissued;
d682 1
a682 1
   nUnissued = 0;
d684 1
a684 1
   theMclMsg = theItr.nextMsg ();
d686 3
a688 3
   while (theMclMsg != NULL)
      {
      theMsg = myMsgMgr_->myMsg (theMclMsg);
d690 3
a692 3
      if (theMsg->testable ())
         if (theMsg->timesIssued () == 0)
            ++ nUnissued;
d694 2
a695 2
      theMclMsg = theItr.nextMsg ();
      }
d697 3
a699 3
   if (nUnissued == 0)
      {
      myMsgFac () ("allIssuedMsg");
d701 2
a702 2
      return;
      }
d704 1
a704 1
   myMsgFac () ("nUnissuedMsg", nUnissued);
d706 1
a706 1
   theItr.reset ();
d708 1
a708 1
   theMclMsg = theItr.nextMsg ();
d710 3
a712 3
   while (theMclMsg != NULL)
      {
      theMsg = myMsgMgr_->myMsg (theMclMsg);
d714 5
a718 5
      if (theMsg->testable ())
         if (theMsg->timesIssued () == 0)
            myMsgFac () ("unissuedMsgMsg",
               theMsg->externalNumber (),
               theMsg->id ());
d720 3
a722 3
      theMclMsg = theItr.nextMsg ();
      }
   }
d727 6
a732 6
      WitMsgID theMsgID,
      bool     currentMode,
      bool     newMode)
   {
   if (newMode != currentMode)
      myMsgFac () (theMsgID);
d734 2
a735 2
   return newMode;
   }
d740 3
a742 3
   {
   myMsgMgr_->setCrashOnFatal (theValue);
   }
d747 2
a748 2
   {
   bool shortLine;
d750 2
a751 2
   shortLine =
      myMclFacility ().findMsg ("shortDividerMsg")->displayExternalNumber ();
d753 11
a763 11
   if (shortLine)
      {
      if (mayIssue ("shortDividerMsg"))
         myMsgFac () ("shortDividerMsg");
      }
   else
      {
      if (mayIssue ("longDividerMsg"))
         myMsgFac () ("longDividerMsg");
      }
   }
d768 2
a769 2
   {
   WitMsg * theMsg;
d771 1
a771 1
   theMsg = myMsgMgr_->extNumMsg (theExtNum);
d773 1
a773 1
   nonMsgAssert (theMsg != NULL);
d775 2
a776 2
   return theMsg;
   }
d781 2
a782 2
   {
   const MclLevel * theLevelPtr;
d784 1
a784 1
   theLevelPtr = extNumLevelPtr (theExtNum);
d786 1
a786 1
   nonMsgAssert (theLevelPtr != NULL);
d788 2
a789 2
   return * theLevelPtr;
   }
d794 8
a801 8
   {
   return
      (theExtNum == WitINFORMATIONAL_MESSAGES)? & MclLevel::info    ():
      (theExtNum ==       WitWARNING_MESSAGES)? & MclLevel::warning ():
      (theExtNum ==        WitSEVERE_MESSAGES)? & MclLevel::severe  ():
      (theExtNum ==         WitFATAL_MESSAGES)? & MclLevel::fatal   ():
                                                NULL;
   }
d808 24
a831 2
         WitMsgFacility & theMsgFac,
         const char *     theFileName):
d833 14
a846 36
      myMsgFac_     (theMsgFac),
      active_       (false),
      prevFile_     (NULL),
      prevFileName_ ()
   {
   FILE * tempFile;

   if (theFileName == NULL)
      return;
         //
         // No filename given; no temporary assignment is needed.

   if (theFileName == myMsgFac ().fileName ())
      return;
         //
         // no temporary assignment is needed.

   active_   = true;
   prevFile_ = myMsgFac ().myFile ();

   prevFileName_ = myMsgFac ().fileName ();

   if (equalCstrings (theFileName, WitSTDOUT))
      {
      myMsgFac ().setMyFile (stdout, theFileName);
      }
   else
      {
      tempFile =
         myMsgFac ().
            mySession ()->
               openFile (theFileName, myMsgFac ().accessMode ().myCstring ());

      myMsgFac ().setMyFile (tempFile, theFileName);
      }
   }
d851 9
a859 9
   {
   if (active_)
      {
      if (myMsgFac ().myFile () != NULL)
         fclose (myMsgFac ().myFile ());

      myMsgFac ().setMyFile (prevFile_, prevFileName_.myCstring ());
      }
   }
d866 14
a879 14
         WitMsgID          theMsgID,
         const WitMsgArg & theMsgArg1,
         const WitMsgArg & theMsgArg2,
         const WitMsgArg & theMsgArg3):

      myMsgID_   (theMsgID),
      myMsgArg1_ (),
      myMsgArg2_ (),
      myMsgArg3_ ()
   {
   myMsgArg1_ = theMsgArg1;
   myMsgArg2_ = theMsgArg2;
   myMsgArg3_ = theMsgArg3;
   }
d885 9
a893 9
      myMsgID_   (theIssueMsgExc.myMsgID_),
      myMsgArg1_ (),
      myMsgArg2_ (),
      myMsgArg3_ ()
   {
   myMsgArg1_ = theIssueMsgExc.myMsgArg1_;
   myMsgArg2_ = theIssueMsgExc.myMsgArg2_;
   myMsgArg3_ = theIssueMsgExc.myMsgArg3_;
   }
d898 2
a899 2
   {
   }
d907 3
a909 3
      myMsg_ (theMsg)
   {
   }
d915 3
a917 3
      myMsg_ (theAbortApiExc.myMsg_)
   {
   }
d922 2
a923 2
   {
   }
d928 3
a930 3
   {
   return myMsg_->externalNumber ();
   }
d935 3
a937 3
   {
   return myMsg_->stopRunning ();
   }
d942 3
a944 3
   {
   return myMsg_->throwErrorExc ();
   }
@


1.56
log
@Fixed a bug:
   witWriteData was using upper case for true and false.
@
text
@d1 1
a1 1

@


1.55
log
@When comparing a file name to WitSTDOUT, changed from pointer equality
to string equality.
@
text
@d316 12
@


1.54
log
@witCopy<Object>Data
@
text
@d821 2
a822 1
   if (theFileName == WitSTDOUT)
d824 1
@


1.53
log
@Updated the copyright date on all source files.
@
text
@d1 1
a1 1
//------------------------------------------------------------------------------
a15 1
//    IssueMsgExc.
d18 2
d30 1
a172 40
// Implementation of class WitIssueMsgExc.
//------------------------------------------------------------------------------

WitIssueMsgExc::WitIssueMsgExc (
         WitMsgID          theMsgID,
         const WitMsgArg & theMsgArg1,
         const WitMsgArg & theMsgArg2,
         const WitMsgArg & theMsgArg3):

      myMsgID_   (theMsgID),
      myMsgArg1_ (),
      myMsgArg2_ (),
      myMsgArg3_ ()
   {
   myMsgArg1_ = theMsgArg1;
   myMsgArg2_ = theMsgArg2;
   myMsgArg3_ = theMsgArg3;
   }

//------------------------------------------------------------------------------

WitIssueMsgExc::WitIssueMsgExc (const WitIssueMsgExc & theIssueMsgExc):

      myMsgID_   (theIssueMsgExc.myMsgID_),
      myMsgArg1_ (),
      myMsgArg2_ (),
      myMsgArg3_ ()
   {
   myMsgArg1_ = theIssueMsgExc.myMsgArg1_;
   myMsgArg2_ = theIssueMsgExc.myMsgArg2_;
   myMsgArg3_ = theIssueMsgExc.myMsgArg3_;
   }

//------------------------------------------------------------------------------

WitIssueMsgExc::~WitIssueMsgExc ()
   {
   }

//------------------------------------------------------------------------------
d846 85
@


1.52
log
@[error recovery]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.51
log
@Made WIT's use of errno relatively thread-safe.
@
text
@d230 2
a231 1
const WitMsgArg * WitMsgFacility::emptyArgPtr_ = NULL;
d363 2
d372 2
d402 2
d423 2
@


1.50
log
@[multi-thread]
@
text
@d26 1
a33 2
#include <errno.h>

d833 2
d854 4
a857 11
      FILE * tempFile;

      tempFile = 
         fopen (theFileName, myMsgFac ().accessMode ().myCstring ());

      if (not tempFile)
         myMsgFac () ("fopenSmsg",
            theFileName,
            myMsgFac ().accessMode (),
            errno,
            strerror (errno));
@


1.49
log
@[multi-thread]
@
text
@d231 1
a231 1
const WitMsgArg WitMsgFacility::emptyArg_;
d255 3
@


1.48
log
@Updated WIT's exception throwing capability.
@
text
@d231 1
a231 1
const WitMsgArg * WitMsgFacility::emptyArgPtr_ = NULL;
a254 3
   if (emptyArgPtr_ == NULL)
      emptyArgPtr_ = new WitMsgArg;

@


1.47
log
@[multi-thread]
@
text
@d319 1
a319 1
bool WitMsgFacility::throwException (int theExtNum)
d321 1
a321 1
   return extNumMsg (theExtNum)->throwException ();
d368 1
a368 1
void WitMsgFacility::setThrowException (int theExtNum, bool theValue)
d370 1
a370 1
   extNumMsg (theExtNum)->throwException (theValue);
d410 1
a410 1
void WitMsgFacility::setThrowExceptionByLevel (int theExtNum, bool theValue)
d421 1
a421 1
      myMsgMgr_->myMsg (theMclMsg)->throwException (theValue);
@


1.46
log
@[multi-thread]
@
text
@a27 1
#include <Session.h>
@


1.45
log
@[multi-thread]
@
text
@d16 1
a16 1
//    MsgIssueExc.
d27 1
d173 1
a173 1
// Implementation of class WitMsgIssueExc.
d176 1
a176 1
WitMsgIssueExc::WitMsgIssueExc (
d194 1
a194 1
WitMsgIssueExc::WitMsgIssueExc (const WitMsgIssueExc & theMsgIssueExc):
d196 1
a196 1
      myMsgID_   (theMsgIssueExc.myMsgID_),
d201 3
a203 3
   myMsgArg1_ = theMsgIssueExc.myMsgArg1_;
   myMsgArg2_ = theMsgIssueExc.myMsgArg2_;
   myMsgArg3_ = theMsgIssueExc.myMsgArg3_;
d208 1
a208 1
WitMsgIssueExc::~WitMsgIssueExc ()
d602 1
a602 1
   WitMsgIssueExc theWitMsgIssueExc (
d608 1
a608 1
   throw theWitMsgIssueExc;
@


1.44
log
@[multi-thread]
@
text
@d648 1
a648 1
   witAssert (theMclMsg != NULL);
d672 1
a672 1
   witAssert (theMclMsg != NULL);
d791 1
a791 1
   witAssert (theMsg != NULL);
d804 1
a804 1
   witAssert (theLevelPtr != NULL);
@


1.43
log
@[multi-thread]
@
text
@d16 1
d27 1
d160 52
d595 17
@


1.42
log
@[exceptions]
@
text
@d792 1
a792 1
            WitNonClass::strerror (errno));
@


1.41
log
@[exceptions]
@
text
@d258 1
a258 1
bool WitMsgFacility::stopOnAbort (int theExtNum)
d260 1
a260 1
   return extNumMsg (theExtNum)->stopOnAbort ();
d307 1
a307 1
void WitMsgFacility::setStopOnAbort (int theExtNum, bool theValue)
d309 1
a309 1
   extNumMsg (theExtNum)->stopOnAbort (theValue);
d337 1
a337 1
void WitMsgFacility::setStopOnAbortByLevel (int theExtNum, bool theValue)
d348 1
a348 1
      myMsgMgr_->myMsg (theMclMsg)->stopOnAbort (theValue);
@


1.40
log
@[exceptions]
@
text
@d265 7
d314 7
d356 19
@


1.39
log
@[exceptions]
@
text
@d26 2
@


1.38
log
@Vector PropRt.
@
text
@d753 1
a753 1
         myMsgFac () ("fopenError",
@


1.37
log
@Vector Prop-Rt.
@
text
@d26 1
a26 1
#include <InScalRA.h>
d77 1
a77 1
WitMsgArg::WitMsgArg (const WitInScalRA & rawArg):
@


1.36
log
@Added:
   WitFATAL_RC
   witTestFatalMesg
@
text
@d43 1
a43 1
      myMclArgPtr_ (new MclIntArg (rawArg == true))
d126 8
@


1.35
log
@Double Precision.
@
text
@d699 6
a704 10
   if (theExtNum == WitINFORMATIONAL_MESSAGES)
      return & MclLevel::info ();

   if (theExtNum == WitWARNING_MESSAGES)
      return & MclLevel::warning ();

   if (theExtNum == WitSEVERE_MESSAGES)
      return & MclLevel::severe ();

   return NULL;
@


1.34
log
@Double Precision.
@
text
@a69 7
WitMsgArg::WitMsgArg (float rawArg):
      myMclArgPtr_ (new MclFloatArg (rawArg))
   {
   }

//------------------------------------------------------------------------------

a128 8
   {
   }

//------------------------------------------------------------------------------

WitMsgArg::WitMsgArg (const WitVector <float> & rawArg):
      myMclArgPtr_ (
         new MclFloatVectorArg (rawArg.myCVec (), rawArg.length ()))
@


1.33
log
@Double Precision.
@
text
@d126 7
d144 8
@


1.32
log
@Double Precision.
@
text
@d78 1
a78 1
      myMclArgPtr_ (new MclFloatArg (fltFromDbl (rawArg)))
d85 1
a85 1
      myMclArgPtr_ (new MclFloatArg (fltFromDbl (rawArg.asaDbl ())))
@


1.31
log
@Double Precision.
@
text
@d737 1
a737 1
   prevFileName_.copy (myMsgFac ().fileName ());
@


1.30
log
@Double Precision.
@
text
@d85 1
a85 1
      myMclArgPtr_ (new MclFloatArg (fltFromDbl (rawArg)))
@


1.29
log
@Double Precision.
@
text
@d84 1
a84 1
WitMsgArg::WitMsgArg (WitInScalRA rawArg):
@


1.28
log
@Double Precision.
@
text
@d42 7
@


1.27
log
@Double Precision.
@
text
@a160 1
WitMsgFacility *  WitMsgFacility::currentPtr_  = NULL;
a233 28
WitMsgFacility & WitMsgFacility::current ()
   {
   if (currentPtr_ != NULL)
      return * currentPtr_;

   fprintf (stderr,
      "\n"
      "FATAL ERROR encountered by WIT:\n"
      "\n"
      "Invoked WitMsgFacility::current (),\n"
      "when WitMsgFacility::currentPtr_ == NULL.\n"
      "\n"
      "The above message indicates that there is a programming error in WIT.\n"
      "\n"
      "WIT stops running. Return code is 4.\n"
      "\n");

   fflush (stderr);

   exit (4);

   return * currentPtr_;
      //
      // Not executed; avoids a compiler warning.
   }

//------------------------------------------------------------------------------

a271 19
   }

//------------------------------------------------------------------------------

void WitMsgFacility::setCurrentPtr (WitMsgFacility * theMsgFacPtr)
   {
   currentPtr_ = theMsgFacPtr;
   }

//------------------------------------------------------------------------------

WitMsgFacility * WitMsgFacility::becomesCurrent ()
   {
   WitMsgFacility * oldCurrentPtr;

   oldCurrentPtr = currentPtr_;
   currentPtr_   = this;

   return oldCurrentPtr;
@


1.26
log
@Double Precision.
@
text
@d71 1
a71 1
      myMclArgPtr_ (new MclFloatArg (floatFromDouble (rawArg)))
d78 1
a78 1
      myMclArgPtr_ (new MclFloatArg (floatFromDouble (rawArg)))
@


1.25
log
@Double Precision.
@
text
@d121 1
a121 1
         new MclIntVectorArg (rawArg.myCvector (), rawArg.length ()))
d129 1
a129 1
         new MclFloatVectorArg (rawArg.myCvector (), rawArg.length ()))
@


1.24
log
@Continued double precision.
@
text
@d77 1
a77 1
WitMsgArg::WitMsgArg (InScalRA rawArg):
@


1.23
log
@Continued double precision.
@
text
@d26 1
d71 7
@


1.22
log
@Continued double precision.
@
text
@d70 1
a70 1
      myMclArgPtr_ (new MclFloatArg (static_cast <float> (rawArg)))
@


1.21
log
@Continued double precision.
@
text
@a75 7
WitMsgArg::WitMsgArg (StrDbl rawArg):
      myMclArgPtr_ (new MclFloatArg (rawArg.asaFloat ()))
   {
   }

//------------------------------------------------------------------------------

@


1.20
log
@Continued double precision.
@
text
@d76 7
@


1.19
log
@Continued implementation of PIP.
@
text
@d70 1
a70 1
      myMclArgPtr_ (new MclFloatArg (rawArg))
@


1.18
log
@Continued implementation of PIP.
@
text
@d786 1
a786 1
            WitUtil::strerror (errno));
@


1.17
log
@Added some optional warnings on Linux.
@
text
@d786 1
a786 1
            strerror (errno));
@


1.16
log
@Made modifications to improve the speed of witPurgeData.
@
text
@d353 4
a356 1
   while (theMclMsg = theItr.nextMsgForChange (theLevel))
d358 3
d621 3
a623 1
   while (theMclMsg = theItr.nextMsg ())
d630 2
d645 3
a647 1
   while (theMclMsg = theItr.nextMsg ())
d656 2
@


1.15
log
@Changed some C style casts to C++ style.
@
text
@d676 10
a685 1
   myMsgFac () (shortLine? "shortDividerMsg": "longDividerMsg");
@


1.14
log
@Internal changes.
@
text
@d55 2
a56 2
WitMsgArg::WitMsgArg (long   rawArg):
      myMclArgPtr_ (new MclIntArg ((int) rawArg))
@


1.13
log
@Internal changes.
@
text
@d758 1
a758 1
      if (! tempFile)
@


1.12
log
@Continued implementation of single-source.
@
text
@d174 1
a174 1
      usingTempFile_ (witFALSE),
d220 1
a220 1
const char * WitMsgFacility::booleanText (WitBoolean theValue)
d255 1
a255 1
WitBoolean WitMsgFacility::displayExternalNumber (int theExtNum)
d262 1
a262 1
WitBoolean WitMsgFacility::stopOnAbort (int theExtNum)
d316 1
a316 3
void WitMsgFacility::setDisplayExternalNumber (
      int        theExtNum,
      WitBoolean theValue)
d323 1
a323 1
void WitMsgFacility::setStopOnAbort (int theExtNum, WitBoolean theValue)
d338 2
a339 2
      int        theExtNum,
      WitBoolean theValue)
d346 1
a346 3
void WitMsgFacility::setStopOnAbortByLevel (
      int        theExtNum,
      WitBoolean theValue)
d554 1
a554 1
WitBoolean WitMsgFacility::mayIssue (WitMsgID theMsgID)
d568 1
a568 1
         return witTRUE;
d571 1
a571 1
         return witTRUE;
d574 1
a574 1
   return witFALSE;
d592 1
a592 1
WitBoolean WitMsgFacility::isExtNumOfMsg (int theExtNum)
d599 1
a599 1
WitBoolean WitMsgFacility::isExtNumOfLevel (int theExtNum)
d649 4
a652 4
WitBoolean WitMsgFacility::displayStateChange (
      WitMsgID   theMsgID,
      WitBoolean currentMode,
      WitBoolean newMode)
d662 1
a662 1
void WitMsgFacility::setCrashOnFatal (WitBoolean theValue)
d671 1
a671 1
   WitBoolean shortLine;
d730 1
a730 1
      active_       (witFALSE),
d744 1
a744 1
   active_   = witTRUE;
@


1.11
log
@Preliminary work on single source.
@
text
@d24 2
a26 1
#include <Str.h>
d537 1
a537 1
WitMsgFrag WitMsgFacility::operator [] (WitMsgFragID theFragID)
d553 1
a553 1
   return (* this)[theFragID].myMclMsgFrag_->text ();
d736 1
a736 1
      prevFileName_ (* new WitString)
a783 2

   delete & prevFileName_;
@


1.10
log
@Preliminary work on single source.
@
text
@d747 4
a750 3
   active_       = witTRUE;
   prevFile_     = myMsgFac ().myFile ();
   prevFileName_ = myMsgFac ().fileName ();
@


1.9
log
@Initial implementation of pegging.
@
text
@d110 1
a110 1
WitMsgArg::WitMsgArg (const WitVector (int) & rawArg):
d118 1
a118 1
WitMsgArg::WitMsgArg (const WitVector (float) & rawArg):
@


1.8
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@d498 1
d518 1
@


1.7
log
@Some minor changes.
@
text
@d25 1
a25 1
#include <String.h>
@


1.6
log
@Implemented respectStockSLBs and prefHighStockSLBs global attributes.
@
text
@a23 1
#include <Vector.h>
d25 1
@


1.5
log
@Minor change to class MsgFacility.
@
text
@d496 2
d515 2
@


1.4
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d156 1
a156 1
inline MclFacility & WitMsgFacility::myMclFacility () const
d163 1
a163 1
inline WitOutputDisplayer & WitMsgFacility::myDisp () const
a172 1
      myMsgFac_      (* this),
d191 1
a191 1
FILE * WitMsgFacility::myFile () const
d198 1
a198 1
const WitString & WitMsgFacility::fileName () const
d205 1
a205 1
const WitString & WitMsgFacility::accessMode () const
d212 1
a212 1
int WitMsgFacility::lineLength () const
d219 1
a219 1
const char * WitMsgFacility::booleanText (WitBoolean theValue) const
d254 1
a254 1
WitBoolean WitMsgFacility::displayExternalNumber (int theExtNum) const
d261 1
a261 1
WitBoolean WitMsgFacility::stopOnAbort (int theExtNum) const
d268 1
a268 1
int WitMsgFacility::maxTimesIssued (int theExtNum) const
d530 1
a530 1
WitMsgFrag WitMsgFacility::operator [] (WitMsgFragID theFragID) const
d544 1
a544 1
const char * WitMsgFacility::fragText (WitMsgFragID theFragID) const
d551 1
a551 1
WitBoolean WitMsgFacility::mayIssue (WitMsgID theMsgID) const
d589 1
a589 1
WitBoolean WitMsgFacility::isExtNumOfMsg (int theExtNum) const
d596 1
a596 1
WitBoolean WitMsgFacility::isExtNumOfLevel (int theExtNum) const
d603 1
a603 1
void WitMsgFacility::listUnissuedMsgs () const
d666 1
a666 1
void WitMsgFacility::divide () const
d678 1
a678 1
WitMsg * WitMsgFacility::extNumMsg (int theExtNum) const
d691 1
a691 1
const MclLevel & WitMsgFacility::extNumLevel (int theExtNum) const
d704 1
a704 1
const MclLevel * WitMsgFacility::extNumLevelPtr (int theExtNum) const
@


1.3
log
@Replaced "PRM" with "WIT".
Replaced "Production Resource Manager" with "Watson Implosion Technology".
Upgraded release # to 6.0.
@
text
@d760 1
a760 1
            WitUtil::strerror (errno));
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d234 1
a234 1
      "FATAL ERROR encountered by PRM:\n"
d239 1
a239 1
      "The above message indicates that there is a programming error in PRM.\n"
d241 1
a241 1
      "PRM stops running. Return code is 4.\n"
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
