head	1.24;
access;
symbols
	sce_5_01_20080919:1.23
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.13.0.2
	sce_4_20_OSL:1.13
	sce_410_withVa:1.13
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.11;
locks; strict;
comment	@ * @;


1.24
date	2010.01.13.19.52.08;	author rjw;	state dead;
branches;
next	1.23;

1.23
date	2008.03.03.22.35.41;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.02.27.23.19.09;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2006.12.06.19.52.46;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.10.03.15.08.58;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.18.22.29.00;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.08.18.18.43.37;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.08.17.21.21.32;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.33.56;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.21.21.02.49;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.14.18.09.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.04.20.20.00.28;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.12.19.14.40;	author fasano;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.15.23.06.11;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.10.16.17.50;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.09.15.34.13;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.01.20.44.28;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.31.20.04.44;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.31.16.23.29;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.28.15.10.16;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2003.05.23.18.12.32;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.21.17.37.01;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.20.19.38.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.13.22.00.02;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Multi-objective mode
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef CoinSolverH
#define CoinSolverH

//------------------------------------------------------------------------------
// Header file: "CoinSolver.h"
//
// Contains the declaration of class CoinSolver.
//------------------------------------------------------------------------------

#include <Assoc.h>

#ifdef OPT_IMPLODE

//------------------------------------------------------------------------------
// Forward declarations of COIN classes.
//------------------------------------------------------------------------------

class OsiClpSolverInterface;
class CbcModel;
class OsiSolverInterface;
class ClpSimplex;
class CoinMessageHandler;

//------------------------------------------------------------------------------
// class CoinSolver
//
// Responsible for solving an OptModel by using solvers from COIN, specifically,
// CLP, OSI, and SBB.
//------------------------------------------------------------------------------

class WitCoinSolver: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCoinSolver (WitOptModel *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitCoinSolver ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void solve ();
         //
         // Solves myOptModel_.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void setUpCoin ();
         //
         // Sets up the COIN objects.

      void setUpMH ();
         //
         // Sets up the COIN message handler.

      void passFixedProb ();
         //
         // Passes the fixed parts of the optimization model to myOsiSI ().

      void markIntVars ();
         //
         // Marks the integer variables as such.

      void passFlexibleProb ();
         //
         // Passes the flexible parts of the optimization model to myOsiSI ().

      void passConBounds ();
         //
         // Passes the bounds on each constraint to myOsiSI ().

      void passVarBounds ();
         //
         // Passes the bounds on each variable to myOsiSI ().

      void passObjCoeffs ();
         //
         // Passes the objective coefficient on each variable to myOsiSI ().

      void writeMps ();
         //
         // Writes an MPS file of the model entered into myOsiSI (), if
         // appropriate.

      void solveMIP ();
         //
         // Makes appropriate calls to COIN to solve the optimization model as
         // a MIP.

      void solveLpUnAcc ();
         //
         // Makes appropriate calls to CLP to solve the optimization model as
         // an LP in unaccelerated mode.

      void invokeSimplex (ClpSimplex * theClpSimplex);
         //
         // Makes appropriate calls to CLP for the main simplex invocation.

      void cleanUpSimplex ();
         //
         // Makes appropriate calls to CLP to do the clean-up simplex after
         // post-solve.

      void passInitSoln ();
         //
         // Copies the initial primal optimization solution from myOptModel () 
         // into myOsiSI (), as needed.

      void solveLpAcc ();
         //
         // Makes appropriate calls to COIN to solve the optimization model as
         // an LP in accelerated mode.

      void checkLpSolnStatus ();
         //
         // Checks the status of the LP solution.
         // Issues an error, if it is anything other than optimal.

      void checkMipSolnStatus ();
         //
         // Checks the status of the MIP solution.
         // Issues an error, if it is anything other than optimal.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptModel ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptModel ().

      void shutDownCoin ();
         //
         // Shuts down the COIN objects.

      void shutDownCMH (CoinMessageHandler * & theCMH);
         //
         // Shuts down theCMH.

      OsiSolverInterface * myOsiSI ();
         //
         // Returns the OsiSolverInterface currently being used by this
         // CoinSolver.

      ClpSimplex * myClpSimplex ();
         //
         // Returns the ClpSimplex owned by myOsiSI ().

      inline bool mipMode ();
         //
         // Returns true, iff myOptModel is a MIP.

      accessNonNull (CbcModel *, myCbcModel)

      noCopyCtorAssign (WitCoinSolver);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOptModel * const myOptModel_;
         //
         // The OptModel for this CoinSolver.

      OsiClpSolverInterface * lpModeOsiClpSI_;
         //
         // The OsiSolverInterface owned by this CoinSolver in LP mode;
         // NULL in MIP mode.

      CbcModel * myCbcModel_;
         //
         // The CbcModel owned by this CoinSolver in MIP mode;
         // NULL in LP mode.

      bool coinIsSetUp_;
         //
         // True, iff the COIN objects are currently set up.
   };

#endif // OPT_IMPLODE

#endif
@


1.23
log
@Stochastic Implosion
@
text
@@


1.22
log
@Stochastic Implosion
@
text
@d84 1
a84 1
         // Passes the fixed parts of the optimization problem to myOsiSI ().
d92 1
a92 1
         // Passes the flexible parts of the optimization problem to myOsiSI ().
d113 1
a113 1
         // Makes appropriate calls to COIN to solve the optimization problem as
d118 1
a118 1
         // Makes appropriate calls to CLP to solve the optimization problem as
d137 1
a137 1
         // Makes appropriate calls to COIN to solve the optimization problem as
@


1.21
log
@External opt implosion.
@
text
@d36 1
a36 1
// Responsible for solving an OptProb by using solvers from COIN, specifically,
d48 1
a48 1
      WitCoinSolver (WitOptProb *);
d62 1
a62 1
         // Solves myOptProb_.
d132 1
a132 1
         // Copies the initial primal optimization solution from myOptProb () 
d152 1
a152 1
         // Stores the primal solution in myOptProb ().
d156 1
a156 1
         // Stores the dual solution in myOptProb ().
d177 1
a177 1
         // Returns true, iff myOptProb is a MIP.
d187 1
a187 1
      WitOptProb * const myOptProb_;
d189 1
a189 1
         // The OptProb for this CoinSolver.
@


1.20
log
@App controlled opt implosion.
@
text
@d140 1
a140 1
      void checkSolnStatus ();
d142 6
a147 1
         // Checks the status of the solution.
@


1.19
log
@App controlled opt implode.
@
text
@d82 1
a82 1
      void passFixedModel ();
d84 1
a84 1
         // Passes the fixed parts of the optimization model to myOsiSI ().
d90 1
a90 1
      void passFlexibleModel ();
d92 1
a92 1
         // Passes the flexible parts of the optimization model to myOsiSI ().
@


1.18
log
@App controlled opt implosion.
@
text
@d21 2
d201 2
@


1.17
log
@Integrality constraints.
@
text
@d34 1
a34 1
// Responsible for solving an OptModel by using solvers from COIN, specifically,
d46 1
a46 1
      WitCoinSolver (WitOptModel *);
d60 1
a60 1
         // Solves myOptModel_.
d130 1
a130 1
         // Copies the initial primal optimization solution from myOptModel () 
d145 1
a145 1
         // Stores the primal solution in myOptModel ().
d149 1
a149 1
         // Stores the dual solution in myOptModel ().
d170 1
a170 1
         // Returns true, iff myOptModel is a MIP.
d180 1
a180 1
      WitOptModel * const myOptModel_;
d182 1
a182 1
         // The OptModel for this CoinSolver.
@


1.16
log
@Updated the copyright date on all source files.
@
text
@a71 4
      void innerSolve ();
         //
         // Does the main work of solve.

@


1.15
log
@Removed class OptSolver.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@Fixed a bug in witEvalObjectives in COIN mode.
@
text
@d19 1
a19 1
#include <OptSolver.h>
a35 6
//
// Class Hierarchy:
//
// ProbAssoc
//    OptSolver
//       CoinSolver
d38 1
a38 1
class WitCoinSolver: public WitOptSolver
d48 5
a52 1
   private:
d55 1
a55 1
      // Private member functions.
d58 6
d65 1
a65 1
      // Destructor function.
a67 2
      virtual ~WitCoinSolver ();

a71 4
      virtual void solve ();
         //
         // Override from class OptSolver.

d184 4
@


1.13
log
@Modified calls to COIN for unaccelerated mode.
@
text
@d195 4
@


1.12
log
@Updated to use COIN Cbc instead of Sbb
@
text
@d125 9
@


1.11
log
@Continued implementation of opt with COIN.
@
text
@d26 1
a26 1
class SbbModel;
d169 1
a169 1
      accessNonNull (SbbModel *, mySbbModel)
d182 1
a182 1
      SbbModel * mySbbModel_;
d184 1
a184 1
         // The SbbModel owned by this CoinSolver in MIP mode;
@


1.10
log
@Continued implementation of opt with COIN.
@
text
@d152 1
a152 1
      void shutDownMH (CoinMessageHandler * theCoinMessageHandler);
d154 1
a154 1
         // Shuts down theCoinMessageHandler.
@


1.9
log
@Continued implementation of Opt with COIN.
rjw
@
text
@d27 1
d88 1
a88 1
         // Passes the fixed parts of the optimization model to myOsiClpSI_.
d96 1
a96 1
         // Passes the flexible parts of the optimization model to myOsiClpSI_.
d100 1
a100 1
         // Passes the bounds on each constraint to myOsiClpSI_.
d104 1
a104 1
         // Passes the bounds on each variable to myOsiClpSI_.
d108 1
a108 1
         // Passes the objective coefficient on each variable to myOsiClpSI_.
d112 1
a112 1
         // Writes an MPS file of the model entered into myOsiClpSI_, if
d128 1
a128 1
         // into myOsiClpSI_, as needed.
d156 13
d177 1
a177 1
      OsiClpSolverInterface * ownedOsiClpSI_;
a185 10

      OsiClpSolverInterface * myOsiClpSI_;
         //
         // The OsiClpSolverInterface to be used by this CoinSolver:
         //    In LP mode,  it's ownedOsiClpSI_.
         //    In MIP mode, it's mySbbModel_->solver ().

      ClpSimplex * myClpSimplex_;
         //
         // The ClpSimplex owned by myOsiSI_, or NULL, if myOsiSI_ is NULL.
@


1.8
log
@Continued implementation of opt with COIN.
@
text
@d26 1
d28 1
d81 4
d89 4
d114 5
d151 6
d163 10
d175 3
a177 1
         // The OsiSolverInterface owned by this CoinSolver, or NULL.
d181 1
a181 2
         // The ClpSimplex owned by myOsiClpSI_, or NULL, if myOsiClpSI_ is
         // NULL.
@


1.7
log
@Continued implementation of opt with COIN.
@
text
@d71 1
a71 1
      void setUpClpOsi ();
d73 5
a77 1
         // Sets up CLP / OSI.
d114 5
d132 1
a132 1
      void shutDownClpOsi ();
d134 1
a134 1
         // Shuts down CLP / OSI.
@


1.6
log
@Continued implementation of opt with COIN.
@
text
@d31 2
a32 2
// Responsible for solving an OptModel by using CLP through the OSI interface,
// and by using SBB.
a126 5
      ClpSimplex * myClpSimplex ();
         //
         // Returns the ClpSimplex for this CoinSolver.
         // Requires that myOsiClpSI_ is not NULL.

d136 5
@


1.5
log
@Continued implementation of opt with COIN.
@
text
@a19 1
#include <Str.h>
d22 1
a22 24

#define USE_COIN 0

//------------------------------------------------------------------------------
// USE_COIN
//
// If USE_COIN == 1, the main implementation of class CoinSolver will be
// compiled. The main implementation makes calls to COIN functions. It is
// located in CoinSolver.C.
//
// If USE_COIN == 0, the dummy implementation of class CoinSolver will be
// compiled. The dummy implementation makes no calls to COIN functions. It is
// located in OptModel.C.
//
// When USE_COIN == 0, WIT can be built either with or without compiling and
// linking CoinSolver.C; it doesn't matter.
//
// For now, until we are ready to link WIT to the COIN code an all platforms
// that WIT supports, the CVS repository version of WIT should always have
// USE_COIN == 0.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// COIN Typedefs.
d25 2
a26 8
class OsiOslSolverInterface;

//------------------------------------------------------------------------------
// OSL Typedefs.
//------------------------------------------------------------------------------

typedef struct EKKContext EKKContext;
typedef struct EKKModel   EKKModel;
d31 2
a32 1
// Responsible for solving an OptModel by using the COIN solvers.
d36 3
a38 2
// OptSolver
//    CoinSolver
d71 1
a71 5
      void createSolverInter ();
         //
         // Creates mySolverInter_.

      void deleteSolverInter ();
d73 1
a73 1
         // Deletes mySolverInter_.
d77 1
a77 5
         // Passes the fixed parts of the optimization model to OSL.

      void markIntVars ();
         //
         // Marks the integer variables as such.
d81 1
a81 1
         // Passes the flexible parts of the optimization model to OSL.
d85 1
a85 1
         // Passes the bounds on each constraint to OSL.
d89 1
a89 1
         // Passes the bounds on each variable to OSL.
d93 1
a93 1
         // Passes the objective coefficient on each variable to OSL.
d95 1
a95 1
      void solveMIP ();
d97 2
a98 2
         // Makes appropriate calls to OSL to solve the optimization problem as
         // a MIP.
d102 1
a102 1
         // Makes appropriate calls to OSL to solve the optimization problem as
a104 5
      void solveLpAcc ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // an LP in accelerated mode.

d108 1
a108 1
         // into OSL, as needed.
d110 1
a110 1
      void scale ();
d112 2
a113 21
         // Calls OSL's scale.

      void preSolve ();
         //
         // Calls OSL's preSolve.

      void crash ();
         //
         // Calls OSL's crash, as needed.

      void primalSimplex ();
         //
         // Calls OSL's primalSimplex.

      void postSolve ();
         //
         // Calls OSL's postSolve.

      void postSolveWithRec (const char * saveFile);
         //
         // Calls OSL's postSolve with recovery for the OSL postSolve bug.
d123 1
a123 1
      void printSoln ();
d125 1
a125 1
         // Has OSL print its solution.
d127 1
a127 1
      void checkProbStat ();
d129 2
a130 17
         // Checks the value of OSL's IPROBSTAT variable and generates a
         // fatal error if it is anything but 0 (optimal).

      void checkRetPtr (const void * thePtr, const char * funcName);
         //
         // If thePtr == NULL, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      void checkRetVal (const char * funcName);
         //
         // If retVal_ != 0, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      EKKModel * myOslModel ();
         //
         // Returns the OSL Model for this CoinSolver.
         // Requires that mySolverInter_ is not NULL.
d138 1
a138 10
      OsiOslSolverInterface * mySolverInter_;
         //
         // The OsiOslSolverInterface owned by this CoinSolver, or NULL.

      int retVal_;
         //
         // The integer value returned by some OSL functions, where
         // retVal_ != 0 indicates an error.

      WitString presolveFileName_;
d140 1
a140 1
         // The file name to be used by preSolve and postSolve.
@


1.4
log
@Continued implementation of opt with COIN.
@
text
@@


1.3
log
@Continued implementation of opt with COIN.
Modified appl.mk to facilitate linking WIT to COIN.
@
text
@d23 4
d33 1
a33 1
// If USE_COIN == 0, the main implementation of class CoinSolver will be
a43 2

#define USE_COIN 0
@


1.2
log
@Continued implementation of opt with Coin.
@
text
@d23 21
@


1.1
log
@Continued implementation of opt with COIN.
@
text
@d20 14
d76 110
d189 13
@

