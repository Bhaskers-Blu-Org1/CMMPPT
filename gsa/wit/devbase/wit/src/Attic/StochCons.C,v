head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2007.08.07.17.35.36;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2007.08.03.20.36.19;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.08.01.18.56.02;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.31.23.18.26;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.31.23.04.46;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.31.22.22.33;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.30.22.38.03;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.27.23.15.16;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.27.19.53.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.27.18.58.03;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "StochCons.C"
//
// Constains the implementation the following classes:
//
//    StochCon
//    StResCon
//------------------------------------------------------------------------------

#include <StCons.h>
#include <Scenario.h>
#include <StochImpOP.h>
#include <StOptElMgr.h>
#include <StVars.h>
#include <Part.h>
#include <BomEntry.h>
#include <ExecPerSch.h>

//------------------------------------------------------------------------------
// Implementation of class StochCon.
//------------------------------------------------------------------------------

WitStochCon::WitStochCon (WitScenPer * theScenPer):

      WitOptCon  (theScenPer->myStochImpOP ()),
      myScenPer_ (theScenPer)
   {
   }

//------------------------------------------------------------------------------

WitStochCon::~WitStochCon ()
   {
   }

//------------------------------------------------------------------------------

WitOptProb * WitStochCon::myOptProb () const
   {
   return myScenPer_->myStochImpOP ();
   }

//------------------------------------------------------------------------------

void WitStochCon::printSource () const
   {
   printItem ();

   myStochImpOP ()->printPeriod   (myPer      ());
   myStochImpOP ()->printScenario (myScenario ());
   }

//------------------------------------------------------------------------------
// Implementation of class StResCon.
//------------------------------------------------------------------------------

WitStResCon::WitStResCon (WitPart * thePart, WitScenPer * theScenPer):

      WitStochCon (theScenPer),
      myPart_     (thePart)
   {
   }

//------------------------------------------------------------------------------

WitStResCon::~WitStResCon ()
   {
   }

//------------------------------------------------------------------------------

void WitStResCon::generateCoeffs ()
   {
   WitStScrapVar * theStScrapVar;
   WitBomEntry *   theBomEnt;
   WitOperation *  theOpn;
   WitPeriod       execPerF;
   WitPeriod       execPerL;
   WitPeriod       execPer;

   theStScrapVar =
      myStochImpOP ()->myStScrapVarFor (myPart_, myPer (), myScenario ());

   if (theStScrapVar != NULL)
      theStScrapVar->incCoeff (1.0);

   forEachEl (theBomEnt, myPart_->consumingBomEntries ())
      {
      theOpn = theBomEnt->myOperation ();

      getExecPerRange (theBomEnt, execPerF, execPerL);

      for (execPer = execPerL; execPer >= execPerF; execPer --)
         if (theBomEnt->impactPeriod ()[execPer] == myPer ())
            myStochImpOP ()->myStExecVarFor (theOpn, execPer, myScenario ())->
               incCoeff (theBomEnt->effConsRate ()[execPer]);
      }
   }

//------------------------------------------------------------------------------

void WitStResCon::compBounds ()
   {
   double supplyVolVal;

   supplyVolVal = myScenario ()->supplyVol () (myPart_)[myPer ()];

   setBoundsTo (supplyVolVal, supplyVolVal);
   }

//------------------------------------------------------------------------------

const char * WitStResCon::classText () const
   {
   return "Resource";
   }

//------------------------------------------------------------------------------

void WitStResCon::printItem () const
   {
   myStochImpOP ()->printItem (myPart_);
   }

//------------------------------------------------------------------------------

void WitStResCon::getExecPerRange (
      WitBillEntry * theBillEnt,
      WitPeriod &    execPerF,
      WitPeriod &    execPerL)
   {
   myStochImpOP ()->
      myExecPerSched ()->
         getExecPerRange (theBillEnt, myPer (), execPerF, execPerL);
   }
@


1.9
log
@Stochastic Implosion
@
text
@@


1.8
log
@Stochastic Implosion
@
text
@d56 4
a59 1
   stronglyAssert (false);
d129 7
@


1.7
log
@Stochastic Implosion
@
text
@d20 1
a27 3
#include <Scenario.h>
#include <MsgFac.h>

d110 5
a114 1
   myScenario ()->myMsgFac () ("singleStochLPNyiSmsg");
@


1.6
log
@Stochastic Implosion
@
text
@d27 3
d112 1
a112 1
   stronglyAssert (false);
@


1.5
log
@Stochastic Implosion
@
text
@d81 1
d87 1
a87 2
      myStochImpOP ()->
         myStScrapVarMgr ()->myElFor (myPart_, myPer (), myScenario ());
d94 3
a96 3
      myStochImpOP ()->
         myExecPerSched ()->
            getExecPerRange (theBomEnt, myPer (), execPerF, execPerL);
d100 2
a101 4
            myStochImpOP ()->
               myStExecVarMgr ()->
                  myElFor (theBomEnt->myOperation (), execPer, myScenario ())->
                     incCoeff (theBomEnt->effConsRate ()[execPer]);
d118 12
@


1.4
log
@Stochastic Implosion
@
text
@d23 3
a25 3

#include <Scenario.h>
#include <MsgFac.h>
d80 4
d92 13
a104 1
   myScenario ()->myProblem ()->myMsgFac () ("singleStochLPNyiSmsg");
@


1.3
log
@Stochastic Implosion
@
text
@d83 1
a83 2
         myStScrapVarMgr ()->
            myElFor (myScenario (), myPart_, myPer ());
@


1.2
log
@Stochastic Implosion
@
text
@d21 5
a25 1
#include <ScenPer.h>
d79 11
a89 1
   stronglyAssert (false);
@


1.1
log
@Stochastic Implosion
@
text
@d16 1
d19 1
a19 1
#include <StochCon.h>
d53 38
@

