head	1.25;
access;
symbols
	latest_sce_4_20_20060523:1.24.0.2
	sce_4_20_20060523:1.24
	latest_sce4_20_OSL:1.22.0.2
	sce_4_20_OSL:1.22
	sce_410_withVa:1.20
	sce_4_05_20040511:1.19
	sce_4_00_20040201:1.15
	nextGenBranch:1.14.0.2
	nextGenRoot:1.14
	sce_3_30_20030627:1.14
	EndRw-branch:1.11.0.4
	Root-of-EndRw:1.11
	rwToStl:1.11.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2006.08.18.18.43.37;	author rjw;	state dead;
branches;
next	1.24;

1.24
date	2006.05.02.17.34.02;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.21.21.40.04;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.02.21.40.35;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.04.19.53.50;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.08.05.21.11.13;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.13.21.50.13;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.10.22.53.19;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.20.15.37.35;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.02.06.23.27.09;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.18.18.30.16;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.23.18.12.35;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.23.20.47.16;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.02.22.18.32;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.06.19.56.07;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.29.23.06.26;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.26.22.49.01;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.26.20.16.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.23.21.00.36;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.20.19.07.24;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.08.21.58.54;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.20.00.44.19;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.43;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.13;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches;
next	;


desc
@@


1.25
log
@App controlled opt implosion.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "ModelEl.C"
//
// Implementation of the following classes:
//
//    BoundPair
//    Coeff
//    ModelEl
//    OptVar
//    OptCon
//------------------------------------------------------------------------------

#include <OptVar.h>
#include <OptCon.h>
#include <Coeff.h>
#include <OptModel.h>
#include <OptObj.h>

#include <float.h>

#ifdef OPT_IMPLODE

//------------------------------------------------------------------------------
// Implementation of class BoundPair.
//------------------------------------------------------------------------------

WitBoundPair::WitBoundPair ():

      lower_ (0.0),
      upper_ (0.0)
   {
   }

//------------------------------------------------------------------------------

WitBoundPair::WitBoundPair (double lowerInit, double upperInit):
      lower_ (lowerInit),
      upper_ (upperInit)
   {
   }

//------------------------------------------------------------------------------

void WitBoundPair::operator = (const WitBoundPair & theBoundPair)
   {
   lower () = theBoundPair.lower ();
   upper () = theBoundPair.upper ();
   }

//------------------------------------------------------------------------------

WitBoundPair::~WitBoundPair ()
   {
   }

//------------------------------------------------------------------------------
// Implementation of class Coeff.
//------------------------------------------------------------------------------

WitCoeff::WitCoeff (WitOptCon * theCon, WitOptVar * theVar, double theValue):

      myCon_   (theCon),
      myVar_   (theVar),
      myValue_ (theValue)
   {
   }

//------------------------------------------------------------------------------

WitCoeff::~WitCoeff ()
   {
   }

//------------------------------------------------------------------------------
// Implementation of class ModelEl.
//------------------------------------------------------------------------------

WitModelEl::WitModelEl (WitOptModel * theOptModel, int theIndex):

      myOptModel_ (theOptModel),
      myCoeffVec_ (),
      nCoeffs_    (0),
      bounds_     (0.0, 0.0),
      index_      (theIndex)
   {
   }

//------------------------------------------------------------------------------

WitModelEl::~WitModelEl ()
   {
   }

//------------------------------------------------------------------------------

void WitModelEl::writeExtReal (
      FILE * outFile,
      const char * fFormat,
      const char * sFormat,
      double val)
   {
   if      (val == + DBL_MAX)
      fprintf (outFile, sFormat, "+Infty");

   else if (val == - DBL_MAX)
      fprintf (outFile, sFormat, "-Infty");

   else
      fprintf (outFile, fFormat, val);
   }

//------------------------------------------------------------------------------

void WitModelEl::setBoundsTo (double theLower, double theUpper)
   {
   bounds_.lower () = theLower;
   bounds_.upper () = theUpper;
   }

//------------------------------------------------------------------------------

void WitModelEl::allocMyCoeffs (int nCoeffsForModelEl)
   {
   myCoeffVec_.resize (nCoeffsForModelEl);
   }

//------------------------------------------------------------------------------

void WitModelEl::clearMyCoeffs ()
   {
   nCoeffs_ = 0;
   }

//------------------------------------------------------------------------------

void WitModelEl::store (WitCoeff * theCoeff)
   {
   myCoeffVec_[nCoeffs_] = theCoeff;

   nCoeffs_ ++;
   }

//------------------------------------------------------------------------------

void WitModelEl::printID () const
   {
   fprintf (myOptModel_->modelFile (), "%s #%-7d %-12s",
      kindText (), index (), classText ());

   printSource ();
   }

//------------------------------------------------------------------------------

void WitModelEl::printBounds (const WitBoundPair & preScreenBounds) const
   {
   writeExtReal (myOptModel_->modelFile (), " %7.1f", " %7s",
      bounds ().lower ());

   writeExtReal (myOptModel_->modelFile (), " %7.1f", " %7s",
      bounds ().upper ());

   if (preScreenBounds.lower () == bounds ().lower ())
      fprintf (myOptModel_->modelFile (), " %7s", "");
   else
      writeExtReal (myOptModel_->modelFile (), " %7.1f", " %7s",
         preScreenBounds.lower ());

   if (preScreenBounds.upper () == bounds ().upper ())
      fprintf (myOptModel_->modelFile (), " %7s", "");
   else
      writeExtReal (myOptModel_->modelFile (), " %7.1f", " %7s",
         preScreenBounds.upper ());

   fprintf (myOptModel_->modelFile (), "\n");
   }

//------------------------------------------------------------------------------

void WitModelEl::attachCoeffItr (WitCoeffItr & theItr) const
   {
   myCoeffVec_.attachItr (theItr);
   }

//------------------------------------------------------------------------------

WitOptImploder * WitModelEl::myOptImploder () const
   {
   return myOptModel ()->myOptImploder ();
   }

//------------------------------------------------------------------------------
// Implementation of class OptVar.
//------------------------------------------------------------------------------

WitOptVar::WitOptVar (WitOptModel * theOptModel):

      WitModelEl (theOptModel, theOptModel->nOptVars ()),

      mainObjCoeffVal_ (0.0)
   {
   myOptModel ()->store (this);
   }

//------------------------------------------------------------------------------

WitOptVar::~WitOptVar ()
   {
   }

//------------------------------------------------------------------------------

void WitOptVar::compBounds ()
   {
   setBoundsTo (0.0, + DBL_MAX);
   }

//------------------------------------------------------------------------------

double WitOptVar::solnValue () const
   {
   return primalValue ();
   }

//------------------------------------------------------------------------------

double WitOptVar::indepInitValue () const
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitOptVar::boundsCoeffVal () const
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitOptVar::primaryCoeffVal () const
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitOptVar::revCoeffVal () const
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitOptVar::invCoeffVal () const
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitOptVar::servCoeffVal () const
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

double WitOptVar::subCoeffVal () const
   {
   return 0.0;
   }

//------------------------------------------------------------------------------

bool WitOptVar::isAnIntVar () const
   {
   return false;
   }

//------------------------------------------------------------------------------

void WitOptVar::incCoeff (double delta)
   {
   witAssert (this != NULL);

   myOptModel ()->incCoeff (this, delta);
   }

//------------------------------------------------------------------------------

void WitOptVar::compMainObjCoeffVal ()
   {
   mainObjCoeffVal_ = myOptModel ()->mainObj ()->coeffVal (this);
   }

//------------------------------------------------------------------------------

void WitOptVar::print () const
   {
   printID ();

   fprintf (myOptModel ()->modelFile (), 
      " %1s %7.2f",
      isAnIntVar ()? "I": " ",
      mainObjCoeffVal ());

   printBounds (myOptModel ()->preScreenBounds (this));
   }

//------------------------------------------------------------------------------

double WitOptVar::reducedReward () const
   {
   double      rrVal;
   WitCoeffItr theItr;
   WitCoeff *  theCoeff;

   rrVal = mainObjCoeffVal ();

   attachCoeffItr (theItr);

   while (theItr.advance (theCoeff))
      rrVal -= theCoeff->myCon ()->dualValue () * theCoeff->myValue ();

    return rrVal;
   }

//------------------------------------------------------------------------------

void WitOptVar::setPrimalValue (double theValue)
   {
   primalValue_ = theValue;
   }

//------------------------------------------------------------------------------

const char * WitOptVar::kindText () const
   {
   return "Var";
   }

//------------------------------------------------------------------------------
// Implementation of class OptCon.
//------------------------------------------------------------------------------

WitOptCon::WitOptCon (WitOptModel * theOptModel):

      WitModelEl (theOptModel, theOptModel->nOptCons ()),

      dualValue_ (0.0)
   {
   myOptModel ()->store (this);
   }

//------------------------------------------------------------------------------

WitOptCon::~WitOptCon ()
   {
   WitCoeffItr theItr;
   WitCoeff *  theCoeff;

   attachCoeffItr (theItr);

   while (theItr.advance (theCoeff))
      delete theCoeff;
   }

//------------------------------------------------------------------------------

double WitOptCon::solnValue () const
   {
   return dualValue ();
   }

//------------------------------------------------------------------------------
// screenable
//
// Returns true, iff this OptCon can be screened.
//
// It is assumed that all variables that intersect this OptCon are
// constrained (implicitly or explicitly) to be nonnegative.
// The following conditions are tested:
//
// A. The upper bound on this OptCon is zero.
// B. Each variable whose Coeff in this OptCon is negative has an upper bound
//    of zero.
// C. Each variable whose Coeff in this OptCon is non-zero has a nonpositive
//    lower bound and a nonnegative upper bound.
//
// When A and B hold, it follows that any variable with non-zero Coeff in
// this OptCon must be zero to be feasible. If, in addition, C fails to hold,
// then this OptCon causes an infeasibility and so it should not be screened.
// Otherwise, if A, B, and C hold, then this OptCon should be screened.
//------------------------------------------------------------------------------

bool WitOptCon::screenable () const
   {
   WitCoeffItr theItr;
   WitCoeff *  theCoeff;

   if (fabs (bounds ().upper ()) > FLOAT_EPSILON)
      return false;
         //
         // A fails.

   attachCoeffItr (theItr);

   while (theItr.advance (theCoeff))
      if (theCoeff->myValue () < - FLOAT_EPSILON)
         if (fabs (theCoeff->myVar ()->bounds ().upper ()) > FLOAT_EPSILON)
            return false;
               //
               // B fails.

   attachCoeffItr (theItr);

   while (theItr.advance (theCoeff))
      {
      if (fabs (theCoeff->myValue ()) <= FLOAT_EPSILON)
         continue;

      if (theCoeff->myVar ()->bounds ().lower () > + FLOAT_EPSILON)
         return false;
            //
            // C fails.

      if (theCoeff->myVar ()->bounds ().upper () < - FLOAT_EPSILON)
         return false;
            //
            // C fails.
      }

   return true;
   }

//------------------------------------------------------------------------------

void WitOptCon::print () const
   {
   WitCoeffItr theItr;
   WitCoeff *  theCoeff;

   fprintf     (myOptModel ()->modelFile (), "\n");
   printID     ();
   printBounds (myOptModel ()->preScreenBounds (this));

   attachCoeffItr (theItr);

   while (theItr.advance (theCoeff))
      {
      theCoeff->myVar ()->printID ();

      fprintf (myOptModel ()->modelFile (), " %7.1f\n", theCoeff->myValue ());
      }
   }

//------------------------------------------------------------------------------

void WitOptCon::setDualValue (double theValue)
   {
   dualValue_ = theValue;
   }

//------------------------------------------------------------------------------

const char * WitOptCon::kindText () const
   {
   return "Con";
   }

#endif
@


1.24
log
@Updated the copyright date on all source files.
@
text
@@


1.23
log
@Removed some more OSL items.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.22
log
@[shared-resource pegging]
@
text
@d28 2
d111 1
a111 1
   if      (val == + OSL_INFTY)
d114 1
a114 1
   else if (val == - OSL_INFTY)
d224 1
a224 1
   setBoundsTo (0.0, + OSL_INFTY);
@


1.21
log
@[multi-thread]
@
text
@d88 2
a89 1
      myCoeffs_   (),
d131 1
a131 1
   myCoeffs_.resize (nCoeffsForModelEl);
d138 1
a138 1
   myCoeffs_.clear ();
d145 3
a147 1
   myCoeffs_.append (theCoeff);
d187 7
d322 3
a324 2
   double     rrVal;
   WitCoeff * theCoeff;
d328 3
a330 1
   forEachElDense (theCoeff, myCoeffs ())
d367 4
a370 1
   WitCoeff * theCoeff;
d372 1
a372 1
   forEachElDense (theCoeff, myCoeffs ())
d406 2
a407 1
   WitCoeff * theCoeff;
d414 3
a416 1
   forEachElDense (theCoeff, myCoeffs ())
d423 3
a425 1
   forEachElDense (theCoeff, myCoeffs ())
d448 2
a449 1
   WitCoeff * theCoeff;
d455 3
a457 1
   forEachElDense (theCoeff, myCoeffs ())
@


1.20
log
@Minor change.
@
text
@d151 1
a151 1
   fprintf (WitOptModel::modelFile (), "%s #%-7d %-12s",
d161 1
a161 1
   writeExtReal (WitOptModel::modelFile (), " %7.1f", " %7s",
d164 1
a164 1
   writeExtReal (WitOptModel::modelFile (), " %7.1f", " %7s",
d168 1
a168 1
      fprintf (WitOptModel::modelFile (), " %7s", "");
d170 1
a170 1
      writeExtReal (WitOptModel::modelFile (), " %7.1f", " %7s",
d174 1
a174 1
      fprintf (WitOptModel::modelFile (), " %7s", "");
d176 1
a176 1
      writeExtReal (WitOptModel::modelFile (), " %7.1f", " %7s",
d179 1
a179 1
   fprintf (WitOptModel::modelFile (), "\n");
d300 1
a300 1
   fprintf (WitOptModel::modelFile (), 
d429 1
a429 1
   fprintf     (WitOptModel::modelFile (), "\n");
d437 1
a437 1
      fprintf (WitOptModel::modelFile (), " %7.1f\n", theCoeff->myValue ());
@


1.19
log
@Double Precision.
@
text
@d370 1
a370 1
// Returns true, iff this WitOptCon can be screened.
d372 1
a372 1
// It is assumed that all variables that intersect this WitOptCon are
d376 2
a377 2
// A. The upper bound on this WitOptCon is zero.
// B. Each variable whose Coeff in this WitOptCon is negative has an upper bound
d379 1
a379 1
// C. Each variable whose Coeff in this WitOptCon is non-zero has a nonpositive
d383 3
a385 3
// this WitOptCon must be zero to be feasible. If, in addition, C fails to hold,
// then this WitOptCon causes an infeasibility and so it should not be screened.
// Otherwise, if A, B, and C hold, then this WitOptCon should be screened.
@


1.18
log
@Double Precision.
@
text
@d51 1
a51 1
void WitBoundPair::copy (const WitBoundPair & theBoundPair)
@


1.17
log
@Continued double precision.
@
text
@d67 1
a67 1
WitCoeff::WitCoeff (WitOptCon * theCon, WitOptVar * theVar, float theValue):
d280 1
a280 1
void WitOptVar::incCoeff (float delta)
@


1.16
log
@Continued double precision.
@
text
@d312 1
d315 1
a315 1
   double rr = static_cast <double> (mainObjCoeffVal ());
d318 1
a318 1
      rr -= theCoeff->myCon ()->dualValue () * theCoeff->myValue ();
d320 1
a320 1
    return rr;
@


1.15
log
@Continued implementation of opt with COIN.
@
text
@d231 1
a231 1
float WitOptVar::boundsCoeffVal () const
d238 1
a238 1
float WitOptVar::primaryCoeffVal () const
d245 1
a245 1
float WitOptVar::revCoeffVal () const
d252 1
a252 1
float WitOptVar::invCoeffVal () const
d259 1
a259 1
float WitOptVar::servCoeffVal () const
d266 1
a266 1
float WitOptVar::subCoeffVal () const
@


1.14
log
@Continued implementation of opt with COIN.
@
text
@a21 5
int compiledModelEl = 1;
   //
   // WATCOM's strict compatibility mode requires every file to
   // have at least one external definition.

@


1.13
log
@Changed some C style casts to C++ style.
@
text
@d329 7
d443 7
@


1.12
log
@Internal changes.
@
text
@d319 1
a319 1
   double rr = (double) mainObjCoeffVal ();
@


1.11
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d278 1
a278 1
WitBoolean WitOptVar::isAnIntVar () const
d280 1
a280 1
   return witFALSE;
d367 1
a367 1
// Returns TRUE, iff this WitOptCon can be screened.
d385 1
a385 1
WitBoolean WitOptCon::screenable () const
d390 1
a390 1
      return witFALSE;
d397 1
a397 1
            return witFALSE;
d407 1
a407 1
         return witFALSE;
d412 1
a412 1
         return witFALSE;
d417 1
a417 1
   return witTRUE;
@


1.10
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d125 1
a125 1
void WitModelEl::bounds (double theLower, double theUpper)
d217 1
a217 1
   bounds (0.0, + OSL_INFTY);
@


1.9
log
@Continued implementation of opt implosion with lot sizes.
@
text
@a16 1
//    OptObj
d18 2
a19 2
//       OptVar
//       OptCon
d27 3
d31 1
a86 59
// Implementation of class OptObj.
//------------------------------------------------------------------------------

WitOptObj::WitOptObj (const char * theText, WitOptModel * theOptModel):

      myText_     (theText),
      myOptModel_ (theOptModel)
   {
   myOptModel_->store (this);
   }

//------------------------------------------------------------------------------

WitOptObj::~WitOptObj ()
   {
   }

//------------------------------------------------------------------------------

void WitOptObj::print () const
   {
   WitOptVar * theVar;
   float       varCoeffVal;

   fprintf (WitOptModel::modelFile (), "\n%s:\n", myText ());

   forEachEl (theVar, myOptModel_->myOptVars ())
      {
      varCoeffVal = coeffVal (theVar);

      if (fabs (varCoeffVal) > FLOAT_EPSILON)
         {
         theVar->printID ();

         fprintf (WitOptModel::modelFile (), " %7.1f\n", varCoeffVal);
         }
      }
   }

//------------------------------------------------------------------------------

double WitOptObj::myValue () const
   {
   WitOptVar * theVar;
   double      varVal;
   double      val = 0.0;

   forEachEl (theVar, myOptModel_->myOptVars ())
      {
      varVal = theVar->primalValue ();

      if (fabs (varVal) > FLOAT_EPSILON)
         val += ((double) coeffVal (theVar)) * varVal;
      }

   return val;
   }

//------------------------------------------------------------------------------
d187 6
@


1.8
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d17 1
a17 1
//    MpObj
d19 2
a20 2
//       MpVar
//       MpCon
d28 1
a28 1
#include <MpModel.h>
d69 1
a69 1
WitCoeff::WitCoeff (WitMpCon * theCon, WitMpVar * theVar, float theValue):
d84 1
a84 1
// Implementation of class MpObj.
d87 1
a87 1
WitMpObj::WitMpObj (const char * theText, WitMpModel * theMpModel):
d89 2
a90 2
      myText_    (theText),
      myMpModel_ (theMpModel)
d92 1
a92 1
   myMpModel_->store (this);
d97 1
a97 1
WitMpObj::~WitMpObj ()
d103 1
a103 1
void WitMpObj::print () const
d105 2
a106 2
   WitMpVar * theVar;
   float      varCoeffVal;
d108 1
a108 1
   fprintf (WitMpModel::modelFile (), "\n%s:\n", myText ());
d110 1
a110 1
   forEachEl (theVar, myMpModel_->myMpVars ())
d118 1
a118 1
         fprintf (WitMpModel::modelFile (), " %7.1f\n", varCoeffVal);
d125 1
a125 1
double WitMpObj::myValue () const
d127 3
a129 3
   WitMpVar * theVar;
   double     varVal;
   double     val = 0.0;
d131 1
a131 1
   forEachEl (theVar, myMpModel_->myMpVars ())
d146 1
a146 1
WitModelEl::WitModelEl (WitMpModel * theMpModel, int theIndex):
d148 4
a151 4
      myMpModel_ (theMpModel),
      myCoeffs_  (),
      bounds_    (0.0, 0.0),
      index_     (theIndex)
d212 1
a212 1
   fprintf (WitMpModel::modelFile (), "%s #%-7d %-12s",
d222 1
a222 1
   writeExtReal (WitMpModel::modelFile (), " %7.1f", " %7s",
d225 1
a225 1
   writeExtReal (WitMpModel::modelFile (), " %7.1f", " %7s",
d229 1
a229 1
      fprintf (WitMpModel::modelFile (), " %7s", "");
d231 1
a231 1
      writeExtReal (WitMpModel::modelFile (), " %7.1f", " %7s",
d235 1
a235 1
      fprintf (WitMpModel::modelFile (), " %7s", "");
d237 1
a237 1
      writeExtReal (WitMpModel::modelFile (), " %7.1f", " %7s",
d240 1
a240 1
   fprintf (WitMpModel::modelFile (), "\n");
d245 1
a245 1
// Implementation of class MpVar.
d248 1
a248 1
WitMpVar::WitMpVar (WitMpModel * theMpModel):
d250 1
a250 1
      WitModelEl (theMpModel, theMpModel->nMpVars ()),
d254 1
a254 1
   myMpModel ()->store (this);
d259 1
a259 1
WitMpVar::~WitMpVar ()
d265 1
a265 1
void WitMpVar::compBounds ()
d272 1
a272 1
double WitMpVar::solnValue () const
d279 1
a279 1
double WitMpVar::indepInitValue () const
d286 1
a286 1
float WitMpVar::boundsCoeffVal () const
d293 1
a293 1
float WitMpVar::primaryCoeffVal () const
d300 1
a300 1
float WitMpVar::revCoeffVal () const
d307 1
a307 1
float WitMpVar::invCoeffVal () const
d314 1
a314 1
float WitMpVar::servCoeffVal () const
d321 1
a321 1
float WitMpVar::subCoeffVal () const
d328 1
a328 1
WitBoolean WitMpVar::isAnIntVar () const
d335 1
a335 1
void WitMpVar::incCoeff (float delta)
d339 1
a339 1
   myMpModel ()->incCoeff (this, delta);
d344 1
a344 1
void WitMpVar::compMainObjCoeffVal ()
d346 1
a346 1
   mainObjCoeffVal_ = myMpModel ()->mainObj ()->coeffVal (this);
d351 1
a351 1
void WitMpVar::print () const
d355 1
a355 1
   fprintf (WitMpModel::modelFile (), 
d360 1
a360 1
   printBounds (myMpModel ()->preScreenBounds (this));
d365 1
a365 1
double WitMpVar::reducedReward () const
d379 1
a379 1
const char * WitMpVar::kindText () const
d385 1
a385 1
// Implementation of class MpCon.
d388 1
a388 1
WitMpCon::WitMpCon (WitMpModel * theMpModel):
d390 1
a390 1
      WitModelEl (theMpModel, theMpModel->nMpCons ()),
d394 1
a394 1
   myMpModel ()->store (this);
d399 1
a399 1
WitMpCon::~WitMpCon ()
d409 1
a409 1
double WitMpCon::solnValue () const
d417 1
a417 1
// Returns TRUE, iff this WitMpCon can be screened.
d419 1
a419 1
// It is assumed that all variables that intersect this WitMpCon are
d423 2
a424 2
// A. The upper bound on this WitMpCon is zero.
// B. Each variable whose Coeff in this WitMpCon is negative has an upper bound
d426 1
a426 1
// C. Each variable whose Coeff in this WitMpCon is non-zero has a nonpositive
d430 3
a432 3
// this WitMpCon must be zero to be feasible. If, in addition, C fails to hold,
// then this WitMpCon causes an infeasibility and so it should not be screened.
// Otherwise, if A, B, and C hold, then this WitMpCon should be screened.
d435 1
a435 1
WitBoolean WitMpCon::screenable () const
d472 1
a472 1
void WitMpCon::print () const
d476 1
a476 1
   fprintf     (WitMpModel::modelFile (), "\n");
d478 1
a478 1
   printBounds (myMpModel ()->preScreenBounds (this));
d484 1
a484 1
      fprintf (WitMpModel::modelFile (), " %7.1f\n", theCoeff->myValue ());
d490 1
a490 1
const char * WitMpCon::kindText () const
@


1.7
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d328 7
d353 1
a353 1
   printID     ();
d355 4
a358 1
   fprintf     (WitMpModel::modelFile (), " %9.2f", mainObjCoeffVal ());
@


1.6
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d17 1
a17 1
//    LpObj
d19 2
a20 2
//       LpVar
//       LpCon
d28 1
a28 1
#include <LpModel.h>
d69 1
a69 1
WitCoeff::WitCoeff (WitLpCon * theCon, WitLpVar * theVar, float theValue):
d84 1
a84 1
// Implementation of class LpObj.
d87 1
a87 1
WitLpObj::WitLpObj (const char * theText, WitLpModel * theLpModel):
d90 1
a90 1
      myLpModel_ (theLpModel)
d92 1
a92 1
   myLpModel_->store (this);
d97 1
a97 1
WitLpObj::~WitLpObj ()
d103 1
a103 1
void WitLpObj::print () const
d105 1
a105 1
   WitLpVar * theVar;
d108 1
a108 1
   fprintf (WitLpModel::modelFile (), "\n%s:\n", myText ());
d110 1
a110 1
   forEachEl (theVar, myLpModel_->myLpVars ())
d118 1
a118 1
         fprintf (WitLpModel::modelFile (), " %7.1f\n", varCoeffVal);
d125 1
a125 1
double WitLpObj::myValue () const
d127 1
a127 1
   WitLpVar * theVar;
d131 1
a131 1
   forEachEl (theVar, myLpModel_->myLpVars ())
d146 1
a146 1
WitModelEl::WitModelEl (WitLpModel * theLpModel, int theIndex):
d148 1
a148 1
      myLpModel_ (theLpModel),
d212 1
a212 1
   fprintf (WitLpModel::modelFile (), "%s #%-7d %-12s",
d222 1
a222 1
   writeExtReal (WitLpModel::modelFile (), " %7.1f", " %7s",
d225 1
a225 1
   writeExtReal (WitLpModel::modelFile (), " %7.1f", " %7s",
d229 1
a229 1
      fprintf (WitLpModel::modelFile (), " %7s", "");
d231 1
a231 1
      writeExtReal (WitLpModel::modelFile (), " %7.1f", " %7s",
d235 1
a235 1
      fprintf (WitLpModel::modelFile (), " %7s", "");
d237 1
a237 1
      writeExtReal (WitLpModel::modelFile (), " %7.1f", " %7s",
d240 1
a240 1
   fprintf (WitLpModel::modelFile (), "\n");
d245 1
a245 1
// Implementation of class LpVar.
d248 1
a248 1
WitLpVar::WitLpVar (WitLpModel * theLpModel):
d250 1
a250 1
      WitModelEl (theLpModel, theLpModel->nLpVars ()),
d254 1
a254 1
   myLpModel ()->store (this);
d259 1
a259 1
WitLpVar::~WitLpVar ()
d265 1
a265 1
void WitLpVar::compBounds ()
d272 1
a272 1
double WitLpVar::solnValue () const
d279 1
a279 1
double WitLpVar::indepInitValue () const
d286 1
a286 1
float WitLpVar::boundsCoeffVal () const
d293 1
a293 1
float WitLpVar::primaryCoeffVal () const
d300 1
a300 1
float WitLpVar::revCoeffVal () const
d307 1
a307 1
float WitLpVar::invCoeffVal () const
d314 1
a314 1
float WitLpVar::servCoeffVal () const
d321 1
a321 1
float WitLpVar::subCoeffVal () const
d328 1
a328 1
void WitLpVar::incCoeff (float delta)
d332 1
a332 1
   myLpModel ()->incCoeff (this, delta);
d337 1
a337 1
void WitLpVar::compMainObjCoeffVal ()
d339 1
a339 1
   mainObjCoeffVal_ = myLpModel ()->mainObj ()->coeffVal (this);
d344 1
a344 1
void WitLpVar::print () const
d348 1
a348 1
   fprintf     (WitLpModel::modelFile (), " %9.2f", mainObjCoeffVal ());
d350 1
a350 1
   printBounds (myLpModel ()->preScreenBounds (this));
d355 1
a355 1
double WitLpVar::reducedReward () const
d369 1
a369 1
const char * WitLpVar::kindText () const
d375 1
a375 1
// Implementation of class LpCon.
d378 1
a378 1
WitLpCon::WitLpCon (WitLpModel * theLpModel):
d380 1
a380 1
      WitModelEl (theLpModel, theLpModel->nLpCons ()),
d384 1
a384 1
   myLpModel ()->store (this);
d389 1
a389 1
WitLpCon::~WitLpCon ()
d399 1
a399 1
double WitLpCon::solnValue () const
d407 1
a407 1
// Returns TRUE, iff this WitLpCon can be screened.
d409 1
a409 1
// It is assumed that all variables that intersect this WitLpCon are
d413 2
a414 2
// A. The upper bound on this WitLpCon is zero.
// B. Each variable whose Coeff in this WitLpCon is negative has an upper bound
d416 1
a416 1
// C. Each variable whose Coeff in this WitLpCon is non-zero has a nonpositive
d420 3
a422 3
// this WitLpCon must be zero to be feasible. If, in addition, C fails to hold,
// then this WitLpCon causes an infeasibility and so it should not be screened.
// Otherwise, if A, B, and C hold, then this WitLpCon should be screened.
d425 1
a425 1
WitBoolean WitLpCon::screenable () const
d462 1
a462 1
void WitLpCon::print () const
d466 1
a466 1
   fprintf     (WitLpModel::modelFile (), "\n");
d468 1
a468 1
   printBounds (myLpModel ()->preScreenBounds (this));
d474 1
a474 1
      fprintf (WitLpModel::modelFile (), " %7.1f\n", theCoeff->myValue ());
d480 1
a480 1
const char * WitLpCon::kindText () const
@


1.5
log
@Preliminary work on single source.
@
text
@d250 1
a250 1
      WitModelEl (theLpModel, theLpModel->nLpVars () + 1),
d380 1
a380 1
      WitModelEl (theLpModel, theLpModel->nLpCons () + 1),
@


1.4
log
@Implemented and used class SelMgr.
@
text
@d53 1
a53 1
void WitBoundPair::operator = (const WitBoundPair & theBoundPair)
@


1.3
log
@Refactoring for selection splitting.
@
text
@a142 6

implementClearContents (WitLpObj)
   //
   // See RWClient.h.

//------------------------------------------------------------------------------
a374 6

implementClearContents (WitLpVar)
   //
   // See RWClient.h.

//------------------------------------------------------------------------------
a483 6

//------------------------------------------------------------------------------

implementClearContents (WitLpCon)
   //
   // See RWClient.h.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d53 1
a53 1
WitBoundPair & WitBoundPair::operator = (const WitBoundPair & theBoundPair)
a56 2

   return * this;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
