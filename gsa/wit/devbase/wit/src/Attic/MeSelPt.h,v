head	1.23;
access;
symbols
	EndRw-branch:1.22.0.6
	Root-of-EndRw:1.22
	rwToStl:1.22.0.4
	latest_sce_3_10_20010924:1.22.0.2
	sce_3_10_20010924:1.22
	latest_sce_3_00_20010601:1.13.0.2
	sce_3_00_20010601:1.13
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2003.03.03.23.26.51;	author rjw;	state dead;
branches;
next	1.22;

1.22
date	2001.08.30.20.29.23;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.08.24.22.03.20;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.23.21.13.53;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.22.20.41.48;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.21.17.31.45;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.17.22.00.10;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.13.20.30.23;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.13.15.02.50;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.01.19.23.33;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.29.22.11.26;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.25.22.59.13;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.25.14.53.25;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.10.22.31.12;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.08.21.35.44;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.03.15.28.38;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.30.21.29.41;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.08.16.37.05;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.26.21.46.01;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.42;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.23;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.11;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.22
log
@Refactoring for constrained stock reallocation.
@
text
@@


1.21
log
@Refactoring for constrained stock reallocation.
@
text
@a0 117
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MeSelPtH
#define MeSelPtH

//------------------------------------------------------------------------------
// Header file: "MeSelPt.h"
//
// Contains the declaration of class MeSelPt.
//------------------------------------------------------------------------------

#include <MeCoord.h>
#include <MeCand.h>
#include <SelPt.h>

//------------------------------------------------------------------------------
// Class MeSelPt
//
// A SelPt for multi-exec.
// A MeSelPt represents a BopEntry and explosion period at which an execution
// period must be selected.
//
// Implemented in MultiEx.C.
//------------------------------------------------------------------------------

class WitMeSelPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeSelPt (WitMeCoordPt * theMeCoordPt, WitMeDir * theMeDir);
         //
         // myMeCoordPt_ <-- theMeCoordPt
         // myMeDir_     <-- theMeDir

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMeSelPt ();

      //------------------------------------------------------------------------
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual WitBoolean  splittable     ();   
      virtual WitPart *   myFillPart     ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitBoolean hasResAlt ();
         //
         // Returns TRUE, iff this MeSelPt can alter its selection to another
         // exec period.
         // Valid only if a selection currently exists.

      void print ();
         // 
         // Prints this MeSelPt.

      inline WitProblem * myProblem ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMeCoordPt *, myMeCoordPt)
      accessFunc (WitMeDir *,     myMeDir)

      inline WitMeCand * selMeCand ()
         {
         return WitMeCand::safeCast (selSelCand ());
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void deSelectAsNeeded ();
         //
         // If this MeSelPt currently selects an exec period, this function
         // causes it to stop doing so.

      noCopyCtorAssign (WitMeSelPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMeCoordPt * const myMeCoordPt_;
         //
         // The MeCoordPt that owns this MeSelPt.

      WitMeDir * const myMeDir_;
         //
         // The MeDir associated with this MeSelPt.
   };

#endif
@


1.20
log
@Refactoring for constrained stock reallocation.
@
text
@d56 6
a61 7
      virtual void        alterSelection   ();
      virtual void        printSelection   ();
      virtual WitSelMgr * mySelMgr         ();
      virtual void        prtID            ();        
      virtual WitBoolean  splittable       ();   
      virtual void        adjustSplitBound (WitSelCand *, double &);
      virtual WitPart *   myFillPart       ();
@


1.19
log
@Refactoring for constrained stock reallocation.
@
text
@a55 1
      virtual WitTlObj *  selectedObj      ();  
d61 1
a61 1
      virtual void        adjustSplitBound (WitTlObj *, double &);
d89 1
a89 1
         return WitMeCand::downCast (selSelCand ());
@


1.18
log
@Refactoring for constrained stock reallocation.
@
text
@d20 1
d87 5
a91 1
      accessFunc (WitMeCand *,    selMeCand)
a116 5

      WitMeCand * selMeCand_;
         //
         // The currently selected MeCand for this MeSelPt, if any; otherwise
         // NULL.
@


1.17
log
@Implemented selection splitting speed-up by partial allocation reuse.
@
text
@d86 1
a86 1
      accessFunc (WitPeriod,      selExecPer)
d113 1
a113 1
      WitPeriod selExecPer_;
d115 2
a116 1
         // The currently selected execPer for this MeSelPt, if any, else -1.
@


1.16
log
@Fixed bug in two-way multi-exec:
   NSTN and ASAP multi-exec collisions were not being adequately detected.
@
text
@d62 1
@


1.15
log
@Refactoring of Multi-Exec: Removed alt-indices.
@
text
@d58 1
a58 1
      virtual WitSelMgr * mySelMgr         (WitSelector *);
a72 4
      void deSelect ();
         //
         // Causes this MeSelPt to have no selected exec period.

d77 2
d93 4
a96 1
      inline WitProblem * myProblem ();
@


1.14
log
@Continued development of selection splitting for multi=exec.
@
text
@a72 16
      inline WitPeriod selExecPer ()
         {
         witAssert (hasSelExecPer ());

         return myMeCoordPt_->indexedExecPer ()[selAltIdx_];
         }
         // 
         // Returns the currently selected exec period for this MeSelPt.

      inline WitBoolean hasSelExecPer ()
         {
         return (selAltIdx_ >= 0);
         }
         // 
         // Returns TRUE, iff this MeSelPt currently has a selected exec period.

d87 1
d111 1
a111 1
      int selAltIdx_;
d113 1
a113 2
         // The index in myMeCoordPt_->indexedExecPer () of the currently
         // selected execPer for this MeSelPt, if any, else -1.
@


1.13
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d52 1
a52 1
      // Other public member functions.
d55 7
a61 3
      virtual WitTlObj * selectedObj ();
         //
         // Override from class SelPt.
d63 3
a65 27
      virtual void alterSelection ();
         //
         // Override from class SelPt.

      virtual void printSelection ();
         //
         // Override from class SelPt.

      virtual WitSelMgr * mySelMgr (WitSelector *);
         //
         // Override from class SelPt.

      virtual WitBoolean splittable ();
         //
         // Override from class SelPt.

      virtual void adjustSplitBound (WitTlObj *, double &);
         //
         // Override from class SelPt.

      virtual void prtSplitting (double);
         //
         // Override from class SelPt.

      virtual void prtSplitExp (WitTlObj *);
         //
         // Override from class SelPt.
@


1.12
log
@Various refactorings for sel-split for multi-exec.
@
text
@d75 4
@


1.11
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d55 1
a55 1
      virtual WitTlObj * selection ();
d76 4
@


1.10
log
@Renamed AltPt classes to SelPt classes.
@
text
@d55 1
a55 1
      virtual void alterSelection ();
d59 1
a59 1
      virtual void splitSelection (double);
d75 4
d121 2
@


1.9
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@d1 138
@


1.8
log
@Fixed a bug on multi-exec.
@
text
@a0 136
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MeSelPtH
#define MeSelPtH

//------------------------------------------------------------------------------
// Header file: "MeSelPt.h"
//
// Contains the declaration of class MeSelPt.
//------------------------------------------------------------------------------

#include <MeCoord.h>
#include <AltPt.h>

//------------------------------------------------------------------------------
// Class MeSelPt
//
// "Multi-Exec Selection Point"
// Responsible for selecting the execution period to use in multi-exec mode,
// for a particular BopEntry, explosion period, and multi-exec direction.
//
// Implemented in MultiEx.C.
//------------------------------------------------------------------------------

class WitMeSelPt: public WitAltPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeSelPt (WitMeCoordPt * theMeCoordPt, WitMeDir * theMeDir);
         //
         // myMeCoordPt_ <-- theMeCoordPt
         // myMeDir_     <-- theMeDir

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMeSelPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void alterSelection ();
         //
         // Override from class AltPt.

      virtual void splitSelection (double);
         //
         // Override from class AltPt.

      virtual void printSelection ();
         //
         // Override from class AltPt.

      virtual WitSelMgr * mySelMgr (WitSelector *);
         //
         // Override from class AltPt.

      virtual WitBoolean splittable ();
         //
         // Override from class AltPt.

      WitBoolean hasResAlt ();
         //
         // Returns TRUE, iff this MeSelPt can alter its selection to another
         // MeAltPt.
         // Valid only if a selection currently exists.

      void finishAlteration ();
         //
         // Selects a new MeAltPt, if any is available, otherwise none.

      inline WitMeAltPt * selMeAltPt ()
         {
         return 
            (selAltIdx_ >= 0)?
               myMeCoordPt_->myMeAltPt ()[selAltIdx_]:
               NULL;
         }
         // 
         // Returns the currently selected MeAltPt for this MeSelPt, if any, 
         // else NULL.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMeCoordPt *, myMeCoordPt)
      accessFunc (WitMeDir *,     myMeDir)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMeSelPt);

      WitBoolean findNextUseableMAP (int & theIdx);
         //
         // Sets theIdx to the index of the next available MeAltPt after the
         // currently selected one, if such exists. 
         // Returns TRUE, iff there is another available MeAltPt.
         // Valid only if a selection currently exists.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMeCoordPt * const myMeCoordPt_;
         //
         // The MeCoordPt that owns this MeSelPt.

      WitMeDir * const myMeDir_;
         //
         // The MeDir associated with this MeSelPt.

      int selAltIdx_;
         //
         // The index in myMeAltPt of the currently selected MeAltPt for this
         // MeSelPt, if any, else -1.
   };

#endif
@


1.7
log
@Fixed uninitialized memory bugs.
Refactoring for selection splitting.
@
text
@d81 1
a81 1
      void alterSelectionOld ();
@


1.6
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d20 1
d32 1
a32 1
class WitMeSelPt: public WitUtil
d55 20
d81 1
a81 1
      void alterSelection ();
@


1.5
log
@Implemented coarse selection splitting for multiple exec periods.
@
text
@a59 4
      void splitSel (WitPeriod execPer);
         //
         // Records the current selection for execPer as a split selection.

@


1.4
log
@Refactoring for selection splitting.
@
text
@d60 4
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d68 1
a68 1
               myMeCoordPt_->myMeAltPt (selAltIdx_):
d88 1
a88 3
      copyCtorAndAssignment (WitMeSelPt);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d31 1
a31 1
class WitMeSelPt
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
