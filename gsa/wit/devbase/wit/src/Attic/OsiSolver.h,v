head	1.9;
access;
symbols
	nextGenBranch:1.8.0.2
	nextGenRoot:1.8
	sce_3_30_20030627:1.3;
locks; strict;
comment	@ * @;


1.9
date	2003.07.30.22.47.24;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2003.07.28.23.37.47;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.18.21.13.38;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.16.19.18.15;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.16.17.30.18;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.14.21.08.49;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.05.19.48.20;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.30.22.41.04;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.30.18.19.12;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Continued implementation of opt with COIN.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OsiSolverH
#define OsiSolverH

//------------------------------------------------------------------------------
// Header file: "OsiSolver.h"
//
// Contains the declaration of class OsiSolver.
//------------------------------------------------------------------------------

#include <OptSolver.h>

//------------------------------------------------------------------------------
// USE_COIN
//
// Determines which implementation of the COIN-client classes is to be compiled.
// The COIN-client classes are:
//
//    OsiSolver
//    ClpOsiSolver
//
// If USE_COIN == 1, the main implementations of the COIN-client classes are to
// be compiled. The main implementations make calls to COIN functions.
//
// If USE_COIN == 0, the dummy implementations of the COIN-client classes are to
// be compiled. The dummy implementations do not make calls to COIN functions.
//
// For now, until we are ready to link WIT to the COIN code an all platforms
// that WIT supports, the CVS repository version of WIT should always have
// USE_COIN == 0.
//
// The default value of USE_COIN is 0; it can be set to 1 from the makefile, by
// using the compile option -DUSE_COIN=1.
//------------------------------------------------------------------------------

#ifndef USE_COIN

#define USE_COIN 0

#endif

//------------------------------------------------------------------------------
// Forward declarations of COIN classes.
//------------------------------------------------------------------------------

class OsiSolverInterface;

//------------------------------------------------------------------------------
// class OsiSolver
//
// Base class for a class that's responsible for solving an OptModel, in part by
// using the OSI interface,
//
// Class Hierarchy:
//
// ProbAssoc
//    OptSolver
//       OsiSolver
//          ClpOsiSolver
//------------------------------------------------------------------------------

class WitOsiSolver: public WitOptSolver
   {
   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOsiSolver (WitOptModel *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOsiSolver ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void passFixedModel ();
         //
         // Passes the fixed parts of the optimization model to the OSI-SI.

      void passFlexibleModel ();
         //
         // Passes the flexible parts of the optimization model to the OSI-SI.

      void writeMps ();
         //
         // Writes an MPS file of the model entered into the OSI-SI, if
         // appropriate.

      void passInitSoln ();
         //
         // Copies the initial primal optimization solution from myOptModel () 
         // into the OSI-SI, as needed.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptModel ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptModel ().

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void passConBounds ();
         //
         // Passes the bounds on each constraint to the OSI-SI.

      void passVarBounds ();
         //
         // Passes the bounds on each variable to the OSI-SI.

      void passObjCoeffs ();
         //
         // Passes the objective coefficient on each variable to the OSI-SI.

      virtual OsiSolverInterface * myOsiSI () = 0;
         //
         // Returns the OsiSolverInterface for this OsiSolver.

      noCopyCtorAssign (WitOsiSolver);
   };

#endif
@


1.8
log
@Continued implementation of opt with COIN.
@
text
@@


1.7
log
@Continued implementation of opt with COIN.
@
text
@a27 1
//    OslOsiSolver
a66 1
//          OslOsiSolver
@


1.6
log
@Improved the procedure for building WIT with COIN.
@
text
@d29 1
a29 1
//    ClpSolver
d69 1
a69 1
//          ClpSolver
@


1.5
log
@Made changes to enable COIN to be linked to WIT on Linux.
@
text
@a127 8
      void callAllCoinFuncs ();
         //
         // This function contains a call to each COIN function that is called
         // elsewhere by WIT. It is implemented in CoinLink.C. This arrangement 
         // enables the COIN functions to be linked into WIT on Linux.
         // At run time, the COIN calls are not reached and this function
         // actually does nothing.

@


1.4
log
@Made the USE_COIN #define settable from the Makefile.
@
text
@d128 8
@


1.3
log
@Continued implementation of opt with COIN.
@
text
@a20 2
#define USE_COIN 0

d40 3
d44 6
@


1.2
log
@Continued implementation of opt with COIN.
@
text
@d21 23
a62 2
//
// Implemented in OsiSolverI.h.
@


1.1
log
@Continued implementation of opt with COIN.
@
text
@d72 22
d99 12
@

