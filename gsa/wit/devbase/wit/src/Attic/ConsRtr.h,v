head	1.15;
access;
symbols
	EndRw-branch:1.14.0.8
	Root-of-EndRw:1.14
	rwToStl:1.14.0.6
	latest_sce_3_10_20010924:1.14.0.4
	sce_3_10_20010924:1.14
	latest_sce_3_00_20010601:1.14.0.2
	sce_3_00_20010601:1.14
	latest_sce_2_31_20010308:1.9.0.2
	sce_2_31_20010308:1.9;
locks; strict;
comment	@ * @;


1.15
date	2003.03.03.23.26.41;	author rjw;	state dead;
branches;
next	1.14;

1.14
date	2001.04.25.20.54.34;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.03.19.23.04;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.21.21.55.45;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.12.19.48.06;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.08.16.37.04;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.01.16.24.43;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.31.23.17.45;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.29.19.26.09;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.26.21.46.00;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.24.20.05.56;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.20.00.44.15;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.15.19.01.49;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.11.16.35.07;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.04.22.27.49;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.14
log
@Refactoring for selection splitting.
@
text
@@


1.13
log
@Continued implementation of selection splitting.
@
text
@a0 217
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ConsRtrH
#define ConsRtrH

//------------------------------------------------------------------------------
// Header file: "ConsRtr.h"
//
// Contains the declaration of class ConsRtr.
//------------------------------------------------------------------------------

#include <SelMgr.h>
#include <Mapping.h>
#include <DblSpSch.h>

//------------------------------------------------------------------------------
// Class ConsRtr
//
// "Consumption Router"
// Interface to the consumption multi-route subsystem.
// The consumption multi-route subsystem is responsible for maintaining the Cons
// entry selections for multi-route mode.
//
// Class Hierarchy:
//
// SelMgr
//    ConsRtr
//
// Implemented in MultiRt.C.
//------------------------------------------------------------------------------

class WitConsRtr: public WitSelMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsRtr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitConsRtr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitConsEntry * selConsEntry (WitBomEntry * theBomEnt, WitPeriod thePer);
         //
         // selConsEntry (theBomEnt, thePer) is the currently selected
         // ConsEntry to be used when exploding theBomEnt in thePer. It may be
         // either theBomEnt itself or one of the SubEntries associated with 
         // it. Invalid, if theBomEnt is not in effect in thePer.

      virtual WitAltPt * myAltPt (
            WitBopEntry *,
            WitConsEntry *,
            WitPeriod,
            WitPeriod,
            WitBoolean &);
         //
         // Override from class SelMgr.

      virtual WitBoolean validForExecBounds ();
         //
         // Override from class SelMgr.

      void printHasAlt ();
         //
         // Prints those MrAltPts for which hasAlt () is TRUE.

      void printMultiChoices ();
         //
         // Prints those MrComps for which multiChoice_ is TRUE.

      void modifyRouting (WitConsEntPerStack & theConsEntPers);
         //
         // Modifies the current routing as indicated by theConsEntPers.

      void findExpConsEnts (
            WitBomEntry *     theBomEnt,
            WitPeriod         execPer,
            WitConsEntStack & theConsEnts);
         //
         // Sets theConsEnts to be the set of cons entries currently
         // under consideration for explosion at theBomEnt in execPer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      WitBoolean selIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Returns TRUE, iff there is a split routing selection for exploding
         // thru theBomEnt in execPer. Valid only in sel-split mode.

      void startSplitExp (
            WitBomEntry * theBomEnt, 
            WitPeriod     execPer,
            double        theExecVol);
         //
         // See SelMgr.

      inline WitBoolean findNextSplit (
            WitConsEntry * & theConsEnt, 
            double &         splitExecVol)
         {
         witAssert (selSplit ());

         return findNextSplitAbs (asaTlPtrRef (theConsEnt), splitExecVol);
         }
 
      void recExpConsEntSS (
            WitConsEntry * theConsEnt, 
            WitPeriod      execPer, 
            double         deltaExecVol);
         //
         // Records the fact deltaExecVol units were exploded thru theConsEnt in
         // execPer.

      virtual void postCommitSS ();
         //
         // Override from class SelMgr.

      virtual void postSplitCommit ();
         //
         // Override from class SelMgr.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitConsRtr);

      inline WitMrBomEnt * & myMrBomEnt (WitBomEntry * theBomEnt)
            //
            // myMrBomEnt (theBomEnt) is this ConsRtr's MrBomEnt for theBomEnt.
         {
         return (WitMrBomEnt * &) myMrBomEntTl_ (theBomEnt);
         }

      void setupSelSplit ();
         //
         // Sets up data for selection splitting.

      virtual void adjustSplitBound (WitTl *, double &);
         //
         // Override from class SelMgr.

      virtual void prtSelSplit (WitTl *);
         //
         // Override from class SelMgr.

      inline static WitConsEntry * asaConsEntry (WitTl * theTlObj)
         {
         return (WitConsEntry *) theTlObj;
         }

      inline static WitTl * asaTlPtr (WitConsEntry * theConsEnt)
         {
         return (WitTl *) theConsEnt;
         }

      inline static WitTl * & asaTlPtrRef (WitConsEntry * & theConsEnt)
         {
         return (WitTl * &) theConsEnt;
         }

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMapping (WitBomEntry, WitTlPtr) myMrBomEntTl_;
         //
         // Data for myMrBomEnt (BomEntry *).

      //------------------------------------------------------------------------
      // Selection splitting data.
      //------------------------------------------------------------------------

      WitDblSpSched (WitConsEntry) totExecVol_;
         //
         // Valid only in sel-split mode.
         // totExecVol_ (theConsEnt, thePer) is the total execVol that has been 
         // exploded thru theConsEnt in thePer during the current commit. 
         // totExecVol_ (theConsEnt) is only valid if theConsEnt
         // corresponds to a multi-choice MrBomEnt.

      WitStackSpSched (WitBomEntry, WitTl) splitSched_;
         //
         // Valid only in sel-split mode.
         // splitSched_ (theBomEnt, execPer) is the ordered list of
         // (ConsEntry, splitBound) pairs to be used when exploding at
         // myBomEntry_ in execPer. 
         // splitSched_ (theBomEnt, execPer) is only valid if theBomEnt
         // corresponds to a multi-choice MrBomEnt.

      WitPeriod splitExecPer_;
         //
         // The exec period for the currently active split explosion.
         // Undefined, if split explosion is not currently active.
   };

#endif
@


1.12
log
@Continued implementation of selection splitting with the new design.
@
text
@d136 1
a136 1
      virtual void clearSplitSched ();
@


1.11
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d136 4
@


1.10
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@a194 2
         // During selection alteration, its values reflect
         // the most recent successful temp commit, if any, else 0.
@


1.9
log
@Further implementation of coarse selection splitting.
@
text
@d47 1
a47 1
      WitConsRtr (WitHeurAllPerf *);
d132 1
a132 1
      virtual void postCommitSS (WitBoolean);
a134 16

      virtual void preAltAttSS ();
         //
         // Override from class SelMgr.

      virtual void postAltAttSS ();
         //
         // Override from class SelMgr.

      virtual void postPermCommitSS ();
         //
         // Override from class SelMgr.

      void splitSel (WitConsEntry * theConsEnt, WitPeriod execPer);
         //
         // Records a split selection thru theConsEnt in execPer.
@


1.8
log
@Further implementation of coarse selection splitting.
@
text
@d219 1
a219 1
         // splitSched_ (theBomEnt, execPer) is the list of
d221 1
a221 1
         // myBomEntry_ in execPer. The pairs are stored in reverse order.
@


1.7
log
@Continued development of coarse selection splitting.
@
text
@d171 1
a171 1
      virtual void adjustSplitVol (WitTl *, double &);
d220 1
a220 1
         // (ConsEntry, splitVol) pairs to be used when exploding at
@


1.6
log
@Implemented coarse selection splitting for multiple exec periods.
@
text
@d119 2
@


1.5
log
@Further development of coarse selection splitting.
@
text
@d103 5
d146 1
a146 6
      WitBoolean selIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Returns TRUE, iff there is a split routing selection for exploding
         // thru theBomEnt in execPer. Valid only in sel-split mode.

      void splitSel (WitConsEntry * theConsEnt, WitPeriod thePer);
d148 1
a148 1
         // Records a split selection thru theConsEnt in thePer.
d217 1
a217 1
         // splitSched_ (theBomEnt, thePer) is the list of
d219 2
a220 2
         // myBomEntry_ in thePer. The pairs are stored in reverse order.
         // splitSched_ (theBomEnt, thePer) is only valid if theBomEnt
@


1.4
log
@Implemented and used class SelMgr.
@
text
@a21 1
#include <StSpSch.h>
d108 1
a108 2
         // Sets up for a CMR sel-split explosion on theBomEntry, execPer and
         // theExecVol.
d110 1
a110 1
      WitBoolean findNextSplit (
d112 4
a115 5
            double &         splitExecVol);
         //
         // If there is another split to be done on the current split explosion,
         // sets theConsEnt and splitExecVol accordingly and returns TRUE;
         // otherwise returns false.
a116 4
      void finishSplitExp ();
         //
         // Concludes a CMR sel-split explosion.

d169 1
a169 1
      void prtSelSplit (WitConsEntry *, WitBoolean, double);
d171 20
a190 1
         // Prints data for a CMR selection split.
d214 1
a214 1
      WitStackSpSched (WitBomEntry, WitConsEntry) splitSched_;
d223 1
a223 9
      WitBoolean splitExpActive_;
         //
         // TRUE iff the build was in DEBUG mode and a split explosion for this
         // ProdRtr is currently underway.

      WitBomEntry *      splitExpBomEntry_;
      WitPeriod          splitExecPer_;
      double             splitNetExecVol_;
      WitConsEntDblStack splitList_;
d225 1
a225 2
         // The BOM entry, exec period, net exec vol, and split list for
         // the currently active split explosion.
@


1.3
log
@Fixed some bugs in coarse selection splitting.
@
text
@d19 1
d32 5
d40 1
a40 1
class WitConsRtr: public WitProbAssoc
d48 1
a48 1
      WitConsRtr (WitProblem * theProblem);
d54 1
a54 1
      ~WitConsRtr ();
d67 10
a76 4
       WitAltPt * myAltPt (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            WitBoolean &  resFound);
d78 1
a78 4
         // Returns the AltPt representing the selection of a ConsEntry when
         // exploding thru theBomEnt in execution period execPer, or NULL, if
         // there is none. On return resFound indicates whether or not a 
         // resolving alteration was found.
d104 20
d132 1
a132 1
      void postCommitSS (WitBoolean tempSuccess);
d134 1
a134 3
         // Performs the actions to be taken for multi-route sel-split, just
         // after a commit. tempSuccess is to be TRUE, iff the commit was
         // successful and in temp mode.
d136 1
a136 1
      void preAltAttSS ();
d138 1
a138 2
         // Performs actions to be taken for multi-route sel-split just before a
         // selection alteration is attempted.
d140 1
a140 1
      void postAltAttSS ();
d142 1
a142 2
         // Performs actions to be taken for multi-route sel-split just after a
         // selection alteration has been attempted.
d144 1
a144 1
      void postPermCommitSS ();
d146 1
a146 2
         // Performs the actions to be taken for multi-route sel-split,
         // just after a perm commit.
a156 12
      void getSplitList (
            WitBomEntry *        theBomEnt, 
            WitPeriod            execPer,
            WitConsEntDblStack & splitList);
         //
         // Sets splitList to be the ordered list of (ConsEntry, splitVol)
         // pairs to be used when exploding through theBomEnt in execPer.

      void prtSelSplit (WitConsEntry *, WitPeriod, WitBoolean, double);
         //
         // Prints data for a CMR selection split.

d176 4
d202 1
a202 1
      WitStackSpSched (WitBomEntry, WitConsEntry) mySplitSched_;
d205 1
a205 1
         // mySplitSched_ (theBomEnt, thePer) is the list of
d208 1
a208 1
         // mySplitSched_ (theBomEnt, thePer) is only valid if theBomEnt
d210 14
@


1.2
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d124 1
a124 1
      WitBoolean routingIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer);
d126 2
a127 2
         // Returns TRUE, iff there is a split selection for exploding thru
         // theBomEnt in execPer. Valid only in sel-split mode.
d141 1
a141 1
      void setExpConsEntIsSplit (WitBoolean);
d143 1
a143 12
         // "Set" function for expConsEntIsSplit_.

      void prtRtSplitAtBomEnt (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Prints data for a routing split at a BOM entry.

      void prtRtSplitToConsEnt (
            WitConsEntry * theConsEnt,
            WitBoolean     splitFound,
            double         splitVol);
         //
         // Prints data for a routing split to a cons entry.
a193 6

      WitBoolean expConsEntIsSplit_;
         //
         // TRUE, iff the ConsEntry currently being exploded is using a finite
         // splitVol.
         // FALSE, if non sel-split mode.
@


1.1
log
@Coarse selection splitting.
@
text
@d136 1
a136 1
            WitConsEntDblStack & theSplitList);
d138 1
a138 1
         // Sets theSplitList to be the ordered list of (ConsEntry, splitVol)
d145 11
d182 4
@

