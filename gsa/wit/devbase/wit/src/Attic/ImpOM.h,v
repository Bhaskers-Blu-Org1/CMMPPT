head	1.13;
access;
symbols
	latest_sce_4_20_20060523:1.11.0.2
	sce_4_20_20060523:1.11
	latest_sce4_20_OSL:1.10.0.2
	sce_4_20_OSL:1.10
	sce_410_withVa:1.9
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.8
	nextGenBranch:1.8.0.2
	nextGenRoot:1.8
	sce_3_30_20030627:1.8
	EndRw-branch:1.6.0.4
	Root-of-EndRw:1.6
	rwToStl:1.6.0.2;
locks; strict;
comment	@ * @;


1.13
date	2006.08.18.18.43.37;	author rjw;	state dead;
branches;
next	1.12;

1.12
date	2006.08.17.19.36.38;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.02.17.34.00;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.13.19.31.57;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.07.15.18.25;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.15.21.01.20;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.02.22.18.30;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.11.18.53.09;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.06.19.56.07;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.04.21.53.35;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.04.19.14.55;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.29.23.06.25;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.26.22.49.01;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@App controlled opt implosion.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ImpOMH
#define ImpOMH

//------------------------------------------------------------------------------
// Header file: "ImpOM.h"
//
// Contains the declaration of class ImpOM.
//------------------------------------------------------------------------------

#include <OptModel.h>
#include <Problem.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// class ImpOM
//
// "Implosion Optimization Model"
//
// Class hierarchy:
//
//    ProbAssoc
//       OptModel
//          ImpOM
//------------------------------------------------------------------------------

class WitImpOM: public WitOptModel
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitImpOM (WitOptImploder *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitImpOM ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual ();

      virtual void reportInfeasible ();

      virtual void reportUnbounded ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitBoundsObj  *, myBoundsObj)
      accessFunc (WitPrimaryObj *, myPrimaryObj)
      accessFunc (WitObj1Obj *,    myObj1Obj)
      accessFunc (WitRevObj *,     myRevObj)
      accessFunc (WitInvObj *,     myInvObj)
      accessFunc (WitServObj *,    myServObj)
      accessFunc (WitSubObj *,     mySubObj)
      accessFunc (WitObj2Obj *,    myObj2Obj)

      accessFunc (FILE *,          solnFile)

      accessWrapper (WitCompMgr *, myCompMgr, myProblem ())


      //-----------------------------------------------------------------------
      // Derived ModelEl storing functions.
      // Each of these functions store its argument (a newly constructed
      // instance of a derived class of ModelEl) in the approriate place in
      // this ImpOM.
      //-----------------------------------------------------------------------

      void storeDerived (WitScrapVar *);
      void storeDerived (WitNonSubVar *);
      void storeDerived (WitSubVar *);
      void storeDerived (WitShipVar *);
      void storeDerived (WitSlbvVar *);
      void storeDerived (WitExecVar *);
      void storeDerived (WitStockVar *);
      void storeDerived (WitCumShipVar *);

      void storeDerived (WitResourceCon *);
      void storeDerived (WitSubCon *);
      void storeDerived (WitShipCon *);
      void storeDerived (WitSlbCon *);

      //-----------------------------------------------------------------------
      // ModelEl look-up functions.
      //
      // Each of these functions returns the ModelEl in this ImpOM
      // corresponding to its arguments, if one exists; otherwise NULL.
      //-----------------------------------------------------------------------

      WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod);
      WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod);
      WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod);
      WitShipVar *     myShipVar     (WitDemand *,    WitPeriod);
      WitExecVar *     myExecVar     (WitOperation *, WitPeriod);
      WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod);
      WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod);

      WitResourceCon * myResourceCon (WitPart *,      WitPeriod);
      WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod);
      WitShipCon *     myShipCon     (WitDemand *,    WitPeriod);

      WitSlbvVar *     mySlbvVar     (const WitBoundedVar *);
      WitSlbCon *      mySlbCon      (const WitBoundedVar *);

      //-----------------------------------------------------------------------
      // ModelEl item printing functions.
      //
      // Each of these functions prints its argument to modelFile ().
      //-----------------------------------------------------------------------

      void printItem (WitNode *);
      void printItem (WitBomEntry *);
      void printItem (WitSubEntry *);
      void printItem (WitDemand *);

      void printItem (const WitBoundedVar *);

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void storeBoundedVar (WitBoundedVar * theBoundedVar);
         //
         // Stores theBoundedVar.

      void screenModel ();
         //
         // Performs screening of constraints and variables.

      bool slbvVarsExist ();
         //
         // Returns true iff there are any slbvVars in this ImpOM.

      void printPeriod (WitPeriod t);
         //
         // Prints t to modelFile ().

      void writeSoln (const WitString & fName);
         //
         // Prints out the primal solution from WIT data structures.
         // Writes to a file whose name is given by fName.

      void formModeledSoln ();
         //
         // Forms the modeled part of the comprehensive implosion solution, by
         // copying the values of the optimal primal solution.

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables ();
         //
         // Generates all OptVars for this ImpOM.

      virtual void generateConstraints ();
         //
         // Generates all OptCons for this ImpOM.

      virtual WitOptObj * generateObjectives ();
         //
         // Generates all OptObjs for this ImpOM.

      virtual void printModelElHeading ();

      virtual void displayDerived ();
         //
         // Writes out the bounds counts.

      virtual void printDerived ();

      virtual void initDepVars ();
         //
         // Initializes the dependent variables, i.e., those variables whose
         // initial value depends on the initial value of other variables.

      //-----------------------------------------------------------------------
      // Private member functions relating to output of Opt Model solution.
      //-----------------------------------------------------------------------

      void writeMeSoln (const WitModelEl * theModelEl);
         //
         // Writes the solution value of theModelEl, or blank if it is NULL,
         // or the value is nearly zero.
         // If the ModelEl is a variable, the primal solution value is
         // written; if it is a constraint, the dual value is written.

      void writePartSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // parts. Optionally prints the dual solution for material balance
         // constraints.

      void writeOperationSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // Operations.

      void writeSubEntrySoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // SubEntries.

      void writeDemandSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // demands.

      void writeBoundedVarSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // BoundedVars.

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitImpOM);

         // The following are formats used in printing a ModelEl.
         //
      inline static const char * itemFormat ()
         {
         return " %-12s %-12s %-12s";
         }

      inline static const char * periodDFormat ()
         {
         return " %4d";
         }

      inline static const char * periodSFormat ()
         {
         return " %4s";
         }

      template <typename Item, typename DerModelEl>
            void insertInto (
               WitPtrSched <Item, DerModelEl> & thePtrSched,
               const Item *                     theItem,
               DerModelEl *                     theDerModelEl);
         //
         // Inserts theDerModelEl into thePtrSched at theItem and
         // theDerModelEl->myPeriod (), allocating as necessary.

      template <typename Item, typename DerModelEl>
            DerModelEl * lookUp (
               WitPtrSched <Item, DerModelEl> & thePtrSched,
               const Item *                     theItem,
               WitPeriod                        thePer);
         //
         // Returns the DerModelEl in thePtrSched for theItem in thePer, if any,
         // else NULL.

      void screenImpCons ();
         //
         // Performs generic screening of the constraints of this ImpOM.
         // Constraints are considered in an order that facilitates
         // cascading of screening, i.e., we try to screen in an order such
         // that if screening constraint A permits constraint B to be screened,
         // then A is screened before B.

      void relaxCumShipNonNeg ();
         //
         // Relaxes redundant nonnegativity bounds on cumulative shipment
         // variables.

      void screenSlbModelEls ();
         //
         // Screens out the variables and constraints for soft lower bounds
         // that are not soft.

      bool positiveHardLBsExist ();
         //
         // Returns true iff myProblem  () has at least one BoundSet with a
         // positive hardLB.

      void printBoundedVars ();
         //
         // Prints information about the BoundedVars of this ImpOM to
         // modelFile ().

      //-----------------------------------------------------------------------
      // Static constant private member data.
      //-----------------------------------------------------------------------

      static const double solnEpsilon;
         //
         // Values must exceed this amount in order to appear in the solution
         // output.

      //-----------------------------------------------------------------------
      // The ModelEl Schedules for this ImpOM.
      //-----------------------------------------------------------------------

      WitPtrSched <WitPart,      WitScrapVar   > myScrapVar_;
      WitPtrSched <WitBomEntry,  WitNonSubVar  > myNonSubVar_;
      WitPtrSched <WitSubEntry,  WitSubVar     > mySubVar_;
      WitPtrSched <WitDemand,    WitShipVar    > myShipVar_;
      WitPtrSched <WitBoundSet,  WitSlbvVar    > mySlbvVar_;
      WitPtrSched <WitOperation, WitExecVar    > myExecVar_;
      WitPtrSched <WitMaterial,  WitStockVar   > myStockVar_;
      WitPtrSched <WitDemand,    WitCumShipVar > myCumShipVar_;

      WitPtrSched <WitPart,      WitResourceCon> myResourceCon_;
      WitPtrSched <WitBomEntry,  WitSubCon     > mySubCon_;
      WitPtrSched <WitDemand,    WitShipCon    > myShipCon_;
      WitPtrSched <WitBoundSet,  WitSlbCon     > mySlbCon_;

      //-----------------------------------------------------------------------
      // The OptObjs for this ImpOM.
      //-----------------------------------------------------------------------

      WitBoundsObj  *  myBoundsObj_;
      WitPrimaryObj * myPrimaryObj_;
      WitObj1Obj    *    myObj1Obj_;
      WitRevObj     *     myRevObj_;
      WitInvObj     *     myInvObj_;
      WitServObj    *    myServObj_;
      WitSubObj     *     mySubObj_;
      WitObj2Obj    *    myObj2Obj_;

      //-----------------------------------------------------------------------
      // Other private member data.
      //-----------------------------------------------------------------------

      WitList <WitBoundedVar> myBoundedVars_;
         //
         // The list of all BoundedVars in this ImpOM.

      int nSlbvVars_;
         //
         // # soft lower bound violation variables.

      FILE * solnFile_;
         //
         // Solution output file.
   };

#endif
@


1.12
log
@Removed optimizing implosion with lot sizes.
@
text
@@


1.11
log
@Updated the copyright date on all source files.
@
text
@a90 2
      void storeDerived (WitIlsMultVar *);
      void storeDerived (WitMlsMultVar *);
a98 2
      void storeDerived (WitLotSizeCon *);
      void storeDerived (WitMlsCon *);
a110 2
      WitIlsMultVar *  myIlsMultVar  (WitOperation *, WitPeriod);
      WitMlsMultVar *  myMlsMultVar  (WitOperation *, WitPeriod);
a117 2
      WitLotSizeCon *  myLotSizeCon  (WitOperation *, WitPeriod);
      WitMlsCon *      myMlsCon      (WitOperation *, WitPeriod);
a142 15
      bool genLsMode (WitOperation * theOpn, WitPeriod thePer);
         //
         // Returns true, iff lot-sizing for theOpn in thePer is in
         // general lot-size mode.

      bool mlsMode (WitOperation * theOpn, WitPeriod thePer);
         //
         // Returns true, iff lot-sizing for theOpn in thePer is in
         // minLotSize mode.

      bool ls1Mode (WitOperation * theOpn, WitPeriod thePer);
         //
         // Returns true, iff lot-sizing for theOpn in thePer is in
         // lot size 1 mode.

a319 2
      WitPtrSched <WitOperation, WitIlsMultVar > myIlsMultVar_;
      WitPtrSched <WitOperation, WitMlsMultVar > myMlsMultVar_;
a327 2
      WitPtrSched <WitOperation, WitLotSizeCon > myLotSizeCon_;
      WitPtrSched <WitOperation, WitMlsCon     > myMlsCon_;
@


1.10
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.9
log
@Fixed a bug in the screening of the optimization model.
@
text
@d30 3
a32 2
//    OptModel
//       ImpOM
d43 1
a43 4
      WitImpOM (WitOptImploder * theOptImploder);
         //
         // The arguments are just passed on to the constructor function for
         // OptModel.
@


1.8
log
@Various internal changes.
@
text
@a298 5
      bool scrapVarNeeded (WitPart * thePart, WitPeriod t);
         //
         // Returns true iff a scrap variable is needed for thePart in
         // period t.

a305 5

      void fixScrapVars ();
         //
         // Determines which scrap variables are not needed and fixes them at
         // zero.
@


1.7
log
@Internal changes.
@
text
@d281 18
@


1.6
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d57 1
a57 1
      virtual WitBoolean needDual ();
d153 1
a153 1
      WitBoolean genLsMode (WitOperation * theOpn, WitPeriod thePer);
d155 1
a155 1
         // Returns TRUE, iff lot-sizing for theOpn in thePer is in
d158 1
a158 1
      WitBoolean mlsMode (WitOperation * theOpn, WitPeriod thePer);
d160 1
a160 1
         // Returns TRUE, iff lot-sizing for theOpn in thePer is in
d163 1
a163 1
      WitBoolean ls1Mode (WitOperation * theOpn, WitPeriod thePer);
d165 1
a165 1
         // Returns TRUE, iff lot-sizing for theOpn in thePer is in
d172 1
a172 1
      WitBoolean slbvVarsExist ();
d174 1
a174 1
         // Returns TRUE iff there are any slbvVars in this ImpOM.
d281 1
a281 1
      WitBoolean scrapVarNeeded (WitPart * thePart, WitPeriod t);
d283 1
a283 1
         // Returns TRUE iff a scrap variable is needed for thePart in
d309 1
a309 1
      WitBoolean positiveHardLBsExist ();
d311 1
a311 1
         // Returns witTRUE iff myProblem  () has at least one BoundSet with a
@


1.5
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d25 1
d27 5
d94 1
d103 2
a104 1
      void storeDerived (WitIncLotSizeCon *);
d113 15
a127 13
      WitScrapVar *      myScrapVar      (WitPart *,      WitPeriod);
      WitNonSubVar *     myNonSubVar     (WitBomEntry *,  WitPeriod);
      WitSubVar *        mySubVar        (WitSubEntry *,  WitPeriod);
      WitShipVar *       myShipVar       (WitDemand *,    WitPeriod);
      WitIlsMultVar *    myIlsMultVar    (WitOperation *, WitPeriod);
      WitExecVar *       myExecVar       (WitOperation *, WitPeriod);
      WitStockVar *      myStockVar      (WitMaterial *,  WitPeriod);
      WitCumShipVar *    myCumShipVar    (WitDemand *,    WitPeriod);

      WitResourceCon *   myResourceCon   (WitPart *,      WitPeriod);
      WitSubCon *        mySubCon        (WitBomEntry *,  WitPeriod);
      WitShipCon *       myShipCon       (WitDemand *,    WitPeriod);
      WitIncLotSizeCon * myIncLotSizeCon (WitOperation *, WitPeriod);
d129 2
a130 2
      WitSlbvVar *       mySlbvVar       (const WitBoundedVar *);
      WitSlbCon *        mySlbCon        (const WitBoundedVar *);
d153 15
a214 2
         //
         // Print the BoundedVars part of this ImpOM.
a263 1

a285 4
      WitBoolean ilsConNeeded (WitOperation * theOpn, WitPeriod thePer);
         //
         // Returns TRUE, iff an IncLotSizeCon is needed for theOpn in thePer.

d332 17
a348 15
      WitPtrSched <WitPart,      WitScrapVar     > myScrapVar_;
      WitPtrSched <WitBomEntry,  WitNonSubVar    > myNonSubVar_;
      WitPtrSched <WitSubEntry,  WitSubVar       > mySubVar_;
      WitPtrSched <WitDemand,    WitShipVar      > myShipVar_;
      WitPtrSched <WitBoundSet,  WitSlbvVar      > mySlbvVar_;
      WitPtrSched <WitOperation, WitIlsMultVar   > myIlsMultVar_;
      WitPtrSched <WitOperation, WitExecVar      > myExecVar_;
      WitPtrSched <WitMaterial,  WitStockVar     > myStockVar_;
      WitPtrSched <WitDemand,    WitCumShipVar   > myCumShipVar_;

      WitPtrSched <WitPart,      WitResourceCon  > myResourceCon_;
      WitPtrSched <WitBomEntry,  WitSubCon       > mySubCon_;
      WitPtrSched <WitDemand,    WitShipCon      > myShipCon_;
      WitPtrSched <WitBoundSet,  WitSlbCon       > mySlbCon_;
      WitPtrSched <WitOperation, WitIncLotSizeCon> myIncLotSizeCon_;
@


1.4
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d87 1
d96 1
d105 13
a117 11
      WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod);
      WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod);
      WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod);
      WitShipVar *     myShipVar     (WitDemand *,    WitPeriod);
      WitExecVar *     myExecVar     (WitOperation *, WitPeriod);
      WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod);
      WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod);

      WitResourceCon * myResourceCon (WitPart *,      WitPeriod);
      WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod);
      WitShipCon *     myShipCon     (WitDemand *,    WitPeriod);
d119 2
a120 2
      WitSlbvVar *     mySlbvVar     (const WitBoundedVar *);
      WitSlbCon *      mySlbCon      (const WitBoundedVar *);
d264 4
d314 15
a328 13
      WitPtrSched <WitPart,      WitScrapVar   > myScrapVar_;
      WitPtrSched <WitBomEntry,  WitNonSubVar  > myNonSubVar_;
      WitPtrSched <WitSubEntry,  WitSubVar     > mySubVar_;
      WitPtrSched <WitDemand,    WitShipVar    > myShipVar_;
      WitPtrSched <WitBoundSet,  WitSlbvVar    > mySlbvVar_;
      WitPtrSched <WitOperation, WitExecVar    > myExecVar_;
      WitPtrSched <WitMaterial,  WitStockVar   > myStockVar_;
      WitPtrSched <WitDemand,    WitCumShipVar > myCumShipVar_;

      WitPtrSched <WitPart,      WitResourceCon> myResourceCon_;
      WitPtrSched <WitBomEntry,  WitSubCon     > mySubCon_;
      WitPtrSched <WitDemand,    WitShipCon    > myShipCon_;
      WitPtrSched <WitBoundSet,  WitSlbCon     > mySlbCon_;
@


1.3
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d21 1
a21 1
#include <Schedule.h>
d306 13
a318 13
      WitSchedule <WitPart,      WitScrapVar    *> myScrapVar_;
      WitSchedule <WitBomEntry,  WitNonSubVar   *> myNonSubVar_;
      WitSchedule <WitSubEntry,  WitSubVar      *> mySubVar_;
      WitSchedule <WitDemand,    WitShipVar     *> myShipVar_;
      WitSchedule <WitBoundSet,  WitSlbvVar     *> mySlbvVar_;
      WitSchedule <WitOperation, WitExecVar     *> myExecVar_;
      WitSchedule <WitMaterial,  WitStockVar    *> myStockVar_;
      WitSchedule <WitDemand,    WitCumShipVar  *> myCumShipVar_;

      WitSchedule <WitPart,      WitResourceCon *> myResourceCon_;
      WitSchedule <WitBomEntry,  WitSubCon      *> mySubCon_;
      WitSchedule <WitDemand,    WitShipCon     *> myShipCon_;
      WitSchedule <WitBoundSet,  WitSlbCon      *> mySlbCon_;
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d61 8
a68 8
      accessFunc (WitBoundsObj  *,        myBoundsObj)
      accessFunc (WitPrimaryObj *,        myPrimaryObj)
      accessFunc (WitObj1Obj *,           myObj1Obj)
      accessFunc (WitRevObj *,            myRevObj)
      accessFunc (WitInvObj *,            myInvObj)
      accessFunc (WitServObj *,           myServObj)
      accessFunc (WitSubObj *,            mySubObj)
      accessFunc (WitObj2Obj *,           myObj2Obj)
d70 1
a70 1
      accessFunc (FILE *,                 solnFile)
d74 1
a348 15

//------------------------------------------------------------------------------
// Macro implementPrintItem
//
// Implements the printItem virtual member function for ModelElClass.
// The implemented function invokes myImpOM's printItem on the ModelElClass's
// source item, sourceItem.
//------------------------------------------------------------------------------

#define implementPrintItem(ModelElClass, sourceItem)                           \
                                                                               \
   void ModelElClass::printItem () const                                       \
      {                                                                        \
      myImpOM ()->printItem (sourceItem);                                      \
      }                                                                        \
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@a16 9
// This file is at the top of the following linear chain of header files:
//
// ImpOM.h,    which includes:
// OptObjs.h,  which includes:
// PerCon.h,   which includes:
// PerVar.h,   which includes:
// OptModel.h, which includes:
// ModelEl.h,  which includes:
// Mapping.h.
d19 1
a19 1
#include <OptObjs.h>
d348 15
@

