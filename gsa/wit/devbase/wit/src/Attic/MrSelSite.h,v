head	1.14;
access;
symbols
	EndRw-branch:1.13.0.4
	Root-of-EndRw:1.13
	rwToStl:1.13.0.2
	latest_sce_3_10_20010924:1.8.0.2
	sce_3_10_20010924:1.8;
locks; strict;
comment	@ * @;


1.14
date	2003.03.03.23.26.56;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2002.09.26.19.05.27;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.18.17.54.43;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.17.17.29.25;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.13.21.50.12;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.12.21.02.01;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.30.20.29.24;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.23.21.13.53;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.22.20.41.49;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.21.17.31.45;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.12.19.58.25;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.12.17.57.01;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.06.16.13.38;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.03.22.50.41;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.13
log
@Began implementation of multi-level lot sizes.
@
text
@@


1.12
log
@Continued implementation of Single-Source.
@
text
@a0 188
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MrSelSiteH
#define MrSelSiteH

//------------------------------------------------------------------------------
// Header file: "MrSelSite.h"
//
// Contains the declaration of class template MrSelSite <MrArgs>.
//------------------------------------------------------------------------------

#include <MrPt.h>
#include <PtrTVec.h>
#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class template MrSelSite <MrArgs>
//
// "Multi-Route Selection Site"
// Represents a location in the BOM structure at which multi-route selection is
// to be performed.
//
// For more information on this template, see:
//    "General Comments on the Multi-Route Class Templates" in MrMgr.h.
//
// Class Hierarchy:
//
// ProbAssoc
//    MrSelSite <MrArgs>
//
// Implemented in MultiRoute.C.
//
// Parametric     implementation         in MultiRoute_TI.h.
// Non-parametric implementation for Pmr in ProdMR.C.
// Non-parametric implementation for Cmr in ConsMR.C.
//------------------------------------------------------------------------------

template <MrArgDecs>
      class WitMrSelSite: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrSelSite (SelComp *, WitMrMgr <MrArgs> *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMrSelSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      CandComp * defaultCandComp (WitPeriod thePer);
         //
         // Returns the CandComp to be used in thePer, when no other is found,
         // if any, else NULL.

      inline WitMrPt <MrArgs> * myMrPtWithAlt (WitPeriod thePer)
            //
            // Returns the MrPt for this MrSelSite in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            //
         {
         return
            multiChoice_?
               multiChoiceMrPtWithAlt (thePer):
               NULL;
         }

      void printHasAlt ();
         //
         // Prints those MrPts for which hasAlt () is TRUE.

      void findCandComps (
            WitPeriod                thePer, 
            WitObjStack <CandComp> & theCandComps);
         //
         // Sets theCandComps to be the set of CandComps currently under
         // consideration for selection from mySelComp_ in thePer.

      WitMrCand <MrArgs> * myMrCandFor (CandComp * theCandComp);
         //
         // Returns the MrCand owned by this MrSelSite that represents
         // theCandComp. Issues a fatal error, if none exists.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMrMgr <MrArgs> *,                       myMrMgr)
      accessFunc (SelComp *,                                 mySelComp)
      accessFunc (WitBoolean,                                multiChoice)
      accessFunc (const WitObjStack <WitMrCand <MrArgs> > &, myMrCands)
      accessFunc (const WitPtrTVec <WitMrPt <MrArgs> > &,    myMrPt)

      CandComp * selCandComp (WitPeriod thePer);
         //
         // Returns the CandComp selected to be used at mySelComp_ in thePer.
         // Invalid, if mySelComp_ is not explodeable in thePer.

   private:

      //------------------------------------------------------------------------
      // Private typedefs.
      //------------------------------------------------------------------------

      typedef WitObjStItr <WitMrCand <MrArgs> > WitMrCandItr;

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildMrPts ();
         //
         // Creates the MrPts for this MrSelSite.

      WitMrPt <MrArgs> * multiChoiceMrPtWithAlt (WitPeriod thePer);
            //
            // Returns the MrPt for this MrSelSite in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            // multiChoice_ must be TRUE.

      void buildMrCands ();
         //
         // Constructs the MrCands owned by this MrSelSite.

      noCopyCtorAssignTemp (WitMrSelSite, MrArgs);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrMgr <MrArgs> * const myMrMgr_;
         //
         // The MrMgr that owns this MrSelSite.

      SelComp * const mySelComp_;
         //
         // The SelComp at which the selection is to be made.

      WitObjStack <WitMrCand <MrArgs> > myMrCands_;
         //
         // The ordered list of MrCands owned by this MrSelSite.
         // These MrCands represent the CandComps that can be selected from
         // mySelComp_.

      WitBoolean multiChoice_;
         //
         // TRUE, iff there are at least two directions in which the routing
         // could potentially proceed downward from this MrSelSite.

      WitPtrTVec <WitMrPt <MrArgs> > myMrPt_;
         //
         // myMrPt_[thePer] is the MrPt owned by this MrSelSite corresponding to
         // thePer.
         // Allocated only if multiChoice_ is TRUE.
   };

//------------------------------------------------------------------------------
// Global functions that take MrSelSite arguments.
//------------------------------------------------------------------------------

inline WitPart * thePartFor (WitMrSelSite <Pmr> * thePmrSelSite)
   {
   return thePmrSelSite->mySelComp ();
   }

//------------------------------------------------------------------------------

inline WitBomEntry * theBomEntFor (WitMrSelSite <Cmr> * theCmrSelSite)
   {
   return theCmrSelSite->mySelComp ();
   }

#endif
@


1.11
log
@Continued implementation of Single-Source.
@
text
@a98 8
      CandComp * nextCandComp (
            CandComp *                   theCandComp,
            const WitTVec <WitBoolean> & activeVec);
         //
         // Returns the next CandComp for this MrSelSite after
         // theCandComp, valid in all thePer for which activeVec[thePer] is
         // TRUE, or the first such CandComp, if theCandComp == NULL.

@


1.10
log
@Continued implementation of Single-Source.
@
text
@d99 3
a101 1
      CandComp * nextAllPerCandComp (CandComp * theCandComp);
d104 2
a105 2
         // theCandComp, valid for all periods, or the first such CandComp, if
         // theCandComp == NULL.
@


1.9
log
@Continued implementation of sel-split for pen-exec.
@
text
@d99 6
@


1.8
log
@Refactoring for constrained stock reallocation.
@
text
@d21 1
@


1.7
log
@Refactoring for constrained stock reallocation.
@
text
@d19 1
a19 1
#include <MrSelPt.h>
d70 1
a70 1
      inline WitMrSelPt <MrArgs> * myMrSelPtWithAlt (WitPeriod thePer)
d72 1
a72 1
            // Returns the MrSelPt for this MrSelSite in thePer, if it has an
d78 1
a78 1
               multiChoiceMrSelPtWithAlt (thePer):
d84 1
a84 1
         // Prints those MrSelPts for which hasAlt () is TRUE.
d106 1
a106 1
      accessFunc (const WitPtrTVec <WitMrSelPt <MrArgs> > &, myMrSelPt)
d125 1
a125 1
      void buildMrSelPts ();
d127 1
a127 1
         // Creates the MrSelPts for this MrSelSite.
d129 1
a129 1
      WitMrSelPt <MrArgs> * multiChoiceMrSelPtWithAlt (WitPeriod thePer);
d131 1
a131 1
            // Returns the MrSelPt for this MrSelSite in thePer, if it has an
d164 1
a164 1
      WitPtrTVec <WitMrSelPt <MrArgs> > myMrSelPt_;
d166 2
a167 2
         // myMrSelPt_[thePer] is the MrSelPt owned by this MrSelSite 
         // corresponding to thePer.
@


1.6
log
@Refactoring for constrained stock reallocation.
@
text
@d171 16
@


1.5
log
@Refactoring for constrained stock reallocation.
@
text
@d16 1
a16 2
// Contains the declaration    of class template MrSelSite <MrArgs>.
// Contains the implementation of class template MrSelSite <MrArgs>.
d39 3
a41 3
// Parametric     implementation             in this file.
// Non-parametric implementation for PmrArgs in ProdMR.C.
// Non-parametric implementation for CmrArgs in ConsMR.C.
a169 166

//------------------------------------------------------------------------------
// Implementation of class template MrSelSite <MrArgs>.
//------------------------------------------------------------------------------

template <MrArgDecs>
      WitMrSelSite <MrArgs>::WitMrSelSite (
            SelComp *           theSelComp, 
            WitMrMgr <MrArgs> * theMrMgr):

         WitProbAssoc (theMrMgr),

         myMrMgr_     (theMrMgr),
         mySelComp_   (theSelComp),
         myMrCands_   (myProblem ()),
         multiChoice_ (witFALSE),
         myMrSelPt_   ()
   {
   if (! myGlobalComp ()->multiRoute ())
      return;

   buildMrCands ();

   buildMrSelPts ();
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      WitMrSelSite <MrArgs>::~WitMrSelSite ()
   {
   deleteContents (myMrSelPt_);
   deleteContents (myMrCands_);
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      void WitMrSelSite <MrArgs>::printHasAlt ()
   {
   WitPeriod             thePer;
   WitMrSelPt <MrArgs> * theMrSelPt;

   if (! multiChoice_)
      return;

   forEachPeriod (thePer, myProblem ())
      {
      theMrSelPt = myMrSelPt_[thePer];

      if (theMrSelPt != NULL)
         if (theMrSelPt->selMrCand () != NULL)
            theMrSelPt->printID ();
      }
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      void WitMrSelSite <MrArgs>::findCandComps (
         WitPeriod                thePer, 
         WitObjStack <CandComp> & theCandComps)
   {
   WitMrCandItr         theMrCandItr;
   WitMrCand <MrArgs> * theMrCand;
   CandComp *           theCandComp;

   theCandComps.clear ();

   if (multiChoice ())
      {
      theMrCandItr.attachTo (myMrCands_);

      while (theMrCandItr.advance (theMrCand))
         if (theMrCand->isEligible (thePer))
            if (! theMrCand->prevSel ()[thePer])
               theCandComps.push (theMrCand->myCandComp ());

      theCandComps.reverse ();
      }

   if (theCandComps.isEmpty ())
      {
      theCandComp = defaultCandComp (thePer);

      if (theCandComp != NULL)
         theCandComps.push (theCandComp);
      }
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      WitMrCand <MrArgs> * WitMrSelSite <MrArgs>::myMrCandFor (
         CandComp * theCandComp)
   {
   WitMrCandItr         theMrCandItr;
   WitMrCand <MrArgs> * theMrCand;

   theMrCandItr.attachTo (myMrCands_);

   while (theMrCandItr.advance (theMrCand))
      if (theMrCand->myCandComp () == theCandComp)
         return theMrCand;

   myMsgFac () ("internalErrorFmsg", "WitMrSelSite <MrArgs>::myMrCandFor");

   return NULL;
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      CandComp * WitMrSelSite <MrArgs>::selCandComp (WitPeriod thePer)
   {
   WitMrCand <MrArgs> * theMrCand;

   witAssert (defaultCandComp (thePer) != NULL);

   if (multiChoice_)
      {
      theMrCand = myMrSelPt_[thePer]->selMrCand ();

      if (theMrCand != NULL)
         return theMrCand->myCandComp ();
      }

   return defaultCandComp (thePer);
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      void WitMrSelSite <MrArgs>::buildMrSelPts ()
   {
   WitPeriod thePer;

   if (! multiChoice_)
      return;

   myMrSelPt_.allocate (myProblem ());

   forEachPeriod (thePer, myProblem ())
      if (defaultCandComp (thePer) != NULL)
         myMrSelPt_[thePer] = new WitMrSelPt <MrArgs> (this, thePer);
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      WitMrSelPt <MrArgs> * WitMrSelSite <MrArgs>::multiChoiceMrSelPtWithAlt (
         WitPeriod thePer)
   {
   WitMrSelPt <MrArgs> * theMrSelPt;

   witAssert (multiChoice_);

   theMrSelPt = myMrSelPt_[thePer];

   witAssert (theMrSelPt != NULL);

   return
      (theMrSelPt->selMrCand () != NULL)?
         theMrSelPt:
         NULL;
   }
@


1.4
log
@Refactoring.
@
text
@d167 2
a168 1
         // myMrSelPt_[thePer] is the MrSelPt for this MrSelSite in thePer.
d202 2
a203 9
   WitPeriod            thePer;
   WitMrCand <MrArgs> * theMrCand;

   if (multiChoice_)
      forEachPeriod (thePer, myProblem ())
         delete myMrSelPt_[thePer];

   while (myMrCands_.pop (theMrCand))
      delete theMrCand;
@


1.3
log
@Templatized consumption multi-route.
@
text
@d16 2
a17 1
// Contains the declaration of class template MrSelSite <MrArgs>.
d20 1
a20 1
#include <MrMgr.h>
d39 4
d170 173
@


1.2
log
@Minor modification.
@
text
@d61 5
@


1.1
log
@An attempt to fix the link trouble on Windows for the multi-route templates.
@
text
@d37 1
a37 1
// Implemented in MultiRt.C.
@

