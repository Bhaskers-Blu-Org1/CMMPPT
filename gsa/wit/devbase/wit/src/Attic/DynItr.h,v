head	1.5;
access;
symbols
	EndRw-branch:1.4.0.10
	Root-of-EndRw:1.4
	rwToStl:1.4.0.8
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4;
locks; strict;
comment	@ * @;


1.5
date	2003.03.03.23.26.42;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2000.12.05.19.05.28;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.04.22.07.35;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.22.23.11.39;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.21.20.03.21;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.4
log
@Some minor modifications.
@
text
@@


1.3
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@a0 169
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef DynItrH
#define DynItrH

//------------------------------------------------------------------------------
// Header file: "DynItr.h"
//
// Contains the declaration of the following classes:
//
//    DynItr
//    PairDynItr (ObjType, ValType)
//------------------------------------------------------------------------------

#include <DynStack.h>

//------------------------------------------------------------------------------
// Class DynItr
//
// Responsible for iterating through the elements of an DynStack.
//
// Class Hierarchy:
//
// DynItr
//    PairDynItr (ObjType, ValType)
//------------------------------------------------------------------------------

class WitDynItr: public WitUtil
   {
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDynItr ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDynItr ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void attachToAbs (const WitDynStack & theDynStack);
         //
         // Puts this DynItr into its initial state for iterating through
         // theDynStack.
                        
      WitBoolean advanceAbs ();
         //
         // If this DynItr is in its initial state, this 
         // function advances it to the first element of the stack;
         // otherwise it advances it to the next element.
         // Returns TRUE, iff this DynItr is still associated with a 
         // valid element after the advance.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitDynLink *, curDynLink)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDynItr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitDynLink * firstDynLink_;
         //
         // The first link of the DynStack to be iterated by this DynItr. 
         // NULL indicates that the Stack is empty.

      const WitDynLink * curDynLink_;
         //
         // The DynLink currently associated with this DynItr, 
         // or NULL if this DynItr is in its initial state.
   };

//------------------------------------------------------------------------------
// Generic class PairDynItr (ObjType, ValType)
//
// Responsible for iterating through the elements of a 
// PairDynStack (ObjType, ValueType).
//
// Class Hierarchy:
//
// DynItr
//    PairDynItr (ObjType, ValType)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitPairDynItrdeclare2(ObjType, ValType)                                \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairDynItr (ObjType, ValType): public WitDynItr                       \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitPairDynItr (ObjType, ValType) ();                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitPairDynItr (ObjType, ValType) ();                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void attachTo (const WitPairDynStack (ObjType, ValType) &);              \
         /*                                                                  */\
         /* See DynItr::attachToAbs                                          */\
                                                                               \
      WitBoolean advance (ObjType * & theObject, ValType & theVal);            \
         /*                                                                  */\
         /* See DynItr::advanceAbs.                                          */\
         /* Sets theObject and theVal, if the advance is successful.         */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPairDynItr (ObjType, ValType));                     \
                                                                               \
      inline const WitPairDynLink (ValType) * curPairDynLink ()                \
         {                                                                     \
         return (WitPairDynLink (ValType) *) curDynLink ();                    \
         }                                                                     \
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare2 (WitPairDynItr, WitDemand,    WitPeriod)
declare2 (WitPairDynItr, WitBopEntry,  WitPeriod)
declare2 (WitPairDynItr, WitConsEntry, WitPeriod)

#endif
@


1.2
log
@Refactoring for selection splitting.
@
text
@d55 1
a55 1
      void attach (const WitDynStack & theDynStack);
d58 1
a58 1
         // thePairDynStack.
d60 1
a60 1
      WitBoolean advance ();
d137 1
a137 1
      void operator = (const WitPairDynStack (ObjType, ValType) & theStack);   \
d139 1
a139 1
         /* See DynItr::attach.                                              */\
d141 1
a141 1
      WitBoolean operator () (ObjType * & theObject, ValType & theVal);        \
d143 1
a143 1
         /* See DynItr::advance.                                             */\
@


1.1
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d80 1
a80 3
      copyCtorAndAssignment (WitDynItr);
         //
         // Prevents unintentional copying and assignment.
d152 1
a152 3
      copyCtorAndAssignment (WitPairDynItr (ObjType, ValType));                \
         /*                                                                  */\
         /* Prevents unintentional copying and assignment.                   */\
@

