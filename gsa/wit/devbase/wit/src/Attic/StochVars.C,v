head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2007.08.07.17.47.15;	author rjw;	state dead;
branches;
next	1.14;

1.14
date	2007.08.07.17.35.36;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.03.21.17.19;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.03.20.36.19;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.03.19.07.03;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.08.02.22.06.27;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.02.19.39.48;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.27.18.58.04;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.27.16.33.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.26.21.09.28;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.26.19.23.36;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.23.21.19.55;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.27.14.52.53;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.26.20.01.30;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.25.23.12.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "StochVars.C"
//
// Implementation the following classes:
//
//    StScrapVar
//    StExecVar
//------------------------------------------------------------------------------

#include <StochVars.h>
#include <StochImpOP.h>
#include <ScenPer.h>
#include <Scenario.h>
#include <Part.h>
#include <Opn.h>

//------------------------------------------------------------------------------
// Implementation of class StScrapVar.
//------------------------------------------------------------------------------

WitStScrapVar::WitStScrapVar (WitPart * thePart, WitScenPer * theScenPer):

      WitStochVar (theScenPer),
      myPart_     (thePart)
   {
   }

//------------------------------------------------------------------------------

WitStScrapVar::~WitStScrapVar ()
   {
   }

//------------------------------------------------------------------------------

double WitStScrapVar::stochCoeffVal () const
   {
   return
        (- myPart_->scrapCost ()[myPer ()])
      * myScenario ()->scenarioProb ();
   }

//------------------------------------------------------------------------------

void WitStScrapVar::printItem () const
   {
   myStochImpOP ()->printItem (myPart_);
   }

//------------------------------------------------------------------------------

const char * WitStScrapVar::classText () const
   {
   return "Scrap";
   }

//------------------------------------------------------------------------------
// Implementation of class StExecVar.
//------------------------------------------------------------------------------

WitStExecVar::WitStExecVar (WitOperation * theOpn, WitScenPer * theScenPer):

      WitStochVar (theScenPer),
      myOpn_      (theOpn)
   {
   }

//------------------------------------------------------------------------------

WitStExecVar::~WitStExecVar ()
   {
   }

//------------------------------------------------------------------------------

double WitStExecVar::stochCoeffVal () const
   {
   return
        (- myOpn_->execCost ()[myPer ()])
      * myScenario ()->scenarioProb ();
   }

//------------------------------------------------------------------------------

void WitStExecVar::printItem () const
   {
   myStochImpOP ()->printItem (myOpn_);
   }

//------------------------------------------------------------------------------

const char * WitStExecVar::classText () const
   {
   return "Execution";
   }
@


1.14
log
@Stochastic Implosion
@
text
@@


1.13
log
@Stochastic Implosion
@
text
@a14 1
//    StochVar
d19 1
a19 1
#include <StVars.h>
a26 34
// Implementation of class StochVar.
//------------------------------------------------------------------------------

WitStochVar::WitStochVar (WitScenPer *  theScenPer):

      WitOptVar  (theScenPer->myStochImpOP ()),
      myScenPer_ (theScenPer)
   {
   }

//------------------------------------------------------------------------------

WitStochVar::~WitStochVar ()
   {
   }

//------------------------------------------------------------------------------

WitOptProb * WitStochVar::myOptProb () const
   {
   return myStochImpOP ();
   }

//------------------------------------------------------------------------------

void WitStochVar::printSource () const
   {
   printItem ();

   myStochImpOP ()->printPeriod   (myPer      ());
   myStochImpOP ()->printScenario (myScenario ());
   }

//------------------------------------------------------------------------------
@


1.12
log
@Stochastic Implosion
@
text
@d23 1
d82 3
a84 1
   return - myPart_->scrapCost ()[myPer ()];
d122 3
a124 3
   return - myOpn_->execCost ()[myPer ()];

   return 0.0;
@


1.11
log
@Stochastic Implosion
@
text
@a25 6


#include <MsgFac.h>



a57 2

   myScenPer_->myMsgFac () ("singleStochLPNyiSmsg", 9);
@


1.10
log
@Stochastic Implosion
@
text
@d53 1
a53 1
   return myScenPer_->myStochImpOP ();
d60 5
d94 7
d134 7
@


1.9
log
@Stochastic Implosion
@
text
@d26 6
d60 1
a60 1
   stronglyAssert (false);
@


1.8
log
@Stochastic Implosion
@
text
@d23 2
d76 7
d107 9
@


1.7
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <DerStVars.h>
@


1.6
log
@Stochastic Implosion
@
text
@d16 1
d56 24
@


1.5
log
@Stochastic Implosion
@
text
@d70 7
@


1.4
log
@Stochastic Implosion
@
text
@d21 1
a21 4
#include <StochImp.h>
#include <StochModeMgr.h>
#include <ScenMgr.h>
#include <Scenario.h>
d27 1
a27 1
WitStochVar::WitStochVar (WitScenario * theScenario, WitPeriod thePer):
d29 2
a30 3
      WitOptVar   (theStochImpOPFor (theScenario)),
      myScenario_ (theScenario),
      myPer_      (thePer)
d44 1
a44 13
   return theStochImpOPFor (myScenario_);
   }

//------------------------------------------------------------------------------

WitStochImpOP * WitStochVar::theStochImpOPFor (WitScenario * theScenario)
   {
   return
      theScenario->
         myScenMgr ()->
            myStochModeMgr ()->
               myStochImploder ()->
                  myStochImpOP ();
d58 1
a58 4
WitStExecVar::WitStExecVar (
         WitOperation * theOpn,
         WitScenario *  theScenario,
         WitPeriod      thePer):
d60 1
a60 1
      WitStochVar (theScenario, thePer),
a69 1

@


1.3
log
@Stochastic Implosion
@
text
@d19 1
a19 1
#include <StochVars.h>
d71 1
a71 1
// Implementation of class StochVar.
@


1.2
log
@Stochastic Implosion
@
text
@d32 1
a32 5
      WitOptVar   (theScenario->
                     myScenMgr ()->
                        myStochModeMgr ()->
                           myStochImploder ()->
                              myStochImpOP ()),
d48 7
d56 1
a56 1
      myScenario_->
@


1.1
log
@Stochastic Implosion
@
text
@d33 4
a36 4
                      myScenMgr ()->
                         myStochModeMgr ()->
                            myStochImploder ()->
                               myStochImpOP ()),
d50 12
@

