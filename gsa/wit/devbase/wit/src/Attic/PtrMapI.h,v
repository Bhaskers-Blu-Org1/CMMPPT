head	1.7;
access;
symbols
	nextGenBranch:1.6.0.2
	nextGenRoot:1.6
	sce_3_30_20030627:1.6
	EndRw-branch:1.1.0.4
	Root-of-EndRw:1.1
	rwToStl:1.1.0.2;
locks; strict;
comment	@ * @;


1.7
date	2003.10.02.20.46.43;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2003.03.06.20.28.20;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.13.23.06.32;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.07.20.20.51;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.04.18.45.54;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.23.19.13.23;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.11.18.53.16;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Continued implementation of Post-Implosion Pegging.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PtrMapIH
#define PtrMapIH

//------------------------------------------------------------------------------
// Header file: "PtrMapI.h"
//
// Contains the implementation of class template PtrMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <PtrMap.h>
#include <CompMgr.h>

//------------------------------------------------------------------------------
// Implementation of class template PtrMap <DomEl>.
//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      WitPtrMap <PtrMapArgs>::WitPtrMap ():
         myPtrVec_ ()
   {
   ifDebug (DomEl * theDomEl);

   ifDebug (DomEl::verifyMappingIndex (theDomEl));
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      WitPtrMap <PtrMapArgs>::WitPtrMap (WitProblem * theProblem):

         myPtrVec_ ()
   {
   allocate (theProblem);
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      WitPtrMap <PtrMapArgs>::~WitPtrMap ()
   {
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      void WitPtrMap <PtrMapArgs>::allocate (WitProblem * theProblem)
   {
   allocate (DomEl::nInstances (theProblem));
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      void WitPtrMap <PtrMapArgs>::allocate (int nInst)
   {
   myPtrVec_.resize (nInst);
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs> 
      void WitPtrMap <PtrMapArgs>::clear ()
   {
   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------

template <PtrMapArgDecs>
      inline RangeEl * & WitPtrMap <PtrMapArgs>::operator () (DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_[theDomEl->mappingIndex ()];
   }

#endif
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d57 9
a65 1
   myPtrVec_.resize (DomEl::nInstances (theProblem));
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d57 1
a57 5
   int nInst;

   nInst = theProblem->myCompMgr ()->nInstances (static_cast <DomEl *> (NULL));

   myPtrVec_.resize (nInst);
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@a81 12
//------------------------------------------------------------------------------

template <PtrMapArgDecs>
      inline RangeEl * WitPtrMap <PtrMapArgs>::operator () (
         DomEl * theDomEl)
         const
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_[theDomEl->mappingIndex ()];
   }

@


1.2
log
@Replaced some C style casts with C++ style casts.
@
text
@d82 12
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d59 1
a59 1
   nInst = theProblem->myCompMgr ()->nInstances ((DomEl *) NULL);
@

