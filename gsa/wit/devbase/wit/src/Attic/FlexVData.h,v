head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.03.22.23.16.37;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2004.03.22.21.45.51;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.20.00.12.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Double Precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef FlexVDataH
#define FlexVDataH

//------------------------------------------------------------------------------
// Header file: "FlexVData.h"
//
// Contains the declaration of class template FlexVData <Elem>.
//------------------------------------------------------------------------------

#include <FlexVAsst.h>

//------------------------------------------------------------------------------
// Class template FlexVData <Elem>.
//
// "Flexible Vector Data"
// An instance of this class is designed to be owned by a FlexVec <Elem>.
// It fulfills the following responsibilties:
//
// *  Owning the actual data for the FlexVec.
// *  Performing low-level operations on the data.
// *  Presenting to the FlexVec a medium-level interface to the data.
//
// The data representation of this class is designed to be as compact as
// possible with respect to memory.
//
// Implemented in FlexVec.C.
//------------------------------------------------------------------------------

template <typename Elem> 
      class WitFlexVData
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFlexVData (WitProblem *, Elem initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitFlexVData ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void switchToVectorMode ();
         //
         // Valid only in scalar mode.
         // Switches to   vector mode.

      void switchToScalarMode ();
         //
         // Valid only in vector mode.
         // Switches to   scalar mode.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessWrapper (bool,         vectorMode, curAsst_);
      accessWrapper (int,          nPeriods,   curAsst_);
      accessWrapper (WitProblem *, myProblem,  curAsst_);

      inline bool scalarMode ()
         {
         return (not vectorMode ());
         }

      inline Elem * myCVec ()
         {
         witAssert (vectorMode ());

         return myCVec_;
         }

      inline Elem & myScalar ()
         {
         witAssert (scalarMode ());

         return myScalar_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitFlexVData);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitFlexVAsst * curAsst_;
         //
         // The current FlexVAsst for this FlexVData.

      union
         {
         Elem * myCVec_;
            //
            // The c-vector representation of the vector.
            // Valid only in vector mode.

         Elem myScalar_;
            //
            // The scalar representation of the vector.
            // Valid only in scalar mode.
         };
   };

#endif
@


1.2
log
@Double Precision.
@
text
@@


1.1
log
@Double Precision.
@
text
@d19 1
a19 1
#include <Util.h>
d73 8
a80 4
      inline bool vectorMode ();
         //
         // Returns true  in vector mode.
         // Returns false in scalar mode.
d82 3
a84 4
      inline bool scalarMode ();
         //
         // Returns true  in scalar mode.
         // Returns false in vector mode.
d86 2
a87 4
      inline int nPeriods ();
         //
         // Returns nPeriods for the Problem for this FlexVData.
         // This is the length of the represented vector.
d89 3
a91 4
      inline Elem * myCVec ();
         //
         // Returns the c-vector representation of the vector.
         // Valid only in vector mode.
d93 2
a94 4
      inline Elem & myScalar ();
         //
         // Returns a ref to the scalar representation of the vector.
         // Valid only in scalar mode.
d108 1
a108 1
      int myIntData_;
d110 1
a110 8
         // This integer data compactly stores two distinct pieces of
         // information:
         //    The mode of vector representation:
         //       If myIntData_ > 0 this FlexVData is in vector mode.
         //       If myIntData_ < 0 this FlexVData is in scalar mode.
         //    nPeriods for the Problem, which is the length of the represented
         //       vector. This is stored as the absolute value of myIntData_.
         // Note that myIntData_ is never 0.
a124 51

//------------------------------------------------------------------------------
// Implementation of inlines.
//------------------------------------------------------------------------------

template <typename Elem> 
      inline bool WitFlexVData <Elem>::vectorMode ()
   {
   return (myIntData_ > 0);
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline bool WitFlexVData <Elem>::scalarMode ()
   {
   return (myIntData_ < 0);
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline int WitFlexVData <Elem>::nPeriods ()
   {
   return
      vectorMode ()?
         + myIntData_:
         - myIntData_;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline Elem * WitFlexVData <Elem>::myCVec ()
   {
   witAssert (vectorMode ());

   return myCVec_;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline Elem & WitFlexVData <Elem>::myScalar ()
   {
   witAssert (scalarMode ());

   return myScalar_;
   }

//------------------------------------------------------------------------------
@

