head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2005.01.10.22.34.48;	author rjw;	state dead;
branches;
next	1.16;

1.16
date	2005.01.06.20.34.09;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.31.18.28.28;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.28.22.34.27;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.22.22.27.10;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.22.19.57.26;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.21.22.13.49;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.20.21.13.10;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.17.21.53.01;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.16.23.35.17;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.15.23.50.11;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.14.22.37.10;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.09.23.57.02;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.09.22.06.07;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.09.21.34.12;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.06.22.38.15;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Low-Pri Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PoPtH
#define PoPtH

//------------------------------------------------------------------------------
// Header file: "PoPt.h"
//
// Contains the declaration of class PoPt.
//------------------------------------------------------------------------------

#include <DetSelPt.h>
#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class PoPt
//
// "Proportionate Routing Point"
// A SelPt for proportionate routing
// A PoPt represents an RtCand and a period at which proportionate routing is to
// be performed.
// Old Version
//
// Class Hierarchy:
//
// SelPt
//    DetSelPt
//       PoPt
//
// Implemented in PropOt.C.
//------------------------------------------------------------------------------

class WitPoPt: public WitDetSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPoPt (WitRtCand *, WitPoBrPt *, WitPoCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPoPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void findSplitVols (
            double   expVol,
            double & splitVol,
            double & unbddVol);
         //
         // Sets the following arguments for a split proportionate explosion of
         // expVol units at this PoPt:
         // splitVol: The split volume for the   bounded portion of the split.
         // unbddVol: The split volume for the unbounded portion of the split.

      void setActive    (bool);
      void setPotActive (bool);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRtCand *,            myRtCand)
      accessFunc (WitPoBrPt *,            myPoBrPt)
      accessFunc (bool,                   active)
      accessFunc (bool,                   potActive)
      accessFunc (const WitRtCandStack &, activeRtCands)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void         printSelection ();
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
      virtual void         recSplit       ();
      virtual void         recUnsplit     ();
         //
         // Overrides from class SelPt.

      virtual bool hasResAlt          ();
      virtual void alterSelection     ();
      virtual void tempAlterSel       ();
      virtual void cancelTempAlt      (WitSelCand *);
      virtual bool cancelNeedsSelCand ();
         //
         // Overrides from class DetSelPt.

      void printPermDeact ();
         //
         // Prints an indication that proportionate routing thru myRtCand_ in
         // the period for this PoPt has been permanently ruled out.

      noCopyCtorAssign (WitPoPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtCand * const myRtCand_;
         //
         // The RtCand represented by this PoPt.

      WitPoBrPt * const myPoBrPt_;
         //
         // ThePoBrPt associated with this PoPt.

      WitPoCoord * const myPoCoord_;
         //
         // The PoCoord that owns this PoPt.

      bool active_;
         //
         // myRtCand_ is currently active for proportionate explosions in this
         // PtPt's period, iff active_ is true.

      bool potActive_;
         //
         // myRtCand_ is considered to be potentially active for proportionate
         // explosions in this PtPt's period, iff potActive_ is true.

      WitRtCandStack activeRtCands_;
         //
         // The set of RtCands that are active just before the selection is
         // split at this PoPt.
         // Used only in selection splitting mode.
   };

#endif
@


1.16
log
@Low-Pri Prop-Rt.
@
text
@@


1.15
log
@Low-Pri Prop-Rt.
@
text
@a92 1
      virtual void         restoreSelTo   (WitSelCand *);
d100 5
a104 3
      virtual bool hasResAlt      ();
      virtual void alterSelection ();
      virtual void tempAlterSel   ();
@


1.14
log
@Low-Pri Prop-Rt.
@
text
@d93 1
@


1.13
log
@Low-Pri Prop-Rt.
@
text
@d60 10
@


1.12
log
@Low-Pri Prop-Rt.
@
text
@a78 1
      virtual bool         hasResAlt      ();
d90 1
@


1.11
log
@Low-Pri Prop-Rt.
@
text
@d29 1
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@a83 1
      virtual void         tempAlterSel   ();
d91 1
d93 1
a93 1
         // Override from class DetSelPt.
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@a78 1
      virtual void         alterSelection ();
d91 4
@


1.8
log
@Low-Pri Prop-Rt.
@
text
@d19 1
a19 1
#include <SelPt.h>
d33 2
a34 1
//    PoPt
d39 1
a39 1
class WitPoPt: public WitSelPt
@


1.7
log
@Low-Pri Prop-Rt.
@
text
@a68 1

d85 1
a85 1
      virtual void         setToMyCurSel  (WitSelCand *);
@


1.6
log
@Low-Pri Prop-Rt.
@
text
@d58 2
a59 1
      void setActive (bool);
a86 1
      virtual void         restoreSel     (WitSelCand *);
a91 2
      void setPotActive (bool);

@


1.5
log
@Low-Pri Prop-Rt.
@
text
@d85 1
a85 1
      virtual void         setToCurSel    (WitSelCand *);
@


1.4
log
@Low-Pri Prop-Rt.
@
text
@a81 1
      virtual WitSelCand * curSelCand     ();
d85 1
@


1.3
log
@Low-Pri Prop-Rt.
@
text
@d58 1
a58 16
      bool active ();
         //
         // Returns true, iff myRtCand_ is currently active for proportionate
         // explosions in the period for this PoPt.
         // Note that funcActive () and active () return the same value, except
         // in low-pri prop-rt mode.

      void setActive (bool theValue);
         //
         // Sets the "active for prop-rt status" of myRtCand_ in the period
         // for this PoPt to theValue;

      bool potActive ();
         //
         // Returns true, iff proportionate routing thru theRtCand in thePer has
         // not been permanently ruled out.
d66 3
d92 2
d117 10
@


1.2
log
@Low-Pri Prop-Rt.
@
text
@a54 15
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual bool         hasResAlt      ();
      virtual void         alterSelection ();
      virtual void         printSelection ();
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual WitSelCand * curSelCand     ();
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual void         tempAlterSel   ();
      virtual void         restoreSel     (WitSelCand *);

      //------------------------------------------------------------------------
d89 12
a100 2
      virtual void recSplit ();
      virtual void recUnsplit ();
@


1.1
log
@Low-Pri Prop-Rt.
@
text
@d58 10
a67 9
      virtual bool        hasResAlt      ();
      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual bool        splittable     ();   
      virtual void        getSortData    (WitPart * &, WitPeriod &);
      virtual void        tempAlterSel   ();
      virtual void        restoreSel     (WitSelCand *);
@

