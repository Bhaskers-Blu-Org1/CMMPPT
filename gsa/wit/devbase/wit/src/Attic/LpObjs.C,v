head	1.4;
access;
symbols
	latest_sce_3_10_20010924:1.2.0.8
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.2.0.6
	sce_3_00_20010601:1.2
	latest_sce_2_31_20010308:1.2.0.4
	sce_2_31_20010308:1.2
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2002.08.23.21.00.35;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2002.08.23.18.09.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.02;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Continued implementation of opt implosion with lot sizes.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "LpObjs.C"
//
// Implementation of the following classes, derived from class LpObj:
//
//    BoundsObj
//    PrimaryObj
//    Obj1Obj
//    RevObj
//    InvObj
//    ServObj
//    SubObj
//    Obj2Obj
//------------------------------------------------------------------------------

int compiledLpObjs = 1;
   //
   // WATCOM's strict compatibility mode requires every file to
   // have at least one external definition.

#include <OptComp.h>
#include <ImpLp.h>
#include <OptImp.h>

#ifdef OPT_IMPLODE

//------------------------------------------------------------------------------
// Implementation of class BoundsObj.
//------------------------------------------------------------------------------

WitBoundsObj::WitBoundsObj (WitImpLp * theImpLp):

      WitLpObj ("Bounds Objective", theImpLp)
   {
   }

//------------------------------------------------------------------------------

WitBoundsObj::~WitBoundsObj ()
   {
   }

//------------------------------------------------------------------------------

float WitBoundsObj::coeffVal (const WitLpVar * theVar) const
   {
   return theVar->boundsCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class PrimaryObj.
//------------------------------------------------------------------------------

WitPrimaryObj::WitPrimaryObj (WitImpLp * theImpLp):

      WitLpObj ("Primary Objective", theImpLp)
   {
   }

//------------------------------------------------------------------------------

WitPrimaryObj::~WitPrimaryObj ()
   {
   }

//------------------------------------------------------------------------------

float WitPrimaryObj::coeffVal (const WitLpVar * theVar) const
   {
   return theVar->primaryCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class Obj1Obj.
//------------------------------------------------------------------------------

WitObj1Obj::WitObj1Obj (WitImpLp * theImpLp):

      WitLpObj ("Objective #1", theImpLp),

      myImpLp_ (theImpLp)
   {
   }

//------------------------------------------------------------------------------

WitObj1Obj::~WitObj1Obj ()
   {
   }

//------------------------------------------------------------------------------

float WitObj1Obj::coeffVal (const WitLpVar * theVar) const
   {
   float coeffVal = theVar->primaryCoeffVal ();

   if (myImpLp_->slbvVarsExist ())
      coeffVal -=
         myOptImploder ()->myOptComp ()->wbounds () * theVar->boundsCoeffVal ();

   return coeffVal;
   }

//------------------------------------------------------------------------------
// Implementation of class RevObj.
//------------------------------------------------------------------------------

WitRevObj::WitRevObj (WitImpLp * theImpLp):

      WitLpObj ("Revenue Objective", theImpLp)
   {
   }

//------------------------------------------------------------------------------

WitRevObj::~WitRevObj ()
   {
   }

//------------------------------------------------------------------------------

float WitRevObj::coeffVal (const WitLpVar * theVar) const
   {
   return theVar->revCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class InvObj.
//------------------------------------------------------------------------------

WitInvObj::WitInvObj (WitImpLp * theImpLp):

      WitLpObj ("Inventory Objective", theImpLp)
   {
   }

//------------------------------------------------------------------------------

WitInvObj::~WitInvObj ()
   {
   }

//------------------------------------------------------------------------------

float WitInvObj::coeffVal (const WitLpVar * theVar) const
   {
   return theVar->invCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class ServObj.
//------------------------------------------------------------------------------

WitServObj::WitServObj (WitImpLp * theImpLp):

      WitLpObj ("Serviceability Objective", theImpLp)
   {
   }

//------------------------------------------------------------------------------

WitServObj::~WitServObj ()
   {
   }

//------------------------------------------------------------------------------

float WitServObj::coeffVal (const WitLpVar * theVar) const
   {
   return theVar->servCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class SubObj.
//------------------------------------------------------------------------------

WitSubObj::WitSubObj (WitImpLp * theImpLp):

      WitLpObj ("Substitute Objective", theImpLp)
   {
   }

//------------------------------------------------------------------------------

WitSubObj::~WitSubObj ()
   {
   }

//------------------------------------------------------------------------------

float WitSubObj::coeffVal (const WitLpVar * theVar) const
   {
   return theVar->subCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class Obj2Obj.
//------------------------------------------------------------------------------

WitObj2Obj::WitObj2Obj (WitImpLp * theImpLp):

      WitLpObj ("Objective #2", theImpLp),

      myImpLp_ (theImpLp)
   {
   }

//------------------------------------------------------------------------------

WitObj2Obj::~WitObj2Obj ()
   {
   }

//------------------------------------------------------------------------------

float WitObj2Obj::coeffVal (const WitLpVar * theVar) const
   {
   WitObjFunc2 * theObjFunc2;

   theObjFunc2 = myOptImploder ()->myOptComp ()->myObjFunc2 ();

   float coeffVal =
      theObjFunc2->revFactor ()  * theVar-> revCoeffVal ()
      +
      theObjFunc2->invFactor ()  * theVar-> invCoeffVal ()
      +
      theObjFunc2->servFactor () * theVar->servCoeffVal ()
      +
      theObjFunc2->subFactor ()  * theVar-> subCoeffVal ();

   if (myImpLp_->slbvVarsExist ())
      coeffVal -=
         myOptImploder ()->myOptComp ()->wbounds () * theVar->boundsCoeffVal ();

   return coeffVal;
   }

#endif
@


1.3
log
@Continued implementation of opt implosion with lot sizes.
@
text
@@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d30 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
