head	1.26;
access;
symbols;
locks; strict;
comment	@ * @;


1.26
date	2006.03.13.17.02.23;	author rjw;	state dead;
branches;
next	1.25;

1.25
date	2006.03.11.00.03.45;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.10.23.23.31;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.25.00.12.43;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.02.23.22.42.10;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.22.23.20.34;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.21.21.11.17;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.02.16.16.48.45;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.15.16.57.50;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.14.21.59.09;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.10.23.36.50;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.10.17.09.52;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.10.16.51.59;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.07.19.18.43;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.06.23.24.03;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.06.20.36.00;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.02.22.37.44;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.31.22.40.39;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.31.20.45.31;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.31.20.04.24;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.31.19.27.38;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.31.18.24.14;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.30.23.59.37;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.27.23.51.33;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.27.23.16.22;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.27.21.14.35;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.26
log
@GPIP
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpReqMgrH
#define SrpReqMgrH

//------------------------------------------------------------------------------
// Header file: "SrpReqMgr.h"
//
// Contains the declaration of class GpipReqMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>
#include <ObjStack.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// Class GpipReqMgr
//
// "Group Post-Implosion Pegging Requirement Manager"
//
// Responsible for managing the requirements in SRP.
//
// Implemented in SrpReq.C.
//------------------------------------------------------------------------------

class WitGpipReqMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitGpipReqMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitGpipReqMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool hasReqsFor (WitPart * thePart, WitPeriod fillPer);
         //
         // Returns true, iff there is at least one requirement for thePart in
         // fillPer.

      bool hasReqsFor (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns true, iff there is at least one requirement for theOpn in
         // execPer.

      WitGpipReqSrc * newReqSrcForSeqNo (int theSeqNo);
         //
         // Constructs and returns a new SrcReqSrc for theSeqNo.

      void addReq (
            WitPart *       thePart,
            WitPeriod       fillPer,
            WitGpipReqSrc * theReqSrc,
            double          incReqVol);
         //
         // Adds (theReqSrc, incReqVol) to the list of requirements for thePart
         // in fillPer.

      void addReq (
            WitBopEntry *   theBopEnt,
            WitPeriod       execPer,
            WitGpipReqSrc * theReqSrc,
            double          incExecVol);
         //
         // Adds (theReqSrc, incExecVol) to the list of requirements for
         // theBopEnt in execPer.

      void loadCurReqList (WitPart * thePart, WitPeriod fillPer);
         //
         // Transfers the requirements for thePart in fillPer to the current
         // requirement list. (Sorts and consolidates the list, as well.)

      void loadCurReqList (WitOperation * theOpn, WitPeriod execPer);
         //
         // Determines the requirements for theOpn in execPer and loads them
         // into the current requirement list.

      void clearCurReqList ();
         //
         // Clears curReqList_.

      void initReqListItr ();
         //
         // Initializes requirement list iteration.

      void advanceReqListItr (
            double &          netReqVol,
            WitGpipReqSrc * & theReqSrc,
            double &          incReqVol);
         //
         // Advances requirement list iteration by no more than netReqVol units,
         // sets theReqSrc and incReqVol to the current GpipReqSrc and
         // incremental requirement volume, and decrements netReqVol by
         // incReqVol.

      void advanceReqListItr (
            WitGpipReqSrc * & theReqSrc,
            double &          incReqVol);
         //
         // Advances requirement list iteration and sets theReqSrc and incReqVol
         // to the current GpipReqSrc and incremental requirement volume.

      bool finishedReqListItr ();
         //
         // Returns true, iff requirement list iteration is finished.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildSeqEls ();
         //
         // Builds the GpipSeqEls owned by this GpipReqMgr.

      void mergeReqs (WitOperation * theOpn, WitPeriod execPer);
         //
         // Merges the requirements in execPer for each of the BopEntries for
         // theOpn and loads them into the current requirement list.

      double minIncReqVol (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns the minimum incReqVol for the first GpipReqSpec for each
         // BopEntry for theOpn in execPer.
         // Returns -1, if there are no more GpipReqSpecs for the BopEntries for
         // theOpn in execPer.
 
      void extractReqSrcs ( 
            WitOperation *       theOpn,
            WitPeriod            execPer,
            double               deltaIncReqVol,
            WitGpipReqSrcStack & theReqSrcs);
         //
         // Sets theReqSrcs to consist of the GpipReqSrc for the first
         // GpipReqSpec for each BopEntry for theOpn in execPer.
         // Removes deltaIncReqVol units of incReqVol from the beginning the
         // ReqList for each BopEntry for theOpn in execPer.

      void sortReqList ();
         //
         // Sorts and consolidates curReqList_.

      void loadReqSpecVec ();
         //
         // Converts the ReqPairs in curReqList_ into GpipReqSpecs and stores
         // them in myReqSpecVec_.

      bool compareReqSpecs (
            WitGpipReqSpec * theReqSpec1,
            WitGpipReqSpec * theReqSpec2);
         //
         // Returns true, iff theReqSpec1 belongs ahead of theReqSpec2 in
         // myReqSpecVec_.

      void unloadReqSpecVec ();
         //
         // Converts the GpipReqSpecs in myReqSpecVec_ to ReqPairs,
         // consolidates them, and stores them in curReqList_.

      WitGpipReqSpec * provideReqSpec (
            WitGpipReqSrc * theReqSrc,
            double          incReqVol);
         //
         // Returns a GpipReqSpec that has been designated as available for use
         // and sets its data to the arguments.

      void reclaimReqSpec (WitGpipReqSpec * theReqSpec);
         //
         // Saves theReqSpec for later use.

      void prtCurReqListBeforeSort ();
         //
         // Prints curReqList_ before sorting.

      void prtCurReqListAfterSort ();
         //
         // Prints curReqList_ after sorting.

      void prtCurReqList (WitOperation * theOpn, WitPeriod execPer);
         //
         // Prints curReqList_ after loading from theOpn in execPer.

      void prtCurReqList ();
         //
         // Prints curReqList_.

      void prtBopEntReqs (WitOperation * theOpn, WitPeriod execPer);
         //
         // Prints the requirements in execPer at each BopEntry for theOpn.

      void prtSizes ();
         //
         // Prints the maximum size and capacity of myReqSpecVec_.

      noCopyCtorAssign (WitGpipReqMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitGpipSeqEl> mySeqElVec_;
         //
         // mySeqElVec_[theSeqNo] is the GpipSeqEl owned by this GpipReqMgr
         // whose sequence number is theSeqNo.

      WitGpipReqSrcStack myReqSrcs_;
         //
         // The GpipReqSrcs owned by this GpipReqMgr.

      WitGpipReqSrc * myVacReqSrc_;
         //
         // The GpipReqSrc owned by this GpipReqMgr whose GpipSeqEl is the
         // vacuous GpipSeqEl.

      WitPtrSched <WitPart, WitGpipReqList> myPartReqs_;
         //
         // myPartReqs_.myElemAt (thePart, fillPer) is the list of GpipReqSpecs
         // for thePart in fillPer.

      WitPtrSched <WitBopEntry, WitGpipReqList> myBopEntReqs_;
         //
         // myBopEntReqs_.myElemAt (theBopEnt, execPer) is the list of
         // GpipReqSpecs for theBopEnt in execPer.

      WitPtrVec <WitGpipReqSpec> myReqSpecVec_;
         //
         // The set of active GpipReqSpecs owned by the GpipReqMgr.
         // They are stored in this vector, so that they can be sorted.

      int nReqSpecsInVec_;
         //
         // The number of GpipReqSpecs currently stored in myReqSpecVec_.
         
      int maxReqSpecsInVec_;
         //
         // Maximum # GpipReqSpecs ever stored in myReqSpecVec_.

      WitGpipReqList unusedReqSpecs_;
         //
         // The set of GpipReqSpecs owned by this GpipReqMgr that are currently
         // not in use.

      WitGpipReqList curReqList_;
         //
         // The current requirement list for this GpipReqMgr.
         // The list of pairs, (theReqSrc, incReqVol), indicating that incReqVol
         // units of requirement for the current Part and Period are pegged to
         // theReqSrc.

      WitObjStItr <WitGpipReqSpec> myReqSpecItr_;
         //
         // The iterator that implements requirement list iteration.

      WitGpipReqSrc * curReqSrc_;
         //
         // The current GpipReqSrc for requirement list iteration.

      double incReqVolCur_;
         //
         // The current incremental requirement volume for requirement list
         // iteration.
   };

#endif
@


1.25
log
@GPIP
@
text
@@


1.24
log
@GPIP
@
text
@d16 1
a16 1
// Contains the declaration of class SrpReqMgr.
d25 1
a25 1
// Class SrpReqMgr
d34 1
a34 1
class WitSrpReqMgr: public WitProbAssoc
d42 1
a42 1
      WitSrpReqMgr (WitProblem *);
d48 1
a48 1
      ~WitSrpReqMgr ();
d64 1
a64 1
      WitSrpReqSrc * newReqSrcForSeqNo (int theSeqNo);
d69 4
a72 4
            WitPart *      thePart,
            WitPeriod      fillPer,
            WitSrpReqSrc * theReqSrc,
            double         incReqVol);
d78 4
a81 4
            WitBopEntry *  theBopEnt,
            WitPeriod      execPer,
            WitSrpReqSrc * theReqSrc,
            double         incExecVol);
d105 3
a107 3
            double &         netReqVol,
            WitSrpReqSrc * & theReqSrc,
            double &         incReqVol);
d110 1
a110 1
         // sets theReqSrc and incReqVol to the current SrpReqSrc and
d115 2
a116 2
            WitSrpReqSrc * & theReqSrc,
            double &         incReqVol);
d119 1
a119 1
         // to the current SrpReqSrc and incremental requirement volume.
d133 1
a133 1
         // Builds the SrpSeqEls owned by this SrpReqMgr.
d142 1
a142 1
         // Returns the minimum incReqVol for the first SrpReqSpec for each
d144 1
a144 1
         // Returns -1, if there are no more SrpReqSpecs for the BopEntries for
d146 6
a151 6

      void extractReqSrcs (
            WitOperation *      theOpn,
            WitPeriod           execPer,
            double              deltaIncReqVol,
            WitSrpReqSrcStack & theReqSrcs);
d153 2
a154 2
         // Sets theReqSrcs to consist of the SrpReqSrc for the first SrpReqSpec
         // for each BopEntry for theOpn in execPer.
d164 1
a164 1
         // Converts the ReqPairs in curReqList_ into SrpReqSpecs and stores
d168 2
a169 2
            WitSrpReqSpec * theReqSpec1,
            WitSrpReqSpec * theReqSpec2);
d171 1
a171 1
         // Returns true, iff theSrpReqSpec1 belongs ahead of theSrpReqSpec2 in
d176 1
a176 1
         // Converts the SrpReqSpecs in myReqSpecVec_ to ReqPairs,
d179 3
a181 3
      WitSrpReqSpec * provideReqSpec (
            WitSrpReqSrc * theReqSrc,
            double         incReqVol);
d183 1
a183 1
         // Returns an SrpReqSpec that has been designated as available for use
d186 1
a186 1
      void reclaimReqSpec (WitSrpReqSpec * theReqSpec);
d214 1
a214 1
      noCopyCtorAssign (WitSrpReqMgr);
d220 1
a220 1
      WitPtrVec <WitSrpSeqEl> mySeqElVec_;
d222 2
a223 2
         // mySeqElVec_[theSeqNo] is the SrpSeqEl owned by this SrpReqMgr whose
         // sequence number is theSeqNo.
d225 1
a225 1
      WitSrpReqSrcStack myReqSrcs_;
d227 1
a227 1
         // The SrpReqSrcs owned by this SrpReqMgr.
d229 1
a229 1
      WitSrpReqSrc * myVacReqSrc_;
d231 2
a232 2
         // The SrpReqSrc owned by this SrpReqMgr whose SrpSeqEl is the vacuous
         // SrpSeqEl.
d234 1
a234 1
      WitPtrSched <WitPart, WitSrpReqList> myPartReqs_;
d236 1
a236 1
         // myPartReqs_.myElemAt (thePart, fillPer) is the list of SrpReqSpecs
d239 1
a239 1
      WitPtrSched <WitBopEntry, WitSrpReqList> myBopEntReqs_;
d242 1
a242 1
         // SrpReqSpecs for theBopEnt in execPer.
d244 1
a244 1
      WitPtrVec <WitSrpReqSpec> myReqSpecVec_;
d246 1
a246 1
         // The set of active SrpReqSpecs owned by the SrpReqMgr.
d251 1
a251 1
         // The number of SrpReqSpecs currently stored in myReqSpecVec_.
d255 1
a255 1
         // Maximum # SrpReqSpecs ever stored in myReqSpecVec_.
d257 1
a257 1
      WitSrpReqList unusedReqSpecs_;
d259 1
a259 1
         // The set of SrpReqSpecs owned by this SrpReqMgr that are currently
d262 1
a262 1
      WitSrpReqList curReqList_;
d264 1
a264 1
         // The current requirement list for this SrpReqMgr.
d269 1
a269 1
      WitObjStItr <WitSrpReqSpec> myReqSpecItr_;
d273 1
a273 1
      WitSrpReqSrc * curReqSrc_;
d275 1
a275 1
         // The current SrpReqSrc for requirement list iteration.
@


1.23
log
@[shared-resource pegging]
@
text
@d27 1
a27 1
// "Shared-Resource Pegging Requirement Manager"
@


1.22
log
@[shared-resource pegging]
@
text
@d54 1
a54 1
      bool hasNoReqsFor (WitPart * thePart, WitPeriod fillPer);
d56 7
a62 1
         // Returns true, iff there are no requirement for thePart in fillPer.
@


1.21
log
@[shared-resource pegging]
@
text
@a57 5
      inline bool curReqListIsEmpty ()
         {
         return curReqList_.isEmpty ();
         }

d90 1
a90 1
      void getFromCurReqList (WitSrpReqSrc * & theReqSrc, double & incReqVol);
d92 5
a96 3
         // When called, the current requirement list must be non-empty. Removes
         // the first pair from the current requirement list and sets
         // (theReqSrc, incReqVol) to the pair.
d98 1
a98 1
      void netWithCurReqList (
d103 4
a106 9
         // When called, the current requirement list must be non-empty. Removes
         // at most netReqVol units from the first pair from the current
         // requirement list, sets (theReqSrc, incReqVol) to the resulting pair,
         // and decrements netReqVol by incReqVol.

      void initReqListItr ();
         //
         // Initializes requirement list iteration.
         // Not yet implemented.
a108 1
            double           maxReqVol,
d112 6
a117 4
         // Advances requirement list iteration by no more the maxReqVol units.
         // Sets theReqSrc and incReqVol to the current SrpReqSrc and
         // incremental requirement volume.
         // Not yet implemented.
d262 13
@


1.20
log
@[shared-resource pegging]
@
text
@d101 24
a124 7
      void restoreToCurReqList (double incReqVol);
         //
         // When called, getFromCurReqList is required to have been called more
         // recently than loadCurReqList or restoreToCurReqList.
         // Adds (theReqSrc, incReqVol) to the beginning of the current
         // requirement list, where theReqSrc was the SrpReqSrc that was
         // retrieved by the most recent call to getFromCurReqList.
a268 6

      WitSrpReqSrc * retrievedReqSrc_;
         //
         // The SrpReqSrc that was retrieved by the most recent call to
         // getFromCurReqList. NULL, if getFromCurReqList has not been called
         // since loadCurReqList or restoreToCurReqList.
@


1.19
log
@[shared-resource pegging]
@
text
@d213 1
a213 1
      WitSrpReqSrc * myNullReqSrc_;
d215 1
a215 1
         // The SrpReqSrc owned by this SrpReqMgr whose SrpSeqEl is the NULL
d255 3
a257 3
         // The SrpReqSrc that was retrieved by the most recent call to getReq.
         // NULL, if getFromCurReqList has not been called since loadCurReqList
         // or restoreToCurReqList.
@


1.18
log
@[shared-resource pegging]
@
text
@d22 1
a22 1
#include <Vector.h>
d151 1
a151 1
      static bool areInOrder (
d228 1
a228 1
      WitVector <WitSrpReqSpec *> myReqSpecVec_;
@


1.17
log
@[shared-resource pegging]
@
text
@a118 17
      void loadReqSpecVec ();
         //
         // Converts the ReqPairs in curReqList into SrpReqSpecs and stores them
         // in myReqSpecVec_.

      static bool areInOrder (
            WitSrpReqSpec * theReqSpec1,
            WitSrpReqSpec * theReqSpec2);
         //
         // Returns true, iff theSrpReqSpec1 belongs ahead of theSrpReqSpec2 in
         // myReqSpecVec_.

      void unloadReqSpecVec ();
         //
         // Converts the SrpReqSpecs in myReqSpecVec_ to ReqPairs,
         // consolidates them, and stores them in curReqList_.

d142 21
@


1.16
log
@[shared-resource pegging]
@
text
@d63 1
a63 4
      WitSrpReqSrc * newReqSrc (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            int         theSeqNo);
d65 1
a65 1
         // Constructs and returns a new SrcReqSrc for the arguments.
d115 4
d200 1
a200 1
      WitObjStack <WitSrpSeqEl> mySeqEls_;
d202 2
a203 2
         // The SrpSeqEls owned by this SrpReqMgr.
         // (One for each element in the shipment sequence.)
d209 5
@


1.15
log
@[shared-resource pegging]
@
text
@d169 1
a169 1
      void prtCurReqList (WitPart * thePart, WitPeriod fillPer, bool afterSort);
d171 13
a183 2
         // Prints curReqList_ for thePart in fillPer.
         // afterSort indicates whether or not the vector has been sorted.
@


1.14
log
@[shared-resource pegging]
@
text
@d188 1
a188 1
      WitSrpSeqElStack mySeqEls_;
@


1.13
log
@[shared-resource pegging]
@
text
@d123 7
@


1.12
log
@[shared-resource pegging]
@
text
@d181 1
a181 1
      WitObjStack <WitSrpSeqEl> mySeqEls_;
@


1.11
log
@[shared-resource pegging]
@
text
@d162 1
a162 1
      void prtReqSpecs (bool afterSort);
d164 1
a164 1
         // Prints myReqSpecVec_.
@


1.10
log
@[shared-resource pegging]
@
text
@d167 4
@


1.9
log
@[shared-resource pegging]
@
text
@d93 1
a93 1
      void loadCurReqList (WitBopEntry * theBopEnt, WitPeriod execPer);
d95 2
a96 2
         // Transfers the requirements for theBopEnt in execPer to the current
         // requirement list. (Reverses the list, as well.)
d128 23
d182 1
a182 1
      WitObjStack <WitSrpReqSrc> myReqSrcs_;
@


1.8
log
@[shared-resource pegging]
@
text
@a117 5
      void loadCurReqList (WitSrpReqPairStack & theReqPairs);
         //
         // Transfers the requirements in theReqPairs to the current requirement
         // list.

d163 1
a163 1
      WitPtrSched <WitPart, WitSrpReqPairStack> myPartReqs_;
d165 2
a166 2
         // myPartReqs_.myElemAt (thePart, fillPer) is the list of
         // requirement pairs for thePart in fillPer.
d168 1
a168 1
      WitPtrSched <WitBopEntry, WitSrpReqPairStack> myBopEntReqs_;
d171 1
a171 1
         // requirement pairs for theBopEnt in execPer.
d182 5
a186 1
      WitObjStack <WitSrpReqSpec> unusedReqSpecs_;
d191 1
a191 1
      WitObjStack <WitSrpReqSpec> curReqList_;
a197 4
      int maxReqListLength_;
         //
         // Maximum length of curReqList_.

@


1.7
log
@[shared-resource pegging]
@
text
@d20 1
d31 1
a31 1
// Implemented in SRP.C.
@


1.6
log
@[shared-resource pegging]
@
text
@d117 5
d132 3
a134 1
      WitSrpReqSpec * availReqSpec ();
d136 2
a137 1
         // Returns an SrpReqSpec that has been designated as available for use.
@


1.5
log
@[shared-resource pegging]
@
text
@a126 8
      void getReqSpecFromVec (
            int              theIdx,
            WitSrpReqSrc * & theReqSrc,
            double &         incReqVol);
         //
         // Removes from myReqSpecVec_ the SrpReqSpec at theIdx, sets theReqSrc
         // and incReqVol to its contents, and reclaims it.

@


1.4
log
@[shared-resource pegging]
@
text
@d127 4
a130 1
      void getLastReqSpecInVec (WitSrpReqSrc * & theReqSrc, double & incReqVol);
d132 2
a133 3
         // Removes the last SrpReqSpec in myReqSpecVec_ and sets theReqSrc
         // and incReqVol to its contents.
         // myReqSpecVec_ must be non-empty.
@


1.3
log
@[shared-resource pegging]
@
text
@a19 1
#include <PairStack.h>
d189 1
a189 1
      WitSrpReqPairStack curReqList_;
d196 4
@


1.2
log
@[shared-resource pegging]
@
text
@d134 8
@


1.1
log
@[shared-resource pegging]
@
text
@d22 1
a22 2

#include <vector>
d118 1
a118 1
      void formActiveReqSpecs ();
d121 1
a121 1
         // in activeReqSpecs_.
d123 1
a123 1
      void formReqPairs ();
d125 1
a125 1
         // Converts the SrpReqSpecs in activeReqSpecs_ to ReqPairs,
d128 1
a128 1
      void popActiveReqSpecs (WitSrpReqSrc * & theReqSrc, double & incReqVol);
d130 1
a130 1
         // Removes the last SrpReqSpec in activeReqSpecs_ and sets theReqSrc
d132 1
a132 1
         // activeReqSpecs_ must be non-empty.
d136 1
a136 1
         // Prints activeReqSpecs_.
d141 1
a141 1
         // Prints the maximum size and capacity of activeReqSpecs_.
d168 1
a168 1
      std::vector <WitSrpReqSpec *> activeReqSpecs_;
d173 5
a177 1
      WitObjStack <WitSrpReqSpec> inactiveReqSpecs_;
d179 2
a180 1
         // The set of inactive SrpReqSpecs owned by this SrpReqMgr.
@

