head	1.4;
access;
symbols
	sce_4_05_20040511:1.1
	sce_4_00_20040201:1.1
	nextGenBranch:1.1.0.2
	nextGenRoot:1.1
	sce_3_30_20030627:1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.11.12.21.03.46;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2004.11.11.22.16.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.11.20.11.10;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.09.18.55.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Low-Pri Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RtSitePtrH
#define RtSitePtrH

//------------------------------------------------------------------------------
// Header file: "RtSitePtr.h"
//
// Contains the declaration and inline implementation of class RtSitePtr.
//------------------------------------------------------------------------------

#include <Part.h>
#include <BomEntry.h>

//------------------------------------------------------------------------------
// Class RtSitePtr
//
// Represents a pointer to an RtSite.
// The purpose of this class is to allow Part * and BomEntry * values to be
// passed to functions and be implicitly converted to the corresponding
// RtSite *. This is accomplished by implicitly constructing an RtSitePtr,
// which is then converted to the corresponding RtSite *.
//
// All implementation is inline.
//------------------------------------------------------------------------------

class WitRtSitePtr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitRtSitePtr (WitPart * thePart):
            myRtSite_ (thePart->myRtSite ())
         {
         }

      inline WitRtSitePtr (WitBomEntry * theBomEnt):
            myRtSite_ (theBomEnt->myRtSite ())
         {
         }

      inline WitRtSitePtr (const WitRtSitePtr & theRtSite):
            myRtSite_ (theRtSite.myRtSite_)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitRtSitePtr ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline operator WitRtSite * ()
         {
         return myRtSite_;
         }

      inline WitRtSite * operator -> ()
         {
         return myRtSite_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitRtSitePtr & operator = (const WitRtSitePtr &);
         //
         // See noCopyCtorAssign in macs.h.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
   };

#endif
@


1.3
log
@Low-Pri Prop-Rt.
@
text
@@


1.2
log
@Low-Pri Prop-Rt.
@
text
@d30 2
d52 2
a53 2
      inline WitRtSitePtr (const WitRtSitePtr & theRtSitePtr):
            myRtSite_ (theRtSitePtr.myRtSite_)
d69 6
a74 1
      inline WitRtSite * operator () ()
@


1.1
log
@Attempt to fix syntax errors from GCC compiler.
@
text
@d80 1
a80 1
         // See noCopyCtorAssign in mac.h.
@

