head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2006.01.11.23.30.14;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2006.01.11.23.18.34;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.11.20.24.23;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.11.19.52.06;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.11.19.31.16;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.10.21.24.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.16.51.53;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.09.23.42.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpBldrH
#define SrpBldrH

//------------------------------------------------------------------------------
// Header file: "SrpBldr.h"
//
// Contains the declaration of class SrpBldr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>
#include <Schedule.h>
#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class SrpBldr
// "Shared-Resource Pegging Builder"
//
// Responsible for building a shared-resource pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpBldr
//------------------------------------------------------------------------------

class WitSrpBldr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpBldr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpBldr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void buildPegging (
            WitPtrSched <WitDemand, WitOpnTripStack> & theExecVolTripSched);
         //
         // Builds the pegging and stores it in theExecVolTripSched.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void setUpBuild ();
         //
         // Sets up this SrpBldr for building the pegging.

      void placeShipmentReqs ();
         //
         // Places requirement from the shipment sequence.

      void explodeAllReqs ();
         //
         // Explodes all requirements.

      void fillReqs (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills the requirements on thePart in fillPer.
                                  
      void netAgainstSupply (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirement on thePart in fillPer by
         // netting against the supply.

      void explodeToProd (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirement on thePart in fillPer by
         // exploding to production.

      void explodeBomEntry (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        incExecVol,
            WitDemand *   theDemand,
            WitPeriod     shipPer);
         //
         // Explodes incExecVol units through theBomEnt in execPer, pegging to
         // theDemand in shipPer.

      void transferPegging (
            const WitPtrSched <WitDemand, WitOpnTripStack> &
               theExecVolTripSched);
         //
         // Transfers the pegging into theExecVolTripSched.

      void shutDownBuild ();
         //
         // Shut down this SrpBldr after building the pegging.

      noCopyCtorAssign (WitSrpBldr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitDemand, WitOpnTripStack> myExecVolTrips_;
         //
         // myExecVolTrips_.myElemAt (theDemand, shipPer) is the execVol pegging
         // of theDemand in shipPer, stored in reverse order.

      WitObjStack <WitSrpSeqEl> mySrpSeqEls_;
         //
         // The SrpSeqEls owned by this SrpBldr.
         // (One for each element in the shipment sequence.)

      WitSchedule <WitPart, double> myReqVol_;
         //
         // myReqVol_ (thePart)[thePer] is the requirement volume for thePart in
         // thePer.

      WitPtrSched <WitPart, WitDemand> reqDemand_;
         //
         // reqDemand_.myPtrAt (thePart, thePer) is the Demand to which
         // myReqVol_ (thePart)[thePer] is pegged.

      WitSchedule <WitPart, WitPeriod> reqShipPer_;
         //
         // reqShipPer_ (thePart)[thePer] is the shipment period to which
         // myReqVol_ (thePart)[thePer] is pegged.
   };


#endif
@


1.7
log
@[shared-resource pegging]
@
text
@@


1.6
log
@[shared-resource pegging]
@
text
@d20 1
d22 1
a22 1
#include <PtrSched.h>
d124 5
@


1.5
log
@[shared-resource pegging]
@
text
@d118 1
a118 1
      WitPtrSched <WitDemand, WitOpnTripStack> revExecVolTrips_;
@


1.4
log
@[shared-resource pegging]
@
text
@d103 2
a104 1
            WitPtrSched <WitDemand, WitOpnTripStack> & theExecVolTripSched);
@


1.3
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      WitSrpBldr (WitSrpCoord *);
d55 2
a56 1
      void buildPegging ();
d58 1
a58 1
         // Builds the pegging for mySrpCoord_.
a69 4
      void shutDownBuild ();
         //
         // Shut down this SrpBldr after building the pegging.

d102 9
d117 1
a117 1
      WitSrpCoord * const mySrpCoord_;
d119 2
a120 1
         // The SrpCoord that owns this SrpBldr.
@


1.2
log
@[shared-resource pegging]
@
text
@d20 2
d65 8
d85 9
a93 23
      void netAgainstSupply (
            WitPart * thePart,
            WitPeriod fillPer,
            double &  netReqVol);
         //
         // Fills up to netReqVol units of requirement on thePart in fillPer by
         // netting against the supply, setting netReqVol to the remainder.

      void explodeToProd (
            WitPart * thePart,
            WitPeriod fillPer,
            double &  netReqVol);
         //
         // Fills up to netReqVol units of requirement on thePart in fillPer by
         // exploding to production, setting netReqVol to the remainder.

      void pegExecVol (
         WitOperation * theOpn,
         WitPeriod      execPer,
         double         incExecVol);
      //
      // Pegs incExecVol units of the execution volume of theOpn in execPer to
      // the appropriate Demand and shipment period.
d98 3
a100 1
            double        incExecVol);
d102 2
a103 1
         // Explodes incExecVol units through theBomEnt in execPer.
d115 11
a125 1
      WitReqSched * myReqSched_;
d127 2
a128 1
         // The ReqSched for this SrpBldr.
@


1.1
log
@[shared-resource pegging]
@
text
@d83 23
@

