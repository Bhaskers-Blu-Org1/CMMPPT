head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2007.06.05.21.06.02;	author rjw;	state dead;
branches;
next	1.15;

1.15
date	2007.06.01.23.29.47;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.01.22.25.07;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.01.20.31.30;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.01.18.50.55;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.01.16.22.11;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.31.20.05.49;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.31.19.52.54;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.30.22.57.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.30.21.02.11;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.30.16.07.02;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.30.16.01.20;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.18.22.27.02;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.28.20.04.59;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.27.22.59.30;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.27.21.03.05;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PreAccessH
#define PreAccessH

//------------------------------------------------------------------------------
// Header file: "PreAccess.h"
//
// Contains the declaration of class PreAccess.
//------------------------------------------------------------------------------

#include <Part.h>

//------------------------------------------------------------------------------
// Class PreAccess
//
// "Preprocessing Access"
//
// Privately declares update access functions for data members of various
// classes that have declared this class to be a friend.
// The access functions are made available to the classes responsible for
// preprocessing by declaring these classes friends of this class.
// No instances of this class are to be created: the constructors and destructor
// are not implemented.
//
// All implementation is inline.
//------------------------------------------------------------------------------

class WitPreAccess
   {
      friend class WitPreprocessor;
      friend class WitBelowLister;

   private:

      //------------------------------------------------------------------------
      // Update access functions.
      //------------------------------------------------------------------------

      updateAccess (bool,                     expPerGaps,  WitPart)
      updateAccess (WitPtrTVec <WitBopEntry>, expBopEntry, WitPart)
      updateAccess (WitPtrVec <WitPart>,      belowList,   WitPart)

      //------------------------------------------------------------------------
      // Unimplemented functions
      //------------------------------------------------------------------------

       WitPreAccess ();
      ~WitPreAccess ();

      noCopyCtorAssign (WitPreAccess);
   };

#endif
@


1.15
log
@Stochastic Implosion
@
text
@@


1.14
log
@Stochastic Implosion
@
text
@d47 3
a49 6
      updateAccess (bool,                     expPerGaps,   WitPart)
      updateAccess (WitPtrTVec <WitBopEntry>, expBopEntry,  WitPart)
      updateAccess (WitPtrVec <WitPart>,      belowList,    WitPart)

      updateAccess (WitList <WitBopEntry>,    producingBopEntries,
                                                            WitPart)
@


1.13
log
@Stochastic Implosion
@
text
@a19 1
#include <BomEntry.h>
a48 1
      updateAccess (WitList <WitSubEntry>,    mySubEntries, WitBomEntry)
@


1.12
log
@Stochastic Implosion
@
text
@a20 1
#include <BopEntry.h>
d48 4
a51 5
      updateAccess (bool,                     expPerGaps,    WitPart)
      updateAccess (WitPtrTVec <WitBopEntry>, expBopEntry,   WitPart)
      updateAccess (WitList <WitSubEntry>,    mySubEntries,  WitBomEntry)
      updateAccess (WitTVec <WitPeriod>,      expExecPeriod, WitBopEntry)
      updateAccess (WitPtrVec <WitPart>,      belowList,     WitPart)
d54 1
a54 1
                                                             WitPart)
@


1.11
log
@Stochastic Implosion
@
text
@a52 1
      updateAccess (WitDblFlexVec,            effProdRate,   WitBopEntry)
@


1.10
log
@Stochastic Implosion
@
text
@d49 6
a54 7
      updateAccess (bool,                     expPerGaps,      WitPart)
      updateAccess (WitPtrTVec <WitBopEntry>, expBopEntry,     WitPart)
      updateAccess (WitDblFlexVec,            effConsRate,     WitConsEntry)
      updateAccess (WitList <WitSubEntry>,    mySubEntries,    WitBomEntry)
      updateAccess (WitTVec <WitPeriod>,      expExecPeriod,   WitBopEntry)
      updateAccess (WitDblFlexVec,            effProdRate,     WitBopEntry)
      updateAccess (WitPtrVec <WitPart>,      belowList,       WitPart)
d57 1
a57 1
                                                               WitPart)
@


1.9
log
@Stochastic Implosion
@
text
@a51 1
      updateAccess (WitFlexVec <bool>,        hasSubsInEffect, WitBomEntry)
@


1.8
log
@Stochastic Implosion
@
text
@a18 1
#include <Global.h>
a48 1
      updateAccess (bool,                     lotSizesExist,   WitGlobalComp)
@


1.7
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <Material.h>
a52 1
      updateAccess (WitFlexVec <bool>,        mandEC,          WitMaterial)
@


1.6
log
@Stochastic Implosion
@
text
@a53 2
      updateAccess (WitVector <int>,          firstEPIndex,    WitBillEntry)
      updateAccess (WitVector <WitPeriod>,    execPeriod,      WitBillEntry)
@


1.5
log
@Stochastic Implosion
@
text
@a41 1
      friend class WitOffsetProc;
a60 1
      updateAccess (WitTVec <WitPeriod>,      impactPeriod,    WitBillEntry)
@


1.4
log
@Stochastic Implosion
@
text
@a22 1
#include <CompMgr.h>
a41 1
      friend class WitNodeSorter;
a61 4
      updateAccess (WitList <WitPart>,        allParts,        WitCompMgr)
      updateAccess (WitList <WitOperation>,   allOperations,   WitCompMgr)
      updateAccess (int,                      sortedPartIndex, WitPart)
      updateAccess (WitTVec <bool>,           executable,      WitOperation)
@


1.3
log
@[disallowed backlog]
@
text
@d15 2
@


1.2
log
@[disallowed backlog]
@
text
@a52 2
      updateAccess (WitList <WitBopEntry>,    producingBopEntries,
                                                               WitPart)
d69 3
@


1.1
log
@[disallowed backlog]
@
text
@d17 4
d40 1
d42 2
d51 19
a69 2
      updateAccess (WitList <WitPart>,      allParts,      WitCompMgr)
      updateAccess (WitList <WitOperation>, allOperations, WitCompMgr)
@

