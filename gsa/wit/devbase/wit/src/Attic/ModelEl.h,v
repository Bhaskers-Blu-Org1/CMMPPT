head	1.22;
access;
symbols
	latest_sce_4_20_20060523:1.20.0.2
	sce_4_20_20060523:1.20
	latest_sce4_20_OSL:1.19.0.2
	sce_4_20_OSL:1.19
	sce_410_withVa:1.17
	sce_4_05_20040511:1.17
	sce_4_00_20040201:1.17
	nextGenBranch:1.16.0.6
	nextGenRoot:1.16
	sce_3_30_20030627:1.16
	EndRw-branch:1.16.0.4
	Root-of-EndRw:1.16
	rwToStl:1.16.0.2
	latest_sce_3_10_20010924:1.5.0.6
	sce_3_10_20010924:1.5
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2006.08.18.18.43.38;	author rjw;	state dead;
branches;
next	1.21;

1.21
date	2006.08.17.19.36.39;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.02.17.34.02;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.02.21.40.35;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.04.19.53.50;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.09.11.18.53.10;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.06.19.56.07;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.04.19.14.55;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.29.23.06.26;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.26.22.49.02;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.26.20.16.06;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.23.21.00.36;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.20.19.07.25;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.07.20.12.54;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.08.21.58.55;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.03.19.58.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.38;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.43;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.23;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.14;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches;
next	;


desc
@@


1.22
log
@App controlled opt implosion.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
//
//------------------------------------------------------------------------------

#ifndef ModelElH
#define ModelElH

//------------------------------------------------------------------------------
// Header file: "ModelEl.h"
//
// Contains the declaration of class ModelEl.
//------------------------------------------------------------------------------

#include <BoundPair.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// class ModelEl (Model Element)
// A variable or constraint in the optimization model.
//
// Class hierarchy:
//
//    ModelEl
//       OptVar
//          PeriodVar
//             ScrapVar
//             NonSubVar
//             SubVar
//             ShipVar
//             SlbvVar
//             BoundedVar
//                ExecVar
//                StockVar
//                CumShipVar
//       OptCon
//          PeriodCon
//             ResourceCon
//             SubCon
//             ShipCon
//             SlbCon
//------------------------------------------------------------------------------

class WitModelEl
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitModelEl (WitOptModel * theOptModel, int theIndex);
         //
         // myOptModel_ <-- theOptModel.
         // index_      <-- theIndex.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitModelEl ();

      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void compBounds () = 0;
         //
         // Computes the bounds for this ModelEl.

      virtual double solnValue () const = 0;
         //
         // Returns:
         //   primalValue for OptVars.
         //   dualValue () for OptCons.

      //-----------------------------------------------------------------------
      // Public static member functions.
      //-----------------------------------------------------------------------

      static void writeExtReal (
            FILE * outFile,
            const char * fFormat,
            const char * sFormat,
            double val);
         //
         // Writes val to outFile.
         // If val is finite, fFormat is used as the format.
         // If val is infinite, an appropriate string is printed using
         // sFormat as the format.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOptModel *,        myOptModel)
      accessFunc (const WitBoundPair &, bounds)
      accessFunc (int,                  index)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline WitBoundPair & bounds ()
            //
            // Non-const access.
         {
         return bounds_;
         }

      void setBoundsTo (double theLower, double theUpper);
         //
         // Sets bounds_ the the arguments.

      void allocMyCoeffs (int nCoeffsForModelEl);
         //
         // Allocates myCoeffVec_ to nCoeffsForModelEl.

      void clearMyCoeffs ();
         //
         // Clears myCoeffVec_.

      void store (WitCoeff * theCoeff);
         //
         // Stores theCoeff in myCoeffVec_.

      void printID () const;
         //
         // Print info identifying this ModelEl to the modelFile.

      void printBounds (const WitBoundPair & preScreenBounds) const;
         //
         // Prints bounds and preScreenBounds for this ModelEl to the
         // modelFile.

      void attachCoeffItr (WitCoeffItr & theItr) const;
         //
         // Attaches theItr to myCoeffVec_.

   protected:

      //-----------------------------------------------------------------------
      // Protected pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * kindText () const = 0;
         //
         // Returns a string identifying the high level derived class (e.g.,
         // OptVar), of which this ModelEl is an instance.

      virtual const char * classText () const = 0;
         //
         // Returns a string identifying the low level derived class (e.g.,
         // StockVar), of which this ModelEl is an instance.

      virtual void printSource () const = 0;
         //
         // Prints to myOptModel_->modelFile () text identifying the data from
         // which this ModelEl was generated.

      //-----------------------------------------------------------------------
      // Other protected member functions.
      //-----------------------------------------------------------------------

      WitOptImploder * myOptImploder () const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitModelEl);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOptModel * const myOptModel_;
         //
         // The OptModel to which this ModelEl belongs.

      WitPtrVec <WitCoeff> myCoeffVec_;
         //
         // The vector of Coeffs that belong to this ModelEl_.

      int nCoeffs_;
         //
         // The # of Coeffs that belong to this ModelEl_.

      WitBoundPair bounds_;
         //
         // Lower and upper bounds.

      const int index_;
         //
         // Index for arrays of OptVars or OptCons or OptObjs.
         // OptVars and OptCons are indexed separately; i.e., the first
         // OptVar has index 0 and the first OptCon has index 0.
   };

#endif
@


1.21
log
@Removed optimizing implosion with lot sizes.
@
text
@@


1.20
log
@Updated the copyright date on all source files.
@
text
@a35 2
//             IlsMultVar
//             MlsMultVar
a45 2
//             LotSizeCon
//             MlsCon
@


1.19
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.18
log
@[multi-thread]
@
text
@d20 1
a20 1
#include <Dense.h>
d104 3
a106 4
      accessFunc (WitOptModel *,                   myOptModel)
      accessFunc (const WitBoundPair &,            bounds)
      accessFunc (const WitDenseList <WitCoeff> &, myCoeffs)
      accessFunc (int,                             index)
d125 1
a125 1
         // Allocates myCoeffs_ to nCoeffsForModelEl.
d129 1
a129 1
         // Clears myCoeffs_.
d133 1
a133 1
         // Stores theCoeff in myCoeffs_.
d144 4
d191 5
a195 1
      WitDenseList <WitCoeff> myCoeffs_;
d197 1
a197 1
         // The Coeffs that belong to this ModelEl_.
@


1.17
log
@Continued implementation of PIP.
@
text
@d163 1
a163 1
         // Prints to OptModel::modelFile () text identifying the data from
@


1.16
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d52 1
a52 1
class WitModelEl: public WitUtil
@


1.15
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d37 1
d48 2
a49 1
//             IncLotSizeCon
@


1.14
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d26 1
a26 1
// ModelEl is at the top of the following class hierarchy:
d36 1
d47 1
d118 1
a118 1
      void bounds (double theLower, double theUpper);
@


1.13
log
@Continued implementation of opt implosion with lot sizes.
@
text
@a198 14
//------------------------------------------------------------------------------
// Macro implementClassText
//
// Implements the classText virtual member function for ModelElClass.
// The implemented function returns theClassText.
//------------------------------------------------------------------------------

#define implementClassText(ModelElClass, theClassText)                         \
                                                                               \
   const char * ModelElClass::classText () const                               \
      {                                                                        \
      return theClassText;                                                     \
      }                                                                        \

@


1.12
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d16 1
a16 8
// Contains the declaration of the following classes:
//
//    BoundPair
//    Coeff
//    OptObj
//    ModelEl
//       OptVar
//       OptCon
d19 1
a22 238
// class BoundPair
// Used for lower and upper bounds.
// Double precision is used because the fields might take on the values
// +- OSL_INFTY, which cannot be repesented precisely in single precision.
//------------------------------------------------------------------------------

class WitBoundPair: public WitUtil
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitBoundPair ();
         //
         // lower_ and upper_ will be set to 0.0.

      WitBoundPair (double lowerInit, double upperInit);
         //
         // lower_ will be set to lowerInit.
         // upper_ will be set to upperInit.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitBoundPair ();

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (double, lower)
      accessFunc (double, upper)

      //-----------------------------------------------------------------------
      // Non-const access functions.
      //-----------------------------------------------------------------------

      inline double & lower ()
         {
         return lower_;
         }

      inline double & upper ()
         {
         return upper_;
         }

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void copy (const WitBoundPair & theBoundPair);
         //
         // Copies memberwise.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitBoundPair);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      double lower_;
      double upper_;
   };

//------------------------------------------------------------------------------
// class Coeff
// The coefficient of a variable in a constraint or objective in the Opt model,
// i.e., a matrix element.
// Thus if theCoeff is an instance of this class, it follows that the
// coefficient of theCoeff->myVar () in theCoeff->myCon () is
// theCoeff->myValue ().
//------------------------------------------------------------------------------

class WitCoeff: public WitUtil
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitCoeff (WitOptCon * theCon, WitOptVar * theVar, float theValue);
         //
         // myCon_   <-- theCon.
         // myVar_   <-- theVar.
         // myValue_ <-- theValue.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      ~WitCoeff ();

      //-----------------------------------------------------------------------
      // Data Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOptCon *, myCon)
      accessFunc (WitOptVar *, myVar)
      accessFunc (float,       myValue)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline void increment (const float & delta)
         {
         myValue_ += delta;
         }

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitCoeff);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOptCon * const myCon_;
         //
         // The OptCon in which this Coeff appears.

      WitOptVar * const myVar_;
         //
         // The OptVar of which this Coeff is a coefficient.

      float myValue_;
         //
         // The coefficient value.
   };

//------------------------------------------------------------------------------
// class OptObj
// An objective for the optimization model.
//
// OptObj is at the top of the following class hierarchy:
//
//    OptObj
//       BoundsObj
//       PrimaryObj
//       Obj1Obj
//       RevObj
//       InvObj
//       ServObj
//       SubObj
//       Obj2Obj
//------------------------------------------------------------------------------

class WitOptObj: public WitUtil
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptObj (const char * theText, WitOptModel * theOptModel);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptObj ();

      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual float coeffVal (const WitOptVar * theVar) const = 0;
         //
         // Computes and returns the value of the Coeff of theVar in this
         // OptObj.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (const char *, myText)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void print () const;
         //
         // Prints this OptObj to the modelFile.

      double myValue () const;
         //
         // Computes and returns the value of this OptObj given the current
         // primal solution.

   protected:

      //-----------------------------------------------------------------------
      // Protected access functions.
      //-----------------------------------------------------------------------

      inline WitOptImploder * myOptImploder () const;
         //
         // Implemented in OptModel.h.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitOptObj);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      const char * const myText_;
         //
         // A String identifying this OptObj.

      WitOptModel * const myOptModel_;
         //
         // The OptModel to which this OptObj belongs.
   };

//------------------------------------------------------------------------------
d166 1
a166 5
      inline WitOptImploder * myOptImploder () const;
         //
         // Returns the OptImploder to which this ModelEl belongs.
         // Note: This inline function is implemented in ImpOM.h, because
         // its body refers to ImpOM member data.
d200 4
a203 2
// class OptVar
// A variable in optimization model.
d206 6
a211 237
class WitOptVar: public WitModelEl
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptVar (WitOptModel * theOptModel);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void compBounds ();
         //
         // Computes the bounds for this OptVar.
         // The base class implementation computes the bounds as [0, infinity).

      virtual double solnValue () const;
         //
         // Returns primalValue ().

      //-----------------------------------------------------------------------
      // Other public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double indepInitValue () const;
         //
         // Returns an initial primal value for this OptVar, determined
         // independently of other OptVars.
         // The base class implementation returns 0.0, which should be used for
         // OptVars whose initial value is dependent on other OptVars and
         // will be computed in OptModel::initDepVars.

      virtual float boundsCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // BoundsObj.
         // The base class implementation returns 0.0.

      virtual float primaryCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // PrimaryObj.
         // The base class implementation returns 0.0.

      virtual float revCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // RevObj.
         // The base class implementation returns 0.0.

      virtual float invCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // InvObj.
         // The base class implementation returns 0.0.

      virtual float servCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // ServObj.
         // The base class implementation returns 0.0.

      virtual float subCoeffVal () const;
         //
         // Computes and returns the value of the Coeff of this OptVar in the
         // SubObj.
         // The base class implementation returns 0.0.

      virtual WitBoolean isAnIntVar () const;
         //
         // Returns TRUE, iff this OptVar is an integer variable.
         // The base class implementation returns FALSE.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (double, primalValue)
      accessFunc (float,  mainObjCoeffVal)

      //-----------------------------------------------------------------------
      // Non-const access functions.
      //-----------------------------------------------------------------------

      double & primalValue ()
         {
         return primalValue_;
         }

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void incCoeff (float delta);
         //
         // Calls myOptModel->incCoeff (...).

      void compMainObjCoeffVal ();
         //
         // Computes and stores the value of mainObjCoeffVal ().

      void print () const;
         //
         // Prints this OptVar to the modelFile.

      double reducedReward () const;
         //
         // Computes and returns the reduced reward value for this OptVar for
         // the current dual solution.

   protected:

      //-----------------------------------------------------------------------
      // Overriding protected virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * kindText () const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitOptVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      double primalValue_;
         //
         // Primal solution value.

      float mainObjCoeffVal_;
         //
         // The coefficient value of this OptVar in the main objective.
   };

//------------------------------------------------------------------------------
// class OptCon
// A constraint in the optimization model.
//------------------------------------------------------------------------------

class WitOptCon: public WitModelEl
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptCon (WitOptModel * theOptModel);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptCon ();

      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateCoeffs () = 0;
         //
         // Generates the Coeffs of this OptCon.

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double solnValue () const;
         //
         // Returns dualValue ().

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (double, dualValue)

      //-----------------------------------------------------------------------
      // Non-const access functions.
      //-----------------------------------------------------------------------

      inline double & dualValue ()
         {
         return dualValue_;
         }

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      WitBoolean screenable () const;
         //
         // Returns TRUE, iff this OptCon can be screened.

      void print () const;
         //
         // Prints this OptCon to the modelFile.

   protected:

      //-----------------------------------------------------------------------
      // Overriding protected virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * kindText () const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitOptCon);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      double dualValue_;
         //
         // Dual solution value.
         // Valid only if needDual is TRUE.
   };
@


1.11
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d20 1
a20 1
//    MpObj
d22 2
a23 2
//       MpVar
//       MpCon
d105 1
a105 1
// The coefficient of a variable in a constraint or objective in the MP model,
d120 1
a120 1
      WitCoeff (WitMpCon * theCon, WitMpVar * theVar, float theValue);
d136 3
a138 3
      accessFunc (WitMpCon *, myCon)
      accessFunc (WitMpVar *, myVar)
      accessFunc (float,      myValue)
d161 1
a161 1
      WitMpCon * const myCon_;
d163 1
a163 1
         // The MpCon in which this Coeff appears.
d165 1
a165 1
      WitMpVar * const myVar_;
d167 1
a167 1
         // The MpVar of which this Coeff is a coefficient.
d175 2
a176 2
// class MpObj
// An objective for the MP model.
d178 1
a178 1
// MpObj is at the top of the following class hierarchy:
d180 1
a180 1
//    MpObj
d191 1
a191 1
class WitMpObj: public WitUtil
d199 1
a199 1
      WitMpObj (const char * theText, WitMpModel * theMpModel);
d205 1
a205 1
      virtual ~WitMpObj ();
d211 1
a211 1
      virtual float coeffVal (const WitMpVar * theVar) const = 0;
d214 1
a214 1
         // MpObj.
d228 1
a228 1
         // Prints this MpObj to the modelFile.
d232 1
a232 1
         // Computes and returns the value of this MpObj given the current
d243 1
a243 1
         // Implemented in MpModel.h.
d251 1
a251 1
      noCopyCtorAssign (WitMpObj);
d259 1
a259 1
         // A String identifying this MpObj.
d261 1
a261 1
      WitMpModel * const myMpModel_;
d263 1
a263 1
         // The MpModel to which this MpObj belongs.
d268 1
a268 1
// A variable or constraint in the MP model.
d273 1
a273 1
//       MpVar
d284 1
a284 1
//       MpCon
d300 1
a300 1
      WitModelEl (WitMpModel * theMpModel, int theIndex);
d302 2
a303 2
         // myMpModel_ <-- theMpModel.
         // index_     <-- theIndex.
d322 2
a323 2
         //   primalValue for MpVars.
         //   dualValue () for MpCons.
d344 1
a344 1
      accessFunc (WitMpModel *,                    myMpModel)
d394 1
a394 1
         // MpVar), of which this ModelEl is an instance.
d403 1
a403 1
         // Prints to MpModel::modelFile () text identifying the data from
d413 2
a414 2
         // Note: This inline function is implemented in ImpMp.h, because
         // its body refers to ImpMp member data.
d428 1
a428 1
      WitMpModel * const myMpModel_;
d430 1
a430 1
         // The MpModel to which this ModelEl belongs.
d442 3
a444 3
         // Index for arrays of MpVars or MpCons or MpObjs.
         // MpVars and MpCons are indexed separately; i.e., the first
         // MpVar has index 0 and the first MpCon has index 0.
d448 2
a449 2
// class MpVar
// A variable in the MP model.
d452 1
a452 1
class WitMpVar: public WitModelEl
d460 1
a460 1
      WitMpVar (WitMpModel * theMpModel);
d466 1
a466 1
      virtual ~WitMpVar ();
d474 1
a474 1
         // Computes the bounds for this MpVar.
d487 2
a488 2
         // Returns an initial primal value for this MpVar, determined
         // independently of other MpVars.
d490 2
a491 2
         // MpVars whose initial value is dependent on other MpVars and
         // will be computed in MpModel::initDepVars.
d495 1
a495 1
         // Computes and returns the value of the Coeff of this MpVar in the
d501 1
a501 1
         // Computes and returns the value of the Coeff of this MpVar in the
d507 1
a507 1
         // Computes and returns the value of the Coeff of this MpVar in the
d513 1
a513 1
         // Computes and returns the value of the Coeff of this MpVar in the
d519 1
a519 1
         // Computes and returns the value of the Coeff of this MpVar in the
d525 1
a525 1
         // Computes and returns the value of the Coeff of this MpVar in the
d531 1
a531 1
         // Returns TRUE, iff this MpVar is an integer variable.
d556 1
a556 1
         // Calls myMpModel->incCoeff (...).
d564 1
a564 1
         // Prints this MpVar to the modelFile.
d568 1
a568 1
         // Computes and returns the reduced reward value for this MpVar for
d585 1
a585 1
      noCopyCtorAssign (WitMpVar);
d597 1
a597 1
         // The coefficient value of this MpVar in the main objective.
d601 2
a602 2
// class MpCon
// A constraint in the MP model.
d605 1
a605 1
class WitMpCon: public WitModelEl
d613 1
a613 1
      WitMpCon (WitMpModel * theMpModel);
d619 1
a619 1
      virtual ~WitMpCon ();
d627 1
a627 1
         // Generates the Coeffs of this MpCon.
d658 1
a658 1
         // Returns TRUE, iff this MpCon can be screened.
d662 1
a662 1
         // Prints this MpCon to the modelFile.
d678 1
a678 1
      noCopyCtorAssign (WitMpCon);
@


1.10
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d529 5
@


1.9
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d20 1
a20 1
//    LpObj
d22 2
a23 2
//       LpVar
//       LpCon
d105 1
a105 1
// The coefficient of a variable in a constraint or objective in the LP model,
d120 1
a120 1
      WitCoeff (WitLpCon * theCon, WitLpVar * theVar, float theValue);
d136 2
a137 2
      accessFunc (WitLpCon *, myCon)
      accessFunc (WitLpVar *, myVar)
d161 1
a161 1
      WitLpCon * const myCon_;
d163 1
a163 1
         // The LpCon in which this Coeff appears.
d165 1
a165 1
      WitLpVar * const myVar_;
d167 1
a167 1
         // The LpVar of which this Coeff is a coefficient.
d175 2
a176 2
// class LpObj
// An objective for the LP model.
d178 1
a178 1
// LpObj is at the top of the following class hierarchy:
d180 1
a180 1
//    LpObj
d191 1
a191 1
class WitLpObj: public WitUtil
d199 1
a199 1
      WitLpObj (const char * theText, WitLpModel * theLpModel);
d205 1
a205 1
      virtual ~WitLpObj ();
d211 1
a211 1
      virtual float coeffVal (const WitLpVar * theVar) const = 0;
d214 1
a214 1
         // LpObj.
d228 1
a228 1
         // Prints this LpObj to the modelFile.
d232 1
a232 1
         // Computes and returns the value of this LpObj given the current
d243 1
a243 1
         // Implemented in LpModel.h.
d251 1
a251 1
      noCopyCtorAssign (WitLpObj);
d259 1
a259 1
         // A String identifying this LpObj.
d261 1
a261 1
      WitLpModel * const myLpModel_;
d263 1
a263 1
         // The LpModel to which this LpObj belongs.
d268 1
a268 1
// A variable or constraint in the LP model.
d273 1
a273 1
//       LpVar
d284 1
a284 1
//       LpCon
d300 1
a300 1
      WitModelEl (WitLpModel * theLpModel, int theIndex);
d302 1
a302 1
         // myLpModel_ <-- theLpModel.
d322 2
a323 2
         //   primalValue for LpVars.
         //   dualValue () for LpCons.
d344 1
a344 1
      accessFunc (WitLpModel *,                    myLpModel)
d394 1
a394 1
         // LpVar), of which this ModelEl is an instance.
d403 1
a403 1
         // Prints to LpModel::modelFile () text identifying the data from
d413 2
a414 2
         // Note: This inline function is implemented in ImpLp.h, because
         // its body refers to ImpLp member data.
d428 1
a428 1
      WitLpModel * const myLpModel_;
d430 1
a430 1
         // The LpModel to which this ModelEl belongs.
d442 3
a444 3
         // Index for arrays of LpVars or LpCons or LpObjs.
         // LpVars, LpCons, and LpObs indexed separately; i.e., the first
         // LpVar has index 0 and the first LpCon has index 0.
d448 2
a449 3
// class LpVar
// A variable in the LP model.
// This is an ABC.
d452 1
a452 1
class WitLpVar: public WitModelEl
d460 1
a460 1
      WitLpVar (WitLpModel * theLpModel);
d466 1
a466 1
      virtual ~WitLpVar ();
d474 1
a474 1
         // Computes the bounds for this LpVar.
d487 2
a488 2
         // Returns an initial primal value for this LpVar, determined
         // independently of other LpVars.
d490 2
a491 2
         // LpVars whose initial value is dependent on other LpVars and
         // will be computed in LpModel::initDepVars.
d495 1
a495 1
         // Computes and returns the value of the Coeff of this LpVar in the
d501 1
a501 1
         // Computes and returns the value of the Coeff of this LpVar in the
d507 1
a507 1
         // Computes and returns the value of the Coeff of this LpVar in the
d513 1
a513 1
         // Computes and returns the value of the Coeff of this LpVar in the
d519 1
a519 1
         // Computes and returns the value of the Coeff of this LpVar in the
d525 1
a525 1
         // Computes and returns the value of the Coeff of this LpVar in the
d551 1
a551 1
         // Calls myLpModel->incCoeff (...).
d559 1
a559 1
         // Prints this LpVar to the modelFile.
d563 1
a563 1
         // Computes and returns the reduced reward value for this LpVar for
d580 1
a580 1
      noCopyCtorAssign (WitLpVar);
d592 1
a592 1
         // The coefficient value of this LpVar in the main objective.
d596 2
a597 3
// class LpCon
// A constraint in the LP model.
// This is an ABC.
d600 1
a600 1
class WitLpCon: public WitModelEl
d608 1
a608 1
      WitLpCon (WitLpModel * theLpModel);
d614 1
a614 1
      virtual ~WitLpCon ();
d622 1
a622 1
         // Generates the Coeffs of this LpCon.
d653 1
a653 1
         // Returns TRUE, iff this LpCon can be screened.
d657 1
a657 1
         // Prints this LpCon to the modelFile.
d673 1
a673 1
      noCopyCtorAssign (WitLpCon);
@


1.8
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d346 1
a347 1
      accessFunc (const WitDenseList <WitCoeff> &, myCoeffs)
a384 5
      inline int osl3Index ()
         {
         return index_ - 1;
         }

a442 1
         // For compatability with OSL, the indices start at 1.
d444 1
a444 1
         // LpVar has index 1 and the first LpCon has index 1.
@


1.7
log
@Preliminary work on single source.
@
text
@d385 5
d449 1
a449 1
         // LpVars, LpCons, and LpObs indexed seperately; i.e., the first
@


1.6
log
@More preliminary work on single source.
@
text
@d83 1
a83 1
      void operator = (const WitBoundPair & theBoundPair);
d85 1
a85 1
         // Assigns memberwise.
d93 1
a93 1
      noCopyCtor (WitBoundPair);
@


1.5
log
@Some minor changes.
@
text
@d347 1
a347 1
      accessFunc (const WitDenseList (WitCoeff) &, myCoeffs)
d432 1
a432 1
      WitDenseList (WitCoeff) myCoeffs_;
@


1.4
log
@Refactoring for selection splitting.
@
text
@d26 1
a26 1
#include <Vector.h>
d96 1
a96 1
      // Public member data.
d152 6
a171 6

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitCoeff);
d579 6
a594 6

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitLpVar);
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d83 1
a83 1
      WitBoundPair & operator = (const WitBoundPair & theBoundPair);
d93 1
a93 3
      WitBoundPair (const WitBoundPair &);
         //
         // Not implemented; forbids coping.
d171 1
a171 3
      copyCtorAndAssignment (WitCoeff);
         //
         // Prevents unintentional copying and assignment.
d251 1
a251 3
      copyCtorAndAssignment (WitLpObj);
         //
         // Prevents unintentional copying and assignment.
d422 1
a422 3
      copyCtorAndAssignment (WitModelEl);
         //
         // Prevents unintentional copying and assignment.
d594 1
a594 3
      copyCtorAndAssignment (WitLpVar);
         //
         // Prevents unintentional copying and assignment.
d676 1
a676 3
      copyCtorAndAssignment (WitLpCon);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d35 1
a35 1
class WitBoundPair
d114 1
a114 1
class WitCoeff
d195 1
a195 1
class WitLpObj
d298 1
a298 1
class WitModelEl
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
