head	1.8;
access;
symbols
	EndRw-branch:1.7.0.6
	Root-of-EndRw:1.7
	rwToStl:1.7.0.4
	latest_sce_3_10_20010924:1.7.0.2
	sce_3_10_20010924:1.7;
locks; strict;
comment	@ * @;


1.8
date	2003.03.03.23.27.01;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2001.06.28.17.35.19;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.21.18.24.32;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.21.15.40.05;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.20.20.07.05;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.18.18.42.22;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.15.20.53.36;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.14.17.41.54;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.7
log
@Replaced non-template based production multi-route with template based
production multi-route.
@
text
@@


1.6
log
@More templates.
@
text
@a0 160
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PmrPartH
#define PmrPartH

//------------------------------------------------------------------------------
// Header file: "PmrPart.h"
//
// Contains the declaration of class PmrPart.
//------------------------------------------------------------------------------

#include <PmrSelPt.h>
#include <PtrTVec.h>
#include <PtrVec.h>
#include <ObjStack.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PmrPart
//
// A selection component corresponding to a Part.
//
// Class Hierarchy:
//
// ProbAssoc
//    PmrPart
//
// Implemented in ProdMR.C.
//------------------------------------------------------------------------------

class WitPmrPart: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrPart (WitPart * thePart, WitPmrMgr * thePmrMgr);
         //
         // myPart_   <-- thePart.
         // myPmrMgr_ <-- thePmrMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPmrPart ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitPmrSelPt * myPmrSelPtWithAlt (WitPeriod expPer)
            //
            // Returns the PmrSelPt for this PmrPart in expPer, if it has an
            // alternative to the current selection; otherwise NULL.
            //
         {
         return
            multiChoice_?
               multiChoicePmrSelPtWithAlt (expPer):
               NULL;
         }

      void printHasAlt ();
         //
         // Prints those PmrSelPts for which hasAlt () is TRUE.

      void findExpBopEnts (WitPeriod expPer, WitBopEntStack & theBopEnts);
         //
         // Sets theBopEnts to be the set of BOP entries currently
         // under consideration for explosion from myPart_ in expPer.

      WitPmrCand * myPmrCandFor (WitBopEntry * theBopEnt);
         //
         // Returns the PmrCand owned by this PmrPart that represents theBopEnt.
         // Issues a fatal error, if none exists.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPmrMgr *,                      myPmrMgr)
      accessFunc (WitPart *,                        myPart)
      accessFunc (WitBoolean,                       multiChoice)
      accessFunc (const WitObjStack <WitPmrCand> &, myPmrCands)
      accessFunc (const WitPtrTVec <WitPmrSelPt> &, myPmrSelPt)

      WitBopEntry * selBopEntry (WitPeriod expPer);
         //
         // Returns the BopEntry selected to be used when exploding at myComp
         // in expPer.
         // Invalid, if myPart_ is not explodeable in expPer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildPmrSelPts ();
         //
         // Creates the PmrSelPts for this PmrPart.
         // To be called by the derived class ctors after finding the
         // candidates.

      WitPmrSelPt * multiChoicePmrSelPtWithAlt (WitPeriod expPer);
            //
            // Returns the PmrSelPt for this PmrPart in expPer, if it has an
            // alternative to the current selection; otherwise NULL.
            // multiChoice_ must be TRUE.

      void buildPmrCands ();
         //
         // Constructs the PmrCands owned by this PmrPart.

      void addPrereq (WitObjStack <WitPart> & prereqs, WitBopEntry * theBopEnt);
         //
         // Puts the prereq Part into prereqs.

      noCopyCtorAssign (WitPmrPart);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPmrMgr * const myPmrMgr_;
         //
         // The PmrMgr that owns this PmrPart.

      WitPart * const myPart_;
         //
         // The Part at which the selection is to be made.

      WitObjStack <WitPmrCand> myPmrCands_;
         //
         // The ordered list of PmrCands owned by this PmrPart.
         // These PmrCands represent the BopEntries that can be selected for
         // explosion from myPart_.

      WitBoolean multiChoice_;
         //
         // TRUE, iff there are at least two directions in which the routing
         // could potentially proceed downward from this PmrPart.

      WitPtrTVec <WitPmrSelPt> myPmrSelPt_;
         //
         // myPmrSelPt_[expPer] is the PmrSelPt for this PmrPart in expPer.
         // Allocated only if multiChoice_ is TRUE.
   };

#endif
@


1.5
log
@Some template stuff.
@
text
@d95 1
a95 1
      accessFunc (const WitPtrTVec (WitPmrSelPt) &, myPmrSelPt)
d154 1
a154 1
      WitPtrTVec (WitPmrSelPt) myPmrSelPt_;
@


1.4
log
@Converted several generic classes into class templates.
@
text
@d22 1
@


1.3
log
@Replaced use of CandIndex with CmrCand in Consumption Multi-Route subsystem.
@
text
@d93 1
a93 1
      accessFunc (const WitObjStack (WitPmrCand) &, myPmrCands)
d124 1
a124 1
      void addPrereq (WitObjStack (WitPart) & prereqs, WitBopEntry * theBopEnt);
d142 1
a142 1
      WitObjStack (WitPmrCand) myPmrCands_;
@


1.2
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@d81 1
a81 1
      WitPmrCand * myPmrCand (WitBopEntry * theBopEnt);
@


1.1
log
@Created class SelCand and classes derived from it.
@
text
@a75 14
      WitBoolean candIsDefault (WitCandIndex theIdx, WitPeriod expPer);
         //
         // Returns TRUE, iff theIdx is the candidate index of the default
         // selection for this PmrPart in expPer.

      WitCandIndex nCandidates ();
         //
         // Returns the # of selection candidates for this PmrPart.

      WitBoolean candIsEligible (WitCandIndex theIdx, WitPeriod expPer);
         //
         // Returns TRUE, iff candidate #theIdx for this PmrPart is eligible to
         // be selected expPer.

d81 1
a81 1
      void select (WitBopEntry * theBopEnt, WitPeriod expPer);
d83 2
a84 1
         // Changes the selection in expPer to theBopEnt.
d93 1
a93 1
      accessFunc (const WitPtrVec (WitBopEntry) &,  candBopEnt)
d120 1
a120 1
      void initCandidate ();
d122 1
a122 1
         // Sets up the list of candidates in the derived instance.
d142 1
a142 1
      WitPtrVec (WitBopEntry) candBopEnt_;
d144 3
a146 2
         // candBopEnt_[theIdx] is the BopEntry eligible to be selected when
         // exploding at myPart_, corresponding to theIdx.
@

