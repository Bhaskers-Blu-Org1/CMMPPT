head	1.23;
access;
symbols;
locks; strict;
comment	@ * @;


1.23
date	2008.02.07.18.41.40;	author rjw;	state dead;
branches;
next	1.22;

1.22
date	2008.01.30.22.25.42;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.01.30.21.07.16;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.01.29.23.51.49;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2008.01.29.19.50.01;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2008.01.29.00.29.01;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.01.28.23.53.37;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2008.01.25.00.19.22;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2008.01.23.21.13.47;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2008.01.18.22.40.59;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2008.01.15.23.37.25;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2008.01.14.22.59.01;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.14.22.45.22;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2008.01.14.21.44.02;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2008.01.14.19.21.15;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.12.00.20.45;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.01.11.22.51.59;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.01.11.22.38.36;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2008.01.11.21.47.41;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.09.20.28.22;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.09.19.35.48;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.01.08.20.44.22;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.08.19.57.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "StageMgr.C"
//
// Contains the implementation of the following classes:
//
//    StageMgr
//    ObjStageMgr
//    PerStageMgr
//------------------------------------------------------------------------------

#include <ObjStageMgr.h>
#include <PerStageMgr.h>
#include <StochImpMgr.h>
#include <StochModeMgr.h>
#include <DataWrit.h>
#include <Global.h>
#include <Material.h>
#include <Demand.h>
#include <Opn.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <BoundSet.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class StageMgr.
//------------------------------------------------------------------------------

WitStageMgr::~WitStageMgr ()
   {
   }

//------------------------------------------------------------------------------

WitStageMgr * WitStageMgr::newStageMgr (WitProblem * theProblem)
   {
   if (theProblem->myStochImpMgr ()->stageByObject ())
      return new WitObjStageMgr (theProblem);
   else
      return new WitPerStageMgr (theProblem);
   }

//------------------------------------------------------------------------------

WitStageMgr::WitStageMgr (WitProblem * theProblem):

      WitProbAssoc (theProblem)
   {
   }

//------------------------------------------------------------------------------
// Implementation of class ObjStageMgr.
//------------------------------------------------------------------------------

WitObjStageMgr::WitObjStageMgr (WitProblem * theProblem):

      WitStageMgr  (theProblem),
      objectStage_ (myProblem (), defObjectStage ())
   {
   stronglyAssert (myStochImpMgr ()->stageByObject ());
   }

//------------------------------------------------------------------------------

WitObjStageMgr::~WitObjStageMgr ()
   {
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::setObjectStage (WitNode * theNode, int theValue)
   {
   witAssert (theValue >= 0);
   witAssert (theValue <= 1);

   myProblem ()->prepSetStochModeAttr ("objectStage");

   objectStage_ (theNode) = theValue;
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::setPeriodStage (const int * theValue)
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

int WitObjStageMgr::objectStage (WitNode * theNode)
   {
   return objectStage_ (theNode);
   }

//------------------------------------------------------------------------------

int WitObjStageMgr::periodStage (WitPeriod thePer)
   {
   stronglyAssert (false);

   return -1;
   }

//------------------------------------------------------------------------------

int WitObjStageMgr::stageOf (WitNode * theNode, WitPeriod)
   {
   return objectStage_ (theNode);
   }

//------------------------------------------------------------------------------

bool WitObjStageMgr::stageIncludesNode (int theStage, WitNode * theNode)
   {
   return (theStage == objectStage_ (theNode));
   }

//------------------------------------------------------------------------------

bool WitObjStageMgr::stageIncludesPeriod (int, WitPeriod)
   {
   return true;
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::writeData ()
   {
   WitPart *      thePart;
   WitOperation * theOpn;

   forEachPart (thePart, myProblem ())
      writeObjectStage (thePart, "part");

   forEachOperation (theOpn, myProblem ())
      writeObjectStage (theOpn, "operation");
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::displayData ()
   {
   WitPart *      thePart;
   WitOperation * theOpn;

   myMsgFac () ("stageHeadingDdMsg");

   forEachPart (thePart, myProblem ())
      {
      myMsgFac () ("partIdDdMsg",    thePart->partName ());
      myMsgFac () ("stochNodeDdMsg", objectStage_ (thePart));
      }

   forEachOperation (theOpn, myProblem ())
      {
      myMsgFac () ("opnIdDdMsg",     theOpn->operationName ());
      myMsgFac () ("stochNodeDdMsg", objectStage_ (theOpn));
      }
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::copyAttrsFrom (WitStageMgr * origStageMgr)
   {
   WitCompMgr *   origCompMgr;
   WitPart *      thePart;
   WitPart *      origPart;
   WitOperation * theOpn;
   WitOperation * origOpn;
   
   origCompMgr = origStageMgr->myCompMgr ();

   forEachPart (thePart, myProblem ())
      {
      origPart = origCompMgr->findPart (thePart->partName ().myCstring ());

      objectStage_ (thePart) = origStageMgr->objectStage (origPart);
      }

   forEachOperation (theOpn, myProblem ())
      {
      origOpn =
         origCompMgr->findOperation (theOpn->operationName ().myCstring ());

      objectStage_ (theOpn) = origStageMgr->objectStage (origOpn);
      }
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::validateData ()
   {
   validateBomEnts ();
   validateSubs    ();
   validateBopEnts ();
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::issueAttMisMatchHeadMsg ()
   {
   myMsgFac () ("stage0ObjAttMisMatchSmsg");
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::writeObjectStage (
      WitNode *    theNode,
      const char * nodeTypeName)
   {
   if (objectStage_ (theNode) == defObjectStage ())
      return;

   myDataWriter ()->writeFirstKeyWord ("set");
   myDataWriter ()->writeKeyWord      (nodeTypeName);
   myDataWriter ()->writeStringValue  (theNode->nodeName ());

   myDataWriter ()->writeInt (
        "objectStage",
         objectStage_ (theNode),
      defObjectStage ());

   myDataWriter ()->writeEndCommand ();
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::validateBomEnts ()
   {
   WitBomEntry * theBomEnt;
   int           stgIdxForOpn;
   int           stgIdxForPart;

   forEachBomEntry (theBomEnt, myProblem ())
      {
      stgIdxForOpn  = objectStage_ (theBomEnt->myOperation ());
      stgIdxForPart = objectStage_ (theBomEnt->myPart      ());

      if (stgIdxForOpn == 1)
         if (stgIdxForPart == 0)
            myMsgFac () ("bomEntStageConflictSmsg",
               theBomEnt->myOperationName (),
               theBomEnt->localIndex (),
               theBomEnt->myPartName ());
      }
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::validateSubs ()
   {
   WitSubEntry * theSub;
   int           stgIdxForOpn;
   int           stgIdxForPart;

   forEachSubEntry (theSub, myProblem ())
      {
      stgIdxForOpn  = objectStage_ (theSub->myOperation ());
      stgIdxForPart = objectStage_ (theSub->myPart      ());

      if (stgIdxForOpn == 1)
         if (stgIdxForPart == 0)
            myMsgFac () ("subStageConflictSmsg",
               theSub->myOperationName (),
               theSub->myBomEntIndex (),
               theSub->localIndex (),
               theSub->myPartName ());
      }
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::validateBopEnts ()
   {
   WitBopEntry * theBopEnt;
   int           stgIdxForOpn;
   int           stgIdxForPart;

   forEachBopEntry (theBopEnt, myProblem ())
      {
      stgIdxForOpn  = objectStage_ (theBopEnt->myOperation ());
      stgIdxForPart = objectStage_ (theBopEnt->myPart      ());

      if (stgIdxForOpn == 1)
         if (stgIdxForPart == 0)
            myMsgFac () ("bopEntStageConflictSmsg",
               theBopEnt->myOperationName (),
               theBopEnt->localIndex (),
               theBopEnt->myPartName ());
      }
   }

//------------------------------------------------------------------------------
// Implementation of class PerStageMgr.
//------------------------------------------------------------------------------

WitPerStageMgr::WitPerStageMgr (WitProblem * theProblem):

      WitStageMgr  (theProblem),
      periodStage_ (theProblem, defPeriodStage ())
   {
   stronglyAssert (not myStochImpMgr ()->stageByObject ());

   validateCoreData ();
   }

//------------------------------------------------------------------------------

WitPerStageMgr::~WitPerStageMgr ()
   {
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::setObjectStage (WitNode *, int)
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::setPeriodStage (const int * theValue)
   {
   WitPeriod thePer;

   witAssert (theValue != NULL);

   if (DEBUG_MODE)
      forEachPeriod (thePer, myProblem ())
         {
         witAssert (theValue[thePer] >= 0);
         witAssert (theValue[thePer] <= 1);

         if (thePer > 0)
            if (theValue[thePer] == 0)
               witAssert (theValue[thePer - 1] == 0);
         }

   myProblem ()->prepSetStochModeAttr ("periodStage");

   periodStage_ = theValue;
   }

//------------------------------------------------------------------------------

int WitPerStageMgr::objectStage (WitNode *)
   {
   stronglyAssert (false);

   return -1;
   }

//------------------------------------------------------------------------------

int WitPerStageMgr::periodStage (WitPeriod thePer)
   {
   return periodStage_[thePer];
   }

//------------------------------------------------------------------------------

int WitPerStageMgr::stageOf (WitNode *, WitPeriod thePer)
   {
   return periodStage_[thePer];
   }

//------------------------------------------------------------------------------

bool WitPerStageMgr::stageIncludesNode (int, WitNode *)
   {
   return true;
   }

//------------------------------------------------------------------------------

bool WitPerStageMgr::stageIncludesPeriod (int theStage, WitPeriod thePer)
   {
   return (theStage == periodStage_[thePer]);
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::writeData ()
   {
   myDataWriter ()->writeFirstKeyWord ("set");
   myDataWriter ()->writeKeyWord      ("problem");

   myDataWriter ()->writeVector (
      "periodStage",
       periodStage_,
       defPeriodStage ());

   myDataWriter ()->writeEndCommand ();
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::displayData ()
   {
   WitFlexVec <int> theFlexVec (myProblem (), 0);

   myMsgFac () ("stageHeadingDdMsg");

   theFlexVec = periodStage_;

   myProblem ()->display ("globalPeriodStageDdMsg", theFlexVec);
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::copyAttrsFrom (WitStageMgr * origStageMgr)
   {
   WitPeriod thePer;

   forEachPeriod (thePer, myProblem ())
      periodStage_[thePer] = origStageMgr->periodStage (thePer);
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::validateData ()
   {
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::issueAttMisMatchHeadMsg ()
   {
   myMsgFac () ("stage0PerAttMisMatchSmsg");
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::validateCoreData ()
   {
   validateBomEnts ();
   validateSubs    ();
   validateBopEnts ();
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::validateBomEnts ()
   {
   WitBomEntry * theBomEnt;
   WitPeriod     execPer;

   forEachBomEntry (theBomEnt, myProblem ())
      forEachPeriod (execPer, myProblem ())
         {
         if (theBomEnt->offset ()[execPer] > 0.0)
            myMsgFac () ("posBomOffsetInSBPSmsg",
               theBomEnt->myOperationName (),
               theBomEnt->localIndex (),
               theBomEnt->myPartName (),
               execPer,
               theBomEnt->offset ()[execPer]);

         checkImpactPeriod (theBomEnt, execPer);
         }
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::validateSubs ()
   {
   WitSubEntry * theSub;
   WitPeriod     execPer;

   if (not myGlobalComp ()->independentOffsets ())
      return;

   forEachSubEntry (theSub, myProblem ())
      forEachPeriod (execPer, myProblem ())
         {
         if (theSub->offset ()[execPer] > 0.0)
            myMsgFac () ("posSubOffsetInSBPSmsg",
               theSub->myOperationName (),
               theSub->myBomEntIndex (),
               theSub->localIndex (),
               theSub->myPartName (),
               execPer,
               theSub->offset ()[execPer]);

         checkImpactPeriod (theSub, execPer);
         }
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::validateBopEnts ()
   {
   WitBopEntry * theBopEnt;
   WitPeriod     execPer;

   forEachBopEntry (theBopEnt, myProblem ())
      forEachPeriod (execPer, myProblem ())
         {
         if (theBopEnt->offset ()[execPer] > 0.0)
            myMsgFac () ("posBopOffsetInSBPSmsg",
               theBopEnt->myOperationName (),
               theBopEnt->localIndex (),
               theBopEnt->myPartName (),
               execPer,
               theBopEnt->offset ()[execPer]);

         checkImpactPeriod (theBopEnt, execPer);
         }
   }

//------------------------------------------------------------------------------

void WitPerStageMgr::checkImpactPeriod (
      WitBillEntry * theBillEnt,
      WitPeriod      execPer)
   {
   if (theBillEnt->inEffect (execPer))
      stronglyAssert (theBillEnt->impactPeriod ()[execPer] >= execPer);
   }
@


1.22
log
@Stochastic Implosion
@
text
@@


1.21
log
@Stochastic Implosion
@
text
@d122 14
d378 14
@


1.20
log
@Stochastic Implosion
@
text
@d67 1
a67 2
      objectStage_ (myProblem (), defObjectStage ()),
      dummyVec_    (myProblem (), -1)
d80 42
a201 42
void WitObjStageMgr::setObjectStage (WitNode * theNode, int theValue)
   {
   witAssert (theValue >= 0);
   witAssert (theValue <= 1);

   myProblem ()->prepSetStochModeAttr ("objectStage");

   objectStage_ (theNode) = theValue;
   }

//------------------------------------------------------------------------------

void WitObjStageMgr::setPeriodStage (const int * theValue)
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

int WitObjStageMgr::stageOf (WitNode * theNode, WitPeriod)
   {
   return objectStage_ (theNode);
   }

//------------------------------------------------------------------------------

int WitObjStageMgr::objectStage (WitNode * theNode)
   {
   return objectStage_ (theNode);
   }

//------------------------------------------------------------------------------

const WitTVec <int> & WitObjStageMgr::periodStage ()
   {
   stronglyAssert (false);

   return dummyVec_;
   }

//------------------------------------------------------------------------------

d310 1
a310 1
void WitPerStageMgr::writeData ()
d312 1
a312 9
   myDataWriter ()->writeFirstKeyWord ("set");
   myDataWriter ()->writeKeyWord      ("problem");

   myDataWriter ()->writeVector (
      "periodStage",
       periodStage_,
       defPeriodStage ());

   myDataWriter ()->writeEndCommand ();
d317 1
a317 1
void WitPerStageMgr::displayData ()
d319 9
a327 1
   WitFlexVec <int> theFlexVec (myProblem (), 0);
d329 4
a332 1
   myMsgFac () ("stageHeadingDdMsg");
d334 1
a334 1
   theFlexVec = periodStage_;
d336 1
a336 1
   myProblem ()->display ("globalPeriodStageDdMsg", theFlexVec);
d341 1
a341 1
void WitPerStageMgr::copyAttrsFrom (WitStageMgr * origStageMgr)
d343 3
a345 1
   periodStage_ = origStageMgr->periodStage ();
d350 1
a350 1
void WitPerStageMgr::validateData ()
d352 1
d357 1
a357 1
void WitPerStageMgr::issueAttMisMatchHeadMsg ()
d359 1
a359 1
   myMsgFac () ("stage0PerAttMisMatchSmsg");
d364 1
a364 1
void WitPerStageMgr::setObjectStage (WitNode *, int)
d366 9
a374 1
   stronglyAssert (false);
d379 1
a379 1
void WitPerStageMgr::setPeriodStage (const int * theValue)
d381 1
a381 1
   WitPeriod thePer;
d383 1
a383 1
   witAssert (theValue != NULL);
d385 1
a385 5
   if (DEBUG_MODE)
      forEachPeriod (thePer, myProblem ())
         {
         witAssert (theValue[thePer] >= 0);
         witAssert (theValue[thePer] <= 1);
d387 1
a387 8
         if (thePer > 0)
            if (theValue[thePer] == 0)
               witAssert (theValue[thePer - 1] == 0);
         }

   myProblem ()->prepSetStochModeAttr ("periodStage");

   periodStage_ = theValue;
d392 1
a392 1
int WitPerStageMgr::stageOf (WitNode *, WitPeriod thePer)
d394 4
a397 1
   return periodStage_[thePer];
d402 1
a402 1
int WitPerStageMgr::objectStage (WitNode *)
a403 3
   stronglyAssert (false);

   return -1;
d408 1
a408 1
const WitTVec <int> & WitPerStageMgr::periodStage ()
d410 1
a410 1
   return periodStage_;
@


1.19
log
@Stochastic Implosion
@
text
@d44 10
d67 2
a68 1
      objectStage_ (myProblem (), defObjectStage ())
d117 1
a117 1
void WitObjStageMgr::copyAttrsFrom (WitStochModeMgr * origStochModeMgr)
d119 5
a123 5
   WitObjStageMgr * origObjStageMgr;
   WitPart *        dupPart;
   WitPart *        origPart;
   WitOperation *   dupOpn;
   WitOperation *   origOpn;
d125 1
a125 1
   origObjStageMgr = origStochModeMgr->myObjStageMgr ();
d127 1
a127 1
   forEachPart (dupPart, myProblem ())
d129 1
a129 4
      origPart =
         origObjStageMgr->
            myCompMgr ()->
               findPart (dupPart->partName ().myCstring ());
d131 1
a131 1
      objectStage_ (dupPart) = origObjStageMgr->objectStage_ (origPart);
d134 1
a134 1
   forEachOperation (dupOpn, myProblem ())
d137 1
a137 3
         origObjStageMgr->
            myCompMgr ()->
               findOperation (dupOpn->operationName ().myCstring ());
d139 1
a139 1
      objectStage_ (dupOpn) = origObjStageMgr->objectStage_ (origOpn);
d161 1
a161 1
int WitObjStageMgr::stageOf (WitNode * theNode, WitPeriod)
d163 6
a168 1
   return objectStage_ (theNode);
d173 1
a173 1
void WitObjStageMgr::setObjectStage (WitNode * theNode, int theValue)
d175 2
a176 2
   witAssert (theValue >= 0);
   witAssert (theValue <= 1);
d178 1
a178 1
   myProblem ()->prepSetStochModeAttr ("objectStage");
d180 3
a182 1
   objectStage_ (theNode) = theValue;
d194 9
d339 1
a339 1
void WitPerStageMgr::copyAttrsFrom (WitStochModeMgr * origStochModeMgr)
d341 1
a341 1
   periodStage_ = origStochModeMgr->myPerStageMgr ()->periodStage_;
d359 1
a359 1
int WitPerStageMgr::stageOf (WitNode *, WitPeriod thePer)
d361 1
a361 1
   return periodStage_[thePer];
d390 23
@


1.18
log
@Stochastic Implosion
@
text
@d155 1
a155 1
bool WitObjStageMgr::nodeBelongsToStage (WitNode * theNode, int theStage)
d157 1
a157 8
   return (theStage == objectStage_ (theNode));
   }

//------------------------------------------------------------------------------

bool WitObjStageMgr::perBelongsToStage (WitPeriod, int)
   {
   return false;
d337 1
a337 8
bool WitPerStageMgr::nodeBelongsToStage (WitNode *, int)
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitPerStageMgr::perBelongsToStage (WitPeriod thePer, int theStage)
d339 1
a339 1
   return (periodStage_[thePer] == theStage);
@


1.17
log
@Stochastic Implosion
@
text
@a168 7
bool WitObjStageMgr::nodeIntersectsStage (WitNode * theNode, int theStage)
   {
   return (theStage == objectStage_ (theNode));
   }

//------------------------------------------------------------------------------

a357 7
bool WitPerStageMgr::nodeIntersectsStage (WitNode *, int)
   {
   return true;
   }

//------------------------------------------------------------------------------

@


1.16
log
@Stochastic Implosion
@
text
@a50 6

void WitStageMgr::validateData ()
   {
   }

//------------------------------------------------------------------------------
d155 1
a155 1
bool WitObjStageMgr::nodeIntersectsStage (WitNode * theNode, int theStage)
d162 1
a162 1
void WitObjStageMgr::setObjectStage (WitNode * theNode, int theValue)
d164 1
a164 6
   witAssert (theValue >= 0);
   witAssert (theValue <= 1);

   myProblem ()->prepSetStochModeAttr ("objectStage");

   objectStage_ (theNode) = theValue;
d169 1
a169 1
int WitObjStageMgr::objectStage (WitNode * theNode)
d171 1
a171 1
   return objectStage_ (theNode);
d176 1
a176 1
int WitObjStageMgr::objectStage (WitDemand * theDemand)
d178 2
a179 2
   return objectStage_ (theDemand->demandedPart ());
   }
d181 1
a181 1
//------------------------------------------------------------------------------
d183 1
a183 3
int WitObjStageMgr::objectStage (WitBillEntry * theBillEnt)
   {
   return objectStage_ (theBillEnt->myOperation ());
d188 1
a188 1
int WitObjStageMgr::objectStage (WitBoundSet * theBoundSet)
d190 1
a190 1
   return theBoundSet->objectStage ();
d338 6
d351 14
@


1.15
log
@Stochastic Implosion
@
text
@d161 1
a161 1
bool WitObjStageMgr::intersectsStage (int theStage, WitNode * theNode)
d358 1
a358 1
bool WitPerStageMgr::intersectsStage (int, WitNode *)
@


1.14
log
@Stochastic Implosion
@
text
@d161 7
d358 7
@


1.13
log
@Stochastic Implosion
@
text
@d62 2
a63 2
      WitStageMgr (theProblem),
      stageIndex_ (myProblem (), defStageIndex ())
d82 1
a82 1
      writeStageIndex (thePart, "part");
d85 1
a85 1
      writeStageIndex (theOpn, "operation");
d100 1
a100 1
      myMsgFac () ("stochNodeDdMsg", stageIndex_ (thePart));
d106 1
a106 1
      myMsgFac () ("stochNodeDdMsg", stageIndex_ (theOpn));
d129 1
a129 1
      stageIndex_ (dupPart) = origObjStageMgr->stageIndex_ (origPart);
d139 1
a139 1
      stageIndex_ (dupOpn) = origObjStageMgr->stageIndex_ (origOpn);
d161 1
a161 1
void WitObjStageMgr::setStageIndex (WitNode * theNode, int theValue)
d166 1
a166 1
   myProblem ()->prepSetStochModeAttr ("stageIndex");
d168 1
a168 1
   stageIndex_ (theNode) = theValue;
d173 1
a173 1
int WitObjStageMgr::stageIndex (WitNode * theNode)
d175 1
a175 1
   return stageIndex_ (theNode);
d180 1
a180 1
int WitObjStageMgr::stageIndex (WitDemand * theDemand)
d182 1
a182 1
   return stageIndex_ (theDemand->demandedPart ());
d187 1
a187 1
int WitObjStageMgr::stageIndex (WitBillEntry * theBillEnt)
d189 1
a189 1
   return stageIndex_ (theBillEnt->myOperation ());
d194 1
a194 1
int WitObjStageMgr::stageIndex (WitBoundSet * theBoundSet)
d196 1
a196 1
   return theBoundSet->stageIndex ();
d201 1
a201 1
void WitObjStageMgr::writeStageIndex (
d205 1
a205 1
   if (stageIndex_ (theNode) == defStageIndex ())
d213 3
a215 3
        "stageIndex",
         stageIndex_ (theNode),
      defStageIndex ());
d230 2
a231 2
      stgIdxForOpn  = stageIndex_ (theBomEnt->myOperation ());
      stgIdxForPart = stageIndex_ (theBomEnt->myPart      ());
d252 2
a253 2
      stgIdxForOpn  = stageIndex_ (theSub->myOperation ());
      stgIdxForPart = stageIndex_ (theSub->myPart      ());
d275 2
a276 2
      stgIdxForOpn  = stageIndex_ (theBopEnt->myOperation ());
      stgIdxForPart = stageIndex_ (theBopEnt->myPart      ());
d293 2
a294 2
      WitStageMgr    (theProblem),
      perStageIndex_ (theProblem, defPerStageIndex ())
d315 3
a317 3
      "perStageIndex",
       perStageIndex_,
       defPerStageIndex ());
d330 1
a330 1
   theFlexVec = perStageIndex_;
d332 1
a332 1
   myProblem ()->display ("globalPerStageIndexDdMsg", theFlexVec);
d339 1
a339 1
   perStageIndex_ = origStochModeMgr->myPerStageMgr ()->perStageIndex_;
d351 1
a351 1
void WitPerStageMgr::setPerStageIndex (const int * theValue)
d368 1
a368 1
   myProblem ()->prepSetStochModeAttr ("perStageIndex");
d370 1
a370 1
   perStageIndex_ = theValue;
@


1.12
log
@Stochastic Implosion
@
text
@d154 7
d344 7
@


1.11
log
@Stochastic Implosion
@
text
@d51 6
a336 7
void WitPerStageMgr::validateData ()
   {
   myMsgFac () ("stageByPeriodNYISmsg", __FILE__, __LINE__);
   }

//------------------------------------------------------------------------------

@


1.10
log
@Stochastic Implosion
@
text
@d374 1
a374 1
   WitPeriod     thePer;
d377 3
a379 2
      forEachPeriod (thePer, myProblem ())
         if (theBomEnt->offset ()[thePer] > 0.0)
d384 5
a388 2
               thePer,
               theBomEnt->offset ()[thePer]);
d396 1
a396 1
   WitPeriod     thePer;
d402 3
a404 2
      forEachPeriod (thePer, myProblem ())
         if (theSub->offset ()[thePer] > 0.0)
d410 5
a414 2
               thePer,
               theSub->offset ()[thePer]);
d422 1
a422 1
   WitPeriod     thePer;
d425 3
a427 2
      forEachPeriod (thePer, myProblem ())
         if (theBopEnt->offset ()[thePer] > 0.0)
d432 15
a446 2
               thePer,
               theBopEnt->offset ()[thePer]);
@


1.9
log
@Stochastic Implosion
@
text
@d25 1
d222 1
a222 1
            myMsgFac () ("bomEntStageMisMatchSmsg",
d244 1
a244 1
            myMsgFac () ("subStageMisMatchSmsg",
d267 1
a267 1
            myMsgFac () ("bopEntStageMisMatchSmsg",
d284 2
d359 67
@


1.8
log
@Stochastic Implosion
@
text
@d56 1
a56 1
      stageIndex_ (myProblem (), WitStochImpMgr::defStageIndex ())
d191 1
a191 1
   if (stageIndex_ (theNode) == WitStochImpMgr::defStageIndex ())
d201 1
a201 1
      WitStochImpMgr::defStageIndex ());
d279 2
a280 2
      WitStageMgr (theProblem),
      stageIndex_ (theProblem, WitStochImpMgr::defStageIndex ())
d299 3
a301 3
      "stageIndex",
       stageIndex_,
      WitStochImpMgr::defStageIndex ());
d314 1
a314 1
   theFlexVec = stageIndex_;
d316 1
a316 1
   myProblem ()->display ("globalStageIndexDdMsg", theFlexVec);
d323 1
a323 1
   stageIndex_ = origStochModeMgr->myPerStageMgr ()->stageIndex_;
d335 1
a335 1
void WitPerStageMgr::setStageIndex (const int * theValue)
d352 1
a352 1
   myProblem ()->prepSetStochModeAttr ("stageIndex");
d354 1
a354 1
   stageIndex_ = theValue;
@


1.7
log
@Stochastic Implosion
@
text
@d323 1
a323 1
   myMsgFac () ("stageByPeriodNYISmsg", __FILE__, __LINE__);
@


1.6
log
@Stochastic Implosion
@
text
@d295 9
a303 1
   myMsgFac () ("stageByPeriodNYISmsg", __FILE__, __LINE__);
@


1.5
log
@Stochastic Implosion
@
text
@d302 7
a308 1
   myMsgFac () ("stageByPeriodNYISmsg", __FILE__, __LINE__);
@


1.4
log
@Stochastic Implosion
@
text
@d56 1
a56 1
      stageIndex_ (myProblem (), defStageIndex ())
d191 1
a191 1
   if (stageIndex_ (theNode) == defStageIndex ())
d201 1
a201 1
      defStageIndex ());
d279 2
a280 1
      WitStageMgr (theProblem)
d318 24
@


1.3
log
@Stochastic Implosion
@
text
@d17 1
d21 1
d272 45
@


1.2
log
@Stochastic Implosion
@
text
@d15 1
d20 1
a21 1
#include <StochImpMgr.h>
d32 16
d51 1
a51 1
WitObjStageMgr::WitObjStageMgr (WitStochModeMgr * theStochModeMgr):
d53 2
a54 3
      WitProbAssoc    (theStochModeMgr),
      myStochModeMgr_ (theStochModeMgr),
      stageIndex_     (myProblem (), defStageIndex ())
d56 1
a56 2
   if (not myStochImpMgr ()->stageByObject ())
      myMsgFac () ("stageByPeriodNYISmsg");
d103 1
a103 1
void WitObjStageMgr::copyAttrsFrom (WitObjStageMgr * origObjStageMgr)
d105 7
a111 4
   WitPart *      dupPart;
   WitPart *      origPart;
   WitOperation * dupOpn;
   WitOperation * origOpn;
@


1.1
log
@Stochastic Implosion
@
text
@d15 1
a15 1
//    StageMgr
d18 1
a18 1
#include <StageMgr.h>
d31 1
a31 1
// Implementation of class StageMgr.
d34 1
a34 1
WitStageMgr::WitStageMgr (WitStochModeMgr * theStochModeMgr):
d46 1
a46 1
WitStageMgr::~WitStageMgr ()
d52 1
a52 1
void WitStageMgr::writeData ()
d66 1
a66 1
void WitStageMgr::displayData ()
d88 1
a88 1
void WitStageMgr::copyAttrsFrom (WitStageMgr * origStageMgr)
d98 1
a98 1
         origStageMgr->
d102 1
a102 1
      stageIndex_ (dupPart) = origStageMgr->stageIndex_ (origPart);
d108 1
a108 1
         origStageMgr->
d112 1
a112 1
      stageIndex_ (dupOpn) = origStageMgr->stageIndex_ (origOpn);
d118 1
a118 1
void WitStageMgr::validateData ()
d127 1
a127 1
void WitStageMgr::setStageIndex (WitNode * theNode, int theValue)
d139 1
a139 1
int WitStageMgr::stageIndex (WitNode * theNode)
d146 1
a146 1
int WitStageMgr::stageIndex (WitDemand * theDemand)
d153 1
a153 1
int WitStageMgr::stageIndex (WitBillEntry * theBillEnt)
d160 1
a160 1
int WitStageMgr::stageIndex (WitBoundSet * theBoundSet)
d167 1
a167 1
void WitStageMgr::writeStageIndex (
d188 1
a188 1
void WitStageMgr::validateBomEnts ()
d210 1
a210 1
void WitStageMgr::validateSubs ()
d233 1
a233 1
void WitStageMgr::validateBopEnts ()
@

