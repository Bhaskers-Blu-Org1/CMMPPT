head	1.20;
access;
symbols
	EndRw-branch:1.19.0.6
	Root-of-EndRw:1.19
	rwToStl:1.19.0.4
	latest_sce_3_10_20010924:1.19.0.2
	sce_3_10_20010924:1.19
	latest_sce_3_00_20010601:1.16.0.2
	sce_3_00_20010601:1.16
	latest_sce_2_31_20010308:1.9.0.2
	sce_2_31_20010308:1.9
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2003.03.03.23.26.55;	author rjw;	state dead;
branches;
next	1.19;

1.19
date	2001.06.14.17.41.53;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.06.11.19.29.11;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.08.18.00.27;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.05.29.22.11.26;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.25.14.53.25;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.10.22.31.13;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.26.21.25.44;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.25.20.54.35;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.03.19.23.05;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.08.16.37.06;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.04.22.27.51;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.28.22.13.37;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.06.19.58.39;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.05.19.05.30;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.04.22.07.37;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.43;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.21.20.03.24;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.17;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.19
log
@Created class SelCand and classes derived from it.
@
text
@@


1.18
log
@Refactoring.
@
text
@a0 171
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MrPartH
#define MrPartH

//------------------------------------------------------------------------------
// Header file: "MrPart.h"
//
// Contains the declaration of class MrPart.
//------------------------------------------------------------------------------

#include <PmrSelPt.h>
#include <PtrTVec.h>
#include <PtrVec.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class MrPart
//
// A selection component corresponding to a Part.
//
// Class Hierarchy:
//
// ProbAssoc
//    MrPart
//
// Implemented in ProdMR.C.
//------------------------------------------------------------------------------

class WitMrPart: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrPart (WitPart * thePart, WitPmrMgr * thePmrMgr);
         //
         // myPart_   <-- thePart.
         // myPmrMgr_ <-- thePmrMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMrPart ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitPmrSelPt * myPmrSelPtWithAlt (WitPeriod expPer)
            //
            // Returns the PmrSelPt for this MrPart in expPer, if it has an
            // alternative to the current selection; otherwise NULL.
            //
         {
         return
            multiChoice_?
               multiChoicePmrSelPtWithAlt (expPer):
               NULL;
         }

      void printHasAlt ();
         //
         // Prints those PmrSelPts for which hasAlt () is TRUE.

      WitBoolean candIsDefault (WitCandIndex theIdx, WitPeriod expPer);
         //
         // Returns TRUE, iff theIdx is the candidate index of the default
         // selection for this MrPart in expPer.

      WitCandIndex nCandidates ();
         //
         // Returns the # of selection candidates for this MrPart.

      WitBoolean candIsEligible (WitCandIndex theIdx, WitPeriod expPer);
         //
         // Returns TRUE, iff candidate #theIdx for this MrPart is eligible to
         // be selected expPer.

      void findExpBopEnts (WitPeriod expPer, WitBopEntStack & theBopEnts);
         //
         // Sets theBopEnts to be the set of BOP entries currently
         // under consideration for explosion from myPart_ in expPer.

      void select (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Changes the selection in expPer to theBopEnt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPmrMgr *,                      myPmrMgr)
      accessFunc (WitPart *,                        myPart)
      accessFunc (WitBoolean,                       multiChoice)
      accessFunc (const WitPtrVec (WitBopEntry) &,  candBopEnt)
      accessFunc (const WitPtrTVec (WitPmrSelPt) &, myPmrSelPt)

      WitBopEntry * selBopEntry (WitPeriod expPer);
         //
         // Returns the BopEntry selected to be used when exploding at myComp
         // in expPer.
         // Invalid, if myPart_ is not explodeable in expPer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildPmrSelPts ();
         //
         // Creates the PmrSelPts for this MrPart.
         // To be called by the derived class ctors after finding the
         // candidates.

      WitPmrSelPt * multiChoicePmrSelPtWithAlt (WitPeriod expPer);
            //
            // Returns the PmrSelPt for this MrPart in expPer, if it has an
            // alternative to the current selection; otherwise NULL.
            // multiChoice_ must be TRUE.

      void initCandidate ();
         //
         // Sets up the list of candidates in the derived instance.

      void addPrereq (WitObjStack (WitPart) & prereqs, WitBopEntry * theBopEnt);
         //
         // Puts the prereq Part into prereqs.

      noCopyCtorAssign (WitMrPart);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPmrMgr * const myPmrMgr_;
         //
         // The PmrMgr that owns this MrPart.

      WitPart * const myPart_;
         //
         // The Part at which the selection is to be made.

      WitPtrVec (WitBopEntry) candBopEnt_;
         //
         // candBopEnt_[theIdx] is the BopEntry eligible to be selected when
         // exploding at myPart_, corresponding to theIdx.

      WitBoolean multiChoice_;
         //
         // TRUE, iff there are at least two directions in which the routing
         // could potentially proceed downward from this MrPart.

      WitPtrTVec (WitPmrSelPt) myPmrSelPt_;
         //
         // myPmrSelPt_[expPer] is the PmrSelPt for this MrPart in expPer.
         // Allocated only if multiChoice_ is TRUE.
   };

#endif
@


1.17
log
@Refactoring.
@
text
@a71 4
      void printIfMultiChoice ();
         //
         // Prints this MrPart, if multiChoice_ is TRUE.

a88 8

      void printID ();
         //
         // Prints a string identifying this MrPart.

      void printCandidate (WitCandIndex theIdx);
         //
         // Prints Candidate #theIdx.
@


1.16
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d80 1
a80 1
      WitBoolean candIsDefault (WitCandIndex theIdx, WitPeriod thePer);
d83 1
a83 1
         // selection for this MrPart in thePer.
d89 1
a89 1
      WitBoolean candIsEligible (WitCandIndex theIdx, WitPeriod thePer);
d92 1
a92 1
         // be selected thePer.
d179 1
a179 1
         // myPmrSelPt_[thePer] is the PmrSelPt for this MrPart in thePer.
@


1.15
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d115 1
@


1.14
log
@Renamed AltPt classes to SelPt classes.
@
text
@d60 1
a60 1
      inline WitPmrSelPt * myPmrSelPtWithAlt (WitPeriod thePer)
d62 1
a62 1
            // Returns the PmrSelPt for this MrPart in thePer, if it has an
d68 1
a68 1
               multiChoicePmrSelPtWithAlt (thePer):
d115 4
a118 2
      accessFunc (WitPart *,  myPart)
      accessFunc (WitBoolean, multiChoice)
d120 5
a124 10
      inline WitBopEntry * selBopEntry (WitPeriod thePer)
            //
            // Returns the BopEntry selected to be used when exploding at myComp
            // in thePer.
            // Invalid, if myPart_ is not explodeable in thePer.
         {
         witAssert (myPart_->explodeable (thePer));

         return candidate_[selIndex (thePer)];
         }
d138 1
a138 1
      WitPmrSelPt * multiChoicePmrSelPtWithAlt (WitPeriod thePer);
d140 1
a140 1
            // Returns the PmrSelPt for this MrPart in thePer, if it has an
a154 17
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitPtrTVec (WitPmrSelPt) &, myPmrSelPt)

      inline WitCandIndex selIndex (WitPeriod thePer)
            //
            // Returns the selection index for thePer in the candidate vector.
            // -1 indicates no selection.
         {
         return
            multiChoice_?         myPmrSelPt_[thePer]->selIndex ():
            (nCandidates () > 0)? 0:
                                  -1;
         }

      //------------------------------------------------------------------------
d166 1
a166 1
      WitPtrVec (WitBopEntry) candidate_;
d168 1
a168 1
         // candidate_[theIdx] is the BopEntry eligible to be selected when
@


1.13
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <PmrAltPt.h>
d60 1
a60 1
      inline WitPmrAltPt * myPmrAltPtWithAlt (WitPeriod thePer)
d62 1
a62 1
            // Returns the PmrAltPt for this MrPart in thePer, if it has an
d68 1
a68 1
               multiChoicePmrAltPtWithAlt (thePer):
d78 1
a78 1
         // Prints those PmrAltPts for which hasAlt () is TRUE.
d135 1
a135 1
      void buildPmrAltPts ();
d137 1
a137 1
         // Creates the PmrAltPts for this MrPart.
d141 1
a141 1
      WitPmrAltPt * multiChoicePmrAltPtWithAlt (WitPeriod thePer);
d143 1
a143 1
            // Returns the PmrAltPt for this MrPart in thePer, if it has an
d161 1
a161 1
      accessFunc (const WitPtrTVec (WitPmrAltPt) &, myPmrAltPt)
d169 1
a169 1
            multiChoice_?         myPmrAltPt_[thePer]->selIndex ():
d196 1
a196 1
      WitPtrTVec (WitPmrAltPt) myPmrAltPt_;
d198 1
a198 1
         // myPmrAltPt_[thePer] is the PmrAltPt for this MrPart in thePer.
@


1.12
log
@Refactoring for selection splitting.
@
text
@d19 2
a20 1
#include <MrComp.h>
d22 1
d32 1
a32 2
//    MrComp
//       MrPart
d34 1
a34 1
// Implemented in MultiRt.C.
d37 1
a37 1
class WitMrPart: public WitMrComp
d54 1
a54 1
      virtual ~WitMrPart ();
d57 1
a57 1
      // Data access functions.
d60 4
a63 1
      inline WitBopEntry * selBopEntry (WitPeriod thePer)
a64 3
            // Returns the BopEntry selected to be used when exploding at myComp
            // in thePer.
            // Invalid, if myPart_ is not explodeable in thePer.
d66 4
a69 3
         witAssert (myPart_->explodeable (thePer));

         return candidate_[selIndex (thePer)];
d72 1
a72 5
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual WitBoolean candIsDefault (WitCandIndex, WitPeriod);
d74 1
a74 1
         // Override from class MrComp.
d76 1
a76 1
      virtual WitCandIndex nCandidates ();
d78 1
a78 1
         // Override from class MrComp.
d80 1
a80 1
      virtual WitBoolean compIsEligible (WitPeriod);
d82 2
a83 1
         // Override from class MrComp.
d85 1
a85 1
      virtual WitBoolean candIsEligible (WitCandIndex, WitPeriod);
d87 1
a87 1
         // Override from class MrComp.
d89 1
a89 1
      virtual void printID ();
d91 2
a92 1
         // Override from class MrComp.
d94 1
a94 1
      virtual void printCandidate (WitCandIndex);
d96 1
a96 1
         // Override from class MrComp.
d98 1
a98 1
      virtual WitSelMgr * mySelMgr (WitSelector *);
d100 1
a100 1
         // Override from class MrComp.
d111 18
d135 11
a145 1
      noCopyCtorAssign (WitMrPart);
d147 1
a147 1
      virtual void initCandidate ();
d149 1
a149 1
         // Override from class MrComp.
d155 19
d190 10
@


1.11
log
@Continued implementation of selection splitting.
@
text
@d44 1
a44 1
      WitMrPart (WitPart * thePart, WitProdRtr * theProdRtr);
d46 2
a47 2
         // myPart_    <-- thePart.
         // myProdRtr_ <-- theProdRtr.
d131 1
a131 1
      WitProdRtr * const myProdRtr_;
d133 1
a133 1
         // The ProdRtr that owns this MrPart.
@


1.10
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d98 4
@


1.9
log
@Coarse selection splitting.
@
text
@a73 4
      virtual void splitSel (WitPeriod);
         //
         // Override from class MrComp.

@


1.8
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d44 1
a44 1
      WitMrPart (WitPart * thePart, WitMrMgr * theMrMgr);
d46 2
a47 2
         // myPart_ <-- thePart.
         // MrComp  <<< theMrMgr.
d130 4
@


1.7
log
@Some minor changes.
@
text
@d44 1
a44 1
      WitMrPart (WitPart * thePart);
d47 1
@


1.6
log
@Some minor modifications.
@
text
@d20 1
a20 1
#include <Vector.h>
@


1.5
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d101 1
a101 3
      void findExpBopEnts (
            WitPeriod                      expPer,
            WitObjDynStack (WitBopEntry) & theBopEnts);
d122 1
a122 3
      void addPrereq (
            WitObjDynStack (WitPart) & prereqs, 
            WitBopEntry *              theBopEnt);
@


1.4
log
@Refactoring for selection splitting.
@
text
@d73 4
d140 2
a141 1
         // Data for candidate.
@


1.3
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d20 1
d66 1
a66 1
         return candidate (selIndex (thePer));
d114 1
a114 3
      copyCtorAndAssignment (WitMrPart);
         //
         // Prevents unintentional copying and assignment.
a119 9
      inline WitBopEntry * & candidate (WitCandIndex theIdx)
            //
            // candidate (theIdx) is the BopEntry eligible to be selected when
            // exploding at myPart_, corresponding to theIdx.
            //
         {
         return (WitBopEntry * &) candidateTl_[theIdx];
         }

d134 1
a134 1
      WitVector (WitTypelessPtr) candidateTl_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d97 2
a98 2
            WitPeriod                   expPer,
            WitDynStack (WitBopEntry) & theBopEnts);
d130 3
a132 1
      void addPrereq (WitDynStack (WitPart) & prereqs, WitBopEntry * theBopEnt);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
