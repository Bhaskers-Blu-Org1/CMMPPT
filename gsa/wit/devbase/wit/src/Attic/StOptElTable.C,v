head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2007.07.26.19.23.35;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2007.07.25.23.18.22;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.25.21.16.10;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.25.19.53.27;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "StOptElTable.C"
//
// Contains:
//    The implementation of class template StOptElTable <DerComp, StOptEl>
//    The explicit instantiation of        StOptElTable <DerComp, StOptEl>
//------------------------------------------------------------------------------

#include <StOptElTable.h>
#include <ScenMgr.h>
#include <Scenario.h>
#include <DerStVars.h>
#include <Opn.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Implementation of class template StOptElTable <DerComp, StOptEl>.
//------------------------------------------------------------------------------

template <typename DerComp, typename StOptEl> 
         WitStOptElTable <DerComp, StOptEl>::WitStOptElTable (
            WitScenMgr * theScenMgr):

      WitProbAssoc (theScenMgr->myProblem ()),
      myScenMgr_   (theScenMgr),
      mySched_     (myProblem ())
   {
   WitScenario * theScenario;

   forEachEl (theScenario, myScenMgr_->myScenarios ())
      {
      mySched_.setMapFor (theScenario, * new WitPtrSched <DerComp, StOptEl>);

      mySched_ (theScenario).allocate1D (myProblem ());
      }
   }

//------------------------------------------------------------------------------

template <typename DerComp, typename StOptEl> 
         WitStOptElTable <DerComp, StOptEl>::~WitStOptElTable ()
   {
   WitScenario * theScenario;

   forEachEl (theScenario, myScenMgr_->myScenarios ())
      delete & mySched_ (theScenario);
   }

//------------------------------------------------------------------------------

template <typename DerComp, typename StOptEl> 
      void WitStOptElTable <DerComp, StOptEl>::store (StOptEl * theStOptEl)
   {
   WitScenario * theScenario;
   DerComp *     theDerComp;
   WitPeriod     thePer;
   
   theScenario = theStOptEl->myScenario ();
   theDerComp  = theStOptEl->myDerComp  ();
   thePer      = theStOptEl->myPer      ();

   if (not mySched_ (theScenario).myPtrTVecAt (theDerComp).isAllocated ())
      mySched_ (theScenario).myPtrTVecAt (theDerComp).allocate (myProblem ());

   witAssert (mySched_ (theScenario).myPtrAt (theDerComp, thePer) == NULL);

   mySched_ (theScenario).myPtrAt (theDerComp, thePer) = theStOptEl;
   }

//------------------------------------------------------------------------------

template <typename DerComp, typename StOptEl> 
      StOptEl * WitStOptElTable <DerComp, StOptEl>::myStOptElFor (
         WitScenario * theScenario,
         DerComp *     theDerComp,
         WitPeriod     thePer)
   {
   if (mySched_ (theScenario).myPtrTVecAt (theDerComp).isAllocated ())
      return mySched_ (theScenario).myPtrAt (theDerComp, thePer);
   else
      return NULL;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template StOptElTable <DerComp, StOptEl>.
//------------------------------------------------------------------------------

template class WitStOptElTable <WitOperation, WitStExecVar>;
@


1.3
log
@Stochastic Implosion
@
text
@@


1.2
log
@Stochastic Implosion
@
text
@d18 1
a18 3
#include <StochImpOP.h>
#include <StochImp.h>
#include <StochModeMgr.h>
d21 1
a23 1
#include <DerStVars.h>
d31 1
a31 1
            WitStochImpOP * theStochImpOP):
d33 3
a35 3
      WitProbAssoc  (theStochImpOP->myProblem ()),
      myStochImpOP_ (theStochImpOP),
      mySched_      (myProblem ())
a36 1
   WitScenMgr *  theScenMgr;
d39 1
a39 4
   theScenMgr =
      myStochImpOP_->myStochImploder ()->myStochModeMgr ()->myScenMgr ();

   forEachEl (theScenario, theScenMgr->myScenarios ())
a51 1
   WitScenMgr *  theScenMgr;
d54 1
a54 4
   theScenMgr =
      myStochImpOP_->myStochImploder ()->myStochModeMgr ()->myScenMgr ();

   forEachEl (theScenario, theScenMgr->myScenarios ())
d82 1
a82 1
      StOptEl *WitStOptElTable <DerComp, StOptEl>:: myStOptElFor (
@


1.1
log
@Stochastic Implosion
@
text
@d19 6
d35 1
d37 1
a37 1
      mySched_      (theStochImpOP->myProblem ())
d39 12
d58 43
@

