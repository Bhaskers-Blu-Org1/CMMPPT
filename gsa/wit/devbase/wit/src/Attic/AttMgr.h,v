head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2007.05.09.22.44.27;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2007.05.09.15.45.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.09.15.27.11;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.08.23.21.19;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.08.22.28.53;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.08.20.53.18;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.08.20.11.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef AttMgrH
#define AttMgrH

//------------------------------------------------------------------------------
// Header file: "AttMgr.h"
//
// Contains the declaration of class AttMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrVec.h>
#include <AttID.h>

//------------------------------------------------------------------------------
// Class AttMgr
//
// "Attribute Manager"
// Responsible for managing the meta-level aspects of WIT's input data
// attributes.
//
// Class Hierarchy:
//
// ProbAssoc
//    AttMgr
//------------------------------------------------------------------------------

class WitAttMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAttMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAttMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the attribute management subsystem.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildAttReps ();
         //
         // Creates and stores all AttReps to be owned by this AttMgr.

      void makeNextAttRep (
            WitAttID::Tag theAttID,
            const char *  theAttName);
         //
         // Creates and stores a new AttRep.
         //    theAttID   is the associated AttID.
         //    theAttName is the name of the attribute.
         //    theAttID must be first AttID (as given in the enum list) for
         //    which an AttRep has not yet been created.

      void checkAttReps ();
         //
         // Verifies that the AttReps owned by this AttMgr were set up
         // correctly.

      noCopyCtorAssign (WitAttMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitAttRep> myAttRepVec_;
         //
         // myAttRepVec_[theAttID] is the AttRep owned by this AttMgr
         // corresponding to theAttID.

      int currentIdx_;
         //
         // The current index into myAttRepVec_ used by makeNextAttRep.
   };


#endif
@


1.6
log
@Stochastic Implosion
@
text
@@


1.5
log
@Stochastic Implosion
@
text
@d70 1
a70 1
      void makeOneAttRep (
d77 2
d95 4
@


1.4
log
@Stochastic Implosion
@
text
@d27 2
a28 1
// Responsible for handling some aspects of WIT's input data attributes.
d70 1
a70 1
      void makeAttRep (
a71 1
            const char *  theAttIDCstring,
d75 2
a76 3
         //    theAttID        is the associated AttID.
         //    theAttIDCstring is the associated AttID, converted to a c-string.
         //    theAttName      is the name of the attribute.
@


1.3
log
@Stochastic Implosion
@
text
@d55 4
d65 1
a65 1
      void buildAllAttReps ();
@


1.2
log
@Stochastic Implosion
@
text
@d61 1
a61 1
      void buildAttReps ();
d67 1
d71 3
a73 2
         //    theAttID   is the associated AttID.
         //    theAttName is the name of the attribute.
@


1.1
log
@Stochastic Implosion
@
text
@d73 5
@

