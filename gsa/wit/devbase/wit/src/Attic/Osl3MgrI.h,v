head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2002.08.15.20.03.46;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2002.08.15.14.20.44;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.14.16.09.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.09.14.20.44;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.08.17.33.33;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.07.20.12.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.02.17.03.36;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Continued implementation of opt implosion with OSL V3.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef Osl3MgrIH
#define Osl3MgrIH

//------------------------------------------------------------------------------
// Header file: "Osl3MgrI.h"
//
// Contains the implementation of class Osl3Mgr.
//
// Included by OslMgr.C.
//------------------------------------------------------------------------------

#include <Osl3Mgr.h>

#if OSL_VERSION == 3

//------------------------------------------------------------------------------

#include <osl/ekk_c_api.h>

#define INVALID_RET_VAL -444555

//------------------------------------------------------------------------------

EKKContext * WitOsl3Mgr::sharedOslContext_ = NULL;

//------------------------------------------------------------------------------

WitOsl3Mgr::WitOsl3Mgr (WitLpModel * theLpModel):

      myLpModel_        (theLpModel),
      myOptImploder_    (theLpModel->myOptImploder ()),
      myMsgFac_         (theLpModel->myMsgFac ()),
      retVal_           (INVALID_RET_VAL),
      oslLogFile_       (NULL),
      myOslModel_       (NULL),
      presolveFileName_ ()
   {
   }

//------------------------------------------------------------------------------

WitOsl3Mgr::~WitOsl3Mgr ()
   {
   WitTimingEvent theEvent ("osl");

   deleteOslModel ();
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::solveLP ()
   {
   WitTimingEvent theEvent ("osl");

   if (myOptImploder_->accelerated ())
      myMsgFac_ ("reSolveLpOsl3Msg");
   else
      {
      myMsgFac_ ("solveLpOsl3Msg");

      createOslModel ();

      passFixedModel ();
      }

   passFlexibleModel ();

   if (myOptImploder_->printMps ())
      prtMpsFile ();

   if (myOptImploder_->accelerated ())
      solveByOslAcc ();
   else
      solveByOslUnAcc ();

   myMsgFac_ ("optSolnFoundMsg");

   storePrimalSoln ();

   if (myLpModel_->needDual ())
      storeDualSoln ();

   if (myOptImploder_->printMask () > 0)
      printSoln ();

   fflush (oslLogFile_);
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::createOslModel ()
   {
   if (sharedOslContext_ == NULL)
      initContext ();

   myOslModel_ = ekk_newModel (sharedOslContext_, "WIT LP Model");

   checkRetPtr (myOslModel_, "ekk_newModel");

   oslLogFile_ =
      openFile (myOptImploder_->myOptComp ()->oslMesgFileName (), "a");

   retVal_ = ekk_setLogfileFilePointer (myOslModel_, oslLogFile_);

   checkRetVal ("ekk_setLogfileFilePointer");

   retVal_ = ekk_messagePrintOn (myOslModel_, 317);
      
   checkRetVal ("ekk_messagePrintOn");

   retVal_ = ekk_mset (myOslModel_, 1, 256, 0, 0, 9999, 0);
      
   checkRetVal ("ekk_mset");

   retVal_ = ekk_setIlinelen (myOslModel_, 90);
   
   checkRetVal ("ekk_setIlinelen");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::initContext ()
   {
   EKKContext * theOslContext;
   EKKModel * baseModel;

   sharedOslContext_ = ekk_initializeContext ();

   checkRetPtr (sharedOslContext_, "ekk_initializeContext");

   baseModel = ekk_baseModel (sharedOslContext_);

   checkRetPtr (baseModel, "ekk_baseModel");

   retVal_ = ekk_messagePrintOff (baseModel, 259);
      
   checkRetVal ("ekk_messagePrintOff");

   retVal_ = ekk_messagePrintOff (baseModel, 317);
      
   checkRetVal ("ekk_messagePrintOff");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::deleteOslModel ()
   {
   int nModels;

   if (myOslModel_ == NULL)
      return;

   retVal_ = ekk_deleteModel (myOslModel_);

   checkRetVal ("ekk_deleteModel");

   myOslModel_ = NULL;

   nModels     = ekk_numberOfModels (sharedOslContext_);

   if (nModels == 0)
      {
      ekk_endContext (sharedOslContext_);

      sharedOslContext_ = NULL;
      }
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passFixedModel ()
   {
   passDimens ();

   passMatrix ();

   setAsMax ();
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passDimens ()
   {
   retVal_ = ekk_loadRimModel (
      myOslModel_,
      myLpModel_->nLpCons (),
      NULL,
      NULL,
      myLpModel_->nLpVars (),
      NULL,
      NULL,
      NULL);

   checkRetVal ("ekk_loadRimModel");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passMatrix ()
   {
   WitVector <int>    indexRow;
   WitVector <int>    startOfEachColumn;
   WitVector <double> elements;

   indexRow         .resize (myLpModel_->nCoeffs ());
   startOfEachColumn.resize (myLpModel_->nLpVars () + 1);
   elements         .resize (myLpModel_->nCoeffs ());

   myLpModel_->generateOsl3Vectors (indexRow, startOfEachColumn, elements);

   retVal_ =
      ekk_addColumnElementBlock (
         myOslModel_,
         myLpModel_->nLpVars (),
         indexRow.myCvector (),
         startOfEachColumn.myCvector (),
         elements.myCvector ());

   if (retVal_ < 0)
      myMsgFac_ ("osl3ErrorSmsg", "ekk_addColumnElementBlock");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::setAsMax () 
   {
   retVal_ = ekk_setRmaxmin (myOslModel_, -1.0);

   checkRetVal ("ekk_setRmaxmin");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passFlexibleModel ()
   {
   int                vecSize;
   WitVector <double> workVector;

   vecSize = max (myLpModel_->nLpCons (), myLpModel_->nLpVars ());

   workVector.resize (vecSize);

   passConLBs    (workVector);
   passConUBs    (workVector);
   passVarLBs    (workVector);
   passVarUBs    (workVector);
   passObjCoeffs (workVector);
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passConLBs (WitVector <double> & theConLBvec)
   {
   myLpModel_->getOsl3ConLBs (theConLBvec);

   retVal_ =
      ekk_copyRowlower (
         myOslModel_,
         theConLBvec.myCvector (),
         0,
         myLpModel_->nLpCons ());

   checkRetVal ("ekk_copyRowlower");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passConUBs (WitVector <double> & theConUBvec)
   {
   myLpModel_->getOsl3ConUBs (theConUBvec);

   retVal_ =
      ekk_copyRowupper (
         myOslModel_,
         theConUBvec.myCvector (),
         0,
         myLpModel_->nLpCons ());

   checkRetVal ("ekk_copyRowupper");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passVarLBs (WitVector <double> & theVarLBvec)
   {
   myLpModel_->getOsl3VarLBs (theVarLBvec);

   retVal_ =
      ekk_copyCollower (
         myOslModel_,
         theVarLBvec.myCvector (),
         0,
         myLpModel_->nLpVars ());

   checkRetVal ("ekk_copyCollower");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passVarUBs (WitVector <double> & theVarUBvec)
   {
   myLpModel_->getOsl3VarUBs (theVarUBvec);

   retVal_ =
      ekk_copyColupper (
         myOslModel_,
         theVarUBvec.myCvector (),
         0,
         myLpModel_->nLpVars ());

   checkRetVal ("ekk_copyColupper");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passObjCoeffs (WitVector <double> & theObjCoeffVec)
   {
   myLpModel_->getOsl3ObjCoeffs (theObjCoeffVec);

   retVal_ =
      ekk_copyObjective (
         myOslModel_,
         theObjCoeffVec.myCvector (),
         0,
         myLpModel_->nLpVars ());

   checkRetVal ("ekk_copyColupper");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::prtMpsFile ()
   {
   myMsgFac_ ("mpsFileMsg");

   retVal_ = ekk_exportModel (myOslModel_, "model.mps", 1, 2);

   checkRetVal ("ekk_exportModel");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::solveByOslUnAcc ()
   {
   passInitSoln ();

   scale ();

   preSolve ();

   crash ();

   primalSimplex ();

   postSolve ();

   primalSimplex ();
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::solveByOslAcc ()
   {
   ekk_primalSimplex (myOslModel_, 0);

   checkProbStat ();
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::passInitSoln ()
   {
   double * colsol;
   
   if (! myOptImploder_->myOptComp ()->optInitMethod ()->external ())
      return;

   colsol = ekk_getColsol (myOslModel_);

   checkRetPtr (colsol, "ekk_getColsol");

   myLpModel_->getInitSoln (colsol);

   retVal_ = ekk_setColsol (myOslModel_, colsol);

   checkRetVal ("ekk_setColsol");

   ekk_free (colsol);
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::scale ()
   {
   retVal_ = ekk_scale (myOslModel_);

   checkRetVal ("ekk_scale");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::preSolve ()
   {
   char * theFileName;

   theFileName = tempFileName ("witpr");

   presolveFileName_.copyCstring (theFileName);

   portableFree (theFileName);

   retVal_ = ekk_preSolve (myOslModel_, 3, presolveFileName_.myCstring ());

   if (retVal_ == 1)
      myLpModel_->reportInfeasible ();

   checkRetVal ("ekk_preSolve");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::crash ()
   {
   if (! myOptImploder_->myOptComp ()->crashOptStarter ()->isChosen ())
      return;

   retVal_ = ekk_crash (myOslModel_, 3);

   checkRetVal ("ekk_crash");
   }

//------------------------------------------------------------------------------
    
void WitOsl3Mgr::primalSimplex ()
   {
   ekk_primalSimplex (myOslModel_, 3);
      //
      // The return value is ignored; it seems to be the same as probstat.

   checkProbStat ();
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::postSolve ()
   {
   retVal_ = ekk_postSolve (myOslModel_, presolveFileName_.myCstring ());

   remove (presolveFileName_.myCstring ());

   if (retVal_ == 1)
      myLpModel_->reportInfeasible ();

   checkRetVal ("ekk_postSolve");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::storePrimalSoln ()
   {
   const double * colsol;

   colsol = ekk_colsol (myOslModel_);

   checkRetPtr (colsol, "ekk_colsol");

   myLpModel_->storeOsl3PrimalSoln (colsol);
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::storeDualSoln ()
   {
   const double * rowduals;

   rowduals = ekk_rowduals (myOslModel_);

   checkRetPtr (rowduals, "ekk_rowduals");

   myLpModel_->storeOsl3DualSoln (rowduals);
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::printSoln ()
   {
   retVal_ = ekk_setIprtinfomask (myOslModel_, myOptImploder_->printMask ());

   checkRetVal ("ekk_setIprtinfomask");

   retVal_ = ekk_printSolution (myOslModel_);

   checkRetVal ("ekk_printSolution");
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::checkProbStat ()
   {
   int probStat;
   int index;

   probStat = ekk_getIprobstat (myOslModel_);

   if (probStat == 0)
      return;

   if (probStat == 1)
      myLpModel_->reportInfeasible ();

   if (probStat == 2)
      myLpModel_->reportUnbounded ();

   index = probStat + 1;

   const WitMsgFragID statFragID [] =
      {
      "iprobstatM1Frag",
      "iprobstat0Frag",
      "iprobstat1Frag",
      "iprobstat2Frag",
      "iprobstat3Frag",
      "iprobstat4Frag",
      "iprobstat5Frag",
      "iprobstat6Frag",
      };

   if ((index < 0) || (index >= NumberElem (statFragID)))
      index = 0;
         //
         // Ensure index is in range.

   myMsgFac_ ("oslOptimalNotFoundFmsg",
      probStat,
      myMsgFac_.myFrag (statFragID[index]));
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::checkRetPtr (const void * thePtr, const char * funcName)
   {
   if (thePtr == NULL)
      myMsgFac_ ("osl3ErrorSmsg", funcName);
   }

//------------------------------------------------------------------------------

void WitOsl3Mgr::checkRetVal (const char * funcName)
   {
   stronglyAssert (retVal_ != INVALID_RET_VAL);

   if (retVal_ != 0)
      myMsgFac_ ("osl3ErrorSmsg", funcName);

   retVal_ = INVALID_RET_VAL;
   }

//------------------------------------------------------------------------------

#endif

#endif
@


1.6
log
@Continued implementation of opt implosion with OSL V3.
@
text
@@


1.5
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d43 1
d94 2
a101 2
   FILE * oslLogFile;

d109 1
a109 1
   oslLogFile =
d112 1
a112 1
   retVal_ = ekk_setLogfileFilePointer (myOslModel_, oslLogFile);
@


1.4
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d33 4
a45 4
   if (myOptImploder_->myOptComp ()->accAfterOptImp ())
      myMsgFac_ ("genericSmsg",
         "Accelerated optimizing implosion using OSL V3 is not yet "
         "available.");
d52 3
d59 1
a59 1
void WitOsl3Mgr::solve ()
d61 1
a61 1
   myMsgFac_ ("solveLpOsl3Msg");
d63 7
a69 1
   startUpOsl ();
d71 2
a72 1
   passFixedModel ();
d79 4
a82 8
   if (myOptImploder_->stopOpt () == 2)
      {
      shutDownOsl ();

      return;
      }

   solveOslUnAcc ();
a92 2

   shutDownOsl ();
d97 1
a97 1
void WitOsl3Mgr::startUpOsl ()
d99 1
a99 3
   EKKContext * theOslContext;
   EKKModel *   baseModel;
   FILE *       oslLogFile;
d101 2
a102 1
   theOslContext = ekk_initializeContext ();
d104 1
a104 1
   checkRetPtr (theOslContext, "ekk_initializeContext");
d106 1
a106 3
   baseModel = ekk_baseModel (theOslContext);

   checkRetPtr (baseModel, "ekk_baseModel");
d109 1
a109 1
      openFile (myOptImploder_->myOptComp ()->oslMesgFileName (), "w");
d111 1
a111 1
   retVal_ = ekk_setLogfileFilePointer (baseModel, oslLogFile);
d115 5
a119 1
   retVal_ = ekk_mset (baseModel, 1, 256, 0, 0, 9999, 0);
a122 4
   myOslModel_ = ekk_newModel (theOslContext, "LP Model for WIT");

   checkRetPtr (myOslModel_, "ekk_newModel");

d130 1
a130 1
void WitOsl3Mgr::shutDownOsl ()
d133 9
d143 14
a156 1
   theOslContext = ekk_context (myOslModel_);
d158 2
a159 1
   checkRetPtr (theOslContext, "ekk_context");
d167 8
a174 1
   ekk_endContext (theOslContext);
d351 1
a351 1
void WitOsl3Mgr::solveOslUnAcc ()
d363 11
a374 2

   postSolve ();
d395 2
d444 3
a446 1
   retVal_ = ekk_primalSimplex (myOslModel_, 3);
d448 1
a448 1
   checkRetVal ("ekk_primalSimplex");
d456 2
@


1.3
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d322 2
d330 1
a330 1
   simplex ();
d339 20
d400 1
a400 1
void WitOsl3Mgr::simplex ()
d402 1
a402 1
   retVal_ = ekk_simplex (myOslModel_, 1);
d404 1
a404 1
   checkRetVal ("ekk_simplex");
@


1.2
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d35 6
a40 5
      myLpModel_     (theLpModel),
      myOptImploder_ (theLpModel->myOptImploder ()),
      myMsgFac_      (theLpModel->myMsgFac ()),
      retVal_        (INVALID_RET_VAL),
      myOslModel_    (NULL)
d66 10
d78 2
d82 5
a86 1
   myMsgFac_ ("optSolnFoundMsg");
d150 8
a157 3
   WitVector <int>    indexRow;
   WitVector <int>    startOfEachColumn;
   WitVector <double> elements;
d159 2
d172 9
d198 3
d202 2
a204 2
      //
      // Maximize.
d309 11
d322 58
d383 10
d394 1
a394 1
   checkProbStat ();
d408 26
@


1.1
log
@Began implementation of optimizing implosion with OSL V3.
@
text
@d29 2
d33 1
a33 1
WitOsl3Mgr::WitOsl3Mgr (WitOptImploder * theOptImploder):
d35 4
a38 2
      myOptImploder_ (theOptImploder),
      myMsgFac_      (theOptImploder->myMsgFac ()),
d43 1
a43 1
         "Accelerated optimizing implosion using OSL V. 3 is not yet "
d61 10
d79 2
a80 2
   EKKModel *   baseOslModel;
   int          retVal;
d84 1
a84 2
   if (theOslContext == NULL)
      myMsgFac_ ("osl3ErrorSmsg", "ekk_initializeContext");
d86 1
a86 1
   baseOslModel  = ekk_baseModel (theOslContext);
d88 1
a88 2
   if (baseOslModel == NULL)
      myMsgFac_ ("osl3ErrorSmsg", "ekk_baseModel");
d90 2
a91 3
   retVal = ekk_setLogfileName (
      baseOslModel,
      myOptImploder_->myOptComp ()->oslMesgFileName ().myCstring ());
d93 1
a93 2
   if (retVal == 0)
      myMsgFac_ ("osl3ErrorSmsg", "ekk_setLogfileName");
d95 1
a95 1
   myOslModel_   = ekk_newModel (theOslContext, "LP Model for WIT");
d97 11
a107 2
   if (myOslModel_ == NULL)
      myMsgFac_ ("osl3ErrorSmsg", "ekk_newModel");
a114 1
   int          retVal;
d118 1
a118 2
   if (theOslContext == NULL)
      myMsgFac_ ("osl3ErrorSmsg", "ekk_context");
d120 1
a120 1
   retVal = ekk_deleteModel (myOslModel_);
d122 3
a124 2
   if (retVal != 0)
      myMsgFac_ ("osl3ErrorSmsg", "ekk_deleteModel");
d127 228
@

