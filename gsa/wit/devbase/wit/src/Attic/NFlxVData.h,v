head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.03.20.00.12.12;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2004.03.16.22.39.28;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Double Precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef NFlxVDataH
#define NFlxVDataH

//------------------------------------------------------------------------------
// Header file: "NFlxVData.h"
//
// Contains the declaration of class template NFlxVData <Elem>.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class template NFlxVData <Elem>.
//
// "New Flexible Vector Data"
// An instance of this class is designed to be owned by an NFlxVec <Elem>.
// It fulfills the following responsibilties:
//
// *  Owning the actual data for the NFlxVec.
// *  Performing low-level operations on the data.
// *  Presenting to the NFlxVec a medium-level interface to the data.
//
// The data representation of this class is designed to be as compact as
// possible with respect to memory.
//
// Implemented in NFlxVec.C.
//------------------------------------------------------------------------------

template <typename Elem> 
      class WitNFlxVData
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitNFlxVData (WitProblem *, Elem initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitNFlxVData ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void switchToVectorMode ();
         //
         // Valid only in scalar mode.
         // Switches to   vector mode.

      void switchToScalarMode ();
         //
         // Valid only in vector mode.
         // Switches to   scalar mode.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline bool vectorMode ();
         //
         // Returns true  in vector mode.
         // Returns false in scalar mode.

      inline bool scalarMode ();
         //
         // Returns true  in scalar mode.
         // Returns false in vector mode.

      inline int nPeriods ();
         //
         // Returns nPeriods for the Problem for this NFlxVData.
         // This is the length of the represented vector.

      inline Elem * myCVec ();
         //
         // Returns the c-vector representation of the vector.
         // Valid only in vector mode.

      inline Elem & myScalar ();
         //
         // Returns a ref to the scalar representation of the vector.
         // Valid only in scalar mode.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitNFlxVData);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      int myIntData_;
         //
         // This integer data compactly stores two distinct pieces of
         // information:
         //    The mode of vector representation:
         //       If myIntData_ > 0 this NFlxVData is in vector mode.
         //       If myIntData_ < 0 this NFlxVData is in scalar mode.
         //    nPeriods for the Problem, which is the length of the represented
         //       vector. This is stored as the absolute value of myIntData_.
         // Note that myIntData_ is never 0.

      union
         {
         Elem * myCVec_;
            //
            // The c-vector representation of the vector.
            // Valid only in vector mode.

         Elem myScalar_;
            //
            // The scalar representation of the vector.
            // Valid only in scalar mode.
         };
   };

//------------------------------------------------------------------------------
// Implementation of inlines.
//------------------------------------------------------------------------------

template <typename Elem> 
      inline bool WitNFlxVData <Elem>::vectorMode ()
   {
   return (myIntData_ > 0);
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline bool WitNFlxVData <Elem>::scalarMode ()
   {
   return (myIntData_ < 0);
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline int WitNFlxVData <Elem>::nPeriods ()
   {
   return
      vectorMode ()?
         + myIntData_:
         - myIntData_;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline Elem * WitNFlxVData <Elem>::myCVec ()
   {
   witAssert (vectorMode ());

   return myCVec_;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      inline Elem & WitNFlxVData <Elem>::myScalar ()
   {
   witAssert (scalarMode ());

   return myScalar_;
   }

//------------------------------------------------------------------------------

#endif
@


1.1
log
@Double Precision.
@
text
@@

