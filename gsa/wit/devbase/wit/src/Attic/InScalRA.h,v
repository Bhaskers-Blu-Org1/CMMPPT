head	1.7;
access;
symbols
	sce_4_05_20040511:1.6;
locks; strict;
comment	@ * @;


1.7
date	2005.02.24.23.23.56;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2004.04.09.19.37.57;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.25.23.28.07;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.25.21.21.58;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.26.18.59.42;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.25.18.59.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.24.19.37.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Vector PropRt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef InScalRAH
#define InScalRAH

//------------------------------------------------------------------------------
// Header file: "InScalRA.h"
//
// Contains the declaration of class InScalRA.
//------------------------------------------------------------------------------

#include <RealArg.h>

//------------------------------------------------------------------------------
// Class InScalRA
//
// "Input Scalar Real Argument"
//
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is a scalar real-valued variable passed in by value
// from the application program. Specifically, the underlying argument is of one
// of the following types:
//
//    const float
//    const double
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const InScalRA &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type const float and const double. These are the "underlying 
//       arguments".
//
// A copy of the underlying argument for an instance of this class is stored by
// the instance as a double.
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitInScalRA: public WitRealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitInScalRA (float);
         //
         // Conversion from a float underlying argument.

      WitInScalRA (double);
         //
         // Conversion from a double underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitInScalRA ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline operator double () const
         {
         return myUnderArg_;
         }

      inline double asaDbl () const
         {
         return myUnderArg_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitInScalRA);

      inline operator float () const;
         //
         // Not implemented.
         // Prevents unintended conversion to float.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const double myUnderArg_;
         //
         // The value of the underlying argument, converted (if necessary) to a
         // double.
   };

#endif
@


1.6
log
@Double Precision.
@
text
@@


1.5
log
@Double Precision.
@
text
@d82 5
d94 5
@


1.4
log
@Double Precision.
@
text
@d36 1
a36 1
//       InScalRA.
@


1.3
log
@Double Precision.
@
text
@a66 4
      WitInScalRA (const WitInScalRA &);
         //
         // Copy ctor.

d88 1
a88 3
      void operator = (const WitInScalRA &);
         //
         // Not implemented; assignment is not allowed.
@


1.2
log
@Double Precision.
@
text
@d16 1
a16 1
// Contains the declaration of class Wit::InScalRA.
d47 1
a47 4
namespace Wit
{

class InScalRA: public RealArg
d59 1
a59 1
      InScalRA (float);
d63 1
a63 1
      InScalRA (double);
d67 1
a67 1
      InScalRA (const InScalRA &);
d75 1
a75 1
      ~InScalRA ();
d92 1
a92 1
      void operator = (const InScalRA &);
a104 3

// Leaving namespace Wit.
}   
@


1.1
log
@Continued double precision.
@
text
@d44 1
a44 1
// Implemented in RealArgs.C.
@

