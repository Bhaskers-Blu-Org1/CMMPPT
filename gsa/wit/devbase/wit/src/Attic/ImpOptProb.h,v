head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2007.06.22.19.04.03;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2007.06.22.18.35.55;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.07.17.08.58;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.30.21.02.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.09.17.01.34;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.12.18.43.51;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.03.15.08.58;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.29.18.40.58;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.18.18.43.37;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ImpOptProbH
#define ImpOptProbH

//------------------------------------------------------------------------------
// Header file: "ImpOptProb.h"
//
// Contains the declaration of class ImpOptProb.
//------------------------------------------------------------------------------

#include <OptProb.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// class ImpOptProb
//
// "Implosion Optimization Problem"
//
// Class hierarchy:
//
//    ProbAssoc
//       OptProb
//          ImpOptProb
//------------------------------------------------------------------------------

class WitImpOptProb: public WitOptProb
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitImpOptProb (WitProblem *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitImpOptProb ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual         ();
      virtual void reportInfeasible ();
      virtual void reportUnbounded  ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc    (WitBoundsObj  *, myBoundsObj)
      accessFunc    (WitPrimaryObj *, myPrimaryObj)
      accessFunc    (WitObj1Obj *,    myObj1Obj)
      accessFunc    (WitRevObj *,     myRevObj)
      accessFunc    (WitInvObj *,     myInvObj)
      accessFunc    (WitServObj *,    myServObj)
      accessFunc    (WitSubObj *,     mySubObj)
      accessFunc    (WitObj2Obj *,    myObj2Obj)

      accessFunc    (FILE *,          solnFile)

      accessNonNull (WitExecPerMgr *, myExecPerMgr)

      accessWrapper (WitCompMgr *,    myCompMgr, myProblem ())

      //-----------------------------------------------------------------------
      // Derived OptProbEl storing functions.
      // Each of these functions store its argument (a newly constructed
      // instance of a derived class of OptProbEl) in the approriate place in
      // this ImpOptProb.
      //-----------------------------------------------------------------------

      void storeDerived (WitScrapVar *);
      void storeDerived (WitNonSubVar *);
      void storeDerived (WitSubVar *);
      void storeDerived (WitShipVar *);
      void storeDerived (WitSlbvVar *);
      void storeDerived (WitExecVar *);
      void storeDerived (WitStockVar *);
      void storeDerived (WitCumShipVar *);

      void storeDerived (WitResourceCon *);
      void storeDerived (WitSubCon *);
      void storeDerived (WitShipCon *);
      void storeDerived (WitSlbCon *);

      //-----------------------------------------------------------------------
      // OptProbEl look-up functions.
      //
      // Each of these functions returns the OptProbEl in this ImpOptProb
      // corresponding to its arguments, if one exists; otherwise NULL.
      //-----------------------------------------------------------------------

      WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod);
      WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod);
      WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod);
      WitShipVar *     myShipVar     (WitDemand *,    WitPeriod);
      WitExecVar *     myExecVar     (WitOperation *, WitPeriod);
      WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod);
      WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod);

      WitResourceCon * myResourceCon (WitPart *,      WitPeriod);
      WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod);
      WitShipCon *     myShipCon     (WitDemand *,    WitPeriod);

      WitSlbvVar *     mySlbvVar     (const WitBoundedVar *);
      WitSlbCon *      mySlbCon      (const WitBoundedVar *);

      //-----------------------------------------------------------------------
      // OptProbEl item printing functions.
      //
      // Each of these functions prints its argument to optProbFile ().
      //-----------------------------------------------------------------------

      void printItem (WitNode *);
      void printItem (WitBomEntry *);
      void printItem (WitSubEntry *);
      void printItem (WitDemand *);

      void printItem (const WitBoundedVar *);

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void storeBoundedVar (WitBoundedVar * theBoundedVar);
         //
         // Stores theBoundedVar.

      bool slbvVarsExist ();
         //
         // Returns true iff there are any slbvVars in this ImpOptProb.

      void printPeriod (WitPeriod t);
         //
         // Prints t to optProbFile ().

      void writeSoln (const WitString & fName);
         //
         // Prints out the primal solution from WIT data structures.
         // Writes to a file whose name is given by fName.

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables ();
         //
         // Generates all OptVars for this ImpOptProb.

      virtual void generateConstraints ();
         //
         // Generates all OptCons for this ImpOptProb.

      virtual WitOptObj * generateObjectives ();
         //
         // Generates all OptObjs for this ImpOptProb.

      virtual void postGenFixed ();

      virtual void printOptProbElHeading ();

      virtual void displayDerived ();
         //
         // Writes out the bounds counts.

      virtual void printDerived ();

      virtual void initDepVars ();
         //
         // Initializes the dependent variables, i.e., those variables whose
         // initial value depends on the initial value of other variables.

      virtual void doScreening ();

      //-----------------------------------------------------------------------
      // Private member functions relating to output of the solution to the
      // optimization problem.
      //-----------------------------------------------------------------------

      void writePeSoln (const WitOptProbEl * theOptProbEl);
         //
         // Writes the solution value of theOptProbEl, or blank if it is NULL,
         // or the value is nearly zero.
         // If the OptProbEl is a variable, the primal solution value is
         // written; if it is a constraint, the dual value is written.

      void writePartSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // parts. Optionally prints the dual solution for material balance
         // constraints.

      void writeOperationSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // Operations.

      void writeSubEntrySoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // SubEntries.

      void writeDemandSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // demands.

      void writeBoundedVarSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // BoundedVars.

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitImpOptProb);

         // The following are formats used in printing a OptProbEl.
         //
      inline static const char * itemFormat ()
         {
         return " %-12s %-12s %-12s";
         }

      inline static const char * periodDFormat ()
         {
         return " %4d";
         }

      inline static const char * periodSFormat ()
         {
         return " %4s";
         }

      template <typename Item, typename DerOptProbEl>
            void insertInto (
               WitPtrSched <Item, DerOptProbEl> & thePtrSched,
               const Item *                       theItem,
               DerOptProbEl *                     theDerOptProbEl);
         //
         // Inserts theDerOptProbEl into thePtrSched at theItem and
         // theDerOptProbEl->myPeriod (), allocating as necessary.

      template <typename Item, typename DerOptProbEl>
            DerOptProbEl * lookUp (
               WitPtrSched <Item, DerOptProbEl> & thePtrSched,
               const Item *                       theItem,
               WitPeriod                          thePer);
         //
         // Returns the DerOptProbEl in thePtrSched for theItem in thePer,
         // if any, else NULL.

      void screenImpCons ();
         //
         // Performs generic screening of the constraints of this ImpOptProb.
         // Constraints are considered in an order that facilitates
         // cascading of screening, i.e., we try to screen in an order such
         // that if screening constraint A permits constraint B to be screened,
         // then A is screened before B.

      void relaxCumShipNonNeg ();
         //
         // Relaxes redundant nonnegativity bounds on cumulative shipment
         // variables.

      void screenSlbOptProbEls ();
         //
         // Screens out the variables and constraints for soft lower bounds
         // that are not soft.

      bool positiveHardLBsExist ();
         //
         // Returns true iff myProblem  () has at least one BoundSet with a
         // positive hardLB.

      bool disallowedScrapExists ();
         //
         // Returns true iff myProblem  () has at least one Part with
         // scrapAllowed == false.

      void printBoundedVars ();
         //
         // Prints information about the BoundedVars of this ImpOptProb to
         // optProbFile ().

      //-----------------------------------------------------------------------
      // Static constant private member data.
      //-----------------------------------------------------------------------

      static const double solnEpsilon;
         //
         // Values must exceed this amount in order to appear in the solution
         // output.

      //-----------------------------------------------------------------------
      // The OptProbEl Schedules for this ImpOptProb.
      //-----------------------------------------------------------------------

      WitPtrSched <WitPart,      WitScrapVar   > myScrapVar_;
      WitPtrSched <WitBomEntry,  WitNonSubVar  > myNonSubVar_;
      WitPtrSched <WitSubEntry,  WitSubVar     > mySubVar_;
      WitPtrSched <WitDemand,    WitShipVar    > myShipVar_;
      WitPtrSched <WitBoundSet,  WitSlbvVar    > mySlbvVar_;
      WitPtrSched <WitOperation, WitExecVar    > myExecVar_;
      WitPtrSched <WitMaterial,  WitStockVar   > myStockVar_;
      WitPtrSched <WitDemand,    WitCumShipVar > myCumShipVar_;

      WitPtrSched <WitPart,      WitResourceCon> myResourceCon_;
      WitPtrSched <WitBomEntry,  WitSubCon     > mySubCon_;
      WitPtrSched <WitDemand,    WitShipCon    > myShipCon_;
      WitPtrSched <WitBoundSet,  WitSlbCon     > mySlbCon_;

      //-----------------------------------------------------------------------
      // The OptObjs for this ImpOptProb.
      //-----------------------------------------------------------------------

      WitBoundsObj  *  myBoundsObj_;
      WitPrimaryObj * myPrimaryObj_;
      WitObj1Obj    *    myObj1Obj_;
      WitRevObj     *     myRevObj_;
      WitInvObj     *     myInvObj_;
      WitServObj    *    myServObj_;
      WitSubObj     *     mySubObj_;
      WitObj2Obj    *    myObj2Obj_;

      //-----------------------------------------------------------------------
      // Other private member data.
      //-----------------------------------------------------------------------

      WitList <WitBoundedVar> myBoundedVars_;
         //
         // The list of all BoundedVars in this ImpOptProb.

      int nSlbvVars_;
         //
         // # soft lower bound violation variables.

      FILE * solnFile_;
         //
         // Solution output file.

      WitExecPerMgr * myExecPerMgr_;
         //
         // The ExecPerMgr owned by this ImpOptProb, if any; otherwise NULL.
   };

#endif
@


1.8
log
@Stochastic Implosion
@
text
@@


1.7
log
@Stochastic Implosion
@
text
@a19 1
#include <Problem.h>
@


1.6
log
@Stochastic Implosion
@
text
@d43 1
a43 1
      WitImpOptProb (WitOptImploder *);
@


1.5
log
@[disallowing scrap]
@
text
@d63 8
a70 8
      accessFunc (WitBoundsObj  *, myBoundsObj)
      accessFunc (WitPrimaryObj *, myPrimaryObj)
      accessFunc (WitObj1Obj *,    myObj1Obj)
      accessFunc (WitRevObj *,     myRevObj)
      accessFunc (WitInvObj *,     myInvObj)
      accessFunc (WitServObj *,    myServObj)
      accessFunc (WitSubObj *,     mySubObj)
      accessFunc (WitObj2Obj *,    myObj2Obj)
d72 1
a72 1
      accessFunc (FILE *,          solnFile)
d74 1
a74 1
      accessWrapper (WitCompMgr *, myCompMgr, myProblem ())
d76 1
d173 2
d357 4
@


1.4
log
@External opt implosion.
@
text
@d55 1
a55 2
      virtual bool needDual ();

d57 1
a57 2

      virtual void reportUnbounded ();
d289 5
@


1.3
log
@App controlled opt implosion.
@
text
@a142 4
      void doScreening ();
         //
         // Performs screening of constraints and variables.

d187 2
@


1.2
log
@App controlled opt implosion.
@
text
@d125 1
a125 1
      // Each of these functions prints its argument to modelFile ().
d153 1
a153 1
         // Prints t to modelFile ().
a159 5
      void formModeledSoln ();
         //
         // Forms the modeled part of the comprehensive implosion solution, by
         // copying the values of the optimal primal solution.

d192 2
a193 1
      // Private member functions relating to output of Opt Model solution.
d196 1
a196 1
      void writeMeSoln (const WitOptProbEl * theOptProbEl);
d296 1
a296 1
         // modelFile ().
@


1.1
log
@App controlled opt implosion.
@
text
@d143 1
a143 1
      void screenModel ();
@

