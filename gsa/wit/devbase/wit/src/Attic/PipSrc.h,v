head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2003.12.19.19.01.02;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.16.16.18.03;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.09.21.31.51;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.01.14.17.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Continued implementation of PIP.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipSrcH
#define PipSrcH

//------------------------------------------------------------------------------
// Header file: "PipSrc.h"
//
// Contains the declaration of class template Pip::Src <SrcComp>.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class template Pip::Src <SrcComp>
//
// "Post-Implosion Pegging Source"
// Represents a Component and Period at which some attribute of the Component is
// to be pegged.
// SrcComp is the Component class that owns the pegged attribute.
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

namespace WitPip
{

template <typename SrcComp> 
      class Src
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      Src (SrcComp *, WitPeriod);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~Src ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (SrcComp *, mySrcComp)
      accessFunc (WitPeriod, myPer)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (Src);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      SrcComp * const mySrcComp_;
         //
         // The SrcComp represented by this Src.

      const WitPeriod myPer_;
         //
         // The Period represented by this Src.
   };

// Leaving namespace Pip.
}   

#endif
@


1.6
log
@Continued implementation of PIP.
@
text
@@


1.5
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class template PipSrc <SrcComp>.
d22 1
a22 1
// Class template PIP::PipSrc <SrcComp>
d32 1
a32 1
namespace WitPIP
d36 1
a36 1
      class WitPipSrc
d44 1
a44 1
      WitPipSrc (SrcComp *, WitPeriod);
d50 1
a50 1
      ~WitPipSrc ();
d65 1
a65 1
      noCopyCtorAssign (WitPipSrc);
d73 1
a73 1
         // The SrcComp represented by this PipSrc.
d77 1
a77 1
         // The Period represented by this PipSrc.
d80 1
a80 1
// Leaving namespace PIP
@


1.4
log
@Continued implementation of PIP.
@
text
@d22 1
a22 1
// Class template PipSrc <SrcComp>
d32 3
d79 3
@


1.3
log
@Continued implementation of post-implosion pegging.
@
text
@d33 1
a33 1
      class WitPipSrc: public WitUtil
@


1.2
log
@Continued implementation of post-implosion pegging.
@
text
@d16 1
a16 1
// Contains the declaration of class PipSrc.
d22 1
a22 1
// Class PipSrc
d25 3
a27 1
// Represents a Part and Period at which supplyVol is pegged.
d32 2
a33 1
class WitPipSrc: public WitUtil
d41 1
a41 1
      WitPipSrc (WitPart *, WitPeriod);
d53 1
a53 1
      accessFunc (WitPart *, myPart)
d68 1
a68 1
      WitPart * const myPart_;
d70 1
a70 1
         // The Part represented by this PipSrc.
@


1.1
log
@Continued implementation of post-implosion pegging.
@
text
@d26 2
@

