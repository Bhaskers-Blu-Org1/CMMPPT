head	1.53;
access;
symbols
	EndRw-branch:1.40.0.2
	Root-of-EndRw:1.40
	rwToStl:1.37.0.2;
locks; strict;
comment	@ * @;


1.53
date	2003.03.06.20.28.23;	author rjw;	state dead;
branches;
next	1.52;

1.52
date	2003.02.14.20.13.02;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2003.01.02.23.40.50;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2003.01.02.22.18.49;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2002.12.14.00.55.48;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2002.12.13.20.24.38;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2002.12.13.00.07.57;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2002.12.06.20.38.25;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2002.12.04.23.37.53;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2002.12.04.22.38.57;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2002.12.04.19.17.58;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2002.12.03.00.43.29;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2002.11.26.23.28.50;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2002.11.22.21.18.00;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2002.11.21.22.53.59;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2002.11.15.20.27.13;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2002.10.30.23.47.32;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2002.09.26.19.05.32;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2002.07.24.18.38.11;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2002.07.22.19.33.59;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2002.07.19.19.12.05;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2002.07.16.15.05.58;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2002.07.15.19.34.03;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2002.07.12.23.36.15;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2002.07.11.22.48.30;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.07.09.20.49.50;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.07.09.19.52.36;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.07.08.18.15.38;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.07.02.21.53.08;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2002.07.02.19.20.59;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.07.01.20.15.32;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2002.06.28.19.40.16;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2002.06.24.19.05.58;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2002.06.21.21.52.21;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2002.06.21.18.13.44;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.19.22.41.15;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.19.18.53.27;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.18.21.42.06;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.18.17.54.45;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.17.22.08.18;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.17.17.29.27;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.13.22.38.31;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.13.21.50.14;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.12.17.18.42;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.10.21.55.15;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.07.23.45.11;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.06.20.54.52;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.06.18.53.42;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.24.23.00.08;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.21.19.10.28;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.17.21.45.05;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.16.23.32.10;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.13.21.31.42;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.53
log
@Continued implementation of proportionate routing.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "SglSrc.C"
//
// Contains the implementation of the following classes:
//
//    SglSrcSite
//    PmrSsSite
//    CmrSsSite
//    SglSrcCand
//    PmrSsCand
//    CmrSsCand
//------------------------------------------------------------------------------

#include <SglSrcSite.h>
#include <SglSrcCand.h>
#include <Selector.h>
#include <MrMgr.h>
#include <HeurAtor.h>
#include <Part.h>
#include <BopEntry.h>
#include <BomEntry.h>
#include <ConsEnt.h>
#include <SubEntry.h>
#include <Opn.h>
#include <Global.h>
#include <CompMgr.h>

//------------------------------------------------------------------------------
// Implementation of class SglSrcSite.
//------------------------------------------------------------------------------

WitSglSrcSite::~WitSglSrcSite ()
   {
   deleteContents (myCands_);
   }

//------------------------------------------------------------------------------

bool WitSglSrcSite::nextCandIsSglSrc ()
   {
   stronglyAssert (nextCand_ != NULL);

   return (nextCand_ == incumbUniqueCand_);
   }

//------------------------------------------------------------------------------
    
void WitSglSrcSite::selectNext ()
   {
   stronglyAssert (nextCand_ != NULL);

   selCand_  = nextCand_;
   nextCand_ = NULL;

   nextCandItr_.advance (nextCand_);

   altered_  = true;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::applySel ()
   {
   if (sglSrcMode ())
      selCand_->applyToMR ();
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::resumeMS ()
   {
   selCand_ = NULL;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::initCmqFixed ()
   {
   witAssert (curPcIdx_ >= 0);

   curPcIdx_      = -1;
   curVisited_    = false;
   curUniqueCand_ = NULL;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::recordVisit (WitBillEntry * theBillEnt, int thePcIdx)
   {
   WitSglSrcCand * flowCand;

   flowCand = myCandFor (theBillEnt);

   if (not curVisited_)
      curUniqueCand_ = flowCand;

   curVisited_ = true;

   if (curUniqueCand_ != NULL)
      if (flowCand != curUniqueCand_)
         curUniqueCand_ = NULL;

   if (mySelector_->myHeurAtor ()->tempMode ())
      return;

   witAssert (thePcIdx >= 0);

   curPcIdx_ = thePcIdx;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::resetIncumb ()
   {
   witAssert (incumbPcIdx_ >= 0);

   incumbPcIdx_      = -1;
   incumbUniqueCand_ = NULL;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::saveCurAsIncumb ()
   {
   witAssert (incumbPcIdx_ == -1);
   witAssert (curPcIdx_    >=  0);

   incumbPcIdx_      = curPcIdx_;
   incumbUniqueCand_ = curUniqueCand_;
   }

//------------------------------------------------------------------------------

bool WitSglSrcSite::expProhibited (WitPeriod thePer)
   {
   if (sglSrcMode ())
      if (not selCand_->valid (thePer))
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::reset ()
   {
   selCand_  = NULL;
   nextCand_ = NULL;

   nextCandItr_.attachTo (myCands_);

   nextCandItr_.advance (nextCand_);

   altered_  = false;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::prtSel (const char * text)
   {
   if (myGlobalComp ()->selPrintLevel () < 2)
      return;

   fprintf (msgFile (),
      "\n"
      "-------------------------------------\n"
      "-> Single-Source Selection %s\n"
      "-------------------------------------\n"
      "\n",
      text);

   prtID ();

   selCand_->prtAsSel ();
   }

//------------------------------------------------------------------------------

WitSglSrcSite::WitSglSrcSite (WitSelector * theSelector):
      WitProbAssoc      (theSelector->myProblem ()),

      mySelector_       (theSelector),
      myCands_          (myProblem ()),
      selCand_          (NULL),
      nextCand_         (NULL),
      nextCandItr_      (),
      altered_          (false),
      curPcIdx_         (-1),
      incumbPcIdx_      (-1),
      curVisited_       (false),
      curUniqueCand_    (NULL),
      incumbUniqueCand_ (NULL)
   {
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::setup ()
   {
   buildCands (myCands_);

   reset ();
   }

//------------------------------------------------------------------------------

WitSglSrcCand * WitSglSrcSite::myCandFor (WitBillEntry * theBillEnt)
   {
   WitObjStItr <WitSglSrcCand> theItr;
   WitSglSrcCand *             theCand;

   theItr.attachTo (myCands_);

   while (theItr.advance (theCand))
      if (theCand->matches (theBillEnt))
         return theCand;

   stronglyAssert (false);
      //
      // Error: No match found.

   return NULL;
   }

//------------------------------------------------------------------------------
// Implementation of class PmrSsSite.
//------------------------------------------------------------------------------

WitPmrSsSite::WitPmrSsSite (WitPart * thePart, WitSelector * theSelector):

      WitSglSrcSite (theSelector),

      myPart_       (thePart)
   {
   setup ();
   }

//------------------------------------------------------------------------------

int WitPmrSsSite::heightIdx ()
   {
   return (myPart_->sortedPartIndex () * 2) + 1;
   }

//------------------------------------------------------------------------------

WitPmrSsSite::~WitPmrSsSite ()
   {
   }

//------------------------------------------------------------------------------

void WitPmrSsSite::buildCands (WitObjStack <WitSglSrcCand> & theCands)
   {
   WitBopEntStack theBopEnts (myProblem ());
   WitBopEntry *  theBopEnt;

   mySelector ()->myPmrMgr ()->getCandBopEnts (myPart_, theBopEnts);

   theCands.clear ();

   while (theBopEnts.pop (theBopEnt))
      theCands.push (new WitPmrSsCand (theBopEnt, mySelector ()));

   theCands.reverse ();
   }

//------------------------------------------------------------------------------

void WitPmrSsSite::prtID ()
   {
   fprintf (msgFile (), "   Part %s\n", myPart_->partName ().myCstring ());
   }

//------------------------------------------------------------------------------
// Implementation of class CmrSsSite.
//------------------------------------------------------------------------------

WitCmrSsSite::WitCmrSsSite (WitBomEntry * theBomEnt, WitSelector * theSelector):

      WitSglSrcSite (theSelector),

      myBomEnt_     (theBomEnt)
   {
   setup ();
   }

//------------------------------------------------------------------------------

int WitCmrSsSite::heightIdx ()
   {
   int            minIdx;
   WitOperation * theOpn;
   WitBopEntry *  theBopEnt;

   minIdx = myCompMgr ()->nParts ();

   theOpn = myBomEnt_->myOperation ();

   forEachEl (theBopEnt, theOpn->bop ())
      setToMin (minIdx, theBopEnt->myPart ()->sortedPartIndex ());

   return (minIdx * 2);
   }

//------------------------------------------------------------------------------

WitCmrSsSite::~WitCmrSsSite ()
   {
   }

//------------------------------------------------------------------------------

void WitCmrSsSite::buildCands (WitObjStack <WitSglSrcCand> & theCands)
   {
   WitConsEntStack theConsEnts (myProblem ());
   WitConsEntry *  theConsEnt;

   mySelector ()->myCmrMgr ()->getCandConsEnts (myBomEnt_, theConsEnts);

   theCands.clear ();

   while (theConsEnts.pop (theConsEnt))
      theCands.push (new WitCmrSsCand (theConsEnt, mySelector ()));

   theCands.reverse ();
   }

//------------------------------------------------------------------------------

void WitCmrSsSite::prtID ()
   {
   fprintf (msgFile (),
      "   BomEntry: %s #%d\n",
      myBomEnt_->myOperationName ().myCstring (),
      myBomEnt_->localIndex      ());
   }

//------------------------------------------------------------------------------
// Implementation of class SglSrcCand.
//------------------------------------------------------------------------------

WitSglSrcCand::~WitSglSrcCand ()
   {
   }

//------------------------------------------------------------------------------

WitSglSrcCand::WitSglSrcCand (WitSelector * theSelector):
      WitProbAssoc (theSelector->myProblem ()),

      mySelector_  (theSelector)
   {
   }

//------------------------------------------------------------------------------
// Implementation of class PmrSsCand.
//------------------------------------------------------------------------------

WitPmrSsCand::WitPmrSsCand (WitBopEntry * theBopEnt, WitSelector * theSelector):

      WitSglSrcCand (theSelector),

      myBopEnt_     (theBopEnt)
   {
   }

//------------------------------------------------------------------------------

WitPmrSsCand::~WitPmrSsCand ()
   {
   }

//------------------------------------------------------------------------------

bool WitPmrSsCand::valid (WitPeriod expPer)
   {
   return mySelector ()->myPmrMgr ()->valid (myBopEnt_, expPer);
   }

//------------------------------------------------------------------------------

void WitPmrSsCand::applyToMR ()
   {
   WitPmrMgr *   thePmrMgr;
   WitPeriod     expPer;
   WitBopEntry * theBopEnt;

   thePmrMgr = mySelector ()->myPmrMgr ();

   forEachPeriod (expPer, mySelector ()->myProblem ())
      if (thePmrMgr->valid (myBopEnt_, expPer))
         {
         theBopEnt = thePmrMgr->selBopEntry (myBopEnt_->myPart (), expPer);

         if (theBopEnt != myBopEnt_)
            thePmrMgr->select (myBopEnt_, expPer);
         }
   }

//------------------------------------------------------------------------------

void WitPmrSsCand::prtAsSel ()
   {
   fprintf (msgFile (),
      "   Selected BopEntry: %s #%d\n",
      myBopEnt_->myOperationName ().myCstring (),
      myBopEnt_->localIndex      ());
   }

//------------------------------------------------------------------------------

bool WitPmrSsCand::matches (WitBillEntry * theBillEnt)
   {
   return (theBillEnt == myBopEnt_);
   }

//------------------------------------------------------------------------------
// Implementation of class CmrSsCand.
//------------------------------------------------------------------------------

WitCmrSsCand::WitCmrSsCand (
         WitConsEntry * theConsEnt,
         WitSelector *  theSelector):

      WitSglSrcCand (theSelector),

      myConsEnt_    (theConsEnt)
   {
   }

//------------------------------------------------------------------------------

WitCmrSsCand::~WitCmrSsCand ()
   {
   }

//------------------------------------------------------------------------------

bool WitCmrSsCand::valid (WitPeriod execPer)
   {
   return mySelector ()->myCmrMgr ()->valid (myConsEnt_, execPer);
   }

//------------------------------------------------------------------------------

void WitCmrSsCand::applyToMR ()
   {
   WitCmrMgr *    theCmrMgr;
   WitPeriod      execPer;
   WitConsEntry * theConsEnt;

   theCmrMgr = mySelector ()->myCmrMgr ();

   forEachPeriod (execPer, mySelector ()->myProblem ())
      if (theCmrMgr->valid (myConsEnt_, execPer))
         {
         theConsEnt =
            theCmrMgr->selConsEntry (myConsEnt_->myBomEnt (), execPer);

         if (theConsEnt != myConsEnt_)
            theCmrMgr->select (myConsEnt_, execPer);
         }
   }

//------------------------------------------------------------------------------

void WitCmrSsCand::prtAsSel ()
   {
   WitSubEntry * theSub;

   myConsEnt_->getSubEntry (theSub);

   if (theSub == NULL)
      fprintf (msgFile (),
         "   Selected ConsEntry: Itself\n");
   else
      fprintf (msgFile (),
         "   Selected ConsEntry: SubEntry #%d\n", theSub->localIndex ());
   }

//------------------------------------------------------------------------------

bool WitCmrSsCand::matches (WitBillEntry * theBillEnt)
   {
   return (theBillEnt == myConsEnt_);
   }
@


1.52
log
@Continued implementation of proportionate routing.
@
text
@@


1.51
log
@Internal changes.
@
text
@d189 1
a189 1
      WitProbAssoc      (theSelector),
d359 1
a359 1
      WitProbAssoc (theSelector),
@


1.50
log
@Internal changes.
@
text
@d103 1
a103 1
   if (! curVisited_)
d146 1
a146 1
      if (! selCand_->valid (thePer))
@


1.49
log
@Continued implementation of single-source by the new algorithm.
@
text
@d48 1
a48 1
WitBoolean WitSglSrcSite::nextCandIsSglSrc ()
d66 1
a66 1
   altered_  = witTRUE;
d91 1
a91 1
   curVisited_    = witFALSE;
d106 1
a106 1
   curVisited_ = witTRUE;
d143 1
a143 1
WitBoolean WitSglSrcSite::expProhibited (WitPeriod thePer)
d147 1
a147 1
         return witTRUE;
d149 1
a149 1
   return witFALSE;
d163 1
a163 1
   altered_  = witFALSE;
d196 1
a196 1
      altered_          (witFALSE),
d199 1
a199 1
      curVisited_       (witFALSE),
d227 1
a227 1
   stronglyAssert (witFALSE);
d385 1
a385 1
WitBoolean WitPmrSsCand::valid (WitPeriod expPer)
d422 1
a422 1
WitBoolean WitPmrSsCand::matches (WitBillEntry * theBillEnt)
d449 1
a449 1
WitBoolean WitCmrSsCand::valid (WitPeriod execPer)
d493 1
a493 1
WitBoolean WitCmrSsCand::matches (WitBillEntry * theBillEnt)
@


1.48
log
@Continued implementation of single-source by the new algorithm.
@
text
@d73 2
a74 1
   selCand_->applyToMR ();
@


1.47
log
@Continued implementation of single-source by the new algorithm.
@
text
@d169 10
a178 8
   if (myGlobalComp ()->selPrintLevel () >= 2)
      fprintf (msgFile (),
         "\n"
         "-------------------------------------\n"
         "-> Single-Source Selection %s\n"
         "-------------------------------------\n"
         "\n",
         text);
a262 1
   WitPmrMgr *    thePmrMgr;
d266 1
a266 3
   thePmrMgr = mySelector ()->myPmrMgr ();

   thePmrMgr->getCandBopEnts (myPart_, theBopEnts);
d271 1
a271 1
      theCands.push (new WitPmrSsCand (theBopEnt, thePmrMgr));
a323 1
   WitCmrMgr *     theCmrMgr;
d327 1
a327 3
   theCmrMgr = mySelector ()->myCmrMgr ();

   theCmrMgr->getCandConsEnts (myBomEnt_, theConsEnts);
d332 1
a332 1
      theCands.push (new WitCmrSsCand (theConsEnt, theCmrMgr));
d357 4
a360 2
WitSglSrcCand::WitSglSrcCand (WitProblem * theProblem):
      WitProbAssoc (theProblem)
d368 1
a368 1
WitPmrSsCand::WitPmrSsCand (WitBopEntry * theBopEnt, WitPmrMgr * thePmrMgr):
d370 1
a370 1
      WitSglSrcCand (theBopEnt->myProblem ()),
d372 1
a372 2
      myBopEnt_     (theBopEnt),
      myPmrMgr_     (thePmrMgr)
d386 1
a386 1
   return myPmrMgr_->valid (myBopEnt_, expPer);
d393 1
d397 4
a400 2
   forEachPeriod (expPer, myPmrMgr_->myProblem ())
      if (myPmrMgr_->valid (myBopEnt_, expPer))
d402 1
a402 1
         theBopEnt = myPmrMgr_->selBopEntry (myBopEnt_->myPart (), expPer);
d405 1
a405 1
            myPmrMgr_->select (myBopEnt_, expPer);
d430 3
a432 1
WitCmrSsCand::WitCmrSsCand (WitConsEntry * theConsEnt, WitCmrMgr * theCmrMgr):
d434 1
a434 1
      WitSglSrcCand (theConsEnt->myProblem ()),
d436 1
a436 2
      myConsEnt_    (theConsEnt),
      myCmrMgr_     (theCmrMgr)
d450 1
a450 1
   return myCmrMgr_->valid (myConsEnt_, execPer);
d457 1
d461 4
a464 2
   forEachPeriod (execPer, myCmrMgr_->myProblem ())
      if (myCmrMgr_->valid (myConsEnt_, execPer))
d467 1
a467 1
            myCmrMgr_->selConsEntry (myConsEnt_->myBomEnt (), execPer);
d470 1
a470 1
            myCmrMgr_->select (myConsEnt_, execPer);
@


1.46
log
@Continued implementation of single-source by the new algorithm.
@
text
@d27 1
d47 2
a48 2
    
void WitSglSrcSite::selectUniqueCand ()
d50 1
a50 2
   witAssert (selCand_          == NULL);
   witAssert (incumbUniqueCand_ != NULL);
d52 1
a52 2
   while (selCand_ != incumbUniqueCand_)
      selectNext ();
d56 1
a56 1

d90 1
d98 6
a103 1
   WitSglSrcCand * matchCand;
d105 1
a105 1
   matchCand = myCandFor (theBillEnt);
d107 3
a109 2
   if (curPcIdx_ == -1)
      curUniqueCand_ = matchCand;
d111 2
a112 2
   else if (matchCand != curUniqueCand_)
      curUniqueCand_ = NULL;
d185 2
a186 2
WitSglSrcSite::WitSglSrcSite (WitProblem * theProblem):
      WitProbAssoc      (theProblem),
d188 1
d196 1
d204 1
a204 1
void WitSglSrcSite::setup (WitSelector * theSelector)
d206 1
a206 1
   buildCands (myCands_, theSelector);
d237 1
a237 1
      WitSglSrcSite (thePart->myProblem ()),
d241 1
a241 1
   setup (theSelector);
d259 1
a259 3
void WitPmrSsSite::buildCands (
      WitObjStack <WitSglSrcCand> & theCands,
      WitSelector *                 theSelector)
d265 1
a265 1
   thePmrMgr = theSelector->myPmrMgr ();
d290 1
a290 1
      WitSglSrcSite (theBomEnt->myProblem ()),
d294 1
a294 1
   setup (theSelector);
d323 1
a323 3
void WitCmrSsSite::buildCands (
      WitObjStack <WitSglSrcCand> & theCands,
      WitSelector *                 theSelector)
d329 1
a329 1
   theCmrMgr = theSelector->myCmrMgr ();
@


1.45
log
@Continued implementation of single-source with the new algorithm.
@
text
@d47 1
a47 1
void WitSglSrcSite::selectUniqueSel ()
d49 2
a50 2
   witAssert (selCand_         == NULL);
   witAssert (incumbUniqueSel_ != NULL);
d52 2
a53 2
   selCand_ = incumbUniqueSel_;
   altered_ = witTRUE;
d60 1
a60 1
   witAssert (nextCand_ != NULL);
d90 2
a91 2
   curPcIdx_     = -1;
   curUniqueSel_ = NULL;
d103 1
a103 1
      curUniqueSel_ = matchCand;
d105 2
a106 2
   else if (matchCand != curUniqueSel_)
      curUniqueSel_ = NULL;
d119 2
a120 2
   incumbPcIdx_     = -1;
   incumbUniqueSel_ = NULL;
d125 1
a125 1
void WitSglSrcSite::saveAsIncumbent ()
d130 2
a131 2
   incumbPcIdx_     = curPcIdx_;
   incumbUniqueSel_ = curUniqueSel_;
d180 1
a180 1
      WitProbAssoc     (theProblem),
d182 9
a190 9
      myCands_         (myProblem ()),
      selCand_         (NULL),
      nextCand_        (NULL),
      nextCandItr_     (),
      altered_         (witFALSE),
      curPcIdx_        (-1),
      incumbPcIdx_     (-1),
      curUniqueSel_    (NULL),
      incumbUniqueSel_ (NULL)
@


1.44
log
@Continued implementation of single-source by the new algorithm.
@
text
@d53 1
a62 1

d66 2
a149 1

d155 2
d186 1
@


1.43
log
@Continued implementation of single-source with the new algorithm.
@
text
@d88 1
a88 2
   curPcIdx_ = -1;

d98 6
a103 11
   if (theBillEnt != NULL)
      {
      matchCand = myCandFor (theBillEnt);

      if (curPcIdx_ == -1)
         curUniqueSel_ = matchCand;

      else if (matchCand != curUniqueSel_)
         curUniqueSel_ = NULL;
      }
   else
d213 2
@


1.42
log
@Continued implementation of single-source by the new algorithm.
@
text
@d46 10
d84 1
a84 1
void WitSglSrcSite::setCurPcIdx (int theVal)
d86 5
a90 1
   curPcIdx_ = theVal;
d95 25
a119 1
void WitSglSrcSite::resetIncumbPcIdx ()
d123 2
a124 1
   incumbPcIdx_ = -1;
d134 2
a135 1
   incumbPcIdx_ = curPcIdx_;
d169 3
a171 3
         "------------------------------------\n"
         "-> Single-Source Selection %s:\n"
         "------------------------------------\n"
d183 1
a183 1
      WitProbAssoc (theProblem),
d185 8
a192 6
      myCands_     (myProblem ()),
      selCand_     (NULL),
      nextCand_    (NULL),
      nextCandItr_ (),
      curPcIdx_    (-1),
      incumbPcIdx_ (-1)
d206 18
d416 7
d480 7
@


1.41
log
@Continued implementation of single-source by the new algorithm.
@
text
@d32 1
d34 1
d74 26
d148 3
a150 1
      nextCandItr_ ()
d178 7
d229 18
@


1.40
log
@Continued implementation of single-source with the new algorithm.
Fixed a null pointer bug in single-source with the old algorithm.
@
text
@d17 1
d20 1
d29 3
d72 1
a72 1
WitBoolean WitSglSrcSite::flowProhibited (WitPeriod thePer)
d182 51
d277 2
a278 1
   WitPeriod expPer;
d282 4
a285 1
         if (myPmrMgr_->selBopEntry (myBopEnt_->myPart (), expPer) != myBopEnt_)
d287 1
d298 60
@


1.39
log
@Continued implementation of single-source with the new algorithm.
@
text
@d53 1
a53 1
void WitSglSrcSite::applySsSel ()
d67 11
d212 7
d224 3
a226 6
      {
      stronglyAssert (myPmrMgr_->valid (myBopEnt_, expPer));

      if (myPmrMgr_->selBopEntry (myBopEnt_->myPart (), expPer) != myBopEnt_)
         myPmrMgr_->select (myBopEnt_, expPer);
      }
@


1.38
log
@Began implementation of the new single-source algorithm.
@
text
@d14 5
d20 203
@


1.37
log
@Fixed the "interference bug" in Single-Source.
@
text
@a13 7
//
//    SglSrcSite
//    PmrSsSite
//    CmrSsSite
//    SglSrcCand
//    PmrSsCand
//    CmrSsCand
a14 430

#include <HeurAtor.h>
#include <Selector.h>
#include <MrMgr.h>
#include <SglSrcSite.h>
#include <SglSrcCand.h>
#include <Part.h>
#include <BopEntry.h>
#include <Global.h>

//------------------------------------------------------------------------------
// Implementation of class SglSrcSite.
//------------------------------------------------------------------------------

WitSglSrcSite::~WitSglSrcSite ()
   {
   deleteContents (mySsCands_);
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::init (WitBoolean forReinit)
   {
   selSsCandItr_.attachTo (mySsCands_);

   if (! selSsCandItr_.advance (selSsCand_))
      selSsCand_ = NULL;

   printInit (forReinit);
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::alterSel ()
   {
   witAssert (sglSrcMode ());

   if (! selSsCandItr_.advance (selSsCand_))
      switchToMS ();

   prtAlter ();
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::switchToMS ()
   {
   selSsCand_ = NULL;

   nonMS_.setToScalar (witFALSE);
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::applySsSel ()
   {
   WitPeriod thePer;

   witAssert (sglSrcMode ());

   nonMS_.setToScalar (witFALSE);

   forEachPeriod (thePer, myProblem ())
      if (selSsCand_->valid (thePer))
         if (! selSsCand_->matchesMrSel (thePer))
            {
            nonMS_[thePer] = witTRUE;

            selSsCand_->selectForMr (thePer);
            }
   }

//------------------------------------------------------------------------------

WitBoolean WitSglSrcSite::hasMisMatch (WitPeriod thePer)
   {
   if (sglSrcMode ())
      if (! selSsCand_->matchesMrSel (thePer))
         return witTRUE;

   return witFALSE;
   }

//------------------------------------------------------------------------------

WitBoolean WitSglSrcSite::altered ()
   {
   return (selSsCand_ != mySsCands_.firstObject ());
   }

//------------------------------------------------------------------------------

WitSglSrcSite::WitSglSrcSite (WitProblem * theProblem):
      WitProbAssoc  (theProblem),

      mySsCands_    (myProblem ()),
      selSsCandItr_ (),
      selSsCand_    (NULL),
      nonMS_        (myProblem (), witFALSE)
   {
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::setup (WitSelector * theSelector)
   {
   buildSsCands (mySsCands_, theSelector);

   init (witFALSE);
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::printInit (WitBoolean forReinit)
   {
   if (myGlobalComp ()->selPrintLevel () < 2)
      return;

   if (sglSrcMode ())
      {
      if (forReinit)
         fprintf (msgFile (),
            "\n"
            "---------------------------------------------\n"
            "-> Restoring Initial Single-Source Selection:\n"
            "---------------------------------------------\n"
            "\n");
      else
         fprintf (msgFile (),
            "\n"
            "-----------------------------------\n"
            "-> Initial Single-Source Selection:\n"
            "-----------------------------------\n"
            "\n");

      prtID ();

      selSsCand_->prtAsSel ();
      }
   else
      {
      if (forReinit)
         fprintf (msgFile (),
            "\n"
            "------------------------------------------\n"
            "-> Restoring to Initial Multi-Source Mode:\n"
            "------------------------------------------\n"
            "\n");
      else
         fprintf (msgFile (),
            "\n"
            "-------------------------------------\n"
            "-> Initializing in Multi-Source Mode:\n"
            "-------------------------------------\n"
            "\n");

      prtID ();
      }
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::prtAlter ()
   {
   if (myGlobalComp ()->selPrintLevel () < 2)
      return;

   if (sglSrcMode ())
      {
      fprintf (msgFile (),
         "\n"
         "------------------------------------\n"
         "-> Altering Single-Source Selection:\n"
         "------------------------------------\n"
         "\n");

      prtID ();

      selSsCand_->prtAsSel ();
      }
   else
      {
      fprintf (msgFile (),
         "\n"
         "----------------------------------\n"
         "-> Switching to Multi-Source Mode:\n"
         "----------------------------------\n"
         "\n");

      prtID ();
      }
   }

//------------------------------------------------------------------------------
// Implementation of class PmrSsSite.
//------------------------------------------------------------------------------

WitPmrSsSite::WitPmrSsSite (WitPart * thePart, WitSelector * theSelector):

      WitSglSrcSite (thePart->myProblem ()),

      myPart_       (thePart)
   {
   setup (theSelector);
   }

//------------------------------------------------------------------------------

WitPmrSsSite::~WitPmrSsSite ()
   {
   }

//------------------------------------------------------------------------------

void WitPmrSsSite::buildSsCands (
      WitObjStack <WitSglSrcCand> & theSsCands,
      WitSelector *                 theSelector)
   {
   WitBopEntStack  theBopEnts (myProblem ());
   WitBopEntry *   theBopEnt;
   WitSglSrcCand * theSsCand;

   theSelector->myPmrMgr ()->getCandBopEnts (myPart_, theBopEnts);

   theSsCands.clear ();

   while (theBopEnts.pop (theBopEnt))
      {
      theSsCand = new WitPmrSsCand (theBopEnt, theSelector->myPmrMgr ());

      theSsCands.push (theSsCand);
      }

   theSsCands.reverse ();
   }

//------------------------------------------------------------------------------

void WitPmrSsSite::prtID ()
   {
   fprintf (msgFile (), "   Part %s\n", myPart_->partName ().myCstring ());
   }

//------------------------------------------------------------------------------
// Implementation of class CmrSsSite.
//------------------------------------------------------------------------------

WitCmrSsSite::WitCmrSsSite (WitBomEntry * theBomEnt):

      WitSglSrcSite (theBomEnt->myProblem ()),

      myBomEnt_     (theBomEnt)
   {
   }

//------------------------------------------------------------------------------

WitCmrSsSite::WitCmrSsSite (WitBomEntry * theBomEnt, WitSelector * theSelector):

      WitSglSrcSite (theBomEnt->myProblem ()),

      myBomEnt_     (theBomEnt)
   {
   setup (theSelector);
   }

//------------------------------------------------------------------------------

WitCmrSsSite::~WitCmrSsSite ()
   {
   }

//------------------------------------------------------------------------------

void WitCmrSsSite::buildSsCands (
      WitObjStack <WitSglSrcCand> & theSsCands,
      WitSelector *                 theSelector)
   {
   WitConsEntStack theConsEnts (myProblem ());
   WitConsEntry *  theConsEnt;
   WitSglSrcCand * theSsCand;

   theSelector->myCmrMgr ()->getCandConsEnts (myBomEnt_, theConsEnts);

   theSsCands.clear ();

   while (theConsEnts.pop (theConsEnt))
      {
      theSsCand = new WitCmrSsCand (theConsEnt, theSelector->myCmrMgr ());

      theSsCands.push (theSsCand);
      }

   theSsCands.reverse ();
   }

//------------------------------------------------------------------------------

void WitCmrSsSite::prtID ()
   {
   fprintf (msgFile (),
      "   BomEntry: %s #%d\n",
      myBomEnt_->myOperationName ().myCstring (),
      myBomEnt_->localIndex      ());
   }

//------------------------------------------------------------------------------
// Implementation of class SglSrcCand.
//------------------------------------------------------------------------------

WitSglSrcCand::~WitSglSrcCand ()
   {
   }

//------------------------------------------------------------------------------

WitSglSrcCand::WitSglSrcCand (WitProblem * theProblem):
      WitProbAssoc (theProblem)
   {
   }

//------------------------------------------------------------------------------
// Implementation of class PmrSsCand.
//------------------------------------------------------------------------------

WitPmrSsCand::WitPmrSsCand (WitBopEntry * theBopEnt, WitPmrMgr * thePmrMgr):

      WitSglSrcCand (theBopEnt->myProblem ()),

      myBopEnt_     (theBopEnt),
      myPmrMgr_     (thePmrMgr)
   {
   }

//------------------------------------------------------------------------------

WitPmrSsCand::~WitPmrSsCand ()
   {
   }

//------------------------------------------------------------------------------

WitBoolean WitPmrSsCand::valid (WitPeriod thePer)
   {
   return myPmrMgr_->valid (myBopEnt_, thePer);
   }

//------------------------------------------------------------------------------

WitBoolean WitPmrSsCand::matchesMrSel (WitPeriod thePer)
   {
   return (myBopEnt_ == myPmrMgr_->selBopEntry (myBopEnt_->myPart (), thePer));
   }

//------------------------------------------------------------------------------

void WitPmrSsCand::selectForMr (WitPeriod thePer)
   {
   myPmrMgr_->select (myBopEnt_, thePer);
   }

//------------------------------------------------------------------------------

void WitPmrSsCand::prtAsSel ()
   {
   fprintf (msgFile (),
      "   Selected BopEntry: %s #%d\n",
      myBopEnt_->myOperationName ().myCstring (),
      myBopEnt_->localIndex      ());
   }

//------------------------------------------------------------------------------
// Implementation of class CmrSsCand.
//------------------------------------------------------------------------------

WitCmrSsCand::WitCmrSsCand (WitConsEntry * theConsEnt, WitCmrMgr * theCmrMgr):

      WitSglSrcCand (theConsEnt->myProblem ()),

      myConsEnt_    (theConsEnt),
      myCmrMgr_     (theCmrMgr)
   {
   }

//------------------------------------------------------------------------------

WitCmrSsCand::~WitCmrSsCand ()
   {
   }

//------------------------------------------------------------------------------

WitBoolean WitCmrSsCand::valid (WitPeriod thePer)
   {
   return myCmrMgr_->valid (myConsEnt_, thePer);
   }

//------------------------------------------------------------------------------

WitBoolean WitCmrSsCand::matchesMrSel (WitPeriod thePer)
   {
   WitConsEntry * theConsEnt;

   theConsEnt = myCmrMgr_->selConsEntry (myConsEnt_->myBomEnt (), thePer);

   return (myConsEnt_ == theConsEnt);
   }

//------------------------------------------------------------------------------

void WitCmrSsCand::selectForMr (WitPeriod thePer)
   {
   myCmrMgr_->select (myConsEnt_, thePer);
   }

//------------------------------------------------------------------------------

void WitCmrSsCand::prtAsSel ()
   {
   WitSubEntry * theSub;

   myConsEnt_->getSubEntry (theSub);

   if (theSub == NULL)
      fprintf (msgFile (),
         "   Selected ConsEntry: Itself\n");
   else
      fprintf (msgFile (),
         "   Selected ConsEntry: SubEntry #%d\n", theSub->localIndex ());
   }
@


1.36
log
@Began implementation of multi-level lot sizes.
@
text
@d18 3
a20 3
//    SglSrcCand.
//    PmrSsCand.
//    CmrSsCand.
a42 9
void WitSglSrcSite::setup (WitSelector * theSelector)
   {
   buildSsCands (mySsCands_, theSelector);

   init (witFALSE);
   }

//------------------------------------------------------------------------------

a44 2
   activePers_.clear ();

d55 1
a55 1
void WitSglSrcSite::advance ()
d59 2
a60 12
   while (witTRUE)
      {
      if (! selSsCandItr_.advance (selSsCand_))
         {
         reset ();

         break;
         }

      if (selIsValid ())
         break;
      }
d62 1
a62 1
   printAdvance ();
d67 1
a67 1
void WitSglSrcSite::reset ()
d71 1
a71 4
   clearReqsPlaced ();

   activePers_.clear ();
   nonMSPers_ .clear ();
d78 1
a78 2
   WitPerStItr theItr;
   WitPeriod   thePer;
d82 1
a82 1
   nonMSPers_.clear ();
d84 5
a88 1
   theItr.attachTo (activePers_);
d90 2
a91 9
   while (theItr.advance (thePer))
      if (! selSsCand_->matchesMrSel (thePer))
         {
         nonMSPers_.push (thePer);

         selSsCand_->selectForMr (thePer);
         }

   nonMSPers_.reverse ();
d96 1
a96 1
void WitSglSrcSite::placeReqs (WitPeriod thePer)
d98 1
a98 79
   witAssert (sglSrcMode ());

   if (reqsPlacedIn_[thePer])
      return;

   reqsPlacedIn_[thePer] = witTRUE;

   reqsPlacedPers_.push (thePer);
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::clearReqsPlaced ()
   {
   WitPeriod thePer;

   while (reqsPlacedPers_.pop (thePer))
      reqsPlacedIn_[thePer] = witFALSE;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::activateAsNeeded (WitTVec <WitBoolean> & workVec)
   {
   WitPerStItr theItr;
   WitPeriod   thePer;
   WitBoolean  advNeeded;
   WitBoolean  activated;

   WitTVec <WitBoolean> & active = workVec;

   witAssert (! hasActiveMisMatch ());

   if (reqsPlacedPers_.isEmpty ())
      return;

   advNeeded = witFALSE;
   activated = witFALSE;

   theItr.attachTo (activePers_);

   while (theItr.advance (thePer))
      active[thePer] = witTRUE;

   theItr.attachTo (reqsPlacedPers_);

   while (theItr.advance (thePer))
      if (! active[thePer])
         {
         activePers_.push (thePer);

         activated = witTRUE;

         if (! selSsCand_->valid (thePer))
            advNeeded = witTRUE;
         }

   theItr.attachTo (activePers_);

   while (theItr.advance (thePer))
      active[thePer] = witFALSE;

   if (activated)
      printActivated ();

   if (advNeeded)
      advance ();
   }

//------------------------------------------------------------------------------

WitBoolean WitSglSrcSite::hasMisMatch ()
   {
   WitPerStItr theItr;
   WitPeriod   thePer;

   theItr.attachTo (reqsPlacedPers_);

   while (theItr.advance (thePer))
d107 1
a107 1
WitBoolean WitSglSrcSite::placedSSreqs ()
d109 1
a109 19
   WitPerStItr theItr;
   WitPeriod   thePer;

   witAssert (sglSrcMode ());

   theItr.attachTo (nonMSPers_);

   while (theItr.advance (thePer))
      if (reqsPlacedIn_[thePer])
         return witTRUE;

   return witFALSE;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::setCurrent (WitBoolean theVal)
   {
   current_ = theVal;
d115 1
a115 1
      WitProbAssoc    (theProblem),
d117 4
a120 8
      mySsCands_      (myProblem ()),
      selSsCandItr_   (),
      selSsCand_      (NULL),
      current_        (witFALSE),
      activePers_     (myProblem ()),
      nonMSPers_      (myProblem ()),
      reqsPlacedIn_   (myProblem (), witFALSE),
      reqsPlacedPers_ (myProblem ())
d126 1
a126 1
WitBoolean WitSglSrcSite::hasActiveMisMatch ()
d128 1
a128 2
   WitPerStItr theItr;
   WitPeriod   thePer;
d130 1
a130 25
   theItr.attachTo (activePers_);

   while (theItr.advance (thePer))
      if (! selSsCand_->matchesMrSel (thePer))
         return witTRUE;

   return witFALSE;
   }

//------------------------------------------------------------------------------

WitBoolean WitSglSrcSite::selIsValid ()
   {
   WitPerStItr theItr;
   WitPeriod   thePer;

   witAssert (sglSrcMode ());

   theItr.attachTo (activePers_);

   while (theItr.advance (thePer))
      if (! selSsCand_->valid (thePer))
         return witFALSE;

   return witTRUE;
d184 1
a184 1
void WitSglSrcSite::printAdvance ()
a215 22

void WitSglSrcSite::printActivated ()
   {
   if (myGlobalComp ()->selPrintLevel () < 2)
      return;

   WitPerStItr theItr;
   WitPeriod   thePer;

   fprintf (msgFile (),
      "\n"
      "Active Periods for a Single-Source Site:\n");

   prtID ();
      
   theItr.attachTo (activePers_);

   while (theItr.advance (thePer))
      fprintf (msgFile (), "      %d\n", thePer);
   }

//------------------------------------------------------------------------------
d219 1
a219 1
WitPmrSsSite::WitPmrSsSite (WitPart * thePart):
d225 1
d275 11
@


1.35
log
@Continued implementation of Single-Source.
@
text
@d25 1
a25 2
#include <PmrMgr.h>
#include <CmrMgr.h>
@


1.34
log
@Continued implementation of Single-Source.
@
text
@d149 1
a149 1
void WitSglSrcSite::activateAsNeeded (WitTVec <WitBoolean> & theBoolTVec)
d156 3
a158 1
   WitTVec <WitBoolean> & active = theBoolTVec;
d251 16
@


1.33
log
@Continued implementation of Single-Source.
@
text
@a14 1
//    SglSrcMgr
a24 1
#include <SelPt.h>
a26 1
#include <SglSrcMgr.h>
a28 1
#include <CompMgr.h>
a31 388
#include <Repos.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------

typedef WitObjStItr <WitSglSrcSite> WitSglSrcSiteItr;

//------------------------------------------------------------------------------
// Implementation of class SglSrcMgr.
//------------------------------------------------------------------------------

WitSglSrcMgr::WitSglSrcMgr (WitSelector * theSelector):
      WitProbAssoc       (theSelector),

      mySelector_        (theSelector),
      mySsSiteForPart_   (),
      mySsSiteForBomEnt_ (),
      mySglSrcSites_     (myProblem ()),
      sglSrcMode_        (witTRUE),
      nextAltSite_       (NULL),
      currentSites_      (myProblem ()),
      allocRepos_        (NULL),
      configRepos_       (NULL),
      origNetQty_        (0.0)
   {
   WitPart *        thePart;
   WitBomEntry *    theBomEnt;
   WitSglSrcSiteItr theItr;
   WitSglSrcSite *  theSsSite;

   allocRepos_  = new WitDataRepos (myProblem ());
   configRepos_ = new WitDataRepos (myProblem ());

   verifyRestrictions ();

   myMsgFac () ("sglSrcMsg");

   mySsSiteForPart_  .allocate (myProblem ());
   mySsSiteForBomEnt_.allocate (myProblem ());

   forEachPart (thePart, myProblem ())
      if (thePart->singleSource ())
         {
         theSsSite = new WitPmrSsSite (thePart);

         mySsSiteForPart_ (thePart) = theSsSite;

         mySglSrcSites_.push (theSsSite);
         }

   forEachBomEntry (theBomEnt, myProblem ())
      if (theBomEnt->singleSource ())
         {
         theSsSite = new WitCmrSsSite (theBomEnt);

         mySsSiteForBomEnt_ (theBomEnt) = theSsSite;

         mySglSrcSites_.push (theSsSite);
         }

   mySglSrcSites_.reverse ();

   theItr.attachTo (mySglSrcSites_);

   while (theItr.advance (theSsSite))
      theSsSite->setup (theSelector);
   }

//------------------------------------------------------------------------------

WitSglSrcMgr::~WitSglSrcMgr ()
   {
   mySsSiteForBomEnt_.clear ();
   mySsSiteForPart_  .clear ();

   deleteContents (mySglSrcSites_);

   delete configRepos_;
   delete allocRepos_;
   }

//------------------------------------------------------------------------------

WitBoolean WitSglSrcMgr::singleSourceNeeded (WitProblem * theProblem)
   {
   WitPart *     thePart;
   WitBomEntry * theBomEnt;

   forEachPart (thePart, theProblem)
      if (thePart->singleSource ())
         return witTRUE;

   forEachBomEntry (theBomEnt, theProblem)
      if (theBomEnt->singleSource ())
         return witTRUE;

   return witFALSE;
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::commitMaxQty (double & netQty)
   {
   stronglyAssert (allocRepos_ ->isEmpty ());
   stronglyAssert (configRepos_->isEmpty ());


   origNetQty_ = netQty;

   while (witTRUE)
      {
      prepSelCMQ ();

      mySelector_->commitMaxQty (netQty);

      activateAsNeeded ();

      if (misMatchFound ())
         {
         fullRestore (netQty);

         continue;
         }

      if (nextAltSite_ == NULL)
         if (pureMultiSource ())
            break;

      if (netQty <= SEARCH_TOL)
         {
         configRepos_->restore ();

         break;
         }

      fullRestore (netQty);

      if (nextAltSite_ == NULL)
         {
         sglSrcMode_ = witFALSE;

         mySelector_->commitMaxQty (netQty);

         sglSrcMode_ = witTRUE;

         break;
         }

      nextAltSite_->advance ();
      }

   reset ();
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::placeReqs (WitSelPt * theSelPt)
   {
   WitSglSrcSite * theSsSite;

   theSsSite = mySsSiteFor (theSelPt);

   if (theSsSite != NULL)
      if (theSsSite->sglSrcMode ())
         {
         if (! theSsSite->current ())
            {
            theSsSite->setCurrent (witTRUE);

            currentSites_.push (theSsSite);
            }

         theSsSite->placeReqs (theSelPt->myPeriod ());
         }
   }

//------------------------------------------------------------------------------

WitBoolean WitSglSrcMgr::mustSkip (WitSelPt * theSelPt)
   {
   WitSglSrcSite * theSsSite;

   if (nextAltSite_ != NULL)
      {
      theSsSite = mySsSiteFor (theSelPt);

      if (theSsSite != NULL)
         if (theSsSite->sglSrcMode ())
            return witTRUE;
      }

   return witFALSE;
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::alterSelections ()
   {
   WitObjStItr <WitSelPt> theItr;
   WitSelPt *             theSelPt;
   WitSglSrcSite *        theSsSite;

   if (sglSrcMode_)
      if (nextAltSite_ == NULL)
         {
         theItr.attachTo (mySelector_->pendingPts ());

         while (theItr.advance (theSelPt))
            {
            theSsSite = mySsSiteFor (theSelPt);

            if (theSsSite != NULL)
               if (theSsSite->sglSrcMode ())
                  nextAltSite_ = theSsSite;
            }

         if (nextAltSite_ != NULL)
            return;
         }

   mySelector_->alterSelections ();
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::saveAllocVal (int & theVar)
   {
   allocRepos_->saveVal (theVar);
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::saveAllocVal (double & theVar)
   {
   allocRepos_->saveVal (theVar);
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::saveConfigVal (int & theVar)
   {                                       
   configRepos_->saveVal (theVar);
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::saveConfigVal (WitSelCand * & theVar)
   {                                       
   savePtrVal (configRepos_, theVar);
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::verifyRestrictions ()
   {
   WitDemand * theDemand;

   stronglyAssert (singleSourceNeeded (myProblem ()));

   if (mySelector_->penExec ())
      myMsgFac () ("sglSrcAndPenExecSmsg");

   if (myGlobalComp ()->computeCriticalList ())
      myMsgFac () ("sglSrcAndCritListSmsg");

   forEachDemand (theDemand, myProblem ())
      if (! (theDemand->buildAheadUB () == 0))
         myMsgFac () ("sglSrcAndBaByDemSmsg");

   if (mySelector_->selSplit ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Selection splitting");
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::prepSelCMQ ()
   {
   WitSglSrcSiteItr theItr;
   WitSglSrcSite *  theSsSite;

   nextAltSite_ = NULL;

   theItr.attachTo (currentSites_);

   while (theItr.advance (theSsSite))
      {
      theSsSite->clearReqsPlaced ();

      if (theSsSite->sglSrcMode ())
         theSsSite->applySsSel ();
      }
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::activateAsNeeded ()
   {
   WitSglSrcSiteItr     theItr;
   WitSglSrcSite *      theSsSite;
   WitTVec <WitBoolean> theBoolTVec (myProblem (), witFALSE);

   theItr.attachTo (currentSites_);

   while (theItr.advance (theSsSite))
      theSsSite->activateAsNeeded (theBoolTVec);
   }

//------------------------------------------------------------------------------

WitBoolean WitSglSrcMgr::misMatchFound ()
   {
   WitSglSrcSiteItr theItr;
   WitSglSrcSite *  theSsSite;

   theItr.attachTo (currentSites_);

   while (theItr.advance (theSsSite))
      if (theSsSite->hasMisMatch ())
         return witTRUE;

   return witFALSE;
   }

//------------------------------------------------------------------------------

WitBoolean WitSglSrcMgr::pureMultiSource ()
   {
   WitSglSrcSiteItr theItr;
   WitSglSrcSite *  theSsSite;

   theItr.attachTo (currentSites_);

   while (theItr.advance (theSsSite))
      if (theSsSite->sglSrcMode ())
         if (theSsSite->placedSSreqs ())
            return witFALSE;

   return witTRUE;
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::fullRestore (double & netQty)
   {
   configRepos_->restore ();
   allocRepos_ ->restore ();

   netQty = origNetQty_;
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::reset ()
   {
   WitSglSrcSite * theSsSite;

   allocRepos_ ->clear ();
   configRepos_->clear ();

   while (currentSites_.pop (theSsSite))
      {
      theSsSite->reset ();

      theSsSite->init (witTRUE);

      theSsSite->setCurrent (witFALSE);
      }
   }

//------------------------------------------------------------------------------

WitSglSrcSite * WitSglSrcMgr::mySsSiteFor (WitSelPt * theSelPt)
   {
   WitPart *     thePart;
   WitBomEntry * theBomEnt;

   thePart = theSelPt->myPmrPart ();

   if (thePart != NULL)
      return mySsSiteForPart_ (thePart);

   theBomEnt = theSelPt->myCmrBomEnt ();

   if (theBomEnt != NULL)
      return mySsSiteForBomEnt_ (theBomEnt);

   return NULL;
   }
@


1.32
log
@Continued implementation of Single-Source.
@
text
@a306 3

   if (mySelector_->selectiveSR ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Selective stock reallocation");
@


1.31
log
@Continued implementation of Single-Source.
@
text
@a288 2
#include <BoundSet.h>

d291 2
d301 4
a306 3

   if (mySelector_->multiExec ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Multi-Exec");
@


1.30
log
@Continued implementation of Single-Source.
@
text
@d214 18
a260 18
WitBoolean WitSglSrcMgr::mustSkip (WitSelPt * theSelPt)
   {
   WitSglSrcSite * theSsSite;

   if (nextAltSite_ != NULL)
      {
      theSsSite = mySsSiteFor (theSelPt);

      if (theSsSite != NULL)
         if (theSsSite->sglSrcMode ())
            return witTRUE;
      }

   return witFALSE;
   }

//------------------------------------------------------------------------------

a292 2
   WitOperation * theOpn;

d298 2
a302 7

   if (myGlobalComp ()->computeCriticalList ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Critical parts list");

   forEachOperation (theOpn, myProblem ())
      if (! (theOpn->execBounds ()->hardUB () == -1.0))
         myMsgFac () ("nyiWithSglSrcSmsg", "Finite Exec Bounds");
@


1.29
log
@Continued implementation of Single-Source.
@
text
@a300 3
   if (myGlobalComp ()->perfPegging ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Pegging");

@


1.28
log
@Continued implementation of Single-Source.
@
text
@d297 4
a302 3

   if (mySelector_->penExec ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Penalized execution");
@


1.27
log
@Continued implementation of single-source.
@
text
@a35 1
#include <PtrMap.h>
d51 3
a53 3
      mySsSiteForPart_   (* new WitPtrMap <WitPart,     WitSglSrcSite>),
      mySsSiteForBomEnt_ (* new WitPtrMap <WitBomEntry, WitSglSrcSite>),
      mySglSrcSites_     (* new WitObjStack <WitSglSrcSite> (myProblem ())),
d56 1
a56 1
      currentSites_      (* new WitObjStack <WitSglSrcSite> (myProblem ())),
d113 2
a114 6
   delete   configRepos_;
   delete   allocRepos_;
   delete & currentSites_;
   delete & mySglSrcSites_;
   delete & mySsSiteForBomEnt_;
   delete & mySsSiteForPart_;
@


1.26
log
@Continued implementation of Single-Source.
@
text
@d58 2
a59 2
      allocRepos_        (* new WitDataRepos (myProblem ())),
      configRepos_       (* new WitDataRepos (myProblem ())),
d67 3
d114 2
a115 2
   delete & configRepos_;
   delete & allocRepos_;
d144 2
a145 2
   stronglyAssert (allocRepos_ .isEmpty ());
   stronglyAssert (configRepos_.isEmpty ());
d171 1
a171 1
         configRepos_.restore ();
d268 1
a268 1
   allocRepos_.saveVal (theVar);
d275 1
a275 1
   allocRepos_.saveVal (theVar);
d282 1
a282 1
   configRepos_.saveVal (theVar);
d396 2
a397 2
   configRepos_.restore ();
   allocRepos_ .restore ();
d408 2
a409 2
   allocRepos_ .clear ();
   configRepos_.clear ();
@


1.25
log
@Continued implementation of Single-Source.
@
text
@d57 1
d99 1
a99 1
      theSsSite->buildSsCands (theSelector);
d113 1
a143 1
   initSites ();
d149 1
a149 1
      prepCMQ ();
d202 8
d211 1
d324 1
a324 14
void WitSglSrcMgr::initSites ()
   {
   WitSglSrcSiteItr theItr;
   WitSglSrcSite *  theSsSite;

   theItr.attachTo (mySglSrcSites_);

   while (theItr.advance (theSsSite))
      theSsSite->init ();
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::prepCMQ ()
d331 1
a331 1
   theItr.attachTo (mySglSrcSites_);
d334 3
d338 2
a339 1
         theSsSite->prepCMQ ();
d350 1
a350 1
   theItr.attachTo (mySglSrcSites_);
d353 1
a353 2
      if (theSsSite->sglSrcMode ())
         theSsSite->activateAsNeeded (theBoolTVec);
d363 1
a363 1
   theItr.attachTo (mySglSrcSites_);
d366 2
a367 3
      if (theSsSite->sglSrcMode ())
         if (theSsSite->hasMisMatch ())
            return witTRUE;
d379 1
a379 1
   theItr.attachTo (mySglSrcSites_);
d403 1
a403 2
   WitSglSrcSiteItr theItr;
   WitSglSrcSite *  theSsSite;
d408 5
a412 1
   theItr.attachTo (mySglSrcSites_);
d414 2
a415 2
   while (theItr.advance (theSsSite))
      theSsSite->reset ();
d449 1
a449 1
void WitSglSrcSite::buildSsCands (WitSelector * theSelector)
d452 2
d458 1
a458 1
void WitSglSrcSite::init ()
d467 1
a467 1
   printInit ();
d506 1
a506 1
void WitSglSrcSite::prepCMQ ()
a512 2
   clearReqsPlaced ();

d534 1
a534 1
   if (reqsPlaced_[thePer])
d537 1
a537 1
   reqsPlaced_[thePer] = witTRUE;
d544 10
d563 2
a564 1
   witAssert (sglSrcMode ());
a605 2
   witAssert (sglSrcMode ());

d627 1
a627 1
      if (reqsPlaced_[thePer])
d635 7
d648 1
d651 1
a651 1
      reqsPlaced_     (myProblem (), witFALSE),
d676 1
a676 11
void WitSglSrcSite::clearReqsPlaced ()
   {
   WitPeriod thePer;

   while (reqsPlacedPers_.pop (thePer))
      reqsPlaced_[thePer] = witFALSE;
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::printInit ()
d683 14
a696 6
      fprintf (msgFile (),
         "\n"
         "--------------------------------\n"
         "Initial Single-Source Selection:\n"
         "--------------------------------\n"
         "\n");
d704 14
a717 6
      fprintf (msgFile (),
         "\n"
         "----------------------------------\n"
         "Initializing in Multi-Source Mode:\n"
         "----------------------------------\n"
         "\n");
d734 3
a736 3
         "---------------------------------\n"
         "Altering Single-Source Selection:\n"
         "---------------------------------\n"
d747 3
a749 3
         "-------------------------------\n"
         "Switching to Multi-Source Mode:\n"
         "-------------------------------\n"
@


1.24
log
@Continued implementation of Single-Source.
@
text
@d193 1
a193 4
void WitSglSrcMgr::placeReqs (
      WitBopEntry *  theBopEnt, 
      WitConsEntry * theConsEnt,
      WitPeriod      execPer)
a194 1
   WitPart *       thePart;
a195 2
   WitPeriod       expPer;
   WitBomEntry *   theBomEnt;
d197 1
a197 19
   thePart = theBopEnt->myPart ();

   if (thePart->singleSource ())
      {
      theSsSite = mySsSiteForPart_ (thePart);

      if (theSsSite->sglSrcMode ())
         {
         expPer = theBopEnt->impactPeriod ()[execPer];

         theSsSite->placeReqs (expPer);
         }
      }

   theBomEnt = theConsEnt->myBomEnt ();

   if (theBomEnt->singleSource ())
      {
      theSsSite = mySsSiteForBomEnt_ (theBomEnt);
d199 1
d201 1
a201 2
         theSsSite->placeReqs (execPer);
      }
@


1.23
log
@Continued implementation of Single-Source.
@
text
@d18 1
d21 1
d28 1
d49 1
a49 1
      WitProbAssoc     (theSelector),
d51 9
a59 8
      mySelector_      (theSelector),
      mySglSrcSiteFor_ (* new WitPtrMap <WitPart, WitSglSrcSite>),
      mySglSrcSites_   (* new WitObjStack <WitSglSrcSite> (myProblem ())),
      sglSrcMode_      (witTRUE),
      nextAltSite_     (NULL),
      allocRepos_      (* new WitDataRepos                (myProblem ())),
      configRepos_     (* new WitDataRepos                (myProblem ())),
      origNetQty_      (0.0)
d62 1
d70 2
a71 1
   mySglSrcSiteFor_.allocate (myProblem ());
d76 1
a76 1
         mySglSrcSiteFor_ (thePart) = new WitPmrSsSite (thePart);
d78 13
a90 1
         mySglSrcSites_.push (mySglSrcSiteFor_ (thePart));
d105 2
a106 1
   mySglSrcSiteFor_.clear ();
d113 2
a114 1
   delete & mySglSrcSiteFor_;
d121 2
a122 1
   WitPart * thePart;
d128 4
d193 4
a196 1
void WitSglSrcMgr::placeReqs (WitBopEntry * theBopEnt, WitPeriod execPer)
d201 1
d207 1
a207 1
      theSsSite = mySglSrcSiteFor_ (thePart);
d216 10
d243 1
a243 1
            theSsSite = mySglSrcSiteFor (theSelPt);
d265 1
a265 1
      theSsSite = mySglSrcSiteFor (theSelPt);
d442 1
a442 1
WitSglSrcSite * WitSglSrcMgr::mySglSrcSiteFor (WitSelPt * theSelPt)
d444 2
a445 1
   WitPart * thePart;
d449 9
a457 4
   return
      (thePart == NULL)?
         NULL:
         mySglSrcSiteFor_ (thePart);
d827 52
d941 60
@


1.22
log
@Continued implementation of Single-Source.
@
text
@a44 7
inline WitSglSrcCand * WitSglSrcMgr::mySglSrcCandFor (WitBopEntry * theBopEnt)
   {
   return mySglSrcCandFor_ (theBopEnt);
   }

//------------------------------------------------------------------------------

a50 1
      mySglSrcCandFor_ (* new WitPtrMap <WitBopEntry, WitSglSrcCand>),
d57 3
a59 3
   WitPart *      thePart;
   WitBopEntStack theBopEnts (myProblem ());
   WitBopEntry *  theBopEnt;
a65 1
   mySglSrcCandFor_.allocate (myProblem ());
d70 1
a70 1
         mySglSrcSiteFor_ (thePart) = new WitPmrSsSite (thePart, this);
d73 1
d75 1
a75 1
         mySelector_->myPmrMgr ()->getCandBopEnts (thePart, theBopEnts);
d77 1
a77 3
         while (theBopEnts.pop (theBopEnt))
            {
            witAssert (mySglSrcCandFor_ (theBopEnt) == NULL);
d79 2
a80 5
            mySglSrcCandFor_ (theBopEnt) = new WitPmrSsCand (theBopEnt, this);
            }
         }

   mySglSrcSites_.reverse ();
a86 5
   WitBopEntry * theBopEnt;

   forEachBopEntry (theBopEnt, myProblem ())
      delete mySglSrcCandFor_ (theBopEnt);

a92 1
   delete & mySglSrcCandFor_;
d421 8
d437 1
a437 1
   getSsCands (mySsCands_);
d439 1
a439 3
   if (! mySsCands_.isEmpty ())
      mySsCands_.pop (selSsCand_);
   else
d453 1
a453 1
      if (mySsCands_.isEmpty ())
a459 2
      mySsCands_.pop (selSsCand_);

a474 1
   mySsCands_ .clear ();
d603 2
a604 2
WitSglSrcSite::WitSglSrcSite (WitSglSrcMgr * theSglSrcMgr):
      WitProbAssoc    (theSglSrcMgr),
a605 1
      mySglSrcMgr_    (theSglSrcMgr),
d607 1
d736 1
a736 1
WitPmrSsSite::WitPmrSsSite (WitPart * thePart, WitSglSrcMgr * theSglSrcMgr):
d738 1
a738 1
      WitSglSrcSite (theSglSrcMgr),
d740 1
a740 2
      myPart_       (thePart),
      myPmrMgr_     (theSglSrcMgr->mySelector ()->myPmrMgr ())
d752 9
a760 4
void WitPmrSsSite::getSsCands (WitObjStack <WitSglSrcCand> & theSsCands)
   {
   WitBopEntStack theBopEnts (myProblem ());
   WitBopEntry *  theBopEnt;
d764 3
a766 1
   myPmrMgr_->getCandBopEnts (myPart_, theBopEnts);
d768 2
a769 2
   while (theBopEnts.pop (theBopEnt))
      theSsCands.push (mySglSrcMgr ()->mySglSrcCandFor (theBopEnt));
d800 1
a800 3
WitPmrSsCand::WitPmrSsCand (
         WitBopEntry *  theBopEnt,
         WitSglSrcMgr * theSglSrcMgr):
d805 1
a805 1
      myPmrMgr_     (theSglSrcMgr->mySelector ()->myPmrMgr ())
@


1.21
log
@Continued implementation of Single-Source.
@
text
@d17 3
d28 1
d45 7
d58 1
d65 3
a67 1
   WitPart * thePart;
d74 1
d79 1
a79 1
         mySglSrcSiteFor_ (thePart) = new WitSglSrcSite (thePart, mySelector_);
d82 9
d100 5
d111 1
d190 1
a190 1
   WitSglSrcSite * theSite;
d197 1
a197 1
      theSite = mySglSrcSiteFor_ (thePart);
d199 1
a199 1
      if (theSite->sglSrcMode ())
d203 1
a203 1
         theSite->placeReqs (expPer);
d214 1
a214 1
   WitSglSrcSite *        theSite;
d223 1
a223 1
            theSite = mySglSrcSiteFor (theSelPt);
d225 3
a227 3
            if (theSite != NULL)
               if (theSite->sglSrcMode ())
                  nextAltSite_ = theSite;
d241 1
a241 1
   WitSglSrcSite * theSite;
d245 1
a245 1
      theSite = mySglSrcSiteFor (theSelPt);
d247 2
a248 2
      if (theSite != NULL)
         if (theSite->sglSrcMode ())
d321 1
a321 1
   WitSglSrcSite *  theSite;
d325 2
a326 2
   while (theItr.advance (theSite))
      theSite->init ();
d334 1
a334 1
   WitSglSrcSite *  theSite;
d340 3
a342 3
   while (theItr.advance (theSite))
      if (theSite->sglSrcMode ())
         theSite->prepCMQ ();
d350 1
a350 1
   WitSglSrcSite *      theSite;
d355 3
a357 3
   while (theItr.advance (theSite))
      if (theSite->sglSrcMode ())
         theSite->activateAsNeeded (theBoolTVec);
d365 1
a365 1
   WitSglSrcSite *  theSite;
d369 3
a371 3
   while (theItr.advance (theSite))
      if (theSite->sglSrcMode ())
         if (theSite->hasMisMatch ())
d382 1
a382 1
   WitSglSrcSite *  theSite;
d386 3
a388 3
   while (theItr.advance (theSite))
      if (theSite->sglSrcMode ())
         if (theSite->placedSSreqs ())
d409 1
a409 1
   WitSglSrcSite *  theSite;
d416 2
a417 2
   while (theItr.advance (theSite))
      theSite->reset ();
a437 23
inline WitPmrMgr * WitSglSrcSite::myPmrMgr ()
   {
   return mySelector_->myPmrMgr ();
   }

//------------------------------------------------------------------------------

WitSglSrcSite::WitSglSrcSite (WitPart * thePart, WitSelector * theSelector):
      WitProbAssoc    (thePart),

      myPart_         (thePart),
      mySelector_     (theSelector),
      selBopEntry_    (NULL),
      candBopEnts_    (myProblem ()),
      activePers_     (myProblem ()),
      nonMSPers_      (myProblem ()),
      reqsPlaced_     (myProblem (), witFALSE),
      reqsPlacedPers_ (myProblem ())
   {
   }

//------------------------------------------------------------------------------

d448 1
a448 1
   myPmrMgr ()->getCandBopEnts (myPart_, candBopEnts_);
d450 2
a451 2
   if (! candBopEnts_.isEmpty ())
      candBopEnts_.pop (selBopEntry_);
d453 1
a453 1
      selBopEntry_ = NULL;
d466 1
a466 1
      if (candBopEnts_.isEmpty ())
d473 1
a473 1
      candBopEnts_.pop (selBopEntry_);
d486 1
a486 1
   selBopEntry_ = NULL;
d490 3
a492 3
   candBopEnts_.clear ();
   activePers_ .clear ();
   nonMSPers_  .clear ();
d511 1
a511 1
      if (myPmrMgr ()->selBopEntry (myPart_, thePer) != selBopEntry_)
d515 1
a515 1
         myPmrMgr ()->select (selBopEntry_, thePer);
d565 1
a565 1
         if (! myPmrMgr ()->valid (selBopEntry_, thePer))
d593 1
a593 1
      if (myPmrMgr ()->selBopEntry (myPart_, thePer) != selBopEntry_)
d619 15
d644 1
a644 1
      if (! myPmrMgr ()->valid (selBopEntry_, thePer))
d668 1
d674 6
a679 6
         "\n"
         "   Part %s\n"
         "   Selected BopEntry: %s #%d\n",
         myPart_     ->partName        ().myCstring (),
         selBopEntry_->myOperationName ().myCstring (),
         selBopEntry_->localIndex      ());
d681 1
d687 4
a690 3
         "\n"
         "   Part %s\n",
         myPart_->partName ().myCstring ());
d701 1
d707 6
a712 6
         "\n"
         "   Part %s\n"
         "   Selected BopEntry: %s #%d\n",
         myPart_     ->partName        ().myCstring (),
         selBopEntry_->myOperationName ().myCstring (),
         selBopEntry_->localIndex      ());
d714 1
d720 4
a723 3
         "\n"
         "   Part %s\n",
         myPart_->partName ().myCstring ());
d738 3
a740 2
      "Active Periods for Single-Source at Part %s:\n",
      myPart_->partName ().myCstring ());
d745 111
a855 1
      fprintf (msgFile (), "   %d\n", thePer);
@


1.20
log
@Continued implementation of Single-Source.
@
text
@a262 3
   if (myCompMgr ()->nSubEntries () > 0)
      myMsgFac () ("nyiWithSglSrcSmsg", "Substitute BOM entries");

@


1.19
log
@Continued implementation of Single-Source.
@
text
@d495 1
a495 1
   WitTlPerItr theItr;
d506 1
a506 1
   while (advancePerItr (theItr, thePer))
d509 1
a509 1
         nonMSPers_.push (NULL, thePer);
d528 1
a528 1
   reqsPlacedPers_.push (NULL, thePer);
d535 1
a535 1
   WitTlPerItr theItr;
d549 1
a549 1
   while (advancePerItr (theItr, thePer))
d554 1
a554 1
   while (advancePerItr (theItr, thePer))
d557 1
a557 1
         activePers_.push (NULL, thePer);
d567 1
a567 1
   while (advancePerItr (theItr, thePer))
d581 1
a581 1
   WitTlPerItr theItr;
d588 1
a588 1
   while (advancePerItr (theItr, thePer))
d599 1
a599 1
   WitTlPerItr theItr;
d606 1
a606 1
   while (advancePerItr (theItr, thePer))
d617 1
a617 1
   WitTlPerItr theItr;
d624 1
a624 1
   while (advancePerItr (theItr, thePer))
d635 1
a635 4
   WitTlPerItr theItr;
   WitPeriod   thePer;

   theItr.attachTo (reqsPlacedPers_);
d637 1
a637 1
   while (advancePerItr (theItr, thePer))
a638 2

   reqsPlacedPers_.clear ();
d708 1
a708 1
   WitTlPerItr theItr;
d718 1
a718 1
   while (advancePerItr (theItr, thePer))
@


1.18
log
@Continued implementation of Single-Source.
@
text
@d34 4
d50 2
a51 1
      configRepos_     (* new WitDataRepos                (myProblem ()))
a102 4
   double                      origNetQty;
   WitObjStItr <WitSglSrcSite> theItr;
   WitSglSrcSite *             theSite;

d106 1
a106 4
   theItr.attachTo (mySglSrcSites_);

   while (theItr.advance (theSite))
      theSite->init ();
d108 1
a108 1
   origNetQty = netQty;
d112 1
a112 6
      nextAltSite_ = NULL;

      theItr.attachTo (mySglSrcSites_);

      while (theItr.advance (theSite))
         theSite->prepCMQ ();
d116 1
a116 4
      theItr.attachTo (mySglSrcSites_);

      while (theItr.advance (theSite))
         theSite->activateAsNeeded ();
d120 1
a120 5
         configRepos_.restore ();

         netQty = origNetQty;

         allocRepos_.restore ();
d129 3
a131 1
      configRepos_.restore ();
a132 1
      if (netQty <= SEARCH_TOL)
d134 1
d136 1
a136 3
      netQty = origNetQty;

      allocRepos_.restore ();
d159 3
a161 2
   WitPart * thePart;
   WitPeriod expPer;
d167 5
a171 1
      expPer = theBopEnt->impactPeriod ()[execPer];
d173 2
a174 1
      mySglSrcSiteFor_ (thePart)->placeReqs (expPer);
a181 3
   WitSelPt *      theSelPt;
   WitSglSrcSite * theSite;

d183 2
d291 44
d337 2
a338 2
   WitObjStItr <WitSglSrcSite> theItr;
   WitSglSrcSite *             theSite;
d354 2
a355 2
   WitObjStItr <WitSglSrcSite> theItr;
   WitSglSrcSite *             theSite;
d369 10
d381 2
a382 2
   WitObjStItr <WitSglSrcSite> theItr;
   WitSglSrcSite *             theSite;
d419 1
a419 1
      WitProbAssoc  (thePart),
d421 8
a428 7
      myPart_       (thePart),
      selBopEntry_  (NULL),
      candBopEnts_  (myProblem ()),
      mySelector_   (theSelector),
      active_       (myProblem (), witFALSE),
      initMisMatch_ (myProblem (), witFALSE),
      reqsPlaced_   (myProblem (), witFALSE)
d442 1
a442 1
   active_.setToScalar (witFALSE);
a457 3
   WitBoolean selIsValid;
   WitPeriod  thePer;

d460 1
a460 3
   selIsValid = witFALSE;

   while (! selIsValid)
d464 1
a464 1
         selBopEntry_ = NULL;
d471 2
a472 10
      selIsValid = witTRUE;

      forEachPeriod (thePer, myProblem ())
         if (active_[thePer])
            if (! myPmrMgr ()->valid (selBopEntry_, thePer))
               {
               selIsValid = witFALSE;
               
               break;
               }
d482 4
d487 2
d495 6
a500 1
   WitPeriod thePer;
d502 1
a502 1
   initMisMatch_.setToScalar (witFALSE);
d504 6
a509 6
   if (selBopEntry_ != NULL)
      forEachPeriod (thePer, myProblem ())
         if (active_[thePer])
            if (myPmrMgr ()->selBopEntry (myPart_, thePer) != selBopEntry_)
               {
               initMisMatch_[thePer] = witTRUE;
d511 2
a512 2
               myPmrMgr ()->select (selBopEntry_, thePer);
               }
d514 1
a514 1
   reqsPlaced_.setToScalar (witFALSE);
d521 5
d527 2
d533 1
a533 1
void WitSglSrcSite::activateAsNeeded ()
d535 4
a538 3
   WitBoolean advNeeded;
   WitBoolean activated;
   WitPeriod  thePer;
d540 3
a542 2
   if (! sglSrcMode ())
      return;
d547 19
a565 6
   forEachPeriod (thePer, myProblem ())
      if (reqsPlaced_[thePer])
         if (! active_[thePer])
            {
            active_[thePer] = witTRUE;
            activated       = witTRUE;
d567 2
a568 3
            if (! myPmrMgr ()->valid (selBopEntry_, thePer))
               advNeeded = witTRUE;
            }
d581 2
a582 1
   WitPeriod thePer;
d586 5
a590 4
   forEachPeriod (thePer, myProblem ())
      if (reqsPlaced_[thePer])
         if (myPmrMgr ()->selBopEntry (myPart_, thePer) != selBopEntry_)
            return witTRUE;
d599 2
a600 1
   WitPeriod thePer;
d604 3
a606 1
   forEachPeriod (thePer, myProblem ())
d608 1
a608 2
         if (initMisMatch_[thePer])
            return witTRUE;
d615 33
d713 2
a714 1
   WitPeriod thePer;
d721 4
a724 3
   forEachPeriod (thePer, myProblem ())
      if (active_[thePer])
         fprintf (msgFile (), "   %d\n", thePer);
@


1.17
log
@Continued implementation of Single-Source.
@
text
@d139 4
d317 17
d374 1
a374 1
      WitProbAssoc (thePart),
d376 7
a382 6
      myPart_      (thePart),
      selBopEntry_ (NULL),
      candBopEnts_ (myProblem ()),
      mySelector_  (theSelector),
      active_      (myProblem (), witFALSE),
      reqsPlaced_  (myProblem (), witFALSE)
d458 2
d464 3
d468 1
d495 2
a496 2
      if (! active_[thePer])
         if (reqsPlaced_[thePer])
d523 16
@


1.16
log
@Continued implementation of Single-Source.
@
text
@a98 1
   WitBoolean                  misMatch;
a122 4
      configRepos_.restore ();

      misMatch = witFALSE;

d126 1
a126 1
         theSite->activateAsNeeded (misMatch);
d128 1
a128 1
      if (misMatch)
d130 2
d139 2
d296 17
d454 1
a454 1
void WitSglSrcSite::activateAsNeeded (WitBoolean & misMatch)
a463 1

d471 1
d473 2
a474 9
            if (myPmrMgr ()->selBopEntry (myPart_, thePer) != selBopEntry_)
               {
               misMatch = witTRUE;

               if (! myPmrMgr ()->valid (selBopEntry_, thePer))
                  advNeeded = witTRUE;
               }

            activated = witTRUE;
d482 16
@


1.15
log
@Continued implementation of Single-Source.
@
text
@d98 4
a101 2
   double     origNetQty;
   WitBoolean misMatchFound;
d106 4
a109 1
   initSites ();
d117 4
a120 1
      prepCMQ ();
d126 1
a126 1
      misMatchFound = hasMisMatch ();
d128 1
a128 1
      activatePersUsed ();
d130 4
a133 1
      if (misMatchFound)
d135 2
a296 57
void WitSglSrcMgr::initSites ()
   {
   WitObjStItr <WitSglSrcSite> theItr;
   WitSglSrcSite *             theSite;

   theItr.attachTo (mySglSrcSites_);

   while (theItr.advance (theSite))
      theSite->init ();
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::prepCMQ ()
   {
   WitObjStItr <WitSglSrcSite> theItr;
   WitSglSrcSite *             theSite;

   theItr.attachTo (mySglSrcSites_);

   while (theItr.advance (theSite))
      theSite->prepCMQ ();
   }

//------------------------------------------------------------------------------

WitBoolean WitSglSrcMgr::hasMisMatch ()
   {
   WitObjStItr <WitSglSrcSite> theItr;
   WitSglSrcSite *             theSite;

   theItr.attachTo (mySglSrcSites_);

   while (theItr.advance (theSite))
      if (theSite->sglSrcMode ())
         if (theSite->hasMisMatch ())
            return witTRUE;

   return witFALSE;
   }

//------------------------------------------------------------------------------

void WitSglSrcMgr::activatePersUsed ()
   {
   WitObjStItr <WitSglSrcSite> theItr;
   WitSglSrcSite *             theSite;

   theItr.attachTo (mySglSrcSites_);

   while (theItr.advance (theSite))
      if (theSite->sglSrcMode ())
         theSite->activatePersUsed ();
   }

//------------------------------------------------------------------------------

d374 2
a375 1
   WitPeriod thePer;
d379 3
a381 1
   while (witTRUE)
d392 2
d397 5
a401 3
               continue;

      break;
d438 1
a438 1
WitBoolean WitSglSrcSite::hasMisMatch ()
d440 8
a447 1
   WitPeriod thePer;
d449 1
a449 1
   witAssert (sglSrcMode ());
d454 3
d458 2
a459 1
               return witTRUE;
d461 12
a472 1
   return witFALSE;
d477 1
a477 1
void WitSglSrcSite::activatePersUsed ()
d479 2
a480 1
   WitPeriod thePer;
d482 21
a502 12
   witAssert (sglSrcMode ());

   forEachPeriod (thePer, myProblem ())
      if (! active_[thePer])
         if (reqsPlaced_[thePer])
            {
            if (! myPmrMgr ()->valid (selBopEntry_, thePer))
               myMsgFac () ("genericSmsg",
                  "Invalid Single-Source selection not yet implemented.");

            active_[thePer] = witTRUE;
            }
d507 1
a507 1
void WitSglSrcSite::printInit ()
d509 24
a532 24
   if (myGlobalComp ()->selPrintLevel () >= 2)
      {
      if (sglSrcMode ())
         fprintf (msgFile (),
            "\n"
            "--------------------------------\n"
            "Initial Single-Source Selection:\n"
            "--------------------------------\n"
            "\n"
            "   Part %s\n"
            "   Selected BopEntry: %s #%d\n",
            myPart_     ->partName        ().myCstring (),
            selBopEntry_->myOperationName ().myCstring (),
            selBopEntry_->localIndex      ());
      else
         fprintf (msgFile (),
            "\n"
            "----------------------------------\n"
            "Initializing in Multi-Source Mode:\n"
            "----------------------------------\n"
            "\n"
            "   Part %s\n",
            myPart_->partName ().myCstring ());
      }
d537 1
a537 1
void WitSglSrcSite::printAdvance ()
d539 13
a551 24
   if (myGlobalComp ()->selPrintLevel () >= 2)
      {
      if (sglSrcMode ())
         fprintf (msgFile (),
            "\n"
            "---------------------------------\n"
            "Altering Single-Source Selection:\n"
            "---------------------------------\n"
            "\n"
            "   Part %s\n"
            "   Selected BopEntry: %s #%d\n",
            myPart_     ->partName        ().myCstring (),
            selBopEntry_->myOperationName ().myCstring (),
            selBopEntry_->localIndex      ());
      else
         fprintf (msgFile (),
            "\n"
            "-------------------------------\n"
            "Switching to Multi-Source Mode:\n"
            "-------------------------------\n"
            "\n"
            "   Part %s\n",
            myPart_->partName ().myCstring ());
      }
@


1.14
log
@Continued implementation of Single-Source.
@
text
@a29 1
#include <ObjStack.h>
d150 1
a150 2
   allocRepos_ .clear ();
   configRepos_.clear ();
d341 16
d385 1
d404 6
a409 1
   selBopEntry_ = myPmrMgr ()->nextBopEnt (myPart_, NULL, active_);
d418 2
d422 18
a439 1
   selBopEntry_ = myPmrMgr ()->nextBopEnt (myPart_, selBopEntry_, active_);
d446 7
d463 1
a463 1
   reqsPlaced_.setToScalar (witTRUE);
@


1.13
log
@Continued implementation of Single-Source.
@
text
@d99 2
a100 1
   double origNetQty;
d117 4
d123 6
a128 1
      configRepos_.restore ();
d312 17
d429 17
d456 1
a456 1
            if (myPmrMgr ()->selBopEntry (myPart_, thePer) != selBopEntry_)
d458 1
a458 1
                  "Single-Source selection mis-match not yet implemented.");
@


1.12
log
@Continued implementation of Single-Source.
@
text
@d112 1
a112 1
      applySglSrcSels ();
d116 2
d147 17
d289 14
a302 1
void WitSglSrcMgr::applySglSrcSels ()
d310 2
a311 1
      theSite->applySelection ();
d344 3
a346 1
      mySelector_  (theSelector)
d360 3
a362 1
   selBopEntry_ = myPmrMgr ()->nextAllPerBopEnt (myPart_, NULL);
d373 1
a373 1
   selBopEntry_ = myPmrMgr ()->nextAllPerBopEnt (myPart_, selBopEntry_);
d380 1
a380 1
void WitSglSrcSite::applySelection ()
d386 32
a417 2
         if (myPmrMgr ()->selBopEntry (myPart_, thePer) != selBopEntry_)
            myPmrMgr ()->select (selBopEntry_, thePer);
@


1.11
log
@Continued implementation of Single-Source.
@
text
@a247 3
   if (mySelector_->buildAhead ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Build-Ahead");

@


1.10
log
@Continued implementation of Single-Source.
@
text
@d43 1
a45 1
      activeSites_     (* new WitObjStack <WitSglSrcSite> (myProblem ())),
d59 1
d61 5
d72 1
a72 1
   WitPart * thePart;
d74 1
a74 2
   forEachPart (thePart, myProblem ())
      delete mySglSrcSiteFor_ (thePart);
d78 1
a78 1
   delete & activeSites_;
d104 2
d112 2
a115 4
      if (nextAltSite_ == NULL)
         if (! sglSrcSelsExist ())
            break;

a135 3
      if (! nextAltSite_->hasSel ())
         activeSites_.push (nextAltSite_);

a136 2

      applySglSrcSels ();
d139 2
a140 1
   reset ();
a243 3
   if (nPeriods () > 1)
      myMsgFac () ("nyiWithSglSrcSmsg", "nPeriods > 1");

d260 1
a260 1
WitBoolean WitSglSrcMgr::sglSrcSelsExist ()
a261 2
   WitSglSrcSite * theSite;

d263 1
d265 1
a265 1
   theItr.attachTo (activeSites_);
d268 1
a268 4
      if (theSite->hasSel ())
         return witTRUE;

   return witFALSE;
a274 2
   WitSglSrcSite * theSite;

d276 1
d278 1
a278 1
   theItr.attachTo (activeSites_);
a285 13
void WitSglSrcMgr::reset ()
   {
   WitSglSrcSite * theSite;

   allocRepos_ .clear ();
   configRepos_.clear ();

   while (activeSites_.pop (theSite))
      theSite->reset ();
   }

//------------------------------------------------------------------------------

a312 1
      candBopEnts_ (* new WitBopEntStack (myProblem ())),
a313 1
      sglSrcMode_  (witTRUE),
a321 1
   delete & candBopEnts_;
d326 1
a326 1
void WitSglSrcSite::advance ()
d328 1
a328 1
   witAssert (sglSrcMode_);
d330 2
a331 3
   if (selBopEntry_ == NULL)
      {
      myPmrMgr ()->findExpBopEnts (myPart_, 0, candBopEnts_);
d333 1
a333 1
      candBopEnts_.pop (selBopEntry_);
d335 3
a337 6
      witAssert (selBopEntry_ == myPmrMgr ()->selBopEntry (myPart_, 0));
      }

   if (! candBopEnts_.isEmpty ())
      {
      candBopEnts_.pop (selBopEntry_);
d339 1
a339 6
      printAlt ();
      }
   else
      {
      selBopEntry_ = NULL;
      sglSrcMode_  = witFALSE;
d341 1
a341 2
      printSwitchToMulti ();
      }
d348 2
d351 3
a353 10
      if (myPmrMgr ()->selBopEntry (myPart_, 0) != selBopEntry_)
         myPmrMgr ()->select (selBopEntry_, 0);
   }

//------------------------------------------------------------------------------

void WitSglSrcSite::reset ()
   {
   selBopEntry_ = NULL;
   sglSrcMode_  = witTRUE;
d358 1
a358 1
void WitSglSrcSite::printAlt ()
d361 23
a383 11
      fprintf (msgFile (),
         "\n"
         "-----------------------------------\n"
         "Altering a Single-Source Selection:\n"
         "-----------------------------------\n"
         "\n"
         "   Part %s\n"
         "   Selected BopEntry: %s #%d\n",
         myPart_     ->partName        ().myCstring (),
         selBopEntry_->myOperationName ().myCstring (),
         selBopEntry_->localIndex      ());
d388 1
a388 1
void WitSglSrcSite::printSwitchToMulti ()
d391 23
a413 8
      fprintf (msgFile (),
         "\n"
         "-------------------------------\n"
         "Switching to Multi-Source Mode:\n"
         "-------------------------------\n"
         "\n"
         "   Part %s\n",
         myPart_->partName ().myCstring ());
@


1.9
log
@Continued implementation of Single-Source.
@
text
@d44 1
a44 1
      altSite_         (NULL),
d103 1
a103 1
      altSite_ = NULL;
d107 1
a107 1
      if (altSite_ == NULL)
d120 1
a120 1
      if (altSite_ == NULL)
d131 2
a132 2
      if (! altSite_->hasSel ())
         activeSites_.push (altSite_);
d134 1
a134 1
      altSite_->advance ();
d152 1
a152 1
      if (altSite_ == NULL)
d162 1
a162 1
                  altSite_ = theSite;
d165 1
a165 1
         if (altSite_ != NULL)
d178 1
a178 1
   if (altSite_ != NULL)
@


1.8
log
@Continued implementation of single-source.
@
text
@d43 1
d107 6
d122 5
a126 1
         configRepos_.restore ();
a135 2
      configRepos_.restore ();

d151 4
a154 3
   if (altSite_ == NULL)
      {
      theItr.attachTo (mySelector_->pendingPts ());
d156 8
a163 3
      while (theItr.advance (theSelPt))
         {
         theSite = mySglSrcSiteFor (theSelPt);
d165 2
a166 3
         if (theSite != NULL)
            if (theSite->sglSrcMode ())
               altSite_ = theSite;
a168 4
      if (altSite_ != NULL)
         return;
      }

d258 17
@


1.7
log
@Continued implementation of single-source.
@
text
@d27 1
d45 2
a46 2
      allocRepos_      (* new WitDataRepos (myProblem ())),
      configRepos_     (* new WitDataRepos (myProblem ()))
d111 1
a111 2
      allocRepos_ .restore ();
      configRepos_.restore ();
d114 3
d118 1
d120 1
a120 1
      if (! altSite_->active ())
d123 3
a125 1
      altSite_->alterSelection ();
d147 2
a148 3
         if (theSelPt->hasResAlt ())
            {
            theSite = mySglSrcSiteFor (theSelPt);
d150 2
a151 2
            if (theSite != NULL)
               {
d153 1
d155 2
a156 3
               return;
               }
            }
d166 3
a168 1
   if (mySglSrcSiteFor (theSelPt) != NULL)
d170 1
a170 2
      if (altSite_ != NULL)
         return witTRUE;
d172 3
a174 2
      if (! theSelPt->hasResAlt ())
         return witTRUE;
d274 1
a274 1
      theSite->resetSelection ();
d295 7
d306 1
d308 1
d317 1
d322 1
a322 1
void WitSglSrcSite::alterSelection ()
d324 1
a324 1
   WitSelPt * theSelPt;
d326 3
a328 2
   if (active ())
      applySelection ();
d330 1
a330 1
   theSelPt = mySelector_->myPmrMgr ()->mySelPt (myPart_, 0);
d332 2
a333 1
   printPreAltIA ();
d335 3
a337 1
   mySelector_->alterSelection (theSelPt);
d339 10
a348 1
   selBopEntry_ = mySelector_->myPmrMgr ()->selBopEntry (myPart_, 0);
d350 7
a356 1
   witAssert (active ());
d361 1
a361 1
void WitSglSrcSite::resetSelection ()
d364 1
d368 2
a369 2
 
void WitSglSrcSite::applySelection ()
d371 12
a382 4
   witAssert (active ());

   if (mySelector_->myPmrMgr ()->selBopEntry (myPart_, 0) != selBopEntry_)
      mySelector_->myPmrMgr ()->select (selBopEntry_, 0);
d387 1
a387 1
void WitSglSrcSite::printPreAltIA ()
d392 6
a397 3
         "----------------------------------\n"
         "Altering a Single-Source Selection\n"
         "----------------------------------\n");
@


1.6
log
@Continued implementation of Single-Source.
@
text
@d161 3
a163 2
   if (altSite_ != NULL)
      if (mySglSrcSiteFor (theSelPt) != NULL)
d165 4
@


1.5
log
@Continued implementation of single-source.
@
text
@d42 1
a42 1
      skipSite_        (NULL),
d101 1
a101 1
      skipSite_ = NULL;
d113 1
a113 1
      if (skipSite_ == NULL)
d116 2
a117 2
      if (! skipSite_->active ())
         activeSites_.push (skipSite_);
d119 1
a119 1
      skipSite_->alterSelection ();
d136 1
a136 1
   if (skipSite_ == NULL)
d147 1
a147 1
               skipSite_ = theSite;
d161 1
a161 1
   if (skipSite_ != NULL)
@


1.4
log
@Continued implementation of single-source.
@
text
@d21 2
d29 1
d41 3
d45 1
a45 2
      selectRepos_     (* new WitDataRepos (myProblem ())),
      mySglSrcSiteFor_ (* new WitPtrMap <WitPart, WitSglSrcSite> (myProblem ()))
d53 2
d57 1
a57 1
         mySglSrcSiteFor_ (thePart) = new WitSglSrcSite (thePart);
d69 3
a72 2
   delete & selectRepos_;
   delete & allocRepos_;
d90 1
a90 1
void WitSglSrcMgr::commitMaxQtyTest (double & netQty)
d92 4
a95 1
   double hypoNetQty;
d97 1
a97 1
   hypoNetQty = netQty;
d99 13
a111 2
   stronglyAssert (allocRepos_ .isEmpty ());
   stronglyAssert (selectRepos_.isEmpty ());
d113 2
a114 1
   mySelector_->commitMaxQty (hypoNetQty);
d116 2
a117 2
   allocRepos_ .restore ();
   selectRepos_.restore ();
d119 1
a119 9
   fprintf (msgFile (),
      "\n"
      "Hypo Commit Max Qty:\n"
      "   Part:       %s\n"
      "   Period:     %d\n"
      "   Commit Vol: %.0f\n",
      mySelector_->myHeurAtor ()->topPart ()->partName ().myCstring (),
      mySelector_->myHeurAtor ()->topPer (),
      netQty - hypoNetQty);
d121 2
a122 1
   mySelector_->commitMaxQty (netQty);
d124 1
a124 2
   allocRepos_ .clear ();
   selectRepos_.clear ();
d129 1
a129 1
void WitSglSrcMgr::commitMaxQty (double & netQty)
d131 27
a157 2
   stronglyAssert (allocRepos_ .isEmpty ());
   stronglyAssert (selectRepos_.isEmpty ());
d159 5
a163 1
   mySelector_->commitMaxQty (netQty);
d165 1
a165 2
   allocRepos_ .clear ();
   selectRepos_.clear ();
d184 1
a184 1
void WitSglSrcMgr::saveSelectVal (int & theVar)
d186 1
a186 1
   selectRepos_.saveVal (theVar);
d191 1
a191 1
void WitSglSrcMgr::saveSelectVal (WitSelCand * & theVar)
d193 1
a193 1
   savePtrVal (selectRepos_, theVar);
d198 1
a198 6
WitBoolean WitSglSrcMgr::sglSrcMode (WitPart * thePart)
   {
   return (mySglSrcSiteFor_ (thePart) != NULL);
   }

//------------------------------------------------------------------------------
d202 2
d224 4
d239 41
d283 1
a283 1
WitSglSrcSite::WitSglSrcSite (WitPart * thePart):
d286 3
a288 1
      myPart_      (thePart)
d296 49
@


1.3
log
@Continued implementation of single-source.
@
text
@d13 4
a16 1
// Contains the implementation of class SglSrcMgr.
d22 1
d26 1
d35 1
a35 1
      WitProbAssoc (theSelector),
d37 4
a40 3
      mySelector_  (theSelector),
      allocRepos_  (* new WitDataRepos (myProblem ())),
      selectRepos_ (* new WitDataRepos (myProblem ()))
d42 1
a42 2
   if (myCompMgr ()->nSubEntries () > 0)
      myMsgFac () ("nyiWithSglSrcSmsg", "Substitute BOM entries");
d44 1
a44 2
   if (myGlobalComp ()->perfPegging ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Pegging");
d46 1
a46 2
   if (mySelector_->penExec ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Penalized execution");
d48 3
a50 19
   if (mySelector_->selSplit ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Selection splitting");

   if (myGlobalComp ()->computeCriticalList ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Critical parts list");

   if (nPeriods () > 1)
      myMsgFac () ("nyiWithSglSrcSmsg", "nPeriods > 1");

   if (mySelector_->buildAhead ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Build-Ahead");

   if (mySelector_->multiExec ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Multi-Exec");

   if (mySelector_->selectiveSR ())
      myMsgFac () ("nyiWithSglSrcSmsg", "Selective stock reallocation");

   myMsgFac () ("sglSrcMsg");
d57 6
d114 13
d151 58
@


1.2
log
@Continued implementation of single source.
@
text
@d19 1
d21 1
d36 27
d72 13
@


1.1
log
@Continued implementation of single source.
@
text
@d31 2
a32 1
      myDataRepos_ (* new WitDataRepos (myProblem ()))
d41 2
a42 1
   delete & myDataRepos_;
d53 3
d58 2
a59 1
   myDataRepos_.restore ();
d73 2
a74 1
   myDataRepos_.clear ();
d79 1
a79 1
void WitSglSrcMgr::saveVal (int & theVar)
d81 1
a81 1
   myDataRepos_.saveVal (theVar);
d86 1
a86 1
void WitSglSrcMgr::saveVal (double & theVar)
d88 15
a102 1
   myDataRepos_.saveVal (theVar);
@

