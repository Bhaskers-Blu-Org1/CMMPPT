head	1.3;
access;
symbols
	EndRw-branch:1.2.0.4
	Root-of-EndRw:1.2
	rwToStl:1.2.0.2;
locks; strict;
comment	@ * @;


1.3
date	2003.03.03.23.26.48;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2002.08.26.22.49.00;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.23.21.00.33;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@a0 358
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ImpMpH
#define ImpMpH

//------------------------------------------------------------------------------
// Header file: "ImpMp.h"
//
// Contains the declaration of class ImpMp.
// This file is at the top of the following linear chain of header files:
//
// ImpMp.h,    which includes:
// MpObjs.h,   which includes:
// PerCon.h,   which includes:
// PerVar.h,   which includes:
// MpModel.h,  which includes:
// ModelEl.h,  which includes:
// Mapping.h.
//------------------------------------------------------------------------------

#include <MpObjs.h>
#include <Problem.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// class ImpMp
// The implosion linear programming model.
//------------------------------------------------------------------------------

class WitImpMp: public WitMpModel
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitImpMp (WitOptImploder * theOptImploder);
         //
         // The arguments are just passed on to the constructor function for
         // MpModel.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitImpMp ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual WitBoolean needDual ();

      virtual void reportInfeasible ();

      virtual void reportUnbounded ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitBoundsObj  *,        myBoundsObj)
      accessFunc (WitPrimaryObj *,        myPrimaryObj)
      accessFunc (WitObj1Obj *,           myObj1Obj)
      accessFunc (WitRevObj *,            myRevObj)
      accessFunc (WitInvObj *,            myInvObj)
      accessFunc (WitServObj *,           myServObj)
      accessFunc (WitSubObj *,            mySubObj)
      accessFunc (WitObj2Obj *,           myObj2Obj)

      accessFunc (FILE *,                 solnFile)

      accessWrapper (WitCompMgr *, myCompMgr, myProblem ())

      //-----------------------------------------------------------------------
      // Derived ModelEl storing functions.
      // Each of these functions store its argument (a newly constructed
      // instance of a derived class of ModelEl) in the approriate place in
      // this ImpMp.
      //-----------------------------------------------------------------------

      void storeDerived (WitScrapVar *);
      void storeDerived (WitNonSubVar *);
      void storeDerived (WitSubVar *);
      void storeDerived (WitShipVar *);
      void storeDerived (WitSlbvVar *);
      void storeDerived (WitExecVar *);
      void storeDerived (WitStockVar *);
      void storeDerived (WitCumShipVar *);

      void storeDerived (WitResourceCon *);
      void storeDerived (WitSubCon *);
      void storeDerived (WitShipCon *);
      void storeDerived (WitSlbCon *);

      //-----------------------------------------------------------------------
      // ModelEl look-up functions.
      //
      // Each of these functions returns the ModelEl in this ImpMp
      // corresponding to its arguments, if one exists; otherwise NULL.
      //-----------------------------------------------------------------------

      WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod);
      WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod);
      WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod);
      WitShipVar *     myShipVar     (WitDemand *,    WitPeriod);
      WitExecVar *     myExecVar     (WitOperation *, WitPeriod);
      WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod);
      WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod);

      WitResourceCon * myResourceCon (WitPart *,      WitPeriod);
      WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod);
      WitShipCon *     myShipCon     (WitDemand *,    WitPeriod);

      WitSlbvVar *     mySlbvVar     (const WitBoundedVar *);
      WitSlbCon *      mySlbCon      (const WitBoundedVar *);

      //-----------------------------------------------------------------------
      // ModelEl item printing functions.
      //
      // Each of these functions prints its argument to modelFile ().
      //-----------------------------------------------------------------------

      void printItem (WitNode *);
      void printItem (WitBomEntry *);
      void printItem (WitSubEntry *);
      void printItem (WitDemand *);

      void printItem (const WitBoundedVar *);

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void storeBoundedVar (WitBoundedVar * theBoundedVar);
         //
         // Stores theBoundedVar.

      void screenModel ();
         //
         // Performs screening of constraints and variables.

      WitBoolean slbvVarsExist ();
         //
         // Returns TRUE iff there are any slbvVars in this ImpMp.

      void printPeriod (WitPeriod t);
         //
         // Prints t to modelFile ().

      void writeSoln (const WitString & fName);
         //
         // Prints out the primal MP solution from WIT data structures.
         // Writes to a file whose name is given by fName.

      void formModeledSoln ();
         //
         // Forms the modeled part of the comprehensive implosion solution, by
         // copying the values of the optimal primal MP solution.

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables ();
         //
         // Generates all MpVars for this ImpMp.

      virtual void generateConstraints ();
         //
         // Generates all MpCons for this ImpMp.

      virtual WitMpObj * generateObjectives ();
         //
         // Generates all MpObjs for this ImpMp.

      virtual void printModelElHeading ();

      virtual void displayDerived ();
         //
         // Writes out the bounds counts.

      virtual void printDerived ();
         //
         // Print the BoundedVars part of this ImpMp.

      virtual void initDepVars ();
         //
         // Initializes the dependent variables, i.e., those variables whose
         // initial value depends on the initial value of other variables.

      //-----------------------------------------------------------------------
      // Private member functions relating to output of MP solution.
      //-----------------------------------------------------------------------

      void writeMeSoln (const WitModelEl * theModelEl);
         //
         // Writes the solution value of theModelEl, or blank if it is NULL,
         // or the value is nearly zero.
         // If the ModelEl is a variable, the primal solution value is
         // written; if it is a constraint, the dual value is written.

      void writePartSoln ();
         //
         // Prints out the aspects of the primal MP solution associated with
         // parts. Optionally prints the dual solution for material balance
         // constraints.

      void writeOperationSoln ();
         //
         // Prints out the aspects of the primal MP solution associated with
         // Operations.

      void writeSubEntrySoln ();
         //
         // Prints out the aspects of the primal MP solution associated with
         // SubEntries.

      void writeDemandSoln ();
         //
         // Prints out the aspects of the primal MP solution associated with
         // demands.

      void writeBoundedVarSoln ();
         //
         // Prints out the aspects of the primal MP solution associated with
         // BoundedVars.

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitImpMp);


         // The following are formats used in printing a ModelEl.
         //
      inline static const char * itemFormat ()
         {
         return " %-12s %-12s %-12s";
         }

      inline static const char * periodDFormat ()
         {
         return " %4d";
         }

      inline static const char * periodSFormat ()
         {
         return " %4s";
         }

      WitBoolean scrapVarNeeded (WitPart * thePart, WitPeriod t);
         //
         // Returns TRUE iff a scrap variable is needed for thePart in
         // period t.

      void screenImpCons ();
         //
         // Performs generic screening of the constraints of this ImpMp.
         // Constraints are considered in an order that facilitates
         // cascading of screening, i.e., we try to screen in an order such
         // that if screening constraint A permits constraint B to be screened,
         // then A is screened before B.

      void fixScrapVars ();
         //
         // Determines which scrap variables are not needed and fixes them at
         // zero.

      void relaxCumShipNonNeg ();
         //
         // Relaxes redundant nonnegativity bounds on cumulative shipment
         // variables.

      void screenSlbModelEls ();
         //
         // Screens out the variables and constraints for soft lower bounds
         // that are not soft.

      WitBoolean positiveHardLBsExist ();
         //
         // Returns witTRUE iff myProblem  () has at least one BoundSet with a
         // positive hardLB.

      void printBoundedVars ();
         //
         // Prints information about the BoundedVars of this ImpMp to
         // modelFile ().

      //-----------------------------------------------------------------------
      // Static constant private member data.
      //-----------------------------------------------------------------------

      static const double solnEpsilon;
         //
         // Values must exceed this amount in order to appear in the solution
         // output.

      //-----------------------------------------------------------------------
      // The ModelEl Schedules for this ImpMp.
      //-----------------------------------------------------------------------

      WitSchedule <WitPart,      WitScrapVar    *> myScrapVar_;
      WitSchedule <WitBomEntry,  WitNonSubVar   *> myNonSubVar_;
      WitSchedule <WitSubEntry,  WitSubVar      *> mySubVar_;
      WitSchedule <WitDemand,    WitShipVar     *> myShipVar_;
      WitSchedule <WitBoundSet,  WitSlbvVar     *> mySlbvVar_;
      WitSchedule <WitOperation, WitExecVar     *> myExecVar_;
      WitSchedule <WitMaterial,  WitStockVar    *> myStockVar_;
      WitSchedule <WitDemand,    WitCumShipVar  *> myCumShipVar_;

      WitSchedule <WitPart,      WitResourceCon *> myResourceCon_;
      WitSchedule <WitBomEntry,  WitSubCon      *> mySubCon_;
      WitSchedule <WitDemand,    WitShipCon     *> myShipCon_;
      WitSchedule <WitBoundSet,  WitSlbCon      *> mySlbCon_;

      //-----------------------------------------------------------------------
      // The MpObjs for this ImpMp.
      //-----------------------------------------------------------------------

      WitBoundsObj  *  myBoundsObj_;
      WitPrimaryObj * myPrimaryObj_;
      WitObj1Obj    *    myObj1Obj_;
      WitRevObj     *     myRevObj_;
      WitInvObj     *     myInvObj_;
      WitServObj    *    myServObj_;
      WitSubObj     *     mySubObj_;
      WitObj2Obj    *    myObj2Obj_;

      //-----------------------------------------------------------------------
      // Other private member data.
      //-----------------------------------------------------------------------

      WitList <WitBoundedVar> myBoundedVars_;
         //
         // The list of all BoundedVars in this ImpMp.

      int nSlbvVars_;
         //
         // # soft lower bound violation variables.

      FILE * solnFile_;
         //
         // Solution output file.
   };

#endif
@

