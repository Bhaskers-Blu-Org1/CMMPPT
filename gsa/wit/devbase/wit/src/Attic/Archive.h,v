head	1.6;
access;
symbols
	EndRw-branch:1.5.0.4
	Root-of-EndRw:1.5
	rwToStl:1.5.0.2
	latest_sce_3_10_20010924:1.2.0.2
	sce_3_10_20010924:1.2;
locks; strict;
comment	@ * @;


1.6
date	2003.03.03.23.26.37;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2002.05.10.18.02.08;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.15.21.21.33;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.01.00.25.39;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.17.22.00.08;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.14.20.43.52;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.5
log
@Continued implementation of single source.
@
text
@@


1.4
log
@Continued implementation of sel-split for pen-exec.
@
text
@a0 124
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ArchiveH
#define ArchiveH

//------------------------------------------------------------------------------
// Header file: "Archive.h"
//
// Contains the declaration    of class template Archive <VarType>.
// Contains the implementation of class template Archive <VarType>.
//------------------------------------------------------------------------------

#include <PairStack.h>

//------------------------------------------------------------------------------
// Class Template Archive <VarType>
//
// Saves the current values of variables of type VarType and restores them to
// the saved values upon request. 
//
// Implemented in this file.
//------------------------------------------------------------------------------

template <class VarType>
      class WitArchive: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitArchive (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitArchive ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void saveVal (VarType & theVar);
         //
         // Saves the current value of theVar.

      void restore ();
         //
         // Restores all variables whose values were saved by this Archive to
         // their saved values and clears this Archive of all its saved values.
         // The restoration is done on a last-in-first-out basis.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssignTemp (WitArchive, VarType);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPairStack <VarType, VarType> savedPairs_;
         //
         // The set of variables and saved values currently stored by this 
         // Archive.
   };

//------------------------------------------------------------------------------
// Implementation of class template Archive <VarType>.
//------------------------------------------------------------------------------

template <class VarType>
      inline WitArchive <VarType>::WitArchive (WitProblem * theProblem):
         WitProbAssoc (theProblem),

         savedPairs_  (theProblem)

   {
   }

//------------------------------------------------------------------------------

template <class VarType>
      inline WitArchive <VarType>::~WitArchive ()
   {
   }

//------------------------------------------------------------------------------

template <class VarType>
      inline void WitArchive <VarType>::saveVal (VarType & theVar)
   {
   savedPairs_.push (& theVar, theVar);
   }

//------------------------------------------------------------------------------
    
template <class VarType>
      void WitArchive <VarType>::restore ()
   {
   VarType * theVarPtr;
   VarType   theVal;

   while (savedPairs_.pop (theVarPtr, theVal))
      * theVarPtr = theVal;
   }

#endif
@


1.3
log
@Changed some comments.
@
text
@d56 1
a56 1
      void restoreAllVals ();
a61 11
      void restoreAllExcept (int nToLeave);
         //
         // Same as restoreAllVals, but leaves the first nToLeave 
         // (variable, value) pairs unrestored.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (int, nSavedVals)

a81 4

      int nSavedVals_;
         //
         // # of saved values currently stored by this Archive.
d92 2
a93 2
         savedPairs_  (theProblem),
         nSavedVals_  (0)
a109 2

   nSavedVals_ ++;
d115 1
a115 1
      void WitArchive <VarType>::restoreAllVals ()
a121 22

   nSavedVals_ = 0;
   }

//------------------------------------------------------------------------------
    
template <class VarType>
      void WitArchive <VarType>::restoreAllExcept (int nToLeave)
   {
   VarType * theVarPtr;
   VarType   theVal;

   witAssert (nToLeave >= 0);

   witAssert (nToLeave <= nSavedVals_);

   for (; nSavedVals_ > nToLeave; nSavedVals_ --)
      {
      savedPairs_.pop (theVarPtr, theVal);

      * theVarPtr = theVal;
      }
@


1.2
log
@Implemented selection splitting speed-up by partial allocation reuse.
@
text
@d25 1
a25 1
// Saves the current values of a variables of type VarType and restores them to
@


1.1
log
@Created and used Archive template.
@
text
@d60 12
a71 2
         // If any variable was saved more than once, it will be restored to its
         // first saved value.
d91 6
a96 1
         // The of variables and saved values currently stored by this Archive.
d107 2
a108 1
         savedPairs_  (theProblem)
d125 2
d139 22
@

