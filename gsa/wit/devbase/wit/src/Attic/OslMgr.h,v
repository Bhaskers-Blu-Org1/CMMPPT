head	1.21;
access;
symbols
	nextGenBranch:1.19.0.2
	nextGenRoot:1.19
	sce_3_30_20030627:1.18
	EndRw-branch:1.13.0.4
	Root-of-EndRw:1.13
	rwToStl:1.13.0.2
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2003.09.18.18.30.17;	author rjw;	state dead;
branches;
next	1.20;

1.20
date	2003.08.06.23.31.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.08.20.59.29;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.28.22.19.31;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.20.19.38.34;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.05.13.20.43.25;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.24.20.40.20;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.21.23.36.53;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.26.19.53.00;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.29.17.57.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.27.20.26.35;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.26.22.49.06;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.23.21.00.39;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.19.23.25.07;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.15.20.03.47;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.08.17.33.34;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.02.17.03.36;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.45;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.25;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.35;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.27;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.27;	author wit;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Continued implementation of opt with COIN.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OslMgrH
#define OslMgrH

//------------------------------------------------------------------------------
// Header file: "OslMgr.h"
//
// Contains the declaration of class OslMgr.
//------------------------------------------------------------------------------

#include <OptSolver.h>
#include <Str.h>

//------------------------------------------------------------------------------
// OSL Typedefs.
//------------------------------------------------------------------------------

typedef struct EKKContext EKKContext;
typedef struct EKKModel   EKKModel;

//------------------------------------------------------------------------------
// class OslMgr
//
// Responsible for solving an OptModel by making direct calls to OSL.
//
// Class Hierarchy:
//
// ProbAssoc
//    OptSolver
//       OslMgr
//------------------------------------------------------------------------------

class WitOslMgr: public WitOptSolver
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOslMgr (WitOptModel *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOslMgr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void solve ();
         //
         // Override from class OptSolver.

      void innerSolve ();
         //
         // Does the main work on solve ().

      void createOslModel ();
         //
         // Creates myOslModel_.

      void initContext ();
         //
         // Initializes the OSL context.

      void deleteOslModel ();
         //
         // Deletes myOslModel_.

      void passFixedModel ();
         //
         // Passes the fixed parts of the optimization model to OSL.

      void passDimens ();
         //
         // Passes the dimensions to the optimization to OSL.

      void passMatrix ();
         //
         // Passes the matrix to OSL.

      void setParams ();
         //
         // Sets for maximization and imaxfactor.

      void markIntVars ();
         //
         // Marks the integer variables as such.

      void passFlexibleModel ();
         //
         // Passes the flexible parts of the optimization model to OSL.

      void passConBounds (WitVector <double> &, WitVector <double> &);
         //
         // Passes the following data items to OSL:
         //
         //    The lower bound on each constraint.
         //    The upper bound on each constraint.
         //
         // The Vectors passed are working vectors.

      void passVarBounds (WitVector <double> &, WitVector <double> &);
         //
         // Passes the following data items to OSL:
         //
         //    The lower bound on each variable.
         //    The upper bound on each variable.
         //
         // The Vectors passed are working vectors.

      void passObjCoeffs (WitVector <double> &);
         //
         // Passes the following data item to OSL:
         //
         //    The objective coefficient on each variable.
         //
         // The Vector passed is a working vector.

      void prtMpsFile ();
         //
         // Prints an MPS file of the model.
         // For developers' use only.

      void solveMIP ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // a MIP.

      void solveLpUnAcc ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // an LP in unaccelerated mode.

      void solveLpAcc ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // an LP in accelerated mode.

      void passInitSoln ();
         //
         // Copies the initial primal optimization solution from myOptModel () 
         // into OSL, as needed.

      void scale ();
         //
         // Calls OSL's scale.

      void preSolve ();
         //
         // Calls OSL's preSolve.

      void defPresolveFileName ();
         //
         // Sets presolveFileName_ to a unique name for a temporary file to be
         // used as the presolve file.

      void crash ();
         //
         // Calls OSL's crash, as needed.

      void primalSimplex ();
         //
         // Calls OSL's primalSimplex.

      void postSolve ();
         //
         // Calls OSL's postSolve.

      void postSolveWithRec (const char * saveFile);
         //
         // Calls OSL's postSolve with recovery for the OSL postSolve bug.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptModel ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptModel ().

      void printSoln ();
         //
         // Has OSL print its solution.

      void checkProbStat ();
         //
         // Checks the value of OSL's IPROBSTAT variable and generates a
         // fatal error if it is anything but 0 (optimal).

      void checkRetPtr (const void * thePtr, const char * funcName);
         //
         // If thePtr == NULL, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      void checkRetVal (const char * funcName);
         //
         // If retVal_ != 0, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      noCopyCtorAssign (WitOslMgr);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      int retVal_;
         //
         // The integer value returned by some OSL functions, where
         // retVal_ != 0 indicates an error.

      static EKKContext * sharedOslContext_;
         //
         // The OSL Context to be used by all OslMgrs in this program process,
         // or NULL. It's non-NULL, iff myOslModel_ is non-NULL for at least one
         // OslMgr.

      EKKModel * myOslModel_;
         //
         // The OSL Model owned by this OslMgr, or NULL.

      WitString presolveFileName_;
         //
         // The file name to be used by preSolve and postSolve.
   };

#endif
@


1.20
log
@Eliminated the "tempnam" linker warning on Linux.
@
text
@@


1.19
log
@Fixed a bug with the stopOpt parameter.
Fixed a timing bug.
@
text
@d170 5
@


1.18
log
@Continued implementation of opt with COIN.
@
text
@d71 4
@


1.17
log
@Continued implementation of opt with Coin.
@
text
@d36 3
a38 2
// OptSolver
//    OslMgr
@


1.16
log
@Continued implementation of opt with COIN.
@
text
@d106 18
a123 4
      void passConLBs    (WitVector <double> &);
      void passConUBs    (WitVector <double> &);
      void passVarLBs    (WitVector <double> &);
      void passVarUBs    (WitVector <double> &);
d126 1
a126 1
         // These 5 functions pass the following 5 data items to OSL:
a127 4
         //    The lower bound           on each constraint.
         //    The upper bound           on each constraint.
         //    The lower bound           on each variable.
         //    The upper bound           on each variable.
@


1.15
log
@Implemented OSL postSolve error recovery.
@
text
@d19 1
d32 6
a37 1
// Responsible for all interactions with OSL.
d40 1
a40 1
class WitOslMgr: public WitUtil
d50 6
d60 1
a60 1
      ~WitOslMgr ();
d63 1
a63 1
      // Other public member functions.
d66 1
a66 1
      void solve ();
d68 1
a68 7
         // Uses Osl to solve myOptModel.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d144 1
a144 1
         // Copies the initial primal optimization solution from myOptModel_ 
d173 1
a173 1
         // Stores the primal solution in myOptModel_.
d177 1
a177 1
         // Stores the dual solution in myOptModel_.
a202 12

      WitOptModel * const myOptModel_;
         //
         // The OptModel for this OslMgr.

      WitOptImploder * const myOptImploder_;
         //
         // The OptImploder for this OslMgr.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this OslMgr.
@


1.14
log
@Continued implementation of propotionate routing.
@
text
@d161 4
@


1.13
log
@Switched to specifying the OSL log file by name instead of by file pointer.
@
text
@d191 1
a191 1
      // Other private member data.
@


1.12
log
@Continued implementation of opt implosion with lot sizes.
@
text
@a216 4
      FILE * oslLogFile_;
         //
         // The OSL log file for myOslModel_.

@


1.11
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d121 5
a134 5

      void solveMIP ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // a MIP.
@


1.10
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d92 4
d121 6
a126 1
      void solveByOslUnAcc ();
d128 2
a129 2
         // Makes appropriate calls to OSL to solve the optimization in
         // unaccelerated mode.
d131 1
a131 1
      void solveByOslAcc ();
d133 2
a134 2
         // Makes appropriate calls to OSL to solve the optimization in
         // accelerated mode.
@


1.9
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d42 1
a42 1
      WitOslMgr (WitMpModel *);
d54 1
a54 1
      void solveMP ();
d56 1
a56 1
         // Uses Osl to solve myMpModel.
d78 1
a78 1
         // Passes the fixed parts of the MP model to OSL.
d82 1
a82 1
         // Passes the dimensions to the MP to OSL.
d94 1
a94 1
         // Passes the flexible parts of the MP model to OSL.
d119 2
a120 2
         // Makes appropriate calls to OSL to solve the MP in unaccelerated
         // mode.
d124 2
a125 1
         // Makes appropriate calls to OSL to solve the MP in accelerated mode.
d129 2
a130 2
         // Copies the initial primal MP solution from myMpModel_ into OSL,
         // as needed.
d154 1
a154 1
         // Stores the primal solution in myMpModel_.
d158 1
a158 1
         // Stores the dual solution in myMpModel_.
d185 1
a185 1
      WitMpModel * const myMpModel_;
d187 1
a187 1
         // The MpModel for this OslMgr.
@


1.8
log
@Fixed a CPU time problem in opt implosion with OSL V3.
@
text
@d42 1
a42 1
      WitOslMgr (WitLpModel *);
d54 1
a54 1
      void solveLP ();
d56 1
a56 1
         // Uses Osl to solve myLpModel.
d78 1
a78 1
         // Passes the fixed parts of the LP model to OSL.
d82 1
a82 1
         // Passes the dimensions to the LP to OSL.
d94 1
a94 1
         // Passes the flexible parts of the LP model to OSL.
d119 1
a119 1
         // Makes appropriate calls to OSL to solve the LP in unaccelerated
d124 1
a124 1
         // Makes appropriate calls to OSL to solve the LP in accelerated mode.
d128 1
a128 1
         // Copies the initial primal LP solution from myLpModel_ into OSL,
d153 1
a153 1
         // Stores the primal solution in myLpModel_.
d157 1
a157 1
         // Stores the dual solution in myLpModel_.
d184 1
a184 1
      WitLpModel * const myLpModel_;
d186 1
a186 1
         // The LpModel for this OslMgr.
@


1.7
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d88 1
a88 1
      void setAsMax ();
d90 1
a90 1
         // Specifies maximization to OSL.
@


1.6
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d19 1
a19 1
#include <Timing.h>
d21 6
a26 1
#if OSL_VERSION == 2
d30 1
d38 1
a38 1
      //-----------------------------------------------------------------------
d40 1
a40 1
      //-----------------------------------------------------------------------
d44 1
a44 1
      //-----------------------------------------------------------------------
d46 1
a46 1
      //-----------------------------------------------------------------------
d50 1
a50 1
      //-----------------------------------------------------------------------
d52 1
a52 6
      //-----------------------------------------------------------------------

      void checkRtCode (const char * routineName);
         //
         // Checks the OSL return code, assuming OSL routine routineName was
         // just called.
d54 1
a54 1
      void solve ();
a57 4
      void closeFilesAtExit ();
         //
         // Closes files for an error exit.

d60 3
a62 15
      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (double *,         dSpace)
      accessFunc (WitMsgFacility &, myMsgFac)

      inline long rtCode () const
         {
         return rtCodeData_;
         }

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d64 1
a64 8
      noCopyCtorAssign (WitOslMgr);

      inline long * rtCodePtr ()
         {
         return & rtCodeData_;
         }

      long getVal (long & var);
d66 1
a66 1
         // Returns the value of the OSL integer variable var.
d68 1
a68 1
      void setVal (long & var, long val);
d70 1
a70 1
         // Sets the value of osl integer variable var to val.
d72 1
a72 1
      double getVal (double & var);
d74 1
a74 1
         // Returns the value of osl real variable [var].
d76 1
a76 1
      void setVal (double & var, double val);
d78 1
a78 1
         // Sets the value of osl real variable [var] to [val].
d80 1
a80 1
      double * dSpaceArray (long & indexVar);
d82 1
a82 3
         // Returns the ptr into [dSpace] of the * indicated by
         // [indexVar]. E.g., if solution == dSpaceArray (NCOLSOL), then
         // solution[3] == the solution value for column 3.
d84 1
a84 1
      long * mSpaceArray (long & indexVar);
d86 1
a86 3
         // Returns the ptr into [mspace] of the * indicated by
         // [indexVar]. E.g., if colstat == mSpaceArray (NCOLSTAT), then
         // colstat[3] == the status bits for column 3.
d88 1
a88 1
      void setOslInfoMsgs (WitBoolean printMsgs);
d90 1
a90 1
         // Tells OSL whether or not to print informational messages.
d92 1
a92 1
      void openLogFile ();
d94 1
a94 1
         // Opens the OSL log file.
d96 5
a100 1
      void closeLogFile ();
d102 1
a102 3
         // Closes the OSL log file.

      void openPrslFile ();
d104 5
a108 3
         // Opens the presolve file.

      void closePrslFile ();
d110 1
a110 1
         // Closes and deletes the presolve file.
d112 1
a112 1
      int allocDSpace ();
d114 2
a115 1
         // Allocates dSpace and returns its size.
d117 1
a117 1
      void startUpOsl ();
d119 2
a120 1
         // Sets up OSL for use by this OslMgr.
d122 1
a122 1
      void restoreOsl ();
d124 1
a124 1
         // Restores OSL to the state stored in dSpace.
d126 1
a126 1
      void shutDownOsl ();
d128 2
a129 2
         // Returns OSL to its initial state, so that it can be used by other
         // objects; stores the current OSL state in dSpace.
d131 1
a131 1
      void printMpsDeck ();
d133 1
a133 2
         // Prints an MPS file of the model.
         // For developers' use only.
d135 1
a135 1
      void passFixedModel ();
d137 1
a137 1
         // Passes the fixed parts of the LpModel to OSL.
d139 1
a139 1
      void passFlexibleModel ();
d141 1
a141 1
         // Passes the flexible parts of the LpModel to OSL.
d143 1
a143 1
      void passPrimal ();
d145 1
a145 1
         // Copies an initial primal LP solution from myLpModel to dSpace.
d147 1
a147 1
      void checkProbStat ();
d149 1
a149 2
         // Checks the value of OSL's IPROBSTAT variable and generates a
         // fatal error if it is anything but 0 (optimal).
d151 1
a151 1
      void recordPrimal ();
d153 1
a153 1
         // Copies primal solution from dSpace to myLpModel.
d155 1
a155 1
      void recordDual ();
d157 1
a157 1
         // Copies dual solution from dSpace to myLpModel.
d159 1
a159 1
      void solveOslUnAcc ();
d161 1
a161 2
         // Makes appropriate calls to OSL to solve the LP in unaccelerated.
         // mode.
d163 1
a163 5
      //-----------------------------------------------------------------------
      // Constant static private member data.
      //-----------------------------------------------------------------------

      static const int logUnit_;
d165 2
a166 1
         // Fortran unit # for OSL log file.
d168 1
a168 1
      static const int prslUnit_;
d170 2
a171 1
         // Fortran unit # for OSL file used by ekkprsl and ekkpssl
d173 1
a173 1
      static const int bcdoUnit_;
d175 2
a176 1
         // Fortran unit # for MPS output.
d178 1
a178 7
      //-----------------------------------------------------------------------
      // Other static private member data.
      //-----------------------------------------------------------------------

      static WitBoolean oslHasBeenInvoked_;
         //
         // TRUE, iff OSL has been invoked by any OslMgr.
d186 1
a186 1
         // The LpModel to be solved using OSL.
d190 1
a190 1
         // The OptImploder under which this OslMgr is operating.
d196 1
a196 1
      double * dSpace_;
d198 2
a199 1
         // "d space" for OSL.
d201 1
a201 1
      long rtCodeData_;
d203 3
a205 1
         // Return code from OSL calls.
d207 1
a207 1
      long ioStat_;
d209 1
a209 1
         // I/O status from certain OSL calls.
d211 1
a211 1
      char * prslTempFileName_;
d213 5
a217 1
         // Name of file attached to prslUnit.
a218 2

#endif
@


1.5
log
@Began implementation of optimizing implosion with OSL V3.
@
text
@d151 1
a151 1
      void dumpMpsDeck ();
d153 1
a153 1
         // Dumps an MPS deck of the model.
@


1.4
log
@Refactoring for selection splitting.
@
text
@d21 2
d36 1
a36 5
      WitOslMgr (WitLpModel * theLpModel);
         //
         // theWitRun is the WitRun under which this OslMgr is being
         //    constructed.
         // lpToSolve is the LpModel to be solved using OSL.
d242 2
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d81 1
a81 3
      copyCtorAndAssignment (WitOslMgr);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d26 1
a26 1
class WitOslMgr
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
