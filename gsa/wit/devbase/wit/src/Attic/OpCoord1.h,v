head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2003.03.03.21.07.30;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2003.02.28.20.47.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.27.19.20.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Continued implementation of proportionate routing.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OpCoordH
#define OpCoordH

//------------------------------------------------------------------------------
// Header file: "OpCoord.h"
//
// Contains the declaration of class OpCoord.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class OpCoord
//
// "Proportionate Routing Coordinator"
//
// Coordinates the objects of the proportionate routing subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    OpCoord
//
// Implemented in OldPr1.C.
//------------------------------------------------------------------------------

class WitOpCoord: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOpCoord (WitOrMgr *, WitOpMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOpCoord ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool propRouting (WitOrSite * theOrSite, WitPeriod thePer);
         //
         // Returns true, iff proportionate routing is to be used at theOrSite
         // in thePer.

      void print ();
         //
         // Prints the proportionate routing subsystem.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOpCand *,   activeCand)
      accessFunc (WitOpCand *, inactiveCand)
      accessFunc (WitOpMgr *,  myOpMgr)

      WitOpPt * myOpPtFor (WitOrCand * theOrCand, WitPeriod thePer);
         //
         // Returns the OpPt for theOrCand and thePer owned by this OpCoord, if
         // any; otherwise NULL.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildOpBrPts ();
         //
         // Creates the OpBrPts owned by this OpCoord.

      void buildOpPts ();
         //
         // Creates the OpPts owned by this OpCoord.

      void setUpOpBrPts ();
         //
         // Sets up the OpBrPts.

      noCopyCtorAssign (WitOpCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitOpCand *   activeCand_;
      WitOpCand * inactiveCand_;
         //
         // The OpCands owned by this OpCoord.
         //
         //      activeCand_->active () == true
         //    inactiveCand_->active () == false

      WitPtrSched <WitOrSite, WitOpBrPt> myOpBrPts_;
         //
         // mlOpBrPts_.myPtrAt (theOrSite, thePer) is the OpBrPt owned by this
         // OpCoord that represents theOrSite and thePer, if any; else NULL.

      WitPtrSched <WitOrCand, WitOpPt> myOpPts_;
         //
         // myOpPts_.myPtrAt (theOrCand, thePer) is the OpPt owned by this
         // OpCoord that represents theOrCand and thePer, if any; else NULL.

      WitOrMgr * const myOrMgr_;
         //
         // The OrMgr for this OpCoord.

      WitOpMgr * const myOpMgr_;
         //
         // The OpMgr that owns this OpCoord.
   };

#endif
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d10 2
a11 2
#ifndef PrCoordH
#define PrCoordH
d14 1
a14 1
// Header file: "PrCoord.h"
d28 5
@

