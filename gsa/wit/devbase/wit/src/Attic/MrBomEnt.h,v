head	1.24;
access;
symbols
	EndRw-branch:1.23.0.6
	Root-of-EndRw:1.23
	rwToStl:1.23.0.4
	latest_sce_3_10_20010924:1.23.0.2
	sce_3_10_20010924:1.23
	latest_sce_3_00_20010601:1.19.0.2
	sce_3_00_20010601:1.19
	latest_sce_2_31_20010308:1.12.0.2
	sce_2_31_20010308:1.12
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2003.03.03.23.26.54;	author rjw;	state dead;
branches;
next	1.23;

1.23
date	2001.06.14.17.41.53;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.06.11.19.29.11;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.06.08.18.00.27;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.06.01.19.23.33;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.05.29.22.11.26;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.05.25.14.53.25;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.05.10.22.31.12;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.04.26.21.25.44;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.04.25.20.54.35;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.04.03.19.23.04;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.08.16.37.06;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.04.22.27.51;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.28.22.13.37;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.20.20.08.36;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2000.12.15.23.45.58;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.13.19.57.25;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.06.19.58.39;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.05.19.05.30;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.04.22.07.37;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.43;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.21.20.03.24;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.15;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.23
log
@Created class SelCand and classes derived from it.
@
text
@@


1.22
log
@Refactoring.
@
text
@a0 168
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MrBomEntH
#define MrBomEntH

//------------------------------------------------------------------------------
// Header file: "MrBomEnt.h"
//
// Contains the declaration of class MrBomEnt.
//------------------------------------------------------------------------------

#include <CmrSelPt.h>
#include <PtrTVec.h>
#include <PtrVec.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class MrBomEnt
//
// A multi-route component corresponding to a BomEntry.
//
// Class Hierarchy:
//
// ProbAssoc
//    MrBomEnt
//
// Implemented in ConsMR.C.
//------------------------------------------------------------------------------

class WitMrBomEnt: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrBomEnt (WitBomEntry * theBomEnt, WitCmrMgr * theCmrMgr);
         //
         // myBomEnt_ <-- theBomEnt.
         // myCmrMgr_ <-- theCmrMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMrBomEnt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitCmrSelPt * myCmrSelPtWithAlt (WitPeriod execPer)
            //
            // Returns the CmrSelPt for this MrBomEnt in execPer, if it has an
            // alternative to the current selection; otherwise NULL.
            //
         {
         return
            multiChoice_?
               multiChoiceCmrSelPtWithAlt (execPer):
               NULL;
         }

      void printHasAlt ();
         //
         // Prints those CmrSelPts for which hasAlt () is TRUE.

      WitBoolean candIsDefault (WitCandIndex theIdx, WitPeriod execPer);
         //
         //
         // Returns TRUE, iff theIdx is the candidate index of the default
         // selection for this MrBomEnt in execPer.

      WitCandIndex nCandidates ();
         //
         // Returns the # of selection candidates for this MrBomEnt.

      WitBoolean candIsEligible (WitCandIndex theIdx, WitPeriod execPer);
         //
         // Returns TRUE, iff candidate #theIdx for this MrBomEnt is eligible to
         // be selected execPer.

      void findExpConsEnts (WitPeriod execPer, WitConsEntStack & theConsEnts);
         //
         // Sets theConsEnts to be the set of cons entries currently
         // under consideration for explosion at myBomEnt_ in execPer.

      void select (WitConsEntry * theConsEnt, WitPeriod execPer);
         //
         // Changes the selection in execPer to theConsEnt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitCmrMgr *,                      myCmrMgr)
      accessFunc (WitBomEntry *,                    myBomEnt)
      accessFunc (WitBoolean,                       multiChoice)
      accessFunc (const WitPtrVec (WitConsEntry) &, candConsEnt)
      accessFunc (const WitPtrTVec (WitCmrSelPt) &, myCmrSelPt)

      WitConsEntry * selConsEntry (WitPeriod execPer);
         //
         // Returns the ConsEntry selected to be used when exploding at
         // myBomEnt_ in execPer.
         // Invalid, if myBomEnt_ is not in effect in execPer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildCmrSelPts ();
         //
         // Creates the CmrSelPts for this MrBomEnt.
         // To be called by the derived class ctors after finding the
         // candidates.

      WitCmrSelPt * multiChoiceCmrSelPtWithAlt (WitPeriod execPer);
            //
            // Returns the CmrSelPt for this MrBomEnt in execPer, if it has an
            // alternative to the current selection; otherwise NULL.
            // multiChoice_ must be TRUE.

      void initCandidate ();
         //
         // Sets up the list of candidates in the derived instance.

      noCopyCtorAssign (WitMrBomEnt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitCmrMgr * const myCmrMgr_;
         //
         // The CmrMgr that owns this MrBomEnt.

      WitBomEntry * const myBomEnt_;
         //
         // The Component (BomEntry) at which the selection is to be made.

      WitPtrVec (WitConsEntry) candConsEnt_;
         //
         // candConsEnt_[theIdx] is the ConsEntry eligible to be selected when
         // exploding at myBomEnt_, corresponding to theIdx.

      WitBoolean multiChoice_;
         //
         // TRUE, iff there are at least two directions in which the routing
         // could potentially proceed downward from this MrBomEnt.

      WitPtrTVec (WitCmrSelPt) myCmrSelPt_;
         //
         // myCmrSelPt_[execPer] is the CmrSelPt for this MrBomEnt inexecPer.
         // Allocated only if multiChoice_ is TRUE.
   };

#endif
@


1.21
log
@Refactoring.
@
text
@a71 4
      void printIfMultiChoice ();
         //
         // Prints this MrBomEnt, if multiChoice_ is TRUE.

a89 8

      void printID ();
         //
         // Prints a string identifying this MrBomEnt.

      void printCandidate (WitCandIndex theIdx);
         //
         // Prints Candidate #theIdx.
@


1.20
log
@Continued development of selection splitting for multi=exec.
@
text
@d60 1
a60 1
      inline WitCmrSelPt * myCmrSelPtWithAlt (WitPeriod thePer)
d62 1
a62 1
            // Returns the CmrSelPt for this MrBomEnt in thePer, if it has an
d68 1
a68 1
               multiChoiceCmrSelPtWithAlt (thePer):
d80 1
a80 1
      WitBoolean candIsDefault (WitCandIndex theIdx, WitPeriod thePer);
d84 1
a84 1
         // selection for this MrBomEnt in thePer.
d90 1
a90 1
      WitBoolean candIsEligible (WitCandIndex theIdx, WitPeriod thePer);
d93 1
a93 1
         // be selected thePer.
d140 1
a140 1
      WitCmrSelPt * multiChoiceCmrSelPtWithAlt (WitPeriod thePer);
d142 1
a142 1
            // Returns the CmrSelPt for this MrBomEnt in thePer, if it has an
d176 1
a176 1
         // myCmrSelPt_[thePer] is the CmrSelPt for this MrBomEnt inthePer.
@


1.19
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d47 2
a48 2
         // myBomEntry_ <-- theBomEnt.
         // myCmrMgr_   <-- theCmrMgr.
d106 1
a106 1
         // under consideration for explosion at myBomEntry_ in execPer.
d117 1
a117 1
      accessFunc (WitBomEntry *,                    myBomEntry)
d125 2
a126 2
         // myBomEntry_ in execPer.
         // Invalid, if myBomEntry_ is not in effect in execPer.
d160 1
a160 1
      WitBomEntry * const myBomEntry_;
d167 1
a167 1
         // exploding at myBomEntry_, corresponding to theIdx.
@


1.18
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d116 1
@


1.17
log
@Renamed AltPt classes to SelPt classes.
@
text
@d116 4
a119 2
      accessFunc (WitBomEntry *, myBomEntry)
      accessFunc (WitBoolean,    multiChoice)
d121 5
a125 10
      inline WitConsEntry * selConsEntry (WitPeriod thePer)
            //
            // Returns the ConsEntry selected to be used when exploding at
            // myBomEntry_ in thePer.
            // Invalid, if myBomEntry_ is not in effect in thePer.
         {
         witAssert (myBomEntry_->inEffect (thePer));

         return candidate_[selIndex (thePer)];
         }
a151 17
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitPtrTVec (WitCmrSelPt) &, myCmrSelPt)

      inline WitCandIndex selIndex (WitPeriod thePer)
            //
            // Returns the selection index for thePer in the candidate vector.
            // -1 indicates no selection.
         {
         return
            multiChoice_?         myCmrSelPt_[thePer]->selIndex ():
            (nCandidates () > 0)? 0:
                                  -1;
         }

      //------------------------------------------------------------------------
d163 1
a163 1
      WitPtrVec (WitConsEntry) candidate_;
d165 1
a165 1
         // candidate_[theIdx] is the ConsEntry eligible to be selected when
@


1.16
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <CmrAltPt.h>
d60 1
a60 1
      inline WitCmrAltPt * myCmrAltPtWithAlt (WitPeriod thePer)
d62 1
a62 1
            // Returns the CmrAltPt for this MrBomEnt in thePer, if it has an
d68 1
a68 1
               multiChoiceCmrAltPtWithAlt (thePer):
d78 1
a78 1
         // Prints those CmrAltPts for which hasAlt () is TRUE.
d136 1
a136 1
      void buildCmrAltPts ();
d138 1
a138 1
         // Creates the CmrAltPts for this MrBomEnt.
d142 1
a142 1
      WitCmrAltPt * multiChoiceCmrAltPtWithAlt (WitPeriod thePer);
d144 1
a144 1
            // Returns the CmrAltPt for this MrBomEnt in thePer, if it has an
d158 1
a158 1
      accessFunc (const WitPtrTVec (WitCmrAltPt) &, myCmrAltPt)
d166 1
a166 1
            multiChoice_?         myCmrAltPt_[thePer]->selIndex ():
d193 1
a193 1
      WitPtrTVec (WitCmrAltPt) myCmrAltPt_;
d195 1
a195 1
         // myCmrAltPt_[thePer] is the CmrAltPt for this MrBomEnt inthePer.
@


1.15
log
@Refactoring for selection splitting.
@
text
@d19 2
a20 1
#include <MrComp.h>
d22 1
d32 1
a32 2
//    MrComp
//       MrBomEnt
d34 1
a34 1
// Implemented in MultiRt.C.
d37 1
a37 1
class WitMrBomEnt: public WitMrComp
d54 1
a54 1
      virtual ~WitMrBomEnt ();
d60 13
a72 1
      virtual WitBoolean candIsDefault (WitCandIndex, WitPeriod);
d74 1
a74 1
         // Override from class MrComp.
d76 1
a76 1
      virtual WitCandIndex nCandidates ();
d78 1
a78 1
         // Override from class MrComp.
d80 2
a81 1
      virtual WitBoolean compIsEligible (WitPeriod);
d83 2
a84 1
         // Override from class MrComp.
d86 1
a86 1
      virtual WitBoolean candIsEligible (WitCandIndex, WitPeriod);
d88 1
a88 1
         // Override from class MrComp.
d90 1
a90 1
      virtual void printID ();
d92 2
a93 1
         // Override from class MrComp.
d95 1
a95 1
      virtual void printCandidate (WitCandIndex);
d97 1
a97 1
         // Override from class MrComp.
d99 1
a99 1
      virtual WitSelMgr * mySelMgr (WitSelector *);
d101 1
a101 1
         // Override from class MrComp.
d116 3
d136 16
d154 16
a169 3
      virtual void initCandidate ();
         //
         // Override from class MrComp.
d177 1
a177 1
         // The CmrMgr that owns this MrPart.
d187 10
@


1.14
log
@Continued implementation of selection splitting.
@
text
@d44 1
a44 1
      WitMrBomEnt (WitBomEntry * theBomEnt, WitConsRtr * theConsRtr);
d47 1
a47 1
         // myConsRtr_  <-- theConsRtr.
d127 1
a127 1
      WitConsRtr * const myConsRtr_;
d129 1
a129 1
         // The ConsRtr that owns this MrPart.
@


1.13
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d83 4
@


1.12
log
@Coarse selection splitting.
@
text
@a92 8
      // Selection splitting functions.
      //------------------------------------------------------------------------

      virtual void splitSel (WitPeriod);
         //
         // Override from class MrComp.

      //------------------------------------------------------------------------
@


1.11
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d44 1
a44 1
      WitMrBomEnt (WitBomEntry * theBomEnt, WitMrMgr * theMrMgr);
d47 1
a47 1
         // MrComp      <<< theMrMgr.
d130 4
@


1.10
log
@Further development of coarse selection splitting.
@
text
@d47 1
a47 1
         // myMrMgr_    <-- theMrMgr.
a133 4

      WitMrMgr * const myMrMgr_;
         //
         // The MrMgr that owns this MrBomEnt.
@


1.9
log
@Futher development of selection splitting.
@
text
@a95 9
      void clearSplitList (WitPeriod thePer);
         //
         // Clears splitList_ (thePer).

      void getSplitList (WitPeriod execPer, WitConsEntDblStack & theSplitList);
         //
         // Sets theSplitList to be the ordered list of (ConsEntry, splitVol)
         // pairs to be used when exploding through myBomEnt_ in execPer.

a142 7

      WitPtrTVec (WitConsEntDblStack) splitList_;
         //
         // splitList_ (thePer) is the list of (ConsEntry, splitVol) pairs to be
         // used when exploding at myBomEntry_ in thePer. The pairs are stored 
         // in reverse order.
         // Valid only in sel-split mode.
@


1.8
log
@Further development of selection splitting for multi-route on substitutes.
@
text
@a95 8
      void incTotExecVol (WitPeriod thePer, double deltaExecVol);
         //
         // totExecVol_[thePer] += deltaExecVol.

      void setTotExecVol (WitPeriod thePer, double theValue);
         //
         // totExecVol_[thePer] = deltaExecVol.

a123 2
      accessFunc (const WitTVec (double) &, totExecVol)

a151 6

      WitTVec (double) totExecVol_;
         //
         // totExecVol_[thePer] is the total execVol that has been exploded
         // thru this myBomEntry_ and its subs in thePer during the current
         // commit.
@


1.7
log
@Some minor changes.
@
text
@d44 1
a44 1
      WitMrBomEnt (WitBomEntry * theBomEnt);
d47 1
a58 4
      virtual void splitSel (WitPeriod);
         //
         // Override from class MrComp.

d92 9
a100 1
      void postTempCommitSS (WitBoolean success);
d102 1
a102 3
         // Performs the actions that this MrBomEnt needs to take for sel-Split,
         // just after a temp commit.
         // Valid only in sel-split mode.
d104 1
a104 1
      void setSplitVol (WitPeriod thePer, double theValue);
d106 1
a106 2
         // Sets the current split vol for this MrBomEnt in thePer to theValue.
         // Valid only in sel-split mode.
a109 1
         // Valid only in sel-split mode.
d113 1
a113 1
      void postAltAttSS ();
d115 1
a115 9
         // Valid only in sel-split mode.
         // Performs actions to be taken by this MrBomEnt for sel-split just
         // after a selection alteration has been attempted.

      void postPermCommitSS ();
         //
         // Performs the actions that this MrBomEnt needs to take for sel-split,
         // just after a perm commit.
         // Valid only in sel-split mode.
d132 2
d154 4
d163 1
a163 7
      WitTVec (double) curSplitVol_;
         //
         // curSplitVol_[thePer] is the split vol for myBomEntry_ in thePer for
         // the current EBS iteration.
         // Valid only in sel-split mode.

      WitTVec (double) okSplitVol_;
d165 3
a167 3
         // okSplitVol_[thePer] is the split vol for myBomEntry_ in thePer for
         // the most recent successful EBS iteration.
         // Valid only in sel-split mode.
@


1.6
log
@Some minor modifications.
@
text
@d20 1
a20 1
#include <Vector.h>
@


1.5
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d86 1
a86 3
      void findExpConsEnts (
            WitPeriod                       execPer,
            WitObjDynStack (WitConsEntry) & theConsEnts);
@


1.4
log
@Refactoring for selection splitting.
@
text
@d55 1
a55 1
      // Data access functions.
d58 3
a60 14
      inline WitConsEntry * selConsEntry (WitPeriod thePer)
            //
            // Returns the ConsEntry selected to be used when exploding at
            // myBomEntry_ in thePer.
            // Invalid, if myBomEntry_ is not in effect in thePer.
         {
         witAssert (myBomEntry_->inEffect (thePer));

         return candidate_[selIndex (thePer)];
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d97 44
d163 21
a183 1
         // Data for candidate.
@


1.3
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d20 1
d66 1
a66 1
         return candidate (selIndex (thePer));
d114 1
a114 3
      copyCtorAndAssignment (WitMrBomEnt);
         //
         // Prevents unintentional copying and assignment.
a119 8
      inline WitConsEntry * & candidate (WitCandIndex i)
            //
            // candidate (i) is the i-th ConsEntry eligible to be selected when
            // exploding at myBomEntry_.
         {
         return (WitConsEntry * &) candidateTl_[i];
         }

d128 1
a128 1
      WitVector (WitTypelessPtr) candidateTl_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d97 2
a98 2
            WitPeriod                    execPer,
            WitDynStack (WitConsEntry) & theConsEnts);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
