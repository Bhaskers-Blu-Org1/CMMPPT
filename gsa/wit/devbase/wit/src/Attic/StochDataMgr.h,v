head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2007.05.21.15.31.46;	author rjw;	state dead;
branches;
next	1.17;

1.17
date	2007.05.21.15.20.10;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.18.21.20.49;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.17.22.11.46;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.17.20.05.26;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.17.18.37.04;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.17.17.59.18;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.16.22.16.45;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.15.20.28.49;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.15.19.45.43;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.14.20.25.17;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.14.19.48.41;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.11.22.49.32;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.04.23.27.11;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.04.19.33.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.04.14.41.49;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.02.23.11.05;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.30.21.34.58;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StochDataMgrH
#define StochDataMgrH

//------------------------------------------------------------------------------
// Header file: "StochDataMgr.h"
//
// Contains the declaration of class StochDataMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class StochDataMgr
//
// "Stochastic Data Manager"
// Coordinates and participates in the aspects of stochastic implosion that
// require stochastic mode. An instance of this class exists in a WitRun,
// iff the WitRun is currently in stochastic mode.
//
// Implemented in StochImp.C.
//------------------------------------------------------------------------------

class WitStochDataMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochDataMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochDataMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitStochDataMgr * theStochDataMgr);
         //
         // Copies the input attributes of theStochDataMgr into this
         // StochDataMgr.

      void startWriteCompData (WitComponent * theComp);
         //
         // Begins writeData for theComp.

      void prepWriteVector ();
         //
         // Prepares for a vector to be written to an input data file.

      void finishWriteCompData ();
         //
         // Concludes writeData for a Component.

      void implode ();
         //
         // Performs stochastic implosion.

      void discardSoln ();
         //
         // Discards the stochastic implosion solution.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitStageMgr *, myStageMgr)
      accessFunc (WitScenMgr *,  myScenMgr)
      accessFunc (bool,          stochSolnMode)
      accessFunc (double,        objValue)
      accessFunc (double,        boundsValue)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void verifyData ();
         //
         // Verifies that the input data is valid for entering stochastic data
         // mode.

      void verifyGlobalBool (
            const char * theAttName,
            bool         theVal,
            bool         reqVal);
         //
         // Verifies the value of a global boolean attribute.
         // theAttName is the       name of the attribute.
         // theVal is the          value of the attribute.
         // reqVal is the required value of the attribute.

      noCopyCtorAssign (WitStochDataMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStageMgr * myStageMgr_;
         //
         // The StageMgr owned by this StochDataMgr.

      WitScenMgr * myScenMgr_;
         //
         // The ScenMgr owned by this StochDataMgr.

      bool stochSolnMode_;
         //
         // True, iff the WitRun is currently in stochastic solution mode.

      WitComponent * curWriteComp_;
         //
         // The current Component for writeData, if any; othwewise NULL.

      bool vectorWritten_;
         //
         // True, iff there is a current Component for writeData and a vector
         // has been written for it.

      double objValue_;
      double boundsValue_;
         //
         // Objective function values.
   };

#endif
@


1.17
log
@Stochastic Implosion
@
text
@@


1.16
log
@Stochastic Implosion
@
text
@d26 2
a27 2
// require stochastic data mode. An instance of this class exists in a WitRun,
// iff the WitRun is currently in stochastic data mode.
@


1.15
log
@Stochastic Implosion
@
text
@a19 2
#include <List.h>
#include <PtrVec.h>
a56 5
      void writeScenarioData ();
         //
         // Writes the section of the input data file for the Scenarios owned by
         // this StochDataMgr.

a68 4
      void display ();
         //
         // Displays the input and preprocessing data for this StochDataMgr.

a77 8
      // "Set" functions.
      //------------------------------------------------------------------------

      void setScenarioIndex (int theIdx);
         //
         // Sets the current Scenario to the one that matches theIdx.

      //------------------------------------------------------------------------
d82 1
a82 1
      accessFunc (WitScenario *, curScenario)
a107 5
      void restoreInputAttrs ();
         //
         // Restores the values of all stochastic input attributes saved in the
         // current Scenario.

d118 1
a118 14
      const int nScenarios_;
         //
         // The number of Scenarios owned by this StochDataMgr.

      WitList <WitScenario> myScenarios_;
         //
         // This List of all Scenarios owned by this StochDataMgr.

      WitPtrVec <WitScenario> myScenByIdx_;
         //
         // myScenByIdx_[theIdx] is the Scenario owned by this StochDataMgr
         // whose index is theIdx.

      WitScenario * curScenario_;
d120 1
a120 1
         // The current Scenario.
@


1.14
log
@Stochastic Implosion
@
text
@a21 1
#include <Mapping.h>
d31 1
a31 4
// Class Hierarchy:
//
// ProbAssoc
//    StochDataMgr
a58 5
      void writeStageData ();
         //
         // Writes the section of the input data file for the stage data owned
         // by this StochDataMgr.

a79 4
      void display (WitNode * theNode);
         //
         // Displays the stochastic input and preprocessing data for theNode.

a83 5
      void validateStageData ();
         //
         // Verifies that the recourseStage attributes have valid values for a
         // stochastic implosion.

a88 6
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (bool defRecourseStage, false)

      //------------------------------------------------------------------------
a95 4
      void setRecourseStage (WitNode * theNode, bool theValue);
         //
         // Sets recourseStage_ (theNode) to theValue.

d100 1
a105 5
      inline bool recourseStage (WitNode * theNode)
         {
         return recourseStage_ (theNode);
         }

a126 5
      void writeRecourseStage (WitNode * theNode, const char * nodeTypeName);
         //
         // Writes recourseStage for theNode to the input data file.
         // objTypeName indicates the type the theNode.

d138 4
a158 5
      WitMapping <WitNode, bool> recourseStage_;
         //
         // recourseStage_ (theNode) is true, iff theNode is in the recourse
         // stage.

@


1.13
log
@Stochastic Implosion
@
text
@d110 1
a110 1
      defaultValue (bool defRecourseStage, true)
@


1.12
log
@Stochastic Implosion
@
text
@a111 2
      double defScenarioProb ();

a119 2
      void setScenarioProb (double);

a128 1
      accessFunc (double,        scenarioProb)
a191 4
      double scenarioProb_;
         //
         // The probability of the current Scenario.

@


1.11
log
@Stochastic Implosion
@
text
@d112 1
a112 1
      double defProbability ();
d122 1
a122 1
      void setProbability (double);
d133 1
a133 1
      accessFunc (double,        probability)
d197 1
a197 1
      double probability_;
@


1.10
log
@Stochastic Implosion
@
text
@d63 1
a63 1
      void writeData ();
d65 7
a71 1
         // Writes the section of the input data file for this StochDataMgr.
d97 5
d124 4
d164 5
@


1.9
log
@Stochastic Implosion
@
text
@d99 1
a99 1
      defaultValue (bool defStochRecourse, true)
d123 1
a123 1
      inline bool stochRecourse (WitNode * theNode)
d125 1
a125 1
         return stochRecourse_ (theNode);
d181 1
a181 1
      WitMapping <WitNode, bool> stochRecourse_;
d183 1
a183 1
         // stochRecourse_ (theNode) is true, iff theNode is in the recourse
@


1.8
log
@Stochastic Implosion.
@
text
@d22 1
d83 4
d99 2
d123 5
d181 5
@


1.7
log
@Stochastic Implosion
@
text
@a99 2
      void setSglStochLP (bool);

a109 1
      accessFunc (bool,          sglStochLP)
a147 7
      bool sglStochLP_;
         //
         // If true,  stochastic implosion will be solved as a single LP
         // problem;
         // if false, stochastic implosion will be solved as a sequence of LP
         // problems.

@


1.6
log
@Stochastic Implosion
@
text
@d100 2
d112 1
d151 7
@


1.5
log
@Stochastic Implosion
@
text
@d113 2
d181 5
@


1.4
log
@Stochastic Implosion
@
text
@a38 2
      friend class WitStochAccess;

d135 1
a135 1
      void clearSoln ();
d137 2
a138 1
         // Clears the solution data.
@


1.3
log
@Stochastic Implosion
@
text
@d20 1
d151 1
a151 1
      WitPtrVec <WitScenario> myScenarios_;
d153 5
a157 1
         // myScenarios_[theIdx] is the Scenario owned by this StochDataMgr
@


1.2
log
@Stochastic Implosion
@
text
@d121 15
@


1.1
log
@Stochastic Implosion
@
text
@d121 4
@

