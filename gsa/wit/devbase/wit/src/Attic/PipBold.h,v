head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2005.06.16.19.19.12;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2005.06.14.20.35.13;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Cut-over to the new interpretation of pipShare.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipBoldH
#define PipBoldH

//------------------------------------------------------------------------------
// Header file: "PipBold.h"
//
// Contains the declaration of class PipBold.
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <PtrSched.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PipBold
//
// "Post-Implosion Pegging Builder, Old Version"
// Responsible for building the post-implosion pegging.
// Uses the old pipShare method.
//
// Class Hierarchy:
//
// ProbAssoc
//    PipBold
//------------------------------------------------------------------------------

class WitPipBold: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipBold (WitPipPegMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipBold ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void buildPegging ();
         //
         // Builds the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void initUnpeggedScheds ();
         //
         // Initializes the unpegged schedules.

      void normalizeShares ();
         //
         // Computes the values of normShare_.

      void prtNormShares ();
         //
         // Prints the values of normShare_.

      void compSideVols ();
         //
         // Computes side-effects volumes.

      void compBopSideVols ();
         //
         // Computes side-effects volumes due to BopEntries.

      void compBomSideVols ();
         //
         // Computes side-effects volumes due to BomEntries.

      void prtSideVols ();
         //
         // Prints side-effect volumes.

      void findExecPers ();
         //
         // Sets up expExecPers_.

      void pegShipment (double incShipVol);
         //
         // Pegs incShipVol units of shipVol to curTarg_.

      void pegPart (WitPart * thePart, WitPeriod pegPer);
         //
         // Pegs the reqVol of thePart in pegPer.

      void pegToStock (WitPart * thePart, WitPeriod pegPer, double & netReqVol);
         //
         // Pegs up to netReqVol units of thePart in pegPer to stock.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToSupply (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of supply of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToSide (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of side-effect of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToProd (WitPart * thePart, WitPeriod expPer, double & netReqVol);
         //
         // Does pegging by explosion for netReqVol units on thePart in expPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegBopEnt (
            WitBopEntry * theBopEnt,
            WitPeriod     execPer,
            double &      netReqVol);
         //
         // Does pegging by explosion for netReqVol units through theBopEnt in
         // execPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegBomEnts (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through the
         // the BomEntries of theOpn in execPer.
 
      void pegBomEntWithSubs (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theBomEnt and its substitutes in execPer.

      void pegConsEnt (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theConsEnt in execPer.

      double minAndNet (double & val1, double & val2);
         //
         // Returns the min of val1 and val2 after substracting it from both.

      void consolidatePegLists ();
         //
         // Consolidates the PipPegLists for the current PipTarg.

      void prtInfeas ();
         //
         // Prints infeasibility data, as appropriate.

      noCopyCtorAssign (WitPipBold);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipPegMgr * const myPegMgr_;
         //
         // The PipPegMgr that owns this PipBold.

      WitPipTarg * curTarg_;
         //
         // The PipTarg currently being pegged, if any; else NULL.

      WitReqSched * myReqSched_;
         //
         // The ReqSched onwed by this PipBold.
                                
      WitPtrSched <WitBopEntry, WitVector <WitPeriod> > expExecPers_;
         //
         // If expExecPers_ (theBopEnt, expPer) != NULL, then it is a ptr to a
         // vector listing all of the periods, execPer, such that:
         //    theBopEnt->impactPeriod ()[execPer] == expPer and
         //    theBopEnt->execPerOKForExp (execPer) is true.
         // and there are at least two such execPers.

      WitSchedule <WitBopEntry, double> normShare_;
         //
         // normShare_ (theBopEnt)[execPer] is theBopEnt->pipShare_[execPer],
         // normalized so that the values for a given Operation and execPer sum
         // to 1.

      //------------------------------------------------------------------------
      // Unpegged Volume Schedules
      // Each of these schedules stores the unpegged portion of the
      // corresponding Component data (also side-effect volume).
      //------------------------------------------------------------------------

      WitSchedule <WitBopEntry,  double> unpgdExecVol_;
      WitSchedule <WitBomEntry,  double> unpgdNonSubVol_;
      WitSchedule <WitSubEntry,  double> unpgdSubVol_;
      WitSchedule <WitMaterial,  double> unpgdStockVol_;
      WitSchedule <WitPart,      double> unpgdSupplyVol_;
      WitSchedule <WitPart,      double> unpgdSideVol_;

      //------------------------------------------------------------------------
      // Working Schedules to be used by PipPegList::consolidate.
      //------------------------------------------------------------------------

      WitSchedule <WitOperation, double> workOpnSched_;
      WitSchedule <WitSubEntry,  double> workSubSched_;
      WitSchedule <WitPart,      double> workPartSched_;

      //------------------------------------------------------------------------
      // Maximum infeasibility data.
      //------------------------------------------------------------------------

      double maxInfeas_;
         //
         // The maximum infesibility encountered.

      WitPipTarg * maxInfeasTarg_;
      WitPart *    maxInfeasPart_;
      WitPeriod    maxInfeasPer_;
         //
         // The PipTarg, Part and period at which maxInfeas_ was encountered.
   };

#endif
@


1.1
log
@Began work on the new interpretation of pipShare.
@
text
@@

