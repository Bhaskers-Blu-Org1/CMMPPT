head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2004.03.08.16.54.30;	author rjw;	state dead;
branches;
next	1.12;

1.12
date	2004.03.05.22.19.59;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.05.00.06.54;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.04.19.53.27;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.04.16.31.46;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.03.22.13.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.02.23.52.14;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.02.19.17.52;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.02.16.19.32;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.27.22.46.05;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.26.22.06.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.26.18.59.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.25.22.20.07;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Double Precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RealVecIRH
#define RealVecIRH

//------------------------------------------------------------------------------
// Header file: "RealVecIR.h"
//
// Contains the declaration of the following classes:
//
//    RealVecIR.
//    FltRealVecIR.
//    DblRealVecIR.
//------------------------------------------------------------------------------

#include <FlexVec.h>

//------------------------------------------------------------------------------
// Class RealVecIR
//
// "Real Vector Internal Representation"
// The internal representation of a RealVec (when Use_ModeRV is 1)
//
// Class Hierarchy:
//
// RealVecIR
//    FltRealVecIR
//    DblRealVecIR
//
// Implemented in RealVec.C.
//------------------------------------------------------------------------------

class WitRealVecIR
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitRealVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void convCopy (const WitTVec <float> &)     = 0;
      virtual void convCopy (const WitTVec <double> &)    = 0;
      virtual void convCopy (const WitFlexVec <double> &) = 0;
      virtual void convCopy (const float *)               = 0;
         //
         // "Convert-Copy"
         // Each of these functions copies the elements of the argument vector
         // into the corresponding elements of this RealVecIR.

      virtual void setToScalar (double theDbl) = 0;
         //
         // Sets every element of this RealVecIR to theDbl.

      virtual void incElem (WitPeriod thePer, double theDbl) = 0;
         //
         // Adds theDbl to the element of this RealVecIR indexed by thePer.

      virtual void convCopyInto (WitTVec <float> &)    const = 0;
      virtual void convCopyInto (WitTVec <double> &)   const = 0;
      virtual void convCopyInto (WitFlexVec <float> &) const = 0;
      virtual void convCopyInto (float *)              const = 0;
         //
         // "Convert-Copy Into"
         // Each of these functions copies the elements of this RealVecIR
         // into the corresponding elements of the argument vector.

      virtual bool operator == (double theDbl) const = 0;
         //
         // Returns true iff a every element of this RealVecIR == theDbl.

      virtual bool operator >= (double theDbl) const = 0;
         //
         // Returns true iff a every element of this RealVecIR >= theDbl.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRealVecIR ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitRealVecIR);
   };

//------------------------------------------------------------------------------
// Class FltRealVecIR
//
// "Float Real Vector Internal Representation"
// The internal representation of a RealVec in float mode.
//
// Class Hierarchy:
//
// RealVecIR
//    FltRealVecIR
//
// Implemented in RealVec.C.
//------------------------------------------------------------------------------

class WitFltRealVecIR: public WitRealVecIR
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFltRealVecIR (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitFltRealVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double operator [] (WitPeriod thePer) const;
         //
         // Returns the element indexed by thePer.

      inline void setElem (WitPeriod thePer, double theDbl);
         //
         // Sets the element of this FltRealVecIR indexed by thePer to theDbl.

      void copy (const WitFltRealVecIR & theFltRealVecIR);
         //
         // Copies the elements if theFltRealVecIR into this FltRealVecIR.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Overrides from class RealVecIR.
      //------------------------------------------------------------------------

      virtual void convCopy     (const WitTVec <float> &);
      virtual void convCopy     (const WitTVec <double> &);
      virtual void convCopy     (const WitFlexVec <double> &);
      virtual void convCopy     (const float *);
      virtual void setToScalar  (double);
      virtual void incElem      (WitPeriod, double);
      virtual void convCopyInto (WitTVec <float>  &)   const;
      virtual void convCopyInto (WitTVec <double> &)   const;
      virtual void convCopyInto (WitFlexVec <float> &) const;
      virtual void convCopyInto (float *)              const;
      virtual bool operator ==  (double)               const;
      virtual bool operator >=  (double)               const;

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitFltRealVecIR);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitFlexVec <float> myFltFlexVec_;
         //
         // The FlexVec representation of the RealVec.
   };

//------------------------------------------------------------------------------
// Inline implementations for class FltRealVecIR.
//------------------------------------------------------------------------------

inline double WitFltRealVecIR::operator [] (WitPeriod thePer) const
   {
   return dblFromFlt (myFltFlexVec_[thePer]);
   }

//------------------------------------------------------------------------------

inline void WitFltRealVecIR::setElem (WitPeriod thePer, double theDbl)
   {
   myFltFlexVec_.elemRef (thePer) = fltFromDbl (theDbl);
   }

//------------------------------------------------------------------------------
// Class DblRealVecIR
//
// "Double Real Vector Internal Representation"
// The internal representation of a RealVec in double mode.
//
// Class Hierarchy:
//
// RealVecIR
//    DblRealVecIR
//
// Implemented in RealVec.C.
//------------------------------------------------------------------------------

class WitDblRealVecIR: public WitRealVecIR
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDblRealVecIR (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDblRealVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double operator [] (WitPeriod thePer) const;
         //
         // Returns the element indexed by thePer.

      inline void setElem (WitPeriod thePer, double theDbl);
         //
         // Sets the element of this DblRealVecIR indexed by thePer to theDbl.

      void copy (const WitDblRealVecIR & theDblRealVecIR);
         //
         // Copies the elements if theDblRealVecIR into this DblRealVecIR.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Overrides from class RealVecIR.
      //------------------------------------------------------------------------

      virtual void convCopy     (const WitTVec <float> &);
      virtual void convCopy     (const WitTVec <double> &);
      virtual void convCopy     (const WitFlexVec <double> &);
      virtual void convCopy     (const float *);
      virtual void setToScalar  (double);
      virtual void incElem      (WitPeriod, double);
      virtual void convCopyInto (WitTVec <float>  &)   const;
      virtual void convCopyInto (WitTVec <double> &)   const;
      virtual void convCopyInto (WitFlexVec <float> &) const;
      virtual void convCopyInto (float *)              const;
      virtual bool operator ==  (double)               const;
      virtual bool operator >=  (double)               const;

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDblRealVecIR);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitFlexVec <double> myDblFlexVec_;
         //
         // The FlexVec representation of the RealVec.
   };

//------------------------------------------------------------------------------
// Inline implementations for class DblRealVecIR.
//------------------------------------------------------------------------------

inline double WitDblRealVecIR::operator [] (WitPeriod thePer) const
   {
   return myDblFlexVec_[thePer];
   }

//------------------------------------------------------------------------------

inline void WitDblRealVecIR::setElem (WitPeriod thePer, double theDbl)
   {
   myDblFlexVec_.elemRef (thePer) = theDbl;
   }

#endif
@


1.12
log
@Double Precision.
@
text
@@


1.11
log
@Double Precision.
@
text
@d69 5
a73 1
         // Sets every element of this RealVec to theDbl.
d178 1
d282 1
@


1.10
log
@Double Precision.
@
text
@a57 4
      virtual void setElem (WitPeriod thePer, double theDbl) = 0;
         //
         // Sets the element of this RealVecIR indexed by thePer to theDbl.

d71 4
a74 3
      virtual void convCopyInto (WitTVec <float> &)  const = 0;
      virtual void convCopyInto (WitTVec <double> &) const = 0;
      virtual void convCopyInto (float *)            const = 0;
d151 4
a168 1
      virtual void setElem      (WitPeriod, double);
d174 6
a179 5
      virtual void convCopyInto (WitTVec <float>  &) const;
      virtual void convCopyInto (WitTVec <double> &) const;
      virtual void convCopyInto (float *) const;
      virtual bool operator ==  (double) const;
      virtual bool operator >=  (double) const;
d206 7
d254 4
a271 1
      virtual void setElem      (WitPeriod, double);
d277 6
a282 5
      virtual void convCopyInto (WitTVec <float>  &) const;
      virtual void convCopyInto (WitTVec <double> &) const;
      virtual void convCopyInto (float *) const;
      virtual bool operator ==  (double) const;
      virtual bool operator >=  (double) const;
d306 7
@


1.9
log
@Double Precision.
@
text
@d62 8
a69 20
      virtual void copyFltTVec (const WitTVec <float> & theFltTVec) = 0;
         //
         // Copies the elements of theFltTVec into the corresponding
         // elements of this RealVecIR.

      virtual void copyDblTVec (const WitTVec <double> & theDblTVec) = 0;
         //
         // Copies the elements of theDblTVec into the corresponding
         // elements of this RealVecIR.

      virtual void copyDblFlexVec (
            const WitFlexVec <double> & theDblFlexVec) = 0;
         //
         // Copies the elements of theDblFlexVec into the corresponding
         // elements of this RealVecIR.

      virtual void copyFltCVec (const float * theFltCVec) = 0;
         //
         // Copies the elements of theFltCVec into the corresponding
         // elements of this RealVecIR.
d75 7
a81 11
      virtual void copyIntoFltTVec (WitTVec <float> & theFltTVec) const = 0;
         //
         // Copies the elements of this RealVecIR into theFltTVec.

      virtual void copyIntoDblTVec (WitTVec <double> & theDblTVec) const = 0;
         //
         // Copies the elements of this RealVecIR into theDblTVec.

      virtual void copyIntoFltCVec (float * theFltCVec) const = 0;
         //
         // Copies the elements of this RealVecIR into theFltCVec.
d168 11
a178 11
      virtual void setElem         (WitPeriod, double);
      virtual void copyFltTVec     (const WitTVec <float> &);
      virtual void copyDblTVec     (const WitTVec <double> &);
      virtual void copyDblFlexVec  (const WitFlexVec <double> &);
      virtual void copyFltCVec     (const float *);
      virtual void setToScalar     (double);
      virtual void copyIntoFltTVec (WitTVec <float>  &) const;
      virtual void copyIntoDblTVec (WitTVec <double> &) const;
      virtual void copyIntoFltCVec (float *) const;
      virtual bool operator ==     (double) const;
      virtual bool operator >=     (double) const;
d260 11
a270 11
      virtual void setElem         (WitPeriod, double);
      virtual void copyFltTVec     (const WitTVec <float> &);
      virtual void copyDblTVec     (const WitTVec <double> &);
      virtual void copyDblFlexVec  (const WitFlexVec <double> &);
      virtual void copyFltCVec     (const float *);
      virtual void setToScalar     (double);
      virtual void copyIntoFltTVec (WitTVec <float>  &) const;
      virtual void copyIntoDblTVec (WitTVec <double> &) const;
      virtual void copyIntoFltCVec (float *) const;
      virtual bool operator ==     (double) const;
      virtual bool operator >=     (double) const;
@


1.8
log
@Double Precision.
@
text
@d217 1
a217 1
   return doubleFromFloat (myFltFlexVec_[thePer]);
@


1.7
log
@Double Precision.
@
text
@d58 4
d72 6
d166 3
a168 4
      inline double operator [] (WitPeriod thePer) const
         {
         return doubleFromFloat (myFltFlexVec_[thePer]);
         }
d184 1
d187 1
d212 9
d258 3
a260 4
      inline double operator [] (WitPeriod thePer) const
         {
         return myDblFlexVec_[thePer];
         }
d276 1
d279 1
d302 9
@


1.6
log
@Double Precision.
@
text
@d58 1
a58 1
      virtual void copyIntoFltTVec (WitTVec <float> & theFltTVec) const = 0;
d60 2
a61 1
         // Copies the elements of this RealVecIR into theFltTVec.
d63 1
a63 1
      virtual void copyIntoDblTVec (WitTVec <double> & theDblTVec) const = 0;
d65 2
a66 1
         // Copies the elements of this RealVecIR into theDblTVec.
d73 12
d93 4
d175 4
a180 1
      virtual void copyFltCVec     (const float *);
d183 1
d257 4
a262 1
      virtual void copyFltCVec     (const float *);
d265 1
@


1.5
log
@Double Precision.
@
text
@d62 4
d75 4
d140 1
a140 1
         return doubleFromFloat (myFlexVec_[thePer]);
d143 4
d157 2
a158 1
      virtual void copyIntoFltTVec (WitTVec <float> &) const;
d161 1
d173 1
a173 1
      WitFlexVec <float> myFlexVec_;
d218 1
a218 1
         return myFlexVec_[thePer];
d221 4
d235 2
a236 1
      virtual void copyIntoFltTVec (WitTVec <float> &) const;
d239 1
d251 1
a251 1
      WitFlexVec <double> myFlexVec_;
@


1.4
log
@Double Precision.
@
text
@d29 1
a29 1
// The internal representation of a ModeRV.
d58 4
d145 1
d217 1
@


1.3
log
@Double Precision.
@
text
@d29 1
a29 1
// The internal representation of a RealVec.
@


1.2
log
@Double Precision.
@
text
@d58 9
d126 5
d137 11
d197 5
d206 11
@


1.1
log
@Double Precision.
@
text
@d18 3
a20 3
//    Wit::RealVecIR.
//    Wit::FltRealVecIR.
//    Wit::DblRealVecIR.
d40 1
a40 4
namespace Wit
{

class RealVecIR
d52 1
a52 1
      virtual ~RealVecIR ();
d68 1
a68 1
      RealVecIR ();
d76 1
a76 1
      noCopyCtorAssign (RealVecIR);
a78 3
// Leaving namespace Wit.
}   

d93 1
a93 4
namespace Wit
{

class FltRealVecIR: public RealVecIR
d105 1
a105 1
      FltRealVecIR (WitProblem *, double initValue);
d111 1
a111 1
      virtual ~FltRealVecIR ();
d123 1
a123 1
      noCopyCtorAssign (FltRealVecIR);
a133 3
// Leaving namespace Wit.
}   

d148 1
a148 4
namespace Wit
{

class DblRealVecIR: public RealVecIR
d160 1
a160 1
      DblRealVecIR (WitProblem *, double initValue);
d166 1
a166 1
      virtual ~DblRealVecIR ();
d178 1
a178 1
      noCopyCtorAssign (DblRealVecIR);
a187 3

// Leaving namespace Wit.
}   
@

