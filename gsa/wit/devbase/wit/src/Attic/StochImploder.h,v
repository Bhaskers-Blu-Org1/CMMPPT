head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2007.06.08.23.17.58;	author rjw;	state dead;
branches;
next	1.12;

1.12
date	2007.06.08.22.47.02;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.30.21.34.59;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2007.04.30.19.32.31;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.27.21.02.02;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.24.22.40.57;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.23.21.03.20;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.23.20.20.00;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.20.23.31.46;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.20.20.51.14;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.19.22.03.27;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.19.21.38.44;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.19.20.22.30;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Stochastic Implosion.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StochImploderH
#define StochImploderH

//------------------------------------------------------------------------------
// Header file: "StochImploder.h"
//------------------------------------------------------------------------------

#endif
@


1.12
log
@Stochastic Implosion
@
text
@@


1.11
log
@Stochastic Implosion
@
text
@a14 2
//
// Contains the declaration of class StochImploder.
a16 138
#include <Assoc.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// Class StochImploder
//
// "Stochastic Imploder"
// Responsible for performing stochastic implosion. An instance of this class
// exists in a WitRun, iff the WitRun is currently in stochastic data mode.
//
// Class Hierarchy:
//
// ProbAssoc
//    StochImploder
//------------------------------------------------------------------------------

class WitStochImploder: public WitProbAssoc
   {
      friend class WitStochAccess;

   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochImploder (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochImploder ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitStochImploder * theStochImploder);
         //
         // Copies the input attributes of theStochImploder into this
         // StochImploder.

      void writeData ();
         //
         // Writes the section of the input data file for this StochImploder.

      void startWriteCompData (WitComponent * theComp);
         //
         // Begins writeData for theComp.

      void prepWriteVector ();
         //
         // Prepares for a vector to be written to an input data file.

      void finishWriteCompData ();
         //
         // Concludes writeData for a Component.

      void display ();
         //
         // Displays the input and preprocessing data for this StochImploder.

      void implode ();
         //
         // Performs stochastic implosion.

      void discardSoln ();
         //
         // Discards the stochastic implosion solution.

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      double defProbability ();

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setScenarioIndex (int theIdx);
         //
         // Sets the current Scenario to the one that matches theIdx.

      void setProbability (double);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitScenario *, curScenario)
      accessFunc (double,        probability)
      accessFunc (bool,          stochSolnMode)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitStochImploder);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int nScenarios_;
         //
         // The number of Scenarios owned by this StochImploder.

      WitPtrVec <WitScenario> myScenarios_;
         //
         // myScenarios_[theIdx] is the Scenario owned by this StochImploder
         // whose index is theIdx.

      WitScenario * curScenario_;
         //
         // The current Scenario.

      double probability_;
         //
         // The probability of the current Scenario.

      bool stochSolnMode_;
         //
         // True, iff the WitRun is currently in stochastic solution mode.

      WitComponent * curWriteComp_;
         //
         // The current Component for writeData, if any; othwewise NULL.

      bool vectorWritten_;
         //
         // True, iff there is a current Component for writeData and a vector
         // has been written for it.
   };

@


1.10
log
@Stochastic Implosion
@
text
@@


1.9
log
@Stochastic Implosion
@
text
@d112 1
a112 1
      accessFunc (bool,          stochSolnExists)
d143 1
a143 1
      bool stochSolnExists_;
d145 1
a145 2
         // True, iff a solution to the stochastic implosion problem currently
         // exists.
@


1.8
log
@Stochastic Implosion
@
text
@d145 1
a145 1
         // True, iff a solution to the stochastic implosion problem current
@


1.7
log
@Stochastic Implosion
@
text
@d37 2
d91 6
d104 2
d111 1
d139 4
@


1.6
log
@Stochastic Implosion
@
text
@d27 1
a27 1
// exists in a WitRun, iff the WitRun is currently in stochastic mode.
@


1.5
log
@Stochastic Implosion
@
text
@d84 4
d101 1
a101 1
      accessFunc (bool,          stochSolnAvail)
d128 1
a128 1
      bool stochSolnAvail_;
d130 2
a131 2
         // True, iff this StochImploder is currently in "stochastic solution
         // available" mode.
@


1.4
log
@Stochastic Implosion
@
text
@d97 1
d124 5
@


1.3
log
@Stochastic Implosion
@
text
@d27 1
a27 1
// exists in a WitRun, iff the WitRun is currently in stochastic implosion mode.
@


1.2
log
@Stochastic Implosion
@
text
@d88 3
a90 1
      void setCurScenario (WitScenario *);
a97 5
      inline WitScenario * myScenario (int theIdx)
         {
         return myScenarios_[theIdx];
         }

@


1.1
log
@Stochastic Implosion
@
text
@d80 4
@

