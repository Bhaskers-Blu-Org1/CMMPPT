head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2006.01.09.20.02.31;	author rjw;	state dead;
branches;
next	1.17;

1.17
date	2006.01.05.18.38.21;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.01.04.23.07.40;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.03.19.00.04;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.30.23.37.56;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.29.23.22.24;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.28.22.58.58;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.28.18.57.50;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.27.19.43.40;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.22.23.17.30;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.22.22.07.05;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.21.23.46.09;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.21.22.56.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.21.22.44.46;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.20.22.48.24;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.20.20.38.56;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.20.19.45.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.20.19.04.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.18
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpExpSyncH
#define SrpExpSyncH

//------------------------------------------------------------------------------
// Header file: "SrpExpSync.h"
//
// Contains the declaration of the following class:
//
//    SrpExpSync
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class SrpExpSync
//
// "Shared-Resource Pegging Explosion Synchronization"
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpExpSync
//------------------------------------------------------------------------------

class WitSrpExpSync: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpExpSync (WitPipSeqMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpExpSync ();

      //------------------------------------------------------------------------
      // Other member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints this explosion synchronization.

      void getShipReqPairs (
            WitDemand *      theDemand,
            WitPeriod        shipPer,
            WitDblDblStack & theReqPairs);
         //
         // Upon return, theReqPairs will be an ordered list of pairs,
         // (incReqVol, priorVol), such that the next incReqVol units of
         // requirement on theDemand->demandedPart () in shipPer that's due to
         // shipment to theDemand in shipPer are considered to be preceeded by
         // priorVol units in a synchronized explosion.

      void getConsReqPairs (
            WitBomEntry *    theBomEnt,
            WitPeriod        execPer,
            double           consReqVol,
            double           consPriorVol,
            WitDblDblStack & theReqPairs);
         //
         // Let consPer = the consumption period for theBomEnt for execPer.
         // Upon return, theReqPairs will be an ordered list of pairs,
         // (incReqVol, priorVol), such that the next incReqVol units of
         // requirement on theBomEnt->myPart () in consPer that's due to
         // consumption by theBomEnt in execPer are considered to be
         // preceeded by priorVol units in a synchronized explosion, where
         // the sum of the incReqVols in the list == consReqVol, which is
         // considered to be preceeded by consPriorVol units of consumption.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void getConsReqPairsNoPrior (
            WitBomEntry *    theBomEnt,
            WitPeriod        execPer,
            double           consReqVol,
            WitDblDblStack & theReqPairs);
         //
         // Let consPer = the consumption period for theBomEnt for execPer.
         // Upon return, theReqPairs will be an ordered list of pairs,
         // (incReqVol, priorVol), such that the next incReqVol units of
         // requirement on theBomEnt->myPart () in consPer that's due to
         // consumption by theBomEnt in execPer are considered to be
         // preceeded by priorVol units in a synchronized explosion, where
         // the sum of the incReqVols in the list == consReqVol, which is
         // considered to be preceeded by no consumption.

      void remPriorConsReqPairs (
            double           consPriorVol,
            WitDblDblStack & theReqPairs);
         //
         // Removes from theReqPairs, the first requirements totalling
         // consPriorVol.

      //------------------------------------------------------------------------
      // Printing functions
      //------------------------------------------------------------------------

      void prtShipSyncPairs ();
         //
         // Prints the shipment synchronization pairs.

      void prtConsSyncPairs ();
         //
         // Prints the consumption synchronization pairs.

      void prtConsReqPairs (
            WitBomEntry *          theBomEnt,
            WitPeriod              execPer,
            double                 consReqVol,
            double                 consPriorVol,
            const WitDblDblStack & theReqPairs);
         //
         // Prints data for getConsReqPairs (...).

      noCopyCtorAssign (WitSrpExpSync);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitDemand, WitDblDblStack> myShipSyncPairs_;
         //
         // myShipSyncPairs_.myElemAt (theDemand, shipPer) is an ordered list of
         // pairs, (incReqVol, priorVol), such that the next incReqVol units of
         // requirement on theDemand->demandedPart () in shipPer that are due to
         // shipment to theDemand in shipPer are considered to be preceeded
         // priorVol units in a synchronized explosion.

      WitPtrSched <WitBomEntry, WitDblDblStack> myConsSyncPairs_;
         //
         // Given theBomEnt and execPer, let:
         //    consPer = the consumption period for theBomEnt for execPer.
         // myConsSyncPairs_.myElemAt (theBomEnt, execPer) is an ordered list of
         // pairs, (incReqVol, priorVol), such that the next incReqVol units of
         // requirement on theBomEnt->myPart () in consPer that are due to
         // consumption by theBomEnt in execPer are considered to be preceeded
         // priorVol units in a synchronized explosion.
   };

#endif
@


1.17
log
@[shared-resource pegging]
@
text
@@


1.16
log
@[shared-resource pegging]
@
text
@d92 26
d133 1
a133 1
         // Prints data for getConsReqPairs (...), if appropirate.
@


1.15
log
@[shared-resource pegging]
@
text
@d100 9
@


1.14
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      WitSrpExpSync (WitPipSeqMgr *, WitSrpOldSpec *);
@


1.13
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      WitSrpExpSync (WitPipSeqMgr *, WitSrpExpSpec *);
@


1.12
log
@[shared-resource pegging]
@
text
@d92 1
a92 1
      void prtShipDefPairs ();
d94 1
a94 1
         // Prints the shipment requirement deferral pairs.
d96 1
a96 1
      void prtConsDefPairs ();
d98 1
a98 1
         // Prints the consumption requirement deferral pairs.
d106 1
a106 1
      WitPtrSched <WitDemand, WitDblDblStack> myShipDefPairs_;
d108 5
a112 5
         // myShipDefPairs_.myElemAt (theDemand, shipPer) is an ordered list of
         // pairs, (incReqVol, deferVol), such that incReqVol units of
         // requirement on theDemand->demandedPart () in shipPer that's due to
         // shipment to theDemand in shipPer are to be deferred by deferVol
         // units in a synchronized explosion.
d114 1
a114 1
      WitPtrSched <WitBomEntry, WitDblDblStack> myConsDefPairs_;
d118 5
a122 5
         // myConsDefPairs_.myElemAt (theBomEnt, execPer) is an ordered list of
         // pairs, (incReqVol, deferVol), such that incReqVol units of
         // requirement on theBomEnt->myPart () in consPer that's due to
         // consumption by theBomEnt in execPer are to be deferred by deferVol
         // units in a synchronized explosion.
@


1.11
log
@[shared-resource peging]
@
text
@d59 1
a59 1
      void getShipDefPairs (
d62 1
a62 1
            WitDblDblStack & theDefPairs);
d64 21
a84 5
         // Upon return, theDefPairs will be an ordered list of pairs,
         // (incReqVol, deferVol), such that incReqVol units of requirement on
         // theDemand->demandedPart () in shipPer that's due to shipment to
         // theDemand in shipPer are to be deferred by deferVol units in a
         // synchronized explosion.
@


1.10
log
@[shared-resource pegging]
@
text
@d59 11
d92 2
a93 2
         // For each pair, (incReqVol, deferVol,) in
         // myShipDefPairs_.myElemAt (theDemand, shipPer), incReqVol units of
d96 1
a96 1
         // units.
d102 2
a103 2
         // For each pair, (incReqVol, deferVol,) in
         // myConsDefPairs_.myElemAt (theBomEnt, execPer), incReqVol units of
d106 1
a106 1
         // units.
@


1.9
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      WitSrpExpSync (WitPipSeqMgr *, WitSrpExpGuide *);
@


1.8
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      WitSrpExpSync (WitSrpExpGuide *, WitPipSeqMgr *);
@


1.7
log
@[shared-resource pegging]
@
text
@d43 1
a43 4
      WitSrpExpSync (WitPipSeqMgr * thePipSeqMgr);
         //
         // Constructs a (fully built-up) SrpExpSync.
         // Uses the shipment sequence from thePipSeqMgr.
@


1.6
log
@[shared-resource pegging]
@
text
@d68 1
a68 1
      void prtShipReqs ();
d70 1
a70 1
         // Prints the shipment requirements.
d72 1
a72 1
      void prtConsReqs ();
d74 1
a74 1
         // Prints the consumption requirements.
d82 1
a82 1
      WitPtrSched <WitDemand, WitDblDblStack> myShipReqs_;
d84 5
a88 4
         // myShipReqs_.myElemAt (theDemand, shipPer) is an ordered list of
         // (reqVol, priorVol) pairs that serialize the portion of the total
         // requirements on theDemand->demandedPart () in shipPer that's due to
         // shipment to theDemand in shipPer.
d90 1
a90 1
      WitPtrSched <WitBomEntry, WitDblDblStack> myConsReqs_;
d94 5
a98 4
         // myConsReqs_.myElemAt (theBomEnt, execPer) is an ordered list of
         // (reqVol, priorVol) pairs that serialize the portion of the total
         // requirements on theBomEnt->myPart () in consPer that's due to
         // consumption by theBomEnt in execPer.
@


1.5
log
@[shared-resource pegging]
@
text
@d40 1
a40 1
      // Public member functions.
d43 1
a43 1
      static WitSrpExpSync * builtExpSync (WitPipSeqMgr * thePipSeqMgr);
d45 1
a45 2
         // Constructs an SrpExpSync, builds up the synchronization and returns
         // the SrpExpSync.
d65 1
a65 7
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpExpSync (WitProblem *);

      //------------------------------------------------------------------------
      // Other private member functions.
@


1.4
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      static WitSrpExpSync * builtExpSync (WitSrpCoord * theSrpCoord);
d47 1
d69 1
a69 1
      WitSrpExpSync (WitSrpCoord *);
a88 4
      WitSrpCoord * const mySrpCoord_;
         //
         // The SrpCoord that owns this SrpExpSync.

@


1.3
log
@[shared-resource pegging]
@
text
@d40 1
a40 1
      // Constructor functions.
d43 4
a46 1
      WitSrpExpSync (WitSrpCoord *);
d55 1
a55 36
      // Public member functions that are only to be called *before* this
      // explosion synchronization has been built.
      //------------------------------------------------------------------------

      void build ();
         //
         // Builds this explosion synchronization.

      //------------------------------------------------------------------------
      // Public member functions that are only to be called *while* this
      // explosion synchronization is being built.
      //------------------------------------------------------------------------

      void recordPlaceReq (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      theReqVol,
            double      thePriorVol);
         //
         // Records the fact that shipment to theDemand in shipPer is causing
         // theReqVol units of requirement to be placed, serialized after
         // thePriorVol previous units.

      void recordPlaceReq (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        theReqVol,
            double        thePriorVol);
         //
         // Records the fact that consumption by theBomEnt for execPer is
         // causing theReqVol units of requirement to be placed, serialized
         // after thePriorVol previous units.

      //------------------------------------------------------------------------
      // Public member functions that are only to be called *after* this
      // explosion synchronization has been built.
d62 2
d65 1
a65 1
      // Data access functions.
d68 1
a68 3
      accessFunc (WitSrpCoord *, myCoord)

   private:
d71 1
a71 1
      // Private member functions.
d74 1
a74 1
      void prtSerShipReqs ();
d76 1
a76 1
         // Prints the serialized shipment requirements.
d78 1
a78 1
      void prtSerConsReqs ();
d80 1
a80 1
         // Prints the serialized consumption requirements.
d88 1
a88 1
      WitSrpCoord * const myCoord_;
d92 1
a92 9
      bool building_;
         //
         // True, iff this explosion synchronization is currently being built_.

      bool built_;
         //
         // True, iff this explosion synchronization has been built.

      WitPtrSched <WitDemand, WitDblDblStack> serShipReqs_;
d94 1
a94 1
         // serShipReqs_.myElemAt (theDemand, shipPer) is an ordered list of
d99 1
a99 1
      WitPtrSched <WitBomEntry, WitDblDblStack> serConsReqs_;
d103 1
a103 1
         // serConsReqs_.myElemAt (theBomEnt, execPer) is an ordered list of
@


1.2
log
@[shared-resource pegging]
@
text
@a99 8
      const WitDblDblStack & serShipReqs (
            WitDemand * theDemand,
            WitPeriod   shipPer);
         //
         // Returns an ordered list of (reqVol, priorVol) pairs that serialize
         // the portion of the total requirements on theDemand->demandedPart ()
         // in shipPer that's due to shipment to theDemand in shipPer.

@


1.1
log
@[shared-resource pegging]
@
text
@d27 1
a27 1
// "Shared-Resource Pegging Explosion Synchronizer"
d53 1
a53 1
      // explosion synchronizer has been built.
d58 1
a58 1
         // Builds this explosion synchronizer.
d62 1
a62 1
      // explosion synchronizer is being built.
d87 1
a87 1
      // explosion synchronizer has been built.
d92 1
a92 1
         // Prints this explosion synchronizer.
d134 1
a134 1
         // True, iff this explosion synchronizer is currently being built_.
d138 1
a138 1
         // True, iff this explosion synchronizer has been built.
@

