head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2007.04.16.21.32.58;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2007.04.12.21.20.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.11.23.03.38;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.11.16.05.40;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.10.20.49.29;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StochProbH
#define StochProbH

//------------------------------------------------------------------------------
// Header file: "StochProb.h"
//
// Contains the declaration of the following class:
//
//    StochProb
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// Class StochProb
//
// "Stochastic Implosion Problem"
// Responsible for maintaining the data for a stochastic implosion problem.
//
// Class Hierarchy:
//
// ProbAssoc
//    StochProb
//------------------------------------------------------------------------------

class WitStochProb: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochProb (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochProb ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitStochProb * theStochProb);
         //
         // Copies the input attributes of theStochProb into this StochProb.

      void writeDataAttrs ();
         //
         // Writes the attributes of this StochProb to an input data file.

      void display ();
         //
         // Displays the input and preprocessing data for this StochProb.

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setCurScenario (WitScenario *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitScenario *, curScenario)

      inline WitScenario * myScenario (int theIdx)
         {
         return myScenarios_[theIdx];
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitStochProb);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int nScenarios_;
         //
         // The number of Scenarios owned by this StochProb.

      WitPtrVec <WitScenario> myScenarios_;
         //
         // myScenarios_[theIdx] is the Scenario owned by this StochProb whose
         // index is theIdx.

      WitScenario * curScenario_;
         //
         // The current Scenario.
   };

#endif
@


1.4
log
@Stochastic Implosion
@
text
@@


1.3
log
@Stochastic Implosion
@
text
@a68 6
      // Default value functions.
      //------------------------------------------------------------------------

      double defScenarioProb ();

      //------------------------------------------------------------------------
d72 1
a72 2
      void setCurScenario  (WitScenario *);
      void setScenarioProb (double);
a78 1
      accessFunc (double,        scenarioProb)
a108 4

      double scenarioProb_;
         //
         // The scenarioProb of the current Scenario.
@


1.2
log
@Stochastic Implosion
@
text
@d72 1
a72 1
      double defProbability ();
d78 2
a79 2
      void setCurScenario (WitScenario *);
      void setProbability (double);
d86 1
a86 1
      accessFunc (double,        probability)
d118 1
a118 1
      double probability_;
d120 1
a120 1
         // The probability of the current Scenario.
@


1.1
log
@Stochastic Implosion
@
text
@d60 1
a60 1
      void writeData ();
d62 1
a62 1
         // Writes the section of the input data file for this StochProb.
d69 6
d79 1
d86 1
d117 4
@

