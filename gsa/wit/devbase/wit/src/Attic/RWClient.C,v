head	1.17;
access;
symbols
	EndRw-branch:1.14.0.4
	Root-of-EndRw:1.14
	rwToStl:1.14.0.2
	latest_sce_3_10_20010924:1.11.0.4
	sce_3_10_20010924:1.11
	latest_sce_3_00_20010601:1.11.0.2
	sce_3_00_20010601:1.11
	latest_sce_2_31_20010308:1.10.0.2
	sce_2_31_20010308:1.10
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2002.12.20.22.48.01;	author rjw;	state dead;
branches;
next	1.16;

1.16
date	2002.11.26.23.56.34;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.11.25.15.15.23;	author rwToStl;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.02.20.53.15;	author rjw;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2002.05.01.14.26.01;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.18.14.02.42;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.25.14.53.27;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.02.19.24.06;	author fasano;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.20.00.44.21;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.20.20.08.37;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.06.19.58.41;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.22.23.11.47;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.21.20.03.27;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.29.21.22.47;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.18.00.16.01;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.49;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.29;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.29;	author wit;	state Exp;
branches;
next	;

1.14.2.1
date	2002.11.08.16.11.34;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Continued implementation of heuristic implosion from an initial solution.
Fixed a bug in build-ahead by demand.
Removed RWClient.C.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "RWClient.C"
//------------------------------------------------------------------------------
@


1.16
log
@Moved content of RWClient.C to another file.
@
text
@@


1.15
log
@modications to change rogueWave tools.h++ to STL
@
text
@a11 6
//
// Contains the implementation of all classes that use Rogue Wave classes.
// Currently, these are:
//
//    WitAbsList
//    WitListItr
a12 187

#include <Str.h>
#include <List.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class WitAbsList.
//------------------------------------------------------------------------------

void WitAbsList::clear ()
   {
   myListData_.clear ();
   }

//------------------------------------------------------------------------------

WitAbsList::WitAbsList ():
      myListData_ ()
   {
   }

//------------------------------------------------------------------------------

WitAbsList::~WitAbsList ()
   {
   }

//------------------------------------------------------------------------------

void WitAbsList::copyAbs (const WitAbsList & theAbsList)
   {
   myListData_ = theAbsList.myListData_;
   }

//------------------------------------------------------------------------------

void WitAbsList::appendAbs (WitTlObj * theObject)
   {
   myListData_.push_back (theObject);
   }

//------------------------------------------------------------------------------

WitTlObj * WitAbsList::firstAbs () const
   {
   return myListData_.front ();
   }


//------------------------------------------------------------------------------

WitTlObj * WitAbsList::getAbs ()
   {
   WitTlObj * p = myListData_.front();
   myListData_.pop_front ();
   return p;
   }

//------------------------------------------------------------------------------

WitTlObj * WitAbsList::lastAbs () const
   {
   return myListData_.back ();
   }

//------------------------------------------------------------------------------

void WitAbsList::prependAbs (WitTlObj * theObject)
   {
   if (theObject == NULL)
      WitMsgFacility::current () ("memoryErrorMsg");

   myListData_.push_front( theObject );
   }

//------------------------------------------------------------------------------

WitTlObj * WitAbsList::atAbs (size_t theIndex) const
   {
      std::list<WitTlObj*>::const_iterator it = myListData_.begin();
      while( theIndex-- && it != myListData_.end() )
         it++;
      return it != myListData_.end() ? *it : NULL;
   }

//------------------------------------------------------------------------------

void WitAbsList::removeReferenceAbs (const WitTlObj * theElement)
   {
      myListData_.remove( (WitTlObj*)theElement );
   }

//------------------------------------------------------------------------------

WitTlObj * WitAbsList::findAbs (
      WitAbsListKeyFunc theFunc,
      const char *      theCstring)
      const
   {
   WitListItr theItr (* this);
   WitTlObj * theElement;

   while (theItr.advance (theElement, * this))
      if (theFunc (theElement) == theCstring)
         return theElement;

   return NULL;
   }

//------------------------------------------------------------------------------

void WitAbsList::appendUniquelyAbs (WitTlObj * theObject)
   {
   witAssert (! containsAbs (theObject));

   appendAbs (theObject);
   }

//------------------------------------------------------------------------------

WitBoolean WitAbsList::containsAbs (const WitTlObj * theObject) const
   {
   if( myListData_.size() )
      {
         std::list<WitTlObj*>::const_iterator it = myListData_.begin();
         do
         {
            if( *it == theObject )
               return witTRUE;
         } while( ++it != myListData_.end() );
      }
   return witFALSE;
   }

//------------------------------------------------------------------------------
// Implementation of class ListItr.
//------------------------------------------------------------------------------

WitListItr::WitListItr (const WitAbsList& theAbsList) :
      theList_ (const_cast<WitAbsList&>(theAbsList)), iterating_(false)
                 //
                 // un-consting cast
   {
      myListIterator_ = theList_.myListData_.begin();
   }

//------------------------------------------------------------------------------

WitListItr::~WitListItr ()
   {
   }

//------------------------------------------------------------------------------

WitTlObj * WitListItr::key ()
   {
   return *myListIterator_;
   }

//------------------------------------------------------------------------------

WitBoolean WitListItr::advance ()
   {
      if( iterating_ ) // we must not increment the iterator the first time around
         myListIterator_++;
      else
         iterating_ = true;

   return ( myListIterator_ != theList_.myListData_.end() );
   }

//------------------------------------------------------------------------------

WitBoolean WitListItr::advance (
      WitTlObj * &       theElement,
      const WitAbsList & theAbsList)
   {
   witAssert ( &theList_.myListData_ == &theAbsList.myListData_ );
         //
         // Require that this Itr is attached to theAbsList.

   bool gotOne = advance();
   if( gotOne )
      theElement = *myListIterator_;

   return gotOne;
   }
@


1.14
log
@Preliminary work on single source.
@
text
@d30 1
a30 1
   myRWData_.clear ();
d36 1
a36 1
      myRWData_ ()
d50 1
a50 1
   myRWData_ = theAbsList.myRWData_;
d57 1
a57 2
   if (myRWData_.append (theObject) == NULL)
      WitMsgFacility::current () ("memoryErrorMsg");
d64 1
a64 1
   return myRWData_.first ();
d72 3
a74 1
   return myRWData_.get ();
d81 1
a81 1
   return myRWData_.last ();
d86 1
a86 1
WitTlObj * WitAbsList::prependAbs (WitTlObj * theObject)
d88 1
a88 1
   if (myRWData_.prepend (theObject) == NULL)
d91 1
a91 1
   return theObject;
d98 4
a101 1
   return myRWData_.at (theIndex);
d106 1
a106 1
WitTlObj * WitAbsList::removeReferenceAbs (const WitTlObj * theElement)
d108 1
a108 1
   return myRWData_.removeReference (theElement);
d141 10
a150 1
   return myRWData_.containsReference (theObject);
d157 2
a158 3
WitListItr::WitListItr (const WitAbsList & theAbsList):

      myRWData_ ((RWGSlist (WitTlObj) &) (theAbsList.myRWData_))
d162 1
d175 1
a175 1
   return myRWData_.key ();
d182 6
a187 1
   return (myRWData_ () != NULL);
d196 1
a196 2
   witAssert (
      (const RWSlist *) myRWData_.container () == & (theAbsList.myRWData_));
d200 3
a202 1
   theElement = myRWData_ ();
d204 1
a204 1
   return (theElement != NULL);
@


1.14.2.1
log
@Migration from Roguewave tools.h++ to STL
@
text
@d30 1
a30 1
   myListData_.clear ();
d36 1
a36 1
      myListData_ ()
d50 1
a50 1
   myListData_ = theAbsList.myListData_;
d57 2
a58 1
   myListData_.push_back (theObject);
d65 1
a65 1
   return myListData_.front ();
d73 1
a73 3
   WitTlObj * p = myListData_.front();
   myListData_.pop_front ();
   return p;
d80 1
a80 1
   return myListData_.back ();
d85 1
a85 1
void WitAbsList::prependAbs (WitTlObj * theObject)
d87 1
a87 1
   if (theObject == NULL)
d90 1
a90 1
   myListData_.push_front( theObject );
d97 1
a97 4
      std::list<WitTlObj*>::const_iterator it = myListData_.begin();
      while( theIndex-- && it != myListData_.end() )
         it++;
      return it != myListData_.end() ? *it : NULL;
d102 1
a102 1
void WitAbsList::removeReferenceAbs (const WitTlObj * theElement)
d104 1
a104 1
      myListData_.remove( (WitTlObj*)theElement );
d137 1
a137 10
   if( myListData_.size() )
      {
         std::list<WitTlObj*>::const_iterator it = myListData_.begin();
         do
         {
            if( *it == theObject )
               return witTRUE;
         } while( ++it != myListData_.end() );
      }
   return witFALSE;
d144 3
a146 2
WitListItr::WitListItr (const WitAbsList& theAbsList) :
      theList_ (const_cast<WitAbsList&>(theAbsList)), iterating_(false)
a149 1
      myListIterator_ = theList_.myListData_.begin();
d162 1
a162 1
   return *myListIterator_;
d169 1
a169 6
      if( iterating_ ) // we must not increment the iterator the first time around
         myListIterator_++;
      else
         iterating_ = true;

   return ( myListIterator_ != theList_.myListData_.end() );
d178 2
a179 1
   witAssert ( &theList_.myListData_ == &theAbsList.myListData_ );
d183 1
a183 3
   bool gotOne = advance();
   if( gotOne )
      theElement = *myListIterator_;
d185 1
a185 1
   return gotOne;
@


1.13
log
@Preliminary work on single source.
@
text
@a15 1
//    WitVector (TheType)
a17 11
//
// Notes:
//
// 1. The "implement" macro for the generic classes defined in this module
//    can only be invoked in this module, because the resulting object code
//    needs to be linked to the RW library.
//
// 2. The "implement" macro cannot be called from WIT's
//    implementation macros, because they themselves are called by the
//    "implement" macro and the C++ preprocessor does not allow recursion.
//    Thus the RW implementation macros must be called directly.
a24 229
// Implementation macro for generic class Vector (TheType)
//------------------------------------------------------------------------------

#define WitVectorimplement(TheType)                                            \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
RWGVectorimplement (TheType)                                                   \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitVector (TheType)::WitVector (TheType) ():                                   \
      myRWData_ ()                                                             \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitVector (TheType)::WitVector (TheType) (size_t nElems, TheType initValue):   \
                                                                               \
      myRWData_ (nElems, initValue)                                            \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitVector (TheType)::~WitVector (TheType) ()                                   \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
const TheType * WitVector (TheType)::myCvector () const                        \
   {                                                                           \
   return myRWData_.data ();                                                   \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitVector (TheType)::operator = (TheType theValue)                        \
   {                                                                           \
   myRWData_ = theValue;                                                       \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitVector (TheType)::operator = (const WitVector (TheType) & theVector)   \
   {                                                                           \
   witAssert (theVector.length () == length ());                               \
                                                                               \
   int i;                                                                      \
                                                                               \
   for (i = 0; i < length (); ++i)                                             \
      (* this)[i] = theVector[i];                                              \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitVector (TheType)::operator = (const TheType * theCvector)              \
   {                                                                           \
   int i;                                                                      \
                                                                               \
   witAssert (theCvector != NULL);                                             \
                                                                               \
   for (i = 0; i < length (); ++i)                                             \
      (* this)[i] = theCvector[i];                                             \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitVector (TheType)::copySelfInto (TheType * theCvector) const            \
   {                                                                           \
   int theIdx;                                                                 \
                                                                               \
   witAssert (theCvector != NULL);                                             \
                                                                               \
   for (theIdx = 0; theIdx < length (); ++ theIdx)                             \
      theCvector[theIdx] = (* this)[theIdx];                                   \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
TheType * WitVector (TheType)::myCvectorForUpdate ()                           \
   {                                                                           \
   return                                                                      \
      (length () > 0)?                                                         \
         & ((* this)[0]):                                                      \
         NULL;                                                                 \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitVector (TheType)::clear ()                                             \
   {                                                                           \
   myRWData_.reshape (0);                                                      \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitVector (TheType)::resize (size_t nElems)                               \
   {                                                                           \
   myRWData_.reshape (nElems);                                                 \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitVector (TheType)::resize (size_t nElems, TheType theValue)             \
   {                                                                           \
   resize (nElems);                                                            \
                                                                               \
   (* this) = theValue;                                                        \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitBoolean WitVector (TheType)::operator == (                                  \
      const WitVector (TheType) & theVector)                                   \
      const                                                                    \
   {                                                                           \
   int i;                                                                      \
                                                                               \
   if (length () != theVector.length ())                                       \
      return witFALSE;                                                         \
                                                                               \
   for (i = 0; i < length (); ++i)                                             \
      if ((* this)[i] != theVector[i])                                         \
         return witFALSE;                                                      \
                                                                               \
   return witTRUE;                                                             \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitBoolean WitVector (TheType)::operator == (TheType theValue) const           \
   {                                                                           \
   int i;                                                                      \
                                                                               \
   for (i = 0; i < length (); ++i)                                             \
      if ((* this)[i] != theValue)                                             \
         return witFALSE;                                                      \
                                                                               \
   return witTRUE;                                                             \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitVector (TheType)::checkBounds (int theIndex) const                     \
   {                                                                           \
   if (theIndex < 0)                                                           \
      WitMsgFacility::current () ("negativeIndexFmsg", theIndex);              \
                                                                               \
   if (theIndex >= length ())                                                  \
      WitMsgFacility::current () ("indexTooLargeFmsg",                         \
         theIndex,                                                             \
         length () - 1);                                                       \
   }                                                                           \
                                                                               \
//------------------------------------------------------------------------------
// Implementation of all specific cases of generic class Vector (TheType).
//------------------------------------------------------------------------------

implement (WitVector, int)
implement (WitVector, long)
implement (WitVector, float)
implement (WitVector, double)
implement (WitVector, char)
implement (WitVector, WitTlObjPtr)

//------------------------------------------------------------------------------
// Implementation of global functions that use specific cases of class
// WitVector.
//------------------------------------------------------------------------------

WitBoolean operator >= (const WitVector (float) & theVector, float theValue)
   {
   int i;

   for (i = 0; i < theVector.length (); ++i)
      if (theVector[i] < theValue)
         return witFALSE;

   return witTRUE;
   }

//------------------------------------------------------------------------------

void copyInto (WitVector (double) & dstVec, const float * srcCVec)
   {
   int i;

   for (i = 0; i < dstVec.length (); ++ i)
      dstVec[i] = srcCVec[i];
   }

//------------------------------------------------------------------------------

void copyInto (WitVector (double) & dstVec, const WitVector (float) & srcVec)
   {
   witAssert (dstVec.length () == srcVec.length ());

   copyInto (dstVec, srcVec.myCvector ());
   }

//------------------------------------------------------------------------------

void copyInto (WitVector (float) & dstVec, const WitVector (double) & srcVec)
   {
   witAssert (dstVec.length () == srcVec.length ());

   int i;

   for (i = 0; i < dstVec.length (); ++ i)
      dstVec[i] = srcVec[i];
   }

//------------------------------------------------------------------------------

WitBoolean operator >= (const WitVector (double) & theVector, double theValue)
   {
   int i;

   for (i = 0; i < theVector.length (); ++i)
      if (theVector[i] < theValue)
         return witFALSE;

   return witTRUE;
   }

//------------------------------------------------------------------------------
d48 1
a48 1
void WitAbsList::copyOf (const WitAbsList & theAbsList)
@


1.12
log
@Began implementation of object iteration.
@
text
@d289 1
a289 1
void WitAbsList::operator = (const WitAbsList & theAbsList)
@


1.11
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d33 2
@


1.10
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@d201 1
a201 1
implement (WitVector, WitTlPtr)
d294 1
a294 1
void WitAbsList::appendAbs (WitTl * theObject)
d302 1
a302 1
WitTl * WitAbsList::firstAbs () const
d310 1
a310 1
WitTl * WitAbsList::getAbs ()
d317 1
a317 1
WitTl * WitAbsList::lastAbs () const
d324 1
a324 1
WitTl * WitAbsList::prependAbs (WitTl * theObject)
d334 1
a334 1
WitTl * WitAbsList::atAbs (size_t theIndex) const
d341 1
a341 1
WitTl * WitAbsList::removeReferenceAbs (const WitTl * theElement)
d348 1
a348 1
WitTl * WitAbsList::findAbs (
d354 1
a354 1
   WitTl *    theElement;
d365 1
a365 1
void WitAbsList::appendUniquelyAbs (WitTl * theObject)
d374 1
a374 1
WitBoolean WitAbsList::containsAbs (const WitTl * theObject) const
d385 1
a385 1
      myRWData_ ((RWGSlist (WitTl) &) (theAbsList.myRWData_))
d387 1
a387 1
                 // unconsting cast
d399 1
a399 1
WitTl * WitListItr::key ()
d414 1
a414 1
      WitTl * &          theElement,
@


1.9
log
@Implemented and used class SelMgr.
@
text
@d32 1
a32 1
#include <String.h>
@


1.8
log
@Further development of coarse selection splitting.
@
text
@d18 1
a18 1
//    WitList (TheType)
d294 1
a294 1
void WitAbsList::append (WitTl * theObject)
d302 1
a302 1
WitTl * WitAbsList::first () const
d310 1
a310 1
WitTl * WitAbsList::get ()
d317 1
a317 1
WitTl * WitAbsList::last () const
d324 1
a324 1
WitTl * WitAbsList::prepend (WitTl * theObject)
d334 1
a334 1
WitTl * WitAbsList::at (size_t theIndex) const
d341 1
a341 1
WitTl * WitAbsList::removeReference (const WitTl * theElement)
d348 4
a351 1
void WitAbsList::appendUniquely (WitTl * theObject)
d353 2
a354 1
   witAssert (! contains (theObject));
d356 14
a369 1
   append (theObject);
d374 1
a374 1
WitBoolean WitAbsList::contains (const WitTl * theObject) const
a425 82

//------------------------------------------------------------------------------
// Implementation macro for generic classes WitList (TheType).
//------------------------------------------------------------------------------

#define WitListimplement(TheType)                                              \
                                                                               \
/*---------------------------------------------------------------------------*/\
/* Implementation of class List (TheType).                                   */\
/*---------------------------------------------------------------------------*/\
                                                                               \
WitList (TheType)::WitList (TheType) ():                                       \
      WitAbsList ()                                                            \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitList (TheType)::~WitList (TheType) ()                                       \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
TheType * WitList (TheType)::find (                                            \
      const WitString & (* theFunc) (const TheType *),                         \
      const char * theCstring)                                                 \
      const                                                                    \
   {                                                                           \
   TheType * theElement;                                                       \
                                                                               \
   forEachEl (theElement, * this)                                              \
      if (theFunc (theElement) == theCstring)                                  \
         return theElement;                                                    \
                                                                               \
   return NULL;                                                                \
   }                                                                           \

//------------------------------------------------------------------------------
// Implementations of all specific cases of generic class List.
//------------------------------------------------------------------------------

implement (WitList, void)
implement (WitList, int)

implement (WitList, WitString)

implement (WitList, WitComponent)
implement (WitList, WitNode)
implement (WitList, WitPart)
implement (WitList, WitOperation)
implement (WitList, WitBomEntry)
implement (WitList, WitSubEntry)
implement (WitList, WitBopEntry)
implement (WitList, WitDemand)

implement (WitList, WitDatedPart)

implement (WitList, WitParam)
implement (WitList, WitStringParam)
implement (WitList, WitIntParam)
implement (WitList, WitChoiceParam)

implement (WitList, WitTimingSection)

implement (WitList, WitVariant)

implement (WitList, WitObjFunc)
implement (WitList, WitOptStarter)

implement (WitList, WitMeAltPt)

#ifdef OPT_IMPLODE

   implement (WitList, WitBoundedVar)
   implement (WitList, WitCoeff)
   implement (WitList, WitLpCon)
   implement (WitList, WitLpObj)
   implement (WitList, WitLpVar)
   implement (WitList, WitModelEl)

#endif
@


1.7
log
@Some minor changes.
@
text
@d201 1
a201 1
implement (WitVector, WitTypelessPtr)
d294 1
a294 1
void WitAbsList::append (WitTypelessPtr theObject)
d302 1
a302 1
WitTypelessPtr WitAbsList::first () const
d310 1
a310 1
WitTypelessPtr WitAbsList::get ()
d317 1
a317 1
WitTypelessPtr WitAbsList::last () const
d324 1
a324 1
WitTypelessPtr WitAbsList::prepend (WitTypelessPtr theObject)
d334 1
a334 1
WitTypelessPtr WitAbsList::at (size_t theIndex) const
d341 1
a341 1
WitTypelessPtr WitAbsList::removeReference (const WitTypelessPtr theElement)
d348 1
a348 1
void WitAbsList::appendUniquely (WitTypelessPtr theObject)
d357 1
a357 1
WitBoolean WitAbsList::contains (const WitTypelessPtr theObject) const
d368 1
a368 1
      myRWData_ ((RWGSlist (WitNoClass) &) (theAbsList.myRWData_))
d382 1
a382 1
WitTypelessPtr WitListItr::key ()
d397 1
a397 1
      WitTypelessPtr &   theElement,
@


1.6
log
@Refactoring for selection splitting.
@
text
@d32 1
a32 1
#include <Vector.h>
@


1.5
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d74 1
a74 1
WitVector (TheType) & WitVector (TheType)::operator = (TheType theValue)       \
a76 2
                                                                               \
   return * this;                                                              \
d81 1
a81 2
WitVector (TheType) & WitVector (TheType)::operator = (                        \
      const WitVector (TheType) & theVector)                                   \
a88 2
                                                                               \
   return * this;                                                              \
d93 1
a93 2
WitVector (TheType) & WitVector (TheType)::operator = (                        \
      const TheType * theCvector)                                              \
a100 2
                                                                               \
   return * this;                                                              \
a280 7
WitAbsList::WitAbsList (const WitAbsList & theAbsList):
      myRWData_ (theAbsList.myRWData_)
   {
   }

//------------------------------------------------------------------------------

d287 1
a287 1
WitAbsList & WitAbsList::operator = (const WitAbsList & theAbsList)
a289 2

   return * this;
a421 7
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitList (TheType)::WitList (TheType) (const WitList (TheType) & theList):      \
      WitAbsList (theList)                                                     \
@


1.4
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@d113 1
a113 1
void WitVector (TheType)::copyInto (TheType * theCvector) const                \
d229 1
a229 1
void copyTo (WitVector (double) & dstVec, const float * srcCVec)
d239 1
a239 1
void copyTo (WitVector (double) & dstVec, const WitVector (float) & srcVec)
d243 1
a243 1
   copyTo (dstVec, srcVec.myCvector ());
d248 1
a248 1
void copyTo (WitVector (float) & dstVec, const WitVector (double) & srcVec)
@


1.3
log
@Began implementation of stock bounds.
Changed the default value of the stockRealloc attribute to FALSE.
@
text
@d229 1
a229 1
void copy (WitVector (double) & dstVec, const float * srcCVec)
d239 1
a239 1
void copy (WitVector (double) & dstVec, const WitVector (float) & srcVec)
d243 1
a243 1
   copy (dstVec, srcVec.myCvector ());
d248 1
a248 1
void copy (WitVector (float) & dstVec, const WitVector (double) & srcVec)
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d18 1
a18 1
//       WitList (TheType)
a208 1
implement (WitVector, WitVoidStar)
d311 1
a311 1
void WitAbsList::append (void * theObject)
d319 1
a319 1
void * WitAbsList::first () const
d327 1
a327 1
void * WitAbsList::get ()
d334 1
a334 1
void * WitAbsList::last () const
d341 1
a341 1
void * WitAbsList::prepend (void * theObject)
d351 1
a351 1
void * WitAbsList::at (size_t theIndex) const
d358 1
a358 1
void * WitAbsList::removeReference (const void * theElement)
d365 1
a365 1
void WitAbsList::appendUniquely (void * theObject)
d374 1
a374 1
WitBoolean WitAbsList::contains (const void * theObject) const
d385 1
a385 1
      myRWData_ ((RWGSlist(void) &) (theAbsList.myRWData_))
d399 1
a399 1
void * WitListItr::key ()
d414 1
a414 1
      void * &           theElement,
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
