head	1.14;
access;
symbols
	sce_410_withVa:1.10
	sce_4_05_20040511:1.5
	sce_4_00_20040201:1.4;
locks; strict;
comment	@ * @;


1.14
date	2006.03.08.23.57.11;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2006.03.03.20.46.56;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.12.20.46.54;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2005.11.14.22.29.02;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.15.23.07.41;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.28.19.34.27;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.14.22.03.19;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.14.15.05.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.12.15.25.56;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.19.22.00.53;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.24.23.25.56;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.19.19.01.02;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.17.16.53.53;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.15.19.35.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipPegListH
#define PipPegListH

//------------------------------------------------------------------------------
// Header file: "PipPegList.h"
//
// Contains the declaration of class template PipPegList <SrcComp>.
//------------------------------------------------------------------------------

#include <TripStack.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class template PipPegList <SrcComp>
//
// A list of pegging triples: (SrcComp, shipPer, pegVol).
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

template <typename SrcComp> 
      class WitPipPegList: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipPegList (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipPegList ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void append (SrcComp * theSrcComp, WitPeriod thePer, double pegVol);
         //
         // Appends (theSrcComp, thePer, pegVol) to this PipPegList.

      void consolidate (WitSchedule <SrcComp, double> & workSched);
         //
         // Merges the each set of PegTrips in this PipPegList that share the
         // same ScrComp and shipPer into a single PegTrip.
         // Uses workSched as a working Schedule.
         // This function assumes that all entries in workSched are 0 when
         // it begins; when it ends, it restores workSched to this state.

      void getPegTrips (WitTripStack <SrcComp> & thePegTrips);
         //
         // Sets thePegTrips to the pegging list in forward order.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPipPegList);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitTripStack <SrcComp> myPegTrips_;
         //
         // The pegging list, stored in reverse order.
   };

#endif
@


1.13
log
@[shared-resource pegging]
@
text
@@


1.12
log
@[shared-resource pegging]
@
text
@d16 1
a16 1
// Contains the declaration of class template UrpPegList <SrcComp>.
d23 1
a23 1
// Class template UrpPegList <SrcComp>
d27 1
a27 1
// Implemented in URP.C.
d31 1
a31 1
      class WitUrpPegList: public WitProbAssoc
d39 1
a39 1
      WitUrpPegList (WitProblem *);
d45 1
a45 1
      ~WitUrpPegList ();
d53 1
a53 1
         // Appends (theSrcComp, thePer, pegVol) to this UrpPegList.
d57 1
a57 1
         // Merges the each set of PegTrips in this UrpPegList that share the
a66 6
      double pegVolFor (SrcComp * theSrcComp, WitPeriod thePer);
         //
         // If there exists pegVol such that (theSrcComp, thePer, pegVol) is in
         // this UrpPegList, pegVol is returned; otherwise 0.0 is returned.
         // Uses a linear-time search.

d73 1
a73 1
      noCopyCtorAssign (WitUrpPegList);
@


1.11
log
@[shared-resource pegging]
@
text
@@


1.10
log
@New pipShare.
@
text
@d16 1
a16 1
// Contains the declaration of class template PipPegList <SrcComp>.
d23 1
a23 1
// Class template PipPegList <SrcComp>
d27 1
a27 1
// Implemented in PIP.C.
d31 1
a31 1
      class WitPipPegList: public WitProbAssoc
d39 1
a39 1
      WitPipPegList (WitProblem *);
d45 1
a45 1
      ~WitPipPegList ();
d53 1
a53 1
         // Appends (theSrcComp, thePer, pegVol) to this PipPegList.
d57 1
a57 1
         // Merges the each set of PegTrips in this PipPegList that share the
d70 1
a70 1
         // this PipPegList, pegVol is returned; otherwise 0.0 is returned.
d79 1
a79 1
      noCopyCtorAssign (WitPipPegList);
@


1.9
log
@Tie Breaking Prop-Rt.
@
text
@d67 6
@


1.8
log
@PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class template Pip::PegList <SrcComp>.
d23 1
a23 1
// Class template Pip::PegList <SrcComp>
a29 3
namespace WitPip
{

d31 1
a31 1
      class PegList: public WitProbAssoc
d39 1
a39 1
      PegList (WitProblem *);
d45 1
a45 1
      ~PegList ();
d53 1
a53 1
         // Appends (theSrcComp, thePer, pegVol) to this PegList.
d57 2
a58 2
         // Merges the each set of PegTrips in this PegList that share the same
         // ScrComp and shipPer into a single PegTrip.
d73 1
a73 1
      noCopyCtorAssign (PegList);
a83 3
// Leaving namespace Pip.
}   

@


1.7
log
@PIP.
@
text
@a65 2
      double pegVolFor (SrcComp * theSrcComp, WitPeriod thePer);

a68 4

      bool isEmpty ();
         //
         // Returns true, iff this PegList is empty.
@


1.6
log
@PIP.
@
text
@d66 2
@


1.5
log
@Double Precision.
@
text
@d63 1
a63 1
         // This function sssumes that all entries in workSched are 0 when
@


1.4
log
@Continued implementation of PIP.
@
text
@d25 1
a25 1
// A list of pegging triples: (SrcComp, shipPer, pegVols).
@


1.3
log
@Continued implementation of PIP.
@
text
@d19 2
a20 1
#include <Util.h>
d25 1
a25 1
// A list of PerPair <SrcComp> instances and corresponding pegVols.
d34 1
a34 1
      class PegList
d42 1
a42 1
      PegList (WitPerPairMgr <SrcComp> *);
d61 1
a61 1
         // ScrComp into a single PegPair.
d66 1
a66 2
      void getPegTrips (
            WitPairStack <WitPerPair <SrcComp>, double> & thePegTrips);
a73 6
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPerPairMgr <SrcComp> *, myPerPairMgr)

d86 1
a86 1
      WitPairStack <WitPerPair <SrcComp>, double> myPegTrips_;
a88 4

      WitPerPairMgr <SrcComp> * const myPerPairMgr_;
         //
         // The PerPairMgr for this PegList.
@


1.2
log
@Continued implementation of PIP.
@
text
@d24 1
a24 1
// A list of Src <SrcComp> instances and corresponding pegVols.
d41 1
a41 1
      PegList (SrcMgr <SrcComp> * theSrcMgr);
a52 4
      void append (Src <SrcComp> * theSrc, double pegVol);
         //
         // Appends (theSrc, pegVol) to this PegList.

d57 1
a57 1
      void consolidate ();
d59 1
a59 1
         // Merges the each set of PegPairs in this PegList that share the same
d61 3
d65 2
a66 1
      void getPegPairs (WitPairStack <Src <SrcComp>, double> & thePegPairs);
d68 1
a68 1
         // Sets thePegPairs to the pegging list in forward order.
d78 1
a78 1
      accessFunc (SrcMgr <SrcComp> *, mySrcMgr)
d92 1
a92 1
      WitPairStack <Src <SrcComp>, double> myPegPairs_;
d96 1
a96 1
      SrcMgr <SrcComp> * const mySrcMgr_;
d98 1
a98 1
         // The SrcMgr for this PegList.
@


1.1
log
@Continued implementation of PIP.
@
text
@a60 4
      void clear ();
         //
         // Clears this PegList.

@

