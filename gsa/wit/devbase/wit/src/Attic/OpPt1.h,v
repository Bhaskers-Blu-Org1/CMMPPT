head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2003.03.03.21.07.30;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2003.02.28.20.47.36;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.27.19.20.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Continued implementation of proportionate routing.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OpPtH
#define OpPtH

//------------------------------------------------------------------------------
// Header file: "OpPt.h"
//
// Contains the declaration of class OpPt.
//------------------------------------------------------------------------------

#include <SelPt.h>

//------------------------------------------------------------------------------
// Class OpPt
//
// "Proportionate Routing Point"
// A SelPt for proportionate routing
// A OpPt represents an OrCand and a period at which proportionate routing is to
// be performed.
//
// Class Hierarchy:
//
// SelPt
//    OpPt
//
// Implemented in OldPr1.C.
//------------------------------------------------------------------------------

class WitOpPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOpPt (WitOrCand *, WitOpBrPt *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOpPt ();

      //------------------------------------------------------------------------
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual bool        hasResAlt      ();
      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual bool        splittable     ();   
      virtual void        getSortData    (WitPart * &, WitPeriod &);
      virtual WitPeriod   myPeriod       ();
      virtual void        tempAlterSel   ();
      virtual void        restoreSel     (WitSelCand *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      double normExpShare ();
         //
         // Returns the normalized explosion share for this OpPt.
         // Valid only if active  () is true.

      bool active ();
         //
         // Returns true, iff myOrCand_ is currently active for proportionate
         // explosions in the expPer for this OpPt.

      void print ();
         //
         // Prints the current state of this OpPt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOpBrPt *, myOpBrPt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOpPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitOrCand * const myOrCand_;
         //
         // The OrCand represented by this OpPt.

      WitOpBrPt * const myOpBrPt_;
         //
         // TheOpBrPt associated with this OpPt.
   };

#endif
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d10 2
a11 2
#ifndef PrPtH
#define PrPtH
d14 1
a14 1
// Header file: "PrPt.h"
@

