head	1.5;
access;
symbols
	sce_410_withVa:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4;
locks; strict;
comment	@ * @;


1.5
date	2006.01.18.21.42.59;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2003.12.24.23.25.56;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.23.17.56.20;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.19.19.01.01;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.15.23.22.32;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PerPairH
#define PerPairH

//------------------------------------------------------------------------------
// Header file: "PerPair.h"
//
// Contains the declaration    of class template PerPair <FirstEl>.
// Contains the implementation of class template PerPair <FirstEl>.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class template PerPair <FirstEl>
//
// A pair whose elements are of type FirstEl * and period.
//------------------------------------------------------------------------------

template <typename FirstEl> 
      class WitPerPair
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPerPair (FirstEl *, WitPeriod);
                                                                               
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPerPair ();                                     
                                                                               
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void getElems (FirstEl * &, WitPeriod &);
         //
         // Sets the args to the two elements of this pair.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPerPair);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
                                                                               
      FirstEl * const myFirstEl_;                                               
         //                                                                  
         // The FirstEl for this PerPair.                                 
                                                                               
      const WitPeriod myPeriod_;                                               
         //                                                                  
         // The Period for this PerPair.                                 
   };

//------------------------------------------------------------------------------
// Implementation of class template PerPair <FirstEl>.
//------------------------------------------------------------------------------

template <typename FirstEl>
      WitPerPair <FirstEl>::WitPerPair (FirstEl * theFirstEl, WitPeriod thePer):
         myFirstEl_ (theFirstEl),
         myPeriod_  (thePer)
   {                                                                     
   }                                                                     
                                                                               
//------------------------------------------------------------------------------

template <typename FirstEl>
      WitPerPair <FirstEl>::~WitPerPair ()                                      
   {                                                                     
   }                                                                     
                                                                               
//------------------------------------------------------------------------------

template <typename FirstEl>
      void WitPerPair <FirstEl>::getElems (
         FirstEl * & theFirstEl,
         WitPeriod & thePer)
   {
   theFirstEl = myFirstEl_;
   thePer     = myPeriod_;
   }

#endif
@


1.4
log
@Continued implementation of PIP.
@
text
@@


1.3
log
@Continued implementation of PIP.
@
text
@d16 2
a17 2
// Contains the declaration of class template PerPair <FirstEl>.
// Contains the declaration of NonClass function template popTriple.
d75 1
a75 1
// NonClass function template popTriple.
d78 8
a85 2
namespace WitNonClass
{
d87 6
a92 10
template <typename FirstEl> 
      bool popTriple (
         WitPairStack <WitPerPair <FirstEl>, double> & theTriples,
         FirstEl * &                                   theFirstEl,
         WitPeriod &                                   thePer,
         double &                                      theVol);
   //
   // Returns true, iff theTriples is non-empty.
   // If it is non-empty, removes the top triple and sets the args to its
   // elements.
d94 8
a101 2
// Leaving namespace NonClass.
}; 
@


1.2
log
@Continued implementation of PIP.
@
text
@d17 1
a25 2
//
// Implementated in Stack.C.
d73 21
@


1.1
log
@Continued implementation of PIP.
@
text
@d16 1
a16 2
// Contains the declaration and inline implementation of class template
// PerPair <FirstEl>.
d24 1
a24 2
// A pair whose first element is of type FirstEl (accessed by pointer) and whose
// second element is a period.
d26 1
a26 1
// All implementation is inline.
d38 1
a38 5
      inline WitPerPair (FirstEl * theFirstEl, WitPeriod thePer):
            myFirstEl_ (theFirstEl),
            myPeriod_  (thePer)
         {                                                                     
         }                                                                     
d44 1
a44 3
      inline ~WitPerPair ()                                      
         {                                                                     
         }                                                                     
d50 3
a52 5
      inline void getElems (FirstEl * & theFirstEl, WitPeriod & thePer)
         {
         theFirstEl = myFirstEl_;
         thePer     = myPeriod_;
         }
@

