head	1.18;
access;
symbols
	latest_sce_4_20_20060523:1.12.0.2
	sce_4_20_20060523:1.12
	latest_sce4_20_OSL:1.11.0.2
	sce_4_20_OSL:1.11
	sce_410_withVa:1.11
	sce_4_05_20040511:1.7
	sce_4_00_20040201:1.7
	nextGenBranch:1.5.0.2
	nextGenRoot:1.5
	sce_3_30_20030627:1.5
	EndRw-branch:1.3.0.4
	Root-of-EndRw:1.3
	rwToStl:1.3.0.2;
locks; strict;
comment	@ * @;


1.18
date	2007.11.15.19.57.35;	author rjw;	state dead;
branches;
next	1.17;

1.17
date	2007.07.30.22.38.03;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.04.19.34.01;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.22.15.46.52;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.14.16.18.39;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.11.15.56.46;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.03.28.20.14.37;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.24.18.42.04;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.03.21.20.30;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.22.19.25.57;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.01.20.53.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.15.21.01.25;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.13.22.22.13;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.11.18.53.16;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.04.23.07.24;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.03.22.35.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RefMapH
#define RefMapH

//------------------------------------------------------------------------------
// Header file: "RefMap.h"
//
// Contains the declaration of class template RefMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <PtrVec.h>
#include <CompMgr.h>

//------------------------------------------------------------------------------
// Template argument macros for class template RefMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#define RefMapArgDecs typename DomEl, typename RangeEl
#define RefMapArgs             DomEl,          RangeEl

//------------------------------------------------------------------------------
// Class template RefMap <DomEl, RangeEl>
//
// A mapping from the instances of class DomEl (domain element) in a Problem to
// references to instances of class RangeEl (range element).
//------------------------------------------------------------------------------

template <RefMapArgDecs>
      class WitRefMap
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRefMap ();
         //
         // Constructs an empty RefMap (one that does not map any DomEl refs).

      WitRefMap (WitProblem * theProblem);
         //
         // Constructs a RefMap to cover the DomEls owned by theProblem. 
         // The theDomEls are all initially unmapped.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRefMap ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void allocate (WitProblem * theProblem);
         //
         // Resizes this RefMap to cover the DomEls owned by theProblem. 
         // The theDomEls are all initially unmapped.

      void clear ();
         //
         // Deallocates this RefMap.

      void setMapFor (DomEl * theDomEl, RangeEl & theRangeEl);
         //
         // Maps theDomEl to theRangeEl.
         // This mapping must be performed at most once for each DomEl.

      inline RangeEl & operator () (DomEl * theDomEl) const;
         //
         // Returns a reference to the RangeEl to which theDomEl is currently
         // mapped. Asserts that theDomEl is currently mapped.

      inline int nRangeEls ()
         {
         return myPtrVec_.length ();
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitRefMap);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <RangeEl> myPtrVec_;
         //
         // Stores a pointer to the RangeEl to which each DomEl is currently
         // mapped.
   };

//------------------------------------------------------------------------------
// Implementation of inlines.
//------------------------------------------------------------------------------

template <RefMapArgDecs>
      inline RangeEl &
         WitRefMap <RefMapArgs>::operator () (DomEl * theDomEl) const
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_.myElemAt (theDomEl->mappingIndex ());
   }

//------------------------------------------------------------------------------

#endif
@


1.17
log
@Stochastic Implosion
@
text
@@


1.16
log
@Stochastic Implosion
@
text
@a91 5
      inline RangeEl & myRangeElAt (int theIdx)
         {
         return myPtrVec_.myElemAt (theIdx);
         }

@


1.15
log
@Stochastic Implosion
@
text
@a86 5
      void operator = (const RangeEl & theRangeEl);
         //
         // Sets all of the RangeEls mapped to by this RefMap to the value of
         // theRangeEl.

a128 22
// NonClass functions with arguments belonging to RefMap classes.
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   template <typename DomEl>
         void copy (
            WitRefMap <DomEl, WitDblFlexVec> & theRefMap,
            double                             theDbl);
      //
      // Copies theDbl into every DblFlexVec mapped to by theRegMap.

   template <typename DomEl>
         void copy (
            WitRefMap         <DomEl, WitDblFlexVec> & theRefMap,
            const WitSchedule <DomEl, double> &        theSched);
      //
      // Copies the rows of theSched into the DblFlexVecs mapped to by
      // theRegMap.
   };

//------------------------------------------------------------------------------
@


1.14
log
@Stochastic Implosion
@
text
@d53 5
d87 15
d134 22
@


1.13
log
@Stochastic Implosion
@
text
@a33 2
//
// Implemented in RefMapI.h.
d75 1
@


1.12
log
@Updated the copyright date on all source files.
@
text
@d111 1
a111 1
   return myPtrVec_ (theDomEl->mappingIndex ());
@


1.11
log
@Revised mappingIndex code.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.10
log
@Revised mappingIndex code.
@
text
@a20 1
#include <MapIdx.h>
@


1.9
log
@pegged Critical List.
@
text
@d112 1
a112 1
   return myPtrVec_ (mappingIndex (theDomEl));
@


1.8
log
@An attempt to fix warnings from the gcc 3.3.3 compiler.
@
text
@d79 1
a79 1
      inline RangeEl & operator () (DomEl * theDomEl);
d107 2
a108 1
      inline RangeEl & WitRefMap <RefMapArgs>::operator () (DomEl * theDomEl)
@


1.7
log
@Continued implementation of PIP.
@
text
@a83 5
      inline RangeEl * & myPtrAt (DomEl * theDomEl);
         //
         // Returns a reference to the ptr to the RangeEl to which theDomEl is
         // currently mapped.

a115 10
template <RefMapArgDecs>
      inline RangeEl * & WitRefMap <RefMapArgs>::myPtrAt (DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_[mappingIndex (theDomEl)];
   }

//------------------------------------------------------------------------------

@


1.6
log
@Continued implementation of post-implosion pegging.
@
text
@d40 1
a40 1
      class WitRefMap: public WitUtil
@


1.5
log
@Various internal changes.
@
text
@d21 1
d106 24
@


1.4
log
@Various internal changes.
@
text
@d94 1
a94 1
      noCopyCtorAssignTemp (WitRefMap, RefMapArgs);
@


1.3
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d26 2
a27 2
#define RefMapArgDecs  class DomEl, class RangeEl
#define RefMapArgs           DomEl,       RangeEl
@


1.2
log
@Continued implementation of single-source.
@
text
@d83 5
@


1.1
log
@Continued implementation of single-source.
@
text
@d35 1
a35 1
// All implementation is inline.
d51 1
a51 1
      inline WitRefMap ();
d59 1
a59 3
      inline ~WitRefMap ()
         {
         }
d65 1
a65 1
      inline void allocate (WitProblem * theProblem);
d70 1
a70 1
      inline void clear ();
d74 1
a74 1
      inline void setMapFor (DomEl * theDomEl, RangeEl & theRangeEl);
a99 57

//------------------------------------------------------------------------------
// Implementation of class template RefMap <DomEl>.
//------------------------------------------------------------------------------

template <RefMapArgDecs> 
      inline WitRefMap <RefMapArgs>::WitRefMap ():
         myPtrVec_ ()
   {
   ifDebug (DomEl * theDomEl);

   ifDebug (DomEl::verifyMappingIndex (theDomEl));
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs> 
      inline void WitRefMap <RefMapArgs>::allocate (WitProblem * theProblem)
   {
   int nInst;

   nInst = theProblem->myCompMgr ()->nInstances ((DomEl *) NULL);

   myPtrVec_.resize (nInst);
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs>
      inline void WitRefMap <RefMapArgs>::clear ()
   {
   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs>
      inline void WitRefMap <RefMapArgs>::setMapFor (
         DomEl *   theDomEl,
         RangeEl & theRangeEl)
   {
   witAssert (theDomEl != NULL);

   myPtrVec_[theDomEl->mappingIndex ()] = & theRangeEl;
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs>
      inline RangeEl & WitRefMap <RefMapArgs>::operator () (DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   witAssert (myPtrVec_[theDomEl->mappingIndex ()] != NULL);

   return * myPtrVec_[theDomEl->mappingIndex ()];
   }
@

