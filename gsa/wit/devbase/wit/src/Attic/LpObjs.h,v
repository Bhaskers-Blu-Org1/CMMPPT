head	1.4;
access;
symbols
	latest_sce_3_10_20010924:1.3.0.6
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.3.0.4
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2002.08.23.21.00.35;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.41;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.02;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Continued implementation of opt implosion with lot sizes.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
//
//------------------------------------------------------------------------------

#ifndef LpObjsH
#define LpObjsH

//------------------------------------------------------------------------------
// Header file: "LpObjs.h"
//
// Contains the declaration of the following classes, derived from class LpObj:
//
//    BoundsObj
//    PrimaryObj
//    Obj1Obj
//    RevObj
//    InvObj
//    ServObj
//    SubObj
//    Obj2Obj
//------------------------------------------------------------------------------

#include <PerCon.h>

//------------------------------------------------------------------------------
// class BoundsObj
// The Bounds objective for the LP model.
//------------------------------------------------------------------------------

class WitBoundsObj: public WitLpObj
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitBoundsObj (WitImpLp * theImpLp);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitBoundsObj ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual float coeffVal (const WitLpVar * theVar) const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitBoundsObj);
   };

//------------------------------------------------------------------------------
// class PrimaryObj
// The primary objective for objective #1 of the LP model.
//------------------------------------------------------------------------------

class WitPrimaryObj: public WitLpObj
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitPrimaryObj (WitImpLp * theImpLp);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitPrimaryObj ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual float coeffVal (const WitLpVar * theVar) const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitPrimaryObj);
   };

//------------------------------------------------------------------------------
// class Obj1Obj
// Objective #1 for the LP model.
//------------------------------------------------------------------------------

class WitObj1Obj: public WitLpObj
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitObj1Obj (WitImpLp * theImpLp);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitObj1Obj ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual float coeffVal (const WitLpVar * theVar) const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitObj1Obj);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitImpLp * const myImpLp_;
         //
         // The ImpLp to which this Obj1Obj belongs.
   };

//------------------------------------------------------------------------------
// class RevObj
// The revenue objective for objective #2 of the LP model.
//------------------------------------------------------------------------------

class WitRevObj: public WitLpObj
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitRevObj (WitImpLp * theImpLp);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitRevObj ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual float coeffVal (const WitLpVar * theVar) const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitRevObj);
   };

//------------------------------------------------------------------------------
// class InvObj
// The inventory objective for objective #2 of the LP model.
//------------------------------------------------------------------------------

class WitInvObj: public WitLpObj
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitInvObj (WitImpLp * theImpLp);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitInvObj ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual float coeffVal (const WitLpVar * theVar) const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitInvObj);
   };

//------------------------------------------------------------------------------
// class ServObj
// The serviceability objective for objective #2 of the LP model.
//------------------------------------------------------------------------------

class WitServObj: public WitLpObj
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitServObj (WitImpLp * theImpLp);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitServObj ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual float coeffVal (const WitLpVar * theVar) const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitServObj);
   };

//------------------------------------------------------------------------------
// class SubObj
// The substitute objective for objective #2 of the LP model.
//------------------------------------------------------------------------------

class WitSubObj: public WitLpObj
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitSubObj (WitImpLp * theImpLp);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitSubObj ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual float coeffVal (const WitLpVar * theVar) const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitSubObj);
   };

//------------------------------------------------------------------------------
// class Obj2Obj
// Objective #2 for the LP model.
//------------------------------------------------------------------------------

class WitObj2Obj: public WitLpObj
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitObj2Obj (WitImpLp * theImpLp);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitObj2Obj ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual float coeffVal (const WitLpVar * theVar) const;

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitObj2Obj);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitImpLp * const myImpLp_;
         //
         // The ImpLp to which this Obj2Obj belongs.
   };

#endif
@


1.3
log
@Refactoring for selection splitting.
@
text
@@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d63 1
a63 3
      copyCtorAndAssignment (WitBoundsObj);
         //
         // Prevents unintentional copying and assignment.
d99 1
a99 3
      copyCtorAndAssignment (WitPrimaryObj);
         //
         // Prevents unintentional copying and assignment.
d135 1
a135 3
      copyCtorAndAssignment (WitObj1Obj);
         //
         // Prevents unintentional copying and assignment.
d179 1
a179 3
      copyCtorAndAssignment (WitRevObj);
         //
         // Prevents unintentional copying and assignment.
d215 1
a215 3
      copyCtorAndAssignment (WitInvObj);
         //
         // Prevents unintentional copying and assignment.
d251 1
a251 3
      copyCtorAndAssignment (WitServObj);
         //
         // Prevents unintentional copying and assignment.
d287 1
a287 3
      copyCtorAndAssignment (WitSubObj);
         //
         // Prevents unintentional copying and assignment.
d323 1
a323 3
      copyCtorAndAssignment (WitObj2Obj);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
