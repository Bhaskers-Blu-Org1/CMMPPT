head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2006.03.13.19.26.34;	author rjw;	state dead;
branches;
next	1.14;

1.14
date	2006.03.13.17.02.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.08.23.57.12;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.06.19.59.47;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.03.22.22.05;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.03.21.01.02;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.03.20.46.57;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.27.23.15.14;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.12.21.43.58;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.12.20.23.30;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.19.23.30.45;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.18.17.27.45;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.18.17.23.46;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.14.22.29.02;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.14.20.51.23;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.15
log
@GPIP
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef UrpBldrH
#define UrpBldrH

//------------------------------------------------------------------------------
// Header file: "UrpBldr.h"
//
// Contains the declaration of class UrpBldr.
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <PtrSched.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class UrpBldr
//
// "Unshared Resource Pegging Builder"
// Responsible for building the unshared-resource (post-implosion) pegging.
//------------------------------------------------------------------------------

class WitUrpBldr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static void buildPegging (WitPipPgg * thePgg);
         //
         // Builds the pegging for thePgg.

   private:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitUrpBldr (WitPipPgg *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitUrpBldr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void build ();
         //
         // Builds the pegging.

      void initUnpeggedScheds ();
         //
         // Initializes the unpegged schedules.

      void normalizeShares ();
         //
         // Computes the values of normShare_.

      void prtNormShares ();
         //
         // Prints the values of normShare_.

      void compSideVols ();
         //
         // Computes side-effects volumes.

      void compBopSideVols ();
         //
         // Computes side-effects volumes due to BopEntries.

      void compBomSideVols ();
         //
         // Computes side-effects volumes due to BomEntries.

      void prtSideVols ();
         //
         // Prints side-effect volumes.

      void findExecPers ();
         //
         // Sets up expExecPers_.

      void pegShipment (double incShipVol);
         //
         // Pegs incShipVol units of shipVol to targDemand_ in targShipPer_;

      void pegPart (WitPart * thePart, WitPeriod pegPer);
         //
         // Pegs the reqVol of thePart in pegPer.

      void pegToStock (WitPart * thePart, WitPeriod pegPer, double & netReqVol);
         //
         // Pegs up to netReqVol units of thePart in pegPer to stock.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToSupply (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of supply of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToSide (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of side-effect of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToProd (WitPart * thePart, WitPeriod expPer, double & netReqVol);
         //
         // Does pegging by explosion for netReqVol units on thePart in expPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegBopEnt (
            WitBopEntry * theBopEnt,
            WitPeriod     execPer,
            double &      netReqVol);
         //
         // Does pegging by explosion for netReqVol units through theBopEnt in
         // execPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegOpn (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theOpn in execPer.
 
      void pegBomEntWithSubs (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theBomEnt and its substitutes in execPer.

      void pegConsEnt (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theConsEnt in execPer.

      double minAndNet (double & val1, double & val2);
         //
         // Returns the min of val1 and val2 after substracting it from both.

      void prtInfeas ();
         //
         // Prints infeasibility data, as appropriate.

      noCopyCtorAssign (WitUrpBldr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipPgg * const myPgg_;
         //
         // The PipPgg that owns this UrpBldr.

      WitDemand * targDemand_;
         //
         // The Demand currently being pegged to, if any; else NULL.

      WitPeriod targShipPer_;
         //
         // The shipment period currently being pegged to, if any; else -1.

      WitReqSched * myReqSched_;
         //
         // The ReqSched owned by this UrpBldr.

      WitPtrSched <WitBopEntry, WitVector <WitPeriod> > expExecPers_;
         //
         // If expExecPers_ (theBopEnt, expPer) != NULL, then it is a ptr to a
         // vector listing all of the periods, execPer, such that:
         //    theBopEnt->impactPeriod ()[execPer] == expPer and
         //    theBopEnt->execPerOKForExp (execPer) is true.
         // and there are at least two such execPers.

      WitExecPerSched * myExecPerSched_;
         //
         // The ExecPerSched owned by this UrpBldr.

      WitSchedule <WitBopEntry, double> normShare_;
         //
         // normShare_ (theBopEnt)[execPer] is theBopEnt->pipShare_[execPer],
         // normalized so that the values for a given Operation and execPer sum
         // to 1.

      //------------------------------------------------------------------------
      // Unpegged Volume Schedules
      // Each of these schedules stores the unpegged portion of the
      // corresponding Component data (also side-effect volume).
      //------------------------------------------------------------------------

      WitSchedule <WitBopEntry, double> unpgdCoexVol_;
      WitSchedule <WitBomEntry, double> unpgdNonSubVol_;
      WitSchedule <WitSubEntry, double> unpgdSubVol_;
      WitSchedule <WitMaterial, double> unpgdStockVol_;
      WitSchedule <WitPart,     double> unpgdSupplyVol_;
      WitSchedule <WitPart,     double> unpgdSideVol_;

      //------------------------------------------------------------------------
      // Maximum infeasibility data.
      //------------------------------------------------------------------------

      double maxInfeas_;
         //
         // The maximum infesibility encountered.

      WitDemand * maxInfeasDemand_;
      WitPeriod   maxInfeasShipPer_;
      WitPart *   maxInfeasPart_;
      WitPeriod   maxInfeasPer_;
         //
         // The Demand, shipment period, Part and period at which maxInfeas_ was
         // encountered.
   };

#endif
@


1.14
log
@GPIP
@
text
@@


1.13
log
@[shared-resource pegging]
@
text
@a27 5
//
// Class Hierarchy:
//
// ProbAssoc
//    UrpBldr
@


1.12
log
@[shared-resource pegging]
@
text
@d103 1
a103 1
         // Pegs incShipVol units of shipVol to curTarg_.
d186 1
a186 1
      WitPipTarg * curTarg_;
d188 5
a192 1
         // The PipTarg currently being pegged, if any; else NULL.
d237 4
a240 3
      WitPipTarg * maxInfeasTarg_;
      WitPart *    maxInfeasPart_;
      WitPeriod    maxInfeasPer_;
d242 2
a243 1
         // The PipTarg, Part and period at which maxInfeas_ was encountered.
@


1.11
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      static void buildPegging (WitPipOwner * thePipOwner);
d45 1
a45 1
         // Builds the pegging for thePipOwner.
d53 1
a53 1
      WitUrpBldr (WitPipOwner *);
d182 1
a182 1
      WitPipOwner * const myPipOwner_;
d184 1
a184 1
         // The PipOwner that owns this UrpBldr.
@


1.10
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      static void buildPegging (WitUrpOwner * theUrpOwner);
d45 1
a45 1
         // Builds the pegging for theUrpOwner.
d53 1
a53 1
      WitUrpBldr (WitUrpOwner *);
d182 1
a182 1
      WitUrpOwner * const myUrpOwner_;
d184 1
a184 1
         // The UrpOwner that owns this UrpBldr.
@


1.9
log
@[shared-resource pegging]
@
text
@a175 4
      void consolidatePegLists ();
         //
         // Consolidates all of the PipPegLists in the pegging.

@


1.8
log
@[shared-resource pegging]
@
text
@d178 1
a178 1
         // Consolidates all of the UrpPegLists in the pegging.
d190 1
a190 1
      WitUrpTarg * curTarg_;
d192 1
a192 1
         // The UrpTarg currently being pegged, if any; else NULL.
d237 1
a237 1
      WitUrpTarg * maxInfeasTarg_;
d241 1
a241 1
         // The UrpTarg, Part and period at which maxInfeas_ was encountered.
@


1.7
log
@Modification to the implementation of unshared-resource pegging.
@
text
@d206 4
@


1.6
log
@[shared-resource pegging]
@
text
@d172 1
a172 1
      void consolidatePegLists ();
d174 1
a174 1
         // Consolidates the UrpPegLists for the current UrpTarg.
d176 1
a176 1
      void prtInfeas ();
d178 1
a178 1
         // Prints infeasibility data, as appropriate.
a225 8
      // Working Schedules to be used by UrpPegList::consolidate.
      //------------------------------------------------------------------------

      WitSchedule <WitOperation, double> workOpnSched_;
      WitSchedule <WitSubEntry,  double> workSubSched_;
      WitSchedule <WitPart,      double> workPartSched_;

      //------------------------------------------------------------------------
@


1.5
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      static void buildPegging (WitUrpCoord * theUrpCoord);
d45 1
a45 1
         // Builds the pegging for theUrpCoord.
d53 1
a53 1
      WitUrpBldr (WitUrpCoord *);
d186 1
a186 1
      WitUrpCoord * const myUrpCoord_;
d188 1
a188 1
         // The UrpCoord that owns this UrpBldr.
@


1.4
log
@[shared-resource pegging]
@
text
@d196 2
a197 2
         // The ReqSched onwed by this UrpBldr.
                                
@


1.3
log
@[shared-resource pegging]
@
text
@d65 1
a65 1
      void innerBuild ();
@


1.2
log
@[shared-resource pegging]
@
text
@d40 10
d62 1
a62 1
      // Other public member functions.
d65 1
a65 1
      void buildPegging ();
a68 6
   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

@


1.1
log
@[shared-resource pegging]
@
text
@d170 1
a170 1
         // Consolidates the PipPegLists for the current PipTarg.
d186 1
a186 1
      WitPipTarg * curTarg_;
d188 1
a188 1
         // The PipTarg currently being pegged, if any; else NULL.
d222 1
a222 1
      // Working Schedules to be used by PipPegList::consolidate.
d237 1
a237 1
      WitPipTarg * maxInfeasTarg_;
d241 1
a241 1
         // The PipTarg, Part and period at which maxInfeas_ was encountered.
@

