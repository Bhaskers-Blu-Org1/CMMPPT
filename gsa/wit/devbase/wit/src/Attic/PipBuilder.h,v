head	1.42;
access;
symbols
	sce_4_05_20040511:1.41
	sce_4_00_20040201:1.37;
locks; strict;
comment	@ * @;


1.42
date	2005.01.28.19.34.27;	author rjw;	state dead;
branches;
next	1.41;

1.41
date	2004.05.07.22.15.15;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2004.05.05.21.16.50;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2004.05.05.15.26.31;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2004.04.30.23.27.44;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2003.12.29.16.25.32;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2003.12.23.22.24.31;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2003.12.19.19.01.02;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2003.12.17.22.29.59;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2003.12.17.16.53.52;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2003.12.04.16.20.41;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2003.10.28.19.45.34;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2003.10.27.22.16.01;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2003.10.24.15.37.46;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2003.10.23.19.33.12;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2003.10.22.22.30.10;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.22.22.11.15;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.10.21.20.45.42;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.21.19.28.45;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.16.22.29.39;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.10.16.18.13.05;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.16.16.18.03;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.15.21.12.12;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.14.21.19.17;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.13.21.36.17;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.10.22.35.38;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.10.20.55.47;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.10.18.20.02;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.09.21.31.51;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.08.23.26.45;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.08.19.27.49;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.07.18.37.39;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.06.20.33.30;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.06.20.14.59;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.03.23.34.08;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.03.21.52.20;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.02.23.14.10;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.01.17.22.22;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.01.14.17.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.30.15.40.54;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.42
log
@Tie Breaking Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipBuilderH
#define PipBuilderH

//------------------------------------------------------------------------------
// Header file: "PipBuilder.h"
//
// Contains the declaration of class Pip::Builder.
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <PtrSched.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class Pip::Builder
//
// "Post-Implosion Pegging Builder"
// Responsible for building the post-implosion pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    Builder
//------------------------------------------------------------------------------

namespace WitPip
{

class Builder: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      Builder (PegMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~Builder ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void buildPegging ();
         //
         // Builds the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void initUnpeggedScheds ();
         //
         // Initializes the unpegged schedules.

      void normalizeShares ();
         //
         // Computes the values of normShare_.

      void prtNormShares ();
         //
         // Prints the values of normShare_.

      void compSideVols ();
         //
         // Computes side-effects volumes.

      void compBopSideVols ();
         //
         // Computes side-effects volumes due to BopEntries.

      void compBomSideVols ();
         //
         // Computes side-effects volumes due to BomEntries.

      void prtSideVols ();
         //
         // Prints side-effect volumes.

      void findExecPers ();
         //
         // Sets up expExecPers_.

      void pegShipment (double incShipVol);
         //
         // Pegs incShipVol units of shipVol to curTarg_.

      void pegPart (WitPart * thePart, WitPeriod pegPer);
         //
         // Pegs the reqVol of thePart in pegPer.

      void pegToStock (WitPart * thePart, WitPeriod pegPer, double & netReqVol);
         //
         // Pegs up to netReqVol units of thePart in pegPer to stock.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToSupply (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of supply of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToSide (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of side-effect of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToProd (WitPart * thePart, WitPeriod expPer, double & netReqVol);
         //
         // Does pegging by explosion for netReqVol units on thePart in expPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegBopEnt (
            WitBopEntry * theBopEnt,
            WitPeriod     execPer,
            double &      netReqVol);
         //
         // Does pegging by explosion for netReqVol units through theBopEnt in
         // execPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegBomEnts (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through the
         // the BomEntries of theOpn in execPer.
 
      void pegBomEntWithSubs (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theBomEnt and its substitutes in execPer.

      void pegConsEnt (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theConsEnt in execPer.

      double minAndNet (double & val1, double & val2);
         //
         // Returns the min of val1 and val2 after substracting it from both.

      void consolidatePegLists ();
         //
         // Consolidates the PegLists for the current Targ.

      void prtInfeas ();
         //
         // Prints infeasibility data, as appropriate.

      noCopyCtorAssign (Builder);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      PegMgr * const myPegMgr_;
         //
         // The PegMgr that owns this Builder.

      Targ * curTarg_;
         //
         // The Targ currently being pegged, if any; else NULL.

      WitReqSched * myReqSched_;
         //
         // The ReqSched onwed by this Builder.
                                
      WitPtrSched <WitBopEntry, WitVector <WitPeriod> > expExecPers_;
         //
         // If expExecPers_ (theBopEnt, expPer) != NULL, then it is a ptr to a
         // vector listing all of the periods, execPer, such that:
         //    theBopEnt->impactPeriod ()[execPer] == expPer and
         //    theBopEnt->execPerOKForExp (execPer) is true.
         // and there are at least two such execPers.

      WitSchedule <WitBopEntry, double> normShare_;
         //
         // normShare_ (theBopEnt)[execPer] is theBopEnt->pipShare_[execPer],
         // normalized so that the values for a given Operation and execPer sum
         // to 1.

      //------------------------------------------------------------------------
      // Unpegged Volume Schedules
      // Each of these schedules stores the unpegged portion of the
      // corresponding Component data (also side-effect volume).
      //------------------------------------------------------------------------

      WitSchedule <WitBopEntry,  double> unpgdExecVol_;
      WitSchedule <WitBomEntry,  double> unpgdNonSubVol_;
      WitSchedule <WitSubEntry,  double> unpgdSubVol_;
      WitSchedule <WitMaterial,  double> unpgdStockVol_;
      WitSchedule <WitPart,      double> unpgdSupplyVol_;
      WitSchedule <WitPart,      double> unpgdSideVol_;

      //------------------------------------------------------------------------
      // Working Schedules to be used by PegList::consolidate.
      //------------------------------------------------------------------------

      WitSchedule <WitOperation, double> workOpnSched_;
      WitSchedule <WitSubEntry,  double> workSubSched_;
      WitSchedule <WitPart,      double> workPartSched_;

      //------------------------------------------------------------------------
      // Maximum infeasibility data.
      //------------------------------------------------------------------------

      double maxInfeas_;
         //
         // The maximum infesibility encountered.

      Targ *    maxInfeasTarg_;
      WitPart * maxInfeasPart_;
      WitPeriod maxInfeasPer_;
         //
         // The Targ, Part and period at which maxInfeas_ was encountered.
   };

// Leaving namespace Pip.
}   

#endif
@


1.41
log
@PIP.
@
text
@@


1.40
log
@PIP.
@
text
@d207 3
a209 2
         // normShare_ (theBopEnt)[execPer] is theBopEnt->pipShare_, normalized
         // so that the values for a given Operation and execPer sum to 1.
@


1.39
log
@PIP.
@
text
@a18 1
#include <Mapping.h>
d72 8
d205 1
a205 1
      WitMapping <WitOperation, bool> multiExp_;
d207 2
a208 2
         // multiExp_ (theOpn) is true, iff theOpn has multiple explodeable
         // BopEntries.
@


1.38
log
@PIP.
@
text
@d19 1
d197 5
@


1.37
log
@Continued implementation of PIP.
@
text
@d203 1
a203 1
      WitSchedule <WitOperation, double> unpgdExecVol_;
@


1.36
log
@Continued implementation of PIP.
@
text
@d46 1
a46 1
      Builder (Coord *);
d177 1
a177 1
      Coord * const myCoord_;
d179 1
a179 1
         // The Coord that owns this Builder.
@


1.35
log
@Continued implementation of PIP.
@
text
@d200 1
a200 1
      // corresponding Component data.
a207 1

a208 2
         //
         // Unpegged side-effect volume.
@


1.34
log
@Continued implementation of PIP.
@
text
@d163 4
d170 1
a170 1
 
d212 8
@


1.33
log
@Continued implementation of PIP.
@
text
@d46 1
a46 1
      Builder (Mgr *);
d173 1
a173 1
      Mgr * const myMgr_;
d175 1
a175 1
         // The Mge that owns this Builder.
@


1.32
log
@Continued implementation of PIP.
@
text
@d46 1
a46 1
      Builder (WitProblem *);
d58 1
a58 1
      void buildPegging (WitPairStack <Targ, double> & theShipSeq);
d60 2
a61 3
         // Builds the pegging for theShipSeq.
         // Clears theShipSeq.
      
d162 4
d172 4
@


1.31
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class PipBuilder.
d24 1
a24 1
// Class PIP::PipBuilder
d32 1
a32 1
//    PipBuilder
d35 1
a35 1
namespace WitPIP
d38 1
a38 1
class WitPipBuilder: public WitProbAssoc
d46 1
a46 1
      WitPipBuilder (WitProblem *);
d52 1
a52 1
      ~WitPipBuilder ();
d58 1
a58 1
      void buildPegging (WitPairStack <WitPipTarg, double> & theShipSeq);
d95 1
a95 1
         // Pegs incShipVol units of shipVol to curPipTarg_.
d164 1
a164 1
      noCopyCtorAssign (WitPipBuilder);
d170 1
a170 1
      WitPipTarg * curPipTarg_;
d172 1
a172 1
         // The PipTarg currently being pegged, if any; else NULL.
d176 1
a176 1
         // The ReqSched onwed by this PipBuilder.
d210 3
a212 3
      WitPipTarg * maxInfeasTarg_;
      WitPart *    maxInfeasPart_;
      WitPeriod    maxInfeasPer_;
d214 1
a214 1
         // The PipTarg, Part and period at which maxInfeas_ was encountered.
d217 1
a217 1
// Leaving namespace PIP
@


1.30
log
@Continued implementation of PIP.
@
text
@d24 1
a24 1
// Class PipBuilder
d35 3
d216 3
@


1.29
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d70 16
d111 8
d194 4
@


1.28
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a146 4
      double maxUpReqVol_;
         //
         // The maximum residual reqVol found during pegging.

d170 14
@


1.27
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a65 4
      void setUpPegging ();
         //
         // Sets up pegging.

a68 4

      void reserveExcess ();
         //
         // Makes excess supply unavailable for pegging.
@


1.26
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a176 2
      WitSchedule <WitPart,      double> unpgdSupplyVol_;
      WitSchedule <WitMaterial,  double> unpgdStockVol_;
d180 2
@


1.25
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d177 1
a177 1
      WitSchedule <WitPart,      double> unpgdSupVol_;
@


1.24
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a69 4
      void checkRestrictions ();
         //
         // Verifies that the various data restrictions for PIP are met.

@


1.23
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d43 1
a43 1
      WitPipBuilder (WitPipMgr *);
a153 6

      WitPipMgr * const myPipMgr_;
         //
         // The PipMgr that owns this PipBuilder.
         // This PipBuilder is responsible for building the pegging for
         // myPipMgr_.
@


1.22
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d86 1
a86 4
      void pegShipment (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
d88 1
a88 2
         // Pegs the supplyVols used to ship incShipVol units to theDemand and
         // shipPer to the current target.
d161 4
a167 9

      WitPartPipPeg *  supVolPeg_;
      WitOpnPipPeg *  execVolPeg_;
         //
         // The peggings (owned by this PipBuilder) for the current incremental
         // shipment for:
         //
         //    supplyVol
         //    execVol
@


1.21
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a20 1
#include <PairStack.h>
d169 2
a170 1
      WitPairStack <WitPartPipSrc, double> curSupVolPeg_;
d172 2
a173 4
         // The supplyVol pegging for the current incremental shipment, stored
         // in reverse order.

      WitPairStack <WitOpnPipSrc, double> curExecVolPeg_;
d175 2
a176 2
         // The execVol pegging for the current incremental shipment, stored
         // in reverse order.
@


1.20
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d175 5
@


1.19
log
@Continued implementation of post-implosion pegging.
@
text
@d170 1
a170 1
      WitPairStack <WitPartPipSrc, double> curPegging_;
d172 2
a173 2
         // The pegging for the current incremental shipment, stored in reverse
         // order.
@


1.18
log
@Continued implementation of post-implosion pegging.
@
text
@d170 1
a170 1
      WitPairStack <WitPipSrc, double> curPegging_;
@


1.17
log
@Continued implementation of post-implosion pegging.
@
text
@d75 4
d129 1
a129 1
            double         pegExecVol);
d131 1
a131 1
         // Does pegging by explosion of pegExecVol units of execVol through the
d134 20
a165 15
      WitSchedule <WitPart, double> unpgdSupVol_;
         //
         // unpgdSupVol_ (thePart)[thePer] is the unpegged portion of
         // thePart->supplyVol ()[thePer].

      WitSchedule <WitMaterial, double> unpgdStockVol_;
         //
         // unpgdStockVol_ (theMat)[thePer] is the unpegged portion of
         // theMat->stockVol ()[thePer].

      WitSchedule <WitOperation, double> unpgdExecVol_;
         //
         // unpgdExecVol_ (theOpn)[execPer] is the unpegged portion of
         // theOpn->execVol ()[execPer].

d186 12
@


1.16
log
@Continued implementation of post-implosion pegging.
@
text
@d20 1
d79 4
d169 8
@


1.15
log
@Continued implementation of post-implosion pegging.
@
text
@d86 4
d95 1
a95 1
      double pegToSupply (
a101 1
         // Returns the pegged supplyVol.
d137 1
a137 1
      WitSchedule <WitPart, double> upSupVol_;
d139 1
a139 1
         // upSupVol_ (thePart)[thePer] is the unpegged portion of
d142 1
a142 1
      WitSchedule <WitMaterial, double> upStockVol_;
d144 1
a144 1
         // upStockVol_ (theMat)[thePer] is the unpegged portion of
d147 1
a147 1
      WitSchedule <WitOperation, double> upExecVol_;
d149 1
a149 1
         // upExecVol_ (theOpn)[execPer] is the unpegged portion of
@


1.14
log
@Continued implementation of post-implosion pegging.
@
text
@d74 4
@


1.13
log
@Continued implementation of post-implosion pegging.
@
text
@d82 1
a82 12
      void pegMaterial (
            WitMaterial * theMat,
            WitPeriod     reqPer,
            double &      netReqVol);
         //
         // Does pegging for netReqVol units on theMat in reqPer.
         // On return, netReqVol is amount that didn't get pegged.

      double pegAvailVol (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
d84 1
a84 1
         // Pegs up to netReqVol units of availVol of thePart in pegPer.
a85 1
         // Returns the pegged availVol.
d87 1
a87 1
      double pegSupVol (
d96 1
a96 12
      void pegStockVols (
            WitMaterial * theMat,
            WitPeriod     startPer,
            WitPeriod     reqPer);
         //
         // For periods startPer to reqPer, reduces upStockVol_ for the
         // supplyVol pegging stored in curPegVol_ and clears curPegVol_.

      double expPart (
            WitPart * thePart,
            WitPeriod expPer,
            double &  netReqVol);
a99 1
         // Returns the pegged prodVol.
d101 1
a101 1
      double expBopEntry (
a108 1
         // Returns the pegged prodVol.
d110 1
a110 1
      void expBomEntries (
a152 5

      WitTVec <double> curPegVol_;
         //
         // curPegVol_[pegPer] is the amount of supplyVol and prodVol in pegPer
         // that was pegged and stocked during the current call to pegMaterial.
@


1.12
log
@Continued implementation of post-implosion pegging.
@
text
@d74 4
a77 1
      void peg (WitDemand * theDemand, WitPeriod shipPer, double incShipVol);
d116 1
a116 1
      double pegByExp (
d125 18
d183 4
@


1.11
log
@Continued implementation of post-implosion pegging.
@
text
@a78 8
      void pegCapacity (
            WitCapacity * theCap,
            WitPeriod     reqPer,
            double &      netReqVol);
         //
         // Does pegging for netReqVol units on theCap in reqPer.
         // On return, netReqVol is amount that didn't get pegged.

d87 4
a90 4
      double reqVolFromSup (
            WitMaterial * theMat,
            WitPeriod     reqPer,
            double        reqVol);
d92 3
a94 2
         // Computes and returns the portion of reqVol for theMat in reqPer that
         // can be pegged from supply.
d98 1
a98 1
            WitPeriod supPer,
d101 1
a101 1
         // Pegs up to netReqVol units of supply of thePart in supPer.
d111 1
a111 1
         // supplyVol pegging stored in curPegSupVol_ and clears curPegSupVol_.
d113 1
a113 1
      void pegByExp (
d120 1
d158 1
a158 1
      WitTVec <double> curPegSupVol_;
d160 2
a161 2
         // curPegSupVol_[supPer] is the portion of the supplyVol in supPer that
         // was pegged and stocked during the current call to pegMaterial.
@


1.10
log
@Continued implementation of post-implosion pegging.
@
text
@d79 8
d120 8
d148 6
a153 1
         // theMatr->stockyVol ()[thePer].
d155 1
a155 1
      double maxResReqVol_;
@


1.9
log
@Continued implementation of post-implosion pegging.
@
text
@d66 4
d79 17
a95 1
      void pegPart (
d97 1
a97 1
            WitPeriod reqPer,
d100 1
a100 1
         // Does pegging for netReqVol units on thePart in reqPer.
d102 1
d104 4
a107 1
      void pegSupVol (WitPart * thePart, WitPeriod thePer, double pegVol);
d109 2
a110 2
         // Pegs pegVol units of thePart->supplyVol ()[thePer] to the current
         // target.
d126 1
a126 1
         // upSupVol_ (thePart, thePer) is the unpegged portion of
d129 5
d142 5
@


1.8
log
@Continued implementation of post-implosion pegging.
@
text
@d75 1
a75 6
      void pegMaterial (
            WitMaterial * theMat,
            WitPeriod     reqPer,
            double &      netReqVol);

      void pegCapacity (
d79 3
@


1.7
log
@Continued implementation of post-implosion pegging.
@
text
@d113 2
a114 1
         // The pegging for the current incremental shipment.
@


1.6
log
@Continued implementation of post-implosion pegging.
@
text
@d20 1
a20 1
#include <ObjStack.h>
d111 1
a111 1
      WitSchedule <WitPart, double> pegSupVol_;
d113 1
a113 6
         // pegSupVol_ (thePart, thePer) is the portion of
         // thePart->supplyVol ()[thePer] pegged to the current target.

      WitObjStack <WitPipSrc> curPipSrcs_;
         //
         // The set of PipSrcs pegged to curPipTarg_.
@


1.5
log
@Continued implementation of post-implosion pegging.
@
text
@d66 4
d74 10
@


1.4
log
@Continued implementation of post-implosion pegging.
@
text
@d66 1
a66 1
      void prePeg (WitPipTarg * thePipTarg);
d68 2
a69 10
         // Sets up for pegging thePipTarg.

      void postPeg ();
         //
         // Shuts down from pegging curPipTarg_.

      void peg (double incShipVol);
         //
         // Pegs to curPipTarg_ the supplyVols used to ship incShipVol units to
         // curPipTarg_'s Demand and shipPer.
d73 2
a74 1
         // Pegs pegVol units of thePart->supplyVol ()[thePer] to curPipTarg_.
a96 4
      WitPipTarg * curPipTarg_;
         //
         // The PipTarg currently being pegged, if any, else NULL.

d100 1
a100 1
         // thePart->supplyVol ()[thePer] pegged to curPipTarg_.
@


1.3
log
@Continued implementation of post-implosion pegging.
@
text
@d20 1
d66 1
a66 1
      void peg (WitPipTarg * thePipTarg, double incShipVol);
d68 10
a77 2
         // Pegs to thePipTarg the supplyVols used to ship incShipVol units to
         // thePipTarg's Demand and shipPer.
d107 9
@


1.2
log
@Continued implementation of post-implosion pegging.
@
text
@d91 4
@


1.1
log
@Continued implementation of post-implosion pegging.
@
text
@d19 1
d54 1
a54 1
      void buildPegging ();
d56 3
a58 2
         // Builds the pegging.

d65 9
d85 9
@

