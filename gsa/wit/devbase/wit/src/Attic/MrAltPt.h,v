head	1.11;
access;
symbols
	EndRw-branch:1.10.0.8
	Root-of-EndRw:1.10
	rwToStl:1.10.0.6
	latest_sce_3_10_20010924:1.10.0.4
	sce_3_10_20010924:1.10
	latest_sce_3_00_20010601:1.10.0.2
	sce_3_00_20010601:1.10
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2003.03.03.23.26.54;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2001.04.26.21.25.44;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.06.23.23.52;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.06.19.22.09;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.03.19.23.04;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.23.19.43.24;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.20.21.03.59;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.12.19.48.07;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.43;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.15;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.10
log
@Refactoring for selection splitting.
@
text
@@


1.9
log
@Continuing development of selection splitting.
@
text
@a0 152
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MrAltPtH
#define MrAltPtH

//------------------------------------------------------------------------------
// Header file: "MrAltPt.h"
//
// Contains the declaration of class MrAltPt.
//------------------------------------------------------------------------------

#include <AltPt.h>

//------------------------------------------------------------------------------
// Class MrAltPt
//
// An AltPt at which the routing can be altered.
//
// * If the MrComp is a MrPart,   a  BopEntry is to be selected.
// * If the MrComp is a MrBomEnt, a ConsEntry is to be selected.
//
// Class Hierarchy:
//
// AltPt
//    MrAltPt
//
// Implemented in MultiRt.C.
//------------------------------------------------------------------------------

class WitMrAltPt: public WitAltPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrAltPt (WitMrComp * theMrComp, WitPeriod thePer);
         //
         // myMrComp_ <-- theMrComp.
         // myPeriod_ <-- thePer.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMrAltPt ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitCandIndex,                   selIndex)
      accessFunc (WitBoolean,                     hasResAlt)
      accessFunc (const WitVector (WitBoolean) &, prevSel)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitBoolean hasAlt ();
         //
         // Returns TRUE, iff this MrAltPt currently has a selection and an 
         // alternative to the current selection exists.

      inline WitCandIndex nCandidates ()
            //
            // Returns the # of selection candidates for this MrComp.
         {
         return prevSel_.length ();
         }

      virtual void alterSelection ();
         //
         // Override from class AltPt.

      virtual void splitSelection (double);
         //
         // Override from class AltPt.

      virtual void printSelection ();
         //
         // Override from class AltPt.

      virtual WitSelMgr * mySelMgr (WitSelector *);
         //
         // Override from class AltPt.

      virtual WitBoolean splittable ();
         //
         // Override from class AltPt.

      void printID ();
         //
         // Prints a string identifying this MrAltPt.

      void select (WitCandIndex theIdx);
         //
         // Changes the selection index to theIdx, which must be a valid change.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMrAltPt);

      void selectDefault ();
         //
         // Sets the selection to its default value.

      FILE * msgFile ();

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitPeriod myPeriod_;
         //
         // The period in which the routing selection is to be made.

      WitMrComp * const myMrComp_;
         //
         // Represents the Component at which the routing selection is to be
         // made.

      WitCandIndex selIndex_;
         //
         // Index of the selection for this MrAltPt in the candidate vector
         // of myMrComp_.
         // -1 indicates no selection.

      WitBoolean hasResAlt_;
         //
         // TRUE, iff this MrAltPt currently has a selection and an 
         // shortage-resolving alternative to the current selection exists.

      WitVector (WitBoolean) prevSel_;
         //
         // prevSel_[i] is TRUE, iff candidate #i has been previously selected
         // for this MrAltPt.
   };

#endif
@


1.8
log
@Re-worked the controls for selection splitting.
@
text
@d96 4
@


1.7
log
@Continued implementation of selection splitting.
@
text
@a95 4
      virtual float splitRes ();
         //
         // Override from class AltPt.

@


1.6
log
@Continued implementation of selection splitting with the new design.
@
text
@d92 4
@


1.5
log
@Continued implementation of selection splitting with the new design.
@
text
@d88 1
a88 1
      virtual void printSelection (WitSelector *);
@


1.4
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d84 4
@


1.3
log
@Refactoring for selection splitting.
@
text
@d88 4
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d102 1
a102 3
      copyCtorAndAssignment (WitMrAltPt);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
