head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2006.01.09.20.02.30;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2006.01.04.23.07.40;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.03.19.00.03;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.03.17.12.43;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.30.23.37.56;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.30.19.32.04;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.28.18.57.50;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.27.19.43.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.20.17.09.36;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2005.12.19.21.11.25;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.19.19.29.26;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpExpSpecH
#define SrpExpSpecH

//------------------------------------------------------------------------------
// Header file: "SrpExpSpec.h"
//
// Contains the declaration of the following class:
//
//    SrpExpSpec
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class SrpExpSpec
//
// "Shared-Resource Pegging Explosion Specifier"
// Responsible for specifying how explosions in SRP are to be carried out.
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpExpSpec
//------------------------------------------------------------------------------

class WitSrpExpSpec: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpExpSpec (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpExpSpec ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints this SrpExpSpec.

      void specifyExplosion (
            WitPart * thePart,
            WitPeriod fillPer,
            double    incReqVol,
            double    prevReqVol);
         //
         // Puts this SrpExpSpec into an "explosion specified" state.
         // Determines the specifications for filling incReqVol units of
         // requirement on thePart in fillPer after prevReqVol units of
         // requirement on thePart in fillPer have already been filled.

      void unspecifyExplosion ();
         //
         // Puts this SrpExpSpec into an "explosion unspecified" state.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline double suppFillVol ()
         {
         witAssert (expSpecified_);

         return suppFillVol_;
         }

      inline double suppPrevVol ()
         {
         witAssert (expSpecified_);

         return suppPrevVol_;
         }

      inline double prodFillVol ()
         {
         witAssert (expSpecified_);

         return prodFillVol_;
         }

      inline double prodPrevVol ()
         {
         witAssert (expSpecified_);

         return prodPrevVol_;
         }

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      double compReqVol (WitPart * thePart, WitPeriod thePer);
         //
         // Computes and returns the total requirement volume on thePart in
         // thePer.

      void printFillVol (
            WitPart *    thePart,
            WitPeriod    thePer,
            double       theFillVol,
            const char * fillMethName,
            bool &       firstLine);
         //
         // Prints theFillVol with fillMethName as the name of the fill method
         // for filling requirements on thePart in thePer.
         // firstLine indicates whether or not this is the first line for
         // thePart and thePer.

      void netWithSupply (
            WitPart * thePart,
            WitPeriod fillPer,
            double &  netReqVol);
         //
         // Determines the specifications for partially filling netReqVol units
         // of requirement on thePart in fillPer by netting against supply.
         // Updates netReqVol to the unfilled requirement.

      void expToProd (
            WitPart * thePart,
            WitPeriod fillPer,
            double &  netReqVol);
         //
         // Determines the specifications for partially filling netReqVol units
         // of requirement on thePart in fillPer by exploding to production.
         // Updates netReqVol to the unfilled requirement.

      void specifyPrevVols (double prevReqVol);
         //
         // Determines which requimements are considered previously filled and
         // which are considered currently filled, where prevReqVol is the total
         // previously filled requirement.

      void convertToPrevVol (
            double & fillVol,
            double & prevVol,
            double & netPrevVol);
         //
         // Moves up to netPrevVol units from fillVol to prevVol and reduces
         // netPrevVol accordingly.

      noCopyCtorAssign (WitSrpExpSpec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool expSpecified_;
         //
         // If true,  this SrpExpSpec is in an "explosion   specified" state.
         // If false, this SrpExpSpec is in an "explosion unspecified" state.

      double suppFillVol_;
         //
         // The amount of requirement that is to be filled by netting against
         // supply in the current specification.

      double suppPrevVol_;
         //
         // The amount of requirement that is considered to have been previously
         // filled by netting against supply in the current specification.

      double prodFillVol_;
         //
         // The amount of requirement that is to be filled by exploding to
         // production in the current specification.

      double prodPrevVol_;
         //
         // The amount of requirement that is considered to have been previously
         // filled by exploding to production in the current specification.
   };

#endif
@


1.10
log
@[shared-resource pegging]
@
text
@@


1.9
log
@[shared-resource pegging]
@
text
@a21 1
#include <PtrSched.h>
@


1.8
log
@[shared-resource pegging]
@
text
@a18 1
//    SrpOldSpec
a193 108
//------------------------------------------------------------------------------
// Class SrpOldSpec
//
// "Shared-Resource Pegging Explosion Specification"
// (Old Version)
// Responsible for specifying how explosions in SRP are to be carried out.
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpOldSpec
//------------------------------------------------------------------------------

class WitSrpOldSpec: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpOldSpec (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpOldSpec ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints this SrpOldSpec.

      void getFillMethPairs (
            WitPart *                thePart,
            WitPeriod                thePer,
            double                   theReqVol,
            double                   prevReqVol,
            double &                 prevFillVol,
            WitSrpFillMethDblStack & theFillMethPairs);
         //
         // On return, theFillMethPairs is an ordered list of pairs
         // (theSrpFillMeth, fillVol), specifying how to fill theReqVol units
         // requirement on thePart in thePer after prevReqVol units have
         // previously been filled.
         // For the first pair, prevFillVol units are considered to have been
         // filled by theSrpFillMeth before the fillVol units.
         // For all subsequent pairs, 0 units are considered to have been
         // filled by theSrpFillMeth before the fillVol units.

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void buildUp ();
         //
         // Builds up this explosion specification.

      double compReqVol (WitPart * thePart, WitPeriod thePer);
         //
         // Computes and returns the total requirement volume on thePart in
         // thePer.

      void findFillMeths (
            WitPart * thePart,
            WitPeriod thePer,
            double    theReqVol);
         //
         // Determines the serialized fill methods for theReqVol units of
         // requirement on thePart in thePer.

      void netWithSupply (
            WitPart * thePart,
            WitPeriod thePer,
            double &  netReqVol);
         //
         // Nets netReqVol with the supply of thePart in thePer.
         // Records the netting in myFillMethPairs_.

      void expToProd (
            WitPart * thePart,
            WitPeriod expPer,
            double &  netReqVol);
         //
         // Explodes netReqVol to the peoduction of thePart in expPer.
         // Records the exploding in myFillMethPairs_.

      noCopyCtorAssign (WitSrpOldSpec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitPart, WitSrpFillMethDblStack > myFillMethPairs_;
         //
         // myFillMethPairs_.myElemAt (thePart, thePer) is an ordered list of
         // pairs (theSrpFillMeth, fillVol), such that theSrpFillMeth indicates
         // how fillVol units of requirement on thePart in thePer are to be
         // filled after the sum of all the preceeding requirements in the list
         // have been filled.
   };

@


1.7
log
@[shared-resource pegging]
@
text
@d67 1
d72 36
a130 4
      void reset ();
         //
         // Puts this SrpExpSpec into an "unspecified" state.

d169 5
@


1.6
log
@[shared-resource pegging]
@
text
@d19 1
d28 1
a28 1
// "Shared-Resource Pegging Explosion Specification:
d61 133
d250 1
a250 1
      noCopyCtorAssign (WitSrpExpSpec);
@


1.5
log
@[shared-resource peging]
@
text
@d64 2
a65 1
            double                   prevVol,
d68 8
a75 5
         // Makes theFillMethPairs into an ordered list of
         // pairs (theSrpFillMeth, fillVol), such that theSrpFillMeth indicates
         // how fillVol units of requirement on thePart in thePer are to be
         // filled after prevVol units of requirement have been filled,
         // and such that the sum of the fillVols == theReqVol.
@


1.4
log
@[shared-resource pegging]
@
text
@d61 5
a65 5
            WitPart * thePart,
            WitPeriod thePer,
            double    theReqVol,
            double    prevVol,
            WitPairStack <WitSrpFillMeth, double> & theFillMethPairs);
d118 1
a118 2
      WitPtrSched <WitPart, WitPairStack <WitSrpFillMeth, double> >
            myFillMethPairs_;
@


1.3
log
@[shared-resource pegging]
@
text
@d27 2
a28 2
// "Shared-Resource Pegging Explosion Specification"
// Responsible for specifying how serialized explosions are to be done in SRP.
d41 6
a55 5
      static WitSrpExpSpec * newInst (WitProblem * theProblem);
         //
         // Constructs a new SrpExpSpec, builds the specification and returns
         // the new SrpExpSpec.

d60 13
a75 6
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpExpSpec (WitProblem *);

      //------------------------------------------------------------------------
d79 1
a79 1
      void buildSpec ();
d81 1
a81 1
         // Builds the explosion specification.
d102 1
a102 1
         // Records the netting in serFillMeths_.
d110 1
a110 1
         // Records the exploding in serFillMeths_.
d119 1
a119 1
            serFillMeths_;
d121 5
a125 5
         // serFillMeths_.myElemAt (thePart, thePer) is an ordered list of pairs
         // (theSrpFillMeth, fillVol), such that theSrpFillMeth indicates how
         // fillVol units of requirement on thePart in thePer are to be filled
         // after the sum of all the preceeding requirements in the list have
         // been filled.
@


1.2
log
@[shared-resource pegging]
@
text
@@


1.1
log
@[shared-resource pegging]
@
text
@d55 3
a57 3
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------
@

