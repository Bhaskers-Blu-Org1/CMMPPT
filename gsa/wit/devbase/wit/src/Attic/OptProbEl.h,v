head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2008.02.27.22.49.17;	author rjw;	state dead;
branches;
next	1.20;

1.20
date	2007.09.06.18.59.13;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.09.05.22.23.58;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.04.23.01.55;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.04.22.20.12;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.08.16.21.27.40;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.15.22.02.08;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.08.15.21.36.42;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.15.19.15.33;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.14.15.03.00;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.09.19.30.36;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.08.01.20.38.23;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.01.20.12.25;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.27.19.53.37;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.27.16.33.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.26.20.01.30;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.26.19.06.21;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.25.23.12.23;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.03.15.08.59;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.18.19.32.52;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.18.18.43.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
//
//------------------------------------------------------------------------------

#ifndef OptProbElH
#define OptProbElH

//------------------------------------------------------------------------------
// Header file: "OptProbEl.h"
//
// Contains the declaration of class OptProbEl.
//------------------------------------------------------------------------------

#include <BoundPair.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// class OptProbEl
//
// "Optimization Problem Element"
// A variable or constraint in an optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          DetVar
//             ScrapVar
//             NonSubVar
//             SubVar
//             ShipVar
//             BoundedVar
//                ExecVar
//                StockVar
//                CumShipVar
//             SlbvVar
//          StochVar
//             StScrapVar
//             StNonSubVar
//             StSubVar
//             StShipVar
//             StBddVar
//                StExecVar
//                StStockVar
//                StCumShipVar
//             StSlbvVar
//       OptCon
//          DetCon
//             ResourceCon
//             SubCon
//             ShipCon
//             SlbCon
//          StochCon
//             StResCon
//             StSubCon
//             StShipCon
//             StSlbCon
//
// Implemented in OptMisc.C.
//------------------------------------------------------------------------------

class WitOptProbEl
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptProbEl (WitOptProb * theOptProb, int theIndex);
         //
         // index_ <-- theIndex.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptProbEl ();

      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual WitOptProb * myOptProb () = 0;
         //
         // Returns the OptProb that owns this optProbEl.

      virtual double solnValue () = 0;
         //
         // Returns:
         //   primalValue for OptVars.
         //   dualValue () for OptCons.

      //-----------------------------------------------------------------------
      // Public static member functions.
      //-----------------------------------------------------------------------

      static void writeExtReal (
            FILE * outFile,
            const char * fFormat,
            const char * sFormat,
            double val);
         //
         // Writes val to outFile.
         // If val is finite, fFormat is used as the format.
         // If val is infinite, an appropriate string is printed using
         // sFormat as the format.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (const WitBoundPair &, bounds)
      accessFunc (int,                  index)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline WitBoundPair & bounds ()
            //
            // Non-const access.
         {
         return bounds_;
         }

      void allocMyCoeffs (int nCoeffsForOptProbEl);
         //
         // Allocates myCoeffVec_ to nCoeffsForOptProbEl.

      void clearMyCoeffs ();
         //
         // Clears myCoeffVec_.

      void store (WitCoeff * theCoeff);
         //
         // Stores theCoeff in myCoeffVec_.

      void compBounds ();
         //
         // Computes the bounds for this OptProbEl.

      void printID ();
         //
         // Print info identifying this OptProbEl to the optProbFile.

      void printBounds (const WitBoundPair & preScreenBounds);
         //
         // Prints bounds and preScreenBounds for this OptProbEl to the
         // optProbFile.

      void attachCoeffItr (WitCoeffItr & theItr);
         //
         // Attaches theItr to myCoeffVec_.

   protected:

      //-----------------------------------------------------------------------
      // Protected pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual double upperBoundVal () = 0;
      virtual double lowerBoundVal () = 0;
         //
         // Computes and returns the upper and lower bounds for this OptProbEl.

      virtual const char * kindText () = 0;
         //
         // Returns a string identifying the high level derived class (e.g.,
         // OptVar), of which this OptProbEl is an instance.

      virtual const char * classText () = 0;
         //
         // Returns a string identifying the low level derived class (e.g.,
         // StockVar), of which this OptProbEl is an instance.

      virtual void printSource () = 0;
         //
         // Prints to myOptProb ()->optProbFile () text identifying the data
         // from which this OptProbEl was generated.

      //-----------------------------------------------------------------------
      // Other protected member functions.
      //-----------------------------------------------------------------------

      WitProblem * myProblem ();

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitOptProbEl);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPtrVec <WitCoeff> myCoeffVec_;
         //
         // The vector of Coeffs that belong to this OptProbEl_.

      int nCoeffs_;
         //
         // The # of Coeffs that belong to this OptProbEl_.

      WitBoundPair bounds_;
         //
         // Lower and upper bounds.

      const int index_;
         //
         // Index for arrays of OptVars or OptCons or OptObjs.
         // OptVars and OptCons are indexed separately; i.e., the first
         // OptVar has index 0 and the first OptCon has index 0.
   };

#endif
@


1.20
log
@Stochastic Implosion
@
text
@@


1.19
log
@Stochastic Implosion
@
text
@d62 1
@


1.18
log
@Stochastic Implosion
@
text
@a36 1
//             SlbvVar
d41 1
d51 1
@


1.17
log
@Stochastic Implosion
@
text
@d47 4
a50 3
//             StExecVar
//             StStockVar
//             StCumShipVar
@


1.16
log
@Stochastic Implosion
@
text
@d44 4
a48 1
//             StShipVar
a49 3
//             StExecVar
//             StNonSubVar
//             StSubVar
d58 1
a59 1
//             StSubCon
@


1.15
log
@Stochastic Implosion
@
text
@a44 1
//             StExecVar
d47 3
d59 1
@


1.14
log
@Stochastic Implosion
@
text
@d161 2
a162 2
      virtual double compUpperBound () = 0;
      virtual double compLowerBound () = 0;
@


1.13
log
@Stochastic Implosion
@
text
@d44 1
@


1.12
log
@Stochastic Implosion
@
text
@a85 4
      virtual void compBounds () = 0;
         //
         // Computes the bounds for this OptProbEl.

a124 4
      void setBoundsTo (double theLower, double theUpper);
         //
         // Sets bounds_ the the arguments.

d137 4
d160 5
@


1.11
log
@Stochastic Implosion
@
text
@d45 2
d55 1
@


1.10
log
@Stochastic Implosion
@
text
@d79 1
a79 1
      virtual WitOptProb * myOptProb () const = 0;
d87 1
a87 1
      virtual double solnValue () const = 0;
d142 1
a142 1
      void printID () const;
d146 1
a146 1
      void printBounds (const WitBoundPair & preScreenBounds) const;
d151 1
a151 1
      void attachCoeffItr (WitCoeffItr & theItr) const;
d161 1
a161 1
      virtual const char * kindText () const = 0;
d166 1
a166 1
      virtual const char * classText () const = 0;
d171 1
a171 1
      virtual void printSource () const = 0;
d180 1
a180 1
      WitProblem * myProblem () const;
@


1.9
log
@Stochastic Implosion
@
text
@d53 2
@


1.8
log
@Stochastic Implosion
@
text
@d178 1
a178 1
      WitOptImploder * myOptImploder () const;
@


1.7
log
@Stochastic Implosion
@
text
@d51 2
@


1.6
log
@Stochastic Implosion
@
text
@d43 1
@


1.5
log
@Stochastic Implosion
@
text
@d62 1
a62 2
         // myOptProb_ <-- theOptProb.
         // index_     <-- theIndex.
d74 4
a106 1
      accessFunc (WitOptProb *,         myOptProb)
d168 2
a169 2
         // Prints to myOptProb_->optProbFile () text identifying the data from
         // which this OptProbEl was generated.
a188 4
      WitOptProb * const myOptProb_;
         //
         // The OptProb to which this OptProbEl belongs.

@


1.4
log
@Stochastic Implosion
@
text
@d32 1
a32 1
//          PeriodVar
d45 1
a45 1
//          PeriodCon
@


1.3
log
@App controlled opt implosion.
@
text
@d42 2
@


1.2
log
@App controlled opt implode.
@
text
@d135 1
a135 1
         // Print info identifying this OptProbEl to the modelFile.
d140 1
a140 1
         // modelFile.
d164 1
a164 1
         // Prints to myOptProb_->modelFile () text identifying the data from
@


1.1
log
@App controlled opt implosion.
@
text
@d23 3
a25 1
// class OptProbEl (Optimization Problem Element)
@

