head	1.38;
access;
symbols
	EndRw-branch:1.37.0.4
	Root-of-EndRw:1.37
	rwToStl:1.37.0.2
	latest_sce_3_10_20010924:1.23.0.2
	sce_3_10_20010924:1.23
	latest_sce_3_00_20010601:1.9.0.2
	sce_3_00_20010601:1.9;
locks; strict;
comment	@ * @;


1.38
date	2003.03.03.23.27.01;	author rjw;	state dead;
branches;
next	1.37;

1.37
date	2002.09.26.19.05.29;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2002.07.02.21.53.04;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2002.07.02.19.20.58;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2002.06.28.19.40.14;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2002.06.21.18.13.43;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2002.06.18.17.54.44;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2002.06.17.22.08.17;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2002.06.17.17.29.26;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2002.06.13.21.50.13;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.05.24.23.00.06;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.03.14.15.05.48;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.03.07.23.24.28;	author bobw;	state Exp;
branches;
next	1.25;

1.25
date	2002.01.10.22.06.55;	author bobw;	state Exp;
branches;
next	1.24;

1.24
date	2001.12.19.16.17.11;	author bobw;	state Exp;
branches;
next	1.23;

1.23
date	2001.08.30.20.29.24;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.08.28.20.30.26;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.08.24.22.03.21;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.22.20.41.53;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.07.12.19.58.26;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.12.17.57.02;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.07.11.20.47.38;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.06.16.13.38;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.07.03.22.50.42;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.28.17.35.19;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.14.17.41.54;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.11.19.29.11;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.08.18.00.28;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.01.19.23.34;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.30.21.16.49;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.29.22.11.28;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.25.22.59.13;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.25.14.53.26;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.17.15.11.16;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.10.22.31.13;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.30.21.29.42;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.26.21.25.45;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.25.20.54.36;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.37
log
@Began implementation of multi-level lot sizes.
@
text
@@


1.36
log
@Continued implementation of Single-Source.
@
text
@a0 125
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PmrMgrH
#define PmrMgrH

//------------------------------------------------------------------------------
// Header file: "PmrMgr.h"
//
// Contains the declaration of class PmrMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PmrMgr
//
// The interface to the production multi-route subsystem.
// This class operates as a wrapper for template class MrMgr <Pmr>.
//
// Implemented in ProdMR.C.
//------------------------------------------------------------------------------

class WitPmrMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPmrMgr ();

      //------------------------------------------------------------------------
      // Wrappers for myMrMgr_.
      //------------------------------------------------------------------------

      WitBopEntry * selBopEntry (WitPart * thePart, WitPeriod expPer);

      void modifyRouting (WitBopEntPerStack & theBopEntPers);

      void findExpBopEnts (
            WitPart *        thePart, 
            WitPeriod        expPer,
            WitBopEntStack & theBopEnts);

      WitBoolean selIsSplit (WitPart * thePart, WitPeriod expPer);

      void startSplitExp (
            WitPart * thePart, 
            WitPeriod expPer,
            double    expVol);

      WitBoolean findNextSplit (
            WitBopEntry * & theBopEnt, 
            double &        splitExpVol);
 
      void getCandBopEnts (WitPart * thePart, WitBopEntStack & theBopEnts);

      WitBoolean valid (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns TRUE, iff theBopEntry is currently valid for selection in
         // expPer.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void recPartExpPerSS (
            WitPart * thePart,
            WitPeriod expPer,
            double    expVol);
         //
         // Records the fact expVol units were exploded thru thePart in expPer.

      void printHasAlt ();
         //
         // Prints those MrPts for which hasAlt () is TRUE.

      WitSelMgr * mySelMgr ();

      WitSelPt * mySelPt (WitPart * thePart, WitPeriod thePer);
         //
         // Returns the SelPt for PMR at thePart and thePer.

      static WitBopEntry * theBopEntFor (WitMrCand <Pmr> * thePmrCand);

      void select (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Causes theBopEnt to be selected by its Part in expPer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPmrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrMgr <WitPart, WitBopEntry> * myMrMgr_;
         //
         // The MrMgr <Pmr> that this PmrMgr wraps.
   };

#endif
@


1.35
log
@Continued implementation of Single-Source.
@
text
@d74 7
a106 10

      void getCandBopEnts (WitPart * thePart, WitBopEntStack & theBopEnts);
         //
         // Sets theBopEnts to be the ordered list of candidate BopEntries for
         // thePart.

      WitBoolean valid (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Returns TRUE, iff theBopEntry is currently valid for selection in
         // expPer.
@


1.34
log
@Continued implementation of Single-Source.
@
text
@d99 1
a99 1
         // Causes theBopEnt to be selected by its Part in expPer);
d106 1
a106 1
      WitBoolean valid (WitBopEntry * theBopEnt, WitPeriod thePer);
d109 1
a109 1
         // thePer.
@


1.33
log
@Continued implementation of Single-Source.
@
text
@d101 1
a101 3
      void getCandBopEnts (
            WitPart *        thePart,
            WitBopEntStack & theBopEntStack);
d103 2
a104 2
         // Sets theBopEntStack to be the ordered list of candidate BopEntries
         // for thePart.
@


1.32
log
@Continued implementation of Single-Source.
@
text
@d110 1
a110 1
         // Returns TRUE, iff theBopEntry is currenltly valid for selection in
@


1.31
log
@Continued implementation of Single-Source.
@
text
@d101 3
a103 4
      WitBopEntry * nextBopEnt (
            WitPart *                    thePart,
            WitBopEntry *                theBopEnt,
            const WitTVec <WitBoolean> & activeVec);
d105 2
a106 3
         // Returns the next BopEntry for thePart after theBopEnt, in all thePer
         // for which activeVec[thePer] is TRUE, or the first such BopEntry, if
         // theBopEnt == NULL.
@


1.30
log
@Continued implementation of Single-Source.
@
text
@d110 5
@


1.29
log
@Continued implementation of Single-Source.
@
text
@d101 4
a104 3
      WitBopEntry * nextAllPerBopEnt (
            WitPart *     thePart,
            WitBopEntry * theBopEnt);
d106 3
a108 2
         // Returns the next BopEntry for thePart after theBopEnt, valid for all
         // periods, or the first such BopEntry, if theBopEnt == NULL.
@


1.28
log
@Continued implementation of single-source.
@
text
@d101 7
@


1.27
log
@Continued implementation of sel-split for pen-exec.
@
text
@d97 4
@


1.26
log
@Continued implementation of sel-split fpr pen-exec.
@
text
@a73 5
      void setPrevSel (
            WitBopEntry * theBopEnt, 
            WitPeriod     expPer,
            WitBoolean    theVal);

a93 9

      static WitBoolean getPmrCoords (
            WitSelPt *  theSelPt, 
            WitPart * & thePart, 
            WitPeriod & expPer);
         //
         // If theSetPt is actually an MrPt <Pmr>, thePart and expPer are set to
         // the corresponding Part and Period, and TRUE is returned;
         // otherwise FALSE is returned.
@


1.25
log
@Implemented initial prototype of sel-split for pen-exec.
@
text
@d74 5
d99 11
@


1.24
log
@Initial implementation of selection splitting for multi-route.
@
text
@d91 4
@


1.23
log
@Refactoring for constrained stock reallocation.
@
text
@d78 4
a81 4
      void recBopEntExpPerSS (
            WitBopEntry * theBopEnt, 
            WitPeriod     expPer, 
            double        expVol);
d83 1
a83 2
         // Records the fact expVol units were exploded thru theBopEnt in
         // expPer.
@


1.22
log
@Refactoring for constrained stock reallocation.
@
text
@d88 1
a88 1
         // Prints those MrSelPts for which hasAlt () is TRUE.
@


1.21
log
@Refactoring for constrained stock reallocation.
@
text
@d19 1
a19 1
#include <MrMgr.h>
d25 1
a25 6
//
// Class Hierarchy:
//
// SelMgr
//    MrMgr <Pmr>
//       PmrMgr       [private]
d30 1
a30 1
class WitPmrMgr: private WitMrMgr <Pmr>
d51 1
a51 1
      // Wrappers for template class MrMgr <Pmr>.
d90 1
a90 4
      inline WitSelMgr * mySelMgr ()
         {
         return this;
         }
d99 8
@


1.20
log
@Refactoring for constrained stock reallocation.
@
text
@a105 12
      virtual void setUpDerivedSS ();
         //
         // Override from class SelMgr.

      virtual void postCommitSS ();
         //
         // Override from class SelMgr.

      virtual void adjustSplitBound (WitBopEntry *, WitPeriod, double &);
         //
         // Override from class MrMgr <Pmr>.

a106 12

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDblSpSched (WitBopEntry) totExpVol_;
         //
         // Valid only in sel-split mode.
         // totExpVol_ (theBopEnt, expPer) is the total expVol that has been 
         // exploded thru theBopEnt in expPer during the current commit. 
         // totExpVol_ (theBopEnt) is only valid if theBopEnt
         // corresponds to a multi-choice MrBopEnt.
@


1.19
log
@Refactoring.
@
text
@d29 1
a29 1
//    MrMgr <PmrArgs>
d35 1
a35 1
class WitPmrMgr: private WitMrMgr <PmrArgs>
d56 1
a56 1
      // Wrappers for template class MrMgr <PmrArgs>.
d116 1
a116 1
         // Override from class MrMgr <PmrArgs>.
@


1.18
log
@Templatized consumption multi-route.
@
text
@d32 1
a32 1
// Implemented in MultiRoute.C.
@


1.17
log
@Continued refactoring.
@
text
@a24 2
// This class will eventually be renamed PmrMgr, replacing the current class
// with that name.
d53 1
a53 1
      ~WitPmrMgr ();
@


1.16
log
@Minor modification.
@
text
@d32 1
a32 1
//       PmrMgr
a62 2
      void printHasAlt ();

d81 3
a83 4
      void adjustSplitBound (
            WitBopEntry * theBopEnt, 
            WitPeriod     expPer, 
            double &      splitBound);
d89 3
d93 3
a95 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d108 12
d122 11
a132 4
      inline WitMrMgr <PmrArgs> * myMrMgr ()
         {
         return this;
         }
@


1.15
log
@An attempt to fix the link trouble on Windows for the multi-route templates.
@
text
@d34 1
a34 1
// Implemented in MultiRt.C.
d97 1
a97 1
      inline WitSelMgr * thisSelMgr ()
d109 5
@


1.14
log
@Replaced non-template based production multi-route with template based
production multi-route.
@
text
@d37 1
a37 1
class WitPmrMgr: public WitMrMgr <PmrArgs>
d42 4
d56 45
@


1.13
log
@Created class SelCand and classes derived from it.
@
text
@d19 1
a19 3
#include <SelMgr.h>
#include <Mapping.h>
#include <DblSpSch.h>
d24 3
a26 4
// "Production Multi-Route Manager"
// Interface to the production multi-route subsystem.
// The production multi-route subsystem is responsible for maintaining the BOP
// entry selections for multi-route mode.
d31 2
a32 1
//    PmrMgr
d34 1
a34 1
// Implemented in ProdMR.C.
d37 1
a37 1
class WitPmrMgr: public WitSelMgr
d51 1
a51 97
      virtual ~WitPmrMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitBopEntry * selBopEntry (WitPart * thePart, WitPeriod expPer);
         //
         // selBopEntry (thePart, expPer) is the currently selected BopEntry to
         // be used for explosions in order to produce thePart in expPer.
         // Invalid, if thePart is not explodeable in expPer.

      //------------------------------------------------------------------------
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual WitSelPt *   mySelPt            (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod,
                                               WitBoolean &);
      virtual WitBoolean   validForExecBounds ();
      virtual const char * selCaseName        ();
      virtual void         prtSelCandID       (WitTlObj *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void printHasAlt ();
         //
         // Prints those PmrSelPts for which hasAlt () is TRUE.

      void modifyRouting (WitBopEntPerStack & theBopEntPers);
         //
         // Modifies the current routing as indicated by theBopEntPers.

      void findExpBopEnts (
            WitPart *        thePart, 
            WitPeriod        expPer,
            WitBopEntStack & theBopEnts);
         //
         // Sets theBopEnts to be the set of BOP entries currently
         // under consideration for explosion from thePart in expPer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      virtual WitBoolean selSplitNeeded ();
         //
         // Override from class SelMgr.

      WitBoolean selIsSplit (WitPart * thePart, WitPeriod expPer);
         //
         // Returns TRUE, iff there is a split routing selection for exploding
         // thru thePart in expPer. Valid only in sel-split mode.

      void startSplitExp (
            WitPart * thePart, 
            WitPeriod expPer,
            double    expVol);
         //
         // See SelMgr.

      inline WitBoolean findNextSplit (
            WitBopEntry * & theBopEnt, 
            double &        splitExpVol)
         {
         witAssert (selSplit ());

         return findNextSplitAbs ((WitTlObj * &) theBopEnt, splitExpVol);
         }
 
      void adjustSplitBound (
            WitBopEntry * theBopEnt, 
            WitPeriod     expPer, 
            double &      splitBound);
         //
         // Adjusts splitBound as appropriate when performing a production
         // multi-route split explosion through theBopEnt in expPer.

      void recBopEntExpPerSS (
            WitBopEntry * theBopEnt, 
            WitPeriod     expPer, 
            double        expVol);
         //
         // Records the fact expVol units were exploded thru theBopEnt in
         // expPer.

      virtual void postCommitSS ();
         //
         // Override from class SelMgr.

      virtual void postSplitCommit ();
         //
         // Override from class SelMgr.
a59 31

      inline WitPmrPart * & myPmrPart (WitPart * thePart)
            //
            // myPmrPart (thePart) is this PmrMgr's PmrPart for thePart.
         {
         return (WitPmrPart * &) myPmrPartTl_ (thePart);
         }

      virtual void setUpDerivedSS ();
         //
         // Override from class SelMgr.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMapping (WitPart, WitTlObjPtr) myPmrPartTl_;
         //
         // Data for myPmrPart (Part *).

      //------------------------------------------------------------------------
      // Selection splitting data.
      //------------------------------------------------------------------------

      WitDblSpSched (WitBopEntry) totExpVol_;
         //
         // Valid only in sel-split mode.
         // totExpVol_ (theBopEnt, expPer) is the total expVol that has been 
         // exploded thru theBopEnt in expPer during the current commit. 
         // totExpVol_ (theBopEnt) is only valid if theBopEnt
         // corresponds to a multi-choice MrBopEnt.
@


1.12
log
@Refactoring.
@
text
@d159 1
a159 1
      inline WitMrPart * & myMrPart (WitPart * thePart)
d161 1
a161 1
            // myMrPart (thePart) is this PmrMgr's MrPart for thePart.
d163 1
a163 1
         return (WitMrPart * &) myMrPartTl_ (thePart);
d174 1
a174 1
      WitMapping (WitPart, WitTlObjPtr) myMrPartTl_;
d176 1
a176 1
         // Data for myMrPart (Part *).
@


1.11
log
@Refactoring.
@
text
@a85 4
      void printMultiChoices ();
         //
         // Prints those MrParts for which multiChoice_ is TRUE.

@


1.10
log
@Continued development of selection splitting for multi=exec.
@
text
@d189 2
a190 2
         // totExpVol_ (theBopEnt, thePer) is the total expVol that has been 
         // exploded thru theBopEnt in thePer during the current commit. 
@


1.9
log
@Refactoring for sel-split for multi-exec.
@
text
@d65 3
a67 8
      virtual WitSelPt * mySelPt (
            WitBopEntry *,
            WitConsEntry *,
            WitPeriod,
            WitPeriod,
            WitBoolean &);
         //
         // Override from class SelMgr.
d69 12
a80 3
      virtual WitBoolean validForExecBounds ();
         //
         // Override from class SelMgr.
@


1.8
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d124 1
a124 1
         return findNextSplitAbs (asaTlObjRef (theBopEnt), splitExpVol);
a168 15

      inline static WitBopEntry * asaBopEntry (WitTlObj * theTlObj)
         {
         return (WitBopEntry *) theTlObj;
         }

      inline static WitTlObj * asaTlObj (WitBopEntry * theBopEnt)
         {
         return (WitTlObj *) theBopEnt;
         }

      inline static WitTlObj * & asaTlObjRef (WitBopEntry * & theBopEnt)
         {
         return (WitTlObj * &) theBopEnt;
         }
@


1.7
log
@Various refactorings for sel-split for multi-exec.
@
text
@d127 8
a169 4
      virtual void adjustSplitBound (WitTlObj *, double &);
         //
         // Override from class SelMgr.

a203 5

      WitPeriod splitExpPer_;
         //
         // The explosion period for the currently active split explosion.
         // Undefined, if split explosion is not currently active.
@


1.6
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@a165 4
      virtual void prtSplitExp (WitTlObj *);
         //
         // Override from class SelMgr.

@


1.5
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d59 1
a59 1
      WitBopEntry * selBopEntry (WitPart * thePart, WitPeriod thePer);
d61 3
a63 3
         // selBopEntry (thePart, thePer) is the currently selected BopEntry to
         // be used for explosions in order to produce thePart in thePer.
         // Invalid, if thePart is not explodeable in thePer.
d162 1
a162 1
      virtual void adjustSplitBound (WitTl *, double &);
d166 1
a166 1
      virtual void prtSelSplit (WitTl *);
d170 1
a170 1
      inline static WitBopEntry * asaBopEntry (WitTl * theTlObj)
d175 1
a175 1
      inline static WitTl * asaTlObj (WitBopEntry * theBopEnt)
d177 1
a177 1
         return (WitTl *) theBopEnt;
d180 1
a180 1
      inline static WitTl * & asaTlObjRef (WitBopEntry * & theBopEnt)
d182 1
a182 1
         return (WitTl * &) theBopEnt;
d189 1
a189 1
      WitMapping (WitPart, WitTlPtr) myMrPartTl_;
a203 9

      WitStackSpSched (WitPart) splitSched_;
         //
         // Valid only in sel-split mode.
         // splitSched_ (thePart, thePer) is the ordered list of
         // (BopEntry, splitBound) pairs to be used when exploding at
         // thePart in thePer. 
         // splitSched_ (thePart, thePer) is only valid if thePart
         // corresponds to a multi-choice MrPart.
@


1.4
log
@Renamed AltPt classes to SelPt classes.
@
text
@d102 4
d158 1
a158 1
      void setupSelSplit ();
d160 1
a160 1
         // Sets up data for selection splitting.
d205 1
a205 1
      WitStackSpSched (WitPart, WitTl) splitSched_;
@


1.3
log
@Fixed uninitialized memory bugs.
Refactoring for selection splitting.
@
text
@d65 1
a65 1
      virtual WitAltPt * myAltPt (
d80 1
a80 1
         // Prints those PmrAltPts for which hasAlt () is TRUE.
@


1.2
log
@Refactoring for selection splitting.
@
text
@d120 1
a120 1
         return findNextSplitAbs (asaTlPtrRef (theBopEnt), splitExpVol);
d171 1
a171 1
      inline static WitTl * asaTlPtr (WitBopEntry * theBopEnt)
d176 1
a176 1
      inline static WitTl * & asaTlPtrRef (WitBopEntry * & theBopEnt)
@


1.1
log
@Refactoring for selection splitting.
@
text
@d36 1
a36 1
// Implemented in MultiRt.C.
d80 1
a80 1
         // Prints those MrAltPts for which hasAlt () is TRUE.
d84 1
a84 1
         // Prints those MrComps for which multiChoice_ is TRUE.
@

