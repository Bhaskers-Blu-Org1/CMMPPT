head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2007.06.05.21.06.02;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2007.06.01.23.29.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.01.22.25.07;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.01.20.31.30;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.01.18.50.55;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.01.16.22.11;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.31.20.05.49;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.31.19.52.55;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.30.22.57.06;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.30.16.01.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PreDataH
#define PreDataH

//------------------------------------------------------------------------------
// Header file: "PreData.h"
//
// Contains the declaration of class PreData.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <List.h>
#include <Mapping.h>
#include <Schedule.h>
#include <PtrMap.h>

//------------------------------------------------------------------------------
// Class PreData
//
// Holds the working version of the preprocessing data during preprocessing.
//
// Implemented in Pre.C.
//------------------------------------------------------------------------------

class WitPreData: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPreData (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPreData ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void exportData ();
         //
         // Exports the working version of the preprocessing data to the owners
         // of the original preprocessing data.

      bool inEffect (WitBillEntry * theBillEnt, WitPeriod thePer) const;
         //
         // Returns true iff theBillEnt is in effect in thePer.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc  (const WitList     <WitPart>              &, allParts)
      accessFunc  (const WitList     <WitOperation>         &, allOperations)
      accessFunc2 (const WitMapping  <WitPart, int>         &, sortedPartIndex)
      accessFunc2 (const WitSchedule <WitOperation, bool>   &, executable)
      accessFunc2 (const WitSchedule <WitBillEntry,
                                                 WitPeriod> &, impactPeriod)
      accessFunc2 (const WitSchedule <WitMaterial, bool>    &, mandEC)
      accessFunc  (bool                                      , lotSizesExist)
      accessFunc2 (const WitSchedule <WitBomEntry, bool>    &, hasSubsInEffect)
      accessFunc2 (const WitSchedule <WitConsEntry, double> &, effConsRate)
      accessFunc2 (const WitSchedule <WitBopEntry, double>  &, effProdRate)
      accessFunc2 (const WitSchedule <WitBopEntry,
                                                 WitPeriod> &, expExecPeriod)

      const WitList <WitBopEntry> & producingBopEntries (WitPart     *) const;
      const WitList <WitSubEntry> & mySubEntries        (WitBomEntry *) const;

      //------------------------------------------------------------------------
      // Non-const data access functions.
      //------------------------------------------------------------------------

      accessFuncNonConst  (WitList     <WitPart>             &, allParts)
      accessFuncNonConst  (WitList     <WitOperation>        &, allOperations)
      accessFuncNonConst2 (WitMapping  <WitPart, int>        &, sortedPartIndex)
      accessFuncNonConst2 (WitSchedule <WitOperation, bool>  &, executable)
      accessFuncNonConst2 (WitSchedule <WitBillEntry,
                                                  WitPeriod> &, impactPeriod)
      accessFuncNonConst2 (WitSchedule <WitMaterial, bool>   &, mandEC)
      accessFuncNonConst  (bool                              &, lotSizesExist)
      accessFuncNonConst2 (WitSchedule <WitBomEntry, bool>   &, hasSubsInEffect)
      accessFuncNonConst2 (WitSchedule <WitConsEntry, 
                                                     double> &, effConsRate)
      accessFuncNonConst2 (WitSchedule <WitBopEntry, double> &, effProdRate)
      accessFuncNonConst2 (WitSchedule <WitBopEntry,
                                                  WitPeriod> &, expExecPeriod)

      WitList <WitBopEntry> & producingBopEntries (WitPart     *);
      WitList <WitSubEntry> & mySubEntries        (WitBomEntry *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPreData);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitList     <WitPart>                   allParts_;
      WitList     <WitOperation>              allOperations_;
      WitMapping  <WitPart,      int>         sortedPartIndex_;
      WitSchedule <WitOperation, bool>        executable_;
      WitSchedule <WitBillEntry, WitPeriod>   impactPeriod_;
      WitSchedule <WitMaterial,  bool>        mandEC_;
      bool                                    lotSizesExist_;
      WitSchedule <WitBomEntry,  bool>        hasSubsInEffect_;
      WitSchedule <WitConsEntry, double>      effConsRate_;
      WitSchedule <WitBopEntry,  double>      effProdRate_;
      WitSchedule <WitBopEntry,  WitPeriod>   expExecPeriod_;
      WitPtrMap   <WitPart,      WitList <WitBopEntry> >
                                              producingBopEntries_;
      WitPtrMap   <WitBomEntry,  WitList <WitSubEntry> >
                                              mySubEntries_;
   };

#endif
@


1.9
log
@Stochastic Implosion
@
text
@@


1.8
log
@Stochastic Implosion
@
text
@d80 2
a81 3
      const WitList <WitSubEntry> & mySubEntries (
            WitBomEntry * theBomEnt)
            const;
d101 3
a103 1
      WitList <WitSubEntry> & mySubEntries (WitBomEntry * theBomEnt);
d117 15
a131 13
      WitList     <WitPart>                 allParts_;
      WitList     <WitOperation>            allOperations_;
      WitMapping  <WitPart,      int>       sortedPartIndex_;
      WitSchedule <WitOperation, bool>      executable_;
      WitSchedule <WitBillEntry, WitPeriod> impactPeriod_;
      WitSchedule <WitMaterial,  bool>      mandEC_;
      bool                                  lotSizesExist_;
      WitSchedule <WitBomEntry,  bool>      hasSubsInEffect_;
      WitSchedule <WitConsEntry, double>    effConsRate_;
      WitSchedule <WitBopEntry,  double>    effProdRate_;
      WitSchedule <WitBopEntry,  WitPeriod> expExecPeriod_;
      WitPtrMap   <WitBomEntry,
                   WitList <WitSubEntry> >  mySubEntries_;
@


1.7
log
@Stochastic Implosion
@
text
@d23 1
d80 4
d102 1
d127 2
@


1.6
log
@Stochastic Implosion
@
text
@d76 2
d95 2
d120 1
@


1.5
log
@Stochastic Implosion
@
text
@d70 2
a71 2
                                               WitPeriod>   &, impactPeriod)
      accessFunc2 (const WitSchedule <WitMaterial,  bool>   &, mandEC)
d73 1
a73 1
      accessFunc2 (const WitSchedule <WitBomEntry,  bool>   &, hasSubsInEffect)
d75 1
d81 4
a84 4
      accessFuncNonConst  (WitList     <WitPart>            &, allParts)
      accessFuncNonConst  (WitList     <WitOperation>       &, allOperations)
      accessFuncNonConst2 (WitMapping  <WitPart, int>       &, sortedPartIndex)
      accessFuncNonConst2 (WitSchedule <WitOperation, bool> &, executable)
d86 4
a89 4
                                                 WitPeriod> &, impactPeriod)
      accessFuncNonConst2 (WitSchedule <WitMaterial,  bool> &, mandEC)
      accessFuncNonConst  (bool                             &, lotSizesExist)
      accessFuncNonConst2 (WitSchedule <WitBomEntry,  bool> &, hasSubsInEffect)
d91 2
a92 1
                                                    double> &, effConsRate)
d115 1
@


1.4
log
@Stochastic Implosion
@
text
@d65 4
a68 4
      accessFunc  (const WitList     <WitPart>            &, allParts)
      accessFunc  (const WitList     <WitOperation>       &, allOperations)
      accessFunc2 (const WitMapping  <WitPart, int>       &, sortedPartIndex)
      accessFunc2 (const WitSchedule <WitOperation, bool> &, executable)
d70 5
a74 4
                                               WitPeriod> &, impactPeriod)
      accessFunc2 (const WitSchedule <WitMaterial,  bool> &, mandEC)
      accessFunc  (bool,                                     lotSizesExist)
      accessFunc2 (const WitSchedule <WitBomEntry,  bool> &, hasSubsInEffect)
d85 1
a85 1
                                           WitPeriod>       &, impactPeriod)
d89 2
d112 1
@


1.3
log
@Stochastic Implosion
@
text
@d73 1
d87 1
d106 1
a106 1
      WitSchedule <WitMaterial,   bool>     mandEC_;
d108 1
@


1.2
log
@Stochastic Implosion
@
text
@d72 1
d85 1
d105 1
@


1.1
log
@Stochastic Implosion
@
text
@d57 3
a59 4
      inline bool inEffect (WitBillEntry * theBillEnt, WitPeriod thePer) const
         {
         return impactPeriod_ (theBillEnt)[thePer] >= 0;
         }
d70 2
a71 1
                                         WitPeriod>       &, impactPeriod)
d83 1
d102 1
@

