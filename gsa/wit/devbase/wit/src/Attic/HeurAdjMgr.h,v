head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2010.09.21.21.19.12;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2010.09.21.19.58.43;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.17.23.23.20;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.09.17.22.20.53;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.16.22.40.26;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.10.21.12.28;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.10.20.12.06;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.10.16.03.49;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.07.19.52.01;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.07.16.38.58;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Heuristic Adjustment
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef HeurAdjMgrH
#define HeurAdjMgrH

//------------------------------------------------------------------------------
// Header file: "HeurAdjMgr.h"
//
// Contains the declaration of class HeurAdjMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <Schedule.h>
#include <PairStack.h>

//------------------------------------------------------------------------------
// Class HeurAdjMgr
//
// "Heuristic Adjustment Manager"
// Responsible for implementing the heuristic adjustment capability.
//------------------------------------------------------------------------------

class WitHeurAdjMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurAdjMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurAdjMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setHeurAdjustAllowed (bool);
         //
         // Setter

      void start ();
         //
         // Initiates heuristic adjustment.

      void finish ();
         //
         // Concludes heuristic adjustment.

      void adjustForExecVol (
            WitOperation *       theOpn,
            const WitIVRealArg & theVec);
         //
         // Adjusts the state of heuristic allocation for setting
         // theOpn->execVol () to theVec.

      void adjustForSubVol (
            WitSubEntry *        theSub,
            const WitIVRealArg & theVec);
         //
         // Adjusts the state of heuristic allocation for setting
         // theSub->subVol () to theVec.

      void adjustForShipVol (
            WitDemand *          theDemand,
            const WitIVRealArg & theVec);
         //
         // Adjusts the state of heuristic allocation for setting
         // theDemand->shipVol () to theVec.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, heurAdjustAllowed)
      accessFunc (bool, active)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void checkPreconditions ();
         //
         // Verifies that all of the required preconditions for a heuristic
         // adjustment are satisfied.

      void verify (bool theAttVal, const char * theAttName, bool theReqVal);
         //
         // Verifies that theAttVal == theReqVal for heuristic adjustment.
         // theAttName is the name of the attribute being checked.

      void checkExecVol (WitOperation * theOpn, const WitIVRealArg & theVec);
         //
         // Does immediate feasibility checking for setting theOpn->execVol ()
         // to theVec.

      void checkSubVol (WitSubEntry * theSub, const WitIVRealArg & theVec);
         //
         // Sets up delayed feasibility checking for setting theSub->subVol ()
         // to theVec.

      void checkShipVol (WitDemand * theDemand, const WitIVRealArg & theVec);
         //
         // Does immediate feasibility checking for setting
         // theDemand->shipVol () to theVec.

      void checkNonExecCon (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         theValue);
         //
         // Checks the non-executable constraint for setting
         // theOpn->execVol ()[execPer] to theValue.

      void checkExecHUBCon (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         theValue);
         //
         // Checks the hard upper bound constraint for setting
         // theOpn->execVol ()[execPer] to theValue.

      void checkLotSizeCon (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         theValue);
         //
         // Checks the lot size constraint for setting
         // theOpn->execVol ()[execPer] to theValue.

      void checkSubCons ();
         //
         // Checks the substitution constraints that need to checked.

      noCopyCtorAssign (WitHeurAdjMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool heurAdjustAllowed_;
         //
         // Heuristic adjustment is allowed iff heurAdjustAllowed_ is true.

      bool active_;
         //
         // True, iff heuristic adjustment is currently active.

      WitPairStack <WitBomEntry, WitPeriod> pairsToSubCheck_;
         //
         // The set of pairs (theBomEnt, execPer) for which the substitution
         // constraint on theBomEnt in execPer needs to be checked.

      WitSchedule <WitBomEntry, bool> toSubCheck_;
         //
         // toSubCheck_ (theBomEnt)[execPer] is true, iff (theBomEnt, execPer)
         // is in pairsToSubCheck_.
   };

#endif
@


1.9
log
@Heuristic Adjustment
@
text
@@


1.8
log
@Heuristic Adjustment
@
text
@d20 2
d109 6
a114 1
         // to theVec:
d145 4
d162 10
@


1.7
log
@Heuristic Adjustment
@
text
@d62 1
a62 1
            const WitIVRealArg & theValue);
d65 1
a65 1
         // theOpn->execVol () to theValue.
d69 1
a69 1
            const WitIVRealArg & theValue);
d72 1
a72 1
         // theSub->subVol () to theValue.
d76 1
a76 1
            const WitIVRealArg & theValue);
d79 1
a79 1
         // theDemand->shipVol () to theValue.
d104 1
a104 1
      void checkExecVol (WitOperation * theOpn, const WitIVRealArg & theValue);
d107 6
a112 1
         // to theValue:
@


1.6
log
@Heuristic Adjustment
@
text
@d106 23
a128 2
         // Checks the following constraints for setting theOpn->execVol () to
         // theValue:
d130 2
a131 1
         //    Non-executable
@


1.5
log
@Heuristic Adjustment
@
text
@d24 1
d104 7
@


1.4
log
@Heuristic Adjustment
@
text
@d59 7
d67 1
a67 1
            WitSubEntry *        thSub,
@


1.3
log
@Heuristic Adjustment
@
text
@d59 7
@


1.2
log
@Heuristic Adjustment
@
text
@d59 7
@


1.1
log
@Heuristic Adjustment
@
text
@a24 2
//
// Implemented in HeurAll.C.
@

