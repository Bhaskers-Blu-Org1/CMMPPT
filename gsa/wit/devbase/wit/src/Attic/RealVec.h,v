head	1.25;
access;
symbols;
locks; strict;
comment	@ * @;


1.25
date	2004.03.23.19.14.25;	author rjw;	state dead;
branches;
next	1.24;

1.24
date	2004.03.22.16.37.19;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.20.00.12.12;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.03.12.17.21.56;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.03.11.16.59.10;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.03.11.16.36.18;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.09.17.14.00;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.08.22.00.22;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.08.21.11.43;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.08.16.54.29;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.05.22.19.59;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.05.00.06.54;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.04.19.53.27;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.04.16.31.46;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.03.22.13.06;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.03.19.07.28;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.02.23.52.14;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.02.19.17.52;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.02.16.19.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.27.22.46.05;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.26.22.06.08;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.26.20.40.26;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.26.18.59.42;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.26.16.54.55;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.25.22.20.07;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Double Precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RealVecH
#define RealVecH

//------------------------------------------------------------------------------
// Header file: "RealVec.h"
//
// Contains the declaration of class RealVec.
//------------------------------------------------------------------------------

#include <FlexVec.h>
#include <TVec.h>

//------------------------------------------------------------------------------
// Class RealVec
//
// "Real Vector"
// Represents a real-valued vector of length nPeriods for some WitRun.
// Internally, this vector is stored as a FlexVec <double>.
//------------------------------------------------------------------------------

class WitRealVec
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRealVec (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRealVec ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double operator [] (WitPeriod thePer) const;
         //
         // Returns the element indexed by thePer.

      inline void setElem (WitPeriod thePer, double theDbl);
         //
         // Sets the element of this RealVec indexed by thePer to theDbl.

      void copy (const WitRealVec & theRealVec);
         //
         // Copies the elements if theRealVec into this RealVec.

      void convCopy (const WitTVec <float> &);
      void convCopy (const WitTVec <double> &);
      void convCopy (const WitFlexVec <double> &);
      void convCopy (const float *);
         //
         // "Convert-Copy"
         // Each of these functions copies the elements of the argument vector
         // into the corresponding elements of this RealVec.

      void setToScalar (double theDbl);
         //
         // Sets every element of this RealVec to theDbl.

      inline void incElem (WitPeriod thePer, double theDbl);
         //
         // Adds theDbl to the element of this RealVec indexed by thePer.

      void convCopyInto (WitTVec <float> &)    const;
      void convCopyInto (WitTVec <double> &)   const;
      void convCopyInto (WitFlexVec <float> &) const;
      void convCopyInto (float *)              const;
         //
         // "Convert-Copy Into"
         // Each of these functions copies the elements of this RealVec
         // into the corresponding elements of the argument vector.

      bool operator == (double theDbl) const;
         //
         // Returns true iff a every element of this RealVec == theDbl.

      bool operator >= (double theDbl) const;
         //
         // Returns true iff a every element of this RealVec >= theDbl.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitRealVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitFlexVec <double> myDblFlexVec_;
         //
         // The FlexVec representation of this RealVec.
   };

//------------------------------------------------------------------------------
// Inline implementations for class RealVec.
//------------------------------------------------------------------------------

inline double WitRealVec::operator [] (WitPeriod thePer) const
   {
   return myDblFlexVec_[thePer];
   }

//------------------------------------------------------------------------------

inline void WitRealVec::setElem (WitPeriod thePer, double theDbl)
   {
   myDblFlexVec_.elemRef (thePer) = theDbl;
   }

//------------------------------------------------------------------------------

inline void WitRealVec::incElem (WitPeriod thePer, double theDbl)
   {
   myDblFlexVec_.elemRef (thePer) += theDbl;
   }

#endif
@


1.24
log
@Double Precision.
@
text
@@


1.23
log
@Double Precision.
@
text
@d16 1
a16 5
// Contains the declaration of the following classes:
//
//    FltRealVec
//    DblRealVec
//    FltRealVec
d23 1
a23 1
// Class FltRealVec
d25 1
a25 119
// "Float Real Vector"
// Represents a real-valued vector of length nPeriods for some WitRun.
// Internally, this vector is stored as a FlexVec <float>.
//------------------------------------------------------------------------------

class WitFltRealVec
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFltRealVec (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitFltRealVec ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double operator [] (WitPeriod thePer) const;
         //
         // Returns the element indexed by thePer.

      inline void setElem (WitPeriod thePer, double theDbl);
         //
         // Sets the element of this FltRealVec indexed by thePer to theDbl.

      void copy (const WitFltRealVec & theFltRealVec);
         //
         // Copies the elements if theFltRealVec into this FltRealVec.

      void convCopy (const WitTVec <float> &);
      void convCopy (const WitTVec <double> &);
      void convCopy (const WitFlexVec <double> &);
      void convCopy (const float *);
         //
         // "Convert-Copy"
         // Each of these functions copies the elements of the argument vector
         // into the corresponding elements of this FltRealVec.

      void setToScalar (double theDbl);
         //
         // Sets every element of this FltRealVec to theDbl.

      inline void incElem (WitPeriod thePer, double theDbl);
         //
         // Adds theDbl to the element of this FltRealVec indexed by thePer.

      void convCopyInto (WitTVec <float> &)    const;
      void convCopyInto (WitTVec <double> &)   const;
      void convCopyInto (WitFlexVec <float> &) const;
      void convCopyInto (float *)              const;
         //
         // "Convert-Copy Into"
         // Each of these functions copies the elements of this FltRealVec
         // into the corresponding elements of the argument vector.

      bool operator == (double theDbl) const;
         //
         // Returns true iff a every element of this FltRealVec == theDbl.

      bool operator >= (double theDbl) const;
         //
         // Returns true iff a every element of this FltRealVec >= theDbl.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitFltRealVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitFlexVec <float> myFltFlexVec_;
         //
         // The FlexVec representation of this FltRealVec.
   };

//------------------------------------------------------------------------------
// Inline implementations for class FltRealVec.
//------------------------------------------------------------------------------

inline double WitFltRealVec::operator [] (WitPeriod thePer) const
   {
   return dblFromFlt (myFltFlexVec_[thePer]);
   }

//------------------------------------------------------------------------------

inline void WitFltRealVec::setElem (WitPeriod thePer, double theDbl)
   {
   myFltFlexVec_.elemRef (thePer) = fltFromDbl (theDbl);
   }

//------------------------------------------------------------------------------

inline void WitFltRealVec::incElem (WitPeriod thePer, double theDbl)
   {
   myFltFlexVec_.elemRef (thePer) += theDbl;
   }

//------------------------------------------------------------------------------
// Class DblRealVec
//
// "Double Real Vector"
d30 1
a30 1
class WitDblRealVec
d42 1
a42 1
      WitDblRealVec (WitProblem *, double initValue);
d48 1
a48 1
      ~WitDblRealVec ();
d60 1
a60 1
         // Sets the element of this DblRealVec indexed by thePer to theDbl.
d62 1
a62 1
      void copy (const WitDblRealVec & theDblRealVec);
d64 1
a64 1
         // Copies the elements if theDblRealVec into this DblRealVec.
d73 1
a73 1
         // into the corresponding elements of this DblRealVec.
d77 1
a77 1
         // Sets every element of this DblRealVec to theDbl.
d81 1
a81 1
         // Adds theDbl to the element of this DblRealVec indexed by thePer.
d89 1
a89 1
         // Each of these functions copies the elements of this DblRealVec
d94 1
a94 1
         // Returns true iff a every element of this DblRealVec == theDbl.
d98 1
a98 1
         // Returns true iff a every element of this DblRealVec >= theDbl.
d106 1
a106 1
      noCopyCtorAssign (WitDblRealVec);
d114 1
a114 1
         // The FlexVec representation of this DblRealVec.
d118 1
a118 1
// Inline implementations for class DblRealVec.
d121 1
a121 1
inline double WitDblRealVec::operator [] (WitPeriod thePer) const
d128 1
a128 1
inline void WitDblRealVec::setElem (WitPeriod thePer, double theDbl)
d135 1
a135 1
inline void WitDblRealVec::incElem (WitPeriod thePer, double theDbl)
a137 117
   }

//------------------------------------------------------------------------------
// Class FltRealTVc
//
// "Float Real Time Vector"
// Represents a real-valued vector of length nPeriods for some WitRun.
// Internally, this vector is stored as a TVec <float>.
//------------------------------------------------------------------------------

class WitFltRealTVc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFltRealTVc (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitFltRealTVc ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double operator [] (WitPeriod thePer) const;
         //
         // Returns the element indexed by thePer.

      inline void setElem (WitPeriod thePer, double theDbl);
         //
         // Sets the element of this FltRealTVc indexed by thePer to theDbl.

      void copy (const WitFltRealTVc & theFltRealTVc);
         //
         // Copies the elements if theFltRealTVc into this FltRealTVc.

      void convCopy (const WitTVec <float> &);
      void convCopy (const WitTVec <double> &);
      void convCopy (const WitFlexVec <double> &);
      void convCopy (const float *);
         //
         // "Convert-Copy"
         // Each of these functions copies the elements of the argument vector
         // into the corresponding elements of this FltRealTVc.

      void setToScalar (double theDbl);
         //
         // Sets every element of this FltRealTVc to theDbl.

      inline void incElem (WitPeriod thePer, double theDbl);
         //
         // Adds theDbl to the element of this FltRealTVc indexed by thePer.

      void convCopyInto (WitTVec <float> &)  const;
      void convCopyInto (WitTVec <double> &) const;
      void convCopyInto (float *)            const;
         //
         // "Convert-Copy Into"
         // Each of these functions copies the elements of this FltRealTVc
         // into the corresponding elements of the argument vector.

      bool operator == (double theDbl) const;
         //
         // Returns true iff a every element of this FltRealTVc == theDbl.

      bool operator >= (double theDbl) const;
         //
         // Returns true iff a every element of this FltRealTVc >= theDbl.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitFltRealTVc);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitTVec <float> myFltTVec_;
         //
         // The TVec representation of this FltRealTVc.
   };

//------------------------------------------------------------------------------
// Inline implementations for class FltRealTVc.
//------------------------------------------------------------------------------

inline double WitFltRealTVc::operator [] (WitPeriod thePer) const
   {
   return dblFromFlt (myFltTVec_[thePer]);
   }

//------------------------------------------------------------------------------

inline void WitFltRealTVc::setElem (WitPeriod thePer, double theDbl)
   {
   myFltTVec_[thePer] = fltFromDbl (theDbl);
   }

//------------------------------------------------------------------------------

inline void WitFltRealTVc::incElem (WitPeriod thePer, double theDbl)
   {
   myFltTVec_[thePer] += theDbl;
@


1.22
log
@Double Precision.
@
text
@d24 1
@


1.21
log
@Double Precision.
@
text
@d20 1
d259 117
@


1.20
log
@Double Precision.
@
text
@a101 5
      static bool usingDbl ();
         //
         // Returns false to indicate that double precision storage is not
         // being used.

a218 5

      static bool usingDbl ();
         //
         // Returns true to indicate that double precision storage is
         // being used.
@


1.19
log
@Double Precision.
@
text
@d18 2
a19 3
//    FBTRealVec
//    DBTRealVec
//     RTRealVec
d25 1
a25 1
// Class FBTRealVec
d27 1
a27 1
// "Float Build-Time Real Vector"
d32 1
a32 1
class WitFBTRealVec
d44 1
a44 1
      WitFBTRealVec (WitProblem *, double initValue);
d50 1
a50 1
      ~WitFBTRealVec ();
d62 1
a62 1
         // Sets the element of this FBTRealVec indexed by thePer to theDbl.
d64 1
a64 1
      void copy (const WitFBTRealVec & theFBTRealVec);
d66 1
a66 1
         // Copies the elements if theFBTRealVec into this FBTRealVec.
d75 1
a75 1
         // into the corresponding elements of this FBTRealVec.
d79 1
a79 1
         // Sets every element of this FBTRealVec to theDbl.
d83 1
a83 1
         // Adds theDbl to the element of this FBTRealVec indexed by thePer.
d91 1
a91 1
         // Each of these functions copies the elements of this FBTRealVec
d96 1
a96 1
         // Returns true iff a every element of this FBTRealVec == theDbl.
d100 1
a100 1
         // Returns true iff a every element of this FBTRealVec >= theDbl.
d102 4
a105 10
      static void setDoubleMode (bool);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline static bool doubleMode ()
         {
         return doubleMode_;
         }
d113 1
a113 1
      noCopyCtorAssign (WitFBTRealVec);
a118 5
      static bool doubleMode_;
         //
         // If false, then WIT is in float  mode.
         // If true,  then WIT is in double mode.

d121 1
a121 1
         // The FlexVec representation of this FBTRealVec.
d125 1
a125 1
// Inline implementations for class FBTRealVec.
d128 1
a128 1
inline double WitFBTRealVec::operator [] (WitPeriod thePer) const
d135 1
a135 1
inline void WitFBTRealVec::setElem (WitPeriod thePer, double theDbl)
d142 1
a142 1
inline void WitFBTRealVec::incElem (WitPeriod thePer, double theDbl)
d148 1
a148 1
// Class DBTRealVec
d150 1
a150 1
// "Double Build-Time Real Vector"
d155 1
a155 1
class WitDBTRealVec
d167 1
a167 1
      WitDBTRealVec (WitProblem *, double initValue);
d173 1
a173 1
      ~WitDBTRealVec ();
d185 1
a185 1
         // Sets the element of this DBTRealVec indexed by thePer to theDbl.
d187 1
a187 1
      void copy (const WitDBTRealVec & theDBTRealVec);
d189 1
a189 1
         // Copies the elements if theDBTRealVec into this DBTRealVec.
d198 1
a198 1
         // into the corresponding elements of this DBTRealVec.
d202 1
a202 1
         // Sets every element of this DBTRealVec to theDbl.
d206 1
a206 1
         // Adds theDbl to the element of this DBTRealVec indexed by thePer.
d214 1
a214 1
         // Each of these functions copies the elements of this DBTRealVec
d219 1
a219 1
         // Returns true iff a every element of this DBTRealVec == theDbl.
d223 1
a223 1
         // Returns true iff a every element of this DBTRealVec >= theDbl.
d225 4
a228 10
      static void setDoubleMode (bool);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline static bool doubleMode ()
         {
         return doubleMode_;
         }
d236 1
a236 1
      noCopyCtorAssign (WitDBTRealVec);
a241 5
      static bool doubleMode_;
         //
         // If false, then WIT is in float  mode.
         // If true,  then WIT is in double mode.

d244 1
a244 1
         // The FlexVec representation of this DBTRealVec.
d248 1
a248 1
// Inline implementations for class DBTRealVec.
d251 1
a251 1
inline double WitDBTRealVec::operator [] (WitPeriod thePer) const
d258 1
a258 1
inline void WitDBTRealVec::setElem (WitPeriod thePer, double theDbl)
d265 1
a265 1
inline void WitDBTRealVec::incElem (WitPeriod thePer, double theDbl)
a267 179
   }

//------------------------------------------------------------------------------
// Class RTRealVec
//
// "Run-Time Real Vector"
// Represents a real-valued vector of length nPeriods for some WitRun.
// Internally, this vector is stored either as a FlexVec <float> when doubleMode
// is false, and as a FlexVec <double> when doubleMode is true.
//------------------------------------------------------------------------------

class WitRTRealVec
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRTRealVec (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRTRealVec ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double operator [] (WitPeriod thePer) const;
         //
         // Returns the element indexed by thePer.

      inline void setElem (WitPeriod thePer, double theDbl);
         //
         // Sets the element of this RTRealVec indexed by thePer to theDbl.

      void copy (const WitRTRealVec & theRTRealVec);
         //
         // Copies the elements if theRTRealVec into this RTRealVec.

      void convCopy (const WitTVec <float> &);
      void convCopy (const WitTVec <double> &);
      void convCopy (const WitFlexVec <double> &);
      void convCopy (const float *);
         //
         // "Convert-Copy"
         // Each of these functions copies the elements of the argument vector
         // into the corresponding elements of this RTRealVec.

      void setToScalar (double theDbl);
         //
         // Sets every element of this RTRealVec to theDbl.

      inline void incElem (WitPeriod thePer, double theDbl);
         //
         // Adds theDbl to the element of this RTRealVec indexed by thePer.

      void convCopyInto (WitTVec <float> &)    const;
      void convCopyInto (WitTVec <double> &)   const;
      void convCopyInto (WitFlexVec <float> &) const;
      void convCopyInto (float *)              const;
         //
         // "Convert-Copy Into"
         // Each of these functions copies the elements of this RTRealVec
         // into the corresponding elements of the argument vector.

      bool operator == (double theDbl) const;
         //
         // Returns true iff a every element of this RTRealVec == theDbl.

      bool operator >= (double theDbl) const;
         //
         // Returns true iff a every element of this RTRealVec >= theDbl.

      static void setDoubleMode (bool);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline static bool doubleMode ()
         {
         return doubleMode_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline WitFBTRealVec & myFBTRealVec () const;
      inline WitDBTRealVec & myDBTRealVec () const;
         //
         // These functions return a ref to the FltBTRealVec or DblBTRealVec
         // that functions as the internal representation of this RTRealVec.
         // They are to be called only when doubleMode_ has the corresponding
         // value.

      noCopyCtorAssign (WitRTRealVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      union
         {
         WitFBTRealVec * myFBTRealVecPtr_;
            //
            // Ptr to the FBTRealVec that functions as the internal
            // representation of this RTRealVec in float mode.

         WitDBTRealVec * myDBTRealVecPtr_;
            //
            // Ptr to the dBTRealVec that functions as the internal
            // representation of this RTRealVec in double mode.
         };

      static bool doubleMode_;
         //
         // If false, then WIT is in float  mode.
         // If true,  then WIT is in double mode.
   };

//------------------------------------------------------------------------------
// Inline implementations for class RTRealVec.
//------------------------------------------------------------------------------

inline double WitRTRealVec::operator [] (WitPeriod thePer) const
   {
   return
      doubleMode_?
         myDBTRealVec ()[thePer]:
         myFBTRealVec ()[thePer];
   }

//------------------------------------------------------------------------------

inline void WitRTRealVec::setElem (WitPeriod thePer, double theDbl)
   {
   if (doubleMode_)
      myDBTRealVec ().setElem (thePer, theDbl);
   else
      myFBTRealVec ().setElem (thePer, theDbl);
   }

//------------------------------------------------------------------------------

inline void WitRTRealVec::incElem (WitPeriod thePer, double theDbl)
   {
   if (doubleMode_)
      myDBTRealVec ().incElem (thePer, theDbl);
   else
      myFBTRealVec ().incElem (thePer, theDbl);
   }

//------------------------------------------------------------------------------

inline WitFBTRealVec & WitRTRealVec::myFBTRealVec () const
   {
   witAssert (not doubleMode_);

   return * myFBTRealVecPtr_;
   }

//------------------------------------------------------------------------------

inline WitDBTRealVec & WitRTRealVec::myDBTRealVec () const
   {
   witAssert (doubleMode_);

   return * myDBTRealVecPtr_;
@


1.18
log
@Double Precision.
@
text
@d403 12
a414 4
      WitTlObj * myBTRealVecPtr_;
         //
         // Ptr to the FltBTRealVec or DblBTRealVec that functions as the
         // internal representation of this RTRealVec.
d460 1
a460 1
   return * fromTlObj_cast <WitFBTRealVec> (myBTRealVecPtr_);
d469 1
a469 1
   return * fromTlObj_cast <WitDBTRealVec> (myBTRealVecPtr_);
@


1.17
log
@Double Precision.
@
text
@a17 1
//    VRTRealVec
d20 1
a20 1
//    CRTRealVec
d23 1
a23 176
#include <RTRVecIR.h>

//------------------------------------------------------------------------------
// Class VRTRealVec
//
// "Virtual Run-Time Real Vector"
// Represents a real-valued vector of length nPeriods for some WitRun.
// Internally, this vector is stored either as a FlexVec <float> when doubleMode
// is false, and as a FlexVec <double> when doubleMode is true.
// The two cases are distinguished usually by calling virtual functions.
//------------------------------------------------------------------------------

class WitVRTRealVec
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitVRTRealVec (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitVRTRealVec ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double operator [] (WitPeriod thePer) const;
         //
         // Returns the element indexed by thePer.

      inline void setElem (WitPeriod thePer, double theDbl);
         //
         // Sets the element of this VRTRealVec indexed by thePer to theDbl.

      void copy (const WitVRTRealVec & theVRTRealVec);
         //
         // Copies the elements if theVRTRealVec into this VRTRealVec.

      void convCopy (const WitTVec <float> &);
      void convCopy (const WitTVec <double> &);
      void convCopy (const WitFlexVec <double> &);
      void convCopy (const float *);
         //
         // "Convert-Copy"
         // Each of these functions copies the elements of the argument vector
         // into the corresponding elements of this VRTRealVec.

      void setToScalar (double theDbl);
         //
         // Sets every element of this VRTRealVec to theDbl.

      inline void incElem (WitPeriod thePer, double theDbl);
         //
         // Adds theDbl to the element of this VRTRealVec indexed by thePer.

      void convCopyInto (WitTVec <float> &)    const;
      void convCopyInto (WitTVec <double> &)   const;
      void convCopyInto (WitFlexVec <float> &) const;
      void convCopyInto (float *)              const;
         //
         // "Convert-Copy Into"
         // Each of these functions copies the elements of this VRTRealVec
         // into the corresponding elements of the argument vector.

      bool operator == (double theDbl) const;
         //
         // Returns true iff a every element of this VRTRealVec == theDbl.

      bool operator >= (double theDbl) const;
         //
         // Returns true iff a every element of this VRTRealVec >= theDbl.

      static void setDoubleMode (bool);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline static bool doubleMode ()
         {
         return doubleMode_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static WitVRTRVecIR & newVRTRVecIR (WitProblem *, double initValue);
         //
         // Returns a reference to a newly heap-constructed VRTRVecIR for the
         // args, appropriate to the value of doubleMode_.

      inline WitFltVRTRVecIR & myFltIR () const;
      inline WitDblVRTRVecIR & myDblIR () const;
         //
         // These functions return myIR_, cast to the appropriate derived class.
         // They are to be called only when doubleMode_ has the corresponding
         // value.

      noCopyCtorAssign (WitVRTRealVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      static bool doubleMode_;
         //
         // If false, then WIT is in float  mode.
         // If true,  then WIT is in double mode.

      WitVRTRVecIR & myIR_;
         //
         // The internal representation of this VRTRealVec.
   };

//------------------------------------------------------------------------------
// Inline implementations for class VRTRealVec.
//------------------------------------------------------------------------------

inline double WitVRTRealVec::operator [] (WitPeriod thePer) const
   {
   return
      doubleMode_?
         myDblIR ()[thePer]:
         myFltIR ()[thePer];
   }

//------------------------------------------------------------------------------

inline void WitVRTRealVec::setElem (WitPeriod thePer, double theDbl)
   {
   if (doubleMode_)
      myDblIR ().setElem (thePer, theDbl);
   else
      myFltIR ().setElem (thePer, theDbl);
   }

//------------------------------------------------------------------------------

inline void WitVRTRealVec::incElem (WitPeriod thePer, double theDbl)
   {
   if (doubleMode_)
      myDblIR ().incElem (thePer, theDbl);
   else
      myFltIR ().incElem (thePer, theDbl);
   }

//------------------------------------------------------------------------------

inline WitFltVRTRVecIR & WitVRTRealVec::myFltIR () const
   {
   witAssert (not doubleMode_);

   return static_cast <WitFltVRTRVecIR &> (myIR_);
   }

//------------------------------------------------------------------------------

inline WitDblVRTRVecIR & WitVRTRealVec::myDblIR () const
   {
   witAssert (doubleMode_);

   return static_cast <WitDblVRTRVecIR &> (myIR_);
   }
d294 1
a294 1
// Class CRTRealVec
d296 1
a296 1
// "Conditional Run-Time Real Vector"
a299 1
// The two cases are distinguished by using conditional code.
d302 1
a302 1
class WitCRTRealVec
d314 1
a314 1
      WitCRTRealVec (WitProblem *, double initValue);
d320 1
a320 1
      ~WitCRTRealVec ();
d332 1
a332 1
         // Sets the element of this CRTRealVec indexed by thePer to theDbl.
d334 1
a334 1
      void copy (const WitCRTRealVec & theCRTRealVec);
d336 1
a336 1
         // Copies the elements if theCRTRealVec into this CRTRealVec.
d345 1
a345 1
         // into the corresponding elements of this CRTRealVec.
d349 1
a349 1
         // Sets every element of this CRTRealVec to theDbl.
d353 1
a353 1
         // Adds theDbl to the element of this CRTRealVec indexed by thePer.
d361 1
a361 1
         // Each of these functions copies the elements of this CRTRealVec
d366 1
a366 1
         // Returns true iff a every element of this CRTRealVec == theDbl.
d370 1
a370 1
         // Returns true iff a every element of this CRTRealVec >= theDbl.
d393 1
a393 1
         // that functions as the internal representation of this CRTRealVec.
d397 1
a397 1
      noCopyCtorAssign (WitCRTRealVec);
d406 1
a406 1
         // internal representation of this CRTRealVec.
d415 1
a415 1
// Inline implementations for class CRTRealVec.
d418 1
a418 1
inline double WitCRTRealVec::operator [] (WitPeriod thePer) const
d428 1
a428 1
inline void WitCRTRealVec::setElem (WitPeriod thePer, double theDbl)
d438 1
a438 1
inline void WitCRTRealVec::incElem (WitPeriod thePer, double theDbl)
d448 1
a448 1
inline WitFBTRealVec & WitCRTRealVec::myFBTRealVec () const
d457 1
a457 1
inline WitDBTRealVec & WitCRTRealVec::myDBTRealVec () const
@


1.16
log
@Double Precision.
@
text
@d18 1
a18 1
//    RTRealVec
d21 1
d27 1
a27 1
// Class RTRealVec
d29 1
a29 1
// "Run-Time Real Vector"
d33 1
d36 1
a36 1
class WitRTRealVec
d48 1
a48 1
      WitRTRealVec (WitProblem *, double initValue);
d54 1
a54 1
      ~WitRTRealVec ();
d66 1
a66 1
         // Sets the element of this RTRealVec indexed by thePer to theDbl.
d68 1
a68 1
      void copy (const WitRTRealVec & theRTRealVec);
d70 1
a70 1
         // Copies the elements if theRTRealVec into this RTRealVec.
d79 1
a79 1
         // into the corresponding elements of this RTRealVec.
d83 1
a83 1
         // Sets every element of this RTRealVec to theDbl.
d87 1
a87 1
         // Adds theDbl to the element of this RTRealVec indexed by thePer.
d95 1
a95 1
         // Each of these functions copies the elements of this RTRealVec
d100 1
a100 1
         // Returns true iff a every element of this RTRealVec == theDbl.
d104 1
a104 1
         // Returns true iff a every element of this RTRealVec >= theDbl.
d123 1
a123 1
      static WitRTRVecIR & newRTRVecIR (WitProblem *, double initValue);
d125 1
a125 1
         // Returns a reference to a newly heap-constructed RTRVecIR for the
d128 6
a133 13
      inline WitFltRTRVecIR & myFltIR () const
         {
         witAssert (not doubleMode_);

         return static_cast <WitFltRTRVecIR &> (myIR_);
         }

      inline WitDblRTRVecIR & myDblIR () const
         {
         witAssert (doubleMode_);

         return static_cast <WitDblRTRVecIR &> (myIR_);
         }
d135 1
a135 1
      noCopyCtorAssign (WitRTRealVec);
d146 1
a146 1
      WitRTRVecIR & myIR_;
d148 1
a148 1
         // The internal representation of this RTRealVec.
d152 1
a152 1
// Inline implementations for class RTRealVec.
d155 1
a155 1
inline double WitRTRealVec::operator [] (WitPeriod thePer) const
d165 1
a165 1
inline void WitRTRealVec::setElem (WitPeriod thePer, double theDbl)
d175 1
a175 1
inline void WitRTRealVec::incElem (WitPeriod thePer, double theDbl)
d184 18
d467 172
@


1.15
log
@Double Precision.
@
text
@d18 3
a20 2
//    ModeRV
//    FixedRV
d23 1
a23 1
#include <RealVecIR.h>
d26 1
a26 1
// Class ModeRV
d28 1
a28 1
// "Mode Real Vector"
d30 2
a31 4
// Internally, this vector is stored either as a FlexVec <float> in float mode,
// as a FlexVec <double> in double mode.
//
// If Use_ModeRV is 1, typedef RealVec maps to this class.
d34 1
a34 1
class WitModeRV
d46 1
a46 1
      WitModeRV (WitProblem *, double initValue);
d52 1
a52 1
      ~WitModeRV ();
d64 1
a64 1
         // Sets the element of this ModeRV indexed by thePer to theDbl.
d66 1
a66 1
      void copy (const WitModeRV & theModeRV);
d68 1
a68 1
         // Copies the elements if theModeRV into this ModeRV.
d77 1
a77 1
         // into the corresponding elements of this ModeRV.
d81 1
a81 1
         // Sets every element of this ModeRV to theDbl.
d83 1
a83 1
      void incElem (WitPeriod thePer, double theDbl);
d85 1
a85 1
         // Adds theDbl to the element of this ModeRV indexed by thePer.
d93 1
a93 1
         // Each of these functions copies the elements of this ModeRV
d98 1
a98 1
         // Returns true iff a every element of this ModeRV == theDbl.
d102 1
a102 1
         // Returns true iff a every element of this ModeRV >= theDbl.
d121 1
a121 1
      static WitRealVecIR & newRealVecIR (WitProblem *, double initValue);
d123 1
a123 1
         // Returns a reference to a newly heap-constructed RealVecIR for the
d126 1
a126 1
      inline WitFltRealVecIR & myFltIR () const
d130 1
a130 1
         return static_cast <WitFltRealVecIR &> (myIR_);
d133 1
a133 1
      inline WitDblRealVecIR & myDblIR () const
d137 1
a137 1
         return static_cast <WitDblRealVecIR &> (myIR_);
d140 1
a140 1
      noCopyCtorAssign (WitModeRV);
d151 1
a151 1
      WitRealVecIR & myIR_;
d153 1
a153 1
         // The internal representation of this ModeRV.
d157 1
a157 1
// Inline implementations for class ModeRV.
d160 1
a160 1
inline double WitModeRV::operator [] (WitPeriod thePer) const
d170 1
a170 1
inline void WitModeRV::setElem (WitPeriod thePer, double theDbl)
d179 11
a189 1
// Class FixedRV
d191 1
a191 1
// "Fixed Real Vector"
a193 2
//
// If Use_ModeRV is 0, typedef RealVec maps to this class.
d196 1
a196 1
class WitFixedRV
d208 1
a208 1
      WitFixedRV (WitProblem *, double initValue);
d214 1
a214 1
      ~WitFixedRV ();
d226 1
a226 1
         // Sets the element of this FixedRV indexed by thePer to theDbl.
d228 1
a228 1
      void copy (const WitFixedRV & theFixedRV);
d230 1
a230 1
         // Copies the elements if theFixedRV into this FixedRV.
d239 1
a239 1
         // into the corresponding elements of this FixedRV.
d243 1
a243 1
         // Sets every element of this FixedRV to theDbl.
d245 1
a245 1
      void incElem (WitPeriod thePer, double theDbl);
d247 1
a247 1
         // Adds theDbl to the element of this FixedRV indexed by thePer.
d255 1
a255 1
         // Each of these functions copies the elements of this FixedRV
d260 1
a260 1
         // Returns true iff a every element of this FixedRV == theDbl.
d264 1
a264 1
         // Returns true iff a every element of this FixedRV >= theDbl.
d283 1
a283 1
      noCopyCtorAssign (WitFixedRV);
d296 1
a296 1
         // The FlexVec representation of this FixedRV.
d300 1
a300 1
// Inline implementations for class FixedRV.
d303 1
a303 1
inline double WitFixedRV::operator [] (WitPeriod thePer) const
d310 1
a310 1
inline void WitFixedRV::setElem (WitPeriod thePer, double theDbl)
d313 141
@


1.14
log
@Double Precision.
@
text
@d84 4
d237 4
@


1.13
log
@Double Precision.
@
text
@d63 1
a63 1
      void setElem (WitPeriod thePer, double theDbl);
d84 4
a87 3
      void convCopyInto (WitTVec <float> &)  const;
      void convCopyInto (WitTVec <double> &) const;
      void convCopyInto (float *)            const;
d166 10
d234 4
a237 3
      void convCopyInto (WitTVec <float> &)  const;
      void convCopyInto (WitTVec <double> &) const;
      void convCopyInto (float *)            const;
@


1.12
log
@Double Precision.
@
text
@d71 8
a78 19
      void copyFltTVec (const WitTVec <float> & theFltTVec);
         //
         // Copies the elements of theFltTVec into the corresponding
         // elements of this ModeRV.

      void copyDblTVec (const WitTVec <double> & theDblTVec);
         //
         // Copies the elements of theDblTVec into the corresponding
         // elements of this ModeRV.

      void copyDblFlexVec (const WitFlexVec <double> & theDblFlexVec);
         //
         // Copies the elements of theDblFlexVec into the corresponding
         // elements of this ModeRV.

      void copyFltCVec (const float * theFltCVec);
         //
         // Copies the elements of theFltCVec into the corresponding
         // elements of this ModeRV.
d84 7
a90 11
      void copyIntoFltTVec (WitTVec <float> & theFltTVec) const;
         //
         // Copies the elements of this ModeRV into theFltTVec.

      void copyIntoDblTVec (WitTVec <double> & theDblTVec) const;
         //
         // Copies the elements of this ModeRV into theDblTVec.

      void copyIntoFltCVec (float * theFltCVec) const;
         //
         // Copies the elements of this ModeRV into theFltCVec.
d210 8
a217 19
      void copyFltTVec (const WitTVec <float> & theFltTVec);
         //
         // Copies the elements of theFltTVec into the corresponding
         // elements of this FixedRV.

      void copyDblTVec (const WitTVec <double> & theDblTVec);
         //
         // Copies the elements of theDblTVec into the corresponding
         // elements of this FixedRV.

      void copyDblFlexVec (const WitFlexVec <double> & theDblFlexVec);
         //
         // Copies the elements of theDblFlexVec into the corresponding
         // elements of this FixedRV.

      void copyFltCVec (const float * theFltCVec);
         //
         // Copies the elements of theFltCVec into the corresponding
         // elements of this FixedRV.
d223 7
a229 11
      void copyIntoFltTVec (WitTVec <float> & theFltTVec) const;
         //
         // Copies the elements of this FixedRV into theFltTVec.

      void copyIntoDblTVec (WitTVec <double> & theDblTVec) const;
         //
         // Copies the elements of this FixedRV into theDblTVec.

      void copyIntoFltCVec (float * theFltCVec) const;
         //
         // Copies the elements of this FixedRV into theFltCVec.
@


1.11
log
@Double Precision.
@
text
@d308 1
a308 1
   return doubleFromFloat (myFltFlexVec_[thePer]);
d315 1
a315 1
   myFltFlexVec_.elemRef (thePer) = floatFromDouble (theDbl);
@


1.10
log
@Double Precision.
@
text
@d63 4
d81 5
d217 4
d235 5
d309 7
@


1.9
log
@Double Precision.
@
text
@d59 3
a61 7
      inline double operator [] (WitPeriod thePer) const
         {
         return
            doubleMode_?
               myDblIR ()[thePer]:
               myFltIR ()[thePer];
         }
d159 12
d204 3
a206 4
      inline double operator [] (WitPeriod thePer) const
         {
         return doubleFromFloat (myFltFlexVec_[thePer]);
         }
d283 9
@


1.8
log
@Double Precision.
@
text
@d71 1
a71 1
      void copyIntoFltTVec (WitTVec <float> & theFltTVec) const;
d73 2
a74 1
         // Copies the elements of this ModeRV into theFltTVec.
d76 1
a76 1
      void copyIntoDblTVec (WitTVec <double> & theDblTVec) const;
d78 2
a79 1
         // Copies the elements of this ModeRV into theDblTVec.
d86 12
d106 4
d205 1
a205 1
      void copyIntoFltTVec (WitTVec <float> & theFltTVec) const;
d207 2
a208 1
         // Copies the elements of this FixedRV into theFltTVec.
d210 1
a210 1
      void copyIntoDblTVec (WitTVec <double> & theDblTVec) const;
d212 2
a213 1
         // Copies the elements of this FixedRV into theDblTVec.
d220 12
d239 4
@


1.7
log
@Double Precision.
@
text
@d67 4
d75 4
d88 4
d180 1
a180 1
         return doubleFromFloat (myFlexVec_[thePer]);
d183 4
d191 4
d204 4
d236 1
a236 1
      WitFlexVec <float> myFlexVec_;
@


1.6
log
@Double Precision.
@
text
@d16 1
a16 1
// Contains the declaration of the following:
d18 2
a19 3
//    typedef RealVec
//    class   ModeRV
//    class   FixedRV
a24 16
// Typedef RealVec.
//------------------------------------------------------------------------------

#define Use_ModeRV 0

#if ModeRV

typedef class WitModeRV  WitRealVec;

#else

typedef class WitFixedRV WitRealVec;

#endif

//------------------------------------------------------------------------------
d31 2
d67 4
d138 2
d170 4
@


1.5
log
@Double Precision.
@
text
@d16 5
a20 1
// Contains the declaration of class RealVec.
d26 17
a42 1
// Class RealVec
d44 1
a44 1
// "Real Vector"
d50 1
a50 1
class WitRealVec
d62 1
a62 1
      WitRealVec (WitProblem *, double initValue);
d68 1
a68 1
      ~WitRealVec ();
d85 1
a85 1
         // elements of this RealVec.
d89 1
a89 1
         // Copies the elements of this RealVec into theFltCVec.
d127 2
d140 80
a219 1
         // The internal representation of this RealVec.
@


1.4
log
@Double Precision.
@
text
@d54 17
d93 13
a105 1
      noCopyCtorAssign (WitRealVec);
@


1.3
log
@Double Precision.
@
text
@d54 2
d60 5
d74 1
a74 1
         // args, appropriate to the value of Session::doubleMode ().
d81 5
@


1.2
log
@Double Precision.
@
text
@d16 1
a16 1
// Contains the declaration of class Wit::RealVec.
d22 1
a22 1
// Class Wit::RealVec
d30 1
a30 4
namespace Wit
{

class RealVec
d42 1
a42 1
      RealVec (WitProblem *, double initValue);
d48 1
a48 1
      ~RealVec ();
d64 1
a64 1
      static RealVecIR & newRealVecIR (WitProblem *, double initValue);
d69 1
a69 1
      noCopyCtorAssign (RealVec);
d75 1
a75 1
      RealVecIR & myIR_;
a78 3

// Leaving namespace Wit.
}   
@


1.1
log
@Double Precision.
@
text
@d27 1
a27 2
// as a FlexVec <double> in double mode, depending on the value of
// Session::doubleMode ().
d30 3
d82 3
@

