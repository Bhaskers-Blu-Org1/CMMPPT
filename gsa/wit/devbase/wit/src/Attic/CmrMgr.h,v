head	1.27;
access;
symbols
	EndRw-branch:1.26.0.4
	Root-of-EndRw:1.26
	rwToStl:1.26.0.2
	latest_sce_3_10_20010924:1.20.0.2
	sce_3_10_20010924:1.20
	latest_sce_3_00_20010601:1.9.0.2
	sce_3_00_20010601:1.9;
locks; strict;
comment	@ * @;


1.27
date	2003.03.03.23.26.39;	author rjw;	state dead;
branches;
next	1.26;

1.26
date	2002.09.26.19.05.25;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.07.02.21.53.02;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2002.07.02.19.20.56;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.14.15.05.46;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.13.19.27.18;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2001.12.19.16.17.09;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.30.20.29.22;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.28.20.30.26;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.24.22.03.19;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.22.20.41.48;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.12.19.58.24;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.07.12.17.57.00;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.06.23.36.00;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.14.17.41.53;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.11.19.29.09;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.08.18.00.26;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.01.19.23.32;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.30.21.16.48;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.29.22.11.25;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.25.22.59.12;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.25.14.53.22;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.17.15.11.13;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.10.22.31.11;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.30.21.29.40;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.26.21.25.44;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.25.20.54.34;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.26
log
@Began implementation of multi-level lot sizes.
@
text
@@


1.25
log
@Continued implementation of Single-Source.
@
text
@a0 134
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef CmrMgrH
#define CmrMgrH

//------------------------------------------------------------------------------
// Header file: "CmrMgr.h"
//
// Contains the declaration of class CmrMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class CmrMgr
//
// The interface to the consumption multi-route subsystem.
// This class operates as a wrapper for template class MrMgr <Cmr>.
//
// Implemented in ConsMR.C.
//------------------------------------------------------------------------------

class WitCmrMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCmrMgr ();

      //------------------------------------------------------------------------
      // Wrappers for myMrMgr_.
      //------------------------------------------------------------------------

      WitConsEntry * selConsEntry (WitBomEntry * theBomEnt, WitPeriod execPer);

      void modifyRouting (WitConsEntPerStack & theConsEntPers);

      void findExpConsEnts (
            WitBomEntry *     theBomEnt, 
            WitPeriod         execPer,
            WitConsEntStack & theConsEnts);

      WitBoolean selIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer);

      void startSplitExp (
            WitBomEntry * theBomEnt, 
            WitPeriod     execPer,
            double        execVolVal);

      WitBoolean findNextSplit (
            WitConsEntry * & theConsEnt, 
            double &         splitExpVol);
 
      void getCandConsEnts (
            WitBomEntry *     theBomEnt,
            WitConsEntStack & theConsEnts);

      WitBoolean valid (WitConsEntry * theConsEnt, WitPeriod thePer);
         //
         // Returns TRUE, iff theConsEntry is currently valid for selection in
         // thePer.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void recExpConsEntSS (
            WitConsEntry * theConsEnt, 
            WitPeriod      execPer, 
            double         deltaExecVol);
         //
         // Records the fact deltaExecVol units were exploded thru theConsEnt in
         // execPer.

      void recExpBomEntSS (
            WitBomEntry * theBomsEnt, 
            WitPeriod     execPer, 
            double        deltaExecVol);
         //
         // Records the fact deltaExecVol units were exploded thru theBomEnt in
         // execPer.

      void printHasAlt ();
         //
         // Prints those MrPts for which hasAlt () is TRUE.

      WitSelMgr * mySelMgr ();

      WitSelPt * mySelPt (WitBomEntry * theBomEnt, WitPeriod thePer);
         //
         // Returns the SelPt for CMR at theBomEnt and thePer.

      void select (WitConsEntry * theConsEnt, WitPeriod execPer);
         //
         // Causes theConsEnt to be selected by its BomEntry in execPer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitCmrMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrMgr <WitBomEntry, WitConsEntry> * myMrMgr_;
         //
         // The MrMgr <Cmr> that this PmrMgr wraps.
   };

#endif
@


1.24
log
@Continued implementation of Single-Source.
@
text
@d74 9
a115 12

      void getCandConsEnts (
            WitBomEntry *     theBomEnt,
            WitConsEntStack & theConsEnts);
         //
         // Sets theConsEnts to be the ordered list of candidate ConsEntries for
         // theBomEnt.

      WitBoolean valid (WitConsEntry * theConsEnt, WitPeriod thePer);
         //
         // Returns TRUE, iff theConsEntry is currently valid for selection in
         // thePer.
@


1.23
log
@Continued implementation of sel-split for pen-exec.
@
text
@d104 16
@


1.22
log
@Continued implementation of sel-split for pen-exec.
@
text
@a73 5
      void setPrevSel (
            WitConsEntry * theConsEnt, 
            WitPeriod      execPer,
            WitBoolean     theVal);

a102 9

      static WitBoolean getCmrCoords (
            WitSelPt *      theSelPt, 
            WitBomEntry * & theBomEnt, 
            WitPeriod &     execPer);
         //
         // If theSetPt is actually an MrPt <Cmr>, theBomEnt and execPer are set
         // to the corresponding BomEntry and Period, and TRUE is returned;
         // otherwise FALSE is returned.
@


1.21
log
@Initial implementation of selection splitting for multi-route.
@
text
@d74 5
d104 13
@


1.20
log
@Refactoring for constrained stock reallocation.
@
text
@d86 8
@


1.19
log
@Refactoring for constrained stock reallocation.
@
text
@d88 1
a88 1
         // Prints those MrSelPts for which hasAlt () is TRUE.
@


1.18
log
@Refactoring for constrained stock reallocation.
@
text
@d19 1
a19 1
#include <MrMgr.h>
d25 1
a25 6
//
// Class Hierarchy:
//
// SelMgr
//    MrMgr <Cmr>
//       CmrMgr       [private]
d30 1
a30 1
class WitCmrMgr: private WitMrMgr <Cmr>
d51 1
a51 1
      // Wrappers for template class MrMgr <Cmr>.
d90 1
a90 4
      inline WitSelMgr * mySelMgr ()
         {
         return this;
         }
d99 8
@


1.17
log
@Refactoring for constrained stock reallocation.
@
text
@a105 12
      virtual void setUpDerivedSS ();
         //
         // Override from class SelMgr.

      virtual void postCommitSS ();
         //
         // Override from class SelMgr.

      virtual void adjustSplitBound (WitConsEntry *, WitPeriod, double &);
         //
         // Override from class MrMgr <Cmr>.

a106 12

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDblSpSched (WitConsEntry) totExecVol_;
         //
         // Valid only in sel-split mode.
         // totExecVol_ (theConsEnt, execPer) is the total execVol that has been
         // exploded thru theConsEnt in execPer during the current commit. 
         // totExecVol_ (theConsEnt) is only valid if theConsEnt corresponds to
         // a multi-choice MrSelSite.
@


1.16
log
@Refactoring.
@
text
@d29 1
a29 1
//    MrMgr <CmrArgs>
d35 1
a35 1
class WitCmrMgr: private WitMrMgr <CmrArgs>
d56 1
a56 1
      // Wrappers for template class MrMgr <CmrArgs>.
d116 1
a116 1
         // Override from class MrMgr <CmrArgs>.
@


1.15
log
@Templatized consumption multi-route.
@
text
@d32 1
a32 1
// Implemented in MultiRoute.C.
@


1.14
log
@Replaced Mapping (*, WitTlObjPtr) with PtrMap <*, *>.
@
text
@d19 1
a19 3
#include <SelMgr.h>
#include <PtrMap.h>
#include <DblSpSch.h>
d24 1
a24 4
// "Consumption Multi-Route Manager"
// Interface to the consumption multi-route subsystem.
// The consumption multi-route subsystem is responsible for maintaining the Cons
// entry selections for multi-route mode.
d29 2
a30 1
//    CmrMgr
d32 1
a32 1
// Implemented in ConsMR.C.
d35 1
a35 1
class WitCmrMgr: public WitSelMgr
d40 4
d56 1
a56 1
      // Other public member functions.
a59 26
         //
         // selConsEntry (theBomEnt, execPer) is the currently selected
         // ConsEntry to be used when exploding theBomEnt in execPer. It may be
         // either theBomEnt itself or one of the SubEntries associated with 
         // it. Invalid, if theBomEnt is not in effect in execPer.

      //------------------------------------------------------------------------
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual WitSelPt *   mySelPt            (WitBopEntry *,
                                               WitConsEntry *,
                                               WitPeriod,
                                               WitPeriod,
                                               WitBoolean &);
      virtual WitBoolean   validForExecBounds ();
      virtual const char * selCaseName        ();
      virtual void         prtSelCandID       (WitTlObj *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void printHasAlt ();
         //
         // Prints those CmrSelPts for which hasAlt () is TRUE.
a61 2
         //
         // Modifies the current routing as indicated by theConsEntPers.
d64 1
a64 1
            WitBomEntry *     theBomEnt,
a66 11
         //
         // Sets theConsEnts to be the set of cons entries currently
         // under consideration for explosion at theBomEnt in execPer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      virtual WitBoolean selSplitNeeded ();
         //
         // Override from class SelMgr.
a68 3
         //
         // Returns TRUE, iff there is a split routing selection for exploding
         // thru theBomEnt in execPer. Valid only in sel-split mode.
a73 2
         //
         // See SelMgr.
d75 1
a75 1
      inline WitBoolean findNextSplit (
d77 1
a77 6
            double &         splitExecVol)
         {
         witAssert (selSplit ());

         return findNextSplitAbs ((WitTlObj * &) theConsEnt, splitExecVol);
         }
d79 3
a81 7
      void adjustSplitBound (
            WitConsEntry * theConsEnt, 
            WitPeriod      execPer, 
            double &       splitBound);
         //
         // Adjusts splitBound as appropriate when performing a consumption
         // multi-route split explosion through theConsEnt in execPer.
d91 1
a91 1
      virtual void postCommitSS ();
d93 1
a93 1
         // Override from class SelMgr.
d95 4
a98 3
      virtual void postSplitCommit ();
         //
         // Override from class SelMgr.
d106 3
a108 1
      noCopyCtorAssign (WitCmrMgr);
d110 1
a110 1
      virtual void setUpDerivedSS ();
d114 3
a116 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d118 1
a118 4
      WitPtrMap <WitBomEntry, WitCmrBomEnt> myCmrBomEntFor_;
            //
            // myCmrBomEntFor_ (theBomEnt) is this CmrMgr's CmrBomEnt for
            // theBomEnt.
d121 1
a121 1
      // Selection splitting data.
d129 2
a130 2
         // totExecVol_ (theConsEnt) is only valid if theConsEnt
         // corresponds to a multi-choice CmrBomEnt.
@


1.13
log
@Created class SelCand and classes derived from it.
@
text
@d20 1
a20 1
#include <Mapping.h>
a159 7
      inline WitCmrBomEnt * & myCmrBomEnt (WitBomEntry * theBomEnt)
            //
            // myCmrBomEnt (theBomEnt) is this CmrMgr's CmrBomEnt for theBomEnt.
         {
         return (WitCmrBomEnt * &) myCmrBomEntTl_ (theBomEnt);
         }

d168 4
a171 3
      WitMapping (WitBomEntry, WitTlObjPtr) myCmrBomEntTl_;
         //
         // Data for myCmrBomEnt (BomEntry *).
@


1.12
log
@Refactoring.
@
text
@d160 1
a160 1
      inline WitMrBomEnt * & myMrBomEnt (WitBomEntry * theBomEnt)
d162 1
a162 1
            // myMrBomEnt (theBomEnt) is this CmrMgr's MrBomEnt for theBomEnt.
d164 1
a164 1
         return (WitMrBomEnt * &) myMrBomEntTl_ (theBomEnt);
d175 1
a175 1
      WitMapping (WitBomEntry, WitTlObjPtr) myMrBomEntTl_;
d177 1
a177 1
         // Data for myMrBomEnt (BomEntry *).
d189 1
a189 1
         // corresponds to a multi-choice MrBomEnt.
@


1.11
log
@Refactoring.
@
text
@a86 4
      void printMultiChoices ();
         //
         // Prints those MrBomEnts for which multiChoice_ is TRUE.

@


1.10
log
@Continued development of selection splitting for multi=exec.
@
text
@d190 2
a191 2
         // totExecVol_ (theConsEnt, thePer) is the total execVol that has been 
         // exploded thru theConsEnt in thePer during the current commit. 
@


1.9
log
@Refactoring for sel-split for multi-exec.
@
text
@d66 3
a68 8
      virtual WitSelPt * mySelPt (
            WitBopEntry *,
            WitConsEntry *,
            WitPeriod,
            WitPeriod,
            WitBoolean &);
         //
         // Override from class SelMgr.
d70 12
a81 3
      virtual WitBoolean validForExecBounds ();
         //
         // Override from class SelMgr.
@


1.8
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d125 1
a125 1
         return findNextSplitAbs (asaTlObjRef (theConsEnt), splitExecVol);
a169 15

      inline static WitConsEntry * asaConsEntry (WitTlObj * theTlObj)
         {
         return (WitConsEntry *) theTlObj;
         }

      inline static WitTlObj * asaTlObj (WitConsEntry * theConsEnt)
         {
         return (WitTlObj *) theConsEnt;
         }

      inline static WitTlObj * & asaTlObjRef (WitConsEntry * & theConsEnt)
         {
         return (WitTlObj * &) theConsEnt;
         }
@


1.7
log
@Various refactorings for sel-split for multi-exec.
@
text
@d128 8
a170 4
      virtual void adjustSplitBound (WitTlObj *, double &);
         //
         // Override from class SelMgr.

a204 5

      WitPeriod splitExecPer_;
         //
         // The exec period for the currently active split explosion.
         // Undefined, if split explosion is not currently active.
@


1.6
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@a166 4
      virtual void prtSplitExp (WitTlObj *);
         //
         // Override from class SelMgr.

@


1.5
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d59 1
a59 1
      WitConsEntry * selConsEntry (WitBomEntry * theBomEnt, WitPeriod thePer);
d61 2
a62 2
         // selConsEntry (theBomEnt, thePer) is the currently selected
         // ConsEntry to be used when exploding theBomEnt in thePer. It may be
d64 1
a64 1
         // it. Invalid, if theBomEnt is not in effect in thePer.
d115 1
a115 1
            double        theExecVol);
d163 1
a163 1
      virtual void adjustSplitBound (WitTl *, double &);
d167 1
a167 1
      virtual void prtSelSplit (WitTl *);
d171 1
a171 1
      inline static WitConsEntry * asaConsEntry (WitTl * theTlObj)
d176 1
a176 1
      inline static WitTl * asaTlObj (WitConsEntry * theConsEnt)
d178 1
a178 1
         return (WitTl *) theConsEnt;
d181 1
a181 1
      inline static WitTl * & asaTlObjRef (WitConsEntry * & theConsEnt)
d183 1
a183 1
         return (WitTl * &) theConsEnt;
d190 1
a190 1
      WitMapping (WitBomEntry, WitTlPtr) myMrBomEntTl_;
a203 9
         // corresponds to a multi-choice MrBomEnt.

      WitStackSpSched (WitBomEntry) splitSched_;
         //
         // Valid only in sel-split mode.
         // splitSched_ (theBomEnt, execPer) is the ordered list of
         // (ConsEntry, splitBound) pairs to be used when exploding at
         // myBomEntry_ in execPer. 
         // splitSched_ (theBomEnt, execPer) is only valid if theBomEnt
@


1.4
log
@Renamed AltPt classes to SelPt classes.
@
text
@d103 4
d159 1
a159 1
      void setupSelSplit ();
d161 1
a161 1
         // Sets up data for selection splitting.
d206 1
a206 1
      WitStackSpSched (WitBomEntry, WitTl) splitSched_;
@


1.3
log
@Fixed uninitialized memory bugs.
Refactoring for selection splitting.
@
text
@d66 1
a66 1
      virtual WitAltPt * myAltPt (
d81 1
a81 1
         // Prints those PmrAltPts for which hasAlt () is TRUE.
@


1.2
log
@Refactoring for selection splitting.
@
text
@d121 1
a121 1
         return findNextSplitAbs (asaTlPtrRef (theConsEnt), splitExecVol);
d172 1
a172 1
      inline static WitTl * asaTlPtr (WitConsEntry * theConsEnt)
d177 1
a177 1
      inline static WitTl * & asaTlPtrRef (WitConsEntry * & theConsEnt)
@


1.1
log
@Refactoring for selection splitting.
@
text
@d36 1
a36 1
// Implemented in MultiRt.C.
d81 1
a81 1
         // Prints those MrAltPts for which hasAlt () is TRUE.
d85 1
a85 1
         // Prints those MrComps for which multiChoice_ is TRUE.
@

