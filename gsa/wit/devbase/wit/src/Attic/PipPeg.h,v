head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2003.12.15.19.35.59;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2003.12.12.21.20.15;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.29.00.15.50;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.28.22.38.59;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.22.22.11.15;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.21.20.45.42;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.21.19.28.45;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Continued implementation of PIP.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipPegH
#define PipPegH

//------------------------------------------------------------------------------
// Header file: "PipPeg.h"
//
// Contains the declaration of class template Pip::Pegging <SrcComp>.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class template Pip::Pegging <SrcComp>
//
// A list of Src <SrcComp> instances and corresponding pegVols.
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

namespace WitPip
{

template <typename SrcComp> 
      class Pegging
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      Pegging (SrcMgr <SrcComp> * theSrcMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~Pegging ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void append (Src <SrcComp> * theSrc, double pegVol);
         //
         // Appends (theSrc, pegVol) to this Pegging.

      void append (SrcComp * theSrcComp, WitPeriod thePer, double pegVol);
         //
         // Appends (theSrcComp, thePer, pegVol) to this Pegging.

      void clear ();
         //
         // Clears this Pegging.

      void consolidate ();
         //
         // Merges the each set of PegPairs in this Pegging that share the same
         // ScrComp into a single PegPair.

      void getPegPairs (WitPairStack <Src <SrcComp>, double> & thePegPairs);
         //
         // Sets thePegPairs to the pegging list in forward order.

      bool isEmpty ();
         //
         // Returns true, iff this Pegging is empty.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (SrcMgr <SrcComp> *, mySrcMgr)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (Pegging);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPairStack <Src <SrcComp>, double> myPegPairs_;
         //
         // The pegging list, stored in reverse order.

      SrcMgr <SrcComp> * const mySrcMgr_;
         //
         // The SrcMgr for this Pegging.
   };

// Leaving namespace Pip.
}   

#endif
@


1.9
log
@Continued implementation of PIP.
@
text
@@


1.8
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class template Pip::Peg <SrcComp>.
d22 1
a22 3
// Class template Pip::Peg <SrcComp>
//
// "Post-Implosion Pegging Pegging"
d33 1
a33 1
      class Peg
d41 1
a41 1
      Peg (SrcMgr <SrcComp> * theSrcMgr);
d47 1
a47 1
      ~Peg ();
d55 1
a55 1
         // Appends (theSrc, pegVol) to this Peg.
d59 1
a59 1
         // Appends (theSrcComp, thePer, pegVol) to this Peg.
d63 1
a63 1
         // Clears this Peg.
d67 1
a67 1
         // Merges the each set of PegPairs in this Peg that share the same
d76 1
a76 1
         // Returns true, iff this Peg is empty.
d90 1
a90 1
      noCopyCtorAssign (Peg);
d102 1
a102 1
         // The SrcMgr for this Peg.
@


1.7
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class template PipPeg <SrcComp>.
d22 1
a22 1
// Class template PIP::PipPeg <SrcComp>
d26 1
a26 1
// A list of PipSrc <SrcComp> instances and corresponding pegVols.
d31 1
a31 1
namespace WitPIP
d35 1
a35 1
      class WitPipPeg
d43 1
a43 1
      WitPipPeg (WitPipSrcMgr <SrcComp> * thePipSrcMgr);
d49 1
a49 1
      ~WitPipPeg ();
d55 1
a55 1
      void append (WitPipSrc <SrcComp> * thePipSrc, double pegVol);
d57 1
a57 1
         // Appends (thePipSrc, pegVol) to this PipPeg.
d61 1
a61 1
         // Appends (theSrcComp, thePer, pegVol) to this PipPeg.
d65 1
a65 1
         // Clears this PipPeg.
d69 1
a69 1
         // Merges the each set of PegPairs in this PipPeg that share the same
d72 1
a72 2
      void getPegPairs (
            WitPairStack <WitPipSrc <SrcComp>, double> & thePegPairs);
d78 1
a78 1
         // Returns true, iff this PipPeg is empty.
d84 1
a84 1
      accessFunc (WitPipSrcMgr <SrcComp> *, myPipSrcMgr)
d92 1
a92 1
      noCopyCtorAssign (WitPipPeg);
d98 1
a98 1
      WitPairStack <WitPipSrc <SrcComp>, double> myPegPairs_;
d102 1
a102 1
      WitPipSrcMgr <SrcComp> * const myPipSrcMgr_;
d104 1
a104 1
         // The PipSrcMgr for this PipPeg.
d107 1
a107 1
// Leaving namespace PIP
@


1.6
log
@Continued implementation of PIP.
@
text
@d22 1
a22 1
// Class template PipPeg <SrcComp>
d31 3
d107 3
@


1.5
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d32 1
a32 1
      class WitPipPeg: public WitUtil
@


1.4
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d64 1
a64 1
      void consolidate (WitSchedule <SrcComp, double> & thePegSched);
a67 3
         // Uses thePegSched as a working Schedule.
         // Upon entry,  thePegSched is assumed  to be all 0's.
         // Upon return, thePegSched is restored to    all 0's.
d77 6
@


1.3
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d77 4
@


1.2
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d19 1
a19 1
#include <Assoc.h>
d32 1
a32 1
      class WitPipPeg: public WitProbAssoc
d40 1
a40 1
      WitPipPeg (WitProblem *);
d54 5
a58 1
         // Append (thePipSrc, pegVol) to this PipPeg.
d92 4
@


1.1
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d60 1
a60 3
      void mergeWith (
            WitPipPeg   <SrcComp> *         thePipPeg,
            WitSchedule <SrcComp, double> & workPegSched);
d62 5
a66 4
         // Merges thePipPeg into this PipPeg while clearing thePipPeg.
         // Uses workPegSched as a working Schedule.
         // Upon entry,  workPegSched is assumed  to be all 0's.
         // Upon return, workPegSched is restored to    all 0's.
a77 11

      void loadIntoSched (WitSchedule <SrcComp, double> & thePegSched);
         //
         // Loads this PipPeg into thePegSched.

      void loadIntoPairs (
            WitPairStack <WitPipSrc <SrcComp>, double> & thePegPairs,
            WitSchedule  <           SrcComp,  double> & thePegSched);
         //
         // Loads the elements of thePegSched corresponding to this PipPeg into
         // thePegPairs, while clearing this PipPeg and thePegSched.
@

