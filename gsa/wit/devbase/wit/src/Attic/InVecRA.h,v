head	1.16;
access;
symbols
	sce_4_05_20040511:1.15;
locks; strict;
comment	@ * @;


1.16
date	2005.02.24.23.23.56;	author rjw;	state dead;
branches;
next	1.15;

1.15
date	2004.04.19.22.16.28;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.19.18.25.17;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.14.21.25.35;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.06.15.42.16;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.29.23.21.28;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.26.16.27.03;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.26.16.07.23;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.25.23.28.07;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.24.22.21.31;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.24.18.58.33;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.24.17.03.32;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.24.16.50.34;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.23.21.37.45;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.19.22.00.53;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.18.16.49.51;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Vector PropRt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef InVecRAH
#define InVecRAH

//------------------------------------------------------------------------------
// Header file: "InVecRA.h"
//
// Contains the declaration of class InVecRA.
//------------------------------------------------------------------------------

#include <RealArg.h>

//------------------------------------------------------------------------------
// Class InVecRA
//
// "Input Vector Real Argument"
//
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is a vector real-valued variable passed in from the
// application program. Specifically, the underlying argument is of one of the
// following types:
//
//    const float  * const
//    const double * const
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const InVecRA &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type "const float * const" and "const double * const". These are the
//       "underlying arguments".
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitInVecRA: public WitRealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitInVecRA (const float *);
         //
         // Conversion from a const float * underlying argument.

      WitInVecRA (const double *);
         //
         // Conversion from a const double * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitInVecRA ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyInto (WitDblFlexVec & theDblFlexVec) const;
         //
         // Copies the elements of this InVecRA into the corresponding elements
         // of theDblFlexVec.

      inline double operator [] (int theIdx) const;
         //
         // Returns the element of this InVecRA indexed by theIdx.

      operator const void * () const;
         //
         // Returns the underlying argument, converted to a const void *.

      void issueSetDblVecMsg (WitAttr theAttr, WitApiCall & theApiCall) const;
         //
         // Issues the message for setting a double vector attribute to the
         // underlying argument.
         // theAttr is the name of the attribute.
         // theApiCall issues the message.

      void issueBoundVecMsg (
            const WitBoundSet * theBoundSet,
            WitMsgFragID        theFragID,
            WitApiCall &        theApiCall)
            const;
         //
         // Issues the message for setting one of the vectors of theBoundSet to
         // theFragID, where theFragID indicates a message fragment indicating
         // the vector being set.
         // theApiCall issues the message.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline const float  * myFltCVec () const;
      inline const double * myDblCVec () const;
         //
         // These functions return the underlying argument.

      noCopyCtorAssign (WitInVecRA);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const float * const myFltCVec_;
         //
         // The underlying argument, if it is a const float *.
         // Otherwise NULL.

      const double * const myDblCVec_;
         //
         // The underlying argument, if it is a const double *.
         // Otherwise NULL.
   };

//------------------------------------------------------------------------------
// Implementation of inlines.
//------------------------------------------------------------------------------

inline double WitInVecRA::operator [] (int theIdx) const
   {
   return
      floatCase ()?
         dblFromFlt (myFltCVec ()[theIdx]):
                     myDblCVec ()[theIdx];
   }

//------------------------------------------------------------------------------

inline const float * WitInVecRA::myFltCVec () const
   {
   witAssert (floatCase ());

   return (myFltCVec_);
   }

//------------------------------------------------------------------------------

inline const double * WitInVecRA::myDblCVec () const
   {
   witAssert (doubleCase ());

   return (myDblCVec_);
   }

//------------------------------------------------------------------------------

#endif
@


1.15
log
@Double Precision.
@
text
@@


1.14
log
@Double Precision.
@
text
@d74 1
a74 2
      void copyInto (WitTVec <float> &) const;
      void copyInto (WitDblFlexVec &)   const;
d76 2
a77 2
         // Each of these functions copies the elements of this InVecRA into the
         // corresponding elements of the argument vector.
@


1.13
log
@Double Precision.
@
text
@d88 18
@


1.12
log
@Double Precision.
@
text
@d74 2
a75 2
      void convCopyInto (WitTVec <float> &) const;
      void convCopyInto (WitDblFlexVec &)   const;
a76 1
         // "Convert-Copy Into"
@


1.11
log
@Double Precision.
@
text
@d85 1
a85 1
      const WitTlObj * asaTlPtr () const;
d87 1
a87 1
         // Returns the underlying argument, converted to a TlObj ptr.
@


1.10
log
@Double Precision.
@
text
@d85 1
a85 1
      const WitTlObj * myUnderArgAsTlPtr () const;
@


1.9
log
@Double Precision.
@
text
@d124 3
a126 3
      doubleCase ()?
                     myDblCVec ()[theIdx]:
         dblFromFlt (myFltCVec ()[theIdx]);
@


1.8
log
@Double Precision.
@
text
@d85 3
a87 7
      inline const WitTlObj * myUnderArgAsTlPtr () const
         {
         return 
            doubleCase ()?
               toConstTlObj_cast (myDblCVec ()):
               toConstTlObj_cast (myFltCVec ());
         }
d95 4
a98 2
      accessNonNull (const float *,  myFltCVec)
      accessNonNull (const double *, myDblCVec)
d127 18
@


1.7
log
@Double Precision.
@
text
@d36 1
a36 1
//       InVecRA.
@


1.6
log
@Double Precision.
@
text
@d74 2
a75 2
      void convCopyInto (WitTVec    <float>  &) const;
      void convCopyInto (WitFlexVec <double> &) const;
@


1.5
log
@Double Precision.
@
text
@d89 2
a90 2
               toTlObj_cast (myDblCVec ()):
               toTlObj_cast (myFltCVec ());
@


1.4
log
@Double Precision.
@
text
@a63 4
      WitInVecRA (const WitInVecRA &);
         //
         // Copy ctor.

d102 1
a102 3
      void operator = (const WitInVecRA &);
         //
         // Not implemented; assignment is not allowed.
@


1.3
log
@Double Precision.
@
text
@d78 1
d82 2
a83 2
         // Copies the elements of this InVecRA into the corresponding elements
         // of the argument FlexVec.
d88 8
@


1.2
log
@Double Precision.
@
text
@d78 1
a78 1
      void convCopyInto (float *, int);
d81 2
a82 8
         // Each of these functions copies the elements of this InVecRA
         // into the corresponding elements of the argument vector.
         // If present, the 2nd arg indicates the length of the argument vector.

      bool hasSingleValue (int nElems);
         //
         // Returns true, iff all the elements of this InVecRA have the same
         // value. nElems is the # of elements to be considered.
@


1.1
log
@Double Precision.
@
text
@d31 2
a32 2
//    const float  *
//    const double *
d38 2
a39 2
//       type const float * and const double *. These are the "underlying 
//       arguments".
d74 20
d121 14
@

