head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2002.08.15.20.03.46;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2002.08.15.14.20.43;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.14.16.09.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.09.14.20.44;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.08.17.33.33;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.07.20.12.55;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.02.17.03.36;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Continued implementation of opt implosion with OSL V3.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef Osl3MgrH
#define Osl3MgrH

//------------------------------------------------------------------------------
// Header file: "Osl3Mgr.h"
//
// Contains the declaration of class Osl3Mgr.
//------------------------------------------------------------------------------

#include <Util.h>

#if OSL_VERSION == 3

//------------------------------------------------------------------------------
// OSL Typedefs.
//------------------------------------------------------------------------------

typedef struct EKKContext EKKContext;
typedef struct EKKModel   EKKModel;

//------------------------------------------------------------------------------
// class OslMgr
//
// Responsible for all interactions with OSL Version 3.
//
// Implemented in Osl3MgrI.h.
//------------------------------------------------------------------------------

class WitOsl3Mgr: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOsl3Mgr (WitLpModel *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOsl3Mgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void solveLP ();
         //
         // Uses Osl to solve myLpModel.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void createOslModel ();
         //
         // Creates myOslModel_.

      void initContext ();
         //
         // Initializes the OSL context.

      void deleteOslModel ();
         //
         // Deletes myOslModel_.

      void passFixedModel ();
         //
         // Passes the fixed parts of the LP model to OSL.

      void passDimens ();
         //
         // Passes the dimensions to the LP to OSL.

      void passMatrix ();
         //
         // Passes the matrix to OSL.

      void setAsMax ();
         //
         // Specifies maximization to OSL.

      void passFlexibleModel ();
         //
         // Passes the flexible parts of the LP model to OSL.

      void passConLBs    (WitVector <double> &);
      void passConUBs    (WitVector <double> &);
      void passVarLBs    (WitVector <double> &);
      void passVarUBs    (WitVector <double> &);
      void passObjCoeffs (WitVector <double> &);
         //
         // These 5 functions pass the following 5 data items to OSL:
         //
         //    The lower bound           on each constraint.
         //    The upper bound           on each constraint.
         //    The lower bound           on each variable.
         //    The upper bound           on each variable.
         //    The objective coefficient on each variable.
         //
         // The Vector passed is a working vector.

      void prtMpsFile ();
         //
         // Prints an MPS file of the model.
         // For developers' use only.

      void solveByOslUnAcc ();
         //
         // Makes appropriate calls to OSL to solve the LP in unaccelerated
         // mode.

      void solveByOslAcc ();
         //
         // Makes appropriate calls to OSL to solve the LP in accelerated mode.

      void passInitSoln ();
         //
         // Copies the initial primal LP solution from myLpModel_ into OSL,
         // as needed.

      void scale ();
         //
         // Calls OSL's scale.

      void preSolve ();
         //
         // Calls OSL's preSolve.

      void crash ();
         //
         // Calls OSL's crash, as needed.

      void primalSimplex ();
         //
         // Calls OSL's primalSimplex.

      void postSolve ();
         //
         // Calls OSL's postSolve.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myLpModel_.

      void storeDualSoln ();
         //
         // Stores the dual solution in myLpModel_.

      void printSoln ();
         //
         // Has OSL print its solution.

      void checkProbStat ();
         //
         // Checks the value of OSL's IPROBSTAT variable and generates a
         // fatal error if it is anything but 0 (optimal).

      void checkRetPtr (const void * thePtr, const char * funcName);
         //
         // If thePtr == NULL, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      void checkRetVal (const char * funcName);
         //
         // If retVal_ != 0, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      noCopyCtorAssign (WitOsl3Mgr);

      //-----------------------------------------------------------------------
      // Other private member data.
      //-----------------------------------------------------------------------

      WitLpModel * const myLpModel_;
         //
         // The LpModel for this Osl3Mgr.

      WitOptImploder * const myOptImploder_;
         //
         // The OptImploder for this Osl3Mgr.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this Osl3Mgr.

      int retVal_;
         //
         // The integer value returned by some OSL functions, where
         // retVal_ != 0 indicates an error.

      static EKKContext * sharedOslContext_;
         //
         // The OSL Context to be used by all Osl3Mgrs in this program process,
         // or NULL. It's non-NULL, iff myOslModel_ is non-NULL for at least one
         // Osl3Mgr.

      FILE * oslLogFile_;
         //
         // The OSL log file for myOslModel_.

      EKKModel * myOslModel_;
         //
         // The OSL Model owned by this Osl3Mgr, or NULL.

      WitString presolveFileName_;
         //
         // The file name to be used by preSolve and postSolve.
   };

#endif

#endif
@


1.6
log
@Continued implementation of opt implosion with OSL V3.
@
text
@@


1.5
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d211 4
@


1.4
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d27 2
a28 1
typedef struct EKKModel EKKModel;
d58 1
a58 1
      void solve ();
d68 1
a68 1
      void startUpOsl ();
d70 1
a70 1
         // Sets up OSL for use by this Osl3Mgr.
d72 1
a72 1
      void shutDownOsl ();
d74 5
a78 2
         // Returns OSL to its initial state, so that it can be used by other
         // objects.
d121 1
a121 1
      void solveOslUnAcc ();
d123 1
a123 1
         // Makes appropriate calls to OSL to solve the LP in unaccelerated.
d126 4
d205 6
d213 1
a213 1
         // The OslModel owned by this Osl3Mgr, or NULL.
@


1.3
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d122 5
d139 1
a139 1
      void simplex ();
d141 1
a141 1
         // Calls OSL's simplex.
@


1.2
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d80 12
d112 5
d122 20
d146 8
d195 4
@


1.1
log
@Began implementation of optimizing implosion with OSL V3.
@
text
@d45 1
a45 1
      WitOsl3Mgr (WitOptImploder *);
d76 48
d130 5
a134 1
      WitOptImploder * myOptImploder_;
d141 5
@

