head	1.5;
access;
symbols
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2002.06.05.19.31.29;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.35;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.17;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.11;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.17;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.17;	author wit;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Continued implementation of single-source.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef AccFlagH
#define AccFlagH

//------------------------------------------------------------------------------
// Header file: "AccFlag.h"
//
// Contains the declaration of class AccFlag.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class AccFlag
// "Data Access Flag"
// A flag indicating the object, if any, whose data is currently being
// accessed by the owner.
// In non-DEBUG mode, the behavior of this class consists of inline no-ops.
//
// Implemented in Misc.C.
//------------------------------------------------------------------------------

class WitAccFlag: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAccFlag ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAccFlag ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

#if DEBUG_MODE

      void access (const void * theObject);
         //
         // Sets this AccFlag to indicate that theObject is being accessed by
         // the owner. Asserts that theObject is not NULL and no Component is
         // currently being accessed.

      void reset ();
         //
         // Sets this AccFlag to indicate that no Component is being
         // accessed by the owner.  Asserts that some Component was being
         // accessed.

      WitBoolean accessing (const void * theObject) const;
         //
         // Returns TRUE, iff the owner is currently accessing the data of
         // theObject.

#else

      inline void access (const void *)
         {
         }

      void reset ()
         {
         }

      WitBoolean accessing (const void *) const
         {
         return witTRUE;
         }

#endif

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAccFlag);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const void * accObject_;
         //
         // The Component currently being accessed by the owner, if any, else
         // NULL.
         // Always NULL, in non-DEBUG mode.
   };

#endif
@


1.4
log
@Refactoring for selection splitting.
@
text
@@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d93 1
a93 3
      copyCtorAndAssignment (WitAccFlag);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d19 1
a19 1
#include <typedefs.h>
d31 1
a31 1
class WitAccFlag
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
