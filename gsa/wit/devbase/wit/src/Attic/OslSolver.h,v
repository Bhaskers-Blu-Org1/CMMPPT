head	1.3;
access;
symbols
	latest_sce4_20_OSL:1.2.0.2
	sce_4_20_OSL:1.2
	sce_410_withVa:1.2
	sce_4_05_20040511:1.1
	sce_4_00_20040201:1.1;
locks; strict;
comment	@ * @;


1.3
date	2006.04.18.19.06.55;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2005.06.30.23.04.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.18.18.30.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed class OslSolver.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OslSolverH
#define OslSolverH

//------------------------------------------------------------------------------
// Header file: "OslSolver.h"
//
// Contains the declaration of class OslSolver.
//------------------------------------------------------------------------------

#include <OptSolver.h>
#include <Str.h>

//------------------------------------------------------------------------------
// OSL Typedefs.
//------------------------------------------------------------------------------

typedef struct EKKContext EKKContext;
typedef struct EKKModel   EKKModel;

//------------------------------------------------------------------------------
// class OslSolver
//
// Responsible for solving an OptModel by making direct calls to OSL.
//
// Class Hierarchy:
//
// ProbAssoc
//    OptSolver
//       OslSolver
//------------------------------------------------------------------------------

class WitOslSolver: public WitOptSolver
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOslSolver (WitOptModel *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOslSolver ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void solve ();
         //
         // Override from class OptSolver.

      void innerSolve ();
         //
         // Does the main work on solve ().

      void createOslModel ();
         //
         // Creates myOslModel_.

      void initContext ();
         //
         // Initializes the OSL context.

      void deleteOslModel ();
         //
         // Deletes myOslModel_.

      void passFixedModel ();
         //
         // Passes the fixed parts of the optimization model to OSL.

      void passDimens ();
         //
         // Passes the dimensions to the optimization to OSL.

      void passMatrix ();
         //
         // Passes the matrix to OSL.

      void setParams ();
         //
         // Sets for maximization and imaxfactor.

      void markIntVars ();
         //
         // Marks the integer variables as such.

      void passFlexibleModel ();
         //
         // Passes the flexible parts of the optimization model to OSL.

      void passConBounds (WitVector <double> &, WitVector <double> &);
         //
         // Passes the following data items to OSL:
         //
         //    The lower bound on each constraint.
         //    The upper bound on each constraint.
         //
         // The Vectors passed are working vectors.

      void passVarBounds (WitVector <double> &, WitVector <double> &);
         //
         // Passes the following data items to OSL:
         //
         //    The lower bound on each variable.
         //    The upper bound on each variable.
         //
         // The Vectors passed are working vectors.

      void passObjCoeffs (WitVector <double> &);
         //
         // Passes the following data item to OSL:
         //
         //    The objective coefficient on each variable.
         //
         // The Vector passed is a working vector.

      void prtMpsFile ();
         //
         // Prints an MPS file of the model.
         // For developers' use only.

      void solveMIP ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // a MIP.

      void solveLpUnAcc ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // an LP in unaccelerated mode.

      void solveLpAcc ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // an LP in accelerated mode.

      void passInitSoln ();
         //
         // Copies the initial primal optimization solution from myOptModel () 
         // into OSL, as needed.

      void scale ();
         //
         // Calls OSL's scale.

      void preSolve ();
         //
         // Calls OSL's preSolve.

      void defPresolveFileName ();
         //
         // Sets presolveFileName_ to a unique name for a temporary file to be
         // used as the presolve file.

      void crash ();
         //
         // Calls OSL's crash, as needed.

      void primalSimplex ();
         //
         // Calls OSL's primalSimplex.

      void postSolve ();
         //
         // Calls OSL's postSolve.

      void postSolveWithRec (const char * saveFile);
         //
         // Calls OSL's postSolve with recovery for the OSL postSolve bug.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptModel ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptModel ().

      void printSoln ();
         //
         // Has OSL print its solution.

      void checkProbStat ();
         //
         // Checks the value of OSL's IPROBSTAT variable and generates a
         // fatal error if it is anything but 0 (optimal).

      void checkRetPtr (const void * thePtr, const char * funcName);
         //
         // If thePtr == NULL, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      void checkRetVal (const char * funcName);
         //
         // If retVal_ != 0, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      noCopyCtorAssign (WitOslSolver);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      int retVal_;
         //
         // The integer value returned by some OSL functions, where
         // retVal_ != 0 indicates an error.

      static EKKContext * sharedOslContext_;
         //
         // The OSL Context to be used by all OslSolvers in this program
         // process, or NULL. It's non-NULL, iff myOslModel_ is non-NULL for at
         // least one OslSolver.

      EKKModel * myOslModel_;
         //
         // The OSL Model owned by this OslSolver, or NULL.

      WitString presolveFileName_;
         //
         // The file name to be used by preSolve and postSolve.
   };

#endif
@


1.2
log
@Minor change.
@
text
@@


1.1
log
@Continued implementation of opt with COIN.
@
text
@d220 1
a220 1
      //-----------------------------------------------------------------------
d222 1
a222 1
      //-----------------------------------------------------------------------
d231 3
a233 3
         // The OSL Context to be used by all OslSolvers in this program process,
         // or NULL. It's non-NULL, iff myOslModel_ is non-NULL for at least one
         // OslSolver.
@

