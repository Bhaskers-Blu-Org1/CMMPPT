head	1.11;
access;
symbols
	sce_410_withVa:1.7
	sce_4_05_20040511:1.6
	sce_4_00_20040201:1.6
	nextGenBranch:1.5.0.2
	nextGenRoot:1.5
	sce_3_30_20030627:1.5
	EndRw-branch:1.1.0.4
	Root-of-EndRw:1.1
	rwToStl:1.1.0.2;
locks; strict;
comment	@ * @;


1.11
date	2007.11.15.18.22.31;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2007.06.04.17.47.15;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.30.21.57.57;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2005.09.22.14.59.51;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.03.21.20.30;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.01.21.05.05;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.25.21.07.43;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.25.19.16.57;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.15.21.01.25;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.13.22.22.13;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.04.23.07.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RefH
#define RefH

//------------------------------------------------------------------------------
// Header file: "Ref.h"
//
// Contains the declaration of class template Ref <Elem>.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class template Ref <Elem>
//
// Assignable reference to Elem.
//------------------------------------------------------------------------------

template <typename Elem> 
      class WitRef
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRef ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRef ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void allowAttach ();
         //
         // Allows attachTo to be called.

      void attachTo (Elem & theElem);
         //
         // Causes this Ref to reference theElem.

      void clear ();

      inline Elem & operator () () const
         {
         witAssert (myDataPtr_ != NULL);

         return * myDataPtr_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitRef);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      Elem * myDataPtr_;
         //
         // Ptr to the data referenced by this Ref, if any; otherwise NULL.

      bool attachAllowed_;
        //
        // attachTo may be called, iff attachAllowed_ is true.
   };

#endif
@


1.10
log
@Stochastic Implosion
@
text
@@


1.9
log
@[multi-thread]
@
text
@d48 7
a54 1
      void attachTo (Elem & theInstance);
d80 4
@


1.8
log
@[multi-thread]
@
text
@@


1.7
log
@pegged Critical List.
@
text
@d16 1
a16 1
// Contains the declaration of class template Ref <TheType>.
d22 1
a22 1
// Class template Ref <TheType>
d24 1
a24 1
// Assignable reference to TheType.
d27 1
a27 1
template <typename TheType> 
d48 1
a48 1
      void attachTo (TheType & theInstance);
d52 1
a52 1
      inline TheType & operator () () const
d71 1
a71 1
      TheType * myDataPtr_;
@


1.6
log
@Continued implementation of PIP.
@
text
@d48 1
a48 1
      void refTo (TheType & theInstance);
d52 1
a52 1
      inline TheType & operator () ()
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d28 1
a28 1
      class WitRef: public WitUtil
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@a24 2
//
// Implementation in RefI.h.
d52 6
a57 1
      inline TheType & operator () ();
a74 10

//------------------------------------------------------------------------------

template <typename TheType> 
      inline TheType & WitRef <TheType>::operator () ()
   {
   witAssert (myDataPtr_ != NULL);

   return * myDataPtr_;
   }
@


1.3
log
@Various internal changes.
@
text
@d73 10
@


1.2
log
@Various internal changes.
@
text
@d62 1
a62 1
      noCopyCtorAssignTemp (WitRef, TheType);
@


1.1
log
@Continued implementation of single-source.
@
text
@d29 1
a29 1
template <class TheType> 
@

