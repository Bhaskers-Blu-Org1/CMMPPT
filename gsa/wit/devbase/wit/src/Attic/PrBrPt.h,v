head	1.15;
access;
symbols
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.11
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10;
locks; strict;
comment	@ * @;


1.15
date	2004.12.06.22.38.16;	author rjw;	state dead;
branches;
next	1.14;

1.14
date	2004.11.24.22.45.29;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.11.23.20.50.07;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.11.16.30.21;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.06.20.22.43;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.29.14.27.48;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.28.20.47.36;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.27.19.20.21;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.25.22.17.08;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.25.19.16.55;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.21.20.31.05;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.13.23.06.31;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.07.23.29.10;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.07.20.20.49;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Low-Pri Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PrBrPtH
#define PrBrPtH

//------------------------------------------------------------------------------
// Header file: "PrBrPt.h"
//
// Contains the declaration of class PrBrPt.
//------------------------------------------------------------------------------

#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class PrBrPt
//
// "Proportionate Routing Branching Point"
//
// A PrBrPt represents an RtSite and a period at which proportionate routing is
// to be performed.
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitPrBrPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrBrPt (WitRtSite *, WitPeriod, WitPrCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrBrPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool singleton ();
         //
         // Returns true, iff there is exactly one RtCand for myRtSite_
         // currently active for proportionate explosions in myPer_.

      void print ();
         //
         // Prints the current state of this PrBrPt.

      void recSplit (WitPrPt * thePrPt);
         //
         // Records the fact that the selection at thePrPt is splitting.

      void recUnsplit (WitPrPt * thePrPt);
         //
         // Records the fact that the selection at thePrPt is unsplitting.

      void findActiveRtCands (WitRtCandStack & theRtCands);
         //
         // Sets theRtCands to be the set of all active RtCands for this PrBrPt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRtSite *,                   myRtSite)
      accessFunc (WitPeriod,                     myPer)
      accessFunc (const WitObjStack <WitPrPt> &, splitPrPts)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPrBrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
         //
         // The RtSite represented by this PrBrPt.

      const WitPeriod myPer_;
         //
         // The period represented by this PrBrPt.

      WitPrCoord * const myPrCoord_;
         //
         // The PrCoord that owns this PrBrPt.

      WitObjStack <WitPrPt> splitPrPts_;
         //
         // The ordered list of split PrPts for this PrBrPt.
         // Used only selection splitting mode.
   };

#endif
@


1.14
log
@Low-Pri Prop-Rt.
@
text
@@


1.13
log
@Low-Pri Prop-Rt.
@
text
@a78 1
      accessFunc (WitPrCoord *,                  myPrCoord)
@


1.12
log
@Low-pri prop-rt.
@
text
@a87 6
      bool allowedForLowPri (WitRtCand * theRtCand);
         //
         // Returns true, iff routing thru theRtCand in myPer_ is currently
         // allowed for low-priority mode.
         // Valid only in low-priority mode.

@


1.11
log
@Continued implementation of PIP.
@
text
@d88 6
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d32 1
a32 1
class WitPrBrPt: public WitUtil
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d52 1
a52 1
      void update ();
d54 2
a55 1
         // Updates this PrBrPt for a status change.
d69 1
a69 1
      void findActivePrPts (WitPrPtStack & thePrPts);
d71 1
a71 1
         // Sets thePrPts to be the set of all active PrPts for this PrBrPt.
d77 4
a80 6
      accessFunc (WitRtSite *,          myRtSite)
      accessFunc (WitPeriod,            myPer)
      accessFunc (WitPrCoord *,         myPrCoord)
      accessFunc (double,               totInclShare)
      accessFunc (bool,                 singleton)
      accessFunc (const WitPrPtStack &, splitPrPts)
d106 1
a106 12
      double totInclShare_;
         //
         // The sum of theRtCand->myBillEntry ()->expShare () over all RtCands
         // for myRtSite_ that are currently active for proportionate explosion
         // in myPer_.

      bool singleton_;
         //
         // singleton_ is true, iff there is exactly one RtCand for myRtSite_
         // currently active for proportionate explosions in myPer_.

      WitPrPtStack splitPrPts_;
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d19 1
a19 1
#include <Util.h>
d60 12
d76 6
a81 4
      accessFunc (WitRtSite *,  myRtSite)
      accessFunc (WitPrCoord *, myPrCoord)
      accessFunc (double,       totInclShare)
      accessFunc (bool,         singleton)
d117 5
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@d15 2
d18 86
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@a14 2
//
// Contains the declaration of class PrBrPt.
a15 84

#include <Util.h>

//------------------------------------------------------------------------------
// Class PrBrPt
//
// "Proportionate Routing Branching Point"
//
// A PrBrPt represents an OrSite and a period at which proportionate routing is
// to be performed.
//------------------------------------------------------------------------------

class WitPrBrPt: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrBrPt (WitOrSite *, WitPeriod, WitPrCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPrBrPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void update ();
         //
         // Updates this PrBrPt for a status change.

      void print ();
         //
         // Prints the current state of this PrBrPt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOrSite *,  myOrSite)
      accessFunc (WitPrCoord *, myPrCoord)
      accessFunc (double,       totInclShare)
      accessFunc (bool,         singleton)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPrBrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitOrSite * const myOrSite_;
         //
         // The OrSite represented by this PrBrPt.

      const WitPeriod myPer_;
         //
         // The period represented by this PrBrPt.

      WitPrCoord * const myPrCoord_;
         //
         // The PrCoord that owns this PrBrPt.

      double totInclShare_;
         //
         // The sum of theOrCand->myBillEntry ()->expShare () over all OrCands
         // for myOrSite_ that are currently active for proportionate explosion
         // in myPer_.

      bool singleton_;
         //
         // singleton_ is true, iff there is exactly one OrCand for myOrSite_
         // currently active for proportionate explosions in myPer_.
   };
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d26 1
a26 1
// A PrBrPt represents an RtSite and a period at which proportionate routing is
d38 1
a38 1
      WitPrBrPt (WitRtSite *, WitPeriod, WitPrCoord *);
d62 1
a62 1
      accessFunc (WitRtSite *,  myRtSite)
d79 1
a79 1
      WitRtSite * const myRtSite_;
d81 1
a81 1
         // The RtSite represented by this PrBrPt.
d93 2
a94 2
         // The sum of theRtCand->myBillEntry ()->expShare () over all RtCands
         // for myRtSite_ that are currently active for proportionate explosion
d99 1
a99 1
         // singleton_ is true, iff there is exactly one RtCand for myRtSite_
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d94 2
a95 2
         // for myRtSite_ that are to be included in proportionate explosion in
         // myPer_.
d100 1
a100 1
         // which is to be included in proportionate explosions in myPer_.
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d93 3
a95 2
         // The sum of theRtCand->expShare () over all RtCands for myRtSite_ 
         // that are to be included in proportionate explosion in myPer_.
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d26 2
a27 2
// A PrBrPt represents a Part and explosion period at which proportionate
// routing is to be performed.
d38 1
a38 1
      WitPrBrPt (WitPart *, WitPeriod, WitPrCoord *);
d62 1
a62 2
      accessFunc (WitPart *,    myPart)
      accessFunc (WitPeriod,    myExpPer)
d79 1
a79 1
      WitPart * const myPart_;
d81 1
a81 1
         // The Part represented by this PrBrPt.
d83 1
a83 1
      const WitPeriod myExpPer_;
d85 1
a85 1
         // The explosion period represented by this PrBrPt.
d93 2
a94 2
         // The sum of theBopEnt->expShare () over all BopEnts for myPart_ that
         // are to be included in proportionate explosion in myExpPer_.
d98 2
a99 2
         // singleton_ is true, iff there is exactly one BopEntry for myPart_
         // which is to be included in proportionate explosions in myexpPer_.
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d19 1
a19 1
#include <Assoc.h>
d30 1
a30 1
class WitPrBrPt: public WitProbAssoc
d53 4
@

