head	1.28;
access;
symbols
	latest_sce_4_20_20060523:1.21.0.2
	sce_4_20_20060523:1.21
	latest_sce4_20_OSL:1.19.0.2
	sce_4_20_OSL:1.19
	sce_410_withVa:1.19
	sce_4_05_20040511:1.19
	sce_4_00_20040201:1.19
	nextGenBranch:1.17.0.2
	nextGenRoot:1.17
	sce_3_30_20030627:1.17
	EndRw-branch:1.16.0.4
	Root-of-EndRw:1.16
	rwToStl:1.16.0.2
	latest_sce_3_10_20010924:1.6.0.2
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.4.0.6
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.4
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2007.06.26.19.06.21;	author rjw;	state dead;
branches;
next	1.27;

1.27
date	2007.06.22.19.04.04;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.30.21.02.11;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.01.30.22.33.09;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.08.18.22.29.01;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.08.18.18.43.39;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.08.17.19.36.40;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.02.17.34.08;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.21.21.40.04;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.11.11.18.29.14;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.18.18.30.17;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.19.16.48.23;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.09.11.19.53.57;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.11.18.53.13;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.06.19.56.10;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.04.19.14.57;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.29.23.06.29;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.26.22.49.07;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.23.21.00.40;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.07.20.15.01;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.22.14.32.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.28.00.12.59;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.19.18.50.59;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.01.19.23.34;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.25.20.12.34;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.19.22.35.33;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.40;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "PerCon.C"
//
// Implementation the following hierarchy of classes:
//
//    PeriodCon
//       ResourceCon
//       SubCon
//       ShipCon
//       SlbCon
//------------------------------------------------------------------------------

#include <PerCon.h>
#include <DetImpOP.h>
#include <ExecPerItr.h>
#include <OptImp.h>
#include <PerVar.h>
#include <Material.h>
#include <Opn.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <BopEntry.h>

#include <float.h>

//------------------------------------------------------------------------------
// Implementation of class PeriodCon.
//------------------------------------------------------------------------------

WitPeriodCon::WitPeriodCon (WitDetImpOP * theDetImpOP, WitPeriod t):

      WitOptCon (theDetImpOP),

      myPeriod_ (t)
   {
   }

//------------------------------------------------------------------------------

WitPeriodCon::~WitPeriodCon ()
   {
   }

//------------------------------------------------------------------------------

void WitPeriodCon::printSource () const
   {
   printItem ();

   myDetImpOP ()->printPeriod (myPeriod ());
   }

//------------------------------------------------------------------------------
// Implementation of class ResourceCon.
//------------------------------------------------------------------------------

WitResourceCon::WitResourceCon (
         WitPart *     thePart,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitPeriodCon (theDetImpOP, t),

      myPart_      (thePart)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitResourceCon::~WitResourceCon ()
   {
   }

//------------------------------------------------------------------------------

const char * WitResourceCon::classText () const
   {
   return "Resource";
   }

//------------------------------------------------------------------------------

void WitResourceCon::printItem () const
   {
   myDetImpOP ()->printItem (myPart ());
   }

//------------------------------------------------------------------------------

void WitResourceCon::generateCoeffs ()
   {
   WitPeriod     thePer;
   WitDemand *   theDemand;
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;
   WitMaterial * theMat;
   WitExecPerItr theExecPerItr (myDetImpOP ()->myExecPerMgr ());
   WitOptVar *   theOptVar;
   WitScrapVar * theScrapVar;

   thePer = myPeriod ();

   theMat = myPart ()->thisMat ();

   if (theMat != NULL)
      {
      if (theMat->canStock (thePer))
         myDetImpOP ()->myStockVar (theMat, thePer)->incCoeff (1.0);

      if (thePer > 0)
         if (theMat->canStock (thePer - 1))
            myDetImpOP ()->myStockVar (theMat, thePer - 1)->incCoeff (-1.0);
      }

   forEachEl (theDemand, myPart ()->myDemands ())
      myDetImpOP ()->myShipVar (theDemand, thePer)->incCoeff (1.0);

   theScrapVar = myDetImpOP ()->myScrapVar (myPart (), thePer);

   if (theScrapVar != NULL)
      theScrapVar->incCoeff (1.0);

   forEachEl (theBomEnt, myPart ()->consumingBomEntries ())
      for (theExecPerItr (theBomEnt, thePer); ++ theExecPerItr;)
         {
         if (theBomEnt->hasSubsInEffect ()[theExecPerItr ()])
            theOptVar =
               myDetImpOP ()->myNonSubVar (theBomEnt, theExecPerItr ());
         else
            theOptVar =
               myDetImpOP ()->myExecVar (
                  theBomEnt->myOperation (), 
                  theExecPerItr ());

         theOptVar->incCoeff (theBomEnt->effConsRate ()[theExecPerItr ()]);
         }

   forEachEl (theSub, myPart ()->consumingSubEntries ())
      for (theExecPerItr (theSub, thePer); ++ theExecPerItr;)
         if (theSub->inEffect (theExecPerItr ()))
            myDetImpOP ()->mySubVar (theSub, theExecPerItr ())->
               incCoeff (theSub->effConsRate ()[theExecPerItr ()]);

   forEachEl (theBopEnt, myPart ()->producingBopEntries ())
      for (theExecPerItr (theBopEnt, thePer); ++ theExecPerItr;)
         myDetImpOP ()->
            myExecVar (theBopEnt->myOperation (), theExecPerItr ())->
               incCoeff (- theBopEnt->effProdRate ()[theExecPerItr ()]);
   }

//------------------------------------------------------------------------------

void WitResourceCon::compBounds ()
   {
   double theSupplyVol;

   theSupplyVol = myPart ()->supplyVol ()[myPeriod ()];

   setBoundsTo (theSupplyVol, theSupplyVol);
   }

//------------------------------------------------------------------------------
// Implementation of class SubCon.
//------------------------------------------------------------------------------

WitSubCon::WitSubCon (
         WitBomEntry * theBomEnt,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitPeriodCon (theDetImpOP, t),

      myBomEnt_    (theBomEnt)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitSubCon::~WitSubCon ()
   {
   }

//------------------------------------------------------------------------------

const char * WitSubCon::classText () const
   {
   return "Substitution";
   }

//------------------------------------------------------------------------------

void WitSubCon::printItem () const
   {
   myDetImpOP ()->printItem (myBomEnt ());
   }

//------------------------------------------------------------------------------

void WitSubCon::generateCoeffs ()
   {
   WitPeriod     thePer;
   WitSubEntry * theSub;

   thePer = myPeriod ();

   forEachEl (theSub, myBomEnt ()->mySubEntries ())
      if (theSub->inEffect (thePer))
         myDetImpOP ()->mySubVar (theSub, thePer)->incCoeff (1.0);

   myDetImpOP ()->myNonSubVar (myBomEnt (), thePer)->incCoeff (1.0);

   myDetImpOP ()->
      myExecVar (myBomEnt ()->myOperation (), thePer)->
         incCoeff (-1.0);
   }

//------------------------------------------------------------------------------

void WitSubCon::compBounds ()
   {
   setBoundsTo (0.0, 0.0);
   }

//------------------------------------------------------------------------------
// Implementation of class ShipCon.
//------------------------------------------------------------------------------

WitShipCon::WitShipCon (
         WitDemand *   theDemand,
         WitPeriod     t,
         WitDetImpOP * theDetImpOP):

      WitPeriodCon (theDetImpOP, t),

      myDemand_    (theDemand)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitShipCon::~WitShipCon ()
   {
   }

//------------------------------------------------------------------------------

const char * WitShipCon::classText () const
   {
   return "Shipment";
   }

//------------------------------------------------------------------------------

void WitShipCon::printItem () const
   {
   myDetImpOP ()->printItem (myDemand ());
   }

//------------------------------------------------------------------------------

void WitShipCon::generateCoeffs ()
   {
   WitPeriod thePer;

   thePer = myPeriod ();

   if (thePer > 0)
      myDetImpOP ()->myCumShipVar (myDemand (), thePer - 1)->incCoeff  (1.0);

   myDetImpOP ()   ->myShipVar    (myDemand (), thePer)    ->incCoeff  (1.0);

   myDetImpOP ()   ->myCumShipVar (myDemand (), thePer)    ->incCoeff (-1.0);
   }

//------------------------------------------------------------------------------

void WitShipCon::compBounds ()
   {
   setBoundsTo (0.0, 0.0);
   }

//------------------------------------------------------------------------------
// Implementation of class SlbCon.
//------------------------------------------------------------------------------

WitSlbCon::WitSlbCon (
         WitBoundedVar * theBoundedVar,
         WitDetImpOP *   theDetImpOP):

      WitPeriodCon  (theDetImpOP, theBoundedVar->myPeriod ()),

      myBoundedVar_ (theBoundedVar)
   {
   myDetImpOP ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitSlbCon::~WitSlbCon ()
   {
   }

//------------------------------------------------------------------------------

const WitBoundSet * WitSlbCon::myBoundSet () const
   {
   return myBoundedVar_->myBoundSet ();
   }

//------------------------------------------------------------------------------

const char * WitSlbCon::classText () const
   {
   return "S. L. B.";
   }

//------------------------------------------------------------------------------

void WitSlbCon::printItem () const
   {
   myDetImpOP ()->printItem (myBoundedVar_);
   }

//------------------------------------------------------------------------------

void WitSlbCon::generateCoeffs ()
   {
   myBoundedVar_->incCoeff (1.0);

   myDetImpOP ()->mySlbvVar (myBoundedVar_)->incCoeff (1.0);
   }

//------------------------------------------------------------------------------

void WitSlbCon::compBounds ()
   {
   setBoundsTo (myBoundedVar_->softLB (), + DBL_MAX);
   }
@


1.27
log
@Stochastic Implosion
@
text
@@


1.26
log
@Stochastic Implosion
@
text
@d23 1
a23 1
#include <ImpOptProb.h>
d39 1
a39 1
WitPeriodCon::WitPeriodCon (WitImpOptProb * theImpOptProb, WitPeriod t):
d41 1
a41 1
      WitOptCon (theImpOptProb),
d59 1
a59 1
   myImpOptProb ()->printPeriod (myPeriod ());
d67 3
a69 3
         WitPart * thePart,
         WitPeriod t,
         WitImpOptProb * theImpOptProb):
d71 1
a71 1
      WitPeriodCon (theImpOptProb, t),
d75 1
a75 1
   myImpOptProb ()->storeDerived (this);
d95 1
a95 1
   myImpOptProb ()->printItem (myPart ());
d108 1
a108 1
   WitExecPerItr theExecPerItr (myImpOptProb ()->myExecPerMgr ());
d119 1
a119 1
         myImpOptProb ()->myStockVar (theMat, thePer)->incCoeff (1.0);
d123 1
a123 1
            myImpOptProb ()->myStockVar (theMat, thePer - 1)->incCoeff (-1.0);
d127 1
a127 1
      myImpOptProb ()->myShipVar (theDemand, thePer)->incCoeff (1.0);
d129 1
a129 1
   theScrapVar = myImpOptProb ()->myScrapVar (myPart (), thePer);
d139 1
a139 1
               myImpOptProb ()->myNonSubVar (theBomEnt, theExecPerItr ());
d142 1
a142 1
               myImpOptProb ()->myExecVar (
d152 1
a152 1
            myImpOptProb ()->mySubVar (theSub, theExecPerItr ())->
d157 1
a157 1
         myImpOptProb ()->
d179 2
a180 2
         WitPeriod t,
         WitImpOptProb * theImpOptProb):
d182 1
a182 1
      WitPeriodCon (theImpOptProb, t),
d186 1
a186 1
   myImpOptProb ()->storeDerived (this);
d206 1
a206 1
   myImpOptProb ()->printItem (myBomEnt ());
d220 1
a220 1
         myImpOptProb ()->mySubVar (theSub, thePer)->incCoeff (1.0);
d222 1
a222 1
   myImpOptProb ()->myNonSubVar (myBomEnt (), thePer)->incCoeff (1.0);
d224 1
a224 1
   myImpOptProb ()->
d241 3
a243 3
         WitDemand *     theDemand,
         WitPeriod       t,
         WitImpOptProb * theImpOptProb):
d245 1
a245 1
      WitPeriodCon (theImpOptProb, t),
d249 1
a249 1
   myImpOptProb ()->storeDerived (this);
d269 1
a269 1
   myImpOptProb ()->printItem (myDemand ());
d281 1
a281 1
      myImpOptProb ()->myCumShipVar (myDemand (), thePer - 1)->incCoeff  (1.0);
d283 1
a283 1
   myImpOptProb ()   ->myShipVar    (myDemand (), thePer)    ->incCoeff  (1.0);
d285 1
a285 1
   myImpOptProb ()   ->myCumShipVar (myDemand (), thePer)    ->incCoeff (-1.0);
d301 1
a301 1
         WitImpOptProb * theImpOptProb):
d303 1
a303 1
      WitPeriodCon  (theImpOptProb, theBoundedVar->myPeriod ()),
d307 1
a307 1
   myImpOptProb ()->storeDerived (this);
d334 1
a334 1
   myImpOptProb ()->printItem (myBoundedVar_);
d343 1
a343 1
   myImpOptProb ()->mySlbvVar (myBoundedVar_)->incCoeff (1.0);
@


1.25
log
@[backlog avoidance]
@
text
@d24 1
d108 1
a108 1
   WitExecPerItr theExecPerItr;
@


1.24
log
@App controlled opt implode.
@
text
@d275 1
a275 1
   const WitPeriod t = myPeriod ();
d277 1
a277 2
   if (t > 0)
      myImpOptProb ()->myCumShipVar (myDemand (), t-1)->incCoeff (1.0);
d279 2
a280 1
   myImpOptProb ()->   myShipVar    (myDemand (), t)  ->incCoeff (1.0);
d282 3
a284 1
   myImpOptProb ()->   myCumShipVar (myDemand (), t)  ->incCoeff (-1.0);
@


1.23
log
@App controlled opt implosion.
@
text
@a33 2
#ifdef OPT_IMPLODE

a348 2

#endif
@


1.22
log
@Removed optimizing implosion with lot sizes.
@
text
@d23 1
a23 1
#include <ImpOM.h>
d40 1
a40 1
WitPeriodCon::WitPeriodCon (WitImpOM * theImpOM, WitPeriod t):
d42 1
a42 1
      WitOptCon (theImpOM),
d60 1
a60 1
   myImpOM ()->printPeriod (myPeriod ());
d70 1
a70 1
         WitImpOM * theImpOM):
d72 1
a72 1
      WitPeriodCon (theImpOM, t),
d76 1
a76 1
   myImpOM ()->storeDerived (this);
d96 1
a96 1
   myImpOM ()->printItem (myPart ());
d120 1
a120 1
         myImpOM ()->myStockVar (theMat, thePer)->incCoeff (1.0);
d124 1
a124 1
            myImpOM ()->myStockVar (theMat, thePer - 1)->incCoeff (-1.0);
d128 1
a128 1
      myImpOM ()->myShipVar (theDemand, thePer)->incCoeff (1.0);
d130 1
a130 1
   theScrapVar = myImpOM ()->myScrapVar (myPart (), thePer);
d140 1
a140 1
               myImpOM ()->myNonSubVar (theBomEnt, theExecPerItr ());
d143 1
a143 1
               myImpOM ()->myExecVar (
d153 1
a153 1
            myImpOM ()->mySubVar (theSub, theExecPerItr ())->
d158 3
a160 2
         myImpOM ()->myExecVar (theBopEnt->myOperation (), theExecPerItr ())->
            incCoeff (- theBopEnt->effProdRate ()[theExecPerItr ()]);
d181 1
a181 1
         WitImpOM * theImpOM):
d183 1
a183 1
      WitPeriodCon (theImpOM, t),
d187 1
a187 1
   myImpOM ()->storeDerived (this);
d207 1
a207 1
   myImpOM ()->printItem (myBomEnt ());
d221 1
a221 1
         myImpOM ()->mySubVar (theSub, thePer)->incCoeff (1.0);
d223 1
a223 1
   myImpOM ()->myNonSubVar (myBomEnt (), thePer)->incCoeff (1.0);
d225 3
a227 2
   myImpOM ()->myExecVar (myBomEnt ()->myOperation (), thePer)->
      incCoeff (-1.0);
d242 3
a244 3
         WitDemand * theDemand,
         WitPeriod t,
         WitImpOM * theImpOM):
d246 1
a246 1
      WitPeriodCon (theImpOM, t),
d250 1
a250 1
   myImpOM ()->storeDerived (this);
d270 1
a270 1
   myImpOM ()->printItem (myDemand ());
d280 1
a280 1
      myImpOM ()->myCumShipVar (myDemand (), t-1)->incCoeff (1.0);
d282 1
a282 1
   myImpOM ()->   myShipVar    (myDemand (), t)  ->incCoeff (1.0);
d284 1
a284 1
   myImpOM ()->   myCumShipVar (myDemand (), t)  ->incCoeff (-1.0);
d298 3
a300 1
WitSlbCon::WitSlbCon (WitBoundedVar * theBoundedVar, WitImpOM * theImpOM):
d302 1
a302 1
      WitPeriodCon  (theImpOM, theBoundedVar->myPeriod ()),
d306 1
a306 1
   myImpOM ()->storeDerived (this);
d333 1
a333 1
   myImpOM ()->printItem (myBoundedVar_);
d342 1
a342 1
   myImpOM ()->mySlbvVar (myBoundedVar_)->incCoeff (1.0);
@


1.21
log
@Updated the copyright date on all source files.
@
text
@a19 2
//       LotSizeCon
//       MlsCon
a347 123
//------------------------------------------------------------------------------
// Implementation of class LotSizeCon.
//------------------------------------------------------------------------------

WitLotSizeCon::WitLotSizeCon (
         WitOperation * theOpn,
         WitPeriod      thePer,
         WitImpOM *     theImpOM):

      WitPeriodCon (theImpOM, thePer),

      myOpn_       (theOpn)
   {
   myImpOM ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitLotSizeCon::~WitLotSizeCon ()
   {
   }

//------------------------------------------------------------------------------

const char * WitLotSizeCon::classText () const
   {
   return "Lot Size";
   }

//------------------------------------------------------------------------------

void WitLotSizeCon::printItem () const
   {
   myImpOM ()->printItem (myOpn ());
   }

//------------------------------------------------------------------------------

void WitLotSizeCon::generateCoeffs ()
   {
   WitPeriod thePer;
   int       ils;
   int       mls;

   thePer = myPeriod ();

   ils    = myOptImploder ()->incLotSize (myOpn (), thePer);
   mls    = myOptImploder ()->minLotSize (myOpn (), thePer);

   myImpOM ()->    myExecVar    (myOpn (), thePer)->incCoeff (1.0);

   myImpOM ()->    myIlsMultVar (myOpn (), thePer)->incCoeff (- ils);

   if (myImpOM ()->mlsMode      (myOpn (), thePer))
       myImpOM ()->myMlsMultVar (myOpn (), thePer)->incCoeff (- mls);
   }

//------------------------------------------------------------------------------

void WitLotSizeCon::compBounds ()
   {
   setBoundsTo (0.0, 0.0);
   }

//------------------------------------------------------------------------------
// Implementation of class MlsCon.
//------------------------------------------------------------------------------

WitMlsCon::WitMlsCon (
         WitOperation * theOpn,
         WitPeriod      thePer,
         WitImpOM *     theImpOM):

      WitPeriodCon (theImpOM, thePer),

      myOpn_       (theOpn)
   {
   myImpOM ()->storeDerived (this);
   }

//------------------------------------------------------------------------------

WitMlsCon::~WitMlsCon ()
   {
   }

//------------------------------------------------------------------------------

const char * WitMlsCon::classText () const
   {
   return "Min Lot Size";
   }

//------------------------------------------------------------------------------

void WitMlsCon::printItem () const
   {
   myImpOM ()->printItem (myOpn ());
   }

//------------------------------------------------------------------------------

void WitMlsCon::generateCoeffs ()
   {
   WitPeriod thePer;
   int       lsr;

   thePer = myPeriod ();

   lsr    = myImpOM ()->myOptImploder ()->lotSizeRatio (myOpn (), thePer);

   myImpOM ()->myIlsMultVar (myOpn (), thePer)->incCoeff (1.0);

   myImpOM ()->myMlsMultVar (myOpn (), thePer)->incCoeff (- (lsr - 1));
   }

//------------------------------------------------------------------------------

void WitMlsCon::compBounds ()
   {
   setBoundsTo (- DBL_MAX, 0.0);
   }

@


1.20
log
@Removed some more OSL items.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.19
log
@Removed a bad function overload.
@
text
@d34 2
d347 1
a347 1
   setBoundsTo (myBoundedVar_->softLB (), + OSL_INFTY);
d470 1
a470 1
   setBoundsTo (- OSL_INFTY, 0.0);
@


1.18
log
@Continued implementation of opt with COIN.
@
text
@d115 1
a115 1
   theMat = myPart ()->myMat ();
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@a23 5
int compiledPerCon = 1;
   //
   // WATCOM's strict compatibility mode requires every file to
   // have at least one external definition.

@


1.16
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d120 1
a120 1
   myPart ()->getMaterial (theMat);
@


1.15
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d402 1
a402 1
   myImpOM ()->    myExecVar     (myOpn (), thePer)->incCoeff (1.0);
d404 1
a404 1
   myImpOM ()->    myIlsMultVar  (myOpn (), thePer)->incCoeff (- ils);
d406 2
a407 2
   if (myImpOM ()->mlsMode (myOpn (), thePer))
       myImpOM ()->myMlsMultVar  (myOpn (), thePer)->incCoeff (- mls);
@


1.14
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d20 2
a21 1
//       IncLotSizeCon
d31 1
d354 1
a354 1
// Implementation of class IncLotSizeCon.
d357 1
a357 1
WitIncLotSizeCon::WitIncLotSizeCon (
d371 1
a371 1
WitIncLotSizeCon::~WitIncLotSizeCon ()
d377 1
a377 1
const char * WitIncLotSizeCon::classText () const
d379 1
a379 1
   return "Inc Lot Size";
d384 1
a384 1
void WitIncLotSizeCon::printItem () const
d391 1
a391 1
void WitIncLotSizeCon::generateCoeffs ()
d394 2
a395 1
   float     ils;
d399 2
a400 1
   ils    = myOpn ()->incLotSize ()[thePer];
d402 1
a402 1
   myImpOM ()->myExecVar    (myOpn (), thePer)->incCoeff (1.0);
d404 4
a407 1
   myImpOM ()->myIlsMultVar (myOpn (), thePer)->incCoeff (- ils);
d412 1
a412 1
void WitIncLotSizeCon::compBounds ()
d415 59
@


1.13
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d20 1
d32 1
d173 1
a173 1
   bounds (theSupplyVol, theSupplyVol);
d235 1
a235 1
   bounds (0.0, 0.0);
d292 1
a292 1
   bounds (0.0, 0.0);
d348 60
a407 1
   bounds (myBoundedVar_->softLB (), + OSL_INFTY);
@


1.12
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d88 6
a93 1
implementClassText (WitResourceCon, "Resource")
d95 4
a98 1
implementPrintItem (WitResourceCon, myPart ())
d198 6
a203 1
implementClassText (WitSubCon, "Substitution")
d205 4
a208 1
implementPrintItem (WitSubCon, myBomEnt ())
d260 6
a265 1
implementClassText (WitShipCon, "Shipment")
d267 4
a270 1
implementPrintItem (WitShipCon, myDemand ())
d321 6
a326 1
implementClassText (WitSlbCon, "S. L. B.")
d328 4
a331 1
implementPrintItem (WitSlbCon, myBoundedVar_)
@


1.11
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d27 1
d29 1
d286 7
@


1.10
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d27 1
a27 1
#include <ImpMp.h>
d39 1
a39 1
WitPeriodCon::WitPeriodCon (WitImpMp * theImpMp, WitPeriod t):
d41 1
a41 1
      WitMpCon  (theImpMp),
d59 1
a59 1
   myImpMp ()->printPeriod (myPeriod ());
d69 1
a69 1
         WitImpMp * theImpMp):
d71 1
a71 1
      WitPeriodCon (theImpMp, t),
d75 1
a75 1
   myImpMp ()->storeDerived (this);
d101 1
a101 1
   WitMpVar *    theMpVar;
d111 1
a111 1
         myImpMp ()->myStockVar (theMat, thePer)->incCoeff (1.0);
d115 1
a115 1
            myImpMp ()->myStockVar (theMat, thePer - 1)->incCoeff (-1.0);
d119 1
a119 1
      myImpMp ()->myShipVar (theDemand, thePer)->incCoeff (1.0);
d121 1
a121 1
   theScrapVar = myImpMp ()->myScrapVar (myPart (), thePer);
d130 2
a131 2
            theMpVar =
               myImpMp ()->myNonSubVar (theBomEnt, theExecPerItr ());
d133 2
a134 2
            theMpVar =
               myImpMp ()->myExecVar (
d138 1
a138 1
         theMpVar->incCoeff (theBomEnt->effConsRate ()[theExecPerItr ()]);
d144 1
a144 1
            myImpMp ()->mySubVar (theSub, theExecPerItr ())->
d149 1
a149 1
         myImpMp ()->myExecVar (theBopEnt->myOperation (), theExecPerItr ())->
d171 1
a171 1
         WitImpMp * theImpMp):
d173 1
a173 1
      WitPeriodCon (theImpMp, t),
d177 1
a177 1
   myImpMp ()->storeDerived (this);
d203 1
a203 1
         myImpMp ()->mySubVar (theSub, thePer)->incCoeff (1.0);
d205 1
a205 1
   myImpMp ()->myNonSubVar (myBomEnt (), thePer)->incCoeff (1.0);
d207 1
a207 1
   myImpMp ()->myExecVar (myBomEnt ()->myOperation (), thePer)->
d225 1
a225 1
         WitImpMp * theImpMp):
d227 1
a227 1
      WitPeriodCon (theImpMp, t),
d231 1
a231 1
   myImpMp ()->storeDerived (this);
d253 1
a253 1
      myImpMp ()->myCumShipVar (myDemand (), t-1)->incCoeff (1.0);
d255 1
a255 1
   myImpMp ()->   myShipVar    (myDemand (), t)  ->incCoeff (1.0);
d257 1
a257 1
   myImpMp ()->   myCumShipVar (myDemand (), t)  ->incCoeff (-1.0);
d271 1
a271 1
WitSlbCon::WitSlbCon (WitBoundedVar * theBoundedVar, WitImpMp * theImpMp):
d273 1
a273 1
      WitPeriodCon  (theImpMp, theBoundedVar->myPeriod ()),
d277 1
a277 1
   myImpMp ()->storeDerived (this);
d298 1
a298 1
   myImpMp ()->mySlbvVar (myBoundedVar_)->incCoeff (1.0);
@


1.9
log
@Continued preliminary work on single source.
@
text
@d27 1
a27 1
#include <ImpLp.h>
d39 1
a39 1
WitPeriodCon::WitPeriodCon (WitImpLp * theImpLp, WitPeriod t):
d41 1
a41 1
      WitLpCon  (theImpLp),
d59 1
a59 1
   myImpLp ()->printPeriod (myPeriod ());
d69 1
a69 1
         WitImpLp * theImpLp):
d71 1
a71 1
      WitPeriodCon (theImpLp, t),
d75 1
a75 1
   myImpLp ()->storeDerived (this);
d101 1
a101 1
   WitLpVar *    theLpVar;
d111 1
a111 1
         myImpLp ()->myStockVar (theMat, thePer)->incCoeff (1.0);
d115 1
a115 1
            myImpLp ()->myStockVar (theMat, thePer - 1)->incCoeff (-1.0);
d119 1
a119 1
      myImpLp ()->myShipVar (theDemand, thePer)->incCoeff (1.0);
d121 1
a121 1
   theScrapVar = myImpLp ()->myScrapVar (myPart (), thePer);
d130 2
a131 2
            theLpVar =
               myImpLp ()->myNonSubVar (theBomEnt, theExecPerItr ());
d133 2
a134 2
            theLpVar =
               myImpLp ()->myExecVar (
d138 1
a138 1
         theLpVar->incCoeff (theBomEnt->effConsRate ()[theExecPerItr ()]);
d144 1
a144 1
            myImpLp ()->mySubVar (theSub, theExecPerItr ())->
d149 1
a149 1
         myImpLp ()->myExecVar (theBopEnt->myOperation (), theExecPerItr ())->
d171 1
a171 1
         WitImpLp * theImpLp):
d173 1
a173 1
      WitPeriodCon (theImpLp, t),
d177 1
a177 1
   myImpLp ()->storeDerived (this);
d203 1
a203 1
         myImpLp ()->mySubVar (theSub, thePer)->incCoeff (1.0);
d205 1
a205 1
   myImpLp ()->myNonSubVar (myBomEnt (), thePer)->incCoeff (1.0);
d207 1
a207 1
   myImpLp ()->myExecVar (myBomEnt ()->myOperation (), thePer)->
d225 1
a225 1
         WitImpLp * theImpLp):
d227 1
a227 1
      WitPeriodCon (theImpLp, t),
d231 1
a231 1
   myImpLp ()->storeDerived (this);
d253 1
a253 1
      myImpLp ()->myCumShipVar (myDemand (), t-1)->incCoeff (1.0);
d255 1
a255 1
   myImpLp ()->   myShipVar    (myDemand (), t)  ->incCoeff (1.0);
d257 1
a257 1
   myImpLp ()->   myCumShipVar (myDemand (), t)  ->incCoeff (-1.0);
d271 1
a271 1
WitSlbCon::WitSlbCon (WitBoundedVar * theBoundedVar, WitImpLp * theImpLp):
d273 1
a273 1
      WitPeriodCon  (theImpLp, theBoundedVar->myPeriod ()),
d277 1
a277 1
   myImpLp ()->storeDerived (this);
d298 1
a298 1
   myImpLp ()->mySlbvVar (myBoundedVar_)->incCoeff (1.0);
@


1.8
log
@Continued implementation of object iteration.
@
text
@d28 4
a31 1
#include <Demand.h>
@


1.7
log
@Continued development of Selective Stock Reallocation.
@
text
@d103 1
a103 1
   theMat = myPart ()->myMat ();
@


1.6
log
@Continued implementation of selective stock reallocation.
@
text
@d103 3
a105 1
   if (myPart ()->getMyMaterial (theMat))
@


1.5
log
@Continued development of selection splitting for multi=exec.
@
text
@d103 1
a103 1
   if (myPart ()->isaMaterial (theMat))
@


1.4
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@d170 1
a170 1
      myBomEntry_  (theBomEnt)
d185 1
a185 1
implementPrintItem (WitSubCon, myBomEntry ())
d196 1
a196 1
   forEachEl (theSub, myBomEntry ()->mySubEntries ())
d200 1
a200 1
   myImpLp ()->myNonSubVar (myBomEntry (), thePer)->incCoeff (1.0);
d202 1
a202 1
   myImpLp ()->myExecVar (myBomEntry ()->myOperation (), thePer)->
@


1.3
log
@Continued implementation of stock re-allocation.
@
text
@d133 1
a133 1
         theLpVar->incCoeff (theBomEnt->effUsageRate ());
d140 1
a140 1
               incCoeff (theSub->effUsageRate ());
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d191 1
a191 1
   const WitPeriod t = myPeriod ();
d194 2
d197 2
a198 2
      if (theSub->inEffect (t))
         myImpLp ()->mySubVar (theSub, t)->incCoeff (1.0);
d200 1
a200 1
   myImpLp ()->myNonSubVar (myBomEntry (), t)->incCoeff (1.0);
d202 2
a203 1
   myImpLp ()->myExecVar (myBomEntry ()->myOperation (), t)->incCoeff (-1.0);
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
