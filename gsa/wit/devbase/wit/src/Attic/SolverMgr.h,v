head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2011.08.30.18.14.56;	author rjw;	state dead;
branches;
next	1.20;

1.20
date	2011.08.26.22.54.55;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.08.25.23.27.07;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.02.09.19.13.27;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.02.03.22.30.56;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.12.10.00.40.26;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.11.17.20.20.53;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.11.04.19.59.01;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.12.22.42.24;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.20.21.07.37;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.19.18.00.14;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.02.18.38.42;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.24.20.32.08;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.24.18.20.52;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.24.16.09.29;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.21.23.46.13;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.20.23.18.43;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.19.16.07.35;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.22.54.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.18.22.40.40;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.13.19.52.09;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Replaced class SolverMgr with class CplexGateway.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SolverMgrH
#define SolverMgrH

//------------------------------------------------------------------------------
// Header file: "SolverMgr.h"
//
// Contains the declaration of class SolverMgr
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class SolverMgr
//
// "Solver Manager"
// Responsible for all interactions with the "solver" software that solves the
// optimization problem.
// This is only an abstract base class; the classes derived from it actually
// interact with the solver.
//
// Class hierarchy:
//
// ProbAssoc
//    SolverMgr
//       CplexMgr
//
// Implemented in OptProblem.C.
//------------------------------------------------------------------------------

class WitSolverMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSolverMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static WitSolverMgr * newInstance (WitOptProblem * theOptProblem);
         //
         // Creates and returns a new SolverMgr for the selected solver.
         // Issues a fatal error is no solver has been selected.

      virtual void solveOptProb () = 0;
         //
         // Solves the optimization problem:
         // * Takes the optimization problem specified by myOptProblem_ and
         //   loads it into the solver.
         // * Has the solver solve the loaded problem.
         // * Takes the solution found by the solver and stores it into
         //   myOptProblem_.

   protected:

      //------------------------------------------------------------------------
      // Protected constructor functions.
      //------------------------------------------------------------------------

      WitSolverMgr (WitOptProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSolverMgr);
   };

#endif
@


1.20
log
@Revisions for the removal of COIN.
@
text
@@


1.19
log
@Removed COIN from WIT.
@
text
@d36 1
a36 1
// Implemented in OptMisc.C.
a52 4
      static bool cplexEmbedded ();
         //
         // Returns true, iff CPLEX was embedded into the current build of WIT.

a66 6
      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOptProblem *, myOptProblem)

a74 17
      void getInitSoln (WitVector <double> & initSoln);
         //
         // Sets initSoln to be the initial primal solution from
         // myOptProblem ().

      void storePrimalSoln (const double * primalSoln);
         //
         // Stores primalSoln into myOptProblem () as the primal solution.

      void storeDualSoln (const double * dualSoln);
         //
         // Stores dualSoln into myOptProblem () as the dual solution.

      bool mipMode ();
         //
         // Returns true, iff myOptProblem is a MIP.

a80 6
      static WitSolverMgr * newInstanceForCplex (WitOptProblem * theOptProblem);
         //
         // In CPLEX-embedded mode, this function constructs and returns a new
         //    WitSolverMgr appropriate for when CPLEX is to be the solver.
         // In non-CPLEX-embedded mode, this function issues a fatal error.

a81 8

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitOptProblem * const myOptProblem_;
         //
         // The OptProblem that owns this SolverMgr.
@


1.18
log
@CPLEX
@
text
@a33 1
//       CoinMgr
a52 4
      static bool coinEmbedded ();
         //
         // Returns true, iff COIN was embedded into the current build of WIT.

a107 6
      static WitSolverMgr * newInstanceForCoin (WitOptProblem * theOptProblem);
         //
         // In COIN-embedded mode, this function constructs and returns a new
         //    WitSolverMgr appropriate for when COIN is to be the solver.
         // In non-COIN-embedded mode, this function issues a fatal error.

@


1.17
log
@CPLEX
@
text
@a16 3
//
// Contains the declaration of NonClass function newSolverMgrForCoin  (...).
// Contains the declaration of NonClass function newSolverMgrForCplex (...).
d54 8
d113 12
a135 30
//------------------------------------------------------------------------------
// NonClass function newSolverMgrForCoin (...)
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   WitSolverMgr * newSolverMgrForCoin (WitOptProblem * theOptProblem);
      //
      // In COIN-embedded mode, this function constructs and returns a new
      //    WitSolverMgr appropriate for when COIN is to be the solver.
      // In non-COIN-embedded mode, this function issues a fatal error.
      //
      // Implemented in CoinSolver.C.
   };

//------------------------------------------------------------------------------
// NonClass function newSolverMgrForCplex (...)
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   WitSolverMgr * newSolverMgrForCplex (WitOptProblem * theOptProblem);
      //
      // In CPLEX-embedded mode, this function constructs and returns a new
      //    WitSolverMgr appropriate for when CPLEX is to be the solver.
      // In non-CPLEX-embedded mode, this function issues a fatal error.
      //
      // Implemented in CplexSolver.C.
   };

@


1.16
log
@CPLEX
@
text
@a38 1
//       NoSolverMgr
@


1.15
log
@CPLEX
@
text
@d99 4
@


1.14
log
@Fixed a bug:
   External optimizing implosion issued a fatal error when invoked without
   a selected solver.
@
text
@d63 1
a63 1
      virtual void solve () = 0;
d65 6
a70 1
         // Solves the optimization problem.
@


1.13
log
@CPLEX
@
text
@d39 1
@


1.12
log
@CPLEX
@
text
@d59 2
a60 1
         // Creates and returns a new SolverMgr of the appropriate subclass.
@


1.11
log
@CPLEX
@
text
@d79 13
@


1.10
log
@CPLEX
@
text
@d29 1
a29 1
// optimization model.
d57 1
a57 1
      static WitSolverMgr * newInstance (WitOptModel * theOptModel);
d63 1
a63 1
         // Solves the optimization model.
d69 1
a69 1
      accessFunc (WitOptModel *, myOptModel)
d77 1
a77 1
      WitSolverMgr (WitOptModel *);
d91 1
a91 1
      WitOptModel * const myOptModel_;
d93 1
a93 1
         // The OptModel that owns this SolverMgr.
d102 1
a102 1
   WitSolverMgr * newSolverMgrForCoin (WitOptModel * theOptModel);
d117 1
a117 1
   WitSolverMgr * newSolverMgrForCplex (WitOptModel * theOptModel);
@


1.9
log
@CPLEX
@
text
@d18 2
a19 2
// Contains the implementation NonClass function newSolverMgrForCoin  (...).
// Contains the implementation NonClass function newSolverMgrForCplex (...).
@


1.8
log
@*** empty log message ***
@
text
@d17 3
d97 1
a97 1
// NonClass functions used by class SolverMgr.
d111 15
@


1.7
log
@Modified comments.
@
text
@a35 1
//       NoSolverMgr
@


1.6
log
@CPLEX
@
text
@d105 1
@


1.5
log
@CPLEX
@
text
@d94 13
@


1.4
log
@Preparing for embedded CPLEX.
@
text
@d35 1
@


1.3
log
@Preparing for embedded CPLEX.
@
text
@a81 5
      static WitSolverMgr * newInstanceForCoin (WitOptModel * theOptModel);
         //
         // Creates and returns a new SolverMgr for COIN.
         // Asserts the COIN is embedded.

@


1.2
log
@Preparing for embedded CPLEX.
@
text
@d82 1
a82 1
      WitSolverMgr * newInstanceForCoin (WitOptModel * theOptModel);
@


1.1
log
@Multi-objective mode
@
text
@d82 5
@

