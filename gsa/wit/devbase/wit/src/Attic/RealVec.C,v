head	1.25;
access;
symbols;
locks; strict;
comment	@ * @;


1.25
date	2004.03.23.19.14.25;	author rjw;	state dead;
branches;
next	1.24;

1.24
date	2004.03.22.16.37.19;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.12.17.21.56;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.03.11.16.59.10;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.03.11.16.36.18;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.03.09.17.14.00;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.08.22.00.22;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.08.21.11.43;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.08.16.54.29;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.05.22.19.59;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.05.00.06.54;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.04.19.53.27;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.04.16.44.30;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.04.16.31.46;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.03.22.36.22;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.03.22.13.06;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.02.23.52.14;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.02.19.17.52;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.02.16.19.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.27.22.46.05;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.27.21.00.29;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.26.22.06.08;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.26.20.40.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.26.18.59.42;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.25.22.20.07;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Double Precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "RealVec.C"
//
// Contains the implementation of class RealVec.
//------------------------------------------------------------------------------

#include <RealVec.h>

//------------------------------------------------------------------------------
// Implementation of class RealVec.
//------------------------------------------------------------------------------

WitRealVec::WitRealVec (WitProblem * theProblem, double initValue):

      myDblFlexVec_ (theProblem, initValue)
   {
   }

//------------------------------------------------------------------------------

WitRealVec::~WitRealVec ()
   {
   }

//------------------------------------------------------------------------------

void WitRealVec::copy (const WitRealVec & theRealVec)
   {
   myDblFlexVec_.copy (theRealVec.myDblFlexVec_);
   }

//------------------------------------------------------------------------------

void WitRealVec::convCopy (const WitTVec <float> & theFltTVec)
   {
   WitNonClass::convCopy (myDblFlexVec_, theFltTVec);
   }

//------------------------------------------------------------------------------

void WitRealVec::convCopy (const WitTVec <double> & theDblTVec)
   {
   myDblFlexVec_.convCopy (theDblTVec);
   }

//------------------------------------------------------------------------------

void WitRealVec::convCopy (const WitFlexVec <double> & theDblFlexVec)
   {
   myDblFlexVec_.copy (theDblFlexVec);
   }

//------------------------------------------------------------------------------

void WitRealVec::convCopy (const float * theFltCVec)
   {
   WitNonClass::convCopy (myDblFlexVec_, theFltCVec);
   }

//------------------------------------------------------------------------------

void WitRealVec::setToScalar (double theDbl)
   {
   myDblFlexVec_.setToScalar (theDbl);
   }

//------------------------------------------------------------------------------

void WitRealVec::convCopyInto (WitTVec <float> & theFltTVec) const
   {
   WitNonClass::convCopy (theFltTVec, myDblFlexVec_);
   }

//------------------------------------------------------------------------------

void WitRealVec::convCopyInto (WitTVec <double> & theDblTVec) const
   {
   myDblFlexVec_.convCopyInto (theDblTVec);
   }

//------------------------------------------------------------------------------

void WitRealVec::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
   {
   WitNonClass::convCopy (theFltFlexVec, myDblFlexVec_);
   }

//------------------------------------------------------------------------------

void WitRealVec::convCopyInto (float * theFltCVec) const
   {
   WitNonClass::convCopy (theFltCVec, myDblFlexVec_);
   }

//------------------------------------------------------------------------------

bool WitRealVec::operator == (double theDbl) const
   {
   return (myDblFlexVec_ == theDbl);
   }

//------------------------------------------------------------------------------

bool WitRealVec::operator >= (double theDbl) const
   {
   return (myDblFlexVec_ >= theDbl);
   }
@


1.24
log
@Double Precision.
@
text
@@


1.23
log
@Double Precision.
@
text
@d13 1
a13 5
// Contains the implementation of the following classes:
//
//    FltRealVec.
//    DblRealVec.
//    FltRealTVc.
d19 1
a19 1
// Implementation of class FltRealVec.
d22 1
a22 101
WitFltRealVec::WitFltRealVec (WitProblem * theProblem, double initValue):

      myFltFlexVec_ (theProblem, fltFromDbl (initValue))
   {
   }

//------------------------------------------------------------------------------

WitFltRealVec::~WitFltRealVec ()
   {
   }

//------------------------------------------------------------------------------

void WitFltRealVec::copy (const WitFltRealVec & theFltRealVec)
   {
   myFltFlexVec_.copy (theFltRealVec.myFltFlexVec_);
   }

//------------------------------------------------------------------------------

void WitFltRealVec::convCopy (const WitTVec <float> & theFltTVec)
   {
   myFltFlexVec_.convCopy (theFltTVec);
   }

//------------------------------------------------------------------------------

void WitFltRealVec::convCopy (const WitTVec <double> & theDblTVec)
   {
   WitNonClass::convCopy (myFltFlexVec_, theDblTVec);
   }

//------------------------------------------------------------------------------

void WitFltRealVec::convCopy (const WitFlexVec <double> & theDblFlexVec)
   {
   WitNonClass::convCopy (myFltFlexVec_, theDblFlexVec);
   }

//------------------------------------------------------------------------------

void WitFltRealVec::convCopy (const float * theFltCVec)
   {
   myFltFlexVec_.convCopy (theFltCVec);
   }

//------------------------------------------------------------------------------

void WitFltRealVec::setToScalar (double theDbl)
   {
   myFltFlexVec_.setToScalar (fltFromDbl (theDbl));
   }

//------------------------------------------------------------------------------

void WitFltRealVec::convCopyInto (WitTVec <float> & theFltTVec) const
   {
   myFltFlexVec_.convCopyInto (theFltTVec);
   }

//------------------------------------------------------------------------------

void WitFltRealVec::convCopyInto (WitTVec <double> & theDblTVec) const
   {
   WitNonClass::convCopy (theDblTVec, myFltFlexVec_);
   }

//------------------------------------------------------------------------------

void WitFltRealVec::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
   {
   theFltFlexVec.copy (myFltFlexVec_);
   }

//------------------------------------------------------------------------------

void WitFltRealVec::convCopyInto (float * theFltCVec) const
   {
   myFltFlexVec_.convCopyInto (theFltCVec);
   }

//------------------------------------------------------------------------------

bool WitFltRealVec::operator == (double theDbl) const
   {
   return (myFltFlexVec_ == fltFromDbl (theDbl));
   }

//------------------------------------------------------------------------------

bool WitFltRealVec::operator >= (double theDbl) const
   {
   return (myFltFlexVec_ >= fltFromDbl (theDbl));
   }

//------------------------------------------------------------------------------
// Implementation of class DblRealVec.
//------------------------------------------------------------------------------

WitDblRealVec::WitDblRealVec (WitProblem * theProblem, double initValue):
d30 1
a30 1
WitDblRealVec::~WitDblRealVec ()
d36 1
a36 1
void WitDblRealVec::copy (const WitDblRealVec & theDblRealVec)
d38 1
a38 1
   myDblFlexVec_.copy (theDblRealVec.myDblFlexVec_);
d43 1
a43 1
void WitDblRealVec::convCopy (const WitTVec <float> & theFltTVec)
d50 1
a50 1
void WitDblRealVec::convCopy (const WitTVec <double> & theDblTVec)
d57 1
a57 1
void WitDblRealVec::convCopy (const WitFlexVec <double> & theDblFlexVec)
d64 1
a64 1
void WitDblRealVec::convCopy (const float * theFltCVec)
d71 1
a71 1
void WitDblRealVec::setToScalar (double theDbl)
d78 1
a78 1
void WitDblRealVec::convCopyInto (WitTVec <float> & theFltTVec) const
d85 1
a85 1
void WitDblRealVec::convCopyInto (WitTVec <double> & theDblTVec) const
d92 1
a92 1
void WitDblRealVec::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d99 1
a99 1
void WitDblRealVec::convCopyInto (float * theFltCVec) const
d106 1
a106 1
bool WitDblRealVec::operator == (double theDbl) const
d113 1
a113 1
bool WitDblRealVec::operator >= (double theDbl) const
a115 93
   }

//------------------------------------------------------------------------------
// Implementation of class FltRealTVc.
//------------------------------------------------------------------------------

WitFltRealTVc::WitFltRealTVc (WitProblem * theProblem, double initValue):

      myFltTVec_ (theProblem, fltFromDbl (initValue))
   {
   }

//------------------------------------------------------------------------------

WitFltRealTVc::~WitFltRealTVc ()
   {
   }

//------------------------------------------------------------------------------

void WitFltRealTVc::copy (const WitFltRealTVc & theFltRealTVc)
   {
   myFltTVec_.copy (theFltRealTVc.myFltTVec_);
   }

//------------------------------------------------------------------------------

void WitFltRealTVc::convCopy (const WitTVec <float> & theFltTVec)
   {
   myFltTVec_.copy (theFltTVec);
   }

//------------------------------------------------------------------------------

void WitFltRealTVc::convCopy (const WitTVec <double> & theDblTVec)
   {
   WitNonClass::convCopy (myFltTVec_, theDblTVec);
   }

//------------------------------------------------------------------------------

void WitFltRealTVc::convCopy (const WitFlexVec <double> & theDblFlexVec)
   {
   WitNonClass::convCopy (myFltTVec_, theDblFlexVec);
   }

//------------------------------------------------------------------------------

void WitFltRealTVc::convCopy (const float * theFltCVec)
   {
   myFltTVec_.convCopy (theFltCVec);
   }

//------------------------------------------------------------------------------

void WitFltRealTVc::setToScalar (double theDbl)
   {
   myFltTVec_.setToScalar (fltFromDbl (theDbl));
   }

//------------------------------------------------------------------------------

void WitFltRealTVc::convCopyInto (WitTVec <float> & theFltTVec) const
   {
   theFltTVec.copy (myFltTVec_);
   }

//------------------------------------------------------------------------------

void WitFltRealTVc::convCopyInto (WitTVec <double> & theDblTVec) const
   {
   WitNonClass::convCopy (theDblTVec, myFltTVec_);
   }

//------------------------------------------------------------------------------

void WitFltRealTVc::convCopyInto (float * theFltCVec) const
   {
   myFltTVec_.convCopyInto (theFltCVec);
   }

//------------------------------------------------------------------------------

bool WitFltRealTVc::operator == (double theDbl) const
   {
   return (myFltTVec_ == fltFromDbl (theDbl));
   }

//------------------------------------------------------------------------------

bool WitFltRealTVc::operator >= (double theDbl) const
   {
   return (myFltTVec_ >= fltFromDbl (theDbl));
@


1.22
log
@Double Precision.
@
text
@d17 1
d112 1
a112 1
   return myFltFlexVec_ == fltFromDbl (theDbl);
d119 1
a119 1
   return myFltFlexVec_ >= fltFromDbl (theDbl);
d212 1
a212 1
   return myDblFlexVec_ == theDbl;
d219 94
a312 1
   return myDblFlexVec_ >= theDbl;
@


1.21
log
@Double Precision.
@
text
@a121 7

bool WitFltRealVec::usingDbl ()
   {
   return false;
   }

//------------------------------------------------------------------------------
a218 7
   }

//------------------------------------------------------------------------------

bool WitDblRealVec::usingDbl ()
   {
   return true;
@


1.20
log
@Double Precision.
@
text
@d15 2
a16 3
//    FBTRealVec.
//    DBTRealVec.
//     RTRealVec.
a19 2
#include <Node.h>
#include <MsgFac.h>
d22 1
a22 1
// Implementation of class FBTRealVec.
d25 1
a25 5
bool WitFBTRealVec::doubleMode_ = false;

//------------------------------------------------------------------------------

WitFBTRealVec::WitFBTRealVec (WitProblem * theProblem, double initValue):
d33 1
a33 1
WitFBTRealVec::~WitFBTRealVec ()
d39 1
a39 1
void WitFBTRealVec::copy (const WitFBTRealVec & theFBTRealVec)
d41 1
a41 1
   myFltFlexVec_.copy (theFBTRealVec.myFltFlexVec_);
d46 1
a46 1
void WitFBTRealVec::convCopy (const WitTVec <float> & theFltTVec)
d53 1
a53 1
void WitFBTRealVec::convCopy (const WitTVec <double> & theDblTVec)
d60 1
a60 1
void WitFBTRealVec::convCopy (const WitFlexVec <double> & theDblFlexVec)
d67 1
a67 1
void WitFBTRealVec::convCopy (const float * theFltCVec)
d74 1
a74 1
void WitFBTRealVec::setToScalar (double theDbl)
d81 1
a81 1
void WitFBTRealVec::convCopyInto (WitTVec <float> & theFltTVec) const
d88 1
a88 1
void WitFBTRealVec::convCopyInto (WitTVec <double> & theDblTVec) const
d95 1
a95 1
void WitFBTRealVec::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d102 1
a102 1
void WitFBTRealVec::convCopyInto (float * theFltCVec) const
d109 1
a109 1
bool WitFBTRealVec::operator == (double theDbl) const
d116 1
a116 1
bool WitFBTRealVec::operator >= (double theDbl) const
d123 1
a123 1
void WitFBTRealVec::setDoubleMode (bool theVal)
d125 1
a125 6
   WitMsgFacility::current () ("useFBTRealVecMsg");

   if (theVal != doubleMode_)
      stronglyAssert (WitNode::totNodes () == 0);

   doubleMode_ = theVal;
d129 1
a129 5
// Implementation of class DBTRealVec.
//------------------------------------------------------------------------------

bool WitDBTRealVec::doubleMode_ = false;

d132 1
a132 1
WitDBTRealVec::WitDBTRealVec (WitProblem * theProblem, double initValue):
d140 1
a140 1
WitDBTRealVec::~WitDBTRealVec ()
d146 1
a146 1
void WitDBTRealVec::copy (const WitDBTRealVec & theDBTRealVec)
d148 1
a148 1
   myDblFlexVec_.copy (theDBTRealVec.myDblFlexVec_);
d153 1
a153 1
void WitDBTRealVec::convCopy (const WitTVec <float> & theFltTVec)
d160 1
a160 1
void WitDBTRealVec::convCopy (const WitTVec <double> & theDblTVec)
d167 1
a167 1
void WitDBTRealVec::convCopy (const WitFlexVec <double> & theDblFlexVec)
d174 1
a174 1
void WitDBTRealVec::convCopy (const float * theFltCVec)
d181 1
a181 1
void WitDBTRealVec::setToScalar (double theDbl)
d188 1
a188 1
void WitDBTRealVec::convCopyInto (WitTVec <float> & theFltTVec) const
d195 1
a195 1
void WitDBTRealVec::convCopyInto (WitTVec <double> & theDblTVec) const
d202 1
a202 1
void WitDBTRealVec::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d209 1
a209 1
void WitDBTRealVec::convCopyInto (float * theFltCVec) const
d216 1
a216 1
bool WitDBTRealVec::operator == (double theDbl) const
d223 1
a223 1
bool WitDBTRealVec::operator >= (double theDbl) const
d230 1
a230 39
void WitDBTRealVec::setDoubleMode (bool theVal)
   {
   WitMsgFacility::current () ("useDBTRealVecMsg");

   if (theVal != doubleMode_)
      stronglyAssert (WitNode::totNodes () == 0);

   doubleMode_ = theVal;
   }

//------------------------------------------------------------------------------
// Implementation of class RTRealVec.
//------------------------------------------------------------------------------

bool WitRTRealVec::doubleMode_ = false;

//------------------------------------------------------------------------------

WitRTRealVec::WitRTRealVec (WitProblem * theProblem, double initValue)
   {
   if (doubleMode_)
      myDBTRealVecPtr_ = new WitDBTRealVec (theProblem, initValue);
   else
      myFBTRealVecPtr_ = new WitFBTRealVec (theProblem, initValue);
   }

//------------------------------------------------------------------------------

WitRTRealVec::~WitRTRealVec ()
   {
   if (doubleMode_)
      delete myDBTRealVecPtr_;
   else
      delete myFBTRealVecPtr_;
   }

//------------------------------------------------------------------------------

void WitRTRealVec::copy (const WitRTRealVec & theRTRealVec)
d232 1
a232 126
   if (doubleMode_)
      myDBTRealVec ().copy (theRTRealVec.myDBTRealVec ());
   else
      myFBTRealVec ().copy (theRTRealVec.myFBTRealVec ());
   }

//------------------------------------------------------------------------------

void WitRTRealVec::convCopy (const WitTVec <float> & theFltTVec)
   {
   if (doubleMode_)
      myDBTRealVec ().convCopy (theFltTVec);
   else
      myFBTRealVec ().convCopy (theFltTVec);
   }

//------------------------------------------------------------------------------

void WitRTRealVec::convCopy (const WitTVec <double> & theDblTVec)
   {
   if (doubleMode_)
      myDBTRealVec ().convCopy (theDblTVec);
   else
      myFBTRealVec ().convCopy (theDblTVec);
   }

//------------------------------------------------------------------------------

void WitRTRealVec::convCopy (const WitFlexVec <double> & theDblFlexVec)
   {
   if (doubleMode_)
      myDBTRealVec ().convCopy (theDblFlexVec);
   else
      myFBTRealVec ().convCopy (theDblFlexVec);
   }

//------------------------------------------------------------------------------

void WitRTRealVec::convCopy (const float * theFltCVec)
   {
   if (doubleMode_)
      myDBTRealVec ().convCopy (theFltCVec);
   else
      myFBTRealVec ().convCopy (theFltCVec);
   }

//------------------------------------------------------------------------------

void WitRTRealVec::setToScalar (double theDbl)
   {
   if (doubleMode_)
      myDBTRealVec ().setToScalar (theDbl);
   else
      myFBTRealVec ().setToScalar (theDbl);
   }

//------------------------------------------------------------------------------

void WitRTRealVec::convCopyInto (WitTVec <float> & theFltTVec) const
   {
   if (doubleMode_)
      myDBTRealVec ().convCopyInto (theFltTVec);
   else
      myFBTRealVec ().convCopyInto (theFltTVec);
   }

//------------------------------------------------------------------------------

void WitRTRealVec::convCopyInto (WitTVec <double> & theDblTVec) const
   {
   if (doubleMode_)
      myDBTRealVec ().convCopyInto (theDblTVec);
   else
      myFBTRealVec ().convCopyInto (theDblTVec);
   }

//------------------------------------------------------------------------------

void WitRTRealVec::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
   {
   if (doubleMode_)
      myDBTRealVec ().convCopyInto (theFltFlexVec);
   else
      myFBTRealVec ().convCopyInto (theFltFlexVec);
   }

//------------------------------------------------------------------------------

void WitRTRealVec::convCopyInto (float * theFltCVec) const
   {
   if (doubleMode_)
      myDBTRealVec ().convCopyInto (theFltCVec);
   else
      myFBTRealVec ().convCopyInto (theFltCVec);
   }

//------------------------------------------------------------------------------

bool WitRTRealVec::operator == (double theDbl) const
   {
   return
      doubleMode_?
         (myDBTRealVec () == theDbl):
         (myFBTRealVec () == theDbl);
   }

//------------------------------------------------------------------------------

bool WitRTRealVec::operator >= (double theDbl) const
   {
   return
      doubleMode_?
         (myDBTRealVec () >= theDbl):
         (myFBTRealVec () >= theDbl);
   }

//------------------------------------------------------------------------------

void WitRTRealVec::setDoubleMode (bool theVal)
   {
   WitMsgFacility::current () ("useRTRealVecMsg");

   if (theVal != doubleMode_)
      stronglyAssert (WitNode::totNodes () == 0);

   doubleMode_ = theVal;
@


1.19
log
@Double Precision.
@
text
@d264 1
a264 3
WitRTRealVec::WitRTRealVec (WitProblem * theProblem, double initValue):

      myBTRealVecPtr_ (NULL)
d266 4
a269 4
   myBTRealVecPtr_ =
      doubleMode_?
         toTlObj_cast (new WitDBTRealVec (theProblem, initValue)):
         toTlObj_cast (new WitFBTRealVec (theProblem, initValue));
d277 1
a277 1
      delete & myDBTRealVec ();
d279 1
a279 1
      delete & myFBTRealVec ();
@


1.18
log
@Double Precision.
@
text
@a14 1
//    VRTRealVec.
d17 1
a17 4
//    CRTRealVec.
//    VRTRVecIR.
//    FltVRTRVecIR.
//    DblVRTRVecIR.
a24 132
// Implementation of class VRTRealVec.
//------------------------------------------------------------------------------

bool WitVRTRealVec::doubleMode_ = false;

//------------------------------------------------------------------------------

WitVRTRealVec::WitVRTRealVec (WitProblem * theProblem, double initValue):

      myIR_ (newVRTRVecIR (theProblem, initValue))
   {
   }

//------------------------------------------------------------------------------

WitVRTRealVec::~WitVRTRealVec ()
   {
   delete & myIR_;
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::copy (const WitVRTRealVec & theVRTRealVec)
   {
   if (doubleMode_)
      myDblIR ().copy (theVRTRealVec.myDblIR ());
   else
      myFltIR ().copy (theVRTRealVec.myFltIR ());
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::convCopy (const WitTVec <float> & theFltTVec)
   {
   myIR_.convCopy (theFltTVec);
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::convCopy (const WitTVec <double> & theDblTVec)
   {
   myIR_.convCopy (theDblTVec);
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::convCopy (const WitFlexVec <double> & theDblFlexVec)
   {
   myIR_.convCopy (theDblFlexVec);
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::convCopy (const float * theFltCVec)
   {
   myIR_.convCopy (theFltCVec);
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::setToScalar (double theDbl)
   {
   myIR_.setToScalar (theDbl);
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::convCopyInto (WitTVec <float> & theFltTVec) const
   {
   myIR_.convCopyInto (theFltTVec);
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::convCopyInto (WitTVec <double> & theDblTVec) const
   {
   myIR_.convCopyInto (theDblTVec);
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
   {
   myIR_.convCopyInto (theFltFlexVec);
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::convCopyInto (float * theFltCVec) const
   {
   myIR_.convCopyInto (theFltCVec);
   }

//------------------------------------------------------------------------------

bool WitVRTRealVec::operator == (double theDbl) const
   {
   return (myIR_ == theDbl);
   }

//------------------------------------------------------------------------------

bool WitVRTRealVec::operator >= (double theDbl) const
   {
   return (myIR_ >= theDbl);
   }

//------------------------------------------------------------------------------

void WitVRTRealVec::setDoubleMode (bool theVal)
   {
   WitMsgFacility::current () ("useVRTRealVecMsg");

   if (theVal != doubleMode_)
      stronglyAssert (WitNode::totNodes () == 0);

   doubleMode_ = theVal;
   }

//------------------------------------------------------------------------------

WitVRTRVecIR & WitVRTRealVec::newVRTRVecIR (
      WitProblem * theProblem,
      double       initValue)
   {
   if (doubleMode_)
      return * new WitDblVRTRVecIR (theProblem, initValue);
   else
      return * new WitFltVRTRVecIR (theProblem, initValue);
   }

//------------------------------------------------------------------------------
d257 1
a257 1
// Implementation of class CRTRealVec.
d260 1
a260 1
bool WitCRTRealVec::doubleMode_ = false;
d264 1
a264 1
WitCRTRealVec::WitCRTRealVec (WitProblem * theProblem, double initValue):
d276 1
a276 1
WitCRTRealVec::~WitCRTRealVec ()
d286 1
a286 1
void WitCRTRealVec::copy (const WitCRTRealVec & theCRTRealVec)
d289 1
a289 1
      myDBTRealVec ().copy (theCRTRealVec.myDBTRealVec ());
d291 1
a291 1
      myFBTRealVec ().copy (theCRTRealVec.myFBTRealVec ());
d296 1
a296 1
void WitCRTRealVec::convCopy (const WitTVec <float> & theFltTVec)
d306 1
a306 1
void WitCRTRealVec::convCopy (const WitTVec <double> & theDblTVec)
d316 1
a316 1
void WitCRTRealVec::convCopy (const WitFlexVec <double> & theDblFlexVec)
d326 1
a326 1
void WitCRTRealVec::convCopy (const float * theFltCVec)
d336 1
a336 1
void WitCRTRealVec::setToScalar (double theDbl)
d346 1
a346 1
void WitCRTRealVec::convCopyInto (WitTVec <float> & theFltTVec) const
d356 1
a356 1
void WitCRTRealVec::convCopyInto (WitTVec <double> & theDblTVec) const
d366 1
a366 1
void WitCRTRealVec::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d376 1
a376 1
void WitCRTRealVec::convCopyInto (float * theFltCVec) const
d386 1
a386 1
bool WitCRTRealVec::operator == (double theDbl) const
d396 1
a396 1
bool WitCRTRealVec::operator >= (double theDbl) const
d406 1
a406 1
void WitCRTRealVec::setDoubleMode (bool theVal)
d408 1
a408 1
   WitMsgFacility::current () ("useCRTRealVecMsg");
a413 216
   }

//------------------------------------------------------------------------------
// Implementation of class VRTRVecIR.
//------------------------------------------------------------------------------

WitVRTRVecIR::~WitVRTRVecIR ()
   {
   }

//------------------------------------------------------------------------------

WitVRTRVecIR::WitVRTRVecIR ()
   {
   }

//------------------------------------------------------------------------------
// Implementation of class FltVRTRVecIR.
//------------------------------------------------------------------------------

WitFltVRTRVecIR::WitFltVRTRVecIR (WitProblem * theProblem, double initValue):

      WitVRTRVecIR   (),
      myFltFlexVec_ (theProblem, fltFromDbl (initValue))
   {
   }

//------------------------------------------------------------------------------

WitFltVRTRVecIR::~WitFltVRTRVecIR ()
   {
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::copy (const WitFltVRTRVecIR & theFltVRTRVecIR)
   {
   myFltFlexVec_.copy (theFltVRTRVecIR.myFltFlexVec_);
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::convCopy (const WitTVec <float> & theFltTVec)
   {
   myFltFlexVec_.convCopy (theFltTVec);
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::convCopy (const WitTVec <double> & theDblTVec)
   {
   WitNonClass::convCopy (myFltFlexVec_, theDblTVec);
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::convCopy (const WitFlexVec <double> & theDblFlexVec)
   {
   WitNonClass::convCopy (myFltFlexVec_, theDblFlexVec);
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::convCopy (const float * theFltCVec)
   {
   myFltFlexVec_.convCopy (theFltCVec);
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::setToScalar (double theDbl)
   {
   myFltFlexVec_.setToScalar (fltFromDbl (theDbl));
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::convCopyInto (WitTVec <float> & theFltTVec) const
   {
   myFltFlexVec_.convCopyInto (theFltTVec);
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::convCopyInto (WitTVec <double> & theDblTVec) const
   {
   WitNonClass::convCopy (theDblTVec, myFltFlexVec_);
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
   {
   theFltFlexVec.copy (myFltFlexVec_);
   }

//------------------------------------------------------------------------------

void WitFltVRTRVecIR::convCopyInto (float * theFltCVec) const
   {
   myFltFlexVec_.convCopyInto (theFltCVec);
   }

//------------------------------------------------------------------------------

bool WitFltVRTRVecIR::operator == (double theDbl) const
   {
   return myFltFlexVec_ == fltFromDbl (theDbl);
   }

//------------------------------------------------------------------------------

bool WitFltVRTRVecIR::operator >= (double theDbl) const
   {
   return myFltFlexVec_ >= fltFromDbl (theDbl);
   }

//------------------------------------------------------------------------------
// Implementation of class DblVRTRVecIR.
//------------------------------------------------------------------------------

WitDblVRTRVecIR::WitDblVRTRVecIR (WitProblem * theProblem, double initValue):

      WitVRTRVecIR   (),
      myDblFlexVec_ (theProblem, initValue)
   {
   }

//------------------------------------------------------------------------------

WitDblVRTRVecIR::~WitDblVRTRVecIR ()
   {
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::copy (const WitDblVRTRVecIR & theDblVRTRVecIR)
   {
   myDblFlexVec_.copy (theDblVRTRVecIR.myDblFlexVec_);
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::convCopy (const WitTVec <float> & theFltTVec)
   {
   WitNonClass::convCopy (myDblFlexVec_, theFltTVec);
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::convCopy (const WitTVec <double> & theDblTVec)
   {
   myDblFlexVec_.convCopy (theDblTVec);
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::convCopy (const WitFlexVec <double> & theDblFlexVec)
   {
   myDblFlexVec_.copy (theDblFlexVec);
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::convCopy (const float * theFltCVec)
   {
   WitNonClass::convCopy (myDblFlexVec_, theFltCVec);
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::setToScalar (double theDbl)
   {
   myDblFlexVec_.setToScalar (theDbl);
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::convCopyInto (WitTVec <float> & theFltTVec) const
   {
   WitNonClass::convCopy (theFltTVec, myDblFlexVec_);
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::convCopyInto (WitTVec <double> & theDblTVec) const
   {
   myDblFlexVec_.convCopyInto (theDblTVec);
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
   {
   WitNonClass::convCopy (theFltFlexVec, myDblFlexVec_);
   }

//------------------------------------------------------------------------------

void WitDblVRTRVecIR::convCopyInto (float * theFltCVec) const
   {
   WitNonClass::convCopy (theFltCVec, myDblFlexVec_);
   }

//------------------------------------------------------------------------------

bool WitDblVRTRVecIR::operator == (double theDbl) const
   {
   return myDblFlexVec_ == theDbl;
   }

//------------------------------------------------------------------------------

bool WitDblVRTRVecIR::operator >= (double theDbl) const
   {
   return myDblFlexVec_ >= theDbl;
@


1.17
log
@Double Precision.
@
text
@d15 1
a15 1
//    RTRealVec.
d18 4
a21 3
//    RTRVecIR.
//    FltRTRVecIR.
//    DblRTRVecIR.
d29 1
a29 1
// Implementation of class RTRealVec.
d32 1
a32 1
bool WitRTRealVec::doubleMode_ = false;
d36 1
a36 1
WitRTRealVec::WitRTRealVec (WitProblem * theProblem, double initValue):
d38 1
a38 1
      myIR_ (newRTRVecIR (theProblem, initValue))
d44 1
a44 1
WitRTRealVec::~WitRTRealVec ()
d51 1
a51 1
void WitRTRealVec::copy (const WitRTRealVec & theRTRealVec)
d54 1
a54 1
      myDblIR ().copy (theRTRealVec.myDblIR ());
d56 1
a56 1
      myFltIR ().copy (theRTRealVec.myFltIR ());
d61 1
a61 1
void WitRTRealVec::convCopy (const WitTVec <float> & theFltTVec)
d68 1
a68 1
void WitRTRealVec::convCopy (const WitTVec <double> & theDblTVec)
d75 1
a75 1
void WitRTRealVec::convCopy (const WitFlexVec <double> & theDblFlexVec)
d82 1
a82 1
void WitRTRealVec::convCopy (const float * theFltCVec)
d89 1
a89 1
void WitRTRealVec::setToScalar (double theDbl)
d96 1
a96 1
void WitRTRealVec::convCopyInto (WitTVec <float> & theFltTVec) const
d103 1
a103 1
void WitRTRealVec::convCopyInto (WitTVec <double> & theDblTVec) const
d110 1
a110 1
void WitRTRealVec::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d117 1
a117 1
void WitRTRealVec::convCopyInto (float * theFltCVec) const
d124 1
a124 1
bool WitRTRealVec::operator == (double theDbl) const
d131 1
a131 1
bool WitRTRealVec::operator >= (double theDbl) const
d138 1
a138 1
void WitRTRealVec::setDoubleMode (bool theVal)
d140 1
a140 1
   WitMsgFacility::current () ("useRTRealVecMsg");
d150 1
a150 1
WitRTRVecIR & WitRTRealVec::newRTRVecIR (
d155 1
a155 1
      return * new WitDblRTRVecIR (theProblem, initValue);
d157 1
a157 1
      return * new WitFltRTRVecIR (theProblem, initValue);
d393 1
a393 1
// Implementation of class RTRVecIR.
d396 161
a556 1
WitRTRVecIR::~WitRTRVecIR ()
d562 1
a562 1
WitRTRVecIR::WitRTRVecIR ()
d567 1
a567 1
// Implementation of class FltRTRVecIR.
d570 1
a570 1
WitFltRTRVecIR::WitFltRTRVecIR (WitProblem * theProblem, double initValue):
d572 1
a572 1
      WitRTRVecIR   (),
d579 1
a579 1
WitFltRTRVecIR::~WitFltRTRVecIR ()
d585 1
a585 1
void WitFltRTRVecIR::copy (const WitFltRTRVecIR & theFltRTRVecIR)
d587 1
a587 1
   myFltFlexVec_.copy (theFltRTRVecIR.myFltFlexVec_);
d592 1
a592 1
void WitFltRTRVecIR::convCopy (const WitTVec <float> & theFltTVec)
d599 1
a599 1
void WitFltRTRVecIR::convCopy (const WitTVec <double> & theDblTVec)
d606 1
a606 1
void WitFltRTRVecIR::convCopy (const WitFlexVec <double> & theDblFlexVec)
d613 1
a613 1
void WitFltRTRVecIR::convCopy (const float * theFltCVec)
d620 1
a620 1
void WitFltRTRVecIR::setToScalar (double theDbl)
d627 1
a627 1
void WitFltRTRVecIR::convCopyInto (WitTVec <float> & theFltTVec) const
d634 1
a634 1
void WitFltRTRVecIR::convCopyInto (WitTVec <double> & theDblTVec) const
d641 1
a641 1
void WitFltRTRVecIR::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d648 1
a648 1
void WitFltRTRVecIR::convCopyInto (float * theFltCVec) const
d655 1
a655 1
bool WitFltRTRVecIR::operator == (double theDbl) const
d662 1
a662 1
bool WitFltRTRVecIR::operator >= (double theDbl) const
d668 1
a668 1
// Implementation of class DblRTRVecIR.
d671 1
a671 1
WitDblRTRVecIR::WitDblRTRVecIR (WitProblem * theProblem, double initValue):
d673 1
a673 1
      WitRTRVecIR   (),
d680 1
a680 1
WitDblRTRVecIR::~WitDblRTRVecIR ()
d686 1
a686 1
void WitDblRTRVecIR::copy (const WitDblRTRVecIR & theDblRTRVecIR)
d688 1
a688 1
   myDblFlexVec_.copy (theDblRTRVecIR.myDblFlexVec_);
d693 1
a693 1
void WitDblRTRVecIR::convCopy (const WitTVec <float> & theFltTVec)
d700 1
a700 1
void WitDblRTRVecIR::convCopy (const WitTVec <double> & theDblTVec)
d707 1
a707 1
void WitDblRTRVecIR::convCopy (const WitFlexVec <double> & theDblFlexVec)
d714 1
a714 1
void WitDblRTRVecIR::convCopy (const float * theFltCVec)
d721 1
a721 1
void WitDblRTRVecIR::setToScalar (double theDbl)
d728 1
a728 1
void WitDblRTRVecIR::convCopyInto (WitTVec <float> & theFltTVec) const
d735 1
a735 1
void WitDblRTRVecIR::convCopyInto (WitTVec <double> & theDblTVec) const
d742 1
a742 1
void WitDblRTRVecIR::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d749 1
a749 1
void WitDblRTRVecIR::convCopyInto (float * theFltCVec) const
d756 1
a756 1
bool WitDblRTRVecIR::operator == (double theDbl) const
d763 1
a763 1
bool WitDblRTRVecIR::operator >= (double theDbl) const
@


1.16
log
@Double Precision.
@
text
@d15 6
a20 5
//    ModeRV.
//    FixedRV.
//    RealVecIR.
//    FltRealVecIR.
//    DblRealVecIR.
d25 1
d28 1
a28 1
// Implementation of class ModeRV.
d31 1
a31 1
bool WitModeRV::doubleMode_ = false;
d35 1
a35 1
WitModeRV::WitModeRV (WitProblem * theProblem, double initValue):
d37 1
a37 1
      myIR_ (newRealVecIR (theProblem, initValue))
d43 1
a43 1
WitModeRV::~WitModeRV ()
d50 1
a50 1
void WitModeRV::copy (const WitModeRV & theModeRV)
d53 1
a53 1
      myDblIR ().copy (theModeRV.myDblIR ());
d55 1
a55 1
      myFltIR ().copy (theModeRV.myFltIR ());
d60 1
a60 1
void WitModeRV::convCopy (const WitTVec <float> & theFltTVec)
d67 1
a67 1
void WitModeRV::convCopy (const WitTVec <double> & theDblTVec)
d74 1
a74 1
void WitModeRV::convCopy (const WitFlexVec <double> & theDblFlexVec)
d81 1
a81 1
void WitModeRV::convCopy (const float * theFltCVec)
d88 1
a88 1
void WitModeRV::setToScalar (double theDbl)
d95 1
a95 8
void WitModeRV::incElem (WitPeriod thePer, double theDbl)
   {
   myIR_.incElem (thePer, theDbl);
   }

//------------------------------------------------------------------------------

void WitModeRV::convCopyInto (WitTVec <float> & theFltTVec) const
d102 1
a102 1
void WitModeRV::convCopyInto (WitTVec <double> & theDblTVec) const
d109 1
a109 1
void WitModeRV::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d116 1
a116 1
void WitModeRV::convCopyInto (float * theFltCVec) const
d123 1
a123 1
bool WitModeRV::operator == (double theDbl) const
d130 1
a130 1
bool WitModeRV::operator >= (double theDbl) const
d137 1
a137 1
void WitModeRV::setDoubleMode (bool theVal)
d139 2
d149 1
a149 1
WitRealVecIR & WitModeRV::newRealVecIR (
d154 1
a154 1
      return * new WitDblRealVecIR (theProblem, initValue);
d156 1
a156 1
      return * new WitFltRealVecIR (theProblem, initValue);
d160 1
a160 1
// Implementation of class FixedRV.
d163 1
a163 1
bool WitFixedRV::doubleMode_ = false;
d167 1
a167 1
WitFixedRV::WitFixedRV (WitProblem * theProblem, double initValue):
d175 1
a175 1
WitFixedRV::~WitFixedRV ()
d181 1
a181 1
void WitFixedRV::copy (const WitFixedRV & theFixedRV)
d183 1
a183 1
   myFltFlexVec_.copy (theFixedRV.myFltFlexVec_);
d188 1
a188 1
void WitFixedRV::convCopy (const WitTVec <float> & theFltTVec)
d195 1
a195 1
void WitFixedRV::convCopy (const WitTVec <double> & theDblTVec)
d202 1
a202 1
void WitFixedRV::convCopy (const WitFlexVec <double> & theDblFlexVec)
d209 1
a209 1
void WitFixedRV::convCopy (const float * theFltCVec)
d216 1
a216 1
void WitFixedRV::setToScalar (double theDbl)
d223 1
a223 8
void WitFixedRV::incElem (WitPeriod thePer, double theDbl)
   {
   myFltFlexVec_.elemRef (thePer) += theDbl;
   }

//------------------------------------------------------------------------------

void WitFixedRV::convCopyInto (WitTVec <float> & theFltTVec) const
d230 1
a230 1
void WitFixedRV::convCopyInto (WitTVec <double> & theDblTVec) const
d237 1
a237 1
void WitFixedRV::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d244 1
a244 1
void WitFixedRV::convCopyInto (float * theFltCVec) const
d251 1
a251 1
bool WitFixedRV::operator == (double theDbl) const
d258 1
a258 1
bool WitFixedRV::operator >= (double theDbl) const
d265 82
a346 1
void WitFixedRV::setDoubleMode (bool theVal)
d348 37
d392 1
a392 1
// Implementation of class RealVecIR.
d395 1
a395 1
WitRealVecIR::~WitRealVecIR ()
d401 1
a401 1
WitRealVecIR::WitRealVecIR ()
d406 1
a406 1
// Implementation of class FltRealVecIR.
d409 1
a409 1
WitFltRealVecIR::WitFltRealVecIR (WitProblem * theProblem, double initValue):
d411 1
a411 1
      WitRealVecIR  (),
d418 1
a418 1
WitFltRealVecIR::~WitFltRealVecIR ()
d424 1
a424 1
void WitFltRealVecIR::copy (const WitFltRealVecIR & theFltRealVecIR)
d426 1
a426 1
   myFltFlexVec_.copy (theFltRealVecIR.myFltFlexVec_);
d431 1
a431 1
void WitFltRealVecIR::convCopy (const WitTVec <float> & theFltTVec)
d438 1
a438 1
void WitFltRealVecIR::convCopy (const WitTVec <double> & theDblTVec)
d445 1
a445 1
void WitFltRealVecIR::convCopy (const WitFlexVec <double> & theDblFlexVec)
d452 1
a452 1
void WitFltRealVecIR::convCopy (const float * theFltCVec)
d459 1
a459 1
void WitFltRealVecIR::setToScalar (double theDbl)
d466 1
a466 8
void WitFltRealVecIR::incElem (WitPeriod thePer, double theDbl)
   {
   myFltFlexVec_.elemRef (thePer) += theDbl;
   }

//------------------------------------------------------------------------------

void WitFltRealVecIR::convCopyInto (WitTVec <float> & theFltTVec) const
d473 1
a473 1
void WitFltRealVecIR::convCopyInto (WitTVec <double> & theDblTVec) const
d480 1
a480 1
void WitFltRealVecIR::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d487 1
a487 1
void WitFltRealVecIR::convCopyInto (float * theFltCVec) const
d494 1
a494 1
bool WitFltRealVecIR::operator == (double theDbl) const
d501 1
a501 1
bool WitFltRealVecIR::operator >= (double theDbl) const
d507 1
a507 1
// Implementation of class DblRealVecIR.
d510 1
a510 1
WitDblRealVecIR::WitDblRealVecIR (WitProblem * theProblem, double initValue):
d512 1
a512 1
      WitRealVecIR  (),
d519 1
a519 1
WitDblRealVecIR::~WitDblRealVecIR ()
d525 1
a525 1
void WitDblRealVecIR::copy (const WitDblRealVecIR & theDblRealVecIR)
d527 1
a527 1
   myDblFlexVec_.copy (theDblRealVecIR.myDblFlexVec_);
d532 1
a532 1
void WitDblRealVecIR::convCopy (const WitTVec <float> & theFltTVec)
d539 1
a539 1
void WitDblRealVecIR::convCopy (const WitTVec <double> & theDblTVec)
d546 1
a546 1
void WitDblRealVecIR::convCopy (const WitFlexVec <double> & theDblFlexVec)
d553 1
a553 1
void WitDblRealVecIR::convCopy (const float * theFltCVec)
d560 1
a560 1
void WitDblRealVecIR::setToScalar (double theDbl)
d567 1
a567 8
void WitDblRealVecIR::incElem (WitPeriod thePer, double theDbl)
   {
   myDblFlexVec_.elemRef (thePer) += theDbl;
   }

//------------------------------------------------------------------------------

void WitDblRealVecIR::convCopyInto (WitTVec <float> & theFltTVec) const
d574 1
a574 1
void WitDblRealVecIR::convCopyInto (WitTVec <double> & theDblTVec) const
d581 1
a581 1
void WitDblRealVecIR::convCopyInto (WitFlexVec <float> & theFltFlexVec) const
d588 1
a588 1
void WitDblRealVecIR::convCopyInto (float * theFltCVec) const
d595 1
a595 1
bool WitDblRealVecIR::operator == (double theDbl) const
d602 1
a602 1
bool WitDblRealVecIR::operator >= (double theDbl) const
@


1.15
log
@Double Precision.
@
text
@d93 7
d226 7
d358 7
d462 7
@


1.14
log
@Double Precision.
@
text
@a47 7
void WitModeRV::setElem (WitPeriod thePer, double theDbl)
   {
   myIR_.setElem (thePer, theDbl);
   }

//------------------------------------------------------------------------------

d107 7
d233 7
a308 7
void WitFltRealVecIR::setElem (WitPeriod thePer, double theDbl)
   {
   myFltFlexVec_.elemRef (thePer) = fltFromDbl (theDbl);
   }

//------------------------------------------------------------------------------

d358 7
a409 7
void WitDblRealVecIR::setElem (WitPeriod thePer, double theDbl)
   {
   myDblFlexVec_.elemRef (thePer) = theDbl;
   }

//------------------------------------------------------------------------------

d455 7
@


1.13
log
@Double Precision.
@
text
@d65 1
a65 1
void WitModeRV::copyFltTVec (const WitTVec <float> & theFltTVec)
d67 1
a67 1
   myIR_.copyFltTVec (theFltTVec);
d72 1
a72 1
void WitModeRV::copyDblTVec (const WitTVec <double> & theDblTVec)
d74 1
a74 1
   myIR_.copyDblTVec (theDblTVec);
d79 1
a79 1
void WitModeRV::copyDblFlexVec (const WitFlexVec <double> & theDblFlexVec)
d81 1
a81 1
   myIR_.copyDblFlexVec (theDblFlexVec);
d86 1
a86 1
void WitModeRV::copyFltCVec (const float * theFltCVec)
d88 1
a88 1
   myIR_.copyFltCVec (theFltCVec);
d100 1
a100 1
void WitModeRV::copyIntoFltTVec (WitTVec <float> & theFltTVec) const
d102 1
a102 1
   myIR_.copyIntoFltTVec (theFltTVec);
d107 1
a107 1
void WitModeRV::copyIntoDblTVec (WitTVec <double> & theDblTVec) const
d109 1
a109 1
   myIR_.copyIntoDblTVec (theDblTVec);
d114 1
a114 1
void WitModeRV::copyIntoFltCVec (float * theFltCVec) const
d116 1
a116 1
   myIR_.copyIntoFltCVec (theFltCVec);
d184 1
a184 1
void WitFixedRV::copyFltTVec (const WitTVec <float> & theFltTVec)
d186 1
a186 1
   myFltFlexVec_.copyTVec (theFltTVec);
d191 1
a191 1
void WitFixedRV::copyDblTVec (const WitTVec <double> & theDblTVec)
d193 1
a193 1
   convCopy (myFltFlexVec_, theDblTVec);
d198 1
a198 1
void WitFixedRV::copyDblFlexVec (const WitFlexVec <double> & theDblFlexVec)
d200 1
a200 1
   convCopy (myFltFlexVec_, theDblFlexVec);
d205 1
a205 1
void WitFixedRV::copyFltCVec (const float * theFltCVec)
d207 1
a207 1
   myFltFlexVec_.copyCVec (theFltCVec);
d219 1
a219 1
void WitFixedRV::copyIntoFltTVec (WitTVec <float> & theFltTVec) const
d221 1
a221 1
   myFltFlexVec_.copyIntoTVec (theFltTVec);
d226 1
a226 1
void WitFixedRV::copyIntoDblTVec (WitTVec <double> & theDblTVec) const
d228 1
a228 1
   convCopy (theDblTVec, myFltFlexVec_);
d233 1
a233 1
void WitFixedRV::copyIntoFltCVec (float * theFltCVec) const
d235 1
a235 1
   myFltFlexVec_.copyIntoCVec (theFltCVec);
d309 1
a309 1
void WitFltRealVecIR::copyFltTVec (const WitTVec <float> & theFltTVec)
d311 1
a311 1
   myFltFlexVec_.copyTVec (theFltTVec);
d316 1
a316 1
void WitFltRealVecIR::copyDblTVec (const WitTVec <double> & theDblTVec)
d318 1
a318 1
   convCopy (myFltFlexVec_, theDblTVec);
d323 1
a323 1
void WitFltRealVecIR::copyDblFlexVec (const WitFlexVec <double> & theDblFlexVec)
d325 1
a325 1
   convCopy (myFltFlexVec_, theDblFlexVec);
d330 1
a330 1
void WitFltRealVecIR::copyFltCVec (const float * theFltCVec)
d332 1
a332 1
   myFltFlexVec_.copyCVec (theFltCVec);
d344 1
a344 1
void WitFltRealVecIR::copyIntoFltTVec (WitTVec <float> & theFltTVec) const
d346 1
a346 1
   myFltFlexVec_.copyIntoTVec (theFltTVec);
d351 1
a351 1
void WitFltRealVecIR::copyIntoDblTVec (WitTVec <double> & theDblTVec) const
d353 1
a353 1
   convCopy (theDblTVec, myFltFlexVec_);
d358 1
a358 1
void WitFltRealVecIR::copyIntoFltCVec (float * theFltCVec) const
d360 1
a360 1
   myFltFlexVec_.copyIntoCVec (theFltCVec);
d410 1
a410 1
void WitDblRealVecIR::copyFltTVec (const WitTVec <float> & theFltTVec)
d412 1
a412 1
   convCopy (myDblFlexVec_, theFltTVec);
d417 1
a417 1
void WitDblRealVecIR::copyDblTVec (const WitTVec <double> & theDblTVec)
d419 1
a419 1
   myDblFlexVec_.copyTVec (theDblTVec);
d424 1
a424 1
void WitDblRealVecIR::copyDblFlexVec (const WitFlexVec <double> & theDblFlexVec)
d431 1
a431 1
void WitDblRealVecIR::copyFltCVec (const float * theFltCVec)
d433 1
a433 1
   convCopy (myDblFlexVec_, theFltCVec);
d445 1
a445 1
void WitDblRealVecIR::copyIntoFltTVec (WitTVec <float> & theFltTVec) const
d447 1
a447 1
   convCopy (theFltTVec, myDblFlexVec_);
d452 1
a452 1
void WitDblRealVecIR::copyIntoDblTVec (WitTVec <double> & theDblTVec) const
d454 1
a454 1
   myDblFlexVec_.copyIntoTVec (theDblTVec);
d459 1
a459 1
void WitDblRealVecIR::copyIntoFltCVec (float * theFltCVec) const
d461 1
a461 1
   convCopy (theFltCVec, myDblFlexVec_);
@


1.12
log
@Double Precision.
@
text
@d193 1
a193 1
   copyInto (myFltFlexVec_, theDblTVec);
d200 1
a200 1
   copyInto (myFltFlexVec_, theDblFlexVec);
d228 1
a228 1
   copyInto (theDblTVec, myFltFlexVec_);
d318 1
a318 1
   copyInto (myFltFlexVec_, theDblTVec);
d325 1
a325 1
   copyInto (myFltFlexVec_, theDblFlexVec);
d353 1
a353 1
   copyInto (theDblTVec, myFltFlexVec_);
d412 1
a412 1
   copyInto (myDblFlexVec_, theFltTVec);
d433 1
a433 1
   copyInto (myDblFlexVec_, theFltCVec);
d447 1
a447 1
   copyInto (theFltTVec, myDblFlexVec_);
d461 1
a461 1
   copyInto (theFltCVec, myDblFlexVec_);
@


1.11
log
@Double Precision.
@
text
@d165 1
a165 1
      myFltFlexVec_ (theProblem, floatFromDouble (initValue))
d214 1
a214 1
   myFltFlexVec_.setToScalar (floatFromDouble (theDbl));
d242 1
a242 1
   return myFltFlexVec_ == floatFromDouble (theDbl);
d249 1
a249 1
   return myFltFlexVec_ >= floatFromDouble (theDbl);
d283 1
a283 1
      myFltFlexVec_ (theProblem, floatFromDouble (initValue))
d304 1
a304 1
   myFltFlexVec_.elemRef (thePer) = floatFromDouble (theDbl);
d339 1
a339 1
   myFltFlexVec_.setToScalar (floatFromDouble (theDbl));
d367 1
a367 1
   return myFltFlexVec_ == floatFromDouble (theDbl);
d374 1
a374 1
   return myFltFlexVec_ >= floatFromDouble (theDbl);
@


1.10
log
@Double Precision.
@
text
@d207 1
a207 1
   myFltFlexVec_.copyCvector (theFltCVec);
d235 1
a235 1
   myFltFlexVec_.copyIntoCvector (theFltCVec);
d332 1
a332 1
   myFltFlexVec_.copyCvector (theFltCVec);
d360 1
a360 1
   myFltFlexVec_.copyIntoCvector (theFltCVec);
@


1.9
log
@Double Precision.
@
text
@d48 7
d79 7
d198 7
d302 7
d323 7
d403 7
d420 7
@


1.8
log
@Double Precision.
@
text
@d58 1
a58 1
void WitModeRV::copyIntoFltTVec (WitTVec <float> & theFltTVec) const
d60 1
a60 1
   myIR_.copyIntoFltTVec (theFltTVec);
d65 1
a65 1
void WitModeRV::copyIntoDblTVec (WitTVec <double> & theDblTVec) const
d67 1
a67 1
   myIR_.copyIntoDblTVec (theDblTVec);
d79 21
d114 7
d170 1
a170 1
void WitFixedRV::copyIntoFltTVec (WitTVec <float> & theFltTVec) const
d172 1
a172 1
   myFltFlexVec_.copyIntoTVec (theFltTVec);
d177 1
a177 1
void WitFixedRV::copyIntoDblTVec (WitTVec <double> & theDblTVec) const
d179 1
a179 1
   copyInto (theDblTVec, myFltFlexVec_);
d191 21
d226 7
d281 1
a281 1
void WitFltRealVecIR::copyIntoFltTVec (WitTVec <float> & theFltTVec) const
d283 1
a283 1
   myFltFlexVec_.copyIntoTVec (theFltTVec);
d288 1
a288 1
void WitFltRealVecIR::copyIntoDblTVec (WitTVec <double> & theDblTVec) const
d290 1
a290 1
   copyInto (theDblTVec, myFltFlexVec_);
d302 21
d336 7
d368 1
a368 1
void WitDblRealVecIR::copyIntoFltTVec (WitTVec <float> & theFltTVec) const
d370 1
a370 1
   copyInto (theFltTVec, myDblFlexVec_);
d375 1
a375 1
void WitDblRealVecIR::copyIntoDblTVec (WitTVec <double> & theDblTVec) const
d377 1
a377 1
   myDblFlexVec_.copyIntoTVec (theDblTVec);
d389 21
d420 7
@


1.7
log
@Double Precision.
@
text
@d48 10
d65 7
d86 7
d123 1
a123 1
      myFlexVec_ (theProblem, floatFromDouble (initValue))
d135 7
d144 8
a151 1
   myFlexVec_.copyIntoTVec (theFltTVec);
d158 1
a158 1
   myFlexVec_.copyCvector (theFltCVec);
d165 8
a172 1
   myFlexVec_.copyIntoCvector (theFltCVec);
d206 1
a206 1
      myFlexVec_    (theProblem, floatFromDouble (initValue))
d218 7
d227 8
a234 1
   myFlexVec_.copyIntoTVec (theFltTVec);
d241 1
a241 1
   myFlexVec_.copyCvector (theFltCVec);
d248 8
a255 1
   myFlexVec_.copyIntoCvector (theFltCVec);
d265 1
a265 1
      myFlexVec_    (theProblem, initValue)
d277 7
d286 8
a293 1
   copyInto (theFltTVec, myFlexVec_);
d300 1
a300 1
   copyInto (myFlexVec_, theFltCVec);
d307 8
a314 1
   copyInto (theFltCVec, myFlexVec_);
@


1.6
log
@Double Precision.
@
text
@d48 7
d111 7
d173 7
d207 7
@


1.5
log
@Double Precision.
@
text
@d15 2
a16 1
//    RealVec.
d26 1
a26 1
// Implementation of class RealVec.
d29 1
a29 1
bool WitRealVec::doubleMode_ = false;
d33 1
a33 1
WitRealVec::WitRealVec (WitProblem * theProblem, double initValue):
d41 1
a41 1
WitRealVec::~WitRealVec ()
d48 1
a48 1
void WitRealVec::copyFltCVec (const float * theFltCVec)
d55 1
a55 1
void WitRealVec::copyIntoFltCVec (float * theFltCVec) const
d62 1
a62 1
void WitRealVec::setDoubleMode (bool theVal)
d72 1
a72 1
WitRealVecIR & WitRealVec::newRealVecIR (
d80 44
@


1.4
log
@Double Precision.
@
text
@d22 1
d63 2
a64 1
   witAssert (WitProblem::nInstances () == 0);
@


1.3
log
@Double Precision.
@
text
@d46 14
d111 14
d139 14
@


1.2
log
@Double Precision.
@
text
@a21 1
#include <Session.h>
d27 4
d46 9
d59 1
a59 1
   if (WitSession::doubleMode ())
@


1.1
log
@Double Precision.
@
text
@d15 4
a18 4
//    Wit::RealVec.
//    Wit::RealVecRI.
//    Wit::FltRealVecRI.
//    Wit::DblRealVecRI.
d25 1
a25 1
// Implementation of class Wit::RealVec.
d28 1
a28 1
RealVec::RealVec (WitProblem * theProblem, double initValue):
d36 1
a36 1
RealVec::~RealVec ()
d43 3
a45 1
RealVecIR & RealVec::newRealVecIR (WitProblem * theProblem, double initValue)
d48 1
a48 1
      return * new DblRealVecIR (theProblem, initValue);
d50 1
a50 1
      return * new FltRealVecIR (theProblem, initValue);
d54 1
a54 1
// Implementation of class Wit::RealVecIR.
d57 1
a57 1
RealVecIR::~RealVecIR ()
d63 1
a63 1
RealVecIR::RealVecIR ()
d68 1
a68 1
// Implementation of class Wit::FltRealVecIR.
d71 1
a71 1
FltRealVecIR::FltRealVecIR (WitProblem * theProblem, double initValue):
d73 2
a74 2
      RealVecIR  (),
      myFlexVec_ (theProblem, floatFromDouble (initValue))
d80 1
a80 1
FltRealVecIR::~FltRealVecIR ()
d85 1
a85 1
// Implementation of class Wit::DblRealVecIR.
d88 1
a88 1
DblRealVecIR::DblRealVecIR (WitProblem * theProblem, double initValue):
d90 2
a91 2
      RealVecIR  (),
      myFlexVec_ (theProblem, initValue)
d97 1
a97 1
DblRealVecIR::~DblRealVecIR ()
@

