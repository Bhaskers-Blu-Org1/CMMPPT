head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2005.01.10.22.34.47;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.31.18.28.28;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.22.22.27.10;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.20.18.36.24;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.17.21.53.01;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.16.23.35.17;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.15.23.50.11;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.15.20.20.50;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.14.22.37.10;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.13.23.35.48;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.10.16.49.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.09.23.57.02;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.06.22.38.15;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Low-Pri Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PoCandH
#define PoCandH

//------------------------------------------------------------------------------
// Header file: "PoCand.h"
//
// Contains the declaration of class PoCand.
//------------------------------------------------------------------------------

#include <SelCand.h>

//------------------------------------------------------------------------------
// Class PoCand
//
// "Proportionate Routing Candidate"
// Represents a candidate for selection by proportionate routing.
// In this case, the selection candidate specifies whether the RtCand for the
// PoPt that selects this PoCand is currently active for proportionate
// explosions from the corresponding RtSite in the corresponding period.
// Old Version
//
// Class Hierarchy:
//
// SelCand
//    PoCand
//
// Implemented in PropOt.C.
//------------------------------------------------------------------------------

class WitPoCand: public WitSelCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPoCand (bool, bool, WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPoCand ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void prtID     ();
      virtual void getPoData (bool &, bool &);
         //
         // Overrides from class SelCand.

      noCopyCtorAssign (WitPoCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const bool active_;
         //
         // For any PoPt that selects this PoCand, the PoPt's RtCand is
         // currently active for proportionate explosions in the PtPt's period,
         // iff active_ is true.

      const bool potActive_;
         //
         // For any PoPt that selects this PoCand, the PoPt's RtCand is
         // considered to be potentially active for proportionate explosions in 
         // the PtPt's period, iff potActive_ is true.
   };

#endif

@


1.13
log
@Low-Pri Prop-Rt.
@
text
@@


1.12
log
@Low-Pri Prop-Rt.
@
text
@d47 1
a47 1
      WitPoCand (WitPoPt *);
d61 2
a62 3
      virtual void prtID            ();
      virtual void restoreSelToThis ();
      virtual void getPoData        (bool &, bool &);
a71 4
      WitPoPt * const myPoPt_;
         //
         // The PoPt at which this PoCand represents a candidate for selection.

@


1.11
log
@Low-Pri Prop-Rt.
@
text
@a61 1
      virtual void updateToCurSel   ();
d77 1
a77 1
      bool active_;
d83 1
a83 1
      bool potActive_;
@


1.10
log
@Low-Pri Prop-Rt.
@
text
@d29 1
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@a47 7
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, active)
      accessFunc (bool, potActive)

d60 4
a63 4
      virtual void        prtID            ();
      virtual void        updateToCurSel   ();
      virtual void        restoreSelToThis ();
      virtual WitPoCand * myPoCand         ();
d65 1
a65 1
         // Override from class SelCand.
@


1.8
log
@Low-Pri Prop-Rt.
@
text
@d46 1
a46 1
      WitPoCand (WitPoSelMgr *);
d49 1
a49 1
      // Destructor function.
d52 4
a55 1
      virtual ~WitPoCand ();
d58 1
a58 1
      // Data access functions.
d61 1
a61 4
      accessFunc (bool, activeForPR)
      accessFunc (bool, potActiveForPR)

   private:
d64 1
a64 1
      // Private member functions.
d68 1
a70 1
      virtual void        setToCurSelOf    (WitPoPt *);
d80 1
a80 1
      WitPoPt * myPoPt_;
a82 1
         // Valid only when this PoCand is active.
d84 1
a84 1
      bool activeForPR_;
d88 1
a88 2
         // iff activeForPR_ is true.
         // Valid only when this PoCand is active.
d90 1
a90 1
      bool potActiveForPR_;
d94 1
a94 2
         // the PtPt's period, iff potActiveForPR_ is true.
         // Valid only when this PoCand is active.
d98 1
@


1.7
log
@Low-Pri Prop-Rt.
@
text
@d67 4
a70 3
      virtual void        prtID         ();
      virtual WitPoCand * myPoCand      ();
      virtual void        setToCurSelOf (WitPoPt *);
d80 5
d90 1
d97 1
@


1.6
log
@Low-Pri Prop-Rt.
@
text
@a54 8
      // Other public member functions.
      //------------------------------------------------------------------------

      void setToCurSel (WitPoPt * thePoPt);
         //
         // Sets this PoCand to represent the current selection at thePoPt.

      //------------------------------------------------------------------------
d67 3
a69 2
      virtual void        prtID    ();
      virtual WitPoCand * myPoCand ();
@


1.5
log
@Low-Pri Prop-Rt.
@
text
@d66 2
a67 2
      accessFunc (bool, active)
      accessFunc (bool, potActive)
d86 1
a86 1
      bool active_;
d90 1
a90 1
         // iff active_ is true.
d92 1
a92 1
      bool potActive_;
d96 1
a96 1
         // the PtPt's period, iff potActive_ is true.
@


1.4
log
@Low-Pri Prop-Rt.
@
text
@d46 1
a46 1
      WitPoCand (bool activeVal, bool potActiveVal, WitPoSelMgr *);
d54 15
d75 2
a76 1
      virtual void prtID ();
@


1.3
log
@Low-Pri Prop-Rt.
@
text
@d46 1
a46 1
      WitPoCand (bool activeVal, bool potActiveVal, WitProblem *);
d70 1
a70 1
      const bool active_;
d76 1
a76 1
      const bool potActive_;
@


1.2
log
@Low-Pri Prop-Rt.
@
text
@a53 6
      //------------------------------------------------------------------------
      // Overrides from class SelCand.
      //------------------------------------------------------------------------

      virtual void prtID ();

d60 4
@


1.1
log
@Low-Pri Prop-Rt.
@
text
@d58 1
a58 9
      virtual void        prtID    ();
      virtual WitPoCand * myPoCand ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, active)
      accessFunc (bool, potActive)
@

