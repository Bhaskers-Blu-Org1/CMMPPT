head	1.38;
access;
symbols;
locks; strict;
comment	@ * @;


1.38
date	2006.03.13.17.02.23;	author rjw;	state dead;
branches;
next	1.37;

1.37
date	2006.03.11.00.03.45;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2006.03.10.23.23.30;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2006.03.10.17.14.19;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2006.03.10.16.19.58;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2006.03.09.23.59.36;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2006.03.09.21.51.59;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2006.03.06.19.59.47;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2006.03.03.23.16.29;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.03.22.22.05;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2006.03.03.21.01.02;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2006.03.03.20.46.56;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.27.21.19.54;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2006.02.27.18.28.12;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.02.25.00.12.43;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.24.20.20.45;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.02.24.00.22.26;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.23.22.42.10;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.10.23.36.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.02.07.21.45.06;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.03.21.49.05;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.01.20.45.46;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.01.27.21.14.35;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.26.22.10.56;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.25.22.16.42;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.25.20.32.26;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.24.22.59.40;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.24.22.03.14;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.23.20.54.05;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.20.18.52.54;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.20.17.00.47;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.19.20.43.04;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.18.20.02.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.16.23.44.22;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.16.22.39.43;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.13.20.23.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.23.10.47;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.11.23.30.14;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.38
log
@GPIP
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpBuilderH
#define SrpBuilderH

//------------------------------------------------------------------------------
// Header file: "SrpBuilder.h"
//
// Contains the declaration of class GpipBldr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>
#include <Mapping.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class GpipBldr
// "Group Post-Implosion Pegging Builder"
//
// Responsible for building a group post-implosion pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    GpipBldr
//
// Implemented on SRP.C.
//------------------------------------------------------------------------------

class WitGpipBldr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitGpipBldr (WitPipPgg *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitGpipBldr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void buildPegging ();
         //
         // Builds the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void checkRestrictions ();
         //
         // Verifies that the various data restrictions for SRP are met.

      void setUpBuild ();
         //
         // Sets up this GpipBldr for building the pegging.

     void shutDownBuild ();
         //
         // Shut down this GpipBldr after building the pegging.

      void placeShipmentReqs ();
         //
         // Places requirement from the shipment sequence.

      void explodeAllReqs ();
         //
         // Explodes all requirements.

      void fillReqs (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills the requirements on thePart in fillPer.

      void fillCurReqs (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills the requirements on thePart in fillPer, after they have been
         // leaded as current requirements.

      void netAgainstSupply (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by netting against the supply.

      void explodeToStock (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by exploding to stock.

      void explodeToProd (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by exploding to production.

      void explodeBopEntry (WitBopEntry * theBopEnt, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // in fillPer by exploding to production.

      void explodeToExecPer (WitBopEntry * theBopEnt, WitPeriod execPer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // by exploding to production with execution period execPer.

      void explodeOperations (WitPart * thePart);
         //
         // Explodes all Operations that need to be exploded just after filling
         // requirements at thePart.

      void explodeOperation (WitOperation * theOpn, WitPeriod execPer);
         //
         // Explodes the requirements on theOpn in execPer.

      void explodeBomEntry (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Explodes the requirements on theBomEnt in execPer.

      void explodeConsEntry (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         totExecVol);
         // 
         // Explodes no more than totExecVol units of the requirements on
         // theConsEnt->myOperation () in execPer through theConsEnt.

      void explodeToConsumption (
            WitConsEntry *  theConsEnt,
            WitPeriod       execPer,
            double          incExecVol,
            WitGpipReqSrc * theReqSrc);
         //
         // Explodes to consumption incExecVol units of execution volume for
         // theConsEnt in execPer, pegging it to theReqSrc.

      //------------------------------------------------------------------------
      // Debug printing functions.
      //------------------------------------------------------------------------

      void prtFillReqs (WitPart * thePart, WitPeriod fillPer);
         //
         // Prints an indication that requirements are being filled for thePart
         // in fillPer.

      void prtNetToSupply (
            WitPart *       thePart,
            WitPeriod       thePer,
            double          incSuppVol,
            WitGpipReqSrc * theReqSrc);
         //
         // Prints data for netting against supply incSuppVol units of the
         // requirement volume for thePart in thePer for theReqSrc.

      noCopyCtorAssign (WitGpipBldr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipPgg * const myPgg_;
         //
         // The PipPgg that owns this GpipBldr.

      WitGpipReqMgr * myReqMgr_;
         //
         // The GpipReqMgr owned by this GpipBldr.

      WitExecPerSched * myExecPerSched_;
         //
         // The ExecPerSched owned by this GpipBldr.

      WitMapping <WitOperation, int> nUnscannedBopEnts_;
         //
         // nUnscannedBopEnts_ (theOpn) is the # of BopEntries for theOpn that
         // are yet to be scanned. When this quantity becomes 0, theOpn is to
         // be exploded in all periods

      WitSchedule <WitDemand, bool> prevPgdSched_;
         //
         // Sched to be passed to NonClass::pegReqSrc.
   };

//------------------------------------------------------------------------------
// NonClass function template pegReqSrc.
//
// Pegs pegVol units of the attribute for theAttPgg for theSrcComp in pegPer to
// theReqSrc.
// prevPgd is used as a working schedule. When entering this function, all
// its values should be false and it is restored to this state when the function
// returns. During the call, prevPgd (theDemand)[shipPer] is true, iff the
// pegging triple has already been pegged to theDemand in shipPer during the
// call.
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   template <typename SrcComp>
      void pegReqSrc (
         WitPipAttPgg <SrcComp> *        theAttPgg,
         SrcComp *                       theSrcComp,
         WitPeriod                       pegPer,
         double                          pegVol,
         WitGpipReqSrc *                 theReqSrc,
         WitSchedule <WitDemand, bool> & prevPgd);
   }

#endif
@


1.37
log
@GPIP
@
text
@@


1.36
log
@GPIP
@
text
@d16 1
a16 1
// Contains the declaration of class SrpBuilder.
d25 1
a25 1
// Class SrpBuilder
d33 1
a33 1
//    SrpBuilder
d38 1
a38 1
class WitSrpBuilder: public WitProbAssoc
d46 1
a46 1
      WitSrpBuilder (WitPipPgg *);
d52 1
a52 1
      ~WitSrpBuilder ();
d74 1
a74 1
         // Sets up this SrpBuilder for building the pegging.
d78 1
a78 1
         // Shut down this SrpBuilder after building the pegging.
d144 4
a147 4
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         incExecVol,
            WitSrpReqSrc * theReqSrc);
d162 4
a165 4
            WitPart *      thePart,
            WitPeriod      thePer,
            double         incSuppVol,
            WitSrpReqSrc * theReqSrc);
d170 1
a170 1
      noCopyCtorAssign (WitSrpBuilder);
d178 1
a178 1
         // The PipPgg that owns this SrpBuilder.
d180 1
a180 1
      WitSrpReqMgr * myReqMgr_;
d182 1
a182 1
         // The SrpReqMgr owned by this SrpBuilder.
d186 1
a186 1
         // The ExecPerSched owned by this SrpBuilder.
d219 1
a219 1
         WitSrpReqSrc *                  theReqSrc,
@


1.35
log
@[shared-resource pegging]
@
text
@d26 1
a26 1
// "Shared-Resource Pegging Builder"
d28 1
a28 1
// Responsible for building a shared-resource pegging.
@


1.34
log
@[shared-resource pegging]
@
text
@d140 1
a140 1
         // Explodes no more than totExecVol of the requirements on
d143 9
@


1.33
log
@[shared-resource pegging]
@
text
@d187 1
a187 1
         // Sched to be passed to NonClass::pegSrpReqSrc.
d191 1
a191 1
// NonClass function template pegSrpReqSrc.
d205 1
a205 1
      void pegSrpReqSrc (
@


1.32
log
@[shared-resource pegging]
@
text
@d117 5
@


1.31
log
@[shared-resource pegging]
@
text
@a137 18
      void pegExecVol (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         incExecVol,
            WitSrpReqSrc * theReqSrc);
         //
         // Pegs incExecVol units of the execution volume of theOpn in execPer
         // to theReqSrc.

      void pegSubVol (
            WitSubEntry  * theSub,
            WitPeriod      execPer,
            double         incSubVol,
            WitSrpReqSrc * theReqSrc);
         //
         // Pegs incSubVol units of the substitution volume of theSub in execPer
         // to theReqSrc.

d180 1
a180 1
      WitSchedule <WitDemand, bool> wasPeggedTo_;
d182 1
a182 4
         // Valid only during a call to pegExecVol () or pegSubVol.
         // wasPeggedTo_ (theDemand)[shipPer] is true, iff some positive
         // quantity has been pegged to theDemand in shipPer during the current
         // call to pegExecVol or pegSubVol.
d185 24
@


1.30
log
@[shared-resource pegging]
@
text
@d46 1
a46 1
      WitSrpBuilder (WitPipOwner *);
d180 1
a180 1
      WitPipOwner * const myPipOwner_;
d182 1
a182 1
         // The PipOwner that owns this SrpBuilder.
@


1.29
log
@[shared-resource pegging]
@
text
@d76 4
a125 9
      void pegExecVol (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         incExecVol,
            WitSrpReqSrc * theReqSrc);
         //
         // Pegs incExecVol units of the execution volume of theOpn in execPer
         // to theReqSrc.

d138 14
a151 1
     void shutDownBuild ();
d153 2
a154 1
         // Shut down this SrpBuilder after building the pegging.
a173 10
      void prtPegExecVol (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         incExecVol,
            WitDemand *    theDemand,
            WitPeriod      shipPer);
         //
         // Prints data for pegging incExecVol units of the execution volume of
         // theOpn in execPer to theDemand in shipPer.

d200 1
a200 1
         // Valid only during a call to pegExecVol ().
d203 1
a203 1
         // call to pegExecVol.
@


1.28
log
@[shared-resource pegging]
@
text
@d68 4
@


1.27
log
@[shared-resource pegging]
@
text
@a142 4
      void consolidatePegLists ();
         //
         // Consolidates all of the PipPegLists in the pegging.

@


1.26
log
@[shared-resource pegging]
@
text
@d46 1
a46 3
      WitSrpBuilder (
            WitProblem *,
            WitPtrSched <WitDemand, WitOpnTripStack> &);
d143 1
a143 1
      void consolidatePegging ();
d145 1
a145 1
         // Consolidates the pegging.
d181 1
a181 1
      WitPtrSched <WitDemand, WitOpnTripStack> & myExecVolTrips_;
d183 1
a183 2
         // myExecVolTrips_.myElemAt (theDemand, shipPer) is the execVol pegging
         // of theDemand in shipPer, stored in reverse order.
@


1.25
log
@[shared-resource pegging]
@
text
@d192 4
@


1.24
log
@[shared-resource pegging]
@
text
@a110 5
      void explodeBopEntryNew (WitBopEntry * theBopEnt, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // in fillPer by exploding to production.

@


1.23
log
@[shared-resource pegging]
@
text
@d111 5
@


1.22
log
@[shared-resource pegging]
@
text
@d96 5
@


1.21
log
@[shared-resource pegging]
@
text
@d119 1
a119 1
            WitSrpReqSrc *  theReqSrc);
d124 1
a124 5
      void explodeBomEntry (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        incExecVol,
            WitSrpReqSrc * theReqSrc);
d126 9
a134 2
         // Explodes incExecVol units through theBomEnt in execPer, where the
         // requirement is pegged to theReqSrc.
d136 1
a136 1
      void shutDownBuild ();
@


1.20
log
@[shared-resource pegging]
@
text
@d85 6
a90 1
                                  
a99 1
         // New version.
@


1.19
log
@[shared-resource pegging]
@
text
@a164 4
      void prtExplodeOperation (WitOperation * theOpn, WitPeriod execPer);
         //
         // Prints an indication that theOpn is being exploded in execPer.

@


1.18
log
@[shared-resource pegging]
@
text
@d22 1
d189 7
@


1.17
log
@[shared-resource pegging]
@
text
@d132 4
@


1.16
log
@[shared-resource pegging]
@
text
@d154 2
a155 1
            WitSrpReqSrc * theReqSrc);
d158 1
a158 1
         // theOpn in execPer to theReqSrc.
@


1.15
log
@[shared-resource pegging]
@
text
@a20 1
#include <ObjStack.h>
d174 1
a174 1
      WitObjStack <WitSrpSeqEl> mySeqEls_;
d176 1
a176 21
         // The SrpSeqEls owned by this SrpBuilder.
         // (One for each element in the shipment sequence.)

      WitObjStack <WitSrpReqSrc> myReqSrcs_;
         //
         // The SrpReqSrcs owned by this SrpBuilder.

      WitPtrSched <WitPart, WitSrpReqPairStack> myPartReqs_;
         //
         // myPartReqs_.myElemAt (thePart, thePer) is the list of
         // requirement pairs for thePart in thePer.

      WitPtrSched <WitBopEntry, WitSrpReqPairStack> myBopEntReqs_;
         //
         // myBopEntReqs_.myElemAt (theBopEnt, execPer) is the list of
         // requirement pairs for theBopEnt in execPer.

      WitSrpReqList * myReqList_;
         //
         // The requirement list for the current part and period, if any;
         // otherwise empty.
@


1.14
log
@[shared-resource pegging]
@
text
@d115 1
a115 1
            WitSrpSeqEl *  theSeqEl);
d118 1
a118 1
         // to theSeqEl.
d124 1
a124 1
            WitSrpSeqEl * theSeqEl);
d127 1
a127 1
         // requirement is pegged to theSeqEl.
d143 4
a146 4
            WitPart *     thePart,
            WitPeriod     thePer,
            double        incSuppVol,
            WitSrpSeqEl * theSeqEl);
d149 1
a149 1
         // requirement volume for thePart in thePer for theSeqEl.
d155 1
a155 1
            WitSrpSeqEl *  theSeqEl);
d158 1
a158 1
         // theOpn in execPer to theSeqEl.
d180 4
d201 1
a201 1
         // nUnscannedBopEnts_ (theOpn) is the 3 of BopEntries for theOpn that
@


1.13
log
@[shared-resource pegging]
@
text
@d102 9
a128 9
      void explodeOperations (WitPart * thePart);
         //
         // Explodes all Operations that need to be exploded just after filling
         // requirements at thePart.

      void explodeOperation (WitOperation * theOpn, WitPeriod execPer);
         //
         // Explodes the requirements on theOpn in execPer.

d151 1
a151 1
      void prtExplodeToProd (
d157 2
a158 2
         // Prints data for exploding to production incExecVol units of the
         // execution volume of theOpn in execPer for theSeqEl.
d180 1
a180 1
      WitPtrSched <WitPart, WitSrpReqPairStack> myReqPairStacks_;
d182 1
a182 1
         // myReqPairStacks_.myElemAt (thePart, thePer) is the list of
d185 5
@


1.12
log
@[shared-resource pegging]
@
text
@d22 1
d120 9
d151 1
a151 1
      void prtExpToProd (
d160 4
d189 6
@


1.11
log
@[shared-resource pegging]
@
text
@d87 2
a88 2
         // Fills (as much as possible) the requirement on thePart in fillPer by
         // netting against the supply.
d92 8
a99 2
         // Fills (as much as possible) the requirement on thePart in fillPer by
         // exploding to production.
@


1.10
log
@[shared-resource pegging]
@
text
@d121 5
@


1.9
log
@[shared-resource pegging]
@
text
@d155 1
a155 1
      WitPtrSched <WitPart, WitSrpReqSet> myReqSets_;
d157 2
a158 2
         // myReqSets_.myElemAt (thePart, thePer) is the requirement set for
         // thePart in thePer.
@


1.8
log
@[shared-resource pegging]
@
text
@d45 3
a47 1
      WitSrpBuilder (WitProblem *);
d59 1
a59 2
      void buildPegging (
            WitPtrSched <WitDemand, WitOpnTripStack> & theExecVolTripSched);
d61 1
a61 1
         // Builds the pegging and stores it in theExecVolTripSched.
a112 6
      void transferPegging (
            const WitPtrSched <WitDemand, WitOpnTripStack> &
               theExecVolTripSched);
         //
         // Transfers the pegging into theExecVolTripSched.

d145 1
a145 1
      WitPtrSched <WitDemand, WitOpnTripStack> myExecVolTrips_;
@


1.7
log
@[shared-resource pegging]
@
text
@d160 1
a160 1
      WitPtrSched <WitPart, WitSrpReqList> myReqLists_;
d162 1
a162 1
         // myReqLists_.myPtrAt (thePart, thePer) is the requirement list for
d164 5
@


1.6
log
@[shared-resource pegging]
@
text
@d98 1
a98 1
            WitSrpSeqEl *  theSrpSeqEl);
d101 1
a101 1
         // to theSrpSeqEl.
d107 1
a107 1
            WitSrpSeqEl * theSrpSeqEl);
d110 1
a110 1
         // requirement is pegged to theSrpSeqEl.
d130 1
a130 1
            WitSrpSeqEl * theSrpSeqEl);
d133 1
a133 1
         // requirement volume for thePart in thePer for theSrpSeqEl.
d139 1
a139 1
            WitSrpSeqEl *  theSrpSeqEl);
d142 1
a142 1
         // execution volume of theOpn in execPer for theSrpSeqEl.
d155 1
a155 1
      WitObjStack <WitSrpSeqEl> mySrpSeqEls_;
d160 1
a160 1
      WitPtrSched <WitPart, WitSrpReqList> mySrpReqLists_;
d162 1
a162 1
         // mySrpReqLists_.myPtrAt (thePart, thePer) is the requirement list for
@


1.5
log
@[shared-resource pegging]
@
text
@d160 1
a160 1
      WitPtrSched <WitPart, WitSrpReqSpec> myReqSpecs_;
d162 2
a163 2
         // myReqSpecs_.myPtrAt (thePart, thePer) is the requirement
         // specification for thePart in thePer.
@


1.4
log
@[shared-resource pegging]
@
text
@d122 22
@


1.3
log
@[shared-resource pegging]
@
text
@d94 9
d140 1
a140 1
         // myReqSpecs_.myElemAt (thePart, thePer) is the requirement
@


1.2
log
@[shared-resource pegging]
@
text
@a20 1
#include <Schedule.h>
d98 1
a98 2
            WitDemand *   theDemand,
            WitPeriod     shipPer);
d100 2
a101 2
         // Explodes incExecVol units through theBomEnt in execPer, pegging to
         // theDemand in shipPer.
a132 15

      WitSchedule <WitPart, double> myReqVol_;
         //
         // myReqVol_ (thePart)[thePer] is the requirement volume for thePart in
         // thePer.

      WitPtrSched <WitPart, WitDemand> reqDemand_;
         //
         // reqDemand_.myPtrAt (thePart, thePer) is the Demand to which
         // myReqVol_ (thePart)[thePer] is pegged.

      WitSchedule <WitPart, WitPeriod> reqShipPer_;
         //
         // reqShipPer_ (thePart)[thePer] is the shipment period to which
         // myReqVol_ (thePart)[thePer] is pegged.
@


1.1
log
@[shared-resource pegging]
@
text
@d131 5
@

