head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2001.03.02.19.24.07;	author fasano;	state dead;
branches;
next	1.2;

1.2
date	2001.01.20.00.44.22;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.06.19.58.41;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StringH
#define StringH

//------------------------------------------------------------------------------
// Header file: "String.h"
//
// Contains the declaration of class String.
//------------------------------------------------------------------------------

#include <List.h>

//------------------------------------------------------------------------------
// class String.
// A character string.
// Implemented in terms of a Vector (char)
// Implemented in Vecs.C.
//------------------------------------------------------------------------------

class WitString: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitString ();
         //
         // Constructs a null String.

      WitString (const char * theCstring);
         //
         // Constructs a copy of theCstring.

      WitString (const WitString & theString);
         //
         // Constructs a copy of theString.

      WitString (size_t nBlanks);
         //
         // Constructs a string containing nBlanks blanks.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitString ();

      //------------------------------------------------------------------------
      // Public member operators.
      //------------------------------------------------------------------------

      inline char operator [] (int theIndex) const
            //
            // Returns the indexed element of this WitVector.
            // Bounds checking is performed (by WIT), iff the compile is in
            // DEBUG  mode.
            // Returned value is not an lvalue.
         {
         return myVector_[theIndex];
         }

      inline char & operator [] (int theIndex)
            //
            // Same as the preceeding operator [], except that this WitVector
            // is non-const and the returned value is an lvalue.
         {
         return myVector_[theIndex];
         }

      void operator = (const char * theCstring);
         //
         // Copies theCstring into this String.

      void operator = (const WitString & theString);
         //
         // Copies theString into this String.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline const char * myCstring () const
         {
         return myVector_.myCvector ();
         }

      inline char * myCstringForUpdate ()
            //
            // Returns the (char *) representation of this String, for updating
            // purposes.
            // Use with discretion.
         {
         return myVector_.myCvectorForUpdate ();
         }

      inline WitBoolean isNull () const
            //
            // Returns TRUE iff this String is a null (0 length) String.
         {
         return ((* this)[0] == '\0');
         }

      inline size_t length () const
            //
            // Returns the length of this String.
         {
         return strlen (myVector_.myCvector ());
         }

      void resize (size_t nChars);
         //
         // Resizes this String to nChars blanks.

      inline int maxLength () const
         {
         return myVector_.length () - 1;
         }

      inline static const WitString & thisString (const WitString * pTheString)
            //
            // Used for List::find ().
         {
         return * pTheString;
         }

   private:

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitVector (char) myVector_;
         //
         // The Vector thru which this String is implemented.
         // Its length is normally one greater than the length of this String,
         // in order to store the terminating null character.
   };

//------------------------------------------------------------------------------
// Global operators that use Strings.
//------------------------------------------------------------------------------

inline WitBoolean operator == (const WitString & lhs, const char *      rhs)
   {
   return WitUtil::streq (lhs.myCstring (), rhs);
   }

inline WitBoolean operator == (const char *      lhs, const WitString & rhs)
   {
   return (rhs == lhs);
   }

inline WitBoolean operator == (const WitString & lhs, const WitString & rhs)
   {
   return (lhs == rhs.myCstring ());
   }

inline WitBoolean operator != (const WitString & lhs, const char *      rhs)
   {
   return ! (lhs == rhs);
   }

inline WitBoolean operator != (const char *      lhs, const WitString & rhs)
   {
   return ! (lhs == rhs);
   }

inline WitBoolean operator != (const WitString & lhs, const WitString & rhs)
   {
   return ! (lhs == rhs);
   }

#endif
@


1.2
log
@Implemented and used class SelMgr.
@
text
@@


1.1
log
@Some minor changes.
@
text
@d19 1
a19 1
#include <RWClient.h>
d25 1
a25 1
// Implemented in Vector.C.
@

