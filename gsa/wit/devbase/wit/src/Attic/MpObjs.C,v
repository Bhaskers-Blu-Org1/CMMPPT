head	1.3;
access;
symbols
	EndRw-branch:1.2.0.4
	Root-of-EndRw:1.2
	rwToStl:1.2.0.2;
locks; strict;
comment	@ * @;


1.3
date	2003.03.03.23.26.53;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2002.08.26.22.49.02;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.23.21.00.37;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@a0 247
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "MpObjs.C"
//
// Implementation of the following classes, derived from class MpObj:
//
//    BoundsObj
//    PrimaryObj
//    Obj1Obj
//    RevObj
//    InvObj
//    ServObj
//    SubObj
//    Obj2Obj
//------------------------------------------------------------------------------

int compiledMpObjs = 1;
   //
   // WATCOM's strict compatibility mode requires every file to
   // have at least one external definition.

#include <OptComp.h>
#include <ImpMp.h>
#include <OptImp.h>

#ifdef OPT_IMPLODE

//------------------------------------------------------------------------------
// Implementation of class BoundsObj.
//------------------------------------------------------------------------------

WitBoundsObj::WitBoundsObj (WitImpMp * theImpMp):

      WitMpObj ("Bounds Objective", theImpMp)
   {
   }

//------------------------------------------------------------------------------

WitBoundsObj::~WitBoundsObj ()
   {
   }

//------------------------------------------------------------------------------

float WitBoundsObj::coeffVal (const WitMpVar * theVar) const
   {
   return theVar->boundsCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class PrimaryObj.
//------------------------------------------------------------------------------

WitPrimaryObj::WitPrimaryObj (WitImpMp * theImpMp):

      WitMpObj ("Primary Objective", theImpMp)
   {
   }

//------------------------------------------------------------------------------

WitPrimaryObj::~WitPrimaryObj ()
   {
   }

//------------------------------------------------------------------------------

float WitPrimaryObj::coeffVal (const WitMpVar * theVar) const
   {
   return theVar->primaryCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class Obj1Obj.
//------------------------------------------------------------------------------

WitObj1Obj::WitObj1Obj (WitImpMp * theImpMp):

      WitMpObj ("Objective #1", theImpMp),

      myImpMp_ (theImpMp)
   {
   }

//------------------------------------------------------------------------------

WitObj1Obj::~WitObj1Obj ()
   {
   }

//------------------------------------------------------------------------------

float WitObj1Obj::coeffVal (const WitMpVar * theVar) const
   {
   float coeffVal = theVar->primaryCoeffVal ();

   if (myImpMp_->slbvVarsExist ())
      coeffVal -=
         myOptImploder ()->myOptComp ()->wbounds () * theVar->boundsCoeffVal ();

   return coeffVal;
   }

//------------------------------------------------------------------------------
// Implementation of class RevObj.
//------------------------------------------------------------------------------

WitRevObj::WitRevObj (WitImpMp * theImpMp):

      WitMpObj ("Revenue Objective", theImpMp)
   {
   }

//------------------------------------------------------------------------------

WitRevObj::~WitRevObj ()
   {
   }

//------------------------------------------------------------------------------

float WitRevObj::coeffVal (const WitMpVar * theVar) const
   {
   return theVar->revCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class InvObj.
//------------------------------------------------------------------------------

WitInvObj::WitInvObj (WitImpMp * theImpMp):

      WitMpObj ("Inventory Objective", theImpMp)
   {
   }

//------------------------------------------------------------------------------

WitInvObj::~WitInvObj ()
   {
   }

//------------------------------------------------------------------------------

float WitInvObj::coeffVal (const WitMpVar * theVar) const
   {
   return theVar->invCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class ServObj.
//------------------------------------------------------------------------------

WitServObj::WitServObj (WitImpMp * theImpMp):

      WitMpObj ("Serviceability Objective", theImpMp)
   {
   }

//------------------------------------------------------------------------------

WitServObj::~WitServObj ()
   {
   }

//------------------------------------------------------------------------------

float WitServObj::coeffVal (const WitMpVar * theVar) const
   {
   return theVar->servCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class SubObj.
//------------------------------------------------------------------------------

WitSubObj::WitSubObj (WitImpMp * theImpMp):

      WitMpObj ("Substitute Objective", theImpMp)
   {
   }

//------------------------------------------------------------------------------

WitSubObj::~WitSubObj ()
   {
   }

//------------------------------------------------------------------------------

float WitSubObj::coeffVal (const WitMpVar * theVar) const
   {
   return theVar->subCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class Obj2Obj.
//------------------------------------------------------------------------------

WitObj2Obj::WitObj2Obj (WitImpMp * theImpMp):

      WitMpObj ("Objective #2", theImpMp),

      myImpMp_ (theImpMp)
   {
   }

//------------------------------------------------------------------------------

WitObj2Obj::~WitObj2Obj ()
   {
   }

//------------------------------------------------------------------------------

float WitObj2Obj::coeffVal (const WitMpVar * theVar) const
   {
   WitObjFunc2 * theObjFunc2;

   theObjFunc2 = myOptImploder ()->myOptComp ()->myObjFunc2 ();

   float coeffVal =
      theObjFunc2->revFactor ()  * theVar-> revCoeffVal ()
      +
      theObjFunc2->invFactor ()  * theVar-> invCoeffVal ()
      +
      theObjFunc2->servFactor () * theVar->servCoeffVal ()
      +
      theObjFunc2->subFactor ()  * theVar-> subCoeffVal ();

   if (myImpMp_->slbvVarsExist ())
      coeffVal -=
         myOptImploder ()->myOptComp ()->wbounds () * theVar->boundsCoeffVal ();

   return coeffVal;
   }

#endif
@

