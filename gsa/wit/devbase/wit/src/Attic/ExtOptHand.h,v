head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2006.12.27.22.45.40;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2006.12.26.22.24.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.19.19.26.46;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.20.17.04.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.18.00.09.22;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.14.23.10.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.01.17.31.46;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.31.22.58.32;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@External opt implosion.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ExtOptHandH
#define ExtOptHandH

//------------------------------------------------------------------------------
// Header file: "ExtOptHand.h"
//
// Contains the declaration of the following class:
//
//    ExtOptHandler
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class ExtOptHandler
//
// "External Optimizing Implosion Handler"
// Responsible for performing most of the tasks that are specific to external
// optimizing implosion.
//------------------------------------------------------------------------------

class WitExtOptHandler: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExtOptHandler (WitImpOptProb *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExtOptHandler ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void getLpProb (
            WitVector <int> &    start,
            WitVector <int> &    index,
            WitVector <double> & value,
            WitVector <double> & collb,
            WitVector <double> & colub,
            WitVector <double> & obj,
            WitVector <double> & rowlb,
            WitVector <double> & rowub);
         //
         // Retrieves data specifying the LP portion of the optimization
         // problem, using "standard column major ordered format". On return,
         // the args can be passed to the following COIN function:
         //    OsiSolverInterface::loadProblem (...).

      void getIntVars (WitVector <int> & indices);
         //
         // Retrieves a list of the column indices of all of the
         // integer-constrained variables in the optimization problem.

      void setSoln (const WitIVRealArg & theVector);
         //
         // Sets the primal solution to theVector.

      int       scrapVarIndex (WitPart *,      WitPeriod);
      int      nonSubVarIndex (WitBomEntry *,  WitPeriod);
      int         subVarIndex (WitSubEntry *,  WitPeriod);
      int        shipVarIndex (WitDemand *,    WitPeriod);
      int        execVarIndex (WitOperation *, WitPeriod);
      int       stockVarIndex (WitMaterial *,  WitPeriod);
      int     cumShipVarIndex (WitDemand *,    WitPeriod);
      int    execSlbvVarIndex (WitOperation *, WitPeriod);
      int   stockSlbvVarIndex (WitMaterial *,  WitPeriod);
      int cumShipSlbvVarIndex (WitDemand *,    WitPeriod);
         //
         // Each of the above functions returns the colmun index of the
         // indicated opt variable corresponding to the arguments, or -1, if no
         // such variable exists.
         //
         // Indicated variables:
         //    Scrap
         //    Non-Substitution
         //    Substitution
         //    Shipment
         //    Execution
         //    Stock
         //    Cumulative Shipment
         //    Execution           SLBV
         //    Stock               SLBV
         //    Cumulative Shipment SLBV

      int   resourceConIndex (WitPart *,      WitPeriod);
      int        subConIndex (WitBomEntry *,  WitPeriod);
      int       shipConIndex (WitDemand *,    WitPeriod);
      int    execSlbConIndex (WitOperation *, WitPeriod);
      int   stockSlbConIndex (WitMaterial *,  WitPeriod);
      int cumShipSlbConIndex (WitDemand *,    WitPeriod);
         //
         // Each of the above functions returns the row index of the indicated
         // constraint corresponding to the arguments, or -1, if no such
         // constraint exists.
         //
         // Indicated constraints:
         //    Resource Allocation
         //    Substitution
         //    Shipment Cumulation
         //    Execution           SLB
         //    Stock               SLB
         //    Cumulative Shipment SLB

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void getColData (
            WitVector <double> & collb,
            WitVector <double> & colub,
            WitVector <double> & obj);
         //
         // Retrieves data specifying column data for the optimization problem,
         // for getProb (...).

      void getRowData (
            WitVector <double> & rowlb,
            WitVector <double> & rowub);
         //
         // Retrieves data specifying row data for the optimization problem,
         // for getProb (...).

      int slbvVarIndexOf (WitBoundedVar * theBoundedVar);
         //
         // Returns the index of the SlbvVar for theBoundedVar, if any;
         // otherwise -1.

      int slbConIndexOf (WitBoundedVar * theBoundedVar);
         //
         // Returns the index of the SlbCon for theBoundedVar, if any;
         // otherwise -1.

      int indexOf (WitOptProbEl * theOptProbEl);
         //
         // Returns theOptProbEl->index (), or -1, if theOptProbEl is NULL.

      noCopyCtorAssign (WitExtOptHandler);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitImpOptProb * const myImpOptProb_;
         //
         // The ImpOptProb for this ExtOptHandler.
   };

#endif
@


1.7
log
@External opt implosion.
@
text
@@


1.6
log
@external optimzing implosion.
@
text
@d66 1
a66 1
      void getIntIndices (WitVector <int> & intIndices);
d71 1
a71 1
      void setColSol (const WitIVRealArg & theVector);
@


1.5
log
@External opt implosion.
@
text
@d51 1
a51 1
      void getProb (
d59 5
a63 7
            WitVector <double> & rowub,
            WitVector <int> &    intIndices,
            double &             objSense);
         //
         // Retrieves data specifying the optimization problem, using
         // "standard column major ordered format". On return, the args can be
         // passed to the following COIN functions:
d65 5
a69 2
         //    OsiSolverInterface::setInteger  (...).
         //    OsiSolverInterface::setObjSense (...).
a141 6
      void getIntIndices (WitVector <int> & intIndices);
         //
         // Retrieves a list of the column indices of all of the
         // integer-constrained variables in the optimization problem,
         // for getProb (...).

@


1.4
log
@External opt implosion.
@
text
@d74 10
a83 8
      int    scrapVarIndex (WitPart *,      WitPeriod);
      int   nonSubVarIndex (WitBomEntry *,  WitPeriod);
      int      subVarIndex (WitSubEntry *,  WitPeriod);
      int     shipVarIndex (WitDemand *,    WitPeriod);
      int     execVarIndex (WitOperation *, WitPeriod);
      int    stockVarIndex (WitMaterial *,  WitPeriod);
      int  cumShipVarIndex (WitDemand *,    WitPeriod);
      int execSlbvVarIndex (WitOperation *, WitPeriod);
d97 10
a106 5
         //    Execution SLBV

      int resourceConIndex (WitPart *,     WitPeriod);
      int      subConIndex (WitBomEntry *, WitPeriod);
      int     shipConIndex (WitDemand *,   WitPeriod);
d116 3
d152 5
@


1.3
log
@External opt implosion.
@
text
@d74 8
a81 7
      int   scrapVarIndex (WitPart *,      WitPeriod);
      int  nonSubVarIndex (WitBomEntry *,  WitPeriod);
      int     subVarIndex (WitSubEntry *,  WitPeriod);
      int    shipVarIndex (WitDemand *,    WitPeriod);
      int    execVarIndex (WitOperation *, WitPeriod);
      int   stockVarIndex (WitMaterial *,  WitPeriod);
      int cumShipVarIndex (WitDemand *,    WitPeriod);
d95 1
d137 5
@


1.2
log
@External opt implosion.
@
text
@d74 33
a106 4
      int resourceConIndex (WitPart * thePart, WitPeriod thePer);
         //
         // Returns the row index of the resource allocation constraint for
         // thePart in thePer, if any; otherwise -1.
@


1.1
log
@External opt implosion.
@
text
@d74 5
d106 4
@

