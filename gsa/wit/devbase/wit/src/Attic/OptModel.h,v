head	1.35;
access;
symbols
	sce_5_01_20080919:1.24
	latest_sce_4_20_20060523:1.18.0.2
	sce_4_20_20060523:1.18
	latest_sce4_20_OSL:1.14.0.2
	sce_4_20_OSL:1.14
	sce_410_withVa:1.11
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.10
	nextGenBranch:1.9.0.2
	nextGenRoot:1.9
	sce_3_30_20030627:1.9
	EndRw-branch:1.3.0.4
	Root-of-EndRw:1.3
	rwToStl:1.3.0.2;
locks; strict;
comment	@ * @;


1.35
date	2010.08.19.18.00.13;	author rjw;	state dead;
branches;
next	1.34;

1.34
date	2010.08.19.14.22.14;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2010.08.17.22.22.56;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2010.06.07.21.21.43;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2010.06.04.23.24.56;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2010.03.24.21.31.03;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.02.05.20.41.53;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.01.16.00.09.08;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.01.14.22.30.16;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.01.13.19.52.09;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.01.09.00.12.05;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.03.03.22.35.43;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.29.23.24.29;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.02.28.00.00.42;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2008.02.27.23.43.42;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.27.23.19.11;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.18.18.43.38;	author rjw;	state dead;
branches;
next	1.18;

1.18
date	2006.05.02.17.34.05;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.27.22.08.58;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.21.21.02.49;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.21.20.06.32;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.02.20.35.33;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.04.19.53.50;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.09.13.19.31.57;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.10.22.53.20;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.28.22.19.30;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.27.20.34.34;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.23.18.12.37;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.20.19.38.33;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.13.20.43.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.02.22.18.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.11.18.53.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.29.23.06.27;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.26.22.49.05;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.35
log
@CPLEX
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OptModelH
#define OptModelH

//------------------------------------------------------------------------------
// Header file: "OptModel.h"
//
// Contains the declaration of class OptModel.
//------------------------------------------------------------------------------

#include <List.h>
#include <ObjStack.h>
#include <PtrVec.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// class OptModel.
//
// An optimization model, either:
//    a linear programming model, or
//    a mixed integer programming model.
//
// Class hierarchy:
//
//    ProbAssoc
//       OptModel
//          DetImpOM
//          StochImpOM
//------------------------------------------------------------------------------

class WitOptModel: public WitProbAssoc
   {
   public:

      //-----------------------------------------------------------------------
      // Public pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual () = 0;
         //
         // Returns true, iff a dual solution is needed.

      virtual void reportInfeasible () = 0;
         //
         // Does any special error reporting for an infeasible solution,
         // prior to the reporting that will be done by the SolverMgr.

      virtual void reportUnbounded () = 0;
         //
         // Does any special error reporting for an unbounded solution,
         // prior to the reporting that will be done by the SolverMgr.

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (const WitList <WitOptVar> &,   myOptVars)
      accessFunc (const WitList <WitOptCon> &,   myOptCons)
      accessFunc (int,                           nCoeffs)
      accessFunc (const WitPtrVec <WitOptVar> &, myLexOptVarSeq)
      accessFunc (FILE *,                        modelFile)

      inline int nOptVars ()
         {
         return myOptVars ().nElements ();
         }

      inline int nOptCons ()
         {
         return myOptCons ().nElements ();
         }

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void store (WitOptVar * theVar);
         //
         // theVar is a new OptVar created for this OptModel.
         // This function stores theVar.

      void store (WitOptCon * theCon);
         //
         // theCon is a new OptCon created for this OptModel.
         // This function stores theCon.

      void generateFixed ();
         //
         // Generates the fixed aspects of this OptModel (the aspects that do
         // not change in accelerated mode).

      void countIntVars ();
         //
         // Sets nIntVars_.

      void incCoeff (WitOptVar * theVar, double delta);
         //
         // Adds delta to the Coeff of theVar in curCon_, constructing it,
         // if neccesary.  No-op, if delta is (nearly) 0.0.

      void generateFlexible ();
         //
         // Generates the flexible aspects of this OptModel (the aspects that
         // may change in accelerated mode).

      const WitBoundPair & preScreenBounds (const WitOptVar * theVar);
         //
         // Returns the value that theVar->bounds () held just prior to
         // screening. Valid only if saveBounds has been called.

      const WitBoundPair & preScreenBounds (const WitOptCon * theCon);
         //
         // Returns the value that theCon->bounds () held just prior to
         // screening. Valid only if saveBounds has been called.

      void calcInitSoln ();
         //
         // Calculates an initial solution.

      void getLpProbForCplex (
            WitVector <double> & objective,
            WitVector <double> & rhs,
            WitVector <char>   & sense,
            WitVector <int>    & matbeg,
            WitVector <int>    & matcnt,
            WitVector <int>    & matind,
            WitVector <double> & matval,
            WitVector <double> & lb,
            WitVector <double> & ub);
         //
         // Retrieves the LP problem in the representation required for the
         // CPLEX function CPXcopylp.

      void getMatrixByCols (
            WitVector <int> &    firstCoeffIdx,
            WitVector <int> &    rowIdx,
            WitVector <double> & coeffVal);
         //
         // Retrieves the constraint matrix in the column major ordered format.

      void print ();
         //
         // Prints this OptModel.

      void solve ();
         //
         // Solves this OptModel.

      double compObjValue ();
         //
         // Computes and returns the objective fnuction value for the current
         // primal solution.

   protected:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptModel (WitProblem *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptModel ();

      //-----------------------------------------------------------------------
      // Protected pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables () = 0;
         //
         // Generates all variables.

      virtual void generateConstraints () = 0;
         //
         // Generates all OptCons.

      virtual void generateLexOptVarSeq (WitPtrVec <WitOptVar> & theOptVarSeq);
         //
         // Sets theOptVarSeq to be the sequence of OptVars to be
         // lexicographically maximized.
         // Valid only in multiple objectives mode.

      virtual void postGenFixed () = 0;
         //
         // Takes actions appropriate at the conclusion of generateFixed ().

      virtual void postGenFlexible () = 0;
         //
         // Takes actions appropriate at the conclusion of generateFlexible ().

      virtual void printOptVCHeading () = 0;
         //
         // Prints a heading for OptVCs to modelFile ().

      //-----------------------------------------------------------------------
      // Protected non-pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void displayDerived ();
         //
         // Display any model-specific message in pre-release mode.
         // This default version is a no-op.

      virtual void printDerived ();
         //
         // Prints model-specific aspects of this OptModel.
         // This default version is a no-op.

      virtual void initDepVars ();
         //
         // Initializes the dependent variables, i.e., those variables whose
         // initial value depends on the initial value of other variables.

      //-----------------------------------------------------------------------
      // Other protected member functions.
      //-----------------------------------------------------------------------

      void saveBounds ();
         //
         // Copies bounds for each OptVar and OptCon into varPreScreenBounds_ 
         // and conPreScreenBounds_.

      int screen (WitOptCon * theCon);
         //
         // Performs generic screening on theCon and the variables it
         // intersects.
         // Returns # OptVars fixed.
         // No-op, if theCon is NULL.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      void generateCoeffs ();
         //
         // Generates all Coeffs for all OptCons and stores them in the
         // OptVC myCoeffs_ vectors.

      void buildCoeffs ();
         //
         // Generates all Coeffs for all OptCons.

      void allocVarCoeffs ();
         //
         // Invokes allocMyCoeffs for each OptVar in this OptModel.

      void storeCoeffs ();
         //
         // Stores all Coeffs in each OptVC, in OptCon order for OptVars and
         // OptVar order for OptCons.

      inline WitCoeff * & varLastCoeff (const WitOptVar * theVar);
         //
         // Return the most recently generated Coeff whose OptVar is theVar, or
         // NULL is none exists.

      void generateObjCoeffs ();
         //
         // For each OptVar, theVar, computes theVar->objCoeff.

      void printVars ();
         //
         // Prints all OptVars in this OptModel.

      void printCons ();
         //
         // Prints all OptCons in this OptModel.

      void printObjFunc ();
         //
         // Prints the objective function for this OptModel.

      void printLexSeq ();
         //
         // Prints the sequence of OptVars to be lex maximized.
         // Valid only in multiple objectives mode.

      void prtMatrixByCols ();
         //
         // Prints the matrix in the column major ordered format.

      virtual void doScreening () = 0;
         //
         // Performs screening of constraints and variables.

      void checkVarBounds ();
         //
         // Verifies that the lower bound on each OptVar is <= the upper bound.

      void getRowDataForCplex (
            WitVector <double> & rhs,
            WitVector <char> &   sense);
         //
         // Retrieves the row portion of the LP aspect of the model in the
         // representation required for the CPLEX function CPXcopylp.

      void getColumnDataForCplex (
            WitVector <double> & objective,
            WitVector <int> &    matbeg,
            WitVector <int> &    matcnt,
            WitVector <int> &    matind,
            WitVector <double> & matval,
            WitVector <double> & lb,
            WitVector <double> & ub);
         //
         // Retrieves the column portion of the LP aspect of the model in the
         // representation required for the CPLEX function CPXcopylp.

      void reconstructDual ();
         //
         // Assuming the optimization model was screened and an optimal dual
         // solution to the screened model has been obtained, this function
         // modifies the dual solution, in order to make it optimal and feasible
         // for the dual of the unscreened model.

      noCopyCtorAssign (WitOptModel);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitSolverMgr * mySolverMgr_;
         //
         // The SolverMgr owned by this OptModel.

      WitList <WitOptVar> myOptVars_;
         //
         // The list of all OptVars in this OptModel.

      WitList <WitOptCon> myOptCons_;
         //
         // The list of all OptCons in this OptModel.

      int nCoeffs_;
         //
         // # Coeffs in optimization model.

      WitOptCon * curCon_;
         //
         // The OptCon whose Coeffs are currently being generated.

      WitObjStack <WitCoeff> curConCoeffs_;
         //
         // The Coeffs for curCon_;

      WitPtrVec <WitCoeff> varLastCoeff_;
         //
         // varLastCoeff_[theVar->index ()] is the most recently
         // generated Coeff whose OptVar is theVar, or NULL is none exists.
         // Allocated only during buildCoeffs.

      int nIntVars_;
         //
         // # integer variables in this OptModel.

      WitPtrVec <WitOptVar> myLexOptVarSeq_;
         //
         // In multiple objectives mode:
         //    The sequence of OptVars to be lexicographically maximized.
         // In single objective mode:
         //    Empty

      WitPtrVec <WitBoundPair> varPreScreenBounds_;
         //
         // Stores the return values of preScreenBounds (OptVar *).

      WitPtrVec <WitBoundPair> conPreScreenBounds_;
         //
         // Stores the return values of preScreenBounds (OptCon *).

      WitList <WitCoeff> screenedCoeffs_;
         //
         // For each Coeff in screenedCoeffs_, theCoeff:
         //    theCoeff->myVar () is a variable that was screened out.
         //    theCoeff->myCon () is the constraint that enabled the
         //    variable to be screened out.
         // The Coeffs are stored in reverse of the order in which the
         // screening was performed.
         // Valid iff needDual () is true.

      FILE * modelFile_;
         //
         // Optimization model output file.
   };

#endif
@


1.34
log
@CPLEX
@
text
@@


1.33
log
@CPLEX
@
text
@a128 3
            int                & numcols,
            int                & numrows,
            int                & objsense,
d137 1
a137 2
            WitVector <double> & ub,
            WitVector <double> & rngval);
@


1.32
log
@CPLEX
@
text
@d128 4
a131 1
      void getLpModelForCplex (
d134 4
a137 4
            WitVector <char> &   sense,
            WitVector <int> &    matbeg,
            WitVector <int> &    matcnt,
            WitVector <int> &    matind,
d140 2
a141 1
            WitVector <double> & ub);
d143 2
a144 2
         // Retrieves the LP aspect of the model in the representation required
         // for the CPLEX function CPXcopylp.
@


1.31
log
@CPLEX
@
text
@d303 19
@


1.30
log
@Removed OptObj classes.
@
text
@d128 14
@


1.29
log
@multi-obj mode
@
text
@a67 1
      accessFunc (WitOptObj *,                   mainObj)
a80 5
      inline int nOptObjs ()
         {
         return myOptObjs_.nElements ();
         }

a94 5
      void store (WitOptObj * theObj);
         //
         // theObj is a new OptObj created for this OptModel.
         // This function stores theObj.

d143 5
a173 5
      virtual WitOptObj * generateObjectives () = 0;
         //
         // Generates all OptObjs.
         // Returns the main objective.

d256 1
a256 1
      void generateMainObjCoeffs ();
d258 1
a258 1
         // For each OptVar, theVar, computes theVar->mainObjCoeffVal.
d268 1
a268 1
      void printObjs ();
d270 1
a270 1
         // Prints all OptObjs in this OptModel.
a313 4
      WitList <WitOptObj> myOptObjs_;
         //
         // List of all OptObjs in this OptModel.

a331 4
      WitOptObj * mainObj_;
         //
         // The main objective function.

@


1.28
log
@Multi-objective mode
@
text
@d189 1
a189 1
         // Valid only in multi-objective mode.
d286 1
a286 1
         // Valid only in multi-objective mode.
d357 1
a357 1
         // In multi-objective mode:
d359 1
a359 1
         // In single-objective mode:
@


1.27
log
@Multi-objective mode
@
text
@d54 1
a54 1
         // (over and above what is automatically done by the solver).
d59 1
a59 1
         // (over and above what is automatically done by the solver).
@


1.26
log
@Multi-objective mode
@
text
@d65 6
a70 5
      accessFunc (const WitList <WitOptVar> &, myOptVars)
      accessFunc (const WitList <WitOptCon> &, myOptCons)
      accessFunc (int,                         nCoeffs)
      accessFunc (WitOptObj *,                 mainObj)
      accessFunc (FILE *,                      modelFile)
@


1.25
log
@Multi-objective mode
@
text
@d312 1
a312 1
      WitOptSolver * myOptSolver_;
d314 1
a314 1
         // The OptSolver owned by this OptModel.
@


1.24
log
@Stochastic Implosion
@
text
@d184 6
d282 5
d354 7
@


1.23
log
@Stochastic Implosion
@
text
@d202 1
a202 1
         // Display any problem-specific message in pre-release mode.
d207 1
a207 1
         // Prints problem-specific aspects of this OptModel.
d290 2
a291 2
         // Assuming the optimization problem was screened and an optimal dual
         // solution to the screened problem has been obtained, this function
d293 1
a293 1
         // for the dual of the unscreened problem.
d319 1
a319 1
         // # Coeffs in optimization problem.
@


1.22
log
@Stochastic Implosion
@
text
@d69 1
a69 1
      accessFunc (FILE *,                      optProbFile)
d194 1
a194 1
         // Prints a heading for OptVCs to optProbFile ().
d361 1
a361 1
      FILE * optProbFile_;
d363 1
a363 1
         // Optimization problem output file.
@


1.21
log
@Stochastic Implosion
@
text
@d36 1
a36 1
//          StochImpOP
@


1.20
log
@Stochastic Implosion
@
text
@d35 1
a35 1
//          DetImpOP
@


1.19
log
@App controlled opt implosion.
@
text
@d28 2
a29 2
//    linear programming, or
//    mixed integer programming.
d35 2
a36 1
//          ImpOM
a43 12
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitOptModel (WitOptImploder *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitOptModel ();

      //-----------------------------------------------------------------------
d54 1
a54 1
         // (over and above what is automatically done by myCoinSolver_).
d59 1
a59 1
         // (over and above what is automatically done by myCoinSolver_).
a64 1
      accessFunc (WitOptImploder *,            myOptImploder)
d69 1
a69 5

      inline FILE * modelFile ()
         {
         return modelFile_;
         }
a85 5
      inline bool isaMIP ()
         {
         return (nIntVars_ > 0);
         }

d138 4
a141 4
      void defMatrixByCols (
            WitVector <int> &    indexRow,
            WitVector <int> &    startOfEachColumn,
            WitVector <double> & elements);
d143 1
a143 1
         // Defines the matrix in the column major ordered format.
d156 12
d184 1
a184 1
      virtual void printModelElHeading () = 0;
d186 9
a194 1
         // Prints a heading for ModelEls to modelFile ().
d202 1
a202 1
         // Display any model-specific message in pre-release mode.
d207 1
a207 1
         // Prints model-specific aspects of this OptModel.
d224 1
a224 1
      int screen (const WitOptCon * theCon);
d240 1
a240 1
         // ModelEl myCoeffs_ vectors.
d252 1
a252 1
         // Stores all Coeffs in each ModelEl, in OptCon order for OptVars and
a263 4
      void generateBounds (const WitList <WitModelEl> & theModelEls);
         //
         // Generates the bounds for each ModelEl in theModelEls.

d280 4
d290 4
a293 4
         // Assuming the model was screened and an optimal dual solution to the
         // screened model has been obtained, this function modifies the dual
         // solution, in order to make it optimal and feasible for the dual of
         // the unscreened model.
d301 1
a301 5
      WitOptImploder * const myOptImploder_;
         //
         // The OptImploder under which this OptModel is operating.

      WitCoinSolver * myCoinSolver_;
d303 1
a303 1
         // The CoinSolver owned by this OptModel.
d319 1
a319 1
         // # Coeffs in model.
d361 1
a361 1
      FILE * modelFile_;
d363 1
a363 1
         // Optimization model output file.
@


1.18
log
@Updated the copyright date on all source files.
@
text
@@


1.17
log
@Added test in WIT for an LP variable whose lower bound exceeds its upper
bound.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.16
log
@Removed class OptSolver.
@
text
@d285 4
@


1.15
log
@Removed some more OSL items.
@
text
@d65 1
a65 1
         // (over and above what is automatically done by myOptSolver_).
d70 1
a70 1
         // (over and above what is automatically done by myOptSolver_).
a237 4
      void buildOptSolver ();
         //
         // Constructs myOptSolver_.

d302 1
a302 1
      WitOptSolver * myOptSolver_;
d304 1
a304 1
         // The OptSolver owned by this OptModel.
@


1.14
log
@[shared-resource pegging]
@
text
@d166 1
a166 1
      void print (bool printOslVecs);
a168 1
         // Also prints the Osl Vectors if printOslVecs is true.
@


1.13
log
@[multi-thread]
@
text
@d20 1
a20 1
#include <Dense.h>
d331 1
a331 1
      WitDenseList <WitCoeff> curConCoeffs_;
a333 1
         // Allocated only during buildCoeffs.
@


1.12
log
@[multi-thread]
@
text
@d82 1
a82 1
      inline static FILE * modelFile ()
d300 1
a300 9
      // Static private member data.
      //-----------------------------------------------------------------------

      static FILE * modelFile_;
         //
         // Optimization model output file.

      //-----------------------------------------------------------------------
      // Other private member data.
d367 4
@


1.11
log
@Double Precision.
@
text
@d22 1
d33 3
a35 2
//    OptModel
//       ImpOM
d38 1
a38 1
class WitOptModel
d46 1
a46 3
      WitOptModel (WitOptImploder * theOptImploder);
         //
         // myOptImploder <-- theOptImploder.
a76 2
      accessFunc (WitProblem *,                myProblem)
      accessFunc (WitMsgFacility &,            myMsgFac)
a314 8
      WitProblem * const myProblem_;
         //
         // The Problem to wich this OptModel belongs.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this OptModel.

@


1.10
log
@Continued implementation of PIP.
@
text
@d137 1
a137 1
      void incCoeff (WitOptVar * theVar, float delta);
@


1.9
log
@Continued implementation of opt with COIN.
@
text
@d36 1
a36 1
class WitOptModel: public WitUtil
@


1.8
log
@Continued implementation of opt with COIN.
@
text
@d241 3
a243 1
      noCopyCtorAssign (WitOptModel);
d298 2
@


1.7
log
@Continued implementation of opt with COIN.
@
text
@a172 4
      void getInitSoln (double * colsol);
         //
         // Copies the initial primal optimization solution into colsol.

@


1.6
log
@Continued implementation of opt with Coin.
@
text
@a176 10
      void storePrimalSoln (const double * colsol);
         //
         // Stores the primal optimization solution from colsol to this 
         // OptModel.

      void storeDualSoln (const double * rowduals);
         //
         // Stores the dual optimization solution from rowduals to this 
         // OptModel.

@


1.5
log
@Continued implementation of opt with COIN.
@
text
@d161 1
a161 1
      void generateOslVectors (
d166 1
a166 1
         // Generates 3 vectors to be passed to ekk_addColmunElementBlock.
a172 20
      void getConLBs (WitVector <double> & theConLBvec);
         //
         // Loads theConLBvec with the lower bound on each constraint.

      void getConUBs (WitVector <double> & theConUBvec);
         //
         // Loads theConUBvec with the upper bound on each constraint.

      void getVarLBs (WitVector <double> & theVarLBvec);
         //
         // Loads theVarLBvec with the lower bound on each variable.

      void getVarUBs (WitVector <double> & theVarUBvec);
         //
         // Loads theVarUBvec with the upper bound on each variable.

      void getObjCoeffs (WitVector <double> & theObjCoeffVec);
         //
         // Loads theObjVec with the objective coefficient on each variable.

d300 1
a300 1
      void printOslVectors ();
d302 1
a302 2
         // Temporarly generates the vectors to be passed to
         // ekk_addColumnElementBlock and prints them.
@


1.4
log
@Internal changes.
@
text
@d65 1
a65 1
         // (over and above what is automatically done by myOslMgr_).
d70 1
a70 1
         // (over and above what is automatically done by myOslMgr_).
d356 1
a356 1
      WitOslMgr * myOslMgr_;
d358 1
a358 1
         // The OslMgr owned by this OptModel.
@


1.3
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d58 1
a58 1
      virtual WitBoolean needDual () = 0;
d60 1
a60 1
         // Returns TRUE, iff a dual solution is needed.
d104 1
a104 1
      inline WitBoolean isaMIP ()
d168 1
a168 1
      void print (WitBoolean printOslVecs);
d171 1
a171 1
         // Also prints the Osl Vectors if printOslVecs is TRUE.
d415 1
a415 1
         // Valid iff needDual () is TRUE.
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d25 1
d29 5
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d19 2
a20 1
#include <ModelEl.h>
d141 1
a141 1
      inline const WitBoundPair & preScreenBounds (const WitOptVar * theVar);
d146 1
a146 1
      inline const WitBoundPair & preScreenBounds (const WitOptCon * theCon);
d289 4
a292 4
      WitCoeff * & varLastCoeff (const WitOptVar * theVar)
         {
         return varLastCoeff_[theVar->index ()];
         }
a410 34

//------------------------------------------------------------------------------
// Implementations of inline member functions for class OptModel.
//------------------------------------------------------------------------------

inline const WitBoundPair & WitOptModel::preScreenBounds (
      const WitOptVar * theVar)
   {
   return varPreScreenBounds_ (theVar->index ());
   }

//------------------------------------------------------------------------------

inline const WitBoundPair & WitOptModel::preScreenBounds (
      const WitOptCon * theCon)
   {
   return conPreScreenBounds_ (theCon->index ());
   }

//------------------------------------------------------------------------------
// Implementations of inline member functions for clients of class OptModel.
//------------------------------------------------------------------------------

inline WitOptImploder * WitOptObj::myOptImploder () const
   {
   return myOptModel_->myOptImploder ();
   }

//------------------------------------------------------------------------------

inline WitOptImploder * WitModelEl::myOptImploder () const
   {
   return myOptModel ()->myOptImploder ();
   }
@

