head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2006.01.09.20.02.30;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2006.01.03.17.12.43;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.28.18.57.50;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.05.22.24.08;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.05.20.47.34;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.22.22.20.27;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.16.23.24.49;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.16.20.42.15;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.16.19.24.33;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef DblDblStackH
#define DblDblStackH

//------------------------------------------------------------------------------
// Header file: "DblDblStack.h"
//
// Contains the declaration of the following class:
//
//    DblDblStack
//    DblDblStItr
//------------------------------------------------------------------------------

#include <Stack.h>
#include <Link.h>

//------------------------------------------------------------------------------
// Class DblDblStack
//
// A stack of pairs of doubles.
//
// Class Hierarchy:
//
// AbsStack
//    DblDblStack
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitDblDblStack: public WitAbsStack
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDblDblStack (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDblDblStack ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void push (double theDbl1, double theDbl2);
         //
         // Pushes (theDbl1, theDbl2) onto the top of this DblDblStack.

      bool pop (double & theDbl1, double & theDbl2);
         //
         // If this DblDblStack is non-Empty, the first pair it contains is
         // removed from it and the args are set to the elements of the pair.
         // Returns true, iff this DblDblStack is non-empty.

      inline void takeContents (WitDblDblStack & theDblDblStack)
         {
         takeContentsAbs (theDblDblStack);
         }

      void revCopyFrom (const WitDblDblStack & theDblDblStack);
         //
         // Copies the contents of theDblDblStack into this DblDblStack in
         // reverse order.

      void attach (WitDblDblStItr & theDblDblStItr) const;

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline WitDblDblLink * firstDblDblLink () const
         {
         return static_cast <WitDblDblLink *> (firstAbsLink ());
         }

      noCopyCtorAssign (WitDblDblStack);
   };

//------------------------------------------------------------------------------
// Class DblDblStItr
//
// Responsible for iterating through the elements of a DblDblStack.
//
// Class Hierarchy:
//
// AbsStItr
//    DblDblStItr
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitDblDblStItr: public WitAbsStItr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDblDblStItr ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDblDblStItr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool advance (double & theDbl1, double & theDbl2);
         //
         // See AbsStItr::advanceAbs.
         // Sets theDbl1 and theDbl2, if the advance is successful.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDblDblStItr);
   };

#endif
@


1.8
log
@[shared-resource pegging]
@
text
@@


1.7
log
@[shared-resource peging]
@
text
@d68 5
@


1.6
log
@[shared-resource pegging]
@
text
@d68 5
@


1.5
log
@[shared-resource pegging]
@
text
@d68 2
a116 2
      void attachTo (const WitDblDblStack & theDblDblStack);

@


1.4
log
@[shared-resource pegging]
@
text
@a67 8
      static bool advance (
            WitDblDblStItr & theItr,
            double &         theDbl1,
            double &         theDbl2);
         //
         // See AbsStItr::advanceAbs.
         // Sets theDbl1 and theDbl2, if the advance is successful.

d117 4
a120 4
      inline bool advance (double & theDbl1, double & theDbl2)
         {
         return WitDblDblStack::advance (* this, theDbl1, theDbl2);
         }
@


1.3
log
@[shared-resource pegging]
@
text
@d19 1
d68 8
d90 49
@


1.2
log
@[shared-resource pegging]
@
text
@d61 6
@


1.1
log
@[shared-resource pegging]
@
text
@d15 4
d21 54
@

