head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2003.09.30.15.40.54;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2003.09.29.23.29.40;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.26.20.55.13;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.24.23.08.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Continued implementation of post-implosion pegging.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PIPegIntH
#define PIPegIntH

//------------------------------------------------------------------------------
// Header file: "PIPegInt.h"
//
// Contains the declaration of class PIPegInt.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PIPegInt
// "Post-Implosion Pegging Interface"
// Interface to the Post-Implosion Pegging Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    PIPegInt
//------------------------------------------------------------------------------

class WitPIPegInt: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPIPegInt (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPIPegInt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void preprocess ();
         //
         // Puts the PI Pegging Subsystem into a preprocessed state.

      void unpreprocess ();
         //
         // Puts the PI Pegging Subsystem into an unpreprocessed state.

      void clearTargs ();
         //
         // Clears the PIPegTargs owned by the PI Pegging subsystem.

      void recIncShipVol (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incVol);
         //
         // Records an increase of incVol to theDemand->shipVol ()[shipPer].

      void formPegging ();
         //
         // Forms the pegging.

      void clearPegging ();
         //
         // Clears the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      accessNonNull (WitPIPegMgr *, myPIPegMgr)

      noCopyCtorAssign (WitPIPegInt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPIPegMgr * myPIPegMgr_;
         //
         // The PIPegMgr owned by this PIPegInt in PI pegging mode;
         // otherwise NULL.
   };

#endif
@


1.3
log
@Contined implementation of post-implosion pegging.
@
text
@@


1.2
log
@Continued implementation of post-implosion pegging.
@
text
@d52 11
a62 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d85 2
d95 2
a96 1
         // The PIPegMgr owned by this PIPegInt.
@


1.1
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d63 1
a63 1
      void peg ();
d65 1
a65 1
         // Builds the pegging.
d67 1
a67 1
      void clear ();
@

