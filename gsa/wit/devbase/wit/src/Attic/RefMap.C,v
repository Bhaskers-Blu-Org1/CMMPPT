head	1.36;
access;
symbols
	latest_sce_4_20_20060523:1.17.0.2
	sce_4_20_20060523:1.17
	latest_sce4_20_OSL:1.16.0.2
	sce_4_20_OSL:1.16
	sce_410_withVa:1.15
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.1;
locks; strict;
comment	@ * @;


1.36
date	2007.11.15.19.57.35;	author rjw;	state dead;
branches;
next	1.35;

1.35
date	2007.10.08.18.56.35;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.09.26.20.54.39;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2007.09.12.23.09.00;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2007.07.30.22.38.03;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2007.07.27.19.53.38;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.07.27.16.33.32;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.07.25.19.53.26;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.07.24.22.17.32;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.07.24.21.22.04;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.06.08.22.00.56;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.06.05.16.15.24;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.06.04.20.07.11;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.06.04.19.34.01;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.06.04.19.05.56;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.06.01.22.25.07;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.30.21.02.11;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.22.15.46.52;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.05.14.16.18.39;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.02.17.34.10;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.09.30.22.53.53;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.28.20.14.37;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.24.18.42.04;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.22.19.25.56;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.07.15.18.26;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.24.22.21.33;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.23.19.14.26;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.22.16.37.19;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.12.17.21.56;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.10.22.53.21;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.05.22.19.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.05.00.06.54;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.03.22.13.06;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.03.19.07.28;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.02.23.52.14;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.01.20.53.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "RefMap.C"
// Contains:
//    The implementation         of class template RefMap <DomEl, RangeEl>.
//    The explicit instantiation of class template RefMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <RefMap.h>
#include <Material.h>
#include <Demand.h>
#include <Opn.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <BoundSet.h>
#include <Scenario.h>

//------------------------------------------------------------------------------
// Implementation of class template RefMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

template <RefMapArgDecs> 
      WitRefMap <RefMapArgs>::WitRefMap ():
         myPtrVec_ ()
   {
   if (false)
      {
      DomEl * theDomEl;

      DomEl::verifyMappingIndex (theDomEl);
      }
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs> 
      WitRefMap <RefMapArgs>::WitRefMap (WitProblem * theProblem):
         myPtrVec_ ()
   {
   allocate (theProblem);
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs> 
       WitRefMap <RefMapArgs>::~WitRefMap ()
   {
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs> 
      void WitRefMap <RefMapArgs>::allocate (WitProblem * theProblem)
   {
   myPtrVec_.resize (DomEl::nInstances (theProblem));
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs>
      void WitRefMap <RefMapArgs>::clear ()
   {
   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs>
      void WitRefMap <RefMapArgs>::setMapFor (
         DomEl *   theDomEl,
         RangeEl & theRangeEl)
   {
   witAssert (theDomEl != NULL);

   witAssert (myPtrVec_[theDomEl->mappingIndex ()] == NULL);

   myPtrVec_[theDomEl->mappingIndex ()] = & theRangeEl;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template RefMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

template class WitRefMap <WitPart,      bool>;
template class WitRefMap <WitPart,      int>;

template class WitRefMap <WitPart,      WitDblFlexVec>;
template class WitRefMap <WitOperation, WitDblFlexVec>;
template class WitRefMap <WitConsEntry, WitDblFlexVec>;
template class WitRefMap <WitSubEntry,  WitDblFlexVec>;
template class WitRefMap <WitBopEntry,  WitDblFlexVec>;
template class WitRefMap <WitScenario,  WitDblFlexVec>;

template class WitRefMap <WitMaterial,  WitFlexVec  <bool>                >;
template class WitRefMap <WitBomEntry,  WitFlexVec  <bool>                >;

template class WitRefMap <WitOperation, WitTVec     <bool>                >;
template class WitRefMap <WitBillEntry, WitTVec     <int>                 >;
template class WitRefMap <WitBopEntry,  WitTVec     <int>                 >;

template class WitRefMap <WitNode,      WitList     <WitNode>             >;
template class WitRefMap <WitPart,      WitList     <WitBopEntry>         >;
template class WitRefMap <WitBomEntry,  WitList     <WitSubEntry>         >;

template class WitRefMap <WitBillEntry, WitVector   <int>                 >;

template class WitRefMap <WitPart,      WitPtrVec   <WitPart>             >;

template class WitRefMap <WitPart,      WitPtrTVec  <WitBopEntry>         >;

template class WitRefMap <WitPart,      WitRefMap   <WitScenario,
                                                     WitDblFlexVec>       >;
template class WitRefMap <WitMaterial,  WitRefMap   <WitScenario,
                                                     WitDblFlexVec>       >;
template class WitRefMap <WitDemand,    WitRefMap   <WitScenario,
                                                     WitDblFlexVec>       >;
template class WitRefMap <WitOperation, WitRefMap   <WitScenario,
                                                     WitDblFlexVec>       >;
template class WitRefMap <WitSubEntry,  WitRefMap   <WitScenario,
                                                     WitDblFlexVec>       >;
template class WitRefMap <WitBoundSet,  WitRefMap   <WitScenario,
                                                     WitDblFlexVec>       >;
@


1.35
log
@Stochastic Implosion
@
text
@@


1.34
log
@Stochastic Implosion
@
text
@d19 1
d24 2
d101 1
d119 13
@


1.33
log
@Stochastic Implosion
@
text
@a18 1
#include <Demand.h>
a22 1
#include <Schedule.h>
a114 6

template class WitRefMap <WitPart,      WitSchedule <WitScenario, double> >;
template class WitRefMap <WitMaterial,  WitSchedule <WitScenario, double> >;
template class WitRefMap <WitDemand,    WitSchedule <WitScenario, double> >;
template class WitRefMap <WitOperation, WitSchedule <WitScenario, double> >;
template class WitRefMap <WitSubEntry,  WitSchedule <WitScenario, double> >;
@


1.32
log
@Stochastic Implosion
@
text
@d101 2
a102 2
template class WitRefMap <WitMaterial,  WitFlexVec  <bool>          >;
template class WitRefMap <WitBomEntry,  WitFlexVec  <bool>          >;
d104 3
a106 3
template class WitRefMap <WitOperation, WitTVec     <bool>          >;
template class WitRefMap <WitBillEntry, WitTVec     <int>           >;
template class WitRefMap <WitBopEntry,  WitTVec     <int>           >;
d108 3
a110 3
template class WitRefMap <WitNode,      WitList     <WitNode>       >;
template class WitRefMap <WitPart,      WitList     <WitBopEntry>   >;
template class WitRefMap <WitBomEntry,  WitList     <WitSubEntry>   >;
d112 1
a112 1
template class WitRefMap <WitBillEntry, WitVector   <int>           >;
d114 1
a114 1
template class WitRefMap <WitPart,      WitPtrVec   <WitPart>       >;
d116 7
a122 1
template class WitRefMap <WitPart,      WitPtrTVec  <WitBopEntry>   >;
@


1.31
log
@Stochastic Implosion
@
text
@a23 1
#include <Scenario.h>
a116 9

template class WitRefMap <WitScenario,  WitPtrSched <WitPart,
                                                     WitStScrapVar> >;

template class WitRefMap <WitScenario,  WitPtrSched <WitOperation,
                                                     WitStExecVar>  >;

template class WitRefMap <WitScenario,  WitPtrSched <WitPart,
                                                     WitStResCon>   >;
@


1.30
log
@Stochastic Implosion
@
text
@d124 3
@


1.29
log
@Stochastic Implosion
@
text
@d102 2
a103 2
template class WitRefMap <WitMaterial,  WitFlexVec  <bool>         >;
template class WitRefMap <WitBomEntry,  WitFlexVec  <bool>         >;
d105 3
a107 3
template class WitRefMap <WitOperation, WitTVec     <bool>         >;
template class WitRefMap <WitBillEntry, WitTVec     <int>          >;
template class WitRefMap <WitBopEntry,  WitTVec     <int>          >;
d109 3
a111 3
template class WitRefMap <WitNode,      WitList     <WitNode>      >;
template class WitRefMap <WitPart,      WitList     <WitBopEntry>  >;
template class WitRefMap <WitBomEntry,  WitList     <WitSubEntry>  >;
d113 1
a113 1
template class WitRefMap <WitBillEntry, WitVector   <int>          >;
d115 1
a115 1
template class WitRefMap <WitPart,      WitPtrVec   <WitPart>      >;
d117 4
a120 1
template class WitRefMap <WitPart,      WitPtrTVec  <WitBopEntry>  >;
d123 1
a123 1
                                                     WitStExecVar> >;
@


1.28
log
@Stochastic Implosion
@
text
@d119 2
a120 2
//mplate class WitRefMap <WitScenario,  WitPtrSched <WitOperation,
//                                                   WitStExecVar> >;
@


1.27
log
@Stochastic Implosion
@
text
@d24 1
d102 2
a103 2
template class WitRefMap <WitMaterial,  WitFlexVec <bool>        >;
template class WitRefMap <WitBomEntry,  WitFlexVec <bool>        >;
d105 3
a107 3
template class WitRefMap <WitOperation, WitTVec    <bool>        >;
template class WitRefMap <WitBillEntry, WitTVec    <int>         >;
template class WitRefMap <WitBopEntry,  WitTVec    <int>         >;
d109 3
a111 3
template class WitRefMap <WitNode,      WitList    <WitNode>     >;
template class WitRefMap <WitPart,      WitList    <WitBopEntry> >;
template class WitRefMap <WitBomEntry,  WitList    <WitSubEntry> >;
d113 1
a113 1
template class WitRefMap <WitBillEntry, WitVector  <int>         >;
d115 1
a115 1
template class WitRefMap <WitPart,      WitPtrVec  <WitPart>     >;
d117 4
a120 1
template class WitRefMap <WitPart,      WitPtrTVec <WitBopEntry> >;
@


1.26
log
@Stochastic Implosion
@
text
@d34 3
a36 1
   ifDebug (DomEl * theDomEl);
d38 2
a39 1
   ifDebug (DomEl::verifyMappingIndex (theDomEl));
a47 4
   ifDebug (DomEl * theDomEl);

   ifDebug (DomEl::verifyMappingIndex (theDomEl));

@


1.25
log
@Stochastic Implosion
@
text
@a96 2
template class WitRefMap <WitMaterial,  WitDblFlexVec>;
template class WitRefMap <WitDemand,    WitDblFlexVec>;
@


1.24
log
@Stochastic Implosion
@
text
@a104 1
template class WitRefMap <WitOperation, WitFlexVec <bool>        >;
d107 3
a109 2
template class WitRefMap <WitBillEntry, WitFlexVec <int>         >;
template class WitRefMap <WitBopEntry,  WitFlexVec <int>         >;
@


1.23
log
@Stochastic Implosion
@
text
@d94 1
d105 1
d107 2
d117 2
@


1.22
log
@Stochastic Implosion
@
text
@a89 11

template <RefMapArgDecs>
      void WitRefMap <RefMapArgs>::operator = (const RangeEl & theRangeEl)
   {
   int theIdx;

   for (theIdx = 0; theIdx < myPtrVec_.length (); theIdx ++)
      myPtrVec_.myElemAt (theIdx) = theRangeEl;
   }

//------------------------------------------------------------------------------
d113 1
a113 86
//------------------------------------------------------------------------------
// Implementation of NonClass functions with arguments belonging to RefMap
// classes.
//------------------------------------------------------------------------------

template <typename DomEl>
      void WitNonClass::copy (
         WitRefMap <DomEl, WitDblFlexVec> & theRefMap,
         double                             theDbl)
   {
   int theIdx;

   for (theIdx = 0; theIdx < theRefMap.nRangeEls (); theIdx ++)
      theRefMap.myRangeElAt (theIdx) = theDbl;
   }

//------------------------------------------------------------------------------

template <typename DomEl>
      void WitNonClass::copy (
               WitRefMap   <DomEl, WitDblFlexVec> & theRefMap,
         const WitSchedule <DomEl, double> &        theSched)
   {
   int theIdx;

   for (theIdx = 0; theIdx < theRefMap.nRangeEls (); theIdx ++)
      theRefMap.myRangeElAt (theIdx) = theSched.myTVecAt (theIdx);
   }

//------------------------------------------------------------------------------
// Explicit instantiation of function template NonClass::copy (RefMap, double)
//------------------------------------------------------------------------------

template
   void WitNonClass::copy <WitPart> (
      WitRefMap <WitPart, WitDblFlexVec> &,
      double);

template
   void WitNonClass::copy <WitMaterial> (
      WitRefMap <WitMaterial, WitDblFlexVec> &,
      double);

template
   void WitNonClass::copy <WitDemand> (
      WitRefMap <WitDemand, WitDblFlexVec> &,
      double);

template
   void WitNonClass::copy <WitOperation> (
      WitRefMap <WitOperation, WitDblFlexVec> &,
      double);

template
   void WitNonClass::copy <WitSubEntry> (
      WitRefMap <WitSubEntry, WitDblFlexVec> &,
      double);

//------------------------------------------------------------------------------
// Explicit instantiation of function template NonClass::copy (RefMap, Schedule)
//------------------------------------------------------------------------------

template
   void WitNonClass::copy <WitPart> (
            WitRefMap   <WitPart, WitDblFlexVec> &,
      const WitSchedule <WitPart, double> &);

template
   void WitNonClass::copy <WitMaterial> (
            WitRefMap   <WitMaterial, WitDblFlexVec> &,
      const WitSchedule <WitMaterial, double> &);

template
   void WitNonClass::copy <WitDemand> (
            WitRefMap   <WitDemand, WitDblFlexVec> &,
      const WitSchedule <WitDemand, double> &);

template
   void WitNonClass::copy <WitOperation> (
            WitRefMap   <WitOperation, WitDblFlexVec> &,
      const WitSchedule <WitOperation, double> &);

template
   void WitNonClass::copy <WitSubEntry> (
            WitRefMap   <WitSubEntry, WitDblFlexVec> &,
      const WitSchedule <WitSubEntry, double> &);
@


1.21
log
@Stochastic Implosion
@
text
@d104 2
d110 1
d112 9
d122 1
a122 2
template class WitRefMap <WitNode,      WitList   <WitNode> >;
template class WitRefMap <WitBillEntry, WitVector <int>     >;
@


1.20
log
@Stochastic Implosion
@
text
@d110 2
a111 3
template class WitRefMap <WitNode,      WitList <WitNode> >;

template class WitRefMap <WitBillEntry, WitVector <int> >;
@


1.19
log
@Stochastic Implosion
@
text
@a103 1
template class WitRefMap <WitNode,      WitList <WitNode> >;
d110 4
@


1.18
log
@Stochastic Implosion
@
text
@d24 1
d42 13
d90 11
d106 2
d110 87
@


1.17
log
@Updated the copyright date on all source files.
@
text
@d70 2
d79 4
a82 2
template class WitRefMap <WitNode,      WitList    <WitNode> >;
template class WitRefMap <WitOperation, WitFlexVec <int> >;
@


1.16
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.15
log
@Revised mappingIndex code.
@
text
@d77 2
a78 32
template class WitRefMap <WitNode,      WitList      <WitNode> >;

template class WitRefMap <WitPart,      bool>;
template class WitRefMap <WitPart,      int>;
template class WitRefMap <WitPart,      WitDblFlexVec>;
template class WitRefMap <WitPart,      WitList      <WitBopEntry> >;
template class WitRefMap <WitPart,      WitDenseList <WitPart> >;
template class WitRefMap <WitPart,      WitPtrTVec   <WitBopEntry> >;

template class WitRefMap <WitMaterial,  WitFlexVec   <bool> >;
template class WitRefMap <WitMaterial,  WitDblFlexVec>;

template class WitRefMap <WitDemand,    WitDblFlexVec>;

template class WitRefMap <WitOperation, WitTVec      <bool> >;
template class WitRefMap <WitOperation, WitFlexVec   <int> >;
template class WitRefMap <WitOperation, WitDblFlexVec>;

template class WitRefMap <WitBillEntry, WitVector    <int> >;
template class WitRefMap <WitBillEntry, WitTVec      <int> >;
template class WitRefMap <WitBillEntry, WitDblFlexVec>;

template class WitRefMap <WitConsEntry, WitDblFlexVec>;

template class WitRefMap <WitBomEntry,  WitFlexVec   <bool> >;
template class WitRefMap <WitBomEntry,  WitDblFlexVec>;
template class WitRefMap <WitBomEntry,  WitList      <WitSubEntry> >;

template class WitRefMap <WitSubEntry,  WitDblFlexVec>;

template class WitRefMap <WitBopEntry,  WitTVec      <int> >;
template class WitRefMap <WitBopEntry,  WitDblFlexVec>;
@


1.14
log
@Revised mappingIndex code.
@
text
@a23 1
#include <MapIdxI.h>
@


1.13
log
@An attempt to fix warnings from the gcc 3.3.3 compiler.
@
text
@d71 1
a71 1
   myPtrVec_[mappingIndex (theDomEl)] = & theRangeEl;
@


1.12
log
@Fixed a bug in the screening of the optimization model.
@
text
@d69 3
a71 1
   myPtrAt (theDomEl) = & theRangeEl;
@


1.11
log
@Double Precision.
@
text
@a79 1
template class WitRefMap <WitPart,      WitFlexVec   <bool> >;
@


1.10
log
@Double Precision.
@
text
@d81 1
a81 1
template class WitRefMap <WitPart,      WitFlexVec   <double> >;
d87 1
a87 1
template class WitRefMap <WitMaterial,  WitFlexVec   <double> >;
d89 1
a89 1
template class WitRefMap <WitDemand,    WitFlexVec   <double> >;
d93 1
a93 1
template class WitRefMap <WitOperation, WitFlexVec   <double> >;
d97 1
a97 1
template class WitRefMap <WitBillEntry, WitFlexVec   <double> >;
d99 1
a99 1
template class WitRefMap <WitConsEntry, WitFlexVec   <double> >;
d102 1
a102 1
template class WitRefMap <WitBomEntry,  WitFlexVec   <double> >;
d105 1
a105 1
template class WitRefMap <WitSubEntry,  WitFlexVec   <double> >;
d108 1
a108 1
template class WitRefMap <WitBopEntry,  WitFlexVec   <double> >;
@


1.9
log
@Double Precision.
@
text
@d81 1
a81 1
template class WitRefMap <WitPart,      WitRealVec>;
d87 1
a87 1
template class WitRefMap <WitMaterial,  WitRealVec>;
a89 1
template class WitRefMap <WitDemand,    WitRealVec>;
a93 1
template class WitRefMap <WitOperation, WitRealVec>;
d99 1
a99 1
template class WitRefMap <WitConsEntry, WitRealVec>;
a105 1
template class WitRefMap <WitSubEntry,  WitRealVec>;
d108 1
a108 1
template class WitRefMap <WitBopEntry,  WitRealVec>;
@


1.8
log
@Double Precision.
@
text
@d81 1
a81 3
template class WitRefMap <WitPart,      WitFltRealVec>;
template class WitRefMap <WitPart,      WitDblRealVec>;
template class WitRefMap <WitPart,      WitFltRealTVc>;
d87 1
a87 3
template class WitRefMap <WitMaterial,  WitFltRealVec>;
template class WitRefMap <WitMaterial,  WitDblRealVec>;
template class WitRefMap <WitMaterial,  WitFltRealTVc>;
d90 1
a90 3
template class WitRefMap <WitDemand,    WitFltRealVec>;
template class WitRefMap <WitDemand,    WitDblRealVec>;
template class WitRefMap <WitDemand,    WitFltRealTVc>;
d95 1
a95 3
template class WitRefMap <WitOperation, WitFltRealVec>;
template class WitRefMap <WitOperation, WitDblRealVec>;
template class WitRefMap <WitOperation, WitFltRealTVc>;
d101 1
a101 3
template class WitRefMap <WitConsEntry, WitFltRealVec>;
template class WitRefMap <WitConsEntry, WitDblRealVec>;
template class WitRefMap <WitConsEntry, WitFltRealTVc>;
d108 1
a108 3
template class WitRefMap <WitSubEntry,  WitFltRealVec>;
template class WitRefMap <WitSubEntry,  WitDblRealVec>;
template class WitRefMap <WitSubEntry,  WitFltRealTVc>;
d111 1
a111 3
template class WitRefMap <WitBopEntry,  WitFltRealVec>;
template class WitRefMap <WitBopEntry,  WitDblRealVec>;
template class WitRefMap <WitBopEntry,  WitFltRealTVc>;
@


1.7
log
@Double Precision.
@
text
@d81 3
a83 1
template class WitRefMap <WitPart,      WitRealVec>;
d89 3
a91 1
template class WitRefMap <WitMaterial,  WitRealVec>;
d94 3
a96 1
template class WitRefMap <WitDemand,    WitRealVec>;
d101 3
a103 1
template class WitRefMap <WitOperation, WitRealVec>;
d109 3
a111 1
template class WitRefMap <WitConsEntry, WitRealVec>;
d118 3
a120 1
template class WitRefMap <WitSubEntry,  WitRealVec>;
d123 3
a125 1
template class WitRefMap <WitBopEntry,  WitRealVec>;
@


1.6
log
@Double Precision.
@
text
@a80 1
template class WitRefMap <WitPart,      WitFlexVec   <float> >;
a85 1
template class WitRefMap <WitMaterial,  WitTVec      <float> >;
a86 1
template class WitRefMap <WitMaterial,  WitFlexVec   <float> >;
a88 2
template class WitRefMap <WitDemand,    WitTVec      <float> >;
template class WitRefMap <WitDemand,    WitFlexVec   <float> >;
a93 1
template class WitRefMap <WitOperation, WitFlexVec   <float> >;
a100 1
template class WitRefMap <WitConsEntry, WitFlexVec   <float> >;
a106 1
template class WitRefMap <WitSubEntry,  WitFlexVec   <float> >;
a110 1
template class WitRefMap <WitBopEntry,  WitTVec      <float> >;
@


1.5
log
@Double Precision.
@
text
@d108 1
d116 1
d120 1
@


1.4
log
@Double Precision.
@
text
@d101 1
@


1.3
log
@Double Precision.
@
text
@d95 1
@


1.2
log
@Double Precision.
@
text
@d90 1
@


1.1
log
@Continued implementation of post-implosion pegging.
@
text
@d82 1
a114 25


#if 0












template class 


template class 


template class 


#endif
@

