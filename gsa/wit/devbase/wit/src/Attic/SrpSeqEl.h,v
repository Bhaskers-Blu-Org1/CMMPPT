head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2006.03.13.17.02.23;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2006.03.11.00.03.46;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.10.23.23.31;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.21.21.11.17;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.18.00.42.59;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.14.21.59.09;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.10.17.09.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.06.20.36.01;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.31.20.45.31;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.19.22.20.42;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.11.23.18.34;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@GPIP
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpSeqElH
#define SrpSeqElH

//------------------------------------------------------------------------------
// Header file: "SrpSeqEl.h"
//
// Contains the declaration of class GpipSeqEl.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class GpipSeqEl
//
// "Group Post-Implosion Pegging Sequence Element."
//
// Represents an element in the shipment sequence for SRP,
// or represents no element in the shipment sequence (the "vacuous" element).
//
// Implemented in SrpReq.C.
//------------------------------------------------------------------------------

class WitGpipSeqEl
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitGpipSeqEl (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            int         theSeqNo);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitGpipSeqEl ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline bool hasaShipment ()
         {
         return (myDemand_ != NULL);
         }

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (int, mySeqNo)

      void getData (WitDemand * & theDemand, WitPeriod & shipPer);
         //
         // Sets theDemand and shipPer to the data for this SepSelEl.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitGpipSeqEl);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDemand * const myDemand_;
         //
         // The Demand of the shipment sequence element represented by this
         // GpipSeqEl, or NULL for the vacuous element.

      const WitPeriod shipPerFor_;
         //
         // The shipment period of the shipment sequence element represented by
         // this GpipSeqEl, or -1 for the vacuous element.

      const int mySeqNo_;
         //
         // The sequence number of the shipment sequence element represented by
         // this GpipSeqEl.
         // The vacuous element is assigned a sequence number higher than all
         // others.
   };

#endif
@


1.10
log
@GPIP
@
text
@@


1.9
log
@GPIP
@
text
@d16 1
a16 1
// Contains the declaration of class SrpSeqEl.
d22 1
a22 1
// Class SrpSeqEl
d32 1
a32 1
class WitSrpSeqEl
d40 1
a40 1
      WitSrpSeqEl (
d49 1
a49 1
      ~WitSrpSeqEl ();
d76 1
a76 1
      noCopyCtorAssign (WitSrpSeqEl);
d85 1
a85 1
         // SrpSeqEl, or NULL for the vacuous element.
d90 1
a90 1
         // this SrpSeqEl, or -1 for the vacuous element.
d95 1
a95 1
         // this SrpSeqEl.
@


1.8
log
@[shared-resource pegging]
@
text
@d24 1
a24 1
// "Shared-Resource Pegging Sequence Element."
@


1.7
log
@[shared-resource pegging]
@
text
@d27 1
a27 1
// or represents no element in the shipment sequence (the NULL element).
a54 5
      inline bool isNull ()
         {
         return (myDemand_ == NULL);
         }

d85 1
a85 1
         // SrpSeqEl, or NULL for the NULL element.
d90 1
a90 1
         // this SrpSeqEl, or -1 for the NULL element.
d96 1
a96 1
         // The NULL element is assigned a sequence number higher than all
@


1.6
log
@[shared-resource pegging]
@
text
@d60 5
@


1.5
log
@[shared-resource pegging]
@
text
@d26 2
a27 1
// Represents an element in the shipment sequence for SRP.
d52 9
d85 1
a85 1
         // SrpSeqEl.
d90 1
a90 1
         // this SrpSeqEl.
d96 2
@


1.4
log
@[shared-resource pegging]
@
text
@d54 5
a58 3
      accessFunc (WitDemand *, myDemand)
      accessFunc (WitPeriod,   shipPerFor)
      accessFunc (int,         mySeqNo)
@


1.3
log
@[shared-resource pegging]
@
text
@d55 1
a55 1
      accessFunc (WitPeriod,   myShipPer)
d75 1
a75 1
      const WitPeriod myShipPer_;
@


1.2
log
@[shared-resource pegging]
@
text
@d28 1
a28 1
// Implemented in SRP.C.
@


1.1
log
@[shared-resource pegging]
@
text
@d26 3
a28 1
// Represents an element in the shipment sequence for Shared-Resource Pegging.
@

