head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2003.03.03.21.40.07;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2003.03.03.21.07.31;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.27.19.20.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.25.22.17.07;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Continued implementation of proportionate routing.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OrCand1H
#define OrCand1H

//------------------------------------------------------------------------------
// Header file: "OrCand1.h"
//
// Contains the declaration of class OrCand.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class OrCand
//
// "Routing Candidate"
// Represents a BillEntry in its role as a candidate for routing.
//
// Class Hierarchy:
//
// OrCand
//    ProdOrCand
//    ConsOrCand
//
// Implemented in OldRt1.C.
//------------------------------------------------------------------------------

class WitOrCand: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOrCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool isEligible (WitPeriod thePer) = 0;
         //
         // Returns true, iff this OrCand is eligible to be selected in thePer.

      virtual WitBillEntry * myBillEntry () = 0;
         //
         // Returns the BillEntry represented by this OrCand.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitOrSite *, myOrSite)

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitOrCand)

      static int nInstances (WitProblem *);
         //
         // Not to be called; needed by the compiler for the PtrSched template.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOrCand (WitOrSite *, WitOrMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOrCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int mappingIndex_;
         //
         // Mapping index.

      WitOrSite * const myOrSite_;
         //
         // The OrSite for this OrCand.
   };

#endif
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@@


1.2
log
@Continued implementation of proportionate routing.
@
text
@a49 4
      virtual void prtOpPtID () = 0;
         //
         // Prints the ID for a OpPt for this OrCand.

@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d50 1
a50 1
      virtual void prtPrPtID () = 0;
d52 1
a52 1
         // Prints the ID for a PrPt for this OrCand.
@

