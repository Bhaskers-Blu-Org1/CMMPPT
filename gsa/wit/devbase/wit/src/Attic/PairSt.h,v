head	1.18;
access;
symbols
	EndRw-branch:1.17.0.6
	Root-of-EndRw:1.17
	rwToStl:1.17.0.4
	latest_sce_3_10_20010924:1.17.0.2
	sce_3_10_20010924:1.17
	latest_sce_3_00_20010601:1.11.0.2
	sce_3_00_20010601:1.11
	latest_sce_2_31_20010308:1.7.0.2
	sce_2_31_20010308:1.7;
locks; strict;
comment	@ * @;


1.18
date	2003.03.03.23.26.58;	author rjw;	state dead;
branches;
next	1.17;

1.17
date	2001.07.03.20.07.30;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.27.21.45.12;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.21.18.24.32;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.21.15.40.05;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.20.20.07.05;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.18.21.38.38;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.25.14.53.26;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.10.22.31.13;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.03.19.23.05;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.12.19.48.08;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.01.16.24.44;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.27.00.24.39;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.24.20.05.57;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.15.19.01.51;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.11.16.35.10;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.28.22.13.38;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.22.16.18.26;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.17
log
@Moved Stack template implementations to header files.
@
text
@@


1.16
log
@Initial implementation of multi-route class templates.
@
text
@a0 277
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PairStH
#define PairStH

//------------------------------------------------------------------------------
// Header file: "PairSt.h"
//
// Contains the declaration of the following templates:
//
//    AbsPairStack       <ValType>
//    PairStack <ObjType, ValType>
//    PairStItr <ObjType, ValType>
//------------------------------------------------------------------------------

#include <Stack.h>

//------------------------------------------------------------------------------
// Class template AbsPairStack <ValType>
//
// A stack of pairs of the form: (WitTlObj *, ValType).
//
// Class Hierarchy:
//
// AbsStack
//    AbsPairStack          <ValType>
//       PairStack <ObjType, ValType>
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

template <class ValType> 
      class WitAbsPairStack: public WitAbsStack
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static void implementThisCase ();
         //
         // No-op.
         // Calling this function on a specific case of AbsPairStack <ValType> 
         // forces that case to be implemented.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsPairStack (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsPairStack ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void pushAbsPair (WitTlObj * theTlObj, ValType theVal);
         //
         // Pushes (theTlObj, theVal) onto the top of this AbsPairStack.

      WitBoolean popAbsPair (WitTlObj * & theTlObj, ValType & theVal);
         //
         // If this AbsPairStack is non-Empty, the first pair it contains
         // is removed from it and (theTlObj, theVal) is set to the removed
         // pair. Returns TRUE, iff this AbsPairStack is non-empty.

      void slowAppendAbsPair (WitTlObj * theTlObj, ValType theVal);
         //
         // Appends (theTlObj, theVal) to the end of this AbsPairStack, in
         // linear time.

      WitTlObj * firstTlObj () const;
         //
         // Returns the first object in this AbsPairStack.
         // Not to be called if this AbsPairStack is empty.

      static WitBoolean advanceAbsPair (
            WitAbsStItr & theItr,
            WitTlObj * &  theTlObj,
            ValType &     theVal);
         //
         // See AbsStItr::advanceAbs.
         // Sets theTlObj and theVal, if the advance is successful.

      inline WitPairLink <ValType> * firstPairLink () const
         {
         return (WitPairLink <ValType> *) firstAbsLink ();
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static WitPairLinkMgr <ValType> * itsPairLinkMgr (
            WitProblem * theProblem);
         //
         // Returns the PairLinkMgr <ValType> owned by theProblem.

      noCopyCtorAssignTemp (WitAbsPairStack, ValType);
  };

//------------------------------------------------------------------------------
// Class template PairStack <ObjType, ValType>
//
// A stack of pairs of the form: (ObjType *, ValType).
//
// Class Hierarchy:
//
// AbsStack
//    AbsPairStack          <ValType>
//       PairStack <ObjType, ValType>
//
// All implemented is inline.
//------------------------------------------------------------------------------

template <class ObjType, class ValType> 
      class WitPairStack: public WitAbsPairStack <ValType>
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPairStack (WitProblem * theProblem):
            WitAbsPairStack <ValType> (theProblem)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPairStack ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void push (ObjType * theObject, ValType theVal)
         {
         pushAbsPair ((WitTlObj *) theObject, theVal);
         }

      inline WitBoolean pop (ObjType * & theObject, ValType & theVal)
         {
         return popAbsPair ((WitTlObj * &) theObject, theVal);
         }

      inline void slowAppend (ObjType * theObject, ValType theVal)
         {
         slowAppendAbsPair ((WitTlObj *) theObject, theVal);
         }

      inline void takeContents (WitPairStack <ObjType, ValType> & thePairStack)
         {
         takeContentsAbs (thePairStack);
         }

      inline ObjType * firstObject () const
         {
         return (ObjType *) firstTlObj ();
         }

      inline static WitBoolean advance (
            WitPairStItr <ObjType, ValType> & theItr,
            ObjType * &                       theObject,
            ValType &                         theVal)
         {
         return advanceAbsPair (theItr, (WitTlObj * &) theObject, theVal);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitPairStack                                 (
            const WitPairStack <ObjType, ValType> &);

      WitPairStack <ObjType, ValType> & operator = (
            const WitPairStack <ObjType, ValType> &);
         //
         // See noCopyCtorAssign in macs.h.
   };

//------------------------------------------------------------------------------
// Class template PairStItr <ObjType, ValType>
//
// Responsible for iterating through the elements of a
// PairStack <ObjType, ValType>.
//
// Class Hierarchy:
//
// AbsStItr
//    PairStItr <ObjType, ValType>
//
// All implemented is inline.
//------------------------------------------------------------------------------

template <class ObjType, class ValType> 
      class WitPairStItr: public WitAbsStItr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitPairStItr ():
            WitAbsStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitPairStItr ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void attachTo (
            const WitPairStack <ObjType, ValType> & thePairStack)
         {
         attachToAbs (thePairStack);
         }

      inline WitBoolean advance (ObjType * & theObject, ValType & theVal)
         {
         return
            WitPairStack <ObjType, ValType>::advance (
               * this,
                 theObject,
                 theVal);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitPairStItr                                 (
            const WitPairStItr <ObjType, ValType> &);

      WitPairStItr <ObjType, ValType> & operator = (
            const WitPairStItr <ObjType, ValType> &);
         //
         // See noCopyCtorAssign in macs.h.
   };

#endif
@


1.15
log
@More templates.
@
text
@d116 1
a116 4
      WitAbsPairStack                       (const WitAbsPairStack <ValType> &);
      WitAbsPairStack <ValType> & operator= (const WitAbsPairStack <ValType> &);
         //
         // See noCopyCtorAssign in macs.h. 
@


1.14
log
@Some template stuff.
@
text
@d119 1
a119 1
         // See noCopyCtorAssign in mac.h. 
d207 1
a207 1
         // See noCopyCtorAssign in mac.h.
d277 1
a277 1
         // See noCopyCtorAssign in mac.h.
@


1.13
log
@Converted several generic classes into class templates.
@
text
@d42 12
d133 1
a133 1
// Implemented in Stack.C
d145 4
a148 1
      WitPairStack (WitProblem *);
d154 3
a156 1
      ~WitPairStack ();
d172 4
a175 3
      void slowAppend (ObjType *, ValType);
         //
         // Wrapper for slowAppendAbsPair.
d177 4
a180 3
      void takeContents (WitPairStack <ObjType, ValType> &);
         //
         // Wrapper for takeContentsAbs.
d221 1
a221 1
// Implemented in Stack.C
d233 4
a236 1
      WitPairStItr ();
d242 3
a244 1
      ~WitPairStItr ();
@


1.12
log
@Replaced generic class PairLink (ValType)
   with class template PairLink <ValType>.
@
text
@d16 1
a16 1
// Contains the declaration of the following classes:
d18 3
a20 3
//    AbsPairStack       (ValType)
//    PairStack (ObjType, ValType)
//    PairStItr (ObjType, ValType)
d26 1
a26 1
// Generic class AbsPairStack (ValType)
d28 1
a28 1
// A stack of (object, value) pairs, where the objects have undefined type.
d33 2
a34 2
//    AbsPairStack          (ValType)
//       PairStack (ObjType, ValType)
d39 70
a108 1
template <class ValType> class WitPairLink;
d111 1
a111 83
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitAbsPairStackdeclare(ValType)                                        \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairLinkMgr (ValType);                                                \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitAbsPairStack (ValType): public WitAbsStack                            \
   {                                                                           \
   protected:                                                                  \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitAbsPairStack (ValType) (WitProblem * theProblem);                     \
         /*                                                                  */\
         /* myPairLinkMgr <-- the appropriate PairLinkMgr from theProblem.   */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitAbsPairStack (ValType) ();                                           \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other protected member functions.                                   */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void pushAbsPair (WitTlObj * theTlObj, ValType theVal);                  \
         /*                                                                  */\
         /* Pushes (theTlObj, theVal) onto the top of this AbsPairStack.     */\
                                                                               \
      WitBoolean popAbsPair (WitTlObj * & theTlObj, ValType & theVal);         \
         /*                                                                  */\
         /* If this AbsPairStack is non-Empty, the first pair it contains    */\
         /* is removed from it and (theTlObj, theVal) is set to the removed  */\
         /* pair. Returns TRUE, iff this AbsPairStack is non-empty.          */\
                                                                               \
      void slowAppendAbsPair (WitTlObj * theTlObj, ValType theVal);            \
         /*                                                                  */\
         /* Appends (theTlObj, theVal) to the end of this AbsPairStack, in   */\
         /* linear time.                                                     */\
                                                                               \
      WitTlObj * firstTlObj () const;                                          \
         /*                                                                  */\
         /* Returns the first object in this AbsPairStack.                   */\
         /* Not to be called if this AbsPairStack is empty.                  */\
                                                                               \
      static WitBoolean advanceAbsPair (                                       \
            WitAbsStItr & theItr,                                              \
            WitTlObj * &  theTlObj,                                            \
            ValType &     theVal);                                             \
         /*                                                                  */\
         /* See AbsStItr::advanceAbs.                                        */\
         /* Sets theTlObj and theVal, if the advance is successful.          */\
                                                                               \
      inline WitPairLink <ValType> * firstPairLink () const                    \
         {                                                                     \
         return (WitPairLink <ValType> *) firstAbsLink ();                     \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitAbsPairStack (ValType));                            \
                                                                               \
      static WitPairLinkMgr (ValType) * itsPairLinkMgr (                       \
            WitProblem * theProblem);                                          \
         /*                                                                  */\
         /* Returns the PairLinkMgr (ValType) owned by theProblem.           */\
   };                                                                          \

//------------------------------------------------------------------------------
// The following two generic classes are declared in the same class declaration
// macro:
d113 1
a113 8
//    PairStack (ObjType, ValType)
//    PairStItr (ObjType, ValType)
//------------------------------------------------------------------------------
  
//------------------------------------------------------------------------------
// Generic class PairStack (ObjType, ValType)
//
// A stack of (object, value) pairs.
d118 2
a119 2
//    AbsPairStack          (ValType)
//       PairStack (ObjType, ValType)
d121 1
a121 1
// All implementation is inline.
d124 67
d192 1
a192 1
// Generic class PairStItr (ObjType, ValType)
d194 2
a195 2
// Responsible for iterating through the elements of a 
// PairStack (ObjType, ValType).
d200 1
a200 1
//    PairStItr (ObjType, ValType)
d202 1
a202 3
// All implementation is inline.
//------------------------------------------------------------------------------

a203 145
// Generic class declaration macro for PairStack and PairStItr.
//------------------------------------------------------------------------------

#define WitPairStackdeclare2(ObjType, ValType)                                 \
                                                                               \
class WitPairStItr (ObjType, ValType);                                         \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairStack (ObjType, ValType): public WitAbsPairStack (ValType)        \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitPairStack (ObjType, ValType) (WitProblem * theProblem):        \
            WitAbsPairStack (ValType) (theProblem)                             \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline ~WitPairStack (ObjType, ValType) ()                               \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline void push (ObjType * theObject, ValType theVal)                   \
         {                                                                     \
         pushAbsPair ((WitTlObj *) theObject, theVal);                         \
         }                                                                     \
                                                                               \
      inline WitBoolean pop (ObjType * & theObject, ValType & theVal)          \
         {                                                                     \
         return popAbsPair ((WitTlObj * &) theObject, theVal);                 \
         }                                                                     \
                                                                               \
      inline void slowAppend (ObjType * theObject, ValType theVal)             \
         {                                                                     \
         slowAppendAbsPair ((WitTlObj *) theObject, theVal);                   \
         }                                                                     \
                                                                               \
      inline void takeContents (WitPairStack (ObjType, ValType) & thePairStack)\
         {                                                                     \
         takeContentsAbs (thePairStack);                                       \
         }                                                                     \
                                                                               \
      inline ObjType * firstObject () const                                    \
         {                                                                     \
         return (ObjType *) firstTlObj ();                                     \
         }                                                                     \
                                                                               \
      inline static WitBoolean advance (                                       \
            WitPairStItr (ObjType, ValType) & theItr,                          \
            ObjType * &                       theObject,                       \
            ValType &                         theVal);                         \
         /*                                                                  */\
         /* See AbsPairStack::advanceAbsOPair.                               */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPairStack (ObjType, ValType));                      \
   };                                                                          \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairStItr (ObjType, ValType): public WitAbsStItr                      \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitPairStItr (ObjType, ValType) ():                               \
            WitAbsStItr ()                                                     \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline ~WitPairStItr (ObjType, ValType) ()                               \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline void attachTo (                                                   \
            const WitPairStack (ObjType, ValType) & thePairStack)              \
         {                                                                     \
         attachToAbs (thePairStack);                                           \
         }                                                                     \
                                                                               \
      inline WitBoolean advance (ObjType * & theObject, ValType & theVal)      \
         {                                                                     \
         return                                                                \
            WitPairStack (ObjType, ValType)::advance (                         \
               * this,                                                         \
                 theObject,                                                    \
                 theVal);                                                      \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPairStItr (ObjType, ValType));                      \
   };                                                                          \
                                                                               \
/*---------------------------------------------------------------------------*/\
/* Inlines                                                                   */\
/*---------------------------------------------------------------------------*/\
                                                                               \
inline WitBoolean WitPairStack (ObjType, ValType)::advance (                   \
      WitPairStItr (ObjType, ValType) & theItr,                                \
      ObjType * &                       theObject,                             \
      ValType &                         theVal)                                \
   {                                                                           \
   return advanceAbsPair (theItr, (WitTlObj * &) theObject, theVal);           \
   }                                                                           \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare  (WitAbsPairStack,            double)
declare  (WitAbsPairStack,            WitPeriod)
d205 50
a254 10
declare2 (WitPairStack, double,       double)
declare2 (WitPairStack, WitTlObj,     double)
declare2 (WitPairStack, WitSelPt,     double)

declare2 (WitPairStack, WitPart,      WitPeriod)
declare2 (WitPairStack, WitDemand,    WitPeriod)
declare2 (WitPairStack, WitOperation, WitPeriod)
declare2 (WitPairStack, WitBopEntry,  WitPeriod)
declare2 (WitPairStack, WitConsEntry, WitPeriod)
declare2 (WitPairStack, WitBaMat,     WitPeriod)
@


1.11
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d1 1
a1 1

d39 2
a48 1
class WitPairLink    (ValType);                                                \
d103 1
a103 1
      inline WitPairLink (ValType) * firstPairLink () const                    \
d105 1
a105 1
         return (WitPairLink (ValType) *) firstAbsLink ();                     \
@


1.10
log
@Renamed AltPt classes to SelPt classes.
@
text
@d74 1
a74 1
      void pushAbsPair (WitTl * theTlObj, ValType theVal);                     \
d78 1
a78 1
      WitBoolean popAbsPair (WitTl * & theTlObj, ValType & theVal);            \
d84 1
a84 1
      void slowAppendAbsPair (WitTl * theTlObj, ValType theVal);               \
d89 1
a89 1
      WitTl * firstTlObj () const;                                             \
d96 1
a96 1
            WitTl * &     theTlObj,                                            \
d194 1
a194 1
         pushAbsPair ((WitTl *) theObject, theVal);                            \
d199 1
a199 1
         return popAbsPair ((WitTl * &) theObject, theVal);                    \
d204 1
a204 1
         slowAppendAbsPair ((WitTl *) theObject, theVal);                      \
d293 1
a293 1
   return advanceAbsPair (theItr, (WitTl * &) theObject, theVal);              \
a303 1
declare2 (WitPairStack, WitFixedPer,  double)
d305 1
a305 2
declare2 (WitPairStack, WitTl,        double)
declare2 (WitPairStack, WitConsEntry, double)
@


1.9
log
@Continued implementation of selection splitting.
@
text
@d308 1
a308 1
declare2 (WitPairStack, WitAltPt,     double)
@


1.8
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d315 1
@


1.7
log
@Further implementation of coarse selection splitting.
@
text
@d308 1
@


1.6
log
@Further implementation of coarse selection splitting.
@
text
@d84 5
d200 5
@


1.5
log
@Further development of coarse selection splitting.
@
text
@d294 1
a294 1
declare2 (WitPairStack, WitConstPer,  double)
@


1.4
log
@Fixed some bugs in coarse selection splitting.
@
text
@d296 1
a296 1
declare2 (WitPairStack, WitBopEntry,  double)
@


1.3
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d74 1
a74 1
      void putAbsPair (WitTl * theTlObj, ValType theVal);                      \
d76 1
a76 1
         /* Puts (theTlObj, theVal) onto the top of this AbsPairStack.       */\
d78 1
a78 1
      WitBoolean getAbsPair (WitTl * & theTlObj, ValType & theVal);            \
d187 1
a187 1
      inline void put (ObjType * theObject, ValType theVal)                    \
d189 1
a189 1
         putAbsPair ((WitTl *) theObject, theVal);                             \
d192 1
a192 1
      inline WitBoolean get (ObjType * & theObject, ValType & theVal)          \
d194 1
a194 1
         return getAbsPair ((WitTl * &) theObject, theVal);                    \
@


1.2
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d1 1
a1 1
//------------------------------------------------------------------------------
d20 1
d23 1
a23 1
#include <Util.h>
d32 1
d52 1
a52 1
class WitAbsPairStack (ValType): public WitUtil                                \
a53 29
      /*---------------------------------------------------------------------*/\
      /* Friends.                                                            */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      friend class WitAbsPairStackItr (ValType);                               \
                                                                               \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitBoolean isEmpty () const                                       \
         {                                                                     \
         return (firstPairLink_ == NULL);                                      \
         }                                                                     \
                                                                               \
      void clear ();                                                           \
         /*                                                                  */\
         /* Removes all of the elements from this AbsPairStack.              */\
                                                                               \
      void reverse ();                                                         \
         /*                                                                  */\
         /* Reverses the order of the elements in this AbsPairStack.         */\
                                                                               \
      WitProblem * myProblem () const;                                         \
         /*                                                                  */\
         /* Returns the Problem associated with this AbsPairStack.           */\
                                                                               \
d74 1
a74 1
      void putAbs (WitTl * theTlObj, ValType theVal);                         \
d78 1
a78 1
      WitBoolean getAbs (WitTl * & theTlObj, ValType & theVal);                \
d84 1
a84 1
      void takeContentsAbs (WitAbsPairStack (ValType) & theAbsPairStack);      \
d86 2
a87 3
         /* Clears this AbsPairStack and transfers the contents of           */\
         /* theAbsPairStack out of theAbsPairStack and into this             */\
         /* AbsPairStack.                                                    */\
d89 4
a92 2
      void reverseCopyOfAbs (                                                  \
            const WitAbsPairStack (ValType) & theAbsPairStack);                \
d94 2
a95 1
         /* Makes this AbsPairStack a reverse copy of theAbsPairStack.       */\
d97 4
a100 4
      WitTl * firstTlObj () const;                                             \
         /*                                                                  */\
         /* Returns the first object in this AbsPairStack.                   */\
         /* Not to be called if this AbsPairStack is empty.                  */\
d110 2
a111 9
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitPairLinkMgr (ValType) * const myPairLinkMgr_;                         \
         /*                                                                  */\
         /* The PairLinkMgr to be used by this AbsPairStack.                 */\
                                                                               \
      WitPairLink (ValType) * firstPairLink_;                                  \
d113 1
a113 1
         /* The first Pairink in this AbsPairStack.                          */\
d117 8
d131 1
d135 15
a149 1
// All implementation is inline, by casting and calling AbsPairStack functions.
d153 1
a153 1
// Generic class declaration macro.
d158 4
d189 1
a189 1
         putAbs ((WitTl *) theObject, theVal);                                 \
d194 1
a194 1
         return getAbs ((WitTl * &) theObject, theVal);                        \
d202 49
a250 1
      inline void reverseCopyOf (                                              \
d253 1
a253 1
         reverseCopyOfAbs (thePairStack);                                      \
d256 1
a256 1
      inline ObjType * firstObject () const                                    \
d258 5
a262 1
         return (ObjType *) firstTlObj ();                                     \
d271 1
a271 1
      noCopyCtorAssign (WitPairStack (ObjType, ValType));                      \
d273 12
d294 1
@


1.1
log
@Further development of coarse selection splitting.
@
text
@d101 1
a101 1
      void pushAbs (WitTl * theTlObj, ValType theVal);                         \
d103 1
a103 1
         /* Pushes (theTlObj, theVal) onto the top of this AbsPairStack.     */\
d105 1
a105 1
      WitBoolean popAbs (WitTl * & theTlObj, ValType & theVal);                \
d107 3
a109 4
         /* If this AbsPairStack is non-Empty, the first element it contains */\
         /* is removed from it and (theTlObj, theVal) is set to the popped   */\
         /* (object, value).                                                 */\
         /* Returns TRUE, iff this AbsPairStack is non-empty.                */\
d192 1
a192 1
      inline void push (ObjType * theObject, ValType theVal)                   \
d194 1
a194 1
         pushAbs ((WitTl *) theObject, theVal);                                \
d197 1
a197 1
      inline WitBoolean pop (ObjType * & theObject, ValType & theVal)          \
d199 1
a199 1
         return popAbs ((WitTl * &) theObject, theVal);                        \
d228 2
a229 2
// Declarations of all specific cases of the generic classes and functions
// declared in this file.
d236 1
@

