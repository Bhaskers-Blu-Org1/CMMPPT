head	1.14;
access;
symbols
	latest_sce_4_20_20060523:1.8.0.2
	sce_4_20_20060523:1.8
	latest_sce4_20_OSL:1.7.0.2
	sce_4_20_OSL:1.7
	sce_410_withVa:1.6
	sce_4_05_20040511:1.6
	sce_4_00_20040201:1.5
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.4
	Root-of-EndRw:1.2
	rwToStl:1.2.0.2;
locks; strict;
comment	@ * @;


1.14
date	2007.08.01.21.50.40;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2007.06.22.19.04.04;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.22.18.03.49;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.03.15.08.59;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.18.22.29.01;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.18.18.43.39;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.02.17.34.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.04.19.53.50;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.06.23.27.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.18.18.30.16;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.10.22.58.16;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.23.20.47.18;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.29.23.06.28;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.26.22.49.05;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "OptObjs.C"
//
// Implementation of the following classes:
//
//    BoundsObj
//    PrimaryObj
//    Obj1Obj
//    RevObj
//    InvObj
//    ServObj
//    SubObj
//    Obj2Obj
//------------------------------------------------------------------------------

#include <OptObjs.h>
#include <OptVar.h>
#include <DetImpOP.h>
#include <OptImp.h>
#include <OptComp.h>

//------------------------------------------------------------------------------
// Implementation of class BoundsObj.
//------------------------------------------------------------------------------

WitBoundsObj::WitBoundsObj (WitDetImpOP * theDetImpOP):

      WitOptObj ("Bounds Objective", theDetImpOP)
   {
   }

//------------------------------------------------------------------------------

WitBoundsObj::~WitBoundsObj ()
   {
   }

//------------------------------------------------------------------------------

double WitBoundsObj::coeffVal (const WitOptVar * theVar) const
   {
   return theVar->boundsCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class PrimaryObj.
//------------------------------------------------------------------------------

WitPrimaryObj::WitPrimaryObj (WitDetImpOP * theDetImpOP):

      WitOptObj ("Primary Objective", theDetImpOP)
   {
   }

//------------------------------------------------------------------------------

WitPrimaryObj::~WitPrimaryObj ()
   {
   }

//------------------------------------------------------------------------------

double WitPrimaryObj::coeffVal (const WitOptVar * theVar) const
   {
   return theVar->primaryCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class Obj1Obj.
//------------------------------------------------------------------------------

WitObj1Obj::WitObj1Obj (WitDetImpOP * theDetImpOP):

      WitOptObj   ("Objective #1", theDetImpOP),

      myDetImpOP_ (theDetImpOP)
   {
   }

//------------------------------------------------------------------------------

WitObj1Obj::~WitObj1Obj ()
   {
   }

//------------------------------------------------------------------------------

double WitObj1Obj::coeffVal (const WitOptVar * theVar) const
   {
   double retVal;

   retVal = theVar->primaryCoeffVal ();

   if (myDetImpOP_->slbvVarsExist ())
      retVal -=
         myOptImploder ()->myOptComp ()->wbounds () * theVar->boundsCoeffVal ();

   return retVal;
   }

//------------------------------------------------------------------------------
// Implementation of class RevObj.
//------------------------------------------------------------------------------

WitRevObj::WitRevObj (WitDetImpOP * theDetImpOP):

      WitOptObj ("Revenue Objective", theDetImpOP)
   {
   }

//------------------------------------------------------------------------------

WitRevObj::~WitRevObj ()
   {
   }

//------------------------------------------------------------------------------

double WitRevObj::coeffVal (const WitOptVar * theVar) const
   {
   return theVar->revCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class InvObj.
//------------------------------------------------------------------------------

WitInvObj::WitInvObj (WitDetImpOP * theDetImpOP):

      WitOptObj ("Inventory Objective", theDetImpOP)
   {
   }

//------------------------------------------------------------------------------

WitInvObj::~WitInvObj ()
   {
   }

//------------------------------------------------------------------------------

double WitInvObj::coeffVal (const WitOptVar * theVar) const
   {
   return theVar->invCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class ServObj.
//------------------------------------------------------------------------------

WitServObj::WitServObj (WitDetImpOP * theDetImpOP):

      WitOptObj ("Serviceability Objective", theDetImpOP)
   {
   }

//------------------------------------------------------------------------------

WitServObj::~WitServObj ()
   {
   }

//------------------------------------------------------------------------------

double WitServObj::coeffVal (const WitOptVar * theVar) const
   {
   return theVar->servCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class SubObj.
//------------------------------------------------------------------------------

WitSubObj::WitSubObj (WitDetImpOP * theDetImpOP):

      WitOptObj ("Substitute Objective", theDetImpOP)
   {
   }

//------------------------------------------------------------------------------

WitSubObj::~WitSubObj ()
   {
   }

//------------------------------------------------------------------------------

double WitSubObj::coeffVal (const WitOptVar * theVar) const
   {
   return theVar->subCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class Obj2Obj.
//------------------------------------------------------------------------------

WitObj2Obj::WitObj2Obj (WitDetImpOP * theDetImpOP):

      WitOptObj   ("Objective #2", theDetImpOP),

      myDetImpOP_ (theDetImpOP)
   {
   }

//------------------------------------------------------------------------------

WitObj2Obj::~WitObj2Obj ()
   {
   }

//------------------------------------------------------------------------------

double WitObj2Obj::coeffVal (const WitOptVar * theVar) const
   {
   WitObjFunc2 * theObjFunc2;
   double        retVal;

   theObjFunc2 = myOptImploder ()->myOptComp ()->myObjFunc2 ();

   retVal =
      theObjFunc2->revFactor ()  * theVar-> revCoeffVal ()
      +
      theObjFunc2->invFactor ()  * theVar-> invCoeffVal ()
      +
      theObjFunc2->servFactor () * theVar->servCoeffVal ()
      +
      theObjFunc2->subFactor ()  * theVar-> subCoeffVal ();

   if (myDetImpOP_->slbvVarsExist ())
      retVal -=
         myOptImploder ()->myOptComp ()->wbounds () * theVar->boundsCoeffVal ();

   return retVal;
   }
@


1.13
log
@Stochastic Implosion
@
text
@@


1.12
log
@Stochastic Implosion
@
text
@d27 1
a27 1
#include <ImpOptProb.h>
d35 1
a35 1
WitBoundsObj::WitBoundsObj (WitImpOptProb * theImpOptProb):
d37 1
a37 1
      WitOptObj ("Bounds Objective", theImpOptProb)
d58 1
a58 1
WitPrimaryObj::WitPrimaryObj (WitImpOptProb * theImpOptProb):
d60 1
a60 1
      WitOptObj ("Primary Objective", theImpOptProb)
d81 1
a81 1
WitObj1Obj::WitObj1Obj (WitImpOptProb * theImpOptProb):
d83 1
a83 1
      WitOptObj     ("Objective #1", theImpOptProb),
d85 1
a85 1
      myImpOptProb_ (theImpOptProb)
d103 1
a103 1
   if (myImpOptProb_->slbvVarsExist ())
d114 1
a114 1
WitRevObj::WitRevObj (WitImpOptProb * theImpOptProb):
d116 1
a116 1
      WitOptObj ("Revenue Objective", theImpOptProb)
d137 1
a137 1
WitInvObj::WitInvObj (WitImpOptProb * theImpOptProb):
d139 1
a139 1
      WitOptObj ("Inventory Objective", theImpOptProb)
d160 1
a160 1
WitServObj::WitServObj (WitImpOptProb * theImpOptProb):
d162 1
a162 1
      WitOptObj ("Serviceability Objective", theImpOptProb)
d183 1
a183 1
WitSubObj::WitSubObj (WitImpOptProb * theImpOptProb):
d185 1
a185 1
      WitOptObj ("Substitute Objective", theImpOptProb)
d206 1
a206 1
WitObj2Obj::WitObj2Obj (WitImpOptProb * theImpOptProb):
d208 1
a208 1
      WitOptObj     ("Objective #2", theImpOptProb),
d210 1
a210 1
      myImpOptProb_ (theImpOptProb)
d238 1
a238 1
   if (myImpOptProb_->slbvVarsExist ())
@


1.11
log
@App controlled opt implosion.
@
text
@a14 1
//    OptObj
a31 66
// Implementation of class OptObj.
//------------------------------------------------------------------------------

WitOptObj::WitOptObj (const char * theText, WitOptProb * theOptProb):

      myText_    (theText),
      myOptProb_ (theOptProb)
   {
   myOptProb_->store (this);
   }

//------------------------------------------------------------------------------

WitOptObj::~WitOptObj ()
   {
   }

//------------------------------------------------------------------------------

void WitOptObj::print () const
   {
   WitOptVar * theVar;
   double      varCoeffVal;

   fprintf (myOptProb_->optProbFile (), "\n%s:\n", myText ());

   forEachEl (theVar, myOptProb_->myOptVars ())
      {
      varCoeffVal = coeffVal (theVar);

      if (fabs (varCoeffVal) > FLOAT_EPSILON)
         {
         theVar->printID ();

         fprintf (myOptProb_->optProbFile (), " %7.1f\n", varCoeffVal);
         }
      }
   }

//------------------------------------------------------------------------------

double WitOptObj::myValue () const
   {
   WitOptVar * theVar;
   double      varVal;
   double      val = 0.0;

   forEachEl (theVar, myOptProb_->myOptVars ())
      {
      varVal = theVar->primalValue ();

      if (fabs (varVal) > FLOAT_EPSILON)
         val += coeffVal (theVar) * varVal;
      }

   return val;
   }

//------------------------------------------------------------------------------

WitOptImploder * WitOptObj::myOptImploder () const
   {
   return myOptProb_->myOptImploder ();
   }

//------------------------------------------------------------------------------
@


1.10
log
@App controlled opt implode.
@
text
@d57 1
a57 1
   fprintf (myOptProb_->modelFile (), "\n%s:\n", myText ());
d67 1
a67 1
         fprintf (myOptProb_->modelFile (), " %7.1f\n", varCoeffVal);
@


1.9
log
@App controlled opt implosion.
@
text
@a31 2
#ifdef OPT_IMPLODE

a310 2

#endif
@


1.8
log
@Updated the copyright date on all source files.
@
text
@d28 1
a28 1
#include <ImpOM.h>
d38 1
a38 1
WitOptObj::WitOptObj (const char * theText, WitOptModel * theOptModel):
d40 2
a41 2
      myText_     (theText),
      myOptModel_ (theOptModel)
d43 1
a43 1
   myOptModel_->store (this);
d59 1
a59 1
   fprintf (myOptModel_->modelFile (), "\n%s:\n", myText ());
d61 1
a61 1
   forEachEl (theVar, myOptModel_->myOptVars ())
d69 1
a69 1
         fprintf (myOptModel_->modelFile (), " %7.1f\n", varCoeffVal);
d82 1
a82 1
   forEachEl (theVar, myOptModel_->myOptVars ())
d97 1
a97 1
   return myOptModel_->myOptImploder ();
d104 1
a104 1
WitBoundsObj::WitBoundsObj (WitImpOM * theImpOM):
d106 1
a106 1
      WitOptObj ("Bounds Objective", theImpOM)
d127 1
a127 1
WitPrimaryObj::WitPrimaryObj (WitImpOM * theImpOM):
d129 1
a129 1
      WitOptObj ("Primary Objective", theImpOM)
d150 1
a150 1
WitObj1Obj::WitObj1Obj (WitImpOM * theImpOM):
d152 1
a152 1
      WitOptObj ("Objective #1", theImpOM),
d154 1
a154 1
      myImpOM_ (theImpOM)
d172 1
a172 1
   if (myImpOM_->slbvVarsExist ())
d183 1
a183 1
WitRevObj::WitRevObj (WitImpOM * theImpOM):
d185 1
a185 1
      WitOptObj ("Revenue Objective", theImpOM)
d206 1
a206 1
WitInvObj::WitInvObj (WitImpOM * theImpOM):
d208 1
a208 1
      WitOptObj ("Inventory Objective", theImpOM)
d229 1
a229 1
WitServObj::WitServObj (WitImpOM * theImpOM):
d231 1
a231 1
      WitOptObj ("Serviceability Objective", theImpOM)
d252 1
a252 1
WitSubObj::WitSubObj (WitImpOM * theImpOM):
d254 1
a254 1
      WitOptObj ("Substitute Objective", theImpOM)
d275 1
a275 1
WitObj2Obj::WitObj2Obj (WitImpOM * theImpOM):
d277 1
a277 1
      WitOptObj ("Objective #2", theImpOM),
d279 1
a279 1
      myImpOM_ (theImpOM)
d307 1
a307 1
   if (myImpOM_->slbvVarsExist ())
@


1.7
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.6
log
@Continued double precision.
@
text
@d59 1
a59 1
   fprintf (WitOptModel::modelFile (), "\n%s:\n", myText ());
d69 1
a69 1
         fprintf (WitOptModel::modelFile (), " %7.1f\n", varCoeffVal);
@


1.5
log
@Continued implementation of opt with COIN.
@
text
@d57 1
a57 1
   float       varCoeffVal;
d87 1
a87 1
         val += static_cast <double> (coeffVal (theVar)) * varVal;
d118 1
a118 1
float WitBoundsObj::coeffVal (const WitOptVar * theVar) const
d141 1
a141 1
float WitPrimaryObj::coeffVal (const WitOptVar * theVar) const
d166 1
a166 1
float WitObj1Obj::coeffVal (const WitOptVar * theVar) const
d168 1
a168 1
   float retVal;
d197 1
a197 1
float WitRevObj::coeffVal (const WitOptVar * theVar) const
d220 1
a220 1
float WitInvObj::coeffVal (const WitOptVar * theVar) const
d243 1
a243 1
float WitServObj::coeffVal (const WitOptVar * theVar) const
d266 1
a266 1
float WitSubObj::coeffVal (const WitOptVar * theVar) const
d291 1
a291 1
float WitObj2Obj::coeffVal (const WitOptVar * theVar) const
d294 1
a294 1
   float         retVal;
@


1.4
log
@Added some optional warnings on Linux.
@
text
@a25 5
int compiledOptObjs = 1;
   //
   // WATCOM's strict compatibility mode requires every file to
   // have at least one external definition.

@


1.3
log
@Changed some C style casts to C++ style.
@
text
@d173 3
a175 1
   float coeffVal = theVar->primaryCoeffVal ();
d178 1
a178 1
      coeffVal -=
d181 1
a181 1
   return coeffVal;
d299 1
d303 1
a303 1
   float coeffVal =
d313 1
a313 1
      coeffVal -=
d316 1
a316 1
   return coeffVal;
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d92 1
a92 1
         val += ((double) coeffVal (theVar)) * varVal;
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d13 1
a13 1
// Implementation of the following classes, derived from class OptObj:
d15 1
d31 2
a32 1
#include <OptComp.h>
d35 1
d38 66
@

