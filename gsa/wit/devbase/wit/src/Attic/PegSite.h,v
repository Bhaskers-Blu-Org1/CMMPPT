head	1.7;
access;
symbols
	EndRw-branch:1.6.0.4
	Root-of-EndRw:1.6
	rwToStl:1.6.0.2
	latest_sce_3_10_20010924:1.4.0.2
	sce_3_10_20010924:1.4;
locks; strict;
comment	@ * @;


1.7
date	2003.03.03.23.26.59;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2002.07.12.20.09.39;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.11.22.48.29;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.21.22.36.31;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.01.14.55.31;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.27.21.28.39;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.25.16.08.18;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.6
log
@Continued implementation of Single-Source.
@
text
@@


1.5
log
@Continued implementation of Single-Source.
@
text
@a0 97
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PegSiteH
#define PegSiteH

//------------------------------------------------------------------------------
// Header file: "PegSite.h"
//
// Contains the declaration of class PegSite.
//------------------------------------------------------------------------------

#include <PtrTVec.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PegSite
//
// Implemented in Pegging.C.
//------------------------------------------------------------------------------

class WitPegSite: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPegSite (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPegSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void addPegEl (WitPeriod shipPer, WitPegEl * thePegEl);
         //
         // Adds thePegEl to myPegElsFor_ (shipPer).

      void getMyOpnPegEls (
            WitPeriod                      shipPer,
            WitObjStack <const WitPegEl> & thePegEls);
         //
         // On return, thePegEls is a list of all Operation PegEl instances for
         // shipPer owned by this PegSite.

      void getMySubPegEls (
            WitPeriod                       shipPer,
            WitObjStack <const WitPegEl > & thePegEls);
         //
         // On return, thePegEls is a list of all Sub PegEl instances for
         // shipPer owned by this PegSite.

      void clear (WitPeriod shipPer);
         //
         // Deletes the PegEls in myPegElsFor_ (shipPer).

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline const WitObjStack <WitPegEl> & myPegElsFor (WitPeriod shipPer)
         {
         return myPegElsFor_ (shipPer);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPegSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrTVec <WitObjStack <WitPegEl> > myPegElsFor_;
         //
         // myPegElsFor_ (shipPer) is the list of all PegEl instances for
         // shipPer owned by this PegSite.
   };

#endif
@


1.4
log
@Moved pegging output to comprehensive implosion solution output.
Fixed bug: Pegging was being attempted during stock bounds enforcement.
@
text
@d24 2
d48 1
a48 1
      void setUpPeggedIncAlloc (WitPeriod shipPer, WitPegMgr * thePegMgr);
d50 1
a50 2
         // Sets up pegging for an incHeurAlloc for this PegSite in shipPer,
         // passing the relevant data to thePegMgr.
d53 2
a54 2
            WitPeriod                                      shipPer,
            WitObjStack <const WitPegEl <WitOperation> > & thePegEls);
d56 1
a56 1
         // On return, thePegEls is a list of all PegEl <Opn> instances for
d60 2
a61 2
            WitPeriod                                     shipPer,
            WitObjStack <const WitPegEl <WitSubEntry> > & thePegEls);
d63 1
a63 1
         // On return, thePegEls is a list of all PegEl <Sub> instances for
d66 13
d91 1
a91 1
      WitPtrTVec <WitObjStack <WitPegEl <WitOperation> > > myOpnPegElsFor_;
d93 2
a94 7
         // myOpnPegElsFor_ (shipPer) is the list of all PegEl <Opn> instances
         // for shipPer owned by this PegSite.

      WitPtrTVec <WitObjStack <WitPegEl <WitSubEntry>  > > mySubPegElsFor_;
         //
         // mySubPegElsFor_ (shipPer) is the list of all PegEl <Sub> instances
         // for shipPer owned by this PegSite.
@


1.3
log
@Continued implementation of pegging.
@
text
@d79 1
a79 1
         // myOpnPegElsFor_ (shipPer) is the list of all PegEl <Opn> istances
d84 1
a84 1
         // mySubPegElsFor_ (shipPer) is the list of all PegEl <Sub> istances
@


1.2
log
@Continued implementation of pegging.
@
text
@d16 1
a16 4
// Contains the declaration of the following class templates:
//
//    PegSiteI <AllocComp>
//    PegSite  <AllocComp> 
d23 1
a23 18
// Class template PegSiteI <AllocComp> and
// Class template PegSite  <AllocComp>
//
// "Pegging Site"
// For AllocComp = either Operation or SubEntry: 
//    Class PegSite <AllocComp> is responsible maintaining the pegging of either
//    execVols or subVols to a specific Demand in heuristic allocation. 
//
//  Class templates PegSite <AllocComp> and PegSiteI <AllocComp> have a 
//  "wrapper/implementor" relationship similar to Pegger <AllocComp> and 
//  PeggerI <AllocComp>. For an explanation, see Pegger.h
//
// Class Hierarchy:
//
// PegSiteI <AllocComp>
//    PegSite <AllocComp>
//
// Implemented in Pegging.C.
d26 1
a26 42
template <class AllocComp>
      class WitPegSiteI: public WitProbAssoc
   {
   protected:

      //------------------------------------------------------------------------
      // Protected member functions that implement the corresponding member
      // functions as class PegSite.
      //------------------------------------------------------------------------

           WitPegSiteI         (WitProblem *);
          ~WitPegSiteI         ();
      void setUpPeggedIncAlloc (WitPeriod);

      void getMyPegEls (WitPeriod, WitObjStack <const WitPegEl <AllocComp> > &);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssignTemp (WitPegSiteI, AllocComp);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrTVec <WitObjStack <WitPegEl <AllocComp> > > myPegElsFor_;
         //
         // myPegElsFor_ (shipPer) is the list of all PegEls for shipPer owned
         // by this PegSiteI.
   };

//------------------------------------------------------------------------------
// Class template PegSite <AllocComp>
//
// See above.
//------------------------------------------------------------------------------

template <class AllocComp>
      class WitPegSite: private WitPegSiteI <AllocComp>
a30 4
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
d46 8
a53 1
      void setUpPeggedIncAlloc (WitPeriod shipPer);
d55 2
a56 1
         // Sets up pegging for an incHeurAlloc for this PegSite in shipPer.
d58 3
a60 3
      void getMyPegEls (
            WitPeriod                                   shipPer,
            WitObjStack <const WitPegEl <AllocComp> > & thePegEls);
d62 2
a63 2
         // On return, thePegEls is a list of all PegEls for shipPer owned by
         // this PegSite.
d71 15
a85 1
      noCopyCtorAssignTemp (WitPegSite, AllocComp);
@


1.1
log
@Initial implementation of pegging.
@
text
@d16 4
a19 1
// Contains the declaration of class PegSite.
d26 2
a27 1
// Class PegSite
d30 52
a81 1
// Represents a Demand to which execVols and subVols are to be pegged.
d83 1
a83 1
// Implemented in Pegging.C
d86 2
a87 1
class WitPegSite: public WitProbAssoc
d111 1
a111 1
      void startIncHeurAlloc (WitPeriod shipPer);
d113 1
a113 1
         // Tells this PegSite to initiate pegging for itself in shipPer.
d116 2
a117 2
            WitPeriod                      shipPer,
            WitObjStack <const WitPegEl> & thePegEls);
d128 1
a128 10
      noCopyCtorAssign (WitPegSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrTVec <WitObjStack <WitPegEl> > myPegElsFor_;
         //
         // myPegElsFor_ (shipPer) is the list of all PegEls for shipPer owned
         // by this PegSite.
@

