head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2006.05.19.22.39.42;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2006.05.16.21.52.55;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.11.20.20.30;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@New PIP pegging order.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "IpipBldrV2.C"
//
// Contains the implementation of class IpipBldrV2.
//------------------------------------------------------------------------------

#include <IpipBldrV2.h>
#include <PipMgr.h>
#include <PipPgg.h>
#include <PipAttPgg.h>
#include <TripStack.h>
#include <ExecPerSch.h>
#include <ReqSched.h>
#include <Demand.h>
#include <Material.h>
#include <Capacity.h>
#include <Opn.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <Global.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class IpipBldrV2.
//------------------------------------------------------------------------------

WitIpipBldrV2::WitIpipBldrV2 (WitPipPgg * thePgg):

      WitPipBldr      (thePgg),

      targDemand_     (NULL),
      targShipPer_    (-1),
      normShare_      (myProblem (), 0.0),

      unpgdCoexVol_   (myProblem (), 0.0),
      unpgdNonSubVol_ (myProblem (), 0.0),
      unpgdSubVol_    (myProblem (), 0.0),
      unpgdStockVol_  (myProblem (), 0.0),
      unpgdSupplyVol_ (myProblem (), 0.0),
      unpgdProdVol_   (myProblem (), 0.0),
      unpgdSideVol_   (myProblem (), 0.0)
   {              
   witAssert (not myGlobalComp ()->groupPipMode ());

   myMsgFac () ("ipipMsg");

   fprintf (msgFile (), "(IPIP Version 2)\n");

   myReqSched_ = new WitReqSched (myProblem ());
   }

//------------------------------------------------------------------------------

WitIpipBldrV2::~WitIpipBldrV2 ()
   {
   delete myReqSched_;
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::buildPggSpec ()
   {
   WitDemTripStack theShipSeq (myProblem ());
   WitDemand *     theDemand;
   WitPeriod       shipPer;
   double          incShipVol;

   normalizeShares ();

   initUnpeggedScheds ();

   myProblem ()->myPipMgr ()->getShipSeq (theShipSeq);

   while (theShipSeq.pop (theDemand, shipPer, incShipVol))
      pegShipment (theDemand, shipPer, incShipVol);
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::normalizeShares ()
   {
   WitOperation * theOpn;
   WitBopEntry *  theBopEnt;
   WitPeriod      execPer;
   double         totShare;

   forEachOperation (theOpn, myProblem ())
      forEachPeriod (execPer, myProblem ())
         {
         totShare = 0.0;

         forEachEl (theBopEnt, theOpn->bop ())
            if (theBopEnt->expAllowed ())
               if (theBopEnt->execPerOKForExp (execPer))
                  totShare += theBopEnt->pipShare ()[execPer];

         if (totShare == 0.0)
            continue;

         forEachEl (theBopEnt, theOpn->bop ())
            if (theBopEnt->expAllowed ())
               if (theBopEnt->execPerOKForExp (execPer))
                  normShare_ (theBopEnt)[execPer] =
                     theBopEnt->pipShare ()[execPer] / totShare;
         }

   if (myGlobalComp ()->selPrintLevel () >= 3)
      prtNormShares ();
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::prtNormShares ()
   {
   WitBopEntry * theBopEnt;
   WitPeriod     execPer;

   fprintf (msgFile (),
      "\n"
      "Normalized PIP Shares:\n"
      "\n"
      "   Opn  BopEnt  Part  ExecPer  Share\n");

   forEachBopEntry (theBopEnt, myProblem ())
      forEachPeriod (execPer, myProblem ())
         fprintf (msgFile (),
            "   %3s  %6d  %4s  %7d  %5.3f\n",
            theBopEnt->myOperationName ().myCstring (),
            theBopEnt->localIndex (),
            theBopEnt->myPartName ().myCstring (),
            execPer,
            normShare_ (theBopEnt)[execPer]);
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::initUnpeggedScheds ()
   {
   WitBopEntry * theBopEnt;
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitMaterial * theMat;
   WitPart *     thePart;
   WitPeriod     execPer;
   WitPeriod     thePer;
   double        consSuppVol;

   forEachBopEntry (theBopEnt, myProblem ())
      {
      unpgdCoexVol_ (theBopEnt) = 0.0;

      if (theBopEnt->expAllowed ())
         forEachPeriod (execPer, myProblem ())
            if (theBopEnt->execPerOKForExp (execPer))
               unpgdCoexVol_ (theBopEnt)[execPer] =
                  theBopEnt->myOperation ()->execVol ()[execPer];
      }

   forEachBomEntry (theBomEnt, myProblem ())
      unpgdNonSubVol_ (theBomEnt) = theBomEnt->nonSubVol ();

   forEachSubEntry (theSub, myProblem ())
      unpgdSubVol_ (theSub) = theSub->subVol ();

   forEachMaterial (theMat, myProblem ())
      unpgdStockVol_ (theMat) = theMat->stockVol ();

   forEachPart (thePart, myProblem ())
      forEachPeriod (thePer, myProblem ())
         {
         consSuppVol =
              thePart->supplyVol   ()[thePer]
            - thePart->residualVol ()[thePer];

         setToMax (consSuppVol, 0.0);

         setToMin (consSuppVol, thePart->supplyVol ()[thePer]);

         unpgdSupplyVol_ (thePart)[thePer] = consSuppVol;
         }

   compSideVols (unpgdSideVol_);

   forEachPart (thePart, myProblem ())
      forEachPeriod (thePer, myProblem ())
         unpgdProdVol_ (thePart)[thePer] =
              thePart->prodVol ()[thePer]
            - unpgdSideVol_ (thePart)[thePer];
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegShipment (
      WitDemand * theDemand,
      WitPeriod   shipPer,
      double      incShipVol)
   {
   WitPart *              topPart;
   WitPtrVecItr <WitPart> theItr;
   WitPart *              thePart;
   WitPeriod              firstReqPer;
   WitPeriod              lastReqPer;
   WitPeriod              reqPer;

   witAssert (incShipVol > 0.0);

   targDemand_  = theDemand;
   targShipPer_ = shipPer;
   topPart      = theDemand->demandedPart ();

   myReqSched_->addTo (topPart, shipPer, incShipVol);

   topPart->belowList ().attachItr (theItr);

   while (theItr.advance (thePart))
      {
      firstReqPer = myReqSched_->firstPer (thePart);
      lastReqPer  = myReqSched_->lastPer  (thePart);

      for (reqPer = firstReqPer; reqPer <= lastReqPer; reqPer ++)
         fillReq (thePart, reqPer);
      }

   myReqSched_->clear ();

   targDemand_  = NULL;
   targShipPer_ = -1;
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::fillReq (WitPart * thePart, WitPeriod reqPer)
   {
   double netReqVol;

   netReqVol = myReqSched_->reqVol (thePart, reqPer);

   if (netReqVol <= NET_TOL)
      return;

   pegToAtt (
      & WitIpipBldrV2::pegToSupply,
        unpgdSupplyVol_,
        thePart,
        reqPer,
        netReqVol);

   if (netReqVol <= NET_TOL)
      return;

   pegToAtt (
      & WitIpipBldrV2::pegToProd,
        unpgdProdVol_,
        thePart,
        reqPer,
        netReqVol);

   if (netReqVol <= NET_TOL)
      return;

   pegToAtt (
      & WitIpipBldrV2::pegToSide,
        unpgdSideVol_,
        thePart,
        reqPer,
        netReqVol);

   if (netReqVol <= NET_TOL)
      return;

   recInfeas (thePart, reqPer, netReqVol);
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegToAtt (
      void (WitIpipBldrV2::* thePegFunc) (WitPart *, WitPeriod, double &),
      const WitSchedule <WitPart, double> & unpgdVol,
      WitPart *                             thePart,
      WitPeriod                             reqPer,
      double &                              netReqVol)
   {
   WitMaterial * theMat;
   double        availReqVol;
   double        totPegVol;
   WitPeriod     pegPer;
   double        pegVol;

   witAssert (netReqVol > NET_TOL);

   theMat = thePart->thisMat ();

   if (theMat == NULL)
      {
      (this->*thePegFunc) (thePart, reqPer, netReqVol);

      return;
      }

   availReqVol = netReqVol;
   totPegVol   = 0.0;

   for (pegPer = reqPer; pegPer >= 0; pegPer --)
      {
      if (pegPer < reqPer)
         setToMin (availReqVol, unpgdStockVol_ (theMat)[pegPer]);

      if (availReqVol <= NET_TOL)
         break;

      if (unpgdVol (theMat)[pegPer] > NET_TOL)
         {
         pegVol = min (availReqVol, unpgdVol (theMat)[pegPer]);

         availReqVol -= pegVol;

         totPegVol   += pegVol;
         }
      }

   if (totPegVol <= NET_TOL)
      return;

   netReqVol -= totPegVol;

   for (pegPer = reqPer; pegPer >= 0; pegPer --)
      {
      if (pegPer < reqPer)
         unpgdStockVol_ (theMat)[pegPer] -= totPegVol;

      (this->*thePegFunc) (theMat, pegPer, totPegVol);

      if (totPegVol <= NET_TOL)
         break;
      }
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegToSupply (
      WitPart * thePart,
      WitPeriod pegPer,
      double &  netReqVol)
   {
   double pegVol;

   witAssert (netReqVol > 0.0);

   if (unpgdSupplyVol_ (thePart)[pegPer] <= 0.0)
      return;

   pegVol = minAndNet (netReqVol, unpgdSupplyVol_ (thePart)[pegPer]);
   
   myPgg ()->
      supplyVolPgg ()->
         append (targDemand_, targShipPer_, thePart, pegPer, pegVol);
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegToProd (
      WitPart * thePart,
      WitPeriod expPer,
      double &  netReqVol)
   {
   WitBopEntry * theBopEnt;
   WitPeriod     execPerFirst;
   WitPeriod     execPerLast;
   WitPeriod     execPer;

   witAssert (netReqVol > 0.0);

   if (thePart->prodVol ()[expPer] <= 0.0)
      return;

   if (not thePart->explodeable (expPer))
      return;

   forEachEl (theBopEnt, thePart->producingBopEntries ())
      {
      myExecPerSched ()->getExecPerRange (
         theBopEnt,
         expPer,
         execPerFirst,
         execPerLast);

      for (execPer = execPerLast; execPer >= execPerFirst; execPer --)
         {
         if (not theBopEnt->execPerOKForExp (execPer))
            continue;

         if (theBopEnt->impactPeriod ()[execPer] != expPer)
            continue;

         pegBopEnt (theBopEnt, execPer, netReqVol);

         if (netReqVol <= 0.0)
            return;
         }
      }
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegBopEnt (
      WitBopEntry * theBopEnt,
      WitPeriod     execPer,
      double &      netReqVol)
   {
   double         upCoexVolVal;
   double         theProdRate;
   double         reqCoexVol;
   double         pgdCoexVol;
   double         pgdProdVol;
   WitPart *      thePart;
   WitPeriod      prodPer;
   WitOperation * theOpn;
   double         pgdExecVol;

   witAssert (netReqVol > 0.0);

   upCoexVolVal = unpgdCoexVol_ (theBopEnt)[execPer];

   if (upCoexVolVal <= 0.0)
      return;

   theProdRate  = theBopEnt->effProdRate ()[execPer];

   reqCoexVol   = netReqVol / theProdRate;

   pgdCoexVol   = min (reqCoexVol, upCoexVolVal);

   unpgdCoexVol_ (theBopEnt)[execPer] -= pgdCoexVol;

   pgdProdVol   = pgdCoexVol * theProdRate;

   netReqVol   -= pgdProdVol;

   setToMax (netReqVol, 0.0);

   thePart      = theBopEnt->myPart ();

   prodPer      = theBopEnt->impactPeriod ()[execPer];

   myPgg ()->
      prodVolPgg ()->
         append (targDemand_, targShipPer_, thePart, prodPer, pgdProdVol);

   unpgdProdVol_ (thePart)[prodPer] -= pgdProdVol;

   theOpn       = theBopEnt->myOperation ();

   pgdExecVol   = pgdCoexVol * normShare_ (theBopEnt)[execPer];

   pegOpn (theOpn, execPer, pgdExecVol);
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegOpn (
      WitOperation * theOpn,
      WitPeriod      execPer,
      double         pgdExecVol)
   {
   WitBomEntry * theBomEnt;

   if (pgdExecVol == 0.0)
      return;

   witAssert (pgdExecVol > 0.0);

   myPgg ()->
      execVolPgg ()->
         append (targDemand_, targShipPer_, theOpn, execPer, pgdExecVol);

   forEachEl (theBomEnt, theOpn->bom ())
      if (theBomEnt->inEffect (execPer))
         {
         if (theBomEnt->hasSubsInEffect ()[execPer])
            pegBomEntWithSubs (theBomEnt, execPer, pgdExecVol);
         else
            pegConsEnt        (theBomEnt, execPer, pgdExecVol);
         }
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegBomEntWithSubs (
      WitBomEntry * theBomEnt,
      WitPeriod     execPer,
      double        pgdExecVol)
   {
   double        netExecVol;
   double        pgdNonSubVol;
   WitSubEntry * theSub;
   double        pgdSubVol;

   witAssert (pgdExecVol > 0.0);
   witAssert (theBomEnt->hasSubsInEffect ()[execPer]);

   netExecVol = pgdExecVol;

   if (unpgdNonSubVol_ (theBomEnt)[execPer] > 0.0)
      {
      pgdNonSubVol =
         minAndNet (netExecVol, unpgdNonSubVol_ (theBomEnt)[execPer]);

      pegConsEnt (theBomEnt, execPer, pgdNonSubVol);

      if (netExecVol <= 0.0)
         return;
      }

   forEachEl (theSub, theBomEnt->mySubEntries ())
      if (unpgdSubVol_ (theSub)[execPer] > 0.0)
         {
         pgdSubVol = minAndNet (netExecVol, unpgdSubVol_ (theSub)[execPer]);

         myPgg ()->
            subVolPgg ()->
               append (targDemand_, targShipPer_, theSub, execPer, pgdSubVol);

         pegConsEnt (theSub, execPer, pgdSubVol);

         if (netExecVol <= 0.0)
            return;
         }
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegConsEnt (
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      double         pgdExecVol)
   {
   double    pgdConsVol;
   WitPart * consPart;
   WitPeriod consPer;

   witAssert (pgdExecVol > 0.0);

   pgdConsVol = pgdExecVol * theConsEnt->effConsRate ()[execPer];

   if (pgdConsVol <= 0.0)
      return;

   consPart   = theConsEnt->myPart ();

   consPer    = theConsEnt->impactPeriod ()[execPer];

   myPgg ()->
      consVolPgg ()->
         append (targDemand_, targShipPer_, consPart, consPer, pgdConsVol);

   myReqSched_->addTo (consPart, consPer, pgdConsVol);
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegToStock (
      WitPart * thePart,
      WitPeriod pegPer,
      double &  netReqVol)
   {
   WitMaterial * theMat;
   double        pegVol;

   witAssert (netReqVol > 0.0);

   theMat = thePart->thisMat ();

   if (theMat == NULL)
      return;

   if (pegPer == 0)
      return;

   if (unpgdStockVol_ (theMat)[pegPer - 1] <= 0.0)
      return;

   pegVol = minAndNet (netReqVol, unpgdStockVol_ (theMat)[pegPer - 1]);

   myReqSched_->addTo (theMat, pegPer - 1, pegVol);
   }

//------------------------------------------------------------------------------

void WitIpipBldrV2::pegToSide (
      WitPart * thePart,
      WitPeriod pegPer,
      double &  netReqVol)
   {
   double pegVol;

   witAssert (netReqVol > 0.0);

   if (unpgdSideVol_ (thePart)[pegPer] <= 0.0)
      return;

   pegVol = minAndNet (netReqVol, unpgdSideVol_ (thePart)[pegPer]);
   
   myPgg ()->
      sideVolPgg ()->
         append (targDemand_, targShipPer_, thePart, pegPer, pegVol);
   }

//------------------------------------------------------------------------------

double WitIpipBldrV2::minAndNet (double & val1, double & val2)
   {
   double minVal;

   if (val1 <= val2)
      {
      minVal = val1;
      val1   = 0.0;
      val2  -= minVal;
      }
   else
      {
      minVal = val2;
      val1  -= minVal;
      val2   = 0.0;
      }

   return minVal;
   }
@


1.2
log
@New PIP pegging order.
@
text
@@


1.1
log
@New PIP pegging order.
@
text
@d50 1
d193 6
d251 6
a256 1
   pegToAtt (& WitIpipBldrV2::pegToSupply, thePart, reqPer, netReqVol);
d261 6
a266 1
   pegToAtt (& WitIpipBldrV2::pegToProd,   thePart, reqPer, netReqVol);
d271 6
a276 1
   pegToAtt (& WitIpipBldrV2::pegToSide,   thePart, reqPer, netReqVol);
d288 4
a291 3
      WitPart *              thePart,
      WitPeriod              reqPer,
      double &               netReqVol)
d294 2
a295 1
   double        unstkReqVol;
d297 3
d310 2
a311 1
   unstkReqVol = 0.0;
d316 1
a316 3
         if (unpgdStockVol_ (theMat)[pegPer] < netReqVol)
            {
            unstkReqVol += netReqVol - unpgdStockVol_ (theMat)[pegPer];
d318 2
a319 2
            netReqVol    = unpgdStockVol_ (theMat)[pegPer];
            }
d321 5
a325 2
      if (netReqVol <= NET_TOL)
         break;
d327 2
a328 1
      (this->*thePegFunc) (theMat, pegPer, netReqVol);
d331 15
a345 1
   netReqVol += unstkReqVol;
d459 2
@

