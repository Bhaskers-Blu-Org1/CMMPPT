head	1.3;
access;
symbols
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2000.03.14.22.38.36;	author bobw;	state dead;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.09;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.32;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.32;	author wit;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Replaced WitPart.[Ch] with Part.[Ch].
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "WitPart.C"
//
// Contains the implementation of class Part.
//------------------------------------------------------------------------------

#include <ObjFunc.h>
#include <CompMgr.h>
#include <DataWrit.h>
#include <DataAlt.h>
#include <Pre.h>
#include <OptComp.h>

//------------------------------------------------------------------------------
// Implementation of class Part.
//------------------------------------------------------------------------------

WitPart::WitPart (const char * theName, WitCompMgr * theCompMgr):
      WitNode              (theName, theCompMgr),

      mappingIndex_        (myCompMgr ()->nParts ()),
      myDemands_           (),
      consumingBomEntries_ (),
      consumingSubEntries_ (),
      producingBopEntries_ (),
      supplyVol_           (myProblem (), defSupplyVol ()),
      unitCost_            (defUnitCost ()),
      obj1ScrapCost_       (myProblem (), defObj1ScrapCost ()),
      expBopEntryTl_       (),
      belowList_           (),
      isCoproduced_        (witFALSE),
      consVol_             (myProblem (), 0.0),
      prodVol_             (myProblem (), 0.0),
      scrapVol_            (myProblem (), 0.0),
      expPerGaps_          (witFALSE),
      reqVol_              (myProblem (), 0.0),
      mrpConsVol_          (myProblem (), 0.0),
      mrpResidualVol_      (myProblem (), 0.0),
      focShortageVol_      (myProblem (), 0.0)
   {
   if (PART_LIMIT >= 0)
      if (myCompMgr ()->nParts () > PART_LIMIT)
         myMsgFac () ("partLimitExceededSmsg", PART_LIMIT);
   }

//------------------------------------------------------------------------------

WitPart::~WitPart ()
   {
   }

//------------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------------

void WitPart::setSupplyVol (const float * theValue)
   {
   supplyVol_ = prepNonNegFloatVec (theValue, postprocAlt ());
   }

//------------------------------------------------------------------------------

void WitPart::setUnitCost (float theValue)
   {
   unitCost_ = prepNonNegFloat (theValue, postprocAlt ());
   }

//------------------------------------------------------------------------------

void WitPart::setObj1ScrapCost (const float * theValue)
   {
   obj1ScrapCost_ = prepObj1FloatVec (theValue, postprocAlt ());
   }

//------------------------------------------------------------------------------
// Other functions.
//------------------------------------------------------------------------------

void WitPart::insert (WitBomEntry * theBomEnt)
   {
   consumingBomEntries_.appendUniquely (theBomEnt);
   }

//------------------------------------------------------------------------------

void WitPart::insert (WitSubEntry * theSub)
   {
   consumingSubEntries_.appendUniquely (theSub);
   }

//------------------------------------------------------------------------------

void WitPart::insert (WitBopEntry * theBopEnt)
   {
   producingBopEntries_.appendUniquely (theBopEnt);
   }

//------------------------------------------------------------------------------

void WitPart::insert (WitDemand * theDemand)
   {
   myDemands_.appendUniquely (theDemand);
   }

//------------------------------------------------------------------------------

WitBoolean WitPart::inserted ()
   {
   return (myCompMgr ()->findPart (partName ().myCstring ()) == this);
   }

//------------------------------------------------------------------------------

WitMsgFragID WitPart::classFragID ()
   {
   return "partFrag";
   }

//------------------------------------------------------------------------------

void WitPart::identifyInstance ()
   {
   myMsgFac () ("partInstIDMsg", partName ());
   }

//------------------------------------------------------------------------------

int WitPart::nodeIndex () const
   {
   return mappingIndex_;
   }

//------------------------------------------------------------------------------

WitBoolean WitPart::isaMaterial (WitMaterial * & theMat)
   {
   theMat = NULL;

   return witFALSE;
   }

//------------------------------------------------------------------------------

WitBoolean WitPart::isaCapacity (WitCapacity * & theCap)
   {
   theCap = NULL;

   return witFALSE;
   }

//------------------------------------------------------------------------------

void WitPart::display ()
   {
   WitDemand   * theDemand;
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;
   WitPart     * theBelowPart;
   WitPeriod     thePer;

   myMsgFac () ("partDdMsg",
      partName   (),
      myMsgFac ()[categoryFragID ()],
      mappingIndex_);

   if (myProblem ()->preprocessed ())
      {
      myMsgFac () ("expPerGapsDdMsg", expPerGaps_);

      if (isCoproduced ())
         myMsgFac () ("isCoproducedDdMsg");
      }

   objChoice ()->displayForObj2 ("partUnitCostDdMsg", unitCost ());

   myProblem ()->display ("extSupplyVolDdMsg", supplyVol ());

   objChoice ()->displayForObj1 ("obj1ScrapDdMsg", obj1ScrapCost ());

   if (! myDemands ().isEmpty ())
      {
      myMsgFac () ("myDemandsHeadingDdMsg");

      forEachEl (theDemand, myDemands ())
         myMsgFac () ("myDemandsDataDdMsg", theDemand->demandName ());
      }

   if (! consumingBomEntries ().isEmpty ())
      {
      myMsgFac () ("consBomHeadingDdMsg");

      forEachEl (theBomEnt, consumingBomEntries ())
         myMsgFac () ("consBomDataDdMsg",
            theBomEnt->myOperationName (), theBomEnt->localIndex ());
      }

   if (! consumingSubEntries ().isEmpty ())
      {
      myMsgFac () ("consSubsHeadingDdMsg");

      forEachEl (theSub, consumingSubEntries ())
         myMsgFac () ("consSubsDataDdMsg",
            theSub->myOperationName (),
            theSub->myBomEntry ()->myPartName (),
            theSub->myBomEntryIndex (),
            theSub->localIndex ());
      }

   if (! producingBopEntries ().isEmpty ())
      {
      myMsgFac () ("prodBopHeadingDdMsg");

      forEachEl (theBopEnt, producingBopEntries ())
         myMsgFac () ("prodBopDataDdMsg",
            theBopEnt->myOperationName (),
            theBopEnt->localIndex ());
      }

   if (myProblem ()->preprocessed ())
      if (! producingBopEntries ().isEmpty ())
         {
         myMsgFac () ("expBopHeadDdMsg");

         forEachPeriod (thePer, myProblem ())
            if (explodeable (thePer))
               myMsgFac () ("expBopDataDdMsg",
                  thePer,
                  expBopEntry (thePer)->myOperationName (),
                  expBopEntry (thePer)->localIndex ());
         }

   if (myProblem ()->preprocessed ())
      {
      myMsgFac () ("belowHeadingDdMsg");

      forEachElDense (theBelowPart, belowList ())
         myMsgFac () ("belowDataDdMsg", theBelowPart->partName ());
      }

   WitDelComp::display ();
   }

//------------------------------------------------------------------------------

WitBoolean WitPart::isaPart ()
   {
   return witTRUE;
   }

//------------------------------------------------------------------------------

double WitPart::net (
      WitPeriod          reqPer,
      double             reqQty,
      WitTVec (double) & supply)
   {
   WitPeriod supplyPer;
   double    qty;

   qty = reqQty;

   for (supplyPer = reqPer; supplyPer >= 0; -- supplyPer)
      {
      if (supplyPer < reqPer)
         if (! canStock (supplyPer))
            break;

      if (supply[supplyPer] > NET_TOL)
         {
         WitUtil::net (qty, supply[supplyPer]);

         if (qty <= NET_TOL)
            return 0.0;
         }
      }

   return qty;
   }

//------------------------------------------------------------------------------

void WitPart::writeSoln ()
   {
   WitPeriod     thePer;
   WitMaterial * theMat;
   WitDemand *   theDemand;
   float         shipVolVal;

   fprintf (solnFile (), "\nPart %s:\n", partName ().myCstring ());

   fprintf (solnFile (),
              "Period"
       "    SupplyVol"
       "      ProdVol"
       "      ConsVol"
       "      ShipVol"
       "     StockVol"
       "     ScrapVol"
       "  ResidualVol");

   if (fssComputed ())
      fprintf (solnFile (), "  ShortageVol");

   fprintf (solnFile (), "\n");

   forEachPeriod (thePer, myProblem ())
      {
      shipVolVal = 0.0;

      forEachEl (theDemand, myDemands ())
         shipVolVal += theDemand->shipVol ()[thePer];

      fprintf (solnFile (), "%6d", thePer);

      writeSolnValue (supplyVol ()[thePer]);
      writeSolnValue (prodVol   ()[thePer]);
      writeSolnValue (consVol   ()[thePer]);
      writeSolnValue (shipVolVal);

      writeSolnValue (
         isaMaterial (theMat)?
            theMat->stockVol ()[thePer]:
            0.0);

      writeSolnValue (scrapVol    ()[thePer]);
      writeSolnValue (residualVol ()[thePer]);

      if (fssComputed ())
         writeSolnValue (focShortageVol ()[thePer]);

      fprintf (solnFile (), "\n");
      }
   }

//------------------------------------------------------------------------------

void WitPart::writeMrpSoln ()
   {
   WitPeriod thePer;

   fprintf (solnFile (), "\nPart %s:\n", partName ().myCstring ());

   fprintf (solnFile (),
              "Period"
       "    SupplyVol"
       "   MrpConsVol"
       "       ReqVol"
       "  MrpResidualVol\n");

   forEachPeriod (thePer, myProblem ())
      {
      fprintf (solnFile (), "%6d", thePer);

      writeSolnValue (supplyVol  ()[thePer]);
      writeSolnValue (mrpConsVol ()[thePer]);
      writeSolnValue (reqVol     ()[thePer]);

      fprintf (solnFile (), "   ");

      writeSolnValue (mrpResidualVol ()[thePer]);

      fprintf (solnFile (), "\n");
      }
   }

//------------------------------------------------------------------------------

void WitPart::writeDataAttrs ()
   {
   WitNode::writeDataAttrs ();

   myDataWriter ()->writeVector (
      "supplyVol",
      supplyVol (),
      defSupplyVol ());

   myDataWriter ()->writeFloat (
      "unitCost",
      unitCost (),
      defUnitCost ());

   myDataWriter ()->writeVector (
        "obj1ScrapCost",
        obj1ScrapCost (),
        defObj1ScrapCost ());
   }

//------------------------------------------------------------------------------

void WitPart::copyAttrsFrom (WitPart * thePart)
   {
   WitNode::copyAttrsFrom (thePart);

   supplyVol_     = thePart->supplyVol ();
   unitCost_      = thePart->unitCost ();
   obj1ScrapCost_ = thePart->obj1ScrapCost ();
   }

//------------------------------------------------------------------------------

void WitPart::setPartIndex ()
   {
   mappingIndex_ = myCompMgr ()->nParts ();
   }

//------------------------------------------------------------------------------

void WitPart::writeDataID ()
   {
   myDataWriter ()->writeFirstKeyWord ("add");
   myDataWriter ()->writeKeyWord      ("part");
   myDataWriter ()->writeStringValue  (partName ());
   myDataWriter ()->writeKeyWord      (categoryKeyWord ());
   }

//------------------------------------------------------------------------------

void WitPart::purgeCompListsSpec ()
   {
   purgeSelComps (consumingBomEntries_);
   purgeSelComps (consumingSubEntries_);
   purgeSelComps (producingBopEntries_);
   purgeSelComps (myDemands_);
   }

//------------------------------------------------------------------------------

void WitPart::clearDepListsSpec ()
   {
   consumingBomEntries_.clear ();
   consumingSubEntries_.clear ();
   producingBopEntries_.clear ();
   myDemands_          .clear ();
   }

//------------------------------------------------------------------------------

implementClearContents (WitPart)
   //
   // See RWClient.h.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
