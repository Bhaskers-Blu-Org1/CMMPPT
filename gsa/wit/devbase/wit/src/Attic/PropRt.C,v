head	1.114;
access;
symbols
	sce_4_05_20040511:1.48
	sce_4_00_20040201:1.48
	nextGenBranch:1.44.0.2
	nextGenRoot:1.44
	sce_3_30_20030627:1.44;
locks; strict;
comment	@ * @;


1.114
date	2005.03.02.22.56.29;	author rjw;	state dead;
branches;
next	1.113;

1.113
date	2005.03.02.22.34.36;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2005.03.02.21.59.46;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2005.01.27.21.03.28;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2005.01.26.23.50.32;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2005.01.21.23.01.51;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2005.01.19.18.31.04;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2005.01.18.22.45.42;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2005.01.17.23.43.10;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2005.01.15.00.20.08;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2005.01.14.16.57.07;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2005.01.14.00.01.17;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2005.01.13.17.24.21;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2005.01.12.15.42.09;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2005.01.11.21.07.58;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2005.01.11.19.37.35;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2005.01.10.22.34.48;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2005.01.10.21.35.23;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2005.01.10.19.02.25;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2005.01.08.00.10.35;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2005.01.07.23.40.56;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2005.01.07.19.22.17;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2005.01.06.23.16.27;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2005.01.06.20.34.10;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2005.01.05.21.14.46;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2005.01.05.19.32.45;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2004.12.31.18.28.28;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2004.12.30.18.31.00;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2004.12.29.21.59.38;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2004.12.29.21.17.24;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2004.12.29.20.08.02;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2004.12.29.16.50.05;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2004.12.28.23.41.15;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2004.12.28.22.34.27;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2004.12.28.19.21.19;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2004.12.28.16.13.33;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2004.12.27.22.33.17;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2004.12.27.19.23.37;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2004.12.27.17.07.54;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2004.12.27.16.57.14;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2004.12.24.00.02.27;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2004.12.23.20.30.08;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2004.12.23.20.09.36;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2004.12.22.23.36.28;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2004.12.22.22.27.10;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2004.12.10.16.49.44;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2004.12.06.22.38.16;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2004.12.04.00.02.47;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2004.12.02.21.25.41;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2004.12.02.20.29.25;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2004.11.30.20.24.49;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2004.11.30.15.48.59;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2004.11.30.00.19.47;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2004.11.29.21.26.23;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2004.11.24.22.45.30;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2004.11.24.00.05.54;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2004.11.23.20.50.07;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2004.11.16.21.46.04;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2004.11.12.21.03.46;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2004.11.11.22.16.12;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2004.11.11.21.25.08;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2004.11.11.16.30.21;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2004.11.10.20.41.42;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2004.11.09.23.08.00;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2004.11.06.00.30.34;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2003.12.24.20.12.34;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2003.09.26.16.06.05;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2003.09.25.20.44.43;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2003.08.05.20.18.23;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2003.05.09.18.55.41;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2003.05.07.18.06.16;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2003.05.07.17.25.13;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2003.05.06.20.22.44;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2003.05.05.16.10.01;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2003.05.01.22.42.32;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2003.04.30.21.07.49;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2003.04.29.19.55.31;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2003.04.29.14.27.49;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2003.04.21.17.11.08;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2003.04.15.20.50.12;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2003.04.11.19.08.28;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.04.01.22.39.34;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.04.01.20.34.30;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2003.03.28.23.05.32;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2003.03.21.23.36.54;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2003.03.21.21.35.31;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2003.03.20.19.03.57;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2003.03.19.16.48.25;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2003.03.07.23.46.15;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.03.06.20.28.20;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.03.04.19.08.02;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.03.03.21.07.32;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.01.01.17.32;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.28.20.47.38;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.02.27.19.20.22;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.25.22.17.09;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.25.19.16.57;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.24.23.44.31;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.21.20.31.06;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.21.18.56.26;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.19.22.41.38;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.19.21.47.32;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.18.20.10.59;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.16.23.58.11;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.14.20.12.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.13.23.06.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.10.20.53.53;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.07.23.29.11;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.07.20.20.51;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.04.18.45.54;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.03.21.57.27;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.31.21.28.57;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.29.19.16.48;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.114
log
@Vector PropRtg.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "PropRt.C"
//
// Contains the implementation of the following classes:
//
//    PrMgr.
//    PrCoord.
//    PrSelMgr.
//    PprSelMgr.
//    CprSelMgr.
//    PrPt.
//    PrAltPt.
//    PrCand.
//------------------------------------------------------------------------------

#include <PrMgr.h>
#include <PrCoord.h>
#include <PrSelMgr.h>
#include <PrPt.h>
#include <PrAltPt.h>
#include <PrCand.h>
#include <RtMgr.h>
#include <RtSite.h>
#include <RtCand.h>
#include <Selector.h>
#include <SplitPt.h>
#include <SglSrcMgr.h>
#include <HeurAtor.h>
#include <Global.h>
#include <Part.h>
#include <Opn.h>
#include <BopEntry.h>
#include <BomEntry.h>
#include <CompMgr.h>
#include <PairStack.h>
#include <MapIdxI.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class PrMgr.
//------------------------------------------------------------------------------

WitPrMgr::WitPrMgr (WitSelector * theSelector):

      WitProbAssoc (theSelector->myProblem ()),
      myPrCoord_   (NULL),
      myRtMgr_     (theSelector->myRtMgr ())
   {
   myPrCoord_ = new WitPrCoord (theSelector);
   }

//------------------------------------------------------------------------------

WitPrMgr::~WitPrMgr ()
   {
   delete myPrCoord_;
   }

//------------------------------------------------------------------------------

bool WitPrMgr::instNeededFor (WitProblem * theProblem)
   {
   WitPart *     thePart;
   WitBomEntry * theBomEnt;

   forEachPart (thePart, theProblem)
      if (not (thePart->propRtg () == false))
         return true;

   forEachBomEntry (theBomEnt, theProblem)
      if (not (theBomEnt->propRtg () == false))
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrMgr::print ()
   {
   myPrCoord_->print ();
   }

//------------------------------------------------------------------------------

void WitPrMgr::definePropExp (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   myPrCoord_->definePropExp (theRtSite, thePer, expVol, theExpPairs);
   }

//------------------------------------------------------------------------------

void WitPrMgr::definePropExp (
      WitPart *           thePart, 
      WitPeriod           expPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (thePart);

   myPrCoord_->definePropExp (theRtSite, expPer, expVol, theExpPairs);
   }

//------------------------------------------------------------------------------

void WitPrMgr::definePropExp (
      WitBomEntry *       theBomEnt, 
      WitPeriod           execPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

   myPrCoord_->definePropExp (theRtSite, execPer, expVol, theExpPairs);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::active (WitRtCand * theRtCand, WitPeriod thePer)
   {
   return myPrCoord_->active (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

void WitPrMgr::setActive (
      WitRtCand * theRtCand,
      WitPeriod   thePer,
      bool        theValue)
   {
   myPrCoord_->setActive (theRtCand, thePer, theValue);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::allowed (WitRtCand * theRtCand, WitPeriod thePer)
   {
   return myPrCoord_->allowed (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

WitSelPt * WitPrMgr::mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer)
   {
   return myPrCoord_->mySelPtFor (theRtSite, thePer);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::selIsSplit (WitPart * thePart, WitPeriod expPer)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (thePart);

   return myPrCoord_->selIsSplit (theRtSite, expPer);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::selIsSplit (WitBomEntry * theBomEnt, WitPeriod execPer)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

   return myPrCoord_->selIsSplit (theRtSite, execPer);
   }

//------------------------------------------------------------------------------

void WitPrMgr::defineSplit (
      WitPart *           thePart, 
      WitPeriod           expPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (thePart);

   myPrCoord_->defineSplit (
      theRtSite,
      expPer,
      expVol,
      theExpPairs,
      unbddVol);
   }

//------------------------------------------------------------------------------

void WitPrMgr::defineSplit (
      WitBomEntry *       theBomEnt, 
      WitPeriod           execPer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

   myPrCoord_->defineSplit (
      theRtSite,
      execPer,
      expVol,
      theExpPairs,
      unbddVol);
   }

//------------------------------------------------------------------------------

void WitPrMgr::recordFlowSS (
      WitPart * thePart,
      WitPeriod expPer,
      double    incFlowVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (thePart);

   myPrCoord_->recordFlowSS (theRtSite, expPer, incFlowVol);
   }

//------------------------------------------------------------------------------

void WitPrMgr::recordFlowSS (
      WitBomEntry * theBomEnt,
      WitPeriod     execPer,
      double        incFlowVol)
   {
   WitRtSite * theRtSite;

   theRtSite = myRtMgr_->myRtSiteFor (theBomEnt);

   myPrCoord_->recordFlowSS (theRtSite, execPer, incFlowVol);
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrMgr::mySelMgrForProd ()
   {
   return myPrCoord_->myPrSelMgrForProd ();
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrMgr::mySelMgrForCons ()
   {
   return myPrCoord_->myPrSelMgrForCons ();
   }

//------------------------------------------------------------------------------
// Implementation of class PrCoord.
//------------------------------------------------------------------------------

WitPrCoord::WitPrCoord (WitSelector * theSelector):

      WitProbAssoc       (theSelector->myProblem ()),
      mySelector_        (theSelector),
      myRtMgr_           (theSelector->myRtMgr ()),
      myPrSelMgrForProd_ (NULL),
      myPrSelMgrForCons_ (NULL),
      myPrPts_           (),
      myPrAltPts_        ()
   {
   myMsgFac () ("propRoutingMsg");

   myPrSelMgrForProd_ = new WitPprSelMgr (this);
   myPrSelMgrForCons_ = new WitCprSelMgr (this);

   buildPrPts    ();
   buildPrAltPts ();
   }

//------------------------------------------------------------------------------

WitPrCoord::~WitPrCoord ()
   {
   WitRtCand * theRtCand;
   WitRtSite * theRtSite;
   WitPeriod   thePer;

   forEachEl (theRtCand, myRtMgr_->myRtCands ())
      if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
         forEachPeriod (thePer, myProblem ())
            delete myPrAltPts_.myPtrAt (theRtCand, thePer);

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (hasPrPtsFor (theRtSite))
         forEachPeriod (thePer, myProblem ())
            delete myPrPts_.myPtrAt (theRtSite, thePer);

   delete myPrSelMgrForCons_;
   delete myPrSelMgrForProd_;
   }

//------------------------------------------------------------------------------

void WitPrCoord::print ()
   {
   WitRtSite * theRtSite;
   WitPeriod   thePer;
   WitPrPt *   thePrPt;

   fprintf (msgFile (),
      "\n"
      "Proportionate Routing Status:\n");

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (hasPrPtsFor (theRtSite))
         forEachPeriod (thePer, myProblem ())
            {
            thePrPt = myPrPts_.myPtrAt (theRtSite, thePer);

            if (thePrPt == NULL)
               continue;

            thePrPt->print ();

            printAllowedRtCands (theRtSite, thePer);
            }

   fprintf (msgFile (), "\n");
   }

//------------------------------------------------------------------------------

void WitPrCoord::definePropExp (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtCandStack theRtCands (myProblem ());
   WitRtCand *    theRtCand;

   witAssert (theRtSite->propRtg ()[thePer]);

   theExpPairs.clear ();

   if (theRtSite->myRtCands ().nElements () > 1)
      {
      findActiveRtCands (theRtSite, thePer, theRtCands);

      defineExpPairs (theRtCands, thePer, expVol, theExpPairs);
      }
   else
      {
      witAssert (theRtSite->myRtCands ().nElements () == 1);

      theRtCand = theRtSite->myRtCands ().first ();

      witAssert (theRtCand->isEligible (thePer));

      theExpPairs.push (theRtCand, expVol);
      }

   printPropExpIA (theRtSite, thePer, expVol, theExpPairs, false);
   }

//------------------------------------------------------------------------------

bool WitPrCoord::active (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrAltPt * thePrAltPt;

   witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);

   if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

      if (thePrAltPt != NULL)
         return thePrAltPt->active ();
      }

   if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
      if (theRtCand->isEligible (thePer))
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrCoord::setActive (
      WitRtCand * theRtCand,
      WitPeriod   thePer,
      bool        theValue)
   {
   WitPrAltPt * thePrAltPt;

   witAssert (mySelector_->tbprMode ());

   witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);

   thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

   witAssert (thePrAltPt != NULL);

   witAssert (thePrAltPt->allowed ());

   thePrAltPt->setStatus (theValue, true);
   }

//------------------------------------------------------------------------------

bool WitPrCoord::allowed (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrAltPt * thePrAltPt;

   witAssert (theRtCand->myRtSite ()->propRtg ()[thePer]);

   if (myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

      if (thePrAltPt != NULL)
         return thePrAltPt->allowed ();
      }

   if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
      if (theRtCand->isEligible (thePer))
         return true;

   return false;
   }

//------------------------------------------------------------------------------

WitAltPt * WitPrCoord::myAltPtFor (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrAltPt * thePrAltPt;

   if (not hasPrPtsFor (theRtCand->myRtSite ()))
      return NULL;

   thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

   witAssert (thePrAltPt->active ());

   if (thePrAltPt->myPrPt ()->nAllowedRtCands () == 1)
      return NULL;

   return thePrAltPt;
   }

//------------------------------------------------------------------------------

WitSelPt * WitPrCoord::mySelPtFor (WitRtSite * theRtSite, WitPeriod thePer)
   {
   if (hasPrPtsFor (theRtSite))
      return myPrPts_.myPtrAt (theRtSite, thePer);
   else
      return NULL;
   }

//------------------------------------------------------------------------------

bool WitPrCoord::selIsSplit (WitRtSite * theRtSite, WitPeriod thePer)
   {
   if (mySelector_->selSplit ())
      if (hasPrPtsFor (theRtSite))
         if (myPrPts_.myPtrAt (theRtSite, thePer)->isSplit ())
            return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrCoord::defineSplit (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitSelCand * theSelCand;
   double       splitVol;
   WitRtCand *  theRtCand;
   double       propExpVol;

   WitSelCandDblStack theSplitPairs (myProblem ());
   WitRtCandStack     theRtCands    (myProblem ());
   WitRtCandDblStack  localExpPairs (myProblem ());

   witAssert (selIsSplit (theRtSite, thePer));

   witAssert (expVol >= NET_TOL);

   theExpPairs.clear ();

   myPrPts_.myPtrAt (theRtSite, thePer)->
      mySplitPt ()->
         defineSplit (expVol, theSplitPairs, unbddVol);

   while (theSplitPairs.pop (theSelCand, splitVol))
      {
      theSelCand->getPrData (theRtCands);

      defineExpPairs (
         theRtCands,
         thePer,
         splitVol,
         localExpPairs);

      localExpPairs.reverse ();

      while (localExpPairs.pop (theRtCand, propExpVol))
         theExpPairs.push (theRtCand, propExpVol);
      }

   printPropExpIA (theRtSite, thePer, expVol - unbddVol, theExpPairs, true);
   }

//------------------------------------------------------------------------------

void WitPrCoord::recordFlowSS (
      WitRtSite * theRtSite,
      WitPeriod   thePer,
      double      incFlowVol)
   {
   if (hasPrPtsFor (theRtSite))
      myPrPts_.myPtrAt (theRtSite, thePer)->
         recordFlowSS (incFlowVol);
   }

//------------------------------------------------------------------------------

void WitPrCoord::printPropExpIA (
      WitRtSite *               theRtSite, 
      WitPeriod                 thePer,
      double                    expVol,
      const WitRtCandDblStack & theExpPairs,
      bool                      bddSplit)
   {
   WitPairStItr <WitRtCand, double> theItr;
   WitRtCand *                      theRtCand;
   double                           propExpVol;

   if (myGlobalComp ()->selPrintLevel () < 3)
      return;

   if (not mySelector_->myHeurAtor ()->permCommActive ())
      return;

   fprintf (msgFile (),
      "\n"
      "Proportionate Explosion%s:\n\n",
      bddSplit? " (Bounded Split)": "");

   theRtSite->printID (4, 22);

   fprintf (msgFile (),
      "   Period:           %d\n"
      "   Exp Vol:          %.3f\n",
      thePer,
      expVol);

   theItr.attachTo (theExpPairs);

   while (theItr.advance (theRtCand, propExpVol))
      {
      fprintf (msgFile (), "\n");

      theRtCand->printID (7, 22);

      fprintf (msgFile (), "      Prop Vol:      %.3f\n", propExpVol);
      }
   }

//------------------------------------------------------------------------------

void WitPrCoord::printAllowedRtCands (WitRtSite * theRtSite, WitPeriod thePer)
   {
   WitRtCand *  theRtCand;
   WitPrAltPt * thePrAltPt;

   witAssert (myGlobalComp ()->selPrintLevel () >= 3);

   fprintf (msgFile (),
      "\n"
      "   Allowed Routing Candidates:\n");

   forEachEl (theRtCand, theRtSite->myRtCands ())
      {
      thePrAltPt = myPrAltPts_.myPtrAt (theRtCand, thePer);

      if (thePrAltPt != NULL)
         if (thePrAltPt->allowed ())
            theRtCand->printID (7, 22);
      }
   }

//------------------------------------------------------------------------------

void WitPrCoord::buildPrPts ()
   {
   WitRtSite * theRtSite;
   WitPeriod   thePer;

   myPrPts_.allocate1D (myProblem ());

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      {
      if (theRtSite->myRtCands ().nElements () <= 1)
         continue;

      if (theRtSite->propRtg () == false)
         continue;

      myPrPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());

      forEachPeriod (thePer, myProblem ())
         if (theRtSite->explodeable (thePer))
            if (theRtSite->propRtg ()[thePer])
               myPrPts_.myPtrAt (theRtSite, thePer) =
                  new WitPrPt   (theRtSite, thePer, this);
      }
   }

//------------------------------------------------------------------------------

void WitPrCoord::buildPrAltPts ()
   {
   WitRtCand * theRtCand;
   WitRtSite * theRtSite;
   WitPeriod   thePer;
   WitPrPt *   thePrPt;

   myPrAltPts_.allocate1D (myProblem ());

   forEachEl (theRtCand, myRtMgr_->myRtCands ())
      {
      theRtSite = theRtCand->myRtSite ();

      if (not hasPrPtsFor (theRtSite))
         continue;

      myPrAltPts_.myPtrTVecAt (theRtCand).allocate (myProblem ());

      forEachPeriod (thePer, myProblem ())
         if (theRtCand->isEligible (thePer))
            {
            thePrPt = myPrPts_.myPtrAt (theRtSite, thePer);

            myPrAltPts_.myPtrAt (theRtCand, thePer) =
               new WitPrAltPt (thePrPt, theRtCand, this);
            }
      }
   }

//------------------------------------------------------------------------------

void WitPrCoord::findActiveRtCands (
      WitRtSite *      theRtSite,
      WitPeriod        thePer,
      WitRtCandStack & theRtCands)
   {
   WitRtCand * theRtCand;

   witAssert (hasPrPtsFor (theRtSite));

   theRtCands.clear ();

   forEachEl (theRtCand, theRtSite->myRtCands ())
      if (myPrAltPts_.myPtrAt (theRtCand, thePer)->active ())
         theRtCands.push (theRtCand);

   theRtCands.reverse ();
   }

//------------------------------------------------------------------------------

void WitPrCoord::defineExpPairs (
      const WitRtCandStack & theRtCands,
      WitPeriod              thePer,
      double                 expVol,
      WitRtCandDblStack &    theExpPairs)
   {
   double                  totShare;
   WitObjStItr <WitRtCand> theItr;
   WitRtCand *             theRtCand;
   double                  expVolPerShare;
   double                  propExpVol;

   witAssert (theRtCands.isNonEmpty ());

   totShare = 0.0;

   theItr.attachTo (theRtCands);

   while (theItr.advance (theRtCand))
      totShare += theRtCand->myBillEnt ()->routingShare ()[thePer];

   expVolPerShare = expVol / totShare;

   theExpPairs.clear ();

   theItr.attachTo (theRtCands);

   while (theItr.advance (theRtCand))
      {
      propExpVol =
         expVolPerShare * theRtCand->myBillEnt ()->routingShare ()[thePer];

      theExpPairs.push (theRtCand, propExpVol);
      }

   witAssert (theExpPairs.isNonEmpty ());

   theExpPairs.reverse ();
   }

//------------------------------------------------------------------------------

bool WitPrCoord::hasPrPtsFor (WitRtSite * theRtSite)
   {
   return myPrPts_.myPtrTVecAt (theRtSite).isAllocated ();
   }

//------------------------------------------------------------------------------
// Implementation of class PrSelMgr.
//------------------------------------------------------------------------------

WitPrSelMgr::~WitPrSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitPrSelMgr::WitPrSelMgr (WitPrCoord * thePrCoord):

      WitSelMgr  (thePrCoord->mySelector ()),
      myPrCoord_ (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

bool WitPrSelMgr::selSplitNeeded ()
   {
   return myGlobalComp ()->selSplit ();
   }

//------------------------------------------------------------------------------
// Implementation of class PprSelMgr.
//------------------------------------------------------------------------------

WitPprSelMgr::WitPprSelMgr (WitPrCoord * thePrCoord):

      WitPrSelMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitPprSelMgr::~WitPprSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitAltPt * WitPprSelMgr::myAltPtFor (
      WitBopEntry * theBopEnt,
      WitConsEntry *,
      WitPeriod     execPer,
      WitPeriod)
   {
   WitRtCand * theRtCand;
   WitPeriod   expPer;

   theRtCand = mySelector ()->myRtMgr ()->myRtCandFor (theBopEnt);

   expPer    = theBopEnt->impactPeriod ()[execPer];

   return myPrCoord ()->myAltPtFor (theRtCand, expPer);
   }

//------------------------------------------------------------------------------

bool WitPprSelMgr::validForNetting ()
   {
   return true;
   }

//------------------------------------------------------------------------------

bool WitPprSelMgr::validForExecBounds ()
   {
   return true;
   }

//------------------------------------------------------------------------------

const char * WitPprSelMgr::selCaseName ()
   {
   return "Production Proportionate Routing";
   }

//------------------------------------------------------------------------------
// Implementation of class CprSelMgr.
//------------------------------------------------------------------------------

WitCprSelMgr::WitCprSelMgr (WitPrCoord * thePrCoord):

      WitPrSelMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitCprSelMgr::~WitCprSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitAltPt * WitCprSelMgr::myAltPtFor (
      WitBopEntry *,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      WitPeriod)
   {
   WitRtCand * theRtCand;

   theRtCand = mySelector ()->myRtMgr ()->myRtCandFor (theConsEnt);

   return myPrCoord ()->myAltPtFor (theRtCand, execPer);
   }

//------------------------------------------------------------------------------

bool WitCprSelMgr::validForNetting ()
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitCprSelMgr::validForExecBounds ()
   {
   return false;
   }

//------------------------------------------------------------------------------

const char * WitCprSelMgr::selCaseName ()
   {
   return "Consumption Proportionate Routing";
   }

//------------------------------------------------------------------------------
// Implementation of class PrPt.
//------------------------------------------------------------------------------

WitPrPt::WitPrPt (
         WitRtSite *  theRtSite,
         WitPeriod    thePer,
         WitPrCoord * thePrCoord):

      WitSelPt         (),
      myRtSite_        (theRtSite),
      myPer_           (thePer),
      myPrCoord_       (thePrCoord),
      nAllowedRtCands_ (0)
   {
   }

//------------------------------------------------------------------------------

WitPrPt::~WitPrPt ()
   {
   }

//------------------------------------------------------------------------------

void WitPrPt::print ()
   {
   fprintf (myPrCoord_->msgFile (),
      "\n"
      "Proportionate Routing Point:\n"
      "\n");

   myRtSite_->printID          (4, 22);
   myRtSite_->printPer (myPer_, 4, 22);
   }

//------------------------------------------------------------------------------

void WitPrPt::incAllowedRtCands (int delta)
   {
   if (myPrCoord_->mySelector ()->sglSrc ())
      myPrCoord_->
         mySelector ()->
            mySglSrcMgr ()->
               saveConfigVal (nAllowedRtCands_);

   nAllowedRtCands_ += delta;

   witAssert (nAllowedRtCands_ >= 1);
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrPt::mySelMgr ()
   {
   return
      myRtSite_->isForProd ()?
         myPrCoord_->myPrSelMgrForProd ():
         myPrCoord_->myPrSelMgrForCons ();
   }

//------------------------------------------------------------------------------

void WitPrPt::prtID () 
   {
   myRtSite_->printID (4, 22);

   fprintf (myRtSite_->msgFile (), "   Period:           %d\n", myPer_);
   }

//------------------------------------------------------------------------------

bool WitPrPt::splittable () 
   {
   if (myPrCoord_->myGlobalComp ()->selSplit ())
      return true;

   if (myPrCoord_->myGlobalComp ()->nonMrSelSplit ())
      return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrPt::getSortData (WitPart * & thePart, WitPeriod & thePer)
   {
   thePart = myRtSite_->mrSortPart ();

   thePer  = myPer_;
   }

//------------------------------------------------------------------------------

WitSelCand * WitPrPt::newSelCand ()
   {
   return new WitPrCand (myPrCoord_, myRtSite_, myPer_);
   }

//------------------------------------------------------------------------------
// Implementation of class PrAltPt.
//------------------------------------------------------------------------------

WitPrAltPt::WitPrAltPt (
         WitPrPt *    thePrPt,
         WitRtCand *  theRtCand,
         WitPrCoord * thePrCoord):

      WitAltPt   (),
      myPrPt_    (thePrPt),
      myRtCand_  (theRtCand),
      myPrCoord_ (thePrCoord),
      active_    (true),
      allowed_   (true)
   {  
   witAssert (myPrPt_ != NULL);

   myPrPt_->incAllowedRtCands (+1);
   }

//------------------------------------------------------------------------------

WitPrAltPt::~WitPrAltPt ()
   {
   }

//------------------------------------------------------------------------------

void WitPrAltPt::setStatus (bool activeVal, bool allowedVal)
   {
   if (DEBUG_MODE)
      {
      if (activeVal)
         witAssert (allowedVal);

      if (not myPrCoord_->mySelector ()->tbprMode ())
         witAssert (activeVal == allowedVal);
      }

   if (myPrCoord_->mySelector ()->sglSrc ())
      {
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (allowed_);
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (active_);
      }

   if (allowedVal != allowed_)
      myPrPt_->incAllowedRtCands (allowedVal? +1: -1);

   allowed_ = allowedVal;
   active_  = activeVal;
   }

//------------------------------------------------------------------------------

bool WitPrAltPt::hasResAlt ()
   {
   return (myPrPt_->nAllowedRtCands () > 1);
   }

//------------------------------------------------------------------------------

void WitPrAltPt::alterSelection ()
   {
   witAssert (myPrPt_->nAllowedRtCands () > 1);

   setStatus (false, false);
   }

//------------------------------------------------------------------------------

void WitPrAltPt::tempAlterSel ()
   {
   witAssert (active_);
   witAssert (allowed_);

   witAssert (myPrPt_->nAllowedRtCands () > 1);

   setStatus (false, false);
   }

//------------------------------------------------------------------------------

void WitPrAltPt::cancelTempAlt ()
   {
   witAssert (not active_);
   witAssert (not allowed_);

   setStatus (true, true);
   }

//------------------------------------------------------------------------------

WitSelPt * WitPrAltPt::mySelPt ()
   {
   return myPrPt_;
   }

//------------------------------------------------------------------------------

void WitPrAltPt::printAlteration ()
   {
   if (myRtCand_->myGlobalComp ()->selPrintLevel () < 3)
      return;

   fprintf (myRtCand_->msgFile (),
      "\n"
      "Proportionate Routing Candidate Disallowance:\n\n");

   myRtCand_->myRtSite ()->printID                     (4, 22);
   myRtCand_->myRtSite ()->printPer (myPrPt_->myPer (), 4, 22);
   myRtCand_->             printID                     (7, 22);

   myPrCoord_->printAllowedRtCands (myRtCand_->myRtSite (), myPrPt_->myPer ());
   }

//------------------------------------------------------------------------------
// Implementation of class PrCand.
//------------------------------------------------------------------------------

WitPrCand::WitPrCand (
         WitPrCoord * thePrCoord,
         WitRtSite *  theRtSite,
         WitPeriod    thePer):

      WitSelCand  (thePrCoord->myProblem ()),
      actRtCands_ (myProblem ())
   {
   WitRtCand * theRtCand;

   forEachEl (theRtCand, theRtSite->myRtCands ())
      if (thePrCoord->active (theRtCand, thePer))
         actRtCands_.push (theRtCand);

   actRtCands_.reverse ();

   witAssert (actRtCands_.isNonEmpty ());
   }

//------------------------------------------------------------------------------

WitPrCand::~WitPrCand ()
   {
   }

//------------------------------------------------------------------------------

void WitPrCand::prtID ()
   {
   WitObjStItr <WitRtCand> theItr;
   WitRtCand *             theRtCand;

   theItr.attachTo (actRtCands_);

   while (theItr.advance (theRtCand))
      theRtCand->printID (7, 22);
   }

//------------------------------------------------------------------------------

void WitPrCand::getPrData (WitRtCandStack & theRtCands)
   {
   theRtCands.revCopyFrom (actRtCands_);

   theRtCands.reverse ();
   }
@


1.113
log
@Vector PropRtg.
@
text
@@


1.112
log
@Vector Prop-Rtg.
@
text
@d76 1
a76 1
      if (not (thePart->propRt () == false))
d80 1
a80 1
      if (not (theBomEnt->propRt () == false))
d356 1
a356 1
   witAssert (theRtSite->propRt ()[thePer]);
d386 1
a386 1
   witAssert (theRtCand->myRtSite ()->propRt ()[thePer]);
d414 1
a414 1
   witAssert (theRtCand->myRtSite ()->propRt ()[thePer]);
d431 1
a431 1
   witAssert (theRtCand->myRtSite ()->propRt ()[thePer]);
d629 1
a629 1
      if (theRtSite->propRt () == false)
d636 1
a636 1
            if (theRtSite->propRt ()[thePer])
@


1.111
log
@Pegged critical list.
@
text
@d76 1
a76 1
      if (thePart->propRouting ())
d80 1
a80 1
      if (theBomEnt->propRouting ())
d356 1
a356 1
   witAssert (theRtSite->propRouting ());
d386 1
a386 1
   witAssert (theRtCand->myRtSite ()->propRouting ());
d414 1
a414 1
   witAssert (theRtCand->myRtSite ()->propRouting ());
d431 1
a431 1
   witAssert (theRtCand->myRtSite ()->propRouting ());
d625 8
a632 4
      if (theRtSite->myRtCands ().nElements () > 1)
         if (theRtSite->propRouting ())
            {
            myPrPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());
d634 6
a639 5
            forEachPeriod (thePer, myProblem ())
               if (theRtSite->explodeable (thePer))
                  myPrPts_.myPtrAt (theRtSite, thePer) =
                     new WitPrPt   (theRtSite, thePer, this);
            }
@


1.110
log
@Pegged critical list.
@
text
@d785 4
a788 1
   WitPeriod expPer;
d790 1
a790 1
   expPer = theBopEnt->impactPeriod ()[execPer];
d792 1
a792 1
   return myPrCoord ()->myAltPtFor (theBopEnt->myRtCand (), expPer);
d840 5
a844 1
   return myPrCoord ()->myAltPtFor (theConsEnt->myRtCand (), execPer);
@


1.109
log
@Changed terminology from "low priority proportionate routing" to
"tie breaking proportionate routing".
@
text
@d55 2
a56 1
      myPrCoord_   (NULL)
d106 30
d167 28
a194 1
bool WitPrMgr::selIsSplit (WitRtSite * theRtSite, WitPeriod thePer)
d196 10
a205 1
   return myPrCoord_->selIsSplit (theRtSite, thePer);
d211 2
a212 2
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
d217 4
d223 1
a223 1
      thePer,
d232 17
a248 3
      WitRtSite * theRtSite,
      WitPeriod   thePer,
      double      incFlowVol)
d250 5
a254 1
   myPrCoord_->recordFlowSS (theRtSite, thePer, incFlowVol);
@


1.108
log
@Low-Pri Prop-Rt.
@
text
@d323 1
a323 1
   witAssert (mySelector_->lpprMode ());
d907 1
a907 1
      if (not myPrCoord_->mySelector ()->lpprMode ())
@


1.107
log
@Low-Pri Prop-Rt.
@
text
@d828 1
a828 1
      (myRtSite_->myRtCase () == prodRtCase)?
@


1.106
log
@Low-Pri Prop-Rt.
@
text
@d170 1
a170 1
WitSelMgr * WitPrMgr::mySelMgrFor (WitRtCase theRtCase)
d172 8
a179 1
   return myPrCoord_->myPrSelMgrFor (theRtCase);
a527 10
WitPrSelMgr * WitPrCoord::myPrSelMgrFor (WitRtCase theRtCase)
   {
   return
      (theRtCase == prodRtCase)? myPrSelMgrForProd_:
      (theRtCase == consRtCase)? myPrSelMgrForCons_:
                                 NULL;
   }

//------------------------------------------------------------------------------

d827 4
a830 1
   return myPrCoord_->myPrSelMgrFor (myRtSite_->myRtCase ());
@


1.105
log
@Low-Pri Prop-Rt.
@
text
@d908 1
a908 2
         if (allowedVal)
            witAssert (activeVal);
@


1.104
log
@Low-Pri Prop-Rt.
@
text
@d243 1
a243 1
            printRtShares (theRtSite, thePer);
a382 23
void WitPrCoord::printRtShares (WitRtSite * theRtSite, WitPeriod thePer)
   {
   WitRtCandStack theRtCands (myProblem ());
   WitRtCand *    theRtCand;

   findActiveRtCands (theRtSite, thePer, theRtCands);

   fprintf (msgFile (),
      "   Tot Active Share: %.0f\n\n",
      totRoutingShare (theRtCands, thePer));

   while (theRtCands.pop (theRtCand))
      {
      theRtCand->printID (7, 22);

      fprintf (msgFile (),
         "      Routing Share: %.0f\n\n",
         theRtCand->myBillEnt ()->routingShare ()[thePer]);
      }
   }

//------------------------------------------------------------------------------

d498 23
d610 1
a610 1
   double                  expVolPerShare;
d613 1
d618 9
a628 2
   expVolPerShare = expVol / totRoutingShare (theRtCands, thePer);

a645 20
double WitPrCoord::totRoutingShare (
      const WitRtCandStack & theRtCands,
      WitPeriod              thePer)
   {
   double                  totShare;
   WitObjStItr <WitRtCand> theItr;
   WitRtCand *             theRtCand;

   totShare = 0.0;

   theItr.attachTo (theRtCands);

   while (theItr.advance (theRtCand))
      totShare += theRtCand->myBillEnt ()->routingShare ()[thePer];

   return totShare;
   }

//------------------------------------------------------------------------------

a808 4

   fprintf (myPrCoord_->msgFile (),
      "   Allowed Cands:    %d\n",
      nAllowedRtCands ());
a827 9
void WitPrPt::printSelection ()
   {
   print ();

   myPrCoord_->printRtShares (myRtSite_, myPer_);
   }

//------------------------------------------------------------------------------

a938 2

   printDisallowance ();
d972 1
a972 1
void WitPrAltPt::printDisallowance ()
d984 2
@


1.103
log
@Low-Pri Prop-Rt.
@
text
@a289 2
   witAssert (mySelector_->lpprMode ());

d363 1
a363 2
   if (not thePrAltPt->allowed ())
      return NULL;
d1028 1
a1028 1
      if (thePrCoord->allowed (theRtCand, thePer))
@


1.102
log
@Low-Pri Prop-Rt.
@
text
@d129 7
d376 10
@


1.101
log
@Low-Pri Prop-Rt.
@
text
@d958 3
d968 1
a968 1
void WitPrAltPt::cancelTempAlt (WitSelCand * theSelCand)
d970 2
a971 1
   witAssert (theSelCand == NULL);
a977 7
bool WitPrAltPt::cancelNeedsSelCand ()
   {
   return false;
   }

//------------------------------------------------------------------------------

@


1.100
log
@Low-Pri Prop-Rt.
@
text
@d274 1
a274 1
   printPropExpIA (theRtSite, thePer, expVol, theExpPairs);
a391 42
void WitPrCoord::printPropExpIA (
      WitRtSite *               theRtSite, 
      WitPeriod                 thePer,
      double                    expVol,
      const WitRtCandDblStack & theExpPairs)
   {
   WitPairStItr <WitRtCand, double> theItr;
   WitRtCand *                      theRtCand;
   double                           propExpVol;

   if (myGlobalComp ()->selPrintLevel () < 3)
      return;

   if (not mySelector_->myHeurAtor ()->permCommActive ())
      return;

   fprintf (msgFile (),
      "\n"
      "Proportionate Explosion:\n\n");

   theRtSite->printID (4, 22);

   fprintf (msgFile (),
      "   Period:           %d\n"
      "   Exp Vol:          %.3f\n",
      thePer,
      expVol);

   theItr.attachTo (theExpPairs);

   while (theItr.advance (theRtCand, propExpVol))
      {
      fprintf (msgFile (), "\n");

      theRtCand->printID (7, 22);

      fprintf (msgFile (), "      Prop Vol:      %.3f\n", propExpVol);
      }
   }

//------------------------------------------------------------------------------

d440 2
d445 2
d463 44
@


1.99
log
@Low-Pri Prop-Rt.
@
text
@d405 1
a405 1
   if (mySelector_->myHeurAtor ()->tempMode ())
@


1.98
log
@Low-Pri Prop-Rt.
@
text
@d37 1
d273 2
d392 42
@


1.97
log
@Low-Pri Prop-Rt.
@
text
@a55 2
   stronglyAssert (myGlobalComp ()->newPropRt ());

a72 2
   stronglyAssert (theProblem->myGlobalComp ()->newPropRt ());

@


1.96
log
@Low-Pri Prop-Rt.
@
text
@a185 1
   myMsgFac () ("newPropRtMsg");
@


1.95
log
@Low-Pri Prop-Rt.
@
text
@d108 1
a108 1
bool WitPrMgr::lpprAct (WitRtCand * theRtCand, WitPeriod thePer)
d110 1
a110 1
   return myPrCoord_->lpprAct (theRtCand, thePer);
d115 1
a115 1
void WitPrMgr::setLpprAct (
d120 1
a120 1
   myPrCoord_->setLpprAct (theRtCand, thePer, theValue);
d125 1
a125 1
bool WitPrMgr::active (WitRtCand * theRtCand, WitPeriod thePer)
d127 1
a127 1
   return myPrCoord_->active (theRtCand, thePer);
a262 3
      if (mySelector_->lpprMode ())
         myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::definePropExp");

d281 1
a281 1
bool WitPrCoord::lpprAct (WitRtCand * theRtCand, WitPeriod thePer)
d294 1
a294 1
         return thePrAltPt->lpprAct ();
d306 1
a306 1
void WitPrCoord::setLpprAct (
d321 1
a321 1
   witAssert (thePrAltPt->active ());
d323 1
a323 1
   thePrAltPt->setActStat (true, theValue);
d328 1
a328 1
bool WitPrCoord::active (WitRtCand * theRtCand, WitPeriod thePer)
d339 1
a339 1
         return thePrAltPt->active ();
d360 1
a360 1
   if (not thePrAltPt->active ())
d363 1
a363 1
   if (thePrAltPt->myPrPt ()->nActRtCands () == 1)
d736 5
a740 5
      WitSelPt     (),
      myRtSite_    (theRtSite),
      myPer_       (thePer),
      myPrCoord_   (thePrCoord),
      nActRtCands_ (0)
d763 2
a764 2
      "   Active Cands:     %d\n",
      nActRtCands ());
d769 1
a769 1
void WitPrPt::incActRtCands (int delta)
d772 4
a775 1
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (nActRtCands_);
d777 1
a777 1
   nActRtCands_ += delta;
d779 1
a779 1
   witAssert (nActRtCands_ >= 1);
d850 1
a850 1
      lpprAct_   (true)
d854 1
a854 1
   myPrPt_->incActRtCands (+1);
d865 1
a865 1
void WitPrAltPt::setActStat (bool activeVal, bool lpprActVal)
d868 8
a875 2
      if (lpprActVal)
         witAssert (activeVal);
d879 1
a880 1
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (lpprAct_);
d883 2
a884 2
   if (activeVal != active_)
      myPrPt_->incActRtCands (activeVal? +1: -1);
d886 1
a887 1
   lpprAct_ = lpprActVal;
d894 1
a894 1
   return (myPrPt_->nActRtCands () > 1);
d901 1
a901 1
   witAssert (myPrPt_->nActRtCands () > 1);
d903 1
a903 1
   setActStat (false, false);
d905 1
a905 1
   printPermDeact ();
d912 1
a912 1
   witAssert (myPrPt_->nActRtCands () > 1);
d914 1
a914 1
   setActStat (false, false);
d923 1
a923 1
   setActStat (true, true);
d942 1
a942 1
void WitPrAltPt::printPermDeact ()
d949 1
a949 1
      "Permanent Deactivation for Proportionate Routing:\n\n");
d971 1
a971 1
      if (thePrCoord->active (theRtCand, thePer))
@


1.94
log
@Low-Pri Prop-Rt.
@
text
@d263 3
a287 2
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::lpprAct");

d314 13
a326 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::setLpprAct");
d865 21
a950 21

void WitPrAltPt::setActStat (bool activeVal, bool lpprActVal)
   {
   if (DEBUG_MODE)
      if (lpprActVal)
         witAssert (activeVal);

   if (myPrCoord_->mySelector ()->sglSrc ())
      {
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (active_);
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (lpprAct_);
      }

   if (activeVal != active_)
      myPrPt_->incActRtCands (activeVal? +1: -1);

   active_  = activeVal;
   lpprAct_ = lpprActVal;
   }

//------------------------------------------------------------------------------
@


1.93
log
@Low-Pri Prop-Rt.
@
text
@d108 1
a108 1
bool WitPrMgr::active (WitRtCand * theRtCand, WitPeriod thePer)
d110 1
a110 1
   return myPrCoord_->active (theRtCand, thePer);
d115 1
a115 1
void WitPrMgr::setActive (
d120 1
a120 1
   myPrCoord_->setActive (theRtCand, thePer, theValue);
d125 1
a125 1
bool WitPrMgr::potActive (WitRtCand * theRtCand, WitPeriod thePer)
d127 1
a127 1
   return myPrCoord_->potActive (theRtCand, thePer);
d281 1
a281 1
bool WitPrCoord::active (WitRtCand * theRtCand, WitPeriod thePer)
d285 4
d296 1
a296 1
         return thePrAltPt->active ();
d308 1
a308 1
void WitPrCoord::setActive (
d313 1
a313 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::setActive");
d318 1
a318 1
bool WitPrCoord::potActive (WitRtCand * theRtCand, WitPeriod thePer)
d320 15
a334 2
   if (myGlobalComp ()->lowPriPropRt ())
      myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::potActive");
d336 1
a336 1
   return active (theRtCand, thePer);
d765 2
d836 2
a837 1
      active_    (true)
d863 1
a863 1
   setActive (false);
d874 1
a874 1
   setActive (false);
d883 1
a883 1
   setActive (true);
d918 1
a918 1
void WitPrAltPt::setActive (bool theValue)
d920 3
a922 1
   witAssert (theValue == not active_);
d925 1
d927 2
d930 2
a931 1
   active_ = theValue;
d933 2
a934 1
   myPrPt_->incActRtCands (theValue? +1: -1);
@


1.92
log
@Low-Pri Prop-Rt.
@
text
@d770 1
a770 1
   myRtSite_->printID (7, 22);
d772 1
a772 1
   fprintf (myRtSite_->msgFile (), "      Period:        %d\n", myPer_);
d949 1
a949 1
      theRtCand->printID (10, 22);
@


1.91
log
@Low-Pri Prop-Rt.
@
text
@d790 1
a790 1
void WitPrPt::getSortData (WitPart * &, WitPeriod &)
d792 3
a794 1
   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::getSortData");
a840 2
   witAssert (active_);

d843 1
a843 6
   if (myPrCoord_->mySelector ()->sglSrc ())
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (active_);

   active_ = false;

   myPrPt_->incActRtCands (-1);
d852 3
a854 1
   alterSelection ();
d861 3
a863 1
   curMsgFac () ("newPropRtNYISmsg", "WitPrAltPt::cancelTempAlt");
a869 2
   curMsgFac () ("newPropRtNYISmsg", "WitPrAltPt::cancelNeedsSelCand");

d897 14
@


1.90
log
@Low-Pri Prop-Rt.
@
text
@a789 11
void WitPrPt::restoreSelTo (WitSelCand * theSelCand)
   {
   WitRtCandStack theRtCands (myPrCoord_->myProblem ());

   theSelCand->getPrData (theRtCands);

   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::restoreSelTo");
   }

//------------------------------------------------------------------------------

d862 16
@


1.89
log
@Low-Pri Prop-Rt.
@
text
@d792 4
d868 1
a868 1
   curMsgFac () ("newPropRtNYISmsg", "WitPrAltPt::tempAlterSel");
@


1.88
log
@Low-Pri Prop-Rt.
@
text
@d35 1
d369 4
a372 4
   if (not mySelector_->selSplit ())
      return false;

   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::selIsSplit");
d386 32
a417 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::defineSplit");
d427 3
a429 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::recordFlowSS");
d524 1
a524 1
   WitObjStItr <WitRtCand> theRtCandItr;
d534 1
a534 1
   theRtCandItr.attachTo (theRtCands);
d536 1
a536 1
   while (theRtCandItr.advance (theRtCand))
d556 2
a557 1
   WitObjStItr <WitRtCand> theRtCandItr;
d561 1
a561 1
   theRtCandItr.attachTo (theRtCands);
d563 2
a564 2
   while (theRtCandItr.advance ())
      totShare += theRtCandItr->myBillEnt ()->routingShare ()[thePer];
d763 1
a763 3
   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::mySelMgr");

   return NULL;
d770 3
a772 1
   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::prtID");
d779 5
a783 1
   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::splittable");
d806 1
a806 17
   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::newSelCand");

   return NULL;
   }

//------------------------------------------------------------------------------

void WitPrPt::recSplit ()
   {
   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::recSplit");
   }

//------------------------------------------------------------------------------

void WitPrPt::recUnsplit ()
   {
   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::recUnsplit");
d923 16
a938 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCand::prtID");
@


1.87
log
@Low-Pri Prop-Rt.
@
text
@d751 7
a876 3
      myPrCoord_  (thePrCoord),
      myRtSite_   (theRtSite),
      myPer_      (thePer),
d881 2
a882 2
   forEachEl (theRtCand, myRtSite_->myRtCands ())
      if (myPrCoord_->active (theRtCand, myPer_))
a901 7

//------------------------------------------------------------------------------

void WitPrCand::restoreSelToThis ()
   {
   myMsgFac () ("newPropRtNYISmsg", "WitPrCand::restoreSelToThis");
   }
@


1.86
log
@Low-Pri Prop-Rt.
@
text
@a900 7
void WitPrCand::updateToCurSel ()
   {
   myMsgFac () ("newPropRtNYISmsg", "WitPrCand::updateToCurSel");
   }

//------------------------------------------------------------------------------

@


1.85
log
@Low-Pri Prop-Rt.
@
text
@d22 1
d30 1
d859 53
@


1.84
log
@Low-Pri Prop-Rt.
@
text
@d280 15
a294 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::active");
d313 2
a314 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::potActive");
d316 1
a316 1
   return false;
@


1.83
log
@Low-Pri Prop-Rt.
@
text
@d692 3
@


1.82
log
@Low-Pri Prop-Rt.
@
text
@d351 3
d684 1
a684 1
      "   # Active RtCands: %d\n",
@


1.81
log
@Low-Pri Prop-Rt.
@
text
@d33 1
d219 2
a220 2
   WitPeriod    thePer;
   WitPrPt *    thePrPt;
d235 1
a235 11
            fprintf (msgFile (),
               "\n"
               "Proportionate Routing Point:\n"
               "\n");

            theRtSite->printID          (4, 22);
            theRtSite->printPer (thePer, 4, 22);

            fprintf (msgFile (),
               "   # Active RtCands: %d\n",
               thePrPt->nActRtCands ());
d326 23
d435 2
a436 1
            myPrAltPts_.myPtrAt (theRtCand, thePer) = new WitPrAltPt (thePrPt);
a442 23
void WitPrCoord::printRtShares (WitRtSite * theRtSite, WitPeriod thePer)
   {
   WitRtCandStack theRtCands (myProblem ());
   WitRtCand *    theRtCand;

   findActiveRtCands (theRtSite, thePer, theRtCands);

   fprintf (msgFile (),
      "   Tot Active Share: %.0f\n\n",
      totRoutingShare (theRtCands, thePer));

   while (theRtCands.pop (theRtCand))
      {
      theRtCand->printID (7, 22);

      fprintf (msgFile (),
         "      Routing Share: %.0f\n\n",
         theRtCand->myBillEnt ()->routingShare ()[thePer]);
      }
   }

//------------------------------------------------------------------------------

d670 17
d696 3
a698 1
   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::printSelection");
d760 4
a763 1
WitPrAltPt::WitPrAltPt (WitPrPt * thePrPt):
d765 5
a769 3
      WitAltPt (),
      myPrPt_  (thePrPt),
      active_  (true)
d793 12
a804 1
   curMsgFac () ("newPropRtNYISmsg", "WitPrAltPt::alterSelection");
d820 16
@


1.80
log
@Low-Pri Prop-Rt.
@
text
@d217 13
a229 1
   return;
d231 19
a249 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::print");
d428 23
@


1.79
log
@Low-Pri Prop-Rt.
@
text
@d179 1
a179 2
      myPrAltPts_        (),
      active_            ()
a188 1
   setUpActive   ();
d205 1
a205 1
      if (myPrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d287 1
a287 1
   WitPrPt * thePrPt;
d289 1
a289 1
   if (not myPrAltPts_.myPtrTVecAt (theRtCand).isAllocated ())
d292 3
a294 1
   if (not active_ (theRtCand)[thePer])
d297 1
a297 3
   thePrPt = myPrPts_.myPtrAt (theRtCand->myRtSite (), thePer);

   if (thePrPt->nActRtCands () == 1)
d300 1
a300 1
   return myPrAltPts_.myPtrAt (theRtCand, thePer);
d381 1
a381 1
      if (not myPrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d389 1
a389 1
            thePrPt = myPrPts_.myPtrTVecAt (theRtSite)[thePer];
a397 32
void WitPrCoord::setUpActive ()
   {
   WitRtCand * theRtCand;
   WitRtSite * theRtSite;
   WitPeriod   thePer;
   WitPrPt *   thePrPt;

   active_.allocate1D (myProblem ());

   forEachEl (theRtCand, myRtMgr_->myRtCands ())
      {
      theRtSite = theRtCand->myRtSite ();

      if (not myPrPts_.myPtrTVecAt (theRtSite).isAllocated ())
         continue;

      active_ (theRtCand).allocate (myProblem (), false);

      forEachPeriod (thePer, myProblem ())
         if (theRtCand->isEligible (thePer))
            {
            active_ (theRtCand)[thePer] = true;

            thePrPt = myPrPts_.myPtrAt (theRtSite, thePer);

            thePrPt->incActRtCands (+1);
            }
      }
   }

//------------------------------------------------------------------------------

d405 2
d410 1
a410 1
      if (active_ (theRtCand)[thePer])
d470 7
a631 7
bool WitPrPt::hasResAlt ()
   {
   return (nActRtCands_ > 1);
   }

//------------------------------------------------------------------------------

d699 11
a709 1
      myPrPt_  (thePrPt)
a710 1
   witAssert (thePrPt != NULL);
d715 1
a715 1
WitPrAltPt::~WitPrAltPt ()
d717 1
@


1.78
log
@Low-Pri Prop-Rt.
@
text
@d21 1
a21 1
//    PrAlt.
d28 1
a28 1
#include <PrAlt.h>
d179 1
a179 1
      myPrAlts_          (),
d188 3
a190 3
   buildPrPts  ();
   buildPrAlts ();
   setUpActive ();
d202 1
a202 1
      if (myPrAlts_.myPtrTVecAt (theRtCand).isAllocated ())
d204 1
a204 1
            delete myPrAlts_.myPtrAt (theRtCand, thePer);
d287 1
a287 1
WitSelAlt * WitPrCoord::mySelAltFor (WitRtCand * theRtCand, WitPeriod thePer)
d291 1
a291 1
   if (not myPrAlts_.myPtrTVecAt (theRtCand).isAllocated ())
d302 1
a302 1
   return myPrAlts_.myPtrAt (theRtCand, thePer);
d370 1
a370 1
void WitPrCoord::buildPrAlts ()
d377 1
a377 1
   myPrAlts_.allocate1D (myProblem ());
d386 1
a386 1
      myPrAlts_.myPtrTVecAt (theRtCand).allocate (myProblem ());
d393 1
a393 1
            myPrAlts_.myPtrAt (theRtCand, thePer) = new WitPrAlt (thePrPt);
d543 1
a543 1
WitSelAlt * WitPprSelMgr::mySelAltFor (
d553 1
a553 1
   return myPrCoord ()->mySelAltFor (theBopEnt->myRtCand (), expPer);
d595 1
a595 1
WitSelAlt * WitCprSelMgr::mySelAltFor (
d601 1
a601 1
   return myPrCoord ()->mySelAltFor (theConsEnt->myRtCand (), execPer);
d725 1
a725 1
// Implementation of class PrAlt.
d728 1
a728 1
WitPrAlt::WitPrAlt (WitPrPt * thePrPt):
d730 2
a731 2
      WitSelAlt (),
      myPrPt_   (thePrPt)
d738 1
a738 1
WitPrAlt::~WitPrAlt ()
d744 1
a744 1
void WitPrAlt::alterSelection ()
d746 1
a746 1
   curMsgFac () ("newPropRtNYISmsg", "WitPrAlt::alterSelection");
d751 1
a751 1
void WitPrAlt::tempAlterSel ()
d753 1
a753 1
   curMsgFac () ("newPropRtNYISmsg", "WitPrAlt::tempAlterSel");
d758 1
a758 1
WitSelPt * WitPrAlt::mySelPt ()
@


1.77
log
@Low-Pri Prop-Rt.
@
text
@a258 20
bool WitPrCoord::singleton (WitRtSite * theRtSite, WitPeriod thePer)
   {
   WitRtCand * theRtCand;
   int         nActive;

   witAssert (myPrPts_.myPtrTVecAt (theRtSite).isAllocated ());

   nActive = 0;

   forEachEl (theRtCand, theRtSite->myRtCands ())
      if (active_ (theRtCand)[thePer])
         nActive ++;

   witAssert (nActive > 0);

   return (nActive == 1);
   }

//------------------------------------------------------------------------------

d289 2
d297 3
a299 1
   if (singleton (theRtCand->myRtSite (), thePer))
d405 1
d419 8
a426 1
         active_ (theRtCand)[thePer] = theRtCand->isEligible (thePer);
d634 5
a638 4
      WitSelPt   (),
      myRtSite_  (theRtSite),
      myPer_     (thePer),
      myPrCoord_ (thePrCoord)
d650 7
d659 1
a659 1
   return not myPrCoord_->singleton (myRtSite_, myPer_);
@


1.76
log
@Low-Pri Prop-Rt.
@
text
@d21 1
d28 1
d179 1
d188 2
a189 2
   buildPrPts ();

d197 1
d201 5
d259 20
d309 5
a313 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::mySelAltFor");
d315 4
a318 1
   return NULL;
d386 30
d637 9
a645 3
WitPrPt::WitPrPt (WitRtSite *, WitPeriod, WitPrCoord *):

      WitSelPt ()
d659 1
a659 3
   curMsgFac () ("newPropRtNYISmsg", "WitPrPt::hasResAlt");

   return false;
d723 39
@


1.75
log
@Fixed a compiler warning on AIX.
@
text
@d234 1
a234 3
      myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::definePropExp");

//    defineExpPairs (theRtCands, thePer, expVol, theExpPairs);
d391 53
@


1.74
log
@Low-Pri Prop-Rt.
@
text
@d38 1
@


1.73
log
@Low-Pri Prop-Rt.
@
text
@d37 1
d209 2
d222 25
a246 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::definePropExp");
d374 18
@


1.72
log
@Low-Pri Prop-Rt.
@
text
@d17 4
d25 5
d34 1
d160 1
a160 3
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::mySelMgrFor");

   return NULL;
d169 7
a175 1
      WitProbAssoc (theSelector->myProblem ())
d180 6
a185 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::WitPrCoord");
d192 10
a201 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrCoord::~WitPrCoord");
d252 9
d289 267
@


1.71
log
@Low-Pri Prop-Rt.
@
text
@a113 9
WitSelPt * WitPrMgr::mySelPtFor (WitRtCand * theRtCand, WitPeriod thePer)
   {
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::mySelPtFor");

   return NULL;
   }

//------------------------------------------------------------------------------

@


1.70
log
@Low-Pri Prop-Rt.
@
text
@d16 1
d20 1
d35 2
a36 1
      WitProbAssoc (theSelector->myProblem ())
d38 3
a40 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::WitPrMgr");
d47 1
a47 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::~WitPrMgr");
d74 1
a74 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::print");
d85 1
a85 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::definePropExp");
d92 1
a92 3
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::active");

   return false;
d102 1
a102 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::setActive");
d109 1
a109 3
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::potActive");

   return false;
d125 1
a125 3
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::selIsSplit");

   return false;
d137 6
a142 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::defineSplit");
d152 1
a152 1
   myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::recordFlowSS");
d163 98
@


1.69
log
@Low-Pri Prop-Rt.
@
text
@d21 4
d49 2
a50 2
   if (not theProblem->myGlobalComp ()->newPropRt ())
      return false;
d52 9
a60 1
   theProblem->myMsgFac () ("newPropRtNYISmsg", "WitPrMgr::instNeededFor");
@


1.68
log
@Low-Pri Prop-Rt.
@
text
@d12 4
d17 130
@


1.67
log
@Low-Pri Prop-Rt.
@
text
@d11 1
a11 1
// Source file: "Skeleton.C"
@


1.66
log
@Low-Pri Prop-Rt.
@
text
@d11 1
a11 12
// Source file: "PropRt.C"
//
// Contains the implementation of the following classes:
//
//    PrMgr.
//    PrCoord.
//    PrSelMgr.
//    PprSelMgr.
//    CprSelMgr.
//    PrCand.
//    PrBrPt.
//    PrPt.
a12 1093

#include <PrMgr.h>
#include <PrCoord.h>
#include <PrSelMgr.h>
#include <PrCand.h>
#include <PrBrPt.h>
#include <PrPt.h>
#include <Selector.h>
#include <RtMgr.h>
#include <RtSite.h>
#include <RtCand.h>
#include <SplitPt.h>
#include <RtAn.h>
#include <Part.h>
#include <Opn.h>
#include <BomEntry.h>
#include <BopEntry.h>
#include <ConsEnt.h>
#include <Global.h>
#include <MsgFac.h>
#include <MapIdxI.h>

//------------------------------------------------------------------------------
// Implementation of class PrMgr.
//------------------------------------------------------------------------------

WitPrMgr::WitPrMgr (WitSelector * theSelector):

      WitProbAssoc (theSelector->myProblem ()),
      myPrCoord_   (NULL)
   {
   myPrCoord_ = new WitPrCoord (theSelector);
   }

//------------------------------------------------------------------------------

WitPrMgr::~WitPrMgr ()
   {
   delete myPrCoord_;
   }

//------------------------------------------------------------------------------

bool WitPrMgr::instNeededFor (WitProblem * theProblem)
   {
   WitPart *     thePart;
   WitBomEntry * theBomEnt;

   forEachPart (thePart, theProblem)
      if (thePart->propRouting ())
         return true;

   forEachBomEntry (theBomEnt, theProblem)
      if (theBomEnt->propRouting ())
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrMgr::print ()
   {
   myPrCoord_->print ();
   }

//------------------------------------------------------------------------------

void WitPrMgr::definePropExp (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   myPrCoord_->definePropExp (theRtSite, thePer, expVol, theExpPairs);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::active (WitRtCand * theRtCand, WitPeriod thePer)
   {
   return myPrCoord_->active (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

void WitPrMgr::setActive (
      WitRtCand * theRtCand,
      WitPeriod   thePer,
      bool        theValue)
   {
   myPrCoord_->setActive (theRtCand, thePer, theValue);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::potActive (WitRtCand * theRtCand, WitPeriod thePer)
   {
   return myPrCoord_->potActive (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

WitSelPt * WitPrMgr::mySelPtFor (WitRtCand * theRtCand, WitPeriod thePer)
   {
   return myPrCoord_->myPrPtFor (theRtCand, thePer);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::selIsSplit (WitRtSite * theRtSite, WitPeriod thePer)
   {
   return myPrCoord_->selIsSplit (theRtSite, thePer);
   }

//------------------------------------------------------------------------------

void WitPrMgr::defineSplit (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   myPrCoord_->defineSplit (
      theRtSite,
      thePer,
      expVol,
      theExpPairs,
      unbddVol);
   }

//------------------------------------------------------------------------------

void WitPrMgr::recordFlowSS (
      WitRtSite * theRtSite,
      WitPeriod   thePer,
      double      incFlowVol)
   {
   myPrCoord_->recordFlowSS (theRtSite, thePer, incFlowVol);
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrMgr::mySelMgr (WitRtCase theRtCase)
   {
   return myPrCoord_->myPrSelMgr (theRtCase);
   }

//------------------------------------------------------------------------------
// Implementation of class PrCoord.
//------------------------------------------------------------------------------

WitPrCoord::WitPrCoord (WitSelector * theSelector):

      WitProbAssoc       (theSelector->myProblem ()),
      myPrSelMgrForProd_ (NULL),
      myPrSelMgrForCons_ (NULL),
      actCand_           (NULL),
      provInactCand_     (NULL),
      fundInactCand_     (NULL),
      myPrBrPts_         (),
      myPrPts_           (),
      mySelector_        (theSelector),
      myRtMgr_           (theSelector->myRtMgr ())
   {
   myPrSelMgrForProd_ = new WitPprSelMgr (this);
   myPrSelMgrForCons_ = new WitCprSelMgr (this);

   actCand_           = new WitPrCand (true,  true,  myProblem ());
   provInactCand_     = new WitPrCand (false, true,  myProblem ());
   fundInactCand_     = new WitPrCand (false, false, myProblem ());

   buildPrBrPts ();
   buildPrPts   ();

   myMsgFac () ("propRoutingMsg");
   }

//------------------------------------------------------------------------------

WitPrCoord::~WitPrCoord ()
   {
   WitRtCand * theRtCand;
   WitRtSite * theRtSite;
   WitPeriod   thePer;

   forEachEl (theRtCand, myRtMgr_->myRtCands ())
      if (myPrPts_.myPtrTVecAt (theRtCand).isAllocated ())
         forEachPeriod (thePer, myProblem ())
            delete myPrPts_.myPtrAt (theRtCand, thePer);

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (hasPrBrPtsFor (theRtSite))
         forEachPeriod (thePer, myProblem ())
            delete myPrBrPts_.myPtrAt (theRtSite, thePer);

   delete fundInactCand_;
   delete provInactCand_;
   delete actCand_;
   delete myPrSelMgrForCons_;
   delete myPrSelMgrForProd_;
   }

//------------------------------------------------------------------------------

void WitPrCoord::definePropExp (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitPrBrPt *    thePrBrPt;
   WitRtCandStack theRtCands (myProblem ());
   WitRtCand *    theRtCand;

   witAssert (theRtSite->propRouting ());

   theExpPairs.clear ();

   if (theRtSite->myRtCands ().nElements () > 1)
      {
      thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);

      witAssert (thePrBrPt != NULL);

      thePrBrPt->findActiveRtCands (theRtCands);

      definePropExp (theRtCands, thePer, expVol, theExpPairs);
      }
   else
      {
      witAssert (theRtSite->myRtCands ().nElements () == 1);

      theRtCand = theRtSite->myRtCands ().first ();

      witAssert (theRtCand->isEligible (thePer));

      theExpPairs.push (theRtCand, expVol);
      }
   }

//------------------------------------------------------------------------------

bool WitPrCoord::active (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrPt * thePrPt;

   witAssert (theRtCand->myRtSite ()->propRouting ());

   thePrPt = myPrPtFor (theRtCand, thePer);

   if (thePrPt != NULL)
      return thePrPt->active ();

   if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
      if (theRtCand->isEligible (thePer))
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrCoord::setActive (
      WitRtCand * theRtCand,
      WitPeriod   thePer,
      bool        theValue)
   {
   WitPrPt * thePrPt;

   witAssert (theRtCand->myRtSite ()->propRouting ());

   thePrPt = myPrPtFor (theRtCand, thePer);

   witAssert (thePrPt != NULL);

   thePrPt->setActive (theValue);
   }

//------------------------------------------------------------------------------

bool WitPrCoord::potActive (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrPt * thePrPt;

   witAssert (theRtCand->myRtSite ()->propRouting ());

   thePrPt = myPrPtFor (theRtCand, thePer);

   if (thePrPt != NULL)
      return thePrPt->potActive ();

   if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
      if (theRtCand->isEligible (thePer))
         return true;

   return false;
   }

//------------------------------------------------------------------------------

WitSelPt * WitPrCoord::mySelPtForAlt (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrPt * thePrPt;

   thePrPt = myPrPtFor (theRtCand, thePer);

   if (thePrPt != NULL)
      if (thePrPt->active ())
         if (not thePrPt->myPrBrPt ()->singleton ())
            return thePrPt;

   return NULL;
   }

//------------------------------------------------------------------------------

void WitPrCoord::print ()
   {
   WitRtSite * theRtSite;
   WitPeriod   thePer;
   WitPrBrPt * thePrBrPt;

   fprintf (msgFile (),
      "\n"
      "Proportionate Routing Status:\n");

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (hasPrBrPtsFor (theRtSite))
         forEachPeriod (thePer, myProblem ())
            {
            thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);

            if (thePrBrPt != NULL)
               thePrBrPt->print ();
            }

   fprintf (msgFile (), "\n");
   }

//------------------------------------------------------------------------------

double WitPrCoord::totRoutingShare (
      const WitRtCandStack & theRtCands,
      WitPeriod              thePer)
   {
   double                  totShare;
   WitObjStItr <WitRtCand> theRtCandItr;

   totShare = 0.0;

   theRtCandItr.attachTo (theRtCands);

   while (theRtCandItr.advance ())
      totShare += theRtCandItr->myBillEnt ()->routingShare ()[thePer];

   return totShare;
   }

//------------------------------------------------------------------------------

bool WitPrCoord::selIsSplit (WitRtSite * theRtSite, WitPeriod thePer)
   {
   WitPrBrPt * thePrBrPt;

   if (not mySelector_->selSplit ())
      return false;

   if (hasPrBrPtsFor (theRtSite))
      {
      thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);

      if (thePrBrPt != NULL)
         if (thePrBrPt->splitPrPts ().isNonEmpty ())
            return true;
      }

   return false;
   }

//------------------------------------------------------------------------------

void WitPrCoord::defineSplit (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs,
      double &            unbddVol)
   {
   WitPrBrPt *           thePrBrPt;
   WitObjStItr <WitPrPt> theItr;
   WitPrPt *             thePrPt;
   double                splitVol;
   WitRtCandDblStack     localExpPairs (myProblem ());
   WitRtCand *           theRtCand;
   double                propExpVol;

   witAssert (selIsSplit (theRtSite, thePer));

   witAssert (expVol >= NET_TOL);

   theExpPairs.clear ();

   unbddVol  = expVol;

   thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);

   theItr.attachTo (thePrBrPt->splitPrPts ());

   while (theItr.advance (thePrPt))
      {
      findSplitVols (thePrPt, unbddVol, splitVol, unbddVol);

      if (splitVol >= NET_TOL)
         {
         definePropExp (
            thePrPt->activeRtCands (),
            thePer,
            splitVol,
            localExpPairs);

         while (localExpPairs.pop (theRtCand, propExpVol))
            theExpPairs.push (theRtCand, propExpVol);
         }

      if (unbddVol < NET_TOL)
         break;

      thePrPt->recordFlowSS (unbddVol);
      }

   theExpPairs.reverse ();
   }

//------------------------------------------------------------------------------

void WitPrCoord::recordFlowSS (
      WitRtSite * theRtSite,
      WitPeriod   thePer,
      double      incFlowVol)
   {
   WitRtCand * theRtCand;
   WitPrPt *   thePrPt;

   if (not hasPrBrPtsFor (theRtSite))
      return;

   forEachEl (theRtCand, theRtSite->myRtCands ())
      {
      thePrPt = myPrPtFor (theRtCand, thePer);

      if (thePrPt != NULL)
         if (not thePrPt->isSplit ())
            thePrPt->recordFlowSS (incFlowVol);
      }
   }

//------------------------------------------------------------------------------

WitPrPt * WitPrCoord::myPrPtFor (WitRtCand * theRtCand, WitPeriod thePer)
   {
   if (myPrPts_.myPtrTVecAt (theRtCand).isAllocated ())
      return myPrPts_.myPtrAt (theRtCand, thePer);

   return NULL;
   }

//------------------------------------------------------------------------------

WitPrSelMgr * WitPrCoord::myPrSelMgr (WitRtCase theRtCase)
   {
   return
      (theRtCase == prodRtCase)? myPrSelMgrForProd_:
      (theRtCase == consRtCase)? myPrSelMgrForCons_:
                                 NULL;
   }

//------------------------------------------------------------------------------

void WitPrCoord::buildPrBrPts ()
   {
   WitRtSite * theRtSite;
   WitPeriod   thePer;

   myPrBrPts_.allocate1D (myProblem ());

   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (theRtSite->myRtCands ().nElements () > 1)
         if (theRtSite->propRouting ())
            {
            myPrBrPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());

            forEachPeriod (thePer, myProblem ())
               if (theRtSite->explodeable (thePer))
                  myPrBrPts_.myPtrAt (theRtSite, thePer) =
                     new WitPrBrPt   (theRtSite, thePer, this);
            }
   }

//------------------------------------------------------------------------------

void WitPrCoord::buildPrPts ()
   {
   WitRtCand * theRtCand;
   WitRtSite * theRtSite;
   WitPeriod   thePer;
   WitPrBrPt * thePrBrPt;

   myPrPts_.allocate1D (myProblem ());

   forEachEl (theRtCand, myRtMgr_->myRtCands ())
      {
      theRtSite = theRtCand->myRtSite ();

      if (not hasPrBrPtsFor (theRtSite))
         continue;

      myPrPts_.myPtrTVecAt (theRtCand).allocate (myProblem ());

      forEachPeriod (thePer, myProblem ())
         if (theRtCand->isEligible (thePer))
            {
            thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);

            myPrPts_.myPtrAt (theRtCand, thePer) =
               new WitPrPt (theRtCand, thePrBrPt, this);
            }
      }
   }

//------------------------------------------------------------------------------

void WitPrCoord::definePropExp (
      const WitRtCandStack & theRtCands,
      WitPeriod              thePer,
      double                 expVol,
      WitRtCandDblStack &    theExpPairs)
   {
   double                  expVolPerShare;
   WitObjStItr <WitRtCand> theRtCandItr;
   WitRtCand *             theRtCand;
   double                  propExpVol;

   witAssert (theRtCands.isNonEmpty ());

   theExpPairs.clear ();

   expVolPerShare = expVol / totRoutingShare (theRtCands, thePer);

   theRtCandItr.attachTo (theRtCands);

   while (theRtCandItr.advance (theRtCand))
      {
      propExpVol =
         expVolPerShare * theRtCand->myBillEnt ()->routingShare ()[thePer];

      theExpPairs.push (theRtCand, propExpVol);
      }

   witAssert (theExpPairs.isNonEmpty ());

   theExpPairs.reverse ();
   }

//------------------------------------------------------------------------------

void WitPrCoord::findSplitVols (
      WitPrPt * thePrPt,
      double    expVol,
      double &  splitVol,
      double &  unbddVol)
   {
   WitSelCandDblStack theSplitPairs (myProblem ());
   bool               lastUnbdd;
   WitSelCand *       theSelCand;
   double             firstVol;
   double             secondVol;

   thePrPt->mySplitPt ()->defineSplit (expVol, theSplitPairs, lastUnbdd);

   if (theSplitPairs.isEmpty ())
      {
      splitVol = 0.0;
      unbddVol = 0.0;

      return;
      }

   theSplitPairs.reverse ();

   theSplitPairs.pop (theSelCand, firstVol);

   if (theSplitPairs.isNonEmpty ())
      {
      witAssert (lastUnbdd);

      theSplitPairs.pop (theSelCand, secondVol);

      witAssert (theSplitPairs.isEmpty ());

      splitVol = firstVol;
      unbddVol = secondVol;
      }
   else if (lastUnbdd)
      {
      splitVol = 0.0;
      unbddVol = firstVol;
      }
   else
      {
      splitVol = firstVol;
      unbddVol = 0.0;
      }
   }

//------------------------------------------------------------------------------

bool WitPrCoord::hasPrBrPtsFor (WitRtSite * theRtSite)
   {
   return myPrBrPts_.myPtrTVecAt (theRtSite).isAllocated ();
   }

//------------------------------------------------------------------------------
// Implementation of class PrSelMgr.
//------------------------------------------------------------------------------

WitPrSelMgr::~WitPrSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitPrSelMgr::WitPrSelMgr (WitPrCoord * thePrCoord):

      WitSelMgr  (thePrCoord->mySelector ()),
      myPrCoord_ (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

bool WitPrSelMgr::selSplitNeeded ()
   {
   return myGlobalComp ()->selSplit ();
   }

//------------------------------------------------------------------------------
// Implementation of class PprSelMgr.
//------------------------------------------------------------------------------

WitPprSelMgr::WitPprSelMgr (WitPrCoord * thePrCoord):

      WitPrSelMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitPprSelMgr::~WitPprSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitSelPt * WitPprSelMgr::mySelPtForAlt (
      WitBopEntry * theBopEnt,
      WitConsEntry *,
      WitPeriod     execPer,
      WitPeriod)
   {
   WitPeriod expPer;

   expPer = theBopEnt->impactPeriod ()[execPer];

   return myPrCoord ()->mySelPtForAlt (theBopEnt->myRtCand (), expPer);
   }

//------------------------------------------------------------------------------

bool WitPprSelMgr::validForNetting ()
   {
   return true;
   }

//------------------------------------------------------------------------------

bool WitPprSelMgr::validForExecBounds ()
   {
   return true;
   }

//------------------------------------------------------------------------------

const char * WitPprSelMgr::selCaseName ()
   {
   return "Production Proportionate Routing";
   }

//------------------------------------------------------------------------------
// Implementation of class CprSelMgr.
//------------------------------------------------------------------------------

WitCprSelMgr::WitCprSelMgr (WitPrCoord * thePrCoord):

      WitPrSelMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitCprSelMgr::~WitCprSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitSelPt * WitCprSelMgr::mySelPtForAlt (
      WitBopEntry *,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      WitPeriod)
   {
   return myPrCoord ()->mySelPtForAlt (theConsEnt->myRtCand (), execPer);
   }

//------------------------------------------------------------------------------

bool WitCprSelMgr::validForNetting ()
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitCprSelMgr::validForExecBounds ()
   {
   return false;
   }

//------------------------------------------------------------------------------

const char * WitCprSelMgr::selCaseName ()
   {
   return "Consumption Proportionate Routing";
   }

//------------------------------------------------------------------------------
// Implementation of class PrCand.
//------------------------------------------------------------------------------

WitPrCand::WitPrCand (
         bool         activeVal,
         bool         potActiveVal,
         WitProblem * theProblem):

      WitSelCand (theProblem),

      active_    (activeVal),
      potActive_ (potActiveVal)
   {
   }

//------------------------------------------------------------------------------

WitPrCand::~WitPrCand ()
   {
   }

//------------------------------------------------------------------------------

void WitPrCand::prtID ()
   {
   const char * statusText;

   statusText =
      active_?    "Active":
      potActive_? "Provisionally Inactive":
                  "Permanently Inactive";

   fprintf (msgFile (), "      Status:        %s\n", statusText);
   }

//------------------------------------------------------------------------------

WitPrCand * WitPrCand::myPrCand ()
   {
   return this;
   }

//------------------------------------------------------------------------------
// Implementation of class PrBrPt.
//------------------------------------------------------------------------------

WitPrBrPt::WitPrBrPt (
         WitRtSite *  theRtSite,
         WitPeriod    thePer,
         WitPrCoord * thePrCoord):

      myRtSite_   (theRtSite),
      myPer_      (thePer),
      myPrCoord_  (thePrCoord),
      splitPrPts_ (thePrCoord->myProblem ())
   {
   }

//------------------------------------------------------------------------------

WitPrBrPt::~WitPrBrPt ()
   {
   }

//------------------------------------------------------------------------------

bool WitPrBrPt::singleton ()
   {
   WitRtCand * theRtCand;
   WitPrPt *   thePrPt;
   int         nActive;

   nActive = 0;

   forEachEl (theRtCand, myRtSite_->myRtCands ())
      {
      thePrPt = myPrCoord_->myPrPtFor (theRtCand, myPer_);

      if (thePrPt != NULL)
         if (thePrPt->potActive ())
            nActive ++;
      }

   witAssert (nActive > 0);

   return (nActive == 1);
   }

//------------------------------------------------------------------------------

void WitPrBrPt::print ()
   {
   FILE *         theMsgFile;
   WitRtCandStack theRtCands (myPrCoord_->myProblem ());
   WitRtCand *    theRtCand;

   theMsgFile = myPrCoord_->msgFile ();

   fprintf (theMsgFile,
      "\n"
      "Proportionate Routing Branch Point:\n"
      "\n");

   myRtSite_->printID          (4, 19);
   myRtSite_->printPer (myPer_, 4, 19);

   findActiveRtCands (theRtCands);

   fprintf (theMsgFile,
      "   Tot Act Share: %.0f\n\n",
      myPrCoord_->totRoutingShare (theRtCands, myPer_));

   while (theRtCands.pop (theRtCand))
      {
      theRtCand->printID (7, 22);

      fprintf (theMsgFile,
         "      Routing Share: %.0f\n\n",
         theRtCand->myBillEnt ()->routingShare ()[myPer_]);
      }
   }

//------------------------------------------------------------------------------

void WitPrBrPt::recSplit (WitPrPt * thePrPt)
   {
   witAssert (thePrPt->isSplit ());

   splitPrPts_.reverse ();

   splitPrPts_.push (thePrPt);

   splitPrPts_.reverse ();
   }

//------------------------------------------------------------------------------

void WitPrBrPt::recUnsplit (WitPrPt * thePrPt)
   {
   WitPrPt *             othPrPt;
   WitObjStack <WitPrPt> thePrPts (myPrCoord_->myProblem ());

   witAssert (not thePrPt->isSplit ());

   while (splitPrPts_.pop (othPrPt))
      if (othPrPt != thePrPt)
         thePrPts.push (othPrPt);

   splitPrPts_.revCopyFrom (thePrPts);
   }

//------------------------------------------------------------------------------

void WitPrBrPt::findActiveRtCands (WitRtCandStack & theRtCands)
   {
   WitRtCand * theRtCand;
   WitPrPt *   thePrPt;

   theRtCands.clear ();

   forEachEl (theRtCand, myRtSite_->myRtCands ())
      {
      thePrPt = myPrCoord_->myPrPtFor (theRtCand, myPer_);

      if (thePrPt != NULL)
         if (thePrPt->active ())
            theRtCands.push (theRtCand);
      }

   theRtCands.reverse ();
   }

//------------------------------------------------------------------------------
// Implementation of class PrPt.
//------------------------------------------------------------------------------

WitPrPt::WitPrPt (
         WitRtCand *  theRtCand,
         WitPrBrPt *  thePrBrPt,
         WitPrCoord * thePrCoord):

      WitSelPt       (),
         
      myRtCand_      (theRtCand),
      myPrBrPt_      (thePrBrPt),
      myPrCoord_     (thePrCoord),
      activeRtCands_ (theRtCand->myProblem ())
   {
   witAssert (myRtCand_->myRtSite () == myPrBrPt_->myRtSite ());

   select (myPrCoord_->actCand ());
   }

//------------------------------------------------------------------------------

WitPrPt::~WitPrPt ()
   {
   }

//------------------------------------------------------------------------------

bool WitPrPt::hasResAlt ()
   {
   return active ();
   }

//------------------------------------------------------------------------------

void WitPrPt::alterSelection ()
   {
   witAssert (active ());

   witAssert (not myPrBrPt_->singleton ());

   select (myPrCoord_->fundInactCand ());

   printPermDeact ();
   }

//------------------------------------------------------------------------------

void WitPrPt::printSelection ()
   {
   myPrBrPt_->print ();
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrPt::mySelMgr ()
   {
   WitRtCase theRtCase;

   theRtCase = myRtCand_->myRtSite ()->myRtCase ();

   return myPrCoord_->myPrSelMgr (theRtCase);
   }

//------------------------------------------------------------------------------

void WitPrPt::prtID ()       
   {
   myRtCand_->printID (7, 22);

   fprintf (myRtCand_->msgFile (),
      "      Period:        %d\n",
      myPrBrPt_->myPer ());
   }

//------------------------------------------------------------------------------

bool WitPrPt::splittable ()
   {
   if (myPrCoord_->myGlobalComp ()->selSplit ())
      return true;

   if (myPrCoord_->myGlobalComp ()->nonMrSelSplit ())
      return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrPt::getSortData (WitPart * & thePart, WitPeriod & thePer)
   {
   thePart = myPrBrPt_->myRtSite ()->mrSortPart ();

   thePer  = myPrBrPt_->myPer ();
   }

//------------------------------------------------------------------------------

void WitPrPt::tempAlterSel ()
   {
   alterSelection ();
   }

//------------------------------------------------------------------------------

void WitPrPt::restoreSel (WitSelCand * theSelCand)
   {
   witAssert (theSelCand == myPrCoord_->actCand ());

   witAssert (not active ());

   select (myPrCoord_->actCand ());
   }

//------------------------------------------------------------------------------

bool WitPrPt::active ()
   {
   return selSelCand ()->myPrCand ()->active ();
   }

//------------------------------------------------------------------------------

void WitPrPt::setActive (bool theValue)
   {
   if (theValue)
      select (myPrCoord_->actCand ());
   else
      select (myPrCoord_->provInactCand ());
   }

//------------------------------------------------------------------------------

bool WitPrPt::potActive ()
   {
   return selSelCand ()->myPrCand ()->potActive ();
   }

//------------------------------------------------------------------------------

void WitPrPt::recSplit ()
   {
   myPrBrPt_->findActiveRtCands (activeRtCands_);

   myPrBrPt_->recSplit (this);
   }

//------------------------------------------------------------------------------

void WitPrPt::recUnsplit ()
   {
   myPrBrPt_->recUnsplit (this);

   activeRtCands_.clear ();
   }

//------------------------------------------------------------------------------

void WitPrPt::printPermDeact ()
   {
   if (myRtCand_->myGlobalComp ()->selPrintLevel () < 3)
      return;

   fprintf (myRtCand_->msgFile (),
      "\n"
      "Permanent Deactivation for Proportionate Routing:\n\n");

   myRtCand_->myRtSite ()->printID                       (4, 22);
   myRtCand_->myRtSite ()->printPer (myPrBrPt_->myPer (), 4, 22);
   myRtCand_->             printID                       (7, 22);
   }
@


1.65
log
@Low-Pri Prop-Rt.
@
text
@d184 1
a184 1
      permInactCand_     (NULL),
d195 1
a195 1
   permInactCand_     = new WitPrCand (false, false, myProblem ());
d221 1
a221 1
   delete permInactCand_;
a616 2
   witAssert (theSelCand == actCand_);

a622 2
      witAssert (theSelCand == permInactCand_);

d986 1
a986 1
   select (myPrCoord_->permInactCand ());
@


1.64
log
@Low-Pri Prop-Rt.
@
text
@d617 2
d625 2
@


1.63
log
@Low-Pri Prop-Rt.
@
text
@d600 2
a601 2
   double             activeVol;
   double             inactiveVol;
d615 1
a615 3
   theSplitPairs.pop (theSelCand, activeVol);

   witAssert (theSelCand == actCand_);
d621 1
a621 3
      theSplitPairs.pop (theSelCand, inactiveVol);

      witAssert (theSelCand != actCand_);
d625 2
a626 2
      splitVol = activeVol;
      unbddVol = inactiveVol;
d631 1
a631 1
      unbddVol = activeVol;
d635 1
a635 1
      splitVol = activeVol;
@


1.62
log
@Low-Pri Prop-Rt.
@
text
@d184 1
a184 1
      fundInactCand_     (NULL),
d195 1
a195 1
   fundInactCand_     = new WitPrCand (false, false, myProblem ());
d221 1
a221 1
   delete fundInactCand_;
d806 1
a806 1
                  "Fundamentally Inactive";
d990 1
a990 1
   select (myPrCoord_->fundInactCand ());
d992 1
a992 1
   printDeact ();
d1108 1
a1108 1
void WitPrPt::printDeact ()
d1115 1
a1115 1
      "Proportionate Routing Deactivation:\n\n");
@


1.61
log
@Low-Pri Prop-Rt.
@
text
@d801 8
a808 4
   fprintf (msgFile (), "      Status:        %s\n",
      active_?
         "Active":
         "Inactive");
@


1.60
log
@Low-Pri Prop-Rt.
@
text
@d127 7
d625 1
a625 1
      witAssert (theSelCand == fundInactCand_);
@


1.59
log
@Low-Pri Prop-Rt.
@
text
@a30 1
#include <SglSrcMgr.h>
d120 1
a120 1
bool WitPrMgr::fundActive (WitRtCand * theRtCand, WitPeriod thePer)
d122 1
a122 1
   return myPrCoord_->fundActive (theRtCand, thePer);
d175 3
a177 2
      activeCand_        (NULL),
      inactiveCand_      (NULL),
d186 3
a188 2
   activeCand_        = new WitPrCand (true,  myProblem ());
   inactiveCand_      = new WitPrCand (false, myProblem ());
d214 3
a216 2
   delete inactiveCand_;
   delete activeCand_;
d299 1
a299 1
bool WitPrCoord::fundActive (WitRtCand * theRtCand, WitPeriod thePer)
d308 1
a308 1
      return thePrPt->fundActive ();
d610 1
a610 1
   witAssert (theSelCand == activeCand_);
d618 1
a618 1
      witAssert (theSelCand == inactiveCand_);
d772 5
a776 1
WitPrCand::WitPrCand (bool activeVal, WitProblem * theProblem):
d779 2
a780 1
      active_    (activeVal)
d844 1
a844 1
         if (thePrPt->fundActive ())
a950 1
      fundActive_    (true),
d955 1
a955 1
   select (myPrCoord_->activeCand ());
d979 1
a979 6
   select (myPrCoord_->inactiveCand ());

   if (myPrCoord_->mySelector ()->sglSrc ())
      myPrCoord_->mySelector ()->mySglSrcMgr ()->saveConfigVal (fundActive_);

   fundActive_ = false;
d1046 1
a1046 1
   witAssert (theSelCand == myPrCoord_->activeCand ());
d1050 1
a1050 1
   select (myPrCoord_->activeCand ());
d1065 1
a1065 1
      select (myPrCoord_->  activeCand ());
d1067 8
a1074 1
      select (myPrCoord_->inactiveCand ());
@


1.58
log
@Low-Pri Prop-Rt.
@
text
@d31 1
d121 7
d297 20
d541 1
a541 1
               new WitPrPt (theRtCand, thePrBrPt);
a828 1
   bool        isActive;
d833 2
a834 7
      if (myPrCoord_->mySelector ()->lpprMode ())
         {
         isActive =
            myPrCoord_->
               mySelector ()->
                  myRtAnalyzer ()->
                     fundActForLPPR (theRtCand, myPer_);
d836 2
a837 1
         if (isActive)
d839 1
a839 9
         }
      else
         {
         thePrPt = myPrCoord_->myPrPtFor (theRtCand, myPer_);

         if (thePrPt != NULL)
            if (thePrPt->active ())
               nActive ++;
         }
d934 4
a937 1
WitPrPt::WitPrPt (WitRtCand * theRtCand, WitPrBrPt * thePrBrPt):
d943 2
d949 1
a949 1
   select (myPrBrPt_->myPrCoord ()->activeCand ());
d973 6
a978 1
   select (myPrBrPt_->myPrCoord ()->inactiveCand ());
d980 1
a980 6
   if (myPrBrPt_->myPrCoord ()->mySelector ()->lpprMode ())
      myPrBrPt_->
         myPrCoord ()->
            mySelector ()->
               myRtAnalyzer ()->
                  fundDeactivateForLPPR (myRtCand_, myPrBrPt_->myPer ());
d998 1
a998 1
   return myPrBrPt_->myPrCoord ()->myPrSelMgr (theRtCase);
d1016 1
a1016 1
   if (myPrBrPt_->myPrCoord ()->myGlobalComp ()->selSplit ())
d1019 1
a1019 1
   if (myPrBrPt_->myPrCoord ()->myGlobalComp ()->nonMrSelSplit ())
d1045 1
a1045 1
   witAssert (theSelCand == myPrBrPt_->myPrCoord ()->activeCand ());
d1049 1
a1049 1
   select (myPrBrPt_->myPrCoord ()->activeCand ());
d1064 1
a1064 1
      select (myPrBrPt_->myPrCoord ()->  activeCand ());
d1066 1
a1066 1
      select (myPrBrPt_->myPrCoord ()->inactiveCand ());
d1086 16
@


1.57
log
@Low-Pri Prop-Rt.
@
text
@d801 1
d806 7
a812 2
      {
      thePrPt = myPrCoord_->myPrPtFor (theRtCand, myPer_);
d814 1
a814 2
      if (thePrPt != NULL)
         if (thePrPt->active ())
d816 9
a824 1
      }
@


1.56
log
@Low-Pri Prop-Rt.
@
text
@a55 2

   myMsgFac () ("propRoutingMsg");
d110 10
d183 2
d271 18
a348 12
bool WitPrCoord::lowPriMode ()
   {
   if (myGlobalComp ()->lowPriPropRt ())
      if (myGlobalComp ()->multiRoute ())
         if (myGlobalComp ()->penExec ())
            return true;

   return false;
   }

//------------------------------------------------------------------------------

a891 4
      if (myPrCoord_->lowPriMode ())
         if (not allowedForLowPri (theRtCand))
            continue;

a902 13

bool WitPrBrPt::allowedForLowPri (WitRtCand * theRtCand)
   {
   witAssert (myPrCoord_->lowPriMode ());

   return
      myPrCoord_->
         mySelector ()->
            myRtAnalyzer ()->
               allowedForLPPR (theRtCand, myPer_);
   }

//------------------------------------------------------------------------------
d941 7
d1028 10
@


1.55
log
@Low-Pri Prop-Rt.
@
text
@d164 1
d337 1
a337 1
   if (not myRtMgr_->mySelector ()->selSplit ())
d610 1
a610 1
      WitSelMgr  (thePrCoord->myRtMgr ()->mySelector ()),
d898 3
a900 4
         myRtMgr ()->
            mySelector ()->
               myRtAnalyzer ()->
                  allowedForLPPR (theRtCand, myPer_);
@


1.54
log
@Low-Pri Prop-Rt.
@
text
@a32 1
#include <RtSitePtr.h>
d37 1
d95 1
a95 1
      WitRtSitePtr        theRtSite, 
d112 1
a112 1
bool WitPrMgr::selIsSplit (WitRtSitePtr theRtSite, WitPeriod thePer)
d120 1
a120 1
      WitRtSitePtr        theRtSite, 
d126 6
a131 1
   myPrCoord_->defineSplit (theRtSite, thePer, expVol, theExpPairs, unbddVol);
d137 3
a139 3
      WitRtSitePtr theRtSite,
      WitPeriod    thePer,
      double       incFlowVol)
@


1.53
log
@Low-Pri Prop-Rt.
@
text
@d95 1
a95 1
      WitRtSitePtr        theRtSitePtr, 
d100 1
a100 1
   myPrCoord_->definePropExp (theRtSitePtr (), thePer, expVol, theExpPairs);
d112 1
a112 1
bool WitPrMgr::selIsSplit (WitRtSitePtr theRtSitePtr, WitPeriod thePer)
d114 1
a114 1
   return myPrCoord_->selIsSplit (theRtSitePtr (), thePer);
d120 1
a120 1
      WitRtSitePtr        theRtSitePtr, 
d126 1
a126 2
   myPrCoord_->
      defineSplit (theRtSitePtr (), thePer, expVol, theExpPairs, unbddVol);
d132 1
a132 1
      WitRtSitePtr theRtSitePtr,
d136 1
a136 1
   myPrCoord_->recordFlowSS (theRtSitePtr (), thePer, incFlowVol);
@


1.52
log
@Low-pri prop-rt.
@
text
@d812 2
a813 2
   myRtSite_->printID          (19);
   myRtSite_->printPer (myPer_, 19);
d823 1
a823 1
      theRtCand->printID (22);
d962 1
a962 1
   myRtCand_->printID (22);
@


1.51
log
@Low-pri prop-rt.
@
text
@d316 1
a316 1
bool WitPrCoord::allowedByPe (WitRtCand * theRtCand, WitPeriod thePer)
d318 4
a321 1
   bool allowed;
d323 1
a323 10
   allowed = true;

   if (myGlobalComp ()->penExec ())
      if (myGlobalComp ()->lowPriPropRt ())
         allowed =
            myRtMgr_->mySelector ()->myRtAnalyzer ()->allowedForPr (
               theRtCand,
               thePer);

   return allowed;
d871 3
a873 2
      if (not myPrCoord_->allowedByPe (theRtCand, myPer_))
         continue;
d886 14
@


1.50
log
@Continued implmentation of low priority proportionate routing.
@
text
@d316 1
a316 1
bool WitPrCoord::excludedByPe (WitRtCand * theRtCand, WitPeriod thePer)
d318 1
a318 1
   bool excluded;
d320 1
a320 1
   excluded = false;
d324 2
a325 2
         excluded =
            myRtMgr_->mySelector ()->myRtAnalyzer ()->excludedForPr (
d329 1
a329 1
   return excluded;
d877 1
a877 1
      if (myPrCoord_->excludedByPe (theRtCand, myPer_))
@


1.49
log
@Continued implementation of pen-exec override of prop-rt.
@
text
@d316 1
a316 1
bool WitPrCoord::prohibitedByPe (WitRtCand * theRtCand, WitPeriod thePer)
d318 1
a318 1
   bool prohibited;
d320 1
a320 1
   prohibited = false;
d323 3
a325 3
      if (myGlobalComp ()->penExecOverPropRt ())
         prohibited =
            myRtMgr_->mySelector ()->myRtAnalyzer ()->prohibitedForPr (
d329 1
a329 1
   return prohibited;
d877 1
a877 1
      if (myPrCoord_->prohibitedByPe (theRtCand, myPer_))
@


1.48
log
@Continued implementation of PIP.
@
text
@d37 1
d316 18
d877 3
@


1.47
log
@Corrected a file inclusion AIX porting bug.
@
text
@d844 1
a844 1
   thePrPts.revCopyInto (splitPrPts_);
@


1.46
log
@Continued implementation of post-implosion pegging.
@
text
@d43 1
@


1.45
log
@Changed the routingShare attributes from scalars to vectors.
@
text
@a42 1
#include <PtrSchedI.h>
@


1.44
log
@Attempt to fix syntax errors from GCC compiler.
@
text
@d219 1
a219 1
      definePropExp (theRtCands, expVol, theExpPairs);
d296 3
a298 1
double WitPrCoord::totRoutingShare (const WitRtCandStack & theRtCands)
d308 1
a308 1
      totShare += theRtCandItr->myBillEnt ()->routingShare ();
d369 5
a373 1
         definePropExp (thePrPt->activeRtCands (), splitVol, localExpPairs);
d488 1
d501 1
a501 1
   expVolPerShare = expVol / totRoutingShare (theRtCands);
d507 2
a508 1
      propExpVol = expVolPerShare * theRtCand->myBillEnt ()->routingShare ();
d806 1
a806 1
      myPrCoord_->totRoutingShare (theRtCands));
d814 1
a814 1
         theRtCand->myBillEnt ()->routingShare ());
@


1.43
log
@Continued implementation of proportionate routing.
@
text
@d33 1
a33 1
#include <RtSiteComp.h>
d94 1
a94 1
      WitRtSiteComp       theRtSiteComp, 
d99 1
a99 1
   myPrCoord_->definePropExp (theRtSiteComp, thePer, expVol, theExpPairs);
d111 1
a111 1
bool WitPrMgr::selIsSplit (WitRtSiteComp theRtSiteComp, WitPeriod thePer)
d113 1
a113 1
   return myPrCoord_->selIsSplit (theRtSiteComp, thePer);
d119 1
a119 1
      WitRtSiteComp       theRtSiteComp, 
d126 1
a126 1
      defineSplit (theRtSiteComp, thePer, expVol, theExpPairs, unbddVol);
d132 3
a134 3
      WitRtSiteComp theRtSiteComp,
      WitPeriod     thePer,
      double        incFlowVol)
d136 1
a136 1
   myPrCoord_->recordFlowSS (theRtSiteComp, thePer, incFlowVol);
@


1.42
log
@Continued implementation of proportionate routing.
@
text
@d296 1
a296 1
double WitPrCoord::totExpShare (const WitRtCandStack & theRtCands)
d306 1
a306 1
      totShare += theRtCandItr->myBillEnt ()->expShare ();
d494 1
a494 1
   expVolPerShare = expVol / totExpShare (theRtCands);
d500 1
a500 1
      propExpVol = expVolPerShare * theRtCand->myBillEnt ()->expShare ();
d798 1
a798 1
      myPrCoord_->totExpShare (theRtCands));
d805 2
a806 2
         "      Exp Share:     %.0f\n\n",
         theRtCand->myBillEnt ()->expShare ());
@


1.41
log
@Continued implementation of proportionate routing.
@
text
@d296 17
d485 1
a485 1
   double                  totActShare;
d490 2
d494 1
a494 8
   totActShare = 0.0;

   theRtCandItr.attachTo (theRtCands);

   while (theRtCandItr.advance ())
      totActShare += theRtCandItr->myBillEnt ()->expShare ();

   witAssert (totActShare > 0.9);
d500 1
a500 2
      propExpVol =
         expVol * (theRtCand->myBillEnt ()->expShare () / totActShare);
d780 3
a782 4
   FILE *            theMsgFile;
   WitRtCandDblStack theExpPairs (myPrCoord_->myProblem ());
   WitRtCand *       theRtCand;
   double            sharePercent;
d791 2
a792 2
   myRtSite_->printID          (14);
   myRtSite_->printPer (myPer_, 14);
d794 5
a798 1
   myPrCoord_->definePropExp (myRtSite_, myPer_, 100.0, theExpPairs);
d800 1
a800 1
   while (theExpPairs.pop (theRtCand, sharePercent))
d802 1
a802 1
      theRtCand->printID (23);
d804 3
a806 1
      fprintf (theMsgFile,"      Norm Exp Share: %.0f%%\n\n", sharePercent);
@


1.40
log
@Continued implementation of proportionate routing.
@
text
@a168 1
   setUpPrBrPts ();
d203 3
a205 3
   WitRtCand * theRtCand;
   WitPrPt *   thePrPt;
   double      propExpVol;
d211 1
a211 1
   if (theRtSite->myRtCands ().nElements () == 1)
d213 1
a213 1
      theRtCand = theRtSite->myRtCands ().first ();
d215 1
a215 1
      witAssert (theRtCand->isEligible (thePer));
d217 1
a217 1
      theExpPairs.push (theRtCand, expVol);
d219 1
a219 1
      return;
d221 3
d225 1
a225 3
   forEachEl (theRtCand, theRtSite->myRtCands ())
      {
      thePrPt = myPrPtFor (theRtCand, thePer);
d227 1
a227 4
      if (thePrPt != NULL)
         if (thePrPt->active ())
            {
            propExpVol = expVol * thePrPt->normExpShare ();
d229 1
a229 2
            theExpPairs.push (theRtCand, propExpVol);
            }
a230 4

   theExpPairs.reverse ();

   witAssert (theExpPairs.isNonEmpty ());
d328 3
a330 1

d349 6
a354 1
         addExpPairs (thePrPt, splitVol, theExpPairs);
d463 30
a492 5
void WitPrCoord::setUpPrBrPts ()
   {
   WitRtSite * theRtSite;
   WitPrBrPt * thePrBrPt;
   WitPeriod   thePer;
d494 1
a494 5
   forEachEl (theRtSite, myRtMgr_->myRtSites ())
      if (hasPrBrPtsFor (theRtSite))
         forEachPeriod (thePer, myProblem ())
            {
            thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);
d496 1
a496 3
            if (thePrBrPt != NULL)
               thePrBrPt->update ();
            }
a555 49
void WitPrCoord::addExpPairs (
      WitPrPt *           thePrPt,
      double              splitVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitPrBrPt *       thePrBrPt;
   WitPrPtStack      origActPrPts  (myProblem ());
   WitRtCandDblStack localExpPairs (myProblem ());
   WitRtCand *       theRtCand;
   double            propExpVol;

   thePrBrPt = thePrPt->myPrBrPt ();

   thePrBrPt->findActivePrPts (origActPrPts);

   setActive (origActPrPts,            false);
   setActive (thePrPt->activePrPts (), true);

   definePropExp (
      thePrBrPt->myRtSite (),
      thePrBrPt->myPer (),
      splitVol,
      localExpPairs);

   setActive (thePrPt->activePrPts (), false);
   setActive (origActPrPts,            true);

   while (localExpPairs.pop (theRtCand, propExpVol))
      theExpPairs.push (theRtCand, propExpVol);
   }

//------------------------------------------------------------------------------

void WitPrCoord::setActive (const WitPrPtStack & thePrPts, bool theBool)
   {
   WitObjStItr <WitPrPt> thePrPtItr;

   thePrPtItr.attachTo (thePrPts);

   while (thePrPtItr.advance ())
      {
      witAssert (thePrPtItr->active () != theBool);

      thePrPtItr->setActive (theBool);
      }
   }

//------------------------------------------------------------------------------

d728 4
a731 6
      myRtSite_     (theRtSite),
      myPer_        (thePer),
      myPrCoord_    (thePrCoord),
      totInclShare_ (0.0),
      singleton_    (false),
      splitPrPts_   (thePrCoord->myProblem ())
d743 1
a743 1
void WitPrBrPt::update ()
d749 1
a749 2
   nActive       = 0;
   totInclShare_ = 0.0;
a756 1
            {
d758 1
d760 1
a760 3
            totInclShare_ += theRtCand->myBillEnt ()->expShare ();
            }
      }
d762 1
a762 1
   singleton_ = (nActive == 1);
d769 4
a772 3
   FILE *      theMsgFile;
   WitRtCand * theRtCand;
   WitPrPt *   thePrPt;
d784 1
a784 4
   if (singleton_)
      fprintf (theMsgFile, "   Routing is Singleton\n\n");
   else
      fprintf (theMsgFile, "\n");
d786 1
a786 1
   forEachEl (theRtCand, myRtSite_->myRtCands ())
d788 1
a788 1
      thePrPt = myPrCoord_->myPrPtFor (theRtCand, myPer_);
d790 1
a790 2
      if (thePrPt != NULL)
         thePrPt->print ();
d811 2
a812 2
   WitPrPt *    othPrPt;
   WitPrPtStack thePrPts (myPrCoord_->myProblem ());
d825 1
a825 1
void WitPrBrPt::findActivePrPts (WitPrPtStack & thePrPts)
d830 1
a830 1
   thePrPts.clear ();
d838 1
a838 1
            thePrPts.push (thePrPt);
d841 1
a841 1
   thePrPts.reverse ();
d850 1
a850 1
      WitSelPt     (),
d852 3
a854 3
      myRtCand_    (theRtCand),
      myPrBrPt_    (thePrBrPt),
      activePrPts_ (theRtCand->myProblem ())
d882 1
a882 1
   setActive (false);
d951 1
a951 12
   setActive (true);
   }

//------------------------------------------------------------------------------

double WitPrPt::normExpShare ()
   {
   witAssert (active ());

   return
        myRtCand_->myBillEnt ()->expShare () 
      / myPrBrPt_->totInclShare ();
a962 26
void WitPrPt::setActive (bool theValue)
   {
   if (theValue)
      select (myPrBrPt_->myPrCoord ()->activeCand ());
   else
      select (myPrBrPt_->myPrCoord ()->inactiveCand ());

   myPrBrPt_->update ();
   }

//------------------------------------------------------------------------------

void WitPrPt::print ()
   {
   if (! active ())
      return;

   myRtCand_->printID (23);

   fprintf (myPrBrPt_->myPrCoord ()->msgFile (),
      "      Norm Exp Share: %.0f%%\n\n",
      normExpShare () * 100.0);
   }

//------------------------------------------------------------------------------

d965 1
a965 14
   WitRtCand * theRtCand;
   WitPrPt *   thePrPt;

   witAssert (activePrPts_.isEmpty ());

   forEachEl (theRtCand, myRtCand_->myRtSite ()->myRtCands ())
      {
      thePrPt =
         myPrBrPt_->myPrCoord ()->myPrPtFor (theRtCand, myPrBrPt_->myPer ());

      if (thePrPt != NULL)
         if (thePrPt->active ())
            activePrPts_.push (thePrPt);
      }
d976 1
a976 1
   activePrPts_.clear ();
@


1.39
log
@Continued implementation of proportionate routing.
@
text
@d968 1
a968 1
void WitPrPt::getSortData (WitPart * &, WitPeriod &)
d970 3
a972 1
   stronglyAssert (false);
d977 1
a977 1
WitPeriod WitPrPt::myPeriod ()
d979 1
a979 3
   stronglyAssert (false);

   return -1;
d984 1
a984 1
void WitPrPt::tempAlterSel ()
d986 1
a986 2
   stronglyAssert (false);
   }
d988 1
a988 1
//------------------------------------------------------------------------------
d990 1
a990 3
void WitPrPt::restoreSel (WitSelCand *)
   {
   stronglyAssert (false);
@


1.38
log
@Continued implementation of proportionate routing.
@
text
@d119 1
a119 1
      WitRtSiteComp       theRtSiteComp,
d122 1
a122 1
      WitRtCandDblStack & theSplitPairs,
d126 1
a126 12
      defineSplit (theRtSiteComp, thePer, expVol, theSplitPairs, unbddVol);
   }

//------------------------------------------------------------------------------

void WitPrMgr::defineSplitPropExp (
      WitRtCand *         theRtCand,
      WitPeriod           thePer,
      double              splitVol,
      WitRtCandDblStack & theExpPairs)
   {
   myPrCoord_->defineSplitPropExp (theRtCand, thePer, splitVol, theExpPairs);
d329 1
a329 1
      WitRtCandDblStack & theSplitPairs,
a337 2
   witAssert (expVol >= NET_TOL);

d340 1
d342 1
a342 1
   theSplitPairs.clear ();
d355 1
a355 1
         theSplitPairs.push (thePrPt->myRtCand (), splitVol);
d363 1
a363 29
   theSplitPairs.reverse ();
   }

//------------------------------------------------------------------------------

void WitPrCoord::defineSplitPropExp (
      WitRtCand *         theRtCand,
      WitPeriod           thePer,
      double              splitVol,
      WitRtCandDblStack & theExpPairs)
   {
   WitPrPt *    thePrPt;
   WitPrPtStack origActPrPts (myProblem ());

   thePrPt = myPrPtFor (theRtCand, thePer);

   witAssert (thePrPt != NULL);

   witAssert (thePrPt->isSplit ());

   thePrPt->myPrBrPt ()->findActivePrPts (origActPrPts);

   setActive (origActPrPts,            false);
   setActive (thePrPt->activePrPts (), true);

   definePropExp (theRtCand->myRtSite (), thePer, splitVol, theExpPairs);

   setActive (thePrPt->activePrPts (), false);
   setActive (origActPrPts,            true);
d538 33
d879 2
@


1.37
log
@Continued implementation of proportionate routing.
@
text
@d119 1
a119 1
      WitRtSiteComp       theRtSiteComp, 
d122 1
a122 1
      WitRtCandDblStack & theExpPairs,
d126 12
a137 1
      defineSplit (theRtSiteComp, thePer, expVol, theExpPairs, unbddVol);
d170 1
a170 2
      myRtMgr_           (theSelector->myRtMgr ()),
      splitExpVol_       ()
a180 3

   if (myGlobalComp ()->selSplit ())
      splitExpVol_.allocate (myProblem (), 0.0);
d340 1
a340 1
      WitRtCandDblStack & theExpPairs,
d343 7
a349 2
   WitPrBrPt *     thePrBrPt;
   WitPrPtDblStack theSplitPairs (myProblem ());
d353 5
d360 8
a367 1
   findSplitPairs (thePrBrPt, expVol, theSplitPairs, unbddVol);
d369 2
a370 1
   compSplitExpVols (thePrBrPt, theSplitPairs);
d372 32
a403 1
   findExpPairs (theRtSite, theExpPairs);
d424 2
a425 1
         thePrPt->recordFlowSS (incFlowVol);
a522 34
void WitPrCoord::findSplitPairs (
      WitPrBrPt *       thePrBrPt,
      double            expVol,
      WitPrPtDblStack & theSplitPairs,
      double &          unbddVol)
   {
   WitObjStItr <WitPrPt> theItr;
   WitPrPt *             thePrPt;
   double                splitVol;

   witAssert (expVol >= NET_TOL);

   theSplitPairs.clear ();

   unbddVol = expVol;

   theItr.attachTo (thePrBrPt->splitPrPts ());

   while (theItr.advance (thePrPt))
      {
      findSplitVols (thePrPt, unbddVol, splitVol, unbddVol);

      if (splitVol >= NET_TOL)
         theSplitPairs.push (thePrPt, splitVol);

      if (unbddVol < NET_TOL)
         break;
      }

   theSplitPairs.reverse ();
   }

//------------------------------------------------------------------------------

d545 2
a577 36
void WitPrCoord::compSplitExpVols (
      WitPrBrPt *       thePrBrPt,
      WitPrPtDblStack & theSplitPairs)
   {
   WitPrPtStack      origActPrPts (myProblem ());
   WitPrPt *         thePrPt;
   double            splitVol;
   WitRtCandDblStack theExpPairs  (myProblem ());
   WitRtCand *       theRtCand;
   double            propExpVol;

   thePrBrPt->findActivePrPts (origActPrPts);

   setActive (origActPrPts, false);

   while (theSplitPairs.pop (thePrPt, splitVol))
      {
      setActive (thePrPt->activePrPts (), true);

      definePropExp (
         thePrBrPt->myRtSite (),
         thePrBrPt->myPer (),
         splitVol,
         theExpPairs);

      while (theExpPairs.pop (theRtCand, propExpVol))
         splitExpVol_ (theRtCand) += propExpVol;

      setActive (thePrPt->activePrPts (), false);
      }

   setActive (origActPrPts, true);
   }

//------------------------------------------------------------------------------

a593 21
void WitPrCoord::findExpPairs (
      WitRtSite *         theRtSite,
      WitRtCandDblStack & theExpPairs)
   {
   WitRtCand * theRtCand;

   theExpPairs.clear ();

   forEachEl (theRtCand, theRtSite->myRtCands ())
      if (splitExpVol_ (theRtCand) > 0.0)
         {
         theExpPairs.push (theRtCand, splitExpVol_ (theRtCand));

         splitExpVol_ (theRtCand) = 0.0;
         }

   theExpPairs.reverse ();
   }

//------------------------------------------------------------------------------

a804 3
   witAssert (nActive       > 0);
   witAssert (totInclShare_ > 0.0);

d926 1
a926 3
   select (myPrBrPt_->myPrCoord ()->inactiveCand ());

   myPrBrPt_->update ();
d1027 2
d1060 2
a1061 1
         activePrPts_.push (thePrPt);
@


1.36
log
@Continued implementation of proportionate routing.
@
text
@d33 1
a36 1
#include <Part.h>
d94 1
a94 1
      WitRtSite *         theRtSite, 
d99 1
a99 1
   myPrCoord_->definePropExp (theRtSite, thePer, expVol, theExpPairs);
d111 1
a111 1
bool WitPrMgr::selIsSplit (WitRtSite * theRtSite, WitPeriod thePer)
d113 1
a113 1
   return myPrCoord_->selIsSplit (theRtSite, thePer);
d119 1
a119 1
      WitRtSite *         theRtSite, 
d125 2
a126 1
   myPrCoord_->defineSplit (theRtSite, thePer, expVol, theExpPairs, unbddVol);
d132 3
a134 3
      WitRtSite * theRtSite,
      WitPeriod   thePer,
      double      incFlowVol)
d136 1
a136 1
   myPrCoord_->recordFlowSS (theRtSite, thePer, incFlowVol);
@


1.35
log
@Continued implementation of proportionate routing.
@
text
@d35 1
d93 5
a97 1
bool WitPrMgr::active (WitRtCand * theRtCand, WitPeriod thePer)
d99 1
a99 1
   return myPrCoord_->active (theRtCand, thePer);
d104 1
a104 1
bool WitPrMgr::active (WitBillEntry * theBillEnt, WitPeriod thePer)
d106 1
a106 1
   return myPrCoord_->active (theBillEnt->myRtCand (), thePer);
d111 1
a111 1
double WitPrMgr::normExpShare (WitBillEntry * theBillEnt, WitPeriod thePer)
d113 1
a113 1
   return myPrCoord_->normExpShare (theBillEnt->myRtCand (), thePer);
d118 1
a118 1
void WitPrMgr::definePropExp (
d122 12
a133 1
      WitRtCandDblStack & theExpPairs)
d135 1
a135 1
   myPrCoord_->definePropExp (theRtSite, thePer, expVol, theExpPairs);
d158 2
a159 1
      myRtMgr_           (theSelector->myRtMgr ())
d170 3
d201 5
a205 1
bool WitPrCoord::active (WitRtCand * theRtCand, WitPeriod thePer)
d207 5
a211 1
   WitPrPt * thePrPt;
d213 1
a213 1
   witAssert (theRtCand->myRtSite ()->propRouting ());
d215 3
a217 1
   thePrPt = myPrPtFor (theRtCand, thePer);
d219 1
a219 2
   if (thePrPt != NULL)
      return thePrPt->active ();
d221 1
a221 3
   if (theRtCand->myRtSite ()->myRtCands ().nElements () == 1)
      if (theRtCand->isEligible (thePer))
         return true;
d223 2
a224 2
   return false;
   }
d226 3
a228 1
//------------------------------------------------------------------------------
d230 4
a233 3
double WitPrCoord::normExpShare (WitRtCand * theRtCand, WitPeriod thePer) 
   {
   WitPrPt * thePrPt;
d235 3
a237 1
   witAssert (active (theRtCand, thePer));
d239 1
a239 1
   thePrPt = myPrPtFor (theRtCand, thePer);
d241 1
a241 4
   return
      (thePrPt != NULL)?
         thePrPt->normExpShare ():
         1.0;
d246 1
a246 5
void WitPrCoord::definePropExp (
      WitRtSite *         theRtSite, 
      WitPeriod           thePer,
      double              expVol,
      WitRtCandDblStack & theExpPairs)
d248 1
a248 2
   WitRtCand * theRtCand;
   double      propExpVol;
d250 1
a250 1
   witAssert (theRtSite->propRouting ());
d252 1
a252 1
   theExpPairs.clear ();
d254 2
a255 4
   forEachEl (theRtCand, theRtSite->myRtCands ())
      if (active (theRtCand, thePer))
         {
         propExpVol = expVol * normExpShare (theRtCand, thePer);
d257 3
a259 2
         theExpPairs.push (theRtCand, propExpVol);
         }
d261 1
a261 1
   theExpPairs.reverse ();
d307 66
d465 160
d775 4
a778 1
   stronglyAssert (false);
d801 2
a802 1
      singleton_    (false)
d875 48
d928 1
a928 1
      WitSelPt  (),
d930 3
a932 2
      myRtCand_ (theRtCand),
      myPrBrPt_ (thePrBrPt)
d985 1
a985 1
void WitPrPt::prtID ()        
d987 5
a991 1
   stronglyAssert (false);
d998 6
d1057 10
d1077 30
@


1.34
log
@Continued implementation of proportionate routing.
@
text
@d113 11
d213 26
@


1.33
log
@Continued implementation of proportionate routing.
@
text
@d113 1
a113 1
WitSelMgr * WitPrMgr::mySelMgrForProd ()
d115 1
a115 8
   return myPrCoord_->myPrSelMgrForProd ();
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrMgr::mySelMgrForCons ()
   {
   return myPrCoord_->myPrSelMgrForCons ();
d247 1
a247 3
#if 0

bool WitPrCoord::selIsSplit (WitRtSite * theRtSite, WitPeriod thePer)
d249 2
a250 2
   WitRtCand * theRtCand;
   WitPrPt *   thePtPt;
d252 1
a252 13
   if (not myRtMgr_->mySelector ()->selSplit ())
      return false;

   forEachEl (theRtCand, theRtSite->myRtCands ())
      {
      thePtPt = myPrPtFor (theRtCand, thePer);

      if (thePtPt != NULL)
         if (thePtPt->isSplit ())
            return true;
      }

   return false;
a254 2
#endif

d257 1
a257 1
WitPrPt * WitPrCoord::myPrPtFor (WitRtCand * theRtCand, WitPeriod thePer)
d259 4
a262 4
   if (myPrPts_.myPtrTVecAt (theRtCand).isAllocated ())
      return myPrPts_.myPtrAt (theRtCand, thePer);

   return NULL;
d637 5
a641 4
   if (myRtCand_->myRtSite ()->forProd ())
      return myPrBrPt_->myPrCoord ()->myPrSelMgrForProd ();
   else
      return myPrBrPt_->myPrCoord ()->myPrSelMgrForCons ();
@


1.32
log
@Continued implementation of proportionate routing.
@
text
@d40 1
d254 26
d388 1
a388 1
   return false;
a676 2
   stronglyAssert (false);

@


1.31
log
@Continued implementation of proportionate routing.
@
text
@a90 21
bool WitPrMgr::propRouting (WitRtSite * theRtSite, WitPeriod thePer)
   {
   return myPrCoord_->propRouting (theRtSite, thePer);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::propRouting (WitPart * thePart, WitPeriod expPer)
   {
   return myPrCoord_->propRouting (thePart->myRtSite (), expPer);
   }

//------------------------------------------------------------------------------

bool WitPrMgr::propRouting (WitBomEntry * theBomEnt, WitPeriod execPer)
   {
   return myPrCoord_->propRouting (theBomEnt->myRtSite (), execPer);
   }

//------------------------------------------------------------------------------

d180 2
d184 8
a191 4
   return
      (thePrPt != NULL)?
         thePrPt->active ():
         false;
d200 2
d204 4
a207 3
   witAssert (thePrPt != NULL);

   return thePrPt->normExpShare ();
a248 11
   }

//------------------------------------------------------------------------------

bool WitPrCoord::propRouting (WitRtSite * theRtSite, WitPeriod thePer)
   {
   if (hasPrBrPtsFor (theRtSite))
      if (myPrBrPts_.myPtrAt (theRtSite, thePer) != NULL)
         return true;

   return false;
@


1.30
log
@Continued implementation of proportionate routing.
@
text
@a15 3
//    PrSecMgr.
//    PprMgr.
//    CprMgr.
d17 3
d27 1
a27 1
#include <PrSecMgr.h>
d98 1
a98 1
bool WitPrMgr::active (WitRtCand * theRtCand, WitPeriod thePer)
d100 1
a100 1
   return myPrCoord_->active (theRtCand, thePer);
d105 1
a105 1
WitPprMgr * WitPrMgr::myPprMgr ()
d107 1
a107 1
   return myPrCoord_->myPprMgr ();
d112 1
a112 1
WitCprMgr * WitPrMgr::myCprMgr ()
d114 1
a114 62
   return myPrCoord_->myCprMgr ();
   }

//------------------------------------------------------------------------------
// Implementation of class PrSecMgr.
//------------------------------------------------------------------------------

WitPrSecMgr::WitPrSecMgr (WitPrCoord * thePrCoord):

      WitSelMgr  (thePrCoord->myRtMgr ()->mySelector ()),
      myPrCoord_ (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitPrSecMgr::~WitPrSecMgr ()
   {
   }

//------------------------------------------------------------------------------

bool WitPrSecMgr::selSplitNeeded ()
   {
   return false;
   }

//------------------------------------------------------------------------------
// Implementation of class PprMgr.
//------------------------------------------------------------------------------

WitPprMgr::WitPprMgr (WitPrCoord * thePrCoord):

      WitPrSecMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitPprMgr::~WitPprMgr ()
   {
   }

//------------------------------------------------------------------------------

bool WitPprMgr::propRouting (WitPart * thePart, WitPeriod expPer)
   {
   return myPrCoord ()->propRouting (thePart->myRtSite (), expPer);
   }

//------------------------------------------------------------------------------

bool WitPprMgr::active (WitBopEntry * theBopEnt, WitPeriod expPer)
   {
   return myPrCoord ()->active (theBopEnt->myRtCand (), expPer);
   }

//------------------------------------------------------------------------------

double WitPprMgr::normExpShare (WitBopEntry * theBopEnt, WitPeriod expPer)
   {
   return myPrCoord ()->normExpShare (theBopEnt->myRtCand (), expPer);
d119 1
a119 78
WitSelPt * WitPprMgr::mySelPtForAlt (
      WitBopEntry * theBopEnt,
      WitConsEntry *,
      WitPeriod     execPer,
      WitPeriod)
   {
   WitPeriod expPer;

   expPer = theBopEnt->impactPeriod ()[execPer];

   return myPrCoord ()->mySelPtForAlt (theBopEnt->myRtCand (), expPer);
   }

//------------------------------------------------------------------------------

bool WitPprMgr::validForNetting ()
   {
   return true;
   }

//------------------------------------------------------------------------------

bool WitPprMgr::validForExecBounds ()
   {
   return true;
   }

//------------------------------------------------------------------------------

const char * WitPprMgr::selCaseName ()
   {
   return "Production Proportionate Routing";
   }

//------------------------------------------------------------------------------
// Implementation of class CprMgr.
//------------------------------------------------------------------------------

WitCprMgr::WitCprMgr (WitPrCoord * thePrCoord):

      WitPrSecMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitCprMgr::~WitCprMgr ()
   {
   }

//------------------------------------------------------------------------------

bool WitCprMgr::propRouting (WitBomEntry * theBomEnt, WitPeriod execPer)
   {
   return myPrCoord ()->propRouting (theBomEnt->myRtSite (), execPer);
   }

//------------------------------------------------------------------------------

bool WitCprMgr::active (WitConsEntry * theConsEnt, WitPeriod execPer)
   {
   return myPrCoord ()->active (theConsEnt->myRtCand (), execPer);
   }

//------------------------------------------------------------------------------

double WitCprMgr::normExpShare (WitConsEntry * theConsEnt, WitPeriod execPer)
   {
   return myPrCoord ()->normExpShare (theConsEnt->myRtCand (), execPer);
   }

//------------------------------------------------------------------------------

WitSelPt * WitCprMgr::mySelPtForAlt (
      WitBopEntry *,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      WitPeriod)
d121 1
a121 1
   return myPrCoord ()->mySelPtForAlt (theConsEnt->myRtCand (), execPer);
d126 1
a126 1
bool WitCprMgr::validForNetting ()
d128 1
a128 1
   return false;
d133 1
a133 1
bool WitCprMgr::validForExecBounds ()
d135 1
a135 1
   return false;
d140 1
a140 1
const char * WitCprMgr::selCaseName ()
d142 1
a142 1
   return "Consumption Proportionate Routing";
d151 8
a158 8
      WitProbAssoc  (theSelector->myProblem ()),
      myPprMgr_     (NULL),
      myCprMgr_     (NULL),
      activeCand_   (NULL),
      inactiveCand_ (NULL),
      myPrBrPts_    (),
      myPrPts_      (),
      myRtMgr_      (theSelector->myRtMgr ())
d160 2
a161 2
   myPprMgr_     = new WitPprMgr (this);
   myCprMgr_     = new WitCprMgr (this);
d163 2
a164 2
   activeCand_   = new WitPrCand (true,  myProblem ());
   inactiveCand_ = new WitPrCand (false, myProblem ());
d191 2
a192 2
   delete myCprMgr_;
   delete myPprMgr_;
d364 124
d657 1
a657 1
      return myPrBrPt_->myPrCoord ()->myPprMgr ();
d659 1
a659 1
      return myPrBrPt_->myPrCoord ()->myCprMgr ();
@


1.29
log
@Continued implementation of propotionate routing.
@
text
@a15 1
//    PrCoord.
d19 1
d91 1
a91 4
void WitPrMgr::findExpRtCands (
      WitRtSite *      theRtSite,
      WitPeriod        thePer,
      WitRtCandStack & theRtCands)
d93 2
a94 1
   WitRtCand * theRtCand;
d96 1
a96 1
   witAssert (myPrCoord_->propRouting (theRtSite, thePer));
d98 3
a100 6
   theRtCands.clear ();

   forEachEl (theRtCand, theRtSite->myRtCands ())
      if (theRtCand->isEligible (thePer))
         if (myPrCoord_->active (theRtCand, thePer))
            theRtCands.push (theRtCand);
d118 166
d341 4
a344 3
   witAssert (thePrPt != NULL);

   return thePrPt->active ();
a498 166
   }

//------------------------------------------------------------------------------
// Implementation of class PrSecMgr.
//------------------------------------------------------------------------------

WitPrSecMgr::WitPrSecMgr (WitPrCoord * thePrCoord):

      WitSelMgr  (thePrCoord->myRtMgr ()->mySelector ()),
      myPrCoord_ (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitPrSecMgr::~WitPrSecMgr ()
   {
   }

//------------------------------------------------------------------------------

bool WitPrSecMgr::selSplitNeeded ()
   {
   return false;
   }

//------------------------------------------------------------------------------
// Implementation of class PprMgr.
//------------------------------------------------------------------------------

WitPprMgr::WitPprMgr (WitPrCoord * thePrCoord):

      WitPrSecMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitPprMgr::~WitPprMgr ()
   {
   }

//------------------------------------------------------------------------------

bool WitPprMgr::propRouting (WitPart * thePart, WitPeriod expPer)
   {
   return myPrCoord ()->propRouting (thePart->myRtSite (), expPer);
   }

//------------------------------------------------------------------------------

bool WitPprMgr::active (WitBopEntry * theBopEnt, WitPeriod expPer)
   {
   return myPrCoord ()->active (theBopEnt->myRtCand (), expPer);
   }

//------------------------------------------------------------------------------

double WitPprMgr::normExpShare (WitBopEntry * theBopEnt, WitPeriod expPer)
   {
   return myPrCoord ()->normExpShare (theBopEnt->myRtCand (), expPer);
   }

//------------------------------------------------------------------------------

WitSelPt * WitPprMgr::mySelPtForAlt (
      WitBopEntry * theBopEnt,
      WitConsEntry *,
      WitPeriod     execPer,
      WitPeriod)
   {
   WitPeriod expPer;

   expPer = theBopEnt->impactPeriod ()[execPer];

   return myPrCoord ()->mySelPtForAlt (theBopEnt->myRtCand (), expPer);
   }

//------------------------------------------------------------------------------

bool WitPprMgr::validForNetting ()
   {
   return true;
   }

//------------------------------------------------------------------------------

bool WitPprMgr::validForExecBounds ()
   {
   return true;
   }

//------------------------------------------------------------------------------

const char * WitPprMgr::selCaseName ()
   {
   return "Production Proportionate Routing";
   }

//------------------------------------------------------------------------------
// Implementation of class CprMgr.
//------------------------------------------------------------------------------

WitCprMgr::WitCprMgr (WitPrCoord * thePrCoord):

      WitPrSecMgr (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitCprMgr::~WitCprMgr ()
   {
   }

//------------------------------------------------------------------------------

bool WitCprMgr::propRouting (WitBomEntry * theBomEnt, WitPeriod execPer)
   {
   return myPrCoord ()->propRouting (theBomEnt->myRtSite (), execPer);
   }

//------------------------------------------------------------------------------

bool WitCprMgr::active (WitConsEntry * theConsEnt, WitPeriod execPer)
   {
   return myPrCoord ()->active (theConsEnt->myRtCand (), execPer);
   }

//------------------------------------------------------------------------------

double WitCprMgr::normExpShare (WitConsEntry * theConsEnt, WitPeriod execPer)
   {
   return myPrCoord ()->normExpShare (theConsEnt->myRtCand (), execPer);
   }

//------------------------------------------------------------------------------

WitSelPt * WitCprMgr::mySelPtForAlt (
      WitBopEntry *,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      WitPeriod)
   {
   return myPrCoord ()->mySelPtForAlt (theConsEnt->myRtCand (), execPer);
   }

//------------------------------------------------------------------------------

bool WitCprMgr::validForNetting ()
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitCprMgr::validForExecBounds ()
   {
   return false;
   }

//------------------------------------------------------------------------------

const char * WitCprMgr::selCaseName ()
   {
   return "Consumption Proportionate Routing";
@


1.28
log
@Continued implementation of proportionate routing.
@
text
@d17 3
a19 3
//    PrSelMgr.
//    PprSelMgr.
//    CprSelMgr.
d27 1
a27 1
#include <PrSelMgr.h>
d110 1
a110 1
WitPprSelMgr * WitPrMgr::myPprSelMgr ()
d112 1
a112 1
   return myPrCoord_->myPprSelMgr ();
d117 1
a117 1
WitCprSelMgr * WitPrMgr::myCprSelMgr ()
d119 1
a119 1
   return myPrCoord_->myCprSelMgr ();
d129 2
a130 2
      myPprSelMgr_  (NULL),
      myCprSelMgr_  (NULL),
d137 2
a138 2
   myPprSelMgr_  = new WitPprSelMgr (this);
   myCprSelMgr_  = new WitCprSelMgr (this);
d168 2
a169 2
   delete myCprSelMgr_;
   delete myPprSelMgr_;
d340 1
a340 1
// Implementation of class PrSelMgr.
d343 1
a343 1
WitPrSelMgr::WitPrSelMgr (WitPrCoord * thePrCoord):
d352 1
a352 1
WitPrSelMgr::~WitPrSelMgr ()
d358 1
a358 1
bool WitPrSelMgr::selSplitNeeded ()
d364 1
a364 1
// Implementation of class PprSelMgr.
d367 1
a367 1
WitPprSelMgr::WitPprSelMgr (WitPrCoord * thePrCoord):
d369 1
a369 1
      WitPrSelMgr (thePrCoord)
d375 1
a375 1
WitPprSelMgr::~WitPprSelMgr ()
d381 1
a381 1
bool WitPprSelMgr::propRouting (WitPart * thePart, WitPeriod expPer)
d388 1
a388 1
bool WitPprSelMgr::active (WitBopEntry * theBopEnt, WitPeriod expPer)
d395 1
a395 1
double WitPprSelMgr::normExpShare (WitBopEntry * theBopEnt, WitPeriod expPer)
d402 1
a402 1
WitSelPt * WitPprSelMgr::mySelPtForAlt (
d417 1
a417 1
bool WitPprSelMgr::validForNetting ()
d424 1
a424 1
bool WitPprSelMgr::validForExecBounds ()
d431 1
a431 1
const char * WitPprSelMgr::selCaseName ()
d437 1
a437 1
// Implementation of class CprSelMgr.
d440 1
a440 1
WitCprSelMgr::WitCprSelMgr (WitPrCoord * thePrCoord):
d442 1
a442 1
      WitPrSelMgr (thePrCoord)
d448 1
a448 1
WitCprSelMgr::~WitCprSelMgr ()
d454 1
a454 1
bool WitCprSelMgr::propRouting (WitBomEntry * theBomEnt, WitPeriod execPer)
d461 1
a461 1
bool WitCprSelMgr::active (WitConsEntry * theConsEnt, WitPeriod execPer)
d468 1
a468 1
double WitCprSelMgr::normExpShare (WitConsEntry * theConsEnt, WitPeriod execPer)
d475 1
a475 1
WitSelPt * WitCprSelMgr::mySelPtForAlt (
d486 1
a486 1
bool WitCprSelMgr::validForNetting ()
d493 1
a493 1
bool WitCprSelMgr::validForExecBounds ()
d500 1
a500 1
const char * WitCprSelMgr::selCaseName ()
d675 1
a675 1
      return myPrBrPt_->myPrCoord ()->myPprSelMgr ();
d677 1
a677 1
      return myPrBrPt_->myPrCoord ()->myCprSelMgr ();
@


1.27
log
@Continued implementation of proportionate routing.
@
text
@d91 19
@


1.26
log
@Continued implementation of proportionate routing.
@
text
@d585 2
a586 1
   myRtSite_->printIDPer (myPer_, 14);
@


1.25
log
@Continued implementation of proportionate routing.
@
text
@d18 2
d91 1
a91 1
bool WitPrMgr::propRouting (WitRtSite * theRtSite, WitPeriod thePer)
d93 1
a93 1
   return myPrCoord_->propRouting (theRtSite, thePer);
d98 1
a98 1
bool WitPrMgr::active (WitRtCand * theRtCand, WitPeriod thePer)
d100 1
a100 34
   WitPrPt * thePrPt;

   thePrPt = myPrCoord_->myPrPtFor (theRtCand, thePer);

   witAssert (thePrPt != NULL);

   return thePrPt->active ();
   }

//------------------------------------------------------------------------------

double WitPrMgr::normExpShare (WitRtCand * theRtCand, WitPeriod thePer) 
   {
   WitPrPt * thePrPt;

   thePrPt = myPrCoord_->myPrPtFor (theRtCand, thePer);

   witAssert (thePrPt != NULL);

   return thePrPt->normExpShare ();
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrMgr::mySelMgrForProd ()
   {
   return myPrCoord_->mySelMgrForProd ();
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrMgr::mySelMgrForCons ()
   {
   return myPrCoord_->mySelMgrForCons ();
d109 8
a116 8
      WitProbAssoc     (theSelector->myProblem ()),
      mySelMgrForProd_ (NULL),
      mySelMgrForCons_ (NULL),
      activeCand_      (NULL),
      inactiveCand_    (NULL),
      myPrBrPts_       (),
      myPrPts_         (),
      myRtMgr_         (theSelector->myRtMgr ())
d118 2
a119 2
   mySelMgrForProd_ = new WitPrSelMgr (true,  theSelector, this);
   mySelMgrForCons_ = new WitPrSelMgr (false, theSelector, this);
d121 2
a122 2
   activeCand_      = new WitPrCand (true,  myProblem ());
   inactiveCand_    = new WitPrCand (false, myProblem ());
d149 44
a192 2
   delete mySelMgrForCons_;
   delete mySelMgrForProd_;
d324 1
a324 4
WitPrSelMgr::WitPrSelMgr (
         bool          prodCaseVal,
         WitSelector * theSelector,
         WitPrCoord *  thePrCoord):
d326 1
a326 2
      WitSelMgr  (theSelector),
      prodCase_  (prodCaseVal),
d339 48
a386 4
WitSelPt * WitPrSelMgr::mySelPtForAlt (
      WitBopEntry *  theBopEnt,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
d389 37
a425 3
   WitRtCand * theRtCand;
   WitPeriod   thePer;
   WitPrPt *   thePrPt;
d427 1
a427 3
   if (prodCase_)
      {
      theRtCand = theBopEnt->myRtCand ();
d429 3
a431 5
      thePer    = theBopEnt->impactPeriod ()[execPer];
      }
   else
      {
      theRtCand = theConsEnt->myRtCand ();
d433 1
a433 2
      thePer    = execPer;
      }
d435 4
a438 1
   thePrPt = myPrCoord_->myPrPtFor (theRtCand, thePer);
d440 1
a440 4
   if (thePrPt != NULL)
      if (thePrPt->active ())
         if (not thePrPt->myPrBrPt ()->singleton ())
            return thePrPt;
d442 3
a444 1
   return NULL;
d449 1
a449 1
bool WitPrSelMgr::validForNetting ()
d451 1
a451 1
   return prodCase_;
d456 5
a460 1
bool WitPrSelMgr::validForExecBounds ()
d462 1
a462 1
   return prodCase_;
d467 1
a467 1
const char * WitPrSelMgr::selCaseName ()
d469 1
a469 4
   return
      prodCase_?
         "Production Proportionate Routing":
         "Consumption Proportionate Routing";
d474 1
a474 1
bool WitPrSelMgr::selSplitNeeded ()
d480 7
d585 1
a585 6
   myRtSite_->printID (14);

   fprintf (theMsgFile,
      "   %-9s %d\n",
      myRtSite_->perCaseID (),
      myPer_);
d654 4
a657 4
   return
      myRtCand_->prodCase ()?
         myPrBrPt_->myPrCoord ()->mySelMgrForProd ():
         myPrBrPt_->myPrCoord ()->mySelMgrForCons ();
@


1.24
log
@Continued implementation of proportionate routing.
@
text
@d91 1
a91 6
   if (theRtSite != NULL)
      if (theRtSite->propRouting ())
         if (myPrCoord_->myPrBrPts ().myPtrAt (theRtSite, thePer) != NULL)
            return true;

   return false;
a99 3
   if (theRtCand == NULL)
      return false;

d174 1
a174 1
      if (myPrBrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d197 1
a197 1
      if (theRtSite->propRouting ())
d211 11
d224 2
a225 3
   if (theRtCand != NULL)
      if (myPrPts_.myPtrTVecAt (theRtCand).isAllocated ())
         return myPrPts_.myPtrAt (theRtCand, thePer);
d237 1
a237 1
   myRtMgr_->allocate1D (myPrBrPts_);
d240 4
a243 3
      if (theRtSite->propRouting ())
         {
         myPrBrPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());
d245 5
a249 5
         forEachPeriod (thePer, myProblem ())
            if (theRtSite->explodeable (thePer))
               myPrBrPts_.myPtrAt (theRtSite, thePer) =
                  new WitPrBrPt   (theRtSite, thePer, this);
         }
d261 1
a261 1
   myRtMgr_->allocate1D (myPrPts_);
d267 1
a267 1
      if (not theRtSite->propRouting ())
d292 1
a292 1
      if (theRtSite->propRouting ())
d300 7
@


1.23
log
@Continued implementation of proportionate routing.
@
text
@d33 3
d64 1
a64 1
bool WitPrMgr::instNeededFor (WitRtMgr * theRtMgr)
d66 6
a71 1
   WitRtSite * theRtSite;
d73 2
a74 2
   forEachEl (theRtSite, theRtMgr->myRtSites ())
      if (theRtSite->propRouting ())
d474 1
d478 3
a480 1
   fprintf (myPrCoord_->msgFile (),
d485 6
a490 1
   myRtSite_->prtPrBrPtID (myPer_);
d493 1
a493 1
      fprintf (myPrCoord_->msgFile (), "   Routing is Singleton\n\n");
d495 1
a495 1
      fprintf (myPrCoord_->msgFile (), "\n");
d636 1
a636 1
   myRtCand_->prtPrPtID ();
@


1.22
log
@Continued implementation of proportionate routing.
@
text
@d63 1
a63 1
   WitRtSiteItr theRtSiteItr;
d65 2
a66 4
   theRtSiteItr.attachTo (theRtMgr->myRtSites ());

   while (theRtSiteItr.advance ())
      if (theRtSiteItr->propRouting ())
d164 3
a166 7
   WitRtCandItr theRtCandItr;
   WitRtCand *  theRtCand;
   WitRtSiteItr theRtSiteItr;
   WitRtSite *  theRtSite;
   WitPeriod    thePer;

   theRtCandItr.attachTo (myRtMgr_->myRtCands ());
d168 1
a168 1
   while (theRtCandItr.advance (theRtCand))
d173 1
a173 3
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());

   while (theRtSiteItr.advance (theRtSite))
d188 3
a190 4
   WitRtSiteItr theRtSiteItr;
   WitRtSite *  theRtSite;
   WitPeriod    thePer;
   WitPrBrPt *  thePrBrPt;
d196 1
a196 3
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());

   while (theRtSiteItr.advance (theRtSite))
d224 2
a225 3
   WitRtSiteItr theRtSiteItr;
   WitRtSite *  theRtSite;
   WitPeriod    thePer;
d229 1
a229 3
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());

   while (theRtSiteItr.advance (theRtSite))
d245 4
a248 5
   WitRtCandItr theRtCandItr;
   WitRtCand *  theRtCand;
   WitRtSite *  theRtSite;
   WitPeriod    thePer;
   WitPrBrPt *  thePrBrPt;
d252 1
a252 3
   theRtCandItr.attachTo (myRtMgr_->myRtCands ());

   while (theRtCandItr.advance (theRtCand))
d276 3
a278 4
   WitRtSiteItr theRtSiteItr;
   WitRtSite *  theRtSite;
   WitPrBrPt *  thePrBrPt;
   WitPeriod    thePer;
d280 1
a280 3
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());

   while (theRtSiteItr.advance (theRtSite))
d436 3
a438 3
   WitRtCandItr theRtCandItr;
   WitPrPt *    thePrPt;
   int          nActive;
d443 1
a443 3
   theRtCandItr.attachTo (myRtSite_->myRtCands ());

   while (theRtCandItr.advance ())
d445 1
a445 1
      thePrPt = myPrCoord_->myPrPtFor (theRtCandItr (), myPer_);
d452 1
a452 1
            totInclShare_ += theRtCandItr->myBillEnt ()->expShare ();
d466 2
a467 2
   WitRtCandItr theRtCandItr;
   WitPrPt *    thePrPt;
d481 1
a481 3
   theRtCandItr.attachTo (myRtSite_->myRtCands ());

   while (theRtCandItr.advance ())
d483 1
a483 1
      thePrPt = myPrCoord_->myPrPtFor (theRtCandItr (), myPer_);
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d17 1
a17 2
//    ProdPrSelMgr.
//    ConsPrSelMgr.
d83 41
d151 2
a152 2
   mySelMgrForProd_ = new WitProdPrSelMgr (theSelector, this);
   mySelMgrForCons_ = new WitConsPrSelMgr (theSelector, this);
a221 16
WitSelPt * WitPrCoord::mySelPtForAlt (WitRtCand * theRtCand, WitPeriod thePer)
   {
   WitPrPt * thePrPt;

   thePrPt = myPrPtFor (theRtCand, thePer);

   if (thePrPt != NULL)
      if (thePrPt->active ())
         if (not thePrPt->myPrBrPt ()->singleton ())
            return thePrPt;

   return NULL;
   }

//------------------------------------------------------------------------------

d312 1
a312 1
// Implementation of class ProdPrSelMgr.
d315 2
a316 1
WitProdPrSelMgr::WitProdPrSelMgr (
d321 1
d328 1
a328 1
WitProdPrSelMgr::~WitProdPrSelMgr ()
d334 4
a337 4
WitSelPt * WitProdPrSelMgr::mySelPtForAlt (
      WitBopEntry * theBopEnt,
      WitConsEntry *,
      WitPeriod     execPer,
d341 2
a342 1
   WitPeriod   expPer;
d344 3
a346 1
   theRtCand = theBopEnt->myRtCand ();
d348 5
a352 1
   expPer    = theBopEnt->impactPeriod ()[execPer];
d354 2
a355 2
   return myPrCoord_->mySelPtForAlt (theRtCand, expPer);
   }
d357 1
a357 1
//------------------------------------------------------------------------------
d359 4
a362 4
bool WitProdPrSelMgr::validForNetting ()
   {
   return true;
   }
d364 1
a364 5
//------------------------------------------------------------------------------

bool WitProdPrSelMgr::validForExecBounds ()
   {
   return true;
d369 1
a369 1
const char * WitProdPrSelMgr::selCaseName ()
d371 1
a371 1
   return "Production Proportionate Routing";
d376 1
a376 1
bool WitProdPrSelMgr::selSplitNeeded ()
d378 1
a378 49
   return false;
   }

//------------------------------------------------------------------------------
// Implementation of class ConsPrSelMgr.
//------------------------------------------------------------------------------

WitConsPrSelMgr::WitConsPrSelMgr (
         WitSelector * theSelector,
         WitPrCoord *  thePrCoord):

      WitSelMgr  (theSelector),
      myPrCoord_ (thePrCoord)
   {
   }

//------------------------------------------------------------------------------

WitConsPrSelMgr::~WitConsPrSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitSelPt * WitConsPrSelMgr::mySelPtForAlt (
      WitBopEntry *,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      WitPeriod)
   {
   WitRtCand * theRtCand;

   theRtCand = theConsEnt->myRtCand ();

   return myPrCoord_->mySelPtForAlt (theRtCand, execPer);
   }

//------------------------------------------------------------------------------

bool WitConsPrSelMgr::validForNetting ()
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitConsPrSelMgr::validForExecBounds ()
   {
   return false;
d383 1
a383 1
const char * WitConsPrSelMgr::selCaseName ()
d385 4
a388 1
   return "Consumption Proportionate Routing";
d393 1
a393 1
bool WitConsPrSelMgr::selSplitNeeded ()
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@d16 1
a18 1
//    PrCoord.
d25 1
a26 1
#include <PrCoord.h>
a43 1
      WitProbAssoc     (theSelector->myProblem ()),
d45 2
a46 3
      mySelMgrForProd_ (NULL),
      mySelMgrForCons_ (NULL),
      myPrCoord_       (NULL)
d48 1
a48 4
   mySelMgrForProd_ = new WitProdPrSelMgr (theSelector, this);
   mySelMgrForCons_ = new WitConsPrSelMgr (theSelector, this);

   myPrCoord_      = new WitPrCoord      (theSelector->myRtMgr (), this);
a57 2
   delete mySelMgrForCons_;
   delete mySelMgrForProd_;
d84 1
a84 1
WitSelPt * WitPrMgr::mySelPtForAlt (WitRtCand * theRtCand, WitPeriod thePer)
d86 1
a86 10
   WitPrPt * thePrPt;

   thePrPt = myPrCoord_->myPrPtFor (theRtCand, thePer);

   if (thePrPt != NULL)
      if (thePrPt->active ())
         if (not thePrPt->myPrBrPt ()->singleton ())
            return thePrPt;

   return NULL;
a89 2
// Implementation of class ProdPrSelMgr.
//------------------------------------------------------------------------------
d91 1
a91 6
WitProdPrSelMgr::WitProdPrSelMgr (
         WitSelector * theSelector,
         WitPrMgr *    thePrMgr):

      WitSelMgr (theSelector),
      myPrMgr_  (thePrMgr)
d93 1
d97 1
a97 5

WitProdPrSelMgr::~WitProdPrSelMgr ()
   {
   }

d100 1
a100 8
WitSelPt * WitProdPrSelMgr::mySelPtForAlt (
      WitBopEntry * theBopEnt,
      WitConsEntry *,
      WitPeriod     execPer,
      WitPeriod)
   {
   WitRtCand * theRtCand;
   WitPeriod   expPer;
d102 8
a109 10
   theRtCand = theBopEnt->myRtCand ();

   expPer    = theBopEnt->impactPeriod ()[execPer];

   return myPrMgr_->mySelPtForAlt (theRtCand, expPer);
   }

//------------------------------------------------------------------------------

bool WitProdPrSelMgr::validForNetting ()
d111 2
a112 36
   return true;
   }

//------------------------------------------------------------------------------

bool WitProdPrSelMgr::validForExecBounds ()
   {
   return true;
   }

//------------------------------------------------------------------------------

const char * WitProdPrSelMgr::selCaseName ()
   {
   return "Production Proportionate Routing";
   }

//------------------------------------------------------------------------------

bool WitProdPrSelMgr::selSplitNeeded ()
   {
   return false;
   }

//------------------------------------------------------------------------------
// Implementation of class ConsPrSelMgr.
//------------------------------------------------------------------------------

WitConsPrSelMgr::WitConsPrSelMgr (
         WitSelector * theSelector,
         WitPrMgr *    thePrMgr):

      WitSelMgr (theSelector),
      myPrMgr_  (thePrMgr)
   {
   }
d114 2
a115 64
//------------------------------------------------------------------------------

WitConsPrSelMgr::~WitConsPrSelMgr ()
   {
   }

//------------------------------------------------------------------------------

WitSelPt * WitConsPrSelMgr::mySelPtForAlt (
      WitBopEntry *,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      WitPeriod)
   {
   WitRtCand * theRtCand;

   theRtCand = theConsEnt->myRtCand ();

   return myPrMgr_->mySelPtForAlt (theRtCand, execPer);
   }

//------------------------------------------------------------------------------

bool WitConsPrSelMgr::validForNetting ()
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitConsPrSelMgr::validForExecBounds ()
   {
   return false;
   }

//------------------------------------------------------------------------------

const char * WitConsPrSelMgr::selCaseName ()
   {
   return "Consumption Proportionate Routing";
   }

//------------------------------------------------------------------------------

bool WitConsPrSelMgr::selSplitNeeded ()
   {
   return false;
   }

//------------------------------------------------------------------------------
// Implementation of class PrCoord.
//------------------------------------------------------------------------------

WitPrCoord::WitPrCoord (WitRtMgr * theRtMgr, WitPrMgr * thePrMgr):
      WitProbAssoc  (theRtMgr->myProblem ()),
      activeCand_   (NULL),
      inactiveCand_ (NULL),
      myPrBrPts_    (),
      myPrPts_      (),
      myRtMgr_      (theRtMgr),
      myPrMgr_      (thePrMgr)
   {
   activeCand_   = new WitPrCand (true,  myProblem ());
   inactiveCand_ = new WitPrCand (false, myProblem ());
d148 2
d182 16
d288 127
d585 2
a586 2
         myPrBrPt_->myPrCoord ()->myPrMgr ()->mySelMgrForProd ():
         myPrBrPt_->myPrCoord ()->myPrMgr ()->mySelMgrForCons ();
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d12 10
d23 629
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@a11 10
//
// Contains the implementation of the following classes:
//
//    PrMgr.
//    ProdPrMgr.
//    ConsPrMgr.
//    PrCoord.
//    PrCand.
//    PrBrPt.
//    PrPt.
a12 696

#include <PrMgr.h>
#include <PrCoord.h>
#include <PrCand.h>
#include <PrBrPt.h>
#include <PrPt.h>
#include <OrMgr1.h>
#include <OrSite1.h>
#include <OrCand1.h>
#include <Selector.h>
#include <Part.h>
#include <Opn.h>
#include <BopEntry.h>
#include <BomEntry.h>
#include <Global.h>
#include <MsgFac.h>
#include <PtrSchedI.h>

//------------------------------------------------------------------------------
// Implementation of class PrMgr.
//------------------------------------------------------------------------------

void WitPrMgr::print ()
   {
   myPrCoord_->print ();
   }

//------------------------------------------------------------------------------

bool WitPrMgr::selSplitNeeded ()
   {
   return false;
   }

//------------------------------------------------------------------------------

WitPrMgr::WitPrMgr (WitOrMgr * theOrMgr, WitSelector * theSelector):
      WitSelMgr  (theSelector),

      myPrCoord_ (NULL)
   {
   if (not myGlobalComp ()->allowPR ())
      myMsgFac () ("propRoutingNYISmsg");

   myPrCoord_ = new WitPrCoord (theOrMgr, this);
   }

//------------------------------------------------------------------------------

WitPrMgr::~WitPrMgr ()
   {
   delete myPrCoord_;
   }

//------------------------------------------------------------------------------

WitSelPt * WitPrMgr::mySelPtForAltByPrPt (WitPrPt * thePrPt)
   {
   if (thePrPt != NULL)
      if (thePrPt->active ())
         if (not thePrPt->myPrBrPt ()->singleton ())
            return thePrPt;

   return NULL;
   }

//------------------------------------------------------------------------------
// Implementation of class ProdPrMgr.
//------------------------------------------------------------------------------

WitProdPrMgr::WitProdPrMgr (WitSelector * theSelector):
      WitPrMgr     (theSelector->myProdOrMgr (), theSelector),

      myProdOrMgr_ (theSelector->myProdOrMgr ())
   {
   myMsgFac () ("propRoutingMsg");
   }

//------------------------------------------------------------------------------

WitProdPrMgr::~WitProdPrMgr ()
   {
   }

//------------------------------------------------------------------------------

bool WitProdPrMgr::propRouting (WitPart * thePart, WitPeriod expPer)
   {
   WitOrSite * theOrSite;

   theOrSite = myProdOrMgr_->myOrSiteFor (thePart);

   return myPrCoord ()->propRouting (theOrSite, expPer);
   }

//------------------------------------------------------------------------------

bool WitProdPrMgr::active (WitBopEntry * theBopEnt, WitPeriod expPer)
   {
   WitPrPt * thePrPt;

   thePrPt = myPrPtFor (theBopEnt, expPer);

   witAssert (thePrPt != NULL);

   return thePrPt->active ();
   }

//------------------------------------------------------------------------------

double WitProdPrMgr::normExpShare (WitBopEntry * theBopEnt, WitPeriod expPer)
   {
   WitPrPt * thePrPt;

   thePrPt = myPrPtFor (theBopEnt, expPer);

   witAssert (thePrPt != NULL);

   return thePrPt->normExpShare ();
   }

//------------------------------------------------------------------------------

WitSelPt * WitProdPrMgr::mySelPtForAlt (
      WitBopEntry * theBopEnt,
      WitConsEntry *,
      WitPeriod     execPer,
      WitPeriod)
   {
   WitPeriod expPer;

   expPer = theBopEnt->impactPeriod ()[execPer];

   return mySelPtForAltByPrPt (myPrPtFor (theBopEnt, expPer));
   }

//------------------------------------------------------------------------------

bool WitProdPrMgr::validForNetting ()
   {
   return true;
   }

//------------------------------------------------------------------------------

bool WitProdPrMgr::validForExecBounds ()
   {
   return true;
   }

//------------------------------------------------------------------------------

const char * WitProdPrMgr::selCaseName ()
   {
   return "Production Proportionate Routing";
   }

//------------------------------------------------------------------------------

WitPrPt * WitProdPrMgr::myPrPtFor (WitBopEntry * theBopEnt, WitPeriod expPer)
   {
   WitOrCand * theOrCand;

   theOrCand = myProdOrMgr_->myOrCandFor (theBopEnt);

   return myPrCoord ()->myPrPtFor (theOrCand, expPer);
   }

//------------------------------------------------------------------------------
// Implementation of class ConsPrMgr.
//------------------------------------------------------------------------------

WitConsPrMgr::WitConsPrMgr (WitSelector * theSelector):
      WitPrMgr     (theSelector->myConsOrMgr (), theSelector),

      myConsOrMgr_ (theSelector->myConsOrMgr ())
   {
   }

//------------------------------------------------------------------------------

WitConsPrMgr::~WitConsPrMgr ()
   {
   }

//------------------------------------------------------------------------------

bool WitConsPrMgr::propRouting (WitBomEntry * theBomEnt, WitPeriod execPer)
   {
   WitOrSite * theOrSite;

   theOrSite = myConsOrMgr_->myOrSiteFor (theBomEnt);

   return myPrCoord ()->propRouting (theOrSite, execPer);
   }

//------------------------------------------------------------------------------

bool WitConsPrMgr::active (WitConsEntry * theConsEnt, WitPeriod execPer)
   {
   WitPrPt * thePrPt;

   thePrPt = myPrPtFor (theConsEnt, execPer);

   witAssert (thePrPt != NULL);

   return thePrPt->active ();
   }

//------------------------------------------------------------------------------

double WitConsPrMgr::normExpShare (WitConsEntry * theConsEnt, WitPeriod execPer)
   {
   WitPrPt * thePrPt;

   thePrPt = myPrPtFor (theConsEnt, execPer);

   witAssert (thePrPt != NULL);

   return thePrPt->normExpShare ();
   }

//------------------------------------------------------------------------------

WitSelPt * WitConsPrMgr::mySelPtForAlt (
      WitBopEntry *,
      WitConsEntry * theConsEnt,
      WitPeriod      execPer,
      WitPeriod)
   {
   return mySelPtForAltByPrPt (myPrPtFor (theConsEnt, execPer));
   }

//------------------------------------------------------------------------------

bool WitConsPrMgr::validForNetting ()
   {
   return false;
   }

//------------------------------------------------------------------------------

bool WitConsPrMgr::validForExecBounds ()
   {
   return false;
   }

//------------------------------------------------------------------------------

const char * WitConsPrMgr::selCaseName ()
   {
   return "Consumption Proportionate Routing";
   }

//------------------------------------------------------------------------------

WitPrPt * WitConsPrMgr::myPrPtFor (WitConsEntry * theConsEnt, WitPeriod execPer)
   {
   WitOrCand * theOrCand;

   theOrCand = myConsOrMgr_->myOrCandFor (theConsEnt);

   return myPrCoord ()->myPrPtFor (theOrCand, execPer);
   }

//------------------------------------------------------------------------------
// Implementation of class PrCoord.
//------------------------------------------------------------------------------

WitPrCoord::WitPrCoord (WitOrMgr * theOrMgr, WitPrMgr * thePrMgr):
      WitProbAssoc  (thePrMgr->myProblem ()),

        activeCand_ (NULL),
      inactiveCand_ (NULL),
      myPrBrPts_    (),
      myPrPts_      (),
      myOrMgr_      (theOrMgr),
      myPrMgr_      (thePrMgr)
   {
     activeCand_ = new WitPrCand (true,  myProblem ());
   inactiveCand_ = new WitPrCand (false, myProblem ());

   buildPrBrPts ();

   buildPrPts ();

   setUpPrBrPts ();
   }

//------------------------------------------------------------------------------

WitPrCoord::~WitPrCoord ()
   {
   WitOrCandItr theOrCandItr;
   WitOrCand *  theOrCand;
   WitPeriod    thePer;
   WitOrSiteItr theOrSiteItr;
   WitOrSite *  theOrSite;

   theOrCandItr.attachTo (myOrMgr_->myOrCands ());

   while (theOrCandItr.advance (theOrCand))
      if (myPrPts_.myPtrTVecAt (theOrCand).isAllocated ())
         forEachPeriod (thePer, myProblem ())
            delete myPrPts_.myPtrAt (theOrCand, thePer);

   theOrSiteItr.attachTo (myOrMgr_->myOrSites ());

   while (theOrSiteItr.advance (theOrSite))
      if (theOrSite->propRouting ())
         forEachPeriod (thePer, myProblem ())
            delete myPrBrPts_.myPtrAt (theOrSite, thePer);

   delete inactiveCand_;
   delete   activeCand_;
   }

//------------------------------------------------------------------------------

bool WitPrCoord::propRouting (WitOrSite * theOrSite, WitPeriod thePer)
   {
   if (theOrSite->propRouting ())
      if (myPrBrPts_.myPtrAt (theOrSite, thePer) != NULL)
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitPrCoord::print ()
   {
   WitOrSiteItr theOrSiteItr;
   WitOrSite *  theOrSite;
   WitPeriod    thePer;
   WitPrBrPt *  thePrBrPt;

   fprintf (msgFile (),
      "\n"
      "Proportionate Routing Status (%s Section):\n",
      myOrMgr_->sectionName ());

   theOrSiteItr.attachTo (myOrMgr_->myOrSites ());

   while (theOrSiteItr.advance (theOrSite))
      if (theOrSite->propRouting ())
         forEachPeriod (thePer, myProblem ())
            {
            thePrBrPt = myPrBrPts_.myPtrAt (theOrSite, thePer);

            if (thePrBrPt != NULL)
               thePrBrPt->print ();
            }

   fprintf (msgFile (), "\n");
   }

//------------------------------------------------------------------------------

WitPrPt * WitPrCoord::myPrPtFor (WitOrCand * theOrCand, WitPeriod thePer)
   {
   if (myPrPts_.myPtrTVecAt (theOrCand).isAllocated ())
      return myPrPts_.myPtrAt (theOrCand, thePer);
   else
      return NULL;
   }

//------------------------------------------------------------------------------

void WitPrCoord::buildPrBrPts ()
   {
   WitOrSiteItr theOrSiteItr;
   WitOrSite *  theOrSite;
   WitPeriod    thePer;

   myOrMgr_->allocate1D (myPrBrPts_);

   theOrSiteItr.attachTo (myOrMgr_->myOrSites ());

   while (theOrSiteItr.advance (theOrSite))
      if (theOrSite->propRouting ())
         {
         myPrBrPts_.myPtrTVecAt (theOrSite).allocate (myProblem ());

         forEachPeriod (thePer, myProblem ())
            if (theOrSite->explodeable (thePer))
               myPrBrPts_.myPtrAt (theOrSite, thePer) =
                  new WitPrBrPt   (theOrSite, thePer, this);
         }
   }

//------------------------------------------------------------------------------

void WitPrCoord::buildPrPts ()
   {
   WitOrCandItr theOrCandItr;
   WitOrCand *  theOrCand;
   WitOrSite *  theOrSite;
   WitPeriod    thePer;
   WitPrBrPt *  thePrBrPt;

   myOrMgr_->allocate1D (myPrPts_);

   theOrCandItr.attachTo (myOrMgr_->myOrCands ());

   while (theOrCandItr.advance (theOrCand))
      {
      theOrSite = theOrCand->myOrSite ();

      if (not theOrSite->propRouting ())
         continue;

      myPrPts_.myPtrTVecAt (theOrCand).allocate (myProblem ());

      forEachPeriod (thePer, myProblem ())
         if (theOrCand->isEligible (thePer))
            {
            thePrBrPt = myPrBrPts_.myPtrAt (theOrSite, thePer);

            myPrPts_.myPtrAt (theOrCand, thePer) =
               new WitPrPt (theOrCand, thePrBrPt);
            }
      }
   }

//------------------------------------------------------------------------------

void WitPrCoord::setUpPrBrPts ()
   {
   WitOrSiteItr theOrSiteItr;
   WitOrSite *  theOrSite;
   WitPrBrPt *  thePrBrPt;
   WitPeriod    thePer;

   theOrSiteItr.attachTo (myOrMgr_->myOrSites ());

   while (theOrSiteItr.advance (theOrSite))
      if (theOrSite->propRouting ())
         forEachPeriod (thePer, myProblem ())
            {
            thePrBrPt = myPrBrPts_.myPtrAt (theOrSite, thePer);

            if (thePrBrPt != NULL)
               thePrBrPt->update ();
            }
   }

//------------------------------------------------------------------------------
// Implementation of class PrCand.
//------------------------------------------------------------------------------

WitPrCand::WitPrCand (bool activeVal, WitProblem * theProblem):
      WitSelCand (theProblem),

      active_    (activeVal)
   {
   }

//------------------------------------------------------------------------------

WitPrCand::~WitPrCand ()
   {
   }

//------------------------------------------------------------------------------

void WitPrCand::prtID ()
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

WitPrCand * WitPrCand::myPrCand ()
   {
   return this;
   }

//------------------------------------------------------------------------------
// Implementation of class PrBrPt.
//------------------------------------------------------------------------------

WitPrBrPt::WitPrBrPt (
         WitOrSite *  theOrSite,
         WitPeriod    thePer,
         WitPrCoord * thePrCoord):

      myOrSite_     (theOrSite),
      myPer_        (thePer),
      myPrCoord_    (thePrCoord),
      totInclShare_ (0.0),
      singleton_    (false)
   {
   }

//------------------------------------------------------------------------------

WitPrBrPt::~WitPrBrPt ()
   {
   }

//------------------------------------------------------------------------------

void WitPrBrPt::update ()
   {
   WitOrCandItr theOrCandItr;
   WitPrPt *    thePrPt;
   int          nActive;

   nActive       = 0;
   totInclShare_ = 0.0;

   theOrCandItr.attachTo (myOrSite_->myOrCands ());

   while (theOrCandItr.advance ())
      {
      thePrPt = myPrCoord_->myPrPtFor (theOrCandItr (), myPer_);

      if (thePrPt != NULL)
         if (thePrPt->active ())
            {
            nActive ++;

            totInclShare_ += theOrCandItr->myBillEntry ()->expShare ();
            }
      }

   witAssert (nActive       > 0);
   witAssert (totInclShare_ > 0.0);

   singleton_ = (nActive == 1);
   }

//------------------------------------------------------------------------------

void WitPrBrPt::print ()
   {
   WitOrCandItr theOrCandItr;
   WitPrPt *    thePrPt;

   fprintf (myPrCoord_->msgFile (),
      "\n"
      "Proportionate Routing Branch Point:\n"
      "\n");

   myOrSite_->prtPrBrPtID (myPer_);

   if (singleton_)
      fprintf (myPrCoord_->msgFile (), "   Routing is Singleton\n\n");
   else
      fprintf (myPrCoord_->msgFile (), "\n");

   theOrCandItr.attachTo (myOrSite_->myOrCands ());

   while (theOrCandItr.advance ())
      {
      thePrPt = myPrCoord_->myPrPtFor (theOrCandItr (), myPer_);

      if (thePrPt != NULL)
         thePrPt->print ();
      }
   }

//------------------------------------------------------------------------------
// Implementation of class PrPt.
//------------------------------------------------------------------------------

WitPrPt::WitPrPt (WitOrCand * theOrCand, WitPrBrPt * thePrBrPt):

      WitSelPt  (),
         
      myOrCand_ (theOrCand),
      myPrBrPt_ (thePrBrPt)
   {
   witAssert (myOrCand_->myOrSite () == myPrBrPt_->myOrSite ());

   select (myPrBrPt_->myPrCoord ()->activeCand ());
   }

//------------------------------------------------------------------------------

WitPrPt::~WitPrPt ()
   {
   }

//------------------------------------------------------------------------------

bool WitPrPt::hasResAlt ()
   {
   return active ();
   }

//------------------------------------------------------------------------------

void WitPrPt::alterSelection ()
   {
   witAssert (active ());

   witAssert (not myPrBrPt_->singleton ());

   select (myPrBrPt_->myPrCoord ()->inactiveCand ());

   myPrBrPt_->update ();
   }

//------------------------------------------------------------------------------

void WitPrPt::printSelection ()
   {
   myPrBrPt_->print ();
   }

//------------------------------------------------------------------------------

WitSelMgr * WitPrPt::mySelMgr ()
   {
   return myPrBrPt_->myPrCoord ()->myPrMgr ();
   }

//------------------------------------------------------------------------------

void WitPrPt::prtID ()        
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

bool WitPrPt::splittable ()
   {
   stronglyAssert (false);

   return false;
   }

//------------------------------------------------------------------------------

void WitPrPt::getSortData (WitPart * &, WitPeriod &)
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

WitPeriod WitPrPt::myPeriod ()
   {
   stronglyAssert (false);

   return -1;
   }

//------------------------------------------------------------------------------

void WitPrPt::tempAlterSel ()
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

void WitPrPt::restoreSel (WitSelCand *)
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

double WitPrPt::normExpShare ()
   {
   witAssert (active ());

   return
        myOrCand_->myBillEntry ()->expShare () 
      / myPrBrPt_->totInclShare ();
   }

//------------------------------------------------------------------------------

bool WitPrPt::active ()
   {
   return selSelCand ()->myPrCand ()->active ();
   }

//------------------------------------------------------------------------------

void WitPrPt::print ()
   {
   if (! active ())
      return;

   myOrCand_->prtPrPtID ();

   fprintf (myPrBrPt_->myPrCoord ()->msgFile (),
      "      Norm Exp Share: %.0f%%\n\n",
      normExpShare () * 100.0);
   }
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@d29 3
a31 3
#include <RtMgr.h>
#include <RtSite.h>
#include <RtCand.h>
d59 1
a59 1
WitPrMgr::WitPrMgr (WitRtMgr * theRtMgr, WitSelector * theSelector):
d67 1
a67 1
   myPrCoord_ = new WitPrCoord (theRtMgr, this);
d94 1
a94 1
      WitPrMgr     (theSelector->myProdRtMgr (), theSelector),
d96 1
a96 1
      myProdRtMgr_ (theSelector->myProdRtMgr ())
d111 1
a111 1
   WitRtSite * theRtSite;
d113 1
a113 1
   theRtSite = myProdRtMgr_->myRtSiteFor (thePart);
d115 1
a115 1
   return myPrCoord ()->propRouting (theRtSite, expPer);
d184 1
a184 1
   WitRtCand * theRtCand;
d186 1
a186 1
   theRtCand = myProdRtMgr_->myRtCandFor (theBopEnt);
d188 1
a188 1
   return myPrCoord ()->myPrPtFor (theRtCand, expPer);
d196 1
a196 1
      WitPrMgr     (theSelector->myConsRtMgr (), theSelector),
d198 1
a198 1
      myConsRtMgr_ (theSelector->myConsRtMgr ())
d212 1
a212 1
   WitRtSite * theRtSite;
d214 1
a214 1
   theRtSite = myConsRtMgr_->myRtSiteFor (theBomEnt);
d216 1
a216 1
   return myPrCoord ()->propRouting (theRtSite, execPer);
d281 1
a281 1
   WitRtCand * theRtCand;
d283 1
a283 1
   theRtCand = myConsRtMgr_->myRtCandFor (theConsEnt);
d285 1
a285 1
   return myPrCoord ()->myPrPtFor (theRtCand, execPer);
d292 1
a292 1
WitPrCoord::WitPrCoord (WitRtMgr * theRtMgr, WitPrMgr * thePrMgr):
d299 1
a299 1
      myRtMgr_      (theRtMgr),
d316 2
a317 2
   WitRtCandItr theRtCandItr;
   WitRtCand *  theRtCand;
d319 2
a320 2
   WitRtSiteItr theRtSiteItr;
   WitRtSite *  theRtSite;
d322 1
a322 1
   theRtCandItr.attachTo (myRtMgr_->myRtCands ());
d324 2
a325 2
   while (theRtCandItr.advance (theRtCand))
      if (myPrPts_.myPtrTVecAt (theRtCand).isAllocated ())
d327 1
a327 1
            delete myPrPts_.myPtrAt (theRtCand, thePer);
d329 1
a329 1
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());
d331 2
a332 2
   while (theRtSiteItr.advance (theRtSite))
      if (theRtSite->propRouting ())
d334 1
a334 1
            delete myPrBrPts_.myPtrAt (theRtSite, thePer);
d342 1
a342 1
bool WitPrCoord::propRouting (WitRtSite * theRtSite, WitPeriod thePer)
d344 2
a345 2
   if (theRtSite->propRouting ())
      if (myPrBrPts_.myPtrAt (theRtSite, thePer) != NULL)
d355 2
a356 2
   WitRtSiteItr theRtSiteItr;
   WitRtSite *  theRtSite;
d363 1
a363 1
      myRtMgr_->sectionName ());
d365 1
a365 1
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());
d367 2
a368 2
   while (theRtSiteItr.advance (theRtSite))
      if (theRtSite->propRouting ())
d371 1
a371 1
            thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);
d382 1
a382 1
WitPrPt * WitPrCoord::myPrPtFor (WitRtCand * theRtCand, WitPeriod thePer)
d384 2
a385 2
   if (myPrPts_.myPtrTVecAt (theRtCand).isAllocated ())
      return myPrPts_.myPtrAt (theRtCand, thePer);
d394 2
a395 2
   WitRtSiteItr theRtSiteItr;
   WitRtSite *  theRtSite;
d398 1
a398 1
   myRtMgr_->allocate1D (myPrBrPts_);
d400 1
a400 1
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());
d402 2
a403 2
   while (theRtSiteItr.advance (theRtSite))
      if (theRtSite->propRouting ())
d405 1
a405 1
         myPrBrPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());
d408 3
a410 3
            if (theRtSite->explodeable (thePer))
               myPrBrPts_.myPtrAt (theRtSite, thePer) =
                  new WitPrBrPt   (theRtSite, thePer, this);
d418 3
a420 3
   WitRtCandItr theRtCandItr;
   WitRtCand *  theRtCand;
   WitRtSite *  theRtSite;
d424 1
a424 1
   myRtMgr_->allocate1D (myPrPts_);
d426 1
a426 1
   theRtCandItr.attachTo (myRtMgr_->myRtCands ());
d428 1
a428 1
   while (theRtCandItr.advance (theRtCand))
d430 1
a430 1
      theRtSite = theRtCand->myRtSite ();
d432 1
a432 1
      if (not theRtSite->propRouting ())
d435 1
a435 1
      myPrPts_.myPtrTVecAt (theRtCand).allocate (myProblem ());
d438 1
a438 1
         if (theRtCand->isEligible (thePer))
d440 1
a440 1
            thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);
d442 2
a443 2
            myPrPts_.myPtrAt (theRtCand, thePer) =
               new WitPrPt (theRtCand, thePrBrPt);
d452 2
a453 2
   WitRtSiteItr theRtSiteItr;
   WitRtSite *  theRtSite;
d457 1
a457 1
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());
d459 2
a460 2
   while (theRtSiteItr.advance (theRtSite))
      if (theRtSite->propRouting ())
d463 1
a463 1
            thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);
d506 1
a506 1
         WitRtSite *  theRtSite,
d510 1
a510 1
      myRtSite_     (theRtSite),
d528 3
a530 3
   WitRtCandItr  theRtCandItr;
   WitPrPt *     thePrPt;
   int           nActive;
d535 1
a535 1
   theRtCandItr.attachTo (myRtSite_->myRtCands ());
d537 1
a537 1
   while (theRtCandItr.advance ())
d539 1
a539 1
      thePrPt = myPrCoord_->myPrPtFor (theRtCandItr (), myPer_);
d546 1
a546 1
            totInclShare_ += theRtCandItr->myBillEntry ()->expShare ();
d560 1
a560 1
   WitRtCandItr theRtCandItr;
d568 1
a568 1
   myRtSite_->prtPrBrPtID (myPer_);
d575 1
a575 1
   theRtCandItr.attachTo (myRtSite_->myRtCands ());
d577 1
a577 1
   while (theRtCandItr.advance ())
d579 1
a579 1
      thePrPt = myPrCoord_->myPrPtFor (theRtCandItr (), myPer_);
d590 1
a590 1
WitPrPt::WitPrPt (WitRtCand * theRtCand, WitPrBrPt * thePrBrPt):
d594 1
a594 1
      myRtCand_ (theRtCand),
d597 1
a597 1
   witAssert (myRtCand_->myRtSite () == myPrBrPt_->myRtSite ());
d695 1
a695 1
        myRtCand_->myBillEntry ()->expShare () 
d713 1
a713 1
   myRtCand_->prtPrPtID ();
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@d82 1
a82 1
      if (thePrPt->included ())
d120 1
a120 1
bool WitProdPrMgr::included (WitBopEntry * theBopEnt, WitPeriod expPer)
d128 1
a128 1
   return thePrPt->included ();
d221 1
a221 1
bool WitConsPrMgr::included (WitConsEntry * theConsEnt, WitPeriod execPer)
d229 1
a229 1
   return thePrPt->included ();
d295 2
a296 2
      includedCand_ (NULL),
      excludedCand_ (NULL),
d302 2
a303 2
   includedCand_ = new WitPrCand (true,  myProblem ());
   excludedCand_ = new WitPrCand (false, myProblem ());
d336 2
a337 2
   delete excludedCand_;
   delete includedCand_;
d474 1
a474 1
WitPrCand::WitPrCand (bool includedVal, WitProblem * theProblem):
d477 1
a477 1
      included_  (includedVal)
d530 1
a530 1
   int           nIncluded;
d532 1
a532 1
   nIncluded     = 0;
d542 1
a542 1
         if (thePrPt->included ())
d544 1
a544 1
            nIncluded ++;
d550 1
a550 1
   witAssert (nIncluded     > 0);
d553 1
a553 1
   singleton_ = (nIncluded == 1);
d599 1
a599 1
   select (myPrBrPt_->myPrCoord ()->includedCand ());
d612 1
a612 1
   return included ();
d619 1
a619 1
   witAssert (included ());
d623 1
a623 1
   select (myPrBrPt_->myPrCoord ()->excludedCand ());
d692 1
a692 1
   witAssert (included ());
d701 1
a701 1
bool WitPrPt::included ()
d703 1
a703 1
   return selSelCand ()->myPrCand ()->included ();
d710 1
a710 1
   if (! included ())
d716 2
a717 2
      "      Norm Exp Share: %5.3f\n\n",
      normExpShare ());
@


1.15
log
@Continued implementation of proportionate routing.
@
text
@d17 1
d36 1
d45 14
d64 3
d78 12
a97 3
   if (not myGlobalComp ()->allowPR ())
      myMsgFac () ("propRoutingNYISmsg");

a108 13
bool WitProdPrMgr::instNeededFor (WitProblem * theProblem)
   {
   WitPart * thePart;

   forEachPart (thePart, theProblem)
      if (thePart->propRouting ())
         return true;

   return false;
   }

//------------------------------------------------------------------------------

a145 7
void WitProdPrMgr::print ()
   {
   myPrCoord ()->print ();
   }

//------------------------------------------------------------------------------

a152 3
   WitPrPt * thePrPt;

   expPer  = theBopEnt->impactPeriod ()[execPer];
d154 1
a154 1
   thePrPt = myPrPtFor (theBopEnt, expPer);
d156 1
a156 6
   if (thePrPt != NULL)
      if (thePrPt->included ())
         if (not thePrPt->myPrBrPt ()->singleton ())
            return thePrPt;

   return NULL;
d177 1
a177 1
   return "Proportionate Routing";
d182 77
a258 1
bool WitProdPrMgr::selSplitNeeded ()
d265 15
a279 1
WitPrPt * WitProdPrMgr::myPrPtFor (WitBopEntry * theBopEnt, WitPeriod expPer)
d283 1
a283 1
   theRtCand = myProdRtMgr_->myRtCandFor (theBopEnt);
d285 1
a285 1
   return myPrCoord ()->myPrPtFor (theRtCand, expPer);
d362 2
a363 1
      "Proportionate Routing Status:\n");
d376 2
@


1.14
log
@Continued implementation of proportionate routing.
@
text
@d453 1
a453 1
            totInclShare_ += theRtCandItr->expShare ();
d602 1
a602 1
        myRtCand_->expShare () 
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@d16 1
a16 1
//    PprMgr.
d59 1
a59 1
// Implementation of class PprMgr.
d62 1
a62 1
WitPprMgr::WitPprMgr (WitSelector * theSelector):
d75 1
a75 1
WitPprMgr::~WitPprMgr ()
d81 1
a81 1
bool WitPprMgr::instNeededFor (WitProblem * theProblem)
d94 1
a94 1
bool WitPprMgr::propRouting (WitPart * thePart, WitPeriod expPer)
d105 1
a105 1
bool WitPprMgr::included (WitBopEntry * theBopEnt, WitPeriod expPer)
d118 1
a118 1
double WitPprMgr::normExpShare (WitBopEntry * theBopEnt, WitPeriod expPer)
d131 1
a131 1
void WitPprMgr::print ()
d138 1
a138 1
WitSelPt * WitPprMgr::mySelPtForAlt (
d161 1
a161 1
bool WitPprMgr::validForNetting ()
d168 1
a168 1
bool WitPprMgr::validForExecBounds ()
d175 1
a175 1
const char * WitPprMgr::selCaseName ()
d182 1
a182 1
bool WitPprMgr::selSplitNeeded ()
d189 1
a189 1
WitPrPt * WitPprMgr::myPrPtFor (WitBopEntry * theBopEnt, WitPeriod expPer)
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@d43 2
a44 2
WitPrMgr::WitPrMgr (WitSelector * theSelector):
      WitSelMgr    (theSelector),
d46 1
a46 2
      myProdRtMgr_ (theSelector->myProdRtMgr ()),
      myPrCoord_   (NULL)
d48 1
a48 1
   myPrCoord_ = new WitPrCoord (this);
d63 3
a65 1
      WitPrMgr (theSelector)
d98 1
a98 1
   theRtSite = myProdRtMgr ()->myRtSiteFor (thePart);
d193 1
a193 1
   theRtCand = myProdRtMgr ()->myRtCandFor (theBopEnt);
d202 1
a202 1
WitPrCoord::WitPrCoord (WitPrMgr * thePrMgr):
d209 1
a209 1
      myProdRtMgr_  (thePrMgr->mySelector ()->myProdRtMgr ()),
d232 1
a232 1
   theRtCandItr.attachTo (myProdRtMgr_->myRtCands ());
d239 1
a239 1
   theRtSiteItr.attachTo (myProdRtMgr_->myRtSites ());
d274 1
a274 1
   theRtSiteItr.attachTo (myProdRtMgr_->myRtSites ());
d305 1
a305 1
   myProdRtMgr_->allocate1D (myPrBrPts_);
d307 1
a307 1
   theRtSiteItr.attachTo (myProdRtMgr_->myRtSites ());
d331 1
a331 1
   myProdRtMgr_->allocate1D (myPrPts_);
d333 1
a333 1
   theRtCandItr.attachTo (myProdRtMgr_->myRtCands ());
d364 1
a364 1
   theRtSiteItr.attachTo (myProdRtMgr_->myRtSites ());
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@d304 1
a304 1
   myPrBrPts_.allocate1D (myProblem ());
d330 1
a330 1
   myPrPts_.allocate1D (myProblem ());
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d44 1
a44 1
      WitSelMgr  (theSelector),
d46 2
a47 2
      myRtMgr_   (theSelector->myRtMgr ()),
      myPrCoord_ (NULL)
d97 1
a97 1
   theRtSite = myRtMgr ()->myRtSiteFor (thePart);
d192 1
a192 1
   theRtCand = myRtMgr ()->myRtCandFor (theBopEnt);
d208 1
a208 1
      myRtMgr_      (thePrMgr->mySelector ()->myRtMgr ()),
d231 1
a231 1
   theRtCandItr.attachTo (myRtMgr_->myRtCands ());
d238 1
a238 1
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());
d273 1
a273 1
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());
d306 1
a306 1
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());
d332 1
a332 1
   theRtCandItr.attachTo (myRtMgr_->myRtCands ());
d363 1
a363 1
   theRtSiteItr.attachTo (myRtMgr_->myRtSites ());
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d16 1
d49 17
a69 2

   myPrCoord_ = new WitPrCoord (this, myRtMgr_);
d74 1
a74 1
WitPrMgr::~WitPrMgr ()
a75 1
   delete myPrCoord_;
d80 1
a80 1
bool WitPrMgr::instNeededFor (WitProblem * theProblem)
d93 1
a93 1
bool WitPrMgr::propRouting (WitPart * thePart, WitPeriod expPer)
d97 1
a97 1
   theRtSite = myRtMgr_->myRtSiteFor (thePart);
d99 1
a99 1
   return myPrCoord_->propRouting (theRtSite, expPer);
d104 1
a104 1
bool WitPrMgr::included (WitBopEntry * theBopEnt, WitPeriod expPer)
d117 1
a117 1
double WitPrMgr::normExpShare (WitBopEntry * theBopEnt, WitPeriod expPer)
d130 1
a130 1
void WitPrMgr::print ()
d132 1
a132 1
   myPrCoord_->print ();
d137 1
a137 1
WitSelPt * WitPrMgr::mySelPtForAlt (
d160 1
a160 1
bool WitPrMgr::validForNetting ()
d167 1
a167 1
bool WitPrMgr::validForExecBounds ()
d174 1
a174 1
const char * WitPrMgr::selCaseName ()
d181 1
a181 1
bool WitPrMgr::selSplitNeeded ()
d188 1
a188 1
WitPrPt * WitPrMgr::myPrPtFor (WitBopEntry * theBopEnt, WitPeriod expPer)
d192 1
a192 1
   theRtCand = myRtMgr_->myRtCandFor (theBopEnt);
d194 1
a194 1
   return myPrCoord_->myPrPtFor (theRtCand, expPer);
d201 1
a201 1
WitPrCoord::WitPrCoord (WitPrMgr * thePrMgr, WitRtMgr * theRtMgr):
d208 2
a209 2
      myPrMgr_      (thePrMgr),
      myRtMgr_      (theRtMgr)
d211 2
a212 2
   includedCand_ = new WitPrCand (true,  myPrMgr_);
   excludedCand_ = new WitPrCand (false, myPrMgr_);
d380 2
a381 2
WitPrCand::WitPrCand (bool includedVal, WitPrMgr * thePrMgr):
      WitSelCand (thePrMgr->myProblem ()),
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d67 1
a67 2
   return theProblem->myGlobalComp ()->propRouting ();
   }
d69 3
a71 10
//------------------------------------------------------------------------------

bool WitPrMgr::propRouting (WitPart * thePart)
   {
   WitBopEntry * theBopEnt;

   if (thePart->myGlobalComp ()->propRouting ())
      forEachEl (theBopEnt, thePart->producingBopEntries ())
         if (theBopEnt->expShare () > 0.0)
            return true;
d187 1
a187 1
      WitProbAssoc  (thePrMgr),
d226 1
a226 1
      if (myPrBrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d238 1
a238 1
   if (myPrBrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d261 1
a261 1
      if (myPrBrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d285 1
a285 2
   WitRtCandItr theRtCandItr;
   WitRtCand *  theRtCand;
d291 1
a291 1
   theRtCandItr.attachTo (myRtMgr_->myRtCands ());
d293 2
a294 2
   while (theRtCandItr.advance (theRtCand))
      if (theRtCand->expShare () > 0.0)
d296 1
a296 4
         theRtSite = theRtCand->myRtSite ();

         if (not myPrBrPts_.myPtrTVecAt (theRtSite).isAllocated ())
            myPrBrPts_.myPtrTVecAt (theRtSite).allocate (myProblem ());
d299 3
a301 4
            if (theRtCand->isEligible (thePer))
               if (myPrBrPts_.myPtrAt (theRtSite, thePer) == NULL)
                  myPrBrPts_.myPtrAt (theRtSite, thePer) =
                     new WitPrBrPt   (theRtSite, thePer, this);
d320 5
a324 3
      if (theRtCand->expShare () > 0.0)
         {
         myPrPts_.myPtrTVecAt (theRtCand).allocate (myProblem ());
d326 1
a326 1
         theRtSite = theRtCand->myRtSite ();
d328 9
a336 9
         forEachPeriod (thePer, myProblem ())
            if (theRtCand->isEligible (thePer))
               {
               thePrBrPt = myPrBrPts_.myPtrAt (theRtSite, thePer);

               myPrPts_.myPtrAt (theRtCand, thePer) =
                  new WitPrPt (theRtCand, thePrBrPt);
               }
         }
d351 1
a351 1
      if (myPrBrPts_.myPtrTVecAt (theRtSite).isAllocated ())
d366 1
a366 1
      WitSelCand (thePrMgr),
@


1.7
log
@Continued implementation of Proportionate Routing.
@
text
@d27 4
d45 1
d53 1
a53 1
   myPrCoord_ = new WitPrCoord (this);
d88 5
a92 1
   return (myPrCoord_->myPrBrPtFor (thePart, expPer) != NULL);
d101 1
a101 1
   thePrPt = myPrCoord_->myPrPtFor (theBopEnt, expPer);
d114 1
a114 1
   thePrPt = myPrCoord_->myPrPtFor (theBopEnt, expPer);
d125 1
a125 16
   WitPart *   thePart;
   WitPeriod   expPer;
   WitPrBrPt * thePrBrPt;

   fprintf (msgFile (),
      "\n"
      "Proportionate Routing Status:\n");

   forEachPart (thePart, myProblem ())
      forEachPeriod (expPer, myProblem ())
         {
         thePrBrPt = myPrCoord_->myPrBrPtFor (thePart, expPer);

         if (thePrBrPt != NULL)
            thePrBrPt->print ();
         }
d141 1
a141 1
   thePrPt = myPrCoord_->myPrPtFor (theBopEnt, expPer);
d180 11
d194 1
a194 1
WitPrCoord::WitPrCoord (WitPrMgr * thePrMgr):
d199 1
d201 2
a202 1
      myPrMgr_      (thePrMgr)
d218 19
a236 13
   WitBopEntry * theBopEnt;
   WitPart *     thePart;
   WitPeriod     expPer;

   forEachBopEntry (theBopEnt, myProblem ())
      if (myPrPts_.myPtrTVecAt (theBopEnt).isAllocated ())
         forEachPeriod (expPer, myProblem ())
            delete myPrPts_.myPtrAt (theBopEnt, expPer);

   forEachPart (thePart, myProblem ())
      if (myPrBrPts_.myPtrTVecAt (thePart).isAllocated ())
         forEachPeriod (expPer, myProblem ())
            delete myPrBrPts_.myPtrAt (thePart, expPer);
d244 1
a244 1
WitPrBrPt * WitPrCoord::myPrBrPtFor (WitPart * thePart, WitPeriod expPer)
d246 31
a276 4
   if (myPrBrPts_.myPtrTVecAt (thePart).isAllocated ())
      return myPrBrPts_.myPtrAt (thePart, expPer);
   else
      return NULL;
d281 1
a281 1
WitPrPt * WitPrCoord::myPrPtFor (WitBopEntry * theBopEnt, WitPeriod expPer)
d283 2
a284 2
   if (myPrPts_.myPtrTVecAt (theBopEnt).isAllocated ())
      return myPrPts_.myPtrAt (theBopEnt, expPer);
d293 4
a296 3
   WitBopEntry * theBopEnt;
   WitPart *     thePart;
   WitPeriod     expPer;
d300 4
a303 2
   forEachBopEntry (theBopEnt, myProblem ())
      if (theBopEnt->expShare () > 0.0)
d305 1
a305 1
         thePart = theBopEnt->myPart ();
d307 2
a308 2
         if (not myPrBrPts_.myPtrTVecAt (thePart).isAllocated ())
            myPrBrPts_.myPtrTVecAt (thePart).allocate (myProblem ());
d310 5
a314 5
         forEachPeriod (expPer, myProblem ())
            if (theBopEnt->expEligible (expPer))
               if (myPrBrPts_.myPtrAt (thePart, expPer) == NULL)
                   myPrBrPts_.myPtrAt (thePart, expPer) =
                      new WitPrBrPt (thePart, expPer, this);
d322 5
a326 3
   WitBopEntry * theBopEnt;
   WitPrBrPt *   thePrBrPt;
   WitPeriod     expPer;
d330 4
a333 2
   forEachBopEntry (theBopEnt, myProblem ())
      if (theBopEnt->expShare () > 0.0)
d335 3
a337 1
         myPrPts_.myPtrTVecAt (theBopEnt).allocate (myProblem ());
d339 2
a340 2
         forEachPeriod (expPer, myProblem ())
            if (theBopEnt->expEligible (expPer))
d342 1
a342 1
               thePrBrPt = myPrBrPts_.myPtrAt (theBopEnt->myPart (), expPer);
d344 2
a345 2
               myPrPts_.myPtrAt (theBopEnt, expPer) =
                  new WitPrPt (theBopEnt, thePrBrPt);
d354 10
a363 7
   WitPart *   thePart;
   WitPrBrPt * thePrBrPt;
   WitPeriod   expPer;

   forEachPart (thePart, myProblem ())
      if (myPrBrPts_.myPtrTVecAt (thePart).isAllocated ())
         forEachPeriod (expPer, myProblem ())
d365 1
a365 1
            thePrBrPt = myPrBrPts_.myPtrAt (thePart, expPer);
d408 2
a409 2
         WitPart *    thePart,
         WitPeriod    expPer,
d412 2
a413 2
      myPart_       (thePart),
      myExpPer_     (expPer),
d430 1
a430 1
   WitBopEntry * theBopEnt;
d437 3
a439 1
   forEachEl (theBopEnt, myPart_->producingBopEntries ())
d441 1
a441 1
      thePrPt = myPrCoord_->myPrPtFor (theBopEnt, myExpPer_);
d448 1
a448 1
            totInclShare_ += theBopEnt->expShare ();
d462 2
a463 2
   WitBopEntry * theBopEnt;
   WitPrPt *     thePrPt;
d468 3
a470 5
      "\n"
      "   Part:    %s\n"
      "   Exp Per: %d\n",
      myPart_->partName ().myCstring (),
      myExpPer_);
d477 3
a479 1
   forEachEl (theBopEnt, myPart_->producingBopEntries ())
d481 1
a481 1
      thePrPt = myPrCoord_->myPrPtFor (theBopEnt, myExpPer_);
d484 1
a484 8
         if (thePrPt->included ())
            fprintf (myPrCoord_->msgFile (),
               "      Operation:      %s\n"
               "      BOP Entry #:    %d\n"
               "      Norm Exp Share: %5.3f\n\n",
               theBopEnt->myOperationName ().myCstring (),
               theBopEnt->localIndex (),
               thePrPt  ->normExpShare ());
d492 1
a492 1
WitPrPt::WitPrPt (WitBopEntry * theBopEnt, WitPrBrPt * thePrBrPt):
d496 1
a496 1
      myBopEnt_ (theBopEnt),
d499 1
a499 1
   witAssert (myPrBrPt_->myPart () == myBopEnt_->myPart ());
d548 1
a548 7
   fprintf (myPrBrPt_->myPrCoord ()->msgFile (),
      "   Operation:   %s\n"
      "   BOP Entry #: %d\n"
      "   Exp Per:     %d\n",
      myBopEnt_->myOperationName ().myCstring (),
      myBopEnt_->localIndex (),
      myPrBrPt_->myExpPer ());
d597 1
a597 1
        myBopEnt_->expShare () 
d606 14
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d67 14
d413 2
d416 1
a416 1
      "   Exp Per: %d\n\n",
d419 5
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d89 15
d106 3
a108 1
   witAssert (included (theBopEnt, expPer));
d110 4
a113 1
   thePrBrPt = myPrCoord_->myPrBrPtFor (theBopEnt->myPart (), expPer);
d115 3
a117 3
   return
        theBopEnt->expShare () 
      / thePrBrPt->totInclShare ();
d122 2
a123 2
WitSelPt * WitPrMgr::mySelPt (
      WitBopEntry *,
d125 1
a125 1
      WitPeriod,
d128 12
a345 2
      WitProbAssoc  (thePrCoord),

d391 30
d446 1
a446 3
   stronglyAssert (false);

   return false;
a452 2
   stronglyAssert (false);

d466 1
a466 1
   stronglyAssert (false);
d480 7
a486 1
   stronglyAssert (false);
d526 11
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d18 1
a18 1
//    PrSite.
d25 1
a25 1
#include <PrSite.h>
a31 1
#include <PtrMapI.h>
d67 1
a67 1
bool WitPrMgr::propRouting (WitPart * thePart)
d69 1
a69 1
   return (myPrCoord_->myPrSiteFor () (thePart) != NULL);
d78 1
a78 1
   thePrPt = myPrCoord_->myPrPts ().myPtrAt (theBopEnt, expPer);
d89 1
a89 1
   WitPrSite * thePrSite;
d93 1
a93 1
   thePrSite = myPrCoord_->myPrSiteFor () (theBopEnt->myPart ());
d97 1
a97 1
      / thePrSite->totInclShare ()[expPer];
a147 1
      myPrSiteFor_  (myProblem ()),
d154 1
a154 1
   buildPrSites ();
d158 1
a158 1
   initTotInclShare ();
d175 3
a177 1
      delete myPrSiteFor_ (thePart);
d185 21
a205 1
void WitPrCoord::buildPrSites ()
d209 3
d218 8
a225 2
         if (myPrSiteFor_ (thePart) == NULL)
            myPrSiteFor_ (thePart) = new WitPrSite (thePart, this);
d234 1
a234 1
   WitPrSite *   thePrSite;
a241 2
         thePrSite = myPrSiteFor_ (theBopEnt->myPart ());

d246 3
d250 2
a251 1
                  new WitPrPt (theBopEnt, expPer, thePrSite);
d257 1
a257 1
void WitPrCoord::initTotInclShare ()
d260 1
a260 1
   WitPrSite * thePrSite;
d264 4
a267 2
      {
      thePrSite = myPrSiteFor_ (thePart);
d269 3
a271 4
      if (thePrSite != NULL)
         forEachPeriod (expPer, myProblem ())
            thePrSite->calcTotInclShare (expPer);
      }
d306 1
a306 1
// Implementation of class PrSite.
d309 5
a313 1
WitPrSite::WitPrSite (WitPart * thePart, WitPrCoord * thePrCoord):
d317 1
d319 2
a320 1
      totInclShare_ (myProblem (), 0.0)
d326 1
a326 1
WitPrSite::~WitPrSite ()
d332 1
a332 1
void WitPrSite::calcTotInclShare (WitPeriod expPer)
d336 1
a336 1
   double        totShare;
d338 2
a339 1
   totShare = 0.0;
d343 1
a343 1
      thePrPt = myPrCoord_->myPrPts ().myPtrAt (theBopEnt, expPer);
d347 5
a351 1
            totShare += theBopEnt->expShare ();
d354 2
a355 1
   witAssert (totShare > 0.0);
d357 1
a357 1
   totInclShare_[expPer] = totShare;
d364 1
a364 4
WitPrPt::WitPrPt (
         WitBopEntry * theBopEnt,
         WitPeriod     expPer,
         WitPrSite *   thePrSite):
d369 1
a369 2
      myExpPer_ (expPer),
      myPrSite_ (thePrSite)
d371 1
a371 1
   witAssert (myPrSite_->myPart () == myBopEnt_->myPart ());
d373 1
a373 1
   select (myPrSite_->myPrCoord ()->includedCand ());
d396 8
d417 1
a417 1
   return myPrSite_->myPrCoord ()->myPrMgr ();
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d16 1
d23 1
d36 1
a36 1
// Implementation of class BaMgr.
d40 1
a40 1
      WitSelMgr     (theSelector),
d42 1
a42 4
      includedCand_ (NULL),
      excludedCand_ (NULL),
      myPrSiteFor_  (myProblem ()),
      myPrPts_      ()
d49 1
a49 8
   includedCand_ = new WitPrCand (true,  this);
   excludedCand_ = new WitPrCand (false, this);

   buildPrSites ();

   buildPrPts ();

   initTotInclShare ();
d56 1
a56 14
   WitBopEntry * theBopEnt;
   WitPart *     thePart;
   WitPeriod     expPer;

   forEachBopEntry (theBopEnt, myProblem ())
      if (myPrPts_.myPtrTVecAt (theBopEnt).isAllocated ())
         forEachPeriod (expPer, myProblem ())
            delete myPrPts_.myPtrAt (theBopEnt, expPer);

   forEachPart (thePart, myProblem ())
      delete myPrSiteFor_ (thePart);

   delete excludedCand_;
   delete includedCand_;
d70 1
a70 1
   return (myPrSiteFor_ (thePart) != NULL);
d77 5
a81 1
   witAssert (theBopEnt->expShare () > 0.0);
d83 1
a83 1
   return myPrPts_.myPtrAt (theBopEnt, expPer)->included ();
d94 1
a94 1
   thePrSite = myPrSiteFor_ (theBopEnt->myPart ());
d141 5
d147 39
a185 1
void WitPrMgr::buildPrSites ()
d202 1
a202 1
void WitPrMgr::buildPrPts ()
d226 1
a226 1
void WitPrMgr::initTotInclShare ()
d277 2
a278 2
WitPrSite::WitPrSite (WitPart * thePart, WitPrMgr * thePrMgr):
      WitProbAssoc  (thePrMgr),
d281 1
a281 1
      myPrMgr_      (thePrMgr),
d297 1
d303 7
a309 2
      if (myPrMgr_->myPrPts ().myPtrAt (theBopEnt, expPer)->included ())
         totShare += theBopEnt->expShare ();
d333 1
a333 1
   select (myPrSite_->myPrMgr ()->includedCand ());
d369 1
a369 1
   return myPrSite_->myPrMgr ();
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d17 1
d23 1
d30 1
a31 1
#include <ScheduleI.h>
d39 1
d42 2
a43 2
      myPrPts_      (),
      totInclShare_ ()
d53 2
d65 1
d73 3
d91 1
a91 1
   return totInclShare_ (thePart).isAllocated ();
d107 2
d111 2
d115 1
a115 1
      / totInclShare_ (theBopEnt->myPart ())[expPer];
d159 17
d179 1
d187 2
d194 1
a194 1
                  new WitPrPt (theBopEnt, expPer, this);
d202 3
a204 5
   WitPart *     thePart;
   WitBopEntry * theBopEnt;
   WitPeriod     expPer;

   totInclShare_.allocate1D (myProblem ());
d208 1
a208 7
      forEachEl (theBopEnt, thePart->producingBopEntries ())
         if (theBopEnt->expShare () > 0.0)
            {
            totInclShare_ (thePart).allocate (myProblem (), 0.0);

            break;
            }
d210 1
a210 1
      if (totInclShare_ (thePart).isAllocated ())
d212 1
a212 1
            calcTotInclShare (thePart, expPer);
a216 18

void WitPrMgr::calcTotInclShare (WitPart * thePart, WitPeriod expPer)
   {
   WitBopEntry * theBopEnt;
   double        totShare;

   totShare = 0.0;

   forEachEl (theBopEnt, thePart->producingBopEntries ())
      if (myPrPts_.myPtrAt (theBopEnt, expPer)->included ())
         totShare += theBopEnt->expShare ();

   witAssert (totShare > 0.0);

   totInclShare_ (thePart)[expPer] = totShare;
   }

//------------------------------------------------------------------------------
d248 37
d291 1
a291 1
         WitPrMgr *    thePrMgr):
d297 1
a297 1
      myPrMgr_  (thePrMgr)
d299 3
a301 1
   select (myPrMgr_->includedCand ());
d337 1
a337 1
   return myPrMgr_;
@


1.1
log
@Continued implementation of Proportionate Routing.
@
text
@d16 2
d21 9
d36 5
a40 1
      WitSelMgr       (theSelector)
d42 11
d59 44
d142 203
@

