head	1.22;
access;
symbols
	sce_4_05_20040511:1.20
	sce_4_00_20040201:1.20
	nextGenBranch:1.19.0.8
	nextGenRoot:1.19
	sce_3_30_20030627:1.19
	EndRw-branch:1.19.0.6
	Root-of-EndRw:1.19
	rwToStl:1.19.0.4
	latest_sce_3_10_20010924:1.19.0.2
	sce_3_10_20010924:1.19
	latest_sce_3_00_20010601:1.13.0.2
	sce_3_00_20010601:1.13
	latest_sce_2_31_20010308:1.7.0.2
	sce_2_31_20010308:1.7
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2004.12.13.19.07.34;	author rjw;	state dead;
branches;
next	1.21;

1.21
date	2004.12.13.18.58.22;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.30.20.29.23;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.21.17.31.44;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.13.20.30.23;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.13.15.02.49;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.11.19.29.10;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.01.19.23.33;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.25.14.53.24;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.10.22.31.12;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.08.21.35.43;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.03.15.28.38;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.21.21.55.46;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.08.16.37.05;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.27.00.24.38;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.26.21.46.01;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.38;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.42;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.23;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.07;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Low-Pri Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MeCoordH
#define MeCoordH

//------------------------------------------------------------------------------
// Header file: "MeCoord.h"
//
// Contains the declaration of class MeCoordPt.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class MeCoordPt
//
// "Multi-Exec Coordination Point"
// Responsible for coordinating the multi-exec objects associated with a
// particular BopEntry and explosion period.
//
// Implemented in MultiEx.C.
//------------------------------------------------------------------------------

class WitMeCoordPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeCoordPt (
            WitBopEntry * theBopEnt,
            WitPeriod     firstExecPerVal,
            WitPeriod     lastExecPerVal,
            WitMeMgr *    theMeMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMeCoordPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitPeriod nextExecPer (WitPeriod execPer, WitMeDir * theMeDir);
         //
         // Returns the next execution period for theMeDir and this MeCoordPt
         // after execPer, if any; otherwise -1;

      void prtID ();
         //
         // Prints info identifying this MeCoordPt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitBopEntry *, myBopEnt)
      accessFunc    (WitPeriod,     firstExecPer)
      accessFunc    (WitPeriod,     lastExecPer)
      accessFunc    (WitMePt *,     myMePtForNstn)
      accessNonNull (WitMePt *,     myMePtForAsap)

      WitPeriod myExpPer ();
         //
         // Returns the explosion period associated with this MeCoordPt.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMeCoordPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBopEntry * const myBopEnt_;
         //
         // The BopEntry associated with this MeCoordPt.

      const WitPeriod firstExecPer_;
      const WitPeriod  lastExecPer_;
         //
         // The first and last execution periods corresponding to the explosion
         // period for this MeCoordPt.

      WitMePt * myMePtForNstn_;
         //
         // The MePt owned by this MeCoordPt for NSTN Multi-Exec.

      WitMePt * myMePtForAsap_;
         //
         // The MePt owned by this MeCoordPt for ASAP Multi-Exec, in two-way
         // multi-exec mode; otherwise NULL.
   };

#endif
@


1.21
log
@
Low-Pri Prop-Rt.
@
text
@@


1.20
log
@Continued implementation of PIP.
@
text
@d41 2
a42 2
            WitMeCand *   firstMeCandVal,
            WitMeCand *   lastMeCandVal,
d55 1
a55 1
      WitMeCand * nextMeCand (WitMeCand * theMeCand, WitMeDir * theMeDir);
d57 2
a58 2
         // Returns the next MeCand for theMeDir and this MeCoordPt after
         // theMeCand, if any, else NULL;
d69 2
a70 2
      accessFunc    (WitMeCand *,   firstMeCand)
      accessFunc    (WitMeCand *,   lastMeCand)
d94 2
a95 2
      WitMeCand * const firstMeCand_;
      WitMeCand * const  lastMeCand_;
d97 2
a98 2
         // The MeCands for first and last execution periods corresponding to
         // the explosion period for this MeCoordPt.
@


1.19
log
@Refactoring for constrained stock reallocation.
@
text
@d31 1
a31 1
class WitMeCoordPt: public WitUtil
@


1.18
log
@Refactoring for constrained stock reallocation.
@
text
@d71 2
a72 2
      accessFunc    (WitMeSelPt *,  myMeSelPtForNstn)
      accessNonNull (WitMeSelPt *,  myMeSelPtForAsap)
d100 1
a100 1
      WitMeSelPt * myMeSelPtForNstn_;
d102 1
a102 1
         // The MeSelPt owned by this MeCoordPt for NSTN Multi-Exec.
d104 1
a104 1
      WitMeSelPt * myMeSelPtForAsap_;
d106 1
a106 1
         // The MeSelPt owned by this MeCoordPt for ASAP Multi-Exec, in two-way
@


1.17
log
@Fixed bug in two-way multi-exec:
   NSTN and ASAP multi-exec collisions were not being adequately detected.
@
text
@d41 2
a42 2
            WitPeriod     firstExecPerVal,
            WitPeriod     lastExecPerVal,
d55 1
a55 1
      WitBoolean findNextExecPer (WitMeDir * theMeDir, WitPeriod & execPer);
d57 2
a58 3
         // Sets execPer to its next valid value for theMeDir and this MeCoorPt,
         // if any, else -1.
         // Returns TRUE, iff another exec period was found.
d69 2
a70 2
      accessFunc    (WitPeriod,     firstExecPer)
      accessFunc    (WitPeriod,     lastExecPer)
d94 2
a95 2
      const WitPeriod firstExecPer_;
      const WitPeriod  lastExecPer_;
d97 2
a98 2
         // The first and last execution periods corresponding to the explosion
         // period for this MeCoordPt.
@


1.16
log
@Refactoring of Multi-Exec: Removed alt-indices.
@
text
@a60 5
      void deSelectAsNeeded ();
         //
         // In twme mode, de-selects both of the MeSelPts for this MeCoordPt, 
         // if either one of them runs out of candidate selections.

a69 1
      accessFunc    (WitMeMgr *,    myMeMgr)
a89 4

      WitMeMgr * const myMeMgr_;
         //
         // The MeMgr that owns this MeCoordPt.
@


1.15
log
@Refactoring.
@
text
@d19 1
a19 1
#include <Vector.h>
d40 4
a43 8
            WitBopEntry *                 theBopEnt,
            int                           nExecPersVal, 
            const WitVector (WitPeriod) & execPerByIdx,
            WitMeMgr *                    theMeMgr);
         //
         // execPerByIdx[theIdx], for theIdx = 0, ..., nExecPersVal - 1, is the
         // set of all execution periods from which this MeCoordPt is to select.
         // theMeMgr is the MeMgr that owns this MeCoordPt.
d55 1
a55 4
      WitBoolean findNextExecPer (
            WitMeDir *  theMeDir,
            int &       theIdx, 
            WitPeriod & execPer);
d57 2
a58 2
         // Sets theIdx to its next value for theMeDir, and sets execPer to
         // the indexed exec period, if any. 
d74 6
a79 6
      accessFunc    (WitBopEntry *,                 myBopEnt)
      accessFunc    (WitMeMgr *,                    myMeMgr)
      accessFunc    (const WitVector (WitPeriod) &, indexedExecPer)
      accessFunc    (WitMeSelPt *,                  myMeSelPtForNstn)

      accessNonNull (WitMeSelPt *,                  myMeSelPtForAsap)
a84 5
      inline int nExecPers ()
         {
         return indexedExecPer_.length ();
         }

d97 4
d105 2
a106 5
      WitMeMgr * const myMeMgr_;
         //
         // The MeMgr that owns this MeCoordPt.

      WitVector (WitPeriod) indexedExecPer_;
d108 2
a109 2
         // indexedExecPer_[theIdx] is the execution period corresponding to
         // theIdx for this MeCoordPt.
@


1.14
log
@Continued development of selection splitting for multi=exec.
@
text
@d88 1
a88 1
      WitPeriod expPeriod ();
@


1.13
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d73 4
d81 1
a81 1
      accessFunc    (WitBopEntry *,                 myBopEntry)
d109 1
a109 1
      WitBopEntry * const myBopEntry_;
@


1.12
log
@Renamed AltPt classes to SelPt classes.
@
text
@d40 1
a40 1
            WitBopEntry *                 theBopEntry,
@


1.11
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@d70 1
a70 1
         // In twme mode, de-selects both of the MeAltPts for this MeCoordPt, 
d80 1
a80 1
      accessFunc    (WitMeAltPt *,                  myMeAltPtForNstn)
d82 1
a82 1
      accessNonNull (WitMeAltPt *,                  myMeAltPtForAsap)
d118 1
a118 1
      WitMeAltPt * myMeAltPtForNstn_;
d120 1
a120 1
         // The MeAltPt owned by this MeCoordPt for NSTN Multi-Exec.
d122 1
a122 1
      WitMeAltPt * myMeAltPtForAsap_;
d124 1
a124 1
         // The MeAltPt owned by this MeCoordPt for ASAP Multi-Exec, in two-way
@


1.10
log
@Fixed a bug on multi-exec.
@
text
@d19 1
a19 1
#include <PtrVec.h>
d59 13
a71 8
      WitBoolean findNextMeAltPt (
            WitMeDir *     theMeDir,
            int &          theIdx, 
            WitMeAltPt * & theMeAltPt);
         //
         // Sets theIdx to its next value for theMeDir, and sets theMeAltPt to
         // the indexed MeAltPt, if any. 
         // Returns TRUE, iff another MeAltPt was found.
d77 4
a80 4
      accessFunc    (WitBopEntry *,                  myBopEntry)
      accessFunc    (WitMeMgr *,                     myMeMgr)
      accessFunc    (const WitPtrVec (WitMeAltPt) &, myMeAltPt)
      accessFunc    (WitMeSelPt *,                   myMeSelPtForNstn)
d82 1
a82 1
      accessNonNull (WitMeSelPt *,                   myMeSelPtForAsap)
d90 1
a90 1
         return myMeAltPt_.length ();
d113 1
a113 1
      WitPtrVec (WitMeAltPt) myMeAltPt_;
d115 2
a116 2
         // myMeAltPt_[theIdx] is the MeAltPt corresponding to theIdx for this
         // MeCoordPt.
d118 1
a118 1
      WitMeSelPt * myMeSelPtForNstn_;
d120 1
a120 1
         // The MeSelPt owned by this MeCoordPt for NSTN Multi-Exec.
d122 1
a122 1
      WitMeSelPt * myMeSelPtForAsap_;
d124 1
a124 1
         // The MeSelPt owned by this MeCoordPt for ASAP Multi-Exec, in two-way
@


1.9
log
@Continued implementation of selection splitting with the new design.
@
text
@d73 1
@


1.8
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d72 5
a76 1
      accessFunc (WitBopEntry *,                  myBopEntry)
a81 2
      accessFunc (const WitPtrVec (WitMeAltPt) &, myMeAltPt)

a84 9
         }

      accessFunc (WitMeSelPt *, myMeSelPtForNstn)

      inline WitMeSelPt * myMeSelPtForAsap ()
         {
         witAssert (myMeSelPtForAsap_ != NULL);

         return myMeSelPtForAsap_;
@


1.7
log
@Further implementation of coarse selection splitting.
@
text
@a58 4
      void splitSel (WitPeriod execPer);
         //
         // Records the current selection for execPer as a split selection.

@


1.6
log
@Implemented coarse selection splitting for multiple exec periods.
@
text
@d76 6
@


1.5
log
@Some minor changes.
@
text
@d40 1
d59 4
d103 8
@


1.4
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <Vector.h>
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d19 1
a19 1
#include <Util.h>
d71 2
d75 1
a75 6
         return myMeAltPtTl_.length ();
         }

      inline WitMeAltPt * myMeAltPt (int theIdx)
         {
         return myMeAltPtForUpdate (theIdx);
a76 3
         //
         // myMeAltPt (theIdx) is the MeAltPt corresponding to theIdx for this
         // MeCoordPt.
d93 1
a93 10
      copyCtorAndAssignment (WitMeCoordPt);
         //
         // Prevents unintentional copying and assignment.

      inline WitMeAltPt * & myMeAltPtForUpdate (int theIdx)
         {
         return (WitMeAltPt * &) myMeAltPtTl_[theIdx];
         }
         //
         // Updateable version of myMeAltPt (int).
d99 1
a99 1
      WitVector (WitTypelessPtr) myMeAltPtTl_;
d101 2
a102 1
         // Data for myMeAltPt (int).
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d19 1
a19 1
#include <typedefs.h>
d31 1
a31 1
class WitMeCoordPt
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
