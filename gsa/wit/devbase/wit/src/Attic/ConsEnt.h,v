head	1.42;
access;
symbols
	sce_5_01_20080919:1.41
	latest_sce_4_20_20060523:1.33.0.2
	sce_4_20_20060523:1.33
	latest_sce4_20_OSL:1.32.0.2
	sce_4_20_OSL:1.32
	sce_410_withVa:1.31
	sce_4_05_20040511:1.30
	sce_4_00_20040201:1.21
	nextGenBranch:1.19.0.2
	nextGenRoot:1.19
	sce_3_30_20030627:1.19
	EndRw-branch:1.14.0.4
	Root-of-EndRw:1.14
	rwToStl:1.14.0.2
	latest_sce_3_10_20010924:1.7.0.2
	sce_3_10_20010924:1.7
	latest_sce_3_00_20010601:1.6.0.4
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.42
date	2010.09.10.22.45.33;	author rjw;	state dead;
branches;
next	1.41;

1.41
date	2007.11.15.17.15.33;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2007.06.05.21.06.00;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2007.06.05.16.15.23;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2007.06.01.16.22.10;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2007.05.30.16.01.18;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2007.02.27.22.59.29;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2007.02.27.19.59.30;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2007.02.08.22.47.33;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.02.17.33.56;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2005.09.30.21.57.54;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2005.02.24.23.23.55;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.04.01.21.05.12;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.31.22.56.07;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.03.24.22.21.28;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.23.19.14.23;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.10.22.53.18;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.05.22.19.57;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.02.12.19.13.39;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.02.06.23.27.09;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.06.00.17.32;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.15.18.12.02;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.11.11.18.29.12;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.19.16.48.15;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.07.21.34.15;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.13.23.06.27;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.12.30.21.57.23;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.12.30.20.37.24;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.05.21.19.57;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.04.23.07.19;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.03.16.01.46;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.29.21.35.44;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.08.19.21.48;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.03.23.16.35;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.22.14.32.05;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.01.19.23.32;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.04.22.27.49;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.38;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.25.20.12.30;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.29.21.22.42;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.30;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches;
next	;


desc
@@


1.42
log
@Heuristic Adjustment
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ConsEntH
#define ConsEntH

//------------------------------------------------------------------------------
// Header file: "ConsEnt.h"
//
// Contains the declaration of class ConsEntry.
//------------------------------------------------------------------------------

#include <Entry.h>

//------------------------------------------------------------------------------
// Class ConsEntry
//
// "Consumption Bill Entry"
// A BillEntry representing the consumption of a Part in the execution of an
// Operation.
// The Part consumed may be either the "normal" part consumed (see BomEntry),
// or a substitute for the normal part consumed (see SubEntry).
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       DelComp
//          BillEntry
//             ConsEntry
//                BomEntry
//                SubEntry
//
// Implemented in Entry.C.
//------------------------------------------------------------------------------

class WitConsEntry: public WitBillEntry
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitConsEntry ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitDblFlexVec &, consRate)
      accessFunc (double,                falloutRate)
      accessFunc (double,                execPenalty)
      accessFunc (const WitDblFlexVec &, effConsRate)

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitConsEntry)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double defConsRate,    1.0)
      defaultValue (double defFalloutRate, 0.0)
      defaultValue (int    defFallout,     0) // Used only by readData.
      defaultValue (double defExecPenalty, 0.0)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setConsRate    (const WitIVRealArg &);
      void setFalloutRate (double);
      void setExecPenalty (double);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePreEffConsRate (const WitTVec <double> &);
      void storePreEffConsRate (double);
         //
         // Valid only when preprocessing is being performed.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void           unpreprocess  ();
      virtual WitConsEntry * thisConsEnt   ();
         //
         // Overrides from class Component.

      void incConsVol (
                  WitTVec <double> & consVolArg,
            const WitTVec <double> & execVolArg);
         //
         // Assumes:
         //    consVolArg is a  consVol vector for myPart ().
         //    execVolArg is an execVol vector for myOperation ().
         // Increments consVolArg corresponding to consumption due to this
         // ConsEntry resulting from execVolArg.

      double effCost (WitPeriod thePer);
         //
         // Returns the objective #2 unit cost corresponding to the effective
         // rate of consumption for this ConsEntry in thePer.

      inline WitBomEntry * myBomEnt ()
         {
         return derivedBomEntry ();
         }

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsEntry (WitPart * thePart, int theLocalIndex);
         //
         // BillEntry <<< thePart.
         // BillEntry <<< theLocalIndex.

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void recountConsEntry ();
         //
         // Recounts this ConsEntry.

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      void copyAttrsFrom (WitConsEntry * theConsEnt);
         //
         // Copies the input attributes of theConsEnt into this ConsEntry.

      void display ();
         //
         // Displays the input and preprocessing data for this ConsEntry.

      virtual WitBomEntry * derivedBomEntry () = 0;
         //
         // Base class function.
         // Returns myBomEnt () as deterimined by the appropriate derived class.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitConsEntry);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # ConsEnties constructed before this ConsEntry.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitDblFlexVec consRate_;
         //
         // Consumption rate.
         // Range: (-inf, +inf).

      double falloutRate_;
         //
         // Fallout rate.
         // Range: [0.0, 0.99].

      double execPenalty_;
         //
         // If heuristic implosion / allocation is using the penalized execution
         // technique, execPenalty_ is the penalty that the heuristic will apply
         // to using this ConsEntry.
         // Range: [0.0, +inf).

      //------------------------------------------------------------------------
      // Data set by general preprocessing
      //------------------------------------------------------------------------

      WitDblFlexVec effConsRate_;
         //
         // effConsRate[thePer] is consRate[thePer], scaled up by 
         // 1 - falloutRate. effConsRate_[thePer] units of myPart () are
         // consumed in order to execute 1 unit of myOperation () in thePer.
         // This data should be used in place of consRate for all implosion
         // calculations.
   };

#endif
@


1.41
log
@Stochastic Implosion
@
text
@@


1.40
log
@Stochastic Implosion
@
text
@d88 13
a103 1
      virtual void           passPreRefs   ();
@


1.39
log
@Stochastic Implosion
@
text
@a91 1
      virtual void           importPreData ();
@


1.38
log
@Stochastic Implosion
@
text
@d91 1
@


1.37
log
@Stochastic Implosion
@
text
@a44 2
      friend class WitPreAccess;

@


1.36
log
@[disallowed backlog]
@
text
@d93 3
a95 2
      virtual void           unpreprocess ();
      virtual WitConsEntry * thisConsEnt  ();
@


1.35
log
@Rescinded all changed made since 1/31/07.
@
text
@d45 2
a117 4
      static void transmitDMPs ();
         //
         // See comment on transmitAllDMPs in CompMgr.h.

@


1.34
log
@[disallowed backlog]
@
text
@a56 1
      accessFunc (const WitDblFlexVec &, effConsRate)
d60 1
d91 1
d116 1
a116 5
      //------------------------------------------------------------------------
      // Restricted public member data.
      //------------------------------------------------------------------------

      WitPreRestricted <WitDblFlexVec> effConsRate_;
d118 1
a118 5
         // effConsRate[thePer] is consRate[thePer], scaled up by 
         // 1 - falloutRate. effConsRate_[thePer] units of myPart () are
         // consumed in order to execute 1 unit of myOperation () in thePer.
         // This data should be used in place of consRate for all implosion
         // calculations.
d197 12
@


1.33
log
@Updated the copyright date on all source files.
@
text
@d57 1
a60 1
      accessFunc (const WitDblFlexVec &, effConsRate)
a90 1
      virtual void           unpreprocess ();
d115 5
a119 1
      static void transmitDMPs ();
d121 5
a125 1
         // See comment on transmitAllDMPs in CompMgr.h.
a203 12

      //------------------------------------------------------------------------
      // Data set by general preprocessing
      //------------------------------------------------------------------------

      WitDblFlexVec effConsRate_;
         //
         // effConsRate[thePer] is consRate[thePer], scaled up by 
         // 1 - falloutRate. effConsRate_[thePer] units of myPart () are
         // consumed in order to execute 1 unit of myOperation () in thePer.
         // This data should be used in place of consRate for all implosion
         // calculations.
@


1.32
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.31
log
@Vector PropRt.
@
text
@a90 1
      virtual void           loadPre      ();
d116 4
@


1.30
log
@Double Precision.
@
text
@d83 1
a83 1
      void setConsRate    (const WitInVecRA &);
@


1.29
log
@Double Precision.
@
text
@a82 1
      void setConsRate    (const float *);
@


1.28
log
@Double Precision.
@
text
@d84 1
@


1.27
log
@Double Precision.
@
text
@d57 4
a60 4
      accessFunc (const WitFlexVec <double> &, consRate)
      accessFunc (double,                      falloutRate)
      accessFunc (double,                      execPenalty)
      accessFunc (const WitFlexVec <double> &, effConsRate)
d178 1
a178 1
      WitFlexVec <double> consRate_;
d199 1
a199 1
      WitFlexVec <double> effConsRate_;
@


1.26
log
@Double Precision.
@
text
@d57 4
a60 4
      accessFunc (const WitRealVec &, consRate)
      accessFunc (double,             falloutRate)
      accessFunc (double,             execPenalty)
      accessFunc (const WitRealVec &, effConsRate)
d178 1
a178 1
      WitRealVec consRate_;
d199 1
a199 1
      WitRealVec effConsRate_;
@


1.25
log
@Double Precision.
@
text
@d74 1
a74 1
      defaultValue (float  defConsRate,    1.0)
@


1.24
log
@Continued double precision.
@
text
@d22 4
a25 2
// class ConsEntry: "Consumption Bill Entry"
// An BillEntry representing the consumption of a Part in the execution of an
d57 4
a60 4
      accessFunc (const WitFlexVec <float> &, consRate)
      accessFunc (double,                     falloutRate)
      accessFunc (double,                     execPenalty)
      accessFunc (const WitFlexVec <float> &, effConsRate)
d178 1
a178 1
      WitFlexVec <float> consRate_;
d199 1
a199 1
      WitFlexVec <float> effConsRate_;
@


1.23
log
@Continued double precision.
@
text
@d56 2
a57 2
      accessFunc (StrDbl,                     falloutRate)
      accessFunc (StrDbl,                     execPenalty)
d73 1
a73 1
      defaultValue (StrDbl defFalloutRate, 0.0)
d75 1
a75 1
      defaultValue (StrDbl defExecPenalty, 0.0)
d82 2
a83 2
      void setFalloutRate (StrDbl);
      void setExecPenalty (StrDbl);
d181 1
a181 1
      StrDbl falloutRate_;
d186 1
a186 1
      StrDbl execPenalty_;
@


1.22
log
@Continued double precision.
@
text
@d105 1
a105 1
      float effCost (WitPeriod thePer);
@


1.21
log
@Continued implementation of PIP.
@
text
@d56 2
a57 2
      accessFunc (float,                      falloutRate)
      accessFunc (float,                      execPenalty)
d72 4
a75 4
      defaultValue (float defConsRate,    1.0)
      defaultValue (float defFalloutRate, 0.0)
      defaultValue (int   defFallout,     0) // Used only by readData.
      defaultValue (float defExecPenalty, 0.0)
d82 2
a83 2
      void setFalloutRate (float);
      void setExecPenalty (float);
d181 1
a181 1
      float falloutRate_;
d186 1
a186 1
      float execPenalty_;
@


1.20
log
@Removed a bad function overload.
@
text
@d95 10
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d91 1
a91 1
      virtual WitConsEntry * myConsEnt    ();
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@d89 3
a91 1
      virtual void loadPre ();
d93 1
a93 9
         // Override from class Component.

      virtual void unpreprocess ();
         //
         // Override from class Component.

      virtual void getConsEntry (WitConsEntry * &);
         //
         // Override from class Component.
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@d97 4
@


1.16
log
@Continued implementation of execPenalties on BOM entries and subs.
@
text
@d60 4
d65 2
@


1.15
log
@Added penalties on BOM entries and substitutes to pen-exec.
@
text
@d57 1
a57 1
      accessFunc (float,                      usePenalty)
d69 1
a69 1
      defaultValue (float defUsePenalty,  0.0)
d77 1
a77 1
      void setUsePenalty  (float);
d172 1
a172 1
      float usePenalty_;
d175 1
a175 1
         // technique, usePenalty_ is the penalty that the heuristic will apply
@


1.14
log
@Continued implementation of single-source.
@
text
@d57 1
d69 1
d77 1
d171 7
@


1.13
log
@Continued implementation of single-source.
@
text
@a92 27
      void incConsVol (
                  WitTVec <double> & consVolArg,
            const WitTVec <float> &  execVolArg);
         //
         // consVolArg is a  consVol vector for myPart.
         // execVolArg is an execVol vector for myOperation.
         // Increments consVolArg corresponding to consumption due to this
         // ConsEntry resulting from execVolArg.

      void incConsVol (
            WitTVec <double> &         consVolArg,
            const WitFlexVec <float> & execVolArg);
         //
         // consVolArg is a  consVol vector for myPart.
         // execVolArg is an execVol vector for myOperation.
         // Increments consVolArg corresponding to consumption due to this
         // ConsEntry resulting from execVolArg.

      void incConsVol (
            WitTVec <double> &          consVolArg,
            const WitFlexVec <double> & execVolArg);
         //
         // consVolArg is a  consVol vector for myPart.
         // execVolArg is an execVol vector for myOperation.
         // Increments consVolArg corresponding to consumption due to this
         // ConsEntry resulting from execVolArg.

@


1.12
log
@Continued implementation of single-source.
@
text
@d77 1
a77 1
      // Conditional reference access functions.
d80 3
a82 1
      conditionalRef (WitFlexVec <float>, effConsRate,  preprocAcc ())
d84 3
a86 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
@


1.11
log
@Continued implementation of single-source.
@
text
@a100 9
                  WitTVec <double> & consVolArg,
            const WitTVec <double> & execVolArg);
         //
         // consVolArg is a  consVol vector for myPart.
         // execVolArg is an execVol vector for myOperation.
         // Increments consVolArg corresponding to consumption due to this
         // ConsEntry resulting from execVolArg.

      void incConsVol (
@


1.10
log
@Preliminary work on single source.
@
text
@d101 9
@


1.9
log
@Continued preliminary work on single source.
@
text
@d55 1
a55 1
      accessFunc (const WitFlexVec (float) &, consRate)
d57 1
a57 1
      accessFunc (const WitFlexVec (float) &, effConsRate)
d80 1
a80 1
      conditionalRef (WitFlexVec (float), effConsRate,  preprocAcc ())
d102 1
a102 1
            const WitFlexVec (float) & execVolArg);
d111 1
a111 1
            const WitFlexVec (double) & execVolArg);
d184 1
a184 1
      WitFlexVec (float) consRate_;
d198 1
a198 1
      WitFlexVec (float) effConsRate_;
@


1.8
log
@Continued implementation of object iteration.
@
text
@d92 2
a93 2
                  WitTVec (double) & consVolArg,
            const WitTVec (float) &  execVolArg);
d101 1
a101 1
            WitTVec (double) &         consVolArg,
d110 1
a110 1
            WitTVec (double) &          consVolArg,
@


1.7
log
@Continued development of selection splitting for multi=exec.
@
text
@a45 9
      // Constructor functions.
      //------------------------------------------------------------------------

      WitConsEntry (WitPart * thePart, int theLocalIndex);
         //
         // BillEntry <<< thePart.
         // BillEntry <<< theLocalIndex.

      //------------------------------------------------------------------------
a85 13
      virtual WitBoolean isaSubEntry ();
         //
         // Base class function.
         // Returns TRUE iff this ConsEntry is actually a SubEntry.
         // The base class implementation returns FALSE.

      inline WitSubEntry * asaSubEntry ()
         {
         witAssert (isaSubEntry ());

         return (WitSubEntry *) this;
         }

d127 13
@


1.6
log
@Coarse selection splitting.
@
text
@d140 1
a140 1
      inline WitBomEntry * myBomEntry ()
d170 1
a170 2
         // Returns myBomEntry () as deterimined by the appropriate derived
         // class.
@


1.5
log
@Refactoring for selection splitting.
@
text
@d68 2
d151 4
d184 5
@


1.4
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@d173 1
a173 3
      copyCtorAndAssignment (WitConsEntry);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@d64 3
a66 3
      accessFunc (float, usageRate)
      accessFunc (float, falloutRate)
      accessFunc (float, effUsageRate)
d72 1
a72 1
      defaultValue (float defUsageRate,   1.0)
d80 1
a80 1
      void setUsageRate   (float);
d87 1
a87 1
      conditionalRef (float, effUsageRate, preprocAcc ())
d106 1
a106 1
      float effCost ();
d109 1
a109 1
         // rate of consumption for this ConsEntry in period t.
d185 1
a185 1
      float usageRate_;
d187 1
a187 1
         // Usage rate.
d199 1
a199 1
      float effUsageRate_;
d201 5
a205 4
         // Usage rate, scaled up by 1 - falloutRate. effUsageRate_ units of
         // myPart () are consumed in order to execute 1 unit of
         // myOperation (). This data should be used in place of usageRate for
         // all implosion calculations.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d129 9
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
