head	1.21;
access;
symbols
	latest_sce_4_20_20060523:1.14.0.2
	sce_4_20_20060523:1.14
	latest_sce4_20_OSL:1.13.0.2
	sce_4_20_OSL:1.13
	sce_410_withVa:1.12
	sce_4_05_20040511:1.12
	sce_4_00_20040201:1.12
	nextGenBranch:1.12.0.2
	nextGenRoot:1.12
	sce_3_30_20030627:1.12
	EndRw-branch:1.10.0.4
	Root-of-EndRw:1.10
	rwToStl:1.10.0.2
	latest_sce_3_10_20010924:1.5.0.2
	sce_3_10_20010924:1.5
	latest_sce_3_00_20010601:1.3.0.4
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2007.06.26.19.06.21;	author rjw;	state dead;
branches;
next	1.20;

1.20
date	2007.06.22.19.04.04;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.11.14.23.10.26;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.11.01.17.31.46;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.03.15.08.59;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.08.18.18.43.39;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.08.17.19.36.40;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.05.02.17.34.08;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.04.19.53.50;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.23.23.24.36;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.23.19.13.22;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.11.18.53.13;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.06.19.56.10;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.29.23.06.29;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.26.22.49.07;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.23.21.00.40;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.29.21.37.20;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.01.19.23.34;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.46;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.41;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
//
//------------------------------------------------------------------------------

#ifndef PerConH
#define PerConH

//------------------------------------------------------------------------------
// Header file: "PerCon.h"
//
// Contains the declaration the following classes:
//
//    PeriodCon
//    ResourceCon
//    SubCon
//    ShipCon
//    SlbCon
//------------------------------------------------------------------------------

#include <OptCon.h>

//------------------------------------------------------------------------------
// class PeriodCon
// An OptCon associated with a period in the implosion problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptCon
//          PeriodCon
//             ResourceCon
//             SubCon
//             ShipCon
//             SlbCon
//------------------------------------------------------------------------------

class WitPeriodCon: public WitOptCon
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitPeriodCon (WitDetImpOP *, WitPeriod);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitPeriodCon ();

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitPeriod, myPeriod)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline WitDetImpOP * myDetImpOP () const
         {
         return reinterpret_cast <WitDetImpOP *> (myOptProb ());
         }

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitPeriodCon);

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printSource () const;

      //-----------------------------------------------------------------------
      // Private pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printItem () const = 0;
         //
         // Prints to the optProbFile text identifying the non-period
         // data from which this PeriodCon was generated.

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPeriod myPeriod_;
         //
         // The period with which this PeriodCon is associated.
   };

//------------------------------------------------------------------------------
// class ResourceCon
// A resource allocation constraint in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptCon
//          PeriodCon
//             ResourceCon
//------------------------------------------------------------------------------

class WitResourceCon: public WitPeriodCon
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitResourceCon (WitPart *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitResourceCon ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateCoeffs ();

      virtual void compBounds ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitPart *, myPart)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitResourceCon);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part with which this ResourceCon is associated.
   };

//------------------------------------------------------------------------------
// class SubCon
// A substitution constraint in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptCon
//          PeriodCon
//             SubCon
//------------------------------------------------------------------------------

class WitSubCon: public WitPeriodCon
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitSubCon (WitBomEntry *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitSubCon ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateCoeffs ();

      virtual void compBounds ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitBomEntry *, myBomEnt)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitSubCon);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry with which this SubCon is associated.
   };

//------------------------------------------------------------------------------
// class ShipCon
// A shipment constraint in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptCon
//          PeriodCon
//             ShipCon
//------------------------------------------------------------------------------

class WitShipCon: public WitPeriodCon
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitShipCon (WitDemand *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitShipCon ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateCoeffs ();

      virtual void compBounds ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitDemand *, myDemand)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitShipCon);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitDemand * const myDemand_;
         //
         // The Demand with which this ShipCon is associated.
   };

//------------------------------------------------------------------------------
// class SlbCon
// A soft lower bound constraint in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptCon
//          PeriodCon
//             SlbCon
//------------------------------------------------------------------------------

class WitSlbCon: public WitPeriodCon
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitSlbCon (WitBoundedVar *, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitSlbCon ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateCoeffs ();

      virtual void compBounds ();

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      const WitBoundSet * myBoundSet () const;

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitSlbCon);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitBoundedVar * const myBoundedVar_;
         //
         // The BoundedVar to which this SlbCon applies.
   };

#endif
@


1.20
log
@Stochastic Implosion
@
text
@@


1.19
log
@External opt implosion.
@
text
@d50 1
a50 1
      WitPeriodCon (WitImpOptProb *, WitPeriod);
d68 1
a68 1
      inline WitImpOptProb * myImpOptProb () const
d70 1
a70 1
         return reinterpret_cast <WitImpOptProb *> (myOptProb ());
d125 1
a125 1
      WitResourceCon (WitPart *, WitPeriod, WitImpOptProb *);
d192 1
a192 1
      WitSubCon (WitBomEntry *, WitPeriod, WitImpOptProb *);
d259 1
a259 1
      WitShipCon (WitDemand *, WitPeriod, WitImpOptProb *);
d326 1
a326 1
      WitSlbCon (WitBoundedVar *, WitImpOptProb *);
@


1.18
log
@External opt implosion.
@
text
@d174 1
a174 1
// A substitute constraint in the optimization problem.
@


1.17
log
@App controlled opt implosion.
@
text
@d107 1
a107 1
// A resource conservation constraint in the optimization problem.
@


1.16
log
@App controlled opt implosion.
@
text
@d93 1
a93 1
         // Prints to the modelFile text identifying the non-period
d107 1
a107 1
// A resource conservation constraint in the optimization model.
d174 1
a174 1
// A substitute constraint in the optimization model.
d241 1
a241 1
// A shipment constraint in the optimization model.
d308 1
a308 1
// A soft lower bound constraint in the optimization model.
@


1.15
log
@Removed optimizing implosion with lot sizes.
@
text
@d33 1
a33 1
//    ModelEl
d50 1
a50 3
      WitPeriodCon (WitImpOM * theImpOM, WitPeriod t);
         //
         // myPeriod_ <-- t.
d68 1
a68 1
      inline WitImpOM * myImpOM () const
d70 1
a70 1
         return reinterpret_cast <WitImpOM *> (myOptModel ());
d111 1
a111 1
//    ModelEl
d125 1
a125 1
      WitResourceCon (WitPart * thePart, WitPeriod t, WitImpOM * theImpOM);
d178 1
a178 1
//    ModelEl
d192 1
a192 1
      WitSubCon (WitBomEntry * theBomEnt, WitPeriod t, WitImpOM * theImpOM);
d245 1
a245 1
//    ModelEl
d259 1
a259 1
      WitShipCon (WitDemand * theDemand, WitPeriod t, WitImpOM * theImpOM);
d312 1
a312 1
//    ModelEl
d326 1
a326 1
      WitSlbCon (WitBoundedVar * theBoundedVar, WitImpOM * theImpOM);
@


1.14
log
@Updated the copyright date on all source files.
@
text
@a22 2
//    LotSizeCon
//    MlsCon
a39 2
//             LotSizeCon
//             MlsCon
a374 134
//------------------------------------------------------------------------------
// class LotSizeCon
// A lot size constraint in the optimization model.
//
// Class hierarchy:
//
//    ModelEl
//       OptCon
//          PeriodCon
//             LotSizeCon
//------------------------------------------------------------------------------

class WitLotSizeCon: public WitPeriodCon
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitLotSizeCon (WitOperation *, WitPeriod, WitImpOM *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitLotSizeCon ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateCoeffs ();

      virtual void compBounds ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOperation *, myOpn)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitLotSizeCon);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOperation * const myOpn_;
         //
         // The Operation with which this LotSizeCon is associated.
   };

//------------------------------------------------------------------------------
// class MlsCon
// A min lot size constraint in the optimization model.
//
// Class hierarchy:
//
//    ModelEl
//       OptCon
//          PeriodCon
//             MlsCon
//------------------------------------------------------------------------------

class WitMlsCon: public WitPeriodCon
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitMlsCon (WitOperation *, WitPeriod, WitImpOM *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitMlsCon ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateCoeffs ();

      virtual void compBounds ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOperation *, myOpn)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitMlsCon);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOperation * const myOpn_;
         //
         // The Operation with which this MlsCon is associated.
   };

@


1.13
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.12
log
@Altered 2 casts for MS compiler.
@
text
@d99 1
a99 1
         // Prints to OptModel::modelFile () text identifying the non-period
@


1.11
log
@Replaced some C style casts with C++ style casts.
@
text
@d76 1
a76 1
         return static_cast <WitImpOM *> (myOptModel ());
@


1.10
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d76 1
a76 1
         return (WitImpOM *) myOptModel ();
@


1.9
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d23 2
a24 1
//    IncLotSizeCon
d42 2
a43 1
//             IncLotSizeCon
d380 2
a381 2
// class IncLotSizeCon
// An incremental lot size constraint in the optimization model.
d388 1
a388 1
//             IncLotSizeCon
d391 1
a391 1
class WitIncLotSizeCon: public WitPeriodCon
d399 1
a399 1
      WitIncLotSizeCon (WitOperation *, WitPeriod, WitImpOM *);
d405 1
a405 1
      virtual ~WitIncLotSizeCon ();
d435 1
a435 1
      noCopyCtorAssign (WitIncLotSizeCon);
d443 68
a510 1
         // The Operation with which this IncLotSizeCon is associated.
@


1.8
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d16 1
a16 1
// Contains the declaration the following hierarchy of classes:
d19 5
a23 4
//       ResourceCon
//       SubCon
//       ShipCon
//       SlbCon
d31 11
d112 7
d179 7
d246 7
d313 7
d375 67
@


1.7
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d25 1
a25 1
#include <PerVar.h>
d310 1
a310 4
      inline const WitBoundSet * myBoundSet () const
         {
         return myBoundedVar_->myBoundSet ();
         }
@


1.6
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d29 1
a29 1
// An MpCon associated with a period in the implosion problem.
d32 1
a32 1
class WitPeriodCon: public WitMpCon
d40 1
a40 1
      WitPeriodCon (WitImpMp * theImpMp, WitPeriod t);
d60 1
a60 1
      inline WitImpMp * myImpMp () const
d62 1
a62 1
         return (WitImpMp *) myMpModel ();
d85 1
a85 1
         // Prints to MpModel::modelFile () text identifying the non-period
d99 1
a99 1
// A resource conservation constraint in the MP model.
d110 1
a110 1
      WitResourceCon (WitPart * thePart, WitPeriod t, WitImpMp * theImpMp);
d159 1
a159 1
// A substitute constraint in the MP model.
d170 1
a170 1
      WitSubCon (WitBomEntry * theBomEnt, WitPeriod t, WitImpMp * theImpMp);
d219 1
a219 1
// A shipment constraint in the MP model.
d230 1
a230 1
      WitShipCon (WitDemand * theDemand, WitPeriod t, WitImpMp * theImpMp);
d279 1
a279 1
// A soft lower bound constraint in the MP model.
d290 1
a290 1
      WitSlbCon (WitBoundedVar * theBoundedVar, WitImpMp * theImpMp);
@


1.5
log
@Added shadowPrice and compPrices attributes.
@
text
@d29 1
a29 1
// An LpCon associated with a period in the implosion problem.
d32 1
a32 1
class WitPeriodCon: public WitLpCon
d40 1
a40 1
      WitPeriodCon (WitImpLp * theImpLp, WitPeriod t);
d60 1
a60 1
      inline WitImpLp * myImpLp () const
d62 1
a62 1
         return (WitImpLp *) myLpModel ();
d85 1
a85 1
         // Prints to LpModel::modelFile () text identifying the non-period
d99 1
a99 1
// A resource conservation constraint in the LP model.
d110 1
a110 1
      WitResourceCon (WitPart * thePart, WitPeriod t, WitImpLp * theImpLp);
d159 1
a159 1
// A substitute constraint in the LP model.
d170 1
a170 1
      WitSubCon (WitBomEntry * theBomEnt, WitPeriod t, WitImpLp * theImpLp);
d219 1
a219 1
// A shipment constraint in the LP model.
d230 1
a230 1
      WitShipCon (WitDemand * theDemand, WitPeriod t, WitImpLp * theImpLp);
d279 1
a279 1
// A soft lower bound constraint in the LP model.
d290 1
a290 1
      WitSlbCon (WitBoundedVar * theBoundedVar, WitImpLp * theImpLp);
@


1.4
log
@Continued development of selection splitting for multi=exec.
@
text
@d99 1
a99 1
// A resource allocation constraint in the LP model.
@


1.3
log
@Refactoring for selection splitting.
@
text
@d190 1
a190 1
      accessFunc (WitBomEntry *, myBomEntry)
d212 1
a212 1
      WitBomEntry * const myBomEntry_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d71 1
a71 3
      copyCtorAndAssignment (WitPeriodCon);
         //
         // Prevents unintentional copying and assignment.
d146 1
a146 3
      copyCtorAndAssignment (WitResourceCon);
         //
         // Prevents unintentional copying and assignment.
d206 1
a206 3
      copyCtorAndAssignment (WitSubCon);
         //
         // Prevents unintentional copying and assignment.
d266 1
a266 3
      copyCtorAndAssignment (WitShipCon);
         //
         // Prevents unintentional copying and assignment.
d329 1
a329 3
      copyCtorAndAssignment (WitSlbCon);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
