head	1.37;
access;
symbols
	sce_5_01_20080919:1.34
	latest_sce_4_20_20060523:1.34.0.2
	sce_4_20_20060523:1.34
	latest_sce4_20_OSL:1.33.0.2
	sce_4_20_OSL:1.33
	sce_410_withVa:1.33
	sce_4_05_20040511:1.13
	sce_4_00_20040201:1.13
	nextGenBranch:1.13.0.2
	nextGenRoot:1.13
	sce_3_30_20030627:1.13;
locks; strict;
comment	@ * @;


1.37
date	2010.07.16.20.21.21;	author rjw;	state dead;
branches;
next	1.36;

1.36
date	2010.07.13.17.41.29;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2010.07.02.19.15.49;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.02.17.34.09;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2005.03.02.22.56.28;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2005.01.18.20.03.29;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2005.01.15.00.20.08;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2005.01.10.19.02.25;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2005.01.07.23.40.56;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2005.01.06.20.34.10;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2005.01.05.19.32.45;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.12.29.16.50.05;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.12.28.22.34.27;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.28.16.13.33;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.27.22.33.17;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.24.00.02.27;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.10.16.49.44;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.06.22.38.16;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.02.20.29.25;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.11.30.20.24.49;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.29.21.26.23;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.11.24.22.45.30;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.11.23.20.50.07;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.06.20.22.43;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.05.16.10.01;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.30.21.07.48;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.29.14.27.48;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.28.20.47.37;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.27.19.20.22;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.25.22.17.09;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.25.19.16.56;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.13.23.06.31;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.07.23.29.11;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.07.20.20.50;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.03.21.57.26;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.31.21.28.57;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.37
log
@Selection Recovery
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PrPtH
#define PrPtH

//------------------------------------------------------------------------------
// Header file: "PrPt.h"
//
// Contains the declaration of class PrPt.
//------------------------------------------------------------------------------

#include <SelPt.h>

//------------------------------------------------------------------------------
// Class PrPt
//
// "Proportionate Routing Point"
// A SelPt for proportionate routing
// A PrPt represents an RtSite and a period at which proportionate routing is to
// be performed.
//
// Class Hierarchy:
//
// SelPt
//    PrPt
//
// Implemented in PropRtg.C.
//------------------------------------------------------------------------------

class WitPrPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrPt (WitRtSite *, WitPeriod, WitPrCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the current state of this PrPt.

      void printAllowedRtCands ();
         //
         // Prints the RtCands for myRtSite_ that are currently allowed for
         // prop-rt in myPer_.

      void incAllowedRtCands (int delta);
         //
         // Adds delta to nAllowedRtCands_.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod, myPer)
      accessFunc (int,       nAllowedRtCands)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
      virtual void         printRecovery  ();
      virtual void         recoverInitSel ();
         //
         // Overrides from class SelPt.

      noCopyCtorAssign (WitPrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
         //
         // The RtSite for this PrPt.

      const WitPeriod myPer_;
         //
         // The period for this PrPt.

      WitPrCoord * const myPrCoord_;
         //
         // The PrCoord that owns this PrPt.

      int nAllowedRtCands_;
         //
         // # of RtCands for myRtSite_ that are currently allowed in myPer_.
   };

#endif
@


1.36
log
@Selection Recovery.
@
text
@@


1.35
log
@Selection Recovery.
@
text
@d61 5
d88 1
a89 1
      virtual void         prtRecInitSel  ();
@


1.34
log
@Updated the copyright date on all source files.
@
text
@d78 7
a84 5
      virtual WitSelMgr *  mySelMgr    ();
      virtual void         prtID       ();        
      virtual bool         splittable  ();   
      virtual void         getSortData (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand  ();
@


1.33
log
@Vector PropRtg.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.32
log
@Low-Pri Prop-Rt.
@
text
@d34 1
a34 1
// Implemented in PropRt.C.
@


1.31
log
@Low-Pri Prop-Rt.
@
text
@d26 1
a26 1
// A PrPt represents an RtSite and a period at which Proportionate Routing is to
a27 1
// New Version
@


1.30
log
@Low-Pri Prop-Rt.
@
text
@d79 5
a83 6
      virtual void         printSelection ();
      virtual WitSelMgr *  mySelMgr       ();
      virtual void         prtID          ();        
      virtual bool         splittable     ();   
      virtual void         getSortData    (WitPart * &, WitPeriod &);
      virtual WitSelCand * newSelCand     ();
@


1.29
log
@Low-Pri Prop-Rt.
@
text
@d62 1
a62 1
      void incActRtCands (int delta);
d64 1
a64 1
         // Adds delta to nActiveRtCands_.
d71 1
a71 1
      accessFunc (int,       nActRtCands)
d106 1
a106 1
      int nActRtCands_;
d108 1
a108 1
         // # of RtCands for myRtSite_ that are currently active in myPer_.
@


1.28
log
@Low-Pri Prop-Rt.
@
text
@d108 1
a108 1
         // # of RtCands for myRtSite_ that are currrently active in myPer_.
@


1.27
log
@Low-Pri Prop-Rt.
@
text
@a82 1
      virtual void         restoreSelTo   (WitSelCand *);
@


1.26
log
@Low-Pri Prop-Rt.
@
text
@a85 2
      virtual void         recSplit       ();
      virtual void         recUnsplit     ();
@


1.25
log
@Low-Pri Prop-Rt.
@
text
@d83 1
@


1.24
log
@Low-Pri Prop-Rt.
@
text
@d58 4
d70 2
a71 1
      accessFunc (int, nActRtCands)
@


1.23
log
@Low-Pri Prop-Rt.
@
text
@a73 1
      virtual bool         hasResAlt      ();
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@d54 14
d103 4
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d77 12
@


1.20
log
@Low-Pri Prop-Rt.
@
text
@d15 2
d19 60
@


1.19
log
@Low-Pri Prop-Rt.
@
text
@d10 2
a11 2
#ifndef SkeletonH
#define SkeletonH
d14 1
a14 1
// Header file: "Skeleton.h"
@


1.18
log
@Low-Pri Prop-Rt.
@
text
@d10 2
a11 2
#ifndef PrPtH
#define PrPtH
d14 1
a14 3
// Header file: "PrPt.h"
//
// Contains the declaration of class PrPt.
a16 119
#include <SelPt.h>
#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class PrPt
//
// "Proportionate Routing Point"
// A SelPt for proportionate routing
// A PrPt represents an RtCand and a period at which proportionate routing is to
// be performed.
//
// Class Hierarchy:
//
// SelPt
//    PrPt
//
// Implemented in Routing.C.
//------------------------------------------------------------------------------

class WitPrPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrPt (WitRtCand *, WitPrBrPt *, WitPrCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrPt ();

      //------------------------------------------------------------------------
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual bool        hasResAlt      ();
      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual bool        splittable     ();   
      virtual void        getSortData    (WitPart * &, WitPeriod &);
      virtual void        tempAlterSel   ();
      virtual void        restoreSel     (WitSelCand *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool active ();
         //
         // Returns true, iff myRtCand_ is currently active for proportionate
         // explosions in the period for this PrPt.
         // Note that funcActive () and active () return the same value, except
         // in low-pri prop-rt mode.

      void setActive (bool theValue);
         //
         // Sets the "active for prop-rt status" of myRtCand_ in the period
         // for this PrPt to theValue;

      bool potActive ();
         //
         // Returns true, iff proportionate routing thru theRtCand in thePer has
         // not been permanently ruled out.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRtCand *,            myRtCand)
      accessFunc (WitPrBrPt *,            myPrBrPt)
      accessFunc (const WitRtCandStack &, activeRtCands)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void recSplit ();
      virtual void recUnsplit ();
         //
         // Overrides from class SelPt.

      void printPermDeact ();
         //
         // Prints an indication that proportionate routing thru myRtCand_ in
         // the period for this PrPt has been permanently ruled out.

      noCopyCtorAssign (WitPrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtCand * const myRtCand_;
         //
         // The RtCand represented by this PrPt.

      WitPrBrPt * const myPrBrPt_;
         //
         // ThePrBrPt associated with this PrPt.

      WitPrCoord * const myPrCoord_;
         //
         // The PrCoord that owns this PrPt.

      WitRtCandStack activeRtCands_;
         //
         // The set of RtCands that are active just before the selection is
         // split at this PrPt.
         // Used only in selection splitting mode.
   };

@


1.17
log
@Low-Pri Prop-Rt.
@
text
@d135 1
a135 1
         // Used only selection splitting mode.
@


1.16
log
@Low-Pri Prop-Rt.
@
text
@d87 1
a87 1
         // not been ruled out by a fundamental shortage.
d108 1
a108 1
      void printDeact ();
d111 1
a111 2
         // the period for this PrPt has been ruled out by a fundamental
         // shortage.
@


1.15
log
@Low-Pri Prop-Rt.
@
text
@d84 5
a94 1
      accessFunc (bool,                   fundActive)
a131 5
      bool fundActive_;
         //
         // True, iff proportionate routing thru theRtCand in thePer has not
         // been ruled out by a fundamental shortage.

@


1.14
log
@Low-Pri Prop-Rt.
@
text
@d46 1
a46 1
      WitPrPt (WitRtCand *, WitPrBrPt *);
d76 2
d90 1
d104 6
d124 9
@


1.13
log
@Continued implementation of proportionate routing.
@
text
@d75 6
a80 1
         // explosions in the expPer for this PrPt.
@


1.12
log
@Continued implementation of proportionate routing.
@
text
@a71 5
      double normExpShare ();
         //
         // Returns the normalized explosion share for this PrPt.
         // Valid only if active  () is true.

a76 8
      void setActive (bool);
         //
         // Makes this PrPt active or inactive.

      void print ();
         //
         // Prints the current state of this PrPt.

d81 3
a83 3
      accessFunc (WitRtCand *,          myRtCand)
      accessFunc (WitPrBrPt *,          myPrBrPt)
      accessFunc (const WitPrPtStack &, activePrPts)
d110 1
a110 1
      WitPrPtStack activePrPts_;
d112 2
a113 2
         // The set of PrPts that are active just before the selection is split
         // at this PrPt.
@


1.11
log
@Continued implementation of proportionate routing.
@
text
@a64 1
      virtual WitPeriod   myPeriod       ();
@


1.10
log
@Continued implementation of proportionate routing.
@
text
@d95 1
@


1.9
log
@Continued implementation of proportionate routing.
@
text
@d20 1
d83 4
d95 2
a96 1
      accessFunc (WitPrBrPt *, myPrBrPt)
d104 5
d122 6
@


1.8
log
@Continued implementation of proportionate routing.
@
text
@d15 2
d18 94
@


1.7
log
@Continued implementation of proportionate routing.
@
text
@a14 2
//
// Contains the declaration of class PrPt.
a15 94

#include <SelPt.h>

//------------------------------------------------------------------------------
// Class PrPt
//
// "Proportionate Routing Point"
// A SelPt for proportionate routing
// A PrPt represents an OrCand and a period at which proportionate routing is to
// be performed.
//
// Class Hierarchy:
//
// SelPt
//    PrPt
//
// Implemented in PropRt.C.
//------------------------------------------------------------------------------

class WitPrPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPrPt (WitOrCand *, WitPrBrPt *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPrPt ();

      //------------------------------------------------------------------------
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual bool        hasResAlt      ();
      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual bool        splittable     ();   
      virtual void        getSortData    (WitPart * &, WitPeriod &);
      virtual WitPeriod   myPeriod       ();
      virtual void        tempAlterSel   ();
      virtual void        restoreSel     (WitSelCand *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      double normExpShare ();
         //
         // Returns the normalized explosion share for this PrPt.
         // Valid only if active  () is true.

      bool active ();
         //
         // Returns true, iff myOrCand_ is currently active for proportionate
         // explosions in the expPer for this PrPt.

      void print ();
         //
         // Prints the current state of this PrPt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPrBrPt *, myPrBrPt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitOrCand * const myOrCand_;
         //
         // The OrCand represented by this PrPt.

      WitPrBrPt * const myPrBrPt_;
         //
         // ThePrBrPt associated with this PrPt.
   };
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@d26 1
a26 1
// A PrPt represents an RtCand and a period at which proportionate routing is to
d45 1
a45 1
      WitPrPt (WitRtCand *, WitPrBrPt *);
d79 1
a79 1
         // Returns true, iff myRtCand_ is currently active for proportionate
d104 1
a104 1
      WitRtCand * const myRtCand_;
d106 1
a106 1
         // The RtCand represented by this PrPt.
@


1.5
log
@Continued implementation of proportionate routing.
@
text
@d75 1
a75 1
         // Valid only if included () is true.
d77 1
a77 1
      bool included ();
d79 1
a79 1
         // Returns true, iff myRtCand_ is to be included in proportionate
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@d26 2
a27 2
// A PrPt represents a BopEntry and explosion period at which proportionate
// routing is to be performed.
d45 1
a45 1
      WitPrPt (WitBopEntry *, WitPrBrPt *);
d79 1
a79 1
         // Returns true, iff myBopEnt_ is to be included in proportionate
d82 4
d104 1
a104 1
      WitBopEntry * const myBopEnt_;
d106 1
a106 1
         // The BopEntry represented by this PrPt.
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@d26 1
a26 1
// A PrPt represents a BopEntry and explosion period at which proprtionate
d72 5
d80 7
a86 1
         // explosions in myExpPer_.
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d45 1
a45 1
      WitPrPt (WitBopEntry *, WitPeriod, WitPrSite *);
a76 4
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

d93 1
a93 5
      const WitPeriod myExpPer_;
         //
         // The explosion period represented by this PrPt.

      WitPrSite * const myPrSite_;
d95 1
a95 1
         // ThePrSite associated with this PrPt.
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d27 1
a27 1
// routing occurs.
d45 1
a45 1
      WitPrPt (WitBopEntry *, WitPeriod, WitPrMgr *);
d101 1
a101 1
      WitPrMgr * const myPrMgr_;
d103 1
a103 1
         // The PrMgr that owns this PrPt.
@

