head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2005.01.10.22.34.47;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2004.12.22.22.27.10;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.06.22.38.15;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Low-Pri Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PoBrPtH
#define PoBrPtH

//------------------------------------------------------------------------------
// Header file: "PoBrPt.h"
//
// Contains the declaration of class PoBrPt.
//------------------------------------------------------------------------------

#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class PoBrPt
//
// "Proportionate Routing Branching Point"
//
// A PoBrPt represents an RtSite and a period at which proportionate routing is
// to be performed.
// Old Version
//
// Implemented in PropOt.C.
//------------------------------------------------------------------------------

class WitPoBrPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPoBrPt (WitRtSite *, WitPeriod, WitPoCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPoBrPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool singleton ();
         //
         // Returns true, iff there is exactly one RtCand for myRtSite_
         // currently active for proportionate explosions in myPer_.

      void print ();
         //
         // Prints the current state of this PoBrPt.

      void recSplit (WitPoPt * thePoPt);
         //
         // Records the fact that the selection at thePoPt is splitting.

      void recUnsplit (WitPoPt * thePoPt);
         //
         // Records the fact that the selection at thePoPt is unsplitting.

      void findActiveRtCands (WitRtCandStack & theRtCands);
         //
         // Sets theRtCands to be the set of all active RtCands for this PoBrPt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRtSite *,                   myRtSite)
      accessFunc (WitPeriod,                     myPer)
      accessFunc (const WitObjStack <WitPoPt> &, splitPoPts)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPoBrPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtSite * const myRtSite_;
         //
         // The RtSite represented by this PoBrPt.

      const WitPeriod myPer_;
         //
         // The period represented by this PoBrPt.

      WitPoCoord * const myPoCoord_;
         //
         // The PoCoord that owns this PoBrPt.

      WitObjStack <WitPoPt> splitPoPts_;
         //
         // The ordered list of split PoPts for this PoBrPt.
         // Used only selection splitting mode.
   };

#endif
@


1.2
log
@Low-Pri Prop-Rt.
@
text
@@


1.1
log
@Low-Pri Prop-Rt.
@
text
@d28 1
@

