head	1.6;
access;
symbols
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4;
locks; strict;
comment	@ * @;


1.6
date	2005.01.28.19.34.27;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2004.05.12.15.25.57;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.16.18.48.25;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.06.21.13.28;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.31.23.18.57;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.31.21.44.53;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Tie Breaking Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipSysMgrH
#define PipSysMgrH

//------------------------------------------------------------------------------
// Header file: "PipSysMgr.h"
//
// Contains the declaration of class Pip::SysMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PipPartAtt.h>

//------------------------------------------------------------------------------
// Namespace Pip.
//
// Namespace for the Post-Implosion Pegging Subsystem.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Class Pip::SysMgr
// "Post-Implosion Pegging System Manager"
// Owner, Manager and Public Interface of the Post-Implosion Pegging Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    Pip::SysMgr
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

namespace WitPip
{

class SysMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      SysMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~SysMgr ();

      //------------------------------------------------------------------------
      // Public member functions relating to the shipment sequence.
      //------------------------------------------------------------------------

      void clearShipSeq ();
         //
         // Clears the shipment sequence.

      void appendToShipSeq (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
         //
         // Appends the args to the end of the shipment sequence.

      void getShipSeq (WitDemTripStack & theShipSeq);
         //
         // Sets theShipSeq to the (forward) shipment sequence.

      void displayShipSeq ();
         //
         // Displays the shipment sequence.

      void copyShipSeq (SysMgr * theSubSysMgr);
         //
         // Copies the shipment sequence from theSubSysMgr into this SubSysMgr.

      void writeShipSeqData ();
         //
         // Writes the shipment sequence in the input data file format.

      void setShipSeqShipPer (WitPeriod);

      WitPeriod shipSeqShipPer ();
         //
         // Returns the shipment period to be used by readData when appending to
         // the shipment sequence.

      //------------------------------------------------------------------------
      // Public member functions relating to the pegging.
      //------------------------------------------------------------------------

      void buildPegging ();
         //
         // Builds the pegging.

      void clearPegging ();
         //
         // Clears the pegging, if any.

      void printPegging ();
         //
         // Prints the pegging, if any.

      inline bool peggingExists ()
         {
         return (myPegMgr_ != NULL);
         }

      //------------------------------------------------------------------------
      // get---PegTrips functions.
      // Each of these functions sets its last arg to a pegging for theDemand
      // and shipPer, where the peggings are for:
      //
      //    execVol
      //    subVol
      //    supplyVol
      //    sideVol
      //    prodVol
      //    consVol
      //------------------------------------------------------------------------

      void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips);

      void getSubVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitSubTripStack & subVolTrips);

      void getPartPegTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            PartAtt            thePartAtt,
            WitPartTripStack & thePegTrips);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      accessNonNull (PegMgr *, myPegMgr)

      noCopyCtorAssign (SysMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      PegMgr * myPegMgr_;
         //
         // The PegMgr owned by this SysMgr when a pegging exists;
         // otherwise NULL.

      SeqMgr * mySeqMgr_;
         //
         // The SeqMgr owned by this SysMgr.
   };

// Leaving namespace Pip.
}   

#endif
@


1.5
log
@PIP.
@
text
@@


1.4
log
@Continued implementation of PIP.
@
text
@d36 1
a36 1
//    SysMgr
@


1.3
log
@Continued implementation of PIP.
@
text
@d91 7
@


1.2
log
@Added the PIP shipment sequence to the output of displayData.
@
text
@d87 4
@


1.1
log
@Continued implementation of PIP.
@
text
@d61 1
a61 1
      // Other public member functions.
d79 4
d86 4
@

