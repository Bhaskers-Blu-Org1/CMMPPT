head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2005.01.28.19.34.27;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2004.05.14.22.03.19;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.14.15.08.49;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.14.15.05.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.12.15.25.57;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Tie Breaking Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipPrinterH
#define PipPrinterH

//------------------------------------------------------------------------------
// Header file: "PipPrinter.h"
//
// Contains the declaration of class Pip::Printer.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <ObjStack.h>
#include <PipPartAtt.h>

//------------------------------------------------------------------------------
// Class Pip::Printer
//
// Responsible for printing the Post-Implosion Pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    Pip::Printer
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

namespace WitPip
{

class Printer: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      Printer (PegMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~Printer ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void findTargSeq ();
         //
         // Computes myTargSeq_.

      void prtExecVolPip ();
      void prtSubVolPip  ();
         //
         // Prints the execVol pegging.
         // Prints the subvol  pegging.

      void prtPartPip (PartAtt thePartAtt, const char * theAttName);
         //
         // Prints the pegging for thePartAtt.

      void printTargID (Targ * & theTarg);
         //
         // Prints the ID of theTarg and sets theTarg to NULL.
         // No-op, if theTarg is NULL.

      accessWrapper (FILE *, solnFile, myProblem ())

      noCopyCtorAssign (Printer);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      PegMgr * const myPegMgr_;
         //
         // The PegMgr that owns this Printer.

      WitObjStack <Targ> myTargSeq_;
         //
         // The set of all Targs corresponding to (Demand, shipPer) pairs in
         // the shipment sequence, listed in order of first appearance.
   };

// Leaving namespace Pip.
}   

#endif
@


1.4
log
@PIP.
@
text
@@


1.3
log
@PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class Pip::OldPrtr.
d20 1
a21 2
#include <PtrSched.h>
#include <ObjStack.h>
d24 1
a24 1
// Class Pip::OldPrtr
d31 1
a31 1
//    Pip::OldPrtr
d39 1
a39 1
class OldPrtr: public WitProbAssoc
d47 1
a47 1
      OldPrtr (PegMgr *);
d53 1
a53 1
      ~OldPrtr ();
d74 1
d77 1
d79 1
a79 5
      void prtSubVolPip ();
         //
         // Prints the subVol pegging.

      void prtPartPip (PartAtt thePartAtt);
d83 1
a83 22
      void getExecVolTargPairs (
            WitOperation *                theOpn,
            WitPeriod                     execPer,
            WitPairStack <Targ, double> & theTargPairs);
         //
         // Sets theTargPairs to be the transposed execVol pegging of theOpn in
         // execPer, i.e., the set of Pairs <theTarg, pegVol> such that
         // <theOpn, execVol, pegVol> is an execVol pegging triple for theTarg.
         // theTargPairs are the order defined by myTargSeq_.

      void getSubVolTargPairs (
            WitSubEntry *                 theSub,
            WitPeriod                     execPer,
            WitPairStack <Targ, double> & theTargPairs);
         //
         // Same as getExecVolTargPairs, but for SubEntry subVols.

      void getPartTargPairs (
            WitPart *                     thePart,
            WitPeriod                     thePer,
            PartAtt                       thePartAtt,
            WitPairStack <Targ, double> & theTargPairs);
d85 2
a86 1
         // Same as getExecVolTargPairs, but for thePartAtt.
d90 1
a90 1
      noCopyCtorAssign (OldPrtr);
d98 1
a98 1
         // The PegMgr that owns this OldPrtr.
@


1.2
log
@PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class Pip::Printer.
d25 1
a25 1
// Class Pip::Printer
d32 1
a32 1
//    Pip::Printer
d40 1
a40 1
class Printer: public WitProbAssoc
d48 1
a48 1
      Printer (PegMgr *);
d54 1
a54 1
      ~Printer ();
d113 1
a113 1
      noCopyCtorAssign (Printer);
d121 1
a121 1
         // The PegMgr that owns this Printer.
@


1.1
log
@PIP.
@
text
@d82 4
d100 10
@

