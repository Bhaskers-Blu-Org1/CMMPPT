head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2003.12.19.19.01.02;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2003.12.17.21.23.00;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.15.19.35.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.12.21.20.15;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.29.16.29.38;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.29.00.15.50;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.23.19.33.13;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.22.22.11.15;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.22.20.37.29;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Continued implementation of PIP.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipSrcMgrH
#define PipSrcMgrH

//------------------------------------------------------------------------------
// Header file: "PipSrcMgr.h"
//
// Contains the declaration of class template Pip::SrcMgr <SrcComp>
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <ObjStack.h>
#include <PtrSched.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class template Pip::SrcMgr <SrcComp>
//
// "Post-Implosion Pegging Source Manager"
//
// Responsible for owning the Src <SrcComp> instances for the PIP subsystem.
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

namespace WitPip
{

template <typename SrcComp> 
      class SrcMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      SrcMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~SrcMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      PegList <SrcComp> * newPegList ();
         //
         // Creates and returns a new PegList associated with this SrcMgr.

      Src <SrcComp> * mySrcFor (SrcComp * theSrcComp, WitPeriod thePer);
         //
         // Returns the Src owned by this SrcMgr for theSrcComp and thePer,
         // creating it, if necessary.

      void consolidate (WitPairStack <Src <SrcComp>, double> & thePegPairs);
         //
         // Merges the each set of PegPairs in thePairs that share the same
         // ScrComp into a single PegPair.

      void postBuild ();
         //
         // Takes actions appropriate at the conclusion of building the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (SrcMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <Src <SrcComp> > mySrcs_;
         //
         // The Srcs owned by this SrcMgr.

      WitPtrSched <SrcComp, Src <SrcComp> > mySrcSched_;
         //
         // mySrcSched_.myPtrAt (theSrcComp, thePer) is the Src owned by
         // this SrcMgr for theSrcComp in thePer.

      WitSchedule <SrcComp, double> consolSched_;
         //
         // Working Schedule for consolidate ().
         // consolidate () assumes that all entries in consolSched_ are 0 when
         // it begins; when it ends, it restores consolSched_ to this state.
   };

// Leaving namespace Pip.
}   

#endif
@


1.10
log
@Continued implementation of PIP.
@
text
@@


1.9
log
@Continued implementation of PIP.
@
text
@a66 4
      void clear ();
         //
         // Deletes all the Srcs owned by this SrcMgr.

@


1.8
log
@Continued implementation of PIP.
@
text
@d58 1
a58 1
      Pegging <SrcComp> * newPegging ();
d60 1
a60 1
         // Creates and returns a new Pegging associated with this SrcMgr.
@


1.7
log
@Continued implementation of PIP.
@
text
@d58 1
a58 1
      Peg <SrcComp> * newPeg ();
d60 1
a60 1
         // Creates and returns a new Peg associated with this SrcMgr.
@


1.6
log
@Continued implementation of PIP.
@
text
@d15 2
d25 1
a25 1
// Class template PIP::PipSrcMgr <SrcComp>
d29 1
a29 1
// Responsible for owning the PipSrc <SrcComp> instances for the PIP subsystem.
d34 1
a34 1
namespace WitPIP
d38 1
a38 1
      class WitPipSrcMgr: public WitProbAssoc
d46 1
a46 1
      WitPipSrcMgr (WitProblem *);
d52 1
a52 1
      ~WitPipSrcMgr ();
d58 1
a58 1
      WitPipPeg <SrcComp> * newPipPeg ();
d60 1
a60 1
         // Creates and returns a new PipPeg associated with this PipSrcMgr.
d62 1
a62 3
      WitPipSrc <SrcComp> * myPipSrcFor (
            SrcComp * theSrcComp,
            WitPeriod thePer);
d64 2
a65 2
         // Returns the PipSrc owned by this PipSrcMgr for theSrcComp and
         // thePer, creating it, if necessary.
d69 1
a69 1
         // Deletes all the PipSrcs owned by this PipSrcMgr.
d71 1
a71 2
      void consolidate (
            WitPairStack <WitPipSrc <SrcComp>, double> & thePegPairs);
d73 1
a73 1
         // Merges the each set of PegPairs in thePipPairs that share the same
d86 1
a86 1
      noCopyCtorAssign (WitPipSrcMgr);
d92 1
a92 1
      WitObjStack <WitPipSrc <SrcComp> > myPipSrcs_;
d94 1
a94 1
         // The PipSrcs owned by this PipSrcMgr.
d96 1
a96 1
      WitPtrSched <SrcComp, WitPipSrc <SrcComp> > myPipSrcSched_;
d98 2
a99 2
         // myPipSrcSched_.myPtrAt (theSrcComp, thePer) is the PipSrc owned by
         // this PipSrcMgr for theSrcComp in thePer.
d108 1
a108 1
// Leaving namespace PIP.
@


1.5
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d23 1
a23 1
// Class template PipSrcMgr <SrcComp>
d32 3
d108 3
@


1.4
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d74 4
d99 1
a99 1
      WitSchedule <SrcComp, double> consSched_;
d102 2
a103 2
         // consolidate () assumes that all entries in consSched_ are 0 when it
         // begins; when it completes, it restores consSched_ to this state.
@


1.3
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d19 2
d68 6
d95 5
@


1.2
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d51 4
@


1.1
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d58 4
@

