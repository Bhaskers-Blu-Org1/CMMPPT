head	1.14;
access;
symbols
	sce_4_00_20040201:1.12
	nextGenBranch:1.11.0.2
	nextGenRoot:1.11
	sce_3_30_20030627:1.11
	EndRw-branch:1.7.0.4
	Root-of-EndRw:1.7
	rwToStl:1.7.0.2
	latest_sce_3_10_20010924:1.3.0.6
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.3.0.4
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2004.03.20.00.12.11;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2004.03.16.23.29.49;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.25.23.49.55;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.15.21.01.19;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.13.22.22.08;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.02.23.40.40;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.02.22.18.27;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.11.18.53.08;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.10.18.02.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.08.19.21.50;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.03.23.16.38;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.40;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.49;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Double Precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef FlexVecRH
#define FlexVecRH

//------------------------------------------------------------------------------
// Header file: "FlexVecR.h"
//
// Contains the declaration of class template FlexVecRep <TheType>.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class template FlexVecRep <TheType>
//
// The representation of a OFlxVec <TheType>.
//
// Implemented in FlexVec.C.
//------------------------------------------------------------------------------

template <typename TheType> 
      class WitFlexVecRep: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFlexVecRep (WitProblem *, TheType initValue);
         //
         // initValue is the initial value of the representation.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitFlexVecRep ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitTVec <TheType> & myRepMadeVec ();
         //
         // Switches the representation to vector, if necessary, and returns it.

      inline TheType &           myRepMadeScal ();
         //
         // Switches the representation to scalar, if necessary, and returns it.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, repIsByVec)

      inline const WitTVec <TheType> & myVecRep () const
         {
         witAssert (repIsByVec ());

         return myVecRep_;
         }

      inline TheType myScalRep () const
         {
         witAssert (not repIsByVec ());

         return myScalRep_;
         }

      inline WitTVec <TheType> & myVecRep ();

      inline TheType & myScalRep ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void switchToVecRep ();
         //
         // Switches the representation from scalar (required) to vector.

      void switchToScalRep ();
         //
         // Switches the representation from vector (required) to scalar.

      noCopyCtorAssign (WitFlexVecRep);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool repIsByVec_;
         //
         // If true,  the OFlxVec is represented by a vector;
         // If false, the OFlxVec is represented by a scalar;

      WitTVec <TheType> myVecRep_;
         //
         // The vector representation of the OFlxVec.

      TheType myScalRep_;
         //
         // The scalar representation of the OFlxVec.
   };

//------------------------------------------------------------------------------
// Implementation of inlines.
//------------------------------------------------------------------------------

template <typename TheType> 
      inline WitTVec <TheType> & WitFlexVecRep <TheType>::myRepMadeVec ()
   {
   if (not repIsByVec ())
      switchToVecRep ();

   return myVecRep_;
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      inline TheType & WitFlexVecRep <TheType>::myRepMadeScal ()
   {
   if (repIsByVec ())
      switchToScalRep ();

   return myScalRep_;
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      inline WitTVec <TheType> & WitFlexVecRep <TheType>::myVecRep ()
   {
   witAssert (repIsByVec ());

   return myVecRep_;
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      inline TheType & WitFlexVecRep <TheType>::myScalRep ()
   {
   witAssert (not repIsByVec ());

   return myScalRep_;
   }

#endif
@


1.13
log
@Double Precision.
@
text
@@


1.12
log
@Continued implementation of post-implosion pegging.
@
text
@d24 1
a24 1
// The representation of a FlexVec <TheType>.
d106 2
a107 2
         // If true,  the FlexVec is represented by a vector;
         // If false, the FlexVec is represented by a scalar;
d111 1
a111 1
         // The vector representation of the FlexVec.
d115 1
a115 1
         // The scalar representation of the FlexVec.
@


1.11
log
@Various internal changes.
@
text
@d26 1
a26 1
// Implemented in FlexVecRI.h.
d117 44
@


1.10
log
@Various internal changes.
@
text
@d98 1
a98 1
      noCopyCtorAssignTemp (WitFlexVecRep, TheType);
@


1.9
log
@Internal changes.
@
text
@d29 1
a29 1
template <class TheType> 
@


1.8
log
@Internal changes.
@
text
@d75 1
a75 1
         witAssert (! repIsByVec ());
@


1.7
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d64 1
a64 1
      accessFunc (WitBoolean, repIsByVec)
d104 1
a104 1
      WitBoolean repIsByVec_;
d106 2
a107 2
         // If TRUE,  the FlexVec is represented by a vector;
         // If FALSE, the FlexVec is represented by a scalar;
@


1.6
log
@Continued implementation of single source.
@
text
@d16 1
a16 2
// Contains the declaration and implementation of class template
// FlexVecRep <TheType>.
d25 2
d66 15
a80 5
      inline const WitTVec <TheType> & myVecRep () const;
      inline       WitTVec <TheType> & myVecRep ();
         //
         // These two functions verify that the representation is vector and
         // then return it.
a81 1
      inline TheType   myScalRep () const;
a82 3
         //
         // These two functions verify that the representation is scalar and
         // then return it.
a116 113

//------------------------------------------------------------------------------
// Implementation of class template FlexVecRep <TheType>
//------------------------------------------------------------------------------

template <class TheType> 
      WitFlexVecRep <TheType>::WitFlexVecRep (
         WitProblem * theProblem,
         TheType      initValue):

      WitProbAssoc (theProblem),

      repIsByVec_  (witFALSE),
      myVecRep_    (),
      myScalRep_   (initValue)
   {
   }

//------------------------------------------------------------------------------

template <class TheType> 
      WitFlexVecRep <TheType>::~WitFlexVecRep ()
   {
   }

//------------------------------------------------------------------------------

template <class TheType> 
      inline WitTVec <TheType> & WitFlexVecRep <TheType>::myRepMadeVec ()
   {
   if (! repIsByVec ())
      switchToVecRep ();

   return myVecRep_;
   }

//------------------------------------------------------------------------------

template <class TheType> 
      inline TheType & WitFlexVecRep <TheType>::myRepMadeScal ()
   {
   if (repIsByVec ())
      switchToScalRep ();

   return myScalRep_;
   }

//------------------------------------------------------------------------------

template <class TheType> 
      inline const WitTVec <TheType> & WitFlexVecRep <TheType>::myVecRep ()
             const
   {
   witAssert (repIsByVec ());

   return myVecRep_;
   }

//------------------------------------------------------------------------------

template <class TheType> 
      inline WitTVec <TheType> & WitFlexVecRep <TheType>::myVecRep ()
   {
   witAssert (repIsByVec ());

   return myVecRep_;
   }

//------------------------------------------------------------------------------

template <class TheType> 
      inline TheType WitFlexVecRep <TheType>::myScalRep () const
   {
   witAssert (! repIsByVec ());

   return myScalRep_;
   }

//------------------------------------------------------------------------------

template <class TheType> 
      inline TheType & WitFlexVecRep <TheType>::myScalRep ()
   {
   witAssert (! repIsByVec ());

   return myScalRep_;
   }

//------------------------------------------------------------------------------

template <class TheType> 
      void WitFlexVecRep <TheType>::switchToVecRep ()
   {
   witAssert (! repIsByVec ());

   myVecRep_.allocate (myProblem (), myScalRep_);

   repIsByVec_ = witTRUE;
   }

//------------------------------------------------------------------------------

template <class TheType> 
      void WitFlexVecRep <TheType>::switchToScalRep ()
   {
   witAssert (repIsByVec ());

   myScalRep_ = myVecRep_[0];

   myVecRep_.clear ();

   repIsByVec_ = witFALSE;
   }
@


1.5
log
@Preliminary work on single source.
@
text
@d16 1
a16 1
// Contains the declaration and inline implementation of class template 
d37 1
a37 1
      inline WitFlexVecRep (WitProblem *, TheType initValue);
d45 1
a45 1
      inline ~WitFlexVecRep ();
d51 3
a53 12
      inline WitTVec <TheType> & myRepMadeVec ()
         {
         if (! repIsByVec ())
            switchToVecRep ();

         return myVecRep_;
         }

      inline TheType & myRepMadeScal ()
         {
         if (repIsByVec ())
            switchToScalRep ();
d55 3
a57 2
         return myScalRep_;
         }
d65 5
a69 3
      inline const WitTVec <TheType> & myVecRep () const
         {
         witAssert (repIsByVec ());
d71 5
a75 23
         return myVecRep_;
         }

      inline       WitTVec <TheType> & myVecRep ()
         {
         witAssert (repIsByVec ());

         return myVecRep_;
         }

      inline TheType   myScalRep () const
         {
         witAssert (! repIsByVec ());

         return myScalRep_;
         }

      inline TheType & myScalRep ()
         {
         witAssert (! repIsByVec ());

         return myScalRep_;
         }
d83 1
a83 1
      inline void switchToVecRep ();
d87 1
a87 1
      inline void switchToScalRep ();
d112 2
d116 1
a116 1
      inline WitFlexVecRep <TheType>::WitFlexVecRep (
d131 19
a149 1
      inline WitFlexVecRep <TheType>::~WitFlexVecRep ()
d151 45
d201 1
a201 1
      inline void WitFlexVecRep <TheType>::switchToVecRep ()
d213 1
a213 1
      inline void WitFlexVecRep <TheType>::switchToScalRep ()
@


1.4
log
@Continued preliminary work on single source.
@
text
@d16 2
a17 1
// Contains the declaration of generic class FlexVecRep (TheType).
d23 1
a23 1
// Generic Class FlexVecRep (TheType)
d25 1
a25 1
// The representation of a FlexVec (TheType).
d28 122
d151 6
a156 2
// Generic class declaration macro.
// Invoked by the declaration macro for FlexVec (TheType) in FlexVec.h.
d159 23
a181 110
#define WitFlexVecRepdeclare(TheType)                                          \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitFlexVecRep (TheType): public WitProbAssoc                             \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitFlexVecRep (TheType) (WitProblem * theProblem, TheType initValue);    \
         /*                                                                  */\
         /* ProbAssoc <<< theProblem.                                        */\
         /* initValue is the initial value of the representation.            */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitFlexVecRep (TheType) ();                                             \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitTVec <TheType> & myRepMadeVec ()                               \
         {                                                                     \
         if (! repIsByVec ())                                                  \
            switchToVecRep ();                                                 \
                                                                               \
         return myVecRep_;                                                     \
         }                                                                     \
                                                                               \
      inline TheType & myRepMadeScal ()                                        \
         {                                                                     \
         if (repIsByVec ())                                                    \
            switchToScalRep ();                                                \
                                                                               \
         return myScalRep_;                                                    \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Data access functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      accessFunc (WitBoolean, repIsByVec)                                      \
                                                                               \
      inline const WitTVec <TheType> & myVecRep () const                       \
         {                                                                     \
         witAssert (repIsByVec ());                                            \
                                                                               \
         return myVecRep_;                                                     \
         }                                                                     \
                                                                               \
      inline       WitTVec <TheType> & myVecRep ()                             \
         {                                                                     \
         witAssert (repIsByVec ());                                            \
                                                                               \
         return myVecRep_;                                                     \
         }                                                                     \
                                                                               \
      inline TheType   myScalRep () const                                      \
         {                                                                     \
         witAssert (! repIsByVec ());                                          \
                                                                               \
         return myScalRep_;                                                    \
         }                                                                     \
                                                                               \
      inline TheType & myScalRep ()                                            \
         {                                                                     \
         witAssert (! repIsByVec ());                                          \
                                                                               \
         return myScalRep_;                                                    \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void switchToVecRep ();                                                  \
         /*                                                                  */\
         /* Switches the representation from scalar (required) to vector.    */\
                                                                               \
      void switchToScalRep ();                                                 \
         /*                                                                  */\
         /* Switches the representation from vector (required) to scalar.    */\
                                                                               \
      noCopyCtorAssign (WitFlexVecRep (TheType));                              \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitBoolean repIsByVec_;                                                  \
         /*                                                                  */\
         /* If TRUE,  the FlexVec is represented by a vector;                */\
         /* If FALSE, the FlexVec is represented by a scalar;                */\
                                                                               \
      WitTVec <TheType> myVecRep_;                                             \
         /*                                                                  */\
         /* The vector representation of the FlexVec.                        */\
                                                                               \
      TheType myScalRep_;                                                      \
         /*                                                                  */\
         /* The scalar representation of the FlexVec.                        */\
   };                                                                          \
@


1.3
log
@Refactoring for selection splitting.
@
text
@d59 1
a59 1
      inline WitTVec (TheType) & myRepMadeVec ()                               \
d81 1
a81 1
      inline const WitTVec (TheType) & myVecRep () const                       \
d88 1
a88 1
      inline       WitTVec (TheType) & myVecRep ()                             \
d134 1
a134 1
      WitTVec (TheType) myVecRep_;                                             \
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d123 1
a123 3
      copyCtorAndAssignment (WitFlexVecRep (TheType));                         \
         /*                                                                  */\
         /* Prevents unintentional copying and assignment.                   */\
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
