head	1.27;
access;
symbols
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.14
	sce_4_05_20040511:1.14
	sce_4_00_20040201:1.13
	nextGenBranch:1.13.0.2
	nextGenRoot:1.13
	sce_3_30_20030627:1.13
	EndRw-branch:1.10.0.4
	Root-of-EndRw:1.10
	rwToStl:1.10.0.2
	latest_sce_3_10_20010924:1.4.0.2
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.3.0.4
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2007.06.26.19.06.22;	author rjw;	state dead;
branches;
next	1.26;

1.26
date	2007.06.25.23.12.23;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.06.22.19.04.04;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.03.08.17.02.55;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.02.28.22.15.48;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.01.29.23.35.16;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.01.29.22.34.13;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.10.03.15.09.00;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.18.18.43.39;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.08.17.19.36.40;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.08.16.19.51.23;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.34.08;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.04.19.53.51;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.06.23.27.10;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.23.23.24.36;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.23.19.13.23;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.22.18.43;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.11.18.53.13;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.06.19.56.11;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.29.23.06.29;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.26.22.49.07;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.26.20.16.09;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.23.21.00.41;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.01.19.23.34;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.46;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.43;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.28;	author wit;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
//
//------------------------------------------------------------------------------

#ifndef PerVarH
#define PerVarH

//------------------------------------------------------------------------------
// Header file: "PerVar.h"
//
// Contains the declaration the following classes:
//
//    PeriodVar
//    ScrapVar
//    NonSubVar
//    SubVar
//    ShipVar
//    SlbvVar
//    BoundedVar
//    ExecVar
//    StockVar
//    CumShipVar
//------------------------------------------------------------------------------

#include <OptVar.h>

//------------------------------------------------------------------------------
// class PeriodVar
// An OptVar associated with a period in the implosion problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             ScrapVar
//             NonSubVar
//             SubVar
//             ShipVar
//             SlbvVar
//             BoundedVar
//                ExecVar
//                StockVar
//                CumShipVar
//------------------------------------------------------------------------------

class WitPeriodVar: public WitOptVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitPeriodVar (WitDetImpOP *, WitPeriod);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitPeriodVar ();

      //-----------------------------------------------------------------------
      // Data access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitPeriod, myPeriod)

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline WitDetImpOP * myDetImpOP () const
         {
         return reinterpret_cast <WitDetImpOP *> (myOptProb ());
         }

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitPeriodVar);

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printSource () const;

      //-----------------------------------------------------------------------
      // Private pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printItem () const = 0;
         //
         // Prints to the optProbFile text identifying the non-period
         // data from which this PeriodVar was generated.

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPeriod myPeriod_;
         //
         // The period with which this PeriodVar is associated.
   };

//------------------------------------------------------------------------------
// class ScrapVar
// A scrap variable in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             ScrapVar
//------------------------------------------------------------------------------

class WitScrapVar: public WitPeriodVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitScrapVar (WitPart *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitScrapVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double indepInitValue () const;

      virtual double primaryCoeffVal () const;
      virtual double     revCoeffVal () const;

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitPart *, myPart)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitScrapVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitPart * const myPart_;
         //
         // The Part with which this ScrapVar is associated.
   };

//------------------------------------------------------------------------------
// class NonSubVar
// A non-substitution variable in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             NonSubVar
//------------------------------------------------------------------------------

class WitNonSubVar: public WitPeriodVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitNonSubVar (WitBomEntry *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitNonSubVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double indepInitValue () const;

      virtual double    invCoeffVal () const;

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitBomEntry *, myBomEnt)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitNonSubVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitBomEntry * const myBomEnt_;
         //
         // The BomEntry with which this NonSubVar is associated.
   };

//------------------------------------------------------------------------------
// class SubVar
// A substitution variable in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             SubVar
//------------------------------------------------------------------------------

class WitSubVar: public WitPeriodVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitSubVar (WitSubEntry *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitSubVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double  indepInitValue () const;

      virtual double primaryCoeffVal () const;
      virtual double     revCoeffVal () const;
      virtual double     invCoeffVal () const;
      virtual double     subCoeffVal () const;

      virtual bool   isAnIntVar      () const;

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitSubEntry *, mySub)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitSubVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitSubEntry * const mySub_;
         //
         // The SubEntry with which this SubVar is associated.
   };

//------------------------------------------------------------------------------
// class ShipVar
// A shipment variable in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             ShipVar
//------------------------------------------------------------------------------

class WitShipVar: public WitPeriodVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitShipVar (WitDemand *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitShipVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void compBounds ();
         //
         // Computes the bounds for this ShipVar.
         // If shipLateAllowed:
         //    [0, +infinity)
         // Else:
         //    [0, demandVol]

      virtual double  indepInitValue () const;

      virtual double primaryCoeffVal () const;
      virtual double     revCoeffVal () const;

      virtual bool   isAnIntVar      () const;

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitDemand *, myDemand)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitShipVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitDemand * const myDemand_;
         //
         // The Demand with which this ShipVar is associated.
   };

//------------------------------------------------------------------------------
// class SlbvVar
// A soft lower bound violation variable in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             SlbvVar
//------------------------------------------------------------------------------

class WitSlbvVar: public WitPeriodVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitSlbvVar (WitBoundedVar *, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitSlbvVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double boundsCoeffVal () const;

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      inline const WitBoundSet * myBoundSet () const;
         //
         // Returns myBoundedVar_->myBoundSet ().
         // Implemented in this file just below class BoundedVar.

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitSlbvVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitBoundedVar * const myBoundedVar_;
         //
         // The BoundedVar to which this SlbvVar applies.
   };

//------------------------------------------------------------------------------
// class BoundedVar
// A variable with user-specified bounds in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             BoundedVar
//                ExecVar
//                StockVar
//                CumShipVar
//------------------------------------------------------------------------------

class WitBoundedVar: public WitPeriodVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitBoundedVar (WitDetImpOP *, WitPeriod);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitBoundedVar ();

      //-----------------------------------------------------------------------
      // Public pure virtual function members.
      //-----------------------------------------------------------------------

      virtual const WitBoundSet * myBoundSet () const = 0;
         //
         // Returns the BoundSet that bounds this BoundedVar.

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void compBounds ();
         //
         // Computes the bounds for this BoundedVar.

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      double hardLB () const;
         //
         // Hard lower bound:         0.0 <= hardLB ()  <  +infinity.

      double softLB () const;
         //
         // Soft lower bound:         0.0 <= softLB ()  <  +infinity.

      double hardUB () const;
         //
         // Hard upper bound:         0.0 <= hardUB ()  <= +infinity.

      bool needsAnSlbvVar () const;
         //
         // Returns true, iff an SlbvVar should be generated for this
         // BoundedVar.

      void printBoundInfo ();
         //
         // Prints bound information of this BoundedVar to optProbFile.

      void printSoln ();
         //
         // Prints the optimization solution associated with this BoundedVar to
         // solnFile.

   protected:

      //-----------------------------------------------------------------------
      // Protected virtual member functions.
      //-----------------------------------------------------------------------

      virtual void compSpecBounds ();
         //
         // Computes the bounds for this BoundedVar other than those derived
         // from myBoundSet_.
         // The base class implementation computes the bounds as [0, infinity).

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitBoundedVar);
   };

//------------------------------------------------------------------------------
// Implementation of inline functions that depend on class BoundedVar.
//------------------------------------------------------------------------------

inline const WitBoundSet * WitSlbvVar::myBoundSet () const
   {
   return myBoundedVar_->myBoundSet ();
   }

//------------------------------------------------------------------------------
// class ExecVar
// An execution variable in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             BoundedVar
//                ExecVar
//------------------------------------------------------------------------------

class WitExecVar: public WitBoundedVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitExecVar (WitOperation *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitExecVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double  indepInitValue () const;

      virtual double primaryCoeffVal () const;
      virtual double     revCoeffVal () const;
      virtual double     invCoeffVal () const;

      virtual bool       isAnIntVar () const;

      virtual const WitBoundSet * myBoundSet () const;

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOperation *, myOperation)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitExecVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOperation * const myOperation_;
         //
         // The Operation with which this ExecVar is associated.
   };

//------------------------------------------------------------------------------
// class StockVar
// A stock variable in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             BoundedVar
//                StockVar
//------------------------------------------------------------------------------

class WitStockVar: public WitBoundedVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitStockVar (WitMaterial *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitStockVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double  indepInitValue () const;

      virtual double primaryCoeffVal () const;
      virtual double     invCoeffVal () const;

      virtual const WitBoundSet * myBoundSet () const;

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitMaterial *, myMaterial)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitStockVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitMaterial * const myMaterial_;
         //
         // The Material with which this StockVar is associated.
   };

//------------------------------------------------------------------------------
// class CumShipVar
// A cumulative shipment variable in the optimization problem.
//
// Class hierarchy:
//
//    OptProbEl
//       OptVar
//          PeriodVar
//             BoundedVar
//                CumShipVar
//------------------------------------------------------------------------------

class WitCumShipVar: public WitBoundedVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitCumShipVar (WitDemand *, WitPeriod, WitDetImpOP *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitCumShipVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double indepInitValue () const;

      virtual const WitBoundSet * myBoundSet () const;

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitDemand *, myDemand)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      virtual void compSpecBounds ();

      //-----------------------------------------------------------------------
      // Static private member functions.
      //-----------------------------------------------------------------------

      virtual double primaryCoeffVal () const;
      virtual double    servCoeffVal () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitCumShipVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitDemand * const myDemand_;
         //
         // The Demand with which this CumShipVar is associated.
   };

#endif
@


1.26
log
@Stochastic Implosion
@
text
@@


1.25
log
@Stochastic Implosion
@
text
@d577 1
a577 1
// A production variable in the optimization problem.
@


1.24
log
@[disallowed backlog]
@
text
@d60 1
a60 1
      WitPeriodVar (WitImpOptProb *, WitPeriod);
d78 1
a78 1
      inline WitImpOptProb * myImpOptProb () const
d80 1
a80 1
         return reinterpret_cast <WitImpOptProb *> (myOptProb ());
d135 1
a135 1
      WitScrapVar (WitPart *, WitPeriod, WitImpOptProb *);
d203 1
a203 1
      WitNonSubVar (WitBomEntry *, WitPeriod, WitImpOptProb *);
d270 1
a270 1
      WitSubVar (WitSubEntry *, WitPeriod, WitImpOptProb *);
d342 1
a342 1
      WitShipVar (WitDemand *, WitPeriod, WitImpOptProb *);
d420 1
a420 1
      WitSlbvVar (WitBoundedVar *, WitImpOptProb *);
d491 1
a491 1
      WitBoundedVar (WitImpOptProb *, WitPeriod);
d596 1
a596 1
      WitExecVar (WitOperation *, WitPeriod, WitImpOptProb *);
d670 1
a670 1
      WitStockVar (WitMaterial *, WitPeriod, WitImpOptProb *);
d741 1
a741 1
      WitCumShipVar (WitDemand *, WitPeriod, WitImpOptProb *);
@


1.23
log
@[disallowed backlog]
@
text
@d357 3
a359 1
         // If disAllowBacklog:
a360 2
         // Else:
         //    [0, +infinity)
@


1.22
log
@{backlog avoidance]
@
text
@d357 3
a359 1
         // If backlogAllowed:
a360 2
         // Else:
         //    [0, demandVol]
@


1.21
log
@[backlog avoidance]
@
text
@d354 1
a354 1
//    virtual void compBounds ();
@


1.20
log
@App controlled opt implosion.
@
text
@d354 8
@


1.19
log
@App controlled opt implosion.
@
text
@d103 1
a103 1
         // Prints to the modelFile text identifying the non-period
d117 1
a117 1
// A scrap variable in the optimization model.
d185 1
a185 1
// A non-substitution variable in the optimization model.
d252 1
a252 1
// A substitution variable in the optimization model.
d324 1
a324 1
// A shipment variable in the optimization model.
d394 1
a394 1
// A soft lower bound violation variable in the optimization model.
d462 1
a462 1
// A variable with user-specified bounds in the optimization model.
d530 1
a530 1
         // Prints bound information of this BoundedVar to ModelFile.
d543 1
a543 1
      virtual void compModelBounds ();
d569 1
a569 1
// A production variable in the optimization model.
d643 1
a643 1
// A stock variable in the optimization model.
d714 1
a714 1
// A cumulative shipment variable in the optimization model.
d765 1
a765 1
      virtual void compModelBounds ();
@


1.18
log
@Removed optimizing implosion with lot sizes.
@
text
@d38 1
a38 1
//    ModelEl
d60 1
a60 3
      WitPeriodVar (WitImpOM * theImpOM, WitPeriod t);
         //
         // myPeriod_ <-- t.
d78 1
a78 1
      inline WitImpOM * myImpOM () const
d80 1
a80 1
         return reinterpret_cast <WitImpOM *> (myOptModel ());
d121 1
a121 1
//    ModelEl
d135 1
a135 1
      WitScrapVar (WitPart * thePart, WitPeriod t, WitImpOM * theImpOM);
d189 1
a189 1
//    ModelEl
d203 1
a203 1
      WitNonSubVar (WitBomEntry * theBomEnt, WitPeriod t, WitImpOM * theImpOM);
d256 1
a256 1
//    ModelEl
d270 1
a270 1
      WitSubVar (WitSubEntry * theSub, WitPeriod t, WitImpOM * theImpOM);
d328 1
a328 1
//    ModelEl
d342 1
a342 1
      WitShipVar (WitDemand * theDemand, WitPeriod t, WitImpOM * theImpOM);
d398 1
a398 1
//    ModelEl
d412 1
a412 1
      WitSlbvVar (WitBoundedVar * theBoundedVar, WitImpOM * theImpOM);
d466 1
a466 1
//    ModelEl
d483 1
a483 1
      WitBoundedVar (WitImpOM * theImpOM, WitPeriod t);
d573 1
a573 1
//    ModelEl
d588 1
a588 1
      WitExecVar (WitOperation * theOpn, WitPeriod t, WitImpOM * theImpOM);
d647 1
a647 1
//    ModelEl
d662 1
a662 1
      WitStockVar (WitMaterial * theMat, WitPeriod t, WitImpOM * theImpOM);
d718 1
a718 1
//    ModelEl
d733 1
a733 1
      WitCumShipVar (WitDemand * theDemand, WitPeriod t, WitImpOM * theImpOM);
@


1.17
log
@Integrality constraints.
@
text
@a23 2
//    IlsMultVar
//    MlsMultVar
a45 2
//             IlsMultVar
//             MlsMultVar
a462 133
// class IlsMultVar
// An incLotSize multiplier variable in the optimization model.
//
// Class hierarchy:
//
//    ModelEl
//       OptVar
//          PeriodVar
//             IlsMultVar
//------------------------------------------------------------------------------

class WitIlsMultVar: public WitPeriodVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitIlsMultVar (WitOperation *, WitPeriod, WitImpOM *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitIlsMultVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual void   compBounds     ();
      virtual double indepInitValue () const;
      virtual bool   isAnIntVar     () const;

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOperation *, myOpn)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitIlsMultVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOperation * const myOpn_;
         //
         // The Operation with which this IlsMultVar is associated.
   };

//------------------------------------------------------------------------------
// class MlsMultVar
// A minLotSize multiplier variable in the optimization model.
//
// Class hierarchy:
//
//    ModelEl
//       OptVar
//          PeriodVar
//             MlsMultVar
//------------------------------------------------------------------------------

class WitMlsMultVar: public WitPeriodVar
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitMlsMultVar (WitOperation *, WitPeriod, WitImpOM *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitMlsMultVar ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual double indepInitValue () const;
      virtual bool   isAnIntVar     () const;

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitOperation *, myOpn)

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual const char * classText () const;

      virtual void printItem () const;

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitMlsMultVar);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitOperation * const myOpn_;
         //
         // The Operation with which this MlsMultVar is associated.
   };

//------------------------------------------------------------------------------
a640 4

      bool isAnIntVar_;
         //
         // true, iff this ExecVar is an integer variable.
@


1.16
log
@Updated the copyright date on all source files.
@
text
@d295 2
d365 2
@


1.15
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@Continued double precision.
@
text
@d109 1
a109 1
         // Prints to OptModel::modelFile () text identifying the non-period
@


1.13
log
@Altered 2 casts for MS compiler.
@
text
@d155 2
a156 2
      virtual float primaryCoeffVal () const;
      virtual float     revCoeffVal () const;
d223 1
a223 1
      virtual float     invCoeffVal () const;
d288 1
a288 1
      virtual double indepInitValue () const;
d290 4
a293 4
      virtual float primaryCoeffVal () const;
      virtual float     revCoeffVal () const;
      virtual float     invCoeffVal () const;
      virtual float     subCoeffVal () const;
d358 1
a358 1
      virtual double indepInitValue () const;
d360 2
a361 2
      virtual float primaryCoeffVal () const;
      virtual float     revCoeffVal () const;
d426 1
a426 1
      virtual float boundsCoeffVal () const;
d735 1
a735 1
      virtual double indepInitValue () const;
d737 3
a739 3
      virtual float primaryCoeffVal () const;
      virtual float     revCoeffVal () const;
      virtual float     invCoeffVal () const;
d813 1
a813 1
      virtual double indepInitValue () const;
d815 2
a816 2
      virtual float primaryCoeffVal () const;
      virtual float     invCoeffVal () const;
d910 2
a911 2
      virtual float primaryCoeffVal () const;
      virtual float    servCoeffVal () const;
@


1.12
log
@Replaced some C style casts with C++ style casts.
@
text
@d86 1
a86 1
         return static_cast <WitImpOM *> (myOptModel ());
@


1.11
log
@Internal changes.
@
text
@d86 1
a86 1
         return (WitImpOM *) myOptModel ();
@


1.10
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d494 3
a496 3
      virtual void       compBounds     ();
      virtual double     indepInitValue () const;
      virtual WitBoolean isAnIntVar     () const;
d561 2
a562 2
      virtual double     indepInitValue () const;
      virtual WitBoolean isAnIntVar     () const;
d658 1
a658 1
      WitBoolean needsAnSlbvVar () const;
d660 1
a660 1
         // Returns witTRUE, iff an SlbvVar should be generated for this
d741 1
a741 1
      virtual WitBoolean isAnIntVar () const;
d775 1
a775 1
      WitBoolean isAnIntVar_;
d777 1
a777 1
         // TRUE, iff this ExecVar is an integer variable.
@


1.9
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d25 1
d49 1
d494 1
d527 66
@


1.8
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d16 1
a16 1
// Contains the declaration the following hierarchy of classes:
d19 10
a28 9
//       ScrapVar
//       NonSubVar
//       SubVar
//       ShipVar
//       SlbvVar
//       BoundedVar
//          ExecVar
//          StockVar
//          CumShipVar
d36 16
d122 7
d190 7
d257 7
d327 7
d395 7
d461 66
d529 10
d636 8
d714 8
d785 8
@


1.7
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d30 1
a30 1
#include <OptModel.h>
a705 29

//------------------------------------------------------------------------------
// Macro implementClassText
//
// Implements the classText virtual member function for ModelElClass.
// The implemented function returns theClassText.
//------------------------------------------------------------------------------

#define implementClassText(ModelElClass, theClassText)                         \
                                                                               \
   const char * ModelElClass::classText () const                               \
      {                                                                        \
      return theClassText;                                                     \
      }                                                                        \

//------------------------------------------------------------------------------
// Macro implementPrintItem
//
// Implements the printItem virtual member function for ModelElClass.
// The implemented function invokes myImpOM's printItem on the ModelElClass's
// source item, sourceItem.
//------------------------------------------------------------------------------

#define implementPrintItem(ModelElClass, sourceItem)                           \
                                                                               \
   void ModelElClass::printItem () const                                       \
      {                                                                        \
      myImpOM ()->printItem (sourceItem);                                      \
      }                                                                        \
@


1.6
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d30 1
a30 1
#include <MpModel.h>
d34 1
a34 1
// An MpVar associated with a period in the implosion problem.
d37 1
a37 1
class WitPeriodVar: public WitMpVar
d45 1
a45 1
      WitPeriodVar (WitImpMp * theImpMp, WitPeriod t);
d65 1
a65 1
      inline WitImpMp * myImpMp () const
d67 1
a67 1
         return (WitImpMp *) myMpModel ();
d90 1
a90 1
         // Prints to MpModel::modelFile () text identifying the non-period
d104 1
a104 1
// A scrap variable in the MP model.
d115 1
a115 1
      WitScrapVar (WitPart * thePart, WitPeriod t, WitImpMp * theImpMp);
d165 1
a165 1
// A non-substitution variable in the MP model.
d176 1
a176 1
      WitNonSubVar (WitBomEntry * theBomEnt, WitPeriod t, WitImpMp * theImpMp);
d225 1
a225 1
// A substitution variable in the MP model.
d236 1
a236 1
      WitSubVar (WitSubEntry * theSub, WitPeriod t, WitImpMp * theImpMp);
d288 1
a288 1
// A shipment variable in the MP model.
d299 1
a299 1
      WitShipVar (WitDemand * theDemand, WitPeriod t, WitImpMp * theImpMp);
d349 1
a349 1
// A soft lower bound violation variable in the MP model.
d360 1
a360 1
      WitSlbvVar (WitBoundedVar * theBoundedVar, WitImpMp * theImpMp);
d410 1
a410 1
// A variable with user-specified bounds in the MP model.
d421 1
a421 1
      WitBoundedVar (WitImpMp * theImpMp, WitPeriod t);
d472 1
a472 1
         // Prints the MP solution associated with this BoundedVar to
d507 1
a507 1
// A production variable in the MP model.
d518 1
a518 1
      WitExecVar (WitOperation * theOpn, WitPeriod t, WitImpMp * theImpMp);
d577 1
a577 1
// A stock variable in the MP model.
d588 1
a588 1
      WitStockVar (WitMaterial * theMat, WitPeriod t, WitImpMp * theImpMp);
d640 1
a640 1
// A cumulative shipment variable in the MP model.
d651 1
a651 1
      WitCumShipVar (WitDemand * theDemand, WitPeriod t, WitImpMp * theImpMp);
d725 1
a725 1
// The implemented function invokes myImpMp's printItem on the ModelElClass's
d733 1
a733 1
      myImpMp ()->printItem (sourceItem);                                      \
@


1.5
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d536 2
d569 4
@


1.4
log
@Continued development of selection splitting for multi=exec.
@
text
@d30 1
a30 1
#include <LpModel.h>
d34 1
a34 1
// An LpVar associated with a period in the implosion problem.
d37 1
a37 1
class WitPeriodVar: public WitLpVar
d45 1
a45 1
      WitPeriodVar (WitImpLp * theImpLp, WitPeriod t);
d65 1
a65 1
      inline WitImpLp * myImpLp () const
d67 1
a67 1
         return (WitImpLp *) myLpModel ();
d90 1
a90 1
         // Prints to LpModel::modelFile () text identifying the non-period
d104 1
a104 1
// A scrap variable in the LP model.
d115 1
a115 1
      WitScrapVar (WitPart * thePart, WitPeriod t, WitImpLp * theImpLp);
d165 1
a165 1
// A non-substitution variable in the LP model.
d176 1
a176 1
      WitNonSubVar (WitBomEntry * theBomEnt, WitPeriod t, WitImpLp * theImpLp);
d225 1
a225 1
// A substitution variable in the LP model.
d236 1
a236 1
      WitSubVar (WitSubEntry * theSub, WitPeriod t, WitImpLp * theImpLp);
d288 1
a288 1
// A shipment variable in the LP model.
d299 1
a299 1
      WitShipVar (WitDemand * theDemand, WitPeriod t, WitImpLp * theImpLp);
d349 1
a349 1
// A soft lower bound violation variable in the LP model.
d360 1
a360 1
      WitSlbvVar (WitBoundedVar * theBoundedVar, WitImpLp * theImpLp);
d410 1
a410 2
// A variable with user-specified bounds in the LP model.
// This is an ABC.
d421 1
a421 1
      WitBoundedVar (WitImpLp * theImpLp, WitPeriod t);
d472 1
a472 1
         // Prints the LP solution associated with this BoundedVar to
d507 1
a507 1
// A production variable in the LP model.
d518 1
a518 1
      WitExecVar (WitOperation * theOpn, WitPeriod t, WitImpLp * theImpLp);
d571 1
a571 1
// A stock variable in the LP model.
d582 1
a582 1
      WitStockVar (WitMaterial * theMat, WitPeriod t, WitImpLp * theImpLp);
d634 1
a634 1
// A cumulative shipment variable in the LP model.
d645 1
a645 1
      WitCumShipVar (WitDemand * theDemand, WitPeriod t, WitImpLp * theImpLp);
d719 1
a719 1
// The implemented function invokes myImpLp's printItem on the ModelElClass's
d727 1
a727 1
      myImpLp ()->printItem (sourceItem);                                      \
@


1.3
log
@Refactoring for selection splitting.
@
text
@d196 1
a196 1
      accessFunc (WitBomEntry *, myBomEntry)
d218 1
a218 1
      WitBomEntry * const myBomEntry_;
d259 1
a259 1
      accessFunc (WitSubEntry *, mySubEntry)
d281 1
a281 1
      WitSubEntry * const mySubEntry_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d76 1
a76 3
      copyCtorAndAssignment (WitPeriodVar);
         //
         // Prevents unintentional copying and assignment.
d152 1
a152 3
      copyCtorAndAssignment (WitScrapVar);
         //
         // Prevents unintentional copying and assignment.
d212 1
a212 3
      copyCtorAndAssignment (WitNonSubVar);
         //
         // Prevents unintentional copying and assignment.
d275 1
a275 3
      copyCtorAndAssignment (WitSubVar);
         //
         // Prevents unintentional copying and assignment.
d336 1
a336 3
      copyCtorAndAssignment (WitShipVar);
         //
         // Prevents unintentional copying and assignment.
d397 1
a397 3
      copyCtorAndAssignment (WitSlbvVar);
         //
         // Prevents unintentional copying and assignment.
d494 1
a494 3
      copyCtorAndAssignment (WitBoundedVar);
         //
         // Prevents unintentional copying and assignment.
d559 1
a559 3
      copyCtorAndAssignment (WitExecVar);
         //
         // Prevents unintentional copying and assignment.
d622 1
a622 3
      copyCtorAndAssignment (WitStockVar);
         //
         // Prevents unintentional copying and assignment.
d691 1
a691 3
      copyCtorAndAssignment (WitCumShipVar);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
