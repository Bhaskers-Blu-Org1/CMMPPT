head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.02.18.00.05.24;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2004.02.14.00.45.35;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Continued double precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RealOutArgH
#define RealOutArgH

//------------------------------------------------------------------------------
// Header file: "RealOutArg.h"
//
// Contains the declaration of class Wit::RealOutArg.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class RealOutArg
//
// "Real Output Argument"
//
// Provides a uniform interface (independent of precision mode) for an argument
// to an API function. The underlying argument is a pointer to a scalar
// real-valued variable belonging to the application program. Specifically,
// the underlying argument is of the following type:
//
//    float  *, in single precision mode
//    double *, in double precision mode
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       RealOutArg.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type float * and double *. These are called "underlying arguments".
//    The corresponding variables in the application program are of type float
//       and double. These are called "application variables".
//
// Implemented in RealArgs.C.
//------------------------------------------------------------------------------

namespace Wit
{

class RealOutArg
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      RealOutArg (float * theUnderArgPtr);
         //
         // Conversion from a float * underlying argument.

      RealOutArg (double * theUnderArgPtr);
         //
         // Conversion from a double * underlying argument.

      RealOutArg (const RealOutArg &);
         //
         // Copy ctor.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~RealOutArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setTo (double theValue);
         //
         // Sets the value of the application variable to theValue, converting
         // the type of theValue, if necessary.

      void * myUnderArgAsVoidPtr ();
         //
         // Returns the underlying argument as a void pointer.

      static bool floatCaseExists ();
         //
         // Returns true, iff at least one RealOutArg exists with an underlying
         //    float *.

      static bool doubleCaseExists ();
         //
         // Returns true, iff at least one RealOutArg exists with an underlying
         //    double *.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void operator = (const RealOutArg &);
         //
         // Not implemented; assignment is not allowed.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      RealOutArgRep & myRep_;
         //
         // The RealOutArgRep that functions as the internal representation of
         // this RealOutArg.
   };

// Leaving namespace Wit.
}   

#endif
@


1.1
log
@Continued double precision.
@
text
@@

