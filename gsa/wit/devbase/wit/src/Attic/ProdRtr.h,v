head	1.15;
access;
symbols
	EndRw-branch:1.14.0.8
	Root-of-EndRw:1.14
	rwToStl:1.14.0.6
	latest_sce_3_10_20010924:1.14.0.4
	sce_3_10_20010924:1.14
	latest_sce_3_00_20010601:1.14.0.2
	sce_3_00_20010601:1.14
	latest_sce_2_31_20010308:1.9.0.2
	sce_2_31_20010308:1.9;
locks; strict;
comment	@ * @;


1.15
date	2003.03.03.23.27.03;	author rjw;	state dead;
branches;
next	1.14;

1.14
date	2001.04.25.20.54.36;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.03.19.23.05;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.21.21.55.47;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.12.19.48.08;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.08.16.37.07;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.01.16.24.44;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.31.23.17.46;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.29.19.26.11;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.26.21.46.02;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.24.20.05.57;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.20.00.44.21;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.15.19.01.51;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.11.16.35.10;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.04.22.27.53;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.14
log
@Refactoring for selection splitting.
@
text
@@


1.13
log
@Continued implementation of selection splitting.
@
text
@a0 216
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ProdRtrH
#define ProdRtrH

//------------------------------------------------------------------------------
// Header file: "ProdRtr.h"
//
// Contains the declaration of class ProdRtr.
//------------------------------------------------------------------------------

#include <SelMgr.h>
#include <Mapping.h>
#include <DblSpSch.h>

//------------------------------------------------------------------------------
// Class ProdRtr
//
// "Production Router"
// Interface to the production multi-route subsystem.
// The production multi-route subsystem is responsible for maintaining the BOP
// entry selections for multi-route mode.
//
// Class Hierarchy:
//
// SelMgr
//    ProdRtr
//
// Implemented in MultiRt.C.
//------------------------------------------------------------------------------

class WitProdRtr: public WitSelMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitProdRtr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitProdRtr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitBopEntry * selBopEntry (WitPart * thePart, WitPeriod thePer);
         //
         // selBopEntry (thePart, thePer) is the currently selected BopEntry to
         // be used for explosions in order to produce thePart in thePer.
         // Invalid, if thePart is not explodeable in thePer.

      virtual WitAltPt * myAltPt (
            WitBopEntry *,
            WitConsEntry *,
            WitPeriod,
            WitPeriod,
            WitBoolean &);
         //
         // Override from class SelMgr.

      virtual WitBoolean validForExecBounds ();
         //
         // Override from class SelMgr.

      void printHasAlt ();
         //
         // Prints those MrAltPts for which hasAlt () is TRUE.

      void printMultiChoices ();
         //
         // Prints those MrComps for which multiChoice_ is TRUE.

      void modifyRouting (WitBopEntPerStack & theBopEntPers);
         //
         // Modifies the current routing as indicated by theBopEntPers.

      void findExpBopEnts (
            WitPart *        thePart, 
            WitPeriod        expPer,
            WitBopEntStack & theBopEnts);
         //
         // Sets theBopEnts to be the set of BOP entries currently
         // under consideration for explosion from thePart in expPer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      WitBoolean selIsSplit (WitPart * thePart, WitPeriod expPer);
         //
         // Returns TRUE, iff there is a split routing selection for exploding
         // thru thePart in expPer. Valid only in sel-split mode.

      void startSplitExp (
            WitPart * thePart, 
            WitPeriod expPer,
            double    expVol);
         //
         // See SelMgr.

      inline WitBoolean findNextSplit (
            WitBopEntry * & theBopEnt, 
            double &        splitExpVol)
         {
         witAssert (selSplit ());

         return findNextSplitAbs (asaTlPtrRef (theBopEnt), splitExpVol);
         }
 
      void recBopEntExpPerSS (
            WitBopEntry * theBopEnt, 
            WitPeriod     expPer, 
            double        expVol);
         //
         // Records the fact expVol units were exploded thru theBopEnt in
         // expPer.

      virtual void postCommitSS ();
         //
         // Override from class SelMgr.

      virtual void postSplitCommit ();
         //
         // Override from class SelMgr.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitProdRtr);

      inline WitMrPart * & myMrPart (WitPart * thePart)
            //
            // myMrPart (thePart) is this ProdRtr's MrPart for thePart.
         {
         return (WitMrPart * &) myMrPartTl_ (thePart);
         }

      void setupSelSplit ();
         //
         // Sets up data for selection splitting.

      virtual void adjustSplitBound (WitTl *, double &);
         //
         // Override from class SelMgr.

      virtual void prtSelSplit (WitTl *);
         //
         // Override from class SelMgr.

      inline static WitBopEntry * asaBopEntry (WitTl * theTlObj)
         {
         return (WitBopEntry *) theTlObj;
         }

      inline static WitTl * asaTlPtr (WitBopEntry * theBopEnt)
         {
         return (WitTl *) theBopEnt;
         }

      inline static WitTl * & asaTlPtrRef (WitBopEntry * & theBopEnt)
         {
         return (WitTl * &) theBopEnt;
         }

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMapping (WitPart, WitTlPtr) myMrPartTl_;
         //
         // Data for myMrPart (Part *).

      //------------------------------------------------------------------------
      // Selection splitting data.
      //------------------------------------------------------------------------

      WitDblSpSched (WitBopEntry) totExpVol_;
         //
         // Valid only in sel-split mode.
         // totExpVol_ (theBopEnt, thePer) is the total expVol that has been 
         // exploded thru theBopEnt in thePer during the current commit. 
         // totExpVol_ (theBopEnt) is only valid if theBopEnt
         // corresponds to a multi-choice MrBopEnt.

      WitStackSpSched (WitPart, WitTl) splitSched_;
         //
         // Valid only in sel-split mode.
         // splitSched_ (thePart, thePer) is the ordered list of
         // (BopEntry, splitBound) pairs to be used when exploding at
         // thePart in thePer. 
         // splitSched_ (thePart, thePer) is only valid if thePart
         // corresponds to a multi-choice MrPart.

      WitPeriod splitExpPer_;
         //
         // The explosion period for the currently active split explosion.
         // Undefined, if split explosion is not currently active.
   };

#endif
@


1.12
log
@Continued implementation of selection splitting with the new design.
@
text
@d135 1
a135 1
      virtual void clearSplitSched ();
@


1.11
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d135 4
@


1.10
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@a193 2
         // During selection alteration, its values reflect
         // the most recent successful temp commit, if any, else 0.
@


1.9
log
@Further implementation of coarse selection splitting.
@
text
@d47 1
a47 1
      WitProdRtr (WitHeurAllPerf *);
d131 1
a131 1
      virtual void postCommitSS (WitBoolean);
a133 16

      virtual void preAltAttSS ();
         //
         // Override from class SelMgr.

      virtual void postAltAttSS ();
         //
         // Override from class SelMgr.

      virtual void postPermCommitSS ();
         //
         // Override from class SelMgr.

      void splitSel (WitBopEntry * theBopEnt, WitPeriod expPer);
         //
         // Records a split selection thru theBopEnt in expPer.
@


1.8
log
@Further implementation of coarse selection splitting.
@
text
@d218 1
a218 1
         // splitSched_ (thePart, thePer) is the list of
d220 1
a220 1
         // thePart in thePer. The pairs are stored in reverse order.
@


1.7
log
@Continued development of coarse selection splitting.
@
text
@d170 1
a170 1
      virtual void adjustSplitVol (WitTl *, double &);
d219 1
a219 1
         // (BopEntry, splitVol) pairs to be used when exploding at
@


1.6
log
@Implemented coarse selection splitting for multiple exec periods.
@
text
@d118 2
@


1.5
log
@Further development of coarse selection splitting.
@
text
@d102 5
d121 1
a121 1
      void recExpBopEntSS (
d145 1
a145 6
      WitBoolean selIsSplit (WitPart * thePart, WitPeriod expPer);
         //
         // Returns TRUE, iff there is a split routing selection for exploding
         // thru thePart in expPer. Valid only in sel-split mode.

      void splitSel (WitBopEntry * theBopEnt, WitPeriod thePer);
d147 1
a147 1
         // Records a split selection thru theBopEnt in thePer.
@


1.4
log
@Implemented and used class SelMgr.
@
text
@a21 2
#include <StSpSch.h>
#include <PairSt.h>
d107 1
a107 1
         // Sets up for a PMR sel-split explosion on thePart, expPer and expVol.
d109 1
a109 1
      WitBoolean findNextSplit (
d111 4
a114 5
            double &        splitExpVol);
         //
         // If there is another split to be done on the current split explosion,
         // sets theBopEnt and splitExpVol accordingly and returns TRUE;
         // otherwise returns false.
a115 4
      void finishSplitExp ();
         //
         // Concludes a PMR sel-split explosion.

d168 5
a172 1
      void prtSelSplit (WitBopEntry *, WitBoolean, double);
d174 16
a189 1
         // Prints data for a PMR selection split.
a202 9
      WitStackSpSched (WitPart, WitBopEntry) splitSched_;
         //
         // Valid only in sel-split mode.
         // splitSched_ (thePart, thePer) is the list of
         // (BopEntry, splitVol) pairs to be used when exploding at
         // thePart in thePer. The pairs are stored in reverse order.
         // splitSched_ (thePart, thePer) is only valid if thePart
         // corresponds to a multi-choice MrPart.

d213 1
a213 1
      WitBoolean splitExpActive_;
d215 6
a220 2
         // TRUE iff the build was in DEBUG mode and a split explosion for this
         // ProdRtr is currently underway.
d222 1
a222 4
      WitPart *         splitExpPart_;
      WitPeriod         splitExpPer_;
      double            splitNetExpVol_;
      WitBopEntDblStack splitList_;
d224 1
a224 2
         // The Part, explosion period, net explosion vol, and split list for
         // the currently active split explosion.
@


1.3
log
@Fixed some bugs in coarse selection splitting.
@
text
@d19 1
d23 1
d33 5
d41 1
a41 1
class WitProdRtr: public WitProbAssoc
d49 1
a49 1
      WitProdRtr (WitProblem * theProblem);
d55 1
a55 1
      ~WitProdRtr ();
d67 12
a78 9
      WitAltPt * myAltPt (
            WitPart *    thePart,
            WitPeriod    prodPer,
            WitBoolean & resFound);
         //
         // Returns the AltPt representing the selection of a BopEntry when
         // exploding thru thePart in production period prodPer, or NULL, if
         // there is none. On return resFound indicates whether or not a 
         // resolving alteration was found.
d104 19
d131 1
a131 1
      void postCommitSS (WitBoolean tempSuccess);
d133 1
a133 3
         // Performs the actions to be taken for multi-route sel-split, just
         // after a commit. tempSuccess is to be TRUE, iff the commit was
         // successful and in temp mode.
d135 1
a135 1
      void preAltAttSS ();
d137 1
a137 2
         // Performs actions to be taken for multi-route sel-split just before a
         // selection alteration is attempted.
d139 1
a139 1
      void postAltAttSS ();
d141 1
a141 2
         // Performs actions to be taken for multi-route sel-split just after a
         // selection alteration has been attempted.
d143 1
a143 1
      void postPermCommitSS ();
d145 1
a145 2
         // Performs the actions to be taken for multi-route sel-split,
         // just after a perm commit.
a155 12
      void getSplitList (
            WitPart *           thePart,
            WitPeriod           expPer,
            WitBopEntDblStack & splitList);
         //
         // Sets splitList to be the ordered list of (BopEntry, splitVol)
         // pairs to be used when exploding thru thePart in expPer.

      void prtSelSplit (WitBopEntry *, WitPeriod, WitBoolean, double);
         //
         // Prints data for a PMR selection split.

d175 4
d191 1
a191 1
      WitStackSpSched (WitPart, WitBopEntry) mySplitSched_;
d194 1
a194 1
         // mySplitSched_ (thePart, thePer) is the list of
d197 1
a197 1
         // mySplitSched_ (thePart, thePer) is only valid if thePart
d209 14
@


1.2
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d123 1
a123 1
      WitBoolean routingIsSplit (WitPart * thePart, WitPeriod expPer);
d125 2
a126 2
         // Returns TRUE, iff there is a split selection for exploding thru
         // thePart in expPer. Valid only in sel-split mode.
d140 1
a140 1
      void setExpBopEntIsSplit (WitBoolean);
d142 1
a142 12
         // "Set" function for expBopEntIsSplit_.

      void prtRtSplitAtPart (WitPart * thePart, WitPeriod expPer);
         //
         // Prints data for a routing split at a Part.

      void prtRtSplitToBopEnt (
            WitBopEntry * theBopEnt,
            WitBoolean    splitFound,
            double        splitVol);
         //
         // Prints data for a routing split to a BOP entry.
a192 6

      WitBoolean expBopEntIsSplit_;
         //
         // TRUE, iff the BopEntry currently being exploded is using a finite
         // splitVol.
         // FALSE, if non sel-split mode.
@


1.1
log
@Coarse selection splitting.
@
text
@d135 1
a135 1
            WitBopEntDblStack & theSplitList);
d137 1
a137 1
         // Sets theSplitList to be the ordered list of (BopEntry, splitVol)
d144 11
a177 4
      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

d181 4
@

