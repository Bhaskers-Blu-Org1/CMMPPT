head	1.32;
access;
symbols;
locks; strict;
comment	@ * @;


1.32
date	2007.08.24.21.49.57;	author rjw;	state dead;
branches;
next	1.31;

1.31
date	2007.08.24.20.17.25;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.08.24.15.48.08;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.08.22.23.24.09;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.08.22.22.45.30;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.08.22.22.16.16;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.08.20.22.47.59;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.08.16.21.27.41;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.08.15.21.36.43;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.08.14.15.03.01;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.08.07.19.17.44;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.03.22.04.11;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.03.20.36.19;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.08.03.19.07.03;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.08.02.22.06.27;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.08.02.20.46.57;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.07.31.23.04.46;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.07.31.22.22.33;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.07.30.22.38.03;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.07.27.23.15.16;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.07.27.21.08.52;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.27.19.53.38;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.07.27.18.58.03;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.27.16.33.32;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.26.21.53.57;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.07.26.21.09.28;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.26.19.23.36;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.25.23.18.23;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.25.19.53.27;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.24.22.17.32;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.22.21.23.57;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.22.18.35.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "StochImpOP.C"
//
// Contains the implementation of class StochImpOP.
//------------------------------------------------------------------------------

#include <StochImpOP.h>
#include <StochOptMgr.h>
#include <StochModeMgr.h>
#include <ScenMgr.h>
#include <Scenario.h>
#include <ScenSet.h>
#include <StochLoc.h>
#include <StochObj.h>
#include <StVars.h>
#include <StCons.h>
#include <OptComp.h>
#include <Material.h>
#include <Opn.h>
#include <Demand.h>
#include <BomEntry.h>
#include <SubEntry.h>
#include <ExecPerSch.h>

//------------------------------------------------------------------------------
// Implementation of class StochImpOP.
//------------------------------------------------------------------------------

WitStochImpOP::WitStochImpOP (WitStochOptMgr * theStochOptMgr):

      WitOptProb       (theStochOptMgr->myProblem ()),
      myStochOptMgr_   (theStochOptMgr),
      myScenMgr_       (myStochOptMgr_->myStochModeMgr ()->myScenMgr ()),
      myAllScenSet_    (NULL),
      mySglScenSetFor_ (),
      myExecPerSched_  (NULL),
      myStochObj_      (NULL)
   {
   WitScenario * theScenario;

   myAllScenSet_ = new WitScenSet (this);

   mySglScenSetFor_.allocate (myProblem ());

   forEachEl (theScenario, myScenMgr_->myScenarios ())
      mySglScenSetFor_ (theScenario) = new WitScenSet (theScenario, this);

   myExecPerSched_ = new WitExecPerSched <WitBillEntry> (myProblem ());
   }

//------------------------------------------------------------------------------

WitStochImpOP::~WitStochImpOP ()
   {
   WitScenario * theScenario;

   delete myExecPerSched_;

   forEachEl (theScenario, myScenMgr_->myScenarios ())
      delete mySglScenSetFor_ (theScenario);

   delete myAllScenSet_;
   }

//------------------------------------------------------------------------------

bool WitStochImpOP::needDual ()
   {
   return false;
   }

//------------------------------------------------------------------------------

void WitStochImpOP::reportInfeasible ()
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

void WitStochImpOP::reportUnbounded ()
   {
   stronglyAssert (false);
   }

//------------------------------------------------------------------------------

void WitStochImpOP::printItem (WitNode * theNode)
   {
   fprintf (optProbFile (),
      " %-11s                        ",
      theNode->nodeName ().myCstring ());
   }

//------------------------------------------------------------------------------

void WitStochImpOP::printItem (WitDemand * theDemand)
   {
   fprintf (optProbFile (),
      " %-11s %-11s            ", 
      theDemand->demandedPartName ().myCstring (),
      theDemand->demandName ()      .myCstring ());
   }

//------------------------------------------------------------------------------

void WitStochImpOP::printItem (WitBomEntry * theBomEnt)
   {
   fprintf (optProbFile (),
      " %-11s %-11d            ", 
      theBomEnt->myOperationName ().myCstring (),
      theBomEnt->localIndex ());
   }

//------------------------------------------------------------------------------

void WitStochImpOP::printItem (WitSubEntry * theSub)
   {
   fprintf (optProbFile (),
      " %-11s %-11d %-11d", 
      theSub->myOperationName ().myCstring (),
      theSub->myBomEntIndex (),
      theSub->localIndex ());
   }

//------------------------------------------------------------------------------

void WitStochImpOP::generateVariables ()
   {
   WitScenario * theScenario;
   WitPeriod     thePer;

   forEachEl (theScenario, myScenMgr_->myScenarios ())
      forEachPeriod (thePer, myProblem ())
         mySglScenSetFor_ (theScenario)->
            myStochLocFor (thePer)->
               generateVariables ();
   }

//------------------------------------------------------------------------------

void WitStochImpOP::generateConstraints ()
   {
   WitScenario * theScenario;
   WitPeriod     thePer;
   WitStochLoc * theStochLoc;
   WitPart *     thePart;
   WitDemand *   theDemand;
   WitBomEntry * theBomEnt;

   forEachEl (theScenario, myScenMgr_->myScenarios ())
      forEachPeriod (thePer, myProblem ())
         {
         theStochLoc = mySglScenSetFor_ (theScenario)->myStochLocFor (thePer);

         forEachPart (thePart, myProblem ())
            new WitStResCon (thePart, theStochLoc);

         forEachDemand (theDemand, myProblem ())
            new WitStShipCon (theDemand, theStochLoc);

         forEachBomEntry (theBomEnt, myProblem ())
            if (theBomEnt->hasSubsInEffect ()[thePer])
               new WitStSubCon (theBomEnt, theStochLoc);
         }
   }

//------------------------------------------------------------------------------

WitOptObj * WitStochImpOP::generateObjectives ()
   {
   myStochObj_ = new WitStochObj (this);

   return myStochObj_;
   }

//------------------------------------------------------------------------------

void WitStochImpOP::postGenFixed ()
   {
   WitScenario * theScenario;
   WitPeriod     thePer;

   forEachPeriod (thePer, myProblem ())
      {
      myAllScenSet_->
         myStochLocFor (thePer)->
            clearStochVars ();

      forEachEl (theScenario, myScenMgr_->myScenarios ())
         mySglScenSetFor_ (theScenario)->
            myStochLocFor (thePer)->
               clearStochVars ();
      }

   delete myExecPerSched_;

   myExecPerSched_ = NULL;
   }

//------------------------------------------------------------------------------

void WitStochImpOP::printOptProbElHeading ()
   {
   fprintf (optProbFile (),
      "Index    Class        Item        Item        Item        Per Scn");
   }

//------------------------------------------------------------------------------

void WitStochImpOP::doScreening ()
   {
   if (myOptComp ()->printOptProb ())
      saveBounds ();
   }
@


1.31
log
@Stochastic Implosion
@
text
@@


1.30
log
@Stochastic Implosion
@
text
@a96 14
void WitStochImpOP::printPeriod (WitPeriod thePer)
   {
   fprintf (optProbFile (), " %3d", thePer);
   }

//------------------------------------------------------------------------------

void WitStochImpOP::printScenario (WitScenario * theScenario)
   {
   fprintf (optProbFile (), " %3d", theScenario->myIndex ());
   }

//------------------------------------------------------------------------------

@


1.29
log
@Stochastic Implosion
@
text
@a22 1
#include <ScenPer.h>
a44 1
      myScenPerSched_  (myProblem ()),
a48 1
   WitPeriod     thePer;
a56 5
   forEachEl (theScenario, myScenMgr_->myScenarios ())
      forEachPeriod (thePer, myProblem ())
         myScenPerSched_.myPtrAt (theScenario, thePer) =
            new WitScenPer (this, theScenario, thePer);

a64 1
   WitPeriod     thePer;
a68 4
      forEachPeriod (thePer, myProblem ())
         delete myScenPerSched_.myPtrAt (theScenario, thePer);

   forEachEl (theScenario, myScenMgr_->myScenarios ())
d169 1
a169 1
   WitScenPer *  theScenPer;
d177 1
a177 1
         theScenPer = myScenPerSched_.myPtrAt (theScenario, thePer);
d180 1
a180 1
            new WitStResCon (thePart, theScenPer);
d183 1
a183 1
            new WitStShipCon (theDemand, theScenPer);
d187 1
a187 1
               new WitStSubCon (theBomEnt, theScenPer);
@


1.28
log
@Stochastic Implosion
@
text
@d166 2
a167 8
   WitScenario *  theScenario;
   WitPeriod      thePer;
   WitScenPer *   theScenPer;
   WitPart *      thePart;
   WitOperation * theOpn;
   WitDemand *    theDemand;
   WitBomEntry *  theBomEnt;
   WitSubEntry *  theSub;
d171 3
a173 32
         {
         theScenPer = myScenPerSched_.myPtrAt (theScenario, thePer);

         forEachPart (thePart, myProblem ())
            {
            if (thePart->scrapAllowed ())
               new WitStScrapVar (thePart, theScenPer);

            if (thePart->canStock (thePer))
               new WitStStockVar (thePart->thisMat (), theScenPer);
            }

         forEachOperation (theOpn, myProblem ())
            if (theOpn->executable ()[thePer])
               new WitStExecVar (theOpn, theScenPer);

         forEachDemand (theDemand, myProblem ())
            {
            new WitStShipVar (theDemand, theScenPer);

            if (theDemand->shipLateAllowed ())
               new WitStCumShipVar (theDemand, theScenPer);
            }

         forEachBomEntry (theBomEnt, myProblem ())
            if (theBomEnt->hasSubsInEffect ()[thePer])
               new WitStNonSubVar (theBomEnt, theScenPer);

         forEachSubEntry (theSub, myProblem ())
            if (theSub->inEffect (thePer))
               new WitStSubVar (theSub, theScenPer);
         }
@


1.27
log
@Stochastic Implosion
@
text
@d22 1
a22 1
#include <ScenSetPer.h>
d258 1
a258 1
         myScenSetPerFor (thePer)->
d263 1
a263 1
            myScenSetPerFor (thePer)->
@


1.26
log
@Stochastic Implosion
@
text
@d22 1
a23 1
#include <StOptElMgr.h>
d25 2
d41 8
a48 18
      WitOptProb         (theStochOptMgr->myProblem ()),
      myStochOptMgr_     (theStochOptMgr),
      myScenMgr_         (myStochOptMgr_->myStochModeMgr ()->myScenMgr ()),
      myAllScenSet_      (NULL),
      mySglScenSetFor_   (),
      myScenPerSched_    (myProblem ()),
      myExecPerSched_    (NULL),
      myStScrapVarMgr_   (NULL),
      myStStockVarMgr_   (NULL),
      myStExecVarMgr_    (NULL),
      myStShipVarMgr_    (NULL),
      myStCumShipVarMgr_ (NULL),
      myStNonSubVarMgr_  (NULL),
      myStSubVarMgr_     (NULL),
      myStResConMgr_     (NULL),
      myStShipConMgr_    (NULL),
      myStSubConMgr_     (NULL),
      myStochObj_        (NULL)
d65 1
a65 13
   myExecPerSched_    = new WitExecPerSched <WitBillEntry> (myProblem ());

   myStScrapVarMgr_   = new WitStOptElMgr <WitPart,      WitStScrapVar>  (this);
   myStStockVarMgr_   = new WitStOptElMgr <WitMaterial,  WitStStockVar>  (this);
   myStExecVarMgr_    = new WitStOptElMgr <WitOperation, WitStExecVar>   (this);
   myStShipVarMgr_    = new WitStOptElMgr <WitDemand,    WitStShipVar>   (this);
   myStCumShipVarMgr_ = new WitStOptElMgr <WitDemand,    WitStCumShipVar>
                                                                         (this);
   myStNonSubVarMgr_  = new WitStOptElMgr <WitBomEntry,  WitStNonSubVar> (this);
   myStSubVarMgr_     = new WitStOptElMgr <WitSubEntry,  WitStSubVar>    (this);
   myStResConMgr_     = new WitStOptElMgr <WitPart,      WitStResCon>    (this);
   myStShipConMgr_    = new WitStOptElMgr <WitDemand,    WitStShipCon>   (this);
   myStSubConMgr_     = new WitStOptElMgr <WitBomEntry,  WitStSubCon>    (this);
a74 11
   delete myStSubConMgr_;
   delete myStShipConMgr_;
   delete myStResConMgr_;
   delete myStSubVarMgr_;
   delete myStNonSubVarMgr_;
   delete myStCumShipVarMgr_;
   delete myStShipVarMgr_;
   delete myStExecVarMgr_;
   delete myStStockVarMgr_;
   delete myStScrapVarMgr_;

a123 70
WitStScrapVar * WitStochImpOP::myStScrapVarFor (
      WitPart *     thePart,
      WitPeriod     thePer,
      WitScenario * theScenario)
   {
   return myStScrapVarMgr_->myElFor (thePart, thePer, theScenario);
   }

//------------------------------------------------------------------------------

WitStStockVar * WitStochImpOP::myStStockVarFor (
      WitMaterial * theMat,
      WitPeriod     thePer,
      WitScenario * theScenario)
   {
   return myStStockVarMgr_->myElFor (theMat, thePer, theScenario);
   }

//------------------------------------------------------------------------------

WitStExecVar * WitStochImpOP::myStExecVarFor (
      WitOperation * theOpn,
      WitPeriod      thePer,
      WitScenario *  theScenario)
   {
   return myStExecVarMgr_->myElFor (theOpn, thePer, theScenario);
   }

//------------------------------------------------------------------------------

WitStShipVar * WitStochImpOP::myStShipVarFor (
      WitDemand *   theDemand,
      WitPeriod     thePer,
      WitScenario * theScenario)
   {
   return myStShipVarMgr_->myElFor (theDemand, thePer, theScenario);
   }

//------------------------------------------------------------------------------

WitStCumShipVar * WitStochImpOP::myStCumShipVarFor (
      WitDemand *   theDemand,
      WitPeriod     thePer,
      WitScenario * theScenario)
   {
   return myStCumShipVarMgr_->myElFor (theDemand, thePer, theScenario);
   }

//------------------------------------------------------------------------------

WitStSubVar * WitStochImpOP::myStSubVarFor (
      WitSubEntry * theSub,
      WitPeriod     thePer,
      WitScenario * theScenario)
   {
   return myStSubVarMgr_->myElFor (theSub, thePer, theScenario);
   }

//------------------------------------------------------------------------------

WitStNonSubVar * WitStochImpOP::myStNonSubVarFor (
      WitBomEntry * theBomEnt,
      WitPeriod     thePer,
      WitScenario * theScenario)
   {
   return myStNonSubVarMgr_->myElFor (theBomEnt, thePer, theScenario);
   }

//------------------------------------------------------------------------------

d168 1
d178 2
d183 1
a183 2
               myStScrapVarMgr_->
                  createMyElFor (thePart,             thePer, theScenario);
d186 1
a186 2
               myStStockVarMgr_->
                  createMyElFor (thePart->thisMat (), thePer, theScenario);
d191 1
a191 2
               myStExecVarMgr_->
                  createMyElFor (theOpn,              thePer, theScenario);
d195 1
a195 2
            myStShipVarMgr_->
                  createMyElFor (theDemand,           thePer, theScenario);
d198 1
a198 2
               myStCumShipVarMgr_->
                  createMyElFor (theDemand,           thePer, theScenario);
d203 1
a203 2
               myStNonSubVarMgr_->
                  createMyElFor (theBomEnt,           thePer, theScenario);
d207 1
a207 2
               myStSubVarMgr_->
                  createMyElFor (theSub,              thePer, theScenario);
d217 1
d225 2
d228 1
a228 1
            myStResConMgr_->createMyElFor (thePart, thePer, theScenario);
d231 1
a231 1
            myStShipConMgr_->createMyElFor (theDemand, thePer, theScenario);
d235 1
a235 1
               myStSubConMgr_->createMyElFor (theBomEnt, thePer, theScenario);
d252 15
@


1.25
log
@Stochastic Implosion
@
text
@d21 1
d42 2
d61 7
d111 5
@


1.24
log
@Stochastic Implosion
@
text
@d28 2
d48 2
d52 1
d65 4
a68 4
   myStScrapVarMgr_   = new WitStOptElMgr <WitPart,      WitStScrapVar> (this);
   myStStockVarMgr_   = new WitStOptElMgr <WitMaterial,  WitStStockVar> (this);
   myStExecVarMgr_    = new WitStOptElMgr <WitOperation, WitStExecVar>  (this);
   myStShipVarMgr_    = new WitStOptElMgr <WitDemand,    WitStShipVar>  (this);
d70 6
a75 3
                                                                        (this);
   myStResConMgr_     = new WitStOptElMgr <WitPart,      WitStResCon>   (this);
   myStShipConMgr_    = new WitStOptElMgr <WitDemand,    WitStShipCon>  (this);
d85 1
d88 2
d128 1
a128 1
   fprintf (optProbFile (), periodDFormat (), thePer);
d135 1
a135 1
   fprintf (optProbFile (), periodDFormat (), theScenario->myIndex ());
d190 20
d213 2
a214 4
      itemFormat (),
      theNode->nodeName ().myCstring (),
      "",
      "");
d222 1
a222 1
      itemFormat (), 
d224 22
a245 2
      theDemand->demandName ()      .myCstring (),
      "");
a254 1
   WitMaterial *  theMat;
d257 2
d264 1
d267 1
a267 1
                  createMyElFor (thePart,   thePer, theScenario);
d269 1
a269 2
         forEachMaterial (theMat, myProblem ())
            if (theMat->canStock (thePer))
d271 2
a272 1
                  createMyElFor (theMat,    thePer, theScenario);
d277 1
a277 1
                  createMyElFor (theOpn,    thePer, theScenario);
d280 3
a282 2
               myStShipVarMgr_->
                  createMyElFor (theDemand, thePer, theScenario);
a283 1
         forEachDemand (theDemand, myProblem ())
d286 12
a297 1
                  createMyElFor (theDemand, thePer, theScenario);
d309 1
d319 4
d348 2
a349 5
   fprintf (optProbFile (), "Index    Class       ");

   fprintf (optProbFile (), itemFormat (),    "Item", "Item", "Item");
   fprintf (optProbFile (), periodSFormat (), "Per");
   fprintf (optProbFile (), periodSFormat (), "Scn");
a358 21

//------------------------------------------------------------------------------

const char * WitStochImpOP::itemFormat ()
   {
   return " %-11s %-11s %-11s";
   }

//------------------------------------------------------------------------------

const char * WitStochImpOP::periodDFormat ()
   {
   return " %3d";
   }

//------------------------------------------------------------------------------

const char * WitStochImpOP::periodSFormat ()
   {
   return " %3s";
   }
@


1.23
log
@Stochastic Implosion
@
text
@d25 1
a25 1
#include <Part.h>
d42 1
d61 1
d82 1
d139 10
d206 1
d218 5
@


1.22
log
@Stochastic Implosion
@
text
@d27 1
d36 12
a47 9
      WitOptProb       (theStochOptMgr->myProblem ()),
      myStochOptMgr_   (theStochOptMgr),
      myScenMgr_       (myStochOptMgr_->myStochModeMgr ()->myScenMgr ()),
      myScenPerSched_  (myProblem ()),
      myExecPerSched_  (NULL),
      myStScrapVarMgr_ (NULL),
      myStExecVarMgr_  (NULL),
      myStResConMgr_   (NULL),
      myStochObj_      (NULL)
d57 1
a57 1
   myExecPerSched_  = new WitExecPerSched <WitBillEntry> (myProblem ());
d59 7
a65 3
   myStScrapVarMgr_ = new WitStOptElMgr <WitPart,      WitStScrapVar> (this);
   myStExecVarMgr_  = new WitStOptElMgr <WitOperation, WitStExecVar>  (this);
   myStResConMgr_   = new WitStOptElMgr <WitPart,      WitStResCon>   (this);
d75 1
d77 2
d146 20
d168 1
a168 2
   fprintf (
      optProbFile (),
d177 11
d194 1
d201 2
a202 1
               myStScrapVarMgr_->createMyElFor (thePart, thePer, theScenario);
d206 11
a216 1
               myStExecVarMgr_ ->createMyElFor (theOpn,  thePer, theScenario);
d227 1
d231 1
d234 4
@


1.21
log
@Stochastic Implosion
@
text
@d17 1
a17 1
#include <StochImp.h>
d33 1
a33 1
WitStochImpOP::WitStochImpOP (WitStochImploder * theStochImploder):
d35 3
a37 3
      WitOptProb       (theStochImploder->myProblem ()),
      myStochImploder_ (theStochImploder),
      myScenMgr_       (myStochImploder_->myStochModeMgr ()->myScenMgr ()),
@


1.20
log
@Stochastic Implosion
@
text
@a28 6


#include <MsgFac.h>



a81 2
   myMsgFac () ("singleStochLPNyiSmsg", 7);

@


1.19
log
@Stochastic Implosion
@
text
@d24 1
d222 2
@


1.18
log
@Stochastic Implosion
@
text
@d108 14
d142 12
@


1.17
log
@Stochastic Implosion
@
text
@d184 1
a184 1
   myMsgFac () ("singleStochLPNyiSmsg", 8);
d186 3
a188 1
   stronglyAssert (false);
d196 21
@


1.16
log
@Stochastic Implosion
@
text
@d28 6
d87 1
a87 1
   stronglyAssert (false);
d184 2
a192 1
   stronglyAssert (false);
@


1.15
log
@Stochastic Implosion
@
text
@d102 20
@


1.14
log
@Stochastic Implosion
@
text
@d26 1
d38 1
d52 2
d70 2
d149 3
a151 1
   stronglyAssert (false);
@


1.13
log
@Stochastic Implosion
@
text
@d108 1
a108 1
               myStScrapVarMgr_->createMyElFor (theScenario, thePart, thePer);
d112 1
a112 1
               myStExecVarMgr_ ->createMyElFor (theScenario, theOpn,  thePer);
d127 1
a127 1
            myStResConMgr_->createMyElFor (theScenario, thePart, thePer);
@


1.12
log
@Stochastic Implosion
@
text
@a25 1
#include <MsgFac.h>
a135 2
   myMsgFac () ("singleStochLPNyiSmsg");

@


1.11
log
@Stochastic Implosion
@
text
@d23 1
d40 2
a41 1
      myStResConMgr_   (NULL)
a128 2

   myMsgFac () ("singleStochLPNyiSmsg");
d135 3
a137 1
   stronglyAssert (false);
d139 1
a139 1
   return NULL;
@


1.10
log
@Stochastic Implosion
@
text
@d38 2
a39 1
      myStExecVarMgr_  (NULL)
d51 1
d61 1
d119 9
@


1.9
log
@Stochastic Implosion
@
text
@a109 2

   myMsgFac () ("singleStochLPNyiSmsg");
d116 1
a116 1
   stronglyAssert (false);
@


1.8
log
@Stochastic Implosion
@
text
@d23 1
d37 1
d48 2
a49 1
   myStExecVarMgr_ = new WitStOptElMgr <WitOperation, WitStExecVar> (this);
d60 1
d96 1
d101 5
d108 2
a109 1
               myStExecVarMgr_->createMyElFor (theScenario, theOpn, thePer);
@


1.7
log
@Stochastic Implosion
@
text
@d22 1
d32 5
a36 5
      WitOptProb        (theStochImploder->myProblem ()),
      myStochImploder_  (theStochImploder),
      myScenMgr_        (myStochImploder_->myStochModeMgr ()->myScenMgr ()),
      myScenPerSched_   (myProblem ()),
      myStExecVarTable_ (this)
d45 2
d56 2
d98 1
a98 1
               myStExecVarTable_.createMyElFor (theScenario, theOpn, thePer);
@


1.6
log
@Stochastic Implosion
@
text
@d22 1
d35 1
a35 1
      myStExecVarTable_ (myScenMgr_)
d85 10
@


1.5
log
@Stochastic Implosion
@
text
@d19 3
d32 11
a42 2
      myStExecVarTable_ (myStochImploder_->myStochModeMgr ()->myScenMgr ())
   {
d49 6
@


1.4
log
@Stochastic Implosion
@
text
@d18 1
d29 1
a29 1
      myStExecVarTable_ (this)
@


1.3
log
@Stochastic Implosion
@
text
@d26 3
a28 2
      WitOptProb       (theStochImploder->myProblem ()),
      myStochImploder_ (theStochImploder)
@


1.2
log
@Stochastic Implosion
@
text
@d17 1
d24 1
a24 1
WitStochImpOP::WitStochImpOP (WitProblem * theProblem):
d26 2
a27 1
      WitOptProb (theProblem)
@


1.1
log
@Stochastic Implosion
@
text
@d12 2
d15 86
@

