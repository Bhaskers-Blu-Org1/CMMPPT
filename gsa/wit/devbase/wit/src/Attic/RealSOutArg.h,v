head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.02.24.19.37.22;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2004.02.19.22.56.11;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.19.19.08.51;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.19.16.08.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.18.00.05.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Continued double precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RealSOutArgH
#define RealSOutArgH

//------------------------------------------------------------------------------
// Header file: "RealSOutArg.h"
//
// Contains the declaration of class Wit::RealSOutArg.
//------------------------------------------------------------------------------

#include <RealArg.h>
#include <TlObj.h>

//------------------------------------------------------------------------------
// Class RealSOutArg
//
// "Real Scalar Output Argument"
//
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is a pointer to a scalar real-valued variable
// belonging to the application program. Specifically, the underlying argument
// is of one of the following types:
//
//    float  *
//    double *
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       RealSOutArg.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type float * and double *. These are the "underlying arguments".
//    The corresponding variables in the application program are of type float
//       and double. These are called the "application variables".
//
// Implemented in RealArgs.C.
//------------------------------------------------------------------------------

namespace Wit
{

class RealSOutArg: public RealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      RealSOutArg (float *);
         //
         // Conversion from a float * underlying argument.

      RealSOutArg (double *);
         //
         // Conversion from a double * underlying argument.

      RealSOutArg (const RealSOutArg &);
         //
         // Copy ctor.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~RealSOutArg ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setTo (double theValue);
         //
         // Sets the value of the application variable to theValue, converting
         // the type of theValue, if necessary.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitTlObj *, myUnderArg)

      double appVarVal () const;
         //
         // Returns the current value of the application variable, converted
         // (if necessary) to a double.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void operator = (const RealSOutArg &);
         //
         // Not implemented; assignment is not allowed.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitTlObj * const myUnderArg_;
         //
         // The underlying argument, cast into a TlObj ptr.
   };

// Leaving namespace Wit.
}   

#endif
@


1.4
log
@Continued double precision.
@
text
@@


1.3
log
@Continued double precision.
@
text
@d94 5
@


1.2
log
@Continued double precision.
@
text
@d27 4
a30 4
// Provides a uniform interface (independent of precision mode) for an argument
// to an API function. The underlying argument is a pointer to a scalar
// real-valued variable belonging to the application program. Specifically,
// the underlying argument is of the following type:
d32 2
a33 2
//    float  *, in single precision mode
//    double *, in double precision mode
d39 1
a39 1
//       type float * and double *. These are called "underlying arguments".
d41 1
a41 1
//       and double. These are called "application variables".
@


1.1
log
@Continued double precision.
@
text
@d54 4
@

