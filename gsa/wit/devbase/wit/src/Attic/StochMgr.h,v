head	1.28;
access;
symbols;
locks; strict;
comment	@ * @;


1.28
date	2007.04.30.21.52.09;	author rjw;	state dead;
branches;
next	1.27;

1.27
date	2007.04.30.21.34.59;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.04.30.19.32.31;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2007.04.25.19.56.55;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2007.04.24.21.18.13;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.24.20.07.50;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2007.04.23.21.03.20;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.04.23.20.20.00;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.04.20.23.31.46;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.04.20.20.51.14;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.19.21.38.44;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.19.20.22.30;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.19.14.52.49;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.18.23.09.41;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.18.21.18.20;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.16.21.32.58;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.10.20.49.29;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.10.18.14.55;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.10.16.33.21;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.09.18.41.24;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.09.16.05.08;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.05.20.23.52;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.04.20.04.40;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.02.23.01.15;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.30.22.33.03;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.29.21.16.48;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.28.22.14.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.22.20.01.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StochMgrH
#define StochMgrH

//------------------------------------------------------------------------------
// Header file: "StochMgr.h"
//
// Contains the declaration of class StochMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class StochMgr
//
// "Stochastic Implosion Manager"
// The interface to the stochastic implosion subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    StochMgr
//------------------------------------------------------------------------------

class WitStochMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStochMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStochMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitStochMgr * theStochMgr);
         //
         // Copies the input attributes of theStochMgr into this StochMgr.

      void writeData ();
         //
         // Writes the section of the input data file for this StochMgr.

      void prepWriteStochAttr ();
         //
         // Takes action appropriate just before a stochastic attribute is to be
         // written to the input data file from the original (non-Scenario)
         // object.

      bool skipVectorWrite ();
         //
         // Returns true, iff writing the current vector to the input data file
         // is to be skipped.

      void prepWriteVector ();
         //
         // Takes action appropriate just before a vector to be written to an
         // input data file.

      void display ();
         //
         // Displays the input and preprocessing data for this StochMgr.

      void prepSetStochAttr ();
         //
         // Takes action appropriate just before the value of a stochastic
         // attribute is to be set.

      void prepSetAttr ();
         //
         // Takes action appropriate just before the value of any non-msg
         // attribute is to be set.

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (bool defStageByObject, false)
      defaultValue (int  defNScenarios,    1)
      defaultValue (bool defStochDataMode, false)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setStochImpAllowed (bool);
      void setStageByObject   (bool);
      void setNScenarios      (int);
      void setStochDataMode   (bool);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, stochImpAllowed)
      accessFunc (bool, stageByObject)
      accessFunc (int,  nScenarios)
      accessFunc (bool, stochDataMode)

      //------------------------------------------------------------------------
      // The following functions are only valid in stochastic data mode.
      //------------------------------------------------------------------------

      void implode ();
         //
         // Performs stochastic implosion.

      void discardSoln ();
         //
         // Discards the stochastic implosion solution.

      //------------------------------------------------------------------------
      // "Set" functions for stochastic data mode.
      //------------------------------------------------------------------------

      void setScenarioIndex (int);
      void setProbability   (double);

      //------------------------------------------------------------------------
      // Data access functions for stochastic data mode.
      //------------------------------------------------------------------------

      int    scenarioIndex ();
      double probability   ();
      bool   stochSolnMode ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      bool writeDataNeeded ();
         //
         // Returns true, iff writeData needs to write anything.

      void writeDataID ();
         //
         // Writes text identifying this StochMgr to an input data file.

      void writeDataAttrs ();
         //
         // Writes the attributes of this StochMgr to an input data file.

      accessNonNull (WitStochDataMgr *, myStochDataMgr)

      noCopyCtorAssign (WitStochMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      bool stochImpAllowed_;
         //
         // Stochastic implosion is allowed, iff stochImpAllowed_ is true.

      bool stageByObject_;
         //
         // If true,  stage-by-object mode is to be used.
         // If false, stage-by-period mode is to be used.
         // At present, only stage-by-object mode is allowed.

      int nScenarios_;
         //
         // The number of scenarios for stochastic implosion.

      bool stochDataMode_;
         //
         // True, iff the WitRun is currently in stochastic data mode.

      WitStochDataMgr * myStochDataMgr_;
         //
         // The StochDataMgr owned by this StochMgr during stochastic implosion
         // mode; otherwise NULL.

      bool toWriteStochAttr_;
         //
         // True, iff a stochastic attribute is about to be written from the
         // original (non-Scenario) object.

      bool toSetStochAttr_;
         //
         // When an attribute is about to be set, toSetStochAttr_ is true, iff
         // the attribute is stochastic.
   };

#endif
@


1.27
log
@Stochastic Implosion
@
text
@@


1.26
log
@Stochastic Implosion
@
text
@d162 1
a162 1
      accessNonNull (WitStochImploder *, myStochImploder)
d188 1
a188 1
      WitStochImploder * myStochImploder_;
d190 1
a190 1
         // The StochImploder owned by this StochMgr during stochastic implosion
@


1.25
log
@Stochastic Implosion
@
text
@d140 3
a142 3
      int    scenarioIndex   ();
      double probability     ();
      bool   stochSolnExists ();
d186 1
a186 1
         // The WitRun is in stochastic data mode, iff stochDataMode_ is true.
@


1.24
log
@Stochastic Implosion
@
text
@d61 11
d74 2
a75 1
         // Prepares for a vector to be written to an input data file.
d81 1
a81 1
      void willSetStochAttr ();
d83 2
a84 2
         // To be called just before the value of a stochastic attribute will be
         // set.
d86 1
a86 1
      void settingAttr ();
d88 2
a89 2
         // To be called whenever the value of any non-msg attribute is being
         // set.
d176 2
a177 2
         // If true,  stage-by-object mode will be used.
         // If false, stage-by-period mode will be used.
d193 6
a198 1
      bool nextAttrIsStoch_;
d200 2
a201 2
         // When a an attribute is being set, nextAttrIsStoch_ is true, iff the
         // attribute is stochastic.
@


1.23
log
@Stochastic Implosion
@
text
@d122 1
a122 1
      void setScenarioProb  (double);
d129 1
a129 1
      double scenarioProb    ();
@


1.22
log
@Stochastic Implosion
@
text
@d69 10
d180 5
@


1.21
log
@Stochastic Implosion
@
text
@d73 3
a75 3
      defaultValue (bool defStageByObject,  false)
      defaultValue (int  defNScenarios,     1)
      defaultValue (bool defStochasticMode, false)
d84 1
a84 1
      void setStochasticMode  (bool);
d93 1
a93 1
      accessFunc (bool, stochasticMode)
d96 1
a96 1
      // The following functions are only valid in stochastic mode.
d108 1
a108 1
      // "Set" functions for stochastic mode.
d115 1
a115 1
      // Data access functions for stochastic mode.
d162 1
a162 1
      bool stochasticMode_;
d164 1
a164 1
         // The WitRun is in stochastic mode, iff stochasticMode_ is true.
@


1.20
log
@Stochastic Implosion
@
text
@d103 4
d118 3
a120 3
      int    scenarioIndex  ();
      double scenarioProb   ();
      bool   stochSolnAvail ();
@


1.19
log
@Stochastic Implosion
@
text
@d114 3
a116 2
      int    scenarioIndex ();
      double scenarioProb  ();
@


1.18
log
@Stochastic Implosion
@
text
@d73 3
a75 3
      defaultValue (bool defStageByObject, false)
      defaultValue (int  defNScenarios,    1)
      defaultValue (bool defStochImpMode,  false)
d84 1
a84 1
      void setStochImpMode    (bool);
d93 1
a93 1
      accessFunc (bool, stochImpMode)
d96 1
a96 1
      // The following functions are only valid in stochastic implosion mode.
d104 1
a104 1
      // "Set" functions for stochastic implosion mode.
d111 1
a111 1
      // Data access functions for stochastic implosion mode.
d157 1
a157 1
      bool stochImpMode_;
d159 1
a159 2
         // The WitRun is in stochastic implosion mode, iff stochImpMode_ is
         // true.
@


1.17
log
@Stochastic Implosion
@
text
@d99 4
@


1.16
log
@Stochastic Implosion
@
text
@d61 1
a61 1
      void writingVector ();
d63 1
a63 1
         // Tells this StochMgr that a vector is currently being written.
d131 1
a131 1
      accessNonNull (WitStochModeMgr *, myStochModeMgr)
d158 1
a158 1
      WitStochModeMgr * myStochModeMgr_;
d160 1
a160 1
         // The StochModeMgr owned by this StochMgr during stochastic implosion
@


1.15
log
@Stochastic Implosion
@
text
@d16 1
a16 3
// Contains the declaration of the following class:
//
//    StochMgr
d25 1
a25 1
// Responsible for overseeing stochastic implosion.
d99 3
a101 3
      void setScenarioProb (double theValue);
         //
         // Returns the probability of the current Scenario to theValue.
d103 2
a104 3
      int scenarioIndex ();
         //
         // Returns the index of the current Scenario.
d106 3
a108 3
      double scenarioProb ();
         //
         // Returns the probability of the current Scenario.
d110 2
a111 1
      accessNonNull (WitStochModeMgr *, myStochModeMgr)
d131 2
@


1.14
log
@Stochastic Implosion
@
text
@d97 16
@


1.13
log
@Stochastic Implosion
@
text
@d63 4
@


1.12
log
@Stochastic Implosion
@
text
@d93 1
a93 1
      accessNonNull (WitStochProb *, myStochProb)
d138 1
a138 1
      WitStochProb * myStochProb_;
d140 1
a140 1
         // The StochProb owned by this StochMgr during stochastic implosion
@


1.11
log
@Stochastic Implosion
@
text
@d93 1
a93 1
      accessNonNull (WitSIP *, mySIP)
d138 1
a138 1
      WitSIP * mySIP_;
d140 2
a141 2
         // The SIP owned by this StochMgr during stochastic implosion mode;
         // otherwise NULL.
@


1.10
log
@Stochastic Implosion
@
text
@a83 6
      void setScenarioIndex (int theIdx);
         //
         // Sets the current scenario to be the Scenario owned by mySIP () whose
         // index is theIdx.
         // Valid only in stochastic implosion mode.

d93 1
a93 4
      int scenarioIndex ();
         //
         // Returns the index of the current scenario.
         // Valid only in stochastic implosion mode.
a112 2
      accessNonNull (WitSIP *, mySIP)

@


1.9
log
@Stochastic Implosion.
@
text
@d52 16
d84 1
a84 13
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void copyAttrsFrom (WitStochMgr * theStochMgr);
         //
         // Copies the input attributes of theStochMgr into this StochMgr.

      void writeData ();
         //
         // Writes the section of the input data file for this StochMgr.

      void display ();
d86 3
a88 1
         // Displays the input and preprocessing data for this StochMgr.
d99 5
@


1.8
log
@Stochastic implosion.
@
text
@d111 1
a111 1
      accessNonNull (WitStProblem *, myStProblem)
d138 1
a138 1
      WitStProblem * myStProblem_;
d140 2
a141 2
         // The StProblem owned by this StochMgr during stochastic implosion
         // mode; otherwise NULL.
@


1.7
log
@Stochastic implosion.
@
text
@d57 1
a57 1
      defaultValue (bool defActive,        false)
d66 1
a66 1
      void setActive          (bool);
d91 1
a91 1
      accessFunc (bool, active)
d133 1
a133 1
      bool active_;
d135 2
a136 1
         // Stochastic implosion is active, iff active_ is true.
d140 2
a141 2
         // The StProblem owned by this StochMgr when stochastic implosion is
         // active; otherwise NULL.
@


1.6
log
@Stochastic implosion.
@
text
@a83 9
      void settingStochAttr ();
         //
         // Tells this StochMgr that a stochastic attribute is currently being
         // set.

      void resetSoln ();
        //
        // Takes actions appropriate when the implosion solution is being reset.

@


1.5
log
@Stochastic implosion.
@
text
@a51 11
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (bool,           stochImpAllowed)
      accessFunc    (bool,           stageByObject)
      accessFunc    (int,            nScenarios)
      accessFunc    (bool,           active)

      accessNonNull (WitStProblem *, myStProblem)

      //------------------------------------------------------------------------
d84 18
d120 2
@


1.4
log
@Stochastic Implosion.
@
text
@d58 1
a58 1
      accessFunc    (bool,           stochImpActive)
d66 3
a68 3
      defaultValue (bool defStageByObject,  false)
      defaultValue (int  defNScenarios,     1)
      defaultValue (bool defStochImpActive, false)
d77 1
a77 1
      void setStochImpActive  (bool);
d133 1
a133 1
      bool stochImpActive_;
d135 1
a135 1
         // Stochastic implosion is active, iff stochImpActive_ is true.
@


1.3
log
@Stochastic implosion.
@
text
@d55 6
a60 3
      accessFunc (bool, stochImpAllowed)
      accessFunc (bool, stageByObject)
      accessFunc (int,  nScenarios)
d66 3
a68 2
      defaultValue (bool defStageByObject, false)
      defaultValue (int  defNScenarios,    1)
d77 1
d132 9
@


1.2
log
@Stochastic implosion.
@
text
@d57 1
d64 1
d72 1
d96 4
d123 4
@


1.1
log
@Stochastic Implosion.
@
text
@d52 14
a65 1
      // Other public member functions.
d69 1
d72 1
a72 1
      // Data access functions.
d75 11
a85 1
      accessFunc (bool, stochImpAllowed)
d93 8
d110 6
@

