head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2003.09.30.15.40.54;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2003.09.29.23.29.41;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.29.19.25.49;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.26.20.55.13;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.25.22.58.26;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.25.19.29.02;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.25.18.51.09;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.24.23.08.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Continued implementation of post-implosion pegging.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PIPegMgrH
#define PIPegMgrH

//------------------------------------------------------------------------------
// Header file: "PIPegMgr.h"
//
// Contains the declaration of class PIPegMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <ObjStack.h>
#include <PairStack.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class PIPegMgr
//
// "Post-Implosion Pegging Manager"
// Responsible for owning and maintaining the post-implosion pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    PIPegMgr
//------------------------------------------------------------------------------

class WitPIPegMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPIPegMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPIPegMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void recIncShipVol (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incVol);
         //
         // Records an increase of incVol to theDemand->shipVol ()[shipPer].

      void clearTargs ();
         //
         // Clears the PIPegTargs owned by this PIPegMgr.

      void formPegging ();
         //
         // Forms the pegging.

      void clearPegging ();
         //
         // Clears the pegging.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void innerFormPegging ();
         //
         // Inner aspects of forming the pegging.

      noCopyCtorAssign (WitPIPegMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitPIPegTarg> myPIPegTargs_;
         //
         // The PIPegTargs owned by this PIPegMgr.

      WitPtrSched <WitDemand, WitPIPegTarg> eachPIPegTarg_;
         //
         // eachPIPegTarg_.myPtrAt (theDemand, shipPer) is the PIPegTarg owned
         // this PIPegMgr for theDemand in shipPer.

      WitPairStack <WitPIPegTarg, double> myShipIncs_;
         //       
         // Represents the ordered list of triples (theDemand, shipPer, incVol)
         // such that theDemand->shipVol ()[shipPer] is to be increased by
         // incVol, pegging the resulting resource utilization to theDemand in
         // shipPer.
         // Stored in reverse order.

      bool pegged_;
         //
         // true, iff a pegging currently exists.
   };

#endif
@


1.7
log
@Contined implementation of post-implosion pegging.
@
text
@@


1.6
log
@Continued implementation of post-implosion pegging.
@
text
@d20 3
d63 4
d94 17
@


1.5
log
@Continued implementation of post-implosion pegging.
@
text
@a19 2
#include <ObjStack.h>
#include <PtrSched.h>
a71 5
      inline const WitPtrSched <WitDemand, WitPIPegTarg> & myPIPegTargs ()
         {
         return myPIPegTargs_;
         }

a87 6
      WitObjStack <WitDemPerVol> shipIncs_;
         //
         // The ordered list of (Demand, shipPer, incVol) triples to be used
         // to define the pegging.
         // Stored in reverse order.

a90 5

      WitPtrSched <WitDemand, WitPIPegTarg> myPIPegTargs_;
         //
         // myPIPegTargs_.myPtrAt (theDemand, shipPer) is the PIPegTarg for
         // theDemand in shipPer owned by this PIPegMgr.
@


1.4
log
@Continued implementation of post-implosion pegging.
@
text
@d62 1
a62 1
      void peg ();
d64 1
a64 1
         // Builds the pegging.
d66 1
a66 1
      void clear ();
d74 5
d84 4
@


1.3
log
@Continued implementation of post-implosion pegging.
@
text
@d21 1
a73 5
      inline WitObjStack <WitDemPerVol> & shipIncs ()
         {
         return shipIncs_;
         }

d91 9
@


1.2
log
@Continued implementation of post-implosion pegging.
@
text
@d24 1
d93 1
a93 1
         // to define the P.I. pegging.
@


1.1
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d24 2
d67 9
@

