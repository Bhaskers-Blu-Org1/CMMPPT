head	1.22;
access;
symbols
	sce_410_withVa:1.21
	sce_4_05_20040511:1.20
	sce_4_00_20040201:1.20
	nextGenBranch:1.17.0.2
	nextGenRoot:1.17
	sce_3_30_20030627:1.17
	EndRw-branch:1.15.0.4
	Root-of-EndRw:1.15
	rwToStl:1.15.0.2
	latest_sce_3_10_20010924:1.10.0.2
	sce_3_10_20010924:1.10
	latest_sce_3_00_20010601:1.7.0.2
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2005.09.08.19.29.44;	author rjw;	state dead;
branches;
next	1.21;

1.21
date	2005.09.07.19.29.51;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.01.05.23.37.33;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.23.16.18.46;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.01.21.05.02;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.30.18.19.09;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.02.22.18.16;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.08.14.16.09.46;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.24.23.15.15;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.24.18.38.10;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.24.20.05.28;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.04.24.18.26.04;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.21.22.36.29;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.27.21.28.38;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.25.16.08.12;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.17.15.11.12;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.22.23.11.35;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.06.18.45.07;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.02.20.43.11;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.17;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.13;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches;
next	;


desc
@@


1.22
log
@[multi-thread]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
// 
//------------------------------------------------------------------------------

#ifndef AloneRunH
#define AloneRunH

//------------------------------------------------------------------------------
// Header file: "AloneRun.h"
//
// Contains the declaration of class AloneRun.
//------------------------------------------------------------------------------

#include <Session.h>
#include <Problem.h>
#include <wit.h>

class WitParamMgr;
class WitTimer;

//------------------------------------------------------------------------------
// class AloneRun.
// A stand-alone run of WIT.
//------------------------------------------------------------------------------

class WIT_DECLSPEC WitAloneRun
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAloneRun ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAloneRun ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitRun *,         myWitRun)

      accessWrapper (WitProblem *,     myProblem,     mySession_)
      accessWrapper (WitMsgFacility &, myMsgFac,      mySession_)

      accessWrapper (WitCompMgr *,     myCompMgr,     myProblem ())
      accessWrapper (WitOptImploder *, myOptImploder, myProblem ())

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void execute (int argc, char * argv[]);
         //
         // Runs WIT in stand-alone mode.
         // argc and argv give the command line arguments from main program.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAloneRun);

      void setUp ();
         //
         // Sets up WIT for a stand-alone run.

      void setUpMsg ();
         //
         // Sets up the message facility.

      void readInput ();
         //
         // Reads input for the problem and performs related tasks.

      //------------------------------------------------------------------------
      // Parameter value wrapper functions.
      //------------------------------------------------------------------------

      inline const WitString & stringParamVal  (const char *);
      inline const char *      cStringParamVal (const char *);
      inline int               intParamVal     (const char *);
      inline const WitString & choiceParamVal  (const char *);
      inline bool              boolParamVal    (const char *);

      //------------------------------------------------------------------------

      void preprocess ();
         //
         // Performs preprocessing and related tasks.

      void performAction ();
         //
         // Performs the action indicated by the "action" control paramater.

      void printMrp ();
         //
         // Prints the results of MRP.

      void printImplosion ();
         //
         // Prints the results of implosion.

      void doFss ();
         //
         // Does FSS for stand-alone purposes.

      void makeVolServObj ();
         //
         // Turns the objective function into a volume serviceability objective.

      void clearObj1 ();
         //
         // Sets objective #1 to 0.

      void compVolServ ();
         //
         // Computes and displays the volume serviceability objective for the
         // current implosion solution.

      bool tempParIsSet (int);
         //
         // Wrapper for myProblem ()->myGlobalComp ().

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRun * myWitRun_;
         //
         // The WitRun owned by this AloneRun.

      WitTimer * myTimer_;
         //
         // The Timer owned by this AloneRun.

      WitSession * mySession_;
         //
         // The Session for this AloneRun.

      WitParamMgr * myParamMgr_;
         //
         // The ParamMgr owned by this AloneRun.
   };

#endif
@


1.21
log
@[multi-thread]
@
text
@@


1.20
log
@Continued implementation of PIP.
@
text
@a99 4
      void resetBoundSets ();
         //
         // Sets all BoundSets to their default (unspecified) state.

a107 4
      void clearLotSizes ();
         //
         // Sets all lot sizes to 0.

a119 12
      void printSparseFss ();
         //
         // Prints FSS in a sparse format.

      void testReOpt ();
         //
         // Performs the test of re-opt-implosion.

      void testCopyData ();
         //
         // Tests witCopyData.

a132 9
      void applyNstn ();
         //
         // Makes all Materials that aren't ASAP build-ahead materials into
         // NSTN build-ahead materials.

      void setAllSelSplits ();
         //
         // Sets all relevant sel-split bool attributes to true.

@


1.19
log
@Continued implementation of PIP.
@
text
@a165 4
      void buildTestPipSeq ();
         //
         // Builds the test PIP shipment sequence.

@


1.18
log
@Continued implementation of PIP.
@
text
@d166 4
@


1.17
log
@Continued implementation of opt with COIN.
@
text
@d31 1
a31 1
class WIT_DECLSPEC WitAloneRun: public WitUtil
@


1.16
log
@Internal changes.
@
text
@d24 1
@


1.15
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d95 1
a95 1
      inline WitBoolean        booleanParamVal (const char *);
d159 1
a159 1
         // Sets all relevant sel-split boolean attributes to TRUE.
d161 1
a161 1
      WitBoolean tempParIsSet (int);
@


1.14
log
@Continued implementation of single-source.
@
text
@a134 12
      void alterSupplyVol ();
         //
         // Alters a supplyVol for re-opt-implosion.

      void alterGrossRev ();
         //
         // Alters a grossRev for re-opt-implosion.

      void alterCumShipSLB ();
         //
         // Alters a soft LB on cum shipment for re-opt-implosion.

@


1.13
log
@Continued implementation of Single-Source.
@
text
@a172 4
      void chooseSglSrcSites ();
         //
         // Sets singleSource to TRUE for some Parts and BomEntries.

@


1.12
log
@Continued implementation of object iteration.
@
text
@d173 4
@


1.11
log
@Continued implementation of object iteration.
@
text
@a172 4
      void testObjItr ();
         //
         // Test data object iteration.

@


1.10
log
@Moved pegging output to comprehensive implosion solution output.
Fixed bug: Pegging was being attempted during stock bounds enforcement.
@
text
@d173 4
@


1.9
log
@Continued implementation of pegging.
@
text
@a172 12
      void printPegging ();
         //
         // Prints the pegging.

      void print (WitObjStack <const WitOpnPegEl> & thePegEls);
         //
         // Prints thePegEls;

      void print (WitObjStack <const WitSubPegEl> & thePegEls);
         //
         // Prints thePegEls;

@


1.8
log
@Initial implementation of pegging.
@
text
@d177 8
@


1.7
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d173 4
@


1.6
log
@Refactoring for selection splitting.
@
text
@d169 4
@


1.5
log
@

Revised stand-alone FSS capabilties in development mode.
Modified some stock soft-lower bound controls.
Fixed bug: BOP entry productRate attribute could not be read.
@
text
@d73 1
a73 3
      copyCtorAndAssignment (WitAloneRun);
         //
         // Prevents unintentional copying and assignment.
@


1.4
log
@Made HeurAllPerf::findMaxQty test desQty when it's < minQty.
   This fixed a "commit failed" error, by making the heuristic function
   properly in cases in which commit fails at a lower desQty than one in which
   it succeeds.
Moved top-level net into commitMaxQtySel.
@
text
@a128 4
      void readFss ();
         //
         // Reads fssShipVols as demandVols.

a131 4

      void testFss ();
         //
         // Tests the feasibility of the FSS solution.
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d174 5
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d30 1
a30 1
class WIT_DECLSPEC WitAloneRun
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
