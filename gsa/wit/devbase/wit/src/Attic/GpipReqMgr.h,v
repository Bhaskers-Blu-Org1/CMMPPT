head	1.16;
access;
symbols
	latest_sce_4_20_20060523:1.5.0.2
	sce_4_20_20060523:1.5
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4;
locks; strict;
comment	@ * @;


1.16
date	2006.08.03.17.38.32;	author rjw;	state dead;
branches;
next	1.15;

1.15
date	2006.06.09.14.16.21;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.08.19.37.04;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.07.22.29.02;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.06.21.08.49;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.06.15.42.39;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.31.20.21.02;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.31.15.55.33;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.30.22.36.00;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.26.23.06.49;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.26.20.40.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.02.17.33.59;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.07.15.34.56;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.15.16.21.06;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.13.20.31.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.13.17.02.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@GPIP migration.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef GpipReqMgrH
#define GpipReqMgrH

//------------------------------------------------------------------------------
// Header file: "GpipReqMgr.h"
//
// Contains the declaration of class GpipReqMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>
#include <ObjStack.h>
#include <PairStack.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// Class GpipReqMgr
//
// "Group Post-Implosion Pegging Requirement Manager"
//
// Responsible for managing the requirements in GPIP.
//
// Implemented in GpipReq.C.
//------------------------------------------------------------------------------

class WitGpipReqMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitGpipReqMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitGpipReqMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool hasReqsFor (WitPart * thePart, WitPeriod fillPer);
         //
         // Returns true, iff there is at least one requirement for thePart in
         // fillPer.

      bool hasReqsFor (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns true, iff there is at least one requirement for theOpn in
         // execPer.

      WitGpipReqSrc * newReqSrcForSeqNo (int theSeqNo);
         //
         // Constructs and returns a new SrcReqSrc for theSeqNo.

      void addReq (
            WitPart *       thePart,
            WitPeriod       fillPer,
            WitGpipReqSrc * theReqSrc,
            double          incReqVol);
         //
         // Adds (theReqSrc, incReqVol) to the list of requirements for thePart
         // in fillPer.

      void addReq (
            WitBopEntry *   theBopEnt,
            WitPeriod       execPer,
            WitGpipReqSrc * theReqSrc,
            double          incExecVol);
         //
         // Adds (theReqSrc, incExecVol) to the list of requirements for
         // theBopEnt in execPer.

      void loadCurReqList (WitPart * thePart, WitPeriod fillPer);
         //
         // Transfers the requirements for thePart in fillPer to the current
         // requirement list. Sorts and consolidates the list, as well.

      void loadCurReqList (WitOperation * theOpn, WitPeriod execPer);
         //
         // Determines the requirements for theOpn in execPer and loads them
         // into the current requirement list.

      void clearCurReqList ();
         //
         // Clears curReqList_.

      void initReqListItr ();
         //
         // Initializes requirement list iteration.

      void advanceReqListItr (
            double &          netReqVol,
            WitGpipReqSrc * & theReqSrc,
            double &          incReqVol);
         //
         // Advances requirement list iteration by no more than netReqVol units,
         // sets theReqSrc and incReqVol to the current GpipReqSrc and
         // incremental requirement volume, and decrements netReqVol by
         // incReqVol.

      void advanceReqListItr (
            WitGpipReqSrc * & theReqSrc,
            double &          incReqVol);
         //
         // Advances requirement list iteration and sets theReqSrc and incReqVol
         // to the current GpipReqSrc and incremental requirement volume.

      bool finishedReqListItr ();
         //
         // Returns true, iff requirement list iteration is finished.

      void prtSizes ();
         //
         // Prints the maximum size and capacity of myReqSpecVec_.

      //------------------------------------------------------------------------
      // Public member functions for NPO mode.
      //------------------------------------------------------------------------

      void npoSortReqLists (WitMaterial * theMat);
         //
         // Sorts the requirement lists for theMat in all periods.

      void prepPegMatPerNpo (
            WitMaterial * theMat,
            WitPeriod     pegPer,
            double        theStockVol);
         //
         // Prepares the requirements for pegging for theMat in pegPer to a
         // single attribute in NPO mode.
         // theStockVol is the relevant stock volume on theMat in pegPer.

      void postPegMatPerNpo ();
         //
         // Takes action appropriate just after pegging a single attribute of a
         // Material in a period in NPO mode.

      void postPegMatNpo (
            WitMaterial *      theMat,
            WitTVec <double> & netStockVol,
            double &           unmatchVol);
         //
         // Takes action appropriate just after pegging a single attribute of
         // theMat in all periods in NPO mode.
         // Updates netStockVol, the vector of net stockVols.
         // Sets unmatchVol to the unmatched pegging volume.

      void recPegMatPerNpo (
            WitPeriod       pegPer,
            double          pegVol,
            WitGpipReqSrc * theReqSrc);
         //
         // Records the fact that pegVol units were pegged to theReqSrc in
         // pegPer in NPO mode.

      void npoClearReqs (
            WitMaterial * theMat,
            WitPeriod     reqPer,
            double &      totReqVol);
         //
         // Clears the requirements for theMat in reqPer.
         // Sets totReqVol to the total requirement volume.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildSeqEls ();
         //
         // Builds the GpipSeqEls owned by this GpipReqMgr.

      void loadReqsFromOne (WitOperation * theOpn, WitPeriod execPer);
         //
         // Assuming theOpn has exactly one BopEntry eligible for explosion at
         // execPer, this function loads the requirements from that BopEntry at
         // execPer into the current requirement list.

      void mergeReqs (WitOperation * theOpn, WitPeriod execPer);
         //
         // Merges the requirements in execPer for each of the BopEntries for
         // theOpn and loads them into the current requirement list.

      double minIncReqVol (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns the minimum incReqVol for the first GpipReqSpec for each
         // BopEntry for theOpn in execPer.
         // Returns -1, if there are no more GpipReqSpecs for the BopEntries for
         // theOpn in execPer.
 
      void extractReqSrcs ( 
            WitOperation *       theOpn,
            WitPeriod            execPer,
            double               deltaIncReqVol,
            WitGpipReqSrcStack & theReqSrcs);
         //
         // Sets theReqSrcs to consist of the GpipReqSrc for the first
         // GpipReqSpec for each BopEntry for theOpn in execPer.
         // Removes deltaIncReqVol units of incReqVol from the beginning of the
         // ReqList for each BopEntry for theOpn in execPer.

      void sortReqList ();
         //
         // Sorts and consolidates curReqList_.

      void loadReqSpecVec ();
         //
         // Converts the ReqPairs in curReqList_ into GpipReqSpecs and stores
         // them in myReqSpecVec_.

      void expandReqSpecVec ();
         //
         // Expands myReqSpecVec_ as needed.

      bool compareReqSpecs (
            WitGpipReqSpec * theReqSpec1,
            WitGpipReqSpec * theReqSpec2);
         //
         // Returns true, iff theReqSpec1 belongs ahead of theReqSpec2 in
         // myReqSpecVec_.

      void unloadReqSpecVec ();
         //
         // Converts the GpipReqSpecs in myReqSpecVec_ to ReqPairs,
         // consolidates them, and stores them in curReqList_.

      bool hasMultiExp (WitOperation * theOpn, WitPeriod execPer);
         //
         // Returns true, iff theOpn has more than one BopEntry eligible for
         // explosion at execution period execPer.

      bool expEligible (WitBopEntry * theBopEnt, WitPeriod execPer);
         //
         // Returns true, iff theBopEnt is eligible for explosion at execution
         // period execPer.

      void prtCurReqListBeforeSort ();
         //
         // Prints curReqList_ before sorting.

      void prtCurReqListAfterSort ();
         //
         // Prints curReqList_ after sorting.

      void prtCurReqList (WitOperation * theOpn, WitPeriod execPer);
         //
         // Prints curReqList_ after loading from theOpn in execPer.

      void prtBopEntReqs (WitOperation * theOpn, WitPeriod execPer);
         //
         // Prints the requirements in execPer at each BopEntry for theOpn.

      void prtReqList (const WitGpipReqList & theReqList);
         //
         // Prints theReqList.

      noCopyCtorAssign (WitGpipReqMgr);

      //------------------------------------------------------------------------
      // Private member functions for NPO mode.
      //------------------------------------------------------------------------

      void npoTruncReqList (
            WitGpipReqList & theReqList,
            double &         netBound,
            double &         truncVol);
         //
         // Truncates theReqList so that the total incReqVol is no more than
         // netBound. Sets truncVol to the amount by which theReqList was
         // reduced. Reduces netBound by the total requirement volume in
         // theReqList after truncation.

      void npoMergeReqLists (
                  WitGpipReqList & theReqList1,
            const WitGpipReqList & theReqList2);
         //
         // Merges copies of the pairs in theReqList2 into theReqList1.

      void npoMatchReqs (
            WitGpipReqList & theReqList1,
            WitGpipReqList & theReqList2);
         //
         // Finds the requirements that are common to theReqList1 and
         // theReqList2 and removes them from both lists.

      void npoPopOrNull (
            WitGpipReqSrc * & theReqSrc,
            double &          incReqVol,
            WitGpipReqList &  theReqList);
         //
         // Pops theReqSrc and incReqVol from theReqList, or sets them to NULL
         // and 0.0, if theReqList is empty.

      void npoAdvOrNull (
            WitGpipReqSrc * &   theReqSrc,
            double &            incReqVol,
            WitGpipReqListItr & theItr);
         //
         // Advances theItr and sets theReqSrc and incReqVol to the result, or
         // to NULL and 0.0, if the advance was unsuccessful.

      double npoTotReqVol (WitGpipReqList & theReqList);
         //
         // Computes and returns the total requirement volume in theReqList.
         // Clears theReqList.

      void npoPrtUnmatchedList (
            WitMaterial *          theMat,
            WitPeriod              reqPer,
            const WitGpipReqList & unmatchedList);
         //
         // Prints unmatchedList for theMat in reqPer.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitGpipSeqEl> mySeqElVec_;
         //
         // mySeqElVec_[theSeqNo] is the GpipSeqEl owned by this GpipReqMgr
         // whose sequence number is theSeqNo.

      WitGpipReqSrcStack myReqSrcs_;
         //
         // The GpipReqSrcs owned by this GpipReqMgr.

      WitGpipReqSrc * myVacReqSrc_;
         //
         // The GpipReqSrc owned by this GpipReqMgr whose GpipSeqEl is the
         // vacuous GpipSeqEl.

      WitPtrSched <WitPart, WitGpipReqList> myPartReqs_;
         //
         // myPartReqs_.myElemAt (thePart, fillPer) is the list of requirement
         // pairs for thePart in fillPer.

      WitPtrSched <WitBopEntry, WitGpipReqList> myBopEntReqs_;
         //
         // myBopEntReqs_.myElemAt (theBopEnt, execPer) is the list of
         // requirement pairs for theBopEnt in execPer.

      WitPtrVec <WitGpipReqSpec> myReqSpecVec_;
         //
         // The set of active GpipReqSpecs owned by the GpipReqMgr.
         // They are stored in this vector, so that they can be sorted.

      int nActReqSpecs_;
         //
         // The number of GpipReqSpecs currently active.

      int maxActReqSpecs_;
         //
         // Maximim number of GpipReqSpecs ever active.

      WitGpipReqList curReqList_;
         //
         // The current requirement list for this GpipReqMgr.
         // The list of pairs, (theReqSrc, incReqVol), indicating that incReqVol
         // units of requirement for the current Part and Period are pegged to
         // theReqSrc.

      WitGpipReqListItr myReqListItr_;
         //
         // The iterator that implements requirement list iteration.

      WitGpipReqSrc * curReqSrc_;
         //
         // The current GpipReqSrc for requirement list iteration.

      double incReqVolCur_;
         //
         // The current incremental requirement volume for requirement list
         // iteration.

      WitGpipReqList npoReqList_;
         //
         // The working requirement list used in NPO mode.

      WitPtrTVec <WitGpipReqList> npoCurPegList_;
         //
         // In NPO mode, npoCurPegList_[pegPer] is the list of requirements on
         // the current Part that were pegged to the current attribute in
         // pegPer.
   };

#endif
@


1.15
log
@New PIP pegging order?
@
text
@@


1.14
log
@New PIP pegging order.
@
text
@d317 1
a317 1
      double npoTotReqVol (const WitGpipReqList & theReqList);
d320 1
@


1.13
log
@New PIP pegging order.
@
text
@d289 2
a290 2
            WitGpipReqList & theReqList1,
            WitGpipReqList & theReqList2);
d292 1
a292 2
         // Merges the pairs in theReqList2 into theReqList1, emptying
         // theReqList2.
a300 9
      void npoPushPop (
            WitGpipReqSrc * & theReqSrc,
            double &          incReqVol,
            WitGpipReqList &  pushReqList,
            WitGpipReqList &  popReqList);
         //
         // Pushes theReqSrc and incReqVol onto pushReqList and then pops new
         // values for them from popReqList (with npoPopOrNull).

d306 1
a306 1
         // Pops theReqSrc and incReVol from theReqList, or sets them to NULL
d309 8
@


1.12
log
@New PIP pegging order.
@
text
@d134 1
a134 1
      void npoSortReqLists (WitPart * thePart);
d136 1
a136 1
         // Sorts the requirement lists for thePart in all periods.
d138 4
a141 4
      void prepPegPartPerNpo (
            WitPart * thePart,
            WitPeriod pegPer,
            double    theStockVol);
d143 1
a143 1
         // Prepares the requirements for pegging for thePart in pegPer to a
d145 1
a145 1
         // theStockVol is the relevant stock volume on thePart in pegPer.
d147 1
a147 1
      void postPegPartPerNpo ();
d150 1
a150 1
         // Part in a period in NPO mode.
d152 2
a153 2
      void postPegPartNpo (
            WitPart *          thePart,
d158 1
a158 1
         // thePart in all periods in NPO mode.
d162 1
a162 1
      void recPegPartPerNpo (
d170 4
a173 1
      void clearReqs (WitPart * thePart, WitPeriod reqPer, double & totReqVol);
d175 1
a175 1
         // Clears the requirements for thePart in reqPer.
a177 1

d324 1
a324 1
            WitPart *              thePart,
d328 1
a328 1
         // Prints unmatchedList for thePart in reqPer.
@


1.11
log
@New PIP pegging order.
@
text
@d307 9
a315 1
         // values for them from popReqList.
@


1.10
log
@New PIP pegging order.
@
text
@d22 1
d136 1
a136 1
         // Sorted the requirement lists for thePart in all periods.
d212 1
a212 1
         // Removes deltaIncReqVol units of incReqVol from the beginning the
d224 4
a239 15
      WitGpipReqSpec * provideReqSpec (
            WitGpipReqSrc * theReqSrc,
            double          incReqVol);
         //
         // Returns a GpipReqSpec that has been designated as available for use
         // and sets its data to the arguments.

      void reclaimReqSpec (WitGpipReqSpec * theReqSpec);
         //
         // Saves theReqSpec for later use.

      void reclaimReqSpecs (WitGpipReqList & theReqList);
         //
         // Saves the GpipRecSpecs in theReqList for later use.

d290 1
a290 1
         // Merges the GpipReqSpecs in theReqList2 into theReqList1, emptying
d301 4
a304 3
            WitGpipReqSpec * & theReqSpec,
            WitGpipReqList &   pushReqList,
            WitGpipReqList &   popReqList);
d306 2
a307 2
         // Pushes theReqSpec onto pushReqList and then pops a new value for it
         // from popReqList.
d340 2
a341 2
         // myPartReqs_.myElemAt (thePart, fillPer) is the list of GpipReqSpecs
         // for thePart in fillPer.
d346 1
a346 1
         // GpipReqSpecs for theBopEnt in execPer.
d353 1
a353 9
      int nReqSpecsInVec_;
         //
         // The number of GpipReqSpecs currently stored in myReqSpecVec_.
         
      int maxReqSpecsInVec_;
         //
         // Maximum # GpipReqSpecs ever stored in myReqSpecVec_.

      WitGpipReqList unusedReqSpecs_;
d355 1
a355 2
         // The set of GpipReqSpecs owned by this GpipReqMgr that are currently
         // not in use.
d357 1
a357 1
      int totNReqSpecs_;
d359 1
a359 1
         // Total # of GpipReqSpecs created by this GpipReqMgr.
d368 1
a368 1
      WitGpipReqSpecItr myReqSpecItr_;
@


1.9
log
@New PIP pegging order.
@
text
@d286 4
a289 1
      void npoTruncReqList (WitGpipReqList & theReqList, double upperBound);
d292 3
a294 1
         // upperBound.
@


1.8
log
@New PIP pegging order.
@
text
@d272 1
a272 1
      void prtCurReqList ();
d274 1
a274 1
         // Prints curReqList_.
d276 1
a276 1
      void prtBopEntReqs (WitOperation * theOpn, WitPeriod execPer);
d278 1
a278 1
         // Prints the requirements in execPer at each BopEntry for theOpn.
d317 7
@


1.7
log
@New PIP pegging order.
@
text
@d151 4
a154 1
      void postPegPartNpo (WitPart * thePart, WitTVec <double> & netStockVol);
d159 1
d169 1
a169 1
      double npoTotReqVol (WitPart * thePart, WitPeriod reqPer);
d171 3
a173 2
         // Computes and returns the total requirement volume for thePart in
         // reqPer.
d298 1
a298 1
      void npoNetReqs (
@


1.6
log
@New PIP pegging order.
@
text
@d358 1
a358 1
      int totNRepSpecs_;
@


1.5
log
@Updated the copyright date on all source files.
@
text
@d89 1
a89 1
         // requirement list. (Sorts and consolidates the list, as well.)
d129 41
d241 4
d278 35
d358 4
d369 1
a369 1
      WitObjStItr <WitGpipReqSpec> myReqSpecItr_;
d381 10
@


1.4
log
@Fixed a bug in GPIP.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.3
log
@GPIP
@
text
@d139 6
d200 10
@


1.2
log
@GPIP
@
text
@d125 4
a213 4
      void prtSizes ();
         //
         // Prints the maximum size and capacity of myReqSpecVec_.

@


1.1
log
@GPIP
@
text
@d29 1
a29 1
// Responsible for managing the requirements in SRP.
@

