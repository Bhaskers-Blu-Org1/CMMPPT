head	1.3;
access;
symbols
	EndRw-branch:1.2.0.2
	Root-of-EndRw:1.2;
locks; strict;
comment	@ * @;


1.3
date	2002.12.17.21.32.49;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2002.11.21.22.53.58;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.15.20.27.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed implementation of single-source by the old algorithm.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OldSglMgrH
#define OldSglMgrH

//------------------------------------------------------------------------------
// Header file: "OldSglMgr.h"
//
// Contains the declaration of class OldSglMgr.
//------------------------------------------------------------------------------

#include <ObjStack.h>
#include <PtrMap.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class OldSglMgr
//
// "Old Single-Source Manager"
//
// Performs single-source heuristic allocation.
//
// This class is part of the implementation of the old single-source algorithm.
//------------------------------------------------------------------------------

class WitOldSglMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOldSglMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOldSglMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static WitBoolean sglSrcReq (WitProblem * theProblem);
         //
         // Returns TRUE, iff single-source has been requested for theProblem.

      void commitMaxQty (double & netQty);
         //
         // Does commitMaxQty in single-source mode.

      void prepCmqSel ();
         //
         // Prepares for a call to HeurAtor::commitMaxQtySel.

      WitBoolean findPmrMisMatch (
            WitPart * thePart,
            WitPeriod expPer,
            WitPeriod fillPer);
         //
         // Returns TRUE, iff there is a selection mis-match between 
         // single-source and PMR for exploding thePart in expPer.
         // If there is a mis-match, a fundamental shortage is recorded.

      void noteCmrMisMatch (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            WitPeriod     fillPer,
            WitBopEntry * theBopEnt);
         //
         // Looks for a selection mis-match between single-source and CMR for
         // exploding through theBopEnt and theBomEnt in execPer for reqs in
         // fillPer. If a mis-match is found, it is recorded and a fundamental
         // shortage is recorded.

      WitBoolean checkCmrMisMatch ();
         //
         // Tells this OldSglMgr that the current call to HeurAtor::explode is
         // finished. 
         // Returns TRUE, iff a CMR mis-match was found during the call.

      void placeReqs (WitSelPt * theSelPt);
         //
         // Records the fact that requirements were placed by exploding thru
         // theSelPt.

      WitBoolean mustSkip (WitSelPt * theSelPt);
         //
         // Returns TRUE, iff alteration at theSelPt is to be skipped.

      WitBoolean sglSrcMode (WitSelPt * theSelPt);
         //
         // Returns TRUE, iff theSelPt is currently in single-source mode.

      WitBoolean sglSrcMode (WitBomEntry * theBomEnt);
         //
         // Returns TRUE, iff theBomEnt is currently in single-source mode.

      void alterSelections ();
         //
         // Does alterSelections in single-source mode.

      void alterSelection (WitSelPt * theSelPt);
         //
         // Does alterSelection in single-source mode.

      void saveAllocVal (int    & theVar);
      void saveAllocVal (double & theVar);
         //
         // Saves the current value of theVar to be restored as part of the
         // allocation.

      void saveConfigVal (int &          theVar);
      void saveConfigVal (WitSelCand * & theVar);
         //
         // Saves the current value of theVar to be restored as part of the
         // selection configuration.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void verifyRestrictions ();
         //
         // Verifies that all of the problem restrictions required for
         // single-source hold.

      void prepSelCMQ ();
         //
         // Prepares for a call to Selector::commitMaxQty.

      void prtPureMS ();
         //
         // Prints when the allocation is retained as pure multi-source.

      void prtDesIncVolAch ();
         //
         // Prints when desIncVol was acheived in a non-pure multi-source
         // iterations.

      void exhaustedCMQ (double & netQty);
         //
         // Does commitMaxQty in pure multi-source mode for the single-source-
         // alternatives-exhausted case.

      void alterNextAltSite ();
         //
         // Alters the selection at nextAltSite_.

      void reset ();
         //
         // Resets this OldSglMgr.

      void seekNextAltSite (WitSelPt * theSelPt);
         //
         // Sets nextAltSite_ to the OldSglSite for theSelPt, if appropriate.

      void prtNextAltSite (WitBoolean forMisMatch);
         //
         // Prints nextAltSite_, as needed.
         // forMisMatch is TRUE, iff the Alt is for a mis-match.

      WitOldSglSite * myOsSiteFor (WitSelPt * theSelPt);
         //
         // Returns theOldSglSite corresponding to theSelPt, if any;
         // otherwise NULL.

      noCopyCtorAssign (WitOldSglMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSelector * const mySelector_;
         //
         // The Selector that owns this OldSglMgr.

      WitPtrMap <WitPart, WitOldSglSite> myOsSiteForPart_;
         //
         // myOsSiteForPart_ (thePart) is the OldSglSite owned by this OldSglMgr
         // corresponding to thePart, if any, else NULL.

      WitPtrMap <WitBomEntry, WitOldSglSite> myOsSiteForBomEnt_;
         //
         // myOsSiteForBomEnt_ (theBomEnt) is the OldSglSite owned by this
         // OldSglMgr corresponding to theBomEnt, if any, else NULL.

      WitBoolean sglSrcMode_;
         //
         // TRUE  --> this OldSglMgr is single-source mode.
         // FALSE --> this OldSglMgr is  multi-source mode.

      WitObjStack <WitOldSglSite> alteredSites_;
         //
         // The set of all OldSglSites whose selection has been altered.

      WitBoolean pureMS_;
         //
         // TRUE, iff the most recent call to commitMaxQty, was pure 
         // multi-source, i.e., whenever reqs were placed, the single-source
         // selection matched the multi-source selection.

      WitBoolean cmrMisMatch_;
         //
         // TRUE, iff a CMR mis-match was found during the current call to
         // HeurAtor::explode.

      WitOldSglSite * misMatchSite_;
         //
         // The OldSglSite at which the most recent mis-match was found, if any;
         // otherwise NULL.

      WitOldSglSite * nextAltSite_;
         //
         // The OldSglSite at which the next single-source alteration is to be
         // performed, if any; otherwise NULL.

      WitDataRepos * allocRepos_;
         //
         // The DataRepos for saving and restoring the allocation.

      WitDataRepos * configRepos_;
         //
         // The DataRepos for saving and restoring the selection configuration.

      int nItrs_;
         //
         // # iterations for commitMaxQty.

      int nAlts_;
         //
         // # single-source alterations.

      int swToMS_;
         //
         // # switchings to multi-source mode.
   };

#endif
@


1.2
log
@Continued implementation of single-source with the new algorithm.
@
text
@@


1.1
log
@Began implementation of the new single-source algorithm.
@
text
@d53 1
a53 1
      static WitBoolean hasSglSrcComp (WitProblem * theProblem);
d55 1
a55 2
         // Returns TRUE, iff theProblem has at least one Part or BomEntry with
         // singleSource () == TRUE.
d174 1
a174 1
      WitOldSglSite * mySoSiteFor (WitSelPt * theSelPt);
d189 1
a189 1
      WitPtrMap <WitPart, WitOldSglSite> mySoSiteForPart_;
d191 1
a191 1
         // mySoSiteForPart_ (thePart) is the OldSglSite owned by this OldSglMgr
d194 1
a194 1
      WitPtrMap <WitBomEntry, WitOldSglSite> mySoSiteForBomEnt_;
d196 1
a196 1
         // mySoSiteForBomEnt_ (theBomEnt) is the OldSglSite owned by this
@

