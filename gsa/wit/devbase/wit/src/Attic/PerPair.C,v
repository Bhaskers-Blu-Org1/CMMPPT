head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2003.12.24.23.25.56;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2003.12.23.18.04.23;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.23.17.56.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Continued implementation of PIP.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "PerPair.C"
//
// Contains the implementation of the following:
//
//    PerPair    <FirstEl>,                 with explicit instantiation
//    NonClass function template popTriple, with explicit instantiation
//    PerPairMgr <FirstEl>,                 with explicit instantiation
//------------------------------------------------------------------------------

#include <PerPair.h>
#include <PerPairMgr.h>
#include <PairStack.h>
#include <Part.h>
#include <Opn.h>
#include <SubEntry.h>
#include <MapIdxI.h>

//------------------------------------------------------------------------------
// Implementation of class template PerPair <FirstEl>.
//------------------------------------------------------------------------------

template <typename FirstEl>
      WitPerPair <FirstEl>::WitPerPair (FirstEl * theFirstEl, WitPeriod thePer):
         myFirstEl_ (theFirstEl),
         myPeriod_  (thePer)
   {                                                                     
   }                                                                     
                                                                               
//------------------------------------------------------------------------------

template <typename FirstEl>
      WitPerPair <FirstEl>::~WitPerPair ()                                      
   {                                                                     
   }                                                                     
                                                                               
//------------------------------------------------------------------------------

template <typename FirstEl>
      void WitPerPair <FirstEl>::getElems (
         FirstEl * & theFirstEl,
         WitPeriod & thePer)
   {
   theFirstEl = myFirstEl_;
   thePer     = myPeriod_;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template PerPair <FirstEl>.
//------------------------------------------------------------------------------

template class WitPerPair <WitPart>;
template class WitPerPair <WitOperation>;
template class WitPerPair <WitSubEntry>;
template class WitPerPair <WitDemand>;

//------------------------------------------------------------------------------
// Implementation of NonClass function template popTriple.
//------------------------------------------------------------------------------

template <typename FirstEl> 
      bool WitNonClass::popTriple (
         WitPairStack <WitPerPair <FirstEl>, double> & theTriples,
         FirstEl * &                                   theFirstEl,
         WitPeriod &                                   thePer,
         double &                                      theVol)
   {
   WitPerPair <FirstEl> * thePair;

   if (theTriples.isEmpty ())
      return false;

   theTriples.pop (thePair, theVol);

   thePair->getElems (theFirstEl, thePer);

   return true;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of NonClass function template popTriple.s
//------------------------------------------------------------------------------

template
   bool WitNonClass::popTriple <WitPart> (
      WitPairStack <WitPerPair <WitPart>, double> &,
      WitPart * &,
      WitPeriod &,
      double &);

template
   bool WitNonClass::popTriple <WitOperation> (
      WitPairStack <WitPerPair <WitOperation>, double> &,
      WitOperation * &,
      WitPeriod &,
      double &);

template
   bool WitNonClass::popTriple <WitSubEntry> (
      WitPairStack <WitPerPair <WitSubEntry>, double> &,
      WitSubEntry * &,
      WitPeriod &,
      double &);

template
   bool WitNonClass::popTriple <WitDemand> (
      WitPairStack <WitPerPair <WitDemand>, double> &,
      WitDemand * &,
      WitPeriod &,
      double &);

//------------------------------------------------------------------------------
// Implementation of class template PerPairMgr <FirstEl>.
//------------------------------------------------------------------------------

template <typename FirstEl> 
      WitPerPairMgr <FirstEl>::WitPerPairMgr (WitProblem * theProblem):

         WitProbAssoc (theProblem),
         myPerPairs_  (theProblem)
   {
   myPairSched_.allocate1D (theProblem);
   }

//------------------------------------------------------------------------------

template <typename FirstEl> 
      WitPerPairMgr <FirstEl>::~WitPerPairMgr ()
   {
   myPairSched_.clear ();

   deleteContents (myPerPairs_);
   }

//------------------------------------------------------------------------------

template <typename FirstEl> 
      WitPerPair <FirstEl> * WitPerPairMgr <FirstEl>::myPerPairFor (
         FirstEl * theFirstEl,
         WitPeriod thePer)
   {
   WitPerPair <FirstEl> * thePerPair;

   if (not myPairSched_.myPtrTVecAt (theFirstEl).isAllocated ())
      myPairSched_.myPtrTVecAt (theFirstEl).allocate (myProblem ());

   thePerPair = myPairSched_.myPtrAt (theFirstEl, thePer);

   if (thePerPair != NULL)
      return thePerPair;

   thePerPair = new WitPerPair <FirstEl> (theFirstEl, thePer);

   myPerPairs_.push (thePerPair);

   myPairSched_.myPtrAt (theFirstEl, thePer) = thePerPair;

   return thePerPair;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template PerPairMgr <FirstEl>.
//------------------------------------------------------------------------------

template class WitPerPairMgr <WitPart>;
template class WitPerPairMgr <WitOperation>;
template class WitPerPairMgr <WitSubEntry>;
@


1.2
log
@Attempt to fix a syntax error on AIX.
@
text
@@


1.1
log
@Continued implementation of PIP.
@
text
@d23 4
@

