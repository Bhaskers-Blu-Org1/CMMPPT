head	1.7;
access;
symbols
	nextGenBranch:1.6.0.2
	nextGenRoot:1.6
	sce_3_30_20030627:1.6
	EndRw-branch:1.2.0.4
	Root-of-EndRw:1.2
	rwToStl:1.2.0.2;
locks; strict;
comment	@ * @;


1.7
date	2003.10.01.19.41.11;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2003.02.13.23.06.33;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.23.19.13.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.13.22.22.14;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.25.15.15.23;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.04.19.14.59;	author rjw;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.06.06.18.53.42;	author rjw;	state Exp;
branches;
next	;

1.2.2.1
date	2002.11.08.16.11.34;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Continued implementation of post-implosion pegging.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ScheduleIH
#define ScheduleIH

//------------------------------------------------------------------------------
// Header file: "ScheduleI.h"
//
// Contains the implementation of class template
// Schedule <DomainType, RangeType>.
//------------------------------------------------------------------------------

#include <Schedule.h>

//------------------------------------------------------------------------------

template <typename DomainType, typename RangeType>
      WitSchedule <DomainType, RangeType>::WitSchedule ():
         myVector_ ()
   {
   ifDebug (DomainType * theObject);

   ifDebug (DomainType::verifyMappingIndex (theObject));
   }

//------------------------------------------------------------------------------

template <typename DomainType, typename RangeType>
      WitSchedule <DomainType, RangeType>::WitSchedule (
            WitProblem * theProblem, RangeType initValue):
         myVector_ ()
   {
   allocate (theProblem, initValue);
   }

//------------------------------------------------------------------------------

template <typename DomainType, typename RangeType>
      WitSchedule <DomainType, RangeType>::~WitSchedule ()
   {
   clear ();
   }

//------------------------------------------------------------------------------

template <typename DomainType, typename RangeType>
      inline const WitTVec <RangeType> &
         WitSchedule <DomainType, RangeType>::operator () (
            const DomainType * theObject) const
   {
   witAssert (theObject != NULL);

   return myVector_ (theObject->mappingIndex ());
   }

//------------------------------------------------------------------------------

template <typename DomainType, typename RangeType>
      inline WitTVec <RangeType> &
         WitSchedule <DomainType, RangeType>::
            operator () (const DomainType * theObject)
   {
   witAssert (theObject != NULL);

   return myVector_ (theObject->mappingIndex ());
   }

//------------------------------------------------------------------------------

template <typename DomainType, typename RangeType>
      inline size_t WitSchedule <DomainType, RangeType>::domainSize () const
   {
   return myVector_.length ();
   }

//------------------------------------------------------------------------------

template <typename DomainType, typename RangeType>
      void WitSchedule <DomainType, RangeType>::clear ()
   {
   size_t i;

   for (i = 0; i < domainSize (); ++i)
      delete myVector_[i];

   myVector_.clear ();
   }

//------------------------------------------------------------------------------

template <typename DomainType, typename RangeType>
      void WitSchedule <DomainType, RangeType>::allocate (
         WitProblem * theProblem,
         RangeType    theValue)
   {
   size_t i;

   allocate1D (theProblem);

   for (i = 0; i < domainSize (); ++i)
      myVector_ (i).allocate (theProblem, theValue);
   }

//------------------------------------------------------------------------------

template <typename DomainType, typename RangeType>
      void WitSchedule <DomainType, RangeType>::allocate1D (
         WitProblem * theProblem)
   {
   size_t i;

   clear ();

   myVector_.resize (DomainType::nInstances (theProblem));

   for (i = 0; i < domainSize (); ++i)
      myVector_[i] = new WitTVec <RangeType>;
   }

#endif
@


1.6
log
@Continued implementation of proportionate routing.
@
text
@@


1.5
log
@Replaced some C style casts with C++ style casts.
@
text
@a117 4
   int nInst;

   nInst =
      theProblem->myCompMgr ()->nInstances (static_cast <DomainType *> (NULL));
d121 1
a121 1
   myVector_.resize (nInst);
@


1.4
log
@Various internal changes.
@
text
@d120 2
a121 1
   nInst = theProblem->myCompMgr ()->nInstances ((DomainType *) NULL);
@


1.3
log
@modications to change rogueWave tools.h++ to STL
@
text
@d24 1
a24 1
template <class DomainType, class RangeType>
d35 1
a35 1
template <class DomainType, class RangeType>
d45 1
a45 1
template <class DomainType, class RangeType>
d53 1
a53 1
template <class DomainType, class RangeType>
d65 1
a65 1
template <class DomainType, class RangeType>
d77 1
a77 1
template <class DomainType, class RangeType>
d85 1
a85 1
template <class DomainType, class RangeType>
d98 1
a98 1
template <class DomainType, class RangeType>
d113 1
a113 1
template <class DomainType, class RangeType>
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d88 1
a88 1
   int i;
d103 1
a103 1
   int i;
d117 1
a117 1
   int i;
@


1.2.2.1
log
@Migration from Roguewave tools.h++ to STL
@
text
@d88 1
a88 1
   size_t i;
d103 1
a103 1
   size_t i;
d117 1
a117 1
   size_t i;
@


1.1
log
@Continued implementation of Single-Source.
@
text
@a129 36
//------------------------------------------------------------------------------

template <class DomainType, class RangeType>
      RangeType WitSchedule <DomainType, RangeType>::ifAny (
         const DomainType * theObject,
         WitPeriod          thePer)
         const
   {
   if (domainSize () == 0)
      return (RangeType) NULL;

   if ((* this)(theObject).length () == 0)
      return (RangeType) NULL;

   return (* this) (theObject)[thePer];
   }

//------------------------------------------------------------------------------

template <class DomainType, class RangeType>
      void WitSchedule <DomainType, RangeType>::insert (
         RangeType          theValue,
         const DomainType * theObject,
         WitPeriod          thePer)
   {
   if (domainSize () == 0)
      allocate1D (theObject->myProblem ());

   if ((* this)(theObject).length () == 0)
      (* this)(theObject).allocate (
         theObject->myProblem (),
         (RangeType) NULL);

   (* this) (theObject)[thePer] = theValue;
   }

@

