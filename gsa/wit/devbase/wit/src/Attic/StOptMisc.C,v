head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2007.08.07.19.17.43;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2007.08.07.17.47.14;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.07.17.35.36;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.08.02.19.39.47;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.01.21.28.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.01.20.12.25;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.01.18.56.02;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.31.23.04.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.30.22.38.03;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.27.23.15.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.27.21.08.52;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "StOptMisc.C"
//
// Contains:
//    The implementation of class ScenPer
//    The implementation of class template StOptElMgr <DerComp, StOptEl>
//    The explicit instantiation of        StOptElMgr <DerComp, StOptEl>
//    The implementation of class StochObj.
//    The implementation of class StochVar
//    The implementation of class StochCon
//------------------------------------------------------------------------------

#include <ScenPer.h>
#include <StOptElMgr.h>
#include <StochObj.h>
#include <StochImpOP.h>
#include <ScenMgr.h>
#include <Scenario.h>
#include <StVars.h>
#include <StCons.h>
#include <Part.h>
#include <Opn.h>
#include <PtrMap.h>

//------------------------------------------------------------------------------
// Implementation of class ScenPer.
//------------------------------------------------------------------------------

WitScenPer::WitScenPer (WitProblem * theProblem):

      WitProbAssoc  (theProblem),
      myStochImpOP_ (NULL),
      myScenario_   (NULL),
      myPer_        (-1)
   {
   }

//------------------------------------------------------------------------------

WitScenPer::WitScenPer (
         WitStochImpOP * theStochImpOP,
         WitScenario *   theScenario,
         WitPeriod       thePer):

      WitProbAssoc  (theStochImpOP),
      myStochImpOP_ (theStochImpOP),
      myScenario_   (theScenario),
      myPer_        (thePer)
   {
   }
 
//------------------------------------------------------------------------------

WitScenPer::~WitScenPer ()
   {
   }

//------------------------------------------------------------------------------
// Implementation of class template StOptElMgr <DerComp, StOptEl>.
//------------------------------------------------------------------------------

template <typename DerComp, typename StOptEl> 
         WitStOptElMgr <DerComp, StOptEl>::WitStOptElMgr (
            WitStochImpOP * theStochImpOP):

      WitProbAssoc  (theStochImpOP),
      myStochImpOP_ (theStochImpOP),
      mySched_      (myProblem ())
   {
   }

//------------------------------------------------------------------------------

template <typename DerComp, typename StOptEl> 
         WitStOptElMgr <DerComp, StOptEl>::~WitStOptElMgr ()
   {
   int       theIdx;
   WitPeriod thePer;

   for (theIdx = 0; theIdx < mySched_.domainSize (); theIdx ++)
      forEachPeriod (thePer, myProblem ())
         delete mySched_.myPtrTVecAt (theIdx)[thePer];
   }

//------------------------------------------------------------------------------

template <typename DerComp, typename StOptEl> 
      void WitStOptElMgr <DerComp, StOptEl>::createMyElFor (
         DerComp *     theDerComp,
         WitPeriod     thePer,
         WitScenario * theScenario)
   {
   WitScenPer * theScenPer;
   StOptEl *    theStOptEl;

   theScenPer = myStochImpOP_->myScenPerSched ().myPtrAt (theScenario, thePer);

   theStOptEl = new StOptEl (theDerComp, theScenPer);

   if (mySched_.myPtrAt (theDerComp, thePer) == NULL)
       mySched_.myPtrAt (theDerComp, thePer) =
         new WitPtrMap <WitScenario, StOptEl> (myProblem ());

   witAssert (mySched_.myElemAt (theDerComp, thePer) (theScenario) == NULL);

   mySched_.myElemAt (theDerComp, thePer) (theScenario) = theStOptEl;
   }

//------------------------------------------------------------------------------

template <typename DerComp, typename StOptEl> 
      StOptEl * WitStOptElMgr <DerComp, StOptEl>::myElFor (
         DerComp *     theDerComp,
         WitPeriod     thePer,
         WitScenario * theScenario)
   {
   if (      mySched_.myPtrAt  (theDerComp, thePer) != NULL)
      return mySched_.myElemAt (theDerComp, thePer) (theScenario);
   else
      return NULL;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template StOptElMgr <DerComp, StOptEl>.
//------------------------------------------------------------------------------

template class WitStOptElMgr <WitPart,      WitStScrapVar>;
template class WitStOptElMgr <WitOperation, WitStExecVar>;
template class WitStOptElMgr <WitPart,      WitStResCon>;

//------------------------------------------------------------------------------
// Implementation of class StochObj.
//------------------------------------------------------------------------------

WitStochObj::WitStochObj (WitStochImpOP * theStochImpOP):
      WitOptObj ("Stochastic Objective", theStochImpOP)
   {
   }

//------------------------------------------------------------------------------

WitStochObj::~WitStochObj ()
   {
   }

//------------------------------------------------------------------------------

double WitStochObj::coeffVal (const WitOptVar * theVar) const
   {
   return theVar->stochCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class StochVar.
//------------------------------------------------------------------------------

WitStochVar::WitStochVar (WitScenPer *  theScenPer):

      WitOptVar  (theScenPer->myStochImpOP ()),
      myScenPer_ (theScenPer)
   {
   }

//------------------------------------------------------------------------------

WitStochVar::~WitStochVar ()
   {
   }

//------------------------------------------------------------------------------

WitOptProb * WitStochVar::myOptProb () const
   {
   return myStochImpOP ();
   }

//------------------------------------------------------------------------------

void WitStochVar::printSource () const
   {
   printItem ();

   myStochImpOP ()->printPeriod   (myPer      ());
   myStochImpOP ()->printScenario (myScenario ());
   }

//------------------------------------------------------------------------------
// Implementation of class StochCon.
//------------------------------------------------------------------------------

WitStochCon::WitStochCon (WitScenPer * theScenPer):

      WitOptCon  (theScenPer->myStochImpOP ()),
      myScenPer_ (theScenPer)
   {
   }

//------------------------------------------------------------------------------

WitStochCon::~WitStochCon ()
   {
   }

//------------------------------------------------------------------------------

WitOptProb * WitStochCon::myOptProb () const
   {
   return myScenPer_->myStochImpOP ();
   }

//------------------------------------------------------------------------------

void WitStochCon::printSource () const
   {
   printItem ();

   myStochImpOP ()->printPeriod   (myPer      ());
   myStochImpOP ()->printScenario (myScenario ());
   }
@


1.10
log
@Stochastic Implosion
@
text
@@


1.9
log
@Stochastic Implosion
@
text
@d28 1
a28 1
#include <StochVars.h>
@


1.8
log
@Stochastic Implosion
@
text
@d14 1
a14 1
//    The implementation of class ScenPer.
d18 2
d28 1
a28 1
#include <StVars.h>
a33 4

#include <MsgFac.h>


d161 68
@


1.7
log
@Stochastic Implosion
@
text
@d161 1
a161 3
   myMsgFac () ("singleStochLPNyiSmsg", 1);

   return 0.0;
@


1.6
log
@Stochastic Implosion
@
text
@d56 1
a56 1
      WitProbAssoc  (theStochImpOP->myProblem ()),
d77 1
a77 1
      WitProbAssoc  (theStochImpOP->myProblem ()),
@


1.5
log
@Stochastic Implosion
@
text
@a32 1
#include <OptImp.h>
d161 1
a161 1
   myOptImploder ()->myMsgFac () ("singleStochLPNyiSmsg", 1);
@


1.4
log
@Stochastic Implosion
@
text
@d32 5
d162 1
a162 1
   stronglyAssert (false);
@


1.3
log
@Stochastic Implosion
@
text
@a122 1
         const
@


1.2
log
@Stochastic Implosion
@
text
@d30 1
a30 1
#include <PtrSched.h>
a76 8
   WitScenario * theScenario;

   forEachEl (theScenario, myStochImpOP_->myScenMgr ()->myScenarios ())
      {
      mySched_.setMapFor (theScenario, * new WitPtrSched <DerComp, StOptEl>);

      mySched_ (theScenario).allocate1D (myProblem ());
      }
d84 2
a85 1
   WitScenario * theScenario;
d87 3
a89 2
   forEachEl (theScenario, myStochImpOP_->myScenMgr ()->myScenarios ())
      delete & mySched_ (theScenario);
a95 1
         WitScenario * theScenario,
d97 2
a98 1
         WitPeriod     thePer)
d107 3
a109 2
   if (not mySched_ (theScenario).myPtrTVecAt (theDerComp).isAllocated ())
      mySched_ (theScenario).myPtrTVecAt (theDerComp).allocate (myProblem ());
d111 1
a111 1
   witAssert (mySched_ (theScenario).myPtrAt (theDerComp, thePer) == NULL);
d113 1
a113 1
   mySched_ (theScenario).myPtrAt (theDerComp, thePer) = theStOptEl;
a119 1
         WitScenario * theScenario,
d121 2
a122 1
         WitPeriod     thePer)
d125 2
a126 2
   if (mySched_ (theScenario).myPtrTVecAt (theDerComp).isAllocated ())
      return mySched_ (theScenario).myPtrAt (theDerComp, thePer);
@


1.1
log
@Stochastic Implosion
@
text
@d128 1
@

