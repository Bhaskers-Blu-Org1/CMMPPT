head	1.34;
access;
symbols
	sce_5_01_20080919:1.30
	latest_sce_4_20_20060523:1.25.0.2
	sce_4_20_20060523:1.25
	latest_sce4_20_OSL:1.24.0.2
	sce_4_20_OSL:1.24
	sce_410_withVa:1.19
	sce_4_05_20040511:1.17
	sce_4_00_20040201:1.8
	nextGenBranch:1.8.0.2
	nextGenRoot:1.8
	sce_3_30_20030627:1.8
	EndRw-branch:1.7.0.4
	Root-of-EndRw:1.7
	rwToStl:1.7.0.2
	latest_sce_3_10_20010924:1.3.0.6
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.3.0.4
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2009.11.18.19.00.01;	author rjw;	state dead;
branches;
next	1.33;

1.33
date	2009.11.17.23.45.48;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2009.11.17.22.54.49;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2009.11.13.19.01.25;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2007.09.07.20.10.22;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.08.08.20.18.12;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2007.08.07.21.22.36;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2007.08.01.22.41.57;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2007.06.08.21.54.42;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.02.17.34.04;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.01.21.49.25;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2005.09.27.21.50.18;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.09.27.20.31.00;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.09.27.17.56.33;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.09.26.18.47.56;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.06.13.16.48.47;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.21.21.49.26;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.19.22.16.28;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.24.22.21.32;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.24.19.17.33;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.23.19.14.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.02.23.52.13;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.02.12.19.13.39;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.06.23.27.09;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.06.20.14.14;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.06.00.17.33;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.02.22.18.37;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.23.18.09.12;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.08.19.21.53;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.07.20.15.00;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.03.19.58.28;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.45;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.28;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.26;	author wit;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Removing objective #2.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------


#include <Assoc.h>
   //
   // This include preceeds "#ifndef ObjFuncH" to reduce the #if nesting level.
   // MS C++ was hitting a limit on the number #if nested.

#ifndef ObjFuncH
#define ObjFuncH

//------------------------------------------------------------------------------
// Header file: "ObjFunc.h"
//
// Contains the declaration of the following classes:
//
// ObjFunc
// ObjFunc0
// ObjFunc1
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// class ObjFunc
//
// An Objective function for optimizing implosion.
//
// Class Hierarchy:
//
// ProbAssoc
//    ObjFunc
//       ObjFunc0
//       ObjFunc1
//
// These classes and their collaborators form an instance of the "strategy"
// design pattern:
//
//    Strategy:            ObjFunc
//    Concrete Strategies: ObjFunc0, etc.
//    Contexts:            Many
//------------------------------------------------------------------------------

class WitObjFunc: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjFunc (WitOptComp * theOptComp, int indexVal);
         //
         // ProbAssoc <<< theOptComp.
         // index_    <-- indexVal.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjFunc ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (int, index)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjFunc);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int index_;
         //
         // E.g., objective #1.
         // Distiguishes each derived class of class ObjFunc.
   };

//------------------------------------------------------------------------------
// class ObjFunc0
//
// Represents no objective function.
// Thus optimizing implosion is not allowed.
//
// Class Hierarchy:
//
// ProbAssoc
//    ObjFunc
//       ObjFunc0
//------------------------------------------------------------------------------

class WitObjFunc0: public WitObjFunc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjFunc0 (WitOptComp * theOptComp);
         //
         // ObjFunc <<< theOptComp.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjFunc0 ();

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjFunc0);
   };

//------------------------------------------------------------------------------
// class ObjFunc1
//
// Class Hierarchy:
//
// ProbAssoc
//    ObjFunc
//       ObjFunc1
//------------------------------------------------------------------------------

class WitObjFunc1: public WitObjFunc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjFunc1 (WitOptComp * theOptComp);
         //
         // ObjFunc <<< theOptComp.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjFunc1 ();

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjFunc1);
   };

#endif
@


1.33
log
@Removing objective #2.
@
text
@@


1.32
log
@Removing objective #2.
@
text
@a73 12
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void beChosen ();
         //
         // Sets myDetOptImpMgr_->objChoice_ to this ObjFunc.

      bool isChosen ();
         //
         // Returns true, iff this ObjFunc is myDetOptImpMgr_->objChoice_.

@


1.31
log
@Removing objective #2.
@
text
@a68 41
      // Public virtual member functions.
      //------------------------------------------------------------------------

      virtual void validateForOptImp ();
         //
         // Issues a severe error, if this ObjFunc is an ObjFunc0.
         // The base class implementation is a no-op.

      virtual bool negativeObj1CostsExist ();
         //
         // Returns true, iff there is at least one obj1 cost coefficient < 0.
         // The base class implementation returns false (for other than 
         // ObjFunc1).

      virtual void displayForObj1 (
            WitMsgID              theMsgID,
            const WitDblFlexVec & theFlexVec);
         //
         // Displays theFlexVec using theMsgID, but only for ObjFunc1.
         // The base class implementation is a no-op.

      virtual void displayForObj2 (WitMsgID theMsgID, double theDouble);
         //
         // Displays theDouble using theMsgID, but only for objective #2.
         // The base class implementation is a no-op.

      virtual void finalPreprocess ();
         //
         // Performs the aspects of preprocessing of this ObjFunc that are
         // necessary even in accelerated mode.
         // The base class implementation is a no-op.

      virtual void initValues () = 0;
         //
         // Sets the values of this ObjFunc to 0.

      virtual void compValues () = 0;
         //
         // Computes the values of this ObjFunc.

      //------------------------------------------------------------------------
a85 25
      void genPriorities (WitSchedule <WitDemand, int> & newPriority);
         //
         // Automatically generates priorities from objective data.
         // Stores the new priorities in newPriority.

      virtual void writeValues () = 0;
         //
         // Writes the values of this ObjFunc.

   protected:

      //------------------------------------------------------------------------
      // Protected pure virtual member functions.
      //------------------------------------------------------------------------

      virtual void sortDemands (WitPtrVec <WitDemand> & theDemVec) = 0;
         //
         // Sorts theDemVec for generating priorities in priorityPeriod_.

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod, priorityPeriod)

a97 5
      WitPeriod priorityPeriod_;
         //
         // The period for which priorities are currently being generated by
         // genPriorities.

a134 14
      //------------------------------------------------------------------------
      // Overriding public virtual member functions.
      //------------------------------------------------------------------------

      virtual void validateForOptImp ();
         //
         // Issues a severe error, because a real ObjFunc is required.

      virtual void initValues ();

      virtual void compValues ();

      virtual void writeValues ();

a137 8
      // Overriding private virtual member functions.
      //------------------------------------------------------------------------

      virtual void sortDemands (WitPtrVec <WitDemand> &);
         //
         // Issues a severe error, because a real ObjFunc is required.

      //------------------------------------------------------------------------
a171 16
      //------------------------------------------------------------------------
      // Overriding public virtual member functions.
      //------------------------------------------------------------------------

      virtual bool negativeObj1CostsExist ();
         //
         // Returns true, iff there is at least one obj1 cost coefficient < 0.

      virtual void displayForObj1 (WitMsgID, const WitDblFlexVec &);

      virtual void initValues ();

      virtual void compValues ();

      virtual void writeValues ();

a174 6
      // Overriding private virtual member functions.
      //------------------------------------------------------------------------

      virtual void sortDemands (WitPtrVec <WitDemand> &);

      //------------------------------------------------------------------------
a178 12

      bool compareDemands (WitDemand *, WitDemand *);
         //
         // Comparison function for sorting demands in order to generate
         // priorities.
         //
         // Compares for:
         //   higher shipReward,    then
         //   higher cumShipReward, then
         //   higher stockCost,     then
         //   lower  index,
         // all in priorityPeriod.
@


1.30
log
@Stochastic Implosion
@
text
@a26 1
// ObjFunc2
a39 1
//       ObjFunc2
d92 1
a92 1
         // Displays theDouble using theMsgID, but only for ObjFunc2.
a307 113
//------------------------------------------------------------------------------
// class ObjFunc2
//
// Class Hierarchy:
//
// ProbAssoc
//    ObjFunc
//       ObjFunc2
//------------------------------------------------------------------------------

class WitObjFunc2: public WitObjFunc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjFunc2 (WitOptComp * theOptComp);
         //
         // ObjFunc <<< theOptComp.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjFunc2 ();

      //------------------------------------------------------------------------
      // Overriding public virtual member functions.
      //------------------------------------------------------------------------

      virtual void displayForObj2 (WitMsgID theMsgID, double theDouble);
         //
         // Displays theDouble.

      virtual void finalPreprocess ();
         //
         // Calculates:
         //   totalServiceScale
         //   revFactor
         //   invFactor
         //   servFactor
         //   subFactor

      virtual void initValues ();

      virtual void compValues ();

      virtual void writeValues ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (double, totalServiceScale)
      accessFunc (double, revFactor)
      accessFunc (double, invFactor)
      accessFunc (double, servFactor)
      accessFunc (double, subFactor)
      accessFunc (double, revValue)
      accessFunc (double, invValue)
      accessFunc (double, servValue)
      accessFunc (double, subValue)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

   private:

      //------------------------------------------------------------------------
      // Overriding private virtual member functions.
      //------------------------------------------------------------------------

      virtual void sortDemands (WitPtrVec <WitDemand> &);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjFunc2);

      bool compareDemands (WitDemand *, WitDemand *);
         //
         // Comparison function for sorting demands in order to generate
         // priorities.
         //
         // Compares for:
         //    higher netRev,   then
         //    higher unitCost, then
         //    lower  index.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      double totalServiceScale_;
      double revFactor_;
      double invFactor_;
      double servFactor_;
      double subFactor_;
         //
         // Scaling factors.

      double revValue_;
      double invValue_;
      double servValue_;
      double subValue_;
         //
         // Objective function values.
   };

@


1.29
log
@Stochastic Implosion
@
text
@d134 1
a134 1
      void writeValues ();
a147 4
      virtual void writeValuesDerived () = 0;
         //
         // Writes the (derived class) values of this ObjFunc.

d220 2
a231 2
      virtual void writeValuesDerived ();

d281 1
a281 14
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void loadInPrimaryValue (double primaryValueArg);
         //
         // Loads in the value of primaryValue_.
         // Valid only when the stochastic implosion solution is being uploaded.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (double, primaryValue)
a290 2
      virtual void writeValuesDerived ();

a307 8

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      double primaryValue_;
         //
         // Primary objective value.
d359 2
a386 2
      virtual void writeValuesDerived ();

@


1.28
log
@Stochastic Implosion
@
text
@d292 1
a292 2
         // Valid only when myStochImpMgr () is currently uploading the
         // stochastic implosion solution.
@


1.27
log
@Stochastic Implosion
@
text
@d286 10
@


1.26
log
@Stochastic Implosion
@
text
@d123 1
a123 1
         // Sets myOptImploder_->objChoice_ to this ObjFunc.
d127 1
a127 1
         // Returns true, iff this ObjFunc is myOptImploder_->objChoice_.
@


1.25
log
@Updated the copyright date on all source files.
@
text
@a116 3
      double objValue    ();
      double boundsValue ();

@


1.24
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.23
log
@[multi-thread]
@
text
@d147 1
a147 1
      virtual void sortDemands (WitDenseList <WitDemand> & demandList) = 0;
d149 1
a149 1
         // Sorts demandList for generating priorities in priorityPeriod_.
d233 1
a233 1
      virtual void sortDemands (WitDenseList <WitDemand> &);
d300 1
a300 1
      virtual void sortDemands (WitDenseList <WitDemand> &);
d310 1
a310 1
      static int compare (WitDemand *, WitDemand *, void *);
d404 1
a404 1
      virtual void sortDemands (WitDenseList <WitDemand> &);
d414 1
a414 1
      static int compare (WitDemand *, WitDemand *, void *);
@


1.22
log
@[multi-thread]
@
text
@d310 1
a310 1
      static int compare (WitDemand *, WitDemand *, WitObjFunc1 *);
@


1.21
log
@[multi-thread]
@
text
@d414 1
a414 1
      static int compare (WitDemand *, WitDemand *, WitObjFunc2 *);
@


1.20
log
@[multi-thread]
@
text
@d310 1
a310 1
      int compare (WitDemand * dem1, WitDemand * dem2);
d414 1
a414 1
      int compare (WitDemand * dem1, WitDemand * dem2);
@


1.19
log
@Changed names of obj1 attributes, e.g., obj1ScrapCost to scrapCost.
@
text
@d74 1
a74 1
      virtual void validateForOptImp () const;
d79 1
a79 1
      virtual bool negativeObj1CostsExist () const;
d87 1
a87 2
            const WitDblFlexVec & theFlexVec)
            const;
d92 1
a92 1
      virtual void displayForObj2 (WitMsgID theMsgID, double theDouble) const;
d117 2
a118 2
      double objValue    () const;
      double boundsValue () const;
d128 1
a128 1
      bool isChosen () const;
d132 1
a132 1
      void genPriorities (WitSchedule <WitDemand, int> & newPriority) const;
d137 1
a137 1
      void writeValues () const;
d147 1
a147 1
      virtual void sort (WitDenseList <WitDemand> & demandList) const = 0;
d149 1
a149 1
         // Sorts demandList for generating priorities in priorityPeriod ().
d151 1
a151 1
      virtual void writeValuesDerived () const = 0;
d159 1
a159 4
      inline static WitPeriod priorityPeriod ()
         {
         return priorityPeriod_;
         }
d173 1
a173 1
      static WitPeriod priorityPeriod_;
d219 1
a219 1
      virtual void validateForOptImp () const;
d233 1
a233 1
      virtual void sort (WitDenseList <WitDemand> & demandList) const;
d237 1
a237 1
      virtual void writeValuesDerived () const;
d278 1
a278 1
      virtual bool negativeObj1CostsExist () const;
d282 1
a282 1
      virtual void displayForObj1 (WitMsgID, const WitDblFlexVec &) const;
d300 1
a300 1
      virtual void sort (WitDenseList <WitDemand> & demandList) const;
d302 1
a302 1
      virtual void writeValuesDerived () const;
d310 1
a310 1
      static int compare (WitDemand * dem1, WitDemand * dem2);
d363 1
a363 1
      virtual void displayForObj2 (WitMsgID theMsgID, double theDouble) const;
d404 1
a404 1
      virtual void sort (WitDenseList <WitDemand> & demandList) const;
d406 1
a406 1
      virtual void writeValuesDerived () const;
d414 1
a414 1
      static int compare (WitDemand * dem1, WitDemand * dem2);
@


1.18
log
@Allowed obj1 attributes to be set and retrieved when objChoice != 1.
Allowed objChoice to be set when parts or operations exist.
@
text
@d320 3
a322 3
         //   higher obj1ShipReward,    then
         //   higher obj1CumShipReward, then
         //   higher obj1StockCost,     then
@


1.17
log
@Double Precision.
@
text
@a73 5
      virtual void reqObj1 () const;
         //
         // Issues a severe error, if this ObjFunc is not an ObjFunc1.
         // This implementation issues the error.

a281 4
      virtual void reqObj1 () const;
         //
         // No-op.

@


1.16
log
@Double Precision.
@
text
@a97 5
      virtual void displayForObj2 (WitMsgID theMsgID, float theFloat) const;
         //
         // Displays theFloat using theMsgID, but only for ObjFunc2.
         // The base class implementation is a no-op.

a374 4

      virtual void displayForObj2 (WitMsgID theMsgID, float theFloat) const;
         //
         // Displays theFloat.
@


1.15
log
@Double Precision.
@
text
@d91 2
a92 2
            WitMsgID                    theMsgID,
            const WitFlexVec <double> & theFlexVec)
d300 1
a300 1
      virtual void displayForObj1 (WitMsgID, const WitFlexVec <double> &) const;
@


1.14
log
@Double Precision.
@
text
@a90 8
            WitMsgID                   theMsgID,
            const WitFlexVec <float> & theFlexVec)
            const;
         //
         // Displays theFlexVec using theMsgID, but only for ObjFunc1.
         // The base class implementation is a no-op.

      virtual void displayForObj1 (
a299 1
      virtual void displayForObj1 (WitMsgID, const WitFlexVec <float>  &) const;
@


1.13
log
@Double Precision.
@
text
@d99 2
a100 2
            WitMsgID           theMsgID,
            const WitRealVec & theRealVec)
d308 2
a309 2
      virtual void displayForObj1 (WitMsgID, const WitFlexVec <float> &) const;
      virtual void displayForObj1 (WitMsgID, const WitRealVec         &) const;
@


1.12
log
@Continued double precision.
@
text
@d14 1
a14 1
   // MS V++ was hitting a limit on the number #if nested.
d98 8
d309 1
@


1.11
log
@Continued double precision.
@
text
@d103 1
a103 1
      virtual void displayForObj2 (WitMsgID theMsgID, StrDbl theStrDbl) const;
d105 1
a105 1
         // Displays theStrDbl using theMsgID, but only for ObjFunc2.
d128 2
a129 2
      StrDbl objValue    () const;
      StrDbl boundsValue () const;
d385 1
a385 1
      virtual void displayForObj2 (WitMsgID theMsgID, StrDbl theStrDbl) const;
d387 1
a387 1
         // Displays theStrDbl.
d411 4
a414 4
      accessFunc (StrDbl, revValue)
      accessFunc (StrDbl, invValue)
      accessFunc (StrDbl, servValue)
      accessFunc (StrDbl, subValue)
d458 4
a461 4
      StrDbl revValue_;
      StrDbl invValue_;
      StrDbl servValue_;
      StrDbl subValue_;
@


1.10
log
@Continued double precision.
@
text
@d310 1
a310 1
      accessFunc (float, primaryValue)
d344 1
a344 1
      float primaryValue_;
d406 5
a410 5
      accessFunc (float,  totalServiceScale)
      accessFunc (float,  revFactor)
      accessFunc (float,  invFactor)
      accessFunc (float,  servFactor)
      accessFunc (float,  subFactor)
d450 5
a454 5
      float totalServiceScale_;
      float revFactor_;
      float invFactor_;
      float servFactor_;
      float subFactor_;
@


1.9
log
@Continued double precision.
@
text
@d128 2
a129 2
      float objValue    () const;
      float boundsValue () const;
d406 9
a414 9
      accessFunc (float, totalServiceScale)
      accessFunc (float, revFactor)
      accessFunc (float, invFactor)
      accessFunc (float, servFactor)
      accessFunc (float, subFactor)
      accessFunc (float, revValue)
      accessFunc (float, invValue)
      accessFunc (float, servValue)
      accessFunc (float, subValue)
d458 4
a461 4
      float revValue_;
      float invValue_;
      float servValue_;
      float subValue_;
@


1.8
log
@Internal changes.
@
text
@d103 5
d384 4
@


1.7
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d84 1
a84 1
      virtual WitBoolean negativeObj1CostsExist () const;
d86 2
a87 2
         // Returns TRUE, iff there is at least one obj1 cost coefficient < 0.
         // The base class implementation returns FALSE (for other than 
d134 1
a134 1
      WitBoolean isChosen () const;
d136 1
a136 1
         // Returns TRUE, iff this ObjFunc is myOptImploder_->objChoice_.
d291 1
a291 1
      virtual WitBoolean negativeObj1CostsExist () const;
d293 1
a293 1
         // Returns TRUE, iff there is at least one obj1 cost coefficient < 0.
@


1.6
log
@Preliminary work on single source.
@
text
@d123 2
a124 4
      inline float objValue    () const;
      inline float boundsValue () const;
         //
         // Implemented in OptImp.h.
@


1.5
log
@Continued preliminary work on single source.
@
text
@d92 1
a92 1
            const WitFlexVec (float) & theFlexVec)
d297 1
a297 1
      virtual void displayForObj1 (WitMsgID, const WitFlexVec (float) &) const;
@


1.4
log
@More preliminary work on single source.
@
text
@d140 1
a140 1
      void genPriorities (WitSchedule (WitDemand, int) & newPriority) const;
@


1.3
log
@Refactoring for selection splitting.
@
text
@d155 1
a155 1
      virtual void sort (WitDenseList (WitDemand) & demandList) const = 0;
d244 1
a244 1
      virtual void sort (WitDenseList (WitDemand) & demandList) const;
d315 1
a315 1
      virtual void sort (WitDenseList (WitDemand) & demandList) const;
d419 1
a419 1
      virtual void sort (WitDenseList (WitDemand) & demandList) const;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d178 1
a178 3
      copyCtorAndAssignment (WitObjFunc);
         //
         // Prevents unintentional copying and assignment.
d254 1
a254 3
      copyCtorAndAssignment (WitObjFunc0);
         //
         // Prevents unintentional copying and assignment.
d323 1
a323 3
      copyCtorAndAssignment (WitObjFunc1);
         //
         // Prevents unintentional copying and assignment.
d427 1
a427 3
      copyCtorAndAssignment (WitObjFunc2);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
