head	1.5;
access;
symbols
	EndRw-branch:1.4.0.10
	Root-of-EndRw:1.4
	rwToStl:1.4.0.8
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.03.03.23.26.43;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.21;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.20;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.37;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@a0 335
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef DynPerH
#define DynPerH

//------------------------------------------------------------------------------
// Header file: "DynPer.h"
//
// Contains the declaration of the following classes:
//
//    AbsDynPerStack
//    AbsDynPerItr
//    DynPerStack (TheType)
//    DynPerItr   (TheType)
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class AbsDynPerStack
//
// "Abstract Dynamic Stack with periods."
// Base class for DynPerStack (TheType).
// Implements all aspects of DynPerStack (TheType), but using TypelessPtrs.
//------------------------------------------------------------------------------

class WitAbsDynPerStack: public WitUtil
   {
      //------------------------------------------------------------------------
      // Friends.
      //------------------------------------------------------------------------

      friend WitAbsDynPerItr;

   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      inline WitBoolean isEmpty () const
         {
         return (firstLink_ == NULL);
         }

      void clear ();
         //
         // Removes all of the elements from this AbsDynPerStack.

      void reverse ();
         //
         // Reverses the order of the elements in this AbsDynPerStack.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsDynPerStack (WitProblem * theProblem);
         //
         // myLinkMgr_ <-- theProblem ()->myDynPerLinkMgr ().

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsDynPerStack ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void push (WitTypelessPtr theObject, WitPeriod thePer);
         //
         // Pushes theObject and thePer onto the top of this AbsDynPerStack.

      WitBoolean pop (WitTypelessPtr & theObject, WitPeriod & thePer);
         //
         // If this AbsDynPerStack is non-Empty, the first object and period it
         // contains are removed from it and theObject and thePer are set to 
         // them. Returns TRUE, iff this AbsDynPerStack is non-empty.

      void takeContents (WitAbsDynPerStack & theStack);
         //
         // Clears this AbsDynPerStack and transfers the contents of theStack
         // out of it and into this AbsDynPerStack.

      WitTypelessPtr firstObject () const;
         //
         // Returns the first Object in this AbsDynPerStack, which must not be
         // empty.

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      copyCtorAndAssignment (WitAbsDynPerStack);
         //
         // Prevents unintentional copying and assignment.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDynPerLinkMgr * const myLinkMgr_;
         //
         // The DynPerLinkMgr to be used by this AbsDynPerStack_.

      WitDynPerLink * firstLink_;
         //
         // The first DynPerLink in this AbsDynPerStack.
   };

//------------------------------------------------------------------------------
// Class AbsDynPerItr
//
// Responsible for iterating through the elements of an AbsDynPerStack.
//------------------------------------------------------------------------------

class WitAbsDynPerItr: public WitUtil
   {
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsDynPerItr ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsDynPerItr ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void attach (const WitAbsDynPerStack & theStack);
         //
         // Puts this AbsDynPerItr in its initial state for iterating through
         // theStack.
                        
      WitBoolean advance (WitTypelessPtr & theObject, WitPeriod & thePer);
         //
         // If this AbsDynPerItr is in its initial state, this 
         // function advances it to the first element of the stack;
         // otherwise it advances it to the next element.
         // Returns TRUE, iff this AbsDynPerItr is still associated with a 
         // valid element after the advance.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      copyCtorAndAssignment (WitAbsDynPerItr);
         //
         // Prevents unintentional copying and assignment.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitDynPerLink * firstLink_;
         //
         // The first link of the AbsDynPerStack to be iterated by this 
         // AbsDynPerItr. NULL indicates that the Stack is empty.

      const WitDynPerLink * myLink_;
         //
         // The DynPerLink associated with this AbsDynPerItr, or NULL if this 
         // AbsDynPerItr is in its initial state.
   };

//------------------------------------------------------------------------------
// Generic Classes DynPerStack (TheType) and DynPerItr (TheType)
//
// DynPerStack (TheType)
// "Dynamic Period Stack"
// This class implements a stack of instances of TheType, stored by pointer, 
// each paired with a period.
// Implementation is done in a way that avoids repeated construction and
// destruction of link objects in situations where the stack is frequently
// changing its size.
// This generic class is implemented thru the class AbsDynPerStack.
//
// DynPerItr (TheType)
// Responsible for iterating through the elements of a DynPerStack (TheType).
// This generic class is implemented thru the class AbsDynPerItr.
//
// These two generic classes are declared via the same declaration macro.
// Note that all implementation is inline, and so there's a declaration macro, 
// but no implementation macro. 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitDynPerStackdeclare(TheType)                                         \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitDynPerStack (TheType): public WitAbsDynPerStack                       \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitDynPerStack (TheType) (WitProblem * theProblem):               \
            WitAbsDynPerStack (theProblem)                                     \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline ~WitDynPerStack (TheType) ()                                      \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline void push (TheType * theObject, WitPeriod thePer)                 \
         {                                                                     \
         WitAbsDynPerStack::push ((WitTypelessPtr) theObject, thePer);         \
         }                                                                     \
                                                                               \
      inline WitBoolean pop (TheType * & theObject, WitPeriod & thePer)        \
         {                                                                     \
         return WitAbsDynPerStack::pop ((WitTypelessPtr &) theObject, thePer); \
         }                                                                     \
                                                                               \
      inline void takeContents (WitDynPerStack (TheType) & theStack)           \
         {                                                                     \
         WitAbsDynPerStack::takeContents (theStack);                           \
         }                                                                     \
                                                                               \
      TheType * firstObject () const                                           \
         {                                                                     \
         return (TheType *) WitAbsDynPerStack::firstObject ();                 \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      copyCtorAndAssignment (WitDynPerStack (TheType));                        \
         /*                                                                  */\
         /* Prevents unintentional copying and assignment.                   */\
   };                                                                          \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitDynPerItr (TheType): public WitAbsDynPerItr                           \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitDynPerItr (TheType) ():                                        \
            WitAbsDynPerItr ()                                                 \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline ~WitDynPerItr (TheType) ()                                        \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline void operator = (const WitDynPerStack (TheType) & theStack)       \
         {                                                                     \
         attach (theStack);                                                    \
         }                                                                     \
                                                                               \
      inline WitBoolean operator () (TheType * & theObject, WitPeriod & thePer)\
         {                                                                     \
         return advance ((WitTypelessPtr &) theObject, thePer);                \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      copyCtorAndAssignment (WitDynPerItr (TheType));                          \
         /*                                                                  */\
         /* Prevents unintentional copying and assignment.                   */\
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of generic class DynPerStack.
//------------------------------------------------------------------------------

declare (WitDynPerStack, WitPart)
declare (WitDynPerStack, WitDemand)
declare (WitDynPerStack, WitOperation)
declare (WitDynPerStack, WitBopEntry)
declare (WitDynPerStack, WitConsEntry)

#endif
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d24 1
a24 1
#include <typedefs.h>
d34 1
a34 1
class WitAbsDynPerStack
d134 1
a134 1
class WitAbsDynPerItr
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
