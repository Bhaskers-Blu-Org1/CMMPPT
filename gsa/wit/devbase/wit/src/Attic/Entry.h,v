head	1.47;
access;
symbols
	sce_5_01_20080919:1.46
	latest_sce_4_20_20060523:1.34.0.2
	sce_4_20_20060523:1.34
	latest_sce4_20_OSL:1.33.0.2
	sce_4_20_OSL:1.33
	sce_410_withVa:1.32
	sce_4_05_20040511:1.30
	sce_4_00_20040201:1.23
	nextGenBranch:1.22.0.2
	nextGenRoot:1.22
	sce_3_30_20030627:1.22
	EndRw-branch:1.14.0.4
	Root-of-EndRw:1.14
	rwToStl:1.14.0.2
	latest_sce_3_10_20010924:1.7.0.2
	sce_3_10_20010924:1.7
	latest_sce_3_00_20010601:1.6.0.4
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.47
date	2010.09.10.22.45.34;	author rjw;	state dead;
branches;
next	1.46;

1.46
date	2008.01.07.23.51.49;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2007.11.29.16.24.42;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2007.11.28.23.23.46;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2007.11.15.17.15.33;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2007.07.31.20.39.45;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2007.06.05.21.06.00;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2007.06.05.16.15.23;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2007.05.30.21.02.10;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2007.05.30.16.01.18;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2007.02.27.22.59.29;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2007.02.27.19.59.30;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2007.02.08.22.47.34;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.02.17.33.57;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2005.09.30.21.57.55;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2005.02.24.23.23.55;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2005.01.27.21.03.27;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.04.19.22.16.28;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.04.01.21.05.12;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.03.31.22.56.08;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.24.22.21.29;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.23.19.14.23;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.10.22.53.18;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.03.05.22.19.57;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.08.05.20.18.23;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.05.08.17.47.40;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.07.18.06.14;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.03.07.23.46.14;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.02.26.23.51.31;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.26.21.42.53;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.21.18.56.24;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.13.23.06.28;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.02.22.18.25;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.04.23.07.19;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.08.19.21.49;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.03.23.16.37;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.02.20.53.11;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.01.14.25.54;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.22.14.32.06;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.18.14.02.31;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.01.19.23.32;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.04.22.27.50;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.04.22.07.35;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.39;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.19.22.35.29;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.42;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches;
next	;


desc
@@


1.47
log
@Heuristic Adjustment
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef EntryH
#define EntryH

//------------------------------------------------------------------------------
// Header file: "Entry.h"
//
// Contains the declaration class BillEntry.
//------------------------------------------------------------------------------

#include <DelComp.h>
#include <FlexVec.h>

//------------------------------------------------------------------------------
// class BillEntry
// In bill entry in the complete BOM structure.
// Each BillEntry represents the consumption or production of a Part in the
// execution of an Operation.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       DelComp
//          BillEntry
//             ConsEntry
//                BomEntry
//                SubEntry
//             BopEntry
//------------------------------------------------------------------------------

class WitBillEntry: public WitDelComp
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitBillEntry ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPart *,                   myPart)
      accessFunc (int,                         localIndex)
      accessFunc (WitPeriod,                   earliestPeriod)
      accessFunc (WitPeriod,                   latestPeriod)
      accessFunc (const WitDblFlexVec &,       routingShare)
      accessFunc (const WitTVec <WitPeriod> &, impactPeriod)

      inline WitOperation * myOperation ()
         {
         return derivedOperation ();
         }

      const WitString & myPartName ();
      const WitString & myOperationName ();

      virtual const WitDblFlexVec & offset ();
         //
         // Base class function.

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitBillEntry)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double    defOffset,         0.0)
      defaultValue (WitPeriod defEarliestPeriod, 0)
      defaultValue (double    defRoutingShare,   1.0)

      static WitPeriod defLatestPeriod (WitProblem * theProblem);
         //
         // This default value function is implemented explicitly, because the
         // value depends on theProblem.

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setEarliestPeriod (int);
      void setLatestPeriod   (int);
      void setRoutingShare   (const WitIVRealArg &);
      void setOffset         (const WitIVRealArg &);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePreImpactPeriod (WitPeriod, WitPeriod);
         //
         // Valid only when preprocessing is being performed.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void unpreprocess ();
         //
         // Overrides from class Component.

      virtual bool storesOffset ();
         //
         // Returns true, iff this BillEntry stores its own offset.

      bool withinInterval (WitPeriod thePer);
         //
         // Returns true, iff t is within the effectivity interval for this
         // BillEntry.

      inline bool inEffect (WitPeriod thePer)
            //
            // Returns true iff this BillEntry is in effect in thePer.
         {
         return impactPeriod_[thePer] >= 0;
         }

      static void getAllInstances (
            WitProblem *                 theProblem,
            WitObjStack <WitBillEntry> & theBillEntries);
         //
         // Sets theBillEntries to be the set of all BillEntries for theProblem.

      static void reLocalIndex (WitProblem * theProblem);
         //
         // Re-assigns localIndex for each BillEntry in theProblem.
         // Valid only during a purge.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBillEntry (WitPart * thePart, int theLocalIndex);
         //
         // myPart_     <-- thePart.
         // localIndex_ <-- theLocalIndex.

      //------------------------------------------------------------------------
      // Protected member functions pertaining to offset.
      //------------------------------------------------------------------------

      inline WitDblFlexVec & offsetRef ()
         {
         return offset_;
         }
         //
         // Non-const protected access.

      void writeOffset ();
         //
         // Does writeData for offset.

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      static void preConstruct (
            WitOperation * theOpn,
            WitPart *      thePart);
         //
         // Performs various operations just prior to constructing a new
         // instance.

      void recountBillEntry ();
         //
         // Recounts this BillEntry.

      virtual void displayMandEC ();
         //
         // Base class function.
         // Displays mandEC, if this BillEntry is a BomEntry.
         // The base class implementation is a no-op.

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      void copyAttrsFrom (WitBillEntry * theBillEnt);
         //
         // Copies the input attributes of theBillEnt into this BillEntry.

      void display ();
         //
         // Displays the input and preprocessing data for this BillEntry.

      virtual WitOperation * derivedOperation () = 0;
         //
         // Base class function.
         // Returns myOperation () as deterimined by the appropriate derived
         // class.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBillEntry);

      //------------------------------------------------------------------------
      // reLocalIndex functions.
      //
      // Each of these functions re-assigns localIndex for each BillEntry in
      // the argument List. The localIndex value will reflect the order of the
      // BillEntries in the List.
      //------------------------------------------------------------------------

      static void reLocalIndex (const WitList <WitBomEntry> &);
      static void reLocalIndex (const WitList <WitSubEntry> &);
      static void reLocalIndex (const WitList <WitBopEntry> &);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Data set by the constructor.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # BillEntries constructed before this BillEntry.

      WitPart * const myPart_;
         //
         // The Part impacted (produced or consumed) by this BillEntry.

      int localIndex_;
         //
         // k, where this BillEntry is either:
         //    the k-th BomEntry of myOperation (), starting at 0, or
         //    the k-th SubEntry of myBomEnt (),    starting at 0, or
         //    the k-th BopEntry of myOperation (), starting at 0.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitDblFlexVec offset_;
         //
         // If myOperation () is executed in thePer, then myPart () is
         // produced or consumed in thePer - offset ()[thePer]. This is a double
         // because it may be the result of converting from, e.g., days to
         // weeks.
         // Range: (-inf, +inf).

      WitPeriod earliestPeriod_;
         //
         // Earliest execution Period for which this BillEntry is in effect.
         // In the case of a SubEntry, it can only be in effect if the
         // BomEntry itself is also in effect.
         // Range: [0, nPeriods].
         // Note that earliestPeriod_ == nPeriods implies that this BillEntry
         // is never in effect.

      WitPeriod latestPeriod_;
         //
         // Latest execution Period for which this BillEntry is in effect.
         // Range: [0, nPeriods).

      WitDblFlexVec routingShare_;
         //
         // If the proportionate routing technique is being used on a Part or
         // BomEntry, explosion through the BopEntries of the Part or
         // ConsEntries of the BomEntry is to be done in proportion to the
         // routingShare_ of each BillEntry.
         // Range: [1.0, +inf)

      //------------------------------------------------------------------------
      // Data set by preprocessing.
      //------------------------------------------------------------------------

      WitTVec <WitPeriod> impactPeriod_;
         //
         // Impact period: If myOperation () executes in thePer, myPart () will
         // be produced or consumed in period impactPeriod_[thePer]. A value of
         // -1 indicates that this BillEntry is not used when myOperation ()
         // executes in thePer, due to either the effectivity dates, or
         // forbidden execution of myOperation ().

      //------------------------------------------------------------------------
      // Data set by preprocessing for optimizing implosion.
      //------------------------------------------------------------------------

      WitVector <int> firstEPIndex_;
         //
         // firstEPIndex_[impactPer] is the first index into execPeriod_ for
         // impactPer.
         // firstEPIndex_[nPeriods] is the length of execPeriod_.

      WitVector <WitPeriod> execPeriod_;
         //
         // For execPerIdx = firstEPIndex_[thePer], 
         //             thru firstEPIndex_[thePer + 1] - 1
         //
         //    execPeriod_[execPerIdx] is a unique execution period execPer, 
         //    such that impactPeriod ()[execPer] == thePer.
         //    The exec periods are listed in reverse order.
   };

#endif
@


1.46
log
@Stochastic Implosion
@
text
@@


1.45
log
@Stochastic Implosion
@
text
@a122 4
      virtual int stageIndex ();
         //
         // Overrides from class DelComp.

@


1.44
log
@Stochastic Implosion
@
text
@d119 1
a119 2
      virtual void           unpreprocess ();
      virtual WitBillEntry * thisBillEnt  ();
d123 4
@


1.43
log
@Stochastic Implosion
@
text
@d119 2
a120 1
      virtual void unpreprocess ();
@


1.42
log
@Stochastic Implosion
@
text
@d104 12
a118 1
      virtual void passPreRefs  ();
@


1.41
log
@Stochastic Implosion
@
text
@d128 6
@


1.40
log
@Stochastic Implosion
@
text
@d107 2
a108 3
      virtual void passPreRefs   ();
      virtual void importPreData ();
      virtual void unpreprocess  ();
@


1.39
log
@Stochastic Implosion
@
text
@d107 1
@


1.38
log
@Stochastic Implosion
@
text
@d16 1
a16 4
// Contains the declaration the following classes:  
//
//    BillEntry
//    ExecPerItr
a41 2
      friend class WitPreAccess;

a127 6
      int nExecPeriods (WitPeriod thePer);
         //
         // Returns the # periods, execPer, for which 
         // impactPeriod ()[execPer] == thePer.
         // Valid only in "preprocessed for optimizing implosion" mode.

a132 7
      bool hasNextExecPer (
            WitPeriod   impactPer,
            int &       theIndex,
            WitPeriod & execPer);
         //
         // Implementation of ExecPerItr::operator ++ ().

a311 84
//------------------------------------------------------------------------------
// Class ExecPerItr
//
// Responsible for interating thru the set of all execution periods 
// corresponding to a given impact period for a BillEntry.
//------------------------------------------------------------------------------

class WitExecPerItr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExecPerItr ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExecPerItr ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitPeriod operator () ()
         {
         witAssert (execPeriod_ >= 0);

         return execPeriod_;
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void operator () (WitBillEntry * theBillEnt, WitPeriod impactPer);
         //
         // Associates this ExecPerItr with theBillEnt in impactPer.

      inline bool operator ++ ()
         {
         witAssert (myBillEntry_ != NULL);

         return 
            myBillEntry_->hasNextExecPer (impactPeriod_, myIndex_, execPeriod_);
         }
         //
         // Moves this ExecPerItr to the next execution period.
         // This ExecPerItr must be associated with a BillEntry and period.
         // Returns true, iff another execution period was found.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitExecPerItr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBillEntry * myBillEntry_;
         //
         // The BillEntry currently associated with this ExecPerItr, if any.

      WitPeriod impactPeriod_;
         //
         // The impact period currently associated with this ExecPerItr, if any.

      int myIndex_;
         //
         // The index into myBillEntry_->execPeriod_;

      WitPeriod execPeriod_;
         //
         // The execuction period currently associated with this ExecPerItr,
         // or -1, if there is none.
   };

@


1.37
log
@[disallowed backlog]
@
text
@d112 2
a113 1
      virtual void unpreprocess ();
d115 1
a115 1
         // Override from class Component.
@


1.36
log
@Rescinded all changed made since 1/31/07.
@
text
@d45 2
a149 4
      static void transmitDMPs ();
         //
         // See comment on transmitAllDMPs in CompMgr.h.

@


1.35
log
@[disallowed backlog]
@
text
@a23 1
#include <Restricted.h>
a56 2
      accessFunc (const WitTVec <WitPeriod> &, impactPeriod)

d62 1
d110 4
d127 1
a127 1
         return impactPeriod ()[thePer] >= 0;
d148 1
a148 5
      //------------------------------------------------------------------------
      // Restricted public member data.
      //------------------------------------------------------------------------

      WitPreRestricted <WitTVec <WitPeriod> > impactPeriod_;
d150 1
a150 20
         // Impact period: If myOperation () executes in thePer, myPart () will
         // be produced or consumed in period impactPeriod_[thePer]. A value of
         // -1 indicates that this BillEntry is not used when myOperation ()
         // executes in thePer, due to either the effectivity dates, or
         // forbidden execution of myOperation ().

      WitPreRestricted <WitVector <int> > firstEPIndex_;
         //
         // firstEPIndex_[impactPer] is the first index into execPeriod_ for
         // impactPer.
         // firstEPIndex_[nPeriods] is the length of execPeriod_.

      WitPreRestricted <WitVector <WitPeriod> > execPeriod_;
         //
         // For execPerIdx = firstEPIndex_[thePer], 
         //             thru firstEPIndex_[thePer + 1] - 1
         //
         //    execPeriod_[execPerIdx] is a unique execution period execPer, 
         //    such that impactPeriod ()[execPer] == thePer.
         //    The exec periods are listed in reverse order.
d298 31
@


1.34
log
@Updated the copyright date on all source files.
@
text
@d24 1
d58 2
a64 1
      accessFunc (const WitTVec <WitPeriod> &, impactPeriod)
a111 4
      virtual void unpreprocess ();
         //
         // Override from class Component.

d125 1
a125 1
         return impactPeriod_[thePer] >= 0;
d146 5
a150 1
      static void transmitDMPs ();
d152 20
a171 1
         // See comment on transmitAllDMPs in CompMgr.h.
a318 31

      //------------------------------------------------------------------------
      // Data set by preprocessing.
      //------------------------------------------------------------------------

      WitTVec <WitPeriod> impactPeriod_;
         //
         // Impact period: If myOperation () executes in thePer, myPart () will
         // be produced or consumed in period impactPeriod_[thePer]. A value of
         // -1 indicates that this BillEntry is not used when myOperation ()
         // executes in thePer, due to either the effectivity dates, or
         // forbidden execution of myOperation ().

      //------------------------------------------------------------------------
      // Data set by preprocessing for optimizing implosion.
      //------------------------------------------------------------------------

      WitVector <int> firstEPIndex_;
         //
         // firstEPIndex_[impactPer] is the first index into execPeriod_ for
         // impactPer.
         // firstEPIndex_[nPeriods] is the length of execPeriod_.

      WitVector <WitPeriod> execPeriod_;
         //
         // For execPerIdx = firstEPIndex_[thePer], 
         //             thru firstEPIndex_[thePer + 1] - 1
         //
         //    execPeriod_[execPerIdx] is a unique execution period execPer, 
         //    such that impactPeriod ()[execPer] == thePer.
         //    The exec periods are listed in reverse order.
@


1.33
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.32
log
@Vector PropRt.
@
text
@a109 5
      virtual void loadPre    ();
      virtual void loadOptPre ();
         //
         // Override from class Component.

d148 4
@


1.31
log
@Pegged critical list.
@
text
@d103 2
a104 2
      void setRoutingShare   (const WitInVecRA &);
      void setOffset         (const WitInVecRA &);
@


1.30
log
@Double Precision.
@
text
@a63 2
      accessNonNull (WitRtCand *,              myRtCand)

a152 5
      void attach       (WitRtCand *);
      void detachRtCand ();
         //
         // Sets and resets myRtCand_.

a329 9

      //------------------------------------------------------------------------
      // Data set by heuristic allocation.
      //------------------------------------------------------------------------

      WitRtCand * myRtCand_;
         //
         // The RtCand that represents this BillEntry, during heuristic
         // allocation. NULL, when heuristic allocation is inactive.
@


1.29
log
@Double Precision.
@
text
@d280 1
a280 1
         // produced or consumed in thePer - offset ()[thePer]. This is a float
@


1.28
log
@Double Precision.
@
text
@a104 1
      void setRoutingShare   (const float *);
a105 1
      void setOffset         (const float *);
@


1.27
log
@Double Precision.
@
text
@d106 1
d108 1
@


1.26
log
@Double Precision.
@
text
@d61 1
a61 1
      accessFunc (const WitFlexVec <double> &, routingShare)
d74 1
a74 1
      virtual const WitFlexVec <double> & offset ();
d179 1
a179 1
      inline WitFlexVec <double> & offsetRef ()
d277 1
a277 1
      WitFlexVec <double> offset_;
d299 1
a299 1
      WitFlexVec <double> routingShare_;
@


1.25
log
@Double Precision.
@
text
@d23 1
a23 1
#include <RealVec.h>
d61 1
a61 1
      accessFunc (const WitRealVec &,          routingShare)
d74 1
a74 1
      virtual const WitRealVec & offset ();
d179 1
a179 1
      inline WitRealVec & offsetRef ()
d277 1
a277 1
      WitRealVec offset_;
d299 1
a299 1
      WitRealVec routingShare_;
@


1.24
log
@Double Precision.
@
text
@d90 1
a90 1
      defaultValue (float     defOffset,         0.0)
d92 1
a92 1
      defaultValue (float     defRoutingShare,   1.0)
@


1.23
log
@Changed the routingShare attributes from scalars to vectors.
@
text
@d23 1
a23 1
#include <FlexVec.h>
d61 1
a61 1
      accessFunc (const WitFlexVec <float> &,  routingShare)
d74 1
a74 1
      virtual const WitFlexVec <float> & offset ();
d179 1
a179 1
      inline WitFlexVec <float> & offsetRef ()
d277 1
a277 1
      WitFlexVec <float> offset_;
d299 1
a299 1
      WitFlexVec <float> routingShare_;
@


1.22
log
@Minor change.
@
text
@d61 1
a61 1
      accessFunc (float,                       routingShare)
d105 1
a105 1
      void setRoutingShare   (float);
d299 1
a299 1
      float routingShare_;
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d294 5
a305 5

      WitPeriod latestPeriod_;
         //
         // Latest execution Period for which this BillEntry is in effect.
         // Range: [0, nPeriods).
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@d61 1
a61 1
      accessFunc (float,                       expShare)
d92 1
a92 1
      defaultValue (float     defExpShare,       1.0)
d105 1
a105 1
      void setExpShare       (float);
d294 1
a294 1
      float expShare_;
a295 1
         // "Explosion Share":
d299 1
a299 1
         // expShare_ of each BillEntry.
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d63 2
a64 1
      accessFunc (WitRtCand *,                 myRtCand)
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@d63 1
a63 2

      accessNonNull (WitRtCand *, myRtCand)
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@d64 2
d155 5
d338 9
@


1.16
log
@Continued implementation of proportionate routing.
@
text
@d61 1
d90 1
d103 1
d286 9
@


1.15
log
@Internal changes.
@
text
@a62 2
      decMappingIndex (WitBillEntry)

d74 8
@


1.14
log
@Continued implementation of single-source.
@
text
@d110 1
a110 1
      virtual WitBoolean storesOffset ();
d112 1
a112 1
         // Returns TRUE, iff this BillEntry stores its own offset.
d114 1
a114 1
      WitBoolean withinInterval (WitPeriod thePer);
d116 1
a116 1
         // Returns TRUE, iff t is within the effectivity interval for this
d119 1
a119 1
      inline WitBoolean inEffect (WitPeriod thePer)
d121 1
a121 1
            // Returns TRUE iff this BillEntry is in effect in thePer.
d137 1
a137 1
      WitBoolean hasNextExecPer (
d357 1
a357 1
      inline WitBoolean operator ++ ()
d367 1
a367 1
         // Returns TRUE, iff another execution period was found.
@


1.13
log
@Preliminary work on single source.
@
text
@d98 1
a98 1
      // Conditional reference access functions.
d101 4
a104 3
      conditionalRef (WitTVec <WitPeriod>,   impactPeriod, preprocAcc ())
      conditionalRef (WitVector <int>,       firstEPIndex, preprocAcc ())
      conditionalRef (WitVector <WitPeriod>, execPeriod,   preprocAcc ())
d106 3
a108 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
@


1.12
log
@Continued preliminary work on single source.
@
text
@d73 1
a73 1
      virtual const WitFlexVec (float) & offset ();
d162 1
a162 1
      inline WitFlexVec (float) & offsetRef ()
d260 1
a260 1
      WitFlexVec (float) offset_;
@


1.11
log
@Preliminary work on single source.
@
text
@d61 1
a61 1
      accessFunc (const WitTVec (WitPeriod) &, impactPeriod)
d101 1
a101 1
      conditionalRef (WitTVec (WitPeriod),   impactPeriod, preprocAcc ())
d286 1
a286 1
      WitTVec (WitPeriod) impactPeriod_;
@


1.10
log
@Preliminary work on single source.
@
text
@d102 2
a103 2
      conditionalRef (WitVector (int),       firstEPIndex, preprocAcc ())
      conditionalRef (WitVector (WitPeriod), execPeriod,   preprocAcc ())
d298 1
a298 1
      WitVector (int) firstEPIndex_;
d304 1
a304 1
      WitVector (WitPeriod) execPeriod_;
@


1.9
log
@Continued implementation of object iteration.
@
text
@d228 3
a230 3
      static void reLocalIndex (const WitList (WitBomEntry) &);
      static void reLocalIndex (const WitList (WitSubEntry) &);
      static void reLocalIndex (const WitList (WitBopEntry) &);
@


1.8
log
@Began implementation of object iteration.
@
text
@a47 9
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBillEntry (WitPart * thePart, int theLocalIndex);
         //
         // myPart_     <-- thePart.
         // localIndex_ <-- theLocalIndex.

      //------------------------------------------------------------------------
d148 9
@


1.7
log
@Continued development of selection splitting for multi=exec.
@
text
@d22 2
a23 1
#include <Capacity.h>
d79 2
a80 9
      inline const WitString & myPartName ()
         {
         return myPart ()->partName ();
         }

      inline const WitString & myOperationName ()
         {
         return myOperation ()->operationName ();
         }
@


1.6
log
@Coarse selection splitting.
@
text
@d259 1
a259 1
         //    the k-th SubEntry of myBomEntry (),  starting at 0, or
@


1.5
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d190 1
a190 1
      void setBillEntryIndex ();
d192 1
a192 1
         // Sets mappingIndex_;
@


1.4
log
@Refactoring for selection splitting.
@
text
@d149 1
a149 1
         // Only valid during a purge.
@


1.3
log
@Continued implementation of stock re-allocation.
@
text
@d224 1
a224 3
      copyCtorAndAssignment (WitBillEntry);
         //
         // Prevents unintentional copying and assignment.
d380 1
a380 3
      copyCtorAndAssignment (WitExecPerItr);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d151 1
a151 1
      WitBoolean WitBillEntry::hasNextExecPer (
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
