head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2005.12.20.19.04.55;	author rjw;	state dead;
branches;
next	1.14;

1.14
date	2005.12.19.19.29.26;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.16.23.55.51;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.16.23.19.26;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.16.20.33.56;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.02.23.31.29;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.02.22.49.51;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.02.21.00.54;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.29.22.14.06;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.29.20.58.19;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.23.19.08.19;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.22.22.20.28;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.21.22.27.20;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.21.20.08.49;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.18.23.36.32;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.15
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpLocPggH
#define SrpLocPggH

//------------------------------------------------------------------------------
// Header file: "SrpLocPgg.h"
//
// Contains the declaration of the following class:
//
//    SrpLocPgg
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class SrpLocPgg
//
// "Shared-Resource Pegging Local Pegging"
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpLocPgg
//------------------------------------------------------------------------------

class WitSrpLocPgg: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpLocPgg (WitSrpCoord *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpLocPgg ();

      //------------------------------------------------------------------------
      // Public member functions that are only to be called *before* this local
      // pegging has been built.
      //------------------------------------------------------------------------

      void build ();
         //
         // Builds this local pegging.

      //------------------------------------------------------------------------
      // Public member functions that are only to be called *while* this local
      // pegging is being built.
      //------------------------------------------------------------------------

      void recordPlaceReq (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      theReqVol,
            double      thePriorVol);
         //
         // Records the fact that shipment to theDemand in shipPer is causing
         // theReqVol units of requirement to be placed, serialized after
         // thePriorVol previous units.

      void recordPlaceReq (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        theReqVol,
            double        thePriorVol);
         //
         // Records the fact that consumption by theBomEnt for execPer is
         // causing theReqVol units of requirement to be placed, serialized
         // after thePriorVol previous units.

      //------------------------------------------------------------------------
      // Public member functions that are only to be called *after* this local
      // pegging has been built.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints this local pegging.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSrpCoord *, myCoord)

      const WitDblDblStack & serShipReqs (
            WitDemand * theDemand,
            WitPeriod   shipPer);
         //
         // Returns an ordered list of (reqVol, priorVol) pairs that serialize
         // the portion of the total requirements on theDemand->demandedPart ()
         // in shipPer that's due to shipment to theDemand in shipPer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void prtSerShipReqs ();
         //
         // Prints the serialized shipment requirements.

      void prtSerConsReqs ();
         //
         // Prints the serialized consumption requirements.

      noCopyCtorAssign (WitSrpLocPgg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSrpCoord * const myCoord_;
         //
         // The SrpCoord that owns this SrpLocPgg.

      bool building_;
         //
         // True, iff this local pegging is currently being built_.

      bool built_;
         //
         // True, iff this local pegging has been built.

      WitPtrSched <WitDemand, WitDblDblStack> serShipReqs_;
         //
         // serShipReqs_.myElemAt (theDemand, shipPer) is an ordered list of
         // (reqVol, priorVol) pairs that serialize the portion of the total
         // requirements on theDemand->demandedPart () in shipPer that's due to
         // shipment to theDemand in shipPer.

      WitPtrSched <WitBomEntry, WitDblDblStack> serConsReqs_;
         //
         // Given theBomEnt and execPer, let:
         //    consPer = the consumption period for theBomEnt for execPer.
         // serConsReqs_.myElemAt (theBomEnt, execPer) is an ordered list of
         // (reqVol, priorVol) pairs that serialize the portion of the total
         // requirements on theBomEnt->myPart () in consPer that's due to
         // consumption by theBomEnt in execPer.
   };

#endif
@


1.14
log
@[shared-resource pegging]
@
text
@@


1.13
log
@[shared-resource pegging]
@
text
@a113 33
      void findFillMeths ();
         //
         // Sets up serFillMeths_.

      double compReqVol (WitPart * thePart, WitPeriod thePer);
         //
         // Computes and returns the total requirement volume on thePart in
         // thePer.

      void findFillMeths (
            WitPart * thePart,
            WitPeriod thePer,
            double    theReqVol);
         //
         // Determines the serialized fill methods for theReqVol units of
         // requirement on thePart in thePer.

      void netWithSupply (
            WitPart * thePart,
            WitPeriod thePer,
            double &  netReqVol);
         //
         // Nets netReqVol with the supply of thePart in thePer.
         // Records the netting in serFillMeths_.

      void expToProd (
            WitPart * thePart,
            WitPeriod expPer,
            double &  netReqVol);
         //
         // Explodes netReqVol to the peoduction of thePart in expPer.
         // Records the exploding in serFillMeths_.

a139 9
      WitPtrSched <WitPart, WitPairStack <WitSrpFillMeth, double> >
            serFillMeths_;
         //
         // serFillMeths_.myElemAt (thePart, thePer) is an ordered list of pairs
         // (theSrpFillMeth, fillVol), such that theSrpFillMeth indicates how
         // fillVol units of requirement on thePart in thePer are to be filled
         // after the sum of all the preceeding requirements in the list have
         // been filled.

@


1.12
log
@[shared-resource pegging]
@
text
@a22 1
#include <Schedule.h>
a84 8
      void recordViolation (
            WitPart * thePart,
            WitPeriod thePer,
            double    incViolVol);
         //
         // Records an incremental violation of incViolVol units of the resource
         // allocation constraint on thePart in thePer.

a107 5
      double violVol (WitPart * thePart, WitPeriod thePer);
         //
         // Returns the amount violation of the resource allocation constraint
         // on thePart in thePer that was been detected by this local pegging.

a154 5
      void prtViolVols ();
         //
         // Prints the resource allocation constraint violations recorded in
         // local pegging. if any.

a196 10

      WitSchedule <WitPart, double> violVol_;
         //
         // violVol_ (thePart)[thePer] is the amount violation of the resource
         // allocation constraint on thePart in thePer that was been detected
         // by this local pegging.
         // If this is positive, it reflects either:
         //    Numerical noise, or
         //    An infeasible implosion solution, or
         //    A bug in the computation of the local pegging.
@


1.11
log
@[shared-resource pegging]
@
text
@d128 33
d196 2
a197 2
         // (theSrpFillMeth, theReqVol), such that theSrpFillMeth indicates how
         // theReqVol units of requirement on thePart in thePer are to be filled
@


1.10
log
@[shared-resource pegging]
@
text
@d159 9
@


1.9
log
@[shared-resource pegging]
@
text
@d109 12
a120 4
      inline const WitSchedule <WitPart, double> & violVol ()
         {
         return violVol_;
         }
@


1.8
log
@[shared-resource pegging]
@
text
@d109 1
a109 1
      inline double violVol (WitPart * thePart, WitPeriod thePer)
d111 1
a111 1
         return violVol_ (thePart)[thePer];
@


1.7
log
@[shared-resource pegging]
@
text
@d120 13
a138 8
      void printSerShipReqs ();
         //
         // Prints the serialized shipment requirements.

      void printSerConsReqs ();
         //
         // Prints the serialized consumption requirements.

@


1.6
log
@[shared-resource pegging]
@
text
@d109 5
@


1.5
log
@[shared-resource pegging]
@
text
@d23 1
d86 8
d156 10
@


1.4
log
@[shared-resource pegging]
@
text
@d65 1
a65 1
      void recordReq (
d71 13
a83 2
         // Records the fact that theDemand in shipPer is placing theReqVol
         // units of requirement, serialized after thePriorVol previous units.
d112 8
d132 1
a132 1
      WitPtrSched <WitDemand, WitDblDblStack> serialShipVol_;
d134 13
a146 4
         // serialShipVol_.myElemAt (theDemand, shipPer) is an ordered list of
         // (reqVol, priorVol) pairs that specify how
         // theDemand->shipVol_ (theDemand)[shipPer] translates into
         // serialized requirements for theDemand->demandedPart ().
@


1.3
log
@[shared-resource pegging]
@
text
@d52 2
a53 1
      // Other public member functions.
d60 6
a65 1
      void placeReq (
d75 9
@


1.2
log
@[shared-resource pegging]
@
text
@d22 1
d59 9
d97 7
@


1.1
log
@[shared-resource pegging]
@
text
@d42 1
a42 1
      WitSrpLocPgg (WitProblem *);
d58 6
d76 4
@

