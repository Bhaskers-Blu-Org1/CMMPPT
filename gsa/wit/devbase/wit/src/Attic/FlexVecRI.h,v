head	1.5;
access;
symbols
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.1.0.4
	Root-of-EndRw:1.1
	rwToStl:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2003.09.25.23.49.55;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2003.01.13.22.22.09;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.02.23.40.40;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.02.22.18.27;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.11.18.53.08;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Continued implementation of post-implosion pegging.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef FlexVecRIH
#define FlexVecRIH

//------------------------------------------------------------------------------
// Header file: "FlexVecRI.h"
//
// Contains the implementation of class template FlexVecRep <TheType>.
//------------------------------------------------------------------------------

#include <FlexVecR.h>

//------------------------------------------------------------------------------
// Implementation of class template FlexVecRep <TheType>
//------------------------------------------------------------------------------

template <typename TheType> 
      WitFlexVecRep <TheType>::WitFlexVecRep (
         WitProblem * theProblem,
         TheType      initValue):

      WitProbAssoc (theProblem),

      repIsByVec_  (false),
      myVecRep_    (),
      myScalRep_   (initValue)
   {
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      WitFlexVecRep <TheType>::~WitFlexVecRep ()
   {
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      inline WitTVec <TheType> & WitFlexVecRep <TheType>::myRepMadeVec ()
   {
   if (not repIsByVec ())
      switchToVecRep ();

   return myVecRep_;
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      inline TheType & WitFlexVecRep <TheType>::myRepMadeScal ()
   {
   if (repIsByVec ())
      switchToScalRep ();

   return myScalRep_;
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      inline WitTVec <TheType> & WitFlexVecRep <TheType>::myVecRep ()
   {
   witAssert (repIsByVec ());

   return myVecRep_;
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      inline TheType & WitFlexVecRep <TheType>::myScalRep ()
   {
   witAssert (not repIsByVec ());

   return myScalRep_;
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      void WitFlexVecRep <TheType>::switchToVecRep ()
   {
   witAssert (not repIsByVec ());

   myVecRep_.allocate (myProblem (), myScalRep_);

   repIsByVec_ = true;
   }

//------------------------------------------------------------------------------

template <typename TheType> 
      void WitFlexVecRep <TheType>::switchToScalRep ()
   {
   witAssert (repIsByVec ());

   myScalRep_ = myVecRep_[0];

   myVecRep_.clear ();

   repIsByVec_ = false;
   }

#endif
@


1.4
log
@Various internal changes.
@
text
@@


1.3
log
@Internal changes.
@
text
@d25 1
a25 1
template <class TheType> 
d40 1
a40 1
template <class TheType> 
d47 1
a47 1
template <class TheType> 
d58 1
a58 1
template <class TheType> 
d69 1
a69 1
template <class TheType> 
d79 1
a79 1
template <class TheType> 
d89 1
a89 1
template <class TheType> 
d101 1
a101 1
template <class TheType> 
@


1.2
log
@Internal changes.
@
text
@d50 1
a50 1
   if (! repIsByVec ())
d82 1
a82 1
   witAssert (! repIsByVec ());
d92 1
a92 1
   witAssert (! repIsByVec ());
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d32 1
a32 1
      repIsByVec_  (witFALSE),
d96 1
a96 1
   repIsByVec_ = witTRUE;
d110 1
a110 1
   repIsByVec_ = witFALSE;
@

