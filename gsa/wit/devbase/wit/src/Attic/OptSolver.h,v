head	1.19;
access;
symbols
	sce_5_01_20080919:1.18
	latest_sce4_20_OSL:1.11.0.2
	sce_4_20_OSL:1.11
	sce_410_withVa:1.11
	sce_4_05_20040511:1.10
	sce_4_00_20040201:1.10
	nextGenBranch:1.7.0.2
	nextGenRoot:1.7
	sce_3_30_20030627:1.5;
locks; strict;
comment	@ * @;


1.19
date	2010.01.13.19.52.09;	author rjw;	state dead;
branches;
next	1.18;

1.18
date	2008.03.03.22.35.43;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2008.02.27.23.19.11;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.08.01.20.47.55;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.08.18.19.32.52;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.21.21.02.49;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2006.04.21.20.37.11;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.18.19.06.55;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.30.18.13.59;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.09.18.18.30.16;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.31.16.23.29;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.30.22.47.24;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.28.23.37.47;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.18.21.13.38;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.30.18.19.11;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.28.22.19.31;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.28.15.10.17;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.13.22.00.04;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.13.20.43.25;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Multi-objective mode
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OptSolverH
#define OptSolverH

//------------------------------------------------------------------------------
// Header file: "OptSolver.h"
//
// Contains the declaration of the following class:
//
//    OptSolver
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class OptSolver
//
// "Optimization Model Solver"
// Responsible for solving an optimization model.
// In OPT_IMPLODE mode, this is done by delegating to class CoinSolver.
// In non-OPT_IMPLODE mode, the optimization model is not solved.
//
// Implemented in OptMisc.C.
//------------------------------------------------------------------------------

class WitOptSolver: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOptSolver (WitOptModel *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOptSolver ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void solve ();
         //
         // In     OPT_IMPLODE mode: Solves the optimization model.
         // In non-OPT_IMPLODE mode: Issues a fatal error.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOptSolver);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitCoinSolver * myCoinSolver_;
         //
         // In     OPT_IMPLODE mode: The CoinSolver owned by this OptSolver.
         // In non-OPT_IMPLODE mode: NULL.
   };

#endif
@


1.18
log
@Stochastic Implosion
@
text
@@


1.17
log
@Stochastic Implosion
@
text
@d26 2
a27 2
// "Optimization Problem Solver"
// Responsible for solving an optimization problem.
d29 1
a29 1
// In non-OPT_IMPLODE mode, the optimization problem is not solved.
d56 1
a56 1
         // In     OPT_IMPLODE mode: Solves the optimization problem.
@


1.16
log
@Stochastic Implosion
@
text
@d42 1
a42 1
      WitOptSolver (WitOptProb *);
@


1.15
log
@App controlled opt implode.
@
text
@d31 1
a31 6
// Class Hierarchy:
//
// ProbAssoc
//    OptSolver
//
// Implemented in OptProb.C.
@


1.14
log
@Removed class OptSolver.
@
text
@d16 3
a18 1
// Contains the declaration of class OptSolver.
d26 4
a29 1
// Responsible for solving an OptModel.
d35 2
a36 1
//       CoinSolver
d44 1
a44 1
      // Destructor function.
d47 1
a47 1
      virtual ~WitOptSolver ();
d50 1
a50 11
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void solve () = 0;
         //
         // Solves myOptModel_.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
d53 1
a53 1
      WitOptSolver (WitOptModel *);
d56 1
a56 1
      // Data access functions.
d59 4
a62 1
      accessFunc (WitOptModel *, myOptModel)
d72 1
a72 1
      //-----------------------------------------------------------------------
d74 1
a74 1
      //-----------------------------------------------------------------------
d76 1
a76 1
      WitOptModel * const myOptModel_;
d78 2
a79 1
         // The OptModel for this OptSolver.
@


1.13
log
@Removed some more OSL items.
@
text
@@


1.12
log
@Removed class OslSolver.
@
text
@a50 4
      static bool coinMode ();
         //
         // Returns true, iff WIT was built in COIN mode.

@


1.11
log
@[multi-thread]
@
text
@a29 1
//       OslSolver
@


1.10
log
@Continued implementation of opt with COIN.
@
text
@d52 4
@


1.9
log
@Continued implementation of opt with COIN.
@
text
@d30 1
a30 1
//       OslMgr
d80 1
a80 1
         // The OptModel for this OslMgr.
@


1.8
log
@Continued implementation of opt with COIN.
@
text
@d31 1
a31 1
//       ClpOsiSolver
@


1.7
log
@Continued implementation of opt with COIN.
@
text
@d31 1
a31 2
//       OsiSolver
//          ClpOsiSolver
@


1.6
log
@Continued implementation of opt with COIN.
@
text
@a31 1
//          OslOsiSolver
@


1.5
log
@Continued implementation of opt with COIN.
@
text
@d33 1
a33 1
//          ClpSolver
@


1.4
log
@Continued implementation of opt with COIN.
@
text
@d31 3
a33 1
//       OsiOslSolver
@


1.3
log
@Continued implementation of opt with COIN.
@
text
@d19 1
a19 1
#include <Util.h>
d28 4
a31 3
// OptSolver
//    OslMgr
//    OsiOslSolver
d34 1
a34 1
class WitOptSolver: public WitUtil
d64 1
a64 3
      accessFunc (WitOptModel *,    myOptModel)
      accessFunc (WitOptImploder *, myOptImploder)
      accessFunc (WitMsgFacility &, myMsgFac)
a80 8

      WitOptImploder * const myOptImploder_;
         //
         // The OptImploder for this OslMgr.

      WitMsgFacility & myMsgFac_;
         //
         // The MsgFacility for this OslMgr.
@


1.2
log
@Continued implementation of opt with COIN.
@
text
@d30 1
a30 1
//    CoinSolver
@


1.1
log
@Continued implementation of opt with COIN.
@
text
@d30 1
d49 1
a49 1
         // Solves the OptModel.
@

