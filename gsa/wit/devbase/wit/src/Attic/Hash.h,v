head	1.10;
access;
symbols
	latest_sce_4_20_20060523:1.9.0.2
	sce_4_20_20060523:1.9
	latest_sce4_20_OSL:1.8.0.2
	sce_4_20_OSL:1.8
	sce_410_withVa:1.8
	sce_4_05_20040511:1.8
	sce_4_00_20040201:1.7
	nextGenBranch:1.7.0.6
	nextGenRoot:1.7
	sce_3_30_20030627:1.7
	EndRw-branch:1.7.0.4
	Root-of-EndRw:1.7
	rwToStl:1.7.0.2
	latest_sce_3_10_20010924:1.6.0.2
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2006.07.19.19.17.06;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2006.05.02.17.33.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.10.22.53.19;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.01.14.25.55;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.21.18.24.30;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.37;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.04.22.07.36;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.40;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.52;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Replaced WIT's hash tables with std:maps.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef HashH
#define HashH

//------------------------------------------------------------------------------
// Header file: "Hash.h"
//
// Contains the declaration of class HashTable.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// class HashTable
// Implements a hash table to provide an efficient mapping from the names to
// corresponding nodes owned by a WitRun.
// Hashing clashes are resolved with "linear chaining",
// i.e. nodes with identical hash keys are placed on a WitList.
// A cache of the most recently inserted or found Node is maintained.
//
// Implemented in Misc.C.
//------------------------------------------------------------------------------

class WitHashTable: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHashTable (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitHashTable ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void insert (WitNode * theNode);
         //
         // Inserts a theNode into this HashTable.
         // Issues a fatal error, if the name of theNode matches a name
         // already in the table.

      WitNode * namedNode (const char * theName);
         //
         // Returns the node whose name is partName, assuming it was
         // previously inserted into this HashTable; otherwise returns NULL.

      void purge ();
         //
         // Removes all selForDel Nodes from this HashTable.
         // Valid only during a purge.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitHashTable);

      void init ();
         //
         // Creates the initial internal table.

      void expand ();
         //
         // Increases the size of the internal table.

      int hashKey (const char * theName) const;
         //
         // Returns a hash key for theName.

      void resize (int theSize);
         //
         // Resizes the internal table to theSize.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      static const double growthFactor_;
         //
         // The factor by which the length of the internal is multiplied
         // during a resize.

      WitPtrVec <WitList <WitNode> > internalTable_;
         //
         // The internal hash table.

      int nNodesHashed_;
         //
         // # nodes hashed by this HashTable.

      WitNode * cachedNode_;
         //
         // The node most recently inserted into or found in this HashTable.
   };

#endif
@


1.9
log
@Updated the copyright date on all source files.
@
text
@@


1.8
log
@Double Precision.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.7
log
@Preliminary work on single source.
@
text
@d99 1
a99 1
      static const float growthFactor_;
@


1.6
log
@More templates.
@
text
@d104 1
a104 1
      WitPtrVec <WitList (WitNode)> internalTable_;
@


1.5
log
@Some minor changes.
@
text
@d104 1
a104 1
      WitPtrVec (WitList (WitNode)) internalTable_;
@


1.4
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d20 1
d91 4
d104 1
a104 1
      WitRefVector (WitList (WitNode)) internalTable_;
@


1.3
log
@Refactoring for selection splitting.
@
text
@d68 1
a68 1
         // Only valid during a purge.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d76 1
a76 3
      copyCtorAndAssignment (WitHashTable);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
