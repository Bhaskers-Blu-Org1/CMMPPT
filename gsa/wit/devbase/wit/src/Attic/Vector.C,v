head	1.13;
access;
symbols
	EndRw-branch:1.12.0.10
	Root-of-EndRw:1.12
	rwToStl:1.12.0.8
	latest_sce_3_10_20010924:1.12.0.6
	sce_3_10_20010924:1.12
	latest_sce_3_00_20010601:1.12.0.4
	sce_3_00_20010601:1.12
	latest_sce_2_31_20010308:1.12.0.2
	sce_2_31_20010308:1.12
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2003.03.03.23.27.06;	author rjw;	state dead;
branches;
next	1.12;

1.12
date	2001.01.20.00.44.23;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.22.16.18.28;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.20.20.08.38;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2000.12.06.19.58.42;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.12.05.19.05.33;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.04.22.07.39;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.22.23.11.50;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.21.20.03.28;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.29.21.22.47;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.18.00.16.01;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.08;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.31;	author wit;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.12
log
@Implemented and used class SelMgr.
@
text
@@


1.11
log
@Further development of coarse selection splitting.
@
text
@a0 335
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "Vector.C"
//
// Contains the implementation of the following classes:
//
//    TVec (TheType)
//    String
//    AbsDenseList
//    DenseList (TheType)
//------------------------------------------------------------------------------

#include <Problem.h>

#ifdef OPT_IMPLODE

#  include <ImpLp.h>

#endif

//------------------------------------------------------------------------------
// Implementation macro for generic class TVec (TheType)
//------------------------------------------------------------------------------

#define WitTVecimplement(TheType)                                              \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitTVec (TheType)::WitTVec (TheType) (): WitVector (TheType) ()                \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitTVec (TheType)::WitTVec (TheType) (                                         \
         WitProblem * theProblem,                                              \
         TheType      initValue):                                              \
                                                                               \
      WitVector (TheType) (theProblem->nPeriods (), initValue)                 \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitTVec (TheType)::~WitTVec (TheType) ()                                       \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitTVec (TheType)::allocate (WitProblem * theProblem, TheType initValue)  \
   {                                                                           \
   WitVector (TheType)::resize (theProblem->nPeriods (), initValue);           \
   }                                                                           \
                                                                               \
//------------------------------------------------------------------------------
// Implementation of class String.
//------------------------------------------------------------------------------

WitString::WitString ():
      myVector_ ()
   {
   (* this) = "";
   }

//------------------------------------------------------------------------------

WitString::WitString (const char * theCstring):
      myVector_ ()
   {
   (* this) = theCstring;
   }

//------------------------------------------------------------------------------

WitString::WitString (const WitString & theString):
      myVector_ ()
   {
   (* this) = theString;
   }

//------------------------------------------------------------------------------

WitString::WitString (size_t nBlanks):
      myVector_ ()
   {
   resize (nBlanks);
   }

//------------------------------------------------------------------------------

WitString::~WitString ()
   {
   }

//------------------------------------------------------------------------------

void WitString::operator = (const char * theCstring)
   {
   myVector_.resize (strlen (theCstring) + 1);

   strcpy (myCstringForUpdate (), theCstring);
   }

//------------------------------------------------------------------------------

void WitString::operator = (const WitString & theString)
   {
   (* this) = theString.myCstring ();
   }

//------------------------------------------------------------------------------

void WitString::resize (size_t nChars)
   {
   myVector_.resize (nChars + 1, ' ');

   (* this)[(int) nChars] = '\0';
   }

//------------------------------------------------------------------------------

implementClearContents (WitString)
   //
   // See RWClient.h.

//------------------------------------------------------------------------------
// Implementation of class WitAbsDenseList.
//------------------------------------------------------------------------------

WitTl * WitAbsDenseList::compareFuncForSort_ = NULL;

//------------------------------------------------------------------------------

WitAbsDenseList::WitAbsDenseList (size_t maxNElements):
      myVector_  (maxNElements, NULL),
      nElements_ (0)
   {
   }

//------------------------------------------------------------------------------

WitAbsDenseList::~WitAbsDenseList ()
   {
   }

//------------------------------------------------------------------------------

WitTl * WitAbsDenseList::appendAbs (WitTl * theObject)
   {
   witAssert (nElements_ < storageCapacity ());

   witAssert (theObject != NULL);

   myVector_[(int) nElements_] = theObject;

   ++ nElements_;

   return theObject;
   }

//------------------------------------------------------------------------------

void WitAbsDenseList::resize (size_t maxNElements)
   {
   myVector_.resize (maxNElements, NULL);

   nElements_ = 0;
   }

//------------------------------------------------------------------------------

WitBoolean WitAbsDenseList::advanceAbs (
      int &     theIndex, 
      WitTl * & theElement) 
      const
   {
   theIndex ++;

   if (theIndex < (int) nElements_)
      {
      theElement = myVector_[theIndex];

      return witTRUE;
      }
   else
      {
      theElement = NULL;

      return witFALSE;
      }
   }

//------------------------------------------------------------------------------

void WitAbsDenseList::sortAbs (
      WitTl *             theCompareFunc,
      WitQsortCompareFunc theQsortCompareFunc)
   {
   witAssert (compareFuncForSort_ == NULL);
   witAssert (theCompareFunc      != NULL);

   if (isEmpty ())
      return;

   compareFuncForSort_ = theCompareFunc;

   qsort (
      myVector_.myCvectorForUpdate (),
      nElements_,
      sizeof (WitTl *),
      theQsortCompareFunc);

   compareFuncForSort_ = NULL;
   }

//------------------------------------------------------------------------------
// Macro witCompareDenseListEls(TheType)
//
// Used as the parameterized name of a generic global function used by
// DenseList (TheType).
//------------------------------------------------------------------------------

#define witCompareDenseListEls(TheType)                                        \
                                                                               \
   name2 (witCompareDenseListEls, TheType)                                     \

//------------------------------------------------------------------------------
// Implementation macro for generic class WitDenseList (TheType).
//------------------------------------------------------------------------------

#define WitDenseListimplement(TheType)                                         \
                                                                               \
/*---------------------------------------------------------------------------*/\
/* Implementation of class DenseList (TheType).                              */\
/*---------------------------------------------------------------------------*/\
                                                                               \
extern "C" int witCompareDenseListEls(TheType) (                               \
      const void * pElement1,                                                  \
      const void * pElement2)                                                  \
   {                                                                           \
   WitCompareFunc(TheType) compare =                                           \
      (WitCompareFunc(TheType)) WitDenseList (TheType)::compareFuncForSort (); \
                                                                               \
   TheType * element1 = * (TheType * const *) pElement1;                       \
   TheType * element2 = * (TheType * const *) pElement2;                       \
                                                                               \
   return compare (element1, element2);                                        \
   }                                                                           \
   /*                                                                        */\
   /* This is the compare function passed from DenseList (TheType)::sort to  */\
   /* WitAbsDenseList::sort to qsort. It is a wrapper around                 */\
   /* WitAbsDenseList::compareFuncForSort_, which is the compare             */\
   /* function that was passed from the client to DenseList (TheType)::sort. */\
   /* Thus when qsort calls this function, the client's compare function is  */\
   /* called. The purpose of this wrapper function is simply to cast the     */\
   /* relevant void *'s to the appropriate type. The extern "C" linkage and  */\
   /* declaration as a global function are necessary on C Set/2.             */\
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitDenseList (TheType)::WitDenseList (TheType) (size_t maxNElements):          \
      WitAbsDenseList (maxNElements)                                           \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitDenseList (TheType)::~WitDenseList (TheType) ()                             \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitDenseList (TheType)::sort (WitCompareFunc(TheType) theFunc)            \
   {                                                                           \
   sortAbs ((WitTl *) theFunc, witCompareDenseListEls(TheType));               \
   }                                                                           \

//------------------------------------------------------------------------------
                                                                               
#define copyIntoDenseListFromListimplement(TheType)                            \
                                                                               \
void copyInto (                                                                \
      WitDenseList (TheType)  & theDenseList,                                  \
      const WitList (TheType) & theList)                                       \
   {                                                                           \
   TheType * theObject;                                                        \
                                                                               \
   theDenseList.clear ();                                                      \
                                                                               \
   forEachEl (theObject, theList)                                              \
      theDenseList.append (theObject);                                         \
   }                                                                           \

//------------------------------------------------------------------------------
// Implementations of all specific cases of the generic classes and functions
// declared in this file.
//------------------------------------------------------------------------------

implement (WitTVec,                   int)
implement (WitTVec,                   float)
implement (WitTVec,                   double)
implement (WitTVec,                   WitTlPtr)

implement (WitDenseList,              WitComponent)
implement (WitDenseList,              WitNode)
implement (WitDenseList,              WitPart)
implement (WitDenseList,              WitMaterial)
implement (WitDenseList,              WitOperation)
implement (WitDenseList,              WitSubEntry)
implement (WitDenseList,              WitBopEntry)
implement (WitDenseList,              WitDemand)
implement (WitDenseList,              WitDatedPart)

implement (copyIntoDenseListFromList, WitBopEntry)
implement (copyIntoDenseListFromList, WitOperation)
implement (copyIntoDenseListFromList, WitPart)
implement (copyIntoDenseListFromList, WitSubEntry)


#ifdef OPT_IMPLODE

implement (WitDenseList, WitCoeff)

#endif

@


1.10
log
@Further development of coarse selection splitting.
@
text
@a20 1
#include <Stack.h>
@


1.9
log
@Some minor changes.
@
text
@d140 1
a140 1
WitTypelessPtr WitAbsDenseList::compareFuncForSort_ = NULL;
d158 1
a158 1
WitTypelessPtr WitAbsDenseList::appendAbs (WitTypelessPtr theObject)
d183 2
a184 2
      int &            theIndex, 
      WitTypelessPtr & theElement) 
d206 1
a206 1
      WitTypelessPtr      theCompareFunc,
d220 1
a220 1
      sizeof (WitTypelessPtr),
d286 1
a286 1
   sortAbs ((WitTypelessPtr) theFunc, witCompareDenseListEls(TheType));        \
d313 1
a313 1
implement (WitTVec,                   WitTypelessPtr)
@


1.8
log
@Some minor modifications.
@
text
@a15 1
//    RefVector (TheType)
a65 54
// Implementation macro for generic class RefVector (TheType)
//------------------------------------------------------------------------------

#define WitRefVectorimplement(TheType)                                         \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitRefVector (TheType)::WitRefVector (TheType) ():                             \
      myVector_ ()                                                             \
   {                                                                           \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitRefVector (TheType)::WitRefVector (TheType) (size_t nElems):                \
      myVector_ ()                                                             \
   {                                                                           \
   resize (nElems);                                                            \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
WitRefVector (TheType)::~WitRefVector (TheType) ()                             \
   {                                                                           \
   clear ();                                                                   \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitRefVector (TheType)::clear ()                                          \
   {                                                                           \
   int i;                                                                      \
                                                                               \
   for (i = 0; i < length (); ++ i)                                            \
      delete (TheType *) myVector_[i];                                         \
                                                                               \
   myVector_.clear ();                                                         \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
void WitRefVector (TheType)::resize (size_t nElems)                            \
   {                                                                           \
   int i;                                                                      \
                                                                               \
   clear ();                                                                   \
                                                                               \
   myVector_.resize (nElems, NULL);                                            \
                                                                               \
   for (i = 0; i < nElems; ++ i)                                               \
      (TheType * &) myVector_[i] = new TheType;                                \
   }                                                                           \

//------------------------------------------------------------------------------
d158 15
d182 24
a205 1
void WitAbsDenseList::sort (
d286 1
a286 3
   WitAbsDenseList::sort (                                                     \
      (WitTypelessPtr) theFunc,                                                \
      witCompareDenseListEls(TheType));                                        \
a314 5
implement (WitRefVector,              WitString)
implement (WitRefVector,              WitList (int))
implement (WitRefVector,              WitList (WitNode))
implement (WitRefVector,              WitVector (int))

a331 2

implement (WitRefVector, WitBoundPair)
@


1.7
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d22 1
a22 1
#include <DynStack.h>
@


1.6
log
@Refactoring for selection splitting.
@
text
@d22 1
a66 9
// Implementations of all specific cases of generic class WitTVec (TheType).
//------------------------------------------------------------------------------

implement (WitTVec, int)
implement (WitTVec, float)
implement (WitTVec, double)
implement (WitTVec, WitTypelessPtr)

//------------------------------------------------------------------------------
a120 15
// Implementations of all specific cases of generic class RefVector (TheType)
//------------------------------------------------------------------------------

implement (WitRefVector, WitString)
implement (WitRefVector, WitList (int))
implement (WitRefVector, WitList (WitNode))
implement (WitRefVector, WitVector (int))

#ifdef OPT_IMPLODE

   implement (WitRefVector, WitBoundPair)

#endif

//------------------------------------------------------------------------------
a308 20
// Implementations of all specific cases of generic class DenseList.
//------------------------------------------------------------------------------

implement (WitDenseList, WitComponent)
implement (WitDenseList, WitNode)
implement (WitDenseList, WitPart)
implement (WitDenseList, WitMaterial)
implement (WitDenseList, WitOperation)
implement (WitDenseList, WitSubEntry)
implement (WitDenseList, WitBopEntry)
implement (WitDenseList, WitDemand)
implement (WitDenseList, WitDatedPart)

#ifdef OPT_IMPLODE

   implement (WitDenseList, WitCoeff)

#endif

//------------------------------------------------------------------------------
d325 2
a326 2
// Implementations of all specific cases of generic function 
// copyInto-DenseList-list.
d329 20
d353 10
@


1.5
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d185 1
a185 1
WitString & WitString::operator = (const char * theCstring)
a189 2

   return * this;
d194 1
a194 1
WitString & WitString::operator = (const WitString & theString)
d196 1
a196 1
   return (* this) = theString.myCstring ();
@


1.4
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@d355 1
a355 1
#define copyToDenseListFromListimplement(TheType)                              \
d357 1
a357 1
void copyTo (                                                                  \
d371 1
a371 1
// copy-DenseList-list.
d374 4
a377 4
implement (copyToDenseListFromList, WitBopEntry)
implement (copyToDenseListFromList, WitOperation)
implement (copyToDenseListFromList, WitPart)
implement (copyToDenseListFromList, WitSubEntry)
@


1.3
log
@Began implementation of stock bounds.
Changed the default value of the stockRealloc attribute to FALSE.
@
text
@d355 1
a355 1
#define copyDenseListListimplement(TheType)                                    \
d357 1
a357 1
void copy (                                                                    \
d374 4
a377 4
implement (copyDenseListList, WitBopEntry)
implement (copyDenseListList, WitOperation)
implement (copyDenseListList, WitPart)
implement (copyDenseListList, WitSubEntry)
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d125 1
a125 1
      myVector_[i] = new TheType;                                              \
d220 1
a220 1
const void * WitAbsDenseList::compareFuncForSort_ = NULL;
d248 1
a248 1
      void *              theCompareFunc,
d262 1
a262 1
      sizeof (void *),
d328 3
a330 1
   WitAbsDenseList::sort (theFunc, witCompareDenseListEls(TheType));           \
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
