head	1.11;
access;
symbols
	sce_4_05_20040511:1.10;
locks; strict;
comment	@ * @;


1.11
date	2005.02.24.23.23.57;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2004.04.14.21.16.17;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.09.15.52.47;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.06.18.16.57;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.06.15.42.16;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.05.20.06.11;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.02.20.54.16;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.29.23.21.28;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.26.17.03.33;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.26.16.07.23;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.25.23.28.07;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Vector PropRt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OutVecRAH
#define OutVecRAH

//------------------------------------------------------------------------------
// Header file: "OutVecRA.h"
//
// Contains:
//    The declaration           of class OutVecRA.
//    The declaration           of class OVRAElem.
//    The inline implementation of class OutVecRA.
//    The inline implementation of class OVRAElem.
//------------------------------------------------------------------------------

#include <RealArg.h>
#include <TlObj.h>

//------------------------------------------------------------------------------
// Class OutVecRA
//
// "Output Vector Real Argument"
//
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is the address of a pointer belonging to the
// application program and it is WIT's responsibility to store at this address
// the pointer to a newly created real-valued c-vector. Specifically, the
// underlying argument is of one of the following types:
//
//    float  * *
//    double * *
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const OutVecRA &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type float * * and double * *. These are the "underlying arguments".
//    The newly created c-vectors are of type float * and double *. These are
//    called the "underlying c-vectors".
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitOutVecRA: public WitRealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOutVecRA (float * *);
         //
         // Conversion from a float * * underlying argument.

      WitOutVecRA (double * *);
         //
         // Conversion from a double * * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOutVecRA ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void apiAlloc (size_t nElems) const;
         //
         // Allocates the underlying c-vector to nElems elements.
         // Uses malloc, so the c-vector can be passed back to the application
         // program.

      void operator = (const WitDblFlexVec & theDblFlexVec) const;
         //
         // Copies the elements of theDblFlexVec into the corresponding elements
         // of the underlying c-vector.

      inline WitOVRAElem operator [] (int theIdx) const;
         //
         // Constructs and returns an OVRAElem that represents the element of
         // this OutVecRA indexed by theIdx.

      void setElem (int theIdx, double theVal) const;
         //
         // Sets the element of this InVecRA indexed by theIdx to theVal.

      operator void * () const;
         //
         // Returns the underlying argument, converted to a void *.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline float  * & myFltCVec () const;
      inline double * & myDblCVec () const;
         //
         // These functions return the underlying c-vector.

      noCopyCtorAssign (WitOutVecRA);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * * const myFltCVecPtr_;
         //
         // The underlying argument, if it is a float * *.
         // Otherwise NULL.

      double * * const myDblCVecPtr_;
         //
         // The underlying argument, if it is a double * *.
         // Otherwise NULL.
   };

//------------------------------------------------------------------------------
// Class OVRAElem
//
// "Output Vector Real Argument Element"
// Represents an element of an OutVecRA.
// All implementation is inline.
//------------------------------------------------------------------------------

class WitOVRAElem
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitOVRAElem (const WitOutVecRA &, int);

      inline WitOVRAElem (const WitOVRAElem &);
         //
         // Copy ctor.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitOVRAElem ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void operator = (double theVal) const;
         //
         // Sets the element represented by this OVRAElem to theVal.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitOVRAElem & operator = (const WitOVRAElem &);
         //
         // Not implemented.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitOutVecRA & myOutVecRA_;
      const int           myIdx_;
         //
         // This OVRAElem represents the element of myOutVecRA_ indexed by
         // myIdx_.
   };

//------------------------------------------------------------------------------
// Inline implementation of class OutVecRA.
//------------------------------------------------------------------------------

inline WitOVRAElem WitOutVecRA::operator [] (int theIdx) const
   {
   return WitOVRAElem (* this, theIdx);
   }

//------------------------------------------------------------------------------

inline float * & WitOutVecRA::myFltCVec () const
   {
   witAssert (floatCase ());

   return (* myFltCVecPtr_);
   }

//------------------------------------------------------------------------------

inline double * & WitOutVecRA::myDblCVec () const
   {
   witAssert (doubleCase ());

   return (* myDblCVecPtr_);
   }

//------------------------------------------------------------------------------
// Inline implementation of class OVRAElem.
//------------------------------------------------------------------------------

inline WitOVRAElem::WitOVRAElem (const WitOutVecRA & theOutVecRA, int theIdx):

      myOutVecRA_ (theOutVecRA),
      myIdx_      (theIdx)
   {
   }

//------------------------------------------------------------------------------

inline WitOVRAElem::WitOVRAElem (const WitOVRAElem & theOVRAElem):

      myOutVecRA_ (theOVRAElem.myOutVecRA_),
      myIdx_      (theOVRAElem.myIdx_)
   {
   }

//------------------------------------------------------------------------------

inline WitOVRAElem::~WitOVRAElem ()
   {
   }

//------------------------------------------------------------------------------

inline void WitOVRAElem::operator = (double theVal) const
   {
   myOutVecRA_.setElem (myIdx_, theVal);
   }

#endif
@


1.10
log
@Double Precision.
@
text
@@


1.9
log
@Double Precision.
@
text
@d87 1
a87 1
      void convCopy (const WitDblFlexVec & theDblFlexVec) const;
@


1.8
log
@Double Precision.
@
text
@d84 1
a84 1
         // Uses malloc, so the theCVec can be passed back to the application
@


1.7
log
@Double Precision.
@
text
@d16 5
a20 2
// Contains the declaration of class OVRAElem.
// Contains the declaration of class OutVecRA.
a26 61
// Class OVRAElem
//
// "Output Vector Real Argument Element"
// Represents an element of an OutVecRA.
// All implementation is inline.
//------------------------------------------------------------------------------

class WitOVRAElem
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline WitOVRAElem (const WitOutVecRA &, int);

      inline WitOVRAElem (const WitOVRAElem &);
         //
         // Copy ctor.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~WitOVRAElem ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void operator = (double theVal) const;
         //
         // Sets the element represented by this OVRAElem to theVal.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitOVRAElem & operator = (const WitOVRAElem &);
         //
         // Not implemented.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitOutVecRA & myOutVecRA_;
      const int           myIdx_;
         //
         // This OVRAElem represents the element of myOutVecRA_ indexed by
         // myIdx_.
   };

//------------------------------------------------------------------------------
a52 2
   friend void WitOVRAElem::operator = (double) const;

d97 4
a110 4
      void setElem (int theIdx, double theVal) const;
         //
         // Sets the element of this InVecRA indexed by theIdx to theVal.

d134 5
a138 1
// Inline implementation of class OVRAElem.
d141 21
a161 1
inline WitOVRAElem::WitOVRAElem (const WitOutVecRA & theOutVecRA, int theIdx):
d163 1
a163 4
      myOutVecRA_ (theOutVecRA),
      myIdx_      (theIdx)
   {
   }
d165 3
a167 1
//------------------------------------------------------------------------------
d169 3
a171 1
inline WitOVRAElem::WitOVRAElem (const WitOVRAElem & theOVRAElem):
d173 1
a173 4
      myOutVecRA_ (theOVRAElem.myOutVecRA_),
      myIdx_      (theOVRAElem.myIdx_)
   {
   }
d175 3
a177 1
//------------------------------------------------------------------------------
d179 3
a181 3
inline WitOVRAElem::~WitOVRAElem ()
   {
   }
d183 3
a185 1
//------------------------------------------------------------------------------
d187 6
a192 4
inline void WitOVRAElem::operator = (double theVal) const
   {
   myOutVecRA_.setElem (myIdx_, theVal);
   }
d219 33
@


1.6
log
@Double Precision.
@
text
@d157 1
a157 5
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitTlObj * asaTlPtr () const;
d159 1
a159 1
         // Returns the underlying argument, converted to a TlObj ptr.
@


1.5
log
@Double Precision.
@
text
@d16 1
d24 61
d111 2
d152 1
a152 1
      void setElem (int theIdx, double theVal) const;
d154 2
a155 1
         // Sets the element of this InVecRA indexed by theIdx to theVal.
d171 4
d198 41
a238 1
// Implementation of inlines.
@


1.4
log
@Double Precision.
@
text
@d88 4
@


1.3
log
@Double Precision.
@
text
@d92 1
a92 1
      WitTlObj * myUnderArgAsTlPtr () const;
@


1.2
log
@Double Precision.
@
text
@d77 1
a77 1
      void apiAlloc (size_t nElems);
d82 5
@


1.1
log
@Double Precision.
@
text
@d30 1
a30 1
// the pointer to a newly created real-valued vector. Specifically, the
d41 2
d77 6
d87 4
d97 4
a100 2
      accessNonNull (float  * *,  myFltCVecPtr)
      accessNonNull (double * *,  myDblCVecPtr)
d118 20
@

