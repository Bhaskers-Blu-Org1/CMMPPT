head	1.6;
access;
symbols
	EndRw-branch:1.5.0.4
	Root-of-EndRw:1.5
	rwToStl:1.5.0.2
	latest_sce_3_10_20010924:1.4.0.2
	sce_3_10_20010924:1.4;
locks; strict;
comment	@ * @;


1.6
date	2003.03.03.23.26.59;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2002.07.11.22.48.29;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.21.22.36.31;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.01.14.55.31;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.27.21.28.39;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.25.16.08.18;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.5
log
@Continued implementation of Single-Source.
@
text
@@


1.4
log
@Moved pegging output to comprehensive implosion solution output.
Fixed bug: Pegging was being attempted during stock bounds enforcement.
@
text
@a0 121
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PegMgrH
#define PegMgrH

//------------------------------------------------------------------------------
// Header file: "PegMgr.h"
//
// Contains the declaration of the following class PegMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PegMgr
//
// "Pegging Manager"
// Responsible for creating and maintaining the pegging of execVols and subVols
// to Demands in heuristic allocation. Implemented as a wrapper for template
// classes Pegger <Operation> and Pegger <SubEntry>.
//
// Implemented in Pegging.C.
//------------------------------------------------------------------------------

class WitPegMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPegMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPegMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setUpPeggedHeurAlloc ();
         //
         // Sets up pegging for the beginning of heuristic allocation.

      void setUpPeggedIncAlloc (
            WitObjStack <WitPegEl <WitOperation> > & theOpnPegEls,
            WitObjStack <WitPegEl <WitSubEntry>  > & theSubPegEls);
         //
         // Sets up pegging for an incHeurAlloc by updating theOpnPegEls and
         // theSubPegEls.

      void pegDeltaVol (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         deltaVol);
         //
         // Records the following event: 
         //    theOpn->execVol_[execPer] += deltaVol

      void pegDeltaVol (
            WitSubEntry * theSub,
            WitPeriod     execPer,
            double        deltaVol);
         //
         // Records the following event: 
         //    theSub->subVol_ [execPer] += deltaVol

      void shutDownPeggedIncAlloc ();
         //                                
         // Shuts down pegging for an incHeurAlloc.

      void shutDownPeggedHeurAlloc ();
         //
         // Shuts down pegging for the end of heuristic allocation.

      void clear ();
         //
         // Puts the pegging into its initial state.

      void print ();
         //
         // Prints the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void print (WitObjStack <const WitOpnPegEl> & thePegEls);
         //
         // Prints thePegEls;

      void print (WitObjStack <const WitSubPegEl> & thePegEls);
         //
         // Prints thePegEls;

      noCopyCtorAssign (WitPegMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPegger <WitOperation> * myOpnPegger_;
      WitPegger <WitSubEntry>  * mySubPegger_;
         //
         // The Peggers owned by this PegMgr.
   };

#endif
@


1.3
log
@Continued implementation of pegging.
@
text
@d91 4
d100 8
@


1.2
log
@Continued implementation of pegging.
@
text
@d16 1
a16 4
// Contains the declaration of the following class templates:
//
//    PegMgrI <AllocComp>
//    PegMgr  <AllocComp> 
a19 1
#include <ObjStack.h>
d22 1
a22 10
// Class template PegMgrI <AllocComp> and
// Class template PegMgr  <AllocComp>
//
// For AllocComp = either Operation or SubEntry: 
//    Class PegMgr <AllocComp> is responsible maintaining the pegging of either
//    execVols or subVols to Demands in heuristic allocation. 
//
//  Class templates PegMgr <AllocComp> and PegMgrI <AllocComp> have a 
//  "wrapper/implementor" relationship similar to Pegger <AllocComp> and 
//  PeggerI <AllocComp>. For an explanation, see Pegger.h
d24 4
a27 4
// Class Hierarchy:
//
// PegMgrI <AllocComp>
//    PegMgr <AllocComp>
d32 1
a32 41
template <class AllocComp>
      class WitPegMgrI: public WitProbAssoc
   {
   protected:

      //------------------------------------------------------------------------
      // Protected member functions that implement the corresponding member
      // functions as class PegMgr.
      //------------------------------------------------------------------------

           WitPegMgrI          (WitProblem *);
          ~WitPegMgrI          ();
      void setUpPeggedIncAlloc (WitObjStack <WitPegEl <AllocComp> > &);
      void clear               ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssignTemp (WitPegMgrI, AllocComp);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitObjStack <WitPegEl <AllocComp> > > nonEmptyPegElStPtrs_;
         //
         // A list of ptrs to all potentially non-empty PegEl Stacks owned by
         // the PegSites for this PegMgrI.
   };

//------------------------------------------------------------------------------
// Class template PegMgr <AllocComp>
//
// See above.
//------------------------------------------------------------------------------

template <class AllocComp>
      class WitPegMgr: private WitPegMgrI <AllocComp>
d52 4
d57 2
a58 1
            WitObjStack <WitPegEl <AllocComp> > & thePegEls);
d60 26
a85 1
         // Sets up pegging for an incHeurAlloc by updating thePegEls.
d93 14
a106 1
      noCopyCtorAssignTemp (WitPegMgr, AllocComp);
@


1.1
log
@Initial implementation of pegging.
@
text
@d15 5
d26 15
a40 1
// Class PegMgr
d42 1
a42 3
// "Pegging Manager"
// Responsible maintaining the pegging of Demands to execVols in heuristic
// allocation.
d45 2
a46 1
class WitPegMgr: public WitProbAssoc
d48 1
a48 1
   public:
d51 2
a52 1
      // Constructor functions.
d55 6
a60 1
      WitPegMgr (WitProblem *);
d63 1
a63 1
      // Destructor function.
d66 1
a66 1
      ~WitPegMgr ();
d69 1
a69 1
      // Other public member functions.
d72 1
a72 1
      void startHeurAlloc (WitPegger * thePegger);
d74 3
a76 2
         // Informs this PegMgr that heuristic allocation is commencing and
         // using thePegger to do its pegging.
d78 5
a82 4
      void startIncHeurAlloc (WitObjStack <WitPegEl> & thePegEls);
         //
         // Tells this PegMgr to initiate pegging for an incHeurAlloc by 
         // updating thePegEls.
d84 4
a87 3
      void finishHeurAlloc ();
         //
         // Informs this PegMgr that heuristic allocation is concluding.
d89 3
a91 3
      void clear ();
         //
         // Puts the pegging into its initial state.
d93 1
a93 1
   private:
d96 1
a96 1
      // Private member functions.
d99 1
a99 1
      noCopyCtorAssign (WitPegMgr);
d102 1
a102 1
      // Private member data.
d105 2
a106 1
      WitPegger * myPegger_;
d108 1
a108 2
         // The Pegger associated with this PegMgr, when heuristic allocation is
         // active; otherwise NULL.
d110 1
a110 1
      WitObjStack <WitObjStack <WitPegEl> > nonEmptyPegElStPtrs_;
d112 5
a116 2
         // A list of ptrs to all potentially non-empty PegEl Stacks owned by
         // the PegSites for this PegMgr.
@

