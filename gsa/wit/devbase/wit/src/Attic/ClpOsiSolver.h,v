head	1.5;
access;
symbols
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2;
locks; strict;
comment	@ * @;


1.5
date	2003.07.31.16.23.29;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2003.07.31.15.52.37;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.30.22.47.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.25.23.05.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.18.21.13.38;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Continued implementation of opt with COIN.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ClpOsiSolverH
#define ClpOsiSolverH

//------------------------------------------------------------------------------
// Header file: "ClpOsiSolver.h"
//
// Contains the declaration of class ClpOsiSolver.
//------------------------------------------------------------------------------

#include <OptSolver.h>

//------------------------------------------------------------------------------
// Forward declarations of COIN classes.
//------------------------------------------------------------------------------

class OsiClpSolverInterface;
class ClpSimplex;

//------------------------------------------------------------------------------
// class ClpOsiSolver
//
// Responsible for solving an OptModel by using CLP through the OSI interface,
// and by using SBB.
//
// Class Hierarchy:
//
// ProbAssoc
//    OptSolver
//       ClpOsiSolver
//------------------------------------------------------------------------------

class WitClpOsiSolver: public WitOptSolver
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitClpOsiSolver (WitOptModel *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitClpOsiSolver ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void solve ();
         //
         // Override from class OptSolver.

      void setUpClpOsi ();
         //
         // Sets up CLP / OSI.

      void passFixedModel ();
         //
         // Passes the fixed parts of the optimization model to myOsiClpSI_.

      void passFlexibleModel ();
         //
         // Passes the flexible parts of the optimization model to myOsiClpSI_.

      void passConBounds ();
         //
         // Passes the bounds on each constraint to myOsiClpSI_.

      void passVarBounds ();
         //
         // Passes the bounds on each variable to myOsiClpSI_.

      void passObjCoeffs ();
         //
         // Passes the objective coefficient on each variable to myOsiClpSI_.

      void writeMps ();
         //
         // Writes an MPS file of the model entered into myOsiClpSI_, if
         // appropriate.

      void solveLpUnAcc ();
         //
         // Makes appropriate calls to CLP to solve the optimization problem as
         // an LP in unaccelerated mode.

      void passInitSoln ();
         //
         // Copies the initial primal optimization solution from myOptModel () 
         // into myOsiClpSI_, as needed.

      void checkSolnStatus ();
         //
         // Checks the status of the solution.
         // Issues an error, if it is anything other than optimal.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptModel ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptModel ().

      void shutDownClpOsi ();
         //
         // Shuts down CLP / OSI.

      ClpSimplex * myClpSimplex ();
         //
         // Returns the ClpSimplex for this ClpOsiSolver.
         // Requires that myOsiClpSI_ is not NULL.

      noCopyCtorAssign (WitClpOsiSolver);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      OsiClpSolverInterface * myOsiClpSI_;
         //
         // The OsiSolverInterface owned by this ClpOsiSolver, or NULL.
   };

#endif
@


1.4
log
@Continued implementation of opt with COIN.
@
text
@@


1.3
log
@Continued implementation of opt with COIN.
@
text
@d67 8
a82 18
      void writeMps ();
         //
         // Writes an MPS file of the model entered into myOsiClpSI_, if
         // appropriate.

      void passInitSoln ();
         //
         // Copies the initial primal optimization solution from myOptModel () 
         // into myOsiClpSI_, as needed.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptModel ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptModel ().

d95 1
a95 2

      virtual void solve ();
d97 2
a98 9
         // Override from class OptSolver.

      void setUpClpOsi ();
         //
         // Sets up CLP / OSI.

      void shutDownClpOsi ();
         //
         // Shuts down CLP / OSI.
d105 5
d114 12
@


1.2
log
@Continued implementation of opt with COIN.
@
text
@d19 1
a19 1
#include <OsiSolver.h>
d38 1
a38 2
//       OsiSolver
//          ClpOsiSolver
d41 1
a41 1
class WitClpOsiSolver: public WitOsiSolver
d67 39
a131 4

      virtual OsiSolverInterface * myOsiSI ();
         //
         // Override from class OsiSolver.
@


1.1
log
@Continued implementation of opt with COIN.
@
text
@d72 8
@

