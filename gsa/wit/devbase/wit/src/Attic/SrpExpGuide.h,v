head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2005.12.27.19.43.40;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2005.12.23.23.07.43;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.23.21.12.02;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.23.16.07.11;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.20.22.48.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.20.19.04.55;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.20.17.09.36;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpExpGuideH
#define SrpExpGuideH

//------------------------------------------------------------------------------
// Header file: "SrpExpGuide.h"
//
// Contains the declaration of the following class:
//
//    SrpExpGuide
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class SrpExpGuide
//
// "Shared-Resource Pegging Explosion Guide"
// Responsible for guiding serialized explosions in SRP.
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpExpGuide
//------------------------------------------------------------------------------

class WitSrpExpGuide: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpExpGuide (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpExpGuide ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints this SrpExpGuide.

      void getFillMethPairs (
            WitPart * thePart,
            WitPeriod thePer,
            double    theReqVol,
            double    prevVol,
            WitPairStack <WitSrpFillMeth, double> & theFillMethPairs);
         //
         // Makes theFillMethPairs into an ordered list of
         // pairs (theSrpFillMeth, fillVol), such that theSrpFillMeth indicates
         // how fillVol units of requirement on thePart in thePer are to be
         // filled after prevVol units of requirement have been filled,
         // and such that the sum of the fillVols == theReqVol.

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void buildUp ();
         //
         // Builds up this explosion guide.

      double compReqVol (WitPart * thePart, WitPeriod thePer);
         //
         // Computes and returns the total requirement volume on thePart in
         // thePer.

      void findFillMeths (
            WitPart * thePart,
            WitPeriod thePer,
            double    theReqVol);
         //
         // Determines the serialized fill methods for theReqVol units of
         // requirement on thePart in thePer.

      void netWithSupply (
            WitPart * thePart,
            WitPeriod thePer,
            double &  netReqVol);
         //
         // Nets netReqVol with the supply of thePart in thePer.
         // Records the netting in myFillMethPairs_.

      void expToProd (
            WitPart * thePart,
            WitPeriod expPer,
            double &  netReqVol);
         //
         // Explodes netReqVol to the peoduction of thePart in expPer.
         // Records the exploding in myFillMethPairs_.

      noCopyCtorAssign (WitSrpExpGuide);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitPart, WitPairStack <WitSrpFillMeth, double> >
            myFillMethPairs_;
         //
         // myFillMethPairs_.myElemAt (thePart, thePer) is an ordered list of
         // pairs (theSrpFillMeth, fillVol), such that theSrpFillMeth indicates
         // how fillVol units of requirement on thePart in thePer are to be
         // filled after the sum of all the preceeding requirements in the list
         // have been filled.
   };

#endif
@


1.6
log
@[shared-resource pegging]
@
text
@@


1.5
log
@[shared-resource pegging]
@
text
@d64 1
a64 1
            double    prevFillVol,
d70 1
a70 1
         // filled after prevFillVol units of requirement have been filled,
@


1.4
log
@[shared-resource pegging]
@
text
@d60 13
d102 1
a102 1
         // Records the netting in serFillMeths_.
d110 1
a110 1
         // Records the exploding in serFillMeths_.
d119 1
a119 1
            serFillMeths_;
d121 5
a125 5
         // serFillMeths_.myElemAt (thePart, thePer) is an ordered list of pairs
         // (theSrpFillMeth, fillVol), such that theSrpFillMeth indicates how
         // fillVol units of requirement on thePart in thePer are to be filled
         // after the sum of all the preceeding requirements in the list have
         // been filled.
@


1.3
log
@[shared-resource pegging]
@
text
@d41 1
a41 1
      // Public member functions.
d44 1
a44 3
      static WitSrpExpGuide * builtExpGuide (WitProblem * theProblem);
         //
         // Constructs a new SrpExpGuide, builds up the guide, and returns it.
a62 6
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpExpGuide (WitProblem *);

      //------------------------------------------------------------------------
d66 1
a66 1
      void build ();
@


1.2
log
@[shared-resource pegging]
@
text
@d41 8
a57 4
      static WitSrpExpGuide * newInst (WitProblem * theProblem);
         //
         // Constructs a new SrpExpGuide, builds up the guide, and returns it.

d74 1
a74 1
      void buildSpecs ();
d76 1
a76 1
         // Builds the explosion guide specifications.
@


1.1
log
@[shared-resource pegging]
@
text
@d70 1
a70 1
      void buildGuide ();
d72 1
a72 1
         // Builds the explosion guide.
@

