head	1.12;
access;
symbols
	EndRw-branch:1.11.0.8
	Root-of-EndRw:1.11
	rwToStl:1.11.0.6
	latest_sce_3_10_20010924:1.11.0.4
	sce_3_10_20010924:1.11
	latest_sce_3_00_20010601:1.11.0.2
	sce_3_00_20010601:1.11
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2003.03.03.23.26.51;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2001.05.10.17.58.18;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.08.21.35.44;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.30.21.29.41;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.27.00.24.38;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.22.16.18.26;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.05.19.05.30;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.42;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.24;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.14.20.27.31;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.11;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.11
log
@Removed class MePrinter.
@
text
@@


1.10
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@a0 85
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MePtrH
#define MePtrH

//------------------------------------------------------------------------------
// Header file: "MePtr.h"
//
// Contains the declaration of class MePrinter.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class MePrinter
//
// Responsible for debug printing of the multi-exec subsystem.
// Note: Some of the functions in this class are CPU time inefficient.
//------------------------------------------------------------------------------

class WitMePrinter: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMePrinter (WitMeMgr * theMeMgr);
         //
         // myMeMgr_ <-- theMeMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMePrinter ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the client multi-exec subsystem.

      void print (WitMeAltPt * theMeAltPt);
         // 
         // Prints theMeAltPt, which should be contained in the client
         // multi-exec subsystem.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitBoolean findExecMeCoordPt (
            WitBopEntry *    theBopEnt, 
            WitPeriod        execPer,
            WitMeCoordPt * & theMeCoordPt);
         //
         // If the client multi-exec subsystem contains a MeCoordPt for
         // theBopEnt in execution period execPer, this function returns TRUE
         // and sets theMeCoordPt to it; otherwise returns FALSE.

      noCopyCtorAssign (WitMePrinter);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMeMgr * const myMeMgr_;
         //
         // The MeMgr for the client multi-exec subsystem.
   };

#endif
@


1.9
log
@Fixed uninitialized memory bugs.
Refactoring for selection splitting.
@
text
@a18 1
#include <ObjStack.h>
a49 4
      void printSelMeAltPt (WitBopEntry * theBopEnt, WitMeDir * theMeDir);
         //
         // Does printing for MeMgr::selMeAltPt.

d54 4
a57 7
      void preprintAlts ();
         //
         // Prepares to print the MeSelPts that are to be altered.

      void printAlts ();
         //
         // Prints the MeSelPts that were altered.
a64 13
      void printMeAltPts ();
         //
         // Prints the MeAltPts of the client multi-exec subsystem.

      void printMeSelPts ();
         //
         // Prints the MeSelPts of the client multi-exec subsystem.

      void listIfPending (WitMeSelPt * theMeSelPt);
         //
         // Adds theMeSelPt to toAltMeSelPts_, if its selection is to be 
         // altered.

a73 14
      WitBoolean findNextMeAltPt (
            WitMeCoordPt * theMeCoordPt,
            int &          theIdx, 
            WitMeAltPt * & theMeAltPt);
         //
         // Sets theIdx to its next value for theMeCoordPt, and sets theMeAltPt
         // to the indexed MeAltPt, if any. 
         // Returns TRUE, iff another MeAltPt was found.

      void print (WitMeSelPt * theMeSelPt);
         // 
         // Prints theMeSelPt, which should be contained in the client
         // multi-exec subsystem.

a82 4

      WitObjStack (WitMeSelPt) toAltMeSelPts_;
         //
         // A list of all the MeSelPts whose selection is to be altered. 
@


1.8
log
@Further implementation of coarse selection splitting.
@
text
@a58 5
      void print (WitMeAltPt * theMeAltPt);
         // 
         // Prints theMeAltPt, which should be owned within the client
         // multi-exec subsystem.

@


1.7
log
@Further development of coarse selection splitting.
@
text
@a113 9
      void findCoords (
            WitMeCoordPt *  theMeCoordPt, 
            WitBopEntry * & theBopEnt, 
            WitPeriod     & expPer);
         //
         // Sets theBopEnt and expPer to the values that match theMeCoordPt.
         // Issues an error, if theMeCoordPt is not contained in the client
         // multi-exec subsystem.

@


1.6
log
@Some minor modifications.
@
text
@d19 1
a19 1
#include <Stack.h>
@


1.5
log
@Refactoring for selection splitting.
@
text
@d19 1
a19 1
#include <DynStack.h>
d133 1
a133 1
      WitObjDynStack (WitMeSelPt) toAltMeSelPts_;
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d123 1
a123 3
      copyCtorAndAssignment (WitMePrinter);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Outer API: Merged all no-longer-documented functions into one section.
Outer API: Moved build-ahead by demand functions into the no-longer-documented
   section.
Simplified the rules for two-way multiple execution periods.
@
text
@d135 1
a135 1
      WitDynStack (WitMeSelPt) toAltMeSelPts_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@a71 4
      void printMeDirMgr ();
         //
         // Prints the client MeDirMgr.

@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
