head	1.9;
access;
symbols
	EndRw-branch:1.8.0.10
	Root-of-EndRw:1.8
	rwToStl:1.8.0.8
	latest_sce_3_10_20010924:1.8.0.6
	sce_3_10_20010924:1.8
	latest_sce_3_00_20010601:1.8.0.4
	sce_3_00_20010601:1.8
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2003.03.03.23.26.45;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2000.12.05.19.05.28;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.04.22.07.35;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.22.23.11.39;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.21.20.03.21;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.18.00.15.58;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.20;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.39;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.8
log
@Some minor modifications.
@
text
@@


1.7
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@a0 354
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef DynStackH
#define DynStackH

//------------------------------------------------------------------------------
// Header file: "DynStack.h"
//
// Contains the declaration of the following classes:
//
//    DynStack
//    ObjDynStack (ObjType)
//    PairDynStack (ObjType, ValType)
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class DynStack
//
// "Dynamic Stack".
// This base class defines the abstract structure and behavior of a dynamic
// stack. The data contained by DynStacks is defined in the derived classes.
//
// Class Hierarchy:
//
// DynStack
//    ObjDynStack (ObjType)
//    PairDynStack (ObjType, ValType)
//------------------------------------------------------------------------------

class WitDynStack: public WitUtil
   {
      //------------------------------------------------------------------------
      // Friends.
      //------------------------------------------------------------------------

      friend WitDynItr;

   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      inline WitBoolean isEmpty () const
         {
         return (firstDynLink_ == NULL);
         }

      void clear ();
         //
         // Removes all of the elements from this DynStack.

      int nElements () const;
         //
         // Computes (by traversal) and returns the # of elements in this 
         // DynStack.

      void reverse ();
         //
         // Reverses the order of the elements in this DynStack.

      WitProblem * myProblem () const;
         //
         // Returns the Problem associated with this DynStack.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDynStack (WitDynLinkMgr * theDynLinkMgr);
         //
         // myDynLinkMgr_ <-- theDynLinkMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDynStack ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      // The names end in "Abs" (abstract) to distinguish them from similar 
      // functions in the derived classes.
      //------------------------------------------------------------------------

      void pushAbs ();
         //
         // Pushes an empty element onto the top of this DynStack.

      WitBoolean popAbs ();
         //
         // If this DynStack is non-Empty, the first element it contains is
         // removed from it.
         // Returns TRUE, iff this DynStack is non-empty.

      void takeContentsAbs (WitDynStack & theDynStack);
         //
         // Clears this DynStack and transfers the contents of theStack out
         // of theStack and into this DynStack.

      void reverseCopyOfAbs (const WitDynStack & theDynStack);
         //
         // Makes this DynStack a reverse copy of theStack.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitDynLink *, firstDynLink)

   private:

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDynStack);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDynLinkMgr * const myDynLinkMgr_;
         //
         // The DynLinkMgr to be used by this DynStack_.

      WitDynLink * firstDynLink_;
         //
         // The first DynLink in this DynStack.
   };

//------------------------------------------------------------------------------
// Generic class ObjDynStack (ObjType)
//
// Dynamic stack of individual objects.
//
// Class Hierarchy:
//
// DynStack
//    ObjDynStack (ObjType)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitObjDynStackdeclare(ObjType)                                         \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitList (ObjType);                                                       \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitObjDynStack (ObjType): public WitDynStack                             \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitObjDynStack (ObjType) (WitProblem * theProblem);                      \
         /*                                                                  */\
         /* DynStack <<< theProblem->myObjDynLinkMgr ()                      */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitObjDynStack (ObjType) ();                                            \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void push (ObjType * theObject);                                         \
         /*                                                                  */\
         /* Pushes theObject onto the top of this ObjDynStack.               */\
                                                                               \
      WitBoolean pop (ObjType * & theObject);                                  \
         /*                                                                  */\
         /* See popAbs.                                                      */\
         /* In the non-empty case, theObject is set to the popped object.    */\
                                                                               \
      inline void takeContents (WitObjDynStack (ObjType) & theStack)           \
         {                                                                     \
         takeContentsAbs (theStack);                                           \
         }                                                                     \
                                                                               \
      ObjType * firstObject () const;                                          \
         /*                                                                  */\
         /* Returns the first object in this ObjDynStack.                    */\
         /* Not to be called if this ObjDynStack is empty.                   */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other private member functions.                                     */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitObjDynStack (ObjType));                             \
                                                                               \
      inline WitObjDynLink * firstObjDynLink () const                          \
         {                                                                     \
         return (WitObjDynLink *) firstDynLink ();                             \
         }                                                                     \
   };                                                                          \

//------------------------------------------------------------------------------
// Generic global function
// reverseCopyInto (ObjDynStack (ObjType) &, const List (ObjType) &)
// 
// Makes theObjDynStack a reverse copy of theList.
//------------------------------------------------------------------------------

#define reverseCopyInto_ObjDynStackdeclare(ObjType)                            \
                                                                               \
void reverseCopyInto (                                                         \
      WitObjDynStack (ObjType) & theObjDynStack,                               \
      const WitList (ObjType) &  theList);                                     \

//------------------------------------------------------------------------------
// Generic class PairDynStack (ObjType, ValType)
//
// Dynamic stack of (object, value)s.
//
// Class Hierarchy:
//
// DynStack
//    PairDynStack (ObjType, ValType)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitPairDynStackdeclare2(ObjType, ValType)                              \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairDynLink (ValType);                                                \
class WitPairDynLinkMgr (ValType);                                             \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairDynStack (ObjType, ValType): public WitDynStack                   \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitPairDynStack (ObjType, ValType) (WitProblem * theProblem);            \
         /*                                                                  */\
         /* DynStack <<< the appropriate DynLinkMgr from theProblem.         */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitPairDynStack (ObjType, ValType) ();                                  \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void push (ObjType * theObject, ValType theVal);                         \
         /*                                                                  */\
         /* Pushes (theObject, theVal) onto the top of this PairDynStack.    */\
                                                                               \
      WitBoolean pop (ObjType * & theObject, ValType & theVal);                \
         /*                                                                  */\
         /* See popAbs.                                                      */\
         /* In the non-empty case, (theObject, theVal) is set to the popped  */\
         /* (object, value).                                                 */\
                                                                               \
      inline void takeContents (                                               \
            WitPairDynStack (ObjType, ValType) & thePairStack)                 \
         {                                                                     \
         takeContentsAbs (thePairStack);                                       \
         }                                                                     \
                                                                               \
      inline void reverseCopyOf (const WitPairDynStack (ObjType, ValType) &    \
            thePairDynStack)                                                   \
         {                                                                     \
         reverseCopyOfAbs (thePairDynStack);                                   \
         }                                                                     \
                                                                               \
      ObjType * firstObject () const;                                          \
         /*                                                                  */\
         /* Returns the first object in this PairDynStack.                   */\
         /* Not to be called if this PairDynStack is empty.                  */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other private member functions.                                     */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPairDynStack (ObjType, ValType));                   \
                                                                               \
      inline WitPairDynLink (ValType) * firstPairDynLink () const              \
         {                                                                     \
         return (WitPairDynLink (ValType) *) firstDynLink ();                  \
         }                                                                     \
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes and functions
// declared in this file.
//------------------------------------------------------------------------------

typedef WitReqPt * WitReqPtPtr;

declare  (WitObjDynStack,              WitPart)
declare  (WitObjDynStack,              WitOperation)
declare  (WitObjDynStack,              WitSubEntry)
declare  (WitObjDynStack,              WitBopEntry)
declare  (WitObjDynStack,              WitConsEntry)
declare  (WitObjDynStack,              WitAltPt)
declare  (WitObjDynStack,              WitReqPt)
declare  (WitObjDynStack,              WitReqPtPtr)
declare  (WitObjDynStack,              WitMeSelPt)

declare  (reverseCopyInto_ObjDynStack, WitPart)
declare  (reverseCopyInto_ObjDynStack, WitOperation)
declare  (reverseCopyInto_ObjDynStack, WitSubEntry)

declare2 (WitPairDynStack,             WitPart,      WitPeriod)
declare2 (WitPairDynStack,             WitDemand,    WitPeriod)
declare2 (WitPairDynStack,             WitOperation, WitPeriod)
declare2 (WitPairDynStack,             WitBopEntry,  WitPeriod)
declare2 (WitPairDynStack,             WitConsEntry, WitPeriod)

declare2 (WitPairDynStack,             WitConsEntry, double)

#endif
@


1.6
log
@Refactoring for selection splitting.
@
text
@d71 4
a95 6
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitDynLink *, firstDynLink)

      //------------------------------------------------------------------------
d111 1
a111 1
      void takeContentsAbs (WitDynStack & theStack);
d116 10
d294 2
a295 1
      inline void takeContents (WitPairDynStack (ObjType, ValType) & theStack) \
d297 7
a303 1
         takeContentsAbs (theStack);                                           \
@


1.5
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@a84 4
      WitDynStack (const WitDynStack &);
         //
         // Copy ctor.

d124 1
a124 4
      WitDynStack & operator = (const WitDynStack &);
         //
         // Not Implemented.
         // Prevents unintentional assignment.
a173 5
      WitObjDynStack (ObjType) (                                               \
            const WitObjDynStack (ObjType) & theObjDynStack);                  \
         /*                                                                  */\
         /* DynStack <<< theDynStack.                                        */\
                                                                               \
d209 1
a209 4
      WitObjDynStack (ObjType) & operator = (const WitObjDynStack (ObjType) &);\
         /*                                                                  */\
         /* Not Implemented.                                                 */\
         /* Prevents unintentional assignment.                               */\
a265 5
      WitPairDynStack (ObjType, ValType) (                                     \
            const WitPairDynStack (ObjType, ValType) & theDynStack);           \
         /*                                                                  */\
         /* DynStack <<< theDynStack.                                        */\
                                                                               \
d302 1
a302 5
      WitPairDynStack (ObjType, ValType) & operator = (                        \
            const WitPairDynStack (ObjType, ValType) &);                       \
         /*                                                                  */\
         /* Not Implemented.                                                 */\
         /* Prevents unintentional assignment.                               */\
d336 2
@


1.4
log
@Began implementation of stock bounds.
Changed the default value of the stockRealloc attribute to FALSE.
@
text
@d18 3
a20 2
//    AbsDynStack
//    DynStack (TheType)
d26 1
a26 1
// Class AbsDynStack
d28 9
a36 3
// "Abstract Dynamic Stack".
// Base class for DynStack (TheType).
// Implements all aspects of DynStack (TheType), but using TypelessPtrs.
d39 1
a39 1
class WitAbsDynStack: public WitUtil
d41 6
d55 1
a55 1
         return (firstLink_ == NULL);
d60 1
a60 1
         // Removes all of the elements from this AbsDynStack.
d65 1
a65 1
         // AbsDynStack.
d69 1
a69 1
         // Reverses the order of the elements in this AbsDynStack.
d81 1
a81 1
      WitAbsDynStack (WitProblem * theProblem);
d83 1
a83 1
         // myLinkMgr_ <-- theProblem ()->myDynLinkMgr ().
d85 1
a85 1
      WitAbsDynStack (const WitAbsDynStack &);
d93 7
a99 1
      ~WitAbsDynStack ();
d103 2
d107 1
a107 5
      void reverseCopyOf (const WitAbsList & theAbsList);
         //
         // Makes this AbsDynStack a reverse copy of theAbsList.

      void push (WitTypelessPtr theObject);
d109 1
a109 1
         // Pushes theObject onto the top of this AbsDynStack.
d111 1
a111 1
      WitBoolean pop (WitTypelessPtr & theObject);
d113 3
a115 3
         // If this AbsDynStack is non-Empty, the first object it contains is
         // removed from it and theObject is set to the object.
         // Returns TRUE, iff this AbsDynStack is non-empty.
d117 1
a117 1
      WitTypelessPtr first ();
d119 2
a120 2
         // Returns the first element of this AbsDynStack, if any.
         // Not to be called if this AbsDynStack is empty.
d128 1
a128 1
      WitAbsDynStack & operator = (const WitAbsDynStack &);
d137 1
a137 1
      WitDynLinkMgr * const myLinkMgr_;
d139 1
a139 1
         // The DynLinkMgr to be used by this AbsDynStack_.
d141 1
a141 1
      WitDynLink * firstLink_;
d143 1
a143 1
         // The first DynLink in this AbsDynStack.
d147 3
a149 1
// Generic Class DynStack (TheType)
d151 1
a151 6
// "Dynamic Stack"
// This class implements a stack of instances of TheType, stored by pointer.
// Implementation is done in a way that avoids repeated construction and
// destruction of link objects in situations where the stack is frequently
// changing its size.
// This generic class is implemented thru the class AbsDynStack.
d153 2
a154 2
// Note that all implementation of this generic class is inline. Thus there is a
// declaration macro, but no implementation macro.
d161 1
a161 1
#define WitDynStackdeclare(TheType)                                            \
d165 1
a165 1
class WitList (TheType);                                                       \
d169 1
a169 1
class WitDynStack (TheType): public WitAbsDynStack                             \
d177 29
a205 2
      inline WitDynStack (TheType) (WitProblem * theProblem):                  \
            WitAbsDynStack (theProblem)                                        \
d207 1
d210 17
a226 4
      inline WitDynStack (TheType) (const WitDynStack (TheType) & theStack):   \
               WitAbsDynStack (theStack)                                       \
            /*                                                               */\
            /* Copy ctor.                                                    */\
d228 1
d230 55
d290 1
a290 3
      inline ~WitDynStack (TheType) ()                                         \
         {                                                                     \
         }                                                                     \
d296 3
a298 4
      inline void reverseCopyOf (const WitList (TheType) & theList)            \
         {                                                                     \
         WitAbsDynStack::reverseCopyOf ((const WitAbsList &) theList);         \
         }                                                                     \
d300 5
a304 4
      inline void push (TheType * theObject)                                   \
         {                                                                     \
         WitAbsDynStack::push ((WitTypelessPtr) theObject);                    \
         }                                                                     \
d306 1
a306 1
      inline WitBoolean pop (TheType * & theObject)                            \
d308 1
a308 1
         return WitAbsDynStack::pop ((WitTypelessPtr &) theObject);            \
d311 4
a314 4
      inline TheType * first ()                                                \
         {                                                                     \
         return (TheType *) WitAbsDynStack::first ();                          \
         }                                                                     \
d319 1
a319 1
      /* Private member functions.                                           */\
d322 2
a323 1
      WitDynStack (TheType) & operator = (const WitDynStack (TheType) &);      \
d327 5
d335 2
a336 1
// Declarations of all specific cases of generic class DynStack.
d341 19
a359 9
declare (WitDynStack, WitPart)
declare (WitDynStack, WitOperation)
declare (WitDynStack, WitSubEntry)
declare (WitDynStack, WitBopEntry)
declare (WitDynStack, WitConsEntry)
declare (WitDynStack, WitAltPt)
declare (WitDynStack, WitReqPt)
declare (WitDynStack, WitReqPtPtr)
declare (WitDynStack, WitMeSelPt)
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d86 4
d151 4
d187 5
d226 1
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d22 1
a22 1
#include <typedefs.h>
d32 1
a32 1
class WitAbsDynStack
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
