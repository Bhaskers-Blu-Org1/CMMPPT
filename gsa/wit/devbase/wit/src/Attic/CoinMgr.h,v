head	1.31;
access;
symbols;
locks; strict;
comment	@ * @;


1.31
date	2011.08.25.23.26.59;	author rjw;	state dead;
branches;
next	1.30;

1.30
date	2011.02.09.19.13.21;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2010.12.10.00.40.25;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.12.07.00.29.45;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2010.11.17.20.20.52;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2010.11.12.22.03.04;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2010.11.04.20.32.37;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2010.08.27.21.06.49;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2010.08.24.19.36.20;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2010.08.20.19.42.21;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2010.08.19.18.00.11;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2010.08.18.20.58.23;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.28.20.51.43;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.05.21.23.46.13;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.21.15.28.00;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.05.19.21.09.04;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.05.19.16.07.35;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.05.12.18.38.06;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.05.07.23.18.59;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.03.11.22.36.23;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.03.09.20.12.24;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.02.19.20.09.14;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.16.20.47.03;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.12.22.33.09;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.02.08.21.39.43;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.08.20.11.38;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.05.20.41.52;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.15.22.24.39;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.14.22.30.16;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.13.21.04.27;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.13.19.52.08;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Removed COIN from WIT.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef CoinMgrH
#define CoinMgrH

//------------------------------------------------------------------------------
// Header file: "CoinMgr.h"
//
// Contains the declaration of class CoinMgr.
//    The declaration compiled only if COIN_EMBEDDED is #defined.
//------------------------------------------------------------------------------

#ifdef COIN_EMBEDDED

#include <SolverMgr.h>

#include <OsiClpSolverInterface.hpp>
#include <CbcModel.hpp>

//------------------------------------------------------------------------------
// class CoinMgr
//
// Responsible for all interactions with the solvers from COIN, specifically,
// CLP, OSI, and SBB.
//
// Class hierarchy:
//
// ProbAssoc
//    SolverMgr
//       CoinMgr
//------------------------------------------------------------------------------

class WitCoinMgr: public WitSolverMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCoinMgr (WitOptProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCoinMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void solveOptProb ();
         //
         // Override from class SolverMgr.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void setUpCoin ();
         //
         // Sets up the COIN objects.

      void setUpMH ();
         //
         // Sets up the COIN message handler.

      void shutDownCoin ();
         //
         // Shuts down the COIN objects.

      void shutDownCMH (CoinMessageHandler * & theCMH);
         //
         // Shuts down theCMH.

      void loadFixedProb ();
         //
         // Loads the fixed parts of the optimization problem into myOsiSI ().

      void markIntVars ();
         //
         // Marks the integer variables as such.

      void loadFlexibleProb ();
         //
         // Loads the flexible parts of the optimization problem into
         // myOsiSI ().

      void loadConBounds ();
         //
         // Loads the bounds on each constraint into myOsiSI ().

      void loadVarBounds ();
         //
         // Loads the bounds on each variable into myOsiSI ().

      void loadObjCoeffs ();
         //
         // Loads the objective coefficient on each variable into myOsiSI ().

      void writeMps ();
         //
         // Writes an MPS file of the opt problem entered into myOsiSI (), if
         // appropriate.

      void solveMip ();
         //
         // Makes appropriate calls to COIN to solve the optimization problem as
         // a MIP.

      void solveLexMip ();
         //
         // Makes appropriate calls to COIN to solve the optimization problem as
         // a lexicographic MIP.

      void solveLexObjElemMip (
            WitOptVar *          theOptVar,
            OsiSolverInterface * ongoingOsiSI);
         //
         // Solves the MIP for the lexicographic objective element represented
         // by theOptVar.
         // Revises ongoingOsiSI with the result.

      void renewCbcModel (OsiSolverInterface * ongoingOsiSI);
         //
         // Replaces myCbcModel_ with a new CbcModel for ongoingOsiSI.

      void solveLexLp ();
         //
         // Makes appropriate calls to CLP to solve the optimization problem as 
         // a lexicographic LP.

      void lockLexObjElemVal (WitOptVar * theOptVar);
         //
         // Assuming theOptVar represents a lexicographic objective element that
         // has just been maximized, this function locks the variable at its
         // maximum value minus a tolerance.

      void solveLp ();
         //
         // Makes appropriate calls to CLP to solve the optimization problem
         // an LP without a previously optimized basis.

      void solveLpAsUsual (bool useDual);
         //
         // Makes appropriate calls to CLP to solve the optimization problem as
         // an LP in the usual way.
         // Dual methods will be used iff useDual is true.

      void invokeSimplex (ClpSimplex * theClpSimplex, bool useDual);
         //
         // Makes appropriate calls to CLP for the main simplex invocation.
         // The dual simplex method will be used iff useDual is true.

      void cleanUpSimplex ();
         //
         // Makes appropriate calls to CLP to do the clean-up simplex after
         // post-solve.

      void loadInitSoln ();
         //
         // Loads the initial primal solution from myOptProblem () into
         // myOsiSI (), as needed.

      void reSolveLp ();
         //
         // Makes appropriate calls to COIN to solve the optimization problem
         // from the current basis, which came from a previous solve.

      void checkLpSolnStatus ();
         //
         // Checks the status of the LP solution.
         // Issues an error, if it is anything other than optimal.

      void checkMipSolnStatus ();
         //
         // Checks the status of the MIP solution.
         // Issues an error, if it is anything other than optimal.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptProblem ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptProblem ().

      OsiSolverInterface * myOsiSI ();
         //
         // Returns the OsiSolverInterface currently being used by this
         // CoinMgr.

      ClpSimplex * myClpSimplex ();
         //
         // Returns the ClpSimplex owned by myOsiSI ().

      inline bool multiObjMode ();
         //
         // Returns true, iff myOptProblem is a multiple objectives problem.

      accessNonNull (CbcModel *, myCbcModel)

      noCopyCtorAssign (WitCoinMgr);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      OsiClpSolverInterface * lpModeOsiClpSI_;
         //
         // The OsiSolverInterface owned by this CoinMgr in LP mode;
         // NULL in MIP mode.

      CbcModel * myCbcModel_;
         //
         // The CbcModel owned by this CoinMgr in MIP mode;
         // NULL in LP mode.
   };

#endif // COIN_EMBEDDED

#endif
@


1.30
log
@CPLEX
@
text
@@


1.29
log
@CPLEX
@
text
@a17 2
//
// It is intended that this file only be included by CoinMgr.C.
d20 2
a23 2
#ifdef COIN_EMBEDDED

@


1.28
log
@CPLEX
@
text
@a208 4
      inline bool mipMode ();
         //
         // Returns true, iff myOptProblem is a MIP.

@


1.27
log
@CPLEX
@
text
@d145 1
a145 1
      void lockLexObjElemVal (int theColIdx);
d147 3
a149 4
         // Assuming theColIdx is the column index of an OptVar that represents
         // a lexicographic objective element that has just been maximized,
         // this function locks the variable at its maximum value minus a
         // tolerance.
@


1.26
log
@CPLEX
@
text
@d62 1
a62 1
      virtual void solve ();
@


1.25
log
@CPLEX
@
text
@d152 1
a152 1
      void solveLpUnacc ();
d154 2
a155 2
         // Makes appropriate calls to CLP to solve the optimization problem as
         // an LP in unaccelerated mode.
d178 1
a178 1
      void solveLpAcc ();
d180 2
a181 2
         // Makes appropriate calls to COIN to solve the optimization problem as
         // an LP in accelerated mode.
@


1.24
log
@CPLEX
@
text
@d80 8
a200 8
      void shutDownCoin ();
         //
         // Shuts down the COIN objects.

      void shutDownCMH (CoinMessageHandler * & theCMH);
         //
         // Shuts down theCMH.

a234 4

      bool coinIsSetUp_;
         //
         // True, iff the COIN objects are currently set up.
@


1.23
log
@CPLEX
@
text
@d122 1
a122 2
            OsiSolverInterface * ongoingOsiSI,
            bool                 isFirstLexElem);
a126 2
         // isFirstLexElem is to be true, iff theOptVar represents the first lex
         // objective element.
a184 16
      void checkLexLpSolnStatus (WitOptVar * theOptVar, bool isFirstLexElem);
         //
         // Checks the status of the lex LP solution
         // theOptVar represents the lex objective element being maximized.
         // Issues an error, if it is anything other than optimal.
         // isFirstLexElem is to be true, iff theOptVar represents the lex
         // objective element.

      void checkLexMipSolnStatus (WitOptVar * theOptVar, bool isFirstLexElem);
         //
         // Checks the status of the lex MIP solution
         // theOptVar represents the lex objective element being maximized.
         // Issues an error, if it is anything other than optimal.
         // isFirstLexElem is to be true, iff theOptVar represents the lex
         // objective element.

@


1.22
log
@CPLEX
@
text
@a28 2
#define CbcModyl CbcModel

d131 1
a131 1
      void renewCbcModyl (OsiSolverInterface * ongoingOsiSI);
d133 1
a133 1
         // Replaces myCbcModyl_ with a new CbcModyl for ongoingOsiSI.
d237 1
a237 1
      accessNonNull (CbcModyl *, myCbcModyl)
d250 1
a250 1
      CbcModyl * myCbcModyl_;
d252 1
a252 1
         // The CbcModyl owned by this CoinMgr in MIP mode;
@


1.21
log
@CPLEX
@
text
@d82 1
a82 1
      void passFixedProb ();
d84 1
a84 1
         // Passes the fixed parts of the optimization problem to myOsiSI ().
d90 1
a90 1
      void passFlexibleProb ();
d92 2
a93 1
         // Passes the flexible parts of the optimization problem to myOsiSI ().
d95 1
a95 1
      void passConBounds ();
d97 1
a97 1
         // Passes the bounds on each constraint to myOsiSI ().
d99 1
a99 1
      void passVarBounds ();
d101 1
a101 1
         // Passes the bounds on each variable to myOsiSI ().
d103 1
a103 1
      void passObjCoeffs ();
d105 1
a105 1
         // Passes the objective coefficient on each variable to myOsiSI ().
d170 1
a170 1
      void passInitSoln ();
d172 2
a173 2
         // Copies the initial primal optimization solution from myOptProblem ()
         // into myOsiSI (), as needed.
@


1.20
log
@CPLEX
@
text
@d29 2
d52 1
a52 1
      WitCoinMgr (WitOptModel *);
d84 1
a84 1
         // Passes the fixed parts of the optimization model to myOsiSI ().
d92 1
a92 1
         // Passes the flexible parts of the optimization model to myOsiSI ().
d108 1
a108 1
         // Writes an MPS file of the model entered into myOsiSI (), if
d113 2
a114 2
         // Makes appropriate calls to COIN to solve the optimization model as a
         // MIP.
d118 2
a119 2
         // Makes appropriate calls to COIN to solve the optimization model as a
         // lexicographic MIP.
d132 1
a132 1
      void renewCbcModel (OsiSolverInterface * ongoingOsiSI);
d134 1
a134 1
         // Replaces myCbcModel_ with a new CbcModel for ongoingOsiSI.
d138 2
a139 2
         // Makes appropriate calls to CLP to solve the optimization model as a
         // lexicographic LP.
d150 1
a150 1
         // Makes appropriate calls to CLP to solve the optimization model as
d155 1
a155 1
         // Makes appropriate calls to CLP to solve the optimization model as
d171 1
a171 1
         // Copies the initial primal optimization solution from myOptModel () 
d176 1
a176 1
         // Makes appropriate calls to COIN to solve the optimization model as
d207 1
a207 1
         // Stores the primal solution in myOptModel ().
d211 1
a211 1
         // Stores the dual solution in myOptModel ().
d232 1
a232 1
         // Returns true, iff myOptModel is a MIP.
d236 1
a236 1
         // Returns true, iff myOptModel is a multiple objectives model.
d238 1
a238 1
      accessNonNull (CbcModel *, myCbcModel)
d251 1
a251 1
      CbcModel * myCbcModel_;
d253 1
a253 1
         // The CbcModel owned by this CoinMgr in MIP mode;
@


1.19
log
@CPLEX
@
text
@d151 1
a151 1
      void solveLpAsUusual (bool useDual);
@


1.18
log
@CPLEX
@
text
@d17 1
a17 1
//    The declaration compiled only if COIN_EMBEDDED == 1.
d24 1
a24 1
#if COIN_EMBEDDED == 1
d259 1
a259 1
#endif // COIN_EMBEDDED == 1
@


1.17
log
@CPLEX
@
text
@d17 3
d24 1
a24 3
//------------------------------------------------------------------------------
// Forward declarations of COIN classes.
//------------------------------------------------------------------------------
d26 2
a27 5
class OsiClpSolverInterface;
class CbcModel;
class OsiSolverInterface;
class ClpSimplex;
class CoinMessageHandler;
d259 2
@


1.16
log
@Preparing for embedded CPLEX.
@
text
@a48 8
      // Static public member functions.
      //------------------------------------------------------------------------

      static bool coinEmbedded ();
         //
         // Returns true, iff COIN is embedded into this build of WIT.

      //------------------------------------------------------------------------
@


1.15
log
@Preparing for embedded CPLEX.
@
text
@d49 8
@


1.14
log
@Revising the build procedure.
@
text
@a20 2
#if COIN_EMBEDDED

a260 2
#endif // COIN_EMBEDDED

@


1.13
log
@Revising the build procedure.
@
text
@d21 1
a21 1
#if WIT_EMBEDS_COIN
d263 1
a263 1
#endif // WIT_EMBEDS_COIN
@


1.12
log
@Multi-Obj Mode
@
text
@d21 1
a21 1
#ifdef OPT_IMPLODE
d263 1
a263 1
#endif // OPT_IMPLODE
@


1.11
log
@Multi-Obj Mode
@
text
@d123 1
a123 1
      void solveLexCompMip (
d126 1
a126 1
            bool                 firstLexComp);
d128 1
a128 1
         // Solves the MIP for the lexicographic objective component represented
d131 1
a131 1
         // firstLexComp is to be true, iff theOptVar represents the lex
d143 1
a143 1
      void lockLexObjCompVal (int theColIdx);
d146 1
a146 1
         // a lexicographic objective component that has just been maximized,
d191 1
a191 1
      void checkLexLpSolnStatus (WitOptVar * theOptVar, bool firstLexComp);
d196 1
a196 1
         // firstLexComp is to be true, iff theOptVar represents the lex
d199 1
a199 1
      void checkLexMipSolnStatus (WitOptVar * theOptVar, bool firstLexComp);
d204 1
a204 1
         // firstLexComp is to be true, iff theOptVar represents the lex
@


1.10
log
@Multi-Obj Mode
@
text
@d143 7
d155 7
a161 1
      void invokeSimplex (ClpSimplex * theClpSimplex);
d164 1
@


1.9
log
@Multi-Obj Mode
@
text
@d123 1
a123 6
      void solveFirstLexCompMip (OsiSolverInterface * ongoingOsiSI);
         //
         // Solves the MIP for the first lexicographic objective component.
         // Revises ongoingOsiSI with the result.

      void solveNonFirstLexCompMip (
d125 2
a126 1
            OsiSolverInterface * ongoingOsiSI);
a129 1
         // Does not apply to the first lexicographic objective component.
d131 6
@


1.8
log
@Multi-Obj mode
@
text
@d123 1
a123 1
      void replaceCbcModel (OsiSolverInterface * theOsiSI);
d125 11
a135 2
         // Replaces myCbcModel with a new CbcModel working with a clone of
         // theOsiSI.
d176 1
a176 1
      void checkLexLpSolnStatus (WitOptVar * theOptVar, bool firstLexElem);
d181 1
a181 1
         // firstLexElem is to be true, iff theOptVar represents the lex
d184 1
a184 1
      void checkLexMipSolnStatus (WitOptVar * theOptVar, bool firstLexElem);
d189 1
a189 1
         // firstLexElem is to be true, iff theOptVar represents the lex
@


1.7
log
@Multi-obj mode
@
text
@d113 1
a113 1
      void solveMIP ();
d115 12
a126 2
         // Makes appropriate calls to COIN to solve the optimization model as
         // a MIP.
d175 8
@


1.6
log
@Multi-obj mode
@
text
@d157 1
a157 1
      void checkLexLpSolnStatus (WitOptVar * theOptVar);
d162 2
@


1.5
log
@multi-obj mode
@
text
@d118 5
a127 5
      void solveLexLp ();
         //
         // Makes appropriate calls to CLP to solve the optimization model as a
         // lexicographic LP.

@


1.4
log
@Multi-objective mode
@
text
@d194 1
a194 1
         // Returns true, iff myOptModel is a multi-objective model.
@


1.3
log
@Multi-objective mode
@
text
@d157 6
@


1.2
log
@Multi-objective mode
@
text
@d118 1
a118 1
      void solveLpUnAcc ();
d123 5
@


1.1
log
@Multi-objective mode
@
text
@d181 4
@

