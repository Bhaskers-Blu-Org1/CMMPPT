head	1.5;
access;
symbols
	EndRw-branch:1.4.0.6
	Root-of-EndRw:1.4
	rwToStl:1.4.0.4
	latest_sce_3_10_20010924:1.4.0.2
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.3.0.4
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.2
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.03.03.23.26.46;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2001.07.25.16.08.15;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.41;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.53;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.22;	author wit;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.4
log
@Initial implementation of pegging.
@
text
@@


1.3
log
@Refactoring for selection splitting.
@
text
@a0 123
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

#ifndef HeurAllH
#define HeurAllH

//------------------------------------------------------------------------------
// Header file: "HeurAll.h"
//
// Contains the declaration of class HeurAllocator.
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// class HeurAllocator
//
// This class provides the interface between heuristic allocation and the rest
// of WIT. An instance of this class exists of long as the Problem that owns it
// exists.
//------------------------------------------------------------------------------

class WitHeurAllocator: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurAllocator (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurAllocator ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitBoolean active ()
         {
         return (myPerf_ != NULL);
         }

      accessFunc (const WitAccFlag *, myAccFlag)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void start ();
         //
         // Begins heuristic allocation.

      void startForOpt ();
         //
         // Begins heuristic allocation for optimizing implosion.

      double inc (
            WitDemand * theDemand, 
            WitPeriod   thePer, 
            double      desIncVol,
            WitBoolean  asapMultiExec);
         //
         // Increments the heuristic allocation.
         // Attempts to increase theDemand->shipVol ()[thePer] by as much as is
         // feasible up to desIncVol.
         // Issues an error if heuristic allocation is not active.
         // In two-way multi-exec mode, ASAP Multi-Exec will be used for
         // top-level JIT demand, iff asapMultiExec is TRUE. When not in two-way
         // multi-exec mode, asapMultiExec must be FALSE.

      void reset ();
         //
         // Terminates heuristic allocation.

      void finish ();
         //
         // Completes heuristic allocation.

      void printMeDir (WitBoolean asapMultiExec);
         //
         // Prints a multi-exec direction.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitHeurAllocator);

      void start (WitBoolean forOpt);
         //
         // Begins heuristic allocation.
         // forOpt == TRUE indicates heur allocation is for opt implosion.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitHeurAllPerf * myPerf_;
         //
         // The HeurAllPerf that performs heuristic allocation for this
         // HeurAllocator.

      WitAccFlag * const myAccFlag_;
         //
         // The AccFlag for this HeurAllocator.
   };

#endif
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d102 1
a102 3
      copyCtorAndAssignment (WitHeurAllocator);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
