head	1.7;
access;
symbols
	sce_410_withVa:1.6
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4;
locks; strict;
comment	@ * @;


1.7
date	2005.11.11.23.29.13;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2005.01.28.19.34.27;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.12.15.25.56;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.31.23.18.57;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.31.21.44.53;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.29.19.13.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.29.16.25.32;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipPegMgrH
#define PipPegMgrH

//------------------------------------------------------------------------------
// Header file: "PipPegMgr.h"
//
// Contains the declaration of class PipPegMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PipPartAtt.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class PipPegMgr
//
// Owns and manages the pegging for the Post-Implosion Pegging Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    PipPegMgr
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

class WitPipPegMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipPegMgr (WitPipSeqMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipPegMgr ();

      //------------------------------------------------------------------------
      // Functions called from class PipMgr.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the pegging.

      //------------------------------------------------------------------------
      // get---Trips functions.
      // Each of these functions sets its last arg to the list of pegging
      // triples for theDemand and shipPer, where the peggings are for:
      //
      //    execVol
      //    subVol
      //    supplyVol
      //    sideVol
      //    prodVol
      //    consVol
      //------------------------------------------------------------------------

      void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips);

      void getSubVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitSubTripStack & subVolTrips);

      void getPartPegTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPipPartAtt::Tag theAttTag,
            WitPartTripStack & thePegTrips);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitPipTarg * myTargFor (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Returns the PipTarg for theDemand and shipPer, asserting that it
         // exists.

      accessFunc (WitPipSeqMgr *, mySeqMgr)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void checkRestrictions ();
         //
         // Verifies that the various data restrictions for PIP are met.

      void buildTargs ();
         //
         // Builds the PipTargs corresponding to the DemPers in the shipment
         // sequence.

      noCopyCtorAssign (WitPipPegMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitDemand, WitPipTarg> myTargs_;
         //
         // myTargs_.myPtrAt (theDemand, shipPer) is the PipTarg owned
         // this PipPegMgr for theDemand in shipPer.

      WitPipSeqMgr * const mySeqMgr_;
         //
         // The PipSeqMgr for this PipPegMgr.
   };

#endif
@


1.6
log
@Tie Breaking Prop-Rt.
@
text
@@


1.5
log
@PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class Pip::PegMgr.
d24 1
a24 1
// Class Pip::PegMgr
d31 1
a31 1
//    Pip::PegMgr
d36 1
a36 4
namespace WitPip
{

class PegMgr: public WitProbAssoc
d44 1
a44 1
      PegMgr (SeqMgr *);
d50 1
a50 1
      ~PegMgr ();
d53 1
a53 1
      // Functions called from class SysMgr.
d86 1
a86 1
            PartAtt            thePartAtt,
d93 1
a93 1
      Targ * myTargFor (WitDemand * theDemand, WitPeriod shipPer);
d95 1
a95 1
         // Returns the Targ for theDemand and shipPer, asserting that it
d98 1
a98 1
      accessFunc (SeqMgr *, mySeqMgr)
d112 1
a112 1
         // Builds the Targs corresponding to the DemPers in the shipment
d115 1
a115 1
      noCopyCtorAssign (PegMgr);
d121 1
a121 1
      WitPtrSched <WitDemand, Targ> myTargs_;
d123 2
a124 2
         // myTargs_.myPtrAt (theDemand, shipPer) is the Targ owned
         // this PegMgr for theDemand in shipPer.
d126 1
a126 1
      SeqMgr * const mySeqMgr_;
d128 1
a128 1
         // The SeqMgr for this PegMgr.
a130 3
// Leaving namespace Pip.
}   

@


1.4
log
@Added the PIP shipment sequence to the output of displayData.
@
text
@d31 1
a31 1
//    PegMgr
d65 2
a66 2
      // Each of these functions sets its last arg to list of pegging triples
      // for theDemand and shipPer, where the peggings are for:
@


1.3
log
@Continued implementation of PIP.
@
text
@d59 1
a59 1
      void printPegging ();
@


1.2
log
@Continued implementation of PIP.
@
text
@d56 1
a56 1
      // Functions called from class SubsysMgr.
@


1.1
log
@Continued implementation of PIP.
@
text
@a23 6
// Namespace Pip.
//
// Namespace for the Post-Implosion Pegging Subsystem.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
d47 1
a47 1
      PegMgr (SubsysMgr *);
d101 1
a101 1
      accessFunc (SubsysMgr *, mySubsysMgr)
a123 4
      SubsysMgr * const mySubsysMgr_;
         //
         // The SubsysMgr that owns this PegMgr.

d128 4
@

