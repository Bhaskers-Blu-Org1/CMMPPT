head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2006.03.03.22.22.05;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2006.03.03.20.46.56;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.02.23.29.02;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.12.22.09.24;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.12.21.43.58;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.12.20.46.54;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.12.20.32.38;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.12.20.23.30;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.12.20.07.43;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.18.17.23.46;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.17.22.04.42;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.14.22.29.02;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.14.20.51.23;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.11.23.29.14;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "URP.C"
//
// Contains the implementation of the following classes:
//
//    UrpOwner
//------------------------------------------------------------------------------

#include <UrpOwner.h>
#include <UrpBldr.h>
#include <PipPegList.h>
#include <PipTarg.h>
#include <PipMgr.h>
#include <Demand.h>
#include <Part.h>
#include <Timing.h>

//------------------------------------------------------------------------------
// Implementation of class UrpOwner.
//------------------------------------------------------------------------------

WitUrpOwner::WitUrpOwner (WitProblem * theProblem):

      WitPipOwner (theProblem)
   {
   WitUrpBldr::buildPegging (this);
   }

//------------------------------------------------------------------------------

WitUrpOwner::~WitUrpOwner ()
   {
   }

//------------------------------------------------------------------------------

void WitUrpOwner::getExecVolTrips (
      WitDemand *       theDemand,
      WitPeriod         shipPer,
      WitOpnTripStack & execVolTrips)
   {
   WitPipTarg * theTarg;

   theTarg = myTargFor (theDemand, shipPer);

   if (theTarg != NULL)
      theTarg->execVolPegList ()->getPegTrips (execVolTrips);
   else
      execVolTrips.clear ();
   }

//------------------------------------------------------------------------------

void WitUrpOwner::getSubVolTrips (
      WitDemand *       theDemand,
      WitPeriod         shipPer,
      WitSubTripStack & subVolTrips)
   {
   WitPipTarg * theTarg;

   theTarg = myTargFor (theDemand, shipPer);

   if (theTarg != NULL)
      theTarg->subVolPegList ()->getPegTrips (subVolTrips);
   else
      subVolTrips.clear ();
   }

//------------------------------------------------------------------------------

void WitUrpOwner::getPartPegTrips (
      WitDemand *        theDemand,
      WitPeriod          shipPer,
      WitPipPartAtt::Tag theAttTag,
      WitPartTripStack & thePegTrips)
   {
   WitPipTarg * theTarg;

   theTarg = myTargFor (theDemand, shipPer);

   if (theTarg != NULL)
      theTarg->myPartPegList ()[theAttTag]->getPegTrips (thePegTrips);
   else
      thePegTrips.clear ();
   }
@


1.13
log
@[shared-resource pegging]
@
text
@@


1.12
log
@[shared-resource pegging]
@
text
@d13 1
a13 1
// Contains the implementation of the following classes and templates:
a15 2
//    UrpTarg
//    UrpPegList <SrcComp>, with explicit instantiation.
d18 1
a18 2
#include <UrpPegList.h>
#include <UrpTarg.h>
d20 2
a21 1
#include <UrpOwner.h>
a24 3
#include <Opn.h>
#include <SubEntry.h>
#include <BopEntry.h>
a25 1
#include <MsgFac.h>
d33 1
a33 3
      WitPipOwner (theProblem),

      myTargs_    (theProblem)
a34 2
   buildTargs ();

a41 10
   WitDemand * theDemand;
   WitPeriod   thePer;

   WitTimer::enterSection ("pip");

   forEachDemand (theDemand, myProblem ())
      forEachPeriod (thePer, myProblem ())
         delete myTargs_.myPtrAt (theDemand, thePer);
 
   WitTimer::leaveSection ("pip");
d51 1
a51 1
   WitUrpTarg * theTarg;
d53 1
a53 1
   theTarg = myTargs_.myPtrAt (theDemand, shipPer);
d68 1
a68 1
   WitUrpTarg * theTarg;
d70 1
a70 1
   theTarg = myTargs_.myPtrAt (theDemand, shipPer);
d86 1
a86 1
   WitUrpTarg * theTarg;
d88 1
a88 1
   theTarg = myTargs_.myPtrAt (theDemand, shipPer);
a94 184

//------------------------------------------------------------------------------

WitUrpTarg * WitUrpOwner::myTargFor (WitDemand * theDemand, WitPeriod shipPer)
   {
   return myTargs_.myPtrAt (theDemand, shipPer);
   }

//------------------------------------------------------------------------------

void WitUrpOwner::buildTargs ()
   {
   WitDemTripStack theShipSeq (myProblem ());
   WitDemand *     theDemand;
   WitPeriod       shipPer;
   double          incShipVol;
   WitUrpTarg *    theTarg;

   myProblem ()->myPipMgr ()->getShipSeq (theShipSeq);

   while (theShipSeq.pop (theDemand, shipPer, incShipVol))
      {
      theTarg = myTargs_.myPtrAt (theDemand, shipPer);

      if (theTarg == NULL)
         {
         theTarg = new WitUrpTarg (theDemand, shipPer, this);

         myTargs_.myPtrAt (theDemand, shipPer) = theTarg;
         }
      }
   }

//------------------------------------------------------------------------------
// Implementation of class WitUrpTarg.
//------------------------------------------------------------------------------

WitUrpTarg::WitUrpTarg (
         WitDemand *   theDemand, 
         WitPeriod     shipPer, 
         WitUrpOwner * theUrpOwner):

      myDemand_      (theDemand),
      myShipPer_     (shipPer),
      myPartPegList_ (WitPipPartAtt::nTags)
   {
   WitProblem * theProblem;

   theProblem = myDemand_->myProblem ();

   execVolPegList_ =
      new WitUrpPegList <WitOperation> (theProblem);

   subVolPegList_ =
      new WitUrpPegList <WitSubEntry> (theProblem);

   myPartPegList_[WitPipPartAtt::supplyVol] =
      new WitUrpPegList <WitPart> (theProblem);

   myPartPegList_[WitPipPartAtt::sideVol] =
      new WitUrpPegList <WitPart> (theProblem);

   myPartPegList_[WitPipPartAtt::prodVol] =
      new WitUrpPegList <WitPart> (theProblem);

   myPartPegList_[WitPipPartAtt::consVol] =
      new WitUrpPegList <WitPart> (theProblem);
   }

//------------------------------------------------------------------------------

WitUrpTarg::~WitUrpTarg ()
   {
   delete myPartPegList_[WitPipPartAtt::consVol];
   delete myPartPegList_[WitPipPartAtt::prodVol];
   delete myPartPegList_[WitPipPartAtt::sideVol];
   delete myPartPegList_[WitPipPartAtt::supplyVol];
   delete subVolPegList_;
   delete execVolPegList_;
   }

//------------------------------------------------------------------------------
// Implementation of class template UrpPegList <SrcComp>.
//------------------------------------------------------------------------------

template <typename SrcComp> 
      WitUrpPegList <SrcComp>::WitUrpPegList (WitProblem * theProblem):

         WitProbAssoc (theProblem),
         myPegTrips_  (theProblem)
   {
   }

//------------------------------------------------------------------------------

template <typename SrcComp> 
      WitUrpPegList <SrcComp>::~WitUrpPegList ()
   {
   }

//------------------------------------------------------------------------------

template <typename SrcComp> 
      void WitUrpPegList <SrcComp>::append (
         SrcComp * theSrcComp,
         WitPeriod thePer,
         double    pegVol)
   {
   myPegTrips_.push (theSrcComp, thePer, pegVol);
   }

//------------------------------------------------------------------------------

template <typename SrcComp> 
      void WitUrpPegList <SrcComp>::consolidate (
         WitSchedule <SrcComp, double> & workSched)
   {
   SrcComp * theSrcComp;
   WitPeriod thePer;
   double    pegVol;

   WitPairStack <SrcComp, WitPeriod> thePairs (myProblem ());

   while (myPegTrips_.pop (theSrcComp, thePer, pegVol))
      {
      if (not workSched (theSrcComp).isAllocated ())
         workSched (theSrcComp).allocate (myProblem (), 0.0);

      workSched (theSrcComp)[thePer] += pegVol;

      thePairs.push (theSrcComp, thePer);
      }

   while (thePairs.pop (theSrcComp, thePer))
      {
      pegVol = workSched (theSrcComp)[thePer];

      if (pegVol == 0.0)
         continue;

      workSched (theSrcComp)[thePer] = 0.0;

      append (theSrcComp, thePer, pegVol);
      }
   }

//------------------------------------------------------------------------------

template <typename SrcComp> 
      void WitUrpPegList <SrcComp>::getPegTrips (
         WitTripStack <SrcComp> & thePegTrips)
   {
   thePegTrips.revCopyFrom (myPegTrips_);
   }

//------------------------------------------------------------------------------

template <typename SrcComp> 
      double WitUrpPegList <SrcComp>::pegVolFor (
         SrcComp * theSrcComp,
         WitPeriod thePer)
   {
   WitTripStack <SrcComp> thePegTrips (myProblem ());
   SrcComp *              pgdSrcComp;
   WitPeriod              pgdPer;
   double                 pegVol;

   getPegTrips (thePegTrips);

   while (thePegTrips.pop (pgdSrcComp, pgdPer, pegVol))
      if (pgdSrcComp == theSrcComp)
         if (pgdPer == thePer)
            return pegVol;

   return 0.0;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template UrpPegList <SrcComp>.
//------------------------------------------------------------------------------

template class WitUrpPegList <WitPart>;
template class WitUrpPegList <WitOperation>;
template class WitUrpPegList <WitSubEntry>;
@


1.11
log
@[shared-resource pegging]
@
text
@a42 2
   checkRestrictions ();

a124 24
void WitUrpOwner::checkRestrictions ()
   {
   WitSubEntry *  theSub;
   WitPeriod      execPer;
   WitOperation * theOpn;
   WitBopEntry *  theBopEnt;
   bool           expFound;

   if (not myProblem ()->postprocessed ())
      myMsgFac () ("unpostPipSmsg");

   forEachSubEntry (theSub, myProblem ())
      forEachPeriod (execPer, myProblem ())
         if (theSub->consRate ()[execPer] < 0.0)
            myMsgFac () ("pipNegSubConsRateSmsg",
               theSub->myOperationName (),
               theSub->myBomEntIndex (),
               theSub->localIndex (),
               execPer,
               theSub->consRate ()[execPer]);
   }

//------------------------------------------------------------------------------

@


1.10
log
@Modification to the implementation of unshared-resource pegging.
@
text
@d24 1
a24 1
#include <PipSeqMgr.h>
d37 1
a37 1
WitUrpOwner::WitUrpOwner (WitPipSeqMgr * theSeqMgr):
d39 1
a39 1
      WitPipOwner (theSeqMgr),
d41 1
a41 1
      myTargs_    (myProblem ())
d159 1
a159 1
   myPipSeqMgr ()->get (theShipSeq);
@


1.9
log
@[shared-resource pegging]
@
text
@d122 1
a122 7
   WitUrpTarg * theTarg;

   theTarg = myTargs_.myPtrAt (theDemand, shipPer);

   witAssert (theTarg != NULL);

   return theTarg;
@


1.8
log
@[shared-resource pegging]
@
text
@d20 1
a20 1
#include <PipPegList.h>
@


1.7
log
@[shared-resource pegging]
@
text
@d21 1
a21 1
#include <PipTarg.h>
@


1.6
log
@[shared-resource pegging]
@
text
@d15 1
a15 1
//    UrpCoord
d23 1
a23 1
#include <UrpCoord.h>
d34 1
a34 1
// Implementation of class UrpCoord.
d37 1
a37 1
WitUrpCoord::WitUrpCoord (WitPipSeqMgr * theSeqMgr):
d52 1
a52 1
WitUrpCoord::~WitUrpCoord ()
d68 1
a68 1
void WitUrpCoord::getExecVolTrips (
d85 1
a85 1
void WitUrpCoord::getSubVolTrips (
d102 1
a102 1
void WitUrpCoord::getPartPegTrips (
d120 1
a120 1
WitUrpTarg * WitUrpCoord::myTargFor (WitDemand * theDemand, WitPeriod shipPer)
d133 1
a133 1
void WitUrpCoord::checkRestrictions ()
d157 1
a157 1
void WitUrpCoord::buildTargs ()
d187 1
a187 1
         WitUrpCoord * theUrpCoord):
@


1.5
log
@[shared-resource pegging]
@
text
@d39 1
a39 1
      WitPipCoord (theSeqMgr),
@


1.4
log
@[shared-resource pegging]
@
text
@a42 2
   WitUrpBldr * theBldr;

d47 1
a47 5
   theBldr = new WitUrpBldr (this);

   theBldr->buildPegging ();

   delete theBldr;
@


1.3
log
@[shared-resource pegging]
@
text
@a15 1
//    UrpPrtr
a22 1
#include <PipPrtr.h>
a73 9
void WitUrpCoord::print ()
   {
   WitUrpPrtr thePrtr (this);

   thePrtr.print ();
   }

//------------------------------------------------------------------------------

a186 241
// Implementation of class UrpPrtr.
//------------------------------------------------------------------------------

WitUrpPrtr::WitUrpPrtr (WitUrpCoord * theUrpCoord):

      WitProbAssoc (theUrpCoord->myProblem ()),
      myUrpCoord_  (theUrpCoord),
      myTargSeq_   (myProblem ())
   {
   }

//------------------------------------------------------------------------------

WitUrpPrtr::~WitUrpPrtr ()
   {
   }

//------------------------------------------------------------------------------

void WitUrpPrtr::print ()
   {
   fprintf (solnFile (), "\n\n");

   findTargSeq ();

   prtExecVolPip ();
   prtSubVolPip  ();

   prtPartPip    (WitPipPartAtt::supplyVol, "SupplyVol");
   prtPartPip    (WitPipPartAtt::sideVol,   "SideVol");
   prtPartPip    (WitPipPartAtt::prodVol,   "ProdVol");
   prtPartPip    (WitPipPartAtt::consVol,   "ConsVol");
   }

//------------------------------------------------------------------------------

void WitUrpPrtr::findTargSeq ()
   {
   WitDemTripStack               theShipSeq (myProblem ());
   WitSchedule <WitDemand, bool> inSeqTargs (myProblem (), false);
   WitDemand *                   theDemand;
   WitPeriod                     shipPer;
   double                        incShipVol;

   myTargSeq_.clear ();

   myUrpCoord_->myPipSeqMgr ()->get (theShipSeq);

   while (theShipSeq.pop (theDemand, shipPer, incShipVol))
      {
      if (inSeqTargs (theDemand)[shipPer])
         continue;

      myTargSeq_.push (myUrpCoord_->myTargFor (theDemand, shipPer));
      
      inSeqTargs (theDemand)[shipPer] = true;
      }

   myTargSeq_.reverse ();
   }

//------------------------------------------------------------------------------

void WitUrpPrtr::prtExecVolPip ()
   {
   WitOperation *           theOpn;
   WitPeriod                execPer;
   bool                     pegVolFound;
   WitObjStItr <WitUrpTarg> theItr;
   WitUrpTarg *             theTarg;
   double                   pegVol;

   fprintf (solnFile (),
      "\n"
      "ExecVol PIP:\n"
      "\n"
      "   -----------------------------\n"
      "   Opn  Per  Dem  Per    ExecVol\n"
      "   -----------------------------\n");

   forEachOperation (theOpn, myProblem ())
      forEachPeriod (execPer, myProblem ())
         {
         pegVolFound = false;

         theItr.attachTo (myTargSeq_); 

         while (theItr.advance (theTarg))
            {
            pegVol = theTarg->execVolPegList ()->pegVolFor (theOpn, execPer);

            if (pegVol == 0.0)
               continue;

            if (not pegVolFound)
               {
               fprintf (solnFile (),
                  "   %3s  %3d",
                  theOpn->operationName ().myCstring (),
                  execPer);

               pegVolFound = true;
               }
            else
               fprintf (solnFile (), "           ");

            printTargAndVol (theTarg, pegVol);
            }

         if (pegVolFound)
            fprintf (solnFile (), "   -----------------------------\n");
         }
   }

//------------------------------------------------------------------------------

void WitUrpPrtr::prtSubVolPip ()
   {
   WitSubEntry *            theSub;
   WitPeriod                execPer;
   bool                     pegVolFound;
   WitObjStItr <WitUrpTarg> theItr;
   WitUrpTarg *             theTarg;
   double                   pegVol;

   fprintf (solnFile (),
      "\n"
      "Subvol PIP:\n"
      "\n"
      "   ---------------------------------------\n"
      "   Opn  Idx  Idx  Per  Dem  Per     SubVol\n"
      "   ---------------------------------------\n");

   forEachSubEntry (theSub, myProblem ())
      forEachPeriod (execPer, myProblem ())
         {
         pegVolFound = false;

         theItr.attachTo (myTargSeq_); 

         while (theItr.advance (theTarg))
            {
            pegVol = theTarg->subVolPegList ()->pegVolFor (theSub, execPer);

            if (pegVol == 0.0)
               continue;

            if (not pegVolFound)
               {
               fprintf (solnFile (),
                  "   %3s  %3d  %3d  %3d",
                  theSub->myOperationName ().myCstring (),
                  theSub->myBomEntIndex (),
                  theSub->localIndex (),
                  execPer);

               pegVolFound = true;
               }
            else
               fprintf (solnFile (), "                     ");

            printTargAndVol (theTarg, pegVol);
            }

         if (pegVolFound)
            fprintf (solnFile (),
               "   ---------------------------------------\n");
         }
   }

//------------------------------------------------------------------------------

void WitUrpPrtr::prtPartPip (
      WitPipPartAtt::Tag theAttTag,
      const char *       theAttName)
   {
   WitPart *                thePart;
   WitPeriod                thePer;
   bool                     pegVolFound;
   WitObjStItr <WitUrpTarg> theItr;
   WitUrpTarg *             theTarg;
   double                   pegVol;

   fprintf (solnFile (),
      "\n"
      "%s PIP:\n"
      "\n"
      "   ------------------------------\n"
      "   Part  Per  Dem  Per  %9s\n"
      "   ------------------------------\n",
      theAttName,
      theAttName);

   forEachPart (thePart, myProblem ())
      forEachPeriod (thePer, myProblem ())
         {
         pegVolFound = false;

         theItr.attachTo (myTargSeq_); 

         while (theItr.advance (theTarg))
            {
            pegVol =
               theTarg->myPartPegList ()[theAttTag]->
                  pegVolFor (thePart, thePer );

            if (pegVol == 0.0)
               continue;

            if (not pegVolFound)
               {
               fprintf (solnFile (),
                  "   %4s  %3d",
                  thePart->partName ().myCstring (),
                  thePer);

               pegVolFound = true;
               }
            else
               fprintf (solnFile (), "            ");

            printTargAndVol (theTarg, pegVol);
            }

         if (pegVolFound)
            fprintf (solnFile (), "   ------------------------------\n");
         }
   }

//------------------------------------------------------------------------------

void WitUrpPrtr::printTargAndVol (WitUrpTarg * theTarg, double pegVol)
   {
   fprintf (solnFile (),
      "  %3s  %3d  %9.3f\n",
      theTarg->myDemand ()->demandName ().myCstring (),
      theTarg->myShipPer (),
      pegVol);
   }

//------------------------------------------------------------------------------
@


1.2
log
@[shared-resource pegging]
@
text
@d16 3
a18 3
//    PipPrtr
//    PipTarg
//    PipPegList <SrcComp>, with explicit instantiation.
d78 1
a78 1
   WitPipPrtr thePrtr (this);
d90 1
a90 1
   WitPipTarg * theTarg;
d107 1
a107 1
   WitPipTarg * theTarg;
d125 1
a125 1
   WitPipTarg * theTarg;
d137 1
a137 1
WitPipTarg * WitUrpCoord::myTargFor (WitDemand * theDemand, WitPeriod shipPer)
d139 1
a139 1
   WitPipTarg * theTarg;
d180 1
a180 1
   WitPipTarg *    theTarg;
d190 1
a190 1
         theTarg = new WitPipTarg (theDemand, shipPer, this);
d198 1
a198 1
// Implementation of class PipPrtr.
d201 1
a201 1
WitPipPrtr::WitPipPrtr (WitUrpCoord * theUrpCoord):
d211 1
a211 1
WitPipPrtr::~WitPipPrtr ()
d217 1
a217 1
void WitPipPrtr::print ()
d234 1
a234 1
void WitPipPrtr::findTargSeq ()
d261 1
a261 1
void WitPipPrtr::prtExecVolPip ()
d266 2
a267 2
   WitObjStItr <WitPipTarg> theItr;
   WitPipTarg *             theTarg;
d314 1
a314 1
void WitPipPrtr::prtSubVolPip ()
d319 2
a320 2
   WitObjStItr <WitPipTarg> theItr;
   WitPipTarg *             theTarg;
d370 1
a370 1
void WitPipPrtr::prtPartPip (
d377 2
a378 2
   WitObjStItr <WitPipTarg> theItr;
   WitPipTarg *             theTarg;
d429 1
a429 1
void WitPipPrtr::printTargAndVol (WitPipTarg * theTarg, double pegVol)
d439 1
a439 1
// Implementation of class WitPipTarg.
d442 1
a442 1
WitPipTarg::WitPipTarg (
d456 1
a456 1
      new WitPipPegList <WitOperation> (theProblem);
d459 1
a459 1
      new WitPipPegList <WitSubEntry> (theProblem);
d462 1
a462 1
      new WitPipPegList <WitPart> (theProblem);
d465 1
a465 1
      new WitPipPegList <WitPart> (theProblem);
d468 1
a468 1
      new WitPipPegList <WitPart> (theProblem);
d471 1
a471 1
      new WitPipPegList <WitPart> (theProblem);
d476 1
a476 1
WitPipTarg::~WitPipTarg ()
d487 1
a487 1
// Implementation of class template PipPegList <SrcComp>.
d491 1
a491 1
      WitPipPegList <SrcComp>::WitPipPegList (WitProblem * theProblem):
d501 1
a501 1
      WitPipPegList <SrcComp>::~WitPipPegList ()
d508 1
a508 1
      void WitPipPegList <SrcComp>::append (
d519 1
a519 1
      void WitPipPegList <SrcComp>::consolidate (
d554 1
a554 1
      void WitPipPegList <SrcComp>::getPegTrips (
d563 1
a563 1
      double WitPipPegList <SrcComp>::pegVolFor (
d583 1
a583 1
// Explicit instantiation of class template PipPegList <SrcComp>.
d586 3
a588 3
template class WitPipPegList <WitPart>;
template class WitPipPegList <WitOperation>;
template class WitPipPegList <WitSubEntry>;
@


1.1
log
@[shared-resource pegging]
@
text
@d23 1
a23 1
#include <PipBldr.h>
d45 1
a45 1
   WitPipBldr * theBldr;
d51 1
a51 1
   theBldr = new WitPipBldr (this);
@

