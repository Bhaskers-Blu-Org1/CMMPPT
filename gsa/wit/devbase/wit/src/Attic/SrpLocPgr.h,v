head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2005.12.20.19.45.39;	author rjw;	state dead;
branches;
next	1.12;

1.12
date	2005.12.20.19.04.55;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.19.23.30.45;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.19.21.11.25;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.19.19.29.26;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.29.22.14.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.29.20.58.19;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.28.22.23.13;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.23.23.38.33;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.21.20.08.49;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.21.18.30.35;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.18.23.36.33;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.18.20.38.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpLocPgrH
#define SrpLocPgrH

//------------------------------------------------------------------------------
// Header file: "SrpLocPgr.h"
//
// Contains the declaration of the following class:
//
//    SrpLocPgr
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class SrpLocPgr
//
// "Shared-Resource Pegging Local Pegger"
// Responsible for computing the explosion synchronizer for Shared-Resource
// Pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpLocPgr
//
// Implemented in SrpLocPgg.C.
//------------------------------------------------------------------------------

class WitSrpLocPgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static void buildExpSync (WitSrpExpSync * theSrpExpSync);
         //
         // Builds theSrpExpSync.

   private:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpLocPgr (WitSrpExpSync *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpLocPgr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      void build ();
         //
         // Builds the explosion synchronizer for mySrpCoord_.

      void setUp ();
         //
         // Sets up this SrpLocPgr for building the explosion synchronizer.

      void fillReqs (WitPart * thePart, WitPeriod thePer);
         //
         // Fills the requirements on thePart in thePer.

      void netWithSupply (
            WitPart * thePart,
            WitPeriod thePer,
            double &  netReqVol);
         //
         // Nets netReqVol units of requirement on thePart in thePer against
         // supply.

      void explodeToProd (
            WitPart * thePart,
            WitPeriod expPer,
            double &  netReqVol);
         //
         // Fills the requirements on thePart in thePer by exploding to
         // production, updating netReqVol.

      noCopyCtorAssign (WitSrpLocPgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSrpExpSync * const mySrpExpSync_;
         //
         // The SrpExpSync for this SrpLocPgr.

      WitReqSched * myReqSched_;
         //
         // The ReqSched owned by this SrpLocPgr.

      WitSchedule <WitOperation, double> unusedExecVol_;
         //
         // unusedExecVol_ (theOpn)[execPer] is the portion of
         // theOpn->execVol ()[execPer] that has not yet been used in building
         // the explosion synchronizer.

      WitSchedule <WitPart, double> unusedSupplyVol_;
         //
         // unusedSupplyVol_ (thePart)[supPer] is the portion of
         // thePart->supplyVol ()[supPer] that has not yet been used in building
         // the explosion synchronizer.
   };

#endif
@


1.12
log
@[shared-resource pegging]
@
text
@@


1.11
log
@[shared-resource pegging]
@
text
@d28 2
a29 1
// Responsible for computing the local pegging for Shared-Resource Pegging.
d47 1
a47 1
      static void buildLocalPegging (WitSrpLocPgg * theSrpLocPgg);
d49 1
a49 1
         // Builds theSrpLocPgg.
d57 1
a57 1
      WitSrpLocPgr (WitSrpLocPgg *);
d71 1
a71 1
         // Builds the local pegging for mySrpCoord_.
d75 1
a75 1
         // Sets up this SrpLocPgr for building the local pegging.
d103 1
a103 1
      WitSrpLocPgg * const mySrpLocPgg_;
d105 1
a105 1
         // The SrpLocPgg for this SrpLocPgr.
d115 1
a115 1
         // the local pegging.
d121 1
a121 1
         // the local pegging.
@


1.10
log
@[shared-resource pegging]
@
text
@a22 1
#include <PtrSched.h>
d80 12
a91 5
      void netWithSupply (WitPart * thePart, WitPeriod supPer);
         //
         // Fills the requirements on thePart in supPer netting with supply.

      void explodeToProd (WitPart * thePart, WitPeriod expPer);
d94 1
a94 6
         // production.

      void acctViolation (WitPart * thePart, WitPeriod thePer);
         //       
         // Accounts for the requirements on thePart in thePer as a violation of
         // the resource allocation constraint.
d106 1
a106 1
      WitPtrSched <WitPart, WitDblDblStack> myReqInts_;
d108 1
a108 2
         // myReqInts_.myElemAt (thePart, thePer) is the set of requirement
         // intervals for thePart in thePer.
@


1.9
log
@[shared-resource pegging]
@
text
@d35 2
@


1.8
log
@[shared-resource pegging]
@
text
@d45 1
a45 1
      static void buildLocalPegging (WitSrpLocPgg * theLocPgg);
d47 1
a47 1
         // Builds theLocPgg.
d99 1
a99 1
      WitSrpLocPgg * const myLocPgg_;
@


1.7
log
@[shared-resource pegging]
@
text
@d88 1
a88 1
      void recViolation (WitPart * thePart, WitPeriod thePer);
@


1.6
log
@[shared-resource pegging]
@
text
@d88 5
@


1.5
log
@[shared-resource pegging]
@
text
@d79 4
d87 1
a87 1
                                     
d108 6
@


1.4
log
@[shared-resource pegging]
@
text
@d22 1
d71 1
a71 1
      void explodePart (WitPart * thePart, WitPeriod thePer);
d73 1
a73 1
         // Explodes the requirements on thePart in thePer.
d75 9
d98 6
@


1.3
log
@[shared-resource pegging]
@
text
@d70 4
@


1.2
log
@[shared-resource pegging]
@
text
@d22 1
d44 1
a44 1
      static void buildLocalPegging (WitSrpLocPgg * theSrpLocPgg);
d46 1
a46 1
         // Builds theSrpLocPgg.
d76 1
a76 1
      WitSrpLocPgg * const mySrpLocPgg_;
d79 5
@


1.1
log
@[shared-resource pegging]
@
text
@d43 1
a43 1
      static void buildLocalPegging (WitSrpCoord * theSrpCoord);
d45 1
a45 1
         // Builds the local pegging for theSrpCoord.
d53 1
a53 1
      WitSrpLocPgr (WitSrpCoord *);
d75 1
a75 1
      WitSrpCoord * const mySrpCoord_;
d77 1
a77 1
         // The SrpCoord for this SrpLocPgr.
@

