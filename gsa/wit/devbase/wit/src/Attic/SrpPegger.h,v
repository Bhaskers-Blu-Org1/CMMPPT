head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2006.01.09.20.02.31;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2006.01.05.20.44.35;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.03.20.44.07;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.03.19.00.04;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.03.17.12.43;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.30.23.37.56;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.30.19.32.04;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.29.21.36.34;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.27.19.43.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.23.23.07.43;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.22.22.07.05;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.20.20.15.25;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpPeggerH
#define SrpPeggerH

//------------------------------------------------------------------------------
// Header file: "SrpPegger.h"
//
// Contains the declaration of the following class:
//
//    SrpPegger
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>
#include <TripStack.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class SrpPegger
//
// "Shared-Resource Pegging Pegger"
// Responsible for computing the peggings for Shared-Resource Pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpPegger
//
// Implemented in SRP.C.
//------------------------------------------------------------------------------

class WitSrpPegger: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpPegger (WitSrpExpSync *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpPegger ();

      //------------------------------------------------------------------------
      // get---Trips functions.
      // Each of these functions sets its last arg to the list of pegging
      // triples for theDemand and shipPer, where the peggings are for:
      //
      //    execVol
      //------------------------------------------------------------------------

      void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void printExpSpec ();
         //
         // Prints the SrpExpSpec for this SrpPegger.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void fillReqs (WitPart * thePart, WitPeriod thePer);
         //
         // Fills the requirements on thePart in thePer.

      void netWithSupply (WitPart * thePart, WitPeriod thePer);
         //
         // Fills the appropriate portion of the requirement on thePart in
         // thePer by netting against supply.

      void explodeToProd (WitPart * thePart, WitPeriod expPer);
         //
         // Fills the appropriate portion of the requirement on thePart in
         // expPer by exploding to production.

      void explodeBomEntry (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        incExecVol,
            double        prevVol);
         //
         // Explodes incExecVol units through theBomEnt in execPer, after
         // prevVol units were previously exploded.

      void consolidateExecVolTrips ();
         //
         // Merges duplicate entries in myExecVolTrips_.

      noCopyCtorAssign (WitSrpPegger);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSrpExpSpec * mySrpExpSpec_;
         //
         // The SrpExpSpec owned by this SrpPegger.

      WitSrpExpSync * const mySrpExpSync_;
         //
         // The SrpExpSync for this SrpPegger.

      WitPtrSched <WitPart, WitDblDblStack> myReqPairs_;
         //
         // myReqPairs_.myElemAt (thePart, thePer) is the set of requirement
         // pairs for thePart in thePer.

      WitOpnTripStack myExecVolTrips_;
         //
         // During a call to getExecVolTrips, the set of execVol triples to be
         // returned; otherwise empty.

      WitSchedule <WitOperation, double> pgdExecVol_;
         //
         // During consolidateExecVolTrips, pgdExecVol_ (theOpn)[execPer] is the
         // portion of theOpn->execVol_ that's pegged to the current shipment.
   };

#endif
@


1.11
log
@[shared-resource pegging]
@
text
@@


1.10
log
@[shared-resource pegging]
@
text
@d24 1
d106 4
d133 5
@


1.9
log
@[shared-resource pegging]
@
text
@d86 9
a94 19
      void netWithSupply (
            WitPart * thePart,
            WitPeriod thePer,
            double    fillVol,
            double    prevFillVol);
         //
         // Fills fillVol units of requirement on thePart in thePer that were
         // placed after a previous prevFillVol units of requirement were
         // placed by netting against supply.

      void explodeToProd (
            WitPart * thePart,
            WitPeriod expPer,
            double    fillVol,
            double    prevFillVol);
         //
         // Fills fillVol units of requirement on thePart in thePer that were
         // placed after a previous prevFillVol units of requirement were
         // placed by exploding to production.
d100 1
a100 1
            double        prevFillVol);
d103 1
a103 1
         // prevFillVol units were previously exploded.
@


1.8
log
@[shared-resource pegging]
@
text
@d47 1
a47 1
      WitSrpPegger (WitSrpOldSpec *, WitSrpExpSync *);
a85 5
      void fillReqsOld (WitPart * thePart, WitPeriod thePer);
         //
         // Fills the requirements on thePart in thePer.
         // Old Version

a124 4
      WitSrpOldSpec * const mySrpOldSpec_;
         //
         // The SrpOldSpec for this SrpPegger.

@


1.7
log
@[shared-resource pegging]
@
text
@d68 8
d86 5
d126 4
@


1.6
log
@[shared-resource pegging]
@
text
@d47 1
a47 1
      WitSrpPegger (WitSrpExpSpec *, WitSrpExpSync *);
d113 1
a113 1
      WitSrpExpSpec * const mySrpExpSpec_;
d115 1
a115 1
         // The SrpExpSpec for this SrpPegger.
@


1.5
log
@[shared-resource pegging]
@
text
@d82 1
a82 1
            double    prevVol);
d85 2
a86 2
         // placed after a previous prevVol units of requirement were placed,
         // by netting against supply.
d92 1
a92 1
            double    prevVol);
d95 2
a96 2
         // placed after a previous prevVol units of requirement were placed,
         // by exploding to production.
d102 1
a102 1
            double        prevVol);
d105 1
a105 1
         // prevVol units were previously exploded.
@


1.4
log
@[shared-resource pegging]
@
text
@d98 9
d121 1
a121 1
      WitPtrSched <WitPart, WitDblDblStack> myReqInts_;
d123 2
a124 2
         // myReqInts_.myElemAt (thePart, thePer) is the set of requirement
         // intervals for thePart in thePer.
@


1.3
log
@[shared-resource pegging]
@
text
@d47 1
a47 1
      WitSrpPegger (WitSrpExpGuide *, WitSrpExpSync *);
d104 1
a104 1
      WitSrpExpGuide * const mySrpExpGuide_;
d106 1
a106 1
         // The SrpExpGuide for this SrpPegger.
@


1.2
log
@[shared-resource pegging]
@
text
@d78 19
a96 13
      void netWithSupply (WitPart * thePart, WitPeriod supPer);
         //
         // Fills the requirements on thePart in supPer netting with supply.

      void explodeToProd (WitPart * thePart, WitPeriod expPer);
         //
         // Fills the requirements on thePart in thePer by exploding to
         // production.

      void acctViolation (WitPart * thePart, WitPeriod thePer);
         //       
         // Accounts for the requirements on thePart in thePer as a violation of
         // the resource allocation constraint.
@


1.1
log
@[shared-resource pegging]
@
text
@d47 1
a47 1
      WitSrpPegger (WitSrpExpSync *);
d98 4
@

