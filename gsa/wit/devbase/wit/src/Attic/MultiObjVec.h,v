head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2009.12.29.16.33.44;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2009.12.25.00.34.51;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.24.22.58.55;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.24.21.00.04;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.24.20.26.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.24.19.14.53;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.23.22.39.55;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.23.00.21.49;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.21.20.17.09;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.18.23.47.57;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Multi-Objective Mode
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MultiObjVecH
#define MultiObjVecH

//------------------------------------------------------------------------------
// Header file: "MultiObjVec.h"
//
// Contains the declaration of class MultiObjVec.
//------------------------------------------------------------------------------

#include <ObjVec.h>
#include <PtrMap.h>

//------------------------------------------------------------------------------
// Class MultiObjVec
//
// "Multiple-Objective Vector"
//
// Represents a vector of doubles that holds the value of an objective function
// attribute in multiple-objectives mode.
//
// Class hierarchy:
//
//    ObjVec
//      MultiObjVec
//
// Implemented in ObjVec.C.
//------------------------------------------------------------------------------

class WitMultiObjVec: public WitObjVec
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMultiObjVec (WitMultiObjMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMultiObjVec ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual       void             copyFrom        (const WitObjVec *);
      virtual       void             writeDataSingle (const char *)   const;
      virtual       void             writeDataMulti  (const char *,
                                                      WitDelComp *,
                                                      WitObjective *) const;
      virtual       void             display         (WitMsgID)       const;
      virtual const WitMultiObjVec * thisMultiObjVec ()               const;
      virtual       WitDblFlexVec &  curDblFlexVec   ();
         //
         // Overrides from class ObjVec.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMultiObjVec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMultiObjMgr * const myMultiObjMgr_;
         //
         // The MultiObjMgr for this MultiObjVec.

      WitPtrMap <WitObjective, WitDblFlexVec> myDblFlexVecMap_;
         //
         // myDblFlexVecMap_.myElemAt (theObj) is the vector of doubles
         // represented by this ObjVec for theObj.
   };

#endif
@


1.9
log
@Multi-Objective Mode
@
text
@@


1.8
log
@Multi-Objective Mode
@
text
@d61 1
@


1.7
log
@Multi-Objective Mode
@
text
@d59 5
a63 3
      virtual       void             writeData       (const char *) const;
      virtual       void             display         (WitMsgID)     const;
      virtual const WitMultiObjVec * thisMultiObjVec ()             const;
@


1.6
log
@Multi-Objective Mode
@
text
@d59 3
a61 2
      virtual       void             display         (WitMsgID) const;
      virtual const WitMultiObjVec * thisMultiObjVec () const;
@


1.5
log
@Multi-objective mode
@
text
@d58 4
a61 4
      virtual void             copyFrom        (WitObjVec * theObjVec);
      virtual void             display         (WitMsgID    theMsgID);
      virtual WitMultiObjVec * thisMultiObjVec ();
      virtual WitDblFlexVec &  curDblFlexVec   ();
@


1.4
log
@Multi-Objective Mode
@
text
@d34 2
@


1.3
log
@Multi-Objective Mode
@
text
@a55 1
      virtual WitDblFlexVec &  curDblFlexVec   ();
d57 1
d59 1
@


1.2
log
@Multi-Objective Mode
@
text
@d56 3
a58 1
      virtual WitDblFlexVec & curDblFlexVec ();
d60 1
a60 1
         // Override from class ObjVec.
@


1.1
log
@Multi-Objective Mode
@
text
@d56 1
a56 1
      virtual WitDblFlexVec & myDblFlexVec ();
a59 5
      virtual void operator = (const WitObjVec &       theObjVec);
      virtual void copyInto   (      WitMultiObjVec &  theMultiObjVec) const;
         //
         // Overrides from class ObjVec.

@

