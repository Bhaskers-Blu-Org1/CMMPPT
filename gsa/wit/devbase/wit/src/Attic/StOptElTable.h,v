head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2007.07.26.21.39.50;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2007.07.26.21.09.28;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.26.19.23.35;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.25.23.18.23;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.25.21.16.10;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.25.19.53.27;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StOptElTableH
#define StOptElTableH

//------------------------------------------------------------------------------
// Header file: "StOptElTable.h"
//
// Contains the declaration of class template StOptElTable <DerComp, StOptEl>.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <RefMap.h>

//------------------------------------------------------------------------------
// Class template StOptElTable <DerComp, StOptEl>
//
// "Stochastic Optimization Element Table"
// A mapping from triples of type (Scenario, DerComp, Period) to pointers to
// objects of class StOptEl.
// DerComp is to be a class derived from Component.
// StOptEl is to be a class derived from either StochVar or StochCon.
//
// Implemented in StOptHelp.C.
//------------------------------------------------------------------------------

template <typename DerComp, typename StOptEl>
      class WitStOptElTable: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStOptElTable (WitStochImpOP *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStOptElTable ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void createMyElFor (WitScenario *, DerComp *, WitPeriod);
         //
         // Creates and stores a new StOptEl for the arguments.

      StOptEl * myElFor (WitScenario *, DerComp *, WitPeriod);
         //
         // Returns the StOptEl for the arguments or NULL, if there is none.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitStOptElTable);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochImpOP * const myStochImpOP_;
         //
         // The StochImpOP that owns this StOptElTable.

      WitRefMap <WitScenario, WitPtrSched <DerComp, StOptEl> > mySched_;
         //
         // mySched_ (theScenario).myPtrAt (theDerComp, thePer) is the StOptEl
         // for theDerComp in theScenario in thePer owned by this StOptElTable.
   };

#endif
@


1.5
log
@Stochastic Implosion
@
text
@@


1.4
log
@Stochastic Implosion
@
text
@d47 1
a47 1
      WitStOptElTable (WitScenMgr *);
d59 1
a59 1
      void store (StOptEl * theStOptEl);
d61 1
a61 2
         // Stores theStOptEl in this StOptElTable.
         // The location for storage must be empty.
d63 1
a63 4
      StOptEl * myStOptElFor (
            WitScenario * theScenario,
            DerComp *     theDerComp,
            WitPeriod     thePer);
d65 1
a65 2
         // Returns the StOptEl for theScenario, theDerComp, and thePer,
         // or NULL, if there is none.
d79 1
a79 1
      WitScenMgr * const myScenMgr_;
d81 1
a81 1
         // The ScenMgr for this StOptElTable.
@


1.3
log
@Stochastic Implosion
@
text
@d30 2
d70 1
a70 1
         // or NULL, if these is none.
@


1.2
log
@Stochastic Implosion
@
text
@d45 1
a45 1
      WitStOptElTable (WitStochImpOP *);
d82 1
a82 1
      WitStochImpOP * const myStochImpOP_;
d84 1
a84 1
         // The StochImpOP that owns this StOptElTable.
@


1.1
log
@Stochastic Implosion
@
text
@d19 1
d33 1
a33 1
      class WitStOptElTable
d57 13
@

