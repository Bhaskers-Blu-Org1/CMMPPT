head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2007.09.21.17.47.13;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2007.09.21.16.44.41;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.20.20.58.25;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.19.14.38.30;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.19.14.23.26;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.18.18.43.13;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ScenAttTableH
#define ScenAttTableH

//------------------------------------------------------------------------------
// Header file: "ScenAttTable.h"
//
// Contains the declaration of the following class template
// ScenAttTable <Owner>.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <RefMap.h>
#include <List.h>

//------------------------------------------------------------------------------
// Class Template ScenAttTable <Owner>
//
// "Scenario-Specific Attribute Table"
// Stores and manages data for the stochastic version of an attribute that
// exists in deterministic mode, but becomes Scenario-specific in stochastic
// mode.
//
// Template argument:
//    Owner: The class whose instances own the deterinistic version of the
//           attribute.
//
// Implemented in ScenAttTable.C
//------------------------------------------------------------------------------

template <typename Owner>
      class WitScenAttTable: public WitProbAssoc
   {
      friend class WitScenario;

      //------------------------------------------------------------------------
      // Local typedefs.
      //------------------------------------------------------------------------

      typedef const WitDblFlexVec & (Owner::* AccFunc) () const;
         //
         // An AccFunc is a member function of the Owner class that provides
         // read-only access to the Owner's version of attribute represented by
         // this InputAttTable.

      typedef void (Owner::* StoreFunc) (const WitTVec <double> & theValue);
         //
         // A StoreFunc is a member function of the Owner class that
         // sets the value of the Owner's version of the attribute represented
         // by this ScenAttTable to the value of the argument.
         // The function is expected to be valid only when the stochastic
         // implosion subsystem is uploading data.

   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenAttTable (WitScenAttMgr *, StoreFunc);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenAttTable ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void allocate ();
         //
         // Allocates the attribute vectors of this ScenAttTable.

      void clear ();
         //
         // deallocates the attribute vectors of this ScenAttTable.

      void downloadDataTo (WitScenario * theScenario, AccFunc theAccFunc);
         //
         // Downloads (via theAccFunc) the attribute value from each of the
         // owners into theScenario's portion of this AbsScenInputAtt.

      void uploadDataFrom (WitScenario * theScenario, StoreFunc theStoreFunc);
         //
         // Uploads (via theStoreFunc) the value of the represented attribute to
         // each of the owners from the portion of this ScenAttTable that
         // represents theScenario.
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      void copyContentsFrom (WitScenAttTable <Owner> * theScenAttTable);
         //
         // Copies into this AbsScenInputAtt the contents of theScenAttTable.
         // It is assumed that theScenAttMgr and this AbsScenInputAtt belong to
         // WitRuns whose Component set, # Scenarios, and # Periods match.

      void storeValue (
            Owner *       theOwner,
            WitScenario * theScenario,
            WitPeriod     thePer,
            double        theValue);
         //
         // Sets the value of the attribute for theOwner in theScenario in
         // thePer to theValue.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline const WitTVec <double> & myValue (
            Owner *       theOwner,
            WitScenario * theScenario)
         {
         return myValue_ (theOwner) (theScenario);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      static const WitList <Owner> & allOwnersFor (
            WitScenAttMgr * theScenAttMgr);
         //
         // Returns the List of all Owners for theScenAttMgr.
         // Implemented using template specialization.

      noCopyCtorAssign (WitScenAttTable);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRefMap <Owner, WitSchedule <WitScenario, double> > myValue_;
         //
         // myValue_ (theOwner) (theScenario)[thePer] is the value of the
         // attribute stored by this ScenAttTable for theOwner in theScenario in
         // thePer.

      const WitList <Owner> & allOwners_;
         //
         // The List of all instances of the Owner class in myProblem ().

      const StoreFunc myStoreFunc_;
         //
         // The member function of the Owner class that sets the value of the
         // Owner's version of the attribute represented by this ScenAttTable to
         // the value of the argument.
         // The function is expected to be valid only when the stochastic
         // implosion subsystem is uploading data.
   };

#endif
@


1.5
log
@Stochastic Implosion
@
text
@@


1.4
log
@Stochastic Implosion.
@
text
@d45 1
a45 1
      // Local typedef.
d48 6
d80 14
a93 1
      void uploadDataFromCurScen ();
d95 3
a97 3
         // Uploads the value of the represented attribute to each of the
         // owners from the portion of this ScenAttTable that represents the
         // current Scenario.
d101 15
d120 1
a120 4
      accessFunc (WitStochModeMgr *,       myStochModeMgr)
      accessFunc (const WitList <Owner> &, allOwners)

      inline WitTVec <double> & myValue (
a144 4
      WitStochModeMgr * const myStochModeMgr_;
         //
         // The StochModeMgr for this ScenAttTable.

@


1.3
log
@Stochastic Implosion
@
text
@d50 1
a50 1
         // A StoreFunc is an member function of the Owner class that
@


1.2
log
@Stochastic Implosion
@
text
@d106 1
a106 1
         // Implemented non-parametrically.
@


1.1
log
@Stochastic Implosion
@
text
@d86 1
a86 1
      accessFunc (WitScenMgr *,            myScenMgr)
d114 1
a114 1
      WitScenMgr * const myScenMgr_;
d116 1
a116 1
         // The ScenMgr for this ScenAttTable.
@

