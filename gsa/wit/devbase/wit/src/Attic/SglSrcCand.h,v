head	1.12;
access;
symbols
	EndRw-branch:1.7.0.2
	Root-of-EndRw:1.7
	rwToStl:1.4.0.2;
locks; strict;
comment	@ * @;


1.12
date	2003.03.06.20.28.23;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2003.01.02.22.18.49;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.13.20.24.38;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.04.19.17.58;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.26.23.28.51;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.22.21.18.00;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.21.22.54.00;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.15.20.27.13;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.22.19.33.59;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.02.19.20.59;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.01.20.15.33;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.28.19.40.16;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Continued implementation of proportionate routing.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SglSrcCandH
#define SglSrcCandH

//------------------------------------------------------------------------------
// Header file: "SglSrcCand.h"
//
// Contains the declaration of the following classes:
//
//    SglSrcCand
//    PmrSsCand
//    CmrSsCand
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Class SglSrcCand
//
// "Single-Source Candidate"
//
// Represents either a BopEntry or ConsEntry that can be selected for the 
// single-source technique.
// In comments, the BopEntry or ConsEntry associated with this SglSrcCand is 
// called "myComp".
//
// This class is part of the implementation of the new single-source algorithm.
//
// Class Hierarchy:
//
// SglSrcCand
//    PmrSsCand
//    CmrSsCand
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitSglSrcCand: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSglSrcCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool valid (WitPeriod thePer) = 0;
         //
         // Returns true, iff myComp is valid for selection in thePer.

      virtual void applyToMR () = 0;
         //
         // Tells the multi-route subsystem to select myComp in all valid 
         // periods.

      virtual void prtAsSel () = 0;
         //
         // Prints info identifying this SglSrcCand as a selection.

      virtual bool matches (WitBillEntry * theBillEnt) = 0;
         //
         // Returns true, iff theBillEnt is myComp.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSglSrcCand (WitSelector *);

      accessFunc (WitSelector *, mySelector)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSglSrcCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSelector * const mySelector_;
         //
         // The Selector associated with this SglSrcCand.
   };

//------------------------------------------------------------------------------
// Class PmrSsCand
//
// "Production Multi-Route Single-Source Candidate"
//
// Represents a BopEntry that can be selected for the single-source technique.
//
// This class is part of the implementation of the old single-source algorithm.
//
// Class Hierarchy:
//
// SglSrcCand
//    PmrSsCand
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitPmrSsCand: public WitSglSrcCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrSsCand (WitBopEntry *, WitSelector *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPmrSsCand ();

      //------------------------------------------------------------------------
      // Overrides from class SglSrcCand.
      //------------------------------------------------------------------------

      virtual bool valid     (WitPeriod);
      virtual void applyToMR ();
      virtual void prtAsSel  ();
      virtual bool matches   (WitBillEntry *);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPmrSsCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBopEntry * const myBopEnt_;
         //
         // The BopEntry associated with this PmrSsCand.
   };

//------------------------------------------------------------------------------
// Class CmrSsCand
//
// "Consumption Multi-Route Single-Source Candidate"
//
// Represents a ConsEntry that can be selected for the single-source technique.
//
// This class is part of the implementation of the old single-source algorithm.
//
// Class Hierarchy:
//
// SglSrcCand
//    CmrSsCand
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitCmrSsCand: public WitSglSrcCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrSsCand (WitConsEntry *, WitSelector *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCmrSsCand ();

      //------------------------------------------------------------------------
      // Overrides from class SglSrcCand.
      //------------------------------------------------------------------------

      virtual bool valid     (WitPeriod);
      virtual void applyToMR ();
      virtual void prtAsSel  ();
      virtual bool matches   (WitBillEntry *);

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitCmrSsCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitConsEntry * const myConsEnt_;
         //
         // The ConsEntry associated with this CmrSsCand.
   };

#endif
@


1.11
log
@Internal changes.
@
text
@@


1.10
log
@Continued implementation of single-source by the new algorithm.
@
text
@d58 1
a58 1
      virtual WitBoolean valid (WitPeriod thePer) = 0;
d60 1
a60 1
         // Returns TRUE, iff myComp is valid for selection in thePer.
d71 1
a71 1
      virtual WitBoolean matches (WitBillEntry * theBillEnt) = 0;
d73 1
a73 1
         // Returns TRUE, iff theBillEnt is myComp.
d145 4
a148 4
      virtual WitBoolean valid     (WitPeriod);
      virtual void       applyToMR ();
      virtual void       prtAsSel  ();
      virtual WitBoolean matches   (WitBillEntry *);
d208 4
a211 4
      virtual WitBoolean valid     (WitPeriod);
      virtual void       applyToMR ();
      virtual void       prtAsSel  ();
      virtual WitBoolean matches   (WitBillEntry *);
@


1.9
log
@Continued implementation of single-source with the new algorithm.
@
text
@d77 1
a77 1

d81 3
a83 1
      WitSglSrcCand (WitProblem *);
d92 8
d127 1
a127 1
      WitPmrSsCand (WitBopEntry *, WitPmrMgr *);
a162 4

      WitPmrMgr * const myPmrMgr_;
         //
         // The PmrMgr associated with this PmrSsCand.
d190 1
a190 1
      WitCmrSsCand (WitConsEntry *, WitCmrMgr *);
a225 4

      WitCmrMgr * const myCmrMgr_;
         //
         // The CmrMgr associated with this CmrSsCand.
@


1.8
log
@Continued implementation of single-source by the new algorithm.
@
text
@d71 4
d138 1
d205 1
@


1.7
log
@Continued implementation of single-source with the new algorithm.
Fixed a null pointer bug in single-source with the old algorithm.
@
text
@d20 1
d28 2
a29 2
// Represents a BopEntry or ConsEntry that can be selected for the single-source
// technique.
d39 1
d73 1
a73 1
      //------------------------------------------------------------------------
d91 1
a91 1
// "Old Production Multi-Route Single-Source Candidate"
d152 66
@


1.6
log
@Continued implementation of single-source with the new algorithm.
@
text
@d56 4
d129 3
a131 2
      virtual void applyToMR ();
      virtual void prtAsSel  ();
@


1.5
log
@Began implementation of the new single-source algorithm.
@
text
@d17 3
d21 127
@


1.4
log
@Continued implementation of Single-Source.
@
text
@a16 4
//
//    SglSrcCand
//    PmrSsCand
//    CmrSsCand
a17 203

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class SglSrcCand
//
// "Single-Source Candidate"
//
// Represents a BopEntry or ConsEntry that can be selected for the single-source
// technique.
// In comments, the BopEntry or ConsEntry associated with this SglSrcSite is 
// called "myComp".
//
// Class Hierarchy:
//
// SglSrcCand
//    PmrSsCand
//    CmrSsCand
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitSglSrcCand: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitSglSrcCand ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual WitBoolean valid (WitPeriod thePer) = 0;
         //
         // Returns TRUE, iff myComp is currently valid for selection in
         // thePer.

      virtual WitBoolean matchesMrSel (WitPeriod thePer) = 0;
         //          
         // Returns TRUE, iff the current multi-route selection at the Part or
         // BomEntry for myComp in thePer matches myComp.

      virtual void selectForMr (WitPeriod thePer) = 0;
         //
         // Sets the multi-route selection at the Part or BomEntry for myComp in
         // thePer to myComp.

      virtual void prtAsSel () = 0;
         //
         // Prints info identifying this SglSrcCand as a selection.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSglSrcCand (WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitSglSrcCand);
   };

//------------------------------------------------------------------------------
// Class PmrSsCand
//
// "Production Multi-Route Single-Source Candidate"
//
// Represents a BopEntry that can be selected for the single-source technique.
//
// Class Hierarchy:
//
// SglSrcCand
//    PmrSsCand
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitPmrSsCand: public WitSglSrcCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrSsCand (WitBopEntry *, WitPmrMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPmrSsCand ();

      //------------------------------------------------------------------------
      // Overrides from class SglSrcSite.
      //------------------------------------------------------------------------

      virtual WitBoolean valid        (WitPeriod);
      virtual WitBoolean matchesMrSel (WitPeriod);
      virtual void       selectForMr  (WitPeriod);
      virtual void       prtAsSel     ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPmrSsCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBopEntry * const myBopEnt_;
         //
         // The BopEntry associated with this SglSrcCand.

      WitPmrMgr * const myPmrMgr_;
         //
         // The PmrMgr associated with this PmrSsCand.
   };

//------------------------------------------------------------------------------
// Class CmrSsCand
//
// "Consumption Multi-Route Single-Source Candidate"
//
// Represents a ConsEntry that can be selected for the single-source technique.
//
// Class Hierarchy:
//
// SglSrcCand
//    CmrSsCand
//
// Implemented in SglSrc.C.
//------------------------------------------------------------------------------

class WitCmrSsCand: public WitSglSrcCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrSsCand (WitConsEntry *, WitCmrMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCmrSsCand ();

      //------------------------------------------------------------------------
      // Overrides from class SglSrcSite.
      //------------------------------------------------------------------------

      virtual WitBoolean valid        (WitPeriod);
      virtual WitBoolean matchesMrSel (WitPeriod);
      virtual void       selectForMr  (WitPeriod);
      virtual void       prtAsSel     ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitCmrSsCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitConsEntry * const myConsEnt_;
         //
         // The ConsEntry associated with this SglSrcCand.

      WitCmrMgr * const myCmrMgr_;
         //
         // The PmrMgr associated with this CmrSsCand.
   };

#endif
@


1.3
log
@Continued implementation of Single-Source.
@
text
@d18 1
a18 1
//    SglSrcCand.
@


1.2
log
@Continued implementation of Single-Source.
@
text
@d19 2
d30 4
a33 3
// Represents a BopEntry that can be selected for the single-source technique.
// In comments, the BopEntry associated with this SglSrcSite is called
// "myBopEnt".
d39 1
d60 1
a60 1
         // Returns TRUE, iff myBopEnt is currently valid for selection in
d65 2
a66 2
         // Returns TRUE, iff the current multi-route selection at
         // myBopEnt->myPart () in thePer matches myBopEnt.
d70 2
a71 2
         // Sets the multi-route selection at myBopEnt->myPart () in thePer to
         // myBopEnt.
d157 65
@


1.1
log
@Continued implementation of Single-Source.
@
text
@d113 1
a113 1
      WitPmrSsCand (WitBopEntry *, WitSglSrcMgr *);
@

