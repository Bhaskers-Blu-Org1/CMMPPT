head	1.27;
access;
symbols;
locks; strict;
comment	@ * @;


1.27
date	2006.01.12.16.28.33;	author rjw;	state dead;
branches;
next	1.26;

1.26
date	2006.01.11.20.24.23;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2006.01.11.19.31.16;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.10.21.43.00;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.01.10.16.51.53;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2006.01.09.23.42.40;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.09.20.02.30;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.05.21.15.21;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.03.19.00.03;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.30.23.37.56;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2005.12.27.19.43.39;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.20.20.15.24;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.20.19.04.54;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.20.17.09.35;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.19.19.29.26;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.16.20.33.56;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.22.22.20.28;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.21.22.27.20;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.21.18.30.35;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.18.23.36.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.18.21.12.10;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.18.20.38.11;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.17.22.33.33;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.17.22.04.42;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.16.23.24.49;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.15.17.08.19;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.14.22.29.02;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.27
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpCoordH
#define SrpCoordH

//------------------------------------------------------------------------------
// Header file: "SrpCoord.h"
//
// Contains the declaration of class SrpCoord.
//------------------------------------------------------------------------------

#include <PipCoord.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class SrpCoord
//
// "Shared-Resource Pegging Coordinator"
// Owns and manages the pegging for the Shared-Resource Pegging Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    PipCoord
//       SrpCoord
//
// Implemented in SRP.C.
//------------------------------------------------------------------------------

class WitSrpCoord: public WitPipCoord
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpCoord (WitPipSeqMgr *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpCoord ();

      //------------------------------------------------------------------------
      // Overrides from class PipCoord.
      //------------------------------------------------------------------------

      virtual void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips);

      virtual void getSubVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitSubTripStack & subVolTrips);

      virtual void getPartPegTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPipPartAtt::Tag theAttTag,
            WitPartTripStack & thePegTrips);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void checkRestrictions ();
         //
         // Verifies that the various data restrictions for SRP are met.

      void buildPegging ();
         //
         // Builds the pegging.

      noCopyCtorAssign (WitSrpCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitDemand, WitOpnTripStack> myExecVolTrips_;
         //
         // myExecVolTrips_.myElemAt (theDemand, shipPer) is the execVol pegging
         // of theDemand in shipPer, stored in reverse order.
   };

#endif
@


1.26
log
@[shared-resource pegging]
@
text
@@


1.25
log
@[shared-resource pegging]
@
text
@d96 1
a96 1
         // of theDemand in shipPer.
@


1.24
log
@[shared-resource pegging]
@
text
@a72 14
      //------------------------------------------------------------------------
      // Public member functions for building the pegging.
      //------------------------------------------------------------------------

      void pegExecVol (
         WitOperation * theOpn,
         WitPeriod      execPer,
         double         incExecVol,
         WitDemand *    theDemand,
         WitPeriod      shipPer);
      //
      // Pegs incExecVol units of the execution volume of theOpn in execPer to
      // theDemand in shipPer.

d96 1
a96 1
         // of theDemand in shipPer, storedin reverse order.
@


1.23
log
@[shared-resource pegging]
@
text
@d110 1
a110 1
         // of theDemand in shipPer.
@


1.22
log
@[shared-resource pegging]
@
text
@d73 14
@


1.21
log
@[shared-resource pegging]
@
text
@d20 1
a72 2
      virtual void printInternal ();

d83 4
d92 5
@


1.20
log
@[shared-resource pegging]
@
text
@a83 4
      void checkFullShipSeq ();
         //
         // Verifies that the shipment sequence is full.

a88 8

      WitSrpExpSync * mySrpExpSync_;
         //
         // The SrpExpSync owned by this SrpCoord.

      WitSrpPegger * mySrpPegger_;
         //
         // The SrpPegger owned by this SrpCoord.
@


1.19
log
@[shared-resource pegging]
@
text
@a87 4
      void checkSimpleShipSeq ();
         //
         // Verifies that the shipment sequence is simple.

@


1.18
log
@[shared-resource pegging]
@
text
@a97 4
      WitSrpOldSpec * mySrpOldSpec_;
         //
         // The SrpOldSpec owned by this SrpCoord.

@


1.17
log
@[shared-resource pegging]
@
text
@d98 1
a98 1
      WitSrpExpSpec * mySrpExpSpec_;
d100 1
a100 1
         // The SrpExpSpec owned by this SrpCoord.
@


1.16
log
@[shared-resource pegging]
@
text
@d98 1
a98 1
      WitSrpExpGuide * mySrpExpGuide_;
d100 1
a100 1
         // The SrpExpGuide owned by this SrpCoord.
@


1.15
log
@[shared-resource pegging]
@
text
@d106 1
a106 1
      WitSrpGlobPgr * mySrpGlobPgr_;
d108 1
a108 1
         // The SrpGlobPgr owned by this SrpCoord.
@


1.14
log
@[shared-resource pegging]
@
text
@d102 1
a102 1
      WitSrpLocPgg * mySrpLocPgg_;
d104 1
a104 1
         // The SrpLocPgg owned by this SrpCoord.
@


1.13
log
@[shared-resource pegging]
@
text
@d98 1
a98 1
      WitSrpExpSpec * mySrpExpSpec_;
d100 1
a100 1
         // The SrpExpSpec owned by this SrpCoord.
@


1.12
log
@[shared-resource pegging]
@
text
@d98 5
a102 1
      WitSrpLocPgg * myLocPgg_;
d106 1
a106 1
      WitSrpGlobPgr * myGlobPgr_;
@


1.11
log
@[shared-resource pegging]
@
text
@d104 1
a104 1
         // The StpGlobPgr owned by this SrpCoord.
@


1.10
log
@[shared-resource pegging]
@
text
@d72 2
@


1.9
log
@[shared-resource pegging]
@
text
@d86 4
@


1.8
log
@[shared-resource pegging]
@
text
@d92 1
a92 1
      WitSrpLocPgg * mySrpLocPgg_;
d96 1
a96 1
      WitSrpGlobPgr * mySrpGlobPgr_;
@


1.7
log
@[shared-resource pegging]
@
text
@d92 4
@


1.6
log
@[shared-resource pegging]
@
text
@d82 4
@


1.5
log
@[shared-resource pegging]
@
text
@a19 2
#include <PtrSched.h>
#include <TripStack.h>
a81 4
      void pegPart (WitPart * thePart, WitPeriod thePer);
         //
         // Does pegging for thePart in thePer.

d88 1
a88 6
      WitPtrSched <WitPart, WitDblDblStack> myReqInts_;
         //
         // myReqInts_.myElemAt (thePart, thePer) is the set of requirement
         // intervals for thePart in thePer.

      WitOpnTripStack myExecVolTrips_;
d90 1
a90 2
         // During a call to getExecVolTrips, the set of execVol triples to be
         // returned; otherwise empty.
@


1.4
log
@[shared-resource pegging]
@
text
@d21 1
a87 7
      inline WitOpnTripStack & curExecVolTrips ()
         {
         witAssert (curExecVolTripsPtr_ != NULL);

         return * curExecVolTripsPtr_;
         }

d99 1
a99 1
      WitOpnTripStack * curExecVolTripsPtr_;
d101 2
a102 2
         // Ptr to the execVolTrips during a call to getExecVolTrips;
         // otherwise NULL.
@


1.3
log
@[shared-resource pegging]
@
text
@a56 2
      virtual void print ();

@


1.2
log
@[shared-resource pegging]
@
text
@d20 1
d85 11
d101 10
@


1.1
log
@[shared-resource pegging]
@
text
@d80 4
@

