head	1.12;
access;
symbols
	latest_sce_3_10_20010924:1.5.0.4
	sce_3_10_20010924:1.5
	latest_sce_3_00_20010601:1.5.0.2
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2002.08.23.21.00.33;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2002.08.20.19.07.24;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.15.20.03.43;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.06.18.53.39;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.08.21.58.53;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.07.20.14.58;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.01.14.25.56;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.25.14.53.23;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.20.20.08.35;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.41;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.59;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Continued implementation of opt implosion with lot sizes.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ImpLpH
#define ImpLpH

//------------------------------------------------------------------------------
// Header file: "ImpLp.h"
//
// Contains the declaration of class ImpLp.
// This file is at the top of the following linear chain of header files:
//
// ImpLp.h,    which includes:
// LpObjs.h,   which includes:
// PerCon.h,   which includes:
// PerVar.h,   which includes:
// LpModel.h,  which includes:
// ModelEl.h,  which includes:
// Mapping.h.
//------------------------------------------------------------------------------

#include <LpObjs.h>
#include <Problem.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// class ImpLp
// The implosion linear programming model.
//------------------------------------------------------------------------------

class WitImpLp: public WitLpModel
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitImpLp (WitOptImploder * theOptImploder);
         //
         // The arguments are just passed on to the constructor function for
         // LpModel.

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitImpLp ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual WitBoolean needDual ();

      virtual void reportInfeasible ();

      virtual void reportUnbounded ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc (WitBoundsObj  *,        myBoundsObj)
      accessFunc (WitPrimaryObj *,        myPrimaryObj)
      accessFunc (WitObj1Obj *,           myObj1Obj)
      accessFunc (WitRevObj *,            myRevObj)
      accessFunc (WitInvObj *,            myInvObj)
      accessFunc (WitServObj *,           myServObj)
      accessFunc (WitSubObj *,            mySubObj)
      accessFunc (WitObj2Obj *,           myObj2Obj)

      accessFunc (FILE *,                 solnFile)

      accessWrapper (WitCompMgr *, myCompMgr, myProblem ())

      //-----------------------------------------------------------------------
      // Derived ModelEl storing functions.
      // Each of these functions store its argument (a newly constructed
      // instance of a derived class of ModelEl) in the approriate place in
      // this ImpLp.
      //-----------------------------------------------------------------------

      void storeDerived (WitScrapVar *);
      void storeDerived (WitNonSubVar *);
      void storeDerived (WitSubVar *);
      void storeDerived (WitShipVar *);
      void storeDerived (WitSlbvVar *);
      void storeDerived (WitExecVar *);
      void storeDerived (WitStockVar *);
      void storeDerived (WitCumShipVar *);

      void storeDerived (WitResourceCon *);
      void storeDerived (WitSubCon *);
      void storeDerived (WitShipCon *);
      void storeDerived (WitSlbCon *);

      //-----------------------------------------------------------------------
      // ModelEl look-up functions.
      //
      // Each of these functions returns the ModelEl in this ImpLp
      // corresponding to its arguments, if one exists; otherwise NULL.
      //-----------------------------------------------------------------------

      WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod);
      WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod);
      WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod);
      WitShipVar *     myShipVar     (WitDemand *,    WitPeriod);
      WitExecVar *     myExecVar     (WitOperation *, WitPeriod);
      WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod);
      WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod);

      WitResourceCon * myResourceCon (WitPart *,      WitPeriod);
      WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod);
      WitShipCon *     myShipCon     (WitDemand *,    WitPeriod);

      WitSlbvVar *     mySlbvVar     (const WitBoundedVar *);
      WitSlbCon *      mySlbCon      (const WitBoundedVar *);

      //-----------------------------------------------------------------------
      // ModelEl item printing functions.
      //
      // Each of these functions prints its argument to modelFile ().
      //-----------------------------------------------------------------------

      void printItem (WitNode *);
      void printItem (WitBomEntry *);
      void printItem (WitSubEntry *);
      void printItem (WitDemand *);

      void printItem (const WitBoundedVar *);

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void storeBoundedVar (WitBoundedVar * theBoundedVar);
         //
         // Stores theBoundedVar.

      void screenModel ();
         //
         // Performs screening of constraints and variables.

      WitBoolean slbvVarsExist ();
         //
         // Returns TRUE iff there are any slbvVars in this ImpLp.

      void printPeriod (WitPeriod t);
         //
         // Prints t to modelFile ().

      void writeSoln (const WitString & fName);
         //
         // Prints out the primal LP solution from WIT data structures.
         // Writes to a file whose name is given by fName.

      void formModeledSoln ();
         //
         // Forms the modeled part of the comprehensive implosion solution, by
         // copying the values of the optimal primal LP solution.

   private:

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables ();
         //
         // Generates all LpVars for this ImpLp.

      virtual void generateConstraints ();
         //
         // Generates all LpCons for this ImpLp.

      virtual WitLpObj * generateObjectives ();
         //
         // Generates all LpObjs for this ImpLp.

      virtual void printModelElHeading ();

      virtual void displayDerived ();
         //
         // Writes out the bounds counts.

      virtual void printDerived ();
         //
         // Print the BoundedVars part of this ImpLp.

      virtual void initDepVars ();
         //
         // Initializes the dependent variables, i.e., those variables whose
         // initial value depends on the initial value of other variables.

      //-----------------------------------------------------------------------
      // Private member functions relating to output of LP solution.
      //-----------------------------------------------------------------------

      void writeMeSoln (const WitModelEl * theModelEl);
         //
         // Writes the solution value of theModelEl, or blank if it is NULL,
         // or the value is nearly zero.
         // If the ModelEl is a variable, the primal solution value is
         // written; if it is a constraint, the dual value is written.

      void writePartSoln ();
         //
         // Prints out the aspects of the primal LP solution associated with
         // parts. Optionally prints the dual solution for material balance
         // constraints.

      void writeOperationSoln ();
         //
         // Prints out the aspects of the primal LP solution associated with
         // Operations.

      void writeSubEntrySoln ();
         //
         // Prints out the aspects of the primal LP solution associated with
         // SubEntries.

      void writeDemandSoln ();
         //
         // Prints out the aspects of the primal LP solution associated with
         // demands.

      void writeBoundedVarSoln ();
         //
         // Prints out the aspects of the primal LP solution associated with
         // BoundedVars.

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitImpLp);


         // The following are formats used in printing a ModelEl.
         //
      inline static const char * itemFormat ()
         {
         return " %-12s %-12s %-12s";
         }

      inline static const char * periodDFormat ()
         {
         return " %4d";
         }

      inline static const char * periodSFormat ()
         {
         return " %4s";
         }

      WitBoolean scrapVarNeeded (WitPart * thePart, WitPeriod t);
         //
         // Returns TRUE iff a scrap variable is needed for thePart in
         // period t.

      void screenImpCons ();
         //
         // Performs generic screening of the constraints of this ImpLp.
         // Constraints are considered in an order that facilitates
         // cascading of screening, i.e., we try to screen in an order such
         // that if screening constraint A permits constraint B to be screened,
         // then A is screened before B.

      void fixScrapVars ();
         //
         // Determines which scrap variables are not needed and fixes them at
         // zero.

      void relaxCumShipNonNeg ();
         //
         // Relaxes redundant nonnegativity bounds on cumulative shipment
         // variables.

      void screenSlbModelEls ();
         //
         // Screens out the variables and constraints for soft lower bounds
         // that are not soft.

      WitBoolean positiveHardLBsExist ();
         //
         // Returns witTRUE iff myProblem  () has at least one BoundSet with a
         // positive hardLB.

      void printBoundedVars ();
         //
         // Prints information about the BoundedVars of this ImpLp to
         // modelFile ().

      //-----------------------------------------------------------------------
      // Static constant private member data.
      //-----------------------------------------------------------------------

      static const double solnEpsilon;
         //
         // Values must exceed this amount in order to appear in the solution
         // output.

      //-----------------------------------------------------------------------
      // The ModelEl Schedules for this ImpLp.
      //-----------------------------------------------------------------------

      WitSchedule <WitPart,      WitScrapVar    *> myScrapVar_;
      WitSchedule <WitBomEntry,  WitNonSubVar   *> myNonSubVar_;
      WitSchedule <WitSubEntry,  WitSubVar      *> mySubVar_;
      WitSchedule <WitDemand,    WitShipVar     *> myShipVar_;
      WitSchedule <WitBoundSet,  WitSlbvVar     *> mySlbvVar_;
      WitSchedule <WitOperation, WitExecVar     *> myExecVar_;
      WitSchedule <WitMaterial,  WitStockVar    *> myStockVar_;
      WitSchedule <WitDemand,    WitCumShipVar  *> myCumShipVar_;

      WitSchedule <WitPart,      WitResourceCon *> myResourceCon_;
      WitSchedule <WitBomEntry,  WitSubCon      *> mySubCon_;
      WitSchedule <WitDemand,    WitShipCon     *> myShipCon_;
      WitSchedule <WitBoundSet,  WitSlbCon      *> mySlbCon_;

      //-----------------------------------------------------------------------
      // The LpObjs for this ImpLp.
      //-----------------------------------------------------------------------

      WitBoundsObj  *  myBoundsObj_;
      WitPrimaryObj * myPrimaryObj_;
      WitObj1Obj    *    myObj1Obj_;
      WitRevObj     *     myRevObj_;
      WitInvObj     *     myInvObj_;
      WitServObj    *    myServObj_;
      WitSubObj     *     mySubObj_;
      WitObj2Obj    *    myObj2Obj_;

      //-----------------------------------------------------------------------
      // Other private member data.
      //-----------------------------------------------------------------------

      WitList <WitBoundedVar> myBoundedVars_;
         //
         // The list of all BoundedVars in this ImpLp.

      int nSlbvVars_;
         //
         // # soft lower bound violation variables.

      FILE * solnFile_;
         //
         // Solution output file.
   };

#endif
@


1.11
log
@Continued implementation of opt implosion with OSL V3.
@
text
@@


1.10
log
@Continued implementation of opt implosion with OSL V3.
@
text
@d60 1
a60 1
      virtual WitBoolean needDual () const;
d62 1
a62 1
      virtual void reportInfeasible () const;
d64 1
a64 1
      virtual void reportUnbounded () const;
d111 11
a121 11
      WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod) const;
      WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod) const;
      WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod) const;
      WitShipVar *     myShipVar     (WitDemand *,    WitPeriod) const;
      WitExecVar *     myExecVar     (WitOperation *, WitPeriod) const;
      WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod) const;
      WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod) const;

      WitResourceCon * myResourceCon (WitPart *,      WitPeriod) const;
      WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod) const;
      WitShipCon *     myShipCon     (WitDemand *,    WitPeriod) const;
d123 2
a124 2
      WitSlbvVar *     mySlbvVar     (const WitBoundedVar *)     const;
      WitSlbCon *      mySlbCon      (const WitBoundedVar *)     const;
d132 4
a135 4
      void printItem (WitNode *)     const;
      void printItem (WitBomEntry *) const;
      void printItem (WitSubEntry *) const;
      void printItem (WitDemand *)   const;
d137 1
a137 1
      void printItem (const WitBoundedVar *) const;
d151 1
a151 1
      WitBoolean slbvVarsExist () const;
d155 1
a155 1
      void printPeriod (WitPeriod t) const;
d187 1
a187 1
      virtual void printModelElHeading () const;
d189 1
a189 1
      virtual void displayDerived () const;
d193 1
a193 1
      virtual void printDerived () const;
d206 1
a206 1
      void writeMeSoln (const WitModelEl * theModelEl) const;
d234 1
a234 1
      void writeBoundedVarSoln () const;
d291 1
a291 1
      WitBoolean positiveHardLBsExist () const;
d296 1
a296 1
      void printBoundedVars () const;
@


1.9
log
@Continued implementation of Single-Source.
@
text
@a182 5
      virtual WitBoolean calcIsTrivial ();
         //
         // Calculates and returns isTrivial:
         //    TRUE, iff all production variables are fixed at 0.0.

@


1.8
log
@Preliminary work on single source.
@
text
@d30 1
d319 13
a331 13
      WitSchedule <WitPart,      WitTlObj *> & myScrapVar_;
      WitSchedule <WitBomEntry,  WitTlObj *> & myNonSubVar_;
      WitSchedule <WitSubEntry,  WitTlObj *> & mySubVar_;
      WitSchedule <WitDemand,    WitTlObj *> & myShipVar_;
      WitSchedule <WitBoundSet,  WitTlObj *> & mySlbvVar_;
      WitSchedule <WitOperation, WitTlObj *> & myExecVar_;
      WitSchedule <WitMaterial,  WitTlObj *> & myStockVar_;
      WitSchedule <WitDemand,    WitTlObj *> & myCumShipVar_;

      WitSchedule <WitPart,      WitTlObj *> & myResourceCon_;
      WitSchedule <WitBomEntry,  WitTlObj *> & mySubCon_;
      WitSchedule <WitDemand,    WitTlObj *> & myShipCon_;
      WitSchedule <WitBoundSet,  WitTlObj *> & mySlbCon_;
@


1.7
log
@Continued preliminary work on single source.
@
text
@d318 8
a325 8
      WitSchedule <WitPart,      WitTlObjPtr> & myScrapVar_;
      WitSchedule <WitBomEntry,  WitTlObjPtr> & myNonSubVar_;
      WitSchedule <WitSubEntry,  WitTlObjPtr> & mySubVar_;
      WitSchedule <WitDemand,    WitTlObjPtr> & myShipVar_;
      WitSchedule <WitBoundSet,  WitTlObjPtr> & mySlbvVar_;
      WitSchedule <WitOperation, WitTlObjPtr> & myExecVar_;
      WitSchedule <WitMaterial,  WitTlObjPtr> & myStockVar_;
      WitSchedule <WitDemand,    WitTlObjPtr> & myCumShipVar_;
d327 4
a330 4
      WitSchedule <WitPart,      WitTlObjPtr> & myResourceCon_;
      WitSchedule <WitBomEntry,  WitTlObjPtr> & mySubCon_;
      WitSchedule <WitDemand,    WitTlObjPtr> & myShipCon_;
      WitSchedule <WitBoundSet,  WitTlObjPtr> & mySlbCon_;
@


1.6
log
@Preliminary work on single source.
@
text
@d29 1
a29 1
#include <Schedule.h>
d318 13
a330 13
      WitSchedule (WitPart,      WitTlObjPtr) myScrapVar_;
      WitSchedule (WitBomEntry,  WitTlObjPtr) myNonSubVar_;
      WitSchedule (WitSubEntry,  WitTlObjPtr) mySubVar_;
      WitSchedule (WitDemand,    WitTlObjPtr) myShipVar_;
      WitSchedule (WitBoundSet,  WitTlObjPtr) mySlbvVar_;
      WitSchedule (WitOperation, WitTlObjPtr) myExecVar_;
      WitSchedule (WitMaterial,  WitTlObjPtr) myStockVar_;
      WitSchedule (WitDemand,    WitTlObjPtr) myCumShipVar_;

      WitSchedule (WitPart,      WitTlObjPtr) myResourceCon_;
      WitSchedule (WitBomEntry,  WitTlObjPtr) mySubCon_;
      WitSchedule (WitDemand,    WitTlObjPtr) myShipCon_;
      WitSchedule (WitBoundSet,  WitTlObjPtr) mySlbCon_;
@


1.5
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d349 1
a349 1
      WitList (WitBoundedVar) myBoundedVars_;
@


1.4
log
@Further development of coarse selection splitting.
@
text
@d318 8
a325 8
      WitSchedule (WitPart,      WitTlPtr) myScrapVar_;
      WitSchedule (WitBomEntry,  WitTlPtr) myNonSubVar_;
      WitSchedule (WitSubEntry,  WitTlPtr) mySubVar_;
      WitSchedule (WitDemand,    WitTlPtr) myShipVar_;
      WitSchedule (WitBoundSet,  WitTlPtr) mySlbvVar_;
      WitSchedule (WitOperation, WitTlPtr) myExecVar_;
      WitSchedule (WitMaterial,  WitTlPtr) myStockVar_;
      WitSchedule (WitDemand,    WitTlPtr) myCumShipVar_;
d327 4
a330 4
      WitSchedule (WitPart,      WitTlPtr) myResourceCon_;
      WitSchedule (WitBomEntry,  WitTlPtr) mySubCon_;
      WitSchedule (WitDemand,    WitTlPtr) myShipCon_;
      WitSchedule (WitBoundSet,  WitTlPtr) mySlbCon_;
@


1.3
log
@Refactoring for selection splitting.
@
text
@d318 8
a325 8
      WitSchedule (WitPart,      WitTypelessPtr) myScrapVar_;
      WitSchedule (WitBomEntry,  WitTypelessPtr) myNonSubVar_;
      WitSchedule (WitSubEntry,  WitTypelessPtr) mySubVar_;
      WitSchedule (WitDemand,    WitTypelessPtr) myShipVar_;
      WitSchedule (WitBoundSet,  WitTypelessPtr) mySlbvVar_;
      WitSchedule (WitOperation, WitTypelessPtr) myExecVar_;
      WitSchedule (WitMaterial,  WitTypelessPtr) myStockVar_;
      WitSchedule (WitDemand,    WitTypelessPtr) myCumShipVar_;
d327 4
a330 4
      WitSchedule (WitPart,      WitTypelessPtr) myResourceCon_;
      WitSchedule (WitBomEntry,  WitTypelessPtr) mySubCon_;
      WitSchedule (WitDemand,    WitTypelessPtr) myShipCon_;
      WitSchedule (WitBoundSet,  WitTypelessPtr) mySlbCon_;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d247 1
a247 3
      copyCtorAndAssignment (WitImpLp);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
