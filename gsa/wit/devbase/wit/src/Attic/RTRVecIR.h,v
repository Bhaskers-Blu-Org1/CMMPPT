head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.03.08.22.00.21;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2004.03.08.21.11.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.08.16.54.29;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Double Precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RTRVecIRH
#define RTRVecIRH

//------------------------------------------------------------------------------
// Header file: "RTRVecIR.h"
//
// Contains the declaration of the following classes:
//
//    VRTRVecIR.
//    FltVRTRVecIR.
//    DblVRTRVecIR.
//------------------------------------------------------------------------------

#include <FlexVec.h>

//------------------------------------------------------------------------------
// Class VRTRVecIR
//
// "Virtual Run-Time Real Vector Internal Representation"
// The internal representation of a VRTRealVec.
//
// Class Hierarchy:
//
// VRTRVecIR
//    FltVRTRVecIR
//    DblVRTRVecIR
//
// Implemented in RealVec.C.
//------------------------------------------------------------------------------

class WitVRTRVecIR
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitVRTRVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void convCopy (const WitTVec <float> &)     = 0;
      virtual void convCopy (const WitTVec <double> &)    = 0;
      virtual void convCopy (const WitFlexVec <double> &) = 0;
      virtual void convCopy (const float *)               = 0;
         //
         // "Convert-Copy"
         // Each of these functions copies the elements of the argument vector
         // into the corresponding elements of this VRTRVecIR.

      virtual void setToScalar (double theDbl) = 0;
         //
         // Sets every element of this VRTRVecIR to theDbl.

      virtual void convCopyInto (WitTVec <float> &)    const = 0;
      virtual void convCopyInto (WitTVec <double> &)   const = 0;
      virtual void convCopyInto (WitFlexVec <float> &) const = 0;
      virtual void convCopyInto (float *)              const = 0;
         //
         // "Convert-Copy Into"
         // Each of these functions copies the elements of this VRTRVecIR
         // into the corresponding elements of the argument vector.

      virtual bool operator == (double theDbl) const = 0;
         //
         // Returns true iff a every element of this VRTRVecIR == theDbl.

      virtual bool operator >= (double theDbl) const = 0;
         //
         // Returns true iff a every element of this VRTRVecIR >= theDbl.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitVRTRVecIR ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitVRTRVecIR);
   };

//------------------------------------------------------------------------------
// Class FltVRTRVecIR
//
// "Float Virtual Run-Time Real Vector Internal Representation"
// The internal representation of a VRTRealVec, when useDouble is false.
//
// Class Hierarchy:
//
// VRTRVecIR
//    FltVRTRVecIR
//
// Implemented in RealVec.C.
//------------------------------------------------------------------------------

class WitFltVRTRVecIR: public WitVRTRVecIR
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitFltVRTRVecIR (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitFltVRTRVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double operator [] (WitPeriod thePer) const;
         //
         // Returns the element indexed by thePer.

      inline void setElem (WitPeriod thePer, double theDbl);
         //
         // Sets the element of this FltVRTRVecIR indexed by thePer to theDbl.

      inline void incElem (WitPeriod thePer, double theDbl);
         //
         // Adds theDbl to the element of this FltVRTRVecIR indexed by thePer.

      void copy (const WitFltVRTRVecIR & theFltVRTRVecIR);
         //
         // Copies the elements if theFltVRTRVecIR into this FltVRTRVecIR.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Overrides from class VRTRVecIR.
      //------------------------------------------------------------------------

      virtual void convCopy     (const WitTVec <float> &);
      virtual void convCopy     (const WitTVec <double> &);
      virtual void convCopy     (const WitFlexVec <double> &);
      virtual void convCopy     (const float *);
      virtual void setToScalar  (double);
      virtual void convCopyInto (WitTVec <float>  &)   const;
      virtual void convCopyInto (WitTVec <double> &)   const;
      virtual void convCopyInto (WitFlexVec <float> &) const;
      virtual void convCopyInto (float *)              const;
      virtual bool operator ==  (double)               const;
      virtual bool operator >=  (double)               const;

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitFltVRTRVecIR);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitFlexVec <float> myFltFlexVec_;
         //
         // The FlexVec representation of the RealVec.
   };

//------------------------------------------------------------------------------
// Inline implementations for class FltVRTRVecIR.
//------------------------------------------------------------------------------

inline double WitFltVRTRVecIR::operator [] (WitPeriod thePer) const
   {
   return dblFromFlt (myFltFlexVec_[thePer]);
   }

//------------------------------------------------------------------------------

inline void WitFltVRTRVecIR::setElem (WitPeriod thePer, double theDbl)
   {
   myFltFlexVec_.elemRef (thePer) = fltFromDbl (theDbl);
   }

//------------------------------------------------------------------------------

inline void WitFltVRTRVecIR::incElem (WitPeriod thePer, double theDbl)
   {
   myFltFlexVec_.elemRef (thePer) += theDbl;
   }

//------------------------------------------------------------------------------
// Class DblVRTRVecIR
//
// "Double Virtual Run-Time Real Vector Internal Representation"
// The internal representation of a VRTRealVec, when useDouble is true.
//
// Class Hierarchy:
//
// VRTRVecIR
//    DblVRTRVecIR
//
// Implemented in RealVec.C.
//------------------------------------------------------------------------------

class WitDblVRTRVecIR: public WitVRTRVecIR
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDblVRTRVecIR (WitProblem *, double initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDblVRTRVecIR ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline double operator [] (WitPeriod thePer) const;
         //
         // Returns the element indexed by thePer.

      inline void setElem (WitPeriod thePer, double theDbl);
         //
         // Sets the element of this DblVRTRVecIR indexed by thePer to theDbl.

      inline void incElem (WitPeriod thePer, double theDbl);
         //
         // Adds theDbl to the element of this DblVRTRVecIR indexed by thePer.

      void copy (const WitDblVRTRVecIR & theDblVRTRVecIR);
         //
         // Copies the elements if theDblVRTRVecIR into this DblVRTRVecIR.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Overrides from class VRTRVecIR.
      //------------------------------------------------------------------------

      virtual void convCopy     (const WitTVec <float> &);
      virtual void convCopy     (const WitTVec <double> &);
      virtual void convCopy     (const WitFlexVec <double> &);
      virtual void convCopy     (const float *);
      virtual void setToScalar  (double);
      virtual void convCopyInto (WitTVec <float>  &)   const;
      virtual void convCopyInto (WitTVec <double> &)   const;
      virtual void convCopyInto (WitFlexVec <float> &) const;
      virtual void convCopyInto (float *)              const;
      virtual bool operator ==  (double)               const;
      virtual bool operator >=  (double)               const;

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDblVRTRVecIR);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitFlexVec <double> myDblFlexVec_;
         //
         // The FlexVec representation of the RealVec.
   };

//------------------------------------------------------------------------------
// Inline implementations for class DblVRTRVecIR.
//------------------------------------------------------------------------------

inline double WitDblVRTRVecIR::operator [] (WitPeriod thePer) const
   {
   return myDblFlexVec_[thePer];
   }

//------------------------------------------------------------------------------

inline void WitDblVRTRVecIR::setElem (WitPeriod thePer, double theDbl)
   {
   myDblFlexVec_.elemRef (thePer) = theDbl;
   }

//------------------------------------------------------------------------------

inline void WitDblVRTRVecIR::incElem (WitPeriod thePer, double theDbl)
   {
   myDblFlexVec_.elemRef (thePer) += theDbl;
   }

#endif
@


1.2
log
@Double Precision.
@
text
@@


1.1
log
@Double Precision.
@
text
@d18 3
a20 3
//    RTRVecIR.
//    FltRTRVecIR.
//    DblRTRVecIR.
d26 1
a26 1
// Class RTRVecIR
d28 2
a29 2
// "Run-Time Real Vector Internal Representation"
// The internal representation of an RTRealVec.
d33 3
a35 3
// RTRVecIR
//    FltRTRVecIR
//    DblRTRVecIR
d40 1
a40 1
class WitRTRVecIR
d52 1
a52 1
      virtual ~WitRTRVecIR ();
d65 1
a65 1
         // into the corresponding elements of this RTRVecIR.
d69 1
a69 1
         // Sets every element of this RTRVecIR to theDbl.
d77 1
a77 1
         // Each of these functions copies the elements of this RTRVecIR
d82 1
a82 1
         // Returns true iff a every element of this RTRVecIR == theDbl.
d86 1
a86 1
         // Returns true iff a every element of this RTRVecIR >= theDbl.
d98 1
a98 1
      WitRTRVecIR ();
d106 1
a106 1
      noCopyCtorAssign (WitRTRVecIR);
d110 1
a110 1
// Class FltRTRVecIR
d112 2
a113 2
// "Float Run-Time Real Vector Internal Representation"
// The internal representation of an RTRealVec, when useDouble is false.
d117 2
a118 2
// RTRVecIR
//    FltRTRVecIR
d123 1
a123 1
class WitFltRTRVecIR: public WitRTRVecIR
d135 1
a135 1
      WitFltRTRVecIR (WitProblem *, double initValue);
d141 1
a141 1
      virtual ~WitFltRTRVecIR ();
d153 1
a153 1
         // Sets the element of this FltRTRVecIR indexed by thePer to theDbl.
d157 1
a157 1
         // Adds theDbl to the element of this FltRTRVecIR indexed by thePer.
d159 1
a159 1
      void copy (const WitFltRTRVecIR & theFltRTRVecIR);
d161 1
a161 1
         // Copies the elements if theFltRTRVecIR into this FltRTRVecIR.
d170 1
a170 1
      // Overrides from class RTRVecIR.
d189 1
a189 1
      noCopyCtorAssign (WitFltRTRVecIR);
d201 1
a201 1
// Inline implementations for class FltRTRVecIR.
d204 1
a204 1
inline double WitFltRTRVecIR::operator [] (WitPeriod thePer) const
d211 1
a211 1
inline void WitFltRTRVecIR::setElem (WitPeriod thePer, double theDbl)
d218 1
a218 1
inline void WitFltRTRVecIR::incElem (WitPeriod thePer, double theDbl)
d224 1
a224 1
// Class DblRTRVecIR
d226 2
a227 2
// "Double Run-Time Real Vector Internal Representation"
// The internal representation of an RTRealVec, when useDouble is true.
d231 2
a232 2
// RTRVecIR
//    DblRTRVecIR
d237 1
a237 1
class WitDblRTRVecIR: public WitRTRVecIR
d249 1
a249 1
      WitDblRTRVecIR (WitProblem *, double initValue);
d255 1
a255 1
      virtual ~WitDblRTRVecIR ();
d267 1
a267 1
         // Sets the element of this DblRTRVecIR indexed by thePer to theDbl.
d271 1
a271 1
         // Adds theDbl to the element of this DblRTRVecIR indexed by thePer.
d273 1
a273 1
      void copy (const WitDblRTRVecIR & theDblRTRVecIR);
d275 1
a275 1
         // Copies the elements if theDblRTRVecIR into this DblRTRVecIR.
d284 1
a284 1
      // Overrides from class RTRVecIR.
d303 1
a303 1
      noCopyCtorAssign (WitDblRTRVecIR);
d315 1
a315 1
// Inline implementations for class DblRTRVecIR.
d318 1
a318 1
inline double WitDblRTRVecIR::operator [] (WitPeriod thePer) const
d325 1
a325 1
inline void WitDblRTRVecIR::setElem (WitPeriod thePer, double theDbl)
d332 1
a332 1
inline void WitDblRTRVecIR::incElem (WitPeriod thePer, double theDbl)
@

