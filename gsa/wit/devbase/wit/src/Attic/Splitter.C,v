head	1.34;
access;
symbols
	sce_4_05_20040511:1.24
	sce_4_00_20040201:1.24
	nextGenBranch:1.23.0.2
	nextGenRoot:1.23
	sce_3_30_20030627:1.22
	EndRw-branch:1.14.0.4
	Root-of-EndRw:1.14
	rwToStl:1.14.0.2
	latest_sce_3_10_20010924:1.6.0.4
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.6.0.2
	sce_3_00_20010601:1.6;
locks; strict;
comment	@ * @;


1.34
date	2004.12.13.21.25.17;	author rjw;	state dead;
branches;
next	1.33;

1.33
date	2004.12.09.21.34.12;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.12.09.20.13.38;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.12.06.22.38.17;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.12.06.21.08.40;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.12.04.00.02.48;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.12.02.21.25.41;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.11.30.00.19.47;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.11.09.23.08.00;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.11.06.00.30.34;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.24.20.12.34;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.07.10.20.24.47;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.04.11.19.08.30;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.21.21.35.33;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.03.20.19.03.59;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.19.16.48.29;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.14.20.13.03;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.27.21.17.19;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.02.23.40.51;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.02.22.18.51;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.10.30.23.47.33;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.26.19.05.32;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.02.19.04.14;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.22.19.34.00;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.07.20.15.05;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.18.14.02.45;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.15.22.02.51;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.15.21.21.39;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.25.14.53.28;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.17.15.11.17;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.10.22.31.15;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.08.21.35.45;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.24.23.09.58;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.10.21.59.35;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Low-Pri Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "Splitter.C"
//
// Contains the implementation of classes Splitter.
//------------------------------------------------------------------------------

#include <SplitCntr.h>
#include <SplitPt.h>
#include <FlowMon.h>
#include <Splitter.h>
#include <Selector.h>
#include <SelMgr.h>
#include <SelPt.h>
#include <RtCand.h>
#include <ExpRest.h>
#include <RtAn.h>
#include <MrMgr.h>
#include <PoMgr.h>
#include <HeurAtor.h>
#include <BopEntry.h>
#include <MapIdxI.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class Splitter.
//------------------------------------------------------------------------------

WitSplitter::WitSplitter (WitSelector * theSelector):
      WitProbAssoc     (theSelector->myProblem ()),

      mySelector_      (theSelector),
      myFlowMonitor_   (NULL),
      mySplitCntr_     (NULL),
      myExpRest_       (NULL),
      myRtAnalyzer_    (NULL),
      penExec_         (false),
      splitRes_        (myGlobalComp ()->splitRes ()),
      zeroPts_         (myProblem ()),
      splitCommActive_ (false),
      mySplitPts_      (myProblem ())
   {
   WitSelMgr * theSelMgr;

   myMsgFac () ("selSplitMsg");

   if (myGlobalComp ()->lowPriPropRt ())
      myMsgFac () ("lpprWssNYISmsg");

   forEachEl (theSelMgr, mySelector_->mySelMgrs ())
      theSelMgr->setUpSelSplit ();

   myFlowMonitor_ = new WitFlowMonitor (mySelector_->myHeurAtor ());

   mySplitCntr_   = new WitSplitCntr (mySelector_);

   penExec_       = mySelector_->penExec ();

   if (penExec_)
      {
      myExpRest_    = theSelector->myExpRest ();
      myRtAnalyzer_ = theSelector->myRtAnalyzer ();
      }
   }

//------------------------------------------------------------------------------

WitSplitter::~WitSplitter ()
   {
   delete mySplitCntr_;
   delete myFlowMonitor_;
   }

//------------------------------------------------------------------------------

void WitSplitter::commitMaxQty (double & netQty)
   {
   bool scNeeded;
   bool unresFound;

   while (true)
      {
      mySelector_->prepCmqSel ();

      myFlowMonitor_->activate ();

      mySelector_->myHeurAtor ()->commitMaxQtySel (netQty);

      if ((netQty <= 0.0) or not resAltOrRest ())
         {
         myFlowMonitor_->deactivate ();

         break;
         }

      scNeeded = splitCommitNeeded ();
      
      myFlowMonitor_->deactivate ();

      if (scNeeded)
         if (not mySelector_->myHeurAtor ()->failedOn1 ())
            if (mySelector_->myHeurAtor ()->tempCommit (1.0))
               scNeeded = false;

      if (scNeeded)
         {
         splitCommit (unresFound);

         if (unresFound)
            break;
         }
      else
         {
         if (penExec_)
            myExpRest ()->updatePsSup ();

         mySelector_->alterSelSS ();
         }
      }

   if (penExec_)
      myExpRest ()->updatePsSup ();
   }

//------------------------------------------------------------------------------

void WitSplitter::preCommit ()
   {
   WitObjStItr <WitSplitPt> theItr;
   WitSplitPt *             theSplitPt;

   theItr.attachTo (mySplitPts_);

   while (theItr.advance (theSplitPt))
      theSplitPt->initNetSplitList ();
   }

//------------------------------------------------------------------------------

void WitSplitter::postTempCommit (bool success)
   {
   myFlowMonitor_->postTempCommit (success);
   }

//------------------------------------------------------------------------------

WitSelMgr * WitSplitter::lowestBddSelMgr ()
   {
   WitSelMgr * lbSelMgr;
   WitSelMgr * theSelMgr;

   lbSelMgr = NULL;

   forEachEl (theSelMgr, mySelector_->mySelMgrs ())
      if (theSelMgr->boundedSplit ())
         lbSelMgr = theSelMgr;

   return lbSelMgr;
   }

//------------------------------------------------------------------------------

void WitSplitter::recordFlow (WitSelPt * theSelPt, double incFlowVol)
   {
   myFlowMonitor_->recordFlow (theSelPt, incFlowVol);
   }

//------------------------------------------------------------------------------

bool WitSplitter::splitCommitNeeded ()
   {
   WitSelPt * theSelPt;
   double     flowGap;

   WitObjStack <WitSelPt> chgSelPts (myProblem ());

   findHypoChanges (chgSelPts);

   while (chgSelPts.pop (theSelPt))
      if (myFlowMonitor_->splitIsNeeded (theSelPt, true, flowGap))
         return true;

   return false;
   }

//------------------------------------------------------------------------------

void WitSplitter::splitCommit (bool & unresFound)
   {
   int         nItrs;
   bool        tcOK;
   bool        splitFound;
   WitSelMgr * theSelMgr;

   splitCommActive_ = true;
   unresFound       = false;
   nItrs            = 0;
   tcOK             = false;

   mySplitCntr_->initCurSplits ();

   while (not tcOK)
      {
      nItrs ++;

      if (nItrs > myGlobalComp ()->splitItrUB ())
         break;

      buildZeroPts (unresFound, splitFound);

      if (unresFound)
         break;

      if (splitFound)
         splitSels ();

      clearSplitItr ();

      stronglyAssert (resAltOrRest ());

      mySelector_->alterSelSS ();

      if (penExec_)
         {
         myExpRest ()   ->updatePsSup ();

         myRtAnalyzer ()->modifyRouting ();
         }

      tcOK = mySelector_->myHeurAtor ()->tempCommit (1.0);
      }

   if (tcOK)
      mySelector_->myHeurAtor ()->permCommit1SS ();

   mySplitCntr_->countSplits (tcOK);

   forEachEl (theSelMgr, mySelector_->mySelMgrs ())
      theSelMgr->postSplitCommit ();

   deleteContents (mySplitPts_);

   splitCommActive_ = false;
   }

//------------------------------------------------------------------------------

void WitSplitter::buildZeroPts (bool & unresFound, bool & splitFound)
   {
   bool addedZeroPts;

   stronglyAssert (zeroPts_.isEmpty ());

   unresFound = false;
   splitFound = false;

   while (not splitFound)
      {
      unresFound = not resAltOrRest ();

      if (unresFound)
         {
         clearSplitItr ();

         return;
         }

      addedZeroPts = addChgPtsToZeroPts ();

      if (not addedZeroPts)
         return;

      splitFound = tempCommDiscZeroPts ();
      }
   }

//------------------------------------------------------------------------------

void WitSplitter::clearSplitItr ()
   {
   WitObjStack <WitSplitPt> revSplitPts (myProblem ());
   WitSplitPt *             theSplitPt;

   zeroPts_.clear ();

   revSplitPts.revCopyFrom (mySplitPts_);

   mySplitPts_.clear ();

   while (revSplitPts.pop (theSplitPt))
      if (theSplitPt->hasSplits ())
         mySplitPts_.push (theSplitPt);
      else
         delete theSplitPt;
   }

//------------------------------------------------------------------------------

bool WitSplitter::addChgPtsToZeroPts ()
   {
   bool       addedZeroPts;
   WitSelPt * theSelPt;

   WitObjStack <WitSelPt> chgSelPts (myProblem ());

   addedZeroPts = false;

   findHypoChanges (chgSelPts);

   while (chgSelPts.pop (theSelPt))
      {
      if (not theSelPt->isSplit ())
         mySplitPts_.push (new WitSplitPt (this, theSelPt));

      else if (zeroPts_.contains (theSelPt->mySplitPt ()))
         continue;

      zeroPts_.push (theSelPt->mySplitPt ());

      addedZeroPts = true;
      }

   return addedZeroPts;
   }

//------------------------------------------------------------------------------

void WitSplitter::splitSels ()
   {
   bool         success;
   WitSplitPt * searchPt;
   bool         splitNeeded;
   double       flowGap;

   myFlowMonitor_->activate ();

   success = true;

   while (success)
      {
      stronglyAssert (zeroPts_.isNonEmpty ());

      searchPt = findLowestZeroPt ();

      zeroPts_.remove (searchPt);

      success = tempCommDiscZeroPts ();
      }

   splitNeeded =
      myFlowMonitor_->splitIsNeeded (searchPt->mySelPt (), false, flowGap);

   if (splitNeeded)
      searchForFlow (searchPt, flowGap);

   if (resAltOrRest ())
      splitChgPts ();
   else
      {
      success = mySelector_->myHeurAtor ()->tempCommit (1.0);

      stronglyAssert (not success);
      }

   myFlowMonitor_->deactivate ();
   }

//------------------------------------------------------------------------------

bool WitSplitter::resAltOrRest ()
   {
   if (mySelector_->failResAlt ())
      return true;

   else if (penExec_)
      return myExpRest ()->failRestShortOnly ();

   else
      return false;
   }

//------------------------------------------------------------------------------

WitSplitPt * WitSplitter::findLowestZeroPt ()
   {
   WitSplitPt * lowZeroPt;
   WitSplitPt * theZeroPt;

   WitObjStItr <WitSplitPt> theItr;

   stronglyAssert (zeroPts_.isNonEmpty ());

   theItr.attachTo (zeroPts_);

   theItr.advance (lowZeroPt);

   while (theItr.advance (theZeroPt))
      if (theZeroPt->isLowerThan (lowZeroPt))
         lowZeroPt = theZeroPt;

   return lowZeroPt;
   }

//------------------------------------------------------------------------------

void WitSplitter::searchForFlow (WitSplitPt * searchPt, double theFlowVol)
   {
   bool success;
   int  upperGP;
   int  lowerGP;
   int  midGP;

   success = tempCommForSearch (searchPt, splitRes_);

   mySplitCntr_->countBS (success);

   if (not success)
      return;

   lowerGP = 1;
   upperGP = static_cast <int> (ceil (theFlowVol / splitRes_));

   stronglyAssert (upperGP >= 2);

   while (upperGP - lowerGP > 1)
      {
      midGP   = (lowerGP + upperGP) / 2;

      success = tempCommForSearch (searchPt, midGP * splitRes_);

      if (success)
         lowerGP = midGP;
      else
         upperGP = midGP;
      }
   }

//------------------------------------------------------------------------------

bool WitSplitter::tempCommForSearch (WitSplitPt * searchPt, double searchVol)
   {
   bool success;

   searchPt->setNetSearchVol (searchVol);

   success = tempCommDiscZeroPts ();

   searchPt->clearNetSearchVol ();

   return success;
   }

//------------------------------------------------------------------------------

bool WitSplitter::tempCommDiscZeroPts ()
   {
   WitObjStItr <WitSplitPt> theItr;
   WitSplitPt *             theZeroPt;
   bool                     success;

   theItr.attachTo (zeroPts_);

   while (theItr.advance (theZeroPt))
      theZeroPt->setNetSearchVol (0.0);

   success = mySelector_->myHeurAtor ()->tempCommit (1.0);

   theItr.attachTo (zeroPts_);

   while (theItr.advance (theZeroPt))
      theZeroPt->clearNetSearchVol ();

   return success;
   }

//------------------------------------------------------------------------------

void WitSplitter::splitChgPts ()
   {
   WitSplitPt * theSplitPt;

   WitObjStack <WitSplitPt> chgSplitPts (myProblem ());
   WitObjStItr <WitSplitPt> theItr;

   mySplitCntr_->countBatch ();

   findChgSplitPts (chgSplitPts);

   theItr.attachTo (chgSplitPts);

   while (theItr.advance (theSplitPt))
      theSplitPt->activateTotFlowVol ();

   myFlowMonitor_->setTotFlowVols ();

   theItr.attachTo (chgSplitPts);

   while (theItr.advance (theSplitPt))
      {
      theSplitPt->splitSelAsNeeded ();

      theSplitPt->deactivateTotFlowVol ();
      }
   }

//------------------------------------------------------------------------------

void WitSplitter::findChgSplitPts (WitObjStack <WitSplitPt> & chgSplitPts)
   {
   WitSelPt * theSelPt;

   WitObjStack <WitSelPt> chgSelPts (myProblem ());

   findHypoChanges (chgSelPts);

   while (chgSelPts.pop (theSelPt))
      {
      if (not theSelPt->isSplit ())
         mySplitPts_.push (new WitSplitPt (this, theSelPt));

      chgSplitPts.push (theSelPt->mySplitPt ());
      }
   }

//------------------------------------------------------------------------------

void WitSplitter::findHypoChanges (WitObjStack <WitSelPt> & chgSelPts)
   {
   if (penExec_)
      findHypoChangesPE (chgSelPts);
   else
      {
      chgSelPts.clear ();

      if (mySelector_->pendingPts ().isNonEmpty ())
         chgSelPts.push (mySelector_->pendingPts ().firstObject ());
      }
   }

//------------------------------------------------------------------------------

void WitSplitter::findHypoChangesPE (WitObjStack <WitSelPt> & chgSelPts)
   {
   WitSelPt *   altSelPt;
   WitSelCand * savedSelCand;
   WitRtCand *  theRtCand;
   WitPeriod    thePer;
   WitRtSite *  theRtSite;
   WitSelPt *   modSelPt;

   WitRtCandPerStack theMrMods   (myProblem ());
   WitRtCandPerStack theLpprMods (myProblem ());

   stronglyAssert (penExec_);

   if (mySelector_->pendingPts ().isNonEmpty ())
      {
      altSelPt     = mySelector_->pendingPts ().firstObject ();

      savedSelCand = altSelPt->curSelCand ();

      altSelPt->tempAlterSel ();
      }
   else
      altSelPt = NULL;

   myExpRest ()   ->startTempMode ();

   myExpRest ()   ->updatePsSup ();

   myRtAnalyzer ()->findRoutingMods (theMrMods, theLpprMods);

   myExpRest ()   ->finishTempMode ();

   chgSelPts.clear ();

   while (theMrMods.pop (theRtCand, thePer))
      {
      theRtSite = theRtCand->myRtSite ();

      modSelPt  = mySelector_->myMrMgr ()->mySelPtFor (theRtSite, thePer);

      chgSelPts.push (modSelPt);
      }

   if (mySelector_->lpprMode ())
      while (theLpprMods.pop (theRtCand, thePer))
         {
         modSelPt = mySelector_->myPoMgr ()->mySelPtFor (theRtCand, thePer);

         chgSelPts.push (modSelPt);
         }

   if (altSelPt != NULL)
      {
      altSelPt->restoreSel (savedSelCand);

      if (not chgSelPts.contains (altSelPt))
         chgSelPts.push (altSelPt);
      }
   }
@


1.33
log
@Low-Pri Prop-Rt.
@
text
@@


1.32
log
@Atttempt to fix a compiler warning on gcc V3.3.3.
@
text
@d568 1
a568 1
      savedSelCand = altSelPt->selSelCand ();
@


1.31
log
@Low-Pri Prop-Rt.
@
text
@d30 1
@


1.30
log
@Low-Pri Prop-Rt.
@
text
@d27 1
a27 1
#include <PrMgr.h>
d596 1
a596 1
         modSelPt = mySelector_->myPrMgr ()->mySelPtFor (theRtCand, thePer);
@


1.29
log
@Low-Pri Prop-Rt.
@
text
@a53 2
#if 0

a56 2
#endif

@


1.28
log
@Low-Pri Prop-Rt.
@
text
@d54 2
d59 2
@


1.27
log
@Low-Pri Prop-Rt.
@
text
@d54 3
@


1.26
log
@Continued implmentation of low priority proportionate routing.
@
text
@d27 1
a53 3
   if (myGlobalComp ()->lowPriPropRt ())
      myMsgFac () ("lowPriPropRtSSSmsg");

d555 2
a556 1
   WitRtCandPerStack modRtCandPers (myProblem ());
d575 1
a575 1
   myRtAnalyzer ()->findRoutingMods (modRtCandPers);
d581 1
a581 1
   while (modRtCandPers.pop (theRtCand, thePer))
d585 1
a585 1
      modSelPt  = mySelector_->myMrMgr ()->mySelPt (theRtSite, thePer);
d590 8
@


1.25
log
@Continued implementation of pen-exec override of prop-rt.
@
text
@d53 2
a54 2
   if (myGlobalComp ()->penExecOverPropRt ())
      myMsgFac () ("peOverPrSelSplitSmsg");
@


1.24
log
@Continued implementation of PIP.
@
text
@d53 3
@


1.23
log
@Eliminated all compiler warnings on Linux.
Made compiler treat warnings as errors on Linux.
@
text
@d289 1
a289 1
   mySplitPts_.revCopyInto (revSplitPts);
@


1.22
log
@Continued implementation of proportionate routing.
@
text
@d424 1
a424 1
   upperGP = ceil (theFlowVol / splitRes_);
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@a336 1
   double       splitBound;
d357 1
a357 3
      splitBound = findSplitBound (searchPt, flowGap);
   else
      splitBound = 0.0;
d360 1
a360 1
      splitChgPts (searchPt, splitBound);
d409 1
a409 1
double WitSplitter::findSplitBound (WitSplitPt * searchPt, double theFlowVol)
d411 4
a414 2
   bool   success;
   double splitBound;
a417 5
   if (success)
      splitBound = binarySearch (searchPt, theFlowVol);
   else
      splitBound = 0.0;

d420 2
a421 4
   return splitBound;
   }

//------------------------------------------------------------------------------
d423 2
a424 9
double WitSplitter::binarySearch (WitSplitPt * searchPt, double theFlowVol)
   {
   int  upperGP;
   int  lowerGP;
   int  midGP;
   bool success;

   lowerGP  = 1;
   upperGP  = ceil (theFlowVol / splitRes_);
a438 2

   return (lowerGP * splitRes_);
d481 1
a481 1
void WitSplitter::splitChgPts (WitSplitPt * searchPt, double splitBound)
d485 2
a486 2
   WitObjStack  <WitSplitPt> chgSplitPts (myProblem ());
   WitObjStItr  <WitSplitPt> theItr;
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@d568 1
d598 3
a600 2
      modSelPt =
         mySelector_->myMrMgr ()->mySelPt (theRtCand->myRtSite (), thePer);
@


1.19
log
@Continued implementation of proportionate routing.
@
text
@d23 1
d564 5
a568 6
   WitSelPt *     altSelPt;
   WitSelCand *   savedSelCand;
   WitBopEntry *  theBopEnt;
   WitPeriod      thePer;
   WitConsEntry * theConsEnt;
   WitSelPt *     modSelPt;
d570 1
a570 2
   WitBopEntPerStack  modBopEntPers  (myProblem ());
   WitConsEntPerStack modConsEntPers (myProblem ());
d589 1
a589 1
   myRtAnalyzer ()->findRoutingMods (modBopEntPers, modConsEntPers);
d595 1
a595 1
   while (modBopEntPers.pop (theBopEnt, thePer))
d598 1
a598 13
         mySelector_->myMrMgr ()->mySelPt (
            theBopEnt->myPart ()->myRtSite (),
            thePer);

      chgSelPts.push (modSelPt);
      }

   while (modConsEntPers.pop (theConsEnt, thePer))
      {
      modSelPt =
         mySelector_->myMrMgr ()->mySelPt (
            theConsEnt->myBomEnt ()->myRtSite (),
            thePer);
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@d599 3
a601 1
         mySelector_->myPmrMgr ()->mySelPt (theBopEnt->myPart (), thePer);
d609 3
a611 1
         mySelector_->myCmrMgr ()->mySelPt (theConsEnt->myBomEnt (), thePer);
@


1.17
log
@Began implementation of Proportionate Routing.
@
text
@d35 1
a35 1
      WitProbAssoc     (theSelector),
@


1.16
log
@Internal changes.
@
text
@a499 2
   WitSelPt *   theSelPt;
   double       incFlowVol;
@


1.15
log
@Internal changes.
@
text
@d91 1
a91 1
      if ((netQty <= 0.0) || ! resAltOrRest ())
d103 1
a103 1
         if (! mySelector_->myHeurAtor ()->failedOn1 ())
d204 1
a204 1
   while (! tcOK)
d259 1
a259 1
   while (! splitFound)
d261 1
a261 1
      unresFound = ! resAltOrRest ();
d272 1
a272 1
      if (! addedZeroPts)
d314 1
a314 1
      if (! theSelPt->isSplit ())
d367 1
a367 1
      stronglyAssert (! success);
d539 1
a539 1
      if (! theSelPt->isSplit ())
d618 1
a618 1
      if (! chgSelPts.contains (altSelPt))
@


1.14
log
@Fixed the "interference bug" in Single-Source.
@
text
@d42 1
a42 1
      penExec_         (witFALSE),
d45 1
a45 1
      splitCommActive_ (witFALSE),
d80 2
a81 2
   WitBoolean scNeeded;
   WitBoolean unresFound;
d83 1
a83 1
   while (witTRUE)
d105 1
a105 1
               scNeeded = witFALSE;
d142 1
a142 1
void WitSplitter::postTempCommit (WitBoolean success)
d172 1
a172 1
WitBoolean WitSplitter::splitCommitNeeded ()
d182 2
a183 2
      if (myFlowMonitor_->splitIsNeeded (theSelPt, witTRUE, flowGap))
         return witTRUE;
d185 1
a185 1
   return witFALSE;
d190 1
a190 1
void WitSplitter::splitCommit (WitBoolean & unresFound)
d193 2
a194 2
   WitBoolean  tcOK;
   WitBoolean  splitFound;
d197 2
a198 2
   splitCommActive_ = witTRUE;
   unresFound       = witFALSE;
d200 1
a200 1
   tcOK             = witFALSE;
d245 1
a245 1
   splitCommActive_ = witFALSE;
d250 1
a250 3
void WitSplitter::buildZeroPts (
      WitBoolean & unresFound, 
      WitBoolean & splitFound)
d252 1
a252 1
   WitBoolean addedZeroPts;
d256 2
a257 2
   unresFound = witFALSE;
   splitFound = witFALSE;
d301 1
a301 1
WitBoolean WitSplitter::addChgPtsToZeroPts ()
d303 1
a303 1
   WitBoolean addedZeroPts;
d308 1
a308 1
   addedZeroPts = witFALSE;
d322 1
a322 1
      addedZeroPts = witTRUE;
d332 1
a332 1
   WitBoolean   success;
d334 1
a334 1
   WitBoolean   splitNeeded;
d340 1
a340 1
   success = witTRUE;
d354 1
a354 1
      myFlowMonitor_->splitIsNeeded (searchPt->mySelPt (), witFALSE, flowGap);
d375 1
a375 1
WitBoolean WitSplitter::resAltOrRest ()
d378 1
a378 1
      return witTRUE;
d384 1
a384 1
      return witFALSE;
d413 2
a414 2
   WitBoolean success;
   double     splitBound;
d432 4
a435 4
   int        upperGP;
   int        lowerGP;
   int        midGP;
   WitBoolean success;
d459 1
a459 3
WitBoolean WitSplitter::tempCommForSearch (
      WitSplitPt * searchPt, 
      double       searchVol)
d461 1
a461 1
   WitBoolean success;
d474 1
a474 1
WitBoolean WitSplitter::tempCommDiscZeroPts ()
d478 1
a478 1
   WitBoolean               success;
@


1.13
log
@Began implementation of multi-level lot sizes.
@
text
@d85 1
a85 4
      mySelector_->resetResAlt ();

      if (penExec_)
         myRtAnalyzer ()->modifyRouting ();
@


1.12
log
@Fixed a bug in selection splitting discovered by Fukunaga.
@
text
@d25 1
a25 2
#include <PmrMgr.h>
#include <CmrMgr.h>
@


1.11
log
@Continued implementation of Single-Source.
@
text
@d56 1
a56 1
   myFlowMonitor_ = new WitFlowMonitor (myProblem ());
d58 1
a58 1
   mySplitCntr_   = new WitSplitCntr (theSelector);
@


1.10
log
@Continued preliminary work on single source.
@
text
@a82 1
   WitSelPt * theSelPt;
d123 1
a123 2
         if (mySelector_->getPendingPt (theSelPt))
            mySelector_->alterSelection (theSelPt);
a198 1
   WitSelPt *  theSelPt;
d201 1
a204 1
   splitCommActive_ = witTRUE;
d227 1
a227 2
      if (mySelector_->getPendingPt (theSelPt))
         mySelector_->alterSelection (theSelPt);
a243 2
   splitCommActive_ = witFALSE;

d248 2
@


1.9
log
@Began implementation of object iteration.
@
text
@d28 1
@


1.8
log
@Continued implementation of sel-split for pen-exec.
@
text
@d28 1
@


1.7
log
@Continued implementation of sel-split for pen-exec.
@
text
@d58 1
a58 1
   penExec_ = mySelector_->penExec ();
a61 3
      if (! myGlobalComp ()->allowSSPE ())
         myMsgFac () ("ssPeNotAllowedSMsg");

@


1.6
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d1 634
@


1.5
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@a0 420
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "Splitter.C"
//
// Contains the implementation of class Splitter.
//------------------------------------------------------------------------------

#include <Splitter.h>
#include <Selector.h>
#include <SelMgr.h>
#include <SelPt.h>
#include <HeurAllP.h>

//------------------------------------------------------------------------------

WitSplitter::WitSplitter (WitSelector * theSelector):
      WitProbAssoc       (theSelector),

      mySelector_        (theSelector),
      splitRes_          (myGlobalComp ()->splitRes ()),
      splitCommActive_   (witFALSE),
      flowMonMode_       (witFALSE),
       curFlowPairs_     (myProblem ()),
        okFlowPairs_     (myProblem ()),
      failFlowPairs_     (myProblem ()),
      searchPt_          (NULL),
      netSearchVol_      (-1.0),
      nCurSplits_        (0),
      nSplitsDone_       (0),
      nSplitsDiscarded_  (0),
      nUnsplitCaseA_     (0),
      nUnsplitCaseB_     (0),
      nUnsplitCaseC_     (0),
      nUnsplitCaseD_     (0),
      nUnsplitCaseE_     (0),
      nSplitSplitComs_   (0),
      nUnsplitSplitComs_ (0)
   {
   WitSelMgr * theSelMgr;

   myMsgFac () ("selSplitMsg");

   forEachEl (theSelMgr, mySelector_->mySelMgrs ())
      theSelMgr->setUpSelSplit ();
   }

//------------------------------------------------------------------------------

WitSplitter::~WitSplitter ()
   {
   if (myGlobalComp ()->selPrintLevel () >= 1)
      {
      fprintf (msgFile (),
         "# Splits Performed:     %7d\n"
         "# Splits Discarded:     %7d\n"
         "# Unsplit Alts, Case A: %7d\n"
         "# Unsplit Alts, Case B: %7d\n"
         "# Unsplit Alts, Case C: %7d\n"
         "# Unsplit Alts, Case D: %7d\n"
         "# Unsplit Alts, Case E: %7d\n"
         "# Alts, Total:          %7d\n\n"
         "#   Split Split-Coms:   %7d\n"
         "# Unsplit Split-Coms:   %7d\n\n",

         nSplitsDone_,
         nSplitsDiscarded_,
         nUnsplitCaseA_,
         nUnsplitCaseB_,
         nUnsplitCaseC_,
         nUnsplitCaseD_,
         nUnsplitCaseE_,
         mySelector_->nAlts (),
         nSplitSplitComs_,
         nUnsplitSplitComs_);

      if (
               nSplitsDone_
            +  nSplitsDiscarded_
            +  nUnsplitCaseA_
            +  nUnsplitCaseB_
            +  nUnsplitCaseC_
            +  nUnsplitCaseD_
            +  nUnsplitCaseE_
            != mySelector_->nAlts ())

         myMsgFac () ("internalErrorFmsg", "Splitter::~Splitter ");
      }
   }

//------------------------------------------------------------------------------

void WitSplitter::startFlowMon ()
   {
   witAssert (! flowMonMode_);

   flowMonMode_ = witTRUE;
   }

//------------------------------------------------------------------------------

void WitSplitter::recordFlow (WitSelPt * theSelPt, double incFlowVol)
   {
   if (flowMonMode_)
      if (theSelPt->splittable ())
         if (! theSelPt->mySelMgr (mySelector_)->boundedSplit ())
            curFlowPairs_.push (theSelPt, incFlowVol);
   }

//------------------------------------------------------------------------------

void WitSplitter::postTempCommit (WitBoolean success)
   {
   if (flowMonMode_)
      {
      if (success)
           okFlowPairs_.takeContents (curFlowPairs_);
      else
         failFlowPairs_.takeContents (curFlowPairs_);
      }
   }

//------------------------------------------------------------------------------

void WitSplitter::alterSelections ()
   {
   WitSelPt * theSelPt;
   double     dummyFlowGap;
   WitBoolean splitNeeded;

   mySelector_->printPreAltIA ();

   if (! mySelector_->getPendingPt (theSelPt))
      {
      finishFlowMon ();

      return;
      }

   splitNeeded = splitIsNeeded (theSelPt, dummyFlowGap);

   finishFlowMon ();

   if (splitNeeded)
      splitCommit (theSelPt);
   else
      {
      mySelector_->alterSelection (theSelPt);

      if (myGlobalComp ()->selPrintLevel () >= 1)
         nUnsplitCaseA_ ++;
      }
   }

//------------------------------------------------------------------------------

void WitSplitter::applySearchVol (double & splitVol)
   {
   if (netSearchVol_ < splitVol)
      {
      splitVol       = netSearchVol_;

      netSearchVol_  = 0.0;
      }
   else
      netSearchVol_ -= splitVol;
   }

//------------------------------------------------------------------------------

WitBoolean WitSplitter::splitIsNeeded (WitSelPt * theSelPt, double & flowGap)
   {
   WitPairStItr (WitSelPt, double) theItr;
   WitSelPt *                      curSelPt;
   double                          incFlowVol;

   witAssert (flowMonMode_);
   witAssert (theSelPt != NULL);

   flowGap = 0.0;

   if (! theSelPt->splittable ())
      return witFALSE;

   theItr.attachTo (failFlowPairs_);

   while (theItr.advance (curSelPt, incFlowVol))
      if (curSelPt == theSelPt)
         flowGap += incFlowVol;

   theItr.attachTo (okFlowPairs_);

   while (theItr.advance (curSelPt, incFlowVol))
      if (curSelPt == theSelPt)
         flowGap -= incFlowVol;

   return (flowGap > myGlobalComp ()->splitTol () + SEARCH_TOL);
   }

//------------------------------------------------------------------------------

void WitSplitter::splitCommit (WitSelPt * theSelPt)
   {
   WitBoolean  tempCommOK;
   WitBoolean  resFound;
   WitBoolean  splitDone;
   WitSelMgr * theSelMgr;

   witAssert (! splitCommActive_);

   splitCommActive_ = witTRUE;

   if (myGlobalComp ()->selPrintLevel () >= 1)
      nCurSplits_ = 0;

   splitItr (tempCommOK, resFound, splitDone);

   if (tempCommOK || ! resFound)
      {
      mySelector_->alterSelection (theSelPt);

      countSplits1 (tempCommOK);
      }
   else if (splitDone)
      {
      while (resFound)
         splitItr (tempCommOK, resFound, splitDone);

      if (tempCommOK)
         mySelector_->myHeurAllPerf ()->permCommit1SS ();

      countSplits2 (tempCommOK);
      }

   forEachEl (theSelMgr, mySelector_->mySelMgrs ())
      theSelMgr->postSplitCommit ();

   splitCommActive_ = witFALSE;
   }

//------------------------------------------------------------------------------

void WitSplitter::finishFlowMon ()
   {
   witAssert (flowMonMode_);

     okFlowPairs_.clear ();
   failFlowPairs_.clear ();

   flowMonMode_ = witFALSE;
   }

//------------------------------------------------------------------------------

void WitSplitter::splitItr (
      WitBoolean & tempCommOK, 
      WitBoolean & resFound,
      WitBoolean & splitDone)
   {
   WitSelPt * theSelPt;
   double     theFlowVol;

   resFound   = witFALSE;
   splitDone  = witFALSE;

   startFlowMon ();

   tempCommOK = mySelector_->myHeurAllPerf ()->tempCommit (1.0);

   if (tempCommOK)
      {
      finishFlowMon ();

      return;
      }

   resFound = mySelector_->getPendingPt (theSelPt);

   if (! resFound)
      {
      finishFlowMon ();

      return;
      }

   splitDone = splitIsNeeded (theSelPt, theFlowVol);

   finishFlowMon ();

   if (splitDone)
      splitSelection (theSelPt, theFlowVol);

   mySelector_->alterSelection (theSelPt);

   if (myGlobalComp ()->selPrintLevel () >= 1)
      if (! splitDone)
         nUnsplitCaseE_ ++;
   }

//------------------------------------------------------------------------------

void WitSplitter::splitSelection (WitSelPt * theSelPt, double theFlowVol)
   {
   int        upperGP;
   int        lowerGP;
   int        midGP;
   WitBoolean success;

   success = tempCommForSearch (theSelPt, splitRes_);

   if (! success)
      {
      if (myGlobalComp ()->selPrintLevel () >= 1)
         nUnsplitCaseD_ ++;

      return;
      }

   lowerGP = 1;
   upperGP = ceil (theFlowVol / splitRes_);

   witAssert (upperGP >= 2);

   midGP = 1;

   while (upperGP - lowerGP > 1)
      {
      midGP      = (lowerGP + upperGP) / 2;

      success    = tempCommForSearch (theSelPt, midGP * splitRes_);

      if (success)
         lowerGP = midGP;
      else
         upperGP = midGP;
      }

   theSelPt->splitSelection (lowerGP * splitRes_);

   if (myGlobalComp ()->selPrintLevel () >= 1)
      nCurSplits_ ++;
   }

//------------------------------------------------------------------------------

WitBoolean WitSplitter::tempCommForSearch (
      WitSelPt * theSelPt, 
      double     searchVol)
   {
   WitBoolean tempCommOK;
   WitSelPt * tracePt;

   witAssert (theSelPt  != NULL);
   witAssert (searchPt_ == NULL);

   searchPt_     = theSelPt;
   netSearchVol_ = searchVol;

   tempCommOK    = mySelector_->myHeurAllPerf ()->tempCommit (1.0);

   netSearchVol_ = -1.0;
   searchPt_     = NULL;

   if (tempCommOK)
      return witTRUE;

   if (! mySelector_->getPendingPt (tracePt))
      return witTRUE;

   if (tracePt != theSelPt)
      return witTRUE;

   return witFALSE;
   }

//------------------------------------------------------------------------------

void WitSplitter::countSplits1 (WitBoolean tempCommOK)
   {
   if (myGlobalComp ()->selPrintLevel () < 1)
      return;

   nUnsplitSplitComs_ ++;

   if (tempCommOK)
      nUnsplitCaseB_ ++;
   else
      nUnsplitCaseC_ ++;
   }

//------------------------------------------------------------------------------

void WitSplitter::countSplits2 (WitBoolean tempCommOK)
   {
   if (myGlobalComp ()->selPrintLevel () < 1)
      return;

   if (tempCommOK)
      {
      nSplitsDone_          += nCurSplits_;

      if (nCurSplits_ > 0)
         nSplitSplitComs_   ++;
      else
         nUnsplitSplitComs_ ++;
      }
   else
      {
      nSplitsDiscarded_     += nCurSplits_;

      nUnsplitSplitComs_    ++;
      }
   }
@


1.4
log
@Renamed AltPt classes to SelPt classes.
@
text
@d47 2
d50 3
a110 2
   witAssert (theSelPt->splittable ());

d112 3
a114 2
      if (! theSelPt->mySelMgr (mySelector_)->boundedSplit ())
         curFlowPairs_.push (theSelPt, incFlowVol);
@


1.3
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@d19 1
a19 1
#include <AltPt.h>
d104 1
a104 1
void WitSplitter::recordFlow (WitAltPt * theAltPt, double incFlowVol)
d106 1
a106 1
   witAssert (theAltPt->splittable ());
d109 2
a110 2
      if (! theAltPt->mySelMgr (mySelector_)->boundedSplit ())
         curFlowPairs_.push (theAltPt, incFlowVol);
d130 1
a130 1
   WitAltPt * theAltPt;
d136 1
a136 1
   if (! mySelector_->getPendingPt (theAltPt))
d143 1
a143 1
   splitNeeded = splitIsNeeded (theAltPt, dummyFlowGap);
d148 1
a148 1
      splitCommit (theAltPt);
d151 1
a151 1
      mySelector_->alterSelection (theAltPt);
d174 1
a174 1
WitBoolean WitSplitter::splitIsNeeded (WitAltPt * theAltPt, double & flowGap)
d176 2
a177 2
   WitPairStItr (WitAltPt, double) theItr;
   WitAltPt *                      curAltPt;
d181 1
a181 1
   witAssert (theAltPt != NULL);
d185 1
a185 1
   if (! theAltPt->splittable ())
d190 2
a191 2
   while (theItr.advance (curAltPt, incFlowVol))
      if (curAltPt == theAltPt)
d196 2
a197 2
   while (theItr.advance (curAltPt, incFlowVol))
      if (curAltPt == theAltPt)
d205 1
a205 1
void WitSplitter::splitCommit (WitAltPt * theAltPt)
d223 1
a223 1
      mySelector_->alterSelection (theAltPt);
d263 1
a263 1
   WitAltPt * theAltPt;
d280 1
a280 1
   resFound = mySelector_->getPendingPt (theAltPt);
d289 1
a289 1
   splitDone = splitIsNeeded (theAltPt, theFlowVol);
d294 1
a294 1
      splitSelection (theAltPt, theFlowVol);
d296 1
a296 1
   mySelector_->alterSelection (theAltPt);
d305 1
a305 1
void WitSplitter::splitSelection (WitAltPt * theAltPt, double theFlowVol)
d312 1
a312 1
   success = tempCommForSearch (theAltPt, splitRes_);
d333 1
a333 1
      success    = tempCommForSearch (theAltPt, midGP * splitRes_);
d341 1
a341 1
   theAltPt->splitSelection (lowerGP * splitRes_);
d350 1
a350 1
      WitAltPt * theAltPt, 
d354 1
a354 1
   WitAltPt * tracePt;
d356 1
a356 1
   witAssert (theAltPt  != NULL);
d359 1
a359 1
   searchPt_     = theAltPt;
d373 1
a373 1
   if (tracePt != theAltPt)
@


1.2
log
@Added various counts to the debugging output of selection splitting.
@
text
@a155 2

   mySelector_->printPostAltIA ();
@


1.1
log
@Continuing development of selection splitting.
@
text
@d25 1
a25 1
      WitProbAssoc     (theSelector),
d27 19
a45 9
      mySelector_      (theSelector),
      splitRes_        (myGlobalComp ()->splitRes ()),
      splitCommActive_ (witFALSE),
      flowMonMode_     (witFALSE),
       curFlowPairs_   (myProblem ()),
        okFlowPairs_   (myProblem ()),
      failFlowPairs_   (myProblem ()),
      searchPt_        (NULL),
      netSearchVol_    (-1.0)
d54 37
d150 1
d153 4
d218 3
d224 1
d226 3
d236 2
d299 4
d307 1
a307 1
WitBoolean WitSplitter::splitSelection (WitAltPt * theAltPt, double theFlowVol)
d317 6
a322 1
      return witFALSE;
d345 2
a346 1
   return witTRUE;
d379 39
@

