head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2005.01.10.22.34.48;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2004.12.31.18.28.28;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.28.19.21.18;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.24.00.02.27;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.22.22.27.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.21.22.13.49;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.14.22.37.10;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.13.23.35.48;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.09.23.57.02;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.06.22.38.15;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Low-Pri Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PoCoordH
#define PoCoordH

//------------------------------------------------------------------------------
// Header file: "PoCoord.h"
//
// Contains the declaration of class PoCoord.
//------------------------------------------------------------------------------

#include <RtCase.h>
#include <Assoc.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class PoCoord
//
// "Proportionate Routing Coordinator"
//
// Internal Coordinator of the Proportionate Routing Subsystem.
// Old Version
//
// Class Hierarchy:
//
// ProbAssoc
//    PoCoord
//
// Implemented in PropOt.C.
//------------------------------------------------------------------------------

class WitPoCoord: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPoCoord (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPoCoord ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void definePropExp (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at theRtSite
         // in thePer.

      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff theRtCand is currently active for proportionate
         // explosions in thePer.

      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
         //
         // Sets the "active for prop-rt status" of theRtCand in thePer to
         // theValue.

      bool potActive (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff proportionate routing thru theRtCand in thePer has
         // not been permanently ruled out.
         // Note that potActive () and active () return the same value, except
         // in low-pri prop-rt mode.

      WitAltPt * myAltPtFor (WitRtCand * theRtCand, WitPeriod thePer); 
         //
         // myAltPtFor for explosion thru theRtCand in thePer.

      void print ();
         //
         // Prints the proportionate routing subsystem.

      double totRoutingShare (
            const WitRtCandStack & theRtCands,
            WitPeriod              thePer);
         //
         // Returns the total routingShare for theRtCands in thePer.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff the proportionate routing thru theRtSite in thePer
         // is split. Valid only in sel-split mode.

      void defineSplit (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Defines a split proportionate explosion of expVol units at theRtSite
         // in thePer, by setting the following arguments:
         //
         // theExpPairs: The explosion pairs for the bounded portion of the
         //              split.
         // unbddVol:    The splitVol for the unbounded portion of the split.

      void recordFlowSS (
            WitRtSite * theRtSite,
            WitPeriod   thePer,
            double      incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through theRtSite in thePer, for sel-split purposes.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSelector *, mySelector)
      accessFunc (WitRtMgr *,    myRtMgr)

      WitPoPt * myPoPtFor (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns the PoPt for theRtCand and thePer owned by this PoCoord, if
         // any; otherwise NULL.

      WitPoSelMgr * myPoSelMgrFor (WitRtCase theRtCase);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildPoBrPts ();
         //
         // Creates the PoBrPts owned by this PoCoord.

      void buildPoPts ();
         //
         // Creates the PoPts owned by this PoCoord.

      void definePropExp (
            const WitRtCandStack & theRtCands,
            WitPeriod              thePer,
            double                 expVol,
            WitRtCandDblStack &    theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at theRtCands
         // in thePer.

      bool hasPoBrPtsFor (WitRtSite * theRtSite);
         //
         // Returns true iff the vector of PoBrPts for theRtSite is allocated.

      noCopyCtorAssign (WitPoCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPoSelMgr * myPoSelMgrForProd_;
      WitPoSelMgr * myPoSelMgrForCons_;
         //
         // The PoSelMgrs for the production and consumption cases of
         // proportionate routing owned by this PoCoord.

      WitPtrSched <WitRtSite, WitPoBrPt> myPoBrPts_;
         //
         // myPoBrPts_.myPtrAt (theRtSite, thePer) is the PoBrPt owned by this
         // PoCoord that represents theRtSite and thePer, if any; else NULL.

      WitPtrSched <WitRtCand, WitPoPt> myPoPts_;
         //
         // myPoPts_.myPtrAt (theRtCand, thePer) is the PoPt owned by this
         // PoCoord that represents theRtCand and thePer, if any; else NULL.

      WitSelector * const mySelector_;
         //
         // The Selector for this PoCoord.

      WitRtMgr * const myRtMgr_;
         //
         // The RtMgr for this PoCoord.
   };

#endif
@


1.9
log
@Low-Pri Prop-Rt.
@
text
@@


1.8
log
@Low-Pri Prop-Rt.
@
text
@a168 11
      void findSplitVols (
            WitPoPt * thePoPt,
            double    expVol,
            double &  splitVol,
            double &  unbddVol);
         //
         // Sets the following arguments for a split proportionate explosion of
         // expVol units at thePoPt:
         // splitVol: The split volume for the   bounded portion of the split.
         // unbddVol: The split volume for the unbounded portion of the split.

@


1.7
log
@Low-Pri Prop-Rt.
@
text
@d86 1
a86 1
      WitSelAlt * mySelAltFor (WitRtCand * theRtCand, WitPeriod thePer); 
d88 1
a88 1
         // mySelAltFor for explosion thru theRtCand in thePer.
@


1.6
log
@Low-Pri Prop-Rt.
@
text
@d83 1
a83 1
         // Note that funcActive () and active () return the same value, except
@


1.5
log
@Low-Pri Prop-Rt.
@
text
@d29 1
@


1.4
log
@Low-Pri Prop-Rt.
@
text
@d85 1
a85 1
      WitSelPt * mySelPtForAlt (WitRtCand * theRtCand, WitPeriod thePer); 
d87 1
a87 1
         // mySelPtForAlt for explosion thru theRtCand in thePer.
@


1.3
log
@Low-Pri Prop-Rt.
@
text
@a133 3
      accessFunc (WitPoCand *,   actCand)
      accessFunc (WitPoCand *,   provInactCand)
      accessFunc (WitPoCand *,   fundInactCand)
a194 15
      WitPoCand * actCand_;
      WitPoCand * provInactCand_;
      WitPoCand * fundInactCand_;
         //
         // PoCands owned by this PoCoord:
         //
         //    PoCand           Status                    Active?   PotActive?
         //    ------           ------                    -------   ----------
         //    actCand_         Active                    true      true
         //    provInactCand_   Provisionally Inactive    false     true
         //    fundInactCand_   Fundamentally Inactive    false     false
         //
         // Note that provInactCand_ is only used in low-pri prop-rt mode.
         // Used only for sel-split.

@


1.2
log
@Low-Pri Prop-Rt.
@
text
@d145 1
a145 1
      WitPoSelMgr * myPoSelMgr (WitRtCase theRtCase);
@


1.1
log
@Low-Pri Prop-Rt.
@
text
@d211 1
@

