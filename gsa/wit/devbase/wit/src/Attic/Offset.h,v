head	1.19;
access;
symbols
	sce_5_01_20080919:1.17
	latest_sce_4_20_20060523:1.6.0.2
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.5.0.2
	sce_4_20_OSL:1.5
	sce_410_withVa:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.4
	Root-of-EndRw:1.2
	rwToStl:1.2.0.2;
locks; strict;
comment	@ * @;


1.19
date	2009.07.07.22.58.47;	author rjw;	state dead;
branches;
next	1.18;

1.18
date	2009.07.07.18.32.30;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.15.17.15.34;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.08.18.26.09;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.05.21.06.01;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.05.16.15.23;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.04.21.06.39;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.04.20.07.11;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.01.20.31.29;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.30.16.01.19;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.27.22.59.29;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.02.27.19.59.32;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.08.22.47.35;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.02.17.34.05;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.30.21.57.56;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.10.22.53.20;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.02.22.18.37;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.23.18.09.13;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.22.22.42.21;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Re-organized code.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OffsetH
#define OffsetH

//------------------------------------------------------------------------------
// Header file: "Offset.h"
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class OffsetProc
// "Offset preprocessor"
//
// Responsible for computing:
//    WitOperation::executable_
//    WitBillEntry::impactPeriod_
// as part of preprocessing.
//
// Implemented in PreHelp.C.
//------------------------------------------------------------------------------

class WitOffsetProc: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOffsetProc (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOffsetProc ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void roundOffsets ();
         //
         // Computes impact periods by applying a special rounding algorithm on
         // offsets, designed to avoid cumulative round-off errors.
         // Data computed:
         //    impactPeriod for each BomEntry and each BopEntry.
         //    executable for each Operation.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void truncateOffsets ();
         //
         // Computes truncOffset_;

      void truncateOffset (WitBillEntry * theBillEnt);
         //
         // Computes truncOffset_ (theBillEnt).

      bool roundOffsets (WitOperation * theOpn, WitPeriod thePer);
         //
         // Computes impactPeriods for the BomEntries and BopEntries of
         // theOpn in period t.
         // Also checks for the various conditions under which execution of
         // theOpn is to be forbidden in period t.
         // If any such condition occurs, computation is terminated and false
         // is returned, indicating forbidden execution.
         // Otherwise true is returned.

      bool compImpactPeriod (WitConsEntry * theConsEnt, WitPeriod thePer);
         //
         // Computes theConsEnt->impactPeriod_[thePer].
         // If this functions discovers that execution of
         // theConsEnt->myOperation () in thePer is to be forbidden, the
         // computation is aborted and the function returns false.
         // Otherwise returns true.

      void copyImpactPeriod (WitSubEntry * theSub, WitPeriod thePer);
         //
         // Copies impactPeriod to theSub from its BomEntry.

      bool compImpactPeriod (WitBopEntry * theBopEnt, WitPeriod thePer);
         //
         // CompImpactPeriod for a BopEntry.

      static int ltRoundDown (double leadTime);
         //
         // Returns leadTime rounded down to an int with some numerical fuzz.

      void resetExec (WitOperation * theOpn, WitPeriod thePer);
         //
         // Turns off impactPeriods and dblCumLead given theOpn cannot
         // be executed in period t.

      void updateProdCumLeads (
            WitOperation *     theOpn,
            WitTVec <double> & leadToImpact,
            WitTVec <bool> &   hasImpact);
         //
         // Updates dblCumLead_ for the Parts produced by theOpn.
         // For a given BopEntry, and Period thePer:
         //    hadImpact[thePer] is true, iff the BopEntry has an 
         //       impactPeriod == thePer
         //    leadToImpact[thePer] is the double cum lead time for impactPeriod
         //       thePer, if any.

      double workOffset (WitBillEntry * theBillEnt, WitPeriod thePer);
         //
         // Returns the "working offset" of theBillEnt in thePer, i.e., either
         // the actual offset or the truncated offset, as appropriate.

      noCopyCtorAssign (WitOffsetProc);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSchedule <WitBillEntry, double> truncOffset_;
         //
         // If truncOffsets is true,
         //    truncOffset_ (theBillEnt)[thePer] is 
         //    theBillEnt->offset ()[thePer], truncated to avoid a negative
         //    impact Period.
         // Otherwise not allocated.

      WitSchedule <WitNode, double> dblCumLead_;
         //
         // dblCumLead_ (theNode)[thePer] is the double cumulative lead time of
         // theNode for execution in thePer, if theNode is an Operation or
         // production in thePer, if theNode is a Part.
   };

#endif
@


1.18
log
@Made a function non-inline to avoid a compiler warning.
@
text
@@


1.17
log
@Stochastic Implosion
@
text
@a73 2
      inline double workOffset (WitBillEntry * theBillEnt, WitPeriod thePer);

d121 5
@


1.16
log
@Stochastic Implosion
@
text
@a48 13
      // Reference receiving functions.
      // Each of these functions stores its reference arguments on the
      // assumption that they refer to the similarly named data members of the
      // first argument.
      //------------------------------------------------------------------------

      void receiveRefs (WitOperation *,
                        WitTVec <bool>      & executableRef);

      void receiveRefs (WitBillEntry *,
                        WitTVec <WitPeriod> & impactPeriodRef);

      //------------------------------------------------------------------------
a141 7

      //------------------------------------------------------------------------
      // Reference holders to the data to be computed by this OffsetProc.
      //------------------------------------------------------------------------

      WitRefMap <WitOperation, WitTVec <bool>      > executable_;
      WitRefMap <WitBillEntry, WitTVec <WitPeriod> > impactPeriod_;
@


1.15
log
@Stochastic Implosion
@
text
@d56 1
a56 1
                        WitTVec <bool>      & executableArg);
d59 1
a59 1
                        WitTVec <WitPeriod> & impactPeriodArg);
@


1.14
log
@Stochastic Implosion
@
text
@d40 1
a40 1
      WitOffsetProc (WitPreData *);
a141 4
      WitPreData * const myPreData_;
         //
         // The PreData for this OffsetProc.

@


1.13
log
@Stochastic Implosion
@
text
@d56 1
a56 1
                        WitFlexVec <bool>      & executableArg);
d59 1
a59 1
                        WitFlexVec <WitPeriod> & impactPeriodArg);
d164 2
a165 2
      WitRefMap <WitOperation, WitFlexVec <bool>      > executable_;
      WitRefMap <WitBillEntry, WitFlexVec <WitPeriod> > impactPeriod_;
@


1.12
log
@Stochastic Implosion
@
text
@d49 13
@


1.11
log
@Stochastic Implosion
@
text
@d146 7
@


1.10
log
@Stochastic Implosion
@
text
@d58 1
a58 1
         //    executeable for each Operation.
@


1.9
log
@[disallowed backlog]
@
text
@d40 1
a40 1
      WitOffsetProc (WitProblem *);
d129 4
@


1.8
log
@Rescinded all changed made since 1/31/07.
@
text
@a59 12
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (
         WitTVec <bool>      WitOperation::* executableArg);

      static void receiveDMPs (
         WitTVec <WitPeriod> WitBillEntry::* impactPeriodArg);

a128 14
      //------------------------------------------------------------------------
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // E.g., theOpn->*executable_ == theOpn->executable_.
      //------------------------------------------------------------------------

      static WitTVec <bool>      WitOperation::* executable_;
      static WitTVec <WitPeriod> WitBillEntry::* impactPeriod_;

      //------------------------------------------------------------------------
      // Other private member data.
      //------------------------------------------------------------------------

@


1.7
log
@[disallowed backlog]
@
text
@d26 1
a26 1
//    WitBillEntry::impactPerioN_
d60 12
d100 1
a100 1
         // Computes theConsEnt->impactPerioN_[thePer].
d142 10
@


1.6
log
@Updated the copyright date on all source files.
@
text
@d26 1
a26 1
//    WitBillEntry::impactPeriod_
a59 12
      //------------------------------------------------------------------------
      // Functions for receiving data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      //------------------------------------------------------------------------

      static void receiveDMPs (
         WitTVec <bool>      WitOperation::* executableArg);

      static void receiveDMPs (
         WitTVec <WitPeriod> WitBillEntry::* impactPeriodArg);

d88 1
a88 1
         // Computes theConsEnt->impactPeriod_[thePer].
a129 10
      // Data member pointers.
      //
      // See comment on transmitAllDMPs in CompMgr.h.
      // E.g., theOpn->*executable_ == theOpn->executable_.
      //------------------------------------------------------------------------

      static WitTVec <bool>      WitOperation::* executable_;
      static WitTVec <WitPeriod> WitBillEntry::* impactPeriod_;

      //------------------------------------------------------------------------
@


1.5
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.4
log
@Double Precision.
@
text
@a16 1
#include <RefMap.h>
a48 10
      // Data loading functions.
      //------------------------------------------------------------------------

      void loadDataFrom (WitOperation *, WitTVec <bool> & executableArg);

      void loadDataFrom (
            WitBillEntry *, 
            WitTVec <WitPeriod> &  impactPeriodArg);

      //------------------------------------------------------------------------
a51 8
      void allocLoadedData ();
         //
         // Allocates the data to be loaded in from the components.

      void clearLoadedData ();
         //
         // Clears the data that was loaded in from the components.

d60 12
d142 4
a145 1
      // Mappings to data loaded in from Components, etc.
d148 2
a149 2
      WitRefMap <WitOperation, WitTVec <bool> >       executable_;
      WitRefMap <WitBillEntry, WitTVec <WitPeriod>  > impactPeriod_;
@


1.3
log
@Internal changes.
@
text
@d93 1
a93 1
      inline float workOffset (WitBillEntry * theBillEnt, WitPeriod thePer);
d121 1
a121 1
      static int ltRoundDown (float leadTime);
d127 1
a127 1
         // Turns off impactPeriods and floatCumLead given theOpn cannot
d131 3
a133 3
            WitOperation *    theOpn,
            WitTVec <float> & leadToImpact,
            WitTVec <bool> &  hasImpact);
d135 1
a135 1
         // Updates floatCumLead_ for the Parts produced by theOpn.
d139 1
a139 1
         //    leadToImpact[thePer] is the float cum lead time for impactPeriod 
d159 1
a159 1
      WitSchedule <WitBillEntry, float> truncOffset_;
d167 1
a167 1
      WitSchedule <WitNode, float> floatCumLead_;
d169 1
a169 1
         // floatCumLead_ (theNode)[thePer] is the float cumulative lead time of
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d53 1
a53 3
      void loadDataFrom (
            WitOperation *, 
            WitTVec <WitBoolean> & executableArg);
d95 1
a95 1
      WitBoolean roundOffsets (WitOperation * theOpn, WitPeriod thePer);
d101 1
a101 1
         // If any such condition occurs, computation is terminated and FALSE
d103 1
a103 1
         // Otherwise TRUE is returned.
d105 1
a105 1
      WitBoolean compImpactPeriod (WitConsEntry * theConsEnt, WitPeriod thePer);
d110 2
a111 2
         // computation is aborted and the function returns FALSE.
         // Otherwise returns TRUE.
d117 1
a117 1
      WitBoolean compImpactPeriod (WitBopEntry * theBopEnt, WitPeriod thePer);
d131 3
a133 3
            WitOperation *         theOpn,
            WitTVec <float> &      leadToImpact,
            WitTVec <WitBoolean> & hasImpact);
d137 1
a137 1
         //    hadImpact[thePer] is TRUE, iff the BopEntry has an 
d152 1
a152 1
      WitRefMap <WitOperation, WitTVec <WitBoolean> > executable_;
d161 1
a161 1
         // If truncOffsets is TRUE,
@


1.1
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d30 1
a30 1
// Implemented in Pre.C.
@

