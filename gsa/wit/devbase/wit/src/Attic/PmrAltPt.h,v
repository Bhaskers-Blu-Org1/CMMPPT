head	1.3;
access;
symbols
	EndRw-branch:1.2.0.8
	Root-of-EndRw:1.2
	rwToStl:1.2.0.6
	latest_sce_3_10_20010924:1.2.0.4
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.2.0.2
	sce_3_00_20010601:1.2;
locks; strict;
comment	@ * @;


1.3
date	2003.03.03.23.27.00;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2001.05.10.22.31.13;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.26.21.25.45;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.2
log
@Renamed AltPt classes to SelPt classes.
@
text
@@


1.1
log
@Refactoring for selection splitting.
@
text
@a0 149
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PmrAltPtH
#define PmrAltPtH

//------------------------------------------------------------------------------
// Header file: "PmrAltPt.h"
//
// Contains the declaration of class PmrAltPt.
//------------------------------------------------------------------------------

#include <AltPt.h>

//------------------------------------------------------------------------------
// Class PmrAltPt
//
// An AltPt at which the routing can be altered by selecting a BopEntry.
//
// Class Hierarchy:
//
// AltPt
//    PmrAltPt
//
// Implemented in ProdMR.C.
//------------------------------------------------------------------------------

class WitPmrAltPt: public WitAltPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrAltPt (WitMrPart * theMrPart, WitPeriod thePer);
         //
         // myMrPart_ <-- theMrPart.
         // myPeriod_ <-- thePer.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPmrAltPt ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitCandIndex,                   selIndex)
      accessFunc (WitBoolean,                     hasResAlt)
      accessFunc (const WitVector (WitBoolean) &, prevSel)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitBoolean hasAlt ();
         //
         // Returns TRUE, iff this PmrAltPt currently has a selection and an 
         // alternative to the current selection exists.

      inline WitCandIndex nCandidates ()
            //
            // Returns the # of selection candidates for this MrPart.
         {
         return prevSel_.length ();
         }

      virtual void alterSelection ();
         //
         // Override from class AltPt.

      virtual void splitSelection (double);
         //
         // Override from class AltPt.

      virtual void printSelection ();
         //
         // Override from class AltPt.

      virtual WitSelMgr * mySelMgr (WitSelector *);
         //
         // Override from class AltPt.

      virtual WitBoolean splittable ();
         //
         // Override from class AltPt.

      void printID ();
         //
         // Prints a string identifying this PmrAltPt.

      void select (WitCandIndex theIdx);
         //
         // Changes the selection index to theIdx, which must be a valid change.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPmrAltPt);

      void selectDefault ();
         //
         // Sets the selection to its default value.

      FILE * msgFile ();

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitPeriod myPeriod_;
         //
         // The period in which the routing selection is to be made.

      WitMrPart * const myMrPart_;
         //
         // Represents the Component at which the routing selection is to be
         // made.

      WitCandIndex selIndex_;
         //
         // Index of the selection for this PmrAltPt in the candidate vector
         // of myMrPart_.
         // -1 indicates no selection.

      WitBoolean hasResAlt_;
         //
         // TRUE, iff this PmrAltPt currently has a selection and an 
         // shortage-resolving alternative to the current selection exists.

      WitVector (WitBoolean) prevSel_;
         //
         // prevSel_[i] is TRUE, iff candidate #i has been previously selected
         // for this PmrAltPt.
   };

#endif
@

