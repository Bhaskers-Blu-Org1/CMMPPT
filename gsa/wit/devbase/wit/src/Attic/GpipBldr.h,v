head	1.17;
access;
symbols
	latest_sce_4_20_20060523:1.14.0.2
	sce_4_20_20060523:1.14
	latest_sce4_20_OSL:1.12.0.2
	sce_4_20_OSL:1.12;
locks; strict;
comment	@ * @;


1.17
date	2006.08.02.22.23.40;	author rjw;	state dead;
branches;
next	1.16;

1.16
date	2006.06.07.22.29.02;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.26.20.40.09;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.05.18.20.58.01;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.02.17.33.59;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.10.20.58.16;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.07.15.34.56;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.20.21.54.31;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.17.21.22.40;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.16.19.30.57;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.16.17.11.32;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.15.23.13.55;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.15.21.57.53;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.14.22.34.21;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.14.21.10.13;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.13.20.31.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.13.17.02.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@GPIP migration.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef GpipBuilderH
#define GpipBuilderH

//------------------------------------------------------------------------------
// Header file: "GpipBldr.h"
//
// Contains the declaration of class GpipBldr.
//------------------------------------------------------------------------------

#include <PipBldr.h>
#include <PtrSched.h>
#include <Schedule.h>
#include <PairStack.h>

//------------------------------------------------------------------------------
// Class GpipBldr
//
// "Group Post-Implosion Pegging Builder"
//
// Responsible for building a group post-implosion pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    PipBldr
//       GpipBldr
//------------------------------------------------------------------------------

class WitGpipBldr: public WitPipBldr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitGpipBldr (WitPipPgg *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitGpipBldr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void buildPggSpec ();
         //
         // Override from class PipBldr.

      void placeShipmentReqs ();
         //
         // Places requirement from the shipment sequence.

      void explodeAllReqs ();
         //
         // Explodes all requirements.

      void fillPartReqsOpo (WitPart * thePart);
         //
         // Fills the requirements on thePart.
         // Uses the old pegging order.

      void fillCurReqs (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills the requirements on thePart in fillPer, after they have been
         // loaded as current requirements.

      void netWithSupply (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by netting against the supply.

      void explodeToProd (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by exploding to production.

      void explodeBopEntry (WitBopEntry * theBopEnt, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // in fillPer by exploding to production.

      void explodeToExecPer (WitBopEntry * theBopEnt, WitPeriod execPer);
         //
         // Fills (as much as possible) the requirements on theBopEnt->myPart ()
         // by exploding to production with execution period execPer.

      void explodeToStock (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by exploding to stock.

      void netWithSideVol (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by netting against the side-effect volume.

      void recordInfeas (WitPart * thePart, WitPeriod thePer);
         //
         // Records infeasibility at thePart in thePer, in any.

      void fillOpnReqs (WitOperation * theOpn);
         //
         // Fills the requirements on theOpn.

      void explodeBomEntry (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Explodes the requirements on theBomEnt in execPer.

      void pegSubVols (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Pegs the subVols of the substitutes for theBomEnt in execPer.

      void explodeConsEntry (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         totExecVol);
         // 
         // Explodes no more than totExecVol units of the requirements on
         // theConsEnt->myOperation () in execPer through theConsEnt.

      void addToIncPegVol (double pegVol, WitGpipReqSrc * theReqSrc);
         //
         // Prepares to peg pegVol units to all of the shipments in theReqSrc by
         // adding pegVol to the appropriate locations in incPegVol_.

      void dispMaxPegRatio ();
         //
         // Computes and prints the maximum pegging ratio data.

      //------------------------------------------------------------------------
      // Private member functions for NPO mode.
      //------------------------------------------------------------------------

      void fillStMatReqsNpo (WitMaterial * theMat);
         //
         // Fills the requirements on theMat, assuming it has stock.
         // Uses the new pegging order.

      void pegToAttNpo (
            void (WitGpipBldr::* thePegFunc) (WitPart *, WitPeriod),
            WitMaterial *        theMat);
         //
         // Pegs the requirements on theMat to one attribute in NPO mode.
         // thePegFunc should be one of the following functions:
         //
         //    netWithSupply
         //    explodeToProd
         //    netWithSideVol

      //------------------------------------------------------------------------
      // Debug printing functions.
      //------------------------------------------------------------------------

      void prtFillReqs (WitPart * thePart, WitPeriod fillPer);
         //
         // Prints an indication that requirements are being filled for thePart
         // in fillPer.

      void prtNetToSupply (
            WitPart *       thePart,
            WitPeriod       thePer,
            double          incSuppVol,
            WitGpipReqSrc * theReqSrc);
         //
         // Prints data for netting against supply incSuppVol units of the
         // requirement volume for thePart in thePer for theReqSrc.

      void prtMaxPegRatio (
            double         ratio,
            WitOperation * theOpn,
            WitPeriod      execPer);
         //
         // Prints the maximum pegging ratio data.

      noCopyCtorAssign (WitGpipBldr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitGpipReqMgr * myReqMgr_;
         //
         // The GpipReqMgr owned by this GpipBldr.

      WitSchedule <WitPart, double> sideVol_;
         //
         // sideVol_ (thePart)[thePer] is the side-efffect volume of thePart in
         // thePer.

      WitSchedule <WitDemand, bool> addedTo_;
         //
         // During a call to addToIncPegVol (...), addedTo_ (theDemand)[shipPer]
         // is true, iff the function has already added to
         // incPegVol_ (theDemand)[shipPer].

      WitSchedule <WitDemand, double> incPegVol_;
         //
         // incPegVol_ (theDemand)[shipPer] is the amount of the current 
         // attribute for the current SrcComp in the current pegging period that
         // is to be pegged to theDemand in shipPer.

      WitDemPerStack posDemPers_;
         //
         // The set of pairs (theDemand, shipPer) such that
         // incPegVol_ (theDemand)[shipPer] > 0.

      WitTVec <double> nonExcStockVol_;
         //
         // If the current Part is a Material, theMat, nonExcStockVol_[thePer]
         // is the portion of theMat->stockVol ()[thePer] that does not come
         // from excess supplyVol.

      WitTVec <double> npoNetStockVol_;
         //
         // In NPO mode, if the current Part is a Material, theMat,
         // npoNetStockVol_[thePer] is the portion of
         // theMat->stockVol ()[thePer] that is available for pegging.
         // 0, if the current Part is a Capacity.

      bool pggStMatNpo_;
         //
         // True, iff a Material with stock is currently being pegged in NPO
         // mode.
   };

#endif
@


1.16
log
@New PIP pegging order.
@
text
@@


1.15
log
@New PIP pegging order.
@
text
@d149 1
a149 1
      void fillPartReqsNpo (WitPart * thePart);
d151 1
a151 1
         // Fills the requirements on thePart.
d156 1
a156 1
            WitPart *            thePart);
d158 1
a158 1
         // Pegs the requirements on thePart to one attribute in NPO mode.
d234 5
@


1.14
log
@Fixed a bug in IPIP and GPIP.
@
text
@d72 1
a72 1
      void fillPartReqs (WitPart * thePart);
d75 1
d146 20
d227 7
@


1.13
log
@Updated the copyright date on all source files.
@
text
@d200 6
@


1.12
log
@Minor update to GPIP.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.11
log
@Fixed a bug in GPIP.
@
text
@a20 1
#include <Mapping.h>
d115 1
a115 1
      void fillOpnReqsAfter (WitPart * thePart);
d117 1
a117 6
         // Fills the requirements on each Operation that becomes eligible after
         // requirements are filled at thePart.

      void fillOpnReqs (WitOperation * theOpn, WitPeriod execPer);
         //
         // Fills the requirements on theOpn in execPer.
a183 6
      WitMapping <WitOperation, int> nUnscannedBopEnts_;
         //
         // nUnscannedBopEnts_ (theOpn) is the # of BopEntries for theOpn that
         // are yet to be scanned. When this quantity becomes 0, theOpn is to
         // be exploded in all periods

@


1.10
log
@GPIP
@
text
@d73 1
a73 1
      void fillPartReqs (WitPart * thePart, WitPeriod fillPer);
d75 1
a75 1
         // Fills the requirements on thePart in fillPer.
d116 1
a116 1
      void fillNextOpnsReqs (WitPart * thePart);
@


1.9
log
@GPIP
@
text
@d146 4
d168 7
@


1.8
log
@GPIP
@
text
@d73 1
a73 1
      void fillReqs (WitPart * thePart, WitPeriod fillPer);
d80 1
a80 1
         // leaded as current requirements.
a86 5
      void explodeToStock (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by exploding to stock.

d102 11
a112 1
      void explodeOperations (WitPart * thePart);
d114 1
a114 2
         // Explodes all Operations that need to be exploded just after filling
         // requirements at thePart.
d116 1
a116 1
      void explodeOperation (WitOperation * theOpn, WitPeriod execPer);
d118 6
a123 1
         // Explodes the requirements on theOpn in execPer.
d141 1
a141 6
      void netWithSideVol (WitPart * thePart, WitPeriod fillPer);
         //
         // Fills (as much as possible) the requirements on thePart in fillPer
         // by netting against the side-effect volume.

      void prepToPeg (double pegVol, WitGpipReqSrc * theReqSrc);
d144 1
a144 5
         // adding pegVol to the appropriate locations in totPegVol_.

      void recordInfeas (WitPart * thePart, WitPeriod thePer);
         //
         // Records infeasibility at thePart in thePer, in any.
d185 1
a185 1
      WitSchedule <WitDemand, bool> preppedToPeg_;
d187 3
a189 3
         // During a call to prepToPeg (...), preppedToPeg_ (theDemand)[shipPer]
         // is true, iff the function has already prepared to peg to theDemand
         // in shipPer.
d191 1
a191 1
      WitSchedule <WitDemand, double> totPegVol_;
d193 1
a193 1
         // totPegVol_ (theDemand)[shipPer] is the amount of the current 
d200 1
a200 1
         // totPegVol_ (theDemand)[shipPer] > 0.
@


1.7
log
@GPIP
@
text
@a64 4
      void checkRestrictions ();
         //
         // Verifies that the various data restrictions for GPIP are met.

d82 1
a82 1
      void netAgainstSupply (WitPart * thePart, WitPeriod fillPer);
d132 5
d174 5
@


1.6
log
@GPIP
@
text
@d141 1
a141 1
      void recInfeas (WitPart * thePart, WitPeriod thePer);
a144 4
      void prtInfeas ();
         //
         // Prints infeasibility data, as appropriate.

a194 13

      //------------------------------------------------------------------------
      // Maximum infeasibility data.
      //------------------------------------------------------------------------

      double maxInfeas_;
         //
         // The maximum infesibility encountered.

      WitPart * maxInfeasPart_;
      WitPeriod maxInfeasPer_;
         //
         // The Part and period at which maxInfeas_ was encountered.
@


1.5
log
@GPIP
@
text
@a23 1
#include <TripStack.h>
a140 4
      void formDemTrips ();
         //
         // Transfers the pegging data from totPegVol_ to myDemTrips_.

a199 6
      WitDemTripStack myDemTrips_;
         //
         // The set of triples (theDemand, shipPer, pegVol) such that pegVol
         // units of the current attribute for the current SrcComp in the
         // current pegging period are to be pegged to theDemand in shipPer.

@


1.4
log
@GPIP
@
text
@d19 1
a19 1
#include <Assoc.h>
d28 1
d32 6
d40 1
a40 1
class WitGpipBldr: public WitProbAssoc
d50 2
d59 1
a59 1
      // Other public member functions.
d62 1
a62 1
      void buildPegging ();
d64 1
a64 7
         // Builds the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
a177 4
      WitPipPgg * const myPgg_;
         //
         // The PipPgg that owns this GpipBldr.

a181 4
      WitExecPerSched * myExecPerSched_;
         //
         // The ExecPerSched owned by this GpipBldr.

a210 4
      bool pggBuilt_;
         //
         // true, iff this GpipBldr has already built the pegging.

@


1.3
log
@GPIP
@
text
@d143 8
d219 13
@


1.2
log
@GPIP
@
text
@d23 2
d122 4
d134 6
a139 5
      void explodeToConsumption (
            WitConsEntry *  theConsEnt,
            WitPeriod       execPer,
            double          incExecVol,
            WitGpipReqSrc * theReqSrc);
d141 1
a141 2
         // Explodes to consumption incExecVol units of execution volume for
         // theConsEnt in execPer, pegging it to theReqSrc.
d185 13
a197 1
      WitSchedule <WitDemand, bool> prevPgdSched_;
d199 8
a206 1
         // Sched to be passed to NonClass::pegReqSrc.
a212 24
//------------------------------------------------------------------------------
// NonClass function template pegReqSrc.
//
// Pegs pegVol units of the attribute for theAttPgg for theSrcComp in pegPer to
// theReqSrc.
// prevPgd is used as a working schedule. When entering this function, all
// its values should be false and it is restored to this state when the function
// returns. During the call, prevPgd (theDemand)[shipPer] is true, iff the
// pegging triple has already been pegged to theDemand in shipPer during the
// call.
//------------------------------------------------------------------------------

namespace WitNonClass
   {
   template <typename SrcComp>
      void pegReqSrc (
         WitPipAttPgg <SrcComp> *        theAttPgg,
         SrcComp *                       theSrcComp,
         WitPeriod                       pegPer,
         double                          pegVol,
         WitGpipReqSrc *                 theReqSrc,
         WitSchedule <WitDemand, bool> & prevPgd);
   }

@


1.1
log
@GPIP
@
text
@d63 1
a63 9
         // Verifies that the various data restrictions for SRP are met.

      void setUpBuild ();
         //
         // Sets up this GpipBldr for building the pegging.

     void shutDownBuild ();
         //
         // Shut down this GpipBldr after building the pegging.
d182 4
@

