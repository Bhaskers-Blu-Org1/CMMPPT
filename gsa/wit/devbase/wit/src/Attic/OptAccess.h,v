head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2007.05.10.21.14.41;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2007.05.10.20.08.49;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.04.23.27.11;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.02.23.11.04;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.26.22.35.17;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.18.22.27.02;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.28.20.04.58;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.27.21.03.04;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OptAccessH
#define OptAccessH

//------------------------------------------------------------------------------
// Header file: "OptAccess.h"
//
// Contains the declaration of class OptAccess.
//------------------------------------------------------------------------------

#include <Global.h>
#include <Material.h>
#include <Demand.h>
#include <Opn.h>
#include <SubEntry.h>

//------------------------------------------------------------------------------
// Class OptAccess
//
// "Optimizing Implosion Access"
//
// Same as PreAccess, but for optimizing implosion.
// See PreAccess.h.
//------------------------------------------------------------------------------

class WitOptAccess
   {
      friend class WitOptImploder;

   private:

      //------------------------------------------------------------------------
      // Update access functions.
      //------------------------------------------------------------------------

      updateAccess (WitPartPerStack, revCritList, WitGlobalComp)
      updateAccess (WitDblFlexVec,   scrapVol,    WitPart)
      updateAccess (WitDblFlexVec,   shadowPrice, WitPart)
      updateAccess (WitDblFlexVec,   stockVol,    WitMaterial)
      updateAccess (WitDblFlexVec,   shipVol,     WitDemand)
      updateAccess (WitDblFlexVec,   cumShipVol,  WitDemand)
      updateAccess (WitDblFlexVec,   execVol,     WitOperation)
      updateAccess (WitDblFlexVec,   subVol,      WitSubEntry)

      //------------------------------------------------------------------------
      // Unimplemented functions
      //------------------------------------------------------------------------

       WitOptAccess ();
      ~WitOptAccess ();

      noCopyCtorAssign (WitOptAccess);
   };

#endif
@


1.7
log
@Stochastic Implosion
@
text
@@


1.6
log
@Stochastic Implosion
@
text
@d44 8
a51 8
      updateAccess (WitList <WitPartPer>, criticalList, WitGlobalComp)
      updateAccess (WitDblFlexVec,        scrapVol,     WitPart)
      updateAccess (WitDblFlexVec,        shadowPrice,  WitPart)
      updateAccess (WitDblFlexVec,        stockVol,     WitMaterial)
      updateAccess (WitDblFlexVec,        shipVol,      WitDemand)
      updateAccess (WitDblFlexVec,        cumShipVol,   WitDemand)
      updateAccess (WitDblFlexVec,        execVol,      WitOperation)
      updateAccess (WitDblFlexVec,        subVol,       WitSubEntry)
@


1.5
log
@Stochastic Implosion
@
text
@a36 2
      friend class WitStochDataMgr;
      friend class WitScenario;
@


1.4
log
@Stochastic Implosion
@
text
@d37 1
@


1.3
log
@Stochastic Implosion
@
text
@d37 1
@


1.2
log
@[disallowed backlog]
@
text
@d15 2
@


1.1
log
@[disallowed backlog]
@
text
@d18 4
d43 7
@

