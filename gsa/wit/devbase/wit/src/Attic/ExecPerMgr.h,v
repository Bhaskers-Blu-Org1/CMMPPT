head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2007.07.31.20.39.45;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2007.05.30.21.02.10;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ExecPerMgrH
#define ExecPerMgrH

//------------------------------------------------------------------------------
// Header file: "ExecPerMgr.h"
//
// Contains the declaration of class ExecPerMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <RefMap.h>
#include <PtrTVec.h>

//------------------------------------------------------------------------------
// Class ExecPerMgr
//
// Implemented in OptImpProb.C.
//------------------------------------------------------------------------------

class WitExecPerMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExecPerMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExecPerMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool hasNextExecPer (
            WitBillEntry * theBillEnt,
            WitPeriod      impactPer,
            int &          theIndex,
            WitPeriod &    execPer);
         //
         // Implementation of ExecPerItr::operator ++ ().

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void compExecPeriod (WitBillEntry * theBillEnt);
         //
         // Computes execPeriod_ (theBillEnt) and firstEPIndex_ (theBillEnt).

      void print ();
         //
         // Prints ExecPer data for all BillEntries.

      void print (WitBillEntry * theBillEntry);
         //
         // Prints ExecPer data for theBillEntry.

      noCopyCtorAssign (WitExecPerMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRefMap <WitBillEntry, WitVector <int> > firstEPIndex_;
         //
         // firstEPIndex_ (theBillEntry)[impactPer] is the first index into
         // execPeriod_   (theBillEntry) for impactPer.
         // firstEPIndex_ (theBillEntry)[nPeriods] is the length of
         // execPeriod_   (theBillEntry).

      WitRefMap <WitBillEntry, WitVector <WitPeriod> > execPeriod_;
         //
         // For execPerIdx = firstEPIndex_[thePer], 
         //             thru firstEPIndex_[thePer + 1] - 1
         //
         //    execPeriod_ (theBillEntry)[execPerIdx] is a unique execution
         //    period execPer, such that
         //    theBillEntry->impactPeriod ()[execPer] == thePer.
         //    The exec periods are listed in reverse order.

      WitTVec <int> tempNExecPeriods_;
         //
         // Given a BillEntry, theBillEntry,
         // for any period, thePer, tempNExecPeriods[thePer] is the # of 
         // execution periods found whose impact period for the BillEntry is
         // thePer.
         // Allocated only during construction of this ExecPerMgr.

      WitPtrTVec <WitVector <WitPeriod> > tempExecPeriod_;
         //
         // Given a BillEntry, theBillEntry,
         // for any period, thePer, 
         //    for i = 0, ..., tempNExecPeriods[thePer] - 1,
         //       tempExecPeriod[thePer][[i] is a period, execPer (unique among
         //       tempExecPeriod[thePer]), such that 
         //       BillEntry->impactPeriod ()[execPer] == thePer.
         // Allocated only during construction of this ExecPerMgr.
   };

#endif
@


1.1
log
@Stochastic Implosion
@
text
@@

