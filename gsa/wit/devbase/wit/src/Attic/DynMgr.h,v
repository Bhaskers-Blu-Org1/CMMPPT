head	1.5;
access;
symbols
	EndRw-branch:1.4.0.10
	Root-of-EndRw:1.4
	rwToStl:1.4.0.8
	latest_sce_3_10_20010924:1.4.0.6
	sce_3_10_20010924:1.4
	latest_sce_3_00_20010601:1.4.0.4
	sce_3_00_20010601:1.4
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4;
locks; strict;
comment	@ * @;


1.5
date	2003.03.03.23.26.43;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2000.12.05.19.05.28;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.04.22.07.35;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.22.23.11.39;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.21.20.03.21;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.4
log
@Some minor modifications.
@
text
@@


1.3
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@a0 273
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef DynMgrH
#define DynMgrH

//------------------------------------------------------------------------------
// Header file: "DynMgr.h"
//
// Contains the declaration of the following classes:
//
//    DynLinkMgr
//    ObjDynLinkMgr
//    PairDynLinkMgr (ValType)
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class DynLinkMgr
//
// A manager of dynamic stack links.
// Responsible for owning and recycling the DynLinks of a Problem.
//
// Class Hierarchy:
//
// DynLinkMgr
//    ObjDynLinkMgr
//    PairDynLinkMgr (ValType)
//------------------------------------------------------------------------------

class WitDynLinkMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDynLinkMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void copyDataInto (
            WitDynLink * dstLink, 
            WitDynLink * srcLink) = 0;
         //
         // Copies the data (not the link) from the derived class version of
         // srcLink to  that of dstLink.
         // Base class function.

      static void deleteInstance (WitDynLinkMgr * theDynLinkMgr);
         //
         // Heap-destructs theDynLinkMgr.

      WitDynLink * freshLink (WitDynLink * theLink);
         //
         // Attaches an available DynLink to theLink and returns it.

      void recycle (WitDynLink * theLink);
         //
         // Stores theLink for future re-use.

   protected:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDynLinkMgr ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      virtual WitDynLink * newLink () = 0;
         //
         // Heap-constructs and returns new instance of a class derived from 
         // DynLink.
         // Base class function.

      virtual void deleteLink (WitDynLink * theLink) = 0;
         //
         // Heap-destructs the derived class version of theLink.
         // Base class function.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDynLinkMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDynLink * firstUnusedLink_;
         //
         // First unused DynLink stored by this DynLinkMgr.
   };

//------------------------------------------------------------------------------
// Class ObjDynLinkMgr
//
// A manager of links for dynamic stacks of individual objects.
// Responsible for owning and recycling the ObjDynLinks of a Problem.
//
// Class Hierarchy:
//
// DynLinkMgr
//    ObjDynLinkMgr
//------------------------------------------------------------------------------

class WitObjDynLinkMgr: public WitDynLinkMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjDynLinkMgr (WitProblem * theProblem);
         //
         // DynLinkMgr <<< theProblem.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void copyDataInto (WitDynLink *, WitDynLink *);
         //
         // Override from class DynLinkMgr.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjDynLinkMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjDynLinkMgr ();
         //
         // Override from class DynLinkMgr.                                 

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitDynLink * newLink ();
         //
         // Override from class DynLinkMgr.

      virtual void deleteLink (WitDynLink *);
         //
         // Override from class DynLinkMgr.

      inline WitObjDynLink * asanObjDynLink (WitDynLink * theLink)
         {
         return (WitObjDynLink *) theLink;
         }
   };

//------------------------------------------------------------------------------
// Generic class PairDynLinkMgr (ValType)
//
// A manager of dynamic stack links for (Object, Value)s.
// Responsible for owning and recycling the PairDynLinks of a Problem.
//
// Class Hierarchy:
//
// DynLinkMgr
//    PairDynLinkMgr (ValType)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitPairDynLinkMgrdeclare(ValType)                                      \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairDynLink (ValType);                                                \
   /*                                                                        */\
   /* Forward declaration.                                                   */\
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairDynLinkMgr (ValType): public WitDynLinkMgr                        \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitPairDynLinkMgr (ValType) (WitProblem * theProblem);                   \
         /*                                                                  */\
         /* DynLinkMgr <<< theProblem.                                       */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      static WitPairDynLinkMgr (ValType) * itsInstance (                       \
            WitProblem * theProblem);                                          \
         /*                                                                  */\
         /* Returns the PairDynLinkMgr (ValType) owned by theProblem.        */\
                                                                               \
      virtual void copyDataInto (WitDynLink *, WitDynLink *);                  \
         /*                                                                  */\
         /* Override from class DynLinkMgr.                                  */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPairDynLinkMgr (ValType));                          \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      virtual ~WitPairDynLinkMgr (ValType) ();                                 \
         /*                                                                  */\
         /* Override from class DynLinkMgr.                                  */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other private member functions.                                     */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      virtual WitDynLink * newLink ();                                         \
         /*                                                                  */\
         /* Override from class DynLinkMgr.                                  */\
                                                                               \
      virtual void deleteLink (WitDynLink *);                                  \
         /*                                                                  */\
         /* Override from class DynLinkMgr.                                  */\
                                                                               \
      inline WitPairDynLink (ValType) * asaPairDynLink (WitDynLink * theLink)  \
         {                                                                     \
         return (WitPairDynLink (ValType) *) theLink;                          \
         }                                                                     \
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare (WitPairDynLinkMgr, WitPeriod)
declare (WitPairDynLinkMgr, double)

#endif
@


1.2
log
@Refactoring for selection splitting.
@
text
@d23 1
a23 1
#include <Util.h>
d38 1
a38 1
class WitDynLinkMgr: public WitUtil
d46 3
a48 1
      WitDynLinkMgr ();
d134 3
a136 1
      WitObjDynLinkMgr ();
d214 3
a216 1
      WitPairDynLinkMgr (ValType) ();                                          \
@


1.1
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d101 1
a101 3
      copyCtorAndAssignment (WitDynLinkMgr);
         //
         // Prevents unintentional copying and assignment.
d148 1
a148 3
      copyCtorAndAssignment (WitObjDynLinkMgr);
         //
         // Prevents unintentional copying and assignment.                  
d231 1
a231 3
      copyCtorAndAssignment (WitPairDynLinkMgr (ValType));                     \
         /*                                                                  */\
         /* Prevents unintentional copying and assignment.                   */\
d265 1
@

