head	1.14;
access;
symbols
	latest_sce_4_20_20060523:1.12.0.2
	sce_4_20_20060523:1.12
	latest_sce4_20_OSL:1.7.0.2
	sce_4_20_OSL:1.7;
locks; strict;
comment	@ * @;


1.14
date	2006.08.02.19.03.01;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2006.05.26.20.40.10;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.10.21.03.40;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.10.18.36.12;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.09.21.48.15;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.09.14.58.30;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.02.17.34.01;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.17.21.22.40;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.17.19.02.18;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.16.19.30.57;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.16.17.11.32;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.15.21.57.53;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.13.20.31.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.13.19.26.34;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@GPIP migration.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef IpipBldrH
#define IpipBldrH

//------------------------------------------------------------------------------
// Header file: "IpipBldr.h"
//
// Contains the declaration of class IpipBldr.
//------------------------------------------------------------------------------

#include <PipBldr.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class IpipBldr
//
// "Individual Post-Implosion Pegging Builder"
//
// Responsible for building the individual post-implosion pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    PipBldr
//       IpipBldr
//------------------------------------------------------------------------------

class WitIpipBldr: public WitPipBldr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitIpipBldr (WitPipPgg *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitIpipBldr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void buildPggSpec ();
         //
         // Override from class PipBldr.

      void normalizeShares ();
         //
         // Computes the values of normShare_.

      void prtNormShares ();
         //
         // Prints the values of normShare_.

      void initUnpeggedScheds ();
         //
         // Initializes the unpegged schedules.

      void pegShipment (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
         //
         // Pegs incShipVol units of shipVol to theDemand in shipPer;

      void pegPartOpo (WitPart * thePart);
         //
         // Pegs the reqVol of thePart using the old pegging order.

      void pegPartPerOpo (WitPart * thePart, WitPeriod pegPer);
         //
         // Pegs the reqVol of thePart in pegPer on OPO mode.

      void pegPartNpo (WitPart * thePart);
         //
         // Pegs the reqVol of thePart using the new pegging order.

      void pegToAttNpo (
            void (WitIpipBldr::* thePegFunc) (WitPart *, WitPeriod, double &),
            WitPart *            thePart);
         //
         // Pegs the requirements on thePart to one attribute in NPO mode.
         // thePegFunc should be one of the following functions:
         //
         //    pegToSupply
         //    pegToProd
         //    pegToSide

      void netReqVolsNpo (WitPart * thePart, WitPeriod firstPegPer);
         //
         // Nets the requirements against the current peg volumes for thePart in
         // NPO mode. Starts in firstPegPer.

      void pegToSupply (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of supply of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToProd (WitPart * thePart, WitPeriod expPer, double & netReqVol);
         //
         // Does pegging by explosion for netReqVol units on thePart in expPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegBopEnt (
            WitBopEntry * theBopEnt,
            WitPeriod     execPer,
            double &      netReqVol);
         //
         // Does pegging by explosion for netReqVol units through theBopEnt in
         // execPer.
         // On return, netReqVol is amount that didn't get pegged.

      void pegOpn (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theOpn in execPer.
 
      void pegBomEntWithSubs (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theBomEnt and its substitutes in execPer.

      void pegConsEnt (
            WitConsEntry * theConsEnt,
            WitPeriod      execPer,
            double         pgdExecVol);
         //
         // Does pegging by explosion of pgdExecVol units of execVol through
         // theConsEnt in execPer.

      void pegToStock (WitPart * thePart, WitPeriod pegPer, double & netReqVol);
         //
         // Pegs up to netReqVol units of thePart in pegPer to stock.
         // On return, netReqVol is amount that didn't get pegged.

      void pegToSide (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of side-effect of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

      double minAndNet (double & val1, double & val2);
         //
         // Returns the min of val1 and val2 after substracting it from both.

      noCopyCtorAssign (WitIpipBldr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDemand * targDemand_;
         //
         // The Demand currently being pegged to, if any; else NULL.

      WitPeriod targShipPer_;
         //
         // The shipment period currently being pegged to, if any; else -1.

      WitReqSched * myReqSched_;
         //
         // The ReqSched owned by this IpipBldr.

      WitSchedule <WitBopEntry, double> normShare_;
         //
         // normShare_ (theBopEnt)[execPer] is theBopEnt->pipShare_[execPer],
         // normalized so that the values for a given Operation and execPer sum
         // to 1.

      WitTVec <double> curReqVol_;
         //
         // In NPO mode, curNetReqVol_[thePer] is the net requirement volume on
         // the current Part in thePer.

      WitTVec <double> curPegVol_;
         //
         // In NPO mode, curPegVol_[thePer] is the amount of requirement on the
         // current Part that has been pegged to the current attribute in
         // thePer.

      //------------------------------------------------------------------------
      // Unpegged Volume Schedules
      // Each of these schedules stores the unpegged portion of the
      // corresponding Component data (also side-effect volume).
      //------------------------------------------------------------------------

      WitSchedule <WitBopEntry, double> unpgdCoexVol_;
      WitSchedule <WitBomEntry, double> unpgdNonSubVol_;
      WitSchedule <WitSubEntry, double> unpgdSubVol_;
      WitSchedule <WitMaterial, double> unpgdStockVol_;
      WitSchedule <WitPart,     double> unpgdSupplyVol_;
      WitSchedule <WitPart,     double> unpgdSideVol_;
   };

#endif
@


1.13
log
@New PIP pegging order.
@
text
@@


1.12
log
@New PIP pegging order.
@
text
@d99 1
@


1.11
log
@New PIP pegging order.
@
text
@d103 1
a103 1
      void netReqVolsNpo (WitPart * thePart);
d106 1
a106 1
         // NPO mode.
@


1.10
log
@New PIP pegging order.
@
text
@d93 9
a101 11
      void pegToSupplyNpo (WitPart * thePart);
         //
         // Pegs the requirements on thePart to supply in NPO mode.

      void pegToProdNpo (WitPart * thePart);
         //
         // Pegs the requirements on thePart to production in NPO mode.

      void pegToSideNpo (WitPart * thePart);
         //
         // Pegs the requirements on thePart to side-effect in NPO mode.
@


1.9
log
@New PIP pegging order.
@
text
@d93 1
a93 1
      void npoBackPass (WitPart * thePart);
d95 1
a95 1
         // Performs the NPO backward pass for thePart.
d97 1
a97 1
      void npoFwdPass (WitPart * thePart);
d99 1
a99 1
         // Performs the NPO forward pass for thePart.
d101 1
a101 1
      void pegPartPerNpo (WitPart * thePart, WitPeriod pegPer);
d103 1
a103 1
         // Pegs the reqVol of thePart in pegPer on NPO mode.
d105 6
a110 1
      double pegToSupply (
a116 1
         // Returns the pegged amount.
@


1.8
log
@Updated the copyright date on all source files.
@
text
@d81 1
a81 1
      void pegPart (WitPart * thePart, WitPeriod pegPer);
d83 1
a83 1
         // Pegs the reqVol of thePart in pegPer.
d85 21
a105 1
      void pegToSupply (
d112 1
d193 11
@


1.7
log
@GPIP
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.6
log
@GPIP
@
text
@a61 4
      void initUnpeggedScheds ();
         //
         // Initializes the unpegged schedules.

d70 4
a84 5
      void pegToStock (WitPart * thePart, WitPeriod pegPer, double & netReqVol);
         //
         // Pegs up to netReqVol units of thePart in pegPer to stock.
         // On return, netReqVol is amount that didn't get pegged.

a92 8
      void pegToSide (
            WitPart * thePart,
            WitPeriod pegPer,
            double &  netReqVol);
         //
         // Pegs up to netReqVol units of side-effect of thePart in pegPer.
         // On return, netReqVol is amount that didn't get pegged.

d131 13
a165 4
      WitExecPerSched * myExecPerSched_;
         //
         // The ExecPerSched owned by this IpipBldr.

@


1.5
log
@GPIP
@
text
@a20 1
#include <PtrSched.h>
a73 4
      void findExecPers ();
         //
         // Sets up expExecPers_.

a165 8
      WitPtrSched <WitBopEntry, WitVector <WitPeriod> > expExecPers_;
         //
         // If expExecPers_ (theBopEnt, expPer) != NULL, then it is a ptr to a
         // vector listing all of the periods, execPer, such that:
         //    theBopEnt->impactPeriod ()[execPer] == expPer and
         //    theBopEnt->execPerOKForExp (execPer) is true.
         // and there are at least two such execPers.

@


1.4
log
@GPIP
@
text
@a74 16
      void compSideVols ();
         //
         // Computes side-effects volumes.

      void compBopSideVols ();
         //
         // Computes side-effects volumes due to BopEntries.

      void compBomSideVols ();
         //
         // Computes side-effects volumes due to BomEntries.

      void prtSideVols ();
         //
         // Prints side-effect volumes.

@


1.3
log
@GPIP
@
text
@a168 4
      void prtInfeas ();
         //
         // Prints infeasibility data, as appropriate.

a216 16

      //------------------------------------------------------------------------
      // Maximum infeasibility data.
      //------------------------------------------------------------------------

      double maxInfeas_;
         //
         // The maximum infesibility encountered.

      WitDemand * maxInfeasDemand_;
      WitPeriod   maxInfeasShipPer_;
      WitPart *   maxInfeasPart_;
      WitPeriod   maxInfeasPer_;
         //
         // The Demand, shipment period, Part and period at which maxInfeas_ was
         // encountered.
@


1.2
log
@GPIP
@
text
@d19 1
a21 1
#include <Assoc.h>
d27 1
d29 6
d37 1
a37 1
class WitIpipBldr: public WitProbAssoc
d47 2
d56 1
a56 1
      // Other public member functions.
d59 1
a59 1
      void buildPegging ();
d61 1
a61 7
         // Builds the pegging.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
a178 4
      WitPipPgg * const myPgg_;
         //
         // The PipPgg that owns this IpipBldr.

a208 4
      bool pggBuilt_;
         //
         // true, iff this IpipBldr has already built the pegging.

@


1.1
log
@GPIP
@
text
@a34 10
      // Public member functions.
      //------------------------------------------------------------------------

      static void buildPegging (WitPipPgg * thePgg);
         //
         // Builds the pegging for thePgg.

   private:

      //------------------------------------------------------------------------
d47 1
a47 1
      // Other private member functions.
d50 1
a50 1
      void build ();
d54 6
d92 4
a95 1
      void pegShipment (double incShipVol);
d97 1
a97 1
         // Pegs incShipVol units of shipVol to targDemand_ in targShipPer_;
d210 4
@

