head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2003.03.03.21.40.08;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2003.03.03.21.07.31;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.27.19.20.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.25.22.17.08;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Continued implementation of proportionate routing.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OrSite1H
#define OrSite1H

//------------------------------------------------------------------------------
// Header file: "OrSite1.h"
//
// Contains the declaration of class OrSite.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class OrSite
//
// "Routing Site"
// Represents either a Part or a BomEntry in its role as a "site" at which a
// routing decision must be made.
//
// Class Hierarchy:
//
// OrSite
//    ProdOrSite
//    ConsOrSite
//
// Implemented in OldRt1.C.
//------------------------------------------------------------------------------

class WitOrSite: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOrSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void findOrCands ();
         //
         // Builds myOrCands_.

      void clearOrCands ();
         //
         // Clears myOrCands_.

      virtual bool explodeable (WitPeriod thePer) = 0;
         //
         // Returns true, iff this OrSite is eligible for explosion in thePer.

      virtual bool propRouting () = 0;
         //
         // Returns the value of the propRouting attribute for the Part or
         // BomEntry.

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitOrSite)

      static int nInstances (WitProblem *);
         //
         // Not to be called; needed by the compiler for the PtrSched template.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitObjStack <WitOrCand> &, myOrCands)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOrSite (WitOrMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      virtual void findOrCands (WitObjStack <WitOrCand> & theOrCands) = 0;
         //
         // Sets theOrCands to be the set of OrCands for this OrSite.

      noCopyCtorAssign (WitOrSite);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const int mappingIndex_;
         //
         // Mapping index.

      WitObjStack <WitOrCand> myOrCands_;
         //
         // The OrCands for this OrSite.
   };

#endif
@


1.3
log
@Continued implementation of proportionate routing.
@
text
@@


1.2
log
@Continued implementation of proportionate routing.
@
text
@a68 4
      virtual void prtOpBrPtID (WitPeriod thePer) = 0;
         //
         // Prints the ID for a OpBrPt for this OrSite and thePer.

@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d69 1
a69 1
      virtual void prtPrBrPtID (WitPeriod thePer) = 0;
d71 1
a71 1
         // Prints the ID for a PrBrPt for this OrSite and thePer.
@

