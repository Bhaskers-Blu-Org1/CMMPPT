head	1.8;
access;
symbols
	EndRw-branch:1.7.0.10
	Root-of-EndRw:1.7
	rwToStl:1.7.0.8
	latest_sce_3_10_20010924:1.7.0.6
	sce_3_10_20010924:1.7
	latest_sce_3_00_20010601:1.7.0.4
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.7.0.2
	sce_2_31_20010308:1.7
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2003.03.03.23.26.43;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2000.12.05.19.05.28;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.04.22.07.35;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.39;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.21;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.20;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.37;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.21;	author wit;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.7
log
@Some minor modifications.
@
text
@@


1.6
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@a0 228
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef DynLinkH
#define DynLinkH

//------------------------------------------------------------------------------
// Header file: "DynLink.h"
//
// Contains the declaration of the following classes:
//
//    DynLink
//    ObjDynLink
//    PairDynLink (ValType)
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class DynLink
//
// A link in an dynamic stack.
//
// Class Hierarchy:
//
// DynLink
//    ObjDynLink
//    PairDynLink (ValType)
//------------------------------------------------------------------------------

class WitDynLink: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      void linkTo (WitDynLink * theLink);
         //
         // Sets this DynLink to link to theLink, while leaving the object
         // link unaltered.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitDynLink *, next)

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDynLink ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDynLink ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDynLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDynLink * next_;
         //
         // The next DynLink after this DynLink in the DynStack.
   };

//------------------------------------------------------------------------------
// Class ObjDynLink
//
// A link in a dynamic stack of individual objects.
//
// Class Hierarchy:
//
// DynLink
//    ObjDynLink
//------------------------------------------------------------------------------

class WitObjDynLink: public WitDynLink
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjDynLink ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitObjDynLink ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitTypelessPtr, myObject)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void setDataTo (WitTypelessPtr);
         //
         // Sets the data for this DynLink to the arguments.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjDynLink);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitTypelessPtr myObject_;
         //
         // The object associated with this ObjDynLink.
   };

//------------------------------------------------------------------------------
// Class PairDynLink (ValType)
//
// A link in a dynamic stack of (Object, Value)s.
//
// Class Hierarchy:
//
// DynLink
//    PairDynLink (ValType)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitPairDynLinkdeclare(ValType)                                         \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairDynLink (ValType): public WitDynLink                              \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitPairDynLink (ValType) ();                                             \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitPairDynLink (ValType) ();                                            \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Data access functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      accessFunc (WitTypelessPtr, myObject)                                    \
      accessFunc (ValType,        myValue)                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void setDataTo (WitTypelessPtr, ValType);                                \
         /*                                                                  */\
         /* Sets the data for this DynPerLink to the arguments.              */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPairDynLink (ValType));                             \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitTypelessPtr myObject_;                                                \
         /*                                                                  */\
         /* The object associated with this PairDynLink.                     */\
                                                                               \
      ValType myValue_;                                                        \
         /*                                                                  */\
         /* The period associated with this PairDynLink.                     */\
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare (WitPairDynLink, WitPeriod)
declare (WitPairDynLink, double)

#endif
@


1.5
log
@Refactoring for selection splitting.
@
text
@d42 1
a42 1
      // Data access functions.
d45 4
a48 1
      accessFunc (WitDynLink *, next)
d51 1
a51 1
      // Other public member functions.
d54 1
a54 4
      void linkTo (WitDynLink * theLink);
         //
         // Sets this DynLink to link to theLink, while leaving the object
         // link unaltered.
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d80 1
a80 3
      copyCtorAndAssignment (WitDynLink);
         //
         // Prevents unintentional copying and assignment.
d138 1
a138 3
      copyCtorAndAssignment (WitObjDynLink);
         //
         // Prevents unintentional copying and assignment.
d205 1
a205 3
      copyCtorAndAssignment (WitPairDynLink (ValType));                        \
         /*                                                                  */\
         /* Prevents unintentional copying and assignment.                   */\
d226 1
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d19 2
a20 3
//    DynLinkMgr
//    DynPerLink
//    DynPerLinkMgr
d28 7
a34 1
// A link in a dynamic stack.
a41 12
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDynLink ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDynLink ();

      //------------------------------------------------------------------------
d45 1
a45 2
      accessFunc (WitDynLink *,   next)
      accessFunc (WitTypelessPtr, myObject)
d51 1
a51 5
      void set (WitDynLink * theLink, WitTypelessPtr theObject);
         //
         // Sets this DynLink to link to theLink and to theObject.

      void set (WitDynLink * theLink);
d53 2
a54 4
         // Sets this DynLink to link to theLink, while leaving the object link
         // unaltered.

   private:
d56 1
a56 7
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      copyCtorAndAssignment (WitDynLink);
         //
         // Prevents unintentional copying and assignment.
d59 1
a59 1
      // Private member data.
a61 20
      WitDynLink * next_;
         //
         // The next DynLink to which this DynLink links.

      WitTypelessPtr myObject_;
         //
         // The object to which this DynLink links.
   };

//------------------------------------------------------------------------------
// Class DynLinkMgr
//
// A manager for dynamic stack links.
// Responsible for owning and recycling the DynLinks of a Problem.
//------------------------------------------------------------------------------

class WitDynLinkMgr: public WitUtil
   {
   public:

d66 1
a66 1
      WitDynLinkMgr ();
d72 1
a72 13
      ~WitDynLinkMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitDynLink * freshLink (WitDynLink * theLink, WitTypelessPtr theObject);
         //
         // Attaches an available DynLink to the arguments and returns it.

      void recycle (WitDynLink * theLink);
         //
         // Stores theLink for future re-use.
d80 1
a80 1
      copyCtorAndAssignment (WitDynLinkMgr);
d88 1
a88 1
      WitDynLink * firstUnusedLink_;
d90 1
a90 1
         // First unused DynLink stored by this DynLinkMgr.
d94 3
a96 1
// Class DynPerLink
d98 4
a101 1
// A link in a dynamic period stack.
d104 1
a104 1
class WitDynPerLink: public WitUtil
d112 1
a112 1
      WitDynPerLink ();
d118 1
a118 1
      ~WitDynPerLink ();
a123 1
      accessFunc (WitDynPerLink *,   next)
a124 1
      accessFunc (WitPeriod,      myPeriod)
d130 1
a130 8
      void set (
            WitDynPerLink * theLink, 
            WitTypelessPtr  theObject,
            WitPeriod       thePer);
         //
         // Sets this DynPerLink to link to theLink, theObject and thePer.

      void set (WitDynPerLink * theLink);
d132 1
a132 2
         // Sets this DynPerLink to link to theLink, while leaving the object 
         // link and period unaltered.
d140 1
a140 1
      copyCtorAndAssignment (WitDynPerLink);
a147 4
      WitDynPerLink * next_;
         //
         // The next DynPerLink to which this DynPerLink links.

d150 1
a150 5
         // The object to which this DynPerLink links.

      WitPeriod myPeriod_;
         //
         // The period to which this DynPerLink links.
d154 5
a158 1
// Class DynPerLinkMgr
d160 2
a161 2
// A manager for dynamic period stack links.
// Responsible for owning and recycling the DynPerLinks of a Problem.
d164 3
a166 7
class WitDynPerLinkMgr: public WitUtil
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d168 57
a224 1
      WitDynPerLinkMgr ();
d226 4
a229 5
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDynPerLinkMgr ();
d231 1
a231 33
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      WitDynPerLink * freshLink (
            WitDynPerLink * theLink,
            WitTypelessPtr  theObject,
            WitPeriod       thePer);
         //
         // Attaches an available DynPerLink to the arguments and returns it.

      void recycle (WitDynPerLink * theLink);
         //
         // Stores theLink for future re-use.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      copyCtorAndAssignment (WitDynPerLinkMgr);
         //
         // Prevents unintentional copying and assignment.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDynPerLink * firstUnusedLink_;
         //
         // First unused DynPerLink stored by this DynPerLinkMgr.
   };
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d24 1
a24 1
#include <typedefs.h>
d32 1
a32 1
class WitDynLink
d98 1
a98 1
class WitDynLinkMgr
d151 1
a151 1
class WitDynPerLink
d225 1
a225 1
class WitDynPerLinkMgr
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
