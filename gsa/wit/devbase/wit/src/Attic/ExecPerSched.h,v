head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2006.02.28.19.43.04;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2006.02.27.22.02.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.27.21.19.54;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ExecPerSchedH
#define ExecPerSchedH

//------------------------------------------------------------------------------
// Header file: "ExecPerSched.h"
//
// Contains the declaration of the following class:
//
//    ExecPerSched
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class ExecPerSched
//
// "Execution Period Schedule"
// For each BopEntry in each explosion period, indicates the first and last
// execution period for which the BopEntry has an impactPeriod matching the
// explosion period.
//
// Class Hierarchy:
//
// ProbAssoc
//    ExecPerSched
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

class WitExecPerSched: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExecPerSched (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExecPerSched ();

      void getData (
            WitBopEntry * theBopEnt,
            WitPeriod     expPer,
            WitPeriod &   execPerFirst,
            WitPeriod &   execPerLast);
         //
         // Sets execPerFirst and execPerLast to be the first and last execution
         // periods, execPer, for which
         // theBopEnt->impactPeriod ()[execPer] == expPer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitExecPerSched);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSchedule <WitBopEntry, WitPeriod> firstExecPer_;
         //
         // firstExecPer_ (theBopEnt)[expPer] is the first period execPer such
         // that theBopEnt->impactPeriod ()[execPer] == expPer.

      WitSchedule <WitBopEntry, WitPeriod> lastExecPer_;
         //
         // lastExecPer_ (theBopEnt)[expPer] is the last period execPer such
         // that theBopEnt->impactPeriod ()[execPer] == expPer.
   };

#endif
@


1.2
log
@[shared-resource pegging]
@
text
@@


1.1
log
@[shared-resource pegging]
@
text
@d56 9
a64 13
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitPeriod firstExecPer (WitBopEntry * theBopEnt, WitPeriod expPer)
         {
         return firstExecPer_ (theBopEnt)[expPer];
         }

      inline WitPeriod lastExecPer (WitBopEntry * theBopEnt, WitPeriod expPer)
         {
         return lastExecPer_ (theBopEnt)[expPer];
         }
@

