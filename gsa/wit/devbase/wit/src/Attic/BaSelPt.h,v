head	1.14;
access;
symbols
	EndRw-branch:1.13.0.6
	Root-of-EndRw:1.13
	rwToStl:1.13.0.4
	latest_sce_3_10_20010924:1.13.0.2
	sce_3_10_20010924:1.13
	latest_sce_3_00_20010601:1.4.0.2
	sce_3_00_20010601:1.4;
locks; strict;
comment	@ * @;


1.14
date	2003.03.03.23.26.37;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2001.08.30.20.29.22;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.24.22.03.18;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.23.21.13.52;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.22.20.41.47;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.17.22.00.08;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.03.17.00.57;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.13.20.30.22;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.11.19.29.09;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.01.19.23.31;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.29.22.11.25;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.25.22.59.11;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.25.14.53.22;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.10.22.31.11;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.13
log
@Refactoring for constrained stock reallocation.
@
text
@@


1.12
log
@Refactoring for constrained stock reallocation.
@
text
@a0 102
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef BaSelPtH
#define BaSelPtH

//------------------------------------------------------------------------------
// Header file: "BaSelPt.h"
//
// Contains the declaration of class BaSelPt.
//------------------------------------------------------------------------------

#include <SelPt.h>

//------------------------------------------------------------------------------
// Class BaSelPt
//
// A SelPt for build-ahead.
// A BaSelPt represents a Material and fill period at which an explosion period
// must be selected.
//
// Class Hierarchy:
//
// SelPt
//    BaSelPt
//
// Implemented in BuildAhd.C.
//------------------------------------------------------------------------------

class WitBaSelPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaSelPt (WitBaMat *, WitPeriod, WitBaCand *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitBaSelPt ();

      //------------------------------------------------------------------------
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual WitBoolean  splittable     ();   
      virtual WitPart *   myFillPart     ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void advanceSel ();
         //
         // Advances selBaCand () to the BaCand that represents the next useable
         // explosion period, if any; otherwise, sets selBaCand () to NULL.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitBaCand * selBaCand ()
         {
         return WitBaCand::safeCast (selSelCand ());
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBaSelPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBaMat * const myBaMat_;
         //
         // The BaMat that owns this BaSelPt.

      const WitPeriod myFillPer_;
         //
         // The fill period associated with this BaSelPt.
   };

#endif
@


1.11
log
@Refactoring for constrained stock reallocation.
@
text
@d56 6
a61 7
      virtual void        alterSelection   ();
      virtual void        printSelection   ();
      virtual WitSelMgr * mySelMgr         ();
      virtual void        prtID            ();        
      virtual WitBoolean  splittable       ();   
      virtual void        adjustSplitBound (WitSelCand *, double &);
      virtual WitPart *   myFillPart       ();
@


1.10
log
@Refactoring for constrained stock reallocation.
@
text
@a55 1
      virtual WitTlObj *  selectedObj      ();  
d61 1
a61 1
      virtual void        adjustSplitBound (WitTlObj *, double &);
d79 1
a79 1
         return WitBaCand::downCast (selSelCand ());
@


1.9
log
@Implemented selection splitting speed-up by partial allocation reuse.
@
text
@d71 2
a72 2
         // Advances selBaCand_ to the BaCand that represents the next useable
         // explosion period, if any; otherwise, sets selBaCand_ to NULL.
d78 4
a81 1
      accessFunc (WitBaCand *, selBaCand)
a101 6

      WitBaCand * selBaCand_;
         //
         // The currently selected BaCand that represents the explosion period
         // to be used when filling requirements for myBaMat_->myMaterial () in
         // myfillPer_, or NULL, if there is none.
@


1.8
log
@Refactoring build-ahead.
@
text
@d63 1
@


1.7
log
@Fixed bug in two-way multi-exec:
   NSTN and ASAP multi-exec collisions were not being adequately detected.
@
text
@d44 1
a44 1
      WitBaSelPt (WitBaMat *, WitPeriod);
d64 15
d98 6
@


1.6
log
@Refactoring.
@
text
@d59 1
a59 1
      virtual WitSelMgr * mySelMgr         (WitSelector *);
@


1.5
log
@Continued development of selection splitting for multi=exec.
@
text
@d80 1
a80 1
      const WitPeriod fillPeriod_;
@


1.4
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d53 1
a53 1
      // Other public member functions.
d56 7
a62 31
      virtual WitTlObj * selectedObj ();
         //
         // Override from class SelPt.

      virtual void alterSelection ();
         //
         // Override from class SelPt.

      virtual void printSelection ();
         //
         // Override from class SelPt.

      virtual WitSelMgr * mySelMgr (WitSelector *);
         //
         // Override from class SelPt.

      virtual WitBoolean splittable ();
         //
         // Override from class SelPt.

      virtual void adjustSplitBound (WitTlObj *, double &);
         //
         // Override from class SelPt.

      virtual void prtSplitting (double);
         //
         // Override from class SelPt.

      virtual void prtSplitExp (WitTlObj *);
         //
         // Override from class SelPt.
@


1.3
log
@Various refactorings for sel-split for multi-exec.
@
text
@d76 4
@


1.2
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d56 1
a56 1
      virtual WitTlObj * selection ();
d77 4
@


1.1
log
@Renamed AltPt classes to SelPt classes.
@
text
@d56 1
a56 1
      virtual void alterSelection ();
d60 1
a60 1
      virtual void splitSelection (double);
d73 4
@

