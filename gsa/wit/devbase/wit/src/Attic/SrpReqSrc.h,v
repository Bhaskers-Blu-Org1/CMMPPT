head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2006.03.13.17.02.23;	author rjw;	state dead;
branches;
next	1.15;

1.15
date	2006.03.11.00.03.46;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.10.23.23.31;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.18.00.38.49;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.16.23.36.21;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.16.22.37.08;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.15.00.07.36;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.10.16.51.59;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.09.21.54.43;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.07.19.18.43;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.06.23.43.26;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.06.23.24.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.02.22.37.45;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.01.20.45.46;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.31.20.45.31;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.26.22.10.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.16
log
@GPIP
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpReqSrcH
#define SrpReqSrcH

//------------------------------------------------------------------------------
// Header file: "SrpReqSrc.h"
//
// Contains the declaration of class GpipReqSrc.
//------------------------------------------------------------------------------

#include <PtrVec.h>

//------------------------------------------------------------------------------
// Class GpipReqSrc
//
// "Group Post-Implosion Pegging Requirement Source"
//
// Represents the source of a requirement in SRP.
// This consists of an ordered list of GpipSeqEls.
//
// Implemented in SrpReq.C.
//------------------------------------------------------------------------------

class WitGpipReqSrc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitGpipReqSrc (WitGpipSeqEl *);

      WitGpipReqSrc (const WitGpipReqSrcStack & theReqSrcs);
         //
         // Contructs an GpipReqSrc whose GpipSeqEl list  is the union of those
         // in theReqSrcs.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitGpipReqSrc ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      bool belongsBefore (WitGpipReqSrc * theReqSrc);
         //
         // Returns true, iff this GpipReqSrc belongs ahead of theReqSrc in an
         // ordered list.

      bool isEquivalentTo (WitGpipReqSrc * theReqSrc);
         //
         // Returns true, iff this GpipReqSrc is equivalent to theReqSrc.
         // (i.e. it lists the same GpipSeqEls.)

      void print (FILE * theFile, const char * leadingBlanks);
         //
         // Prints this GpipReqSrc to theFile.
         // leadingBlanks is to be a string of blanks to preceed the print.

      void attachSeqElItr (WitGpipSeqElItr & theItr);
         //
         // Attaches theItr to mySeqElVec_.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      bool compareSeqEls (
            WitGpipSeqEl * theSeqEl1,
            WitGpipSeqEl * theSeqEl2);
         //
         // Returns true, iff theSeqEl1 belongs ahead of theSeqEl2 in
         // mySeqElVec_.

      void buildTempSeqElVec (
            const WitGpipReqSrcStack & theReqSrcs,
            WitPtrVec <WitGpipSeqEl> & tempSeqElVec);
         //
         // Forms tempSeqElVec as the unsorted, unconsolidated union of the
         // GpipSeqEls for each of the GpipReqSrcs in theReqSrcs.

      void consolidateSeqEls (const WitPtrVec <WitGpipSeqEl> & tempSeqElVec);
         //
         // Forms mySeqElVec_ by consolidating the list of GpipSeqEls in
         // tempSeqElVec.

      noCopyCtorAssign (WitGpipReqSrc);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrVec <WitGpipSeqEl> mySeqElVec_;
         //
         // The ordered list of GpipSeqEls for this GpipReqSrc.
   };

#endif
@


1.15
log
@GPIP
@
text
@@


1.14
log
@GPIP
@
text
@d16 1
a16 1
// Contains the declaration of class SrpReqSrc.
d22 1
a22 1
// Class SrpReqSrc
d27 1
a27 1
// This consists of an ordered list of SrpSeqEls.
d32 1
a32 1
class WitSrpReqSrc
d40 1
a40 1
      WitSrpReqSrc (WitSrpSeqEl *);
d42 1
a42 1
      WitSrpReqSrc (const WitSrpReqSrcStack & theReqSrcs);
d44 2
a45 2
         // Contructs an SrpReqSrc whose SrpSeqEl list  is the union of those in
         // theReqSrcs.
d51 1
a51 1
      ~WitSrpReqSrc ();
d57 1
a57 1
      bool belongsBefore (WitSrpReqSrc * theReqSrc);
d59 1
a59 1
         // Returns true, iff this SrpReqSrc belongs ahead of theReqSrc in an
d62 1
a62 1
      bool isEquivalentTo (WitSrpReqSrc * theReqSrc);
d64 2
a65 2
         // Returns true, iff this SrpReqSrc is equivalent to theReqSrc.
         // (i.e. it lists the same SrpSeqEls.)
d69 1
a69 1
         // Prints this SrpReqSrc to theFile.
d72 1
a72 1
      void attachSeqElItr (WitSrpSeqElItr & theItr);
d83 2
a84 2
            WitSrpSeqEl * theSeqEl1,
            WitSrpSeqEl * theSeqEl2);
d86 1
a86 1
         // Returns true, iff theSrpSeqEl1 belongs ahead of theSrpSeqEl2 in
d90 2
a91 2
            const WitSrpReqSrcStack & theReqSrcs,
            WitPtrVec <WitSrpSeqEl> & tempSeqElVec);
d94 1
a94 1
         // SrpSeqEls for each of the SrpReqSrcs in theReqSrcs.
d96 1
a96 1
      void consolidateSeqEls (const WitPtrVec <WitSrpSeqEl> & tempSeqElVec);
d98 1
a98 1
         // Forms mySeqElVec_ by consolidating the list of SrpSeqEls in
d101 1
a101 1
      noCopyCtorAssign (WitSrpReqSrc);
d107 1
a107 1
      WitPtrVec <WitSrpSeqEl> mySeqElVec_;
d109 1
a109 1
         // The ordered list of SrpSeqEls for this SrpReqSrc.
@


1.13
log
@[shared-resource pegging]
@
text
@d24 1
a24 1
// "Shared-Resource Pegging Requirement Source"
@


1.12
log
@[shared-resource pegging]
@
text
@d72 3
a74 9
      inline int nSeqEls ()
         {
         return mySeqElVec_.length ();
         }

      inline WitSrpSeqEl * mySeqElFor (int theIdx)
         {
         return mySeqElVec_[theIdx];
         }
@


1.11
log
@[shared-resource pegging]
@
text
@d88 1
a88 5
      void mergeReqSrcs (const WitSrpReqSrcStack & theReqSrcs);
         //
         // Builds mySeqElVec_ as the union of the SrpSeqEls in theReqSrcs.

      static bool areInOrder (
d95 8
a102 3
      bool compareSeqEls (
            WitSrpSeqEl * theSeqEl1,
            WitSrpSeqEl * theSeqEl2);
d104 2
a105 2
         // Returns true, iff theSrpSeqEl1 belongs ahead of theSrpSeqEl2 in
         // mySeqElVec_.
@


1.10
log
@[shared-resource pegging]
@
text
@d99 7
@


1.9
log
@[shared-resource pegging]
@
text
@d105 1
a105 1
      WitVector <WitSrpSeqEl *> mySeqElVec_;
@


1.8
log
@[shared-resource pegging]
@
text
@d92 3
a94 3
      void buildSeqElStacks (
            const WitSrpReqSrcStack &        theReqSrcs,
            WitObjStack <WitSrpSeqElStack> & theSeqElStacks);
d96 2
a97 10
         // Builds theSeqElStacks as set of SrpSelElStacks (in reverse order)
         // for each SrpReqSrc in theReqSrcs.
         // Resizes mySeqElVec_ to the total number of SrpSeqEls in theReqSrcs.

      WitSrpSeqEl * findMinSeqEl (
            const WitObjStack <WitSrpSeqElStack> & theSeqElStacks);
         //
         // Finds and returns the SrpSeqEl that minumizes mySelNo () among the
         // first SrpSeqEls in each SrpSeqElStack in theSeqElStacks.
         // Returns NULL, if all SrpSeqElStacks in theSeqElStacks are empty.
d105 1
a105 1
      WitPtrVec <WitSrpSeqEl> mySeqElVec_;
@


1.7
log
@[shared-resource pegging]
@
text
@d19 1
a19 1
#include <ObjStack.h>
d57 1
a57 1
      void attachSeqElItr (WitSrpSeqElItr & theItr);
d59 2
a60 1
         // Attaches theItr to mySeqEls_.
d67 1
a67 1
      void print (const char * leadingBlanks);
d69 1
a69 1
         // Prints this SrpReqSrc.
d72 10
d90 1
a90 1
         // Builds mySeqEls_ as the union of the SrpSeqEls in theReqSrcs.
d98 1
d113 1
a113 1
      WitSrpSeqElStack mySeqEls_;
@


1.6
log
@[shared-resource pegging]
@
text
@d82 2
a83 2
            const WitSrpReqSrcStack &                  theReqSrcs,
            WitObjStack <WitObjStack <WitSrpSeqEl> > & theSeqElStacks);
d89 1
a89 1
            const WitObjStack <WitObjStack <WitSrpSeqEl> > & theSeqElStacks);
d101 1
a101 1
      WitObjStack <WitSrpSeqEl> mySeqEls_;
@


1.5
log
@[shared-resource pegging]
@
text
@d61 5
@


1.4
log
@[shared-resource pegging]
@
text
@d61 5
@


1.3
log
@[shared-resource pegging]
@
text
@d42 5
d54 1
a54 1
      // Data access functions.
d57 3
a59 1
      accessFunc (const WitObjStack <WitSrpSeqEl> &, mySeqEls)
d67 18
@


1.2
log
@[shared-resource pegging]
@
text
@d19 1
a19 1
#include <Util.h>
d27 1
a27 1
// For now, this is just an association to an SrpSeqEl.
d52 1
a52 1
      accessFunc (WitSrpSeqEl *, mySeqEl)
d66 1
a66 1
      WitSrpSeqEl * const mySeqEl_;
d68 1
a68 1
         // The SrpSeqEl for this SrpReqSrc.
@


1.1
log
@[shared-resource pegging]
@
text
@d29 1
a29 1
// Implemented in SRP.C.
@

