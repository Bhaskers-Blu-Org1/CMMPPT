head	1.3;
access;
symbols
	sce_4_05_20040511:1.2;
locks; strict;
comment	@ * @;


1.3
date	2005.02.24.23.23.56;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2004.04.14.21.25.35;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.09.15.52.47;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Vector PropRt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef Out2DARAH
#define Out2DARAH

//------------------------------------------------------------------------------
// Header file: "Out2DARA.h"
//
// Contains the declaration of class Out2DARA.
//------------------------------------------------------------------------------

#include <RealArg.h>

//------------------------------------------------------------------------------
// Class Out2DARA
//
// "Output 2-Dimensional Array Real Argument"
//
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is the address of a pointer belonging to the
// application program and it is WIT's responsibility to store at this address
// the pointer to a newly created real-valued C-style 2-dimensional array.
// Specifically, the underlying argument is of one of the following types:
//
//    float  * * *
//    double * * *
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const Out2DARA &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type float * * * and double * * *. These are the "underlying
//       arguments".
//    The newly created 2-D arrays are of type float * * and double * *. These
//    are called the "underlying arrays".
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitOut2DARA: public WitRealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOut2DARA (float * * *);
         //
         // Conversion from a float * * * underlying argument.

      WitOut2DARA (double * * *);
         //
         // Conversion from a double * * * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOut2DARA ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void apiAlloc (size_t nRows, size_t nCols) const;
         //
         // Allocates the underlying array to nRows by nCols.
         // Uses malloc, so the array can be passed back to the application
         // program.

      void copyIntoRow (
            int                   theIdx,
            const WitDblFlexVec & theDblFlexVec)
            const;
         //
         // Copies the elements of theDblFlexVec into the corresponding elements
         // of the row of the underlying array indexed by theIdx.

      operator void * () const;
         //
         // Returns the underlying argument, converted to a void *.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitOut2DARA);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * * * const myFltArPtr_;
         //
         // The underlying argument, if it is a float * * *.
         // Otherwise NULL.

      double * * * const myDblArPtr_;
         //
         // The underlying argument, if it is a double * * *.
         // Otherwise NULL.
   };

#endif
@


1.2
log
@Double Precision.
@
text
@@


1.1
log
@Double Precision.
@
text
@d83 1
a83 1
      void convCopyIntoRow (
@

