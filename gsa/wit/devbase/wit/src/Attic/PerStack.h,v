head	1.6;
access;
symbols
	EndRw-branch:1.3.0.4
	Root-of-EndRw:1.3
	rwToStl:1.3.0.2;
locks; strict;
comment	@ * @;


1.6
date	2003.03.03.23.27.00;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2003.01.23.19.13.23;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.02.22.18.42;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.26.18.42.52;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.26.18.28.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.21.21.52.20;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.5
log
@Replaced some C style casts with C++ style casts.
@
text
@@


1.4
log
@Internal changes.
@
text
@a0 138
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PerStackH
#define PerStackH

//------------------------------------------------------------------------------
// Header file: "PerStack.h"
//
// Contains the declaration of the following classes:
//
//    PerStack
//    PerStItr
//------------------------------------------------------------------------------

#include <ObjStack.h>

class WitPerStItr;

//------------------------------------------------------------------------------
// Class PerStack
//
// A stack of periods.
//
// Class Hierarchy:
//
// AbsStack
//    AbsObjStack
//       ObjStack <const Period>
//          PerStack
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitPerStack: public WitObjStack <const WitPeriod>
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPerStack (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPerStack ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void push (WitPeriod thePer);
         //
         // Pushes thePer onto the top of this PerStack.

      bool pop (WitPeriod & thePer);
         //
         // If this PerStack is non-Empty, the first period it contains is
         // removed from it and thePer is set to the removed period.
         // Returns true, iff this PerStack is non-empty.

      static bool advance (WitPerStItr & theItr, WitPeriod & thePer);
         //
         // See AbsStItr::advanceAbs.
         // Sets thePer, if the advance is successful.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPerStack);
   };

//------------------------------------------------------------------------------
// Class PerStItr
//
// Responsible for iterating through the elements of a PerStack.
//
// Class Hierarchy:
//
// AbsStItr
//    ObjStItr <const Period>
//       PerStItr
//
// Implemented in Stack.C.
//------------------------------------------------------------------------------

class WitPerStItr: public WitObjStItr <const WitPeriod>
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPerStItr ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPerStItr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline void attachTo (const WitPerStack & thePerStack)
         {
         attachToAbs (thePerStack);
         }

      inline bool advance (WitPeriod & thePer)
         {
         return WitPerStack::advance (* this, thePer);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPerStItr);
   };

#endif
@


1.3
log
@Continued implementation of Single-Source.
@
text
@d65 1
a65 1
      WitBoolean pop (WitPeriod & thePer);
d69 1
a69 1
         // Returns TRUE, iff this PerStack is non-empty.
d71 1
a71 1
      static WitBoolean advance (WitPerStItr & theItr, WitPeriod & thePer);
d124 1
a124 1
      inline WitBoolean advance (WitPeriod & thePer)
@


1.2
log
@Continued implementation of Single-Source.
@
text
@a81 5
      inline WitPerLink * firstPerLink () const
         {
         return (WitPerLink *) firstAbsLink ();
         }

@


1.1
log
@Continued implementation of Single-Source.
@
text
@d22 3
a24 1
#include <Stack.h>
d29 1
a29 1
// A stack of individual objects of undefined type.
d34 3
a36 1
//    PerStack
d41 1
a41 1
class WitPerStack: public WitAbsStack
d71 1
a71 1
      static WitBoolean advance (WitAbsStItr & theItr, WitPeriod & thePer);
d91 1
a91 1
// Class template PerStItr
d98 2
a99 1
//    PerStItr
d104 1
a104 1
class WitPerStItr: public WitAbsStItr
@

