head	1.5;
access;
symbols
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.2.0.4
	Root-of-EndRw:1.2
	rwToStl:1.2.0.2;
locks; strict;
comment	@ * @;


1.5
date	2003.10.01.20.53.59;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2003.02.13.23.06.32;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.23.19.13.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.11.18.53.16;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.04.23.07.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Continued implementation of post-implosion pegging.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RefMapIH
#define RefMapIH

//------------------------------------------------------------------------------
// Header file: "RefMapI.h"
//
// Contains the implementation of class template RefMap <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <RefMap.h>

//------------------------------------------------------------------------------

template <RefMapArgDecs> 
      WitRefMap <RefMapArgs>::WitRefMap ():
         myPtrVec_ ()
   {
   ifDebug (DomEl * theDomEl);

   ifDebug (DomEl::verifyMappingIndex (theDomEl));
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs> 
       WitRefMap <RefMapArgs>::~WitRefMap ()
   {
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs> 
      void WitRefMap <RefMapArgs>::allocate (WitProblem * theProblem)
   {
   myPtrVec_.resize (DomEl::nInstances (theProblem));
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs>
      void WitRefMap <RefMapArgs>::clear ()
   {
   myPtrVec_.clear ();
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs>
      void WitRefMap <RefMapArgs>::setMapFor (
         DomEl *   theDomEl,
         RangeEl & theRangeEl)
   {
   myPtrAt (theDomEl) = & theRangeEl;
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs>
      inline RangeEl & WitRefMap <RefMapArgs>::operator () (DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_ (theDomEl->mappingIndex ());
   }

//------------------------------------------------------------------------------

template <RefMapArgDecs>
      inline RangeEl * & WitRefMap <RefMapArgs>::myPtrAt (DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myPtrVec_[theDomEl->mappingIndex ()];
   }

#endif
@


1.4
log
@Continued implementation of proportionate routing.
@
text
@@


1.3
log
@Replaced some C style casts with C++ style casts.
@
text
@d44 1
a44 5
   int nInst;

   nInst = theProblem->myCompMgr ()->nInstances (static_cast <DomEl *> (NULL));

   myPtrVec_.resize (nInst);
@


1.2
log
@Continued implementation of opt implosion with lot sizes.
@
text
@d46 1
a46 1
   nInst = theProblem->myCompMgr ()->nInstances ((DomEl *) NULL);
@


1.1
log
@Continued implementation of single-source.
@
text
@d66 8
d76 1
a76 1
   myPtrVec_[theDomEl->mappingIndex ()] = & theRangeEl;
d82 1
a82 1
      inline RangeEl & WitRefMap <RefMapArgs>::operator () (DomEl * theDomEl)
d86 1
a86 1
   return myPtrVec_ (theDomEl->mappingIndex ());
@

