head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2005.01.10.22.34.48;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2004.12.23.20.30.07;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.22.22.27.10;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.13.23.35.48;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.06.22.38.15;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Low-Pri Prop-Rt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PoMgrH
#define PoMgrH

//------------------------------------------------------------------------------
// Header file: "PoMgr.h"
//
// Contains the declaration of class PoMgr.
//------------------------------------------------------------------------------

#include <RtCase.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class PoMgr
//
// "Proportionate Routing Manager"
//
// Main Interface to the Proportionate Routing Subsystem.
// Old Version
//
// Class Hierarchy:
//
// ProbAssoc
//    PoMgr
//
// Implemented in PropOt.C.
//------------------------------------------------------------------------------

class WitPoMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPoMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPoMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static bool instNeededFor (WitProblem * theProblem);
         //
         // Returns TRUE, iff a PoMgr is needed for theProblem.

      void print ();
         //
         // Prints the proportionate routing subsystem.

      void definePropExp (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs);
         //
         // Sets theExpPairs to be the list of pairs (theRtCand, propExpVol),
         // that define a proportionate explosion of expVol units at
         // theRtSite in thePer.

      bool active (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Each returns true, iff proportionate routing is currently active for
         // theRtCand in thePer.

      void setActive (WitRtCand * theRtCand, WitPeriod thePer, bool theValue);
         //
         // Sets the "active for prop-rt status" of theRtCand in thePer to
         // theValue.

      bool potActive (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns true, iff proportionate routing thru theRtCand in thePer has
         // not been permanently ruled out.
         // Note that funcActive () and active () return the same value, except
         // in low-pri prop-rt mode.

      //------------------------------------------------------------------------
      // Selection splitting functions.
      //------------------------------------------------------------------------

      bool selIsSplit (WitRtSite * theRtSite, WitPeriod thePer);
         //
         // Returns true, iff the proportionate routing thru theRtSite in
         // thePer is split. Valid only in sel-split mode.

      void defineSplit (
            WitRtSite *         theRtSite, 
            WitPeriod           thePer,
            double              expVol,
            WitRtCandDblStack & theExpPairs,
            double &            unbddVol);
         //
         // Defines a split proportionate explosion of expVol units at
         // theRtSite in thePer, by setting the following arguments:
         //
         // theExpPairs: The explosion pairs for the bounded portion of the
         //              split.
         // unbddVol:    The splitVol for the unbounded portion of the split.

      void recordFlowSS (
            WitRtSite * theRtSite,
            WitPeriod   thePer,
            double      incFlowVol);
         //
         // Records the fact that incFlowVol additional units are being flowed
         // through theRtSite in thePer, for sel-split purposes.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitSelMgr * mySelMgrFor (WitRtCase theRtCase);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPoMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPoCoord * myPoCoord_;
         //
         // The PoCoord owned by this PoMgr.
   };

#endif
@


1.4
log
@Low-Pri Prop-Rt.
@
text
@@


1.3
log
@Low-Pri Prop-Rt.
@
text
@a92 4
      WitSelPt * mySelPtFor (WitRtCand * theRtCand, WitPeriod thePer);
         //
         // Returns the prop-rt SelPt for theRtCand and thePer.

@


1.2
log
@Low-Pri Prop-Rt.
@
text
@d28 1
@


1.1
log
@Low-Pri Prop-Rt.
@
text
@d131 1
a131 1
      WitSelMgr * mySelMgr (WitRtCase theRtCase);
@

