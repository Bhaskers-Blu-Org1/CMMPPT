head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2007.08.24.22.14.00;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2007.08.24.21.12.38;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.24.20.17.24;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.24.15.48.07;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.22.23.24.09;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.22.22.45.29;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.22.22.16.15;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.21.18.43.47;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.20.22.47.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ScenSetH
#define ScenSetH

//------------------------------------------------------------------------------
// Header file: "ScenSet.h"
//
// Contains the declaration of class ScenSet.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <List.h>
#include <PtrTVec.h>

//------------------------------------------------------------------------------
// Class ScenSet
//
// "Scenario Set"
// Represents a set of Scenarios.
// A ScenSet is considered to belong to one of the two stages:
//    If it belongs to the planning stage,
//       then it represents the set of all Scenarios.
//    If it belongs to the recourse stage,
//       then it represents a particular Scenario.
//------------------------------------------------------------------------------

class WitScenSet: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitScenSet (WitStochImpOP *);
         //
         // Constructs a planning stage ScenSet.

      WitScenSet (WitScenario *, WitStochImpOP *);
         //
         // Constructs a recourse stage ScenSet.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitScenSet ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints this ScenSet to the OptProb file.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitStochImpOP *,               myStochImpOP)
      accessFunc (const WitList <WitScenario> &, myScenarios)
      accessFunc (WitScenario *,                 firstScenario)
      accessFunc (double,                        totalProb)

      inline WitStochLoc * myStochLocFor (WitPeriod thePer)
         {
         return myStochLocs_[thePer];
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void setUp ();
         //
         // Sets up this ScenSet.

      noCopyCtorAssign (WitScenSet);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitStochImpOP * const myStochImpOP_;
         //
         // The StochImpOP that owns this ScenSet.

      const bool recourseStage_;
         //
         // If true,  this ScenSet belongs to the recourse stage.
         // If false, this ScenSet belongs to the planning stage.

      WitList <WitScenario> myScenarios_;
         //
         // The set of Scenarios that this ScenSet represents.

      WitScenario * firstScenario_;
         //
         // The first Scenario that this ScenSet represents.

      double totalProb_;
         //
         // The sum of the probabilities of the Scenarios represented by this
         // ScenSet.

      WitPtrTVec <WitStochLoc> myStochLocs_;
         //
         // myStochLocs_[thePer] is the StochLoc owned by this ScenSet for this
         // ScenSet and thePer.
   };

#endif
@


1.8
log
@Stochastic Implosion
@
text
@@


1.7
log
@Stochastic Implosion
@
text
@d114 1
a114 1
         // The sum of the scenarioProbs of the Scenarios represented by this
@


1.6
log
@Stochastic Implosion
@
text
@d20 1
d58 8
d69 4
a72 2
      accessFunc    (WitStochImpOP *, myStochImpOP)
      accessNonNull (WitScenario *,   myScenario)
d104 9
a112 1
      WitScenario * myScenario_;
d114 2
a115 3
         // If this ScenSet belongs to the recourse stage, myScenario_ is the
         // Scenario that it represents;
         // if it belongs to the planning stage, myScenario_ is NULL.
@


1.5
log
@Stochastic Implosion
@
text
@d26 6
a31 2
// Represents a set of Scenarios;
// either a single Scenario or the set of all Scenarios.
d44 1
a44 1
         // Constructs an all-Scenario ScenSet.
d48 1
a48 1
         // Constructs a single-Scenario ScenSet.
a56 12
      // Other public member functions.
      //------------------------------------------------------------------------

      inline bool sglScenario ()
         {
         return (my1Scenario_ != NULL);
         }
         //
         // Returns true,  if this ScenSet is a single-Scenario ScenSet.
         // Returns false, if this ScenSet is an   all-Scenario ScenSet.

      //------------------------------------------------------------------------
d61 1
a61 1
      accessNonNull (WitScenario *,   my1Scenario)
d88 6
a93 1
      WitScenario * my1Scenario_;
d95 3
a97 2
         // If this ScenSet represents a single Scenario my1Scenario_ is the
         // Scenario; otherwise NULL.
d101 2
a102 2
         // myStochLocs_[thePer] is the StochLoc owned by this ScenSet for
         // this ScenSet and thePer.
@


1.4
log
@Stochastic Implosion
@
text
@d68 2
a69 1
      accessNonNull (WitScenario *, my1Scenario)
@


1.3
log
@Stochastic Implosion
@
text
@d70 1
a70 1
      inline WitScenSetPer * myScenSetPerFor (WitPeriod thePer)
d72 1
a72 1
         return myScenSetPers_[thePer];
d100 1
a100 1
      WitPtrTVec <WitScenSetPer> myScenSetPers_;
d102 1
a102 1
         // myScenSetPers_[thePer] is the ScenSetPer owned by this ScenSet for
@


1.2
log
@Stochastic Implosion
@
text
@d70 5
@


1.1
log
@Stochastic Implosion
@
text
@d20 1
d76 4
d94 5
@

