head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2006.03.13.17.02.23;	author rjw;	state dead;
branches;
next	1.16;

1.16
date	2006.03.11.00.03.46;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.10.23.23.31;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.10.16.51.59;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.09.21.54.43;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.06.20.36.01;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.02.22.37.45;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.31.20.45.31;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.31.19.27.38;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.26.22.10.56;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.23.16.43.02;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.18.20.02.59;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2006.01.17.19.01.10;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.17.16.37.26;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.16.22.39.43;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.16.20.50.34;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.13.22.50.18;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@GPIP
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpReqSpecH
#define SrpReqSpecH

//------------------------------------------------------------------------------
// Header file: "SrpReqSpec.h"
//
// Contains the declaration of class GpipReqSpec.
//------------------------------------------------------------------------------

#include <Util.h>

//------------------------------------------------------------------------------
// Class GpipReqSpec
//
// "Group Post-Implosion Pegging Requirement Specification"
//
// Specifies a pegged requirement for SRP.
//
// Implemented in SrpReq.C.
//------------------------------------------------------------------------------

class WitGpipReqSpec
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitGpipReqSpec ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitGpipReqSpec ();

      //------------------------------------------------------------------------
      // Other Public member functions.
      //------------------------------------------------------------------------

      void setData (WitGpipReqSrc * theReqSrc, double incReqVol);
         //
         // Sets the values stored by this GpipReqSpec to the arguments.

      void addToIncReqVol (double deltaIncReqVol);
         //
         // Adds deltaIncReqVol to incReqVolFor_.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitGpipReqSrc *, myReqSrc)
      accessFunc (double,          incReqVolFor)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitGpipReqSpec);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitGpipReqSrc * myReqSrc_;
         //
         // The GpipReqSrc that is designated as the source of the requirement.

      double incReqVolFor_;
         //
         // The incremental requirement volume.
   };

#endif
@


1.16
log
@GPIP
@
text
@@


1.15
log
@GPIP
@
text
@d16 1
a16 1
// Contains the declaration of class SrpReqSpec.
d22 1
a22 1
// Class SrpReqSpec
d31 1
a31 1
class WitSrpReqSpec
d39 1
a39 1
      WitSrpReqSpec ();
d45 1
a45 1
      ~WitSrpReqSpec ();
d51 1
a51 1
      void setData (WitSrpReqSrc * theReqSrc, double incReqVol);
d53 1
a53 1
         // Sets the values stored by this SrpReqSpec to the arguments.
d63 2
a64 2
      accessFunc (WitSrpReqSrc *, myReqSrc)
      accessFunc (double,         incReqVolFor)
d72 1
a72 1
      noCopyCtorAssign (WitSrpReqSpec);
d78 1
a78 1
      WitSrpReqSrc * myReqSrc_;
d80 1
a80 1
         // The SrpReqSrc that is designated as the source of the requirement.
@


1.14
log
@[shared-resource pegging]
@
text
@d24 1
a24 1
// "Shared-Resource Pegging Requirement Specification"
@


1.13
log
@[shared-resource pegging]
@
text
@a58 7
      static bool areInOrder (
            WitSrpReqSpec * theReqSpec1,
            WitSrpReqSpec * theReqSpec2);
         //
         // Returns true, iff theSrpReqSpec1 belongs ahead of theSrpReqSpec2 in
         // an ordered list.

@


1.12
log
@[shared-resource pegging]
@
text
@d59 3
a61 1
      static bool compare (WitSrpReqSpec *, WitSrpReqSpec *);
d63 2
a64 1
         // Comparison function for sorting SrpReqSpecs.
@


1.11
log
@[shared-resource pegging]
@
text
@d57 1
a57 1
         // Adds deltaIncReqVol to incReqVolVal_.
d68 1
a68 1
      accessFunc (double,         incReqVolVal)
d86 1
a86 1
      double incReqVolVal_;
@


1.10
log
@[shared-resource pegging]
@
text
@a58 4
      void getData (WitSrpReqSrc * & theReqSrc, double & incReqVol);
         //
         // Sets the arguments to the values stored by this SrpReqSpec.

d63 7
@


1.9
log
@[shared-resource pegging]
@
text
@d28 1
a28 1
// Implemented in SRP.C.
@


1.8
log
@[shared-resource pegging]
@
text
@d55 4
@


1.7
log
@[shared-resource pegging]
@
text
@d51 1
a51 1
      void setData (WitSrpSeqEl * theSeqEl, double incReqVol);
d55 1
a55 1
      void getData (WitSrpSeqEl * & theSeqEl, double & incReqVol);
a62 7
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitSrpSeqEl *, mySeqEl)
      accessFunc (double,        incReqVolVal)

d75 1
a75 1
      WitSrpSeqEl * mySeqEl_;
d77 1
a77 1
         // The SrpSeqEl that is designated as the source of the requirement.
@


1.6
log
@[shared-resource pegging]
@
text
@d19 1
a19 1
#include <PairStack.h>
d26 1
a26 1
// Specifies a set of pegged requirements in SRP.
d28 1
a28 1
// Implemented on SRP.C.
d39 1
a39 1
      WitSrpReqSpec (WitProblem *);
d48 1
a48 1
      // Other public member functions.
d51 3
a53 4
      inline bool isEmpty ()
         {
         return myReqPairs_.isEmpty ();
         }
d55 1
a55 1
      void addUnsorted (WitSrpSeqEl * theSrpSeqEl, double incReqVol);
d57 1
a57 2
         // Adds (theSrpSeqEl, incReqVol) to the set of requirements.
         // This SrpReqSpec must be in an unsorted state.
d59 1
a59 1
      void sort ();
d61 1
a61 1
         // Sorts and consolidates this SrpReqSpec.
d63 3
a65 5
      void addToFront (WitSrpSeqEl * theSrpSeqEl, double incReqVol);
         //
         // Adds (theSrpSeqEl, incReqVol) to the front of the list of
         // requirements.
         // This SrpReqSpec must be in a sorted state.
d67 2
a68 6
      bool getFirst (WitSrpSeqEl * & theSrpSeqEl, double & incReqVol);
         //
         // If this SrpReqSpec is non-Empty, its first pair is removed from it
         // and (theSrpSeqEl, incReqVol) is set to the pair.
         // Returns true, iff this SrpReqSpec was non-empty before the removal.
         // This SrpReqSpec must be in a sorted state.
a75 9
      void consolidate ();
         //
         // Consolidates this SrpReqSpec.

      bool belongsInFront (WitSrpSeqEl * theSrpSeqEl);
         //
         // Returns true, iff it would be valid to add theSrpSeqEl to the front
         // of this SrpReqSpec.

d82 1
a82 1
      WitPairStack <WitSrpSeqEl, double> myReqPairs_;
d84 1
a84 2
         // A set of pairs, (theSrpSeqEl, incReqVol), indicating that incReqVol
         // units of requirement are pegged to theSrpSeqEl.
d86 1
a86 1
      bool sorted_;
d88 1
a88 1
         // True, iff this SrpReqSpec has been sorted and consolidated.
@


1.5
log
@[shared-resource pegging]
@
text
@@


1.4
log
@[shared-resource pegging]
@
text
@d63 1
a63 1
         // Sorted this SrpReqSpec.
d84 4
d106 1
a106 1
         // True, iff this SrpReqSpec has been sorted.
@


1.3
log
@[shared-resource pegging]
@
text
@d84 5
@


1.2
log
@[shared-resource pegging]
@
text
@a55 5
      inline bool isNonEmpty ()
         {
         return myReqPairs_.isNonEmpty ();
         }

@


1.1
log
@[shared-resource pegging]
@
text
@d61 1
a61 1
      void add (WitSrpSeqEl * theSrpSeqEl, double incReqVol);
d64 1
d66 1
a66 1
      bool get (WitSrpSeqEl * & theSrpSeqEl, double & incReqVol);
d68 12
a79 2
         // If this SrpReqSpec is non-Empty, one of its pairs is removed from it
         // and (theSrpSeqEl, incReqVol) is set to the removed pair.
d81 1
d99 4
@

