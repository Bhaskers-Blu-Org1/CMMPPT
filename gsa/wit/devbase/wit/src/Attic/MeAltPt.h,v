head	1.18;
access;
symbols
	EndRw-branch:1.17.0.8
	Root-of-EndRw:1.17
	rwToStl:1.17.0.6
	latest_sce_3_10_20010924:1.17.0.4
	sce_3_10_20010924:1.17
	latest_sce_3_00_20010601:1.17.0.2
	sce_3_00_20010601:1.17
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2003.03.03.23.26.49;	author rjw;	state dead;
branches;
next	1.17;

1.17
date	2001.05.10.22.31.12;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.05.10.17.58.18;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.08.21.35.43;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.03.15.28.37;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.30.21.29.41;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.06.23.23.52;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.06.19.22.09;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.03.19.23.04;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.23.19.43.24;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.20.21.03.59;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.12.19.48.06;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.22.16.18.26;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.05.19.05.30;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.23.11.42;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.21.20.03.24;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.06;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.17
log
@Renamed AltPt classes to SelPt classes.
@
text
@@


1.16
log
@Removed class MePrinter.
@
text
@a0 138
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MeAltPtH
#define MeAltPtH

//------------------------------------------------------------------------------
// Header file: "MeAltPt.h"
//
// Contains the declaration of class MeAltPt.
//------------------------------------------------------------------------------

#include <MeCoord.h>
#include <AltPt.h>

//------------------------------------------------------------------------------
// Class MeAltPt
//
// "Multi-Exec Alteration Point"
// Responsible for selecting the execution period to use in multi-exec mode,
// for a particular BopEntry, explosion period, and multi-exec direction.
//
// Implemented in MultiEx.C.
//------------------------------------------------------------------------------

class WitMeAltPt: public WitAltPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeAltPt (WitMeCoordPt * theMeCoordPt, WitMeDir * theMeDir);
         //
         // myMeCoordPt_ <-- theMeCoordPt
         // myMeDir_     <-- theMeDir

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMeAltPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void alterSelection ();
         //
         // Override from class AltPt.

      virtual void splitSelection (double);
         //
         // Override from class AltPt.

      virtual void printSelection ();
         //
         // Override from class AltPt.

      virtual WitSelMgr * mySelMgr (WitSelector *);
         //
         // Override from class AltPt.

      virtual WitBoolean splittable ();
         //
         // Override from class AltPt.

      WitBoolean hasResAlt ();
         //
         // Returns TRUE, iff this MeAltPt can alter its selection to another
         // exec period.
         // Valid only if a selection currently exists.

      inline WitPeriod selExecPer ()
         {
         witAssert (hasSelExecPer ());

         return myMeCoordPt_->indexedExecPer ()[selAltIdx_];
         }
         // 
         // Returns the currently selected exec period for this MeAltPt.

      inline WitBoolean hasSelExecPer ()
         {
         return (selAltIdx_ >= 0);
         }
         // 
         // Returns TRUE, iff this MeAltPt currently has a selected exec period.

      void deSelect ();
         //
         // Causes this MeAltPt to have no selected exec period.

      void print ();
         // 
         // Prints this MeAltPt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMeCoordPt *, myMeCoordPt)
      accessFunc (WitMeDir *,     myMeDir)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMeAltPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMeCoordPt * const myMeCoordPt_;
         //
         // The MeCoordPt that owns this MeAltPt.

      WitMeDir * const myMeDir_;
         //
         // The MeDir associated with this MeAltPt.

      int selAltIdx_;
         //
         // The index in myMeCoordPt_->indexedExecPer () of the currently
         // selected execPer for this MeAltPt, if any, else -1.
   };

#endif
@


1.15
log
@Removed class MeAltPt.
Changed name of class MeSelPt to MeAltPt.
Implemented de-selection of colliding MeAltPts.
@
text
@d101 4
@


1.14
log
@Fixed a bug on multi-exec.
@
text
@d19 2
a20 1
#include <ObjStack.h>
d25 3
a27 1
// ...
d32 1
a32 1
class WitMeAltPt: public WitUtil
d40 1
a40 1
      WitMeAltPt (WitPeriod execPer, WitProblem * theProblem);
d42 2
a43 2
         // execPeriod_ <-- execPer.
         // choosers_   <<< theProblem.
d52 1
a52 1
      // Data access functions.
d55 11
a65 2
      accessFunc (WitBoolean, useable)
      accessFunc (WitPeriod,  execPeriod)
d67 3
a69 3
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------
d71 1
a71 1
      void reject ();
d73 1
a73 1
         // If this MeAltPt is currently useable, it is made non-usable.
d75 1
a75 1
      void beChosenBy (WitMeSelPt * theMeSelPt);
d77 12
a88 1
         // Records that fact that theMeSelPt is now selecting this MeAltPt.
d90 8
a97 1
      WitBoolean hasaPendingChooser ();
d99 8
a106 1
         // Returns TRUE, iff at least one MeSelPt in choosers_ is pending.
d120 1
a120 1
      WitBoolean useable_;
d122 1
a122 1
         // TRUE, if myPeriod_ is currently eligible for selection.
d124 1
a124 1
      const WitPeriod execPeriod_;
d126 1
a126 1
         // The execution period associated with this MeAltPt.
d128 1
a128 1
      WitObjStack (WitMeSelPt) choosers_;
d130 2
a131 1
         // The set of all MeSelPts whose selMeAltPt is this MeAltPt.
@


1.13
log
@Fixed uninitialized memory bugs.
Refactoring for selection splitting.
@
text
@d59 1
a59 1
      void alterSelection ();
d61 1
a61 1
         // ...
d85 1
a85 2
         // TRUE, if myPeriod_ is currently eligible for selection by the BaMat
         // that owns this MeAltPt.
@


1.12
log
@Continuing development of selection splitting.
@
text
@a18 1
#include <AltPt.h>
d24 1
a24 6
// An AltPt at which the multiple execution scheme can be alterted.
//
// Class Hierarchy:
//
// AltPt
//    MeAltPt
d29 1
a29 1
class WitMeAltPt: public WitAltPt
d59 1
a59 1
      virtual void alterSelection ();
d61 1
a61 1
         // Override from class AltPt.
d63 1
a63 1
      virtual void splitSelection (double);
d65 1
a65 5
         // Override from class AltPt.

      virtual void printSelection ();
         //
         // Override from class AltPt.
d67 1
a67 1
      virtual WitSelMgr * mySelMgr (WitSelector *);
d69 1
a69 9
         // Override from class AltPt.

      virtual WitBoolean splittable ();
         //
         // Override from class AltPt.

      void beChosenBy (WitMeSelPt * theMeSelPt);
         //
         // Records that fact that theMeSelPt is now selecting this MeAltPt.
@


1.11
log
@Re-worked the controls for selection splitting.
@
text
@d81 4
@


1.10
log
@Continued implementation of selection splitting.
@
text
@a80 4
      virtual float splitRes ();
         //
         // Override from class AltPt.

@


1.9
log
@Continued implementation of selection splitting with the new design.
@
text
@d77 4
@


1.8
log
@Continued implementation of selection splitting with the new design.
@
text
@d73 1
a73 1
      virtual void printSelection (WitSelector *);
@


1.7
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d69 4
@


1.6
log
@Further development of coarse selection splitting.
@
text
@d73 4
@


1.5
log
@Some minor modifications.
@
text
@d20 1
a20 1
#include <Stack.h>
@


1.4
log
@Refactoring for selection splitting.
@
text
@d20 1
a20 1
#include <DynStack.h>
d98 1
a98 1
      WitObjDynStack (WitMeSelPt) choosers_;
@


1.3
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d83 1
a83 3
      copyCtorAndAssignment (WitMeAltPt);
         //
         // Prevents unintentional copying and assignment.
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d100 1
a100 1
      WitDynStack (WitMeSelPt) choosers_;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
