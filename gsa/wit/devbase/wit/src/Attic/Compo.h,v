head	1.87;
access;
symbols
	sce_5_01_20080919:1.82
	latest_sce_4_20_20060523:1.36.0.2
	sce_4_20_20060523:1.36
	latest_sce4_20_OSL:1.35.0.2
	sce_4_20_OSL:1.35
	sce_410_withVa:1.34
	sce_4_05_20040511:1.31
	sce_4_00_20040201:1.23
	nextGenBranch:1.21.0.2
	nextGenRoot:1.21
	sce_3_30_20030627:1.21
	EndRw-branch:1.18.0.4
	Root-of-EndRw:1.18
	rwToStl:1.18.0.2
	latest_sce_3_10_20010924:1.8.0.2
	sce_3_10_20010924:1.8
	latest_sce_3_00_20010601:1.7.0.4
	sce_3_00_20010601:1.7
	latest_sce_2_31_20010308:1.7.0.2
	sce_2_31_20010308:1.7
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.87
date	2010.09.09.20.20.32;	author rjw;	state dead;
branches;
next	1.86;

1.86
date	2010.02.05.20.41.52;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2009.12.29.16.33.44;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2009.12.28.23.07.43;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2009.12.24.22.58.55;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2007.11.29.21.12.31;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2007.11.29.16.24.42;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2007.11.28.23.23.45;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2007.11.28.20.40.32;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2007.11.15.17.15.32;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2007.11.14.17.18.53;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2007.11.13.23.02.16;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2007.11.13.20.17.38;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2007.10.22.19.58.51;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2007.10.18.23.14.44;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2007.10.17.14.58.47;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2007.10.15.21.50.33;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2007.09.28.22.08.25;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2007.09.26.22.52.51;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2007.09.11.18.55.18;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2007.09.11.18.09.16;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2007.09.10.21.01.34;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2007.08.01.22.41.56;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2007.06.18.22.28.41;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2007.06.18.19.53.32;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2007.06.14.16.09.35;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2007.06.08.18.09.39;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2007.06.05.21.06.00;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.06.05.16.15.22;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.05.30.16.01.18;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.05.25.18.39.10;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.05.24.18.52.21;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.05.22.15.46.51;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.05.14.19.05.39;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2007.05.14.16.18.38;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2007.05.11.20.43.55;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2007.05.10.21.14.40;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2007.05.10.17.22.13;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2007.05.04.23.27.10;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2007.04.25.19.56.53;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2007.04.24.20.07.50;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2007.04.19.14.52.49;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2007.04.18.22.27.01;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2007.04.18.21.18.20;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2007.04.16.20.12.54;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2007.04.06.19.34.17;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2007.04.05.20.23.51;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2007.04.03.22.04.03;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2007.04.02.23.01.14;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2006.09.21.15.42.25;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2006.09.19.17.50.54;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2006.05.02.17.33.56;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2005.09.30.21.57.54;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2005.03.21.21.49.26;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2005.02.24.23.23.55;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.11.04.16.30.13;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.04.19.22.16.27;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.29.23.21.27;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.24.16.50.34;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.02.12.19.13.39;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.02.07.00.12.10;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.02.04.22.31.27;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.04.18.57.49;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.01.30.23.07.51;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.11.18.29.12;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.08.19.27.49;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.19.16.48.14;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.03.07.21.34.15;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.01.02.22.18.22;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.05.19.31.29;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.04.23.07.18;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.03.22.35.16;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.03.16.01.46;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.30.20.08.57;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.29.21.35.44;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.29.14.32.38;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.28.19.44.56;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.04.22.14.32.05;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.18.14.02.28;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.25.16.08.13;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.04.22.27.49;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.04.22.07.34;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.38;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.20;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.19;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.29;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.20;	author wit;	state Exp;
branches;
next	;


desc
@@


1.87
log
@Heuristic Adjustment
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef CompoH
#define CompoH

//------------------------------------------------------------------------------
// Header file: "Compo.h"
//
// Contains the declaration of the following classes:
//
//    Component
//    DelComp
//    Node
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// class Component.
//
// A component of a WIT problem.
// The collection of Components of a WIT problem define the problem.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       GlobalComp
//       OptComp
//       DelComp
//          Node
//             Part
//                Material
//                Capacity
//             Operation
//          BillEntry
//             ConsEntry
//                BomEntry
//                SubEntry
//             BopEntry
//          Demand
//------------------------------------------------------------------------------

class WitComponent: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitComponent ();
         //
         // This function can only be called from myCompMgr ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (void *, appData)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setAppData (void *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool inserted () = 0;
         //
         // Returns true, iff this Component has been inserted into
         // myCompMgr ().

      void writeData ();
         //
         // Writes the section of the input data file for this Component.

      virtual void writeMultiObjVecs (WitObjective * theObj);
         //
         // Valid in multiple objectives mode only.
         // Writes to an input data file the ObjVecIRs owned by this Component.
         // For each ObjVecIR, the vector for theObj is written.
         // The default implementation does nothing.

      virtual void writeSolnData ();
         //
         // Writes the section of the solution data file for this Component.
         // This default version is a no-op.

      virtual void copySelfInto (WitCompMgr * theCompMgr) = 0;
         //
         // Creates a corresponding Component in theCompMgr, unless this
         // Component is the kind that automatically gets constructed by the
         // ctor of class Problem. Copies the input attributes of this Component
         // into the corresponding Component in theCompMgr.

      void purgeCompLists ();
         //
         // Removes all selForDel Components from this Component's Component
         // Lists.
         // Valid only during a purge.

      void reindexBoundSet ();
         //
         // Sets the mappingIndex of the BoundSet for this Component.
         // Valid only if this Component has a BoundSet, and myCompMgr () is
         // reindexing it.

      virtual void recount () = 0;
         //
         // Recomputes mappingIndex for this Component and tells myCompMgr ()
         // to recount this Component. This may be done for multiple levels of
         // derived classes.
         // Valid only if called by myCompMgr ().

      void clearDepLists ();
         //
         // Clears the dependent Lists of this Component.

      virtual WitBoundSet * myBoundSet ();
         //
         // Returns the BoundSet owned by this Component, if any, else NULL.
         // The base class implementation returns NULL.

      virtual void unpreprocess ();
         //
         // Puts this Component into its unpreprocessed state.

      virtual void clearOptSoln ();
         //
         // Clears this Component's portion of the solution.
         // Valid only when the optimizing implosion subsystem is clearing the
         // solution.

      virtual void clearStochSoln ();
         //
         // Clears this Component's portion of the stochastic solution.
         // Valid only when the stochastic implosion subsystem is clearing the
         // stochastic solution.

      //------------------------------------------------------------------------
      // This-derived-class-instance functions.
      //
      // In each case, if this Component is actually an instance of the
      // indicated derived class, the function returns that instance;
      // otherwise, it returns NULL.
      //------------------------------------------------------------------------

      virtual WitDelComp *   thisDelComp ();
      virtual WitNode *      thisNode    ();
      virtual WitPart *      thisPart    ();
      virtual WitMaterial *  thisMat     ();
      virtual WitCapacity *  thisCap     ();
      virtual WitOperation * thisOpn     ();
      virtual WitConsEntry * thisConsEnt ();
      virtual WitBomEntry *  thisBomEnt  ();
      virtual WitSubEntry *  thisSub     ();
      virtual WitBopEntry *  thisBopEnt  ();
      virtual WitDemand *    thisDemand  ();

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitComponent (WitCompMgr * theCompMgr);
         //
         // theCompMgr is the CompMgr that owns this Component.

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void prepSetUnpreAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpreprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetNonUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set without necessitating unpreprocessing or unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      virtual void writeDataID () = 0;
         //
         // Writes text identifying this Component to an input data file.

      virtual void writeDataAttrs () = 0;
         //
         // Writes the attributes of this Component to an input data file.

      void copyAttrsFrom (WitComponent * theComp);
         //
         // Copies the input attributes of theComp into this Component.

      virtual void purgeCompListsSpec ();
         //
         // Does aspects of purgeCompLists specific to the derived class.
         // The base class implementation is a no-op.

      virtual void clearDepListsSpec ();
         //
         // Does aspects of clearDepLists specific to the derived class.
         // The base class implementation is a no-op.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitComponent);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      void * appData_;
         //
         // The application data that has been attached to this Component, if
         // any.
   };

#endif
@


1.86
log
@multi-obj mode
@
text
@@


1.85
log
@Multi-Objective Mode
@
text
@d90 1
a90 1
         // Valid in multi-objective mode only.
@


1.84
log
@Multi-Objective Mode
@
text
@d91 2
a92 2
         // Writes to an input data file the ObjVecs owned by this Component.
         // For each ObjVec, the vector for theObj is written.
@


1.83
log
@Multi-Objective Mode
@
text
@d88 1
a88 1
      virtual void writeObjVecs (WitObjective * theObj);
d90 1
a92 1
         // Valid in multi-objecvtive mode only.
@


1.82
log
@Stochastic Implosion
@
text
@d88 7
@


1.81
log
@Stochastic Implosion
@
text
@a199 7
      void prepSetStochModeAttr (const char * theAttName);
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is allowed to be set in stochastic mode.
         // theAttName is the name of the attribute.

@


1.80
log
@Stochastic Implosion
@
text
@a157 1
      virtual WitBillEntry * thisBillEnt ();
@


1.79
log
@Stochastic Implosion
@
text
@d158 1
@


1.78
log
@Stochastic Implosion
@
text
@a137 4
      virtual int stageIndex ();
         //
         // Returns the stage index of this Component for stochastic implosion.

@


1.77
log
@Stochastic Implosion
@
text
@a127 5
      virtual void passPreRefs ();
         //
         // Passes references to the preprocessing  data of this Component to
         // myPreprocessor ().

@


1.76
log
@Stochastic Implosion
@
text
@a142 4
      virtual void passFssRefs ();
         //
         // Passes references to the FSS data of this Component to myFSS ().

@


1.75
log
@Stochastic Implosion
@
text
@a142 5
      virtual void passMrpRefs ();
         //
         // Passes references to the MRP data of this Component to
         // myOrigMrpExp ().

@


1.74
log
@Stochastic Implosion
@
text
@d137 1
a137 1
      virtual void importOptSoln ();
d139 3
a141 4
         // Imports this Component's portion of the optimizing implosion
         // solution from myDetOptImpMgr ().
         // Valid only when the optimizing implosion subsystem is exporting the
         // optimizing implosion solution.
d159 2
a160 2
         // Valid only when the stochastic implosoin subsystem is clearing the
         // stochastic solutiom.
@


1.73
log
@Stochastic Implosion
@
text
@d153 1
a153 1
      virtual int stageNo ();
@


1.72
log
@Stochastic Implosion
@
text
@d153 4
@


1.71
log
@Stochastic Implosion
@
text
@d168 1
@


1.70
log
@Stochastic Implosion
@
text
@d153 6
@


1.69
log
@Stochastic Implosion
@
text
@a68 5
      inline const WitBoundSet * myBoundSet ()
         {
         return myBoundSetForUpdate ();
         }

d123 5
a214 6
      virtual WitBoundSet * myBoundSetForUpdate ();
         //
         // Returns (non-const) the BoundSet owned by this Component, if any,
         // else NULL.
         // The base class implementation returns NULL.

a236 13
      //------------------------------------------------------------------------
      // storeStochAttr functions.
      // Each of these functions sets theData to theValue.
      // An unallocated vector is treated as a zero vector.
      // Valid only when the stochastic implosion subsystem is uploading.
      //------------------------------------------------------------------------

      void storeStochAttr (WitDblFlexVec &          theData,
                           const WitTVec <double> & theValue);

      void storeStochAttr (double &                 theData, 
                           double                   theValue);

@


1.68
log
@Stochastic Implosion
@
text
@a97 5
      virtual void writeDataSetClause ();
         //
         // Writes a "set" clause for this Component to an input data file.
         // The default implementation issues a fatal error.

@


1.67
log
@Stochastic Implosion
@
text
@d249 1
a249 1
      // loadInStochAttr functions.
d255 2
a256 2
      void loadInStochAttr (WitDblFlexVec &          theData,
                            const WitTVec <double> & theValue);
d258 2
a259 2
      void loadInStochAttr (double &                 theData, 
                            double                   theValue);
@


1.66
log
@Stochastic Implosion
@
text
@a148 7
      virtual void importStochSoln ();
         //
         // Imports this Component's portion of the stochastic implosion
         // solution from myStochImpMgr ().
         // Valid only when the stochastic implosion subsystem is either
         // exporting or clearing the stochastic implosion solution.

a219 7
      void loadInStochAttr (
                  WitDblFlexVec &    theData,
            const WitTVec <double> & theValue);
         //
         // Sets theData to theValue.
         // Valid only when the stochastic implosion subsystem is uploading.

d248 13
@


1.65
log
@Stochastic Implosion
@
text
@a148 7
      virtual void importStochInput ();
         //
         // Imports this Component's stochastic input data from
         // myStochImpMgr ().
         // Valid only when the stochastic implosion subsystem is exporting the
         // stochastic input data.

d227 7
@


1.64
log
@Stochastic Implosion
@
text
@d145 1
a145 1
         // solution from myOptImploder ().
@


1.63
log
@Stochastic Implosion
@
text
@d227 1
a227 1
      void prepSetStochModeAttr ();
d231 2
a232 2
         // The attribute is allowed to be set in stochastic mode, but not in
         // stochastic solution mode.
@


1.62
log
@Stochastic Implosion
@
text
@d231 2
a232 1
         // The attribute is allowed to be set in stochastic mode.
@


1.61
log
@Stochastic Implosion
@
text
@d212 2
a213 1
         // be set necessitating unpreprocessing.
d219 1
d225 7
@


1.60
log
@Stochastic Implosion
@
text
@d142 1
a142 1
      virtual void acquireOptSoln ();
d144 1
a144 1
         // Acquires this Component's portion of the optimizing implosion
d146 16
a171 5
      virtual void passStochRefs ();
         //
         // Passes references to the stochastic data of this Component to
         // myStochImpMgr ().

@


1.59
log
@Stochastic Implosion
@
text
@a137 4
      virtual void importPreData ();
         //
         // Imports this Component's preprocessing data from myPreprocessor ().

a240 2
      const WitPreData * expPreData ();

@


1.58
log
@Stochastic Implosion
@
text
@d133 5
@


1.57
log
@Stochastic Implosion
@
text
@d133 4
d240 2
@


1.56
log
@Stochastic Implosion
@
text
@d137 1
a137 1
      virtual void importOptImpSoln (WitPeriod thePer);
d139 2
a140 3
         // Imports this Component's portion of the optimizing implosion
         // solution for thePer.
         // Valid only when optimizing implosion is exporting its solution.
@


1.55
log
@Stochastic Implosion
@
text
@d143 1
a143 1
      virtual void passMrpData ();
d145 2
a146 1
         // Passes the MRP data of this Component to myOrigMrpExp ().
d148 1
a148 1
      virtual void passFssData ();
d150 1
a150 1
         // Passes the FSS data of this Component to myFSS ().
d152 1
a152 1
      virtual void passStochData ();
d154 2
a155 1
         // Passes the stochastic data of this Component to myStochImpMgr ().
@


1.54
log
@Stochastic Implosion
@
text
@d145 1
a145 1
         // Passes the MRP data of this Component to myFSS ().
d151 1
a151 1
      virtual void restoreStochInputAttrs ();
d153 1
a153 14
         // For Stochastic Implosion.
         // Restores the values of all stochastic input attributes owned by this
         // Component to the values saved in the current Scenario.

      virtual void clearStochSoln ();
         //
         // For Stochastic Implosion.
         // Clears the stochastic solution data.

      virtual void restoreStochSoln ();
         //
         // For Stochastic Implosion.
         // Restores the values of all stochastic solution attributes owned by
         // this Component to the values saved in the current Scenario.
@


1.53
log
@Stochastic Implosion
@
text
@d143 1
a143 1
      virtual void importMrpSoln ();
d145 1
a145 2
         // Imports this Component's portion of the MRP solution.
         // Valid only when MRP is exporting its solution.
d149 1
a149 1
         // Passes the FSS of this Component to myFSS ().
@


1.52
log
@Stochastic Implosion
@
text
@d148 4
@


1.51
log
@Stochastic Implosion
@
text
@d143 5
@


1.50
log
@Stochastic Implosion
@
text
@d140 1
a140 1
         // solution.
@


1.49
log
@Stochastic Implosion
@
text
@d137 6
@


1.48
log
@Stochastic Implosion
@
text
@d137 17
@


1.47
log
@Stochastic Implosion
@
text
@d174 1
a174 1
      void settingUnpreAttr ();
d176 2
a177 2
         // Takes action appropriate when setting an attribute that requires
         // unpreprocessing.
d179 1
a179 1
      void settingUnpostAttr ();
d181 2
a182 2
         // Takes action appropriate when setting an attribute that requires
         // unpostprocessing.
d184 1
a184 1
      void settingNonUnpostAttr ();
d186 2
a187 2
         // Takes action appropriate when setting an attribute that does not
         // require unpostprocessing.
@


1.46
log
@Stochastic Implosion
@
text
@d181 2
a182 6
         // Takes action appropriate when setting a non-stochastic attribute
         // that requires unpostprocessing.

      void settingStochAttr ();
         //
         // Takes action appropriate when setting a stochastic attribute.
d186 2
a187 2
         // Takes action appropriate when setting a non-stochastic attribute
         // that requires unpostprocessing.
@


1.45
log
@Stochastic Implosion
@
text
@a220 5
      WitScenario * curScenario ();
         //
         // Returns the current Scenario.
         // Valid only in stochastic implosion mode.

@


1.44
log
@Stochastic Implosion
@
text
@a136 6
      virtual void retrieveStochAttrs ();
         //
         // Retrieves the values of the stochastic attributes of this Component
         // from the current Scenario.
         // Valid only in stochastic implosion mode.

@


1.43
log
@Stochastic implosion
@
text
@d98 5
@


1.42
log
@Stochastic implosion.
@
text
@d132 6
d222 5
@


1.41
log
@Stochastic implosion.
@
text
@d183 5
@


1.40
log
@Stochastic Implosion.
@
text
@d169 14
@


1.39
log
@Stochastic implosion.
@
text
@a168 6
      void forbidAddStochAct (WitMsgFragID theMsgFragID);
         //
         // If stochastic implosion is active, this function issues a severe
         // error msg indicating that a attempt was made to add an object of the
         // type indicated by theMsgFragID.

@


1.38
log
@App controlled opt implosion.
@
text
@d169 6
@


1.37
log
@App controlled opt implosion.
@
text
@a165 59
      // Attribute preparation utilities.
      // Each of these functions:
      // * Asserts the appropriate pre-conditions for setting the attribute.
      // * Invokes incur for the DataAlt arg.
      // * Returns the value of the first arg.
      //------------------------------------------------------------------------

      bool prepBool (bool, WitDataAlt *);
         // 
         // Prep util for a bool.

      int prepRangedInt (int, WitDataAlt *, int lb, int ub);
         //
         // Prep util for an int that must be in the interval [lb, ub], 
         // where ub < 0 means ub == + infinity.

      double prepDouble (double, WitDataAlt *);
         // 
         // Prep util for a double.

      double prepNonNegDouble (double, WitDataAlt *);
         // 
         // Prep util for a non-negative double.

      const WitBoolean * prepBoolVec (const WitBoolean *, WitDataAlt *);
         //
         // Prep util for a bool vector.

      const WitIVRealArg & prepDblVec (const WitIVRealArg &, WitDataAlt *);
         // 
         // Prep util for a double time vector.

      const WitIVRealArg & prepNonNegDblVec (
            const WitIVRealArg &,
            WitDataAlt *);
         // 
         // Prep util for a non-negative double time vector.

      const WitIVRealArg & prepSchedVec (const WitIVRealArg &, WitDataAlt *);
         // 
         // Prep util for a double time vector that's part of one of the
         // solution schedules.

      const int * prepBuildAheadUB (const int *);
         //
         // Prep util for a buildAheadUB attribute.

      const int * prepPeriodIntVec (const int *, WitDataAlt *);
         //
         // Prep util for an int time vector that must be in the interval 
         // [0, lastPeriod ()].

      const int * prepBuildAheadUB (const int *, WitDataAlt *);

      const char * prepString (const char *, WitDataAlt *);
         //
         // Prep util for a String.

      //------------------------------------------------------------------------
@


1.36
log
@Updated the copyright date on all source files.
@
text
@a227 7
      accessWrapper (WitPreprocessor *,  myPreprocessor,  myProblem ())
      accessWrapper (WitPostprocessor *, myPostprocessor, myProblem ())
      accessWrapper (WitHeurAllMgr *,    myHeurAllMgr,    myProblem ())
      accessWrapper (WitOptImploder *,   myOptImploder,   myProblem ())
      accessWrapper (WitOrigMrpExp *,    myOrigMrpExp,    myProblem ())
      accessWrapper (WitFSS *,           myFSS,           myProblem ())

@


1.35
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.34
log
@Allowed obj1 attributes to be set and retrieved when objChoice != 1.
Allowed objChoice to be set when parts or operations exist.
@
text
@a150 12
      //------------------------------------------------------------------------
      // Data loading functions.
      //------------------------------------------------------------------------

      virtual void loadPre    ();
      virtual void loadOptPre ();
      virtual void loadPost   ();
      virtual void loadMrp    ();
      virtual void loadFss    ();
      virtual void loadHeur   ();
      virtual void loadOpt    ();

@


1.33
log
@Vector PropRt.
@
text
@a215 5
      const WitIVRealArg & prepObj1DblVec (const WitIVRealArg &, WitDataAlt *);
         // 
         // Prep util for a double time vector that's only valid when objective
         // function #1 has been chosen.

@


1.32
log
@Initial work on [vector propRouting attribute].
@
text
@d206 1
a206 1
      const WitInVecRA & prepDblVec (const WitInVecRA &, WitDataAlt *);
d210 3
a212 1
      const WitInVecRA & prepNonNegDblVec (const WitInVecRA &, WitDataAlt *);
d216 1
a216 1
      const WitInVecRA & prepObj1DblVec (const WitInVecRA &, WitDataAlt *);
d221 1
a221 1
      const WitInVecRA & prepSchedVec (const WitInVecRA &, WitDataAlt *);
@


1.31
log
@Double Precision.
@
text
@d202 4
@


1.30
log
@Double Precision.
@
text
@a201 4
      const float * prepDblVec (const float *, WitDataAlt *);
         // 
         // Prep util for a float time vector.

d204 1
a204 5
         // Prep util for a float time vector.

      const float * prepNonNegDblVec (const float *, WitDataAlt *);
         // 
         // Prep util for a non-negative double time vector.
a209 5
      const float * prepObj1DblVec (const float *, WitDataAlt *);
         // 
         // Prep util for a double time vector that's only valid when objective
         // function #1 has been chosen.

a214 5
      const float * prepSchedVec (const float *, WitDataAlt *);
         // 
         // Prep util for a float time vector that's part of one of the solution
         // schedules.

d217 2
a218 2
         // Prep util for a float time vector that's part of one of the solution
         // schedules.
@


1.29
log
@Double Precision.
@
text
@d202 1
a202 1
      const float * prepFloatVec (const float *, WitDataAlt *);
d206 1
a206 1
      const float * prepNonNegFloatVec (const float *, WitDataAlt *);
d208 5
a212 1
         // Prep util for a non-negative float time vector.
d218 1
a218 1
      const float * prepObj1FloatVec (const float *, WitDataAlt *);
d220 6
a225 1
         // Prep util for a float time vector that's only valid when objective
d229 5
@


1.28
log
@Continued double precision.
@
text
@d210 4
@


1.27
log
@Continued double precision.
@
text
@a23 1
#include <StrDbl.h>
d194 1
a194 1
      StrDbl prepStrDbl (StrDbl, WitDataAlt *);
d196 1
a196 1
         // Prep util for a StrDbl.
d198 1
a198 1
      StrDbl prepNonNegStrDbl (StrDbl, WitDataAlt *);
d200 1
a200 1
         // Prep util for a non-negative StrDbl.
@


1.26
log
@Continued double precision.
@
text
@a194 8
      float prepFloat (float, WitDataAlt *);
         // 
         // Prep util for a float.

      float prepNonNegFloat (float, WitDataAlt *);
         // 
         // Prep util for a non-negative float.

@


1.25
log
@Continued double precision.
@
text
@d24 1
d203 1
a203 1
      double prepDouble (double, WitDataAlt *);
d205 1
a205 1
         // Prep util for a double.
d207 1
a207 1
      double prepNonNegDouble (double, WitDataAlt *);
d209 1
a209 1
         // Prep util for a non-negative double.
a287 5

      float prepFloat (double, WitDataAlt *);
         //
         // Not implemented,
         // Remove after conversion of float scalar attrs to double.
@


1.24
log
@Continued double precision.
@
text
@d206 4
d287 5
@


1.23
log
@Removed a bad function overload.
@
text
@d202 4
@


1.22
log
@Continued implementation of post-implosion pegging.
@
text
@d133 1
a133 1
      // My-derived-class-instance functions.
d140 10
a149 10
      virtual WitDelComp *   myDelComp ();
      virtual WitPart *      myPart    ();
      virtual WitMaterial *  myMat     ();
      virtual WitCapacity *  myCap     ();
      virtual WitOperation * myOpn     ();
      virtual WitConsEntry * myConsEnt ();
      virtual WitBomEntry *  myBomEnt  ();
      virtual WitSubEntry *  mySub     ();
      virtual WitBopEntry *  myBopEnt  ();
      virtual WitDemand *    myDemand  ();
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d143 1
@


1.20
log
@Continued implementation of proportionate routing.
@
text
@d133 1
a133 1
      // Get derived class instance functions.
d136 2
a137 2
      // indicated derived class, the argument is set to that instance;
      // otherwise it is set to NULL.
d140 9
a148 9
      virtual void getDelComp   (WitDelComp   * &);
      virtual void getPart      (WitPart      * &);
      virtual void getMaterial  (WitMaterial  * &);
      virtual void getOperation (WitOperation * &);
      virtual void getConsEntry (WitConsEntry * &);
      virtual void getBomEntry  (WitBomEntry  * &);
      virtual void getSubEntry  (WitSubEntry  * &);
      virtual void getBopEntry  (WitBopEntry  * &);
      virtual void getDemand    (WitDemand    * &);
@


1.19
log
@Internal changes.
@
text
@d144 1
@


1.18
log
@Continued implementation of single-source.
@
text
@d84 1
a84 1
      virtual WitBoolean inserted () = 0;
d86 1
a86 1
         // Returns TRUE, iff this Component has been inserted into
d183 1
a183 1
      WitBoolean prepBoolean (WitBoolean, WitDataAlt *);
d185 1
a185 1
         // Prep util for a boolean.
d231 1
a231 1
         // Prep util for a boolean.
@


1.17
log
@Continued implementation of single-source.
@
text
@d158 2
a270 12

      //------------------------------------------------------------------------
      // Access indicator functions.
      // Each of these functions returns TRUE iff the indicated object is
      // currently accessing this Component's data; e.g., heurAllAcc () returns
      // TRUE, iff myPreprocessor () is currently accessing this Component's
      // data.
      // The functions just return TRUE in non-DEBUG mode.
      //------------------------------------------------------------------------

      WitBoolean heurAllAcc (); // Access by myHeurAllMgr ().
      WitBoolean optImpAcc  (); // Access by myOptImploder ().
@


1.16
log
@Continued implementation of single-source.
@
text
@d128 4
d153 5
a157 3
      virtual void loadPost ();
      virtual void loadMrp  ();
      virtual void loadFss  ();
d273 1
a273 1
      // currently accessing this Component's data; e.g., preprocAcc () returns
a278 1
      WitBoolean preprocAcc (); // Access by myPreprocessor ().
@


1.15
log
@Continued implementation of single-source.
@
text
@d145 8
d273 3
a275 6
      WitBoolean preprocAcc  (); // Access by myPreprocessor ().
      WitBoolean heurAllAcc  (); // Access by myHeurAllMgr ().
      WitBoolean optImpAcc   (); // Access by myOptImploder ().
      WitBoolean postprocAcc (); // Access by myPostprocessor ().
      WitBoolean fssAcc      (); // Access by myFSS ().
      WitBoolean mrpAcc      (); // Access by myOrigMrpExp ().
@


1.14
log
@Continued implementation of single-source.
@
text
@a144 7
      //------------------------------------------------------------------------
      // "Import Results" functions.
      //------------------------------------------------------------------------

      virtual void importMrpResults ();
      virtual void importFssResults ();

d265 6
a270 3
      WitBoolean preprocAcc (); // Access by myPreprocessor ().
      WitBoolean heurAllAcc (); // Access by myHeurAllMgr ().
      WitBoolean optImpAcc  (); // Access by myOptImploder ().
@


1.13
log
@Continued implementation of single-source.
@
text
@d149 2
a150 3
      virtual void importPostprocResults ();
      virtual void importMrpResults      ();
      virtual void importFssResults      ();
@


1.12
log
@Continued implementation of single-source.
@
text
@d149 3
a151 2
      virtual void importMrpResults ();
      virtual void importFssResults ();
d273 3
a275 4
      WitBoolean preprocAcc  (); // Access by myPreprocessor ().
      WitBoolean heurAllAcc  (); // Access by myHeurAllMgr ().
      WitBoolean optImpAcc   (); // Access by myOptImploder ().
      WitBoolean postprocAcc (); // Access by myPostprocessor ().
@


1.11
log
@Continued implementation of single-source.
@
text
@d150 1
a275 1
      WitBoolean fssAcc      (); // Access by myFSS ().
@


1.10
log
@Continued implementation of object iteration.
@
text
@d145 6
a275 1
      WitBoolean mrpAcc      (); // Access by myOrigMrpExp ().
@


1.9
log
@Began implementation of object iteration.
@
text
@a55 8
      // Constructor functions.
      //------------------------------------------------------------------------

      WitComponent (WitCompMgr * theCompMgr);
         //
         // theCompMgr is the CompMgr that owns this Component.

      //------------------------------------------------------------------------
a88 6
      virtual WitBoolean isADelComp (WitDelComp * & theDelComp);
         //
         // If this Component is actually a DelComp, sets theDelComp to this and
         // returns TRUE; otherwise sets theDelComp to NULL and returns FALSE.
         // This default version does the FALSE case.

a94 1
         // Base class function.
a99 1
         // Base class function.
d128 17
d151 7
a157 6
      accessWrapper (WitPreprocessor *,  myPreprocessor,  myProblem ())
      accessWrapper (WitPostprocessor *, myPostprocessor, myProblem ())
      accessWrapper (WitHeurAllMgr *,    myHeurAllMgr,    myProblem ())
      accessWrapper (WitOptImploder *,   myOptImploder,   myProblem ())
      accessWrapper (WitOrigMrpExp *,    myOrigMrpExp,    myProblem ())
      accessWrapper (WitFSS *,           myFSS,           myProblem ())
d221 7
a229 1
         // Base class function.
a235 1
         // Base class function.
a239 1
         // Base class function.
a248 1
         // Base class function.
a253 1
         // Base class function.
@


1.8
log
@Initial implementation of pegging.
@
text
@d23 1
a23 1
#include <BoundSet.h>
@


1.7
log
@Coarse selection splitting.
@
text
@d152 1
a152 1
      accessWrapper (WitHeurAllocator *, myHeurAllocator, myProblem ())
d262 1
a262 1
      WitBoolean heurAllAcc  (); // Access by myHeurAllocator ().
@


1.6
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d133 1
a133 1
      virtual void recount ();
@


1.5
log
@Refactoring for selection splitting.
@
text
@d125 1
a125 1
         // Only valid during a purge.
d130 1
a130 1
         // Only valid if this Component has a BoundSet, and myCompMgr () is
d138 1
a138 1
         // Only valid if called by myCompMgr ().
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d274 1
a274 3
      copyCtorAndAssignment (WitComponent);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d113 1
a113 1
      virtual void copyInto (WitCompMgr * theCompMgr) = 0;
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d207 1
a207 1
         // [0, nPeriods () - 1].
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
