head	1.21;
access;
symbols
	sce_5_01_20080919:1.4;
locks; strict;
comment	@ * @;


1.21
date	2010.08.19.18.00.11;	author rjw;	state dead;
branches;
next	1.20;

1.20
date	2010.03.24.21.31.01;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2010.03.18.22.46.28;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2010.03.18.22.35.01;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2010.03.16.20.39.21;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2010.03.13.00.35.49;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2010.02.05.20.41.52;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2010.01.25.19.45.17;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.01.09.00.12.04;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.08.22.51.54;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.06.23.20.48;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2010.01.06.22.13.16;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.06.21.13.12;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.06.00.27.30;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.04.22.11.23;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.19.21.05.10;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.13.19.01.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.03.22.35.42;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2008.02.29.23.24.29;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.28.00.00.42;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2008.02.27.23.43.41;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.21
log
@CPLEX
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef DetImpOMH
#define DetImpOMH

//------------------------------------------------------------------------------
// Header file: "DetImpOM.h"
//
// Contains the declaration of class DetImpOM.
//------------------------------------------------------------------------------

#include <OptModel.h>
#include <PtrSched.h>
#include <PtrMap.h>

//------------------------------------------------------------------------------
// class DetImpOM
//
// "Deterministic Implosion Optimization Model"
//
// Class hierarchy:
//
//    ProbAssoc
//       OptModel
//          DetImpOM
//------------------------------------------------------------------------------

class WitDetImpOM: public WitOptModel
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitDetImpOM (WitProblem *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitDetImpOM ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual bool needDual         ();
      virtual void reportInfeasible ();
      virtual void reportUnbounded  ();

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      accessFunc    (const WitList <WitBoundedVar> &,  myBoundedVars)
      accessFunc    (WitNtbvVar *,                     myNtbvVar)
      accessFunc    (FILE *,                           solnFile)
      accessNonNull (WitExecPerSched <WitBillEntry> *, myExecPerSched)

      //-----------------------------------------------------------------------
      // Derived OptVC storing functions.
      // Each of these functions store its argument (a newly constructed
      // instance of a derived class of OptVC) in the approriate place in
      // this DetImpOM.
      //-----------------------------------------------------------------------

      void storeDerived (WitScrapVar *);
      void storeDerived (WitNonSubVar *);
      void storeDerived (WitSubVar *);
      void storeDerived (WitShipVar *);
      void storeDerived (WitSlbvVar *);
      void storeDerived (WitExecVar *);
      void storeDerived (WitStockVar *);
      void storeDerived (WitCumShipVar *);
      void storeDerived (WitMultiObjVar *);
      void storeDerived (WitNtbvVar *);
      void storeDerived (WitResourceCon *);
      void storeDerived (WitSubCon *);
      void storeDerived (WitShipCon *);
      void storeDerived (WitSlbCon *);
      void storeDerived (WitMultiObjCon *);
      void storeDerived (WitTbvCon *);

      //-----------------------------------------------------------------------
      // OptVC look-up functions.
      //
      // Each of these functions returns the OptVC in this DetImpOM
      // corresponding to its arguments, if one exists; otherwise NULL.
      //-----------------------------------------------------------------------

      WitScrapVar *    myScrapVar    (WitPart *,      WitPeriod);
      WitNonSubVar *   myNonSubVar   (WitBomEntry *,  WitPeriod);
      WitSubVar *      mySubVar      (WitSubEntry *,  WitPeriod);
      WitShipVar *     myShipVar     (WitDemand *,    WitPeriod);
      WitExecVar *     myExecVar     (WitOperation *, WitPeriod);
      WitStockVar *    myStockVar    (WitMaterial *,  WitPeriod);
      WitCumShipVar *  myCumShipVar  (WitDemand *,    WitPeriod);

      WitResourceCon * myResourceCon (WitPart *,      WitPeriod);
      WitSubCon *      mySubCon      (WitBomEntry *,  WitPeriod);
      WitShipCon *     myShipCon     (WitDemand *,    WitPeriod);

      WitSlbvVar *     mySlbvVar     (WitBoundedVar *);
      WitSlbCon *      mySlbCon      (WitBoundedVar *);

      WitMultiObjVar * myMultiObjVar (WitObjective *);

      //-----------------------------------------------------------------------
      // OptVC item printing functions.
      //
      // Each of these functions prints its argument to modelFile ().
      //-----------------------------------------------------------------------

      void printItem (WitNode *);
      void printItem (WitBomEntry *);
      void printItem (WitSubEntry *);
      void printItem (WitDemand *);
      void printItem (WitBoundedVar *);
      void printItem (WitObjective *);
      void printItem ();

      //-----------------------------------------------------------------------
      // Other public member functions.
      //-----------------------------------------------------------------------

      void storeBoundedVar (WitBoundedVar * theBoundedVar);
         //
         // Stores theBoundedVar.

      bool slbvVarsExist ();
         //
         // Returns true iff there are any slbvVars in this DetImpOM.

      void printPeriod (WitPeriod thePer);
         //
         // Prints thePer to modelFile ().

      void printNonPeriod ();
         //
         // Prints blank space to modelFile () in place of a Period.

      void writeSoln (const char * fName);
         //
         // Prints out the primal solution from WIT data structures.
         // Writes to a file whose name is given by fName.

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      virtual void generateVariables    ();
      virtual void generateConstraints  ();
      virtual void generateLexOptVarSeq (WitPtrVec <WitOptVar> &);
      virtual void postGenFixed         ();
      virtual void postGenFlexible      ();
      virtual void printOptVCHeading    ();
      virtual void displayDerived       ();
      virtual void printDerived         ();
      virtual void initDepVars          ();
      virtual void doScreening          ();
         //
         // Overrides from class OptModel

      //-----------------------------------------------------------------------
      // Private member functions relating to output of the solution to the
      // optimization model.
      //-----------------------------------------------------------------------

      void writePeSoln (WitOptVC * theOptVC);
         //
         // Writes the solution value of theOptVC, or blank if it is NULL,
         // or the value is nearly zero.
         // If the OptVC is a variable, the primal solution value is written;
         // if it is a constraint, the dual value is written.

      void writePartSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // parts. Optionally prints the dual solution for material balance
         // constraints.

      void writeOperationSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // Operations.

      void writeSubEntrySoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // SubEntries.

      void writeDemandSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // demands.

      void writeBoundedVarSoln ();
         //
         // Prints out the aspects of the primal solution associated with
         // BoundedVars.

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitDetImpOM);

         // The following are formats used in printing an OptVC.
         //
      inline static const char * itemFormat     ();
      inline static const char * itemLongFormat ();
      inline static const char * periodDFormat  ();
      inline static const char * periodSFormat  ();

      template <typename Item, typename DerOptVC>
            void insertInto (
               WitPtrSched <Item, DerOptVC> & thePtrSched,
               const Item *                   theItem,
               DerOptVC *                     theDerOptVC);
         //
         // Inserts theDerOptVC into thePtrSched at theItem and
         // theDerOptVC->myPeriod (), allocating as necessary.

      template <typename Item, typename DerOptVC>
            DerOptVC * lookUp (
               WitPtrSched <Item, DerOptVC> & thePtrSched,
               const Item *                   theItem,
               WitPeriod                      thePer);
         //
         // Returns the DerOptVC in thePtrSched for theItem in thePer,
         // if any, else NULL.

      void initSlbvVars ();
         //
         // Initializes the SlbvVars.

      void initMultiObjVars ();
         //
         // Initializes the MultiObjVars.

      void initNtbvVar ();
         //
         // Initializes myNtbvVar_.

      void screenImpCons ();
         //
         // Performs generic screening of the constraints of this DetImpOM.
         // Constraints are considered in an order that facilitates
         // cascading of screening, i.e., we try to screen in an order such
         // that if screening constraint A permits constraint B to be screened,
         // then A is screened before B.

      void relaxCumShipNonNeg ();
         //
         // Relaxes redundant nonnegativity bounds on cumulative shipment
         // variables.

      void screenSlbOptVCs ();
         //
         // Screens out the variables and constraints for soft lower bounds
         // that are not soft.

      bool positiveHardLBsExist ();
         //
         // Returns true iff myProblem  () has at least one BoundSet with a
         // positive hardLB.

      bool disallowedScrapExists ();
         //
         // Returns true iff myProblem  () has at least one Part with
         // scrapAllowed == false.

      void printBoundedVars ();
         //
         // Prints information about the BoundedVars of this DetImpOM to
         // modelFile ().

      bool             multiObjMode  ();
      WitMultiObjMgr * myMultiObjMgr ();
         //
         // Pass-thru to myOptComp ().

      //-----------------------------------------------------------------------
      // Static constant private member data.
      //-----------------------------------------------------------------------

      static const double solnEpsilon;
         //
         // Values must exceed this amount in order to appear in the solution
         // output.

      //-----------------------------------------------------------------------
      // The OptVC Schedules for this DetImpOM.
      //-----------------------------------------------------------------------

      WitPtrSched <WitPart,      WitScrapVar   > myScrapVar_;
      WitPtrSched <WitBomEntry,  WitNonSubVar  > myNonSubVar_;
      WitPtrSched <WitSubEntry,  WitSubVar     > mySubVar_;
      WitPtrSched <WitDemand,    WitShipVar    > myShipVar_;
      WitPtrSched <WitBoundSet,  WitSlbvVar    > mySlbvVar_;
      WitPtrSched <WitOperation, WitExecVar    > myExecVar_;
      WitPtrSched <WitMaterial,  WitStockVar   > myStockVar_;
      WitPtrSched <WitDemand,    WitCumShipVar > myCumShipVar_;

      WitPtrSched <WitPart,      WitResourceCon> myResourceCon_;
      WitPtrSched <WitBomEntry,  WitSubCon     > mySubCon_;
      WitPtrSched <WitDemand,    WitShipCon    > myShipCon_;
      WitPtrSched <WitBoundSet,  WitSlbCon     > mySlbCon_;

      //-----------------------------------------------------------------------
      // Other private member data.
      //-----------------------------------------------------------------------

      WitPtrMap <WitObjective, WitMultiObjVar> myMultiObjVar_;
         //
         // In multiple objectives mode:
         //    myMultiObjVar_ (theObj) is the MultiObjVar owned by this DetImpOM
         //    for theObj.
         // In single objective mode:
         //    myMultiObjVar_ is empty.

      WitPtrMap <WitObjective, WitMultiObjCon> myMultiObjCon_;
         //
         // Same as myMultiObjVar_, but for MultiObjCons.

      WitList <WitBoundedVar> myBoundedVars_;
         //
         // The list of all BoundedVars in this DetImpOM.

      WitNtbvVar * myNtbvVar_;
      WitTbvCon  * myTbvCon_;
         //
         // In multiple objectives mode,
         //    If there are soft lower bounds:
         //       myNtbvVar_ is the NtbvVar owned by this DetImpOM.
         //       myTbvCon_  is the TbvCon  owned by this DetImpOM.
         // Otherwise:
         //    myNtbvVar_ is NULL.
         //    myTbvCon_  is NULL.

      int nSlbvVars_;
         //
         // # soft lower bound violation variables.

      FILE * solnFile_;
         //
         // Solution output file.

      WitExecPerSched <WitBillEntry> * myExecPerSched_;
         //
         // The ExecPerSched owned by this DetImpOM, if any; otherwise NULL.
   };

#endif
@


1.20
log
@Removed OptObj classes.
@
text
@@


1.19
log
@Removed class PrimaryObj.
@
text
@a62 1
      accessFunc    (WitDetObj *,                      myDetObj)
d161 10
a170 11
      virtual void        generateVariables    ();
      virtual void        generateConstraints  ();
      virtual WitOptObj * generateObjectives   ();
      virtual void        generateLexOptVarSeq (WitPtrVec <WitOptVar> &);
      virtual void        postGenFixed         ();
      virtual void        postGenFlexible      ();
      virtual void        printOptVCHeading    ();
      virtual void        displayDerived       ();
      virtual void        printDerived         ();
      virtual void        initDepVars          ();
      virtual void        doScreening          ();
a320 6
      // The OptObj for this DetImpOM.
      //-----------------------------------------------------------------------

      WitDetObj * myDetObj_;

      //-----------------------------------------------------------------------
@


1.18
log
@Removed class BoundsObj.
@
text
@a62 1
      accessFunc    (WitPrimaryObj *,                  myPrimaryObj)
d323 1
a323 1
      // The OptObjs for this DetImpOM.
d326 1
a326 2
      WitPrimaryObj * myPrimaryObj_;
      WitDetObj     * myDetObj_;
@


1.17
log
@Multi-Obj Mode
@
text
@a62 1
      accessFunc    (WitBoundsObj  *,                  myBoundsObj)
a326 1
      WitBoundsObj  * myBoundsObj_;
@


1.16
log
@Multi-Obj Mode
@
text
@d67 1
a67 1
      accessFunc    (WitTbvVar *,                      myTbvVar)
d87 1
a87 1
      void storeDerived (WitTbvVar *);
d255 1
a255 1
      void initTbvVar ();
d257 1
a257 1
         // Initializes myTbvVar_.
d352 2
a353 2
      WitTbvVar * myTbvVar_;
      WitTbvCon * myTbvCon_;
d357 2
a358 2
         //       myTbvVar_, is the TbvVar owned by this DetImpOM.
         //       myTbvCon_, is the TbvCon owned by this DetImpOM.
d360 2
a361 2
         //    myTbvVar_ is NULL.
         //    myTbvCon_ is NULL.
@


1.15
log
@multi-obj mode
@
text
@d63 6
a68 6
      accessFunc    (WitBoundsObj  *, myBoundsObj)
      accessFunc    (WitPrimaryObj *, myPrimaryObj)
      accessFunc    (WitDetObj *,     myDetObj)

      accessFunc    (FILE *,          solnFile)

d87 1
d93 1
d131 1
d255 4
d352 11
@


1.14
log
@Multi-objective mode
@
text
@d331 1
a331 1
         // In multi-objective mode:
d334 1
a334 1
         // In single-objective mode:
@


1.13
log
@Multi-objective mode
@
text
@d150 1
a150 1
      void writeSoln (const WitString & fName);
@


1.12
log
@Multi-objective mode
@
text
@d161 11
a171 10
      virtual void        generateVariables   ();
      virtual void        generateConstraints ();
      virtual WitOptObj * generateObjectives  ();
      virtual void        postGenFixed        ();
      virtual void        postGenFlexible     ();
      virtual void        printOptVCHeading   ();
      virtual void        displayDerived      ();
      virtual void        printDerived        ();
      virtual void        initDepVars         ();
      virtual void        doScreening         ();
d285 2
a286 1
      bool multiObjMode ();
@


1.11
log
@Multi-objective mode
@
text
@d91 1
d158 1
a158 1
      // Overriding private virtual member functions.
d161 10
a170 1
      virtual void generateVariables ();
d172 1
a172 28
         // Generates all OptVars for this DetImpOM.

      virtual void generateConstraints ();
         //
         // Generates all OptCons for this DetImpOM.

      virtual WitOptObj * generateObjectives ();
         //
         // Generates all OptObjs for this DetImpOM.

      virtual void postGenFixed ();

      virtual void postGenFlexible ();

      virtual void printOptVCHeading ();

      virtual void displayDerived ();
         //
         // Writes out the bounds counts.

      virtual void printDerived ();

      virtual void initDepVars ();
         //
         // Initializes the dependent variables, i.e., those variables whose
         // initial value depends on the initial value of other variables.

      virtual void doScreening ();
d243 8
d335 4
@


1.10
log
@Multi-objective mode
@
text
@d293 4
@


1.9
log
@Multi-objective mode
@
text
@d237 4
a240 3
      inline static const char * itemFormat    ();
      inline static const char * periodDFormat ();
      inline static const char * periodSFormat ();
@


1.8
log
@Multi-objective mode
@
text
@a90 1
      void storeDerived (WitMultiObjCon *);
@


1.7
log
@Multi-objective mode
@
text
@d91 1
@


1.6
log
@Obj1Obj ==> DetObj
@
text
@d21 1
d86 1
a86 1

d114 2
d127 1
d141 5
a145 1
      void printPeriod (WitPeriod t);
d147 1
a147 1
         // Prints t to modelFile ().
d331 8
@


1.5
log
@Removing objective #2.
@
text
@d64 1
a64 1
      accessFunc    (WitObj1Obj *,    myObj1Obj)
d315 1
a315 1
      WitBoundsObj  *  myBoundsObj_;
d317 1
a317 1
      WitObj1Obj    *    myObj1Obj_;
@


1.4
log
@Stochastic Implosion
@
text
@a64 5
      accessFunc    (WitRevObj *,     myRevObj)
      accessFunc    (WitInvObj *,     myInvObj)
      accessFunc    (WitServObj *,    myServObj)
      accessFunc    (WitSubObj *,     mySubObj)
      accessFunc    (WitObj2Obj *,    myObj2Obj)
a317 5
      WitRevObj     *     myRevObj_;
      WitInvObj     *     myInvObj_;
      WitServObj    *    myServObj_;
      WitSubObj     *     mySubObj_;
      WitObj2Obj    *    myObj2Obj_;
@


1.3
log
@Stochastic Implosion
@
text
@d190 1
a190 1
      // optimization problem.
@


1.2
log
@Stochastic Implosion
@
text
@d121 1
a121 1
      // Each of these functions prints its argument to optProbFile ().
d144 1
a144 1
         // Prints t to optProbFile ().
d287 1
a287 1
         // optProbFile ().
@


1.1
log
@Stochastic Implosion
@
text
@d25 1
a25 1
// "Deterministic Implosion Optimization Problem"
@

