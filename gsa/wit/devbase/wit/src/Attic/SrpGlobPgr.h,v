head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2005.12.20.20.15.24;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2005.12.20.19.04.55;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.19.21.11.25;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.19.19.29.26;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.16.23.55.50;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.29.22.14.06;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.28.22.23.13;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.21.18.30.35;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.18.23.36.32;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.18.20.38.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpGlobPgrH
#define SrpGlobPgrH

//------------------------------------------------------------------------------
// Header file: "SrpGlobPgr.h"
//
// Contains the declaration of the following class:
//
//    SrpGlobPgr
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PtrSched.h>
#include <TripStack.h>

//------------------------------------------------------------------------------
// Class SrpGlobPgr
//
// "Shared-Resource Pegging Global Pegger"
// Responsible for computing the global peggings for Shared-Resource Pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpGlobPgr
//
// Implemented in SRP.C.
//------------------------------------------------------------------------------

class WitSrpGlobPgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpGlobPgr (WitSrpExpSync *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpGlobPgr ();

      //------------------------------------------------------------------------
      // get---Trips functions.
      // Each of these functions sets its last arg to the list of pegging
      // triples for theDemand and shipPer, where the peggings are for:
      //
      //    execVol
      //------------------------------------------------------------------------

      void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void fillReqs (WitPart * thePart, WitPeriod thePer);
         //
         // Fills the requirements on thePart in thePer.

      void netWithSupply (WitPart * thePart, WitPeriod supPer);
         //
         // Fills the requirements on thePart in supPer netting with supply.

      void explodeToProd (WitPart * thePart, WitPeriod expPer);
         //
         // Fills the requirements on thePart in thePer by exploding to
         // production.

      void acctViolation (WitPart * thePart, WitPeriod thePer);
         //       
         // Accounts for the requirements on thePart in thePer as a violation of
         // the resource allocation constraint.

      noCopyCtorAssign (WitSrpGlobPgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSrpExpSync * const mySrpExpSync_;
         //
         // The SrpExpSync for this SrpGlobPgr.

      WitPtrSched <WitPart, WitDblDblStack> myReqInts_;
         //
         // myReqInts_.myElemAt (thePart, thePer) is the set of requirement
         // intervals for thePart in thePer.

      WitOpnTripStack myExecVolTrips_;
         //
         // During a call to getExecVolTrips, the set of execVol triples to be
         // returned; otherwise empty.
   };

#endif
@


1.9
log
@[shared-resource pegging]
@
text
@@


1.8
log
@[shared-resource pegging]
@
text
@d47 1
a47 1
      WitSrpGlobPgr (WitSrpLocPgg *);
d98 1
a98 1
      WitSrpLocPgg * const mySrpLocPgg_;
d100 1
a100 1
         // The SrpLocPgg for this SrpGlobPgr.
@


1.7
log
@[shared-resource pegging]
@
text
@d35 2
@


1.6
log
@[shared-resource pegging]
@
text
@d96 1
a96 1
      WitSrpLocPgg * const myLocPgg_;
@


1.5
log
@[shared-resource pegging]
@
text
@a108 5

      double maxExcViolVol_;
        //
        // The maximum constraint violation found so far in excess of the
        // violation in the local pegging.
@


1.4
log
@[shared-resource pegging]
@
text
@d85 5
d109 5
@


1.3
log
@[shared-resource pegging]
@
text
@d72 1
a72 1
      void pegPart (WitPart * thePart, WitPeriod thePer);
d74 10
a83 1
         // Does pegging for thePart in thePer.
@


1.2
log
@[shared-resource pegging]
@
text
@d82 1
a82 1
      WitSrpLocPgg * const mySrpLogPgg_;
@


1.1
log
@[shared-resource pegging]
@
text
@d45 1
a45 1
      WitSrpGlobPgr (WitSrpCoord *);
d82 1
a82 1
      WitSrpCoord * const mySrpCoord_;
d84 1
a84 1
         // The SrpCoord that owns this SrpGlobPgr.
@

