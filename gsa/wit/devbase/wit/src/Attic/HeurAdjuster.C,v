head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2010.09.24.18.17.21;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2010.09.24.15.46.14;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.24.00.16.25;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.23.22.48.50;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.22.21.36.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.22.20.21.52;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.21.21.19.12;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Modifiable heuristic allocation
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "HeurAdjuster.C"
//
// Contains the implementation of class HeurAdjuster
//------------------------------------------------------------------------------

#include <HeurAdjuster.h>
#include <HeurAllMgr.h>
#include <GlobalComp.h>
#include <Operation.h>
#include <SubEntry.h>
#include <BopEntry.h>
#include <Demand.h>
#include <BoundSet.h>
#include <IVRealArg.h>
#include <AvailSched.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of class HeurAdjuster.
//------------------------------------------------------------------------------

WitHeurAdjuster::WitHeurAdjuster (WitAvailSched * theAvailSched):

      WitProbAssoc     (theAvailSched),
      myAvailSched_    (theAvailSched),
      pairsToSubCheck_ (myProblem ()),
      toSubCheck_      (myProblem (), false)
   {
   checkPreconditions ();
   }

//------------------------------------------------------------------------------

WitHeurAdjuster::~WitHeurAdjuster ()
   {
   delayedFeasCheck ();
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::adjustForExecVol (
      WitOperation *       theOpn,
      const WitIVRealArg & theVec)
   {
   checkForExecVol  (theOpn, theVec);
   planForExecVol   (theOpn, theVec);
   reviseForExecVol (theOpn, theVec);
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::adjustForSubVol (
      WitSubEntry *        theSub,
      const WitIVRealArg & theVec)
   {
   planForSubVol   (theSub, theVec);
   reviseForSubVol (theSub, theVec);
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::adjustForShipVol (
      WitDemand *          theDemand,
      const WitIVRealArg & theVec)
   {
   checkForShipVol  (theDemand, theVec);
   reviseForShipVol (theDemand, theVec);
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::delayedFeasCheck ()
   {
   checkSubCons ();
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::checkPreconditions ()
   {
   if (not myGlobalComp ()->                    selectionRecovery     ())
      myMsgFac () ("boolAttInvForHeurAdjSmsg", "selectionRecovery",   true);

   if (    myGlobalComp ()->                    skipFailures          ())
      myMsgFac () ("boolAttInvForHeurAdjSmsg", "skipFailures",        false);

   if (    myGlobalComp ()->                    perfPegging           ())
      myMsgFac () ("boolAttInvForHeurAdjSmsg", "perfPegging",         false);

   if (    myGlobalComp ()->                    computeCriticalList   ())
      myMsgFac () ("boolAttInvForHeurAdjSmsg", "computeCriticalList", false);

   if (    myGlobalComp ()->                    pgdCritListMode       ())
      myMsgFac () ("boolAttInvForHeurAdjSmsg", "pgdCritListMode",     false);
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::checkForExecVol (
      WitOperation *       theOpn,
      const WitIVRealArg & theVec)
   {
   WitPeriod execPer;

   forEachPeriod (execPer, myProblem ())
      {
      if (theVec[execPer] != theOpn->execVol ()[execPer])
         {
         checkNonExecCon (theOpn, execPer, theVec[execPer]);
         checkExecHUBCon (theOpn, execPer, theVec[execPer]); 
         checkLotSizeCon (theOpn, execPer, theVec[execPer]);
         }
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::checkForShipVol (
      WitDemand *          theDemand,
      const WitIVRealArg & theVec)
   {
   double    cumDemandVol;
   double    cumShipVol;
   WitPeriod shipPer;
   double    violation;

   cumDemandVol = 0.0;
   cumShipVol   = 0.0;

   forEachPeriod (shipPer, myProblem ())
      {
      cumDemandVol += theDemand->demandVol ()[shipPer];
      cumShipVol   += theVec                 [shipPer];

      violation     = positivePart (cumShipVol - cumDemandVol);

      if (violation > FEAS_TOL)
         {
         myMsgFac () ("heurAdjCumDemandViolSmsg",
            theDemand->demandedPartName (),
            theDemand->demandName       (),
            shipPer,
            cumShipVol,
            cumDemandVol,
            violation);
         }
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::checkNonExecCon (
      WitOperation * theOpn,
      WitPeriod      execPer,
      double         theValue)
   {
   if (not theOpn->executable ()[execPer])
      if (theValue > 0.0)
         {
         myMsgFac () ("heurAdjNonExecViolSmsg",
            theOpn->operationName (),
            execPer,
            theValue);
         }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::checkExecHUBCon (
      WitOperation * theOpn,
      WitPeriod      execPer,
      double         theValue)
   {
   double hardUBVal;
   double violation;

   if (theOpn->execBounds ()->hardUBIsFinite (execPer))
      {
      hardUBVal = theOpn->execBounds ()->hardUB ()[execPer];

      violation = positivePart (theValue - hardUBVal);

      if (violation > FEAS_TOL)
         {
         myMsgFac () ("heurAdjExecHUBViolSmsg",
            theOpn->operationName (),
            execPer,
            theValue,
            hardUBVal,
            violation);
         }
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::checkLotSizeCon (
      WitOperation * theOpn,
      WitPeriod      execPer,
      double         theValue)
   {
   double delta;
   double violation;

   delta     = theOpn->lotSizeDelta (execPer, theValue, 0.0);

   violation = positivePart (delta);

   if (violation > FEAS_TOL)
      {
      myMsgFac () ("heurAdjLotSizeViolSmsg",
         theOpn->operationName (),
         execPer,
         theValue,
         violation);
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::planForExecVol (
      WitOperation *       theOpn,
      const WitIVRealArg & theVec)
   {
   WitPeriod     execPer;
   WitBomEntry * theBomEnt;

   forEachPeriod (execPer, myProblem ())
      {
      if (theVec[execPer] != theOpn->execVol ()[execPer])
         {
         forEachEl (theBomEnt, theOpn->bom ())
            {
            if (not theBomEnt->mySubEntries ().isEmpty ())
               {
               planToSubCheck (theBomEnt, execPer);
               }
            }
         }
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::planForSubVol (
      WitSubEntry *        theSub,
      const WitIVRealArg & theVec)
   {
   WitPeriod execPer;

   forEachPeriod (execPer, myProblem ())
      {
      if (theVec[execPer] != theSub->subVol ()[execPer])
         {
         planToSubCheck (theSub->myBomEnt (), execPer);
         }
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::planToSubCheck (
      WitBomEntry * theBomEnt,
      WitPeriod     execPer)
   {
   if (not toSubCheck_ (theBomEnt)[execPer])
      {
      pairsToSubCheck_.push (theBomEnt, execPer);

      toSubCheck_ (theBomEnt)[execPer] = true;
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::reviseForExecVol (
      WitOperation *       theOpn,
      const WitIVRealArg & theVec)
   {
   WitPeriod     execPer;
   double        deltaExecVol;
   WitBomEntry * theBomEnt;
   WitBopEntry * theBopEnt;
   WitPart *     thePart;
   WitPeriod     impactPer;
   double        deltaAvailVol;

   forEachPeriod (execPer, myProblem ())
      {
      deltaExecVol =
           theVec            [execPer]
         - theOpn->execVol ()[execPer];

      if (fabs (deltaExecVol) < NET_TOL)
         continue;

      forEachEl (theBomEnt, theOpn->bom ())
         {
         if (not theBomEnt->inEffect (execPer))
            continue;

         thePart       =   theBomEnt->myPart       ();
         impactPer     =   theBomEnt->impactPeriod ()[execPer];
         deltaAvailVol = - theBomEnt->effConsRate  ()[execPer] * deltaExecVol;

         myAvailSched_->addToIncAvailVol (thePart, impactPer, deltaAvailVol);
         }

      forEachEl (theBopEnt, theOpn->bop ())
         {
         if (not theBopEnt->inEffect (execPer))
            continue;

         thePart       = theBopEnt->myPart       ();
         impactPer     = theBopEnt->impactPeriod ()[execPer];
         deltaAvailVol = theBopEnt->effProdRate  ()[execPer] * deltaExecVol;

         myAvailSched_->addToIncAvailVol (thePart, impactPer, deltaAvailVol);
         }
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::reviseForSubVol (
      WitSubEntry *        theSub,
      const WitIVRealArg & theVec)
   {
   WitPart *     subPart;
   WitBomEntry * theBomEnt;
   WitPart *     bomPart;
   WitPeriod     execPer;
   double        deltaSubVol;
   WitPeriod     consPer;
   double        deltaAvailVol;

   subPart   = theSub   ->myPart   ();
   theBomEnt = theSub   ->myBomEnt ();
   bomPart   = theBomEnt->myPart   ();

   forEachPeriod (execPer, myProblem ())
      {
      deltaSubVol =
           theVec           [execPer]
         - theSub->subVol ()[execPer];

      if (fabs (deltaSubVol) < NET_TOL)
         continue;

      if (theSub->inEffect (execPer))
         {
         consPer       =   theSub->impactPeriod ()[execPer];
         deltaAvailVol = - theSub->effConsRate  ()[execPer] * deltaSubVol;

         myAvailSched_->addToIncAvailVol (subPart, consPer, deltaAvailVol);
         }

      if (theBomEnt->inEffect (execPer))
         {
         consPer       = theBomEnt->impactPeriod ()[execPer];
         deltaAvailVol = theBomEnt->effConsRate  ()[execPer] * deltaSubVol;

         myAvailSched_->addToIncAvailVol (bomPart, consPer, deltaAvailVol);
         }
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::reviseForShipVol (
      WitDemand *          theDemand,
      const WitIVRealArg & theVec)
   {
   WitPart * thePart;
   WitPeriod shipPer;
   double    deltaShipVol;

   thePart = theDemand->demandedPart ();

   forEachPeriod (shipPer, myProblem ())
      {
      deltaShipVol =
           theVec               [shipPer]
         - theDemand->shipVol ()[shipPer];

      if (fabs (deltaShipVol) < NET_TOL)
         continue;

      myAvailSched_->addToIncAvailVol (thePart, shipPer, - deltaShipVol);
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::checkSubCons ()
   {
   WitBomEntry * theBomEnt;
   WitPeriod     execPer;
   double        sumSubVols;
   WitSubEntry * theSub;
   double        theExecVol;
   double        violation;

   while (pairsToSubCheck_.isNonEmpty ())
      {
      pairsToSubCheck_.pop (theBomEnt, execPer);

      toSubCheck_ (theBomEnt)[execPer] = false;

      sumSubVols = 0.0;

      forEachEl (theSub, theBomEnt->mySubEntries ())
         {
         sumSubVols += theSub->subVol ()[execPer];
         }

      theExecVol = theBomEnt->myOperation ()->execVol ()[execPer];

      violation  = positivePart (sumSubVols - theExecVol);

      if (violation > FEAS_TOL)
         {
         myMsgFac () ("heurAdjSubViolSmsg",
            theBomEnt->myOperationName (),
            theBomEnt->localIndex      (),
            execPer,
            theExecVol,
            sumSubVols,
            violation);
         }
      }
   }
@


1.6
log
@Heuristic Adjustment
@
text
@@


1.5
log
@Heuristic Adjustment
@
text
@a35 1
      active_          (false),
a45 21
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::start ()
   {
   stronglyAssert (not active_);

   stronglyAssert (myGlobalComp ()->heurAdjustEnabled ());

   active_ = true;

   myMsgFac () ("heurAdjActiveMsg");
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::finish ()
   {
   stronglyAssert (active_);

a46 4

   active_ = false;

   myMsgFac () ("heurAdjInactiveMsg");
a54 2
   stronglyAssert (active_);

a65 2
   stronglyAssert (active_);

a75 2
   stronglyAssert (active_);

@


1.4
log
@Heuristic Adjustment
@
text
@d25 1
d32 1
a32 1
WitHeurAdjuster::WitHeurAdjuster (WitProblem * theProblem):
d34 2
a35 1
      WitProbAssoc     (theProblem),
d348 1
a348 1
         myHeurAllMgr ()->adjustIncAvailVol (thePart, impactPer, deltaAvailVol);
d360 1
a360 1
         myHeurAllMgr ()->adjustIncAvailVol (thePart, impactPer, deltaAvailVol);
d397 1
a397 1
         myHeurAllMgr ()->adjustIncAvailVol (subPart, consPer, deltaAvailVol);
d405 1
a405 1
         myHeurAllMgr ()->adjustIncAvailVol (bomPart, consPer, deltaAvailVol);
d431 1
a431 1
      myHeurAllMgr ()->adjustIncAvailVol (thePart, shipPer, - deltaShipVol);
@


1.3
log
@Heuristic Adjustment
@
text
@d66 1
a66 1
   checkSubCons ();
d112 7
@


1.2
log
@Heuristic Adjustment
@
text
@a78 8
   WitPeriod     execPer;
   double        deltaExecVol;
   WitBomEntry * theBomEnt;
   WitBopEntry * theBopEnt;
   WitPart *     thePart;
   WitPeriod     impactPer;
   double        deltaAvailVol;

d81 3
a83 35
   checkExecVol (theOpn, theVec);

   forEachPeriod (execPer, myProblem ())
      {
      deltaExecVol =
           theVec            [execPer]
         - theOpn->execVol ()[execPer];

      if (fabs (deltaExecVol) < NET_TOL)
         continue;

      forEachEl (theBomEnt, theOpn->bom ())
         {
         if (not theBomEnt->inEffect (execPer))
            continue;

         thePart       =   theBomEnt->myPart       ();
         impactPer     =   theBomEnt->impactPeriod ()[execPer];
         deltaAvailVol = - theBomEnt->effConsRate  ()[execPer] * deltaExecVol;

         myHeurAllMgr ()->adjustIncAvailVol (thePart, impactPer, deltaAvailVol);
         }

      forEachEl (theBopEnt, theOpn->bop ())
         {
         if (not theBopEnt->inEffect (execPer))
            continue;

         thePart       = theBopEnt->myPart       ();
         impactPer     = theBopEnt->impactPeriod ()[execPer];
         deltaAvailVol = theBopEnt->effProdRate  ()[execPer] * deltaExecVol;

         myHeurAllMgr ()->adjustIncAvailVol (thePart, impactPer, deltaAvailVol);
         }
      }
a91 8
   WitPart *     subPart;
   WitBomEntry * theBomEnt;
   WitPart *     bomPart;
   WitPeriod     execPer;
   double        deltaSubVol;
   WitPeriod     consPer;
   double        deltaAvailVol;

d94 2
a95 31
   checkSubVol (theSub, theVec);

   subPart   = theSub   ->myPart   ();
   theBomEnt = theSub   ->myBomEnt ();
   bomPart   = theBomEnt->myPart   ();

   forEachPeriod (execPer, myProblem ())
      {
      deltaSubVol =
           theVec           [execPer]
         - theSub->subVol ()[execPer];

      if (fabs (deltaSubVol) < NET_TOL)
         continue;

      if (theSub->inEffect (execPer))
         {
         consPer       =   theSub->impactPeriod ()[execPer];
         deltaAvailVol = - theSub->effConsRate  ()[execPer] * deltaSubVol;

         myHeurAllMgr ()->adjustIncAvailVol (subPart, consPer, deltaAvailVol);
         }

      if (theBomEnt->inEffect (execPer))
         {
         consPer       = theBomEnt->impactPeriod ()[execPer];
         deltaAvailVol = theBomEnt->effConsRate  ()[execPer] * deltaSubVol;

         myHeurAllMgr ()->adjustIncAvailVol (bomPart, consPer, deltaAvailVol);
         }
      }
a103 4
   WitPart * thePart;
   WitPeriod shipPer;
   double    deltaShipVol;

d106 2
a107 15
   checkShipVol (theDemand, theVec);

   thePart = theDemand->demandedPart ();

   forEachPeriod (shipPer, myProblem ())
      {
      deltaShipVol =
           theVec               [shipPer]
         - theDemand->shipVol ()[shipPer];

      if (fabs (deltaShipVol) < NET_TOL)
         continue;

      myHeurAllMgr ()->adjustIncAvailVol (thePart, shipPer, - deltaShipVol);
      }
d132 1
a132 1
void WitHeurAdjuster::checkExecVol (
d151 1
a151 26
void WitHeurAdjuster::checkSubVol (
      WitSubEntry *        theSub,
      const WitIVRealArg & theVec)
   {
   WitBomEntry * theBomEnt;
   WitPeriod     execPer;

   theBomEnt = theSub->myBomEnt ();

   forEachPeriod (execPer, myProblem ())
      {
      if (theVec[execPer] != theSub->subVol ()[execPer])
         {
         if (not toSubCheck_ (theBomEnt)[execPer])
            {
            pairsToSubCheck_.push (theBomEnt, execPer);

            toSubCheck_ (theBomEnt)[execPer] = true;
            }
         }
      }
   }

//------------------------------------------------------------------------------

void WitHeurAdjuster::checkShipVol (
d254 174
@


1.1
log
@Heuristic Adjustment
@
text
@d33 4
a36 5
      WitProbAssoc       (theProblem),
      heurAdjustAllowed_ (false),
      active_            (false),
      pairsToSubCheck_   (myProblem ()),
      toSubCheck_        ()
d38 1
a48 7
void WitHeurAdjuster::setHeurAdjustAllowed (bool theValue)
   {
   heurAdjustAllowed_ = theValue;
   }

//------------------------------------------------------------------------------

d51 1
a51 1
   stronglyAssert (heurAdjustAllowed_);
d53 1
a53 3
   checkPreconditions ();

   toSubCheck_.allocate (myProblem (), false);
a67 2
   toSubCheck_.clear ();

d208 8
a215 9
   verify (myHeurAllMgr ()->active (),              "heurAllocActive",   true);
   verify (                 active_,                "heurAdjustActive",  false);
   verify (myGlobalComp ()->selectionRecovery (),   "selectionRecovery", true);
   verify (myGlobalComp ()->skipFailures (),        "skipFailures",      false);
   verify (myGlobalComp ()->perfPegging (),         "perfPegging",       false);
   verify (myGlobalComp ()->computeCriticalList (), "computeCriticalList",
                                                                         false);
   verify (myGlobalComp ()->pgdCritListMode (),     "pgdCritListMode",   false);
   }
d217 2
a218 1
//------------------------------------------------------------------------------
d220 2
a221 10
void WitHeurAdjuster::verify (
      bool         theAttVal,
      const char * theAttName,
      bool         theReqVal)
   {
   if (theAttVal != theReqVal)
      myMsgFac () ("globBoolAttReqSmsg",
         theAttName,
         theReqVal,
         "witStartHeurAdjust");
@

