head	1.6;
access;
symbols
	sce_3_30_20030627:1.4;
locks; strict;
comment	@ * @;


1.6
date	2003.07.28.23.37.47;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2003.07.18.23.38.06;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.05.19.48.21;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.04.17.11.07;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.30.22.41.04;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.30.18.19.13;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Continued implementation of opt with COIN.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OslOsiSolverH
#define OslOsiSolverH

//------------------------------------------------------------------------------
// Header file: "OslOsiSolver.h"
//
// Contains the declaration of class OslOsiSolver.
//------------------------------------------------------------------------------

#include <OsiSolver.h>
#include <Str.h>

//------------------------------------------------------------------------------
// Forward declarations of COIN classes.
//------------------------------------------------------------------------------

class OsiOslSolverInterface;

//------------------------------------------------------------------------------
// OSL Typedefs.
//------------------------------------------------------------------------------

typedef struct EKKContext EKKContext;
typedef struct EKKModel   EKKModel;

//------------------------------------------------------------------------------
// class OslOsiSolver
//
// Responsible for solving an OptModel by using OSL, partly through the OSI
// interface.
//
// Class Hierarchy:
//
// ProbAssoc
//    OptSolver
//       OsiSolver
//          OslOsiSolver
//------------------------------------------------------------------------------

class WitOslOsiSolver: public WitOsiSolver
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOslOsiSolver (WitOptModel *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOslOsiSolver ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void solve ();
         //
         // Override from class OptSolver.

      void createSI ();
         //
         // Creates myOsiOslSI_;

      void passFixedModel ();
         //
         // Passes the fixed parts of the optimization model to OSL.

      void markIntVars ();
         //
         // Marks the integer variables as such.

      void solveMIP ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // a MIP.

      void solveLpUnAcc ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // an LP in unaccelerated mode.

      void solveLpAcc ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // an LP in accelerated mode.

      void scale ();
         //
         // Calls OSL's scale.

      void preSolve ();
         //
         // Calls OSL's preSolve.

      void crash ();
         //
         // Calls OSL's crash, as needed.

      void primalSimplex ();
         //
         // Calls OSL's primalSimplex.

      void postSolve ();
         //
         // Calls OSL's postSolve.

      void postSolveWithRec (const char * saveFile);
         //
         // Calls OSL's postSolve with recovery for the OSL postSolve bug.

      void printSoln ();
         //
         // Has OSL print its solution.

      void checkProbStat ();
         //
         // Checks the value of OSL's IPROBSTAT variable and generates a
         // fatal error if it is anything but 0 (optimal).

      void checkRetPtr (const void * thePtr, const char * funcName);
         //
         // If thePtr == NULL, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      void checkRetVal (const char * funcName);
         //
         // If retVal_ != 0, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      EKKModel * myOslModel ();
         //
         // Returns the OSL Model for this OslOsiSolver.
         // Requires that myOsiOslSI_ is not NULL.

      virtual OsiSolverInterface * myOsiSI ();
         //
         // Override from class OsiSolver.

      noCopyCtorAssign (WitOslOsiSolver);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      OsiOslSolverInterface * myOsiOslSI_;
         //
         // The OsiOslSolverInterface owned by this OslOsiSolver, or NULL.

      int retVal_;
         //
         // The integer value returned by some OSL functions, where
         // retVal_ != 0 indicates an error.

      WitString presolveFileName_;
         //
         // The file name to be used by preSolve and postSolve.
   };

#endif
@


1.5
log
@Continued implementation of opt with COIN.
@
text
@@


1.4
log
@Continued implementation of opt with COIN.
@
text
@d79 1
a79 1
      void createSolverItf ();
d81 1
a81 1
         // Creates mySolverInter_.
a89 16

      void passFlexibleModel ();
         //
         // Passes the flexible parts of the optimization model to OSL.

      void passConBounds ();
         //
         // Passes the bounds on each constraint to OSL.

      void passVarBounds ();
         //
         // Passes the bounds on each variable to OSL.

      void passObjCoeffs ();
         //
         // Passes the objective coefficient on each variable to OSL.
@


1.3
log
@Continued implementation of opt with COIN.
@
text
@a46 2
//
// Implemented in OslOsiSolverI.h.
@


1.2
log
@Continued implementation of opt with COIN.
@
text
@d170 1
a170 1
         // Requires that mySolverInter_ is not NULL.
@


1.1
log
@Continued implementation of opt with COIN.
@
text
@a123 5
      void passInitSoln ();
         //
         // Copies the initial primal optimization solution from myOptModel () 
         // into OSL, as needed.

a146 8

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptModel ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptModel ().
@

