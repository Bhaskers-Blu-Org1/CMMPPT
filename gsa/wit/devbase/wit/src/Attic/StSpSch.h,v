head	1.12;
access;
symbols
	EndRw-branch:1.11.0.8
	Root-of-EndRw:1.11
	rwToStl:1.11.0.6
	latest_sce_3_10_20010924:1.11.0.4
	sce_3_10_20010924:1.11
	latest_sce_3_00_20010601:1.11.0.2
	sce_3_00_20010601:1.11
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8;
locks; strict;
comment	@ * @;


1.12
date	2003.03.03.23.27.05;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2001.05.25.14.53.28;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.17.15.11.17;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.29.00.10.16;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.01.16.24.45;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.27.00.24.40;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.26.21.46.03;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.24.20.05.58;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.15.19.01.52;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.11.16.35.11;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.28.22.13.39;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.20.20.08.38;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.11
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@@


1.10
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@a0 170
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StSpSchH
#define StSpSchH

//------------------------------------------------------------------------------
// Header file: "StSpSch.h"
//
// Contains the declaration of generic class StackSpSched (TheType).
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Generic class StackSpSched (TheType)
//
// "Stack Sparse Schedule"
// A mapping from pairs (TheType, Period) to Stack (Tl, double).
// Several of its functions run in time linear in the number of non-empty Stacks
// that the instance contains.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitStackSpScheddeclare(TheType)                                        \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitStackSpSched (TheType): public WitProbAssoc                           \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitStackSpSched (TheType) (WitProblem *);                                \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitStackSpSched (TheType) ();                                           \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void allocate1D ();                                                      \
         /*                                                                  */\
         /* Allocates the first dimension of the underlying 2-d array.       */\
                                                                               \
      void allocateRow (TheType * theDomEl);                                   \
         /*                                                                  */\
         /* Allocates the row vector of Stacks for theBomEl.                 */\
                                                                               \
      void push (                                                              \
            TheType * theDomEl,                                                \
            WitPeriod thePer,                                                  \
            WitTl *   theTlObj,                                                \
            double    theVal);                                                 \
         /*                                                                  */\
         /* Pushes (theTlObj, theVal) onto the top of the Stack at           */\
         /* (theDomEl, thePer).                                              */\
                                                                               \
      void slowAppend (                                                        \
            TheType * theDomEl,                                                \
            WitPeriod thePer,                                                  \
            WitTl *   theTlObj,                                                \
            double    theVal);                                                 \
         /*                                                                  */\
         /* Appends (theTlObj, theVal) to the end of the Stack at            */\
         /* (theDomEl, thePer), in linear time.                              */\
                                                                               \
      void clear ();                                                           \
         /*                                                                  */\
         /* Removes all of the elements from this StackSpSched.              */\
                                                                               \
      void saveAndClear ();                                                    \
         /*                                                                  */\
         /* Saves the pairs stored in the stacks of this StackSpSched for    */\
         /* later restoring, and clears this StackSpSched.                   */\
                                                                               \
      void restore ();                                                         \
         /*                                                                  */\
         /* Restores the contents of the stacks of this StackSpSched to      */\
         /* their state as of the last save.                                 */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Data access functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      const WitPairStack (WitTl, double) & operator () (                       \
            TheType * theDomEl,                                                \
            WitPeriod thePer)                                                  \
            const;                                                             \
         /*                                                                  */\
         /* Returns the Stack at (theDomEl, thePer).                         */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other private member functions.                                     */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitPairStack (WitTl, double) & asaNonEmptyStack (WitTl * theTlObj);      \
         /*                                                                  */\
         /* Prepares the Stack referenced by theTlObj to be made non-empty   */\
         /* and returns it.                                                  */\
                                                                               \
      inline static WitPairStack (WitTl, double) & asaStack (WitTl * theTlObj) \
         {                                                                     \
         return * (WitPairStack (WitTl, double) *) theTlObj;                   \
         }                                                                     \
                                                                               \
      inline WitTl * myTlPtr (TheType * theDomEl, WitPeriod thePer) const;     \
         /*                                                                  */\
         /* Returns the indexed TlPtr.                                       */\
                                                                               \
      noCopyCtorAssign (WitStackSpSched (TheType));                            \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitObjStack (WitTl) & nonEmptyStacks_;                                   \
         /*                                                                  */\
         /* A list (possibly with duplication) of pointers to all the Stacks */\
         /* stored by this StackSpSched that have become non-empty since the */\
         /* last clear.                                                      */\
                                                                               \
      WitPairStack (WitTl, double) & savedPairs_;                              \
         /*                                                                  */\
         /* A list of all the pairs that were stored in any Stack in this    */\
         /* StackSpSched at the time of the last save, if any;               */\
         /* otherwise empty.                                                 */\
                                                                               \
      WitObjStack (WitTl) & savedStacks_;                                      \
         /*                                                                  */\
         /* savedStacks_ and savedPairs_ are always to contain the same # of */\
         /* elements. The n-th element of savedStacks_ is a pointer to the   */\
         /* Stack that stored the n-th element of savedPairs_ at the time of */\
         /* the last save, if any.                                           */\
                                                                               \
      WitPtrVec (WitTlPtrTVec) & myVec_;                                       \
         /*                                                                  */\
         /* The vector of time vectors of stacks of (Tl, double) pairs that  */\
         /* stores the data for this StackSpSched.                           */\
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare (WitStackSpSched, WitPart)
declare (WitStackSpSched, WitMaterial)
declare (WitStackSpSched, WitBomEntry)
declare (WitStackSpSched, WitBopEntry)

#endif
@


1.9
log
@Re-factoring for selection splitting.
@
text
@d16 1
a16 1
// Contains the declaration of generic class StackSpSched (DomType, ObjType).
d22 1
a22 1
// Generic class StackSpSched (DomType, ObjType)
d25 1
a25 1
// A mapping from pairs (DomType, Period) to Stack (ObjType, double)
d34 1
a34 1
#define WitStackSpScheddeclare2(DomType, ObjType)                              \
d38 1
a38 5
class WitPairStack (ObjType, double);                                          \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitStackSpSched (DomType, ObjType): public WitProbAssoc                  \
d46 1
a46 1
      WitStackSpSched (DomType, ObjType) (WitProblem *);                       \
d52 1
a52 1
      ~WitStackSpSched (DomType, ObjType) ();                                  \
d62 1
a62 1
      void allocateRow (DomType * theDomEl);                                   \
d67 1
a67 1
            DomType * theDomEl,                                                \
d69 1
a69 1
            ObjType * theObject,                                               \
d72 1
a72 1
         /* Pushes (theObject, theVal) onto the top of the Stack at          */\
d76 1
a76 1
            DomType * theDomEl,                                                \
d78 1
a78 1
            ObjType * theObject,                                               \
d81 1
a81 1
         /* Appends (theObject, theVal) to the end of the Stack at          */\
d102 2
a103 2
      const WitPairStack (ObjType, double) & operator () (                     \
            DomType * theDomEl,                                                \
d115 1
a115 1
      WitPairStack (ObjType, double) & asaNonEmptyStack (WitTl * theTlObj);    \
d120 1
a120 2
      inline static WitPairStack (ObjType, double) & asaStack (                \
            WitTl * theTlObj)                                                  \
d122 1
a122 1
         return * (WitPairStack (ObjType, double) *) theTlObj;                 \
d125 1
a125 1
      inline WitTl * myTlPtr (DomType * theDomEl, WitPeriod thePer) const;     \
d129 1
a129 1
      noCopyCtorAssign (WitStackSpSched (DomType, ObjType));                   \
d141 1
a141 1
      WitPairStack (ObjType, double) & savedPairs_;                            \
d165 4
a168 6
declare2 (WitStackSpSched, WitPart,     WitTl)
declare2 (WitStackSpSched, WitMaterial, WitTl)
declare2 (WitStackSpSched, WitBomEntry, WitTl)
declare2 (WitStackSpSched, WitBopEntry, WitTl)

declare2 (WitStackSpSched, WitMaterial, WitFixedPer)
@


1.8
log
@Further implementation of coarse selection splitting.
@
text
@d119 1
a119 1
      WitPairStack (ObjType, double) & asaNonEmptyStack (WitTl * theTlPtr);    \
d121 1
a121 1
         /* Prepares the Stack referenced by theTlPtr to be made non-empty   */\
d125 1
a125 1
            WitTl * theTlPtr)                                                  \
d127 1
a127 1
         return * (WitPairStack (ObjType, double) *) theTlPtr;                 \
@


1.7
log
@Further implementation of coarse selection splitting.
@
text
@d79 9
d119 1
a119 1
      void pushInternal (WitTl * theTlPtr, ObjType * theObject, double theVal);\
d121 2
a122 1
         /* Pushes (theObject, theVal) onto the top of the Stack at theTlPtr */\
d124 2
a125 2
      inline static WitPairStack (ObjType, double) * & asaStackPtr (           \
            WitTl * & theTlPtr)                                                \
d127 1
a127 1
         return (WitPairStack (ObjType, double) * &) theTlPtr;                 \
d129 4
@


1.6
log
@Implemented coarse selection splitting for multiple exec periods.
@
text
@d161 1
a161 1
declare2 (WitStackSpSched, WitMaterial, WitConstPer)
@


1.5
log
@Further development of coarse selection splitting.
@
text
@d157 1
d159 1
a159 1
declare2 (WitStackSpSched, WitMaterial, WitTl)
@


1.4
log
@Fixed some bugs in coarse selection splitting.
@
text
@d156 4
a159 2
declare2 (WitStackSpSched, WitPart,     WitBopEntry)
declare2 (WitStackSpSched, WitBomEntry, WitConsEntry)
@


1.3
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d70 1
a70 1
      void put (                                                               \
d109 4
@


1.2
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d19 1
a19 1
#include <Util.h>
d42 1
a42 1
class WitStackSpSched (DomType, ObjType): public WitUtil                       \
d62 1
a62 1
      void allocate (DomType * theDomEl);                                      \
d64 5
a68 1
         /* Allocates the vector of Stacks for theBomEl.                     */\
d83 10
d122 1
a122 1
      WitObjStack (WitTl) & neStackPtrs_;                                      \
d128 13
d154 1
@


1.1
log
@Further development of coarse selection splitting.
@
text
@d66 1
a66 1
      void push (                                                              \
d121 2
a122 2
// Declarations of all specific cases of the generic classes and functions
// declared in this file.
d125 1
@

