head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2003.05.30.18.19.12;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2003.05.28.22.19.31;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.28.15.10.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Continued implementation of opt with COIN.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OsiOslSolverIH
#define OsiOslSolverIH

//------------------------------------------------------------------------------
// Header file: "OsiOslSolverI.h"
//
// Contains the main and dummy implementations of class OsiOslSolver.
//
// This file is included by CoinSolver.C and no other file.
//------------------------------------------------------------------------------

#include <OsiOslSolver.h>
#include <OptComp.h>
#include <OptModel.h>
#include <OptVar.h>
#include <OptCon.h>
#include <OptImp.h>
#include <OptStarter.h>
#include <MsgFrag.h>
#include <MsgFac.h>
#include <Timing.h>

#ifdef OPT_IMPLODE

//------------------------------------------------------------------------------
// Main implementation of class OsiOslSolver.
//------------------------------------------------------------------------------

#if USE_COIN

#include <coin/OsiOslSolverInterface.hpp>

#define INVALID_RET_VAL -444555

//------------------------------------------------------------------------------

WitOsiOslSolver::WitOsiOslSolver (WitOptModel * theOptModel):

      WitOptSolver      (theOptModel),

      mySolverItf_      (NULL),
      retVal_           (INVALID_RET_VAL),
      presolveFileName_ ()
   {
   }

//------------------------------------------------------------------------------

WitOsiOslSolver::~WitOsiOslSolver ()
   {
   WitTimer::enterSection ("osl");

   deleteSolverInter ();

   WitTimer::leaveSection ("osl");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::solve ()
   {
   WitTimer::enterSection ("osl");

   if (myOptImploder ()->accelerated ())
      myMsgFac () ("reSolveLpMsg", "OSI/OSL");
   else
      {
      if (myOptModel ()->isaMIP ())
         myMsgFac () ("solveMipMsg", "OSI/OSL");
      else
         myMsgFac () ("solveLpMsg", "OSI/OSL");

      createSolverInter ();

      passFixedModel ();
      }

   passFlexibleModel ();

   if (myOptImploder ()->printMps ())
      {
      myMsgFac () ("mpsFileMsg");

      mySolverItf_->writeMps ("model", "mps");
      }

   if (myOptImploder ()->stopOpt () == 2)
      {
      WitTimer::leaveSection ("osl");

      return;
      }

   if (myOptModel ()->isaMIP ())
      solveMIP ();
   else if (myOptImploder ()->accelerated ())
      solveLpAcc ();
   else
      solveLpUnAcc ();

   myMsgFac () ("optSolnFoundMsg");

   storePrimalSoln ();

   if (myOptModel ()->needDual ())
      storeDualSoln ();

   if (myOptImploder ()->printMask () > 0)
      printSoln ();

   WitTimer::leaveSection ("osl");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::createSolverInter ()
   {
   mySolverItf_ = new OsiOslSolverInterface;

   retVal_ =
      ekk_setLogfileName (
         myOslModel (), 
         myOptComp ()->oslMesgFileName ().myCstring ());

   checkRetVal ("ekk_setLogfileName");

   retVal_ = ekk_mset (myOslModel (), 1, 256, 0, 0, 9999, 0);
      
   checkRetVal ("ekk_mset");

   retVal_ = ekk_setIlinelen (myOslModel (), 90);
   
   checkRetVal ("ekk_setIlinelen");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::deleteSolverInter ()
   {
   if (mySolverItf_ == NULL)
      return;

   delete mySolverItf_;

   mySolverItf_ = NULL;
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::passFixedModel ()
   {
   WitVector <int>    indexRow;
   WitVector <int>    startOfEachColumn;
   WitVector <double> elements;

   myOptModel ()->defMatrixByCols (indexRow, startOfEachColumn, elements);

   mySolverItf_->loadProblem (
      myOptModel ()->nOptVars (),
      myOptModel ()->nOptCons (),
      startOfEachColumn.myCvector (),
      indexRow.myCvector (),
      elements.myCvector (),
      NULL,
      NULL,
      NULL,
      NULL,
      NULL);
      
   mySolverItf_->setObjSense (-1.0);

   retVal_ = ekk_setImaxfactor (myOslModel (), 500);

   checkRetVal ("ekk_setImaxfactor");

   if (myOptModel ()->isaMIP ())
      markIntVars ();
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::markIntVars ()
   {
   WitOptVar *     theOptVar;
   int             nIntVars;
   WitVector <int> theIndices;
   int             theIdx;

   nIntVars = 0;

   forEachEl (theOptVar, myOptModel ()->myOptVars ())
      if (theOptVar->isAnIntVar ())
         nIntVars ++;

   theIndices.resize (nIntVars, -1);

   theIdx = -1;

   forEachEl (theOptVar, myOptModel ()->myOptVars ())
      if (theOptVar->isAnIntVar ())
         {
         theIdx ++;

         theIndices[theIdx] = theOptVar->index ();
         }

   mySolverItf_->setInteger (theIndices.myCvector (), theIndices.length ());
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::passFlexibleModel ()
   {
   passConBounds ();
   passVarBounds ();
   passObjCoeffs ();
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::passConBounds ()
   {
   int                nCons;
   WitVector <int>    indexVec;
   WitVector <double> boundVec;
   WitOptCon *        theOptCon;
   int                conIdx;
   int                bndIdx;

   WitTimer::enterSection ("model");

   nCons = myOptModel ()->nOptCons ();

   indexVec.resize (nCons + 1);
   boundVec.resize (nCons * 2);

   bndIdx = 0;

   forEachEl (theOptCon, myOptModel ()->myOptCons ())
      {
      conIdx = theOptCon->index ();

      witAssert (bndIdx == conIdx * 2);

      indexVec[conIdx]     = conIdx;

      boundVec[bndIdx]     = theOptCon->bounds ().lower ();
      boundVec[bndIdx + 1] = theOptCon->bounds ().upper ();

      bndIdx += 2;
      }

   WitTimer::leaveSection ("model");

   mySolverItf_->setRowSetBounds (
      indexVec.myCvector (),
      indexVec.myCvector () + nCons,
      boundVec.myCvector ());
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::passVarBounds ()
   {
   int                nVars;
   WitVector <int>    indexVec;
   WitVector <double> boundVec;
   WitOptVar *        theOptVar;
   int                varIdx;
   int                bndIdx;

   WitTimer::enterSection ("model");

   nVars = myOptModel ()->nOptVars ();

   indexVec.resize (nVars + 1);
   boundVec.resize (nVars * 2);

   bndIdx = 0;

   forEachEl (theOptVar, myOptModel ()->myOptVars ())
      {
      varIdx = theOptVar->index ();

      witAssert (bndIdx == varIdx * 2);

      indexVec[varIdx]     = varIdx;

      boundVec[bndIdx]     = theOptVar->bounds ().lower ();
      boundVec[bndIdx + 1] = theOptVar->bounds ().upper ();

      bndIdx += 2;
      }

   WitTimer::leaveSection ("model");

   mySolverItf_->setColSetBounds (
      indexVec.myCvector (),
      indexVec.myCvector () + nVars,
      boundVec.myCvector ());
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::passObjCoeffs ()
   {
   int                nVars;
   WitVector <int>    indexVec;
   WitVector <double> objVec;
   WitOptVar *        theOptVar;
   int                theIdx;

   WitTimer::enterSection ("model");

   nVars = myOptModel ()->nOptVars ();

   indexVec.resize (nVars + 1);
   objVec  .resize (nVars);

   forEachEl (theOptVar, myOptModel ()->myOptVars ())
      {
      theIdx           = theOptVar->index ();

      indexVec[theIdx] = theIdx;

      objVec  [theIdx] = static_cast <double> (theOptVar->mainObjCoeffVal ());
      }

   WitTimer::leaveSection ("model");

   mySolverItf_->setObjCoeffSet (
      indexVec.myCvector (),
      indexVec.myCvector () + nVars,
      objVec.myCvector ());
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::solveMIP ()
   {
   solveLpUnAcc ();

   retVal_ = ekk_messagePrintOff (myOslModel (), 105);

   checkRetVal ("ekk_messagePrintOff");

   retVal_ = ekk_messagePrintOff (myOslModel (), 114);

   checkRetVal ("ekk_messagePrintOff");

   retVal_ = ekk_branchAndBound (myOslModel (), NULL, NULL);

   checkRetVal ("ekk_branchAndBound");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::solveLpUnAcc ()
   {
   passInitSoln ();

   scale ();

   preSolve ();

   crash ();

   primalSimplex ();

   postSolve ();

   primalSimplex ();
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::solveLpAcc ()
   {
   ekk_primalSimplex (myOslModel (), 0);

   checkProbStat ();
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::passInitSoln ()
   {
   WitVector <double> initSoln;
   WitOptVar *        theVar;
   
   if (not myOptComp ()->optInitMethod ()->external ())
      return;

   initSoln.resize (myOptModel ()->nOptVars (), 0.0);

   WitTimer::enterSection ("model");

   forEachEl (theVar, myOptModel ()->myOptVars ())
      initSoln[theVar->index ()] = theVar->primalValue ();

   WitTimer::leaveSection ("model");

   mySolverItf_->setColSolution (initSoln.myCvector ());
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::scale ()
   {
   retVal_ = ekk_scale (myOslModel ());

   checkRetVal ("ekk_scale");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::preSolve ()
   {
   char * theFileName;

   if (myOptModel ()->isaMIP ())
      retVal_ = ekk_preSolve (myOslModel (), 3, NULL);
   else
      {
      theFileName = tempFileName ("witpr");

      presolveFileName_.copyCstring (theFileName);

      portableFree (theFileName);

      retVal_ = ekk_preSolve (myOslModel (), 3, presolveFileName_.myCstring ());
      }

   if (retVal_ == 1)
      myOptModel ()->reportInfeasible ();

   checkRetVal ("ekk_preSolve");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::crash ()
   {
   if (not myOptComp ()->crashOptStarter ()->isChosen ())
      return;

   retVal_ = ekk_crash (myOslModel (), 3);

   checkRetVal ("ekk_crash");
   }

//------------------------------------------------------------------------------
    
void WitOsiOslSolver::primalSimplex ()
   {
   ekk_primalSimplex (myOslModel (), 3);
      //
      // The return value is ignored; it seems to be the same as probstat.

   checkProbStat ();
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::postSolve ()
   {
   const char * fileName;

   fileName =
      myOptModel ()->isaMIP ()?
         NULL:
         presolveFileName_.myCstring ();

   if (myOptComp ()->postSolveRecovery ())
      postSolveWithRec (fileName);
   else
      retVal_ = ekk_postSolve (myOslModel (), fileName);

   if (not myOptModel ()->isaMIP ())
      remove (presolveFileName_.myCstring ());

   checkRetVal ("ekk_postSolve");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::postSolveWithRec (const char * saveFile)
   {
   int i,nrow=ekk_getInumrows(myOslModel ()),
      ncol=ekk_getInumcols(myOslModel ());
   int * cstat = const_cast <int *> (ekk_colstat(myOslModel ()));
   int * rstat = const_cast <int *> (ekk_rowstat(myOslModel ()));
   double * csol = const_cast <double *> (ekk_colsol(myOslModel ()));
   double * rsol = const_cast <double *> (ekk_rowacts(myOslModel ()));
   int * cstatx=ekk_int(ncol);
   int * rstatx=ekk_int(nrow);
   double * csolx=ekk_double(ncol);
   double * rsolx=ekk_double(nrow);
   const double * rowlower = ekk_rowlower(myOslModel ());
   const double * rowupper = ekk_rowupper(myOslModel ());
   double * collower = const_cast <double *> (ekk_collower(myOslModel ()));
   double * colupper = const_cast <double *> (ekk_colupper(myOslModel ()));

   for (i=0;i<nrow;i++) {
     if(rowupper[i]-rowlower[i]>1.0e-7) {
       rstatx[i]=rstat[i];
       rsolx[i]=rsol[i];
     } else {
       rstatx[i]=-1;
       rsolx[i]=rowlower[i];
     }
   }

   for (i=0;i<ncol;i++) {
     if(colupper[i]-collower[i]>1.0e-7) {
       cstatx[i]=cstat[i];
       csolx[i]=csol[i];
     } else {
       cstatx[i]=-1;
       csolx[i]=collower[i];
     }
   }

   retVal_ = ekk_postSolve(myOslModel (),saveFile);

   if (retVal_ != 0) {
     double * cup=ekk_double(ncol);
     double * clo=ekk_double(ncol);

     if (DEVELOPMENT)
        myMsgFac () ("postSolveRecMsg");

     memcpy(cup,colupper,ncol*sizeof(double));
     memcpy(clo,collower,ncol*sizeof(double));

     for (i=0;i<ncol;i++) {
       if(colupper[i]-collower[i]>1.0e-7) {
         if (cstatx[i]!=-1) {
           csol[i]=csolx[i];
           if (colupper[i]>csol[i])
             colupper[i] = csol[i];
           if (collower[i]<csol[i])
             collower[i] = csol[i];
         }
       } else {
         csol[i]=collower[i];
       }
     }

     ekk_preSolve(myOslModel (),16,saveFile);
     ekk_setImaxiter(myOslModel (),ekk_getIiternum(myOslModel ())+1000000);
     ekk_primalSimplex(myOslModel (),3);
     retVal_=ekk_postSolve(myOslModel (),saveFile);
     memcpy(colupper,cup,ncol*sizeof(double));
     memcpy(collower,clo,ncol*sizeof(double));
     ekk_free(cup);
     ekk_free(clo);
   }

   ekk_free(csolx);
   ekk_free(cstatx);
   ekk_free(rsolx);
   ekk_free(rstatx);
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::storePrimalSoln ()
   {
   const double * primalSoln;
   WitOptVar *    theVar;

   primalSoln = mySolverItf_->getColSolution ();

   WitTimer::enterSection ("model");

   forEachEl (theVar, myOptModel ()->myOptVars ())
      theVar->setPrimalValue (primalSoln[theVar->index ()]);

   WitTimer::leaveSection ("model");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::storeDualSoln ()
   {
   const double * dualSoln;
   WitOptCon *    theCon;

   dualSoln = mySolverItf_->getRowPrice ();

   WitTimer::enterSection ("model");

   forEachEl (theCon, myOptModel ()->myOptCons ())
      theCon->setDualValue (- dualSoln[theCon->index ()]);

   WitTimer::leaveSection ("model");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::printSoln ()
   {
   retVal_ =
      ekk_setIprtinfomask (myOslModel (), myOptImploder ()->printMask ());

   checkRetVal ("ekk_setIprtinfomask");

   retVal_ = ekk_printSolution (myOslModel ());

   checkRetVal ("ekk_printSolution");
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::checkProbStat ()
   {
   int probStat;

   const WitMsgFragID statFragID [] =
      {
      "iprobstat0Frag",
      "iprobstat1Frag",
      "iprobstat2Frag",
      "iprobstat3Frag",
      "iprobstat4Frag",
      "iprobstat5Frag",
      "iprobstat6Frag",
      };

   probStat = ekk_getIprobstat (myOslModel ());

   if (probStat == 0)
      return;

   if (probStat == 1)
      myOptModel ()->reportInfeasible ();

   if (probStat == 2)
      myOptModel ()->reportUnbounded ();

   if ((probStat < 0) or (probStat >= NumberElem (statFragID)))
      myMsgFac () ("oslOptimalNotFoundFmsg",
         probStat,
         myMsgFac ().myFrag ("iprobstatRangeErrorFrag"));
   else
      myMsgFac () ("oslOptimalNotFoundFmsg",
         probStat,
         myMsgFac ().myFrag (statFragID[probStat]));
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::checkRetPtr (const void * thePtr, const char * funcName)
   {
   if (thePtr == NULL)
      {
      if (mySolverItf_ != NULL)
         {
         delete mySolverItf_;

         mySolverItf_ = NULL;
         }

      myMsgFac () ("oslErrorSmsg", funcName);
      }
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::checkRetVal (const char * funcName)
   {
   stronglyAssert (retVal_ != INVALID_RET_VAL);

   if (retVal_ != 0)
      {
      if (mySolverItf_ != NULL)
         {
         delete mySolverItf_;

         mySolverItf_ = NULL;
         }

      myMsgFac () ("oslErrorSmsg", funcName);
      }

   retVal_ = INVALID_RET_VAL;
   }

//------------------------------------------------------------------------------

EKKModel * WitOsiOslSolver::myOslModel ()
   {
   witAssert (mySolverItf_ != NULL);

   return mySolverItf_->getModelPtr ();
   }

//------------------------------------------------------------------------------

#endif // USE_COIN

//------------------------------------------------------------------------------
// Dummy implementation of class OsiOslSolver.
//------------------------------------------------------------------------------

#if ! USE_COIN

//------------------------------------------------------------------------------

WitOsiOslSolver::WitOsiOslSolver (WitOptModel * theOptModel):

      WitOptSolver      (theOptModel),

      mySolverItf_      (NULL),
      retVal_           (0),
      presolveFileName_ ()
   {
   myMsgFac () ("osiOslNYAvailSmsg");
   }

//------------------------------------------------------------------------------

WitOsiOslSolver::~WitOsiOslSolver ()
   {
   }

//------------------------------------------------------------------------------

void WitOsiOslSolver::solve ()
   {
   }

//------------------------------------------------------------------------------

#endif // Not USE_COIN

//------------------------------------------------------------------------------

#endif // OPT_IMPLODE

#endif
@


1.2
log
@Continued implementation of opt with COIN.
@
text
@@


1.1
log
@Continued implementation of opt with COIN.
@
text
@d16 3
a18 1
// Contains the main implementation of class OsiOslSolver.
d32 2
a35 2
//
// See OptModel.C for the dummy implementation.
a37 2
#ifdef OPT_IMPLODE

d50 1
a50 1
      mySolverInter_    (NULL),
d93 1
a93 1
      mySolverInter_->writeMps ("model", "mps");
d127 1
a127 1
   mySolverInter_ = new OsiOslSolverInterface;
d132 1
a132 1
         myOptImploder ()->myOptComp ()->oslMesgFileName ().myCstring ());
d149 1
a149 1
   if (mySolverInter_ == NULL)
d152 1
a152 1
   delete mySolverInter_;
d154 1
a154 1
   mySolverInter_ = NULL;
d167 1
a167 1
   mySolverInter_->loadProblem (
d179 1
a179 1
   mySolverInter_->setObjSense (-1.0);
d216 1
a216 1
   mySolverInter_->setInteger (theIndices.myCvector (), theIndices.length ());
d264 1
a264 1
   mySolverInter_->setRowSetBounds (
d306 1
a306 1
   mySolverInter_->setColSetBounds (
d340 1
a340 1
   mySolverInter_->setObjCoeffSet (
d400 1
a400 1
   if (not myOptImploder ()->myOptComp ()->optInitMethod ()->external ())
d412 1
a412 1
   mySolverInter_->setColSolution (initSoln.myCvector ());
d453 1
a453 1
   if (not myOptImploder ()->myOptComp ()->crashOptStarter ()->isChosen ())
d483 1
a483 1
   if (myOptImploder ()->myOptComp ()->postSolveRecovery ())
d582 1
a582 1
   primalSoln = mySolverInter_->getColSolution ();
d599 1
a599 1
   dualSoln = mySolverInter_->getRowPrice ();
d667 1
a667 1
      if (mySolverInter_ != NULL)
d669 1
a669 1
         delete mySolverInter_;
d671 1
a671 1
         mySolverInter_ = NULL;
d686 1
a686 1
      if (mySolverInter_ != NULL)
d688 1
a688 1
         delete mySolverInter_;
d690 1
a690 1
         mySolverInter_ = NULL;
d703 1
a703 1
   witAssert (mySolverInter_ != NULL);
d705 1
a705 1
   return mySolverInter_->getModelPtr ();
d711 37
@

