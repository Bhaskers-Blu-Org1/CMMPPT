head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.02.18.00.05.24;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2004.02.14.00.45.35;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Continued double precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef RealOutArgRH
#define RealOutArgRH

//------------------------------------------------------------------------------
// Header file: "RealOutArgR.h"
//
// Contains the declaration of the following classes:
//
//    Wit::RealOutArgRep
//    Wit::FloatOutArgRep
//    Wit::DoubleOutArgRep
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Class Wit::RealOutArgRep
//
// "Real Output Argument Representation"
//
// Internal representation of a RealOutArg.
//
// Class Hierarchy:
//
//    RealOutArgRep
//       FloatOutArgRep
//       DoubleOutArgRep
//
// Implemented in RealArgs.C.
//------------------------------------------------------------------------------

namespace Wit
{

class RealOutArgRep
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~RealOutArgRep ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual RealOutArgRep & newCopy () = 0;
         //
         // Heap-constructs and returns a copy of this RealOutArgRep.

      virtual void setTo (double theValue) = 0;
         //
         // Sets the value of the application variable to theValue, converting
         // the type of theValue, if necessary.

      virtual void * myUnderArgAsVoidPtr () = 0;
         //
         // Returns the underlying argument as a void pointer.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      RealOutArgRep ();

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (RealOutArgRep);
   };

// Leaving namespace Wit.
}   

//------------------------------------------------------------------------------
// Class Wit::FloatOutArgRep
//
// "Float Output Argument Representation"
//
// Internal representation of a RealOutArg in single precision mode.
// The underlying argument is a float *: It references an application variable
// of type float.
//
// Class Hierarchy:
//
//    RealOutArgRep
//       FloatOutArgRep
//
// Implemented in RealArgs.C.
//------------------------------------------------------------------------------

namespace Wit
{

class FloatOutArgRep: public RealOutArgRep
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      FloatOutArgRep (float *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline static bool instanceExists ()
         {
         return (nInstances_ >= 1);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~FloatOutArgRep ();

      //------------------------------------------------------------------------
      // Overrides from class RealOutArgRep.
      //------------------------------------------------------------------------

      virtual RealOutArgRep & newCopy             ();
      virtual void            setTo               (double);
      virtual void *          myUnderArgAsVoidPtr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (FloatOutArgRep);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * const myUnderArg_;
         //
         // The underlying argument.

      static int nInstances_;
         //
         // # FloatOutArgs that currently exist.
   };

// Leaving namespace Wit.
}   

//------------------------------------------------------------------------------
// Class Wit::DoubleOutArgRep
//
// "Double Output Argument Representation"
//
// Internal representation of a RealOutArg in single precision mode.
// The underlying argument is a double *: It references an application variable
// of type double.
//
// Class Hierarchy:
//
//    RealOutArgRep
//       DoubleOutArgRep
//
// Implemented in RealArgs.C.
//------------------------------------------------------------------------------

namespace Wit
{

class DoubleOutArgRep: public RealOutArgRep
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      DoubleOutArgRep (double *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline static bool instanceExists ()
         {
         return (nInstances_ >= 1);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~DoubleOutArgRep ();

      //------------------------------------------------------------------------
      // Overrides from class RealOutArgRep.
      //------------------------------------------------------------------------

      virtual RealOutArgRep & newCopy             ();
      virtual void            setTo               (double);
      virtual void *          myUnderArgAsVoidPtr ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (DoubleOutArgRep);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      double * const myUnderArg_;
         //
         // The underlying argument.

      static int nInstances_;
         //
         // # DoubleOutArgs that currently exist.
   };

// Leaving namespace Wit.
}   

#endif
@


1.1
log
@Continued double precision.
@
text
@@

