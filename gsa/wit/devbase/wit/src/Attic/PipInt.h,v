head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2003.12.17.22.29.59;	author rjw;	state dead;
branches;
next	1.19;

1.19
date	2003.12.17.21.23.00;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.17.16.53.52;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.15.19.35.59;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.10.23.45.57;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.10.23.20.43;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.04.16.45.16;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.31.15.37.54;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.28.22.38.59;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.24.15.37.46;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.23.19.33.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.21.19.28.45;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.16.22.29.39;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.16.16.18.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.09.21.31.51;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.01.15.59.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.01.14.17.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.30.15.40.54;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Continued implementation of PIP.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipIntH
#define PipIntH

//------------------------------------------------------------------------------
// Header file: "PipInt.h"
//
// Contains the declaration of class Pip::Int.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PipPartAtt.h>
#include <PairStack.h>

//------------------------------------------------------------------------------
// Class Pip::Int
// "Post-Implosion Pegging Interface"
// Interface to the Post-Implosion Pegging Subsystem.
//
// Class Hierarchy:
//
// ProbAssoc
//    Int
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

namespace WitPip
{

class Int: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      Int (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~Int ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void clearShipSeq ();
         //
         // Clears the shipment sequence.

      void recIncShipVol (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
         //
         // Records an increase of incShipVol to theDemand->shipVol ()[shipPer].

      void getShipSeq (ShipSeq & theShipSeq);
         //
         // Sets theShipSeq to the (forward) shipment sequence.

      void buildPegging ();
         //
         // Builds the pegging.

      void clearPegging ();
         //
         // Clears the pegging.

      void printPegging ();
         //
         // Prints the pegging.

      //------------------------------------------------------------------------
      // get---PegPairs functions.
      // Each of these functions sets its last arg to a pegging for theDemand
      // and shipPer, where the peggings are for:
      //
      //    execVol
      //    subVol
      //    supplyVol
      //    sideVol
      //    prodVol
      //    consVol
      //------------------------------------------------------------------------

      void getExecVolPairs (
            WitDemand *    theDemand,
            WitPeriod      shipPer,
            OpnPairStack & execVolPairs);

      void getSubVolPairs (
            WitDemand *    theDemand,
            WitPeriod      shipPer,
            SubPairStack & subVolPairs);

      void getPartPegPairs (
            WitDemand *     theDemand,
            WitPeriod       shipPer,
            PartAtt         thePartAtt,
            PartPairStack & thePartPairs);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline bool peggingExists ()
         {
         return (myMgr_ != NULL);
         }

      accessNonNull (Mgr *, myMgr)

      noCopyCtorAssign (Int);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      Mgr * myMgr_;
         //
         // The Mgr owned by this Int in PI pegging mode;
         // otherwise NULL.

      ShipSeq revShipSeq_;
         //       
         // Represents the ordered list of triples
         // (theDemand, shipPer, incShipVol) such that
         // theDemand->shipVol ()[shipPer] is to be increased by incShipVol,
         // pegging the resulting resource utilization to theDemand in shipPer.
         // Stored in reverse order.
   };

// Leaving namespace Pip.
}   

#endif
@


1.19
log
@Continued implementation of PIP.
@
text
@@


1.18
log
@Continued implementation of PIP.
@
text
@a58 8
      void preprocess ();
         //
         // Puts the PI Pegging Subsystem into a preprocessed state.

      void unpreprocess ();
         //
         // Puts the PI Pegging Subsystem into an unpreprocessed state.

d120 5
@


1.17
log
@Continued implementation of PIP.
@
text
@d21 1
d67 1
a67 1
      void clearTargs ();
d69 1
a69 1
         // Clears the Targs owned by the PI Pegging subsystem.
d78 4
d141 8
@


1.16
log
@Continued implementation of PIP.
@
text
@d91 2
a92 2
      // Each of these functions sets thePegPairs to a pegging for theDemand and
      // shipPer, where the peggings are for:
d103 3
a105 3
            WitDemand *      theDemand,
            WitPeriod        shipPer,
            WitOpnPipStack & thePegPairs);
d108 3
a110 3
            WitDemand *      theDemand,
            WitPeriod        shipPer,
            WitSubPipStack & thePegPairs);
d113 4
a116 4
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            PartAtt           thePartAtt,
            WitPartPipStack & thePegPairs);
@


1.15
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class PipInt.
d23 1
a23 1
// Class PIP::PipInt
d30 1
a30 1
//    PipInt
d35 1
a35 1
namespace WitPIP
d38 1
a38 1
class WitPipInt: public WitProbAssoc
d46 1
a46 1
      WitPipInt (WitProblem *);
d52 1
a52 1
      ~WitPipInt ();
d68 1
a68 1
         // Clears the PipTargs owned by the PI Pegging subsystem.
d124 1
a124 1
      accessNonNull (WitPipMgr *, myPipMgr)
d126 1
a126 1
      noCopyCtorAssign (WitPipInt);
d132 1
a132 1
      WitPipMgr * myPipMgr_;
d134 1
a134 1
         // The PipMgr owned by this PipInt in PI pegging mode;
d138 1
a138 1
// Leaving namespace PIP
@


1.14
log
@Continued implementation of PIP.
@
text
@d23 1
a23 1
// Class PipInt
d35 3
d115 1
a115 1
            WitPip::PartAtt   thePartAtt,
d137 3
@


1.13
log
@Continued implementation of PIP.
@
text
@d109 1
a109 1
      void getPegPairs (
@


1.12
log
@Continued implementation of PIP.
@
text
@d20 1
d109 1
a109 16
      void getSupplyVolPairs (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitPartPipStack & thePegPairs);

      void getSideVolPairs (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitPartPipStack & thePegPairs);

      void getProdVolPairs (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitPartPipStack & thePegPairs);

      void getConsVolPairs (
d112 1
@


1.11
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d93 1
d109 5
@


1.10
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d85 13
a97 1
      void getExecPegPairs (
a100 2
         //
         // Sets thePegPairs to the execVol pegging for theDemand and shipPer.
d102 1
a102 1
      void getSubPegPairs (
a105 2
         //
         // Sets thePegPairs to the subVol pegging for theDemand and shipPer.
d107 11
a117 1
      void getSupplyPegPairs (
a120 2
         //
         // Sets thePegPairs to the supplyVol pegging for theDemand and shipPer.
@


1.9
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d86 3
a88 3
            WitDemand *                                       theDemand,
            WitPeriod                                         shipPer,
            WitPairStack <WitPipSrc <WitOperation>, double> & thePegPairs);
d93 3
a95 3
            WitDemand *                                       theDemand,
            WitPeriod                                         shipPer,
            WitPairStack <WitPipSrc <WitSubEntry>, double> & thePegPairs);
d100 3
a102 3
            WitDemand *                                  theDemand,
            WitPeriod                                    shipPer,
            WitPairStack <WitPipSrc <WitPart>, double> & thePegPairs);
@


1.8
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a84 7
      void getSupplyPegPairs (
            WitDemand *                                  theDemand,
            WitPeriod                                    shipPer,
            WitPairStack <WitPipSrc <WitPart>, double> & thePegPairs);
         //
         // Sets thePegPairs to the supplyVol pegging for theDemand and shipPer.

d98 7
@


1.7
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d85 4
a88 4
      void getSupPegPairs (
            WitDemand *                            theDemand,
            WitPeriod                              shipPer,
            WitPairStack <WitPartPipSrc, double> & thePegPairs);
d93 3
a95 3
            WitDemand *                           theDemand,
            WitPeriod                             shipPer,
            WitPairStack <WitOpnPipSrc, double> & thePegPairs);
d98 7
@


1.6
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d85 1
a85 1
      void getSupVolPegging (
d88 1
a88 1
            WitPairStack <WitPartPipSrc, double> & thePegging);
d90 1
a90 1
         // Sets thePegging to the supplyVol pegging for theDemand and shipPer.
d92 1
a92 1
      void getExecVolPegging (
d95 1
a95 1
            WitPairStack <WitOpnPipSrc, double> & thePegging);
d97 1
a97 1
         // Sets thePegging to the execVol pegging for theDemand and shipPer.
@


1.5
log
@Continued implementation of post-implosion pegging.
@
text
@d92 7
@


1.4
log
@Continued implementation of post-implosion pegging.
@
text
@d86 3
a88 3
            WitDemand *                        theDemand,
            WitPeriod                          shipPer,
            WitPairStack <WitPipSrc, double> & thePegging);
@


1.3
log
@Continued implementation of post-implosion pegging.
@
text
@d30 2
@


1.2
log
@Continued implementation of post-implosion pegging.
@
text
@d79 11
@


1.1
log
@Continued implementation of post-implosion pegging.
@
text
@d67 1
a67 1
            double      incVol);
d69 1
a69 1
         // Records an increase of incVol to theDemand->shipVol ()[shipPer].
@

