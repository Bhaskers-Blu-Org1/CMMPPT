head	1.13;
access;
symbols
	EndRw-branch:1.12.0.6
	Root-of-EndRw:1.12
	rwToStl:1.12.0.4
	latest_sce_3_10_20010924:1.12.0.2
	sce_3_10_20010924:1.12
	latest_sce_3_00_20010601:1.4.0.2
	sce_3_00_20010601:1.4;
locks; strict;
comment	@ * @;


1.13
date	2003.03.03.23.27.02;	author rjw;	state dead;
branches;
next	1.12;

1.12
date	2001.06.28.17.35.20;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.15.20.53.37;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.14.17.41.54;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.13.20.30.24;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.11.19.29.11;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.08.22.34.47;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.08.18.00.28;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.01.19.23.35;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.29.22.11.28;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.25.22.59.13;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.25.14.53.26;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.10.22.31.14;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.12
log
@Replaced non-template based production multi-route with template based
production multi-route.
@
text
@@


1.11
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@a0 119
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PrmSelPtH
#define PrmSelPtH

//------------------------------------------------------------------------------
// Header file: "PrmSelPt.h"
//
// Contains the declaration of class PrmSelPt.
//------------------------------------------------------------------------------

#include <SelPt.h>

//------------------------------------------------------------------------------
// Class PmrSelPt
//
// A SelPt for production multi-route.
// A PrmSelPt represents a Part and explosion period at which a BopEntry must be
// selected.
//
// Class Hierarchy:
//
// SelPt
//    PmrSelPt
//
// Implemented in ProdMR.C.
//------------------------------------------------------------------------------

class WitPmrSelPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrSelPt (WitPmrPart * thePmrPart, WitPeriod expPer);
         //
         // myPmrPart_ <-- thePmrPart.
         // myExpPer_  <-- expPer.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPmrSelPt ();

      //------------------------------------------------------------------------
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual WitTlObj *  selectedObj      ();  
      virtual void        alterSelection   ();
      virtual void        printSelection   ();
      virtual WitSelMgr * mySelMgr         ();
      virtual void        prtID            ();        
      virtual WitBoolean  splittable       ();   
      virtual void        adjustSplitBound (WitTlObj *, double &);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void printID ();
         //
         // Prints a string identifying this PmrSelPt.

      void select (WitBopEntry * theBopEnt);
         //
         // Causes this PmrSelPt to select theBopEnt.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPmrCand *, selPmrCand)
      accessFunc (WitBoolean,   hasResAlt)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPmrSelPt);

      FILE * msgFile ();

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPmrPart * const myPmrPart_;
         //
         // Represents the Part at which a BopEntry is to be selected.

      const WitPeriod myExpPer_;
         //
         // The explosion period in which a BopEntry is to be selected.

      WitPmrCand * selPmrCand_;
         //
         // The PmrCand that represents the BopEntry currently selected for this
         // PmrSelPt, or NULL, if there is no selection.

      WitBoolean hasResAlt_;
         //
         // TRUE, iff this PmrSelPt currently has a selection and an 
         // shortage-resolving alternative to the current selection exists.
   };

#endif
@


1.10
log
@Created class SelCand and classes derived from it.
@
text
@a55 19
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitCandIndex,                   selIndex)
      accessFunc (WitBoolean,                     hasResAlt)
      accessFunc (const WitVector (WitBoolean) &, prevSel)

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitCandIndex nCandidates ()
            //
            // Returns the # of selection candidates for this PmrPart.
         {
         return prevSel_.length ();
         }

      //------------------------------------------------------------------------
d75 1
a75 1
      void select (WitCandIndex theIdx);
d77 8
a84 1
         // Changes the selection index to theIdx, which must be a valid change.
a93 4
      void selectDefault ();
         //
         // Sets the selection to its default value.

d108 1
a108 1
      WitCandIndex selIndex_;
d110 2
a111 2
         // Index of the selection for this PmrSelPt in the candidate vector
         // of myPmrPart_, or -1, if there is no selection.
a116 5

      WitVector (WitBoolean) prevSel_;
         //
         // prevSel_[i] is TRUE, iff candidate #i has been previously selected
         // for this PmrSelPt.
@


1.9
log
@Fixed bug in two-way multi-exec:
   NSTN and ASAP multi-exec collisions were not being adequately detected.
@
text
@d44 1
a44 1
      WitPmrSelPt (WitMrPart * theMrPart, WitPeriod expPer);
d46 2
a47 2
         // myMrPart_ <-- theMrPart.
         // myExpPer_ <-- expPer.
d69 1
a69 1
            // Returns the # of selection candidates for this MrPart.
d116 1
a116 1
      WitMrPart * const myMrPart_;
d127 1
a127 1
         // of myMrPart_, or -1, if there is no selection.
@


1.8
log
@Refactoring.
@
text
@d81 1
a81 1
      virtual WitSelMgr * mySelMgr         (WitSelector *);
@


1.7
log
@Refactoring.
@
text
@d46 2
a47 2
         // myMrPart_  <-- theMrPart.
         // expPeriod_ <-- expPer.
a66 5
      WitBoolean hasAlt ();
         //
         // Returns TRUE, iff this PmrSelPt currently has a selection and an 
         // alternative to the current selection exists.

d120 1
a120 1
      const WitPeriod expPeriod_;
@


1.6
log
@Refactoring.
@
text
@d132 1
a132 2
         // of myMrPart_.
         // At all times, 0 <= selIndex_ < nCandidates ().
@


1.5
log
@Continued development of selection splitting for multi=exec.
@
text
@d44 1
a44 1
      WitPmrSelPt (WitMrPart * theMrPart, WitPeriod thePer);
d47 1
a47 1
         // expPeriod_ <-- thePer.
d133 1
a133 1
         // -1 indicates no selection.
@


1.4
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d79 15
a93 31
      virtual WitTlObj * selectedObj ();
         //
         // Override from class SelPt.

      virtual void alterSelection ();
         //
         // Override from class SelPt.

      virtual void printSelection ();
         //
         // Override from class SelPt.

      virtual WitSelMgr * mySelMgr (WitSelector *);
         //
         // Override from class SelPt.

      virtual WitBoolean splittable ();
         //
         // Override from class SelPt.

      virtual void adjustSplitBound (WitTlObj *, double &);
         //
         // Override from class SelPt.

      virtual void prtSplitting (double);
         //
         // Override from class SelPt.

      virtual void prtSplitExp (WitTlObj *);
         //
         // Override from class SelPt.
@


1.3
log
@Various refactorings for sel-split for multi-exec.
@
text
@d99 4
@


1.2
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d46 2
a47 2
         // myMrPart_ <-- theMrPart.
         // myPeriod_ <-- thePer.
d79 1
a79 1
      virtual WitTlObj * selection ();
d103 4
d133 1
a133 1
      const WitPeriod myPeriod_;
d135 1
a135 1
         // The period in which the routing selection is to be made.
d137 1
a137 1
      WitMrPart * const myMrPart_;
d139 1
a139 2
         // Represents the Component at which the routing selection is to be
         // made.
@


1.1
log
@Renamed AltPt classes to SelPt classes.
@
text
@d79 1
a79 1
      virtual void alterSelection ();
d83 1
a83 1
      virtual void splitSelection (double);
d96 4
@

