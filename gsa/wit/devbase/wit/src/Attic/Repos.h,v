head	1.18;
access;
symbols
	latest_sce_4_20_20060523:1.16.0.2
	sce_4_20_20060523:1.16
	latest_sce4_20_OSL:1.15.0.2
	sce_4_20_OSL:1.15
	sce_410_withVa:1.11
	sce_4_05_20040511:1.11
	sce_4_00_20040201:1.11
	nextGenBranch:1.10.0.2
	nextGenRoot:1.10
	sce_3_30_20030627:1.10
	EndRw-branch:1.4.0.4
	Root-of-EndRw:1.4
	rwToStl:1.4.0.2;
locks; strict;
comment	@ * @;


1.18
date	2007.11.12.16.30.12;	author rjw;	state dead;
branches;
next	1.17;

1.17
date	2007.11.09.00.40.48;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.02.17.34.11;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.15.21.45.26;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.15.21.27.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.15.20.09.01;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.15.19.55.21;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.24.17.11.17;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.22.19.32.14;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.15.21.01.26;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.13.22.22.13;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.02.22.18.46;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.16.16.41.22;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.14.00.55.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.09.19.52.36;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.16.23.32.09;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.13.21.31.41;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.10.18.02.13;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ReposH
#define ReposH

//------------------------------------------------------------------------------
// Header file: "Repos.h"
//
// Contains the declaration of class DataRepos.
//------------------------------------------------------------------------------

#include <Assoc.h>

template <typename Variable> class WitTypedRepos;
template <typename Object>   class WitAttRepos;

//------------------------------------------------------------------------------
// Class DataRepos
//
// Saves the current values of variables of multiple types and restores them to
// the saved values upon request. 
//
// Implemented in Repos.C.
//------------------------------------------------------------------------------

class WitDataRepos: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDataRepos (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitDataRepos ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void saveVal (int    & theVar);
      void saveVal (bool   & theVar);
      void saveVal (double & theVar);
         //
         // Saves the current value of theVar.

      template <typename ObjByPtr>
            inline void saveVal (ObjByPtr * & thePtr)
         {
         savePtrVal (reinterpret_cast <void * &> (thePtr));
         }

      void saveHeurExecVol (WitOperation * theOpn, WitPeriod thePer);
         //
         // Saves the execVol for theOpn in thePer, for restoration during
         // heuristic allocation.

      void restore ();
         //
         // Restores each variable saved in this DataRepos to the value it had
         // the first time it was saved since the most recent call to restore or
         // clear. Empties the set of saved variables.

      void restoreAndSave (WitDataRepos * theDataRepos);
         //
         // Same as restore, but clears theDataRepos and then saves in it the
         // current values of all the variables that are being restored.

      void clear ();
         //
         // Empties the set of saved variables.

      bool isEmpty ();
         //
         // Returns true, iff the set of saved variables is empty.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void savePtrVal (void * & theVoidPtr);
         //
         // Saves the current value of theVoidPtr.

      noCopyCtorAssign (WitDataRepos);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitTypedRepos <int>    * myIntRepos_;
      WitTypedRepos <bool>   * myBoolRepos_;
      WitTypedRepos <double> * myDblRepos_;
      WitTypedRepos <void *> * myPtrRepos_;
         //
         // The TypedReposes owned by this DataRepos.

      WitAttRepos <WitOperation> * execVolRepos_;
         //
         // The AttReposes owned by this DataRepos.
   };

#endif
@


1.17
log
@Stochastic Implosion
@
text
@@


1.16
log
@Updated the copyright date on all source files.
@
text
@d22 1
d65 5
d110 5
a114 1
         // The TypedReposes that implement this DataRepos.
@


1.15
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.14
log
@[shared-resource pegging]
@
text
@d89 1
a89 1
      void savePtrVal (void * & theTlPtr);
d91 1
a91 1
         // Saves the current value of theTlPtr.
@


1.13
log
@[shared-resource pegging]
@
text
@a19 1
#include <TlObj.h>
d61 1
a61 1
         savePtrVal (toTlObjRef_cast (thePtr));
d89 1
a89 1
      void savePtrVal (WitTlObj * & theTlPtr);
d99 4
a102 4
      WitTypedRepos <int>        * myIntRepos_;
      WitTypedRepos <bool>       * myBoolRepos_;
      WitTypedRepos <double>     * myDblRepos_;
      WitTypedRepos <WitTlObj *> * myPtrRepos_;
@


1.12
log
@[shared-resource pegging]
@
text
@d22 1
a22 1
template <typename VarType> class WitTypedRepos;
@


1.11
log
@Continued implementation of PIP.
@
text
@d59 2
a60 2
      template <typename ObjType>
            inline void saveVal (ObjType * & thePtr)
@


1.10
log
@Replaced some C-style casts with C++ style casts.
@
text
@d30 1
a30 1
// Implemented in Stack.C.
@


1.9
log
@Various internal changes.
@
text
@d20 1
d62 1
a62 1
         savePtrVal ((WitTlObj * &) thePtr);
@


1.8
log
@Various internal changes.
@
text
@a33 3
      template <typename ObjType>
         friend inline void savePtrVal (WitDataRepos *, ObjType * &);

a105 8

//------------------------------------------------------------------------------

template <typename ObjType>
      inline void savePtrVal (WitDataRepos * theRepos, ObjType * & thePtr)
   {
   theRepos->savePtrVal ((WitTlObj * &) thePtr);
   }
@


1.7
log
@Internal changes.
@
text
@d21 1
a21 1
template <class VarType> class WitTypedRepos;
d34 1
a34 1
      template <class ObjType>
d61 6
d112 1
a112 1
template <class ObjType>
@


1.6
log
@Continued implementation of single-source by the new algorithm.
@
text
@d56 1
d76 1
a76 1
      WitBoolean isEmpty ();
d78 1
a78 1
         // Returns TRUE, iff the set of saved variables is empty.
d97 1
@


1.5
log
@Continued implementation of single-source by the new algorithm.
@
text
@d68 2
a69 2
         // Same as restore, but clears theDataRepos and saves the current
         // values of the variables in it.
@


1.4
log
@Continued implementation of single-source.
@
text
@d62 1
a62 1
         // Restores each variable saved in this TypeRepos to the value it had
d65 5
@


1.3
log
@Continued implementation of single source.
@
text
@d35 1
a35 1
         friend inline void savePtrVal (WitDataRepos &, ObjType * &);
d90 3
a92 3
      WitTypedRepos <int>        & myIntRepos_;
      WitTypedRepos <double>     & myDblRepos_;
      WitTypedRepos <WitTlObj *> & myPtrRepos_;
d100 1
a100 1
      inline void savePtrVal (WitDataRepos & theRepos, ObjType * & thePtr)
d102 1
a102 1
   theRepos.savePtrVal ((WitTlObj * &) thePtr);
@


1.2
log
@Continued implementation of single source.
@
text
@d34 3
d70 4
d80 4
d90 3
a92 2
      WitTypedRepos <int>    & myIntRepos_;
      WitTypedRepos <double> & myDblRepos_;
d96 8
@


1.1
log
@Continued implementation of single source.
@
text
@d59 7
a65 4
         // Restores all variables whose values were saved by this DataRepos to
         // their saved values and clears this DataRepos of all its saved
         // values. The restoration is done on a last-in-first-out basis by
         // type.
@

