head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2010.09.24.18.17.21;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2010.09.24.15.46.14;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.24.00.16.25;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.23.22.48.51;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.22.21.36.00;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.22.20.21.52;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.21.21.19.13;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Modifiable heuristic allocation
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef HeurAdjusterH
#define HeurAdjusterH

//------------------------------------------------------------------------------
// Header file: "HeurAdjuster.h"
//
// Contains the declaration of class HeurAdjuster.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <Schedule.h>
#include <PairStack.h>

//------------------------------------------------------------------------------
// Class HeurAdjuster
//
// "Heuristic Adjuster"
// Responsible for implementing the heuristic adjustment capability.
//------------------------------------------------------------------------------

class WitHeurAdjuster: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitHeurAdjuster (WitAvailSched *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitHeurAdjuster ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void adjustForExecVol (
            WitOperation *       theOpn,
            const WitIVRealArg & theVec);
         //
         // Adjusts the state of heuristic allocation for setting
         // theOpn->execVol () to theVec.

      void adjustForSubVol (
            WitSubEntry *        theSub,
            const WitIVRealArg & theVec);
         //
         // Adjusts the state of heuristic allocation for setting
         // theSub->subVol () to theVec.

      void adjustForShipVol (
            WitDemand *          theDemand,
            const WitIVRealArg & theVec);
         //
         // Adjusts the state of heuristic allocation for setting
         // theDemand->shipVol () to theVec.

      void delayedFeasCheck ();
         //
         // Performs delayed feasibility checking.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void checkPreconditions ();
         //
         // Verifies that the required preconditions for heuristic adjustment
         // are satisfied.

      void checkForExecVol (WitOperation * theOpn, const WitIVRealArg & theVec);
         //
         // Does immediate feasibility checking for setting theOpn->execVol ()
         // to theVec.

      void checkForShipVol (WitDemand * theDemand, const WitIVRealArg & theVec);
         //
         // Does immediate feasibility checking for setting
         // theDemand->shipVol () to theVec.

      void checkNonExecCon (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         theValue);
         //
         // Checks the non-executable constraint for setting
         // theOpn->execVol ()[execPer] to theValue.

      void checkExecHUBCon (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         theValue);
         //
         // Checks the hard upper bound constraint for setting
         // theOpn->execVol ()[execPer] to theValue.

      void checkLotSizeCon (
            WitOperation * theOpn,
            WitPeriod      execPer,
            double         theValue);
         //
         // Checks the lot size constraint for setting
         // theOpn->execVol ()[execPer] to theValue.

      void planForExecVol (WitOperation * theOpn, const WitIVRealArg & theVec);
         //
         // Plans for delayed feasibility checking for setting
         // theOpn->execVol () to theVec.

      void planForSubVol (WitSubEntry * theSub, const WitIVRealArg & theVec);
         //
         // Plans for delayed feasibility checking for setting theSub->subVol ()
         // to theVec.

      void planToSubCheck (WitBomEntry * theBomEnt, WitPeriod execPer);
         //
         // Plans to check the substitution constraint on theBomEnt in execPer.

      void reviseForExecVol (
            WitOperation *       theOpn,
            const WitIVRealArg & theVec);
         //
         // Revises the availability schedule for setting theOpn->execVol () to
         // theVec.

      void reviseForSubVol (
            WitSubEntry *        theSub,
            const WitIVRealArg & theVec);
         //
         // Revises the availability schedule for setting theSub->subVol () to
         // theVec.

      void reviseForShipVol (
            WitDemand *          theDemand,
            const WitIVRealArg & theVec);
         //
         // Revises the availability schedule for setting theDemand->shipVol ()
         // to theVec.

      void checkSubCons ();
         //
         // Checks the substitution constraints that need to checked.

      noCopyCtorAssign (WitHeurAdjuster);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitAvailSched * const myAvailSched_;
         //
         // The AvailSched for this HeurAdjuster.

      WitPairStack <WitBomEntry, WitPeriod> pairsToSubCheck_;
         //
         // The set of pairs (theBomEnt, execPer) for which the substitution
         // constraint on theBomEnt in execPer needs to be checked.

      WitSchedule <WitBomEntry, bool> toSubCheck_;
         //
         // toSubCheck_ (theBomEnt)[execPer] is true, iff (theBomEnt, execPer)
         // is in pairsToSubCheck_.
   };

#endif
@


1.6
log
@Heuristic Adjustment
@
text
@@


1.5
log
@Heuristic Adjustment
@
text
@a49 8
      void start ();
         //
         // Initiates heuristic adjustment.

      void finish ();
         //
         // Concludes heuristic adjustment.

a74 6
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, active)

a168 4
      bool active_;
         //
         // True, iff heuristic adjustment is currently active.

@


1.4
log
@Heuristic Adjustment
@
text
@d38 1
a38 1
      WitHeurAdjuster (WitProblem *);
d179 4
@


1.3
log
@Heuristic Adjustment
@
text
@d79 4
@


1.2
log
@Heuristic Adjustment
@
text
@d96 1
a96 1
      void checkExecVol (WitOperation * theOpn, const WitIVRealArg & theVec);
d101 1
a101 6
      void checkSubVol (WitSubEntry * theSub, const WitIVRealArg & theVec);
         //
         // Sets up delayed feasibility checking for setting theSub->subVol ()
         // to theVec.

      void checkShipVol (WitDemand * theDemand, const WitIVRealArg & theVec);
d130 35
@


1.1
log
@Heuristic Adjustment
@
text
@a49 4
      void setHeurAdjustAllowed (bool);
         //
         // Setter

a82 1
      accessFunc (bool, heurAdjustAllowed)
d93 2
a94 7
         // Verifies that all of the required preconditions for a heuristic
         // adjustment are satisfied.

      void verify (bool theAttVal, const char * theAttName, bool theReqVal);
         //
         // Verifies that theAttVal == theReqVal for heuristic adjustment.
         // theAttName is the name of the attribute being checked.
a144 4
      bool heurAdjustAllowed_;
         //
         // Heuristic adjustment is allowed iff heurAdjustAllowed_ is true.

@

