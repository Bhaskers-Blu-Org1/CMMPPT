head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2006.01.12.20.07.43;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2006.01.09.23.42.39;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.22.22.20.28;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.17.22.04.42;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.11.23.29.13;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.29.16.25.32;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2003.12.24.23.25.56;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.24.21.09.47;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.23.16.18.47;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.19.19.01.02;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.17.22.29.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipCoordH
#define PipCoordH

//------------------------------------------------------------------------------
// Header file: "PipCoord.h"
//
// Contains the declaration of class PipCoord.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PipPartAtt.h>

//------------------------------------------------------------------------------
// Class PipCoord
//
// "Post-Implosion Pegging Coordinator"
// Owns and manages the pegging for Post-Implosion Pegging.
//
// Class Hierarchy:
//
// ProbAssoc
//    PipCoord
//       UrpCoord
//------------------------------------------------------------------------------

class WitPipCoord: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPipCoord ();

      //------------------------------------------------------------------------
      // get---Trips functions.
      // Each of these functions sets its last arg to the list of pegging
      // triples for theDemand and shipPer, where the peggings are for:
      //
      //    execVol
      //    subVol
      //    supplyVol
      //    sideVol
      //    prodVol
      //    consVol
      //------------------------------------------------------------------------

      virtual void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips) = 0;

      virtual void getSubVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitSubTripStack & subVolTrips) = 0;

      virtual void getPartPegTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPipPartAtt::Tag theAttTag,
            WitPartTripStack & thePegTrips) = 0;

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPipSeqMgr *, myPipSeqMgr)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipCoord (WitPipSeqMgr *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPipCoord);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipSeqMgr * const myPipSeqMgr_;
         //
         // The PipSeqMgr for this PipCoord.
   };

#endif
@


1.10
log
@[shared-resource pegging]
@
text
@@


1.9
log
@[shared-resource pegging]
@
text
@a74 8
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void printInternal ();
         //
         // Prints internal aspects of the pegging, if appropriate.

      //------------------------------------------------------------------------
@


1.8
log
@[shared-resource pegging]
@
text
@a45 4
      // Other public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
d75 8
@


1.7
log
@[shared-resource pegging]
@
text
@a48 4
      virtual void print () = 0;
         //
         // Prints the pegging.

@


1.6
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class Pip::Coord.
a20 1
#include <PtrSched.h>
d23 1
a23 1
// Namespace Pip.
d25 2
a26 7
// Namespace for the Post-Implosion Pegging Subsystem.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Class Pip::Coord
//
// Internal coordinator for the Post-Implosion Pegging subsystem.
d31 2
a32 3
//    Coord
//
// Implemented in PIP.C.
d35 1
a35 4
namespace WitPip
{

class Coord: public WitProbAssoc
a39 6
      // Constructor functions.
      //------------------------------------------------------------------------

      Coord (Mgr *);

      //------------------------------------------------------------------------
d43 1
a43 1
      ~Coord ();
d46 1
a46 1
      // Functions called from class Mgr.
d49 1
a49 1
      void printPegging ();
d55 2
a56 2
      // Each of these functions sets its last arg to list of pegging triples
      // for theDemand and shipPer, where the peggings are for:
d66 1
a66 1
      void getExecVolTrips (
d69 1
a69 1
            WitOpnTripStack & execVolTrips);
d71 1
a71 1
      void getSubVolTrips (
d74 1
a74 1
            WitSubTripStack & subVolTrips);
d76 1
a76 1
      void getPartPegTrips (
d79 2
a80 2
            PartAtt            thePartAtt,
            WitPartTripStack & thePegTrips);
d86 7
a92 4
      Targ * myTargFor (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Returns the Targ for theDemand and shipPer, asserting that it
         // exists.
d94 1
a94 1
      accessFunc (Mgr *, myMgr)
d102 1
a102 10
      void checkRestrictions ();
         //
         // Verifies that the various data restrictions for PIP are met.

      void buildTargs ();
         //
         // Builds the Targs corresponding to the DemPers in the shipment
         // sequence.

      noCopyCtorAssign (Coord);
d108 1
a108 1
      Mgr * const myMgr_;
d110 1
a110 6
         // The Mgr that owns this Coord.

      WitPtrSched <WitDemand, Targ> myTargs_;
         //
         // myTargs_.myPtrAt (theDemand, shipPer) is the Targ owned
         // this Coord for theDemand in shipPer.
a112 3
// Leaving namespace Pip.
}   

@


1.5
log
@Continued implementation of PIP.
@
text
@@


1.4
log
@Continued implementation of PIP.
@
text
@d85 1
a85 1
            WitOpnTripStOld & execVolTrips);
d90 1
a90 1
            WitSubTripStOld & subVolTrips);
d96 1
a96 1
            WitPartTripStOld & thePegTrips);
d107 1
a107 5
      accessFunc    (Mgr *,                          myMgr)

      accessNonNull (WitPerPairMgr <WitOperation> *, myOpnPairMgr)
      accessNonNull (WitPerPairMgr <WitSubEntry> *,  mySubPairMgr)
      accessNonNull (WitPerPairMgr <WitPart> *,      myPartPairMgr)
a137 6

      WitPerPairMgr <WitOperation> * myOpnPairMgr_;
      WitPerPairMgr <WitSubEntry>  * mySubPairMgr_;
      WitPerPairMgr <WitPart>      * myPartPairMgr_;
         //
         // The PerPairMgrs owned by this Coord.
@


1.3
log
@Continued implementation of PIP.
@
text
@d85 1
a85 1
            WitOpnTripStack & execVolTrips);
d90 1
a90 1
            WitSubTripStack & subVolTrips);
d96 1
a96 1
            WitPartTripStack & thePegTrips);
@


1.2
log
@Continued implementation of PIP.
@
text
@a32 2
// The pegging exists iff the instance of this class has completed construction
// and has not yet been destroyed.
@


1.1
log
@Continued implementation of PIP.
@
text
@d72 3
a74 3
      // get---Pairs functions.
      // Each of these functions sets its last arg to a pegging for theDemand
      // and shipPer, where the peggings are for:
d84 15
a98 19
      void getExecVolPairs (
            WitDemand *    theDemand,
            WitPeriod      shipPer,
            OpnPairStack & execVolPairs);

      void getSubVolPairs (
            WitDemand *    theDemand,
            WitPeriod      shipPer,
            SubPairStack & subVolPairs);

      void getPartPegPairs (
            WitDemand *     theDemand,
            WitPeriod       shipPer,
            PartAtt         thePartAtt,
            PartPairStack & thePartPairs);

      Targ * myTargFor (WitDemPer * theDemPer);
         //
         // Returns the Targ for theDemPer, asserting that it exists.
d104 6
a109 1
      accessFunc    (Mgr *,                   myMgr)
d111 3
a113 3
      accessNonNull (SrcMgr <WitOperation> *, myOpnSrcMgr)
      accessNonNull (SrcMgr <WitSubEntry> *,  mySubSrcMgr)
      accessNonNull (SrcMgr <WitPart> *,      myPartSrcMgr)
d145 3
a147 3
      SrcMgr <WitOperation> * myOpnSrcMgr_;
      SrcMgr <WitSubEntry>  * mySubSrcMgr_;
      SrcMgr <WitPart>      * myPartSrcMgr_;
d149 1
a149 1
         // The SrcMgrs owned by this Coord.
@

