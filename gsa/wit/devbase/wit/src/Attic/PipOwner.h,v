head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2006.03.06.19.59.46;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2006.03.03.22.22.05;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.03.21.01.02;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.03.20.46.56;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.12.22.09.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.20.23.29;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.12.20.07.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipOwnerH
#define PipOwnerH

//------------------------------------------------------------------------------
// Header file: "PipOwner.h"
//
// Contains the declaration of class PipOwner.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <PipPartAtt.h>
#include <PtrSched.h>

//------------------------------------------------------------------------------
// Class PipOwner
//
// "Post-Implosion Pegging Owner"
// Owns the pegging for the Post-Implosion Pegging Subsystem.
//------------------------------------------------------------------------------

class WitPipOwner: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipOwner (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPipOwner ();

      //------------------------------------------------------------------------
      // get---Trips functions.
      // Each of these functions sets its last arg to the list of pegging
      // triples for theDemand and shipPer, where the peggings are for:
      //
      //    execVol
      //    subVol
      //    supplyVol
      //    sideVol
      //    prodVol
      //    consVol
      //------------------------------------------------------------------------

      void getExecVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitOpnTripStack & execVolTrips);

      void getSubVolTrips (
            WitDemand *       theDemand,
            WitPeriod         shipPer,
            WitSubTripStack & subVolTrips);

      void getPartPegTrips (
            WitDemand *        theDemand,
            WitPeriod          shipPer,
            WitPipPartAtt::Tag theAttTag,
            WitPartTripStack & thePegTrips);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void consolidatePegging ();
         //
         // Consolidates all of the PipPegLists in the pegging.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitPipTarg * myTargFor (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Returns the PipTarg for theDemand and shipPer, asserting that it
         // exists.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildTargs ();
         //
         // Builds the PipTargs corresponding to the (Demand, Period) pairs in
         // the shipment sequence.

      noCopyCtorAssign (WitPipOwner);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPtrSched <WitDemand, WitPipTarg> myTargs_;
         //
         // myTargs_.myPtrAt (theDemand, shipPer) is the PipTarg owned
         // this PipOwner for theDemand in shipPer, or NULL, if there is none.
   };

#endif
@


1.6
log
@[shared-resource pegging]
@
text
@@


1.5
log
@[shared-resource pegging]
@
text
@a27 7
//
// Class Hierarchy:
//
// ProbAssoc
//    PipOwner
//       UrpOwner
//       SrpOwner
d35 6
d59 1
a59 1
      virtual void getExecVolTrips (
d62 1
a62 1
            WitOpnTripStack & execVolTrips) = 0;
d64 1
a64 1
      virtual void getSubVolTrips (
d67 1
a67 1
            WitSubTripStack & subVolTrips) = 0;
d69 1
a69 1
      virtual void getPartPegTrips (
d73 1
a73 1
            WitPartTripStack & thePegTrips) = 0;
a91 8
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipOwner (WitProblem *);

@


1.4
log
@[shared-resource pegging]
@
text
@d77 8
@


1.3
log
@[shared-resource pegging]
@
text
@d21 1
d76 9
d99 5
d105 9
@


1.2
log
@[shared-resource pegging]
@
text
@a74 6
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPipSeqMgr *, myPipSeqMgr)

d81 1
a81 1
      WitPipOwner (WitPipSeqMgr *);
a89 8

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipSeqMgr * const myPipSeqMgr_;
         //
         // The PipSeqMgr for this PipOwner.
@


1.1
log
@[shared-resource pegging]
@
text
@d26 1
a26 1
// Owns the pegging for Post-Implosion Pegging.
d32 1
a32 1
//       UrpCoord
@

