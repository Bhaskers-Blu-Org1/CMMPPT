head	1.10;
access;
symbols
	sce_410_withVa:1.4
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2;
locks; strict;
comment	@ * @;


1.10
date	2007.11.15.18.22.31;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2007.06.04.20.07.11;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.04.19.05.56;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.04.17.47.15;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.30.21.57.57;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2005.09.22.14.59.51;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.03.21.20.30;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.15.23.22.33;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.19.16.48.25;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.25.21.07.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Stochastic Implosion
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "Ref.C"
//
// Contains the implementation         of class template Ref <Elem>.
// Contains the explicit instantiation of class template Ref <Elem>.
//------------------------------------------------------------------------------

#include <Ref.h>

//------------------------------------------------------------------------------
// Implementation of class template Ref <Elem>.
//------------------------------------------------------------------------------

template <typename Elem> 
      WitRef <Elem>::WitRef ():

         myDataPtr_     (NULL),
         attachAllowed_ (false)
   {
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      WitRef <Elem>::~WitRef ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitRef <Elem>::allowAttach ()
   {
   stronglyAssert (myDataPtr_ == NULL);

   stronglyAssert (not attachAllowed_);

   attachAllowed_ = true;
   }               

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitRef <Elem>::attachTo (Elem & theElem)
   {
   stronglyAssert (attachAllowed_);

   myDataPtr_     = & theElem;

   attachAllowed_ =   false;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
       void WitRef <Elem>::clear ()
   {
   myDataPtr_ = NULL;
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template Ref <Elem>.
//------------------------------------------------------------------------------

template class WitRef <bool>;

template class WitRef <WitList <WitPart>      >;
template class WitRef <WitList <WitOperation> >;
@


1.9
log
@Stochastic Implosion
@
text
@@


1.8
log
@Stochastic Implosion
@
text
@d75 3
@


1.7
log
@Stochastic Implosion
@
text
@d69 6
@


1.6
log
@[multi-thread]
@
text
@d25 3
a27 1
            myDataPtr_ (NULL)
d41 13
a53 1
      void WitRef <Elem>::attachTo (Elem & theInstance)
d55 5
a59 1
   myDataPtr_ = & theInstance;
a68 11

//------------------------------------------------------------------------------
// Explicit instantiation of class template Ref <Elem>.
//------------------------------------------------------------------------------

template class WitRef <bool                   >;
template class WitRef <WitList <WitPart>      >;
template class WitRef <WitList <WitOperation> >;
template class WitRef <WitList <WitPartPer>   >;
template class WitRef <WitList <WitPclEl>     >;

@


1.5
log
@[multi-thread]
@
text
@@


1.4
log
@pegged Critical List.
@
text
@d13 2
a14 2
// Contains the implementation         of class template Ref <TheType>.
// Contains the explicit instantiation of class template Ref <TheType>.
d20 1
a20 1
// Implementation of class template Ref <TheType>.
d23 2
a24 2
template <typename TheType> 
      WitRef <TheType>::WitRef ():
d31 2
a32 2
template <typename TheType> 
      WitRef <TheType>::~WitRef ()
d38 2
a39 2
template <typename TheType> 
      void WitRef <TheType>::attachTo (TheType & theInstance)
d46 2
a47 2
template <typename TheType> 
       void WitRef <TheType>::clear ()
d53 1
a53 1
// Explicit instantiation of class template Ref <TheType>.
@


1.3
log
@Continued implementation of PIP.
@
text
@d39 1
a39 1
      void WitRef <TheType>::refTo (TheType & theInstance)
d56 1
d60 2
a61 1
template class WitRef <bool                   >;
@


1.2
log
@Continued implementation of proportionate routing.
@
text
@d58 1
a58 1
template class WitRef <WitList <WitDatedPart> >;
@


1.1
log
@Continued implementation of proportionate routing.
@
text
@d20 2
d53 1
a53 1
// Explicit template instantiation.
@

