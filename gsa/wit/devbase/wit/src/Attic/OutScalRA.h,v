head	1.14;
access;
symbols
	sce_4_05_20040511:1.13;
locks; strict;
comment	@ * @;


1.14
date	2005.02.24.23.23.56;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2004.04.14.21.16.17;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.06.15.42.16;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.29.23.21.28;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.26.16.07.23;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.25.23.28.07;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.25.22.00.36;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.24.16.50.34;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.18.16.49.51;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.10.22.53.20;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.09.18.42.54;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.26.18.59.42;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.25.18.59.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.24.19.37.22;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Vector PropRt.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OutScalRAH
#define OutScalRAH

//------------------------------------------------------------------------------
// Header file: "OutScalRA.h"
//
// Contains the declaration of class OutScalRA.
//------------------------------------------------------------------------------

#include <RealArg.h>
#include <TlObj.h>

//------------------------------------------------------------------------------
// Class OutScalRA
//
// "Output Scalar Real Argument"
//
// Provides a uniform interface to certain kind of argument to an API function.
// The underlying argument is a pointer to a scalar real-valued variable
// belonging to the application program. Specifically, the underlying argument
// is of one of the following types:
//
//    float  *
//    double *
//
// Thus:
//    Some of the inner API functions (in WitRun.h) will have arguments of type
//       const OutScalRA &.
//    The corresponding outer API functions (in wit.h) will have arguments of
//       type float * and double *. These are the "underlying arguments".
//    The corresponding variables in the application program are of type float
//       and double. These are called the "application variables".
//
// Implemented in RealArg.C.
//------------------------------------------------------------------------------

class WitOutScalRA: public WitRealArg
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOutScalRA (float *);
         //
         // Conversion from a float * underlying argument.

      WitOutScalRA (double *);
         //
         // Conversion from a double * underlying argument.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitOutScalRA ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void operator = (double theValue) const;
         //
         // Sets the value of the application variable to theValue, converting
         // the type of theValue, if necessary.

      operator void * () const;
         //
         // Returns the underlying argument, converted to a void *.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      double appVarVal () const;
         //
         // Returns the current value of the application variable, converted
         // (if necessary) to a double.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline float  & myFlt () const;
      inline double & myDbl () const;
         //
         // These functions return the application variable.
         // Implemented in RealArg.C.

      noCopyCtor (WitOutScalRA);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      float * const myFltPtr_;
         //
         // The underlying argument, if it is a float *.
         // Otherwise NULL.

      double * const myDblPtr_;
         //
         // The underlying argument, if it is a double *.
         // Otherwise NULL.
   };

#endif
@


1.13
log
@Double Precision.
@
text
@@


1.12
log
@Double Precision.
@
text
@d76 1
a76 1
      void setTo (double theValue) const;
d106 1
a106 1
      noCopyCtorAssign (WitOutScalRA);
@


1.11
log
@Double Precision.
@
text
@d81 4
a87 4

      WitTlObj * asaTlPtr () const;
         //
         // Returns the underlying argument, converted to a TlObj ptr.
@


1.10
log
@Double Precision.
@
text
@d85 1
a85 1
      WitTlObj * myUnderArgAsTlPtr () const;
@


1.9
log
@Double Precision.
@
text
@d85 3
a87 7
      inline WitTlObj * myUnderArgAsTlPtr () const
         {
         return 
            doubleCase ()?
               toTlObj_cast (myDblPtr_):
               toTlObj_cast (myFltPtr_);
         }
d100 5
a104 2
      accessNonNull (float *,  myFltPtr)
      accessNonNull (double *, myDblPtr)
@


1.8
log
@Double Precision.
@
text
@d37 1
a37 1
//       OutScalRA.
d89 2
a90 2
               toTlObj_cast (myDblPtr ()):
               toTlObj_cast (myFltPtr ());
@


1.7
log
@Double Precision.
@
text
@a65 4
      WitOutScalRA (const WitOutScalRA &);
         //
         // Copy ctor.

d76 1
a76 1
      void setTo (double theValue);
d107 1
a107 3
      void operator = (const WitOutScalRA &);
         //
         // Not implemented; assignment is not allowed.
@


1.6
log
@Double Precision.
@
text
@d89 1
a89 1
      inline WitTlObj * myUnderArg () const
@


1.5
log
@Double Precision.
@
text
@d93 2
a94 2
               toTlObj_cast (myDblPtr_):
               toTlObj_cast (myFltPtr_);
d108 3
d119 9
a127 10
      union
         {
         float * myFltPtr_;
            //
            // The underlying argument, if it is a float *.

         double * myDblPtr_;
            //
            // The underlying argument, if it is a double *.
         };
@


1.4
log
@Double Precision.
@
text
@d120 1
a120 1
            // The unerlying argument, if it is a float *.
d124 1
a124 1
            // The unerlying argument, if it is a double *.
@


1.3
log
@Double Precision.
@
text
@d89 7
a95 1
      accessFunc (WitTlObj *, myUnderArg)
d116 10
a125 3
      WitTlObj * const myUnderArg_;
         //
         // The underlying argument, cast into a TlObj ptr.
@


1.2
log
@Double Precision.
@
text
@d16 1
a16 1
// Contains the declaration of class Wit::OutScalRA.
d46 1
a46 4
namespace Wit
{

class OutScalRA: public RealArg
d58 1
a58 1
      OutScalRA (float *);
d62 1
a62 1
      OutScalRA (double *);
d66 1
a66 1
      OutScalRA (const OutScalRA &);
d74 1
a74 1
      ~OutScalRA ();
d102 1
a102 1
      void operator = (const OutScalRA &);
a113 3

// Leaving namespace Wit.
}   
@


1.1
log
@Continued double precision.
@
text
@d43 1
a43 1
// Implemented in RealArgs.C.
@

