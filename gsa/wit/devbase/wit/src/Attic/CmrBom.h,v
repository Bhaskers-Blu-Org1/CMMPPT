head	1.7;
access;
symbols
	EndRw-branch:1.6.0.6
	Root-of-EndRw:1.6
	rwToStl:1.6.0.4
	latest_sce_3_10_20010924:1.6.0.2
	sce_3_10_20010924:1.6;
locks; strict;
comment	@ * @;


1.7
date	2003.03.03.23.26.38;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2001.07.12.17.57.00;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.21.18.24.30;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.20.20.07.03;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.18.18.42.21;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.15.20.53.35;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.14.17.41.52;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.6
log
@Templatized consumption multi-route.
@
text
@@


1.5
log
@More templates.
@
text
@a0 156
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef CmrBomH
#define CmrBomH

//------------------------------------------------------------------------------
// Header file: "CmrBom.h"
//
// Contains the declaration of class CmrBomEnt.
//------------------------------------------------------------------------------

#include <CmrSelPt.h>
#include <PtrTVec.h>
#include <PtrVec.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class CmrBomEnt
//
// A multi-route component corresponding to a BomEntry.
//
// Class Hierarchy:
//
// ProbAssoc
//    CmrBomEnt
//
// Implemented in ConsMR.C.
//------------------------------------------------------------------------------

class WitCmrBomEnt: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrBomEnt (WitBomEntry * theBomEnt, WitCmrMgr * theCmrMgr);
         //
         // myBomEnt_ <-- theBomEnt.
         // myCmrMgr_ <-- theCmrMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitCmrBomEnt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitCmrSelPt * myCmrSelPtWithAlt (WitPeriod execPer)
            //
            // Returns the CmrSelPt for this CmrBomEnt in execPer, if it has an
            // alternative to the current selection; otherwise NULL.
            //
         {
         return
            multiChoice_?
               multiChoiceCmrSelPtWithAlt (execPer):
               NULL;
         }

      void printHasAlt ();
         //
         // Prints those CmrSelPts for which hasAlt () is TRUE.

      void findExpConsEnts (WitPeriod execPer, WitConsEntStack & theConsEnts);
         //
         // Sets theConsEnts to be the set of cons entries currently
         // under consideration for explosion at myBomEnt_ in execPer.

      WitCmrCand * myCmrCandFor (WitConsEntry * theConsEnt);
         //
         // Returns the CmrCand owned by this CmrBomEnt that represents 
         // theConsEnt.
         // Issues a fatal error, if none exists.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitCmrMgr *,                      myCmrMgr)
      accessFunc (WitBomEntry *,                    myBomEnt)
      accessFunc (WitBoolean,                       multiChoice)
      accessFunc (const WitObjStack <WitCmrCand> &, myCmrCands)
      accessFunc (const WitPtrTVec <WitCmrSelPt> &, myCmrSelPt)

      WitConsEntry * selConsEntry (WitPeriod execPer);
         //
         // Returns the ConsEntry selected to be used when exploding at
         // myBomEnt_ in execPer.
         // Invalid, if myBomEnt_ is not in effect in execPer.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildCmrSelPts ();
         //
         // Creates the CmrSelPts for this CmrBomEnt.
         // To be called by the derived class ctors after finding the
         // candidates.

      WitCmrSelPt * multiChoiceCmrSelPtWithAlt (WitPeriod execPer);
            //
            // Returns the CmrSelPt for this CmrBomEnt in execPer, if it has an
            // alternative to the current selection; otherwise NULL.
            // multiChoice_ must be TRUE.

      void buildCmrCands ();
         //
         // Constructs the CmrCands owned by this CmrBomEnt.

      noCopyCtorAssign (WitCmrBomEnt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitCmrMgr * const myCmrMgr_;
         //
         // The CmrMgr that owns this CmrBomEnt.

      WitBomEntry * const myBomEnt_;
         //
         // The Component (BomEntry) at which the selection is to be made.

      WitObjStack <WitCmrCand> myCmrCands_;
         //
         // The ordered list of CmrCands owned by this CmrBomEnt.
         // These CmrCands represent the ConsEntries that can be selected for
         // use from myBomEnt_.

      WitBoolean multiChoice_;
         //
         // TRUE, iff there are at least two directions in which the routing
         // could potentially proceed downward from this CmrBomEnt.

      WitPtrTVec <WitCmrSelPt> myCmrSelPt_;
         //
         // myCmrSelPt_[execPer] is the CmrSelPt for this CmrBomEnt in execPer.
         // Allocated only if multiChoice_ is TRUE.
   };

#endif
@


1.4
log
@Converted several generic classes into class templates.
@
text
@d95 1
a95 1
      accessFunc (const WitPtrTVec (WitCmrSelPt) &, myCmrSelPt)
d150 1
a150 1
      WitPtrTVec (WitCmrSelPt) myCmrSelPt_;
@


1.3
log
@Replaced use of CandIndex with CmrCand in Consumption Multi-Route subsystem.
@
text
@d94 1
a94 1
      accessFunc (const WitObjStack (WitCmrCand) &, myCmrCands)
d139 1
a139 1
      WitObjStack (WitCmrCand) myCmrCands_;
@


1.2
log
@Removed indexes from production multi-route.
Other refactoring.
@
text
@a75 11
      WitBoolean candIsDefault (WitCandIndex theIdx, WitPeriod execPer);
         //
         //
         // Returns TRUE, iff theIdx is the candidate index of the default
         // selection for this CmrBomEnt in execPer.

      WitBoolean candIsEligible (WitCandIndex theIdx, WitPeriod execPer);
         //
         // Returns TRUE, iff candidate #theIdx for this CmrBomEnt is eligible
         // to be selected in execPer.

d81 1
a81 1
      void select (WitConsEntry * theConsEnt, WitPeriod execPer);
d83 3
a85 1
         // Changes the selection in execPer to theConsEnt.
d94 1
a94 1
      accessFunc (const WitPtrVec (WitCmrCand) &,   myCmrCand)
d121 1
a121 1
      void initCandidate ();
d123 1
a123 1
         // Sets up the list of candidates in the derived instance.
d139 1
a139 1
      WitPtrVec (WitCmrCand) myCmrCand_;
d141 3
a143 2
         // The set of CmrCands owned by this CmrBomEnt.
         // myCmrCand_[theIdx]->myIdx_ == theIdx.
@


1.1
log
@Created class SelCand and classes derived from it.
@
text
@a81 4
      WitCandIndex nCandidates ();
         //
         // Returns the # of selection candidates for this CmrBomEnt.

d103 1
a103 1
      accessFunc (const WitPtrVec (WitConsEntry) &, candConsEnt)
d148 1
a148 1
      WitPtrVec (WitConsEntry) candConsEnt_;
d150 2
a151 2
         // candConsEnt_[theIdx] is the ConsEntry eligible to be selected when
         // exploding at myBomEnt_, corresponding to theIdx.
@

