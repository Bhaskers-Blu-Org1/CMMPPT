head	1.7;
access;
symbols
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.3.0.12
	Root-of-EndRw:1.3
	rwToStl:1.3.0.10
	latest_sce_3_10_20010924:1.3.0.8
	sce_3_10_20010924:1.3
	latest_sce_3_00_20010601:1.3.0.6
	sce_3_00_20010601:1.3
	latest_sce_2_31_20010308:1.3.0.4
	sce_2_31_20010308:1.3
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2005.07.07.18.18.11;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2005.07.07.15.19.54;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.07.15.16.24;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.25.15.15.23;	author rwToStl;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.30;	author bobw;	state Exp;
branches
	1.3.10.1;
next	1.2;

1.2
date	2000.03.07.16.57.29;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.35;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.35;	author wit;	state Exp;
branches;
next	;

1.3.10.1
date	2002.11.08.16.11.33;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[exceptions]
@
text
@#ifndef witParseH
#define witParseH

/*------------------------------------------------------------------------------
 *
 *     (c) Copyright IBM Corp. 1993,1994,1996,2000.
 *     (Unpublished)
 *     OCO Source Modules
 *     IBM Confidential
 *
 *------------------------------------------------------------------------------

 *------------------------------------------------------------------------------
 *
 *     Source file:    witParse.h
 *
 *     Definition of class Parser for WIT 4.0 Input Data File Format.
 *     This header is included by witParser.y    
 *
 *------------------------------------------------------------------------------
 */

#include <string>

#include <Util.h>

extern "C" int yyparse();

class WitParser: public WitParlex {
  friend int yyparse();

public:

  // Types
  // The parseState type encodes the state of the yacc parser so that better
  // error messages can be produced, and for use in situations where context-
  // sensitive behavior is required.

  enum PS {
    PS_initial, PS_add, PS_set, PS_read, PS_release, PS_part,	
      PS_operation, PS_bomEntry, PS_subEntry, PS_bopEntry, PS_demand,
      PS_partOperation, PS_nextArg, PS_attr, PS_single, PS_dense, PS_sparse,
      PS_singleParen, PS_denseParen, PS_sparseParen, PS_singleValue,
      PS_denseValue, PS_sparseValue, PS_nextAttr, PS_nextCommand, 
      PS_commandEnd, PS_period, PS_periodColon, PS_nextBound, PS_boundType,
      PS_endBounds, PS_setProblem
  };

  // Operations

  static void parse (WitProblem * theProblem, const char *, FILE *);
     //
     // Creates a unique instance of this class, uses it to parse the input,
     // and then destroys the instance.

  void prtSyntaxError(WitSymTabEntry *entryPtr, PS state, const char * token)
       const;

  void setDataFileName   () const;
  void setDataFileLineNo () const;
     //
     // Wrappers for InputId functions.

  // Accessors
  PS           parseState() const;
  void         setParseState(PS);
  WitEntity    *currentEntity() const;
  WitAttribute *currentAttr() const;

  inline static WitParser * instance ()
     {
     witAssert (instance_ != NULL);

     return instance_;
     }

  WitMsgFacility & myMsgFac () const;

  accessFunc (WitProblem *, myProblem)

private:

  // Constructor and destructor
  WitParser();
  ~WitParser();

  int  parseIt(WitProblem * theProblem, const char*, FILE*);

  WitSymTable  *theSymTable_;   // a collection of symbol table entries
  std::string   currentRule_;     // rule corresponding to the command being parsed
  std::string   previousRule_;    
  WitEntity    *currentEntity_; // the current Wit entity object
  WitAttribute *currentAttr_;   // the current Wit attribute object
  PS           parseState_;     // the state of the parser/lexer

  WitProblem * myProblem_;
     //
     // The Problem for this Parser.

  static       WitParser * instance_;
     //
     // The unique instance of this class, if any.
};

#endif
@


1.6
log
@[exceptions]
@
text
@@


1.5
log
@[exceptions]
@
text
@a88 1
  WitLexer     *theLexer_;      // lexical analyzer (an object of type witLexer)
@


1.4
log
@modications to change rogueWave tools.h++ to STL
@
text
@d89 1
a89 1
  WitLexer     *theLexer;       // lexical analyzer (an object of type witLexer)
d91 2
a92 2
  std::string   currentRule;     // rule corresponding to the command being parsed
  std::string   previousRule;    
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d23 1
a23 1
#include <rw/cstring.h>
d91 2
a92 2
  RWCString    currentRule;     // rule corresponding to the command being parsed
  RWCString    previousRule;    
@


1.3.10.1
log
@Migration from Roguewave tools.h++ to STL
@
text
@d23 1
a23 1
#include <string>
d91 2
a92 2
  std::string   currentRule;     // rule corresponding to the command being parsed
  std::string   previousRule;    
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d25 1
a25 1
#include <typedefs.h>
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
 *     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
