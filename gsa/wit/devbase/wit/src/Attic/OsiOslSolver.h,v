head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2003.05.30.18.19.12;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2003.05.28.22.19.31;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.28.15.10.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Continued implementation of opt with COIN.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef OsiOslSolverH
#define OsiOslSolverH

//------------------------------------------------------------------------------
// Header file: "OsiOslSolver.h"
//
// Contains the declaration of class OsiOslSolver.
//------------------------------------------------------------------------------

#include <OptSolver.h>
#include <Str.h>

//------------------------------------------------------------------------------
// COIN Typedefs.
//------------------------------------------------------------------------------

class OsiOslSolverInterface;

//------------------------------------------------------------------------------
// OSL Typedefs.
//------------------------------------------------------------------------------

typedef struct EKKContext EKKContext;
typedef struct EKKModel   EKKModel;

//------------------------------------------------------------------------------
// class OsiOslSolver
//
// Responsible for solving an OptModel by using OSL, partly through the OSI
// interface.
//
// Class Hierarchy:
//
// ProbAssoc
//    OptSolver
//       OsiOslSolver
//
// Implemented in OsiOslSolverI.h.
//------------------------------------------------------------------------------

class WitOsiOslSolver: public WitOptSolver
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitOsiOslSolver (WitOptModel *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitOsiOslSolver ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void solve ();
         //
         // Override from class OptSolver.

      void createSolverInter ();
         //
         // Creates mySolverInter_.

      void deleteSolverInter ();
         //
         // Deletes mySolverInter_.

      void passFixedModel ();
         //
         // Passes the fixed parts of the optimization model to OSL.

      void markIntVars ();
         //
         // Marks the integer variables as such.

      void passFlexibleModel ();
         //
         // Passes the flexible parts of the optimization model to OSL.

      void passConBounds ();
         //
         // Passes the bounds on each constraint to OSL.

      void passVarBounds ();
         //
         // Passes the bounds on each variable to OSL.

      void passObjCoeffs ();
         //
         // Passes the objective coefficient on each variable to OSL.

      void solveMIP ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // a MIP.

      void solveLpUnAcc ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // an LP in unaccelerated mode.

      void solveLpAcc ();
         //
         // Makes appropriate calls to OSL to solve the optimization problem as
         // an LP in accelerated mode.

      void passInitSoln ();
         //
         // Copies the initial primal optimization solution from myOptModel () 
         // into OSL, as needed.

      void scale ();
         //
         // Calls OSL's scale.

      void preSolve ();
         //
         // Calls OSL's preSolve.

      void crash ();
         //
         // Calls OSL's crash, as needed.

      void primalSimplex ();
         //
         // Calls OSL's primalSimplex.

      void postSolve ();
         //
         // Calls OSL's postSolve.

      void postSolveWithRec (const char * saveFile);
         //
         // Calls OSL's postSolve with recovery for the OSL postSolve bug.

      void storePrimalSoln ();
         //
         // Stores the primal solution in myOptModel ().

      void storeDualSoln ();
         //
         // Stores the dual solution in myOptModel ().

      void printSoln ();
         //
         // Has OSL print its solution.

      void checkProbStat ();
         //
         // Checks the value of OSL's IPROBSTAT variable and generates a
         // fatal error if it is anything but 0 (optimal).

      void checkRetPtr (const void * thePtr, const char * funcName);
         //
         // If thePtr == NULL, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      void checkRetVal (const char * funcName);
         //
         // If retVal_ != 0, issues a Msg indicating an error in a function
         // whose name is given by funcName.

      EKKModel * myOslModel ();
         //
         // Returns the OSL Model for this OsiOslSolver.
         // Requires that mySolverInter_ is not NULL.

      noCopyCtorAssign (WitOsiOslSolver);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      OsiOslSolverInterface * mySolverItf_;
         //
         // The OsiOslSolverInterface owned by this OsiOslSolver, or NULL.

      int retVal_;
         //
         // The integer value returned by some OSL functions, where
         // retVal_ != 0 indicates an error.

      WitString presolveFileName_;
         //
         // The file name to be used by preSolve and postSolve.
   };

#endif
@


1.2
log
@Continued implementation of opt with COIN.
@
text
@@


1.1
log
@Continued implementation of opt with COIN.
@
text
@a22 20

#define USE_COIN 0

//------------------------------------------------------------------------------
// USE_COIN
//
// If USE_COIN == 1, the main implementation of class OsiOslSolver will be
// compiled. The main implementation makes calls to COIN functions. It is
// located in OsiOslSolverI.h.
//
// If USE_COIN == 0, the dummy implementation of class OsiOslSolver will be
// compiled. The dummy implementation makes no calls to COIN functions. It is
// located in OptModel.C.
//
// For now, until we are ready to link WIT to the COIN code an all platforms
// that WIT supports, the CVS repository version of WIT should always have
// USE_COIN == 0.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
d38 2
a39 1
// Responsible for solving an OptModel by using the COIN solvers.
d43 5
a47 2
// OptSolver
//    OsiOslSolver
d194 1
a194 1
      OsiOslSolverInterface * mySolverInter_;
@

