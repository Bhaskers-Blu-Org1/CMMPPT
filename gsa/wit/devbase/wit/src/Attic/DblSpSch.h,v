head	1.9;
access;
symbols
	EndRw-branch:1.8.0.6
	Root-of-EndRw:1.8
	rwToStl:1.8.0.4
	latest_sce_3_10_20010924:1.8.0.2
	sce_3_10_20010924:1.8
	latest_sce_3_00_20010601:1.6.0.4
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6;
locks; strict;
comment	@ * @;


1.9
date	2003.03.03.23.26.42;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2001.08.24.22.03.19;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.20.20.07.03;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.11.16.35.07;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.04.22.27.49;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.03.15.56.49;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.28.22.13.35;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.20.20.08.34;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.23.45.57;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.8
log
@Refactoring for constrained stock reallocation.
@
text
@@


1.7
log
@Converted several generic classes into class templates.
@
text
@a0 197
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef DblSpSchH
#define DblSpSchH

//------------------------------------------------------------------------------
// Header file: "DblSpSch.h"
//
// Contains the declaration of the following classes:
//
//    AbsDblSpSched
//    DblSpSched (TheType)
//------------------------------------------------------------------------------

#include <Schedule.h>

//------------------------------------------------------------------------------
// Class AbsDblSpSched
//
// "Abstract Double Sparse Schedule"
// Functions as the typeless base class for generic class DblSpSched (TheType).
// Responsible for all behavior of generic class DblSpSched (TheType) that's
// independent of TheType.
//
// Class Hierarchy:
//
// AbsDblSpSched
//    DblSpSched (TheType)
//------------------------------------------------------------------------------

class WitAbsDblSpSched: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      void clear ();
         //
         // Sets all cells of this AbsDblSpSched to 0.

      void saveAndClear ();
         //
         // Saves the values stored in the cells of this AbsDblSpSched for 
         // later restoring, and clears this AbsDblSpSched.

      void restore ();
         //
         // Restores the values in the cells of this AbsDblSpSched to their
         // value from the last save.

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsDblSpSched (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAbsDblSpSched ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void setCellAbs (double & theCell, double theValue);
         //
         // Sets theCell to theValue.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAbsDblSpSched);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <double> & nonZeroCells_;
         //
         // A list of all the cells in the AbsDblSpSched that have been set
         // since the last time it was cleared.

      WitPairStack <double, double> & savedCells_;
         //
         // A list of all the pairs (cell, value) such that cell == value > 0 at
         // the time of the last save, if any, otherwise empty.
   };

//------------------------------------------------------------------------------
// Generic class DblSpSched (TheType)
//
// "Double Sparse Schedule"
// A mapping from pairs (TheType, Period) to {doubles}.
// Several of its functions run in time linear in the number of non-zeros that
// the instance contains.
//
// Class Hierarchy:
//
// AbsDblSpSched
//    DblSpSched (TheType)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitDblSpScheddeclare(TheType)                                          \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitDblSpSched (TheType): public WitAbsDblSpSched                         \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitDblSpSched (TheType) (WitProblem *);                                  \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitDblSpSched (TheType) ();                                             \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void allocate1D ();                                                      \
         /*                                                                  */\
         /* Allocates the first dimension of the underlying 2-d array.       */\
                                                                               \
      void allocateRow (TheType * theObject);                                  \
         /*                                                                  */\
         /* Allocates the row vector for theObject.                          */\
                                                                               \
      void setCell (TheType * theObject, WitPeriod thePer, double theValue);   \
         /*                                                                  */\
         /* Sets mySched_ (theObject, thePer) to theValue.                   */\
                                                                               \
      void incCell (TheType * theObject, WitPeriod thePer, double theValue);   \
         /*                                                                  */\
         /* mySched_ (theObject, thePer) += theValue.                        */\
                                                                               \
      inline double operator () (TheType * theObject, WitPeriod thePer)        \
         {                                                                     \
         return mySched_ (theObject, thePer);                                  \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other private member functions.                                     */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitDblSpSched (TheType));                              \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitSchedule (TheType, double) mySched_;                                  \
         /*                                                                  */\
         /* Stores the data for this DblSpSched.                             */\
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare (WitDblSpSched, WitConsEntry)
declare (WitDblSpSched, WitBopEntry)

#endif
@


1.6
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d98 1
a98 1
      WitObjStack (double) & nonZeroCells_;
d103 1
a103 1
      WitPairStack (double, double) & savedCells_;
@


1.5
log
@Coarse selection splitting.
@
text
@d38 1
a38 1
class WitAbsDblSpSched: public WitUtil
d70 1
a70 3
      WitAbsDblSpSched (WitProblem * theProblem);
         //
         // nonZeroCells_ <<< theProblem.
a85 8
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      WitProblem * myProblem ();
         //
         // Returns the Problem associated with this AbsDblSpSched.

d105 2
a106 3
         // If save has been performed more recently than a restore, savedCells_
         // is a list of all the pairs (cell, value) such that cell == value > 0
         // at the time of the save; otherwise empty.
d139 1
a139 3
      WitDblSpSched (TheType) (WitProblem * theProblem);                       \
         /*                                                                  */\
         /* AbsDblSpSched <<< theProblem                                     */\
d151 5
a155 1
      void allocate (TheType * theObject);                                     \
d157 1
a157 1
         /* Allocates the vector for theObject.                              */\
@


1.4
log
@Fixed some bugs in coarse selection splitting.
@
text
@d203 2
a204 1
declare (WitDblSpSched, WitBillEntry)
@


1.3
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d50 1
a50 1
      void save ();
d58 1
a58 6
         // value from the last save, unless a restore or unsave has been done
         // since then; otherwise clears this AbsDblSpSched.

      void unsave ();
         //
         // Discards the saved cell values for this AbsDblSpSched, if any.
@


1.2
log
@Further development of coarse selection splitting.
@
text
@d204 2
a205 2
// Declarations of all specific cases of the generic classes and functions
// declared in this file.
d208 1
a208 1
declare (WitDblSpSched, WitBomEntry)
@


1.1
log
@Futher development of selection splitting.
@
text
@d27 1
a27 1
// An abstract sparse schedule of doubles.
d128 2
a129 1
// A Mapping from pairs (TheType, Period) to {doubles}.
@

