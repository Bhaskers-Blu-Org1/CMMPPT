head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2005.02.03.21.20.29;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2005.02.02.17.26.53;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.01.22.39.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.31.23.59.30;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@pegged Critical List.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PclMgrH
#define PclMgrH

//------------------------------------------------------------------------------
// Header file: "PclMgr.h"
//
// Contains the declaration of class PclMgr.
//------------------------------------------------------------------------------

#include <Assoc.h>
#include <ObjStack.h>

//------------------------------------------------------------------------------
// Class PclMgr
//
// "Pegged Critical List Manager"
// Responsible for owning and maintaining the pegged critical list.
//
// Class Hierarchy:
//
// ProbAssoc
//    PclMgr
//------------------------------------------------------------------------------

class WitPclMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPclMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPclMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void initSoln ();
         //
         // Clears the pegged critical list.

      void preIncAlloc (WitDemand * theDemand, WitPeriod shipPer);
         //
         // Takes action appropriate at the beginning of HeurAtor::inc (), for
         // the arguments.

      void recFundShortage (WitPart * thePart, WitPeriod thePer);
         //
         // Records a fundamental shortage of thePart in thePer.

      void recRestShortage ();
         //
         // Records the occurrance of a restriction shortage (from pen-exec).

      void postCmqs ();
         //
         // Takes action appropriate at the conclusion of
         // HeurAtor::commitMaxQtySel ().

      void getPgdCritList (WitObjStack <WitPclEl> & thePgdCritList);
         //
         // Sets thePgdCritList to be a copy of the pegged critical list.

      void print ();
         //
         // Prints the pegged critical list.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPclMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitObjStack <WitPclEl> revPgdCritList_;
         //
         // The pegged critical list owned by this PclMgr, stored in reverse
         // order.

      WitDemand * curDemand_;
         //
         // The Demand that the HeurAtor is currently working on.

      WitPeriod curShipPer_;
         //
         // The shipment period that the HeurAtor is currently working on.

      WitPart * shortPart_;
         //
         // The most recent short Part, if any; otherwise NULL.

      WitPeriod shortPer_;
         //
         // The most recent short period, if any; otherwise -1.
   };

#endif
@


1.3
log
@Pegged Critical List
@
text
@@


1.2
log
@Pegged critical list.
@
text
@d67 1
a67 1
      void recNonFundShortage ();
d69 1
a69 1
         // Records the occurrance of a non-fundamental shortage.
@


1.1
log
@Pegged Critical List.
@
text
@d63 1
a63 1
      void setBlockPt (WitPart * thePart, WitPeriod thePer);
d65 5
a69 1
         // Sets blockPart_ and blockPer_.
d109 1
a109 1
      WitPart * blockPart_;
d111 1
a111 1
         // The most recent blocking Part, if any; otherwise NULL.
d113 1
a113 1
      WitPeriod blockPer_;
d115 1
a115 1
         // The most recent blocking period, if any; otherwise -1.
@

