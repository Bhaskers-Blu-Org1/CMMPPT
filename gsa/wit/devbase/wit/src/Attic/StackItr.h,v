head	1.7;
access;
symbols
	EndRw-branch:1.6.0.10
	Root-of-EndRw:1.6
	rwToStl:1.6.0.8
	latest_sce_3_10_20010924:1.6.0.6
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.6.0.4
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.6.0.2
	sce_2_31_20010308:1.6;
locks; strict;
comment	@ * @;


1.7
date	2003.03.03.23.27.06;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2001.01.11.16.35.12;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.03.15.56.50;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.28.22.13.40;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.22.16.18.28;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.13.19.57.27;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.05.19.05.32;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.6
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@@


1.5
log
@Fixed some bugs in coarse selection splitting.
@
text
@a0 186
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StackItrH
#define StackItrH

//------------------------------------------------------------------------------
// Header file: "StackItr.h"
//
// Contains the declaration of the following classes:
//
//    AbsPairStackItr       (ValType)
//    PairStackItr (ObjType, ValType)
//------------------------------------------------------------------------------

#include <PairSt.h>

//------------------------------------------------------------------------------
// Generic class AbsPairStackItr (ValType)
//
// Responsible for iterating through the elements of an AbsPairStack (ValType).
//
// Class Hierarchy:
//
//    AbsPairStackItr          (ValType)
//       PairStackItr (ObjType, ValType)
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitAbsPairStackItrdeclare(ValType)                                     \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitAbsPairStackItr (ValType): public WitUtil                             \
   {                                                                           \
   protected:                                                                  \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitAbsPairStackItr (ValType) ();                                         \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitAbsPairStackItr (ValType) ();                                        \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other protected member functions.                                   */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void attachToAbs (const WitAbsPairStack (ValType) & theAbsPairStack);    \
         /*                                                                  */\
         /* Puts this AbsPairStackItr into its initial state for iterating   */\
         /* through theAbsPairStack.                                         */\
                                                                               \
      WitBoolean advanceAbs (WitTl * & theTlObj, ValType & theVal);            \
         /*                                                                  */\
         /* If this AbsPairStackItr is in its initial state, this            */\
         /* function advances it to the first element of the AbsPairStack;   */\
         /* otherwise it advances it to the next element.                    */\
         /* Returns TRUE, iff this AbsPairStackItr is still associated with  */\
         /* s valid element after the advance.                               */\
         /* Sets theTlObj and theVal, if the advance is successful.          */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitAbsPairStackItr (ValType));                         \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      const WitPairLink (ValType) * firstPairLink_;                            \
         /*                                                                  */\
         /* The first PairLink of the AbsPairStack to be iterated by this    */\
         /* AbsPairStackItr. NULL indicates that the AbsPairStack is empty.  */\
                                                                               \
      const WitPairLink (ValType) * curPairLink_;                              \
         /*                                                                  */\
         /* The PairLink currently associated with this AbsPairStackItr,     */\
         /* or NULL, if this AbsPairStackItr is in its initial state.        */\
   };                                                                          \

//------------------------------------------------------------------------------
// Generic class PairStackItr (ObjType, ValType)
//
// Responsible for iterating through the elements of a 
// PairStack (ObjType, ValueType).
//
// Class Hierarchy:
//
//    AbsPairStackItr          (ValType)
//       PairStackItr (ObjType, ValType)
//
// All implementation is inline, by casting and calling AbsPairStackItr
// functions.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitPairStackItrdeclare2(ObjType, ValType)                              \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairStackItr (ObjType, ValType): public WitAbsPairStackItr (ValType)  \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline WitPairStackItr (ObjType, ValType) ():                            \
            WitAbsPairStackItr (ValType) ()                                    \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline ~WitPairStackItr (ObjType, ValType) ()                            \
         {                                                                     \
         }                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline void attachTo (                                                   \
            const WitPairStack (ObjType, ValType) & thePairStack)              \
         {                                                                     \
         attachToAbs (thePairStack);                                           \
         }                                                                     \
                                                                               \
      inline WitBoolean advance (ObjType * & theObject, ValType & theVal)      \
         {                                                                     \
         return advanceAbs ((WitTl * &) theObject, theVal);                    \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPairStackItr (ObjType, ValType));                   \
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare  (WitAbsPairStackItr,            double)
declare  (WitAbsPairStackItr,            WitPeriod)

declare2 (WitPairStackItr, double,       double)
declare2 (WitPairStackItr, WitBopEntry,  double)
declare2 (WitPairStackItr, WitConsEntry, double)

declare2 (WitPairStackItr, WitDemand,    WitPeriod)
declare2 (WitPairStackItr, WitBopEntry,  WitPeriod)
declare2 (WitPairStackItr, WitConsEntry, WitPeriod)

#endif
@


1.4
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d178 1
@


1.3
log
@Further development of coarse selection splitting.
@
text
@d175 1
d177 3
@


1.2
log
@Further development of selection splitting for multi-route on substitutes.
@
text
@d18 1
a18 1
//    StackItr
d22 1
a22 1
#include <Stack.h>
d25 1
a25 1
// Class StackItr
d27 1
a27 1
// Responsible for iterating through the elements of an Stack.
d31 8
a38 2
// StackItr
//    PairStackItr (ObjType, ValType)
d41 60
a100 61
class WitStackItr: public WitUtil
   {
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitStackItr ();

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitStackItr ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void attachToAbs (const WitStack & theStack);
         //
         // Puts this StackItr into its initial state for iterating through
         // theStack.
                        
      WitBoolean advanceAbs ();
         //
         // If this StackItr is in its initial state, this 
         // function advances it to the first element of the stack;
         // otherwise it advances it to the next element.
         // Returns TRUE, iff this StackItr is still associated with a 
         // valid element after the advance.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitLink *, curLink)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitStackItr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitLink * firstLink_;
         //
         // The first link of the Stack to be iterated by this StackItr. 
         // NULL indicates that the Stack is empty.

      const WitLink * curLink_;
         //
         // The Link currently associated with this StackItr, 
         // or NULL if this StackItr is in its initial state.
   };
d110 5
a114 2
// StackItr
//    PairStackItr (ObjType, ValType)
d125 1
a125 1
class WitPairStackItr (ObjType, ValType): public WitStackItr                   \
d133 4
a136 1
      WitPairStackItr (ObjType, ValType) ();                                   \
d142 3
a144 1
      ~WitPairStackItr (ObjType, ValType) ();                                  \
d150 5
a154 3
      void attachTo (const WitPairStack (ObjType, ValType) &);                 \
         /*                                                                  */\
         /* See StackItr::attachToAbs                                        */\
d156 4
a159 4
      WitBoolean advance (ObjType * & theObject, ValType & theVal);            \
         /*                                                                  */\
         /* See StackItr::advanceAbs.                                        */\
         /* Sets theObject and theVal, if the advance is successful.         */\
a167 5
                                                                               \
      inline const WitPairLink (ValType) * curPairLink ()                      \
         {                                                                     \
         return (WitPairLink (ValType) *) curLink ();                          \
         }                                                                     \
d174 2
@


1.1
log
@Some minor modifications.
@
text
@d72 1
a72 1
      accessFunc (const WitStackLink *, curStackLink)
d86 1
a86 1
      const WitStackLink * firstStackLink_;
d91 1
a91 1
      const WitStackLink * curStackLink_;
d93 1
a93 1
         // The StackLink currently associated with this StackItr, 
d154 1
a154 1
      inline const WitPairStackLink (ValType) * curPairStackLink ()            \
d156 1
a156 1
         return (WitPairStackLink (ValType) *) curStackLink ();                \
@

