head	1.6;
access;
symbols
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4;
locks; strict;
comment	@ * @;


1.6
date	2005.03.28.20.14.36;	author rjw;	state dead;
branches;
next	1.5;

1.5
date	2005.03.24.18.42.04;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.12.20.47.43;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.11.18.37.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.09.22.44.05;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.26.15.38.57;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Revised mappingIndex code.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MapIdxH
#define MapIdxH

//------------------------------------------------------------------------------
// Header file: "MapIdx.h"
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Global function template mappingIndex.
//
// Returns theDomEl->mappingIndex (), which is to be used as an index for
// mapping from instances of class DomEl into some range set.
// Implemented in MapIdxI.h.
//
// Note: This function template needs to be global (rather than being a class
// member or belonging to an explicit namespace) in order to compile on Windows.
//------------------------------------------------------------------------------

#if 0

template <typename DomEl>
      inline int mappingIndex (const DomEl * theDomEl);

#endif

#endif
@


1.5
log
@Revised mappingIndex code.
@
text
@@


1.4
log
@An attempt to fix a syntax error in Windows.
@
text
@d28 2
d34 2
@


1.3
log
@Continued implementation of PIP.
@
text
@d18 8
a25 1
// NonClass function template mappingIndex.
a27 3
namespace WitNonClass
{

a29 7
   //
   // Returns theDomEl->mappingIndex (), which is to be used as an index for
   // mapping from instances of class DomEl into some range set.
   // Implemented in MapIdxI.h.

// Leaving namespace NonClass.
}
@


1.2
log
@Continued implementation of PIP.
@
text
@d22 11
a32 8
   {
   template <typename DomEl>
         inline int mappingIndex (const DomEl * theDomEl);
      //
      // Returns theDomEl->mappingIndex (), which is to be used as an index for
      // mapping from instances of class DomEl into some range set.
      // Implemented in MapIdxI.h.
   }
@


1.1
log
@Continued implementation of post-implosion pegging.
@
text
@d18 1
a18 1
// Global function template mappingIndex.
d21 9
a29 6
template <typename DomEl>
      inline int mappingIndex (const DomEl * theDomEl);
   //
   // Returns theDomEl->mappingIndex (), which is to be used as an index for
   // mapping from instances of class DomEl into some range set.
   // Implemented in MapIdxI.h.
@

