head	1.30;
access;
symbols;
locks; strict;
comment	@ * @;


1.30
date	2002.04.11.15.36.33;	author rjw;	state dead;
branches;
next	1.29;

1.29
date	2002.04.09.16.05.54;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2002.04.08.17.28.23;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2002.04.05.20.43.59;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2002.04.04.18.14.50;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2002.04.03.16.34.57;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2002.03.29.23.47.12;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.27.17.18.33;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.15.23.17.32;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.14.20.04.04;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2002.03.14.15.05.49;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.13.19.27.21;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.12.21.58.18;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.12.18.01.09;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.08.21.18.00;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.07.23.24.31;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2002.02.28.23.21.51;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.28.00.08.13;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.26.15.17.19;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.20.22.28.08;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.09.00.43.50;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.07.21.01.02;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.07.16.57.30;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.22.21.45.15;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.21.21.55.17;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.19.01.49.06;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.16.21.53.02;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.14.23.56.09;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.11.19.17.29;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.10.22.06.59;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Continued implementation of sel-split for pen-exec.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SsPeMgr1H
#define SsPeMgr1H

//------------------------------------------------------------------------------
// Header file: "SsPeMgr1.h"
//
// Contains the declaration of class SsPeMgr.
//------------------------------------------------------------------------------

#include <ObjStack.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class SsPeMgr
//
// Performs selection splitting for penalized execution.
//------------------------------------------------------------------------------

class WitSsPeMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSsPeMgr (WitSelector *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSsPeMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void commitMaxQty (double & netQty);
         //
         // Commits the heuristically maximum possible quantity of topPart_ 
         // in topPer_.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      WitBoolean splitCommitNeeded ();
         //
         // Returns TRUE, iff a split-commit needs to be performed.

      void splitCommit (WitBoolean & unresFound);
         //
         // Does a split-commit for SSPE.
         // On return:
         //    unresFound is TRUE, iff an unresolveable shortage was found.

      void buildZeroPts (WitBoolean & unresFound, WitBoolean & splitFound);
         //
         // Builds up the zeroPts_ set.
         // On return:
         //    unresFound is TRUE, iff an unresolveable shortage was found.
         //    splitFound is TRUE, iff an opportunity to split selections was
         //       found.

      WitBoolean addChgPtsToZeroPts ();
         //
         // Adds the SplitPts corresponding to the current hypothetical
         // modification and alteration points to zeroPts_.
         // Returns TRUE, iff at least one SplitPt was added.

      void splitSels ();
         //
         // Finds the lowest zero pt at which to split the selections and does
         // so there.

      WitSplitPt * findLowestZeroPt ();
         //
         // Finds and returns the lowest element of zeroPts_.

      double findSplitBound (WitSplitPt * searchPt, double theFlowVol);
         //
         // Computes and returns the split bound for searchPt, given
         // theFlowVol.

      double binarySearch (WitSplitPt * searchPt, double theFlowVol);
         //
         // Computes and returns the split bound for searchPt, given
         // theFlowVol, using a binary search.

      void splitChgPts (WitSplitPt * searchPt, double splitBound);
         //
         // Splits the selections at each current mod point/alt point based on
         // the flow resulting from doing a temp-commit, applying splitBound at
         // searchPt.

      void compChgPtFlowVols ();
         //
         // Sets totFlowVol_ for each change point.

      WitBoolean tempCommForSearch (WitSplitPt * searchPt, double searchVol);
         //
         // Does a temp-commit if 1 unit of top level vol, discarding all flow
         // thru the zero points and discarding all flow above searchVol thru
         // theSplitPt.

      WitBoolean tempCommDiscZeroPts ();
         //
         // Does a temp-commit if 1 unit of top level vol, discarding all flow
         // thru the zero points.

      void findChgSplitPts (WitObjStack <WitSplitPt> & chgSplitPts);
         //
         // Sets chgSplitPts to be the set of SplitPts corresponding to the
         // modifications that would result if (hypothetically) ps-sup were
         // updated, creating them, if necessary.

      void findHypoChanges (WitObjStack <WitSelPt> & chgSelPts);
         //
         // Sets chgSelPts to be the set of modifications and alterations that
         // would result if (hypothetically) the following updates performed, 
         // based on the most recent failing temp-commit:
         // * Update ps-sup.
         // * Discard the current selection at the current resolving alteration
         //   (if any).

      void clearSplitItr ();
         //
         // Clears data associated with one iteration of the splitCommit loop.

      WitBoolean resAltOrRest ();
         //
         // Returns TRUE, iff the most recent failing temp-commit generated
         // either a resolving alteration or a restriction shortage.

      noCopyCtorAssign (WitSsPeMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitSelector * const mySelector_;
         //
         // The Selector associated with this SsPeMgr.

      WitSplitter * const mySplitter_;
         //
         // The Splitter associated with this SsPeMgr.

      WitExpRest * const myExpRest_;
         //
         // The ExpRest associated with this SsPeMgr.

      WitRtAnalyzer * const myRtAnalyzer_;
         //
         // The RtAnalyzer associated with this SsPeMgr.

      WitObjStack <WitSplitPt> zeroPts_;
         //
         // The set of SplitPts that are to discard all flow.

      int nBSsDone_;
      int nBSsSkipped_;
         //
         // # binary searches done and skipped, respectively.

      int nBatches_;
         //
         // # split batches.
   };

#endif
@


1.29
log
@Continued implementation of sel-split for pen-exec,
@
text
@@


1.28
log
@Continued implementation of sel-split for pen-exec.
@
text
@d104 1
a104 1
         // Splits the selections at each current mod point alt point based on
d108 4
d178 1
a178 1
      int nSplitCPs_;
d180 1
a180 1
         // Calls to nSplitChPts.
@


1.27
log
@Continued implementation of sel-split for pen-exec.
@
text
@a52 32
      void preCommit ();
         //
         // Performs the actions to be taken for SSPE at the beginning of a
         // commit.

      void recCommitItr (WitPart * thePart);
         //
         // Records the fact that an iteration of the commit loop for thePart is
         // about to begin.
         // Valid only in fastMode.

      WitBoolean skipCommitItr (WitPart * thePart);
         //
         // Returns TRUE, iff an iteration of the commit loop for thePart should
         // be skipped.
         // Valid only in fastMode.

      void startSplitExp (WitSplitPt * theSplitPt, double toSplitVol);
         // 
         // Initiates a split explosion at theSplitPt.

      WitBoolean restoreNeeded ();
         //
         // Returns TRUE, iff the HeurAtor should restore its state at the end
         // of a commit.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBoolean, fastMode)

a142 12
      void restoreNetSplitsToSP ();
         //
         // Restores nettedSplitPts_ to the state it was in at the beginning of
         // the searchPart_'s iteration in the loop in HeurAtor::innerCommit.
         // Valid only in fastMode.

      void restoreHeurToSP ();
         //
         // Restores the HeurAtor to the state it was in at the beginning of
         // the searchPart_'s iteration in the loop in HeurAtor::innerCommit.
         // Valid only in fastMode.

a168 4
      int nTCsSkipped_;
         //
         // # temp-commits skipped.

d174 1
a174 36
      WitBoolean fastMode_;
         //
         // TRUE, iff the special code to increase speed is to be used.

      //------------------------------------------------------------------------
      // The remaining data members are valid only in fast mode.
      //------------------------------------------------------------------------

      WitObjStack <WitSplitPt> nettedSplitPts_;
         //
         // The set of SplitPts owned by this Splitter whose net split list is
         // no longer the same as its split list.

      WitPart * searchPart_;
         //
         // The fill Part corresponding to the search point, during
         // findSplitBound; otherwise NULL.

      WitBoolean firstTCActive_;
         //
         // TRUE, iff the tempCommForSearch at the beginning of findSplitBound
         // is currently in progress.

      WitBoolean binSearchActive_;
         //
         // TRUE, iff the binary search in findSplitBound is currently in
         // progress.

      int nDblsAtSP_;
      int nPersAtSP_;
      int nNettedAtSP_;
         //
         // During findSplitBound, nDblsAtSP_ stores the value of 
         // HeurAtor::myDblArch_->nSavedVals () at the beginning of
         // searchPart_'s iteration in the loop in HeurAtor::innerCommit during
         // the initial call to tempCommForSearch.
d176 1
a176 2
         // nPersAtSP_   is similar, but for myPerArch_.
         // nNettedAtSP_ is similar, but for nettedSplitPts_.nElements ().
@


1.26
log
@Continued implemenation of sel-split fpr pen-exec.
@
text
@d53 32
d129 5
d175 12
d221 40
@


1.25
log
@Continued implementation of sel-split for pen-exec.
@
text
@d167 5
@


1.24
log
@Continued implementation of sel-split for pen-exec.
@
text
@d163 4
@


1.23
log
@Continued implementation of sel-split for pen-exec.
@
text
@d129 1
a129 1
      void delEmptySplitPts ();
d131 1
a131 1
         // Deletes all SplitPts that have an empty splitList.
@


1.22
log
@Continued implementation of sel-split for pen-exec.
@
text
@d133 5
@


1.21
log
@Continued implementation of sel-split for pen-exec,
@
text
@d77 1
a77 1
      WitBoolean addModPtsToZeroPts ();
d80 1
a80 1
         // modification points to zeroPts_.
d97 1
a97 1
      void splitModPts (WitSplitPt * searchPt, double splitBound);
d99 2
a100 2
         // Splits the selections at each current mod point based on the flow
         // resulting from doing a temp-commit, applying splitBound at
d114 1
a114 1
      void findModSplitPts (WitObjStack <WitSplitPt> & modSplitPts);
d116 1
a116 1
         // Sets modSplitPts to be the set of SplitPts corresponding to the
d120 1
a120 1
      void findHypoMods (WitObjStack <WitSelPt> & modSelPts);
d122 3
a124 3
         // Sets modSelPts to be the set of modifications that would result if
         // (hypothetically) the following updates performed, based on the most
         // recent failing temp-commit:
@


1.20
log
@Continued implementation of sel-split for pen-exec.
@
text
@a52 7
      void mergeSplitBopEnts (
            WitPart *        thePart,
            WitPeriod        expPer,
            WitBopEntStack & expBopEnts);
         //
         // Merges the split BopEntries at thePart in expPer into expBopEnts.

@


1.19
log
@Continued implementation of sel-split for pen-exec.
@
text
@a89 5
      void addToZeroPts (WitSelPt * theSelPt, WitBoolean & addedZeroPts);
         //
         // Adds theSelPt's SplitPt to zeroPts_, if appropriate and updates
         // addedZeroPts accordingly.

d127 1
a127 9
      void addToModSplitPts (
            WitSelPt *                 theSelPt,
            WitObjStack <WitSplitPt> & modSplitPts);
         //
         // Adds theSelPt's SplitPt to modSplitPts.

      void findHypoMods (
            WitBopEntPerStack &  modBopEntPers,
            WitConsEntPerStack & modConsEntPers);
d129 1
a129 1
         // Sets the args to be the set of modifications that would result if
@


1.18
log
@Continued implemenation of sel-split for pen-exec.
@
text
@d90 5
d132 13
a144 5
      void findHypoMods (WitBopEntPerStack & modBopEntPers);
         //
         // Sets modBopEntPers to be the set of BopEnt modifications that would
         // result if (hypothetically) the following updates performed, based on
         // the most recent failing temp-commit:
@


1.17
log
@Continued implementation of sel-split for pen-exec.
@
text
@d70 1
a70 1
      void splitCommit ();
d73 2
d76 1
a76 1
      void splitItr ();
d78 5
a82 1
         // Does one iteration of split-commit for SSPE.
@


1.16
log
@Continued implementation of sel-split for pen-exec.
@
text
@d84 1
a84 1
      void splitatLowest ();
a91 5

      void splitSels (WitSplitPt * searchPt);
         //
         // Splits the selections based on doing an EBS on the splitBound at
         // searchPt.
@


1.15
log
@Continued implementation of sel-split fpr pen-exec.
@
text
@d78 1
a78 1
      WitSelPt * findTopModSelPt ();
d80 12
a91 2
         // Finds and returns the SplitPt corresponding to the highest current
         // hypothetical modification point, if any, else NULL.
@


1.14
log
@Continued implementation of sel-split for pen-exec.
@
text
@d53 7
d119 5
a123 2
         // result if (hypothetically) ps-sup were updated based on the most
         // recent failing temp-comp.
@


1.13
log
@Continued implementation of sel-split for pen-exec.
@
text
@d69 1
a69 1
         // ...
d74 1
a74 1
         // hypothetical modification point.
d78 2
a79 5
         // ...

      void splitModPts (WitSplitPt * searchPt, double splitBound);
         //
         // ...
d86 6
a107 4

      WitBoolean isInZeroPts (WitBopEntry * theBopEnt, WitPeriod thePer);
         //
         // Returns TRUE, iff the arguments correspond to a SplitPt in zeroPts_.
@


1.12
log
@Continued implementation of sel-split for pen-exec.
@
text
@d67 1
a67 1
      void addToZeroPts ();
d76 1
a76 1
      void splitSels ();
d80 1
a80 1
      void splitSel (WitSplitPt * theSplitPt, WitPartPerStack & cumExhPts);
d84 1
a84 1
      double findSplitBound (WitSplitPt * theSplitPt, double theFlowVol);
d86 1
a86 1
         // Computes and returns the split bound for theSplitPt, given
a88 6
      void splitUnsearchedPts (const WitPartPerStack & cumExhPts);
         //
         // Splits all SplitPts other than those searched on corresponding to
         // the mod points that would result from exhausting pseudo supply at 
         // cumExhPts.

d95 1
a95 1
      WitBoolean tempCommDiscZeroPts (WitSplitPt * exceptPt);
d98 1
a98 1
         // thru the zero points, except exceptPt.
d100 1
a100 3
      void findModSplitPts (
            WitObjStack <WitSplitPt> & modSplitPts,
            const WitPartPerStack &    cumExhPts);
d104 1
a104 1
         // updated based on cumExhPts, creating them, if necessary.
a114 7

      void findHypoMods (
            WitBopEntPerStack &     modBopEntPers,
            const WitPartPerStack & theExhPts);
         //
         // Sets modBopEntPers to be the set of BopEnt modifications that would
         // result if (hypothetically) ps-sup were updated based on theExhPts.
@


1.11
log
@Continued implementation of sel-split for pen-exec.
@
text
@d67 1
a67 1
      WitBoolean splitItr ();
d69 1
a69 2
         // Does one iteration of split-commit.
         // Returns TRUE, iff another iteration is needed.
@


1.10
log
@Fixed a subtle bug in sel-split for stock reallocation.
Continued implementation of sel-split for pen-exec.
@
text
@d59 5
a63 1
      WitBoolean splitCommit ();
a65 1
         // Returns TRUE, iff the split was (nominally) successful.
d67 11
a77 4
      void splitItr (
            WitBoolean & tempCommOK, 
            WitBoolean & progress,
            WitBoolean & splitFound);
d79 1
a79 6
         // Does splitItr for SSPE.
         // On return:
         //    tempCommOK is TRUE, iff the initial temp-commit was successful.
         //    progress   is TRUE, iff a pure restriction shortage or
         //                            a resolving alteration was found.
         //    splitFound is TRUE, iff a SelPt for splitting was found.
d81 1
a81 4
      void findSelPtToSplit (
            WitSelPt * & theSelPt, 
            double &     flowGap, 
            WitBoolean & splitFound);
d83 1
a83 2
         // Sets theSelPt to the SelPt at which sel-split is to be performed,
         // if any, else NULL.
d85 1
a85 1
      WitSelPt * findRestSelPtToSplit ();
d87 2
a88 3
         // Finds and returns the SelPt at which sel-split is to be performed,
         // if any, else returns NULL.
         // Valid only for a restriction shortage.
d90 1
a90 1
      void splitSelection (WitSelPt * theSelPt, double theFlowVol);
d92 3
a94 2
         // Attempts to split the selection at theSelPt.
         // theFlowVol is the flowVol thru theSelPt on the temp-commit-1.
d96 1
a96 1
      void splitMultiSels (WitSplitPt * initSplitPt, double theFlowVol);
d98 3
a100 2
         // Splits the selection at multiple SplitPts as appropriate for a
         // needed split at initSplitPt, given theFlowVol.
d102 8
a109 1
      void findModSplitPts (WitObjStack <WitSplitPt> & modSplitPts);
d113 1
a113 2
         // updated based on the most recent failing temp-comp, creating them,
         // if necessary.
d115 1
a115 1
      double findSplitBound (WitSplitPt * theSplitPt, double theFlowVol);
d117 1
a117 2
         // Computes and returns the split bound for theSplitPt, given
         // theFlowVol.
d125 3
a127 1
      WitBoolean tempCommForSearch (WitSplitPt * theSplitPt, double searchVol);
d129 2
a130 2
         // Does a temp-commit if 1 unit of top level vol for splitting the
         // selection at this SplitPt, applying searchVol.
d132 1
a132 1
      void purgeSplitPts ();
a134 8

      void addToZeroPts (WitSplitPt * theSplitPt);
         //
         // Adds theSplitPt to zeroPts_.

      void clearZeroPts ();
         //
         // Restores all SplitPts in zeroPts to their normal state.
@


1.9
log
@Continued development of sel-split for pen-exec.
@
text
@d95 1
a95 1
      void splitSel1 (WitSplitPt * theSplitPt, double theFlowVol);
d97 9
a105 1
         // ...
d112 6
d122 4
@


1.8
log
@Continued implementation of sel-split for pen-exec.
@
text
@a83 5
      void checkMixedSplit (WitSelPt * theSelPt);
         //
         // Checks for mixed alteration and modification split points.
         // theSelPt is the SelPt at which alteration is to be performed.

a137 5

      WitBoolean altSplit_;
         //
         // TRUE, iff the current splitting is for an alteration and not a
         // modification.
@


1.7
log
@Continued implementation of sel-split for pen-exec.
@
text
@d19 1
a52 5
      void postTempCommit (WitBoolean & success);
         //
         // Updates the value of success, if appropriate just after a
         // temp-commit.

d100 4
d114 8
d130 1
a130 1
         // The Selector assoicated with this SsPeMgr.
d134 1
a134 1
         // The Splitter assoicated with this SsPeMgr.
d138 1
a138 1
         // The ExpRest assoicated with this SsPeMgr.
d142 1
a142 6
         // The RtAnalyzer assoicated with this SsPeMgr.

      WitSplitPt * searchSplitPt_;
         //
         // During tempCommForSearch, searchSplitPt_ is the Split point
         // currently being searched; otherwise NULL.
d148 4
@


1.6
log
@Continued implementation of pen-exec for sel-split.
@
text
@d88 5
@


1.5
log
@Implemented alteration in sel-split for pen-exec.
@
text
@d70 1
a70 1
            WitBoolean & prsFound,
d76 2
a77 1
         //    prsFound   is TRUE, iff a pure restriction shortage was found.
@


1.4
log
@Continued implementation of Sel-Split for Pen-Exec.
@
text
@d47 1
a47 1
      void doSSPE (WitBoolean & finished);
d49 2
a50 3
         // Performs selection splitting for penalized execution.
         // On return, the commitMaxQty loop can be immediately terminated, iff
         // finished is TRUE.
d63 1
a63 1
      void splitCommit ();
d66 1
d79 9
a87 1
      WitSelPt * findSelPtToSplit (WitBoolean & prsFound, double & flowGap);
d91 1
a91 2
         // On return, prsFound is TRUE, iff a pure restriction shortage was
         // found.
d134 5
@


1.3
log
@Continued implementation of sel-split for pen-exec.
@
text
@d68 4
a71 1
      void splitItr1 (WitBoolean & splitFound);
d73 1
a73 1
         // Does splitItr for SSPE, for first call.
d75 2
d79 1
a79 7
      void splitItr2 (WitBoolean & tempCommOK);
         //
         // Does splitItr for SSPE, for subsequent calls.
         // On return:
         //    tempCommOK is TRUE, iff the initial temp-commit was successful.

      WitSelPt * findSelPtToSplit (WitBoolean & finished, double & flowGap);
d83 2
@


1.2
log
@Continued implementation of sel-split for pen-exec.
@
text
@d53 5
d68 1
a68 1
      void splitItr (WitBoolean & tempCommOK);
d70 7
a76 1
         // Does splitItr for SSPE.
d121 5
@


1.1
log
@Implemented initial prototype of sel-split for pen-exec.
@
text
@d63 6
a72 3

      WitSelPt * findSelPtToSplit1 (WitBoolean & finished);
         //
@

