head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.02.12.19.13.40;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2004.02.06.23.27.10;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.05.21.24.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.04.22.31.27;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Continued double precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef StrDblH
#define StrDblH

//------------------------------------------------------------------------------
// Header file: "StrDbl.h"
//
// Contains the declaration and inline implementation of class Wit::StrDbl.
//------------------------------------------------------------------------------

#include <typedefs.h>

//------------------------------------------------------------------------------
// Class Wit::StrDbl
//
// "Strict Double"
// Represents a double without implicit conversion from type float.
//
// All implementation is inline.
//------------------------------------------------------------------------------

namespace Wit
{

class StrDbl
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      inline StrDbl (double theDouble):
            myDouble_ (theDouble)
         {
         }

      inline StrDbl (const StrDbl & theStrDbl):
            myDouble_ (theStrDbl.myDouble_)
         {
         }

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      inline ~StrDbl ()
         {
         }

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline operator double () const
         {
         return myDouble_;
         }

      inline double & myDouble ()
         {
         return myDouble_;
         }

      inline void operator = (const StrDbl & theStrDbl)
         {
         myDouble_ = theStrDbl.myDouble_;
         }

      inline float asaFloat () const
         {
         return static_cast <float> (myDouble_);
         }

      inline static StrDbl convFloat (float theFloat)
         {
         return static_cast <double> (theFloat);
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      StrDbl (float);
         //
         // Not implemented.
         // Prevents implicit conversion from type float.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      double myDouble_;
         //
         // The double represented by this StrDbl.
   };

// Leaving namespace Wit.
}   

#endif
@


1.3
log
@Continued double precision.
@
text
@@


1.2
log
@Continued double precision.
@
text
@d68 5
@


1.1
log
@Continued double precision.
@
text
@d24 2
a25 1
// Represents a double without implicit conversion to or from type float.
d41 2
a42 2
      inline StrDbl (double theDbl):
            myDbl_ (theDbl)
d47 1
a47 1
            myDbl_ (theStrDbl.myDbl_)
d65 1
a65 1
         return myDbl_;
d68 1
a68 1
      inline StrDbl & operator = (const StrDbl & theStrDbl)
d70 2
a71 1
         myDbl_ = theStrDbl.myDbl_;
d73 3
a75 1
         return * this;
d78 1
a78 1
      inline float asaFloat () const
d80 1
a80 1
         return static_cast <float> (myDbl_);
d86 9
d98 1
a98 1
      double myDbl_;
a101 15

// Leaving namespace Wit.
}   

//------------------------------------------------------------------------------
// Global (Wit namespace) functions that work with class Wit::StrDbl.
//------------------------------------------------------------------------------

namespace Wit
{

inline StrDbl floatToStrDbl (float theFlt)
   {
   return static_cast <double> (theFlt);
   }
@

