head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.03.20.00.12.12;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2004.03.19.22.00.53;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.16.23.29.50;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.16.22.39.28;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Double Precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "NFlxVec.C"
//
// Contains the following:
//
//    The implementation         of NonClass functions that have NFlxVec args.
//    The implementation         of class template NFlxVec   <Elem>.
//    The explicit instantiation of class template NFlxVec   <Elem>.
//    The implementation         of class template NFlxVData <Elem>.
//------------------------------------------------------------------------------

#include <NFlxVec.h>
#include <Problem.h>
#include <MsgFac.h>

//------------------------------------------------------------------------------
// Implementation of NonClass functions that have NFlxVec args.
//------------------------------------------------------------------------------

void WitNonClass::convCopy (
      WitTVec <double> &         theDblTVec,
      const WitNFlxVec <float> & theFltNFlxVec)
   {
   witAssert (theDblTVec.length () == theFltNFlxVec.nPeriods ());

   if (theFltNFlxVec.vectorMode ())
      convCopy (
         theDblTVec,
         theFltNFlxVec.myCVec ());
   else
      theDblTVec.setToScalar (
         dblFromFlt (
            theFltNFlxVec.myScalar ()));
   }

//------------------------------------------------------------------------------

void WitNonClass::convCopy (
      WitNFlxVec <float>  &    theFltNFlxVec,
      const WitTVec <double> & theDblTVec)
   {
   witAssert (theFltNFlxVec.nPeriods () == theDblTVec.length ());

   if (theDblTVec == theDblTVec[0])
      theFltNFlxVec.setToScalar (
         fltFromDbl (theDblTVec[0]));
   else
      {
      theFltNFlxVec.beInVectorMode ();

      convCopy (
         theFltNFlxVec.myCVec (),
         theDblTVec);
      }
   }

//------------------------------------------------------------------------------

void WitNonClass::convCopy (
      WitNFlxVec <double> &   theDblNFlxVec,
      const WitTVec <float> & theFltTVec)
   {
   witAssert (theDblNFlxVec.nPeriods () == theFltTVec.length ());

   if (theFltTVec == theFltTVec[0])
      theDblNFlxVec.setToScalar (
         dblFromFlt (theFltTVec[0]));
   else
      {
      theDblNFlxVec.beInVectorMode ();

      convCopy (
         theDblNFlxVec.myCVec (),
         theFltTVec);
      }
   }

//------------------------------------------------------------------------------

void WitNonClass::convCopy (
      WitNFlxVec <float> &        theFltNFlxVec,
      const WitNFlxVec <double> & theDblNFlxVec)
   {
   witAssert (theFltNFlxVec.nPeriods () == theDblNFlxVec.nPeriods ());

   if (theDblNFlxVec.vectorMode ())
      {
      theFltNFlxVec.beInVectorMode ();

      convCopy (
         theFltNFlxVec.myCVec (),
         theDblNFlxVec.myCVec (),
         theFltNFlxVec.nPeriods ());
      }
   else
      theFltNFlxVec.setToScalar (
         theDblNFlxVec.myScalar ());
   }

//------------------------------------------------------------------------------

void WitNonClass::convCopy (
      WitTVec <float> &           theFltTVec,
      const WitNFlxVec <double> & theDblNFlxVec)
   {
   witAssert (theFltTVec.length () == theDblNFlxVec.nPeriods ());

   if (theDblNFlxVec.vectorMode ())
      convCopy (
         theFltTVec,
         theDblNFlxVec.myCVec ());
   else 
      theFltTVec.setToScalar (
         fltFromDbl (
            theDblNFlxVec.myScalar ()));
   }

//------------------------------------------------------------------------------

void WitNonClass::convCopy (
      float *                     theFltCVec,
      const WitNFlxVec <double> & theDblNFlxVec)
   {
   WitPeriod thePer;

   witAssert (theFltCVec != NULL);

   for (thePer = theDblNFlxVec.nPeriods () - 1; thePer >= 0; thePer --)
      theFltCVec[thePer] =
         fltFromDbl (
            theDblNFlxVec[thePer]);
   }

//------------------------------------------------------------------------------

void WitNonClass::convCopy (
      WitNFlxVec <double> & theDblNFlxVec,
      const float *         theFltCVec)
   {
   bool scalMode;

   scalMode = hasSingleValue (theFltCVec, theDblNFlxVec.nPeriods ());

   if (scalMode)
      theDblNFlxVec.setToScalar (
         dblFromFlt (
            theFltCVec[0]));
   else
      {
      theDblNFlxVec.beInVectorMode ();

      convCopy (
         theDblNFlxVec.myCVec (),
         theFltCVec,
         theDblNFlxVec.nPeriods ());
      }
   }

//------------------------------------------------------------------------------
// Implementation of class template NFlxVec <Elem>.
//------------------------------------------------------------------------------

template <typename Elem> 
      WitNFlxVec <Elem>::WitNFlxVec (WitProblem * theProblem, Elem initValue):

         myData_ (theProblem, initValue)
   {
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      WitNFlxVec <Elem>::~WitNFlxVec ()
   {
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitNFlxVec <Elem>::convCopyInto (WitTVec <Elem> & theTVec) const
   {
   if (vectorMode ())
      theTVec.convCopy    (myCVec ());
   else
      theTVec.setToScalar (myScalar ());
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitNFlxVec <Elem>::convCopyInto (Elem * theCVec) const
   {
   WitPeriod thePer;

   witAssert (theCVec != NULL);

   for (thePer = nPeriods () - 1; thePer >= 0; thePer --)
      theCVec[thePer] = (* this)[thePer];
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitNFlxVec <Elem>::copy (const WitNFlxVec & theNFlxVec)
   {
   witAssert (nPeriods () == theNFlxVec.nPeriods ());

   if (theNFlxVec.vectorMode ())
      convCopy (theNFlxVec.myCVec ());
   else
      setToScalar (theNFlxVec.myScalar ());
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitNFlxVec <Elem>::setToScalar (Elem theValue)
   {
   beInScalarMode ();

   myScalar () = theValue;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitNFlxVec <Elem>::convCopy (const WitTVec <Elem> & theTVec)
   {
   witAssert (nPeriods () == theTVec.length ());

   if (theTVec == theTVec[0])
      setToScalar (theTVec[0]);
   else
      {
      beInVectorMode ();

      theTVec.convCopyInto (myCVec ());
      }
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitNFlxVec <Elem>::convCopy (const Elem * theCVec)
   {
   WitPeriod thePer;

   if (hasSingleValue (theCVec, nPeriods ()))
      setToScalar (theCVec[0]);
   else
      {
      beInVectorMode ();

      for (thePer = nPeriods () - 1; thePer >= 0; thePer --)
         myCVec ()[thePer] = theCVec[thePer];
      }
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      bool WitNFlxVec <Elem>::operator == (Elem theValue) const
   {
   WitPeriod thePer;

   if (scalarMode ())
      return (myScalar () == theValue);

   for (thePer = nPeriods () - 1; thePer >= 0; thePer --)
      if (myCVec ()[thePer] != theValue)
         return false;

   return true;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      bool WitNFlxVec <Elem>::operator >= (Elem theValue) const
   {
   WitPeriod thePer;

   if (scalarMode ())
      return (myScalar () >= theValue);

   for (thePer = nPeriods () - 1; thePer >= 0; thePer --)
      if (myCVec ()[thePer] < theValue)
         return false;

   return true;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitNFlxVec <Elem>::checkBounds (WitPeriod thePer) const
   { 
   if (thePer < 0)
      curMsgFac () ("negativeIndexFmsg", thePer);

   if (thePer >= nPeriods ())
      curMsgFac () ("indexTooLargeFmsg",
         thePer,
         nPeriods () - 1);
   }

//------------------------------------------------------------------------------
// Explicit instantiation of class template NFlxVec <Elem>.
//------------------------------------------------------------------------------

template class WitNFlxVec <bool>;
template class WitNFlxVec <int>;
template class WitNFlxVec <float>;
template class WitNFlxVec <double>;

//------------------------------------------------------------------------------
// Implementation of class template NFlxVData <Elem>.
//------------------------------------------------------------------------------

template <typename Elem> 
      WitNFlxVData <Elem>::WitNFlxVData (
         WitProblem * theProblem,
         Elem         initValue):

      myIntData_ (- theProblem->nPeriods ())
   {
   myScalar_ = initValue;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      WitNFlxVData <Elem>::~WitNFlxVData ()
   {
   if (vectorMode ())
      delete[] myCVec ();
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitNFlxVData <Elem>::switchToVectorMode ()
   {
   Elem      theValue;
   WitPeriod thePer;

   witAssert (scalarMode ());

   theValue   = myScalar ();

   myIntData_ = nPeriods ();

   myCVec_    = new Elem[nPeriods ()];

   for (thePer = nPeriods () - 1; thePer >= 0; thePer --)
      myCVec ()[thePer] = theValue;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      void WitNFlxVData <Elem>::switchToScalarMode ()
   {
   Elem theValue;

   witAssert (vectorMode ());

   theValue    =   myCVec ()[0];

   delete[]        myCVec ();

   myIntData_  = - nPeriods ();

   myScalar () =   theValue;
   }
@


1.3
log
@Double Precision.
@
text
@@


1.2
log
@Double Precision.
@
text
@d151 1
a151 4
   scalMode =
      WitNFlxVec <float>::hasSingleValue (
         theFltCVec,
         theDblNFlxVec.nPeriods ());
a296 19
         return false;

   return true;
   }

//------------------------------------------------------------------------------

template <typename Elem> 
      bool WitNFlxVec <Elem>::hasSingleValue (const Elem * theCVec, int nPers)
   {
   Elem      valAt0;
   WitPeriod thePer;

   witAssert (theCVec != NULL);

   valAt0 = theCVec[0];

   for (thePer = nPers - 1; thePer >= 1; thePer --)
      if (theCVec[thePer] != valAt0)
@


1.1
log
@Double Precision.
@
text
@d342 2
d345 1
@

