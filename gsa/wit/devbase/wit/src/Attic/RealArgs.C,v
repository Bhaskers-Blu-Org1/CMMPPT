head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2004.02.25.18.59.38;	author rjw;	state dead;
branches;
next	1.9;

1.9
date	2004.02.24.22.29.04;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.24.19.37.22;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.20.15.37.36;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.19.22.56.11;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.19.19.08.51;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.19.16.31.24;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.19.16.08.16;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.18.00.05.24;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.14.00.45.35;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Double Precision.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "RealArgs.C"
//
// Contains the implementation of the following classes:
//
//    Wit::RealArg
//    Wit::InScalRA
//    Wit::OutScalRA
//------------------------------------------------------------------------------

#include <InScalRA.h>
#include <OutScalRA.h>
#include <Session.h>

//------------------------------------------------------------------------------
// Implementation of class Wit::RealArg.
//------------------------------------------------------------------------------

int RealArg::nFloatArgs_  = 0;
int RealArg::nDoubleArgs_ = 0;

//------------------------------------------------------------------------------

bool RealArg::floatArgsExist ()
   {
   return (nFloatArgs_ >= 1);
   }

//------------------------------------------------------------------------------

bool RealArg::doubleArgsExist ()
   {
   return (nDoubleArgs_ >= 1);
   }

//------------------------------------------------------------------------------

RealArg::RealArg (bool doubleCaseVal):

      doubleCase_ (doubleCaseVal)
   {
   nSameCaseArgs () ++;
   }

//------------------------------------------------------------------------------

RealArg::RealArg (const RealArg & theRealArg):

      doubleCase_ (theRealArg.doubleCase_)
   {
   nSameCaseArgs () ++;
   }

//------------------------------------------------------------------------------

RealArg::~RealArg ()
   {
   nSameCaseArgs () --;
   }

//------------------------------------------------------------------------------

int & RealArg::nSameCaseArgs ()
   {
   return
      doubleCase_?
         nDoubleArgs_:
         nFloatArgs_;
   }

//------------------------------------------------------------------------------
// Implementation of class Wit::InScalRA.
//------------------------------------------------------------------------------

InScalRA::InScalRA (float theFloat):

      RealArg     (false),
      myUnderArg_ (doubleFromFloat (theFloat))
   {
   }

//------------------------------------------------------------------------------

InScalRA::InScalRA (double theDouble):

      RealArg     (true),
      myUnderArg_ (theDouble)
   {
   }

//------------------------------------------------------------------------------

InScalRA::InScalRA (const InScalRA & theInScalRA):

      RealArg     (theInScalRA),
      myUnderArg_ (theInScalRA.myUnderArg_)
   {
   }

//------------------------------------------------------------------------------

InScalRA::~InScalRA ()
   {
   }

//------------------------------------------------------------------------------
// Implementation of class Wit::OutScalRA.
//------------------------------------------------------------------------------

OutScalRA::OutScalRA (float * theFloatPtr):

      RealArg     (false),
      myUnderArg_ (toTlObj_cast (theFloatPtr))
   {
   }

//------------------------------------------------------------------------------

OutScalRA::OutScalRA (double * theDoublePtr):

      RealArg     (true),
      myUnderArg_ (toTlObj_cast (theDoublePtr))
   {
   }

//------------------------------------------------------------------------------

OutScalRA::OutScalRA (const OutScalRA & theOutScalRA):

      RealArg     (theOutScalRA),
      myUnderArg_ (theOutScalRA.myUnderArg_)
   {
   }

//------------------------------------------------------------------------------

OutScalRA::~OutScalRA ()
   {
   }

//------------------------------------------------------------------------------

void OutScalRA::setTo (double theValue)
   {
   if (doubleCase ())
      * fromTlObj_cast <double> (myUnderArg_) =                  theValue;
   else 
      * fromTlObj_cast <float>  (myUnderArg_) = floatFromDouble (theValue);
   }

//------------------------------------------------------------------------------

double OutScalRA::appVarVal () const
   {
   return 
      doubleCase ()?
                          * fromTlObj_cast <double> (myUnderArg_):
         doubleFromFloat (* fromTlObj_cast <float>  (myUnderArg_));
   }
@


1.9
log
@Double Precision
@
text
@@


1.8
log
@Continued double precision.
@
text
@d28 1
d30 7
a36 1
int RealArg::nFloatArgs_  = 0;
a50 8
   if (DEBUG_MODE)
      {
      if (doubleCase_)
         witAssert (nFloatArgs_  == 0);
      else
         witAssert (nDoubleArgs_ == 0);
      }

@


1.7
log
@Continued double precision.
@
text
@d16 2
a17 2
//    Wit::RealSInArg
//    Wit::RealSOutArg
d20 2
a21 2
#include <RealSInArg.h>
#include <RealSOutArg.h>
d82 1
a82 1
// Implementation of class Wit::RealSInArg.
d85 1
a85 1
RealSInArg::RealSInArg (float theFloat):
d94 1
a94 1
RealSInArg::RealSInArg (double theDouble):
d103 1
a103 1
RealSInArg::RealSInArg (const RealSInArg & theRealSInArg):
d105 2
a106 2
      RealArg     (theRealSInArg),
      myUnderArg_ (theRealSInArg.myUnderArg_)
d112 1
a112 1
RealSInArg::~RealSInArg ()
d117 1
a117 1
// Implementation of class Wit::RealSOutArg.
d120 1
a120 1
RealSOutArg::RealSOutArg (float * theFloatPtr):
d129 1
a129 1
RealSOutArg::RealSOutArg (double * theDoublePtr):
d138 1
a138 1
RealSOutArg::RealSOutArg (const RealSOutArg & theRealSOutArg):
d140 2
a141 2
      RealArg     (theRealSOutArg),
      myUnderArg_ (theRealSOutArg.myUnderArg_)
d147 1
a147 1
RealSOutArg::~RealSOutArg ()
d153 1
a153 1
void RealSOutArg::setTo (double theValue)
d163 1
a163 1
double RealSOutArg::appVarVal () const
@


1.6
log
@Continued double precision.
@
text
@d88 1
a88 1
      myUnderArg_ (static_cast <double> (theFloat))
d156 1
a156 1
      * fromTlObj_cast <double> (myUnderArg_) =                      theValue;
d158 1
a158 1
      * fromTlObj_cast <float>  (myUnderArg_) = static_cast <float> (theValue);
d167 2
a168 2
                               * fromTlObj_cast <double> (myUnderArg_):
         static_cast <double> (* fromTlObj_cast <float>  (myUnderArg_));
@


1.5
log
@Continued double precision.
@
text
@d160 10
@


1.4
log
@Continued double precision.
@
text
@d16 1
d20 1
d79 35
@


1.3
log
@Continued double precision.
@
text
@a30 7
bool RealArg::floatArgsExist ()
   {
   return (nFloatArgs_ >= 1);
   }

//------------------------------------------------------------------------------

d42 8
@


1.2
log
@Continued double precision.
@
text
@d26 2
a27 2
int RealArg::nDoubleCases_ = 0;
int RealArg::nFloatCases_  = 0;
d31 1
a31 1
bool RealArg::floatCaseExists ()
d33 1
a33 1
   return (nFloatCases_ >= 1);
d38 1
a38 1
bool RealArg::doubleCaseExists ()
d40 1
a40 1
   return (nDoubleCases_ >= 1);
d49 1
a49 1
   incNCases (+1);
d58 1
a58 1
   incNCases (+1);
d65 1
a65 1
   incNCases (-1);
d70 1
a70 1
void RealArg::incNCases (int inc)
d72 4
a75 4
   if (doubleCase_)
      nDoubleCases_ += inc;
   else
      nFloatCases_  += inc;
@


1.1
log
@Continued double precision.
@
text
@d15 2
a16 4
//    Wit::RealOutArg
//    Wit::RealOutArgRep
//    Wit::FloatOutArgRep
//    Wit::DoubleOutArgRep
d19 1
a19 2
#include <RealOutArg.h>
#include <RealOutArgR.h>
d23 1
a23 1
// Implementation of class Wit::RealOutArg.
d26 2
a27 21
RealOutArg::RealOutArg (float * theUnderArg):

      myRep_ (* new FloatOutArgRep (theUnderArg))
   {
   }

//------------------------------------------------------------------------------

RealOutArg::RealOutArg (double * theUnderArg):

      myRep_ (* new DoubleOutArgRep (theUnderArg))
   {
   }

//------------------------------------------------------------------------------

RealOutArg::RealOutArg (const RealOutArg & theRealOutArg):

      myRep_ (theRealOutArg.myRep_.newCopy ())
   {
   }
d31 1
a31 1
RealOutArg::~RealOutArg ()
d33 1
a33 1
   delete & myRep_;
d38 1
a38 1
void RealOutArg::setTo (double theValue)
d40 1
a40 1
   myRep_.setTo (theValue);
d45 1
a45 4
void * RealOutArg::myUnderArgAsVoidPtr ()
   {
   return myRep_.myUnderArgAsVoidPtr ();
   }
d47 1
a47 3
//------------------------------------------------------------------------------

bool RealOutArg::floatCaseExists ()
d49 1
a49 1
   return FloatOutArgRep::instanceExists ();
d54 1
a54 14
bool RealOutArg::doubleCaseExists ()
   {
   return DoubleOutArgRep::instanceExists ();
   }

//------------------------------------------------------------------------------
// Implementation of class Wit::RealOutArgRep.
//------------------------------------------------------------------------------

RealOutArgRep::~RealOutArgRep ()
   {
   }

//------------------------------------------------------------------------------
d56 1
a56 1
RealOutArgRep::RealOutArgRep ()
d58 1
a61 6
// Implementation of class Wit::FloatOutArgRep.
//------------------------------------------------------------------------------

int FloatOutArgRep::nInstances_ = 0;

//------------------------------------------------------------------------------
d63 1
a63 4
FloatOutArgRep::FloatOutArgRep (float * theUnderArg):
      RealOutArgRep (),

      myUnderArg_   (theUnderArg)
d65 1
a65 3
   witAssert (not DoubleOutArgRep::instanceExists ());

   nInstances_ ++;
d70 1
a70 1
FloatOutArgRep::~FloatOutArgRep ()
d72 4
a75 1
   nInstances_ --;
d79 1
a79 6

RealOutArgRep & FloatOutArgRep::newCopy ()
   {
   return * new FloatOutArgRep (myUnderArg_);
   }

d82 1
a82 6
void FloatOutArgRep::setTo (double theValue)
   {
   * myUnderArg_ = static_cast <float> (theValue);
   }

//------------------------------------------------------------------------------
d84 2
a85 1
void * FloatOutArgRep::myUnderArgAsVoidPtr ()
a86 1
   return myUnderArg_;
a89 4
// Implementation of class Wit::DoubleOutArgRep.
//------------------------------------------------------------------------------

int DoubleOutArgRep::nInstances_ = 0;
d91 1
a91 1
//------------------------------------------------------------------------------
d93 2
a94 4
DoubleOutArgRep::DoubleOutArgRep (double * theUnderArg):
      RealOutArgRep (),

      myUnderArg_   (theUnderArg)
a95 3
   witAssert (not FloatOutArgRep::instanceExists ());

   nInstances_ ++;
d100 1
a100 6
DoubleOutArgRep::~DoubleOutArgRep ()
   {
   nInstances_ --;
   }

//------------------------------------------------------------------------------
d102 2
a103 1
RealOutArgRep & DoubleOutArgRep::newCopy ()
a104 1
   return * new DoubleOutArgRep (myUnderArg_);
d109 1
a109 1
void DoubleOutArgRep::setTo (double theValue)
a110 1
   * myUnderArg_ = theValue;
d115 1
a115 1
void * DoubleOutArgRep::myUnderArgAsVoidPtr ()
d117 4
a120 1
   return myUnderArg_;
@

