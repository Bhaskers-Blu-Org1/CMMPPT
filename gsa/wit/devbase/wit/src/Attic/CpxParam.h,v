head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2011.01.12.23.09.24;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2011.01.10.21.51.14;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.06.23.31.24;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@CPX Param Specs
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef CpxParamH
#define CpxParamH

//------------------------------------------------------------------------------
// Header file: "CpxParam.h"
//
// Contains the declaration of class CpxParam.
//------------------------------------------------------------------------------

#include <Str.h>

//------------------------------------------------------------------------------
// Class CpxParam
//
// "CPLEX Parameter"
//
// Each CpxParam has:
//   * A name
//   * A designated type, either int or double.
//   * A stored value, matching the designated type.
//
// A CpxParam is either valid or invalid.
//
// A CpxParam is valid, iff bpoth of the following hold:
//   * Its name matches the name of an actual CPLEX parameter, excluding the
//     "CPX_PARAM_" prefix.
//   * Its designated type matches the type of the CPLEX parameter.
//
// If a CpxParam is valid, it is considered to represent the CPLEX parameter
//    whose name it matches.
//
// During optimizing implosion and stochastic implosion with CPLEX selected,
// just before a CPLEX solve routine is invoked, the following actions will be
// performed for each CpxParam in the Problem:
//   * If the CpxParam is invalid, a severe error will be issued.
//   * If the CpxParam is   valid, the value of the represented CPLEX parameter
//     will be set to the value stored by the CpxParam.
//------------------------------------------------------------------------------

class WitCpxParam
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCpxParam (const char * theName);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitCpxParam ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitString &, myName)
      accessFunc (bool,              myTypeIsInt)

      int    myIntValue () const;
      double myDblValue () const;

      //------------------------------------------------------------------------

      void setIntValue (int    theValue);
      void setDblValue (double theValue);
         //
         // Each of these functions sets the designated type of this CpxParam to
         // the indicated type and the stored value to theValue.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitCpxParam);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      const WitString myName_;
         //
         // The name of this CpxParam.

      bool myTypeIsInt_;
         //
         // If true,  the designated type is int.
         // If false, the designated type is double.

      int    myIntValue_;
      double myDblValue_;
         //
         // If myTypeIsInt_ is true,
         //    myIntValue_ is the stored value.
         //    myDblValue_ is 0.
         //
         // If myTypeIsInt_ is false,
         //    myIntValue_ is 0.
         //    myDblValue_ is the stored value.
   };

#endif
@


1.2
log
@CPX params
@
text
@@


1.1
log
@CPX Params
@
text
@d25 22
a46 5
// Each instance of this class is intended to correspond to a CPLEX parameter.
// The instance has a name, which corresponds to the name of the CPLEX
// parameter.
// The instance stores a value (either int or double) to which the CPLEX
// parameter is to be set.
d57 1
a57 2
      WitCpxParam (const char * theName, int    theValue);
      WitCpxParam (const char * theName, double theValue);
d70 1
a70 1
      accessFunc (bool,              myValueIsInt)
d75 8
d97 1
a97 2
         // The name of the corresponding CPLEX parameter, excluding the
         // "CPX_PARAM_" prefix.
d99 1
a99 1
      const bool myValueIsInt_;
d101 2
a102 2
         // If true,  the value stored for the CPLEX parameter is of type int.
         // If false, the value stored for the CPLEX parameter is of type double
d104 2
a105 2
      const int    myIntValue_;
      const double myDblValue_;
d107 2
a108 2
         // If myValueIsInt_ is true,
         //    myIntValue_ stores the value for the CPLEX parameter, and
d111 1
a111 2
         // If myValueIsInt_ is false,
         //    myDblValue_ stores the value for the CPLEX parameter, and
d113 1
@

