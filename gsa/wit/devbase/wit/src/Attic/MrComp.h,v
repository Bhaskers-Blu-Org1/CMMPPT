head	1.12;
access;
symbols
	EndRw-branch:1.11.0.8
	Root-of-EndRw:1.11
	rwToStl:1.11.0.6
	latest_sce_3_10_20010924:1.11.0.4
	sce_3_10_20010924:1.11
	latest_sce_3_00_20010601:1.11.0.2
	sce_3_00_20010601:1.11
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2003.03.03.23.26.54;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2001.04.26.21.25.44;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.03.19.23.05;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.08.16.37.06;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.04.22.27.51;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.28.22.13.37;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.13.19.57.25;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.06.19.58.39;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.04.22.07.37;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.43;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.16;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.25;	author wit;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.11
log
@Refactoring for selection splitting.
@
text
@@


1.10
log
@Continued implementation of selection splitting.
@
text
@a0 194
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MrCompH
#define MrCompH

//------------------------------------------------------------------------------
// Header file: "MrComp.h"
//
// Contains the declaration of class MrComp.
//------------------------------------------------------------------------------

#include <MrAltPt.h>
#include <PtrTVec.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class MrComp
//
// "Multi-Route Component"
// Represents a Component from which the routing could potentially proceed
// downward in more than one direction. Each MrComp corresponds to a Component.
// The Component is either a Part or a BomEntry:
//
// * If the Component is a Part,     a  BopEntry is to be selected.
// * If the Component is a BomEntry, a ConsEntry is to be selected.
//
// Class Hierarchy:
//
// ProbAssoc
//    MrComp
//       MrPart
//       MrBomEnt
//
// Implemented in MultiRt.C.
//------------------------------------------------------------------------------

class WitMrComp: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMrComp ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitMrAltPt * myMrAltPtWithAlt (WitPeriod thePer)
            //
            // Returns the MrAltPt for this MrComp in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            //
         {
         return
            multiChoice_?
               multiChoiceMrAltPtWithAlt (thePer):
               NULL;
         }

      virtual WitBoolean candIsDefault (WitCandIndex i, WitPeriod thePer) = 0;
         //
         // Returns TRUE, iff i is the candidate index of the default
         // selection for this MrComp in thePer.

      virtual WitCandIndex nCandidates () = 0;
         //
         // Returns the # of selection candidates for this MrComp.

      virtual WitBoolean compIsEligible (WitPeriod thePer) = 0;
         //
         // Returns TRUE, iff this MrComp is eligible to make a selection in
         // thePer.

      virtual WitBoolean candIsEligible (WitCandIndex i, WitPeriod thePer) = 0;
         //
         // Returns TRUE, iff candidate #i for this MrComp is eligible to be
         // selected thePer.

      void printIfMultiChoice ();
         //
         // Prints this MrComp, if multiChoice_ is TRUE.

      void printHasAlt ();
         //
         // Prints those MrAltPts for which hasAlt () is TRUE.

      virtual void printID () = 0;
         //
         // Prints a string identifying this MrComp.

      virtual void printCandidate (WitCandIndex i) = 0;
         //
         // Prints Candidate #i.

      virtual WitSelMgr * mySelMgr (WitSelector * theSelector) = 0;
         //
         // Returns the SelMgr owned by theSelector corresponding to this 
         // MrComp.
         // Base class function.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBoolean, multiChoice)

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrComp (WitProblem *);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (const WitPtrTVec (WitMrAltPt) &, myMrAltPt)

      inline WitCandIndex selIndex (WitPeriod thePer)
            //
            // Returns the selection index for thePer in the candidate vector.
            // -1 indicates no selection.
         {
         return
            multiChoice_?         myMrAltPt_[thePer]->selIndex ():
            (nCandidates () > 0)? 0:
                                  -1;
         }

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void setUp ();
         //
         // Sets up some of the data for this MrComp after the derived class
         // instance has been constructed.

      virtual void initCandidate () = 0;
         //
         // Sets up the list of candidates in the derived instance.

      void buildMrAltPts ();
         //
         // Creates the MrAltPts for this MrComp.
         // To be called by the derived class ctors after finding the
         // candidates.

      WitMrAltPt * multiChoiceMrAltPtWithAlt (WitPeriod thePer);
            //
            // Returns the MrAltPt for this MrComp in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            // multiChoice_ must be TRUE.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMrComp);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBoolean multiChoice_;
         //
         // TRUE, iff there are at least two directions in which the routing
         // could potentially proceed downward from this MrComp.

      WitPtrTVec (WitMrAltPt) myMrAltPt_;
         //
         // myMrAltPt_[thePer] is the MrAltPt for this MrComp inthePer.
         // Allocated only if multiChoice_ is TRUE.
   };

#endif
@


1.9
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d105 6
@


1.8
log
@Coarse selection splitting.
@
text
@a57 4
      virtual void splitSel (WitPeriod thePer) = 0;
         //
         // Records the current selection in thePer as a split selection.

@


1.7
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d121 1
a121 3
      WitMrComp (WitMrMgr * theMrMgr);
         //
         // myMrMgr_ <--- theMrMgr.
a127 1
      accessFunc (WitMrMgr *,                      myMrMgr)
a179 4

      WitMrMgr * const myMrMgr_;
         //
         // The MrMgr that owns this MrComp.
@


1.6
log
@Further development of selection splitting for multi-route on substitutes.
@
text
@d121 1
a121 1
      WitMrComp (WitProblem * theProblem);
d123 1
a123 1
         // ProbAssoc <<< theProblem.
d130 1
d183 4
@


1.5
log
@Some minor changes.
@
text
@d109 6
a128 1
      accessFunc (WitBoolean,                      multiChoice)
@


1.4
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d20 1
@


1.3
log
@Refactoring for selection splitting.
@
text
@d57 4
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d118 2
a119 9
      accessFunc (WitBoolean, multiChoice)

      inline WitMrAltPt * myMrAltPt (WitPeriod thePer)
            //
            // Returns the MrAltPt for this MrComp in period thePer.
            // Only valid if multiChoice_ is TRUE.
         {
         return (WitMrAltPt *) myMrAltPtTl_[thePer];
         }
d127 1
a127 1
            multiChoice_?         myMrAltPt (thePer)->selIndex ():
d163 1
a163 3
      copyCtorAndAssignment (WitMrComp);
         //
         // Prevents unintentional copying and assignment.
d178 1
a178 1
      WitTVec (WitTypelessPtr) myMrAltPtTl_;
d180 1
a180 1
         // Data for myMrAltPt.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
