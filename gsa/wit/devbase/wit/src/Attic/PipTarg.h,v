head	1.41;
access;
symbols
	sce_410_withVa:1.35
	sce_4_05_20040511:1.33
	sce_4_00_20040201:1.33;
locks; strict;
comment	@ * @;


1.41
date	2006.03.08.23.57.11;	author rjw;	state dead;
branches;
next	1.40;

1.40
date	2006.03.03.20.46.56;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2006.01.12.20.32.38;	author rjw;	state dead;
branches;
next	1.38;

1.38
date	2006.01.12.20.23.29;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2005.11.14.22.29.02;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2005.11.11.23.29.13;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2005.01.28.19.34.27;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2004.05.14.22.03.19;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2003.12.31.23.18.57;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2003.12.29.16.25.32;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2003.12.19.19.01.02;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2003.12.17.22.29.59;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2003.12.17.16.53.53;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2003.12.15.19.35.59;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2003.12.12.21.20.15;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.10.23.20.43;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.05.22.29.56;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.04.16.20.41;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.01.21.05.04;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.10.29.17.03.58;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.29.16.29.38;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.29.00.15.50;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.28.22.38.59;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.24.15.37.46;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.23.19.33.13;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.10.22.22.11.15;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.22.20.37.29;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.21.19.28.45;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.16.22.29.39;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.16.18.13.05;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.16.16.18.03;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.09.21.31.51;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.06.20.33.30;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.06.20.14.59;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.03.21.52.20;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.02.23.14.10;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.01.15.59.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.01.14.17.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.30.15.40.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.41
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef PipTargH
#define PipTargH

//------------------------------------------------------------------------------
// Header file: "PipTarg.h"
//
// Contains the declaration of class PipTarg.
//------------------------------------------------------------------------------

#include <PipPartAtt.h>
#include <PairStack.h>
#include <PtrVec.h>

//------------------------------------------------------------------------------
// Class PipTarg
//
// "Post-Implosion Pegging Target"
// Represents a Demand and shipPer to which resources are to be pegged in an
// unshared-resource pegging.
//
// Implemented in PIP.C.
//------------------------------------------------------------------------------

class WitPipTarg
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPipTarg (WitDemand *, WitPeriod);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitPipTarg ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitDemand *,                                  myDemand)
      accessFunc (WitPeriod,                                    myShipPer)
      accessFunc (WitPipPegList <WitOperation> *,               execVolPegList)
      accessFunc (WitPipPegList <WitSubEntry> *,                subVolPegList)
      accessFunc (const WitPtrVec <WitPipPegList <WitPart> > &, myPartPegList)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPipTarg);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDemand * const myDemand_;
         //
         // The Demand represented by this PipTarg.

      const WitPeriod myShipPer_;
         //
         // The shipment period represented by this PipTarg.

      WitPipPegList <WitOperation> * execVolPegList_;
      WitPipPegList <WitSubEntry> *  subVolPegList_;
         //
         // The peggings owned by this PipTarg for:
         //    execVol
         //    subVol

      WitPtrVec <WitPipPegList <WitPart> > myPartPegList_;
         //
         // myPartPegList_[theAttTag] is the pegging owned by this PipTarg for
         // theAttTag.
   };

#endif
@


1.40
log
@[shared-resource pegging]
@
text
@@


1.39
log
@[shared-resource pegging]
@
text
@d16 1
a16 1
// Contains the declaration of class UrpTarg.
d24 1
a24 1
// Class UrpTarg
d26 1
a26 1
// "Unshared-Resource Pegging Target"
d30 1
a30 1
// Implemented in URP.C.
d33 1
a33 1
class WitUrpTarg
d41 1
a41 1
      WitUrpTarg (WitDemand *, WitPeriod, WitUrpOwner *);
d47 1
a47 1
      ~WitUrpTarg ();
d55 3
a57 3
      accessFunc (WitUrpPegList <WitOperation> *,               execVolPegList)
      accessFunc (WitUrpPegList <WitSubEntry> *,                subVolPegList)
      accessFunc (const WitPtrVec <WitUrpPegList <WitPart> > &, myPartPegList)
d65 1
a65 1
      noCopyCtorAssign (WitUrpTarg);
d73 1
a73 1
         // The Demand represented by this UrpTarg.
d77 1
a77 1
         // The shipment period represented by this UrpTarg.
d79 2
a80 2
      WitUrpPegList <WitOperation> * execVolPegList_;
      WitUrpPegList <WitSubEntry> *  subVolPegList_;
d82 1
a82 1
         // The peggings owned by this UrpTarg for:
d86 1
a86 1
      WitPtrVec <WitUrpPegList <WitPart> > myPartPegList_;
d88 1
a88 1
         // myPartPegList_[theAttTag] is the pegging owned by this UrpTarg for
@


1.38
log
@[shared-resource pegging]
@
text
@@


1.37
log
@[shared-resource pegging]
@
text
@d41 1
a41 1
      WitUrpTarg (WitDemand *, WitPeriod, WitUrpCoord *);
@


1.36
log
@[shared-resource pegging]
@
text
@d16 1
a16 1
// Contains the declaration of class PipTarg.
d24 1
a24 1
// Class PipTarg
d26 3
a28 2
// "Post-Implosion Pegging Target"
// Respresents a Demand and shipPer to which resources are to be pegged.
d30 1
a30 1
// Implemented in PIP.C.
d33 1
a33 1
class WitPipTarg
d41 1
a41 1
      WitPipTarg (WitDemand *, WitPeriod, WitUrpCoord *);
d47 1
a47 1
      ~WitPipTarg ();
d55 3
a57 3
      accessFunc (WitPipPegList <WitOperation> *,               execVolPegList)
      accessFunc (WitPipPegList <WitSubEntry> *,                subVolPegList)
      accessFunc (const WitPtrVec <WitPipPegList <WitPart> > &, myPartPegList)
d65 1
a65 1
      noCopyCtorAssign (WitPipTarg);
d73 1
a73 1
         // The Demand represented by this PipTarg.
d77 1
a77 1
         // The shipment period represented by this PipTarg.
d79 2
a80 2
      WitPipPegList <WitOperation> * execVolPegList_;
      WitPipPegList <WitSubEntry> *  subVolPegList_;
d82 1
a82 1
         // The peggings owned by this PipTarg for:
d86 1
a86 1
      WitPtrVec <WitPipPegList <WitPart> > myPartPegList_;
d88 1
a88 1
         // myPartPegList_[theAttTag] is the pegging owned by this PipTarg for
@


1.35
log
@Tie Breaking Prop-Rt.
@
text
@d40 1
a40 1
      WitPipTarg (WitDemand *, WitPeriod, WitPipPegMgr *);
@


1.34
log
@PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class Pip::Targ.
d24 1
a24 1
// Class Pip::Targ
d32 1
a32 4
namespace WitPip
{

class Targ
d40 1
a40 1
      Targ (WitDemand *, WitPeriod, PegMgr *);
d46 1
a46 1
      ~Targ ();
d52 5
a56 5
      accessFunc (WitDemand *,                            myDemand)
      accessFunc (WitPeriod,                              myShipPer)
      accessFunc (PegList <WitOperation> *,               execVolPegList)
      accessFunc (PegList <WitSubEntry> *,                subVolPegList)
      accessFunc (const WitPtrVec <PegList <WitPart> > &, myPartPegList)
d64 1
a64 1
      noCopyCtorAssign (Targ);
d72 1
a72 1
         // The Demand represented by this Targ.
d76 1
a76 1
         // The shipment period represented by this Targ.
d78 2
a79 2
      PegList <WitOperation> * execVolPegList_;
      PegList <WitSubEntry> *  subVolPegList_;
d81 1
a81 1
         // The peggings owned by this Targ for:
d85 1
a85 1
      WitPtrVec <PegList <WitPart> > myPartPegList_;
d87 2
a88 2
         // myPartPegList_[thePartAtt] is the pegging owned by this Targ for
         // thePartAtt.
a90 3
// Leaving namespace Pip.
}   

@


1.33
log
@Added the PIP shipment sequence to the output of displayData.
@
text
@a51 8
      // Other public member functions.
      //------------------------------------------------------------------------

      void print ();
         //
         // Prints the pegging for this Targ.

      //------------------------------------------------------------------------
d55 4
a58 5
      accessFunc (WitDemand *,              myDemand)
      accessFunc (WitPeriod,                myShipPer)
      accessFunc (PegList <WitOperation> *, execVolPegList)
      accessFunc (PegList <WitSubEntry> *,  subVolPegList)

a65 11

      void printExecVolPegging ();
      void printSubVolPegging  ();

      void printPartPegging (PartAtt, const char * pegVolName);
         //
         // These functions print the various peggings for this Targ.

      FILE * solnFile ();
         //
         // Returns the comprehensive solution file.
@


1.32
log
@Continued implementation of PIP.
@
text
@d55 1
a55 1
      void printPegging ();
@


1.31
log
@Continued implementation of PIP.
@
text
@d43 1
a43 1
      Targ (WitDemand *, WitPeriod, Coord *);
@


1.30
log
@Continued implementation of PIP.
@
text
@a58 4
      void consolidatePegging ();
         //
         // Consolidates the PegLists owned by this Targ.

@


1.29
log
@Continued implementation of PIP.
@
text
@d43 1
a43 1
      Targ (WitDemand *, WitPeriod, Mgr *);
@


1.28
log
@Continued implementation of PIP.
@
text
@a54 4
      void clearPegging ();
         //
         // Clears the pegging for this Targ.

@


1.27
log
@Continued implementation of PIP.
@
text
@d65 1
a65 1
         // Consolidates the Peggings owned by this Targ.
d73 2
a74 2
      accessFunc (Pegging <WitOperation> *, execVolPegging)
      accessFunc (Pegging <WitSubEntry> *,  subVolPegging)
d76 1
a76 1
      accessFunc (const WitPtrVec <Pegging <WitPart> > &, myPartPegging)
d109 2
a110 2
      Pegging <WitOperation> * execVolPegging_;
      Pegging <WitSubEntry> *  subVolPegging_;
d116 1
a116 1
      WitPtrVec <Pegging <WitPart> > myPartPegging_;
d118 1
a118 1
         // myPartPegging_[thePartAtt] is the pegging owned by this Targ for
@


1.26
log
@Continued implementation of PIP.
@
text
@d65 1
a65 1
         // Consolidates the Pegs owned by this Targ.
d71 4
a74 4
      accessFunc (WitDemand *,          myDemand)
      accessFunc (WitPeriod,            myShipPer)
      accessFunc (Peg <WitOperation> *, execVolPeg)
      accessFunc (Peg <WitSubEntry> *,  subVolPeg)
d76 1
a76 1
      accessFunc (const WitPtrVec <Peg <WitPart> > &, myPartPeg)
d109 2
a110 2
      Peg <WitOperation> * execVolPeg_;
      Peg <WitSubEntry> *  subVolPeg_;
d116 1
a116 1
      WitPtrVec <Peg <WitPart> > myPartPeg_;
d118 1
a118 1
         // myPartPeg_[thePartAtt] is the pegging owned by this Targ for
@


1.25
log
@Continued implementation of PIP.
@
text
@d16 1
a16 1
// Contains the declaration of class PipTarg.
d24 1
a24 1
// Class PIP::PipTarg
d32 1
a32 1
namespace WitPIP
d35 1
a35 1
class WitPipTarg
d43 1
a43 1
      WitPipTarg (WitDemand *, WitPeriod, WitPipMgr *);
d49 1
a49 1
      ~WitPipTarg ();
d57 1
a57 1
         // Clears the pegging for this PipTarg.
d61 1
a61 1
         // Prints the pegging for this PipTarg.
d65 1
a65 1
         // Consolidates the PipPegs owned by this PipTarg.
d71 4
a74 4
      accessFunc (WitDemand *,                myDemand)
      accessFunc (WitPeriod,                  myShipPer)
      accessFunc (WitPipPeg <WitOperation> *, execVolPeg)
      accessFunc (WitPipPeg <WitSubEntry> *,  subVolPeg)
d76 1
a76 1
      accessFunc (const WitPtrVec <WitPipPeg <WitPart> > &, myPartPeg)
d89 1
a89 1
         // These functions print the various peggings for this PipTarg.
d95 1
a95 1
      noCopyCtorAssign (WitPipTarg);
d103 1
a103 1
         // The Demand represented by this PipTarg.
d107 1
a107 1
         // The shipment period represented by this PipTarg.
d109 2
a110 2
      WitPipPeg <WitOperation> * execVolPeg_;
      WitPipPeg <WitSubEntry> *  subVolPeg_;
d112 1
a112 1
         // The peggings owned by this PipTarg for:
d116 1
a116 1
      WitPtrVec <WitPipPeg <WitPart> > myPartPeg_;
d118 1
a118 1
         // myPartPeg_[thePartAtt] is the pegging owned by this PipTarg for
d122 1
a122 1
// Leaving namespace PIP
@


1.24
log
@Continued implementation of PIP.
@
text
@d24 1
a24 1
// Class PipTarg
d32 3
d87 1
a87 1
      void printPartPegging (WitPip::PartAtt, const char * pegVolName);
d121 3
@


1.23
log
@Continued implementation of PIP.
@
text
@d19 1
d21 1
d72 2
a73 4
      accessFunc (WitPipPeg <WitPart> *,      supplyVolPeg)
      accessFunc (WitPipPeg <WitPart> *,      sideVolPeg)
      accessFunc (WitPipPeg <WitPart> *,      prodVolPeg)
      accessFunc (WitPipPeg <WitPart> *,      consVolPeg)
d84 1
a84 3
      void printPartPegging (
            WitPipPeg <WitPart> * thePipPeg,
            const char *          pegVolName);
a107 4
      WitPipPeg <WitPart> *      supplyVolPeg_;
      WitPipPeg <WitPart> *      sideVolPeg_;
      WitPipPeg <WitPart> *      prodVolPeg_;
      WitPipPeg <WitPart> *      consVolPeg_;
d112 5
a116 4
         //    supplyVol
         //    sideVol
         //    prodVol
         //    consVol
@


1.22
log
@Continued implementation of PIP.
@
text
@d84 1
a84 1
      void WitPipTarg::printPartPegging (
@


1.21
log
@Continued implementation of PIP.
@
text
@d71 1
d81 6
a86 5
      void printExecVolPegging   ();
      void printSubVolPegging    ();
      void printSupplyVolPegging ();
      void printProdVolPegging   ();
      void printConsVolPegging   ();
d88 1
a88 1
         // These function print the various peggings for this PipTarg.
d111 1
d119 1
@


1.20
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d30 1
a30 1
class WitPipTarg: public WitUtil
@


1.19
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d72 1
d84 1
d110 1
d117 1
@


1.18
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a61 4
      void getProdPegPairs (WitPartPipStack & thePegPairs);
         //
         // Sets thePegPairs to the prodVol pegging for this PipTarg.

d71 1
d107 1
d113 1
@


1.17
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d58 1
a58 1
      void printPegging (WitPipMgr * thePipMgr);
d60 5
a64 1
         // Prints the pegging for this PipTarg, using thePipMgr.
d85 1
a85 1
      void printProdVolPegging   (WitPipMgr * thePipMgr);
@


1.16
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d54 8
d77 11
@


1.15
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a59 1
      accessFunc (WitPipPeg <WitPart> *,      supplyVolPeg)
d62 1
a83 1
      WitPipPeg <WitPart> *      supplyVolPeg_;
d86 1
a88 1
         //    supplyVol
d91 1
@


1.14
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d60 1
a60 1
      accessFunc (WitPipPeg <WitPart> *,      supVolPeg)
d62 1
d84 1
a84 1
      WitPipPeg <WitPart> *      supVolPeg_;
d86 1
d91 1
@


1.13
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d38 1
a38 1
      WitPipTarg (WitDemand *, WitPeriod);
@


1.12
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d58 4
a61 4
      accessFunc (WitDemand *,     myDemand)
      accessFunc (WitPeriod,       myShipPer)
      accessFunc (WitPartPipPeg *, supVolPeg)
      accessFunc (WitOpnPipPeg *,  execVolPeg)
d83 2
a84 2
      WitPartPipPeg * supVolPeg_;
      WitOpnPipPeg *  execVolPeg_;
@


1.11
log
@Continued implementation of Post-Implosion Pegging.
@
text
@a49 18
      void mergeToSupVolPeg (
            WitPairStack <WitPartPipSrc, double> & thePegging,
            WitSchedule  <WitPart,       double> & workPegSched);
         //
         // Merges thePegging into supVolPeg_ while clearing thePegging.
         // Uses workPegSched as a working Schedule.
         // Upon entry,  workPegSched is assumed  to be all 0's.
         // Upon return, workPegSched is restored to    all 0's.

      void mergeToExecVolPeg (
            WitPairStack <WitOpnPipSrc, double> & thePegging,
            WitSchedule  <WitOperation, double> & workPegSched);
         //
         // Merges thePegging into supVolPeg_ while clearing thePegging.
         // Uses workPegSched as a working Schedule.
         // Upon entry,  workPegSched is assumed  to be all 0's.
         // Upon return, workPegSched is restored to    all 0's.

d58 4
a61 12
      accessFunc (WitDemand *, myDemand)
      accessFunc (WitPeriod,   myShipPer)

      inline const WitPairStack <WitPartPipSrc, double> & supVolPeg ()
         {
         return supVolPeg_;
         }

      inline const WitPairStack <WitOpnPipSrc, double> & execVolPeg ()
         {
         return execVolPeg_;
         }
a68 26
      void loadPegSched (
            const WitPairStack <WitPartPipSrc, double> & thePegging,
                  WitSchedule  <WitPart,       double> & thePegSched);
         //
         // Loads thePegging into thePegSched.

      void loadPegSched (
            const WitPairStack <WitOpnPipSrc, double> & thePegging,
                  WitSchedule  <WitOperation, double> & thePegSched);
         //
         // Loads thePegging into thePegSched.

      void loadSupVolPeg (
            WitPairStack <WitPartPipSrc, double> & thePegging,
            WitSchedule  <WitPart,       double> & thePegSched);
         //
         // Loads the elements of thePegSched corresponding to thePegging into
         // supVolPeg_, while clearing thePegging and thePegSched.

      void loadExecVolPeg (
            WitPairStack <WitOpnPipSrc, double> & thePegging,
            WitSchedule  <WitOperation, double> & thePegSched);
         //
         // Loads the elements of thePegSched corresponding to thePegging into
         // execVolPeg_, while clearing thePegging and thePegSched.

d83 2
a84 6
      WitPairStack <WitPartPipSrc, double> supVolPeg_;
         //
         // The incremental supplyVols pegged to the PipTarg, stored in reverse
         // order.

      WitPairStack <WitOpnPipSrc, double> execVolPeg_;
d86 3
a88 2
         // The incremental execVols pegged to the PipTarg, stored in reverse
         // order.
@


1.10
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d50 1
a50 1
      void mergeIntoPegging (
d52 1
a52 1
            WitSchedule <WitPart, double> &        workPegSched);
d54 1
a54 1
         // Merges thePegging into pgdSupVols_ while clearing thePegging.
d57 10
a66 1
         // Upon return, workPegSched is restored to all 0's.
d79 1
a79 1
      inline const WitPairStack <WitPartPipSrc, double> & pgdSupVols ()
d81 6
a86 1
         return pgdSupVols_;
d97 7
a103 1
            WitSchedule <WitPart, double> &              thePegSched);
d107 1
a107 1
      void loadMyPegging (
d109 8
a116 1
            WitSchedule <WitPart, double> &    thePegSched);
d119 1
a119 1
         // pgdSupVols_, while clearing thePegging and thePegSched.
d135 1
a135 1
      WitPairStack <WitPartPipSrc, double> pgdSupVols_;
d138 5
@


1.9
log
@Continued implementation of post-implosion pegging.
@
text
@d54 1
a54 1
         // Merges thePegging into myPegging_ while clearing thePegging.
d70 1
a70 1
      inline const WitPairStack <WitPartPipSrc, double> & myPegging ()
d72 1
a72 1
         return myPegging_;
d92 1
a92 1
         // myPegging_, while clearing thePegging and thePegSched.
d108 1
a108 1
      WitPairStack <WitPartPipSrc, double> myPegging_;
@


1.8
log
@Continued implementation of post-implosion pegging.
@
text
@d51 2
a52 2
            WitPairStack <WitPipSrc, double> & thePegging,
            WitSchedule <WitPart, double> &    workPegSched);
d70 1
a70 1
      inline const WitPairStack <WitPipSrc, double> & myPegging ()
d82 2
a83 2
            const WitPairStack <WitPipSrc, double> & thePegging,
            WitSchedule <WitPart, double> &          thePegSched);
d88 1
a88 1
            WitPairStack <WitPipSrc, double> & thePegging,
d108 1
a108 1
      WitPairStack <WitPipSrc, double> myPegging_;
@


1.7
log
@Continued implementation of post-implosion pegging.
@
text
@d26 2
@


1.6
log
@Continued implementation of post-implosion pegging.
@
text
@d108 2
a109 1
         // The incremental supplyVols pegged to the PipTarg.
@


1.5
log
@Continued implementation of post-implosion pegging.
@
text
@d48 3
a50 9
      void extractPegging (
            WitSchedule <WitPart, double> &,
            WitObjStack <WitPipSrc> &);
         //
         // Removes the pegging from this PipTarg and stores it in the args.

      void loadPegging (
            WitSchedule <WitPart, double> &,
            WitObjStack <WitPipSrc> &);
d52 4
a55 2
         // Loads in the pegging for this PipTarg from the args and removes it
         // from them.
d68 1
a68 1
      inline const WitPairStack <WitPipSrc, double> & supVolPegging ()
d70 1
a70 1
         return supVolPegging_;
d79 13
d106 1
a106 1
      WitPairStack <WitPipSrc, double> supVolPegging_;
@


1.4
log
@Continued implementation of post-implosion pegging.
@
text
@d45 21
d72 1
a72 1
      inline WitPairStack <WitPipSrc, double> & supVolPegging ()
@


1.3
log
@Continued implementation of post-implosion pegging.
@
text
@a44 12
      // Other public member functions.
      //------------------------------------------------------------------------

      void peg (WitPipSrc * thePipSrc, double pegVol);
         //
         // Pegs pegVol units of supplyVol for thePipSrc to this PipTarg.

      void clearPegging ();
         //
         // Clears the pegging associated with this PipTarg.

      //------------------------------------------------------------------------
d51 1
a51 1
      inline const WitPairStack <WitPipSrc, double> & supVolPegging ()
@


1.2
log
@Continued implementation of post-implosion pegging.
@
text
@d63 5
@


1.1
log
@Continued implementation of post-implosion pegging.
@
text
@d19 1
a19 1
#include <Util.h>
d25 1
a25 2
// Each instance corresponds to a Demand and shipPer and stores the pegging for
// that Demand in that shipPer.
d48 8
d77 1
a77 1
         // The Demand for this PipTarg.
d81 5
a85 1
         // The shipment period for this PipTarg.
@

