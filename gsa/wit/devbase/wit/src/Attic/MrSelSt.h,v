head	1.4;
access;
symbols
	EndRw-branch:1.3.0.6
	Root-of-EndRw:1.3
	rwToStl:1.3.0.4
	latest_sce_3_10_20010924:1.3.0.2
	sce_3_10_20010924:1.3;
locks; strict;
comment	@ * @;


1.4
date	2003.03.03.23.26.57;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2001.07.03.22.50.41;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.28.23.11.16;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.27.21.45.11;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.3
log
@An attempt to fix the link trouble on Windows for the multi-route templates.
@
text
@@


1.2
log
@Refactoring.
@
text
@a0 161
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MrSelStH
#define MrSelStH

//------------------------------------------------------------------------------
// Header file: "MrSelSt.h"
//
// Contains the declaration of class template MrSelSite <MrArgs>.
//------------------------------------------------------------------------------

#include <MrMgr.h>
#include <PtrTVec.h>

//------------------------------------------------------------------------------
// Class template MrSelSite <MrArgs>
//
// "Multi-Route Selection Site"
// Represents a location in the BOM structure at which multi-route selection is
// to be performed.
//
// For more information on this template, see:
//    "General Comments on the Multi-Route Class Templates" in MrMgr.h.
//
// Class Hierarchy:
//
// ProbAssoc
//    MrSelSite <MrArgs>
//
// Implemented in MultiRt.C.
//------------------------------------------------------------------------------

template <MrArgDecs>
      class WitMrSelSite: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrSelSite (SelComp *, WitMrMgr <MrArgs> *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMrSelSite ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitMrSelPt <MrArgs> * myMrSelPtWithAlt (WitPeriod thePer)
            //
            // Returns the MrSelPt for this MrSelSite in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            //
         {
         return
            multiChoice_?
               multiChoiceMrSelPtWithAlt (thePer):
               NULL;
         }

      void printHasAlt ();
         //
         // Prints those MrSelPts for which hasAlt () is TRUE.

      void findCandComps (
            WitPeriod                thePer, 
            WitObjStack <CandComp> & theCandComps);
         //
         // Sets theCandComps to be the set of CandComps currently under
         // consideration for selection from mySelComp_ in thePer.

      WitMrCand <MrArgs> * myMrCandFor (CandComp * theCandComp);
         //
         // Returns the MrCand owned by this MrSelSite that represents
         // theCandComp. Issues a fatal error, if none exists.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitMrMgr <MrArgs> *,                       myMrMgr)
      accessFunc (SelComp *,                                 mySelComp)
      accessFunc (WitBoolean,                                multiChoice)
      accessFunc (const WitObjStack <WitMrCand <MrArgs> > &, myMrCands)
      accessFunc (const WitPtrTVec <WitMrSelPt <MrArgs> > &, myMrSelPt)

      CandComp * selCandComp (WitPeriod thePer);
         //
         // Returns the CandComp selected to be used at mySelComp_ in thePer.
         // Invalid, if mySelComp_ is not explodeable in thePer.

   private:

      //------------------------------------------------------------------------
      // Private typedefs.
      //------------------------------------------------------------------------

      typedef WitObjStItr <WitMrCand <MrArgs> > WitMrCandItr;

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void buildMrSelPts ();
         //
         // Creates the MrSelPts for this MrSelSite.

      WitMrSelPt <MrArgs> * multiChoiceMrSelPtWithAlt (WitPeriod thePer);
            //
            // Returns the MrSelPt for this MrSelSite in thePer, if it has an
            // alternative to the current selection; otherwise NULL.
            // multiChoice_ must be TRUE.

      void buildMrCands ();
         //
         // Constructs the MrCands owned by this MrSelSite.

      noCopyCtorAssignTemp (WitMrSelSite, MrArgs);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrMgr <MrArgs> * const myMrMgr_;
         //
         // The MrMgr that owns this MrSelSite.

      SelComp * const mySelComp_;
         //
         // The SelComp at which the selection is to be made.

      WitObjStack <WitMrCand <MrArgs> > myMrCands_;
         //
         // The ordered list of MrCands owned by this MrSelSite.
         // These MrCands represent the CandComps that can be selected from
         // mySelComp_.

      WitBoolean multiChoice_;
         //
         // TRUE, iff there are at least two directions in which the routing
         // could potentially proceed downward from this MrSelSite.

      WitPtrTVec <WitMrSelPt <MrArgs> > myMrSelPt_;
         //
         // myMrSelPt_[thePer] is the MrSelPt for this MrSelSite in thePer.
         // Allocated only if multiChoice_ is TRUE.
   };

#endif
@


1.1
log
@Initial implementation of multi-route class templates.
@
text
@d49 1
a49 1
      WitMrSelSite (WitPart *, WitMrMgr <MrArgs> *);
d61 1
a61 1
      inline WitMrSelPt <MrArgs> * myMrSelPtWithAlt (WitPeriod expPer)
d63 1
a63 1
            // Returns the MrSelPt for this MrSelSite in expPer, if it has an
d69 1
a69 1
               multiChoiceMrSelPtWithAlt (expPer):
d77 3
a79 1
      void findExpBopEnts (WitPeriod expPer, WitBopEntStack & theBopEnts);
d81 2
a82 2
         // Sets theBopEnts to be the set of BOP entries currently
         // under consideration for explosion from myPart_ in expPer.
d84 1
a84 1
      WitMrCand <MrArgs> * myMrCandFor (WitBopEntry * theBopEnt);
d87 1
a87 1
         // theBopEnt. Issues a fatal error, if none exists.
d94 1
a94 1
      accessFunc (WitPart *,                                 myPart)
d99 1
a99 1
      WitBopEntry * selBopEntry (WitPeriod expPer);
d101 2
a102 3
         // Returns the BopEntry selected to be used when exploding at myComp
         // in expPer.
         // Invalid, if myPart_ is not explodeable in expPer.
a118 2
         // To be called by the derived class ctors after finding the
         // candidates.
d120 1
a120 1
      WitMrSelPt <MrArgs> * multiChoiceMrSelPtWithAlt (WitPeriod expPer);
d122 1
a122 1
            // Returns the MrSelPt for this MrSelSite in expPer, if it has an
a129 4
      void addPrereq (WitObjStack <WitPart> & prereqs, WitBopEntry * theBopEnt);
         //
         // Puts the prereq Part into prereqs.

d140 1
a140 1
      WitPart * const myPart_;
d142 1
a142 1
         // The Part at which the selection is to be made.
d147 2
a148 2
         // These MrCands represent the BopEntries that can be selected for
         // explosion from myPart_.
d157 1
a157 1
         // myMrSelPt_[expPer] is the MrSelPt for this MrSelSite in expPer.
@

