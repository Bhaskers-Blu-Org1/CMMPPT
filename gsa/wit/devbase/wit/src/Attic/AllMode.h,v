head	1.19;
access;
symbols
	EndRw-branch:1.18.0.6
	Root-of-EndRw:1.18
	rwToStl:1.18.0.4
	latest_sce_3_10_20010924:1.18.0.2
	sce_3_10_20010924:1.18
	latest_sce_3_00_20010601:1.15.0.4
	sce_3_00_20010601:1.15
	latest_sce_2_31_20010308:1.15.0.2
	sce_2_31_20010308:1.15
	latest_sce_2_31_20001003:1.9.0.2
	sce_2_31_20001003:1.9
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2003.03.03.23.26.36;	author rjw;	state dead;
branches;
next	1.18;

1.18
date	2001.08.14.20.43.52;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.07.25.16.08.12;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.03.20.07.29;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.20.00.44.14;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.22.16.18.24;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2000.12.05.19.05.27;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2000.12.04.22.07.33;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.22.23.11.35;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.21.20.03.19;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.29.21.22.41;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.05.08.21.56.10;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.24.19.55.17;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.21.17.42.47;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.19.22.35.28;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.01.00.35.42;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.30.16.33.07;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.11;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.17;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.17;	author wit;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.18
log
@Created and used Archive template.
@
text
@@


1.17
log
@Initial implementation of pegging.
@
text
@a0 159
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef AllocDatH
#define AllocDatH

//------------------------------------------------------------------------------
// Header file: "AllocDat.h"
//
// Contains the declaration of class AllocMode.
//------------------------------------------------------------------------------

#include <HeurAtor.h>
#include <PairStack.h>

//------------------------------------------------------------------------------
// Class AllocMode
//
// Responsible for maintaining the "temporary mode" status of heuristic 
// allocation and the data that depends on it.
//
// Implemented in HeurAll.C.
//------------------------------------------------------------------------------

class WitAllocMode: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAllocMode (WitHeurAtor * theHeurAtor, WitAccFlag * theAccFlag);
         //
         // myHeurAtor_ <-- theHeurAtor.
         // myAccFlag_  <-- theAccFlag.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitAllocMode ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void enterTempMode ();
         //
         // Puts heuristic allocation into temporary mode.
         // Asserts that it is not already in temporary mode.
         // Resets temp data.

      void leaveTempMode ();
         //
         // Takes heuristic allocation out of temporary mode.
         // Asserts that it currently is in temporary mode.

      void resetTempData ();
         //
         // Sets the temp data = to the perm data.

      inline double curExecVol (WitOperation * theOpn, WitPeriod thePer)
         {
         return
            temp_?
               tempExecVol_ (theOpn)[thePer]:
               execVol      (theOpn)[thePer];
         }

      void incExecVol (
            WitOperation * theOpn, 
            WitPeriod      thePer,
            double         delta);
         //
         // Increments the working version of theOpn->execVol_[thePer] by delta.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBoolean,            temp)
      accessFunc (const WitAvailSched *, curAvailSched)

      inline WitAvailSched * curAvailSched ()
         {
         return curAvailSched_;
         }

      inline WitBoolean perm () const
         {
         return ! temp_;
         }

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Component data access functions.
      //------------------------------------------------------------------------

      refAccess (WitOperation, WitFlexVec (double), execVol)

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAllocMode);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitAccFlag * myAccFlag_;
         //
         // Ptr to HeurAllMgr::myAccFlag_.

      WitHeurAtor * const myHeurAtor_;
         //
         // The HeurAtor the owns this AllocMode.

      WitBoolean temp_;
         //
         // TRUE, iff heuristic allocation is currently in temp mode.

      WitSchedule (WitOperation, double) tempExecVol_;
         //
         // Temporary execVol schedule.

      WitOpnPerStack alteredOpnPers_;
         //
         // The set of pairs, (theOpn, thePer) such that 
         // curExecVol (theOpn)[thePer] has been altered since the last
         // reset/save.
         // (May contain duplicate elements.)

      WitAvailSched * permAvailSched_;
         //
         // The AvailSched for permanent mode.

      WitAvailSched * tempAvailSched_;
         //
         // The AvailSched for temporary mode.

      WitAvailSched * curAvailSched_;
         //
         // The AvailSched for the current allocation mode.
   };

#endif
@


1.16
log
@Moved Stack template implementations to header files.
@
text
@d19 1
a19 1
#include <HeurAllP.h>
d28 1
a28 1
// Implemented in HeurAllS.C.
d39 1
a39 1
      WitAllocMode (WitHeurAllPerf * thePerf, WitAccFlag * theAccFlag);
d41 2
a42 2
         // myHeurAllPerf_ <-- thePerf.
         // myAccFlag_ <-- theAccFlag.
d125 1
a125 1
         // Ptr to HeurAllocator::myAccFlag_.
d127 1
a127 1
      WitHeurAllPerf * const myHeurAllPerf_;
d129 1
a129 1
         // The HeurAllPerf the owns this AllocMode.
@


1.15
log
@Implemented and used class SelMgr.
@
text
@d20 1
a20 1
#include <PairSt.h>
@


1.14
log
@Further development of coarse selection splitting.
@
text
@d88 2
a89 2
      accessFunc (WitBoolean,      temp)
      accessFunc (WitAvailSched *, curAvailSched)
d91 6
a96 1
      inline WitBoolean perm ()
@


1.13
log
@Some minor modifications.
@
text
@d20 1
a20 1
#include <Stack.h>
@


1.12
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d20 1
a20 1
#include <DynStack.h>
@


1.11
log
@Refactoring for selection splitting.
@
text
@d134 1
a134 1
      WitOpnPerDynStack alteredOpnPers_;
@


1.10
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d112 1
a112 3
      copyCtorAndAssignment (WitAllocMode);
         //
         // Prevents unintentional copying and assignment.
@


1.9
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@a19 1
#include <DynPer.h>
d136 1
a136 1
      WitDynPerStack (WitOperation) alteredOpnPers_;
@


1.8
log
@Finished implementing stock reallocation.
@
text
@d40 1
a40 1
      WitAllocMode (WitHeurAllPerf * thePerf);
d43 1
d70 1
a70 1
      inline const WitTVec (double) & execVol (WitOperation * theOpn)
d74 2
a75 2
               tempExecVol_   (theOpn):
               permExecVolDup (theOpn)->duplicate ();
a76 3
         //
         // Returns the permanent or temporary version of
         // theOpn->execVol_, as appropriate.
d103 10
a116 5
      inline WitDupTVec * & permExecVolDup (WitOperation * theOpn)
         {
         return myHeurAllPerf_->permExecVolDup (theOpn);
         }

d121 4
d140 2
a141 1
         // execVol (theOpn, thePer) has been altered since the last reset/save.
@


1.7
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@a22 4
#include <AvSched.h>
   //
   // Temporary, during AvailSched resposibility transfer.

a68 13
      inline const WitTVec (double) & curNetSupp (WitPart * thePart)
         {
         return 
            temp_?
               tempNetSupp_ (thePart):
               permNetSupp_ (thePart);
         }     

      WitTVec (double) & curNetSuppForUpdate (WitPart * thePart);
         //
         // Returns tempNetSupp_ (thePart) or permNetSupp_ (thePart), depending
         // on temp_. Notes that the returned vector is being altered.

d91 2
a92 1
      accessFunc (WitBoolean, temp)
a98 7
      inline WitAvailSched * curAvailSched ()
         {
         witAssert (stockRealloc ());

         return curAvailSched_;
         }

a108 2
      accessWrapper (WitBoolean, stockRealloc, myGlobalComp ())

a125 17
      WitSchedule (WitPart, double) permNetSupp_;
         //
         // Permanent net supply Schedule.

      WitSchedule (WitPart, double) tempNetSupp_;
         //
         // Temporary net supply Schedule.

      WitMapping (WitPart, WitBoolean) netSuppAltered_;
         //
         // netSuppAltered_ (thePart) is TRUE, iff curNetSupp (thePart) 
         // has been altered since the last reset.

      WitDynStack (WitPart) netSuppAltParts_;
         //
         // The Parts for which netSuppAltered_ is TRUE.

a134 5

      //------------------------------------------------------------------------
      // The AvailScheds for the AllocMode.
      // They are all NULL, if not in stock reallocation mode.
      //------------------------------------------------------------------------
@


1.6
log
@Continued implementation of stock reallocation.
@
text
@d117 1
a117 1
         witAssert (stockReAlloc ());
d132 1
a132 1
      accessWrapper (WitBoolean, stockReAlloc, myGlobalComp ())
d180 1
a180 1
      // They are all NULL, if not in stock re-allocation mode.
@


1.5
log
@Continued implementation of stock re-allocation.
@
text
@d23 4
a54 11
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBoolean, temp)

      inline WitBoolean perm ()
         {
         return ! temp_;
         }

      //------------------------------------------------------------------------
d104 10
a113 37
      void oldNetOnGoingAvail (
            WitPart * thePart,
            WitPeriod reqPer,
            double &  theReqVol);
         //
         // Nets theReqVol against the on-going availability for thePart in 
         // periods starting at reqPer.
         // Valid only in stock re-allocation mode.

      void netWithPreAll (
            WitPart * thePart,
            WitPeriod reqPer,
            double &  theReqVol);
         //
         // Nets theReqVol against the availability of thePart in reqPer, 
         // respecting pre-allocation in later periods.
         // Valid only in stock re-allocation mode.

      WitPeriod netAndRoll (
            WitPart * thePart, 
            WitPeriod reqPer,
            double &  theReqVol,
            double &  rollVol);
         //
         // Nets theReqVol against the availability of thePart in reqPer,
         // ignoring pre-allocation in later periods. Returns the period to
         // which some of theReqVol is to be rolled over, if any; else -1. In
         // the roll-over case, sets rollVol to the amount to roll-over.
         // Valid only in stock re-allocation mode.

      void addToCurIncAvail (
            WitPart * thePart, 
            WitPeriod thePer, 
            double    deltaVol);
         //
         // curIncAvail (thePart, thePer) += deltaVol
         // Valid only in stock re-allocation mode.
d115 1
a115 1
      inline const WitTVec (double) & curIncAvail (WitPart * thePart)
d117 3
a119 4
         return 
            temp_?
               tempIncAvail_ (thePart):
               permIncAvail_ (thePart);
a131 27
      void initIncAvail ();
         //
         // Initializes incAvail schedules.

      double preAllocVol (WitPart * thePart, WitPeriod reqPer);
         //
         // Computes and returns the amount of availability of thePart in reqPer
         // that has been pre-allocated to periods later than reqPer.

      double availToNet (WitPart * thePart, WitPeriod reqPer, double theReqVol);
         //
         // Returns the amount a thePart that's available to be netted against
         // theReqVol in reqPer.

      WitPeriod rollPeriod (WitPart * thePart, WitPeriod fromPer);
         //
         // Returns the period in which to roll requirements from reqPer, if
         // any, else -1.

      inline WitPeriod & curLastAvDecPer (WitMaterial * theMat)
         {
         return
            temp_?
               tempLastAvDecPer_ (theMat):
               permLastAvDecPer_ (theMat);
         }

d179 2
a180 1
      // Data members only used in stock re-allocation mode.
a181 12
         
      WitSchedule (WitPart, double) permIncAvail_;
         //
         // Permanent incremental availability schedule.
         // incAvail[t] == supplyVol[t] + prodVol[t] - consVol[t] - shipVol[t]
         // Note that:
         //    --> stockVol[t] + scrapVol[t] = stockVol[t-1] + incAvail[t]
         //    --> incAvail[t] can be negative.

      WitSchedule (WitPart, double) tempIncAvail_;
         //
         // Temporary incremental availability schedule.
d183 1
a183 1
      WitDynPerStack (WitPart) incAvailAltPPs_;
d185 1
a185 3
         // The values of (thePart, thePer) for which
         // curIncAvail (thePart)[thePer] has been altered since the last reset.
         // May include duplicates.
d187 1
a187 1
      WitMapping (WitMaterial, WitPeriod) permLastAvDecPer_;
d189 1
a189 3
         // Permanent "last availability decrement period" mapping.
         // lastAvDecPer (theMat) == max {t | incAvail[t] < 0}
         //                          -1, if incAvail[t] >= 0 for all t.
d191 1
a191 1
      WitMapping (WitMaterial, WitPeriod) tempLastAvDecPer_;
d193 1
a193 1
         // Temporary "last availability decrement period" mapping.
@


1.4
log
@Minor update to stock re-allocation.
@
text
@d29 1
a29 1
// Implemented in HeurAll.C.
d111 1
a111 1
      void WitAllocMode::netOnGoingSurplus (
d113 1
a113 1
            WitPeriod initPer,
d116 3
a118 2
         // Nets reqVol against the surplus for thePart in periods starting at
         // initPer.
d120 22
a141 1
      void netAgainstSurplus (
d144 1
a144 1
            double &  reqVol);
d146 2
a147 1
         // Nets reqVol against the surplus for thePart in thePer.
d149 1
a149 6
      void incSurplus (WitPart * thePart, WitPeriod initPer, double deltaVol);
         //
         // Updates the current surplus of thePart for an increase in the 
         // availability of thePart in initPer of deltaVol.

      inline const WitTVec (double) & curSurplus (WitPart * thePart)
d153 2
a154 2
               tempSurplus_ (thePart):
               permSurplus_ (thePart);
d167 10
a176 1
      void initSurplus ();
d178 2
a179 1
         // Initializes surplus schedules.
d181 1
a181 1
      WitTVec (double) & curSurplusForUpdate (WitPart * thePart);
d183 10
a192 2
         // Returns tempSurplus_ (thePart) or permSurplus_ (thePart), depending
         // on temp_. Notes that the returned vector is being altered.
d196 1
a196 1
      inline WitDupTVec * & permExecVolDup (WitOperation * theOpn) 
d240 13
a252 1
      WitSchedule (WitPart, double) permSurplus_;
d254 1
a254 2
         // Permanent surplus schedule.
         // surplus == stockVol + scrapVol.
d256 1
a256 1
      WitSchedule (WitPart, double) tempSurplus_;
d258 3
a260 1
         // Temporary surplus schedule.
d262 1
a262 1
      WitMapping (WitPart, WitBoolean) surplusAltered_;
d264 3
a266 2
         // surplusAltered_ (thePart) is TRUE, iff tempSurplus (thePart) or
         // permSurplus (thePart) has been altered since the last reset.
d268 1
a268 1
      WitDynStack (WitPart) surpAltParts_;
d270 1
a270 1
         // The Parts for which surplusAltered_ is TRUE.
@


1.3
log
@Initial implementation of stock re-allocation.
@
text
@d158 1
a158 2
      accessWrapper (WitBoolean, usingNetSupp, myGlobalComp ())
      accessWrapper (WitBoolean, usingSurplus, myGlobalComp ())
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d80 1
a80 5
      void saveTempData ();
         //
         // Sets the perm data = to the temp data.

      inline const WitTVec (double) & netSupp (WitPart * thePart)
d88 1
a88 1
      WitTVec (double) & netSuppForUpdate (WitPart * thePart);
d91 1
a91 2
         // on temp_. 
         // In temp mode, notes that tempNetSupp_ (thePart) is being altered.
d111 28
d149 12
d188 2
a189 2
         // netSuppAltered_ (thePart) is TRUE, iff netSupp (thePart) 
         // has been altered since the last reset/save.
d191 1
a191 1
      WitDynStack (WitPart) alteredParts_;
d204 18
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
