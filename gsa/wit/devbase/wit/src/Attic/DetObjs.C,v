head	1.15;
access;
symbols
	sce_5_01_20080919:1.7;
locks; strict;
comment	@ * @;


1.15
date	2010.03.24.21.31.02;	author rjw;	state dead;
branches;
next	1.14;

1.14
date	2010.03.18.23.28.02;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.18.22.46.28;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2010.03.18.22.35.01;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.06.23.20.48;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.21.20.35.46;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.19.21.05.10;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.13.19.01.24;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.02.27.23.43.42;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.05.22.23.58;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.09.20.17.42;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.09.19.30.35;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.08.23.27.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.01.22.41.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.01.21.50.40;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Removed OptObj classes.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Source file: "DetObjs.C"
//
// Implementation of the following classes:
//
//    DetObj
//    ZeroObj
//------------------------------------------------------------------------------

#include <DetObjs.h>
#include <DetVars.h>
#include <DetImpOM.h>
#include <DetOptImpMgr.h>
#include <OptComp.h>

//------------------------------------------------------------------------------
// Implementation of class DetObj.
//------------------------------------------------------------------------------

WitDetObj::WitDetObj (WitDetImpOM * theDetImpOM):

      WitOptObj   ("Full Objective", theDetImpOM),

      myDetImpOM_ (theDetImpOM)
   {
   }

//------------------------------------------------------------------------------

WitDetObj::~WitDetObj ()
   {
   }

//------------------------------------------------------------------------------

double WitDetObj::coeffVal (WitOptVar * theVar)
   {
   return theVar->mandDetVar ()->detCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class ZeroObj.
//------------------------------------------------------------------------------

WitZeroObj::WitZeroObj (WitDetImpOM * theDetImpOM):

      WitOptObj ("Zero Objective", theDetImpOM)
   {
   }

//------------------------------------------------------------------------------

WitZeroObj::~WitZeroObj ()
   {
   }

//------------------------------------------------------------------------------

double WitZeroObj::coeffVal (WitOptVar *)
   {
   return 0.0;
   }
@


1.14
log
@Removed some unneeded functions.
@
text
@@


1.13
log
@Removed class PrimaryObj.
@
text
@d47 1
a47 13
   WitDetVar * theDetVar;
   double      retVal;

   theDetVar = theVar->mandDetVar ();

   retVal    = theDetVar->primaryCoeffVal ();

   if (myDetImpOM_->slbvVarsExist ())
      retVal -=
           myDetOptImpMgr ()->myOptComp ()->wbounds ()
         * theDetVar->boundsCoeffVal ();

   return retVal;
@


1.12
log
@Removed class BoundsObj.
@
text
@a14 1
//    PrimaryObj
a25 23
// Implementation of class PrimaryObj.
//------------------------------------------------------------------------------

WitPrimaryObj::WitPrimaryObj (WitDetImpOM * theDetImpOM):

      WitOptObj ("Primary Objective", theDetImpOM)
   {
   }

//------------------------------------------------------------------------------

WitPrimaryObj::~WitPrimaryObj ()
   {
   }

//------------------------------------------------------------------------------

double WitPrimaryObj::coeffVal (WitOptVar * theVar)
   {
   return theVar->mandDetVar ()->primaryCoeffVal ();
   }

//------------------------------------------------------------------------------
@


1.11
log
@Multi-objective mode
@
text
@a14 1
//    BoundsObj
a26 23
// Implementation of class BoundsObj.
//------------------------------------------------------------------------------

WitBoundsObj::WitBoundsObj (WitDetImpOM * theDetImpOM):

      WitOptObj ("Bounds Objective", theDetImpOM)
   {
   }

//------------------------------------------------------------------------------

WitBoundsObj::~WitBoundsObj ()
   {
   }

//------------------------------------------------------------------------------

double WitBoundsObj::coeffVal (WitOptVar * theVar)
   {
   return theVar->mandDetVar ()->boundsCoeffVal ();
   }

//------------------------------------------------------------------------------
@


1.10
log
@Removed some references to objective #1.
@
text
@d18 1
d109 23
@


1.9
log
@Obj1Obj ==> DetObj
@
text
@d78 1
a78 1
      WitOptObj   ("Objective #1", theDetImpOM),
@


1.8
log
@Removing objective #2.
@
text
@d17 1
a17 1
//    Obj1Obj
d73 1
a73 1
// Implementation of class Obj1Obj.
d76 1
a76 1
WitObj1Obj::WitObj1Obj (WitDetImpOM * theDetImpOM):
d86 1
a86 1
WitObj1Obj::~WitObj1Obj ()
d92 1
a92 1
double WitObj1Obj::coeffVal (WitOptVar * theVar)
@


1.7
log
@Stochastic Implosion
@
text
@a17 5
//    RevObj
//    InvObj
//    ServObj
//    SubObj
//    Obj2Obj
a107 136

//------------------------------------------------------------------------------
// Implementation of class RevObj.
//------------------------------------------------------------------------------

WitRevObj::WitRevObj (WitDetImpOM * theDetImpOM):

      WitOptObj ("Revenue Objective", theDetImpOM)
   {
   }

//------------------------------------------------------------------------------

WitRevObj::~WitRevObj ()
   {
   }

//------------------------------------------------------------------------------

double WitRevObj::coeffVal (WitOptVar * theVar)
   {
   return theVar->mandDetVar ()->revCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class InvObj.
//------------------------------------------------------------------------------

WitInvObj::WitInvObj (WitDetImpOM * theDetImpOM):

      WitOptObj ("Inventory Objective", theDetImpOM)
   {
   }

//------------------------------------------------------------------------------

WitInvObj::~WitInvObj ()
   {
   }

//------------------------------------------------------------------------------

double WitInvObj::coeffVal (WitOptVar * theVar)
   {
   return theVar->mandDetVar ()->invCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class ServObj.
//------------------------------------------------------------------------------

WitServObj::WitServObj (WitDetImpOM * theDetImpOM):

      WitOptObj ("Serviceability Objective", theDetImpOM)
   {
   }

//------------------------------------------------------------------------------

WitServObj::~WitServObj ()
   {
   }

//------------------------------------------------------------------------------

double WitServObj::coeffVal (WitOptVar * theVar)
   {
   return theVar->mandDetVar ()->servCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class SubObj.
//------------------------------------------------------------------------------

WitSubObj::WitSubObj (WitDetImpOM * theDetImpOM):

      WitOptObj ("Substitute Objective", theDetImpOM)
   {
   }

//------------------------------------------------------------------------------

WitSubObj::~WitSubObj ()
   {
   }

//------------------------------------------------------------------------------

double WitSubObj::coeffVal (WitOptVar * theVar)
   {
   return theVar->mandDetVar ()->subCoeffVal ();
   }

//------------------------------------------------------------------------------
// Implementation of class Obj2Obj.
//------------------------------------------------------------------------------

WitObj2Obj::WitObj2Obj (WitDetImpOM * theDetImpOM):

      WitOptObj   ("Objective #2", theDetImpOM),

      myDetImpOM_ (theDetImpOM)
   {
   }

//------------------------------------------------------------------------------

WitObj2Obj::~WitObj2Obj ()
   {
   }

//------------------------------------------------------------------------------

double WitObj2Obj::coeffVal (WitOptVar * theVar)
   {
   WitDetVar *   theDetVar;
   WitObjFunc2 * theObjFunc2;
   double        retVal;

   theDetVar   = theVar->mandDetVar ();

   theObjFunc2 = myDetOptImpMgr ()->myOptComp ()->myObjFunc2 ();

   retVal =
        theObjFunc2->revFactor  () * theDetVar->revCoeffVal  ()
      + theObjFunc2->invFactor  () * theDetVar->invCoeffVal  ()
      + theObjFunc2->servFactor () * theDetVar->servCoeffVal ()
      + theObjFunc2->subFactor  () * theDetVar->subCoeffVal  ();

   if (myDetImpOM_->slbvVarsExist ())
      retVal -=
           myDetOptImpMgr ()->myOptComp ()->wbounds ()
         * theDetVar->boundsCoeffVal ();

   return retVal;
   }
@


1.6
log
@Stochastic Implosion
@
text
@d27 1
a27 1
#include <DetImpOP.h>
d35 1
a35 1
WitBoundsObj::WitBoundsObj (WitDetImpOP * theDetImpOP):
d37 1
a37 1
      WitOptObj ("Bounds Objective", theDetImpOP)
d58 1
a58 1
WitPrimaryObj::WitPrimaryObj (WitDetImpOP * theDetImpOP):
d60 1
a60 1
      WitOptObj ("Primary Objective", theDetImpOP)
d81 1
a81 1
WitObj1Obj::WitObj1Obj (WitDetImpOP * theDetImpOP):
d83 1
a83 1
      WitOptObj   ("Objective #1", theDetImpOP),
d85 1
a85 1
      myDetImpOP_ (theDetImpOP)
d106 1
a106 1
   if (myDetImpOP_->slbvVarsExist ())
d118 1
a118 1
WitRevObj::WitRevObj (WitDetImpOP * theDetImpOP):
d120 1
a120 1
      WitOptObj ("Revenue Objective", theDetImpOP)
d141 1
a141 1
WitInvObj::WitInvObj (WitDetImpOP * theDetImpOP):
d143 1
a143 1
      WitOptObj ("Inventory Objective", theDetImpOP)
d164 1
a164 1
WitServObj::WitServObj (WitDetImpOP * theDetImpOP):
d166 1
a166 1
      WitOptObj ("Serviceability Objective", theDetImpOP)
d187 1
a187 1
WitSubObj::WitSubObj (WitDetImpOP * theDetImpOP):
d189 1
a189 1
      WitOptObj ("Substitute Objective", theDetImpOP)
d210 1
a210 1
WitObj2Obj::WitObj2Obj (WitDetImpOP * theDetImpOP):
d212 1
a212 1
      WitOptObj   ("Objective #2", theDetImpOP),
d214 1
a214 1
      myDetImpOP_ (theDetImpOP)
d242 1
a242 1
   if (myDetImpOP_->slbvVarsExist ())
@


1.5
log
@Stochastic Implosion
@
text
@d104 1
a104 1
   retVal = theDetVar->primaryCoeffVal ();
@


1.4
log
@Stochastic Implosion
@
text
@d49 1
a49 1
double WitBoundsObj::coeffVal (WitOptVar * theVar) const
d72 1
a72 1
double WitPrimaryObj::coeffVal (WitOptVar * theVar) const
d97 1
a97 1
double WitObj1Obj::coeffVal (WitOptVar * theVar) const
d99 2
a100 2
   const WitDetVar * theDetVar;
   double            retVal;
d132 1
a132 1
double WitRevObj::coeffVal (WitOptVar * theVar) const
d155 1
a155 1
double WitInvObj::coeffVal (WitOptVar * theVar) const
d178 1
a178 1
double WitServObj::coeffVal (WitOptVar * theVar) const
d201 1
a201 1
double WitSubObj::coeffVal (WitOptVar * theVar) const
d226 1
a226 1
double WitObj2Obj::coeffVal (WitOptVar * theVar) const
@


1.3
log
@Stochastic Implosion
@
text
@d49 1
a49 1
double WitBoundsObj::coeffVal (const WitOptVar * theVar) const
d72 1
a72 1
double WitPrimaryObj::coeffVal (const WitOptVar * theVar) const
d97 1
a97 1
double WitObj1Obj::coeffVal (const WitOptVar * theVar) const
d132 1
a132 1
double WitRevObj::coeffVal (const WitOptVar * theVar) const
d155 1
a155 1
double WitInvObj::coeffVal (const WitOptVar * theVar) const
d178 1
a178 1
double WitServObj::coeffVal (const WitOptVar * theVar) const
d201 1
a201 1
double WitSubObj::coeffVal (const WitOptVar * theVar) const
d226 1
a226 1
double WitObj2Obj::coeffVal (const WitOptVar * theVar) const
d228 3
a230 3
   const WitDetVar * theDetVar;
   WitObjFunc2 *     theObjFunc2;
   double            retVal;
@


1.2
log
@Stochastic Implosion
@
text
@d26 1
a26 1
#include <OptVar.h>
d51 1
a51 1
   return theVar->boundsCoeffVal ();
d74 1
a74 1
   return theVar->primaryCoeffVal ();
d99 2
a100 1
   double retVal;
d102 3
a104 1
   retVal = theVar->primaryCoeffVal ();
d109 1
a109 1
         * theVar->boundsCoeffVal ();
d134 1
a134 1
   return theVar->revCoeffVal ();
d157 1
a157 1
   return theVar->invCoeffVal ();
d180 1
a180 1
   return theVar->servCoeffVal ();
d203 1
a203 1
   return theVar->subCoeffVal ();
d228 5
a232 2
   WitObjFunc2 * theObjFunc2;
   double        retVal;
d237 4
a240 7
      theObjFunc2->revFactor ()  * theVar-> revCoeffVal ()
      +
      theObjFunc2->invFactor ()  * theVar-> invCoeffVal ()
      +
      theObjFunc2->servFactor () * theVar->servCoeffVal ()
      +
      theObjFunc2->subFactor ()  * theVar-> subCoeffVal ();
d245 1
a245 1
         * theVar->boundsCoeffVal ();
@


1.1
log
@Stochastic Implosion
@
text
@d28 1
a28 1
#include <OptImp.h>
d105 2
a106 1
         myOptImploder ()->myOptComp ()->wbounds () * theVar->boundsCoeffVal ();
d228 1
a228 1
   theObjFunc2 = myOptImploder ()->myOptComp ()->myObjFunc2 ();
d241 2
a242 1
         myOptImploder ()->myOptComp ()->wbounds () * theVar->boundsCoeffVal ();
@

