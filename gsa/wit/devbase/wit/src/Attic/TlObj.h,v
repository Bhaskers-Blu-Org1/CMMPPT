head	1.7;
access;
symbols
	sce_410_withVa:1.6
	sce_4_05_20040511:1.6
	sce_4_00_20040201:1.4
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4;
locks; strict;
comment	@ * @;


1.7
date	2005.11.15.21.27.24;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2004.03.24.18.58.34;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.24.16.50.35;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.27.23.26.14;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.22.23.01.01;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.22.21.19.42;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.22.19.32.14;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef TlObjH
#define TlObjH

//------------------------------------------------------------------------------
// Header file: "TlObj.h"
//
// Contains declarations for fictitious class TlObj.
//------------------------------------------------------------------------------

#include <typedefs.h>

//------------------------------------------------------------------------------
// Fictitious class TlObj
//
// "Typeless Object"
// This is a forward declaration to a non-existent class.
// Declaring a variable to be of type TlObj * means that it must be
// cast to be assigned the value of a pointer for a different type. This is in
// contrast to type void *, which need not be cast in such a case. This is
// used to encourage type safety.
//
// This file contains the forward declaration for TlObj and various functions
// to cast between pointers for this class and pointers for other types.
//------------------------------------------------------------------------------

class WitTlObj;

//------------------------------------------------------------------------------

template <typename TypedObj>
      inline WitTlObj * toTlObj_cast (TypedObj * theTypedObj)
   {
   return reinterpret_cast <WitTlObj *> (theTypedObj);
   }

//------------------------------------------------------------------------------

template <typename TypedObj>
      inline const WitTlObj * toConstTlObj_cast (const TypedObj * theTypedObj)
   {
   return reinterpret_cast <const WitTlObj *> (theTypedObj);
   }

//------------------------------------------------------------------------------

template <typename TypedObj>
      inline WitTlObj * & toTlObjRef_cast (TypedObj * & theTypedObj)
   {
   return reinterpret_cast <WitTlObj * &> (theTypedObj);
   }

//------------------------------------------------------------------------------

template <typename TypedObj>
      inline TypedObj * fromTlObj_cast (WitTlObj * theTlObj)
   {
   return reinterpret_cast <TypedObj *> (theTlObj);
   }


//------------------------------------------------------------------------------

template <typename TypedObj>
      inline TypedObj * & fromTlObjRef_cast (WitTlObj * & theTlObj)
   {
   return reinterpret_cast <TypedObj * &> (theTlObj);
   }

#endif
@


1.6
log
@Double Precision.
@
text
@@


1.5
log
@Double Precision.
@
text
@d48 1
a48 1
      inline const WitTlObj * toTlObj_cast (const TypedObj * theTypedObj)
@


1.4
log
@Removed all const_casts from WIT.
@
text
@d48 8
@


1.3
log
@Casting adjustments for MS complier.
@
text
@d40 1
a40 1
      inline WitTlObj * toTlObj_cast (const TypedObj * theTypedObj)
d42 1
a42 3
   return
      reinterpret_cast <WitTlObj *> (
         const_cast <TypedObj *> (theTypedObj));
@


1.2
log
@Reduced overloading.
@
text
@a57 10
      inline WitTlObj * & toTlObjRef_cast (const TypedObj * & theTypedObj)
   {
   return
      toTlObjRef_cast (
         const_cast <TypedObj * &> (theTypedObj));
   }

//------------------------------------------------------------------------------

template <typename TypedObj>
@


1.1
log
@Replaced some C-style casts with C++ style casts.
@
text
@a39 8
      inline WitTlObj * toTlObj_cast (TypedObj * theTypedObj)
   {
   return reinterpret_cast <WitTlObj *> (theTypedObj);
   }

//------------------------------------------------------------------------------

template <typename TypedObj>
d42 3
a44 1
   return toTlObj_cast (const_cast <TypedObj *> (theTypedObj));
d60 3
a62 1
   return toTlObjRef_cast (const_cast <TypedObj * &> (theTypedObj));
@

