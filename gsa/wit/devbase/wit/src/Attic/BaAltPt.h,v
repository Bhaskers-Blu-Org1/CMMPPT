head	1.15;
access;
symbols
	EndRw-branch:1.14.0.8
	Root-of-EndRw:1.14
	rwToStl:1.14.0.6
	latest_sce_3_10_20010924:1.14.0.4
	sce_3_10_20010924:1.14
	latest_sce_3_00_20010601:1.14.0.2
	sce_3_00_20010601:1.14
	latest_sce_2_31_20010308:1.4.0.2
	sce_2_31_20010308:1.4
	latest_sce_2_31_20001003:1.2.0.2
	sce_2_31_20001003:1.2
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2003.03.03.23.26.37;	author rjw;	state dead;
branches;
next	1.14;

1.14
date	2001.05.10.22.31.10;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.06.23.23.51;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.06.19.22.07;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.03.19.23.03;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.30.21.23.07;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.30.18.54.46;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.29.00.10.14;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.23.19.43.23;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.20.21.03.57;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.12.19.48.06;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.11.16.35.07;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.22.23.11.36;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.55.18;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.18;	author wit;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.14
log
@Renamed AltPt classes to SelPt classes.
@
text
@@


1.13
log
@Continuing development of selection splitting.
@
text
@a0 95
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef BaAltPtH
#define BaAltPtH

//------------------------------------------------------------------------------
// Header file: "BaAltPt.h"
//
// Contains the declaration of class BaAltPt.
//------------------------------------------------------------------------------

#include <AltPt.h>

//------------------------------------------------------------------------------
// Class BaAltPt
//
// An AltPt at which the build-ahead scheme can be altered.
//
// Class Hierarchy:
//
// AltPt
//    BaAltPt
//
// Implemented in BuildAhd.C.
//------------------------------------------------------------------------------

class WitBaAltPt: public WitAltPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitBaAltPt (WitBaMat *, WitPeriod);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitBaAltPt ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void alterSelection ();
         //
         // Override from class AltPt.

      virtual void splitSelection (double);
         //
         // Override from class AltPt.

      virtual void printSelection ();
         //
         // Override from class AltPt.

      virtual WitSelMgr * mySelMgr (WitSelector *);
         //
         // Override from class AltPt.

      virtual WitBoolean splittable ();
         //
         // Override from class AltPt.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitBaAltPt);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBaMat * const myBaMat_;
         //
         // The BaMat that owns this BaAltPt.

      const WitPeriod fillPeriod_;
         //
         // The fill period associated with this BaAltPt.
   };

#endif
@


1.12
log
@Re-worked the controls for selection splitting.
@
text
@d70 4
@


1.11
log
@Continued implementation of selection splitting.
@
text
@a69 4
      virtual float splitRes ();
         //
         // Override from class AltPt.

@


1.10
log
@Refactoring build-ahead for selection splitting.
@
text
@d66 4
@


1.9
log
@Continued implementation of selection splitting.
@
text
@d42 1
a42 3
      WitBaAltPt (WitBaMat *, WitPeriod fillPer, WitPeriod initExpPer);
         //
         // selExpPeriod_ <-- initExpPer.
a69 11
      WitPeriod selExpPeriod ();
         //
         // Returns the period currently selected for explosding requirements
         // from fillPeriod_, updating it, as needed ("lazy evaluation").

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitPeriod, selExpPeriod)

a88 5

      WitPeriod selExpPeriod_;
         //
         // The Period selected for exploding internal demands on
         // myBaMat_->myMaterial () in fillPeriod_, if any, else -1.
@


1.8
log
@Re-factoring for selection splitting.
@
text
@d72 1
a72 1
      WitBoolean hasExpPer (WitPeriod & expPer);
d74 2
a75 4
         // Returns TRUE, iff there is a Period selected for exploding in
         // fillPeriod_.
         // Sets expPer to the selected Period, if any, else -1.
         // Uses "lazy evaluation", i.e., updates the exp Period as needed.
@


1.7
log
@Continued implementation of selection splitting with the new design.
@
text
@d42 3
a44 1
      WitBaAltPt (WitBaMat *, WitPeriod);
a52 8
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBaMat *, myBaMat)
      accessFunc (WitPeriod,  expPeriod)
      accessFunc (WitBoolean, useable)

      //------------------------------------------------------------------------
d72 13
d99 1
a99 1
         // theBaMat that owns this BaAltPt.
d101 1
a101 1
      const WitPeriod expPeriod_;
d103 1
a103 1
         // The explosion period associated with this BaAltPt.
d105 1
a105 1
      WitBoolean useable_;
d107 2
a108 2
         // TRUE, if myPeriod_ is currently eligible for selection by the BaMat
         // that owns this BaAltPt.
@


1.6
log
@Continued implementation of selection splitting with the new design.
@
text
@d70 1
a70 1
      virtual void printSelection (WitSelector *);
@


1.5
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@d54 2
d63 4
@


1.4
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d68 4
@


1.3
log
@Refactoring for selection splitting.
@
text
@d24 1
a24 1
// An AltPt at which the build-ahead scheme can be alterted.
d42 1
a42 4
      WitBaAltPt (WitBaMat * theBaMat, WitPeriod thePer);
         //
         // theBaMat is the BaMat that is to own this BaAltPt.
         // thePer is the Period selected for explosion.
d79 8
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d77 1
a77 3
      copyCtorAndAssignment (WitBaAltPt);
         //
         // Prevents unintentional copying and assignment.
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
