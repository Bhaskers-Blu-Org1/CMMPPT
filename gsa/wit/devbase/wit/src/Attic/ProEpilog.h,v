head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2005.08.19.21.38.03;	author rjw;	state dead;
branches;
next	1.2;

1.2
date	2005.08.12.19.35.29;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.13.21.18.46;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[multi-thread]:
   Moved PROLOG/EPILOG responsibility from the inner layer of the API
   to the outer layer.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef ProEpilogH
#define ProEpilogH

//------------------------------------------------------------------------------
// Header file: "ProEpilog.h"
//
// Contains the macros for the API prolog and epilog code.
//
// Contains the declaration of struct AbortApiExc.
//------------------------------------------------------------------------------

#include <typedefs.h>

//------------------------------------------------------------------------------
// PROLOG:       Generates code required at beginning of user callable routine.
// QUIET_PROLOG: Same as PROLOG, but suppresses informational messages.
//
// funcName: Name of api function.
// Must be called from scope WitRun.
//------------------------------------------------------------------------------

#define PROLOG(funcName)                                                       \
                                                                               \
   try                                                                         \
      {                                                                        \
      myApiMgr_->enteringApiFunction (funcName, false);                        \
                                                                               \
         {                                                                     \

#define QUIET_PROLOG(funcName)                                                 \
                                                                               \
   try                                                                         \
      {                                                                        \
      myApiMgr_->enteringApiFunction (funcName, true);                         \
                                                                               \
         {                                                                     \

//------------------------------------------------------------------------------
// EPILOG  Generates code required at end of user callable routine.
// Must be called from scope WitRun.
//------------------------------------------------------------------------------

   // Indicate  API function is being exited.
   // In catch block, if this is not the function invoked by user then
   // throw exception to move up to next API function in call tree.
   //
#define EPILOG                                                                 \
                                                                               \
         }                                                                     \
                                                                               \
      myApiMgr_->leavingApiFunction ();                                        \
                                                                               \
      } /* end of try block */                                                 \
                                                                               \
   catch (WitAbortApiExc & theExc)                                             \
      {                                                                        \
      myApiMgr_->handleAbortApiExc (theExc);                                   \
      }                                                                        \
                                                                               \
   return myApiMgr_->apiRc ();                                                 \

//------------------------------------------------------------------------------
// Struct AbortApiExc
//
// "Abort API Exception"
// Exceptions of this type are caught at the end of the API function that was
// called by the application program and cause it either to return execution to
// the application program or throw an ErrorExc.
//------------------------------------------------------------------------------

struct WitAbortApiExc
   {
   int myMsgNum_;
      //
      // The number of the message that caused this exception to be thrown.
   };

#endif
@


1.2
log
@[multi-threads]
@
text
@@


1.1
log
@[exceptions]
@
text
@d66 1
a66 1
      myApiMgr_->handle (theExc);                                              \
@

