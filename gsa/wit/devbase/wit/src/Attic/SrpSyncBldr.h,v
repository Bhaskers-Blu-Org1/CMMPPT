head	1.23;
access;
symbols;
locks; strict;
comment	@ * @;


1.23
date	2006.01.09.20.02.31;	author rjw;	state dead;
branches;
next	1.22;

1.22
date	2006.01.05.22.53.46;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.05.22.27.11;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.04.23.07.40;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.03.20.44.07;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.03.19.00.04;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.03.17.12.43;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.30.23.37.56;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.29.23.22.24;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.29.21.36.34;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.29.20.55.12;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.28.22.58.59;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.28.18.57.50;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.27.19.43.40;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.23.21.12.02;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.23.18.16.33;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.22.23.17.30;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.22.22.07.05;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.22.21.30.51;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.21.23.46.09;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.21.22.44.47;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.20.22.48.24;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.20.19.45.39;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.23
log
@[shared-resource pegging]
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef SrpSyncBldrH
#define SrpSyncBldrH

//------------------------------------------------------------------------------
// Header file: "SrpSyncBldr.h"
//
// Contains the declaration of the following class:
//
//    SrpSyncBldr
//------------------------------------------------------------------------------

#include <SrpSyncBldr.h>
#include <Assoc.h>
#include <Mapping.h>
#include <Schedule.h>

//------------------------------------------------------------------------------
// Class SrpSyncBldr
//
// "Shared-Resource Pegging Synchronization Builder"
// Responsible for building an SrpExpSync.
//
// Class Hierarchy:
//
// ProbAssoc
//    SrpSyncBldr
//
// Implemented in SrpExpSync.C.
//------------------------------------------------------------------------------

class WitSrpSyncBldr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitSrpSyncBldr (
            WitPipSeqMgr *,
            WitPtrSched <WitDemand,   WitDblDblStack> & theShipSyncPairs,
            WitPtrSched <WitBomEntry, WitDblDblStack> & theConsSyncPairs);
         //
         // theShipSyncPairs refers to myShipSyncPairs_ for the SrpExpSync to be
         //    built.
         // theConsSyncPairs refers to myConsSyncPairs_ for the SrpExpSync to be
         //    built.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpSyncBldr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void buildSync ();
         //
         // Builds the explosion synchronization.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void setUpSharing ();
         //
         // Sets up sharingMode_, sharedExecVol_, and usedExecVol_.

      void explodeShipment (
            WitDemand * theDemand,
            WitPeriod   shipPer,
            double      incShipVol);
         //
         // Explodes a shipment of incShipVol units to theDemand in shipPer.

      void fillReqs (WitPart * thePart, WitPeriod thePer);
         //
         // Fills the requirements on thePart in thePer.

      void netWithSupply (WitPart * thePart, WitPeriod thePer);
         //
         // Fills the appropriate portion of the requirement on thePart in
         // thePer by netting against supply.

      void explodeToProd (WitPart * thePart, WitPeriod expPer);
         //
         // Fills the appropriate portion of the requirement on thePart in
         // expPer by exploding to production.

      void shareExecVol (
            WitBopEntry * theBopEnt,
            WitPeriod     execPer,
            double &      incExecVol);
         //
         // Adjusts incExecVol and updates resource-sharing data corresponding
         // to the use if incExecVol units of
         // theBopEnt->myOperation ()->execVol ()[execPer] by theBopEnt.

      void explodeBomEntry (
            WitBomEntry * theBomEnt,
            WitPeriod     execPer,
            double        incExecVol);
         //
         // Explodes incExecVol units through theBomEnt in execPer.

      void pushOrMerge (
            WitDblDblStack & thePairs,
            double           incVol,
            double           prevVol);
         //
         // Adds the pair (incVol, prevVol) to the beginning of thePairs,
         // merging it with the first pair in thePairs, if appropriate.

      void reverseSyncPairs ();
         //
         // Reverses the contents of each DblDblStack in myShipSyncPairs_ and
         // myConsSyncPairs_.

      noCopyCtorAssign (WitSrpSyncBldr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitPipSeqMgr * const myPipSeqMgr_;
         //
         // The PipSeqMgr for this SrpSyncBldr.

      WitSrpExpSpec * mySrpExpSpec_;
         //
         // The SrpExpSpec owned by this SrpPegger.

      WitPtrSched <WitDemand, WitDblDblStack> & myShipSyncPairs_;
         //
         // Ref to myShipSyncPairs_ for the SrpExpSync.

      WitPtrSched <WitBomEntry, WitDblDblStack> & myConsSyncPairs_;
         //
         // Ref to myConsSyncPairs_ for the SrpExpSync.

      WitReqSched * myReqSched_;
         //
         // The ReqSched owned by this SrpSyncBldr.

      WitSchedule <WitPart, double> filledReqVol_;
         //
         // filledReqVol_ (thePart)[thePer] is the cumulative requirement volume
         // for thePart in thePer that has already been filled.

      WitMapping <WitOperation, bool> sharingMode_;
         //
         // sharingMode_ (theOpn) is true, iff theOpn has more than one
         // explodeable BopEntry.

      WitSchedule <WitOperation, double> sharedExecVol_;
         //
         // If sharingMode (theOpn) is true:
         //    sharedExecVol_ (theOpn)[execPer] is the portion of
         //    theOpn->execVol[execPer] that has been shared among the
         //    BopEntries for theOpn.
         // otherwise sharedExecVol_ (theOpn) is not allocated.

      WitSchedule <WitBopEntry, double> usedExecVol_;
         //
         // If sharingMode (theBopEnt->myOperation ()) is true:
         //    usedExecVol_ (theBopEnt)[execPer] is the portion of
         //    theBopEnt->myOperation ()->execVol[execPer] that has been used by
         //    theBopEnt;
         // otherwise usedExecVol_ (theBopEnt) is not allocated.
   };

#endif
@


1.22
log
@[shared-resource pegging]
@
text
@@


1.21
log
@[shared-resource pegging]
@
text
@d119 4
a122 1
      void addTo (WitDblDblStack & thePairs, double incVol, double prevVol);
d124 1
a124 1
         // Adds the pair (incVol, prevVol) to he beginning of thePairs,
@


1.20
log
@[shared-resource pegging]
@
text
@d119 5
@


1.19
log
@[shared-resource pegging]
@
text
@d23 1
d78 4
d103 9
d154 21
@


1.18
log
@[shared-resource pegging]
@
text
@d88 1
a88 12
      void netWithSupply (
            WitPart * thePart,
            WitPeriod thePer,
            double    fillVol);
         //
         // Fills fillVol units of requirement on thePart in thePer by netting
         // against supply.

      void explodeToProd (
            WitPart * thePart,
            WitPeriod expPer,
            double    fillVol);
d90 7
a96 2
         // Fills fillVol units of requirement on thePart in thePer by exploding
         // to production.
@


1.17
log
@[shared-resource pegging]
@
text
@a48 1
            WitSrpOldSpec *,
a87 5
      void fillReqsOld (WitPart * thePart, WitPeriod thePer);
         //
         // Fills the requirements on thePart in thePer.
         // Old version.

a125 4
      WitSrpOldSpec * const mySrpOldSpec_;
         //
         // The SrpOldSpec for this SrpSyncBldr.

@


1.16
log
@[shared-resource pegging]
@
text
@d89 5
d136 4
@


1.15
log
@[shared-resource pegging]
@
text
@d49 1
a49 1
            WitSrpExpSpec *,
d127 1
a127 1
      WitSrpExpSpec * const mySrpExpSpec_;
d129 1
a129 1
         // The SrpExpSpec for this SrpSyncBldr.
@


1.14
log
@[shared-resource pegging]
@
text
@d50 2
a51 2
            WitPtrSched <WitDemand,   WitDblDblStack> & theShipDefPairs,
            WitPtrSched <WitBomEntry, WitDblDblStack> & theConsDefPairs);
d53 1
a53 1
         // theShipDefPairs refers to myShipDefPairs_ for the SrpExpSync to be
d55 1
a55 1
         // theConsDefPairs refers to myConsDefPairs_ for the SrpExpSync to be
d112 1
a112 1
      void reverseDefPairs ();
d114 2
a115 2
         // Reverses the contents of each DblDblStack in myShipDefPairs_ and
         // myConsDefPairs_.
d131 1
a131 1
      WitPtrSched <WitDemand, WitDblDblStack> & myShipDefPairs_;
d133 1
a133 1
         // Ref to myShipDefPairs_ for the SrpExpSync.
d135 1
a135 1
      WitPtrSched <WitBomEntry, WitDblDblStack> & myConsDefPairs_;
d137 1
a137 1
         // Ref to myConsDefPairs_ for the SrpExpSync.
@


1.13
log
@[shared-resource pegging]
@
text
@d105 7
@


1.12
log
@[shared-resource pegging]
@
text
@d105 5
@


1.11
log
@[shared-resource peging]
@
text
@d119 1
a119 1
      WitPtrSched <WitDemand, WitDblDblStack> & itsShipDefPairs_;
d123 1
a123 1
      WitPtrSched <WitBomEntry, WitDblDblStack> & itsConsDefPairs_;
@


1.10
log
@[shared-resource pegging]
@
text
@d78 7
@


1.9
log
@[shared-resource pegging]
@
text
@d49 1
a49 1
            WitSrpExpGuide *,
d108 1
a108 1
      WitSrpExpGuide * const mySrpExpGuide_;
d110 1
a110 1
         // The SrpExpGuide for this SrpSyncBldr.
@


1.8
log
@[shared-resource pegging]
@
text
@a77 8
      void setUp ();
         //
         // Sets up building of the explosion synchronization.

      void explodeShipments ();
         //
         // Explodes the shipments in the shipment sequence.

d85 1
a85 1
            double &  netReqVol);
d87 2
a88 2
         // Nets netReqVol units of requirement on thePart in thePer against
         // supply.
d93 1
a93 1
            double &  netReqVol);
d95 2
a96 2
         // Fills the requirements on thePart in thePer by exploding to
         // production, updating netReqVol.
a127 12

      WitSchedule <WitOperation, double> unusedExecVol_;
         //
         // unusedExecVol_ (theOpn)[execPer] is the portion of
         // theOpn->execVol ()[execPer] that has not yet been used in building
         // the explosion synchronization.

      WitSchedule <WitPart, double> unusedSupplyVol_;
         //
         // unusedSupplyVol_ (thePart)[supPer] is the portion of
         // thePart->supplyVol ()[supPer] that has not yet been used in building
         // the explosion synchronization.
@


1.7
log
@[shared-resource pegging]
@
text
@d132 5
@


1.6
log
@[shared-resource pegging]
@
text
@d47 10
a56 1
      WitSrpSyncBldr (WitSrpExpGuide *);
d68 1
a68 4
      void buildSync (
            WitPipSeqMgr *                              thePipSeqMgr,
            WitPtrSched <WitDemand,   WitDblDblStack> & theShipDefPairs,
            WitPtrSched <WitBomEntry, WitDblDblStack> & theConsDefPairs);
d70 1
a70 6
         // Builds an explosion synchronization.
         // Uses the shipment sequence from thePipSeqMgr.
         // theShipDefPairs refers to myShipDefPairs_ for the SrpExpSync to be
         //    built.
         // theConsDefPairs refers to myConsDefPairs_ for the SrpExpSync to be
         //    built.
d82 1
a82 1
      void explodeShipments (WitDemTripStack & theShipSeq);
d84 1
a84 1
         // Explodes the shipments in theShipSeq.
d112 4
d120 1
a120 1
      WitPtrSched <WitDemand, WitDblDblStack> * myShipDefPairsPtr_;
d122 1
a122 1
         // Ptr to myShipDefPairs_ for the SrpExpSync.
d124 1
a124 1
      WitPtrSched <WitBomEntry, WitDblDblStack> * myConsDefPairsPtr_;
d126 1
a126 1
         // Ptr to myConsDefPairs_ for the SrpExpSync.
@


1.5
log
@[shared-resource pegging]
@
text
@d47 1
a47 1
      WitSrpSyncBldr (WitProblem *);
d111 4
@


1.4
log
@[shared-resource pegging]
@
text
@d44 1
a44 1
      // Public member functions.
d47 5
a51 11
      static void buildSync (
            WitPtrSched <WitDemand, WitDblDblStack>   & theShipDefPairs,
            WitPtrSched <WitBomEntry, WitDblDblStack> & theConsDefPairs,
            WitPipSeqMgr *                              thePipSeqMgr);
         //
         // Builds an SrpExpSync.
         // theShipDefPairs refers to myShipDefPairs_ for the SrpExpSync to be
         //    built.
         // theConsDefPairs refers to myConsDefPairs_ for the SrpExpSync to be
         //    built.
         // Uses the shipment sequence from thePipSeqMgr.
d53 1
a53 1
   private:
d56 1
a56 1
      // Constructor functions.
d59 2
a60 2
      WitSrpSyncBldr (
            WitProblem *,
d64 2
d71 1
a71 5
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitSrpSyncBldr ();
d74 1
a74 1
      // Other private member functions.
d77 1
a77 1
      void buildSync (WitPipSeqMgr * thePipSeqMgr);
d79 1
a79 2
         // Builds the explosion synchronization.
         // Uses the shipment sequence from thePipSeqMgr.
d81 1
a81 1
      void setUp ();
d83 1
a83 1
         // Sets up this SrpSyncBldr for building the explosion synchronization.
d111 1
a111 1
      WitPtrSched <WitDemand, WitDblDblStack> & myShipDefPairs_;
d113 1
a113 1
         // Ref to myShipDefPairs_ for the SrpExpSync.
d115 1
a115 1
      WitPtrSched <WitBomEntry, WitDblDblStack> & myConsDefPairs_;
d117 1
a117 1
         // Ref to myConsDefPairs_ for the SrpExpSync.
@


1.3
log
@[shared-resource pegging]
@
text
@d48 2
a49 2
            WitPtrSched <WitDemand, WitDblDblStack>   & theShipReqs,
            WitPtrSched <WitBomEntry, WitDblDblStack> & theConsReqs,
d53 4
a56 2
         // theShipReqs refers to myShipReqs_ for the SrpExpSync to be built.
         // theConsReqs refers to myConsReqs_ for the SrpExpSync to be built.
d67 2
a68 2
            WitPtrSched <WitDemand,   WitDblDblStack> & theShipReqs,
            WitPtrSched <WitBomEntry, WitDblDblStack> & theConsReqs);
d70 4
a73 2
         // theShipReqs refers to myShipReqs_ for the SrpExpSync to be built.
         // theConsReqs refers to myConsReqs_ for the SrpExpSync to be built.
d120 1
a120 1
      WitPtrSched <WitDemand, WitDblDblStack> & myShipReqs_;
d122 1
a122 1
         // Ref to myShipReqs_ for the SrpExpSync.
d124 1
a124 1
      WitPtrSched <WitBomEntry, WitDblDblStack> & myConsReqs_;
d126 1
a126 1
         // Ref to myConsReqs_ for the SrpExpSync.
@


1.2
log
@[shared-resource pegging]
@
text
@a47 1
            WitSrpCoord *                               theSrpCoord,
d49 2
a50 1
            WitPtrSched <WitBomEntry, WitDblDblStack> & theConsReqs);
d52 1
a52 1
         // Builds an SrpExpSync for theSrpCoord.
d55 1
d64 1
a64 1
            WitSrpCoord *                               theSrpCoord,
a67 2
         // Constructs an SrpSyncBldr for building an SrpExpSync for
         // theSrpCoord.
d81 1
a81 1
      void buildSync ();
d83 2
a84 1
         // Builds the explosion synchronization for mySrpCoord_.
a123 4
      WitSrpCoord * const mySrpCoord_;
         //
         // The SrpCoord for this SrpSyncBldr.

@


1.1
log
@[shared-resource pegging]
@
text
@d29 1
a29 2
// Responsible for computing the explosion synchronization for Shared-Resource
// Pegging.
d47 8
a54 3
      static void buildExpSync (WitSrpExpSync * theSrpExpSync);
         //
         // Builds theSrpExpSync.
d62 9
a70 1
      WitSrpSyncBldr (WitSrpExpSync *);
d82 1
a82 1
      void build ();
d116 9
a124 1
      WitSrpExpSync * const mySrpExpSync_;
d126 1
a126 1
         // The SrpExpSync for this SrpSyncBldr.
@

