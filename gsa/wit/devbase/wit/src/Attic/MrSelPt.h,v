head	1.11;
access;
symbols
	EndRw-branch:1.10.0.6
	Root-of-EndRw:1.10
	rwToStl:1.10.0.4
	latest_sce_3_10_20010924:1.10.0.2
	sce_3_10_20010924:1.10;
locks; strict;
comment	@ * @;


1.11
date	2003.03.03.23.26.56;	author rjw;	state dead;
branches;
next	1.10;

1.10
date	2001.08.30.20.29.24;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.24.22.03.21;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.23.21.13.53;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.22.20.41.49;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.21.17.31.45;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.17.22.00.10;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.12.19.58.25;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.06.16.13.38;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.28.23.11.16;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.27.21.45.11;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Removed all empty files from WIT (64 of them).
@
text
@@


1.10
log
@Refactoring for constrained stock reallocation.
@
text
@@


1.9
log
@Refactoring for constrained stock reallocation.
@
text
@a0 130
//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MrSelPtH
#define MrSelPtH

//------------------------------------------------------------------------------
// Header file: "MrSelPt.h"
//
// Contains the declaration of class template MrSelPt <MrArgs>.
//------------------------------------------------------------------------------

#include <MrCand.h>
#include <SelPt.h>

//------------------------------------------------------------------------------
// Class Template MrSelPt <MrArgs>
//
// "Multi-Route Selection Point"
// Represents a location (in the BOM structure) and period at which multi-route
// selection is to be performed.
//
// For more information on this template, see:
//    "General Comments on the Multi-Route Class Templates" in MrMgr.h.
//
// Class Hierarchy:
//
// SelPt
//    MrSelPt <MrArgs>
//
// Parametric     implementation         in MultiRoute_TI.h.
// Non-parametric implementation for Pmr in ProdMR.C.
// Non-parametric implementation for Cmr in ConsMR.C.
//------------------------------------------------------------------------------

template <MrArgDecs>
      class WitMrSelPt: public WitSelPt
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrSelPt (WitMrSelSite <MrArgs> * theMrSelSite, WitPeriod thePer);
         //
         // myMrSelSite_ <-- theMrSelSite.
         // myPer_       <-- thePer.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMrSelPt ();

      //------------------------------------------------------------------------
      // Overrides from class SelPt.
      //------------------------------------------------------------------------

      virtual void        alterSelection ();
      virtual void        printSelection ();
      virtual WitSelMgr * mySelMgr       ();
      virtual void        prtID          ();        
      virtual WitBoolean  splittable     ();   
      virtual WitPart *   myFillPart     ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void printID ();
         //
         // Prints a string identifying this MrSelPt.

      void select (CandComp * theCandComp);
         //
         // Causes this MrSelPt to select theCandComp.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBoolean, hasResAlt)

      inline WitMrCand <MrArgs> * selMrCand ()
         {
         return WitMrCand <MrArgs>::safeCast (selSelCand ());
         }

   private:

      //------------------------------------------------------------------------
      // Private typedefs.
      //------------------------------------------------------------------------

      typedef WitObjStItr <WitMrCand <MrArgs> > WitMrCandItr;

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssignTemp (WitMrSelPt, MrArgs);

      FILE * msgFile ();

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMrSelSite <MrArgs> * const myMrSelSite_;
         //
         // The MrSelSite that owns this MrSelPt.

      const WitPeriod myPer_;
         //
         // The period in which a CandComp is to be selected.

      WitBoolean hasResAlt_;
         //
         // TRUE, iff this MrSelPt currently has a selection and an 
         // shortage-resolving alternative to the current selection exists.
   };

#endif
@


1.8
log
@Refactoring for constrained stock reallocation.
@
text
@d66 6
a71 7
      virtual void        alterSelection   ();
      virtual void        printSelection   ();
      virtual WitSelMgr * mySelMgr         ();
      virtual void        prtID            ();        
      virtual WitBoolean  splittable       ();   
      virtual void        adjustSplitBound (WitSelCand *, double &);
      virtual WitPart *   myFillPart       ();
@


1.7
log
@Refactoring for constrained stock reallocation.
@
text
@a65 1
      virtual WitTlObj *  selectedObj      ();  
d71 1
a71 1
      virtual void        adjustSplitBound (WitTlObj *, double &);
d94 1
a94 1
         return WitMrCand <MrArgs>::downCast (selSelCand ());
@


1.6
log
@Refactoring for constrained stock reallocation.
@
text
@d16 1
a16 2
// Contains the declaration    of class template MrSelPt <MrArgs>.
// Contains the implementation of class template MrSelPt <MrArgs>.
d37 3
a39 3
// Parametric     implementation             in this file.
// Non-parametric implementation for PmrArgs in ProdMR.C.
// Non-parametric implementation for CmrArgs in ConsMR.C.
d91 6
a96 2
      accessFunc (WitMrCand <MrArgs> *, selMrCand)
      accessFunc (WitBoolean,           hasResAlt)
a125 5
      WitMrCand <MrArgs> * selMrCand_;
         //
         // The MrCand that represents the CandComp currently selected for this
         // MrSelPt, or NULL, if there is no selection.

a130 143

//------------------------------------------------------------------------------
// Implementation of class template MrSelPt <MrArgs>.
//------------------------------------------------------------------------------

template <MrArgDecs>
      WitMrSelPt <MrArgs>::WitMrSelPt (
            WitMrSelSite <MrArgs> * theMrSelSite, 
            WitPeriod               thePer):

         WitSelPt     (),

         myMrSelSite_ (theMrSelSite),
         myPer_       (thePer),
         selMrCand_   (NULL),
         hasResAlt_   (witFALSE)
   {
   CandComp *           theCandComp;
   WitMrCandItr         theMrCandItr;
   WitMrCand <MrArgs> * theMrCand;

   theCandComp = myMrSelSite_->defaultCandComp (myPer_);

   witAssert (theCandComp != NULL);

   selMrCand_  = myMrSelSite_->myMrCandFor (theCandComp);

   theMrCandItr.attachTo (myMrSelSite_->myMrCands ());

   while (theMrCandItr.advance (theMrCand))
      if (theMrCand->isEligible (myPer_))
         if (theMrCand != selMrCand_)
            {
            hasResAlt_ = witTRUE;

            break;
            }
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      WitMrSelPt <MrArgs>::~WitMrSelPt ()
   {
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      WitTlObj * WitMrSelPt <MrArgs>::selectedObj ()
   {
   CandComp * theCandComp;

   witAssert (selMrCand_ != NULL);

   theCandComp = selMrCand_->myCandComp ();

   return (WitTlObj *) theCandComp;
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      void WitMrSelPt <MrArgs>::alterSelection ()
   {
   WitMrCandItr         theMrCandItr;
   WitMrCand <MrArgs> * theMrCand;

   witAssert (selMrCand_ != NULL);

   selMrCand_->setPrevSel (myPer_);

   selMrCand_ = NULL;
   hasResAlt_  = witFALSE;

   theMrCandItr.attachTo (myMrSelSite_->myMrCands ());

   while (theMrCandItr.advance (theMrCand))
      if (theMrCand->isEligible (myPer_))
         if (! theMrCand->prevSel ()[myPer_])
            if (selMrCand_ == NULL)
               selMrCand_ = theMrCand;
            else
               {
               hasResAlt_ = witTRUE;

               return;
               }
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      WitSelMgr * WitMrSelPt <MrArgs>::mySelMgr ()
   {
   return myMrSelSite_->myMrMgr ();
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      WitBoolean WitMrSelPt <MrArgs>::splittable ()
   {
   return witFALSE;
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      void WitMrSelPt <MrArgs>::adjustSplitBound (
         WitTlObj * theTlObj, 
         double & splitBound)
   {
   CandComp * theCandComp;

   theCandComp = (CandComp *) theTlObj;

   myMrSelSite_->myMrMgr ()->adjustSplitBound (theCandComp, myPer_, splitBound);
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      void WitMrSelPt <MrArgs>::select (CandComp * theCandComp)
   {
   WitMrCand <MrArgs> * theMrCand;

   theMrCand = myMrSelSite_->myMrCandFor (theCandComp);

   witAssert (theMrCand != selMrCand_);

   witAssert (! theMrCand->prevSel ()[myPer_]);

   selMrCand_ = theMrCand;
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      FILE * WitMrSelPt <MrArgs>::msgFile ()
   {
   return myMrSelSite_->msgFile ();
   }
@


1.5
log
@Implemented selection splitting speed-up by partial allocation reuse.
@
text
@d117 1
a117 1
         // Represents the SelComp at which a CandComp is to be selected.
@


1.4
log
@Refactoring.
@
text
@d74 1
@


1.3
log
@Minor modification.
@
text
@d16 2
a17 1
// Contains the declaration of class template MrSelPt <MrArgs>.
d20 1
a21 1
#include <MrMgr.h>
d38 3
a40 1
// Implemented in MultiRoute.C.
d132 143
@


1.2
log
@Refactoring.
@
text
@d37 1
a37 1
// Implemented in MultiRt.C.
@


1.1
log
@Initial implementation of multi-route class templates.
@
text
@d23 1
a23 1
// Class template MrSelPt <MrArgs>
d49 1
a49 1
      WitMrSelPt (WitMrSelSite <MrArgs> * theMrSelSite, WitPeriod expPer);
d52 1
a52 1
         // myExpPer_    <-- expPer.
d80 1
a80 1
      void select (WitBopEntry * theBopEnt);
d82 1
a82 1
         // Causes this MrSelPt to select theBopEnt.
d113 1
a113 1
         // Represents the Part at which a BopEntry is to be selected.
d115 1
a115 1
      const WitPeriod myExpPer_;
d117 1
a117 1
         // The explosion period in which a BopEntry is to be selected.
d121 1
a121 1
         // The MrCand that represents the BopEntry currently selected for this
@

