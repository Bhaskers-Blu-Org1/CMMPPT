head	1.3;
access;
symbols
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2000.07.14.20.27.31;	author bobw;	state dead;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.08;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Outer API: Merged all no-longer-documented functions into one section.
Outer API: Moved build-ahead by demand functions into the no-longer-documented
   section.
Simplified the rules for two-way multiple execution periods.
@
text
@//------------------------------------------------------------------------------
//
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------

#ifndef MeDirMgrH
#define MeDirMgrH

//------------------------------------------------------------------------------
// Header file: "MeDirMgr.h"
//
// Contains the declaration of class MeDirMgr.
//------------------------------------------------------------------------------

#include <Schedule.h>
#include <DynPer.h>

//------------------------------------------------------------------------------
// Class MeDirMgr
//
// "Multi-Exec Direction Manager"
// Responsible for owning and manipulating the MeDirs for multi-exec.
//
// Implemented in MultiEx.C
//------------------------------------------------------------------------------

class WitMeDirMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMeDirMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMeDirMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void preInc (
            WitBoolean asapMultiExec, 
            WitBoolean prefBA,
            WitPart *  thePart,
            WitPeriod  thePer);
         //
         // To be called at the beginning of HeurAllPerf::inc.
         // ASAP Multi-Exec will be used for top-level JIT demand, iff
         // asapMultiExec is TRUE. prefBA should be TRUE, iff build-ahead by
         // demand would be done on a preferential basis.
         // extPart_ <-- thePart
         // incPer_  <-- thePer

      WitMeDir * chooseMeDir (
            WitBopEntry * theBopEnt,
            WitPeriod     prodPer,
            WitPeriod     fillPer);
         //
         // Returns the MeDir appropriate for exploding through theBopEnt in 
         // prodPer to fill requirements in fillPer.

      void resetCurMeDirs (WitPeriod thePer);
         //
         // Sets the current multi-exec directions to their initial state for a
         // commit in thePer.

      void placeReqs (
            WitBopEntry * theBopEnt,
            WitPeriod     execPer,
            WitPeriod     fillPer,
            WitPart *     consPart,
            WitPeriod     consPer);
         //
         // Records the fact that an explosion through theBopEnt by executing in
         // execPer to fill requirements in fillPer caused requirements to be
         // placed on consPart in consPer.

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      inline WitMeDir * curMeDir (WitPart * thePart, WitPeriod fillPer)
         {
         return curMeDirForUpdate (thePart, fillPer);
         }
         //
         // curMeDir (thePart, fillPer) is the current multi-exec direction for
         // filling requirements for thePart in fillPer.

      accessFunc (WitMeDir *,                       jitExtMeDir)
      accessFunc (WitMeDir *,                       baExtMeDir)
      accessFunc (WitPart *,                        extPart)
      accessFunc (WitPeriod,                        incPer)
      accessFunc (const WitDynPerStack (WitPart) &, dirPartPers)
      accessFunc (WitMeDir *,                       myMeDirForNstn)
      accessFunc (WitMeDir *,                       myMeDirForAsap)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      copyCtorAndAssignment (WitMeDirMgr);
         //
         // Prevents unintentional copying and assignment.

      void setCurMeDir (
            WitPart *  thePart, 
            WitPeriod  fillPer, 
            WitMeDir * theMeDir);
         //
         // Sets curMeDir (thePart, fillPer) to theMeDir.

      WitMeDir * myMeDirByBool (WitBoolean forAsapMe);
         //
         // Returns the MeDir owned by this MeDirMgr for ASAP multi-exec, if
         // forAsapMe is TRUE; otherwise for NSTN multi-exec.

      WitBoolean isMine (WitMeDir * theMeDir);
         //
         // Returns TRUE, iff theMeDir belongs to this MeDirMgr.

      WitBoolean curMeDirIsClear ();
         //
         // Returns TRUE, iff curMeDir is currently all NULLs.

      inline WitMeDir * & curMeDirForUpdate (
            WitPart * thePart, 
            WitPeriod fillPer)
         {
         return (WitMeDir * &) curMeDirTl_ (thePart, fillPer);
         }
         //
         // Updateable version of curMeDir (*, *).

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitMeDir * jitExtMeDir_;
         //
         // The current MeDir to be used for external demand without build-ahead
         // by demand (Just-In-Time).

      WitMeDir * baExtMeDir_;
         //
         // The current MeDir to be used for external demand with    build-ahead
         // by demand.

      WitPart * extPart_;
         //
         // The current Part on which external demand has been placed.

      WitPeriod incPer_;
         //
         // The current period in which an incremental allocation is being
         // performed.

      WitSchedule (WitPart, WitTypelessPtr) curMeDirTl_;
         //
         // Data for curMeDir (Part *, Period).

      WitDynPerStack (WitPart) dirPartPers_;
         //
         // The set of (Part, fill period)s for which curMeDir (*, *) has been
         // set.

      WitMeDir * myMeDirForNstn_;
         //
         // The MeDir owned by this MeDirMgr for NSTN multi-exec.

      WitMeDir * myMeDirForAsap_;
         //
         // The MeDir owned by this MeDirMgr for ASAP multi-exec.
   };

#endif
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
