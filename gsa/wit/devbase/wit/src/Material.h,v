head	1.81;
access;
symbols
	sce_5_01_20080919:1.67
	latest_sce_4_20_20060523:1.36.0.2
	sce_4_20_20060523:1.36
	latest_sce4_20_OSL:1.35.0.2
	sce_4_20_OSL:1.35
	sce_410_withVa:1.34
	sce_4_05_20040511:1.32
	sce_4_00_20040201:1.24
	nextGenBranch:1.22.0.2
	nextGenRoot:1.22
	sce_3_30_20030627:1.22
	EndRw-branch:1.19.0.4
	Root-of-EndRw:1.19
	rwToStl:1.19.0.2
	latest_sce_3_10_20010924:1.9.0.2
	sce_3_10_20010924:1.9
	latest_sce_3_00_20010601:1.8.0.2
	sce_3_00_20010601:1.8
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5
	latest_sce_2_31_20001003:1.3.0.2
	sce_2_31_20001003:1.3
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.81
date	2011.09.28.23.49.30;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2011.09.24.00.27.51;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2011.08.30.20.17.37;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2010.06.18.14.15.17;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2010.06.17.16.17.14;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2010.06.16.18.33.37;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2010.01.06.20.42.40;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2010.01.06.20.10.32;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2009.12.30.20.02.27;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2009.12.30.18.46.37;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2009.12.30.18.30.37;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2009.12.29.22.53.17;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2009.12.29.21.28.04;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2009.12.21.20.35.47;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2007.12.11.22.00.27;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2007.11.15.17.15.33;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2007.11.13.20.17.39;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2007.11.07.21.50.12;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2007.10.15.21.50.34;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2007.10.02.18.32.43;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2007.09.28.22.08.25;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2007.09.11.18.55.18;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2007.09.11.18.09.17;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2007.07.16.20.14.59;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2007.07.16.18.12.33;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2007.07.13.23.05.32;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2007.06.08.18.09.40;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2007.06.05.21.06.00;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2007.06.05.16.15.23;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2007.05.30.22.57.06;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2007.05.30.16.01.19;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2007.05.25.18.39.10;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2007.05.24.18.52.21;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2007.05.22.15.46.52;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2007.05.10.21.58.10;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2007.05.10.21.14.41;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2007.05.10.17.22.14;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2007.05.04.23.27.10;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2007.02.28.20.04.57;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2007.02.27.22.59.29;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2007.02.27.19.59.31;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2007.02.08.22.47.35;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2007.01.09.21.07.48;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2007.01.09.19.14.15;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2006.09.05.21.11.06;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2006.05.02.17.34.01;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2005.09.30.21.57.56;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2005.06.13.16.48.47;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2005.02.24.23.23.56;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2004.04.01.21.05.12;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2004.03.31.22.56.08;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.24.22.21.31;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.23.19.14.24;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2004.03.22.16.37.18;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.12.17.21.55;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.10.22.53.19;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.03.19.07.27;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.09.22.44.05;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.11.18.29.13;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.03.19.16.48.18;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.13.23.06.28;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.01.02.22.18.31;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2002.06.05.19.31.33;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.04.23.07.21;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.03.22.35.19;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.03.16.01.49;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.30.20.08.59;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.29.21.35.46;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.08.19.21.52;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.03.23.16.39;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.04.22.14.32.09;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.28.00.12.58;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.19.18.50.58;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.17.15.11.14;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.06.19.22.09;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.08.16.37.05;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.42;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.21.20.03.24;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.14.22.38.34;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.06;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.24;	author wit;	state Exp;
branches;
next	;


desc
@@


1.81
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MaterialH
#define MaterialH

//------------------------------------------------------------------------------
// Header file: "Material.h"
//
// Contains the declaration of class Material.
//------------------------------------------------------------------------------

#include <Part.h>

//------------------------------------------------------------------------------
// Class Material.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       DelComp
//          Node
//             Part
//                Material
//
// Implemented in MatCap.C.
//------------------------------------------------------------------------------

class WitMaterial: public WitPart
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMaterial (const char * theName, WitCompMgr * theCompMgr);
         //
         // Part <<< theName.
         // Part <<< theCompMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMaterial ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBoundSet *,             stockBounds)
      accessFunc (const WitFlexVec <int> &,  buildAheadUB)
      accessFunc (bool,                      baSelSplit)
      accessFunc (bool,                      asapPipOrder)
      accessFunc (const WitFlexVec <bool> &, mandEC)
      accessFunc (const WitDblFlexVec &,     stockVol)

      inline const WitDblFlexVec & stockCost () const
         {
         return stockCost_.curDblFlexVec ();
         }

      inline bool buildNstn ()
         {
         return (myBaDir_ == nstn);
         }

      inline bool buildAsap ()
         {
         return (myBaDir_ == asap);
         }

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitMaterial)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double defStockCost,    0.0)
      defaultValue (bool   defBaSelSplit,   false)
      defaultValue (bool   defAsapPipOrder, false)

      static int defBuildAheadUB (WitProblem * theProblem);

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setStockCost    (const WitIVRealArg &);
      void setBuildNstn    (bool);
      void setBuildAsap    (bool);
      void setBuildAheadUB (const int *);
      void setBaSelSplit   (bool);
      void setAsapPipOrder (bool);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePreMandEC (WitPeriod, bool);
         //
         // Valid only when preprocessing is being performed.

      void storePostStockVol (const WitTVec <double> &);
         //
         // Valid only when postprocessing is being performed.

      void storeOptStockVol     (WitPeriod, double);
         //
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.

      void storeStochStockCost (const WitDblFlexVec &);
      void storeStochStockVol  (const WitDblFlexVec &);
         //
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void          writeMultiObjVecs (WitObjective *);
      virtual void          copySelfInto      (WitCompMgr * theCompMgr);
      virtual void          recount           ();
      virtual void          unpreprocess      ();
      virtual void          clearOptSoln      ();
      virtual void          clearStochSoln    ();
      virtual WitMaterial * thisMat           ();
         //
         // Overrides from class Component.

      virtual WitMsgFrag categoryFrag ();
      virtual WitAttr    apiCategory  ();
      virtual bool       canStock     (WitPeriod t);
      virtual void       display      ();
         //
         // Overrides from class Part.

      void copyAttrsFrom (WitMaterial * theMat);
         //
         // Copies the input attributes of theMat into this Material.

      bool nstnBaNeeded ();
         //
         // Returns true, iff NSTN build-ahead is appropriate for this Material.

      void rollBackScrap (
            WitTVec <double> & theStockVol,
            WitTVec <double> & theScrapVol);
         //
         // Moves scrapping of this Material backward in time so that any volume
         // of this Material that is scrapped is scrapped as early as possible.
         // Operates on theStockVol and theScrapVol instead of the actual
         // stockVol and scrapVol for the material, to allow the roll back
         // to be temporary, if need be.

   private:

      //------------------------------------------------------------------------
      // Private enum BaDir.
      //
      // Distinguishes between the two directions of build-ahead by Material:
      // nstn and asap and the absence of build-ahead: noBa.
      //------------------------------------------------------------------------

      enum WitBaDir
         {
         nstn,
         asap,
         noBa
         };

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMaterial);

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      virtual WitBoundSet * myBoundSet ();
         //
         // Override from class Component.

      virtual const char * categoryKeyWord ();
         //
         // Override from class Part.

      virtual WitPeriod findExplosionPeriod (WitPeriod fillPer);
         //
         // Override from class Part.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # Materials constructed before this Material.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitObjVec stockCost_;
         //
         // Stores the cost coefficients of the stock variables for this
         // Material.
         // Range: (-inf, +inf).

      WitBoundSet * stockBounds_;
         //
         // Bounds on stock volumes.

      WitBaDir myBaDir_;
         //
         // Indicates the heuristic build-ahead style that has been requested 
         // for this Material.
         // This is a hidden input data attribute, which implements the
         // following officially documented input data attributes:
         //
         //    buildNstn
         //    buildAsap

      WitFlexVec <int> buildAheadUB_;
         //
         // Used by heuristic implosion/allocation.
         // Assuming one of the build-ahead techniques for Materials is being
         // used for this Material, buildAheadUB_[thePer] is the maximum 
         // number of periods that this Material can be built ahead of thePer.
         // Range: [0, nPeriods - 1].
         // Note that nPeriods - 1 implies no restriction.

      bool baSelSplit_;
         //
         // true, iff selection splitting for build-ahead is to performed at 
         // this Material.

      bool asapPipOrder_;
         //
         // If true,  PIP is to use ASAP pegging order on this Material;
         // if false, PIP is to use NSTN pegging order on this Material.

      //------------------------------------------------------------------------
      // Data set by general preprocessing
      //------------------------------------------------------------------------

      WitFlexVec <bool> mandEC_;
         //
         // mandEC_[thePer] is true iff this Material cannot be stocked in
         // thePer due to a mandatory engineering change.

      //------------------------------------------------------------------------
      // Data set by postprocessing.
      //------------------------------------------------------------------------

      WitDblFlexVec stockVol_;
         //
         // stockVol_[thePer] is the stock (inventory) level of this Material at
         // the end of thePer.
   };

#endif
@


1.80
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.79
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d37 2
a38 168
{
public:

//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMaterial (const char * theName, WitCompMgr * theCompMgr);
//
// Part <<< theName.
// Part <<< theCompMgr.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitMaterial ();

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (WitBoundSet *,             stockBounds)
accessFunc (const WitFlexVec <int> &,  buildAheadUB)
accessFunc (bool,                      baSelSplit)
accessFunc (bool,                      asapPipOrder)
accessFunc (const WitFlexVec <bool> &, mandEC)
accessFunc (const WitDblFlexVec &,     stockVol)

inline const WitDblFlexVec & stockCost () const
{
return stockCost_.curDblFlexVec ();
}

inline bool buildNstn ()
{
return (myBaDir_ == nstn);
}

inline bool buildAsap ()
{
return (myBaDir_ == asap);
}

//------------------------------------------------------------------------
// Mapping functions
//------------------------------------------------------------------------

decMappingIndex (WitMaterial)

static int nInstances (WitProblem *);

//------------------------------------------------------------------------
// Default value functions.
//------------------------------------------------------------------------

defaultValue (double defStockCost,    0.0)
defaultValue (bool   defBaSelSplit,   false)
defaultValue (bool   defAsapPipOrder, false)

static int defBuildAheadUB (WitProblem * theProblem);

//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------

void setStockCost    (const WitIVRealArg &);
void setBuildNstn    (bool);
void setBuildAsap    (bool);
void setBuildAheadUB (const int *);
void setBaSelSplit   (bool);
void setAsapPipOrder (bool);

//------------------------------------------------------------------------
// store<Activity><Attr> functions.
// Each of these functions sets the value of indicated attribute to the
// value of the argument.
// Each function is only valid when the indicated activity is being
// performed.
//------------------------------------------------------------------------

void storePreMandEC (WitPeriod, bool);
//
// Valid only when preprocessing is being performed.

void storePostStockVol (const WitTVec <double> &);
//
// Valid only when postprocessing is being performed.

void storeOptStockVol     (WitPeriod, double);
//
// Valid only when the optimizing implosion subsystem is uploading the
// solution.

void storeStochStockCost (const WitDblFlexVec &);
void storeStochStockVol  (const WitDblFlexVec &);
//
// Valid only when the stochastic implosion subsystem is uploading
// data.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual void          writeMultiObjVecs (WitObjective *);
virtual void          copySelfInto      (WitCompMgr * theCompMgr);
virtual void          recount           ();
virtual void          unpreprocess      ();
virtual void          clearOptSoln      ();
virtual void          clearStochSoln    ();
virtual WitMaterial * thisMat           ();
//
// Overrides from class Component.

virtual WitMsgFrag categoryFrag ();
virtual WitAttr    apiCategory  ();
virtual bool       canStock     (WitPeriod t);
virtual void       display      ();
//
// Overrides from class Part.

void copyAttrsFrom (WitMaterial * theMat);
//
// Copies the input attributes of theMat into this Material.

bool nstnBaNeeded ();
//
// Returns true, iff NSTN build-ahead is appropriate for this Material.

void rollBackScrap (
WitTVec <double> & theStockVol,
WitTVec <double> & theScrapVol);
//
// Moves scrapping of this Material backward in time so that any volume
// of this Material that is scrapped is scrapped as early as possible.
// Operates on theStockVol and theScrapVol instead of the actual
// stockVol and scrapVol for the material, to allow the roll back
// to be temporary, if need be.

private:

//------------------------------------------------------------------------
// Private enum BaDir.
//
// Distinguishes between the two directions of build-ahead by Material:
// nstn and asap and the absence of build-ahead: noBa.
//------------------------------------------------------------------------

enum WitBaDir
{
nstn,
asap,
noBa
};

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitMaterial);

virtual void writeDataAttrs ();
//
// Override from class Component.
d40 248
a287 82
virtual WitBoundSet * myBoundSet ();
//
// Override from class Component.

virtual const char * categoryKeyWord ();
//
// Override from class Part.

virtual WitPeriod findExplosionPeriod (WitPeriod fillPer);
//
// Override from class Part.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

int mappingIndex_;
//
// Mapping index: see Mapping.h.
// == # Materials constructed before this Material.

//------------------------------------------------------------------------
// Input data.
//------------------------------------------------------------------------

WitObjVec stockCost_;
//
// Stores the cost coefficients of the stock variables for this
// Material.
// Range: (-inf, +inf).

WitBoundSet * stockBounds_;
//
// Bounds on stock volumes.

WitBaDir myBaDir_;
//
// Indicates the heuristic build-ahead style that has been requested
// for this Material.
// This is a hidden input data attribute, which implements the
// following officially documented input data attributes:
//
//    buildNstn
//    buildAsap

WitFlexVec <int> buildAheadUB_;
//
// Used by heuristic implosion/allocation.
// Assuming one of the build-ahead techniques for Materials is being
// used for this Material, buildAheadUB_[thePer] is the maximum
// number of periods that this Material can be built ahead of thePer.
// Range: [0, nPeriods - 1].
// Note that nPeriods - 1 implies no restriction.

bool baSelSplit_;
//
// true, iff selection splitting for build-ahead is to performed at
// this Material.

bool asapPipOrder_;
//
// If true,  PIP is to use ASAP pegging order on this Material;
// if false, PIP is to use NSTN pegging order on this Material.

//------------------------------------------------------------------------
// Data set by general preprocessing
//------------------------------------------------------------------------

WitFlexVec <bool> mandEC_;
//
// mandEC_[thePer] is true iff this Material cannot be stocked in
// thePer due to a mandatory engineering change.

//------------------------------------------------------------------------
// Data set by postprocessing.
//------------------------------------------------------------------------

WitDblFlexVec stockVol_;
//
// stockVol_[thePer] is the stock (inventory) level of this Material at
// the end of thePer.
};
@


1.78
log
@Lead Time Bounds.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d37 168
a204 2
   {
   public:
d206 82
a287 248
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMaterial (const char * theName, WitCompMgr * theCompMgr);
         //
         // Part <<< theName.
         // Part <<< theCompMgr.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMaterial ();

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitBoundSet *,             stockBounds)
      accessFunc (const WitFlexVec <int> &,  buildAheadUB)
      accessFunc (bool,                      baSelSplit)
      accessFunc (bool,                      asapPipOrder)
      accessFunc (const WitFlexVec <bool> &, mandEC)
      accessFunc (const WitDblFlexVec &,     stockVol)

      inline const WitDblFlexVec & stockCost () const
         {
         return stockCost_.curDblFlexVec ();
         }

      inline bool buildNstn ()
         {
         return (myBaDir_ == nstn);
         }

      inline bool buildAsap ()
         {
         return (myBaDir_ == asap);
         }

      //------------------------------------------------------------------------
      // Mapping functions
      //------------------------------------------------------------------------

      decMappingIndex (WitMaterial)

      static int nInstances (WitProblem *);

      //------------------------------------------------------------------------
      // Default value functions.
      //------------------------------------------------------------------------

      defaultValue (double defStockCost,    0.0)
      defaultValue (bool   defBaSelSplit,   false)
      defaultValue (bool   defAsapPipOrder, false)

      static int defBuildAheadUB (WitProblem * theProblem);

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setStockCost    (const WitIVRealArg &);
      void setBuildNstn    (bool);
      void setBuildAsap    (bool);
      void setBuildAheadUB (const int *);
      void setBaSelSplit   (bool);
      void setAsapPipOrder (bool);

      //------------------------------------------------------------------------
      // store<Activity><Attr> functions.
      // Each of these functions sets the value of indicated attribute to the
      // value of the argument.
      // Each function is only valid when the indicated activity is being
      // performed.
      //------------------------------------------------------------------------

      void storePreMandEC (WitPeriod, bool);
         //
         // Valid only when preprocessing is being performed.

      void storePostStockVol (const WitTVec <double> &);
         //
         // Valid only when postprocessing is being performed.

      void storeOptStockVol     (WitPeriod, double);
         //
         // Valid only when the optimizing implosion subsystem is uploading the
         // solution.

      void storeStochStockCost (const WitDblFlexVec &);
      void storeStochStockVol  (const WitDblFlexVec &);
         //
         // Valid only when the stochastic implosion subsystem is uploading
         // data.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void          writeMultiObjVecs (WitObjective *);
      virtual void          copySelfInto      (WitCompMgr * theCompMgr);
      virtual void          recount           ();
      virtual void          unpreprocess      ();
      virtual void          clearOptSoln      ();
      virtual void          clearStochSoln    ();
      virtual WitMaterial * thisMat           ();
         //
         // Overrides from class Component.

      virtual WitMsgFrag categoryFrag ();
      virtual WitAttr    apiCategory  ();
      virtual bool       canStock     (WitPeriod t);
      virtual void       display      ();
         //
         // Overrides from class Part.

      void copyAttrsFrom (WitMaterial * theMat);
         //
         // Copies the input attributes of theMat into this Material.

      bool nstnBaNeeded ();
         //
         // Returns true, iff NSTN build-ahead is appropriate for this Material.

      void rollBackScrap (
            WitTVec <double> & theStockVol,
            WitTVec <double> & theScrapVol);
         //
         // Moves scrapping of this Material backward in time so that any volume
         // of this Material that is scrapped is scrapped as early as possible.
         // Operates on theStockVol and theScrapVol instead of the actual
         // stockVol and scrapVol for the material, to allow the roll back
         // to be temporary, if need be.

   private:

      //------------------------------------------------------------------------
      // Private enum BaDir.
      //
      // Distinguishes between the two directions of build-ahead by Material:
      // nstn and asap and the absence of build-ahead: noBa.
      //------------------------------------------------------------------------

      enum WitBaDir
         {
         nstn,
         asap,
         noBa
         };

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMaterial);

      virtual void writeDataAttrs ();
         //
         // Override from class Component.

      virtual WitBoundSet * myBoundSet ();
         //
         // Override from class Component.

      virtual const char * categoryKeyWord ();
         //
         // Override from class Part.

      virtual WitPeriod findExplosionPeriod (WitPeriod fillPer);
         //
         // Override from class Part.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      int mappingIndex_;
         //
         // Mapping index: see Mapping.h.
         // == # Materials constructed before this Material.

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      WitObjVec stockCost_;
         //
         // Stores the cost coefficients of the stock variables for this
         // Material.
         // Range: (-inf, +inf).

      WitBoundSet * stockBounds_;
         //
         // Bounds on stock volumes.

      WitBaDir myBaDir_;
         //
         // Indicates the heuristic build-ahead style that has been requested 
         // for this Material.
         // This is a hidden input data attribute, which implements the
         // following officially documented input data attributes:
         //
         //    buildNstn
         //    buildAsap

      WitFlexVec <int> buildAheadUB_;
         //
         // Used by heuristic implosion/allocation.
         // Assuming one of the build-ahead techniques for Materials is being
         // used for this Material, buildAheadUB_[thePer] is the maximum 
         // number of periods that this Material can be built ahead of thePer.
         // Range: [0, nPeriods - 1].
         // Note that nPeriods - 1 implies no restriction.

      bool baSelSplit_;
         //
         // true, iff selection splitting for build-ahead is to performed at 
         // this Material.

      bool asapPipOrder_;
         //
         // If true,  PIP is to use ASAP pegging order on this Material;
         // if false, PIP is to use NSTN pegging order on this Material.

      //------------------------------------------------------------------------
      // Data set by general preprocessing
      //------------------------------------------------------------------------

      WitFlexVec <bool> mandEC_;
         //
         // mandEC_[thePer] is true iff this Material cannot be stocked in
         // thePer due to a mandatory engineering change.

      //------------------------------------------------------------------------
      // Data set by postprocessing.
      //------------------------------------------------------------------------

      WitDblFlexVec stockVol_;
         //
         // stockVol_[thePer] is the stock (inventory) level of this Material at
         // the end of thePer.
   };
@


1.77
log
@Bounded Lead Times
@
text
@a64 1
      accessFunc (bool,                      boundedLeadTime)
d97 3
a99 4
      defaultValue (double defStockCost,       0.0)
      defaultValue (bool   defBoundedLeadTime, false)
      defaultValue (bool   defBaSelSplit,      false)
      defaultValue (bool   defAsapPipOrder,    false)
d107 6
a112 7
      void setStockCost       (const WitIVRealArg &);
      void setBuildNstn       (bool);
      void setBuildAsap       (bool);
      void setBuildAheadUB    (const int *);
      void setBoundedLeadTime (bool);
      void setBaSelSplit      (bool);
      void setAsapPipOrder    (bool);
a259 4
      bool boundedLeadTime_;
         //
         // true, iff lead time bounds apply to this Material.

@


1.76
log
@Bounded Lead Times
@
text
@d65 1
a65 1
      accessFunc (bool,                      boundedLeadTimes)
d98 4
a101 4
      defaultValue (double defStockCost,        0.0)
      defaultValue (bool   defBoundedLeadTimes, false)
      defaultValue (bool   defBaSelSplit,       false)
      defaultValue (bool   defAsapPipOrder,     false)
d109 7
a115 7
      void setStockCost        (const WitIVRealArg &);
      void setBuildNstn        (bool);
      void setBuildAsap        (bool);
      void setBuildAheadUB     (const int *);
      void setBoundedLeadTimes (bool);
      void setBaSelSplit       (bool);
      void setAsapPipOrder     (bool);
d263 1
a263 1
      bool boundedLeadTimes_;
@


1.75
log
@Multi-objective mode
@
text
@d65 1
d98 4
a101 3
      defaultValue (double defStockCost,    0.0)
      defaultValue (bool   defBaSelSplit,   false)
      defaultValue (bool   defAsapPipOrder, false)
d109 7
a115 6
      void setStockCost    (const WitIVRealArg &);
      void setBuildNstn    (bool);
      void setBuildAsap    (bool);
      void setBuildAheadUB (const int *);
      void setBaSelSplit   (bool);
      void setAsapPipOrder (bool);
d263 4
@


1.74
log
@Multi-objective mode
@
text
@d72 1
a72 1
         return stockCostObjVec_.curDblFlexVec ();
d231 1
a231 1
      WitObjVec stockCostObjVec_;
@


1.73
log
@Multi-Objective Mode
@
text
@a62 1
      accessFunc (const WitObjVec &,         stockCostObjVec)
@


1.72
log
@Multi-Objective Mode
@
text
@d63 1
@


1.71
log
@Multi-Objective Mode
@
text
@d233 1
a233 1
         // Stores the cost coefficients for the stock variables for this
@


1.70
log
@Multi-Objective Mode
@
text
@d72 1
a72 1
         return stockCost_.curDblFlexVec ();
d231 1
a231 1
      WitObjVec stockCost_;
d233 2
a234 2
         // stockCost ()[thePer] is the cost coef. on the stock variable for
         // this Material for the current objective in thePer.
@


1.69
log
@Multi-Objective Mode
@
text
@a62 1
      accessFunc (const WitDblFlexVec &,     stockCost)
d70 5
@


1.68
log
@Removed some references to objective #1.
@
text
@d141 7
a147 6
      virtual void          copySelfInto   (WitCompMgr * theCompMgr);
      virtual void          recount        ();
      virtual void          unpreprocess   ();
      virtual void          clearOptSoln   ();
      virtual void          clearStochSoln ();
      virtual WitMaterial * thisMat        ();
d227 1
a227 1
      WitDblFlexVec stockCost_;
d229 2
a230 2
         // stockCost_[thePer] is the cost coef. on the stock variable for this
         // Material in thePer.
@


1.67
log
@Stochastic Implosion
@
text
@d228 2
a229 3
         // If objective #1 is being used, then stockCost_[thePer] is the
         // user-specified cost coef. on the stock variable for this Material
         // in thePer.
@


1.66
log
@Stochastic Implosion
@
text
@d131 2
a132 1
      void storeStochStockVol (const WitDblFlexVec &);
@


1.65
log
@Stochastic Implosion
@
text
@d118 4
a141 1
      virtual void          passPreRefs    ();
@


1.64
log
@Stochastic Implosion
@
text
@d122 5
d140 1
a140 1
      virtual void          importOptSoln  ();
@


1.63
log
@Stochastic Implosion
@
text
@a37 2
      friend class WitPostAccess;

d111 1
a111 1
      // storeStoch<Attr> functions.
d114 2
a115 1
      // Valid only when the stochastic implosion subsystem is uploading data.
d118 4
d123 3
@


1.62
log
@Stochastic Implosion
@
text
@d125 7
a131 6
      virtual void          copySelfInto  (WitCompMgr * theCompMgr);
      virtual void          recount       ();
      virtual void          passPreRefs   ();
      virtual void          unpreprocess  ();
      virtual void          importOptSoln ();
      virtual WitMaterial * thisMat       ();
@


1.61
log
@Stochastic Implosion
@
text
@d119 1
a119 1
      void storeStochStockVol (const WitTVec <double> &);
@


1.60
log
@Stochastic Implosion
@
text
@d185 1
a185 1
      virtual WitBoundSet * myBoundSetForUpdate ();
@


1.59
log
@Stochastic Implosion
@
text
@d113 1
a113 1
      // loadInStoch<Attr> functions.
d119 1
a119 1
      void loadInStochStockVol (const WitTVec <double> &);
@


1.58
log
@ASAP Pegging Order
@
text
@d113 9
d125 6
a130 7
      virtual void          copySelfInto    (WitCompMgr * theCompMgr);
      virtual void          recount         ();
      virtual void          passPreRefs     ();
      virtual void          unpreprocess    ();
      virtual void          importOptSoln   ();
      virtual void          importStochSoln ();
      virtual WitMaterial * thisMat         ();
@


1.57
log
@ASAP Pegging Order
@
text
@d69 1
a69 1
      accessFunc (bool,                      asapPip)
d95 3
a97 3
      defaultValue (double defStockCost,  0.0)
      defaultValue (bool   defBaSelSplit, false)
      defaultValue (bool   defAsapPip,    false)
d110 1
a110 1
      void setAsapPip      (bool);
d237 1
a237 1
      bool asapPip_;
@


1.56
log
@ASAP pegging order
@
text
@d110 1
@


1.55
log
@Stochastic Implosion
@
text
@d69 1
d97 1
d236 5
@


1.54
log
@Stochastic Implosion
@
text
@d113 7
a119 7
      virtual void          copySelfInto   (WitCompMgr * theCompMgr);
      virtual void          recount        ();
      virtual void          passPreRefs    ();
      virtual void          unpreprocess   ();
      virtual void          acquireOptSoln ();
      virtual void          passStochRefs  ();
      virtual WitMaterial * thisMat        ();
@


1.53
log
@Stochastic Implosion
@
text
@a115 1
      virtual void          importPreData  ();
@


1.52
log
@Stochastic Implosion
@
text
@d115 1
@


1.51
log
@Stochastic Implosion
@
text
@a37 1
      friend class WitPreAccess;
@


1.50
log
@Stochastic Implosion
@
text
@d116 1
@


1.49
log
@Stochastic Implosion
@
text
@d114 6
a119 6
      virtual void          copySelfInto     (WitCompMgr * theCompMgr);
      virtual void          recount          ();
      virtual void          unpreprocess     ();
      virtual void          importOptImpSoln (WitPeriod);
      virtual void          passStochRefs    ();
      virtual WitMaterial * thisMat          ();
@


1.48
log
@Stochastic Implosion
@
text
@d118 1
a118 1
      virtual void          passStochData    ();
@


1.47
log
@Stochastic Implosion
@
text
@d118 1
a118 2
      virtual void          clearStochSoln   ();
      virtual void          restoreStochSoln ();
@


1.46
log
@Stochastic Implosion
@
text
@a113 16
      virtual WitMsgFrag categoryFrag ();
         //
         // Override from class Part.

      virtual WitAttr apiCategory ();
         //
         // Override from class Part.

      virtual bool canStock (WitPeriod t);
         //
         // Override from class Part.

      virtual void display ();
         //
         // Override from class Part.

d124 7
@


1.45
log
@Stochastic Implosion
@
text
@a39 1
      friend class WitOptAccess;
@


1.44
log
@Stochastic Implosion
@
text
@d134 1
@


1.43
log
@[disallowed backlog]
@
text
@d131 6
a136 4
      virtual void          copySelfInto (WitCompMgr * theCompMgr);
      virtual void          recount      ();
      virtual void          unpreprocess ();
      virtual WitMaterial * thisMat      ();
@


1.42
log
@[disallowed backlog]
@
text
@d39 2
a155 4
      static void transmitDMPs ();
         //
         // See comment on transmitAllDMPs in CompMgr.h.

@


1.41
log
@Rescinded all changed made since 1/31/07.
@
text
@d38 2
@


1.40
log
@[disallowed backlog]
@
text
@a62 3
      accessFunc (const WitFlexVec <bool> &, mandEC)
      accessFunc (const WitDblFlexVec &,     stockVol)

d67 2
d129 1
d152 1
a152 5
      //------------------------------------------------------------------------
      // Restricted public member data.
      //------------------------------------------------------------------------

      WitPreRestricted <WitFlexVec <bool> > mandEC_;
d154 1
a154 7
         // mandEC_[thePer] is true iff this Material cannot be stocked in
         // thePer due to a mandatory engineering change.

      WitOptPostRestricted <WitDblFlexVec> stockVol_;
         //
         // stockVol_[thePer] is the stock (inventory) level of this Material at
         // the end of thePer.
d241 18
@


1.39
log
@witCopy<Object>Data
@
text
@d63 3
a69 2
      accessFunc (const WitFlexVec <bool> &, mandEC)
      accessFunc (const WitDblFlexVec &,     stockVol)
a129 1
      virtual void          unpreprocess ();
d152 5
a156 1
      static void transmitDMPs ();
d158 7
a164 1
         // See comment on transmitAllDMPs in CompMgr.h.
a250 18

      //------------------------------------------------------------------------
      // Data set by general preprocessing
      //------------------------------------------------------------------------

      WitFlexVec <bool> mandEC_;
         //
         // mandEC_[thePer] is true iff this Material cannot be stocked in
         // thePer due to a mandatory engineering change.

      //------------------------------------------------------------------------
      // Data set by postprocessing.
      //------------------------------------------------------------------------

      WitDblFlexVec stockVol_;
         //
         // stockVol_[thePer] is the stock (inventory) level of this Material at
         // the end of thePer.
@


1.38
log
@witCopy<Object>Data
@
text
@d134 4
a181 4
      void copyAttrsFrom (WitMaterial * theMat);
         //
         // Copies the input attributes of theMat into this Material.

@


1.37
log
@NSTN residualVols
@
text
@d111 1
a111 1
      virtual WitMsgFragID categoryFragID ();
@


1.36
log
@Updated the copyright date on all source files.
@
text
@a147 4
      virtual const WitDblFlexVec & residualVol ();
         //
         // Override from class Part.

a258 4

      WitDblFlexVec residualVol_;
        //
        // See Part::residualVol ().
@


1.35
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.34
log
@Changed names of obj1 attributes, e.g., obj1ScrapCost to scrapCost.
@
text
@a130 3
      virtual void          loadPre      ();
      virtual void          loadPost     ();
      virtual void          loadOpt      ();
d152 4
@


1.33
log
@Vector PropRt.
@
text
@d63 1
a63 1
      accessFunc (const WitDblFlexVec &,     obj1StockCost)
d92 2
a93 2
      defaultValue (double defObj1StockCost, 0.0)
      defaultValue (bool   defBaSelSplit,    false)
d101 5
a105 5
      void setObj1StockCost (const WitIVRealArg &);
      void setBuildNstn     (bool);
      void setBuildAsap     (bool);
      void setBuildAheadUB  (const int *);
      void setBaSelSplit    (bool);
d210 1
a210 1
      WitDblFlexVec obj1StockCost_;
d212 1
a212 1
         // If objective #1 is being used, then obj1StockCost[thePer] is the
@


1.32
log
@Double Precision.
@
text
@d101 1
a101 1
      void setObj1StockCost (const WitInVecRA &);
@


1.31
log
@Double Precision.
@
text
@a100 1
      void setObj1StockCost (const float *);
@


1.30
log
@Double Precision.
@
text
@d102 1
@


1.29
log
@Double Precision.
@
text
@d63 6
a68 6
      accessFunc (const WitFlexVec <double> &, obj1StockCost)
      accessFunc (WitBoundSet *,               stockBounds)
      accessFunc (const WitFlexVec <int> &,    buildAheadUB)
      accessFunc (bool,                        baSelSplit)
      accessFunc (const WitFlexVec <bool> &,   mandEC)
      accessFunc (const WitFlexVec <double> &, stockVol)
d151 1
a151 1
      virtual const WitFlexVec <double> & residualVol ();
d210 1
a210 1
      WitFlexVec <double> obj1StockCost_;
d258 1
a258 1
      WitFlexVec <double> stockVol_;
d263 1
a263 1
      WitFlexVec <double> residualVol_;
@


1.28
log
@Double Precision.
@
text
@d63 6
a68 6
      accessFunc (const WitRealVec &,        obj1StockCost)
      accessFunc (WitBoundSet *,             stockBounds)
      accessFunc (const WitFlexVec <int> &,  buildAheadUB)
      accessFunc (bool,                      baSelSplit)
      accessFunc (const WitFlexVec <bool> &, mandEC)
      accessFunc (const WitRealVec &,        stockVol)
d151 1
a151 1
      virtual const WitRealVec & residualVol ();
d210 1
a210 1
      WitRealVec obj1StockCost_;
d258 1
a258 1
      WitRealVec stockVol_;
d263 1
a263 1
      WitRealVec residualVol_;
@


1.27
log
@Double Precision.
@
text
@d68 1
a68 1
      accessFunc (const WitRealTVc &,        stockVol)
d258 1
a258 1
      WitRealTVc stockVol_;
@


1.26
log
@Double Precision.
@
text
@d68 1
a68 1
      accessFunc (const WitRealVec &,        stockVol)
d258 1
a258 1
      WitRealVec stockVol_;
@


1.25
log
@Double Precision.
@
text
@d92 2
a93 2
      defaultValue (float defObj1StockCost, 0.0)
      defaultValue (bool  defBaSelSplit,    false)
@


1.24
log
@Continued implementation of PIP.
@
text
@d63 6
a68 6
      accessFunc (const WitFlexVec <float> &, obj1StockCost)
      accessFunc (WitBoundSet *,              stockBounds)
      accessFunc (const WitFlexVec <int> &,   buildAheadUB)
      accessFunc (bool,                       baSelSplit)
      accessFunc (const WitFlexVec <bool> &,  mandEC)
      accessFunc (const WitTVec <float> &,    stockVol)
d151 1
a151 1
      virtual const WitFlexVec <float> & residualVol ();
d210 1
a210 1
      WitFlexVec <float> obj1StockCost_;
d212 1
a212 1
         // If objective #1 is being used, then obj1StockCost[t] is the
d214 1
a214 1
         // in period t.
d251 2
a252 2
         // mandEC_[t] is true iff this Material cannot be stocked in period t,
         // due to a mandatory engineering change.
d258 1
a258 1
      WitTVec <float> stockVol_;
d260 2
a261 2
         // stockVol_[t] is the stock (inventory) level of this Material at the
         // end of period t.
d263 1
a263 1
      WitFlexVec <float> residualVol_;
@


1.23
log
@Removed a bad function overload.
@
text
@d164 1
a164 1
      enum BaDir
d221 1
a221 1
      BaDir myBaDir_;
@


1.22
log
@Continued implementation of proportionate routing.
@
text
@d130 1
a130 1
      virtual WitMaterial * myMat        ();
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d127 7
a133 1
      virtual void copySelfInto (WitCompMgr * theCompMgr);
d135 1
a135 19
         // Override from class Component.

      virtual void recount ();
         //
         // Override from class Component.

      virtual void unpreprocess ();
         //
         // Override from class Component.

      virtual void getMaterial (WitMaterial * &);
         //
         // Override from class Component.

      virtual void loadPre  ();
      virtual void loadPost ();
      virtual void loadOpt  ();
         //
         // Override from class Component.
@


1.20
log
@Internal changes.
@
text
@a69 2
      decMappingIndex (WitMaterial)

d79 8
@


1.19
log
@Continued implementation of single-source.
@
text
@d63 6
a68 6
      accessFunc (const WitFlexVec <float> &,      obj1StockCost)
      accessFunc (WitBoundSet *,                   stockBounds)
      accessFunc (const WitFlexVec <int> &,        buildAheadUB)
      accessFunc (WitBoolean,                      baSelSplit)
      accessFunc (const WitFlexVec <WitBoolean> &, mandEC)
      accessFunc (const WitTVec <float> &,         stockVol)
d72 1
a72 1
      inline WitBoolean buildNstn ()
d77 1
a77 1
      inline WitBoolean buildAsap ()
d86 2
a87 2
      defaultValue (float      defObj1StockCost, 0.0)
      defaultValue (WitBoolean defBaSelSplit,    witFALSE)
d96 2
a97 2
      void setBuildNstn     (WitBoolean);
      void setBuildAsap     (WitBoolean);
d99 1
a99 1
      void setBaSelSplit    (WitBoolean);
d113 1
a113 1
      virtual WitBoolean canStock (WitPeriod t);
d143 1
a143 1
      WitBoolean nstnBaNeeded ();
d145 1
a145 1
         // Returns TRUE, iff NSTN build-ahead is appropriate for this Material.
d246 1
a246 1
      WitBoolean baSelSplit_;
d248 1
a248 1
         // TRUE, iff selection splitting for build-ahead is to performed at 
d255 1
a255 1
      WitFlexVec <WitBoolean> mandEC_;
d257 1
a257 1
         // mandEC_[t] is TRUE iff this Material cannot be stocked in period t,
@


1.18
log
@Continued implementation of single-source.
@
text
@a101 6
      // Conditional reference access functions.
      //------------------------------------------------------------------------

      conditionalRef (WitTVec <float>, stockVol, optImpAcc ())

      //------------------------------------------------------------------------
d139 1
@


1.17
log
@Continued implementation of single-source.
@
text
@d105 1
a105 2
      conditionalRef (WitFlexVec <WitBoolean>, mandEC,   preprocAcc ())
      conditionalRef (WitTVec <float>,         stockVol,  optImpAcc ())
d135 4
d143 1
@


1.16
log
@Continued implementation of single-source.
@
text
@d105 2
a106 4
      conditionalRef (WitFlexVec <WitBoolean>, mandEC,       preprocAcc ())
      conditionalRef (WitTVec <float>,         stockVol,      optImpAcc () ||
                                                            postprocAcc ())
      conditionalRef (WitFlexVec <float>,      residualVol, postprocAcc ())
d137 4
@


1.15
log
@Continued implementation of single-source.
@
text
@d105 4
a108 2
      conditionalRef (WitFlexVec <WitBoolean>, mandEC,   preprocAcc ())
      conditionalRef (WitTVec <float>,         stockVol,  optImpAcc ())
a128 9

      virtual void compStockScrapVol (WitTVec <double> &, WitTVec <double> &);
         //
         // Override from class Part.

      void compResidualVol (WitTVec <double> &, WitTVec <double> &);
         //
         // Computes residualVol_.
         // Uses the argument vectors as working vectors.
@


1.14
log
@Continued implementation of single-source.
@
text
@d128 9
a145 4
         //
         // Override from class Component.

      virtual void importPostprocResults ();
@


1.13
log
@Preliminary work on single source.
@
text
@d105 2
a106 4
      conditionalRef (WitFlexVec <WitBoolean>, mandEC,       preprocAcc ())
      conditionalRef (WitTVec <float>,         stockVol,      optImpAcc () ||
                                                            postprocAcc ())
      conditionalRef (WitFlexVec <float>,      residualVol, postprocAcc ())
d137 4
@


1.12
log
@Continued preliminary work on single source.
@
text
@d63 1
a63 1
      accessFunc (const WitFlexVec (float) &,      obj1StockCost)
d65 1
a65 1
      accessFunc (const WitFlexVec (int) &,        buildAheadUB)
d67 1
a67 1
      accessFunc (const WitFlexVec (WitBoolean) &, mandEC)
d105 1
a105 1
      conditionalRef (WitFlexVec (WitBoolean), mandEC,       preprocAcc ())
d108 1
a108 1
      conditionalRef (WitFlexVec (float),      residualVol, postprocAcc ())
d156 1
a156 1
      virtual const WitFlexVec (float) & residualVol ();
d215 1
a215 1
      WitFlexVec (float) obj1StockCost_;
d236 1
a236 1
      WitFlexVec (int) buildAheadUB_;
d254 1
a254 1
      WitFlexVec (WitBoolean) mandEC_;
d268 1
a268 1
      WitFlexVec (float) residualVol_;
@


1.11
log
@Continued implementation of object iteration.
@
text
@d68 1
a68 1
      accessFunc (const WitTVec (float) &,         stockVol)
d106 1
a106 1
      conditionalRef (WitTVec (float),         stockVol,      optImpAcc () ||
d147 2
a148 2
            WitTVec (double) & theStockVol,
            WitTVec (double) & theScrapVol);
d263 1
a263 1
      WitTVec (float) stockVol_;
@


1.10
log
@Continued development of Selective Stock Reallocation.
@
text
@a125 4
      virtual WitMaterial * myMat ();
         //
         // Override from class Part.

d135 4
@


1.9
log
@Continued implementation of selective stock reallocation.
@
text
@d126 1
a126 1
      virtual WitBoolean getMyMaterial (WitMaterial * & theMat);
@


1.8
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d126 1
a126 1
      virtual WitBoolean isaMaterial (WitMaterial * & theMat);
@


1.7
log
@Re-worked the controls for selection splitting.
@
text
@d66 1
d86 2
a87 1
      defaultValue (float defObj1StockCost, 0.0)
d99 1
d244 5
@


1.6
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@a80 7
      inline float baSplitRes ()
         {
         witAssert (myGlobalComp ()->allowSS ());

         return baSplitRes_;
         }

a85 1
      defaultValue (float defBaSplitRes,    0.0)
a96 1
      void setBaSplitRes    (float);
a240 7

      float baSplitRes_;
         //
         // The split resolution for build-ahead at this Material.
         // Selection splitting is to be performed by build-ahead at this 
         // Material, iff baSplitRes_ > 0.0.
         // Range: {0.0} union [1.0, +inf).
@


1.5
log
@Refactoring for selection splitting.
@
text
@d81 7
d93 1
d105 1
d250 7
@


1.4
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d177 1
a177 3
      copyCtorAndAssignment (WitMaterial);
         //
         // Prevents unintentional copying and assignment.
@


1.3
log
@Replaced WitPart.[Ch] with Part.[Ch].
@
text
@d131 1
a131 1
      virtual void copyInto (WitCompMgr * theCompMgr);
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d19 1
a19 1
#include <WitPart.h>
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
