head	1.382;
access;
symbols
	sce_5_01_20080919:1.317
	latest_sce_4_20_20060523:1.200.0.2
	sce_4_20_20060523:1.200
	latest_sce4_20_OSL:1.196.0.2
	sce_4_20_OSL:1.196
	sce_410_withVa:1.181
	sce_4_05_20040511:1.146
	sce_4_00_20040201:1.84
	nextGenBranch:1.62.0.2
	nextGenRoot:1.62
	sce_3_30_20030627:1.61
	EndRw-branch:1.46.0.4
	Root-of-EndRw:1.46
	rwToStl:1.46.0.2
	latest_sce_3_10_20010924:1.26.0.2
	sce_3_10_20010924:1.26
	latest_sce_3_00_20010601:1.16.0.2
	sce_3_00_20010601:1.16
	latest_sce_2_31_20010308:1.11.0.2
	sce_2_31_20010308:1.11
	latest_sce_2_31_20001003:1.6.0.2
	sce_2_31_20001003:1.6
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.382
date	2011.09.28.23.50.40;	author rjw;	state Exp;
branches;
next	1.381;

1.381
date	2011.09.24.00.28.57;	author rjw;	state Exp;
branches;
next	1.380;

1.380
date	2011.08.30.20.18.23;	author rjw;	state Exp;
branches;
next	1.379;

1.379
date	2011.08.25.23.27.09;	author rjw;	state Exp;
branches;
next	1.378;

1.378
date	2011.02.16.17.02.50;	author rjw;	state Exp;
branches;
next	1.377;

1.377
date	2011.02.15.23.26.08;	author rjw;	state Exp;
branches;
next	1.376;

1.376
date	2011.02.15.21.20.21;	author rjw;	state Exp;
branches;
next	1.375;

1.375
date	2011.02.10.00.46.37;	author rjw;	state Exp;
branches;
next	1.374;

1.374
date	2011.02.08.23.46.13;	author rjw;	state Exp;
branches;
next	1.373;

1.373
date	2011.02.08.23.21.15;	author rjw;	state Exp;
branches;
next	1.372;

1.372
date	2011.02.08.21.49.09;	author rjw;	state Exp;
branches;
next	1.371;

1.371
date	2011.02.07.15.46.04;	author rjw;	state Exp;
branches;
next	1.370;

1.370
date	2011.02.03.00.23.04;	author rjw;	state Exp;
branches;
next	1.369;

1.369
date	2011.02.02.00.37.14;	author rjw;	state Exp;
branches;
next	1.368;

1.368
date	2011.01.31.21.21.57;	author rjw;	state Exp;
branches;
next	1.367;

1.367
date	2011.01.27.19.55.54;	author rjw;	state Exp;
branches;
next	1.366;

1.366
date	2011.01.27.16.34.28;	author rjw;	state Exp;
branches;
next	1.365;

1.365
date	2011.01.27.15.12.47;	author rjw;	state Exp;
branches;
next	1.364;

1.364
date	2011.01.27.00.31.30;	author rjw;	state Exp;
branches;
next	1.363;

1.363
date	2011.01.26.22.37.25;	author rjw;	state Exp;
branches;
next	1.362;

1.362
date	2011.01.26.21.25.44;	author rjw;	state Exp;
branches;
next	1.361;

1.361
date	2011.01.14.00.35.23;	author rjw;	state Exp;
branches;
next	1.360;

1.360
date	2011.01.13.00.38.49;	author rjw;	state Exp;
branches;
next	1.359;

1.359
date	2011.01.12.23.09.35;	author rjw;	state Exp;
branches;
next	1.358;

1.358
date	2011.01.11.22.08.32;	author rjw;	state Exp;
branches;
next	1.357;

1.357
date	2010.10.12.22.02.22;	author rjw;	state Exp;
branches;
next	1.356;

1.356
date	2010.10.12.19.48.28;	author rjw;	state Exp;
branches;
next	1.355;

1.355
date	2010.09.24.18.17.23;	author rjw;	state Exp;
branches;
next	1.354;

1.354
date	2010.09.24.15.46.15;	author rjw;	state Exp;
branches;
next	1.353;

1.353
date	2010.09.22.20.21.54;	author rjw;	state Exp;
branches;
next	1.352;

1.352
date	2010.09.07.16.38.59;	author rjw;	state Exp;
branches;
next	1.351;

1.351
date	2010.09.02.20.16.25;	author rjw;	state Exp;
branches;
next	1.350;

1.350
date	2010.09.01.20.25.25;	author rjw;	state Exp;
branches;
next	1.349;

1.349
date	2010.07.01.22.41.22;	author rjw;	state Exp;
branches;
next	1.348;

1.348
date	2010.06.18.18.03.50;	author rjw;	state Exp;
branches;
next	1.347;

1.347
date	2010.06.17.16.17.15;	author rjw;	state Exp;
branches;
next	1.346;

1.346
date	2010.06.16.20.56.29;	author rjw;	state Exp;
branches;
next	1.345;

1.345
date	2010.06.16.18.33.38;	author rjw;	state Exp;
branches;
next	1.344;

1.344
date	2010.06.14.21.15.15;	author rjw;	state Exp;
branches;
next	1.343;

1.343
date	2010.05.21.18.17.57;	author rjw;	state Exp;
branches;
next	1.342;

1.342
date	2010.05.20.23.18.43;	author rjw;	state Exp;
branches;
next	1.341;

1.341
date	2010.05.14.23.49.06;	author rjw;	state Exp;
branches;
next	1.340;

1.340
date	2010.05.14.21.42.32;	author rjw;	state Exp;
branches;
next	1.339;

1.339
date	2010.05.14.17.47.14;	author rjw;	state Exp;
branches;
next	1.338;

1.338
date	2010.05.12.18.38.07;	author rjw;	state Exp;
branches;
next	1.337;

1.337
date	2010.05.11.22.26.28;	author rjw;	state Exp;
branches;
next	1.336;

1.336
date	2010.03.29.21.34.23;	author rjw;	state Exp;
branches;
next	1.335;

1.335
date	2010.03.26.22.22.53;	author rjw;	state Exp;
branches;
next	1.334;

1.334
date	2010.01.29.23.22.52;	author rjw;	state Exp;
branches;
next	1.333;

1.333
date	2010.01.28.20.10.12;	author rjw;	state Exp;
branches;
next	1.332;

1.332
date	2010.01.25.19.45.19;	author rjw;	state Exp;
branches;
next	1.331;

1.331
date	2009.12.14.21.34.55;	author rjw;	state Exp;
branches;
next	1.330;

1.330
date	2009.12.09.21.19.32;	author rjw;	state Exp;
branches;
next	1.329;

1.329
date	2009.12.09.00.15.33;	author rjw;	state Exp;
branches;
next	1.328;

1.328
date	2009.12.05.00.10.20;	author rjw;	state Exp;
branches;
next	1.327;

1.327
date	2009.12.04.23.30.53;	author rjw;	state Exp;
branches;
next	1.326;

1.326
date	2009.11.26.00.24.09;	author rjw;	state Exp;
branches;
next	1.325;

1.325
date	2009.11.17.23.45.48;	author rjw;	state Exp;
branches;
next	1.324;

1.324
date	2009.11.17.19.31.38;	author rjw;	state Exp;
branches;
next	1.323;

1.323
date	2009.11.13.19.01.26;	author rjw;	state Exp;
branches;
next	1.322;

1.322
date	2009.11.12.17.36.37;	author rjw;	state Exp;
branches;
next	1.321;

1.321
date	2009.10.08.16.06.03;	author rjw;	state Exp;
branches;
next	1.320;

1.320
date	2009.01.30.16.07.19;	author rjw;	state Exp;
branches;
next	1.319;

1.319
date	2009.01.05.16.09.42;	author rjw;	state Exp;
branches;
next	1.318;

1.318
date	2008.08.25.20.47.06;	author rjw;	state Exp;
branches;
next	1.317;

1.317
date	2008.07.02.17.48.37;	author rjw;	state Exp;
branches;
next	1.316;

1.316
date	2008.02.25.22.35.10;	author rjw;	state Exp;
branches;
next	1.315;

1.315
date	2008.02.22.23.18.19;	author rjw;	state Exp;
branches;
next	1.314;

1.314
date	2008.02.22.21.36.10;	author rjw;	state Exp;
branches;
next	1.313;

1.313
date	2008.01.21.21.47.18;	author rjw;	state Exp;
branches;
next	1.312;

1.312
date	2008.01.18.22.41.00;	author rjw;	state Exp;
branches;
next	1.311;

1.311
date	2008.01.14.19.21.15;	author rjw;	state Exp;
branches;
next	1.310;

1.310
date	2008.01.11.21.47.42;	author rjw;	state Exp;
branches;
next	1.309;

1.309
date	2008.01.09.22.33.57;	author rjw;	state Exp;
branches;
next	1.308;

1.308
date	2007.12.06.22.53.02;	author rjw;	state Exp;
branches;
next	1.307;

1.307
date	2007.10.30.21.44.18;	author rjw;	state Exp;
branches;
next	1.306;

1.306
date	2007.10.22.19.58.53;	author rjw;	state Exp;
branches;
next	1.305;

1.305
date	2007.10.22.19.20.38;	author rjw;	state Exp;
branches;
next	1.304;

1.304
date	2007.10.22.18.53.59;	author rjw;	state Exp;
branches;
next	1.303;

1.303
date	2007.10.12.23.04.58;	author rjw;	state Exp;
branches;
next	1.302;

1.302
date	2007.08.29.16.24.24;	author rjw;	state Exp;
branches;
next	1.301;

1.301
date	2007.08.28.17.38.36;	author rjw;	state Exp;
branches;
next	1.300;

1.300
date	2007.08.24.21.12.39;	author rjw;	state Exp;
branches;
next	1.299;

1.299
date	2007.08.01.22.41.59;	author rjw;	state Exp;
branches;
next	1.298;

1.298
date	2007.07.16.20.15.00;	author rjw;	state Exp;
branches;
next	1.297;

1.297
date	2007.07.16.18.12.33;	author rjw;	state Exp;
branches;
next	1.296;

1.296
date	2007.06.20.19.07.53;	author rjw;	state Exp;
branches;
next	1.295;

1.295
date	2007.06.19.21.45.51;	author rjw;	state Exp;
branches;
next	1.294;

1.294
date	2007.06.15.22.15.26;	author rjw;	state Exp;
branches;
next	1.293;

1.293
date	2007.06.15.17.44.36;	author rjw;	state Exp;
branches;
next	1.292;

1.292
date	2007.05.21.15.20.11;	author rjw;	state Exp;
branches;
next	1.291;

1.291
date	2007.05.17.17.59.18;	author rjw;	state Exp;
branches;
next	1.290;

1.290
date	2007.05.16.22.16.46;	author rjw;	state Exp;
branches;
next	1.289;

1.289
date	2007.05.04.17.44.58;	author rjw;	state Exp;
branches;
next	1.288;

1.288
date	2007.04.30.19.32.31;	author rjw;	state Exp;
branches;
next	1.287;

1.287
date	2007.04.24.21.18.13;	author rjw;	state Exp;
branches;
next	1.286;

1.286
date	2007.04.23.21.03.21;	author rjw;	state Exp;
branches;
next	1.285;

1.285
date	2007.04.23.20.20.00;	author rjw;	state Exp;
branches;
next	1.284;

1.284
date	2007.04.20.23.31.46;	author rjw;	state Exp;
branches;
next	1.283;

1.283
date	2007.04.20.20.51.14;	author rjw;	state Exp;
branches;
next	1.282;

1.282
date	2007.04.19.21.38.44;	author rjw;	state Exp;
branches;
next	1.281;

1.281
date	2007.04.11.23.03.39;	author rjw;	state Exp;
branches;
next	1.280;

1.280
date	2007.04.11.16.05.41;	author rjw;	state Exp;
branches;
next	1.279;

1.279
date	2007.04.10.19.33.14;	author rjw;	state Exp;
branches;
next	1.278;

1.278
date	2007.04.10.16.33.22;	author rjw;	state Exp;
branches;
next	1.277;

1.277
date	2007.04.09.16.05.08;	author rjw;	state Exp;
branches;
next	1.276;

1.276
date	2007.04.05.20.23.52;	author rjw;	state Exp;
branches;
next	1.275;

1.275
date	2007.04.04.22.08.18;	author rjw;	state Exp;
branches;
next	1.274;

1.274
date	2007.04.03.22.04.05;	author rjw;	state Exp;
branches;
next	1.273;

1.273
date	2007.04.02.23.01.16;	author rjw;	state Exp;
branches;
next	1.272;

1.272
date	2007.04.02.21.21.20;	author rjw;	state Exp;
branches;
next	1.271;

1.271
date	2007.03.30.22.33.03;	author rjw;	state Exp;
branches;
next	1.270;

1.270
date	2007.03.29.21.16.49;	author rjw;	state Exp;
branches;
next	1.269;

1.269
date	2007.03.28.22.14.32;	author rjw;	state Exp;
branches;
next	1.268;

1.268
date	2007.03.20.22.07.24;	author rjw;	state Exp;
branches;
next	1.267;

1.267
date	2007.03.08.22.47.18;	author rjw;	state Exp;
branches;
next	1.266;

1.266
date	2007.03.08.17.02.55;	author rjw;	state Exp;
branches;
next	1.265;

1.265
date	2007.03.02.22.11.02;	author rjw;	state Exp;
branches;
next	1.264;

1.264
date	2007.02.28.22.15.49;	author rjw;	state Exp;
branches;
next	1.263;

1.263
date	2007.01.29.23.12.42;	author rjw;	state Exp;
branches;
next	1.262;

1.262
date	2007.01.29.22.34.13;	author rjw;	state Exp;
branches;
next	1.261;

1.261
date	2007.01.29.21.52.04;	author rjw;	state Exp;
branches;
next	1.260;

1.260
date	2007.01.26.21.03.15;	author rjw;	state Exp;
branches;
next	1.259;

1.259
date	2007.01.26.20.56.57;	author rjw;	state Exp;
branches;
next	1.258;

1.258
date	2007.01.19.23.47.07;	author rjw;	state Exp;
branches;
next	1.257;

1.257
date	2007.01.16.16.53.45;	author rjw;	state Exp;
branches;
next	1.256;

1.256
date	2007.01.16.16.27.39;	author rjw;	state Exp;
branches;
next	1.255;

1.255
date	2007.01.16.00.25.06;	author rjw;	state Exp;
branches;
next	1.254;

1.254
date	2007.01.15.22.25.30;	author rjw;	state Exp;
branches;
next	1.253;

1.253
date	2007.01.15.21.15.15;	author rjw;	state Exp;
branches;
next	1.252;

1.252
date	2007.01.12.23.50.21;	author rjw;	state Exp;
branches;
next	1.251;

1.251
date	2007.01.11.18.38.32;	author rjw;	state Exp;
branches;
next	1.250;

1.250
date	2007.01.09.21.07.48;	author rjw;	state Exp;
branches;
next	1.249;

1.249
date	2007.01.09.15.55.25;	author rjw;	state Exp;
branches;
next	1.248;

1.248
date	2007.01.08.18.38.25;	author rjw;	state Exp;
branches;
next	1.247;

1.247
date	2007.01.03.18.42.21;	author rjw;	state Exp;
branches;
next	1.246;

1.246
date	2006.12.28.21.03.21;	author rjw;	state Exp;
branches;
next	1.245;

1.245
date	2006.12.28.16.39.35;	author rjw;	state Exp;
branches;
next	1.244;

1.244
date	2006.12.26.22.24.07;	author rjw;	state Exp;
branches;
next	1.243;

1.243
date	2006.12.19.19.26.46;	author rjw;	state Exp;
branches;
next	1.242;

1.242
date	2006.12.06.19.52.47;	author rjw;	state Exp;
branches;
next	1.241;

1.241
date	2006.12.01.21.36.36;	author rjw;	state Exp;
branches;
next	1.240;

1.240
date	2006.12.01.19.55.18;	author rjw;	state Exp;
branches;
next	1.239;

1.239
date	2006.11.20.17.04.52;	author rjw;	state Exp;
branches;
next	1.238;

1.238
date	2006.11.18.00.09.22;	author rjw;	state Exp;
branches;
next	1.237;

1.237
date	2006.11.17.20.53.57;	author rjw;	state Exp;
branches;
next	1.236;

1.236
date	2006.11.17.17.22.00;	author rjw;	state Exp;
branches;
next	1.235;

1.235
date	2006.11.17.16.57.47;	author rjw;	state Exp;
branches;
next	1.234;

1.234
date	2006.11.14.23.10.26;	author rjw;	state Exp;
branches;
next	1.233;

1.233
date	2006.11.02.23.07.13;	author rjw;	state Exp;
branches;
next	1.232;

1.232
date	2006.11.01.17.31.46;	author rjw;	state Exp;
branches;
next	1.231;

1.231
date	2006.10.19.21.54.30;	author rjw;	state Exp;
branches;
next	1.230;

1.230
date	2006.10.13.20.47.03;	author rjw;	state Exp;
branches;
next	1.229;

1.229
date	2006.10.12.20.48.11;	author rjw;	state Exp;
branches;
next	1.228;

1.228
date	2006.10.12.19.43.44;	author rjw;	state Exp;
branches;
next	1.227;

1.227
date	2006.10.12.16.22.12;	author rjw;	state Exp;
branches;
next	1.226;

1.226
date	2006.10.11.22.37.21;	author rjw;	state Exp;
branches;
next	1.225;

1.225
date	2006.10.10.19.10.46;	author rjw;	state Exp;
branches;
next	1.224;

1.224
date	2006.10.09.23.25.23;	author rjw;	state Exp;
branches;
next	1.223;

1.223
date	2006.10.05.20.54.54;	author rjw;	state Exp;
branches;
next	1.222;

1.222
date	2006.10.05.18.19.15;	author rjw;	state Exp;
branches;
next	1.221;

1.221
date	2006.10.04.18.45.07;	author rjw;	state Exp;
branches;
next	1.220;

1.220
date	2006.10.02.19.27.35;	author rjw;	state Exp;
branches;
next	1.219;

1.219
date	2006.09.29.22.56.41;	author rjw;	state Exp;
branches;
next	1.218;

1.218
date	2006.09.27.20.10.17;	author rjw;	state Exp;
branches;
next	1.217;

1.217
date	2006.09.21.20.31.52;	author rjw;	state Exp;
branches;
next	1.216;

1.216
date	2006.09.21.15.42.27;	author rjw;	state Exp;
branches;
next	1.215;

1.215
date	2006.09.15.23.09.41;	author rjw;	state Exp;
branches;
next	1.214;

1.214
date	2006.09.15.22.00.37;	author rjw;	state Exp;
branches;
next	1.213;

1.213
date	2006.09.08.16.16.01;	author rjw;	state Exp;
branches;
next	1.212;

1.212
date	2006.08.30.16.37.35;	author rjw;	state Exp;
branches;
next	1.211;

1.211
date	2006.08.24.20.50.27;	author rjw;	state Exp;
branches;
next	1.210;

1.210
date	2006.08.22.21.26.54;	author rjw;	state Exp;
branches;
next	1.209;

1.209
date	2006.08.18.23.32.17;	author rjw;	state Exp;
branches;
next	1.208;

1.208
date	2006.08.18.22.29.02;	author rjw;	state Exp;
branches;
next	1.207;

1.207
date	2006.08.17.22.50.38;	author rjw;	state Exp;
branches;
next	1.206;

1.206
date	2006.08.17.19.36.40;	author rjw;	state Exp;
branches;
next	1.205;

1.205
date	2006.08.16.15.49.18;	author rjw;	state Exp;
branches;
next	1.204;

1.204
date	2006.08.09.18.36.40;	author rjw;	state Exp;
branches;
next	1.203;

1.203
date	2006.08.08.18.31.19;	author rjw;	state Exp;
branches;
next	1.202;

1.202
date	2006.08.02.18.06.00;	author rjw;	state Exp;
branches;
next	1.201;

1.201
date	2006.08.02.17.27.31;	author rjw;	state Exp;
branches;
next	1.200;

1.200
date	2006.05.16.22.01.07;	author rjw;	state Exp;
branches;
next	1.199;

1.199
date	2006.05.08.19.51.24;	author rjw;	state Exp;
branches;
next	1.198;

1.198
date	2006.05.02.17.34.15;	author rjw;	state Exp;
branches;
next	1.197;

1.197
date	2006.04.18.14.31.03;	author rjw;	state Exp;
branches;
next	1.196;

1.196
date	2006.03.28.15.59.00;	author rjw;	state Exp;
branches;
next	1.195;

1.195
date	2006.03.28.15.46.25;	author rjw;	state Exp;
branches;
next	1.194;

1.194
date	2006.03.28.15.44.13;	author rjw;	state Exp;
branches;
next	1.193;

1.193
date	2006.03.10.23.23.31;	author rjw;	state Exp;
branches;
next	1.192;

1.192
date	2006.03.08.23.57.12;	author rjw;	state Exp;
branches;
next	1.191;

1.191
date	2006.02.21.15.44.15;	author rjw;	state Exp;
branches;
next	1.190;

1.190
date	2006.02.17.17.07.18;	author rjw;	state Exp;
branches;
next	1.189;

1.189
date	2005.11.10.20.33.08;	author rjw;	state Exp;
branches;
next	1.188;

1.188
date	2005.11.04.20.42.55;	author rjw;	state Exp;
branches;
next	1.187;

1.187
date	2005.10.17.15.02.06;	author rjw;	state Exp;
branches;
next	1.186;

1.186
date	2005.09.20.19.48.19;	author rjw;	state Exp;
branches;
next	1.185;

1.185
date	2005.09.19.14.49.33;	author rjw;	state Exp;
branches;
next	1.184;

1.184
date	2005.09.15.15.27.21;	author rjw;	state Exp;
branches;
next	1.183;

1.183
date	2005.09.12.22.17.33;	author rjw;	state Exp;
branches;
next	1.182;

1.182
date	2005.09.08.19.29.45;	author rjw;	state Exp;
branches;
next	1.181;

1.181
date	2005.09.06.21.30.28;	author rjw;	state Exp;
branches;
next	1.180;

1.180
date	2005.09.06.19.47.59;	author rjw;	state Exp;
branches;
next	1.179;

1.179
date	2005.09.01.21.45.03;	author rjw;	state Exp;
branches;
next	1.178;

1.178
date	2005.08.29.19.14.35;	author rjw;	state Exp;
branches;
next	1.177;

1.177
date	2005.08.27.00.16.16;	author fasano;	state Exp;
branches;
next	1.176;

1.176
date	2005.08.25.21.47.40;	author rjw;	state Exp;
branches;
next	1.175;

1.175
date	2005.08.22.20.38.59;	author rjw;	state Exp;
branches;
next	1.174;

1.174
date	2005.08.19.21.38.03;	author rjw;	state Exp;
branches;
next	1.173;

1.173
date	2005.08.12.20.32.08;	author rjw;	state Exp;
branches;
next	1.172;

1.172
date	2005.08.12.19.35.30;	author rjw;	state Exp;
branches;
next	1.171;

1.171
date	2005.07.13.21.18.47;	author rjw;	state Exp;
branches;
next	1.170;

1.170
date	2005.07.11.22.53.49;	author rjw;	state Exp;
branches;
next	1.169;

1.169
date	2005.07.08.20.48.20;	author rjw;	state Exp;
branches;
next	1.168;

1.168
date	2005.07.08.15.59.43;	author rjw;	state Exp;
branches;
next	1.167;

1.167
date	2005.06.13.16.48.48;	author rjw;	state Exp;
branches;
next	1.166;

1.166
date	2005.05.17.17.30.44;	author rjw;	state Exp;
branches;
next	1.165;

1.165
date	2005.03.21.21.49.27;	author rjw;	state Exp;
branches;
next	1.164;

1.164
date	2005.03.02.22.34.37;	author rjw;	state Exp;
branches;
next	1.163;

1.163
date	2005.02.25.21.26.10;	author rjw;	state Exp;
branches;
next	1.162;

1.162
date	2005.02.24.23.23.57;	author rjw;	state Exp;
branches;
next	1.161;

1.161
date	2005.02.10.18.38.30;	author rjw;	state Exp;
branches;
next	1.160;

1.160
date	2005.02.08.20.36.19;	author rjw;	state Exp;
branches;
next	1.159;

1.159
date	2005.02.04.21.17.34;	author rjw;	state Exp;
branches;
next	1.158;

1.158
date	2005.02.03.23.15.34;	author rjw;	state Exp;
branches;
next	1.157;

1.157
date	2005.02.03.21.31.36;	author rjw;	state Exp;
branches;
next	1.156;

1.156
date	2005.02.02.17.26.53;	author rjw;	state Exp;
branches;
next	1.155;

1.155
date	2005.01.31.23.59.30;	author rjw;	state Exp;
branches;
next	1.154;

1.154
date	2005.01.28.19.34.28;	author rjw;	state Exp;
branches;
next	1.153;

1.153
date	2005.01.21.23.01.52;	author rjw;	state Exp;
branches;
next	1.152;

1.152
date	2004.11.09.23.08.00;	author rjw;	state Exp;
branches;
next	1.151;

1.151
date	2004.11.04.20.42.28;	author rjw;	state Exp;
branches;
next	1.150;

1.150
date	2004.11.04.16.30.14;	author rjw;	state Exp;
branches;
next	1.149;

1.149
date	2004.10.12.21.29.50;	author rjw;	state Exp;
branches;
next	1.148;

1.148
date	2004.05.13.20.53.56;	author rjw;	state Exp;
branches;
next	1.147;

1.147
date	2004.05.12.21.50.59;	author rjw;	state Exp;
branches;
next	1.146;

1.146
date	2004.05.07.22.15.15;	author rjw;	state Exp;
branches;
next	1.145;

1.145
date	2004.04.30.15.57.19;	author rjw;	state Exp;
branches;
next	1.144;

1.144
date	2004.04.19.22.16.29;	author rjw;	state Exp;
branches;
next	1.143;

1.143
date	2004.04.16.17.42.50;	author rjw;	state Exp;
branches;
next	1.142;

1.142
date	2004.04.09.21.24.27;	author rjw;	state Exp;
branches;
next	1.141;

1.141
date	2004.04.09.19.37.57;	author rjw;	state Exp;
branches;
next	1.140;

1.140
date	2004.04.09.15.52.47;	author rjw;	state Exp;
branches;
next	1.139;

1.139
date	2004.04.07.20.56.28;	author rjw;	state Exp;
branches;
next	1.138;

1.138
date	2004.04.07.19.21.32;	author rjw;	state Exp;
branches;
next	1.137;

1.137
date	2004.04.06.18.55.58;	author rjw;	state Exp;
branches;
next	1.136;

1.136
date	2004.04.06.18.16.57;	author rjw;	state Exp;
branches;
next	1.135;

1.135
date	2004.04.06.15.42.17;	author rjw;	state Exp;
branches;
next	1.134;

1.134
date	2004.04.05.23.04.57;	author rjw;	state Exp;
branches;
next	1.133;

1.133
date	2004.04.05.22.18.08;	author rjw;	state Exp;
branches;
next	1.132;

1.132
date	2004.04.02.23.45.20;	author rjw;	state Exp;
branches;
next	1.131;

1.131
date	2004.04.02.20.54.16;	author rjw;	state Exp;
branches;
next	1.130;

1.130
date	2004.04.01.21.05.12;	author rjw;	state Exp;
branches;
next	1.129;

1.129
date	2004.03.31.22.56.08;	author rjw;	state Exp;
branches;
next	1.128;

1.128
date	2004.03.30.23.59.42;	author rjw;	state Exp;
branches;
next	1.127;

1.127
date	2004.03.30.23.46.55;	author rjw;	state Exp;
branches;
next	1.126;

1.126
date	2004.03.30.21.10.07;	author rjw;	state Exp;
branches;
next	1.125;

1.125
date	2004.03.30.18.57.05;	author rjw;	state Exp;
branches;
next	1.124;

1.124
date	2004.03.30.00.05.33;	author rjw;	state Exp;
branches;
next	1.123;

1.123
date	2004.03.29.22.25.14;	author rjw;	state Exp;
branches;
next	1.122;

1.122
date	2004.03.29.19.36.55;	author rjw;	state Exp;
branches;
next	1.121;

1.121
date	2004.03.27.00.08.20;	author rjw;	state Exp;
branches;
next	1.120;

1.120
date	2004.03.26.17.03.33;	author rjw;	state Exp;
branches;
next	1.119;

1.119
date	2004.03.26.16.07.24;	author rjw;	state Exp;
branches;
next	1.118;

1.118
date	2004.03.25.22.00.36;	author rjw;	state Exp;
branches;
next	1.117;

1.117
date	2004.03.25.21.21.59;	author rjw;	state Exp;
branches;
next	1.116;

1.116
date	2004.03.25.19.59.38;	author rjw;	state Exp;
branches;
next	1.115;

1.115
date	2004.03.24.22.21.33;	author rjw;	state Exp;
branches;
next	1.114;

1.114
date	2004.03.24.19.17.34;	author rjw;	state Exp;
branches;
next	1.113;

1.113
date	2004.03.24.17.12.23;	author rjw;	state Exp;
branches;
next	1.112;

1.112
date	2004.03.24.17.03.32;	author rjw;	state Exp;
branches;
next	1.111;

1.111
date	2004.03.24.16.50.35;	author rjw;	state Exp;
branches;
next	1.110;

1.110
date	2004.03.23.19.14.26;	author rjw;	state Exp;
branches;
next	1.109;

1.109
date	2004.03.22.16.37.19;	author rjw;	state Exp;
branches;
next	1.108;

1.108
date	2004.03.12.17.21.56;	author rjw;	state Exp;
branches;
next	1.107;

1.107
date	2004.03.11.16.36.18;	author rjw;	state Exp;
branches;
next	1.106;

1.106
date	2004.03.03.22.36.22;	author rjw;	state Exp;
branches;
next	1.105;

1.105
date	2004.03.02.23.52.14;	author rjw;	state Exp;
branches;
next	1.104;

1.104
date	2004.03.02.19.17.52;	author rjw;	state Exp;
branches;
next	1.103;

1.103
date	2004.02.26.18.59.43;	author rjw;	state Exp;
branches;
next	1.102;

1.102
date	2004.02.24.21.32.06;	author rjw;	state Exp;
branches;
next	1.101;

1.101
date	2004.02.24.20.10.58;	author rjw;	state Exp;
branches;
next	1.100;

1.100
date	2004.02.24.19.37.22;	author rjw;	state Exp;
branches;
next	1.99;

1.99
date	2004.02.20.22.46.03;	author rjw;	state Exp;
branches;
next	1.98;

1.98
date	2004.02.20.16.38.01;	author rjw;	state Exp;
branches;
next	1.97;

1.97
date	2004.02.20.15.37.36;	author rjw;	state Exp;
branches;
next	1.96;

1.96
date	2004.02.19.22.56.11;	author rjw;	state Exp;
branches;
next	1.95;

1.95
date	2004.02.19.21.21.28;	author rjw;	state Exp;
branches;
next	1.94;

1.94
date	2004.02.18.00.05.25;	author rjw;	state Exp;
branches;
next	1.93;

1.93
date	2004.02.17.20.23.47;	author rjw;	state Exp;
branches;
next	1.92;

1.92
date	2004.02.14.00.45.35;	author rjw;	state Exp;
branches;
next	1.91;

1.91
date	2004.02.12.19.13.40;	author rjw;	state Exp;
branches;
next	1.90;

1.90
date	2004.02.10.23.57.45;	author rjw;	state Exp;
branches;
next	1.89;

1.89
date	2004.02.07.00.12.10;	author rjw;	state Exp;
branches;
next	1.88;

1.88
date	2004.02.05.16.39.43;	author rjw;	state Exp;
branches;
next	1.87;

1.87
date	2004.02.04.22.36.33;	author rjw;	state Exp;
branches;
next	1.86;

1.86
date	2004.02.04.22.31.27;	author rjw;	state Exp;
branches;
next	1.85;

1.85
date	2004.01.30.23.07.51;	author rjw;	state Exp;
branches;
next	1.84;

1.84
date	2004.01.19.23.26.51;	author rjw;	state Exp;
branches;
next	1.83;

1.83
date	2004.01.16.18.48.26;	author rjw;	state Exp;
branches;
next	1.82;

1.82
date	2004.01.05.23.37.34;	author rjw;	state Exp;
branches;
next	1.81;

1.81
date	2003.12.31.20.09.19;	author rjw;	state Exp;
branches;
next	1.80;

1.80
date	2003.12.30.22.10.47;	author rjw;	state Exp;
branches;
next	1.79;

1.79
date	2003.12.30.20.41.44;	author rjw;	state Exp;
branches;
next	1.78;

1.78
date	2003.12.30.18.08.29;	author rjw;	state Exp;
branches;
next	1.77;

1.77
date	2003.12.30.16.24.25;	author rjw;	state Exp;
branches;
next	1.76;

1.76
date	2003.12.23.16.18.47;	author rjw;	state Exp;
branches;
next	1.75;

1.75
date	2003.12.12.19.49.44;	author rjw;	state Exp;
branches;
next	1.74;

1.74
date	2003.12.11.21.56.33;	author rjw;	state Exp;
branches;
next	1.73;

1.73
date	2003.12.10.23.20.43;	author rjw;	state Exp;
branches;
next	1.72;

1.72
date	2003.12.04.16.45.16;	author rjw;	state Exp;
branches;
next	1.71;

1.71
date	2003.12.01.21.05.06;	author rjw;	state Exp;
branches;
next	1.70;

1.70
date	2003.10.31.16.10.07;	author rjw;	state Exp;
branches;
next	1.69;

1.69
date	2003.10.31.15.37.55;	author rjw;	state Exp;
branches;
next	1.68;

1.68
date	2003.09.22.23.13.52;	author rjw;	state Exp;
branches;
next	1.67;

1.67
date	2003.09.22.20.27.02;	author rjw;	state Exp;
branches;
next	1.66;

1.66
date	2003.09.19.18.29.00;	author rjw;	state Exp;
branches;
next	1.65;

1.65
date	2003.09.03.18.09.57;	author rjw;	state Exp;
branches;
next	1.64;

1.64
date	2003.08.05.20.18.23;	author rjw;	state Exp;
branches;
next	1.63;

1.63
date	2003.08.01.21.01.38;	author rjw;	state Exp;
branches;
next	1.62;

1.62
date	2003.07.28.20.34.13;	author rjw;	state Exp;
branches;
next	1.61;

1.61
date	2003.05.07.18.06.17;	author rjw;	state Exp;
branches;
next	1.60;

1.60
date	2003.03.24.20.40.22;	author rjw;	state Exp;
branches;
next	1.59;

1.59
date	2003.02.21.18.56.29;	author rjw;	state Exp;
branches;
next	1.58;

1.58
date	2003.02.14.20.13.04;	author rjw;	state Exp;
branches;
next	1.57;

1.57
date	2003.01.31.21.29.00;	author rjw;	state Exp;
branches;
next	1.56;

1.56
date	2003.01.27.21.17.20;	author rjw;	state Exp;
branches;
next	1.55;

1.55
date	2003.01.23.22.48.15;	author rjw;	state Exp;
branches;
next	1.54;

1.54
date	2003.01.23.20.47.21;	author rjw;	state Exp;
branches;
next	1.53;

1.53
date	2003.01.22.19.32.14;	author rjw;	state Exp;
branches;
next	1.52;

1.52
date	2003.01.16.22.50.40;	author rjw;	state Exp;
branches;
next	1.51;

1.51
date	2003.01.02.22.18.55;	author rjw;	state Exp;
branches;
next	1.50;

1.50
date	2002.12.30.21.57.27;	author rjw;	state Exp;
branches;
next	1.49;

1.49
date	2002.12.30.20.37.29;	author rjw;	state Exp;
branches;
next	1.48;

1.48
date	2002.12.23.20.44.49;	author rjw;	state Exp;
branches;
next	1.47;

1.47
date	2002.12.19.17.15.23;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2002.10.18.22.23.58;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2002.10.16.22.30.22;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2002.10.10.19.21.19;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2002.09.30.21.36.40;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2002.08.22.14.01.49;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2002.07.10.19.06.01;	author austel;	state Exp;
branches;
next	1.40;

1.40
date	2002.06.24.22.02.27;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2002.05.17.21.45.07;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2002.05.08.19.21.58;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2002.05.03.23.16.43;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2002.04.25.21.48.13;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2002.04.25.19.14.53;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2002.04.24.18.26.10;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2002.04.22.14.32.14;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2001.12.19.16.17.13;	author bobw;	state Exp;
branches;
next	1.31;

1.31
date	2001.11.09.21.42.28;	author bobw;	state Exp;
branches;
next	1.30;

1.30
date	2001.10.05.20.53.59;	author bobw;	state Exp;
branches;
next	1.29;

1.29
date	2001.10.05.18.55.29;	author bobw;	state Exp;
branches;
next	1.28;

1.28
date	2001.10.03.18.55.12;	author bobw;	state Exp;
branches;
next	1.27;

1.27
date	2001.09.28.20.50.28;	author bobw;	state Exp;
branches;
next	1.26;

1.26
date	2001.09.16.21.42.33;	author bobw;	state Exp;
branches;
next	1.25;

1.25
date	2001.08.30.23.00.35;	author bobw;	state Exp;
branches;
next	1.24;

1.24
date	2001.08.29.21.37.21;	author bobw;	state Exp;
branches;
next	1.23;

1.23
date	2001.08.06.17.44.40;	author bobw;	state Exp;
branches;
next	1.22;

1.22
date	2001.08.06.17.31.09;	author bobw;	state Exp;
branches;
next	1.21;

1.21
date	2001.08.03.18.40.43;	author bobw;	state Exp;
branches;
next	1.20;

1.20
date	2001.07.30.15.12.12;	author bobw;	state Exp;
branches;
next	1.19;

1.19
date	2001.07.28.00.48.36;	author bobw;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.27.21.28.40;	author bobw;	state Exp;
branches;
next	1.17;

1.17
date	2001.07.25.16.08.21;	author bobw;	state Exp;
branches;
next	1.16;

1.16
date	2001.05.29.22.11.29;	author bobw;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.17.15.11.18;	author bobw;	state Exp;
branches;
next	1.14;

1.14
date	2001.04.06.19.22.11;	author bobw;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.12.19.48.09;	author bobw;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.08.16.37.08;	author bobw;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.14.19.35.23;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.04.22.07.40;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.22.23.11.50;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.21.20.03.29;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.13.21.03.56;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.25.20.12.36;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.29.21.22.48;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.08.21.56.15;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.24.19.55.29;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.57.12;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.32;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.32;	author wit;	state Exp;
branches;
next	;


desc
@@


1.382
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef WitRunH
#define WitRunH

//------------------------------------------------------------------------------
// Header file: "WitRun.h"
//
// Contains the declaration of class WitRun.
//------------------------------------------------------------------------------

#include <Problem.h>
#include <Session.h>

class WitInputID;

//------------------------------------------------------------------------------
// class WitRun
//
// Ultimately responsible for all of WIT.
// Non-delegated responsibility: the inner layer of WIT's API.
// Other API responsibilities are delegated to other classes.
// All non-API responsibilities are delegated to class Session.
//
// Note: For historical reasons, and due to the large number of
// member functions, the implementation of class WitRun is
// distributed throughout several source files of WIT.
// Currently, the files implementing class WitRun are:
//
//    WitRun.C
//    globApi.C
//    optApi.C
//    stochApi.C
//    partApi.C
//    demApi.C
//    opnApi.C
//    bomApi.C
//    subApi.C
//    bopApi.C
//    msgApi.C
//------------------------------------------------------------------------------

class WitRun
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRun ();

      //------------------------------------------------------------------------
      // API functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      void witAdvanceObjItr ();

      void witBuildPip ();

      void witClearPegging ();

      void witCopyData (
         WitRun * origWitRun);

      void witDeleteRun ();

      void witGetDevMode (WitBoolean * devMode);

      void witDisplayData (
         const char * fileName);

      void witEvalObjectives ();

      void witFinishExtOpt ();

      void witFinishHeurAlloc ();

      void witGeneratePriorities ();

      void witGetExpCycle (
         int *      lenLists,
         char * * * partNameList,
         char * * * operationNameList);

      void witGetExtOptIntVarIndices (int * * indices, int * len);

      void witGetExtOptLpProb (
         int *                numcols,
         int *                numrows,
         int * *              start,
         int * *              index,
         const WitOVRealArg & value,
         const WitOVRealArg & collb,
         const WitOVRealArg & colub,
         const WitOVRealArg & obj,
         const WitOVRealArg & rowlb,
         const WitOVRealArg & rowub);

      void witGetObjItrState (WitAttr * objItrState);

      void witHeurImplode ();

      void witInitialize ();

      void witIssueFatalMesg ();

      void witMrp ();

      void witNewRun ();

      void witOptImplode ();

      void witOptPreprocess ();

      void witPostprocess ();

      void witPreprocess ();

      void witPurgeData ();

      void witReadData (
         const char * fileName);

      void witResetObjItr ();

      void witSetExtOptSoln (const WitIVRealArg & colsol);

      void witShutDownExtOpt ();

      void witShutDownHeurAlloc ();

      void witStartExtOpt ();

      void witStartHeurAlloc ();

      void witWriteCriticalList (
         const char *  fileName,
         WitFileFormat fileFormat,
         int           maxListLen);

      void witWriteData (
         const char * fileName);

      void witWriteExecSched (
         const char *  fileName,
         WitFileFormat fileFormat);

      void witWriteProdSched (
         const char *  fileName,
         WitFileFormat fileFormat);

      void witWriteReqSched (
         const char *  fileName,
         WitFileFormat fileFormat);

      void witWriteShipSched (
         const char *  fileName,
         WitFileFormat fileFormat);

      void witNoDependantWitRunVeneersIsOne (
         int * isOne);

      void witNoDependantWitRunVeneersDecr  ();

      void witNoDependantWitRunVeneersIncr  ();

      void witExhaustMemory ();

      void witExecStandAlone (int argc, char * argv[]);
         //
         // Performs main actions of the WIT stand-alone executable.
         // argc and argv are to be the same as the arguments passed to the main
         // program.

      void witInterpretDevCmd (const char * theDevCmd);
         //
         // Interprets the development command indicated by theDevCmd.
         // Severe error, if theDevCmd is not recognized.

      //------------------------------------------------------------------------
      // API functions implemented in globApi.C.
      //------------------------------------------------------------------------

      void witClearPipSeq ();

      void witGetAppData (
         void * * value);

      void witGetAutoPriority (
         WitBoolean * value);

      void witGetBuildWhenEmpty (
         WitBoolean * value);

      void witGetComputeCriticalList (
         WitBoolean * computeCriticalList);

      void witGetCriticalList (
         int *      lenCritList,
         char * * * partList,
         int * *    perList);

      void witGetEquitability (
         int * equitability);

      void witGetExecEmptyBom (
         WitBoolean * execEmptyBom);

      void witGetExpCutoff (
         const WitOSRealArg & expCutoff);

      void witGetFeasible (
         WitBoolean * feasible);

      void witGetForcedMultiEq (
         WitBoolean * value);

      void witGetHashTableSize (
         int * hashTableSize);

      void witGetHeurAllocActive (
         WitBoolean * heurAllocActive);

      void witGetHighPrecisionWD (
         WitBoolean * highPrecisionWD);

      void witGetIndependentOffsets (
         WitBoolean * independentOffsets);

      void witGetLocalBuildAhead (
         WitBoolean * localBuildAhead);

      void witGetLocalMultiExec (
         WitBoolean * localMultiExec);

      void witGetLotSizeTol (
         const WitOSRealArg & lotSizeTol);

      void witGetMinimalExcess (
         WitBoolean * minimalExcess);

      void witGetModHeurAlloc (
         WitBoolean * modHeurAlloc);

      void witGetMultiExec (
         WitBoolean * multiExec);

      void witGetMultiRoute (
         WitBoolean * value);

      void witGetNPeriods (
         int * nPeriods);

      void witGetNewPipPggOrder (
         WitBoolean * newPipPggOrder);

      void witGetNonMrSelSplit (
         WitBoolean * nonMrSelSplit);

      void witGetNstnResidual (
         WitBoolean * nstnResidual);

      void witGetOutputPrecision (
         int * outputPrecision);

      void witGetPenExec (
         WitBoolean * penExec);

      void witGetPerfPegging (
         WitBoolean * perfPegging);

      void witGetPgdCritList (
         int *      lenLists,
         char * * * critPartNameList,
         int * *    critPerList,
         char * * * demPartNameList,
         char * * * demandNameList,
         int * *    shipPerList);

      void witGetPgdCritListMode (
         WitBoolean * pgdCritListMode);

      void witGetPipExists (
         WitBoolean * pipExists);

      void witGetPipSeq (
         int *                lenLists,
         char * * *           partNameList,
         char * * *           demandNameList,
         int * *              shipPerList,
         const WitOVRealArg & incShipVolList);

      void witGetPipSeqFromHeur (
         WitBoolean * pipSeqFromHeur);

      void witGetPostprocessed (
         WitBoolean * postprocessed);

      void witGetPrefHighStockSLBs (
         WitBoolean * prefHighStockSLBs);

      void witGetPreprocessed (
         WitBoolean * preprocessed);

      void witGetRespectStockSLBs (
         WitBoolean * respectStockSLBs);

      void witGetRoundReqVols (
         WitBoolean * roundReqVols);

      void witGetSelSplit (
         WitBoolean * selSplit);

      void witGetSelectionRecovery (
         WitBoolean * value);

      void witGetSkipFailures (
         WitBoolean * value);

      void witGetStockRealloc (
         WitBoolean * stockRealloc);

      void witGetStockReallocation (
         WitBoolean * stockReallocation);

      void witGetSrSelSplit (
         WitBoolean * srSelSplit);

      void witGetTieBreakPropRt (
         WitBoolean * tieBreakPropRt);

      void witGetTitle (
         char * * title);

      void witGetTruncOffsets (
         WitBoolean * value);

      void witGetTwoWayMultiExec (
         WitBoolean * twoWayMultiExec);

      void witGetUseFocusHorizons (
         WitBoolean * useFocusHorizons);

      void witGetUserHeurStart (
         WitBoolean * userHeurStart);

      void witGetWit34Compatible (
         WitBoolean * value);

      void witSetAppData (
         void * appData);

      void witSetAutoPriority (
         WitBoolean autoPriority);

      void witSetBuildWhenEmpty (
         WitBoolean buildWhenEmpty);

      void witSetComputeCriticalList (
         WitBoolean computeCriticalList);

      void witSetEquitability (
         int equitability);

      void witSetExecEmptyBom (
         WitBoolean execEmptyBom);

      void witSetExpCutoff (
         const WitISRealArg & expCutoff);

      void witSetForcedMultiEq (
         WitBoolean forcedMultiEq);

      void witSetHashTableSize (
         int hashTableSize);

      void witSetHighPrecisionWD (
         WitBoolean highPrecisionWD);

      void witSetIndependentOffsets (
         WitBoolean independentOffsets);

      void witSetLocalBuildAhead (
         WitBoolean localBuildAhead);

      void witSetLocalMultiExec (
         WitBoolean localMultiExec);

      void witSetLotSizeTol (
         const WitISRealArg & lotSizeTol);

      void witSetMinimalExcess (
         WitBoolean minimalExcess);

      void witSetModHeurAlloc (
         WitBoolean modHeurAlloc);

      void witSetMultiExec (
         WitBoolean multiExec);

      void witSetMultiRoute (
         WitBoolean multiRoute);

      void witSetNPeriods (
         int nPeriods);

      void witSetNewPipPggOrder (
         WitBoolean newPipPggOrder);

      void witSetNonMrSelSplit (
         WitBoolean nonMrSelSplit);

      void witSetNstnResidual (
         WitBoolean nstnResidual);

      void witSetOutputPrecision (
         int outputPrecision);

      void witSetPenExec (
         WitBoolean penExec);

      void witSetPerfPegging (
         WitBoolean perfPegging);

      void witSetPgdCritListMode (
         WitBoolean pgdCritListMode);

      void witSetPipSeqFromHeur (
         WitBoolean pipSeqFromHeur);

      void witSetPrefHighStockSLBs (
         WitBoolean prefHighStockSLBs);

      void witSetRespectStockSLBs (
         WitBoolean respectStockSLBs);

      void witSetRoundReqVols (
         WitBoolean roundReqVols);

      void witSetSelSplit (
         WitBoolean selSplit);

      void witSetSelectionRecovery (
         WitBoolean selectionRecovery);

      void witSetSkipFailures (
         WitBoolean skipFailures);

      void witSetStockRealloc (
         WitBoolean stockRealloc);

      void witSetStockReallocation (
         WitBoolean stockReallocation);

      void witSetSrSelSplit (
         WitBoolean srSelSplit);

      void witSetTieBreakPropRt (
         WitBoolean tieBreakPropRt);

      void witSetTitle (
         const char * title);

      void witSetTruncOffsets (
         WitBoolean truncOffsets);

      void witSetTwoWayMultiExec (
         WitBoolean twoWayMultiExec);

      void witSetUseFocusHorizons (
         WitBoolean useFocusHorizons);

      void witSetUserHeurStart (
         WitBoolean userHeurStart);

      void witSetWit34Compatible (
         WitBoolean boolval);

      void witSetWit34Allowed (
         WitBoolean boolval);

      //------------------------------------------------------------------------
      // API functions implemented in optApi.C.
      //------------------------------------------------------------------------

      void witAddDblCplexParSpec (
         const char *         theName,
         const WitISRealArg & theValue);

      void witAddIntCplexParSpec (
         const char * theName,
         int          theValue);

      void witGetAccAfterOptImp (
         WitBoolean * value);

      void witGetAccAfterSoftLB (
         WitBoolean * value);

      void witGetAccelerated (
         WitBoolean * value);

      void witGetBoundsValue (
         const WitOSRealArg & boundsValue);

      void witClearCplexParSpecs ();

      void witGetCompPrices (
         WitBoolean * value);

      void witGetCplexEmbedded (WitBoolean * cplexEmbedded);

      void witGetCplexMipBound (
         const WitOSRealArg & cplexMipBound);

      void witGetCplexMipRelGap (
         const WitOSRealArg & cplexMipRelGap);

      void witGetCplexParSpecDblVal (
         const WitOSRealArg & cplexParSpecDblVal);

      void witGetCplexParSpecIntVal (
         int * cplexParSpecIntVal);

      void witGetCplexParSpecName (
         char * * cplexParSpecName);

      void witGetCplexStatusCode (
         int * cplexStatusCode);

      void witGetCplexStatusText (
         char * * cplexStatusText);

      void witGetCurrentObjective (
         char * * theObjName);

      void witGetDblCplexParSpec (
         const char *         theName,
         WitBoolean *         dblSpecExists,
         const WitOSRealArg & theValue);

      void witGetExtOptActive (
         WitBoolean * extOptActive);

      void witGetIntCplexParSpec (
         const char * theName,
         WitBoolean * intSpecExists,
         int *        theValue);

      void witGetMipMode (
         WitBoolean * value);

      void witGetMultiObjMode (
         WitBoolean * value);

      void witGetMultiObjTol (
         const WitOSRealArg & multiObjTol);

      void witGetObjChoice (
         int * objChoice);

      void witGetObjValue (
         const WitOSRealArg & objValue);

      void witGetObjValues (
         const WitOSRealArg & objValue,
         const WitOSRealArg & boundsValue);

      void witGetObjectiveList (
         int  *     lenList,
         char * * * objectiveList);

      void witGetObjectiveListSpec (
         char * * objectiveListSpec);

      void witGetObjectiveRank (
         int * objectiveRank);

      void witGetOptInitMethod (
         WitAttr * optInitMethod);

      void witGetSolverLogFileName (
         char * * solverLogFileName);

      void witGetWbounds (
         const WitOSRealArg & wbounds);

      void witSetAccAfterOptImp (
         WitBoolean accAfterOptImp);

      void witSetAccAfterSoftLB (
         WitBoolean accAfterSoftLB);

      void witSetCompPrices (
         WitBoolean compPrices);

      void witSetCplexParSpecDblVal (
         const WitISRealArg & cplexParSpecDblVal);

      void witSetCplexParSpecIntVal (
         int cplexParSpecIntVal);

      void witSetCplexParSpecName (
         const char * cplexParSpecName);

      void witSetCurrentObjective (
         const char * theObjName);

      void witSetMipMode (
         WitBoolean mipMode);

      void witSetMultiObjMode (
         WitBoolean multiObjMode);

      void witSetMultiObjTol (
         const WitISRealArg & multiObjTol);

      void witSetObjChoice (
         int objChoice);

      void witSetObjectiveList (
         int                  lenList,
         const char * const * objectiveList);

      void witSetObjectiveListSpec (
         const char * objectiveListSpec);

      void witSetObjectiveRank (
         int objectiveRank);

      void witSetOptInitMethod (
         WitAttr optInitMethod);

      void witSetSolverLogFileName (
         const char * solverLogFileName);

      void witSetWbounds (
         const WitISRealArg & wbounds);

      //------------------------------------------------------------------------
      // API functions implemented in stochApi.C.
      //------------------------------------------------------------------------

      void witClearStochSoln ();

      void witGetCurrentScenario (
         int * currentScenario);

      void witGetNScenarios (
         int * nScanerios);

      void witGetPeriodStage (
         int * * periodStage);

      void witGetProbability (
         const WitOSRealArg & probability);

      void witGetStageByObject (
         WitBoolean * stageByObject);

      void witGetStochMode (
         WitBoolean * stochMode);

      void witGetStochSolnMode (
         WitBoolean * stochSolnMode);

      void witSetCurrentScenario (
         int currentScenario);

      void witSetNScenarios (
         int nScenarios);

      void witSetPeriodStage (
         const int * periodStage);

      void witSetProbability (
         const WitISRealArg & probability);

      void witSetStageByObject (
         WitBoolean stageByObject);

      void witSetStochMode (
         WitBoolean stochMode);

      void witStochImplode ();

      //------------------------------------------------------------------------
      // API functions implemented in partApi.C.
      //------------------------------------------------------------------------

      WitPart * setGetPartInit (
         const char * partName);

      WitMaterial * setGetMaterialInit (
         const char * partName,
         const char * theAttName);

      void witAddPart (
         const char * partName, WitAttr partCategory);

      void witAddPartWithOperation (
         const char * partAndOperationName);

      void witCopyPartData (
         const char * dupPartName,
         WitRun *     origWitRun,
         const char * origPartName);

      void witGetFocusShortageVol (
         int   *                lenList,
         char  * * *            partList,
         const WitOTDARealArg & shortageVolList);

      void witGetObjItrPart (
         char * * partName);

      void witGetPartAppData (
         const char * partName,
         void * *     appData);

      void witGetPartAsapPipOrder (
         const char * partName,
         WitBoolean * asapPipOrder);

      void witGetPartBaSelSplit (
         const char * partName,
         WitBoolean * baSelSplit);

      void witGetPartBelowList (
         const char * partName,
         int *        lenList,
         char * * *   partNameList);

      void witGetPartBoundedLeadTimes (
         const char * partName,
         WitBoolean * boundedLeadTimes);

      void witGetPartBuildAheadUB (
         const char * partName,
         int * *      buildAheadUB);

      void witGetPartBuildAheadLimit (
         const char * partName,
         int *        buildAheadLimit);

      void witGetPartBuildAsap (
         const char * partName,
         WitBoolean * buildAsap);

      void witGetPartBuildNstn (
         const char * partName,
         WitBoolean * buildNstn);

      void witGetPartCategory (
         const char * partName,
         WitAttr *    category);

      void witGetPartConsVol (
         const char *         partName,
         const WitOVRealArg & consVol);

      void witGetPartConsumingBomEntry (
         const char * partName,
         int          consIndex,
         char * *     consumingOperationName,
         int *        bomEntryIndex);

      void witGetPartConsumingSubsBomEntry (
         const char * partName,
         int          consIndex,
         char * *     consumingOperationName,
         int *        bomEntryIndex,
         int *        subsBomEntryIndex);

      void witGetPartCycleTime (
         const char *         partName,
         const WitOVRealArg & cycleTime);

      void witGetPartDemands (
         const char * partName,
         int *        lenDemandList,
         char * * *   demandList);

      void witGetPartExcessVol (
         const char *         partName,
         const WitOVRealArg & excessVol);

      void witGetPartExists (
         const char * partNameParm,
         WitBoolean * exists);

      void witGetPartFocusShortageVol (
         const char *         partName,
         const WitOVRealArg & shortageVol);

      void witGetPartIncLotSize (
         const char *         partName,
         const WitOVRealArg & incLotSize);

      void witGetPartMinLotSize (
         const char *         partName,
         const WitOVRealArg & minLotSize);

      void witGetPartMrpConsVol (
         const char *         partName,
         const WitOVRealArg & mrpConsVol);

      void witGetPartMrpExcessVol (
         const char *         partName,
         const WitOVRealArg & mrpExcessVol);

      void witGetPartMrpProdVol (
         const char *         partName,
         const WitOVRealArg & mrpProdVol);

      void witGetPartMrpResidualVol (
         const char *         partName,
         const WitOVRealArg & mrpResidualVol);

      void witGetPartNBomEntries (
         const char * partName,
         int *        nBomEntries);

      void witGetPartNConsumingBomEntries (
         const char * partName,
         int *        nConsumingBomEntries);

      void witGetPartNConsumingSubsBomEntries (
         const char * partName,
         int *        nConsumingSubsBomEntries);

      void witGetPartNProducingBopEntries (
         const char * partName,
         int *        nProducingBopEntries);

      void witGetPartObj1ProdCost (
         const char *         partName,
         const WitOVRealArg & obj1ProdCost);

      void witGetPartObj1ScrapCost (
         const char *         partName,
         const WitOVRealArg & obj1ScrapCost);

      void witGetPartObj1StockCost (
         const char *         partName,
         const WitOVRealArg & obj1StockCost);

      void witGetPartObjectStage (
         const char * partName,
         int *        objectStage);

      void witGetPartProdBounds (
         const char *         partName,
         const WitOVRealArg & hardLower,
         const WitOVRealArg & softLower,
         const WitOVRealArg & hardUpper);

      void witGetPartProdVol (
         const char *         partName,
         const WitOVRealArg & prodVol);

      void witGetPartProducingBopEntry (
         const char * partName,
         int          prodIndex,
         char * *     producingOperationName,
         int *        bopEntryIndex);

      void witGetPartPropRouting (
         const char * partName,
         WitBoolean * propRouting);

      void witGetPartPropRtg (
         const char *   partName,
         WitBoolean * * propRtg);

      void witGetPartReqVol (
         const char *         partName,
         const WitOVRealArg & reqVol);

      void witGetPartResidualVol (
         const char *         partName,
         const WitOVRealArg & residualVol);

      void witGetPartResourceConIndex (
         const char * partName,
         const int    thePer,
         int *        resourceConIndex);

      void witGetPartScrapVarIndex (
         const char * partName,
         const int    thePer,
         int *        scrapVarIndex);

      void witGetParts (
         int *      lenPartList,
         char * * * partList);

      void witGetPartScrapAllowed (
         const char * partName,
         WitBoolean * scrapAllowed);

      void witGetPartScrapCost (
         const char *         partName,
         const WitOVRealArg & scrapCost);

      void witGetPartScrapVol  (
         const char *         partName,
         const WitOVRealArg & scrapVol);

      void witGetPartSelForDel (
         const char * partName,
         WitBoolean * selForDel);

      void witGetPartShadowPrice  (
         const char *         partName,
         const WitOVRealArg & shadowPrice);

      void witGetPartSingleSource (
         const char * partName,
         WitBoolean * singleSource);

      void witGetPartStockBounds (
         const char *         partName,
         const WitOVRealArg & hardLower,
         const WitOVRealArg & softLower,
         const WitOVRealArg & hardUpper);

      void witGetPartStockCost (
         const char *         partName,
         const WitOVRealArg & stockCost);

      void witGetPartStockSlbConIndex (
         const char * partName,
         const int    thePer,
         int *        stockSlbConIndex);

      void witGetPartStockSlbvVarIndex (
         const char * partName,
         const int    thePer,
         int *        stockSlbvVarIndex);

      void witGetPartStockVarIndex (
         const char * partName,
         const int    thePer,
         int *        stockVarIndex);

      void witGetPartStockVol  (
         const char *         partName,
         const WitOVRealArg & stockVol);

      void witGetPartSupplyVol (
         const char *         partName,
         const WitOVRealArg & supplyVol);

      void witGetPartYield (
         const char * partName,
         int * *      yield);

      void witSetPartAppData (
         const char * partName,
         void *       appData);

      void witSetPartAsapPipOrder (
         const char * partName,
         WitBoolean   asapPipOrder);

      void witSetPartBaSelSplit (
         const char * partName,
         WitBoolean   baSelSplit);

      void witSetPartBoundedLeadTimes (
         const char * partName,
         WitBoolean   boundedLeadTimes);

      void witSetPartBuildAheadUB (
         const char * partName,
         const int *  buildAheadUB);

      void witSetPartBuildAheadLimit (
         const char * partName,
         int          buildAheadLimit);

      void witSetPartBuildAsap (
         const char * partName,
         WitBoolean   buildAsap);

      void witSetPartBuildNstn (
         const char * partName,
         WitBoolean   buildNstn);

      void witSetPartCycleTime (
         const char *         partName,
         const WitIVRealArg & cycleTime);

      void witSetPartIncLotSize (
         const char *         partName,
         const WitIVRealArg & incLotSize);

      void witSetPartMinLotSize (
         const char *         partName,
         const WitIVRealArg & minLotSize);

      void witSetPartObj1ProdCost (
         const char *         partName,
         const WitIVRealArg & obj1ProdCost);

      void witSetPartObj1ScrapCost (
         const char *         partName,
         const WitIVRealArg & obj1ScrapCost);

      void witSetPartObj1StockCost (
         const char *         partName,
         const WitIVRealArg & obj1StockCost);

      void witSetPartObjectStage (
         const char * partName,
         int          objectStage);

      void witSetPartPartName (
         const char * partName,
         const char * newName);

      void witSetPartProdBounds (
         const char *         partName,
         const WitIVRealArg & hardLower,
         const WitIVRealArg & softLower,
         const WitIVRealArg & hardUpper);

      void witSetPartProdVol (
         const char *         partName,
         const WitIVRealArg & prodVol);

      void witSetPartPropRouting (
         const char * partName,
         WitBoolean   propRouting);

      void witSetPartPropRtg (
         const char *       partName,
         const WitBoolean * propRtg);

      void witSetPartScrapAllowed (
         const char * partName,
         WitBoolean   scrapAllowed);

      void witSetPartScrapCost (
         const char *         partName,
         const WitIVRealArg & scrapCost);

      void witSetPartSelForDel (
         const char * partName,
         WitBoolean   selForDel);

      void witSetPartSingleSource (
         const char * partName,
         WitBoolean   singleSource);

      void witSetPartStockBounds (
         const char *         partName,
         const WitIVRealArg & hardLower,
         const WitIVRealArg & softLower,
         const WitIVRealArg & hardUpper);

      void witSetPartStockCost (
         const char *         partName,
         const WitIVRealArg & stockCost);

      void witSetPartSupplyVol (
         const char *         partName,
         const WitIVRealArg & supplyVol);

      void witSetPartYield (
         const char * partName,
         const int *  yield);

      //------------------------------------------------------------------------
      // API functions implemented in demApi.C.
      //------------------------------------------------------------------------

      WitDemand * setGetDemandInit (
         const char * demandedPartName,
         const char * demandName);

      void witAddDemand (
         const char * partName,
         const char * demandName);

      void witAppendToPipSeq (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         const WitISRealArg & incShipVol);

      void witCopyDemandData (
         const char * dupPartName,
         const char * dupDemandName,
         WitRun *     origWitRun,
         const char * origPartName,
         const char * origDemandName);

      void witEqHeurAlloc (
         int                  lenLists,
         const char * const * demandedPartNameList,
         const char * const * demandNameList,
         const int *          shipPeriodList,
         const WitIVRealArg & desIncVolList,
         const WitOVRealArg & incVolList);

      void witEqHeurAllocTwme (
         int                  lenLists,
         const char * const * demandedPartNameList,
         const char * const * demandNameList,
         const int *          shipPeriodList,
         const WitIVRealArg & desIncVolList,
         const WitOVRealArg & incVolList,
         const WitBoolean *   asapMultiExecList);

      void witGetObjItrDemand (
         char * * partName,
         char * * demandName);

      void witGetDemandAppData (
         const char * partName,
         const char * demandName,
         void * *     appData);

      void witGetDemandBuildAheadUB (
         const char * partName,
         const char * demandName,
         int * *      buildAheadUB);

      void witGetDemandBuildAheadLimit (
         const char * partName,
         const char * demandName,
         int *        buildAheadLimit);

      void witGetDemandCoExecVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              bopEntryIndexList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandConsVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandCumShipBounds (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & hardlbP,
         const WitOVRealArg & softlbP,
         const WitOVRealArg & hardubP);

      void witGetDemandCumShipReward (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & cumShipReward);

      void witGetDemandCumShipSlbConIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        cumShipSlbConIndex);

      void witGetDemandCumShipSlbvVarIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        cumShipSlbvVarIndex);

      void witGetDemandCumShipVarIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        cumShipVarIndex);

      void witGetDemandDemandVol (
         const char *         partName,
         const char *         demandName,
         const WitOVRealArg & demandVol);

      void witGetDemandExecVolPegging (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedExecVolList);

      void witGetDemandExecVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandFocusHorizon (
         const char * partNameParm,
         const char * demandNameParm,
         int *        i);

      void witGetDemandFssShipVol (
         const char *         partName,
         const char *         demandName,
         const WitOVRealArg & fssShipVol);

      void witGetDemandIntShipVols (
         const char * partName,
         const char * demandName,
         WitBoolean * intShipVols);

      void witGetDemandLeadTimeUB (
         const char * partName,
         const char * demandName,
         int * *      leadTimeUB);

      void witGetDemandObj1CumShipReward (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & obj1CumShipReward);

      void witGetDemandObj1ShipReward (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & obj1ShipReward);

      void witGetDemandPrefBuildAhead (
         const char * partName,
         const char * demandName,
         WitBoolean * prefBuildAhead);

      void witGetDemandPriority (
         const char * partName,
         const char * demandName,
         int * *      priority);

      void witGetDemandProdVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandSearchInc (
         const char *         partName,
         const char *         demandName,
         const WitOSRealArg & searchInc);

      void witGetDemandSelForDel (
         const char * partName,
         const char * demandName,
         WitBoolean * selForDel);

      void witGetDemandShipConIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        shipConIndex);

      void witGetDemandShipLateAllowed (
         const char * partName,
         const char * demandName,
         WitBoolean * shipLateAllowed);

      void witGetDemandShipLateLimit (
         const char * partName,
         const char * demandName,
         int *        shipLateLimit);

      void witGetDemandShipLateUB (
         const char * partName,
         const char * demandName,
         int * *      shipLateUB);

      void witGetDemandShipReward (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & shipReward);

      void witGetDemandShipVarIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        shipVarIndex);

      void witGetDemandShipVol  (
         const char *         partName,
         const char *         demandName,
         const WitOVRealArg & shipVol);

      void witGetDemandSideVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandSubVolPegging (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              bomEntryIndexList,
         int * *              subsBomEntryIndexList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedSubVolList);

      void witGetDemandSubVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              bomEntryIndexList,
         int * *              subsBomEntryIndexList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandSupplyVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void witIncHeurAlloc (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         const WitISRealArg & desIncVol,
         const WitOSRealArg & incVol);

      void witIncHeurAllocTwme (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         const WitISRealArg & desIncVol,
         const WitOSRealArg & incVol,
         WitBoolean           asapMultiExec);

      void witSetDemandAppData (
         const char * partName,
         const char * demandName,
         void *       appData);

      void witSetDemandBuildAheadUB (
         const char * partName,
         const char * demandName,
         const int *  buildAheadUB);

      void witSetDemandBuildAheadLimit (
         const char * partName,
         const char * demandName,
         int          buildAheadLimit);

      void witSetDemandCumShipBounds (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & hardLower,
         const WitIVRealArg & softLower,
         const WitIVRealArg & hardUpper);

      void witSetDemandCumShipReward (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & cumShipReward);

      void witSetDemandDemandName (
         const char * partName,
         const char * demandName,
         const char * newName);

      void witSetDemandDemandVol (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & demandVol);

      void witSetDemandFocusHorizon (
         const char * partNameParm,
         const char * demandNameParm,
         int          i);

      void witSetDemandFssShipVol (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & fssShipVol);

      void witSetDemandIntShipVols (
         const char * partName,
         const char * demandName,
         WitBoolean   intShipVols);

      void witSetDemandLeadTimeUB (
         const char * partName,
         const char * demandName,
         const int *  leadTimeUB);

      void witSetDemandObj1CumShipReward (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & obj1CumShipReward);

      void witSetDemandObj1ShipReward (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & obj1ShipReward);

      void witSetDemandPrefBuildAhead (
         const char * partName,
         const char * demandName,
         WitBoolean   prefBuildAhead);

      void witSetDemandPriority (
         const char * partName,
         const char * demandName,
         const int *  priority);

      void witSetDemandSearchInc (
         const char *         partName,
         const char *         demandName,
         const WitISRealArg & searchInc);

      void witSetDemandSelForDel (
         const char * partName,
         const char * demandName,
         WitBoolean   selForDel);

      void witSetDemandShipLateAllowed (
         const char * partName,
         const char * demandName,
         WitBoolean   shipLateAllowed);

      void witSetDemandShipLateLimit (
         const char * partName,
         const char * demandName,
         int          shipLateLimit);

      void witSetDemandShipLateUB (
         const char * partName,
         const char * demandName,
         const int *  shipLateUB);

      void witSetDemandShipReward (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & shipReward);

      void witSetDemandShipVol (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & shipVol);

      //------------------------------------------------------------------------
      // API functions implemented in opnApi.C.
      //------------------------------------------------------------------------

      WitOperation * setGetOperationInit (
         const char * operationName);

      void witAddOperation (
         const char * operationName);

      void witCopyOperationData (
         const char * dupOperationName,
         WitRun *     origWitRun,
         const char * origOperationName);

      void witGetObjItrOperation (
         char * * operationName);

      void witGetOperationAppData (
         const char * operationName,
         void * *     appData);

      void witGetOperationCycleTime34 (
         const char *         operationName,
         const WitOVRealArg & cycleTime34);

      void witGetOperationExecBounds (
         const char *         operationName,
         const WitOVRealArg & hardLower,
         const WitOVRealArg & softLower,
         const WitOVRealArg & hardUpper);

      void witGetOperationExecCost (
         const char *         operationName,
         const WitOVRealArg & execCost);

      void witGetOperationExecPenalty (
         const char *         operationName,
         const WitOSRealArg & execPenalty);

      void witGetOperationExecSlbConIndex (
         const char * operationName,
         const int    thePer,
         int *        execSlbConIndex);

      void witGetOperationExecSlbvVarIndex (
         const char * operationName,
         const int    thePer,
         int *        execSlbvVarIndex);

      void witGetOperationExecVarIndex (
         const char * operationName,
         const int    thePer,
         int *        execVarIndex);

      void witGetOperationExecVol (
         const char *         operationName,
         const WitOVRealArg & execVol);

      void witGetOperationExecutable (
         const char *   operationName,
         WitBoolean * * executable);

      void witGetOperationExists (
         const char * operationName,
         WitBoolean * exists);

      void witGetOperationFssExecVol (
         const char *         operationName,
         const WitOVRealArg & fssExecVol);

      void witGetOperationIncLotSize (
         const char *         operationName,
         const WitOVRealArg & incLotSize);

      void witGetOperationIncLotSize2 (
         const char *         operationName,
         const WitOVRealArg & incLotSize2);

      void witGetOperationIntExecVols (
         const char * operationName,
         WitBoolean * intExecVols);

      void witGetOperationLotSize2Thresh (
         const char *         operationName,
         const WitOVRealArg & lotSize2Thresh);

      void witGetOperationMinLotSize (
         const char *         operationName,
         const WitOVRealArg & minLotSize);

      void witGetOperationMinLotSize2 (
         const char *         operationName,
         const WitOVRealArg & minLotSize2);

      void witGetOperationMrpExecVol (
         const char *         operationName,
         const WitOVRealArg & mrpExecVol);

      void witGetOperationNBomEntries (
         const char * operationName,
         int *        nBomEntries);

      void witGetOperationNBopEntries (
         const char * operationName,
         int *        nBopEntries);

      void witGetOperationObj1ExecCost (
         const char *         operationName,
         const WitOVRealArg & obj1ExecCost);

      void witGetOperationObjectStage (
         const char * operationName,
         int *        objectStage);

      void witGetOperations (
         int *      lenOperationList,
         char * * * operationList);

      void witGetOperationSelForDel (
         const char * operationName,
         WitBoolean * selForDel);

      void witGetOperationTwoLevelLotSizes (
         const char * operationName,
         WitBoolean * twoLevelLotSizes);

      void witGetOperationYield (
         const char * operationName,
         int * *      yield);

      void witGetOperationYieldRate (
         const char *         operationName,
         const WitOVRealArg & yield);

      void witSetOperationAppData (
         const char * operationName,
         void *       appData);

      void witSetOperationCycleTime34 (
         const char *         operationName,
         const WitIVRealArg & cycleTime34);

      void witSetOperationExecBounds (
         const char *         operationName,
         const WitIVRealArg & hardLower,
         const WitIVRealArg & softLower,
         const WitIVRealArg & hardUpper);

      void witSetOperationExecCost (
         const char *         operationName,
         const WitIVRealArg & execCost);

      void witSetOperationExecPenalty (
         const char *         operationName,
         const WitISRealArg & execPenalty);

      void witSetOperationExecVol (
         const char *         operationName,
         const WitIVRealArg & execVol);

      void witSetOperationIncLotSize (
         const char *         operationName,
         const WitIVRealArg & incLotSize);

      void witSetOperationIncLotSize2 (
         const char *         operationName,
         const WitIVRealArg & incLotSize2);

      void witSetOperationIntExecVols (
         const char * operationName,
         WitBoolean   intExecVols);

      void witSetOperationLotSize2Thresh (
         const char *         operationName,
         const WitIVRealArg & lotSize2Thresh);

      void witSetOperationMinLotSize (
         const char *         operationName,
         const WitIVRealArg & minLotSize);

      void witSetOperationMinLotSize2 (
         const char *         operationName,
         const WitIVRealArg & minLotSize2);

      void witSetOperationObj1ExecCost (
         const char *         operationName,
         const WitIVRealArg & obj1ExecCost);

      void witSetOperationObjectStage (
         const char * operationName,
         int          objectStage);

      void witSetOperationOperationName (
         const char * operationName,
         const char * newName);

      void witSetOperationSelForDel (
         const char * operationName,
         WitBoolean   selForDel);

      void witSetOperationTwoLevelLotSizes (
         const char * operationName,
         WitBoolean   twoLevelLotSizes);

      void witSetOperationYield (
         const char * operationName,
         const int *  yield);

      void witSetOperationYieldRate (
         const char *         operationName,
         const WitIVRealArg & yieldRate);

      //------------------------------------------------------------------------
      // API functions implemented in bomApi.C.
      //------------------------------------------------------------------------

      WitBomEntry * setGetBomEntryInit (
         const char *    consumingOperationName,
         int             bomEntryIndex);

      void witAddBomEntry (
         const char * consumingOperationName,
         const char * consumedPartName);

      void witCopyBomEntryData (
         const char * dupOperationName,
         int          dupBomEntryIndex,
         WitRun *     origWitRun,
         const char * origOperationName,
         int          origBomEntryIndex);

      void witGetObjItrBomEntry (
         char * * consumingOperationName,
         int *    bomEntryIndex);

      void witGetBomEntryAppData (
         const char * consumingOperationName,
         int          bomEntryIndex,
         void * *     appData);

      void witGetBomEntryConsRate (
         const char *         partName,
         int                  bomEntryIndex,
         const WitOVRealArg & consRate);

      void witGetBomEntryConsumedPart (
         const char * consumingOperationName,
         int          bomEntryIndex,
         char * *     consumedPartName);

      void witGetBomEntryEarliestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int *        earliestPeriod);

      void witGetBomEntryExecPenalty (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         const WitOSRealArg & execPenalty);

      void witGetBomEntryFallout (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int *        fallout);

      void witGetBomEntryFalloutRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         const WitOSRealArg & falloutRate);

      void witGetBomEntryImpactPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int * *      impactPeriod);

      void witGetBomEntryLatestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int *        latestPeriod);

      void witGetBomEntryMandEC (
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitBoolean * mandEC);

      void witGetBomEntryNSubsBomEntries (
         const char * partName,
         int          bomEntryIndex,
         int *        nSubsBomEntries);

      void witGetBomEntryNonSubVarIndex (
         const char * consumingOperationName,
         int          bomEntryIndex,
         const int    thePer,
         int *        nonSubVarIndex);

      void witGetBomEntryOffset (
         const char *         partName,
         int                  bomEntryIndex,
         const WitOVRealArg & offset);

      void witGetBomEntryPropRouting (
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitBoolean * propRouting);

      void witGetBomEntryPropRtg (
         const char *   consumingOperationName,
         int            bomEntryIndex,
         WitBoolean * * propRtg);

      void witGetBomEntryRoutingShare (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         const WitOVRealArg & routingShare);

      void witGetBomEntrySelForDel (
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitBoolean * selForDel);

      void witGetBomEntrySingleSource (
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitBoolean * singleSource);

      void witGetBomEntrySubConIndex (
         const char * consumingOperationName,
         int          bomEntryIndex,
         const int    thePer,
         int *        subConIndex);

      void witGetBomEntryUsageRate (
         const char *         partName,
         int                  bomEntryIndex,
         const WitOSRealArg & usageRate);

      void witGetBomEntryUsageTime (
         const char *         partName,
         int                  bomEntryIndex,
         const WitOSRealArg & usageTime);

      void witSetBomEntryAppData (
         const char * operationName,
         int          bomEntryIndex,
         void *       appData);

      void witSetBomEntryConsRate (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitIVRealArg & consRate);

      void witSetBomEntryEarliestPeriod (
         const char * operationName,
         int          bomEntryIndex,
         int          earliestPeriod);

      void witSetBomEntryExecPenalty (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitISRealArg & execPenalty);

      void witSetBomEntryFallout (
         const char * operationName,
         int          bomEntryIndex,
         int          fallout);

      void witSetBomEntryFalloutRate (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitISRealArg & falloutRate);

      void witSetBomEntryLatestPeriod (
         const char * operationName,
         int          bomEntryIndex,
         int          latestPeriod);

      void witSetBomEntryMandEC (
         const char * operationName,
         int          bomEntryIndex,
         WitBoolean   mandEC);

      void witSetBomEntryOffset (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitIVRealArg & offset);

      void witSetBomEntryPropRouting (
         const char * operationName,
         int          bomEntryIndex,
         WitBoolean   propRouting);

      void witSetBomEntryPropRtg (
         const char *       operationName,
         int                bomEntryIndex,
         const WitBoolean * propRtg);

      void witSetBomEntryRoutingShare (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitIVRealArg & routingShare);

      void witSetBomEntrySelForDel (
         const char * operationName,
         int          bomEntryIndex,
         WitBoolean   selForDel);

      void witSetBomEntrySingleSource (
         const char * operationName,
         int          bomEntryIndex,
         WitBoolean   singleSource);

      void witSetBomEntryUsageRate (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitISRealArg & usageRate);

      void witSetBomEntryUsageTime (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitISRealArg & time);

      //------------------------------------------------------------------------
      // API functions implemented in subApi.C.
      //------------------------------------------------------------------------

      WitSubEntry * setGetSubBomEntryInit (
         const char *     consumingOperationName,
         int              bomEntryIndex,
         int              subsBomEntryIndex);

      void witAddSubsBomEntry (
         const char * consumingOperationName,
         int          bomEntryIndex,
         const char * consumedPartName);

      void witCopySubsBomEntryData (
         const char * dupOperationName,
         int          dupBomEntryIndex,
         int          dupSubsBomEntryIndex,
         WitRun *     origWitRun,
         const char * origOperationName,
         int          origBomEntryIndex,
         int          origSubsBomEntryIndex);

      void witGetObjItrSubsBomEntry (
         char * * consumingOperationName,
         int *    bomEntryIndex,
         int *    subsBomEntryIndex);

      void witGetSubsBomEntryAppData (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         void * *     appData);

      void witGetSubsBomEntryConsRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & consRate);

      void witGetSubsBomEntryConsumedPart (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         char * *     consumedPart);

      void witGetSubsBomEntryEarliestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int *        earliestPeriod);

      void witGetSubsBomEntryExecPenalty (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOSRealArg & execPenalty);

      void witGetSubsBomEntryExpAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * expAllowed);

      void witGetSubsBomEntryExpNetAversion (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOSRealArg & expNetAversion);

      void witGetSubsBomEntryFallout (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int *        fallout);

      void witGetSubsBomEntryFalloutRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOSRealArg & falloutRate);

      void witGetSubsBomEntryFssSubVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & fssSubVol);

      void witGetSubsBomEntryImpactPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int * *      impactPeriod);

      void witGetSubsBomEntryIntSubVols (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * intSubVols);

      void witGetSubsBomEntryLatestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int *        latestPeriod);

      void witGetSubsBomEntryMrpNetAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * mrpNetAllowed);

      void witGetSubsBomEntryMrpSubVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & mrpSubVol);

      void witGetSubsBomEntryNetAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * netAllowed);

      void witGetSubsBomEntryObj1SubCost (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & obj1SubCost);

      void witGetSubsBomEntryOffset (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & offset);

      void witGetSubsBomEntryProdVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & prodVol);

      void witGetSubsBomEntryRoutingShare (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & routingShare);

      void witGetSubsBomEntrySelForDel (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * selForDel);

      void witGetSubsBomEntrySubCost (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & subCost);

      void witGetSubsBomEntrySubVarIndex (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         const int    thePer,
         int *        subVarIndex);

      void witGetSubsBomEntrySubVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & subVol);

      void witGetSubsBomEntryUsageRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOSRealArg & usageRate);

      void witSetSubsBomEntryAppData (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         void *       appData);

      void witSetSubsBomEntryConsRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & consRate);

      void witSetSubsBomEntryEarliestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int          earliestPeriod);

      void witSetSubsBomEntryExecPenalty (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitISRealArg & execPenalty);

      void witSetSubsBomEntryExpAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   expAllowed);

      void witSetSubsBomEntryExpNetAversion (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitISRealArg & expNetAversion);

      void witSetSubsBomEntryFallout (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int          fallout);

      void witSetSubsBomEntryFalloutRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitISRealArg & falloutRate);

      void witSetSubsBomEntryIntSubVols (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   intSubVols);

      void witSetSubsBomEntryLatestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int          latestPeriod);

      void witSetSubsBomEntryMrpNetAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   mrpNetAllowed);

      void witSetSubsBomEntryNetAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   netAllowed);

      void witSetSubsBomEntryObj1SubCost (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & obj1SubCost);

      void witSetSubsBomEntryOffset (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & offset);

      void witSetSubsBomEntryProdVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & prodVol);

      void witSetSubsBomEntryRoutingShare (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & routingShare);

      void witSetSubsBomEntrySelForDel (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   selForDel);

      void witSetSubsBomEntrySubCost (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & subCost);

      void witSetSubsBomEntrySubVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & subVol);

      void witSetSubsBomEntryUsageRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitISRealArg & usageRate);

      //------------------------------------------------------------------------
      // API functions implemented in bopApi.C.
      //------------------------------------------------------------------------

      WitBopEntry * setGetBopEntryInit (
         const char *    producingOperationName,
         int             bopEntryIndex);

      void witAddBopEntry (
         const char * producingOperationName,
         const char * producedPartName);

      void witCopyBopEntryData (
         const char * dupOperationName,
         int          dupBopEntryIndex,
         WitRun *     origWitRun,
         const char * origOperationName,
         int          origBopEntryIndex);

      void witGetObjItrBopEntry (
         char * * producingOperationName,
         int *    bopEntryIndex);

      void witGetBopEntryAppData (
         const char * producingOperationName,
         int          bomEntryIndex,
         void * *     appData);

      void witGetBopEntryByProduct (
         const char * producingOperationName,
         int          bomEntryIndex,
         WitBoolean * byProduct);

      void witGetBopEntryEarliestPeriod (
         const char * producingOperationName,
         int          bomEntryIndex,
         int *        earliestPeriod);

      void witGetBopEntryExpAllowed (
         const char * producingOperationName,
         int          bomEntryIndex,
         WitBoolean * expAllowed);

      void witGetBopEntryExpAversion (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOSRealArg & expAversion);

      void witGetBopEntryImpactPeriod (
         const char * producingOperationName,
         int          bopEntryIndex,
         int * *      impactPeriod);

      void witGetBopEntryLatestPeriod (
         const char * producingOperationName,
         int          bomEntryIndex,
         int *        latestPeriod);

      void witGetBopEntryMeSelSplit (
         const char * producingOperationName,
         int          bomEntryIndex,
         WitBoolean * meSelSplit);

      void witGetBopEntryOffset (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOVRealArg & offset);

      void witGetBopEntryProdRate (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOSRealArg & prodRate);

      void witGetBopEntryProductRate (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOVRealArg & productRate);

      void witGetBopEntryProducedPart (
         const char * producingOperationName,
         int          bopEntryIndex,
         char * *     producedPartName);

      void witGetBopEntryRoutingShare (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOVRealArg & routingShare);

      void witGetBopEntrySelForDel (
         const char * producingOperationName,
         int          bomEntryIndex,
         WitBoolean * selForDel);

      void witSetBopEntryAppData (
         const char * producingOperationName,
         int          bopEntryIndex,
         void *       appData);

      void witSetBopEntryByProduct (
         const char * producingOperationName,
         int          bopEntryIndex,
         WitBoolean   byProduct);

      void witSetBopEntryEarliestPeriod (
         const char * producingOperationName,
         int          bopEntryIndex,
         int          earliestPeriod);

      void witSetBopEntryExpAllowed (
         const char * producingOperationName,
         int          bopEntryIndex,
         WitBoolean   expAllowed);

      void witSetBopEntryExpAversion (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitISRealArg & expAversion);

      void witSetBopEntryLatestPeriod (
         const char * producingOperationName,
         int          bopEntryIndex,
         int          latestPeriod);

      void witSetBopEntryMeSelSplit (
         const char * producingOperationName,
         int          bopEntryIndex,
         WitBoolean   meSelSplit);

      void witSetBopEntryOffset (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitIVRealArg & offset);

      void witSetBopEntryProdRate (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitISRealArg & prodRate);

      void witSetBopEntryProductRate (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitIVRealArg & productRate);

      void witSetBopEntryRoutingShare (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitIVRealArg & routingShare);

      void witSetBopEntrySelForDel (
         const char * producingOperationName,
         int          bopEntryIndex,
         WitBoolean   selForDel);

      //------------------------------------------------------------------------
      // API functions implemented in msgApi.C.
      //------------------------------------------------------------------------

      void witGetMesgFile (
         FILE * * mesgFile);

      void witSetMesgFileAccessMode (
         WitBoolean   quiet,
         const char * mesgFileAccessMode);

      void witGetMesgFileAccessMode (
         char * * mesgFileAccessMode);

      void witSetMesgFileName (
         WitBoolean   quiet,
         const char * mesgFileName);

      void witGetMesgFileName (
         char * * mesgFileName);

      void witSetMesgPrintNumber (
         WitBoolean quiet,
         int        messageNumber,
         WitBoolean mesgPrintMunber);

      void witGetMesgPrintNumber (
         int          messageNumber,
         WitBoolean * mesgPrintMunber);

      void witSetMesgStopRunning (
         WitBoolean quiet,
         int        messageNumber,
         WitBoolean mesgStopRunning);

      void witGetMesgStopRunning (
         int          messageNumber,
         WitBoolean * mesgStopRunning);

      void witSetMesgThrowErrorExc (
         WitBoolean quiet,
         int        messageNumber,
         WitBoolean mesgThrowErrorExc);

      void witGetMesgThrowErrorExc (
         int          messageNumber,
         WitBoolean * mesgThrowErrorExc);

      void witSetMesgTimesPrint (
         WitBoolean quiet,
         int        messageNumber,
         int        mesgTimesPrint);

      void witGetMesgTimesPrint (
         int        messageNumber,
         int *      mesgTimesPrint);

      void witListUnissuedMsgs ();

      //------------------------------------------------------------------------
      // Non-API public member functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      static WitRun * newInstance ();
         //
         // Constructs (on the heap) and returns a new WitRun.
         // To be used instead of the WitRun ctor, which is private.

      static void validateWitRun (WitRun * theWitRun, const char * theFuncName);
         //
         // Verifies that theWitRun is a valid WitRun.
         //
         // theFuncName: Name of the outer API function that was called.

      void forbidNullArg (const void * theArg, const char * argName);
         //
         // theArg:  A pointer that was passed to WIT as an argument to an
         //          API function.
         // argName: The name of the argument
         // If theArg is NULL, this function issues a severe error
         // identifying argName.

      static void apiVoidAlloc (void * *, int, size_t);
         //
         // Called by NonClass::apiAlloc.

      //------------------------------------------------------------------------
      // apiGet functions.
      //
      // These functions are designed to be called by the witGet<Object><Attr>
      // API functions. A typical apiGet function has three arguments:
      // theValue is the value to be returned by the calling API function.
      // theVarPtr is a pointer to a variable in which the value is to be
      // stored.
      // argName is the name of the argument for error reporting.
      //
      // At its simplest, an apiGet function is implemented as a simple
      // assignment. But it is also responsible for translating from the WIT
      // internal representation of an attribute (the type of theValue) into
      // the API representation of the attribute (the type of * theVarPtr). It
      // is also responsible for allocating memory, if needed.
      // Also, if theVarPtr is NULL, a severe error is issued.
      //------------------------------------------------------------------------

      void apiGet (
         int *        theVarPtr,
         const char * argName,
         int          theValue);

      void apiGet (
         WitBoolean * theVarPtr,
         const char * argName,
         bool         theValue);

      void apiGet (
         const WitOSRealArg & theArg,
         const char *         argName,
         double               theValue);

      void apiGet (
         WitAttr *    theVarPtr,
         const char * argName,
         WitAttr      theValue);

      void apiGet (
         FILE * *     theVarPtr,
         const char * argName,
         FILE *       theValue);

      void apiGet (
         void * *     theVarPtr,
         const char * argName,
         void *       theValue);

      void apiGet (
         char * *          theVarPtr,
         const char *      argName,
         const WitString & theValue);

      void apiGet (
         const WitOVRealArg &       theArg,
         const char *               argName,
         const WitVector <double> & theValue);

      void apiGet (
         int * *                 theVarPtr,
         const char *            argName,
         const WitVector <int> & theValue);

      void apiGet (
         WitBoolean * *           theVarPtr,
         const char *             argName,
         const WitVector <bool> & theValue);

      void apiGet (
         const WitOVRealArg &  theArg,
         const char *          argName,
         const WitDblFlexVec & theValue);

      void apiGet (
         WitBoolean * *            theVarPtr,
         const char *              argName,
         const WitFlexVec <bool> & theValue);

      void apiGet (
         int * *                  theVarPtr,
         const char *             argName,
         const WitFlexVec <int> & theValue);

      void apiGet (
         const WitOVRealArg & hardLBVec,
         const WitOVRealArg & softLBVec,
         const WitOVRealArg & hardUBVec,
         WitBoundSet *        theValue);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitApiMgr *,       myApiMgr)
      accessFunc    (WitSession *,      mySession)

      accessWrapper (WitMsgFacility &,  myMsgFac,        mySession ())
      accessWrapper (WitProblem *,      myProblem,       mySession ())
      accessWrapper (WitCompMgr *,      myCompMgr,       myProblem ())
      accessWrapper (WitGlobalComp *,   myGlobalComp,    myProblem ())
      accessWrapper (WitOptComp *,      myOptComp,       myProblem ())
      accessWrapper (WitDetOptImpMgr *, myDetOptImpMgr,  myProblem ())
      accessWrapper (WitStochImpMgr *,  myStochImpMgr,   myProblem ())
      accessWrapper (int,               nPeriods,        myProblem ())
      accessWrapper (bool,              wit34Compatible, myProblem ())

      WitInputID * myInputID () const;

   private:

      //------------------------------------------------------------------------
      // Private member functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRun ();
         //
         // Declared private so that newInstance must be used.

      //------------------------------------------------------------------------
      // Other private member functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      WitDelComp * curItrDelCompForGet (
            WitAttr      objItrStateVal,
            WitMsgFragID theObjTypeFragID);
         //
         // Does error checking for witGetObjItr<Object> functions.
         // objItrStateVal and theObjTypeFragID must match the class of DelComp
         // iteration's current DelComp.
         // If no errors occur, returns DelComp iteration's current DelComp.

      static void handleBadAllocForCtor ();
         //
         // Handles an std::bad_alloc exception during the ctor for this class.

      void startCopyObjData (WitRun * origWitRun);
         //
         // Performs the tasks of a witCopy<Object>Data function that are not
         // specific to the function.

      void checkGlobAttsForCopy (WitRun * origWitRun);
         //
         // Verifies that the necessary global attributes of this WitRun and
         // origWitRun match for a call to a witCopy<Object>Data function.

      void prepSet34Attr (
            const char * the34Object,
            const char * the34Attribute,
            const char * the40Object,
            const char * the40Attribute);
         //
         // Does the preparatory tasks for an API "set" function on a WIT 3.4
         // attribute. The tasks are:
         //    Verify 3.4 compatibility mode.
         //    Issue the appropriate message.
         // the34Object    is the name of the object type for the 3.4 attribute.
         // the34Attribute is the name of the 3.4 attribute
         // the40Object    is the name of the object type for the 4.0 attribute.
         // the40Attribute is the name of the 4.0 attribute

      void prepGet34Attr (
            const char * the34Object,
            const char * the34Attribute,
            const char * the40Object,
            const char * the40Attribute);
         //
         // Does the preparatory work for an API "get" function on a WIT 3.4
         // attribute. The tasks are:
         //    Verify 3.4 compatibility mode.
         //    Issue the appropriate message.
         // the34Object    is the name of the object type for the 3.4 attribute.
         // the34Attribute is the name of the 3.4 attribute
         // the40Object    is the name of the object type for the 4.0 attribute.
         // the40Attribute is the name of the 4.0 attribute

      void prepGetIndex (int thePer);
         //
         // Prepares a witGet...VarIndex or ConIndex API function call.

      void addingDelComp (WitMsgFragID theObjTypeFragID);
         //
         // Takes action appropriate when a DelComp is being added.
         // theObjTypeFragID identifies the type of the DelComp.

      void forbidStochMode ();
         //
         // Issues a severe error, if this WitRun is in stochastic mode.

      const char * apiFuncName ();
         //
         // Returns myApiMgr ()->apiFuncName ();

      noCopyCtorAssign (WitRun);

      //------------------------------------------------------------------------
      // Private member functions implemented in globApi.C.
      //------------------------------------------------------------------------

      void issueGetAttrMsg (const char * theAttName) const;
         //
         // Issues a message for getting the attribute whose name is given by
         // theAttName, if appropriate.

      bool alwaysTrue ();
         //
         // Always returns true. This is used by witExhaustMemory () to prevent
         // the compiler from issuing a warning message about the function's
         // apparent infinite loop. Also, this function must be implemented in
         // a file other than WitRun.C, in order to prevent the compiler from
         // analyzing its content, when it's compiling witExhaustMemory ().

      //------------------------------------------------------------------------
      // Private member functions implemented in optApi.C.
      //------------------------------------------------------------------------

      void parseObjectiveListSpec (
            const char *     objectiveListSpec,
            WitList <char> & theObjNameList);
         //
         // Parses objectiveListSpec and stores the Objective names that it
         // specifies in theObjNameList
         // The c-strings stored by this function will need to be deleted.

      void checkForDupObjNames (const WitVector <const char *> & theObjNames);
         //
         // Checks for duplicate names in theObjNames.

      //------------------------------------------------------------------------
      // Private member functions implemented in partApi.C.
      //------------------------------------------------------------------------

      WitPart * addPart34 (
            const char * partName, WitAttr partCategory);
         //
         // Adds a part in WIT 3.4 mode.

      WitPart * addPartPost34 (
            const char * partName, WitAttr partCategory);
         //
         // Adds a part in Post WIT 3.4 mode.

      WitPart * getPartP (const char * partName);

      //------------------------------------------------------------------------
      // Private member functions implemented in demApi.C.
      //------------------------------------------------------------------------

      WitDemand * getDemandP (
         const char * demandedPartName,
         const char * demandName);

      void eqHeurAlloc (
         int                  lenLists,
         const char * const * demandedPartNameList,
         const char * const * demandNameList,
         const int *          shipPeriodList,
         const WitIVRealArg & desIncVolList,
         const WitOVRealArg & incVolList,
         const WitBoolean *   asapMultiExecList);

      void incHeurAlloc (
         const char *         demandedPartName,
         const char *         demandName,
         int                  shipPeriod,
         const WitISRealArg & desIncVol,
         const WitOSRealArg & incVol,
         WitBoolean           asapMultiExec);

      void defineAllocTarget (
         const char *     demandedPartName,
         const char *     demandName,
         int              shipPeriod,
         double           desIncVol,
         bool             asapMultiExec,
         WitDemPerStack & theDemPers);

      void prepGetPegging (int shipPeriod);
         //
         // Prepares a concurrent pegging API function call.

      void getPartPip (
         WitPartTripStack &   thePegTrips,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void prepGetPip (int shipPeriod);
         //
         // Prepares a post-implosion pegging API function call.

      //------------------------------------------------------------------------
      // Private member functions implemented in opnApi.C.
      //------------------------------------------------------------------------

      WitOperation * getOperationP (const char * operationName);

      //------------------------------------------------------------------------
      // Private member functions implemented in bomApi.C.
      //------------------------------------------------------------------------

      WitBomEntry * getBomEntryP (
         const char * consumingOperationName,
         int          bomEntryIndex);

      //------------------------------------------------------------------------
      // Private member functions implemented in subApi.C.
      //------------------------------------------------------------------------

      WitSubEntry * getSubBomEntryP (
         const char * operationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex);

      //------------------------------------------------------------------------
      // Private member functions implemented in bopApi.C.
      //------------------------------------------------------------------------

      WitBopEntry * getBopEntryP (
         const char * producingOperationName,
         int          bopEntryIndex);

      //------------------------------------------------------------------------
      // Private member functions implemented in msgApi.C.
      //------------------------------------------------------------------------

      const char * levelExtNumFragID (int theExtNum);
         //
         // Returns the message fragment ID for a severity level indicated by
         // theExtNum.

      bool checkMsgExtNum (int theExtNum);
         //
         // Returns true, iff theExtNum is the externalNumber of a Msg.
         // If not, issues a warning Msg.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      int signature_;
         //
         // This WitRun is a valid WitRun only if signature_ == VALID_SIGNATURE.

      WitApiMgr * myApiMgr_;
         //
         // The ApiMgr owned by this WitRun.

      WitSession * mySession_;
         //
         // The Session for this WitRun.

      int nDepVeneers_;
         //
         // The number of LgFrWitRunVeneers that point to this WitRun
   };

//------------------------------------------------------------------------------

namespace WitNonClass
   {
   template <typename Elem> 
         void apiAlloc (Elem * * theCVecPtr, int nElems);
      //
      // Allocates * theCVecPtr to nElems elements.
      // Uses malloc, so the * theCVecPtr can be passed back to the application
      // program.

   void apiAlloc (const WitOVRealArg & theOVRealArg, int nElems);
      //
      // Same as the above.
   };

#endif
@


1.381
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.380
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d51 2
a52 86
{
public:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitRun ();

//------------------------------------------------------------------------
// API functions implemented in WitRun.C.
//------------------------------------------------------------------------

void witAdvanceObjItr ();

void witBuildPip ();

void witClearPegging ();

void witCopyData (
WitRun * origWitRun);

void witDeleteRun ();

void witGetDevMode (WitBoolean * devMode);

void witDisplayData (
const char * fileName);

void witEvalObjectives ();

void witFinishExtOpt ();

void witFinishHeurAlloc ();

void witGeneratePriorities ();

void witGetExpCycle (
int *      lenLists,
char * * * partNameList,
char * * * operationNameList);

void witGetExtOptIntVarIndices (int * * indices, int * len);

void witGetExtOptLpProb (
int *                numcols,
int *                numrows,
int * *              start,
int * *              index,
const WitOVRealArg & value,
const WitOVRealArg & collb,
const WitOVRealArg & colub,
const WitOVRealArg & obj,
const WitOVRealArg & rowlb,
const WitOVRealArg & rowub);

void witGetObjItrState (WitAttr * objItrState);

void witHeurImplode ();

void witInitialize ();

void witIssueFatalMesg ();

void witMrp ();

void witNewRun ();

void witOptImplode ();

void witOptPreprocess ();

void witPostprocess ();

void witPreprocess ();

void witPurgeData ();

void witReadData (
const char * fileName);

void witResetObjItr ();

void witSetExtOptSoln (const WitIVRealArg & colsol);

void witShutDownExtOpt ();
d54 2746
a2799 2662
void witShutDownHeurAlloc ();

void witStartExtOpt ();

void witStartHeurAlloc ();

void witWriteCriticalList (
const char *  fileName,
WitFileFormat fileFormat,
int           maxListLen);

void witWriteData (
const char * fileName);

void witWriteExecSched (
const char *  fileName,
WitFileFormat fileFormat);

void witWriteProdSched (
const char *  fileName,
WitFileFormat fileFormat);

void witWriteReqSched (
const char *  fileName,
WitFileFormat fileFormat);

void witWriteShipSched (
const char *  fileName,
WitFileFormat fileFormat);

void witNoDependantWitRunVeneersIsOne (
int * isOne);

void witNoDependantWitRunVeneersDecr  ();

void witNoDependantWitRunVeneersIncr  ();

void witExhaustMemory ();

void witExecStandAlone (int argc, char * argv[]);
//
// Performs main actions of the WIT stand-alone executable.
// argc and argv are to be the same as the arguments passed to the main
// program.

void witInterpretDevCmd (const char * theDevCmd);
//
// Interprets the development command indicated by theDevCmd.
// Severe error, if theDevCmd is not recognized.

//------------------------------------------------------------------------
// API functions implemented in globApi.C.
//------------------------------------------------------------------------

void witClearPipSeq ();

void witGetAppData (
void * * value);

void witGetAutoPriority (
WitBoolean * value);

void witGetBuildWhenEmpty (
WitBoolean * value);

void witGetComputeCriticalList (
WitBoolean * computeCriticalList);

void witGetCriticalList (
int *      lenCritList,
char * * * partList,
int * *    perList);

void witGetEquitability (
int * equitability);

void witGetExecEmptyBom (
WitBoolean * execEmptyBom);

void witGetExpCutoff (
const WitOSRealArg & expCutoff);

void witGetFeasible (
WitBoolean * feasible);

void witGetForcedMultiEq (
WitBoolean * value);

void witGetHashTableSize (
int * hashTableSize);

void witGetHeurAllocActive (
WitBoolean * heurAllocActive);

void witGetHighPrecisionWD (
WitBoolean * highPrecisionWD);

void witGetIndependentOffsets (
WitBoolean * independentOffsets);

void witGetLocalBuildAhead (
WitBoolean * localBuildAhead);

void witGetLocalMultiExec (
WitBoolean * localMultiExec);

void witGetLotSizeTol (
const WitOSRealArg & lotSizeTol);

void witGetMinimalExcess (
WitBoolean * minimalExcess);

void witGetModHeurAlloc (
WitBoolean * modHeurAlloc);

void witGetMultiExec (
WitBoolean * multiExec);

void witGetMultiRoute (
WitBoolean * value);

void witGetNPeriods (
int * nPeriods);

void witGetNewPipPggOrder (
WitBoolean * newPipPggOrder);

void witGetNonMrSelSplit (
WitBoolean * nonMrSelSplit);

void witGetNstnResidual (
WitBoolean * nstnResidual);

void witGetOutputPrecision (
int * outputPrecision);

void witGetPenExec (
WitBoolean * penExec);

void witGetPerfPegging (
WitBoolean * perfPegging);

void witGetPgdCritList (
int *      lenLists,
char * * * critPartNameList,
int * *    critPerList,
char * * * demPartNameList,
char * * * demandNameList,
int * *    shipPerList);

void witGetPgdCritListMode (
WitBoolean * pgdCritListMode);

void witGetPipExists (
WitBoolean * pipExists);

void witGetPipSeq (
int *                lenLists,
char * * *           partNameList,
char * * *           demandNameList,
int * *              shipPerList,
const WitOVRealArg & incShipVolList);

void witGetPipSeqFromHeur (
WitBoolean * pipSeqFromHeur);

void witGetPostprocessed (
WitBoolean * postprocessed);

void witGetPrefHighStockSLBs (
WitBoolean * prefHighStockSLBs);

void witGetPreprocessed (
WitBoolean * preprocessed);

void witGetRespectStockSLBs (
WitBoolean * respectStockSLBs);

void witGetRoundReqVols (
WitBoolean * roundReqVols);

void witGetSelSplit (
WitBoolean * selSplit);

void witGetSelectionRecovery (
WitBoolean * value);

void witGetSkipFailures (
WitBoolean * value);

void witGetStockRealloc (
WitBoolean * stockRealloc);

void witGetStockReallocation (
WitBoolean * stockReallocation);

void witGetSrSelSplit (
WitBoolean * srSelSplit);

void witGetTieBreakPropRt (
WitBoolean * tieBreakPropRt);

void witGetTitle (
char * * title);

void witGetTruncOffsets (
WitBoolean * value);

void witGetTwoWayMultiExec (
WitBoolean * twoWayMultiExec);

void witGetUseFocusHorizons (
WitBoolean * useFocusHorizons);

void witGetUserHeurStart (
WitBoolean * userHeurStart);

void witGetWit34Compatible (
WitBoolean * value);

void witSetAppData (
void * appData);

void witSetAutoPriority (
WitBoolean autoPriority);

void witSetBuildWhenEmpty (
WitBoolean buildWhenEmpty);

void witSetComputeCriticalList (
WitBoolean computeCriticalList);

void witSetEquitability (
int equitability);

void witSetExecEmptyBom (
WitBoolean execEmptyBom);

void witSetExpCutoff (
const WitISRealArg & expCutoff);

void witSetForcedMultiEq (
WitBoolean forcedMultiEq);

void witSetHashTableSize (
int hashTableSize);

void witSetHighPrecisionWD (
WitBoolean highPrecisionWD);

void witSetIndependentOffsets (
WitBoolean independentOffsets);

void witSetLocalBuildAhead (
WitBoolean localBuildAhead);

void witSetLocalMultiExec (
WitBoolean localMultiExec);

void witSetLotSizeTol (
const WitISRealArg & lotSizeTol);

void witSetMinimalExcess (
WitBoolean minimalExcess);

void witSetModHeurAlloc (
WitBoolean modHeurAlloc);

void witSetMultiExec (
WitBoolean multiExec);

void witSetMultiRoute (
WitBoolean multiRoute);

void witSetNPeriods (
int nPeriods);

void witSetNewPipPggOrder (
WitBoolean newPipPggOrder);

void witSetNonMrSelSplit (
WitBoolean nonMrSelSplit);

void witSetNstnResidual (
WitBoolean nstnResidual);

void witSetOutputPrecision (
int outputPrecision);

void witSetPenExec (
WitBoolean penExec);

void witSetPerfPegging (
WitBoolean perfPegging);

void witSetPgdCritListMode (
WitBoolean pgdCritListMode);

void witSetPipSeqFromHeur (
WitBoolean pipSeqFromHeur);

void witSetPrefHighStockSLBs (
WitBoolean prefHighStockSLBs);

void witSetRespectStockSLBs (
WitBoolean respectStockSLBs);

void witSetRoundReqVols (
WitBoolean roundReqVols);

void witSetSelSplit (
WitBoolean selSplit);

void witSetSelectionRecovery (
WitBoolean selectionRecovery);

void witSetSkipFailures (
WitBoolean skipFailures);

void witSetStockRealloc (
WitBoolean stockRealloc);

void witSetStockReallocation (
WitBoolean stockReallocation);

void witSetSrSelSplit (
WitBoolean srSelSplit);

void witSetTieBreakPropRt (
WitBoolean tieBreakPropRt);

void witSetTitle (
const char * title);

void witSetTruncOffsets (
WitBoolean truncOffsets);

void witSetTwoWayMultiExec (
WitBoolean twoWayMultiExec);

void witSetUseFocusHorizons (
WitBoolean useFocusHorizons);

void witSetUserHeurStart (
WitBoolean userHeurStart);

void witSetWit34Compatible (
WitBoolean boolval);

void witSetWit34Allowed (
WitBoolean boolval);

//------------------------------------------------------------------------
// API functions implemented in optApi.C.
//------------------------------------------------------------------------

void witAddDblCplexParSpec (
const char *         theName,
const WitISRealArg & theValue);

void witAddIntCplexParSpec (
const char * theName,
int          theValue);

void witGetAccAfterOptImp (
WitBoolean * value);

void witGetAccAfterSoftLB (
WitBoolean * value);

void witGetAccelerated (
WitBoolean * value);

void witGetBoundsValue (
const WitOSRealArg & boundsValue);

void witClearCplexParSpecs ();

void witGetCompPrices (
WitBoolean * value);

void witGetCplexEmbedded (WitBoolean * cplexEmbedded);

void witGetCplexMipBound (
const WitOSRealArg & cplexMipBound);

void witGetCplexMipRelGap (
const WitOSRealArg & cplexMipRelGap);

void witGetCplexParSpecDblVal (
const WitOSRealArg & cplexParSpecDblVal);

void witGetCplexParSpecIntVal (
int * cplexParSpecIntVal);

void witGetCplexParSpecName (
char * * cplexParSpecName);

void witGetCplexStatusCode (
int * cplexStatusCode);

void witGetCplexStatusText (
char * * cplexStatusText);

void witGetCurrentObjective (
char * * theObjName);

void witGetDblCplexParSpec (
const char *         theName,
WitBoolean *         dblSpecExists,
const WitOSRealArg & theValue);

void witGetExtOptActive (
WitBoolean * extOptActive);

void witGetIntCplexParSpec (
const char * theName,
WitBoolean * intSpecExists,
int *        theValue);

void witGetMipMode (
WitBoolean * value);

void witGetMultiObjMode (
WitBoolean * value);

void witGetMultiObjTol (
const WitOSRealArg & multiObjTol);

void witGetObjChoice (
int * objChoice);

void witGetObjValue (
const WitOSRealArg & objValue);

void witGetObjValues (
const WitOSRealArg & objValue,
const WitOSRealArg & boundsValue);

void witGetObjectiveList (
int  *     lenList,
char * * * objectiveList);

void witGetObjectiveListSpec (
char * * objectiveListSpec);

void witGetObjectiveRank (
int * objectiveRank);

void witGetOptInitMethod (
WitAttr * optInitMethod);

void witGetSolverLogFileName (
char * * solverLogFileName);

void witGetWbounds (
const WitOSRealArg & wbounds);

void witSetAccAfterOptImp (
WitBoolean accAfterOptImp);

void witSetAccAfterSoftLB (
WitBoolean accAfterSoftLB);

void witSetCompPrices (
WitBoolean compPrices);

void witSetCplexParSpecDblVal (
const WitISRealArg & cplexParSpecDblVal);

void witSetCplexParSpecIntVal (
int cplexParSpecIntVal);

void witSetCplexParSpecName (
const char * cplexParSpecName);

void witSetCurrentObjective (
const char * theObjName);

void witSetMipMode (
WitBoolean mipMode);

void witSetMultiObjMode (
WitBoolean multiObjMode);

void witSetMultiObjTol (
const WitISRealArg & multiObjTol);

void witSetObjChoice (
int objChoice);

void witSetObjectiveList (
int                  lenList,
const char * const * objectiveList);

void witSetObjectiveListSpec (
const char * objectiveListSpec);

void witSetObjectiveRank (
int objectiveRank);

void witSetOptInitMethod (
WitAttr optInitMethod);

void witSetSolverLogFileName (
const char * solverLogFileName);

void witSetWbounds (
const WitISRealArg & wbounds);

//------------------------------------------------------------------------
// API functions implemented in stochApi.C.
//------------------------------------------------------------------------

void witClearStochSoln ();

void witGetCurrentScenario (
int * currentScenario);

void witGetNScenarios (
int * nScanerios);

void witGetPeriodStage (
int * * periodStage);

void witGetProbability (
const WitOSRealArg & probability);

void witGetStageByObject (
WitBoolean * stageByObject);

void witGetStochMode (
WitBoolean * stochMode);

void witGetStochSolnMode (
WitBoolean * stochSolnMode);

void witSetCurrentScenario (
int currentScenario);

void witSetNScenarios (
int nScenarios);

void witSetPeriodStage (
const int * periodStage);

void witSetProbability (
const WitISRealArg & probability);

void witSetStageByObject (
WitBoolean stageByObject);

void witSetStochMode (
WitBoolean stochMode);

void witStochImplode ();

//------------------------------------------------------------------------
// API functions implemented in partApi.C.
//------------------------------------------------------------------------

WitPart * setGetPartInit (
const char * partName);

WitMaterial * setGetMaterialInit (
const char * partName,
const char * theAttName);

void witAddPart (
const char * partName, WitAttr partCategory);

void witAddPartWithOperation (
const char * partAndOperationName);

void witCopyPartData (
const char * dupPartName,
WitRun *     origWitRun,
const char * origPartName);

void witGetFocusShortageVol (
int   *                lenList,
char  * * *            partList,
const WitOTDARealArg & shortageVolList);

void witGetObjItrPart (
char * * partName);

void witGetPartAppData (
const char * partName,
void * *     appData);

void witGetPartAsapPipOrder (
const char * partName,
WitBoolean * asapPipOrder);

void witGetPartBaSelSplit (
const char * partName,
WitBoolean * baSelSplit);

void witGetPartBelowList (
const char * partName,
int *        lenList,
char * * *   partNameList);

void witGetPartBoundedLeadTimes (
const char * partName,
WitBoolean * boundedLeadTimes);

void witGetPartBuildAheadUB (
const char * partName,
int * *      buildAheadUB);

void witGetPartBuildAheadLimit (
const char * partName,
int *        buildAheadLimit);

void witGetPartBuildAsap (
const char * partName,
WitBoolean * buildAsap);

void witGetPartBuildNstn (
const char * partName,
WitBoolean * buildNstn);

void witGetPartCategory (
const char * partName,
WitAttr *    category);

void witGetPartConsVol (
const char *         partName,
const WitOVRealArg & consVol);

void witGetPartConsumingBomEntry (
const char * partName,
int          consIndex,
char * *     consumingOperationName,
int *        bomEntryIndex);

void witGetPartConsumingSubsBomEntry (
const char * partName,
int          consIndex,
char * *     consumingOperationName,
int *        bomEntryIndex,
int *        subsBomEntryIndex);

void witGetPartCycleTime (
const char *         partName,
const WitOVRealArg & cycleTime);

void witGetPartDemands (
const char * partName,
int *        lenDemandList,
char * * *   demandList);

void witGetPartExcessVol (
const char *         partName,
const WitOVRealArg & excessVol);

void witGetPartExists (
const char * partNameParm,
WitBoolean * exists);

void witGetPartFocusShortageVol (
const char *         partName,
const WitOVRealArg & shortageVol);

void witGetPartIncLotSize (
const char *         partName,
const WitOVRealArg & incLotSize);

void witGetPartMinLotSize (
const char *         partName,
const WitOVRealArg & minLotSize);

void witGetPartMrpConsVol (
const char *         partName,
const WitOVRealArg & mrpConsVol);

void witGetPartMrpExcessVol (
const char *         partName,
const WitOVRealArg & mrpExcessVol);

void witGetPartMrpProdVol (
const char *         partName,
const WitOVRealArg & mrpProdVol);

void witGetPartMrpResidualVol (
const char *         partName,
const WitOVRealArg & mrpResidualVol);

void witGetPartNBomEntries (
const char * partName,
int *        nBomEntries);

void witGetPartNConsumingBomEntries (
const char * partName,
int *        nConsumingBomEntries);

void witGetPartNConsumingSubsBomEntries (
const char * partName,
int *        nConsumingSubsBomEntries);

void witGetPartNProducingBopEntries (
const char * partName,
int *        nProducingBopEntries);

void witGetPartObj1ProdCost (
const char *         partName,
const WitOVRealArg & obj1ProdCost);

void witGetPartObj1ScrapCost (
const char *         partName,
const WitOVRealArg & obj1ScrapCost);

void witGetPartObj1StockCost (
const char *         partName,
const WitOVRealArg & obj1StockCost);

void witGetPartObjectStage (
const char * partName,
int *        objectStage);

void witGetPartProdBounds (
const char *         partName,
const WitOVRealArg & hardLower,
const WitOVRealArg & softLower,
const WitOVRealArg & hardUpper);

void witGetPartProdVol (
const char *         partName,
const WitOVRealArg & prodVol);

void witGetPartProducingBopEntry (
const char * partName,
int          prodIndex,
char * *     producingOperationName,
int *        bopEntryIndex);

void witGetPartPropRouting (
const char * partName,
WitBoolean * propRouting);

void witGetPartPropRtg (
const char *   partName,
WitBoolean * * propRtg);

void witGetPartReqVol (
const char *         partName,
const WitOVRealArg & reqVol);

void witGetPartResidualVol (
const char *         partName,
const WitOVRealArg & residualVol);

void witGetPartResourceConIndex (
const char * partName,
const int    thePer,
int *        resourceConIndex);

void witGetPartScrapVarIndex (
const char * partName,
const int    thePer,
int *        scrapVarIndex);

void witGetParts (
int *      lenPartList,
char * * * partList);

void witGetPartScrapAllowed (
const char * partName,
WitBoolean * scrapAllowed);

void witGetPartScrapCost (
const char *         partName,
const WitOVRealArg & scrapCost);

void witGetPartScrapVol  (
const char *         partName,
const WitOVRealArg & scrapVol);

void witGetPartSelForDel (
const char * partName,
WitBoolean * selForDel);

void witGetPartShadowPrice  (
const char *         partName,
const WitOVRealArg & shadowPrice);

void witGetPartSingleSource (
const char * partName,
WitBoolean * singleSource);

void witGetPartStockBounds (
const char *         partName,
const WitOVRealArg & hardLower,
const WitOVRealArg & softLower,
const WitOVRealArg & hardUpper);

void witGetPartStockCost (
const char *         partName,
const WitOVRealArg & stockCost);

void witGetPartStockSlbConIndex (
const char * partName,
const int    thePer,
int *        stockSlbConIndex);

void witGetPartStockSlbvVarIndex (
const char * partName,
const int    thePer,
int *        stockSlbvVarIndex);

void witGetPartStockVarIndex (
const char * partName,
const int    thePer,
int *        stockVarIndex);

void witGetPartStockVol  (
const char *         partName,
const WitOVRealArg & stockVol);

void witGetPartSupplyVol (
const char *         partName,
const WitOVRealArg & supplyVol);

void witGetPartYield (
const char * partName,
int * *      yield);

void witSetPartAppData (
const char * partName,
void *       appData);

void witSetPartAsapPipOrder (
const char * partName,
WitBoolean   asapPipOrder);

void witSetPartBaSelSplit (
const char * partName,
WitBoolean   baSelSplit);

void witSetPartBoundedLeadTimes (
const char * partName,
WitBoolean   boundedLeadTimes);

void witSetPartBuildAheadUB (
const char * partName,
const int *  buildAheadUB);

void witSetPartBuildAheadLimit (
const char * partName,
int          buildAheadLimit);

void witSetPartBuildAsap (
const char * partName,
WitBoolean   buildAsap);

void witSetPartBuildNstn (
const char * partName,
WitBoolean   buildNstn);

void witSetPartCycleTime (
const char *         partName,
const WitIVRealArg & cycleTime);

void witSetPartIncLotSize (
const char *         partName,
const WitIVRealArg & incLotSize);

void witSetPartMinLotSize (
const char *         partName,
const WitIVRealArg & minLotSize);

void witSetPartObj1ProdCost (
const char *         partName,
const WitIVRealArg & obj1ProdCost);

void witSetPartObj1ScrapCost (
const char *         partName,
const WitIVRealArg & obj1ScrapCost);

void witSetPartObj1StockCost (
const char *         partName,
const WitIVRealArg & obj1StockCost);

void witSetPartObjectStage (
const char * partName,
int          objectStage);

void witSetPartPartName (
const char * partName,
const char * newName);

void witSetPartProdBounds (
const char *         partName,
const WitIVRealArg & hardLower,
const WitIVRealArg & softLower,
const WitIVRealArg & hardUpper);

void witSetPartProdVol (
const char *         partName,
const WitIVRealArg & prodVol);

void witSetPartPropRouting (
const char * partName,
WitBoolean   propRouting);

void witSetPartPropRtg (
const char *       partName,
const WitBoolean * propRtg);

void witSetPartScrapAllowed (
const char * partName,
WitBoolean   scrapAllowed);

void witSetPartScrapCost (
const char *         partName,
const WitIVRealArg & scrapCost);

void witSetPartSelForDel (
const char * partName,
WitBoolean   selForDel);

void witSetPartSingleSource (
const char * partName,
WitBoolean   singleSource);

void witSetPartStockBounds (
const char *         partName,
const WitIVRealArg & hardLower,
const WitIVRealArg & softLower,
const WitIVRealArg & hardUpper);

void witSetPartStockCost (
const char *         partName,
const WitIVRealArg & stockCost);

void witSetPartSupplyVol (
const char *         partName,
const WitIVRealArg & supplyVol);

void witSetPartYield (
const char * partName,
const int *  yield);

//------------------------------------------------------------------------
// API functions implemented in demApi.C.
//------------------------------------------------------------------------

WitDemand * setGetDemandInit (
const char * demandedPartName,
const char * demandName);

void witAddDemand (
const char * partName,
const char * demandName);

void witAppendToPipSeq (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
const WitISRealArg & incShipVol);

void witCopyDemandData (
const char * dupPartName,
const char * dupDemandName,
WitRun *     origWitRun,
const char * origPartName,
const char * origDemandName);

void witEqHeurAlloc (
int                  lenLists,
const char * const * demandedPartNameList,
const char * const * demandNameList,
const int *          shipPeriodList,
const WitIVRealArg & desIncVolList,
const WitOVRealArg & incVolList);

void witEqHeurAllocTwme (
int                  lenLists,
const char * const * demandedPartNameList,
const char * const * demandNameList,
const int *          shipPeriodList,
const WitIVRealArg & desIncVolList,
const WitOVRealArg & incVolList,
const WitBoolean *   asapMultiExecList);

void witGetObjItrDemand (
char * * partName,
char * * demandName);

void witGetDemandAppData (
const char * partName,
const char * demandName,
void * *     appData);

void witGetDemandBuildAheadUB (
const char * partName,
const char * demandName,
int * *      buildAheadUB);

void witGetDemandBuildAheadLimit (
const char * partName,
const char * demandName,
int *        buildAheadLimit);

void witGetDemandCoExecVolPip (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
int *                lenLists,
char * * *           operationNameList,
int * *              bopEntryIndexList,
int * *              execPeriodList,
const WitOVRealArg & peggedVolList);

void witGetDemandConsVolPip (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
int *                lenLists,
char * * *           partNameList,
int * *              periodList,
const WitOVRealArg & peggedVolList);

void witGetDemandCumShipBounds (
const char *         partNameParm,
const char *         demandNameParm,
const WitOVRealArg & hardlbP,
const WitOVRealArg & softlbP,
const WitOVRealArg & hardubP);

void witGetDemandCumShipReward (
const char *         partNameParm,
const char *         demandNameParm,
const WitOVRealArg & cumShipReward);

void witGetDemandCumShipSlbConIndex (
const char * partName,
const char * demandName,
const int    thePer,
int *        cumShipSlbConIndex);

void witGetDemandCumShipSlbvVarIndex (
const char * partName,
const char * demandName,
const int    thePer,
int *        cumShipSlbvVarIndex);

void witGetDemandCumShipVarIndex (
const char * partName,
const char * demandName,
const int    thePer,
int *        cumShipVarIndex);

void witGetDemandDemandVol (
const char *         partName,
const char *         demandName,
const WitOVRealArg & demandVol);

void witGetDemandExecVolPegging (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
int *                lenLists,
char * * *           operationNameList,
int * *              execPeriodList,
const WitOVRealArg & peggedExecVolList);

void witGetDemandExecVolPip (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
int *                lenLists,
char * * *           operationNameList,
int * *              execPeriodList,
const WitOVRealArg & peggedVolList);

void witGetDemandFocusHorizon (
const char * partNameParm,
const char * demandNameParm,
int *        i);

void witGetDemandFssShipVol (
const char *         partName,
const char *         demandName,
const WitOVRealArg & fssShipVol);

void witGetDemandIntShipVols (
const char * partName,
const char * demandName,
WitBoolean * intShipVols);

void witGetDemandLeadTimeUB (
const char * partName,
const char * demandName,
int * *      leadTimeUB);

void witGetDemandObj1CumShipReward (
const char *         partNameParm,
const char *         demandNameParm,
const WitOVRealArg & obj1CumShipReward);

void witGetDemandObj1ShipReward (
const char *         partNameParm,
const char *         demandNameParm,
const WitOVRealArg & obj1ShipReward);

void witGetDemandPrefBuildAhead (
const char * partName,
const char * demandName,
WitBoolean * prefBuildAhead);

void witGetDemandPriority (
const char * partName,
const char * demandName,
int * *      priority);

void witGetDemandProdVolPip (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
int *                lenLists,
char * * *           partNameList,
int * *              periodList,
const WitOVRealArg & peggedVolList);

void witGetDemandSearchInc (
const char *         partName,
const char *         demandName,
const WitOSRealArg & searchInc);

void witGetDemandSelForDel (
const char * partName,
const char * demandName,
WitBoolean * selForDel);

void witGetDemandShipConIndex (
const char * partName,
const char * demandName,
const int    thePer,
int *        shipConIndex);

void witGetDemandShipLateAllowed (
const char * partName,
const char * demandName,
WitBoolean * shipLateAllowed);

void witGetDemandShipLateLimit (
const char * partName,
const char * demandName,
int *        shipLateLimit);

void witGetDemandShipLateUB (
const char * partName,
const char * demandName,
int * *      shipLateUB);

void witGetDemandShipReward (
const char *         partNameParm,
const char *         demandNameParm,
const WitOVRealArg & shipReward);

void witGetDemandShipVarIndex (
const char * partName,
const char * demandName,
const int    thePer,
int *        shipVarIndex);

void witGetDemandShipVol  (
const char *         partName,
const char *         demandName,
const WitOVRealArg & shipVol);

void witGetDemandSideVolPip (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
int *                lenLists,
char * * *           partNameList,
int * *              periodList,
const WitOVRealArg & peggedVolList);

void witGetDemandSubVolPegging (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
int *                lenLists,
char * * *           operationNameList,
int * *              bomEntryIndexList,
int * *              subsBomEntryIndexList,
int * *              execPeriodList,
const WitOVRealArg & peggedSubVolList);

void witGetDemandSubVolPip (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
int *                lenLists,
char * * *           operationNameList,
int * *              bomEntryIndexList,
int * *              subsBomEntryIndexList,
int * *              execPeriodList,
const WitOVRealArg & peggedVolList);

void witGetDemandSupplyVolPip (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
int *                lenLists,
char * * *           partNameList,
int * *              periodList,
const WitOVRealArg & peggedVolList);

void witIncHeurAlloc (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
const WitISRealArg & desIncVol,
const WitOSRealArg & incVol);

void witIncHeurAllocTwme (
const char *         partName,
const char *         demandName,
int                  shipPeriod,
const WitISRealArg & desIncVol,
const WitOSRealArg & incVol,
WitBoolean           asapMultiExec);

void witSetDemandAppData (
const char * partName,
const char * demandName,
void *       appData);

void witSetDemandBuildAheadUB (
const char * partName,
const char * demandName,
const int *  buildAheadUB);

void witSetDemandBuildAheadLimit (
const char * partName,
const char * demandName,
int          buildAheadLimit);

void witSetDemandCumShipBounds (
const char *         partName,
const char *         demandName,
const WitIVRealArg & hardLower,
const WitIVRealArg & softLower,
const WitIVRealArg & hardUpper);

void witSetDemandCumShipReward (
const char *         partName,
const char *         demandName,
const WitIVRealArg & cumShipReward);

void witSetDemandDemandName (
const char * partName,
const char * demandName,
const char * newName);

void witSetDemandDemandVol (
const char *         partName,
const char *         demandName,
const WitIVRealArg & demandVol);

void witSetDemandFocusHorizon (
const char * partNameParm,
const char * demandNameParm,
int          i);

void witSetDemandFssShipVol (
const char *         partName,
const char *         demandName,
const WitIVRealArg & fssShipVol);

void witSetDemandIntShipVols (
const char * partName,
const char * demandName,
WitBoolean   intShipVols);

void witSetDemandLeadTimeUB (
const char * partName,
const char * demandName,
const int *  leadTimeUB);

void witSetDemandObj1CumShipReward (
const char *         partName,
const char *         demandName,
const WitIVRealArg & obj1CumShipReward);

void witSetDemandObj1ShipReward (
const char *         partName,
const char *         demandName,
const WitIVRealArg & obj1ShipReward);

void witSetDemandPrefBuildAhead (
const char * partName,
const char * demandName,
WitBoolean   prefBuildAhead);

void witSetDemandPriority (
const char * partName,
const char * demandName,
const int *  priority);

void witSetDemandSearchInc (
const char *         partName,
const char *         demandName,
const WitISRealArg & searchInc);

void witSetDemandSelForDel (
const char * partName,
const char * demandName,
WitBoolean   selForDel);

void witSetDemandShipLateAllowed (
const char * partName,
const char * demandName,
WitBoolean   shipLateAllowed);

void witSetDemandShipLateLimit (
const char * partName,
const char * demandName,
int          shipLateLimit);

void witSetDemandShipLateUB (
const char * partName,
const char * demandName,
const int *  shipLateUB);

void witSetDemandShipReward (
const char *         partName,
const char *         demandName,
const WitIVRealArg & shipReward);

void witSetDemandShipVol (
const char *         partName,
const char *         demandName,
const WitIVRealArg & shipVol);

//------------------------------------------------------------------------
// API functions implemented in opnApi.C.
//------------------------------------------------------------------------

WitOperation * setGetOperationInit (
const char * operationName);

void witAddOperation (
const char * operationName);

void witCopyOperationData (
const char * dupOperationName,
WitRun *     origWitRun,
const char * origOperationName);

void witGetObjItrOperation (
char * * operationName);

void witGetOperationAppData (
const char * operationName,
void * *     appData);

void witGetOperationCycleTime34 (
const char *         operationName,
const WitOVRealArg & cycleTime34);

void witGetOperationExecBounds (
const char *         operationName,
const WitOVRealArg & hardLower,
const WitOVRealArg & softLower,
const WitOVRealArg & hardUpper);

void witGetOperationExecCost (
const char *         operationName,
const WitOVRealArg & execCost);

void witGetOperationExecPenalty (
const char *         operationName,
const WitOSRealArg & execPenalty);

void witGetOperationExecSlbConIndex (
const char * operationName,
const int    thePer,
int *        execSlbConIndex);

void witGetOperationExecSlbvVarIndex (
const char * operationName,
const int    thePer,
int *        execSlbvVarIndex);

void witGetOperationExecVarIndex (
const char * operationName,
const int    thePer,
int *        execVarIndex);

void witGetOperationExecVol (
const char *         operationName,
const WitOVRealArg & execVol);

void witGetOperationExecutable (
const char *   operationName,
WitBoolean * * executable);

void witGetOperationExists (
const char * operationName,
WitBoolean * exists);

void witGetOperationFssExecVol (
const char *         operationName,
const WitOVRealArg & fssExecVol);

void witGetOperationIncLotSize (
const char *         operationName,
const WitOVRealArg & incLotSize);

void witGetOperationIncLotSize2 (
const char *         operationName,
const WitOVRealArg & incLotSize2);

void witGetOperationIntExecVols (
const char * operationName,
WitBoolean * intExecVols);

void witGetOperationLotSize2Thresh (
const char *         operationName,
const WitOVRealArg & lotSize2Thresh);

void witGetOperationMinLotSize (
const char *         operationName,
const WitOVRealArg & minLotSize);

void witGetOperationMinLotSize2 (
const char *         operationName,
const WitOVRealArg & minLotSize2);

void witGetOperationMrpExecVol (
const char *         operationName,
const WitOVRealArg & mrpExecVol);

void witGetOperationNBomEntries (
const char * operationName,
int *        nBomEntries);

void witGetOperationNBopEntries (
const char * operationName,
int *        nBopEntries);

void witGetOperationObj1ExecCost (
const char *         operationName,
const WitOVRealArg & obj1ExecCost);

void witGetOperationObjectStage (
const char * operationName,
int *        objectStage);

void witGetOperations (
int *      lenOperationList,
char * * * operationList);

void witGetOperationSelForDel (
const char * operationName,
WitBoolean * selForDel);

void witGetOperationTwoLevelLotSizes (
const char * operationName,
WitBoolean * twoLevelLotSizes);

void witGetOperationYield (
const char * operationName,
int * *      yield);

void witGetOperationYieldRate (
const char *         operationName,
const WitOVRealArg & yield);

void witSetOperationAppData (
const char * operationName,
void *       appData);

void witSetOperationCycleTime34 (
const char *         operationName,
const WitIVRealArg & cycleTime34);

void witSetOperationExecBounds (
const char *         operationName,
const WitIVRealArg & hardLower,
const WitIVRealArg & softLower,
const WitIVRealArg & hardUpper);

void witSetOperationExecCost (
const char *         operationName,
const WitIVRealArg & execCost);

void witSetOperationExecPenalty (
const char *         operationName,
const WitISRealArg & execPenalty);

void witSetOperationExecVol (
const char *         operationName,
const WitIVRealArg & execVol);

void witSetOperationIncLotSize (
const char *         operationName,
const WitIVRealArg & incLotSize);

void witSetOperationIncLotSize2 (
const char *         operationName,
const WitIVRealArg & incLotSize2);

void witSetOperationIntExecVols (
const char * operationName,
WitBoolean   intExecVols);

void witSetOperationLotSize2Thresh (
const char *         operationName,
const WitIVRealArg & lotSize2Thresh);

void witSetOperationMinLotSize (
const char *         operationName,
const WitIVRealArg & minLotSize);

void witSetOperationMinLotSize2 (
const char *         operationName,
const WitIVRealArg & minLotSize2);

void witSetOperationObj1ExecCost (
const char *         operationName,
const WitIVRealArg & obj1ExecCost);

void witSetOperationObjectStage (
const char * operationName,
int          objectStage);

void witSetOperationOperationName (
const char * operationName,
const char * newName);

void witSetOperationSelForDel (
const char * operationName,
WitBoolean   selForDel);

void witSetOperationTwoLevelLotSizes (
const char * operationName,
WitBoolean   twoLevelLotSizes);

void witSetOperationYield (
const char * operationName,
const int *  yield);

void witSetOperationYieldRate (
const char *         operationName,
const WitIVRealArg & yieldRate);

//------------------------------------------------------------------------
// API functions implemented in bomApi.C.
//------------------------------------------------------------------------

WitBomEntry * setGetBomEntryInit (
const char *    consumingOperationName,
int             bomEntryIndex);

void witAddBomEntry (
const char * consumingOperationName,
const char * consumedPartName);

void witCopyBomEntryData (
const char * dupOperationName,
int          dupBomEntryIndex,
WitRun *     origWitRun,
const char * origOperationName,
int          origBomEntryIndex);

void witGetObjItrBomEntry (
char * * consumingOperationName,
int *    bomEntryIndex);

void witGetBomEntryAppData (
const char * consumingOperationName,
int          bomEntryIndex,
void * *     appData);

void witGetBomEntryConsRate (
const char *         partName,
int                  bomEntryIndex,
const WitOVRealArg & consRate);

void witGetBomEntryConsumedPart (
const char * consumingOperationName,
int          bomEntryIndex,
char * *     consumedPartName);

void witGetBomEntryEarliestPeriod (
const char * consumingOperationName,
int          bomEntryIndex,
int *        earliestPeriod);

void witGetBomEntryExecPenalty (
const char *         consumingOperationName,
int                  bomEntryIndex,
const WitOSRealArg & execPenalty);

void witGetBomEntryFallout (
const char * consumingOperationName,
int          bomEntryIndex,
int *        fallout);

void witGetBomEntryFalloutRate (
const char *         consumingOperationName,
int                  bomEntryIndex,
const WitOSRealArg & falloutRate);

void witGetBomEntryImpactPeriod (
const char * consumingOperationName,
int          bomEntryIndex,
int * *      impactPeriod);

void witGetBomEntryLatestPeriod (
const char * consumingOperationName,
int          bomEntryIndex,
int *        latestPeriod);

void witGetBomEntryMandEC (
const char * consumingOperationName,
int          bomEntryIndex,
WitBoolean * mandEC);

void witGetBomEntryNSubsBomEntries (
const char * partName,
int          bomEntryIndex,
int *        nSubsBomEntries);

void witGetBomEntryNonSubVarIndex (
const char * consumingOperationName,
int          bomEntryIndex,
const int    thePer,
int *        nonSubVarIndex);

void witGetBomEntryOffset (
const char *         partName,
int                  bomEntryIndex,
const WitOVRealArg & offset);

void witGetBomEntryPropRouting (
const char * consumingOperationName,
int          bomEntryIndex,
WitBoolean * propRouting);

void witGetBomEntryPropRtg (
const char *   consumingOperationName,
int            bomEntryIndex,
WitBoolean * * propRtg);

void witGetBomEntryRoutingShare (
const char *         consumingOperationName,
int                  bomEntryIndex,
const WitOVRealArg & routingShare);

void witGetBomEntrySelForDel (
const char * consumingOperationName,
int          bomEntryIndex,
WitBoolean * selForDel);

void witGetBomEntrySingleSource (
const char * consumingOperationName,
int          bomEntryIndex,
WitBoolean * singleSource);

void witGetBomEntrySubConIndex (
const char * consumingOperationName,
int          bomEntryIndex,
const int    thePer,
int *        subConIndex);

void witGetBomEntryUsageRate (
const char *         partName,
int                  bomEntryIndex,
const WitOSRealArg & usageRate);

void witGetBomEntryUsageTime (
const char *         partName,
int                  bomEntryIndex,
const WitOSRealArg & usageTime);

void witSetBomEntryAppData (
const char * operationName,
int          bomEntryIndex,
void *       appData);

void witSetBomEntryConsRate (
const char *         operationName,
int                  bomEntryIndex,
const WitIVRealArg & consRate);

void witSetBomEntryEarliestPeriod (
const char * operationName,
int          bomEntryIndex,
int          earliestPeriod);

void witSetBomEntryExecPenalty (
const char *         operationName,
int                  bomEntryIndex,
const WitISRealArg & execPenalty);

void witSetBomEntryFallout (
const char * operationName,
int          bomEntryIndex,
int          fallout);

void witSetBomEntryFalloutRate (
const char *         operationName,
int                  bomEntryIndex,
const WitISRealArg & falloutRate);

void witSetBomEntryLatestPeriod (
const char * operationName,
int          bomEntryIndex,
int          latestPeriod);

void witSetBomEntryMandEC (
const char * operationName,
int          bomEntryIndex,
WitBoolean   mandEC);

void witSetBomEntryOffset (
const char *         operationName,
int                  bomEntryIndex,
const WitIVRealArg & offset);

void witSetBomEntryPropRouting (
const char * operationName,
int          bomEntryIndex,
WitBoolean   propRouting);

void witSetBomEntryPropRtg (
const char *       operationName,
int                bomEntryIndex,
const WitBoolean * propRtg);

void witSetBomEntryRoutingShare (
const char *         operationName,
int                  bomEntryIndex,
const WitIVRealArg & routingShare);

void witSetBomEntrySelForDel (
const char * operationName,
int          bomEntryIndex,
WitBoolean   selForDel);

void witSetBomEntrySingleSource (
const char * operationName,
int          bomEntryIndex,
WitBoolean   singleSource);

void witSetBomEntryUsageRate (
const char *         operationName,
int                  bomEntryIndex,
const WitISRealArg & usageRate);

void witSetBomEntryUsageTime (
const char *         operationName,
int                  bomEntryIndex,
const WitISRealArg & time);

//------------------------------------------------------------------------
// API functions implemented in subApi.C.
//------------------------------------------------------------------------

WitSubEntry * setGetSubBomEntryInit (
const char *     consumingOperationName,
int              bomEntryIndex,
int              subsBomEntryIndex);

void witAddSubsBomEntry (
const char * consumingOperationName,
int          bomEntryIndex,
const char * consumedPartName);

void witCopySubsBomEntryData (
const char * dupOperationName,
int          dupBomEntryIndex,
int          dupSubsBomEntryIndex,
WitRun *     origWitRun,
const char * origOperationName,
int          origBomEntryIndex,
int          origSubsBomEntryIndex);

void witGetObjItrSubsBomEntry (
char * * consumingOperationName,
int *    bomEntryIndex,
int *    subsBomEntryIndex);

void witGetSubsBomEntryAppData (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
void * *     appData);

void witGetSubsBomEntryConsRate (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOVRealArg & consRate);

void witGetSubsBomEntryConsumedPart (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
char * *     consumedPart);

void witGetSubsBomEntryEarliestPeriod (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
int *        earliestPeriod);

void witGetSubsBomEntryExecPenalty (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOSRealArg & execPenalty);

void witGetSubsBomEntryExpAllowed (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean * expAllowed);

void witGetSubsBomEntryExpNetAversion (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOSRealArg & expNetAversion);

void witGetSubsBomEntryFallout (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
int *        fallout);

void witGetSubsBomEntryFalloutRate (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOSRealArg & falloutRate);

void witGetSubsBomEntryFssSubVol (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOVRealArg & fssSubVol);

void witGetSubsBomEntryImpactPeriod (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
int * *      impactPeriod);

void witGetSubsBomEntryIntSubVols (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean * intSubVols);

void witGetSubsBomEntryLatestPeriod (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
int *        latestPeriod);

void witGetSubsBomEntryMrpNetAllowed (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean * mrpNetAllowed);

void witGetSubsBomEntryMrpSubVol (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOVRealArg & mrpSubVol);

void witGetSubsBomEntryNetAllowed (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean * netAllowed);

void witGetSubsBomEntryObj1SubCost (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOVRealArg & obj1SubCost);

void witGetSubsBomEntryOffset (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOVRealArg & offset);

void witGetSubsBomEntryProdVol (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOVRealArg & prodVol);

void witGetSubsBomEntryRoutingShare (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOVRealArg & routingShare);

void witGetSubsBomEntrySelForDel (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean * selForDel);

void witGetSubsBomEntrySubCost (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOVRealArg & subCost);

void witGetSubsBomEntrySubVarIndex (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
const int    thePer,
int *        subVarIndex);

void witGetSubsBomEntrySubVol (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOVRealArg & subVol);

void witGetSubsBomEntryUsageRate (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitOSRealArg & usageRate);

void witSetSubsBomEntryAppData (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
void *       appData);

void witSetSubsBomEntryConsRate (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitIVRealArg & consRate);

void witSetSubsBomEntryEarliestPeriod (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
int          earliestPeriod);

void witSetSubsBomEntryExecPenalty (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitISRealArg & execPenalty);

void witSetSubsBomEntryExpAllowed (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean   expAllowed);

void witSetSubsBomEntryExpNetAversion (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitISRealArg & expNetAversion);

void witSetSubsBomEntryFallout (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
int          fallout);

void witSetSubsBomEntryFalloutRate (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitISRealArg & falloutRate);

void witSetSubsBomEntryIntSubVols (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean   intSubVols);

void witSetSubsBomEntryLatestPeriod (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
int          latestPeriod);

void witSetSubsBomEntryMrpNetAllowed (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean   mrpNetAllowed);

void witSetSubsBomEntryNetAllowed (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean   netAllowed);

void witSetSubsBomEntryObj1SubCost (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitIVRealArg & obj1SubCost);

void witSetSubsBomEntryOffset (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitIVRealArg & offset);

void witSetSubsBomEntryProdVol (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitIVRealArg & prodVol);

void witSetSubsBomEntryRoutingShare (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitIVRealArg & routingShare);

void witSetSubsBomEntrySelForDel (
const char * consumingOperationName,
int          bomEntryIndex,
int          subsBomEntryIndex,
WitBoolean   selForDel);

void witSetSubsBomEntrySubCost (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitIVRealArg & subCost);

void witSetSubsBomEntrySubVol (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitIVRealArg & subVol);

void witSetSubsBomEntryUsageRate (
const char *         consumingOperationName,
int                  bomEntryIndex,
int                  subsBomEntryIndex,
const WitISRealArg & usageRate);

//------------------------------------------------------------------------
// API functions implemented in bopApi.C.
//------------------------------------------------------------------------

WitBopEntry * setGetBopEntryInit (
const char *    producingOperationName,
int             bopEntryIndex);

void witAddBopEntry (
const char * producingOperationName,
const char * producedPartName);

void witCopyBopEntryData (
const char * dupOperationName,
int          dupBopEntryIndex,
WitRun *     origWitRun,
const char * origOperationName,
int          origBopEntryIndex);

void witGetObjItrBopEntry (
char * * producingOperationName,
int *    bopEntryIndex);

void witGetBopEntryAppData (
const char * producingOperationName,
int          bomEntryIndex,
void * *     appData);

void witGetBopEntryByProduct (
const char * producingOperationName,
int          bomEntryIndex,
WitBoolean * byProduct);

void witGetBopEntryEarliestPeriod (
const char * producingOperationName,
int          bomEntryIndex,
int *        earliestPeriod);

void witGetBopEntryExpAllowed (
const char * producingOperationName,
int          bomEntryIndex,
WitBoolean * expAllowed);

void witGetBopEntryExpAversion (
const char *         producingOperationName,
int                  bomEntryIndex,
const WitOSRealArg & expAversion);

void witGetBopEntryImpactPeriod (
const char * producingOperationName,
int          bopEntryIndex,
int * *      impactPeriod);

void witGetBopEntryLatestPeriod (
const char * producingOperationName,
int          bomEntryIndex,
int *        latestPeriod);

void witGetBopEntryMeSelSplit (
const char * producingOperationName,
int          bomEntryIndex,
WitBoolean * meSelSplit);

void witGetBopEntryOffset (
const char *         producingOperationName,
int                  bomEntryIndex,
const WitOVRealArg & offset);

void witGetBopEntryProdRate (
const char *         producingOperationName,
int                  bomEntryIndex,
const WitOSRealArg & prodRate);

void witGetBopEntryProductRate (
const char *         producingOperationName,
int                  bomEntryIndex,
const WitOVRealArg & productRate);

void witGetBopEntryProducedPart (
const char * producingOperationName,
int          bopEntryIndex,
char * *     producedPartName);

void witGetBopEntryRoutingShare (
const char *         producingOperationName,
int                  bomEntryIndex,
const WitOVRealArg & routingShare);

void witGetBopEntrySelForDel (
const char * producingOperationName,
int          bomEntryIndex,
WitBoolean * selForDel);

void witSetBopEntryAppData (
const char * producingOperationName,
int          bopEntryIndex,
void *       appData);

void witSetBopEntryByProduct (
const char * producingOperationName,
int          bopEntryIndex,
WitBoolean   byProduct);

void witSetBopEntryEarliestPeriod (
const char * producingOperationName,
int          bopEntryIndex,
int          earliestPeriod);

void witSetBopEntryExpAllowed (
const char * producingOperationName,
int          bopEntryIndex,
WitBoolean   expAllowed);

void witSetBopEntryExpAversion (
const char *         producingOperationName,
int                  bopEntryIndex,
const WitISRealArg & expAversion);

void witSetBopEntryLatestPeriod (
const char * producingOperationName,
int          bopEntryIndex,
int          latestPeriod);

void witSetBopEntryMeSelSplit (
const char * producingOperationName,
int          bopEntryIndex,
WitBoolean   meSelSplit);

void witSetBopEntryOffset (
const char *         producingOperationName,
int                  bopEntryIndex,
const WitIVRealArg & offset);

void witSetBopEntryProdRate (
const char *         producingOperationName,
int                  bopEntryIndex,
const WitISRealArg & prodRate);

void witSetBopEntryProductRate (
const char *         producingOperationName,
int                  bopEntryIndex,
const WitIVRealArg & productRate);

void witSetBopEntryRoutingShare (
const char *         producingOperationName,
int                  bopEntryIndex,
const WitIVRealArg & routingShare);

void witSetBopEntrySelForDel (
const char * producingOperationName,
int          bopEntryIndex,
WitBoolean   selForDel);

//------------------------------------------------------------------------
// API functions implemented in msgApi.C.
//------------------------------------------------------------------------

void witGetMesgFile (
FILE * * mesgFile);

void witSetMesgFileAccessMode (
WitBoolean   quiet,
const char * mesgFileAccessMode);

void witGetMesgFileAccessMode (
char * * mesgFileAccessMode);

void witSetMesgFileName (
WitBoolean   quiet,
const char * mesgFileName);

void witGetMesgFileName (
char * * mesgFileName);

void witSetMesgPrintNumber (
WitBoolean quiet,
int        messageNumber,
WitBoolean mesgPrintMunber);

void witGetMesgPrintNumber (
int          messageNumber,
WitBoolean * mesgPrintMunber);

void witSetMesgStopRunning (
WitBoolean quiet,
int        messageNumber,
WitBoolean mesgStopRunning);

void witGetMesgStopRunning (
int          messageNumber,
WitBoolean * mesgStopRunning);

void witSetMesgThrowErrorExc (
WitBoolean quiet,
int        messageNumber,
WitBoolean mesgThrowErrorExc);

void witGetMesgThrowErrorExc (
int          messageNumber,
WitBoolean * mesgThrowErrorExc);

void witSetMesgTimesPrint (
WitBoolean quiet,
int        messageNumber,
int        mesgTimesPrint);

void witGetMesgTimesPrint (
int        messageNumber,
int *      mesgTimesPrint);

void witListUnissuedMsgs ();

//------------------------------------------------------------------------
// Non-API public member functions implemented in WitRun.C.
//------------------------------------------------------------------------

static WitRun * newInstance ();
//
// Constructs (on the heap) and returns a new WitRun.
// To be used instead of the WitRun ctor, which is private.

static void validateWitRun (WitRun * theWitRun, const char * theFuncName);
//
// Verifies that theWitRun is a valid WitRun.
//
// theFuncName: Name of the outer API function that was called.

void forbidNullArg (const void * theArg, const char * argName);
//
// theArg:  A pointer that was passed to WIT as an argument to an
//          API function.
// argName: The name of the argument
// If theArg is NULL, this function issues a severe error
// identifying argName.

static void apiVoidAlloc (void * *, int, size_t);
//
// Called by NonClass::apiAlloc.

//------------------------------------------------------------------------
// apiGet functions.
//
// These functions are designed to be called by the witGet<Object><Attr>
// API functions. A typical apiGet function has three arguments:
// theValue is the value to be returned by the calling API function.
// theVarPtr is a pointer to a variable in which the value is to be
// stored.
// argName is the name of the argument for error reporting.
//
// At its simplest, an apiGet function is implemented as a simple
// assignment. But it is also responsible for translating from the WIT
// internal representation of an attribute (the type of theValue) into
// the API representation of the attribute (the type of * theVarPtr). It
// is also responsible for allocating memory, if needed.
// Also, if theVarPtr is NULL, a severe error is issued.
//------------------------------------------------------------------------

void apiGet (
int *        theVarPtr,
const char * argName,
int          theValue);

void apiGet (
WitBoolean * theVarPtr,
const char * argName,
bool         theValue);

void apiGet (
const WitOSRealArg & theArg,
const char *         argName,
double               theValue);

void apiGet (
WitAttr *    theVarPtr,
const char * argName,
WitAttr      theValue);

void apiGet (
FILE * *     theVarPtr,
const char * argName,
FILE *       theValue);

void apiGet (
void * *     theVarPtr,
const char * argName,
void *       theValue);

void apiGet (
char * *          theVarPtr,
const char *      argName,
const WitString & theValue);

void apiGet (
const WitOVRealArg &       theArg,
const char *               argName,
const WitVector <double> & theValue);

void apiGet (
int * *                 theVarPtr,
const char *            argName,
const WitVector <int> & theValue);

void apiGet (
WitBoolean * *           theVarPtr,
const char *             argName,
const WitVector <bool> & theValue);

void apiGet (
const WitOVRealArg &  theArg,
const char *          argName,
const WitDblFlexVec & theValue);

void apiGet (
WitBoolean * *            theVarPtr,
const char *              argName,
const WitFlexVec <bool> & theValue);

void apiGet (
int * *                  theVarPtr,
const char *             argName,
const WitFlexVec <int> & theValue);

void apiGet (
const WitOVRealArg & hardLBVec,
const WitOVRealArg & softLBVec,
const WitOVRealArg & hardUBVec,
WitBoundSet *        theValue);

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc    (WitApiMgr *,       myApiMgr)
accessFunc    (WitSession *,      mySession)

accessWrapper (WitMsgFacility &,  myMsgFac,        mySession ())
accessWrapper (WitProblem *,      myProblem,       mySession ())
accessWrapper (WitCompMgr *,      myCompMgr,       myProblem ())
accessWrapper (WitGlobalComp *,   myGlobalComp,    myProblem ())
accessWrapper (WitOptComp *,      myOptComp,       myProblem ())
accessWrapper (WitDetOptImpMgr *, myDetOptImpMgr,  myProblem ())
accessWrapper (WitStochImpMgr *,  myStochImpMgr,   myProblem ())
accessWrapper (int,               nPeriods,        myProblem ())
accessWrapper (bool,              wit34Compatible, myProblem ())

WitInputID * myInputID () const;

private:

//------------------------------------------------------------------------
// Private member functions implemented in WitRun.C.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitRun ();
//
// Declared private so that newInstance must be used.

//------------------------------------------------------------------------
// Other private member functions implemented in WitRun.C.
//------------------------------------------------------------------------

WitDelComp * curItrDelCompForGet (
WitAttr      objItrStateVal,
WitMsgFragID theObjTypeFragID);
//
// Does error checking for witGetObjItr<Object> functions.
// objItrStateVal and theObjTypeFragID must match the class of DelComp
// iteration's current DelComp.
// If no errors occur, returns DelComp iteration's current DelComp.

static void handleBadAllocForCtor ();
//
// Handles an std::bad_alloc exception during the ctor for this class.

void startCopyObjData (WitRun * origWitRun);
//
// Performs the tasks of a witCopy<Object>Data function that are not
// specific to the function.

void checkGlobAttsForCopy (WitRun * origWitRun);
//
// Verifies that the necessary global attributes of this WitRun and
// origWitRun match for a call to a witCopy<Object>Data function.

void prepSet34Attr (
const char * the34Object,
const char * the34Attribute,
const char * the40Object,
const char * the40Attribute);
//
// Does the preparatory tasks for an API "set" function on a WIT 3.4
// attribute. The tasks are:
//    Verify 3.4 compatibility mode.
//    Issue the appropriate message.
// the34Object    is the name of the object type for the 3.4 attribute.
// the34Attribute is the name of the 3.4 attribute
// the40Object    is the name of the object type for the 4.0 attribute.
// the40Attribute is the name of the 4.0 attribute

void prepGet34Attr (
const char * the34Object,
const char * the34Attribute,
const char * the40Object,
const char * the40Attribute);
//
// Does the preparatory work for an API "get" function on a WIT 3.4
// attribute. The tasks are:
//    Verify 3.4 compatibility mode.
//    Issue the appropriate message.
// the34Object    is the name of the object type for the 3.4 attribute.
// the34Attribute is the name of the 3.4 attribute
// the40Object    is the name of the object type for the 4.0 attribute.
// the40Attribute is the name of the 4.0 attribute

void prepGetIndex (int thePer);
//
// Prepares a witGet...VarIndex or ConIndex API function call.

void addingDelComp (WitMsgFragID theObjTypeFragID);
//
// Takes action appropriate when a DelComp is being added.
// theObjTypeFragID identifies the type of the DelComp.

void forbidStochMode ();
//
// Issues a severe error, if this WitRun is in stochastic mode.

const char * apiFuncName ();
//
// Returns myApiMgr ()->apiFuncName ();

noCopyCtorAssign (WitRun);

//------------------------------------------------------------------------
// Private member functions implemented in globApi.C.
//------------------------------------------------------------------------

void issueGetAttrMsg (const char * theAttName) const;
//
// Issues a message for getting the attribute whose name is given by
// theAttName, if appropriate.

bool alwaysTrue ();
//
// Always returns true. This is used by witExhaustMemory () to prevent
// the compiler from issuing a warning message about the function's
// apparent infinite loop. Also, this function must be implemented in
// a file other than WitRun.C, in order to prevent the compiler from
// analyzing its content, when it's compiling witExhaustMemory ().

//------------------------------------------------------------------------
// Private member functions implemented in optApi.C.
//------------------------------------------------------------------------

void parseObjectiveListSpec (
const char *     objectiveListSpec,
WitList <char> & theObjNameList);
//
// Parses objectiveListSpec and stores the Objective names that it
// specifies in theObjNameList
// The c-strings stored by this function will need to be deleted.

void checkForDupObjNames (const WitVector <const char *> & theObjNames);
//
// Checks for duplicate names in theObjNames.

//------------------------------------------------------------------------
// Private member functions implemented in partApi.C.
//------------------------------------------------------------------------

WitPart * addPart34 (
const char * partName, WitAttr partCategory);
//
// Adds a part in WIT 3.4 mode.

WitPart * addPartPost34 (
const char * partName, WitAttr partCategory);
//
// Adds a part in Post WIT 3.4 mode.

WitPart * getPartP (const char * partName);

//------------------------------------------------------------------------
// Private member functions implemented in demApi.C.
//------------------------------------------------------------------------

WitDemand * getDemandP (
const char * demandedPartName,
const char * demandName);

void eqHeurAlloc (
int                  lenLists,
const char * const * demandedPartNameList,
const char * const * demandNameList,
const int *          shipPeriodList,
const WitIVRealArg & desIncVolList,
const WitOVRealArg & incVolList,
const WitBoolean *   asapMultiExecList);

void incHeurAlloc (
const char *         demandedPartName,
const char *         demandName,
int                  shipPeriod,
const WitISRealArg & desIncVol,
const WitOSRealArg & incVol,
WitBoolean           asapMultiExec);

void defineAllocTarget (
const char *     demandedPartName,
const char *     demandName,
int              shipPeriod,
double           desIncVol,
bool             asapMultiExec,
WitDemPerStack & theDemPers);

void prepGetPegging (int shipPeriod);
//
// Prepares a concurrent pegging API function call.

void getPartPip (
WitPartTripStack &   thePegTrips,
int *                lenLists,
char * * *           partNameList,
int * *              periodList,
const WitOVRealArg & peggedVolList);

void prepGetPip (int shipPeriod);
//
// Prepares a post-implosion pegging API function call.

//------------------------------------------------------------------------
// Private member functions implemented in opnApi.C.
//------------------------------------------------------------------------

WitOperation * getOperationP (const char * operationName);

//------------------------------------------------------------------------
// Private member functions implemented in bomApi.C.
//------------------------------------------------------------------------

WitBomEntry * getBomEntryP (
const char * consumingOperationName,
int          bomEntryIndex);

//------------------------------------------------------------------------
// Private member functions implemented in subApi.C.
//------------------------------------------------------------------------

WitSubEntry * getSubBomEntryP (
const char * operationName,
int          bomEntryIndex,
int          subsBomEntryIndex);

//------------------------------------------------------------------------
// Private member functions implemented in bopApi.C.
//------------------------------------------------------------------------

WitBopEntry * getBopEntryP (
const char * producingOperationName,
int          bopEntryIndex);

//------------------------------------------------------------------------
// Private member functions implemented in msgApi.C.
//------------------------------------------------------------------------

const char * levelExtNumFragID (int theExtNum);
//
// Returns the message fragment ID for a severity level indicated by
// theExtNum.

bool checkMsgExtNum (int theExtNum);
//
// Returns true, iff theExtNum is the externalNumber of a Msg.
// If not, issues a warning Msg.

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

int signature_;
//
// This WitRun is a valid WitRun only if signature_ == VALID_SIGNATURE.

WitApiMgr * myApiMgr_;
//
// The ApiMgr owned by this WitRun.

WitSession * mySession_;
//
// The Session for this WitRun.

int nDepVeneers_;
//
// The number of LgFrWitRunVeneers that point to this WitRun
};
d2804 12
a2815 12
{
template <typename Elem>
void apiAlloc (Elem * * theCVecPtr, int nElems);
//
// Allocates * theCVecPtr to nElems elements.
// Uses malloc, so the * theCVecPtr can be passed back to the application
// program.

void apiAlloc (const WitOVRealArg & theOVRealArg, int nElems);
//
// Same as the above.
};
@


1.379
log
@Removed COIN from WIT.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d51 86
a136 2
   {
   public:
d138 2662
a2799 2746
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitRun ();

      //------------------------------------------------------------------------
      // API functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      void witAdvanceObjItr ();

      void witBuildPip ();

      void witClearPegging ();

      void witCopyData (
         WitRun * origWitRun);

      void witDeleteRun ();

      void witGetDevMode (WitBoolean * devMode);

      void witDisplayData (
         const char * fileName);

      void witEvalObjectives ();

      void witFinishExtOpt ();

      void witFinishHeurAlloc ();

      void witGeneratePriorities ();

      void witGetExpCycle (
         int *      lenLists,
         char * * * partNameList,
         char * * * operationNameList);

      void witGetExtOptIntVarIndices (int * * indices, int * len);

      void witGetExtOptLpProb (
         int *                numcols,
         int *                numrows,
         int * *              start,
         int * *              index,
         const WitOVRealArg & value,
         const WitOVRealArg & collb,
         const WitOVRealArg & colub,
         const WitOVRealArg & obj,
         const WitOVRealArg & rowlb,
         const WitOVRealArg & rowub);

      void witGetObjItrState (WitAttr * objItrState);

      void witHeurImplode ();

      void witInitialize ();

      void witIssueFatalMesg ();

      void witMrp ();

      void witNewRun ();

      void witOptImplode ();

      void witOptPreprocess ();

      void witPostprocess ();

      void witPreprocess ();

      void witPurgeData ();

      void witReadData (
         const char * fileName);

      void witResetObjItr ();

      void witSetExtOptSoln (const WitIVRealArg & colsol);

      void witShutDownExtOpt ();

      void witShutDownHeurAlloc ();

      void witStartExtOpt ();

      void witStartHeurAlloc ();

      void witWriteCriticalList (
         const char *  fileName,
         WitFileFormat fileFormat,
         int           maxListLen);

      void witWriteData (
         const char * fileName);

      void witWriteExecSched (
         const char *  fileName,
         WitFileFormat fileFormat);

      void witWriteProdSched (
         const char *  fileName,
         WitFileFormat fileFormat);

      void witWriteReqSched (
         const char *  fileName,
         WitFileFormat fileFormat);

      void witWriteShipSched (
         const char *  fileName,
         WitFileFormat fileFormat);

      void witNoDependantWitRunVeneersIsOne (
         int * isOne);

      void witNoDependantWitRunVeneersDecr  ();

      void witNoDependantWitRunVeneersIncr  ();

      void witExhaustMemory ();

      void witExecStandAlone (int argc, char * argv[]);
         //
         // Performs main actions of the WIT stand-alone executable.
         // argc and argv are to be the same as the arguments passed to the main
         // program.

      void witInterpretDevCmd (const char * theDevCmd);
         //
         // Interprets the development command indicated by theDevCmd.
         // Severe error, if theDevCmd is not recognized.

      //------------------------------------------------------------------------
      // API functions implemented in globApi.C.
      //------------------------------------------------------------------------

      void witClearPipSeq ();

      void witGetAppData (
         void * * value);

      void witGetAutoPriority (
         WitBoolean * value);

      void witGetBuildWhenEmpty (
         WitBoolean * value);

      void witGetComputeCriticalList (
         WitBoolean * computeCriticalList);

      void witGetCriticalList (
         int *      lenCritList,
         char * * * partList,
         int * *    perList);

      void witGetEquitability (
         int * equitability);

      void witGetExecEmptyBom (
         WitBoolean * execEmptyBom);

      void witGetExpCutoff (
         const WitOSRealArg & expCutoff);

      void witGetFeasible (
         WitBoolean * feasible);

      void witGetForcedMultiEq (
         WitBoolean * value);

      void witGetHashTableSize (
         int * hashTableSize);

      void witGetHeurAllocActive (
         WitBoolean * heurAllocActive);

      void witGetHighPrecisionWD (
         WitBoolean * highPrecisionWD);

      void witGetIndependentOffsets (
         WitBoolean * independentOffsets);

      void witGetLocalBuildAhead (
         WitBoolean * localBuildAhead);

      void witGetLocalMultiExec (
         WitBoolean * localMultiExec);

      void witGetLotSizeTol (
         const WitOSRealArg & lotSizeTol);

      void witGetMinimalExcess (
         WitBoolean * minimalExcess);

      void witGetModHeurAlloc (
         WitBoolean * modHeurAlloc);

      void witGetMultiExec (
         WitBoolean * multiExec);

      void witGetMultiRoute (
         WitBoolean * value);

      void witGetNPeriods (
         int * nPeriods);

      void witGetNewPipPggOrder (
         WitBoolean * newPipPggOrder);

      void witGetNonMrSelSplit (
         WitBoolean * nonMrSelSplit);

      void witGetNstnResidual (
         WitBoolean * nstnResidual);

      void witGetOutputPrecision (
         int * outputPrecision);

      void witGetPenExec (
         WitBoolean * penExec);

      void witGetPerfPegging (
         WitBoolean * perfPegging);

      void witGetPgdCritList (
         int *      lenLists,
         char * * * critPartNameList,
         int * *    critPerList,
         char * * * demPartNameList,
         char * * * demandNameList,
         int * *    shipPerList);

      void witGetPgdCritListMode (
         WitBoolean * pgdCritListMode);

      void witGetPipExists (
         WitBoolean * pipExists);

      void witGetPipSeq (
         int *                lenLists,
         char * * *           partNameList,
         char * * *           demandNameList,
         int * *              shipPerList,
         const WitOVRealArg & incShipVolList);

      void witGetPipSeqFromHeur (
         WitBoolean * pipSeqFromHeur);

      void witGetPostprocessed (
         WitBoolean * postprocessed);

      void witGetPrefHighStockSLBs (
         WitBoolean * prefHighStockSLBs);

      void witGetPreprocessed (
         WitBoolean * preprocessed);

      void witGetRespectStockSLBs (
         WitBoolean * respectStockSLBs);

      void witGetRoundReqVols (
         WitBoolean * roundReqVols);

      void witGetSelSplit (
         WitBoolean * selSplit);

      void witGetSelectionRecovery (
         WitBoolean * value);

      void witGetSkipFailures (
         WitBoolean * value);

      void witGetStockRealloc (
         WitBoolean * stockRealloc);

      void witGetStockReallocation (
         WitBoolean * stockReallocation);

      void witGetSrSelSplit (
         WitBoolean * srSelSplit);

      void witGetTieBreakPropRt (
         WitBoolean * tieBreakPropRt);

      void witGetTitle (
         char * * title);

      void witGetTruncOffsets (
         WitBoolean * value);

      void witGetTwoWayMultiExec (
         WitBoolean * twoWayMultiExec);

      void witGetUseFocusHorizons (
         WitBoolean * useFocusHorizons);

      void witGetUserHeurStart (
         WitBoolean * userHeurStart);

      void witGetWit34Compatible (
         WitBoolean * value);

      void witSetAppData (
         void * appData);

      void witSetAutoPriority (
         WitBoolean autoPriority);

      void witSetBuildWhenEmpty (
         WitBoolean buildWhenEmpty);

      void witSetComputeCriticalList (
         WitBoolean computeCriticalList);

      void witSetEquitability (
         int equitability);

      void witSetExecEmptyBom (
         WitBoolean execEmptyBom);

      void witSetExpCutoff (
         const WitISRealArg & expCutoff);

      void witSetForcedMultiEq (
         WitBoolean forcedMultiEq);

      void witSetHashTableSize (
         int hashTableSize);

      void witSetHighPrecisionWD (
         WitBoolean highPrecisionWD);

      void witSetIndependentOffsets (
         WitBoolean independentOffsets);

      void witSetLocalBuildAhead (
         WitBoolean localBuildAhead);

      void witSetLocalMultiExec (
         WitBoolean localMultiExec);

      void witSetLotSizeTol (
         const WitISRealArg & lotSizeTol);

      void witSetMinimalExcess (
         WitBoolean minimalExcess);

      void witSetModHeurAlloc (
         WitBoolean modHeurAlloc);

      void witSetMultiExec (
         WitBoolean multiExec);

      void witSetMultiRoute (
         WitBoolean multiRoute);

      void witSetNPeriods (
         int nPeriods);

      void witSetNewPipPggOrder (
         WitBoolean newPipPggOrder);

      void witSetNonMrSelSplit (
         WitBoolean nonMrSelSplit);

      void witSetNstnResidual (
         WitBoolean nstnResidual);

      void witSetOutputPrecision (
         int outputPrecision);

      void witSetPenExec (
         WitBoolean penExec);

      void witSetPerfPegging (
         WitBoolean perfPegging);

      void witSetPgdCritListMode (
         WitBoolean pgdCritListMode);

      void witSetPipSeqFromHeur (
         WitBoolean pipSeqFromHeur);

      void witSetPrefHighStockSLBs (
         WitBoolean prefHighStockSLBs);

      void witSetRespectStockSLBs (
         WitBoolean respectStockSLBs);

      void witSetRoundReqVols (
         WitBoolean roundReqVols);

      void witSetSelSplit (
         WitBoolean selSplit);

      void witSetSelectionRecovery (
         WitBoolean selectionRecovery);

      void witSetSkipFailures (
         WitBoolean skipFailures);

      void witSetStockRealloc (
         WitBoolean stockRealloc);

      void witSetStockReallocation (
         WitBoolean stockReallocation);

      void witSetSrSelSplit (
         WitBoolean srSelSplit);

      void witSetTieBreakPropRt (
         WitBoolean tieBreakPropRt);

      void witSetTitle (
         const char * title);

      void witSetTruncOffsets (
         WitBoolean truncOffsets);

      void witSetTwoWayMultiExec (
         WitBoolean twoWayMultiExec);

      void witSetUseFocusHorizons (
         WitBoolean useFocusHorizons);

      void witSetUserHeurStart (
         WitBoolean userHeurStart);

      void witSetWit34Compatible (
         WitBoolean boolval);

      void witSetWit34Allowed (
         WitBoolean boolval);

      //------------------------------------------------------------------------
      // API functions implemented in optApi.C.
      //------------------------------------------------------------------------

      void witAddDblCplexParSpec (
         const char *         theName,
         const WitISRealArg & theValue);

      void witAddIntCplexParSpec (
         const char * theName,
         int          theValue);

      void witGetAccAfterOptImp (
         WitBoolean * value);

      void witGetAccAfterSoftLB (
         WitBoolean * value);

      void witGetAccelerated (
         WitBoolean * value);

      void witGetBoundsValue (
         const WitOSRealArg & boundsValue);

      void witClearCplexParSpecs ();

      void witGetCompPrices (
         WitBoolean * value);

      void witGetCplexEmbedded (WitBoolean * cplexEmbedded);

      void witGetCplexMipBound (
         const WitOSRealArg & cplexMipBound);

      void witGetCplexMipRelGap (
         const WitOSRealArg & cplexMipRelGap);

      void witGetCplexParSpecDblVal (
         const WitOSRealArg & cplexParSpecDblVal);

      void witGetCplexParSpecIntVal (
         int * cplexParSpecIntVal);

      void witGetCplexParSpecName (
         char * * cplexParSpecName);

      void witGetCplexStatusCode (
         int * cplexStatusCode);

      void witGetCplexStatusText (
         char * * cplexStatusText);

      void witGetCurrentObjective (
         char * * theObjName);

      void witGetDblCplexParSpec (
         const char *         theName,
         WitBoolean *         dblSpecExists,
         const WitOSRealArg & theValue);

      void witGetExtOptActive (
         WitBoolean * extOptActive);

      void witGetIntCplexParSpec (
         const char * theName,
         WitBoolean * intSpecExists,
         int *        theValue);

      void witGetMipMode (
         WitBoolean * value);

      void witGetMultiObjMode (
         WitBoolean * value);

      void witGetMultiObjTol (
         const WitOSRealArg & multiObjTol);

      void witGetObjChoice (
         int * objChoice);

      void witGetObjValue (
         const WitOSRealArg & objValue);

      void witGetObjValues (
         const WitOSRealArg & objValue,
         const WitOSRealArg & boundsValue);

      void witGetObjectiveList (
         int  *     lenList,
         char * * * objectiveList);

      void witGetObjectiveListSpec (
         char * * objectiveListSpec);

      void witGetObjectiveRank (
         int * objectiveRank);

      void witGetOptInitMethod (
         WitAttr * optInitMethod);

      void witGetSolverLogFileName (
         char * * solverLogFileName);

      void witGetWbounds (
         const WitOSRealArg & wbounds);

      void witSetAccAfterOptImp (
         WitBoolean accAfterOptImp);

      void witSetAccAfterSoftLB (
         WitBoolean accAfterSoftLB);

      void witSetCompPrices (
         WitBoolean compPrices);

      void witSetCplexParSpecDblVal (
         const WitISRealArg & cplexParSpecDblVal);

      void witSetCplexParSpecIntVal (
         int cplexParSpecIntVal);

      void witSetCplexParSpecName (
         const char * cplexParSpecName);

      void witSetCurrentObjective (
         const char * theObjName);

      void witSetMipMode (
         WitBoolean mipMode);

      void witSetMultiObjMode (
         WitBoolean multiObjMode);

      void witSetMultiObjTol (
         const WitISRealArg & multiObjTol);

      void witSetObjChoice (
         int objChoice);

      void witSetObjectiveList (
         int                  lenList,
         const char * const * objectiveList);

      void witSetObjectiveListSpec (
         const char * objectiveListSpec);

      void witSetObjectiveRank (
         int objectiveRank);

      void witSetOptInitMethod (
         WitAttr optInitMethod);

      void witSetSolverLogFileName (
         const char * solverLogFileName);

      void witSetWbounds (
         const WitISRealArg & wbounds);

      //------------------------------------------------------------------------
      // API functions implemented in stochApi.C.
      //------------------------------------------------------------------------

      void witClearStochSoln ();

      void witGetCurrentScenario (
         int * currentScenario);

      void witGetNScenarios (
         int * nScanerios);

      void witGetPeriodStage (
         int * * periodStage);

      void witGetProbability (
         const WitOSRealArg & probability);

      void witGetStageByObject (
         WitBoolean * stageByObject);

      void witGetStochMode (
         WitBoolean * stochMode);

      void witGetStochSolnMode (
         WitBoolean * stochSolnMode);

      void witSetCurrentScenario (
         int currentScenario);

      void witSetNScenarios (
         int nScenarios);

      void witSetPeriodStage (
         const int * periodStage);

      void witSetProbability (
         const WitISRealArg & probability);

      void witSetStageByObject (
         WitBoolean stageByObject);

      void witSetStochMode (
         WitBoolean stochMode);

      void witStochImplode ();

      //------------------------------------------------------------------------
      // API functions implemented in partApi.C.
      //------------------------------------------------------------------------

      WitPart * setGetPartInit (
         const char * partName);

      WitMaterial * setGetMaterialInit (
         const char * partName,
         const char * theAttName);

      void witAddPart (
         const char * partName, WitAttr partCategory);

      void witAddPartWithOperation (
         const char * partAndOperationName);

      void witCopyPartData (
         const char * dupPartName,
         WitRun *     origWitRun,
         const char * origPartName);

      void witGetFocusShortageVol (
         int   *                lenList,
         char  * * *            partList,
         const WitOTDARealArg & shortageVolList);

      void witGetObjItrPart (
         char * * partName);

      void witGetPartAppData (
         const char * partName,
         void * *     appData);

      void witGetPartAsapPipOrder (
         const char * partName,
         WitBoolean * asapPipOrder);

      void witGetPartBaSelSplit (
         const char * partName,
         WitBoolean * baSelSplit);

      void witGetPartBelowList (
         const char * partName,
         int *        lenList,
         char * * *   partNameList);

      void witGetPartBoundedLeadTimes (
         const char * partName,
         WitBoolean * boundedLeadTimes);

      void witGetPartBuildAheadUB (
         const char * partName,
         int * *      buildAheadUB);

      void witGetPartBuildAheadLimit (
         const char * partName,
         int *        buildAheadLimit);

      void witGetPartBuildAsap (
         const char * partName,
         WitBoolean * buildAsap);

      void witGetPartBuildNstn (
         const char * partName,
         WitBoolean * buildNstn);

      void witGetPartCategory (
         const char * partName,
         WitAttr *    category);

      void witGetPartConsVol (
         const char *         partName,
         const WitOVRealArg & consVol);

      void witGetPartConsumingBomEntry (
         const char * partName,
         int          consIndex,
         char * *     consumingOperationName,
         int *        bomEntryIndex);

      void witGetPartConsumingSubsBomEntry (
         const char * partName,
         int          consIndex,
         char * *     consumingOperationName,
         int *        bomEntryIndex,
         int *        subsBomEntryIndex);

      void witGetPartCycleTime (
         const char *         partName,
         const WitOVRealArg & cycleTime);

      void witGetPartDemands (
         const char * partName,
         int *        lenDemandList,
         char * * *   demandList);

      void witGetPartExcessVol (
         const char *         partName,
         const WitOVRealArg & excessVol);

      void witGetPartExists (
         const char * partNameParm,
         WitBoolean * exists);

      void witGetPartFocusShortageVol (
         const char *         partName,
         const WitOVRealArg & shortageVol);

      void witGetPartIncLotSize (
         const char *         partName,
         const WitOVRealArg & incLotSize);

      void witGetPartMinLotSize (
         const char *         partName,
         const WitOVRealArg & minLotSize);

      void witGetPartMrpConsVol (
         const char *         partName,
         const WitOVRealArg & mrpConsVol);

      void witGetPartMrpExcessVol (
         const char *         partName,
         const WitOVRealArg & mrpExcessVol);

      void witGetPartMrpProdVol (
         const char *         partName,
         const WitOVRealArg & mrpProdVol);

      void witGetPartMrpResidualVol (
         const char *         partName,
         const WitOVRealArg & mrpResidualVol);

      void witGetPartNBomEntries (
         const char * partName,
         int *        nBomEntries);

      void witGetPartNConsumingBomEntries (
         const char * partName,
         int *        nConsumingBomEntries);

      void witGetPartNConsumingSubsBomEntries (
         const char * partName,
         int *        nConsumingSubsBomEntries);

      void witGetPartNProducingBopEntries (
         const char * partName,
         int *        nProducingBopEntries);

      void witGetPartObj1ProdCost (
         const char *         partName,
         const WitOVRealArg & obj1ProdCost);

      void witGetPartObj1ScrapCost (
         const char *         partName,
         const WitOVRealArg & obj1ScrapCost);

      void witGetPartObj1StockCost (
         const char *         partName,
         const WitOVRealArg & obj1StockCost);

      void witGetPartObjectStage (
         const char * partName,
         int *        objectStage);

      void witGetPartProdBounds (
         const char *         partName,
         const WitOVRealArg & hardLower,
         const WitOVRealArg & softLower,
         const WitOVRealArg & hardUpper);

      void witGetPartProdVol (
         const char *         partName,
         const WitOVRealArg & prodVol);

      void witGetPartProducingBopEntry (
         const char * partName,
         int          prodIndex,
         char * *     producingOperationName,
         int *        bopEntryIndex);

      void witGetPartPropRouting (
         const char * partName,
         WitBoolean * propRouting);

      void witGetPartPropRtg (
         const char *   partName,
         WitBoolean * * propRtg);

      void witGetPartReqVol (
         const char *         partName,
         const WitOVRealArg & reqVol);

      void witGetPartResidualVol (
         const char *         partName,
         const WitOVRealArg & residualVol);

      void witGetPartResourceConIndex (
         const char * partName,
         const int    thePer,
         int *        resourceConIndex);

      void witGetPartScrapVarIndex (
         const char * partName,
         const int    thePer,
         int *        scrapVarIndex);

      void witGetParts (
         int *      lenPartList,
         char * * * partList);

      void witGetPartScrapAllowed (
         const char * partName,
         WitBoolean * scrapAllowed);

      void witGetPartScrapCost (
         const char *         partName,
         const WitOVRealArg & scrapCost);

      void witGetPartScrapVol  (
         const char *         partName,
         const WitOVRealArg & scrapVol);

      void witGetPartSelForDel (
         const char * partName,
         WitBoolean * selForDel);

      void witGetPartShadowPrice  (
         const char *         partName,
         const WitOVRealArg & shadowPrice);

      void witGetPartSingleSource (
         const char * partName,
         WitBoolean * singleSource);

      void witGetPartStockBounds (
         const char *         partName,
         const WitOVRealArg & hardLower,
         const WitOVRealArg & softLower,
         const WitOVRealArg & hardUpper);

      void witGetPartStockCost (
         const char *         partName,
         const WitOVRealArg & stockCost);

      void witGetPartStockSlbConIndex (
         const char * partName,
         const int    thePer,
         int *        stockSlbConIndex);

      void witGetPartStockSlbvVarIndex (
         const char * partName,
         const int    thePer,
         int *        stockSlbvVarIndex);

      void witGetPartStockVarIndex (
         const char * partName,
         const int    thePer,
         int *        stockVarIndex);

      void witGetPartStockVol  (
         const char *         partName,
         const WitOVRealArg & stockVol);

      void witGetPartSupplyVol (
         const char *         partName,
         const WitOVRealArg & supplyVol);

      void witGetPartYield (
         const char * partName,
         int * *      yield);

      void witSetPartAppData (
         const char * partName,
         void *       appData);

      void witSetPartAsapPipOrder (
         const char * partName,
         WitBoolean   asapPipOrder);

      void witSetPartBaSelSplit (
         const char * partName,
         WitBoolean   baSelSplit);

      void witSetPartBoundedLeadTimes (
         const char * partName,
         WitBoolean   boundedLeadTimes);

      void witSetPartBuildAheadUB (
         const char * partName,
         const int *  buildAheadUB);

      void witSetPartBuildAheadLimit (
         const char * partName,
         int          buildAheadLimit);

      void witSetPartBuildAsap (
         const char * partName,
         WitBoolean   buildAsap);

      void witSetPartBuildNstn (
         const char * partName,
         WitBoolean   buildNstn);

      void witSetPartCycleTime (
         const char *         partName,
         const WitIVRealArg & cycleTime);

      void witSetPartIncLotSize (
         const char *         partName,
         const WitIVRealArg & incLotSize);

      void witSetPartMinLotSize (
         const char *         partName,
         const WitIVRealArg & minLotSize);

      void witSetPartObj1ProdCost (
         const char *         partName,
         const WitIVRealArg & obj1ProdCost);

      void witSetPartObj1ScrapCost (
         const char *         partName,
         const WitIVRealArg & obj1ScrapCost);

      void witSetPartObj1StockCost (
         const char *         partName,
         const WitIVRealArg & obj1StockCost);

      void witSetPartObjectStage (
         const char * partName,
         int          objectStage);

      void witSetPartPartName (
         const char * partName,
         const char * newName);

      void witSetPartProdBounds (
         const char *         partName,
         const WitIVRealArg & hardLower,
         const WitIVRealArg & softLower,
         const WitIVRealArg & hardUpper);

      void witSetPartProdVol (
         const char *         partName,
         const WitIVRealArg & prodVol);

      void witSetPartPropRouting (
         const char * partName,
         WitBoolean   propRouting);

      void witSetPartPropRtg (
         const char *       partName,
         const WitBoolean * propRtg);

      void witSetPartScrapAllowed (
         const char * partName,
         WitBoolean   scrapAllowed);

      void witSetPartScrapCost (
         const char *         partName,
         const WitIVRealArg & scrapCost);

      void witSetPartSelForDel (
         const char * partName,
         WitBoolean   selForDel);

      void witSetPartSingleSource (
         const char * partName,
         WitBoolean   singleSource);

      void witSetPartStockBounds (
         const char *         partName,
         const WitIVRealArg & hardLower,
         const WitIVRealArg & softLower,
         const WitIVRealArg & hardUpper);

      void witSetPartStockCost (
         const char *         partName,
         const WitIVRealArg & stockCost);

      void witSetPartSupplyVol (
         const char *         partName,
         const WitIVRealArg & supplyVol);

      void witSetPartYield (
         const char * partName,
         const int *  yield);

      //------------------------------------------------------------------------
      // API functions implemented in demApi.C.
      //------------------------------------------------------------------------

      WitDemand * setGetDemandInit (
         const char * demandedPartName,
         const char * demandName);

      void witAddDemand (
         const char * partName,
         const char * demandName);

      void witAppendToPipSeq (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         const WitISRealArg & incShipVol);

      void witCopyDemandData (
         const char * dupPartName,
         const char * dupDemandName,
         WitRun *     origWitRun,
         const char * origPartName,
         const char * origDemandName);

      void witEqHeurAlloc (
         int                  lenLists,
         const char * const * demandedPartNameList,
         const char * const * demandNameList,
         const int *          shipPeriodList,
         const WitIVRealArg & desIncVolList,
         const WitOVRealArg & incVolList);

      void witEqHeurAllocTwme (
         int                  lenLists,
         const char * const * demandedPartNameList,
         const char * const * demandNameList,
         const int *          shipPeriodList,
         const WitIVRealArg & desIncVolList,
         const WitOVRealArg & incVolList,
         const WitBoolean *   asapMultiExecList);

      void witGetObjItrDemand (
         char * * partName,
         char * * demandName);

      void witGetDemandAppData (
         const char * partName,
         const char * demandName,
         void * *     appData);

      void witGetDemandBuildAheadUB (
         const char * partName,
         const char * demandName,
         int * *      buildAheadUB);

      void witGetDemandBuildAheadLimit (
         const char * partName,
         const char * demandName,
         int *        buildAheadLimit);

      void witGetDemandCoExecVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              bopEntryIndexList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandConsVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandCumShipBounds (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & hardlbP,
         const WitOVRealArg & softlbP,
         const WitOVRealArg & hardubP);

      void witGetDemandCumShipReward (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & cumShipReward);

      void witGetDemandCumShipSlbConIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        cumShipSlbConIndex);

      void witGetDemandCumShipSlbvVarIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        cumShipSlbvVarIndex);

      void witGetDemandCumShipVarIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        cumShipVarIndex);

      void witGetDemandDemandVol (
         const char *         partName,
         const char *         demandName,
         const WitOVRealArg & demandVol);

      void witGetDemandExecVolPegging (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedExecVolList);

      void witGetDemandExecVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandFocusHorizon (
         const char * partNameParm,
         const char * demandNameParm,
         int *        i);

      void witGetDemandFssShipVol (
         const char *         partName,
         const char *         demandName,
         const WitOVRealArg & fssShipVol);

      void witGetDemandIntShipVols (
         const char * partName,
         const char * demandName,
         WitBoolean * intShipVols);

      void witGetDemandLeadTimeUB (
         const char * partName,
         const char * demandName,
         int * *      leadTimeUB);

      void witGetDemandObj1CumShipReward (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & obj1CumShipReward);

      void witGetDemandObj1ShipReward (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & obj1ShipReward);

      void witGetDemandPrefBuildAhead (
         const char * partName,
         const char * demandName,
         WitBoolean * prefBuildAhead);

      void witGetDemandPriority (
         const char * partName,
         const char * demandName,
         int * *      priority);

      void witGetDemandProdVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandSearchInc (
         const char *         partName,
         const char *         demandName,
         const WitOSRealArg & searchInc);

      void witGetDemandSelForDel (
         const char * partName,
         const char * demandName,
         WitBoolean * selForDel);

      void witGetDemandShipConIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        shipConIndex);

      void witGetDemandShipLateAllowed (
         const char * partName,
         const char * demandName,
         WitBoolean * shipLateAllowed);

      void witGetDemandShipLateLimit (
         const char * partName,
         const char * demandName,
         int *        shipLateLimit);

      void witGetDemandShipLateUB (
         const char * partName,
         const char * demandName,
         int * *      shipLateUB);

      void witGetDemandShipReward (
         const char *         partNameParm,
         const char *         demandNameParm,
         const WitOVRealArg & shipReward);

      void witGetDemandShipVarIndex (
         const char * partName,
         const char * demandName,
         const int    thePer,
         int *        shipVarIndex);

      void witGetDemandShipVol  (
         const char *         partName,
         const char *         demandName,
         const WitOVRealArg & shipVol);

      void witGetDemandSideVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandSubVolPegging (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              bomEntryIndexList,
         int * *              subsBomEntryIndexList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedSubVolList);

      void witGetDemandSubVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           operationNameList,
         int * *              bomEntryIndexList,
         int * *              subsBomEntryIndexList,
         int * *              execPeriodList,
         const WitOVRealArg & peggedVolList);

      void witGetDemandSupplyVolPip (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void witIncHeurAlloc (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         const WitISRealArg & desIncVol,
         const WitOSRealArg & incVol);

      void witIncHeurAllocTwme (
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         const WitISRealArg & desIncVol,
         const WitOSRealArg & incVol,
         WitBoolean           asapMultiExec);

      void witSetDemandAppData (
         const char * partName,
         const char * demandName,
         void *       appData);

      void witSetDemandBuildAheadUB (
         const char * partName,
         const char * demandName,
         const int *  buildAheadUB);

      void witSetDemandBuildAheadLimit (
         const char * partName,
         const char * demandName,
         int          buildAheadLimit);

      void witSetDemandCumShipBounds (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & hardLower,
         const WitIVRealArg & softLower,
         const WitIVRealArg & hardUpper);

      void witSetDemandCumShipReward (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & cumShipReward);

      void witSetDemandDemandName (
         const char * partName,
         const char * demandName,
         const char * newName);

      void witSetDemandDemandVol (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & demandVol);

      void witSetDemandFocusHorizon (
         const char * partNameParm,
         const char * demandNameParm,
         int          i);

      void witSetDemandFssShipVol (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & fssShipVol);

      void witSetDemandIntShipVols (
         const char * partName,
         const char * demandName,
         WitBoolean   intShipVols);

      void witSetDemandLeadTimeUB (
         const char * partName,
         const char * demandName,
         const int *  leadTimeUB);

      void witSetDemandObj1CumShipReward (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & obj1CumShipReward);

      void witSetDemandObj1ShipReward (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & obj1ShipReward);

      void witSetDemandPrefBuildAhead (
         const char * partName,
         const char * demandName,
         WitBoolean   prefBuildAhead);

      void witSetDemandPriority (
         const char * partName,
         const char * demandName,
         const int *  priority);

      void witSetDemandSearchInc (
         const char *         partName,
         const char *         demandName,
         const WitISRealArg & searchInc);

      void witSetDemandSelForDel (
         const char * partName,
         const char * demandName,
         WitBoolean   selForDel);

      void witSetDemandShipLateAllowed (
         const char * partName,
         const char * demandName,
         WitBoolean   shipLateAllowed);

      void witSetDemandShipLateLimit (
         const char * partName,
         const char * demandName,
         int          shipLateLimit);

      void witSetDemandShipLateUB (
         const char * partName,
         const char * demandName,
         const int *  shipLateUB);

      void witSetDemandShipReward (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & shipReward);

      void witSetDemandShipVol (
         const char *         partName,
         const char *         demandName,
         const WitIVRealArg & shipVol);

      //------------------------------------------------------------------------
      // API functions implemented in opnApi.C.
      //------------------------------------------------------------------------

      WitOperation * setGetOperationInit (
         const char * operationName);

      void witAddOperation (
         const char * operationName);

      void witCopyOperationData (
         const char * dupOperationName,
         WitRun *     origWitRun,
         const char * origOperationName);

      void witGetObjItrOperation (
         char * * operationName);

      void witGetOperationAppData (
         const char * operationName,
         void * *     appData);

      void witGetOperationCycleTime34 (
         const char *         operationName,
         const WitOVRealArg & cycleTime34);

      void witGetOperationExecBounds (
         const char *         operationName,
         const WitOVRealArg & hardLower,
         const WitOVRealArg & softLower,
         const WitOVRealArg & hardUpper);

      void witGetOperationExecCost (
         const char *         operationName,
         const WitOVRealArg & execCost);

      void witGetOperationExecPenalty (
         const char *         operationName,
         const WitOSRealArg & execPenalty);

      void witGetOperationExecSlbConIndex (
         const char * operationName,
         const int    thePer,
         int *        execSlbConIndex);

      void witGetOperationExecSlbvVarIndex (
         const char * operationName,
         const int    thePer,
         int *        execSlbvVarIndex);

      void witGetOperationExecVarIndex (
         const char * operationName,
         const int    thePer,
         int *        execVarIndex);

      void witGetOperationExecVol (
         const char *         operationName,
         const WitOVRealArg & execVol);

      void witGetOperationExecutable (
         const char *   operationName,
         WitBoolean * * executable);

      void witGetOperationExists (
         const char * operationName,
         WitBoolean * exists);

      void witGetOperationFssExecVol (
         const char *         operationName,
         const WitOVRealArg & fssExecVol);

      void witGetOperationIncLotSize (
         const char *         operationName,
         const WitOVRealArg & incLotSize);

      void witGetOperationIncLotSize2 (
         const char *         operationName,
         const WitOVRealArg & incLotSize2);

      void witGetOperationIntExecVols (
         const char * operationName,
         WitBoolean * intExecVols);

      void witGetOperationLotSize2Thresh (
         const char *         operationName,
         const WitOVRealArg & lotSize2Thresh);

      void witGetOperationMinLotSize (
         const char *         operationName,
         const WitOVRealArg & minLotSize);

      void witGetOperationMinLotSize2 (
         const char *         operationName,
         const WitOVRealArg & minLotSize2);

      void witGetOperationMrpExecVol (
         const char *         operationName,
         const WitOVRealArg & mrpExecVol);

      void witGetOperationNBomEntries (
         const char * operationName,
         int *        nBomEntries);

      void witGetOperationNBopEntries (
         const char * operationName,
         int *        nBopEntries);

      void witGetOperationObj1ExecCost (
         const char *         operationName,
         const WitOVRealArg & obj1ExecCost);

      void witGetOperationObjectStage (
         const char * operationName,
         int *        objectStage);

      void witGetOperations (
         int *      lenOperationList,
         char * * * operationList);

      void witGetOperationSelForDel (
         const char * operationName,
         WitBoolean * selForDel);

      void witGetOperationTwoLevelLotSizes (
         const char * operationName,
         WitBoolean * twoLevelLotSizes);

      void witGetOperationYield (
         const char * operationName,
         int * *      yield);

      void witGetOperationYieldRate (
         const char *         operationName,
         const WitOVRealArg & yield);

      void witSetOperationAppData (
         const char * operationName,
         void *       appData);

      void witSetOperationCycleTime34 (
         const char *         operationName,
         const WitIVRealArg & cycleTime34);

      void witSetOperationExecBounds (
         const char *         operationName,
         const WitIVRealArg & hardLower,
         const WitIVRealArg & softLower,
         const WitIVRealArg & hardUpper);

      void witSetOperationExecCost (
         const char *         operationName,
         const WitIVRealArg & execCost);

      void witSetOperationExecPenalty (
         const char *         operationName,
         const WitISRealArg & execPenalty);

      void witSetOperationExecVol (
         const char *         operationName,
         const WitIVRealArg & execVol);

      void witSetOperationIncLotSize (
         const char *         operationName,
         const WitIVRealArg & incLotSize);

      void witSetOperationIncLotSize2 (
         const char *         operationName,
         const WitIVRealArg & incLotSize2);

      void witSetOperationIntExecVols (
         const char * operationName,
         WitBoolean   intExecVols);

      void witSetOperationLotSize2Thresh (
         const char *         operationName,
         const WitIVRealArg & lotSize2Thresh);

      void witSetOperationMinLotSize (
         const char *         operationName,
         const WitIVRealArg & minLotSize);

      void witSetOperationMinLotSize2 (
         const char *         operationName,
         const WitIVRealArg & minLotSize2);

      void witSetOperationObj1ExecCost (
         const char *         operationName,
         const WitIVRealArg & obj1ExecCost);

      void witSetOperationObjectStage (
         const char * operationName,
         int          objectStage);

      void witSetOperationOperationName (
         const char * operationName,
         const char * newName);

      void witSetOperationSelForDel (
         const char * operationName,
         WitBoolean   selForDel);

      void witSetOperationTwoLevelLotSizes (
         const char * operationName,
         WitBoolean   twoLevelLotSizes);

      void witSetOperationYield (
         const char * operationName,
         const int *  yield);

      void witSetOperationYieldRate (
         const char *         operationName,
         const WitIVRealArg & yieldRate);

      //------------------------------------------------------------------------
      // API functions implemented in bomApi.C.
      //------------------------------------------------------------------------

      WitBomEntry * setGetBomEntryInit (
         const char *    consumingOperationName,
         int             bomEntryIndex);

      void witAddBomEntry (
         const char * consumingOperationName,
         const char * consumedPartName);

      void witCopyBomEntryData (
         const char * dupOperationName,
         int          dupBomEntryIndex,
         WitRun *     origWitRun,
         const char * origOperationName,
         int          origBomEntryIndex);

      void witGetObjItrBomEntry (
         char * * consumingOperationName,
         int *    bomEntryIndex);

      void witGetBomEntryAppData (
         const char * consumingOperationName,
         int          bomEntryIndex,
         void * *     appData);

      void witGetBomEntryConsRate (
         const char *         partName,
         int                  bomEntryIndex,
         const WitOVRealArg & consRate);

      void witGetBomEntryConsumedPart (
         const char * consumingOperationName,
         int          bomEntryIndex,
         char * *     consumedPartName);

      void witGetBomEntryEarliestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int *        earliestPeriod);

      void witGetBomEntryExecPenalty (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         const WitOSRealArg & execPenalty);

      void witGetBomEntryFallout (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int *        fallout);

      void witGetBomEntryFalloutRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         const WitOSRealArg & falloutRate);

      void witGetBomEntryImpactPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int * *      impactPeriod);

      void witGetBomEntryLatestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int *        latestPeriod);

      void witGetBomEntryMandEC (
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitBoolean * mandEC);

      void witGetBomEntryNSubsBomEntries (
         const char * partName,
         int          bomEntryIndex,
         int *        nSubsBomEntries);

      void witGetBomEntryNonSubVarIndex (
         const char * consumingOperationName,
         int          bomEntryIndex,
         const int    thePer,
         int *        nonSubVarIndex);

      void witGetBomEntryOffset (
         const char *         partName,
         int                  bomEntryIndex,
         const WitOVRealArg & offset);

      void witGetBomEntryPropRouting (
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitBoolean * propRouting);

      void witGetBomEntryPropRtg (
         const char *   consumingOperationName,
         int            bomEntryIndex,
         WitBoolean * * propRtg);

      void witGetBomEntryRoutingShare (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         const WitOVRealArg & routingShare);

      void witGetBomEntrySelForDel (
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitBoolean * selForDel);

      void witGetBomEntrySingleSource (
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitBoolean * singleSource);

      void witGetBomEntrySubConIndex (
         const char * consumingOperationName,
         int          bomEntryIndex,
         const int    thePer,
         int *        subConIndex);

      void witGetBomEntryUsageRate (
         const char *         partName,
         int                  bomEntryIndex,
         const WitOSRealArg & usageRate);

      void witGetBomEntryUsageTime (
         const char *         partName,
         int                  bomEntryIndex,
         const WitOSRealArg & usageTime);

      void witSetBomEntryAppData (
         const char * operationName,
         int          bomEntryIndex,
         void *       appData);

      void witSetBomEntryConsRate (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitIVRealArg & consRate);

      void witSetBomEntryEarliestPeriod (
         const char * operationName,
         int          bomEntryIndex,
         int          earliestPeriod);

      void witSetBomEntryExecPenalty (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitISRealArg & execPenalty);

      void witSetBomEntryFallout (
         const char * operationName,
         int          bomEntryIndex,
         int          fallout);

      void witSetBomEntryFalloutRate (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitISRealArg & falloutRate);

      void witSetBomEntryLatestPeriod (
         const char * operationName,
         int          bomEntryIndex,
         int          latestPeriod);

      void witSetBomEntryMandEC (
         const char * operationName,
         int          bomEntryIndex,
         WitBoolean   mandEC);

      void witSetBomEntryOffset (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitIVRealArg & offset);

      void witSetBomEntryPropRouting (
         const char * operationName,
         int          bomEntryIndex,
         WitBoolean   propRouting);

      void witSetBomEntryPropRtg (
         const char *       operationName,
         int                bomEntryIndex,
         const WitBoolean * propRtg);

      void witSetBomEntryRoutingShare (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitIVRealArg & routingShare);

      void witSetBomEntrySelForDel (
         const char * operationName,
         int          bomEntryIndex,
         WitBoolean   selForDel);

      void witSetBomEntrySingleSource (
         const char * operationName,
         int          bomEntryIndex,
         WitBoolean   singleSource);

      void witSetBomEntryUsageRate (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitISRealArg & usageRate);

      void witSetBomEntryUsageTime (
         const char *         operationName,
         int                  bomEntryIndex,
         const WitISRealArg & time);

      //------------------------------------------------------------------------
      // API functions implemented in subApi.C.
      //------------------------------------------------------------------------

      WitSubEntry * setGetSubBomEntryInit (
         const char *     consumingOperationName,
         int              bomEntryIndex,
         int              subsBomEntryIndex);

      void witAddSubsBomEntry (
         const char * consumingOperationName,
         int          bomEntryIndex,
         const char * consumedPartName);

      void witCopySubsBomEntryData (
         const char * dupOperationName,
         int          dupBomEntryIndex,
         int          dupSubsBomEntryIndex,
         WitRun *     origWitRun,
         const char * origOperationName,
         int          origBomEntryIndex,
         int          origSubsBomEntryIndex);

      void witGetObjItrSubsBomEntry (
         char * * consumingOperationName,
         int *    bomEntryIndex,
         int *    subsBomEntryIndex);

      void witGetSubsBomEntryAppData (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         void * *     appData);

      void witGetSubsBomEntryConsRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & consRate);

      void witGetSubsBomEntryConsumedPart (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         char * *     consumedPart);

      void witGetSubsBomEntryEarliestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int *        earliestPeriod);

      void witGetSubsBomEntryExecPenalty (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOSRealArg & execPenalty);

      void witGetSubsBomEntryExpAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * expAllowed);

      void witGetSubsBomEntryExpNetAversion (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOSRealArg & expNetAversion);

      void witGetSubsBomEntryFallout (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int *        fallout);

      void witGetSubsBomEntryFalloutRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOSRealArg & falloutRate);

      void witGetSubsBomEntryFssSubVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & fssSubVol);

      void witGetSubsBomEntryImpactPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int * *      impactPeriod);

      void witGetSubsBomEntryIntSubVols (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * intSubVols);

      void witGetSubsBomEntryLatestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int *        latestPeriod);

      void witGetSubsBomEntryMrpNetAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * mrpNetAllowed);

      void witGetSubsBomEntryMrpSubVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & mrpSubVol);

      void witGetSubsBomEntryNetAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * netAllowed);

      void witGetSubsBomEntryObj1SubCost (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & obj1SubCost);

      void witGetSubsBomEntryOffset (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & offset);

      void witGetSubsBomEntryProdVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & prodVol);

      void witGetSubsBomEntryRoutingShare (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & routingShare);

      void witGetSubsBomEntrySelForDel (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean * selForDel);

      void witGetSubsBomEntrySubCost (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & subCost);

      void witGetSubsBomEntrySubVarIndex (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         const int    thePer,
         int *        subVarIndex);

      void witGetSubsBomEntrySubVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOVRealArg & subVol);

      void witGetSubsBomEntryUsageRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOSRealArg & usageRate);

      void witSetSubsBomEntryAppData (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         void *       appData);

      void witSetSubsBomEntryConsRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & consRate);

      void witSetSubsBomEntryEarliestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int          earliestPeriod);

      void witSetSubsBomEntryExecPenalty (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitISRealArg & execPenalty);

      void witSetSubsBomEntryExpAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   expAllowed);

      void witSetSubsBomEntryExpNetAversion (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitISRealArg & expNetAversion);

      void witSetSubsBomEntryFallout (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int          fallout);

      void witSetSubsBomEntryFalloutRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitISRealArg & falloutRate);

      void witSetSubsBomEntryIntSubVols (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   intSubVols);

      void witSetSubsBomEntryLatestPeriod (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         int          latestPeriod);

      void witSetSubsBomEntryMrpNetAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   mrpNetAllowed);

      void witSetSubsBomEntryNetAllowed (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   netAllowed);

      void witSetSubsBomEntryObj1SubCost (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & obj1SubCost);

      void witSetSubsBomEntryOffset (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & offset);

      void witSetSubsBomEntryProdVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & prodVol);

      void witSetSubsBomEntryRoutingShare (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & routingShare);

      void witSetSubsBomEntrySelForDel (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   selForDel);

      void witSetSubsBomEntrySubCost (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & subCost);

      void witSetSubsBomEntrySubVol (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitIVRealArg & subVol);

      void witSetSubsBomEntryUsageRate (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitISRealArg & usageRate);

      //------------------------------------------------------------------------
      // API functions implemented in bopApi.C.
      //------------------------------------------------------------------------

      WitBopEntry * setGetBopEntryInit (
         const char *    producingOperationName,
         int             bopEntryIndex);

      void witAddBopEntry (
         const char * producingOperationName,
         const char * producedPartName);

      void witCopyBopEntryData (
         const char * dupOperationName,
         int          dupBopEntryIndex,
         WitRun *     origWitRun,
         const char * origOperationName,
         int          origBopEntryIndex);

      void witGetObjItrBopEntry (
         char * * producingOperationName,
         int *    bopEntryIndex);

      void witGetBopEntryAppData (
         const char * producingOperationName,
         int          bomEntryIndex,
         void * *     appData);

      void witGetBopEntryByProduct (
         const char * producingOperationName,
         int          bomEntryIndex,
         WitBoolean * byProduct);

      void witGetBopEntryEarliestPeriod (
         const char * producingOperationName,
         int          bomEntryIndex,
         int *        earliestPeriod);

      void witGetBopEntryExpAllowed (
         const char * producingOperationName,
         int          bomEntryIndex,
         WitBoolean * expAllowed);

      void witGetBopEntryExpAversion (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOSRealArg & expAversion);

      void witGetBopEntryImpactPeriod (
         const char * producingOperationName,
         int          bopEntryIndex,
         int * *      impactPeriod);

      void witGetBopEntryLatestPeriod (
         const char * producingOperationName,
         int          bomEntryIndex,
         int *        latestPeriod);

      void witGetBopEntryMeSelSplit (
         const char * producingOperationName,
         int          bomEntryIndex,
         WitBoolean * meSelSplit);

      void witGetBopEntryOffset (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOVRealArg & offset);

      void witGetBopEntryProdRate (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOSRealArg & prodRate);

      void witGetBopEntryProductRate (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOVRealArg & productRate);

      void witGetBopEntryProducedPart (
         const char * producingOperationName,
         int          bopEntryIndex,
         char * *     producedPartName);

      void witGetBopEntryRoutingShare (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOVRealArg & routingShare);

      void witGetBopEntrySelForDel (
         const char * producingOperationName,
         int          bomEntryIndex,
         WitBoolean * selForDel);

      void witSetBopEntryAppData (
         const char * producingOperationName,
         int          bopEntryIndex,
         void *       appData);

      void witSetBopEntryByProduct (
         const char * producingOperationName,
         int          bopEntryIndex,
         WitBoolean   byProduct);

      void witSetBopEntryEarliestPeriod (
         const char * producingOperationName,
         int          bopEntryIndex,
         int          earliestPeriod);

      void witSetBopEntryExpAllowed (
         const char * producingOperationName,
         int          bopEntryIndex,
         WitBoolean   expAllowed);

      void witSetBopEntryExpAversion (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitISRealArg & expAversion);

      void witSetBopEntryLatestPeriod (
         const char * producingOperationName,
         int          bopEntryIndex,
         int          latestPeriod);

      void witSetBopEntryMeSelSplit (
         const char * producingOperationName,
         int          bopEntryIndex,
         WitBoolean   meSelSplit);

      void witSetBopEntryOffset (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitIVRealArg & offset);

      void witSetBopEntryProdRate (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitISRealArg & prodRate);

      void witSetBopEntryProductRate (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitIVRealArg & productRate);

      void witSetBopEntryRoutingShare (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitIVRealArg & routingShare);

      void witSetBopEntrySelForDel (
         const char * producingOperationName,
         int          bopEntryIndex,
         WitBoolean   selForDel);

      //------------------------------------------------------------------------
      // API functions implemented in msgApi.C.
      //------------------------------------------------------------------------

      void witGetMesgFile (
         FILE * * mesgFile);

      void witSetMesgFileAccessMode (
         WitBoolean   quiet,
         const char * mesgFileAccessMode);

      void witGetMesgFileAccessMode (
         char * * mesgFileAccessMode);

      void witSetMesgFileName (
         WitBoolean   quiet,
         const char * mesgFileName);

      void witGetMesgFileName (
         char * * mesgFileName);

      void witSetMesgPrintNumber (
         WitBoolean quiet,
         int        messageNumber,
         WitBoolean mesgPrintMunber);

      void witGetMesgPrintNumber (
         int          messageNumber,
         WitBoolean * mesgPrintMunber);

      void witSetMesgStopRunning (
         WitBoolean quiet,
         int        messageNumber,
         WitBoolean mesgStopRunning);

      void witGetMesgStopRunning (
         int          messageNumber,
         WitBoolean * mesgStopRunning);

      void witSetMesgThrowErrorExc (
         WitBoolean quiet,
         int        messageNumber,
         WitBoolean mesgThrowErrorExc);

      void witGetMesgThrowErrorExc (
         int          messageNumber,
         WitBoolean * mesgThrowErrorExc);

      void witSetMesgTimesPrint (
         WitBoolean quiet,
         int        messageNumber,
         int        mesgTimesPrint);

      void witGetMesgTimesPrint (
         int        messageNumber,
         int *      mesgTimesPrint);

      void witListUnissuedMsgs ();

      //------------------------------------------------------------------------
      // Non-API public member functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      static WitRun * newInstance ();
         //
         // Constructs (on the heap) and returns a new WitRun.
         // To be used instead of the WitRun ctor, which is private.

      static void validateWitRun (WitRun * theWitRun, const char * theFuncName);
         //
         // Verifies that theWitRun is a valid WitRun.
         //
         // theFuncName: Name of the outer API function that was called.

      void forbidNullArg (const void * theArg, const char * argName);
         //
         // theArg:  A pointer that was passed to WIT as an argument to an
         //          API function.
         // argName: The name of the argument
         // If theArg is NULL, this function issues a severe error
         // identifying argName.

      static void apiVoidAlloc (void * *, int, size_t);
         //
         // Called by NonClass::apiAlloc.

      //------------------------------------------------------------------------
      // apiGet functions.
      //
      // These functions are designed to be called by the witGet<Object><Attr>
      // API functions. A typical apiGet function has three arguments:
      // theValue is the value to be returned by the calling API function.
      // theVarPtr is a pointer to a variable in which the value is to be
      // stored.
      // argName is the name of the argument for error reporting.
      //
      // At its simplest, an apiGet function is implemented as a simple
      // assignment. But it is also responsible for translating from the WIT
      // internal representation of an attribute (the type of theValue) into
      // the API representation of the attribute (the type of * theVarPtr). It
      // is also responsible for allocating memory, if needed.
      // Also, if theVarPtr is NULL, a severe error is issued.
      //------------------------------------------------------------------------

      void apiGet (
         int *        theVarPtr,
         const char * argName,
         int          theValue);

      void apiGet (
         WitBoolean * theVarPtr,
         const char * argName,
         bool         theValue);

      void apiGet (
         const WitOSRealArg & theArg,
         const char *         argName,
         double               theValue);

      void apiGet (
         WitAttr *    theVarPtr,
         const char * argName,
         WitAttr      theValue);

      void apiGet (
         FILE * *     theVarPtr,
         const char * argName,
         FILE *       theValue);

      void apiGet (
         void * *     theVarPtr,
         const char * argName,
         void *       theValue);

      void apiGet (
         char * *          theVarPtr,
         const char *      argName,
         const WitString & theValue);

      void apiGet (
         const WitOVRealArg &       theArg,
         const char *               argName,
         const WitVector <double> & theValue);

      void apiGet (
         int * *                 theVarPtr,
         const char *            argName,
         const WitVector <int> & theValue);

      void apiGet (
         WitBoolean * *           theVarPtr,
         const char *             argName,
         const WitVector <bool> & theValue);

      void apiGet (
         const WitOVRealArg &  theArg,
         const char *          argName,
         const WitDblFlexVec & theValue);

      void apiGet (
         WitBoolean * *            theVarPtr,
         const char *              argName,
         const WitFlexVec <bool> & theValue);

      void apiGet (
         int * *                  theVarPtr,
         const char *             argName,
         const WitFlexVec <int> & theValue);

      void apiGet (
         const WitOVRealArg & hardLBVec,
         const WitOVRealArg & softLBVec,
         const WitOVRealArg & hardUBVec,
         WitBoundSet *        theValue);

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitApiMgr *,       myApiMgr)
      accessFunc    (WitSession *,      mySession)

      accessWrapper (WitMsgFacility &,  myMsgFac,        mySession ())
      accessWrapper (WitProblem *,      myProblem,       mySession ())
      accessWrapper (WitCompMgr *,      myCompMgr,       myProblem ())
      accessWrapper (WitGlobalComp *,   myGlobalComp,    myProblem ())
      accessWrapper (WitOptComp *,      myOptComp,       myProblem ())
      accessWrapper (WitDetOptImpMgr *, myDetOptImpMgr,  myProblem ())
      accessWrapper (WitStochImpMgr *,  myStochImpMgr,   myProblem ())
      accessWrapper (int,               nPeriods,        myProblem ())
      accessWrapper (bool,              wit34Compatible, myProblem ())

      WitInputID * myInputID () const;

   private:

      //------------------------------------------------------------------------
      // Private member functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRun ();
         //
         // Declared private so that newInstance must be used.

      //------------------------------------------------------------------------
      // Other private member functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      WitDelComp * curItrDelCompForGet (
            WitAttr      objItrStateVal,
            WitMsgFragID theObjTypeFragID);
         //
         // Does error checking for witGetObjItr<Object> functions.
         // objItrStateVal and theObjTypeFragID must match the class of DelComp
         // iteration's current DelComp.
         // If no errors occur, returns DelComp iteration's current DelComp.

      static void handleBadAllocForCtor ();
         //
         // Handles an std::bad_alloc exception during the ctor for this class.

      void startCopyObjData (WitRun * origWitRun);
         //
         // Performs the tasks of a witCopy<Object>Data function that are not
         // specific to the function.

      void checkGlobAttsForCopy (WitRun * origWitRun);
         //
         // Verifies that the necessary global attributes of this WitRun and
         // origWitRun match for a call to a witCopy<Object>Data function.

      void prepSet34Attr (
            const char * the34Object,
            const char * the34Attribute,
            const char * the40Object,
            const char * the40Attribute);
         //
         // Does the preparatory tasks for an API "set" function on a WIT 3.4
         // attribute. The tasks are:
         //    Verify 3.4 compatibility mode.
         //    Issue the appropriate message.
         // the34Object    is the name of the object type for the 3.4 attribute.
         // the34Attribute is the name of the 3.4 attribute
         // the40Object    is the name of the object type for the 4.0 attribute.
         // the40Attribute is the name of the 4.0 attribute

      void prepGet34Attr (
            const char * the34Object,
            const char * the34Attribute,
            const char * the40Object,
            const char * the40Attribute);
         //
         // Does the preparatory work for an API "get" function on a WIT 3.4
         // attribute. The tasks are:
         //    Verify 3.4 compatibility mode.
         //    Issue the appropriate message.
         // the34Object    is the name of the object type for the 3.4 attribute.
         // the34Attribute is the name of the 3.4 attribute
         // the40Object    is the name of the object type for the 4.0 attribute.
         // the40Attribute is the name of the 4.0 attribute

      void prepGetIndex (int thePer);
         //
         // Prepares a witGet...VarIndex or ConIndex API function call.

      void addingDelComp (WitMsgFragID theObjTypeFragID);
         //
         // Takes action appropriate when a DelComp is being added.
         // theObjTypeFragID identifies the type of the DelComp.

      void forbidStochMode ();
         //
         // Issues a severe error, if this WitRun is in stochastic mode.

      const char * apiFuncName ();
         //
         // Returns myApiMgr ()->apiFuncName ();

      noCopyCtorAssign (WitRun);

      //------------------------------------------------------------------------
      // Private member functions implemented in globApi.C.
      //------------------------------------------------------------------------

      void issueGetAttrMsg (const char * theAttName) const;
         //
         // Issues a message for getting the attribute whose name is given by
         // theAttName, if appropriate.

      bool alwaysTrue ();
         //
         // Always returns true. This is used by witExhaustMemory () to prevent
         // the compiler from issuing a warning message about the function's
         // apparent infinite loop. Also, this function must be implemented in
         // a file other than WitRun.C, in order to prevent the compiler from
         // analyzing its content, when it's compiling witExhaustMemory ().

      //------------------------------------------------------------------------
      // Private member functions implemented in optApi.C.
      //------------------------------------------------------------------------

      void parseObjectiveListSpec (
            const char *     objectiveListSpec,
            WitList <char> & theObjNameList);
         //
         // Parses objectiveListSpec and stores the Objective names that it
         // specifies in theObjNameList
         // The c-strings stored by this function will need to be deleted.

      void checkForDupObjNames (const WitVector <const char *> & theObjNames);
         //
         // Checks for duplicate names in theObjNames.

      //------------------------------------------------------------------------
      // Private member functions implemented in partApi.C.
      //------------------------------------------------------------------------

      WitPart * addPart34 (
            const char * partName, WitAttr partCategory);
         //
         // Adds a part in WIT 3.4 mode.

      WitPart * addPartPost34 (
            const char * partName, WitAttr partCategory);
         //
         // Adds a part in Post WIT 3.4 mode.

      WitPart * getPartP (const char * partName);

      //------------------------------------------------------------------------
      // Private member functions implemented in demApi.C.
      //------------------------------------------------------------------------

      WitDemand * getDemandP (
         const char * demandedPartName,
         const char * demandName);

      void eqHeurAlloc (
         int                  lenLists,
         const char * const * demandedPartNameList,
         const char * const * demandNameList,
         const int *          shipPeriodList,
         const WitIVRealArg & desIncVolList,
         const WitOVRealArg & incVolList,
         const WitBoolean *   asapMultiExecList);

      void incHeurAlloc (
         const char *         demandedPartName,
         const char *         demandName,
         int                  shipPeriod,
         const WitISRealArg & desIncVol,
         const WitOSRealArg & incVol,
         WitBoolean           asapMultiExec);

      void defineAllocTarget (
         const char *     demandedPartName,
         const char *     demandName,
         int              shipPeriod,
         double           desIncVol,
         bool             asapMultiExec,
         WitDemPerStack & theDemPers);

      void prepGetPegging (int shipPeriod);
         //
         // Prepares a concurrent pegging API function call.

      void getPartPip (
         WitPartTripStack &   thePegTrips,
         int *                lenLists,
         char * * *           partNameList,
         int * *              periodList,
         const WitOVRealArg & peggedVolList);

      void prepGetPip (int shipPeriod);
         //
         // Prepares a post-implosion pegging API function call.

      //------------------------------------------------------------------------
      // Private member functions implemented in opnApi.C.
      //------------------------------------------------------------------------

      WitOperation * getOperationP (const char * operationName);

      //------------------------------------------------------------------------
      // Private member functions implemented in bomApi.C.
      //------------------------------------------------------------------------

      WitBomEntry * getBomEntryP (
         const char * consumingOperationName,
         int          bomEntryIndex);

      //------------------------------------------------------------------------
      // Private member functions implemented in subApi.C.
      //------------------------------------------------------------------------

      WitSubEntry * getSubBomEntryP (
         const char * operationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex);

      //------------------------------------------------------------------------
      // Private member functions implemented in bopApi.C.
      //------------------------------------------------------------------------

      WitBopEntry * getBopEntryP (
         const char * producingOperationName,
         int          bopEntryIndex);

      //------------------------------------------------------------------------
      // Private member functions implemented in msgApi.C.
      //------------------------------------------------------------------------

      const char * levelExtNumFragID (int theExtNum);
         //
         // Returns the message fragment ID for a severity level indicated by
         // theExtNum.

      bool checkMsgExtNum (int theExtNum);
         //
         // Returns true, iff theExtNum is the externalNumber of a Msg.
         // If not, issues a warning Msg.

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      int signature_;
         //
         // This WitRun is a valid WitRun only if signature_ == VALID_SIGNATURE.

      WitApiMgr * myApiMgr_;
         //
         // The ApiMgr owned by this WitRun.

      WitSession * mySession_;
         //
         // The Session for this WitRun.

      int nDepVeneers_;
         //
         // The number of LgFrWitRunVeneers that point to this WitRun
   };
d2804 12
a2815 12
   {
   template <typename Elem> 
         void apiAlloc (Elem * * theCVecPtr, int nElems);
      //
      // Allocates * theCVecPtr to nElems elements.
      // Uses malloc, so the * theCVecPtr can be passed back to the application
      // program.

   void apiAlloc (const WitOVRealArg & theOVRealArg, int nElems);
      //
      // Same as the above.
   };
@


1.378
log
@CPLEX
@
text
@a515 5
      void witGetCoinEmbedded (WitBoolean * coinEmbedded);

      void witGetCoinSelected (
         WitBoolean * value);

a535 3
      void witGetCplexSelected (
         WitBoolean * value);

a601 3
      void witSetCoinSelected (
         WitBoolean coinSelected);

a613 3
      void witSetCplexSelected (
         WitBoolean cplexSelected);

@


1.377
log
@CPLEX
@
text
@d526 2
a527 2
      void witGetCplexObjBound (
         const WitOSRealArg & cplexObjBound);
d529 2
a530 2
      void witGetCplexObjRelGap (
         const WitOSRealArg & cplexObjRelGap);
@


1.376
log
@CPLEX
@
text
@a525 3
      void witGetCplexMipRelGap (
         const WitOSRealArg & cplexMipRelGap);

d529 3
@


1.375
log
@CPLEX
@
text
@d526 3
@


1.374
log
@CPLEX
@
text
@d526 3
@


1.373
log
@CPLEX
@
text
@a2654 8
      void issueGetAttrMsg (const char *, const WitOSRealArg &) const;
         //
         // Same as above, but for a double attribute.

      void issueGetAttrMsg (const char *, const int *) const;
         //
         // Same as above, but for an int attribute.

@


1.372
log
@CPLEX
@
text
@d541 3
@


1.371
log
@CPLEX Parameters
@
text
@d538 2
a539 2
      void witGetCplexSolnStatus (
         int * cplexSolnStatus);
@


1.370
log
@CPLEX Parameters
@
text
@d494 1
a494 1
      void witAddDblCpxParSpec (
d498 1
a498 1
      void witAddIntCpxParSpec (
d514 1
a514 1
      void witClearCpxParSpecs ();
d526 2
a527 2
      void witGetCplexSelected (
         WitBoolean * value);
d529 2
a530 2
      void witGetCpxParSpecDblVal (
         const WitOSRealArg & cpxParSpecDblVal);
d532 2
a533 2
      void witGetCpxParSpecIntVal (
         int * cpxParSpecIntVal);
d535 2
a536 2
      void witGetCpxParSpecName (
         char * * cpxParSpecName);
d538 2
a539 2
      void witGetCpxSolnStatus (
         int * cpxSolnStatus);
d544 1
a544 1
      void witGetDblCpxParSpec (
d552 1
a552 1
      void witGetIntCpxParSpec (
d607 2
a608 2
      void witSetCplexSelected (
         WitBoolean cplexSelected);
d610 2
a611 2
      void witSetCpxParSpecDblVal (
         const WitISRealArg & cpxParSpecDblVal);
d613 2
a614 2
      void witSetCpxParSpecIntVal (
         int cpxParSpecIntVal);
d616 2
a617 2
      void witSetCpxParSpecName (
         const char * cpxParSpecName);
@


1.369
log
@CPLEX Parameters
@
text
@d496 1
a496 1
         const WitISRealArg & theVal);
d500 1
a500 1
         int          theVal);
@


1.368
log
@CPLEX solution status
@
text
@d529 9
a591 9
      void witGetSpecCpxParDblVal (
         const WitOSRealArg & specCpxParDblVal);

      void witGetSpecCpxParIntVal (
         int * specCpxParIntVal);

      void witGetSpecCpxParName (
         char * * specCpxParName);

d610 9
a649 9
      void witSetSpecCpxParDblVal (
         const WitISRealArg & specCpxParDblVal);

      void witSetSpecCpxParIntVal (
         int specCpxParIntVal);

      void witSetSpecCpxParName (
         const char * specCpxParName);

@


1.367
log
@CPLEX Solution Status
@
text
@d529 2
a530 2
      void witGetCpxStat (
         int * cpxStat);
@


1.366
log
@CPLEX Parameters
@
text
@d529 3
@


1.365
log
@CPLEX Parameters
@
text
@d514 2
@


1.364
log
@CPLEX Parameters
@
text
@d530 5
@


1.363
log
@CPLEX Parameters
@
text
@d533 5
@


1.362
log
@CPLEX Parameters
@
text
@d494 7
a500 1
      void witAddIntCpxParSpec (const char * theName, int theVal);
@


1.361
log
@CPLEX Param Specs
@
text
@d494 2
@


1.360
log
@CPLEX Param Specs.
@
text
@d560 3
d618 3
@


1.359
log
@CPX Param Specs
@
text
@d560 3
d615 3
@


1.358
log
@CPX Params
@
text
@a533 3
      void witGetNameForCpxParam (
         char * * nameForCpxParam);

d560 3
a592 3
      void witSetNameForCpxParam (
         const char * nameForCpxParam);

d612 3
@


1.357
log
@CPLEX
@
text
@d534 3
d593 3
@


1.356
log
@CPLEX
@
text
@a556 2
      void witGetSolverEmbedded (WitBoolean * solverEmbedded);

@


1.355
log
@Modifiable heuristic allocation
@
text
@d508 3
d516 3
a558 6
      void witGetSolverIsCoin (
         WitBoolean * value);

      void witGetSolverIsCplex (
         WitBoolean * value);

d571 3
d577 3
a607 6
      void witSetSolverIsCoin (
         WitBoolean solverIsCoin);

      void witSetSolverIsCplex (
         WitBoolean solverIsCplex);

@


1.354
log
@Heuristic Adjustment
@
text
@a228 3
      void witGetHeurAdjustEnabled (
         WitBoolean * heurAdjustEnabled);

d250 3
a384 3
      void witSetHeurAdjustEnabled (
         WitBoolean heurAdjustEnabled);

d403 3
@


1.353
log
@Heuristic Adjustment
@
text
@a83 2
      void witFinishHeurAdjust ();

a141 2
      void witStartHeurAdjust ();

a228 3
      void witGetHeurAdjustActive (
         WitBoolean * heurAdjustActive);

@


1.352
log
@Heuristic Adjustment
@
text
@d236 3
d392 3
@


1.351
log
@Pause/Resume
@
text
@d84 2
a124 2
      void witPauseHeurAlloc ();

d144 2
d233 3
a238 3
      void witGetHeurAllocPaused (
         WitBoolean * heurAllocPaused);

@


1.350
log
@Pause / Resume
@
text
@d123 2
@


1.349
log
@Name change: "selection reuse" has becomne "selection recovery".
@
text
@d232 3
@


1.348
log
@Lead Time Bounds.
@
text
@d319 1
a319 1
      void witGetSelectionReuse (
d445 2
a446 2
      void witSetSelectionReuse (
         WitBoolean selectionReuse);
@


1.347
log
@Bounded Lead Times
@
text
@d702 1
a702 1
      void witGetPartBoundedLeadTime (
d704 1
a704 1
         WitBoolean * boundedLeadTime);
d939 1
a939 1
      void witSetPartBoundedLeadTime (
d941 1
a941 1
         WitBoolean   boundedLeadTime);
@


1.346
log
@Bounded Lead Times
@
text
@d702 1
a702 1
      void witGetPartBoundedLeadTimes (
d704 1
a704 1
         WitBoolean * boundedLeadTimes);
d939 1
a939 1
      void witSetPartBoundedLeadTimes (
d941 1
a941 1
         WitBoolean   boundedLeadTimes);
@


1.345
log
@Bounded Lead Times
@
text
@d1191 5
d1379 5
@


1.344
log
@Selection Reuse.
@
text
@d702 4
d939 4
@


1.343
log
@CPLEX
@
text
@d319 3
d445 3
@


1.342
log
@CPLEX
@
text
@d544 3
d593 3
@


1.341
log
@Preparing for CPLEX.
@
text
@d499 2
@


1.340
log
@Revising the build procedure.
@
text
@d539 3
d585 3
@


1.339
log
@Revising the build procedure.
@
text
@d537 2
@


1.338
log
@Revising the build procedure.
@
text
@d494 1
a494 1
      void witGetCoinEmdedded (WitBoolean * coinEmdedded);
@


1.337
log
@Revising the build process.
@
text
@d494 2
a542 2
      void witGetWitEmbedsCoin (WitBoolean * witEmbedsCoin);

@


1.336
log
@Multi-Obj Mode
@
text
@a531 2
      void witGetOptImpAllowed (WitBoolean * optImpAllowed);

d541 2
@


1.335
log
@Multi-Obj Mode
@
text
@d529 2
a530 2
      void witGetObjectiveSeqNo (
         int * objectiveSeqNo);
d574 2
a575 2
      void witSetObjectiveSeqNo (
         int objectiveSeqNo);
@


1.334
log
@Multi-objective mode
@
text
@d509 3
d561 3
@


1.333
log
@Multi-objective mode.
@
text
@a508 3
      void witGetNObjectives (
         int * nObjectives);

a525 3
      void witGetObjectiveName (
         char * * objectiveName);

a557 3
      void witSetNObjectives (
         int nObjectives);

a567 3
      void witSetObjectiveName (
         const char * objectiveName);

@


1.332
log
@Multi-objective mode
@
text
@d526 3
d574 3
d2590 16
@


1.331
log
@Multi-Objective Mode.
@
text
@d522 4
a531 4
      void witGetObjectives (
         int  *     lenList,
         char * * * objectiveList);

d567 4
@


1.330
log
@Multi-objective mode.
@
text
@d525 3
d570 3
@


1.329
log
@Multi-objective mode.
@
text
@d564 3
@


1.328
log
@Multi-obj mode.
@
text
@d498 1
a498 1
         char * * currentObjective);
d522 3
d550 1
a550 1
         const char * currentObjective);
@


1.327
log
@Multi-obj mode.
@
text
@d33 1
a33 1
// member functions, the implmentation of class WitRun is
d522 4
@


1.326
log
@Multi-objective mode.
@
text
@d497 3
d542 3
@


1.325
log
@Removing objective #2.
@
text
@d506 3
d545 3
@


1.324
log
@Removing objective #2.
@
text
@a2433 1
      WitObjFunc * objChoice () const;
@


1.323
log
@Removing objective #2.
@
text
@a520 3
      void witGetPeriodsPerYear (
        const WitOSRealArg & periodsPerYear);

a547 3
      void witSetPeriodsPerYear (
         const WitISRealArg & periodsPerYear);

@


1.322
log
@Multi-obj mode.
@
text
@a493 3
      void witGetCapCost (
         const WitOSRealArg & capCost);

a499 3
      void witGetInvCost (
         const WitOSRealArg & invCost);

a505 18
      void witGetObj2Values (
         const WitOSRealArg & revValue,
         const WitOSRealArg & invValue,
         const WitOSRealArg & servValue,
         const WitOSRealArg & subsValue);

      void witGetObj2Winv (
         const WitOSRealArg & obj2Winv);

      void witGetObj2Wrev (
         const WitOSRealArg & obj2Wrev);

      void witGetObj2Wserv (
         const WitOSRealArg & obj2Wserv);

      void witGetObj2Wsub (
         const WitOSRealArg & obj2Wsub);

a535 3
      void witSetCapCost (
         const WitISRealArg & capCost);

a538 3
      void witSetInvCost (
         const WitISRealArg & invCost);

a544 12
      void witSetObj2Winv (
         const WitISRealArg & obj2Winv);

      void witSetObj2Wrev (
         const WitISRealArg & obj2Wrev);

      void witSetObj2Wserv (
         const WitISRealArg & obj2Wserv);

      void witSetObj2Wsub (
         const WitISRealArg & obj2Wsub);

a870 4
      void witGetPartUnitCost (
         const char *         partName,
         const WitOSRealArg & unitCost);

a982 4
      void witSetPartUnitCost (
         const char *         partName,
         const WitISRealArg & unitCost);

a1129 5
      void witGetDemandGrossRev (
         const char *         partName,
         const char *         demandName,
         const WitOSRealArg & grossRev);

a1312 5
      void witSetDemandGrossRev (
         const char *         partName,
         const char *         demandName,
         const WitISRealArg & grossRev);

a1483 4
      void witGetOperationObj2AuxCost (
         const char *         operationName,
         const WitOSRealArg & obj2AuxCost);

a1561 4
      void witSetOperationObj2AuxCost (
         const char *         operationName,
         const WitISRealArg & obj2AuxCost);

a1925 6
      void witGetSubsBomEntryObj2SubPenalty (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitOSRealArg & obj2SubPenalty);

a2052 6
      void witSetSubsBomEntryObj2SubPenalty (
         const char *         consumingOperationName,
         int                  bomEntryIndex,
         int                  subsBomEntryIndex,
         const WitISRealArg & obj2SubPenalty);

@


1.321
log
@Removed multiThread.
@
text
@d509 3
d572 3
@


1.320
log
@Implemented the undocumented "wit34Allowed" attribute.
@
text
@a106 2
      void witGetMultiThread (WitBoolean * multiThread);

a135 2
      void witSetMultiThread (WitBoolean multiThread);

@


1.319
log
@Implemented witIssueFatalMesg.
@
text
@d479 3
@


1.318
log
@Added witGetObjectValue and witGetBoundsValue.
Moved witGetObjectValues to the undocumented section.
@
text
@d115 2
@


1.317
log
@Removed many conversions of string constant to char *.
@
text
@d490 3
d529 3
@


1.316
log
@Object name change.
@
text
@d645 1
a645 1
         WitAttr      theAttr);
d2604 1
a2604 1
      void issueGetAttrMsg (WitAttr theAttr) const;
d2606 2
a2607 1
         // Issues a message for getting theAttr, if appropriate.
d2609 1
a2609 1
      void issueGetAttrMsg (WitAttr, const WitOSRealArg &) const;
d2613 1
a2613 1
      void issueGetAttrMsg (WitAttr, const int *) const;
@


1.315
log
@Object name changing.
@
text
@d1335 5
@


1.314
log
@Object name changing.
@
text
@d965 2
a966 2
         const char *         oldPartName,
         const char *         newPartName);
d1616 4
@


1.313
log
@Stochastic Implosion
@
text
@d964 4
@


1.312
log
@Stochastic Implosion
@
text
@d595 2
a596 2
      void witGetCurScenarioIndex (
         int * curScenarioIndex);
d616 2
a617 2
      void witSetCurScenarioIndex (
         int curScenarioIndex);
@


1.311
log
@Stochastic Implosion
@
text
@d601 2
a602 2
      void witGetPerStageIndex (
         int * * perStageIndex);
d622 2
a623 2
      void witSetPerStageIndex (
         const int * perStageIndex);
d793 4
a866 4
      void witGetPartStageIndex (
         const char * partName,
         int *        stageIndex);

d960 4
a997 4
      void witSetPartStageIndex (
         const char * partName,
         int          stageIndex);

d1526 4
a1537 4
      void witGetOperationStageIndex (
         const char * operationName,
         int *        stageIndex);

d1608 4
a1615 4
      void witSetOperationStageIndex (
         const char * operationName,
         int          stageIndex);

@


1.310
log
@Stochastic Implosion
@
text
@d601 3
a609 3
      void witGetStageIndex (
         int * * stageIndex);

d622 3
a630 3
      void witSetStageIndex (
         const int * stageIndex);

@


1.309
log
@Stochastic Implosion
@
text
@d607 3
d628 3
@


1.308
log
@Stochastic Implosion
@
text
@a2382 34
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc    (WitApiMgr *,       myApiMgr)
      accessFunc    (WitSession *,      mySession)

      accessWrapper (WitMsgFacility &,  myMsgFac,        mySession ())
      accessWrapper (WitProblem *,      myProblem,       mySession ())
      accessWrapper (WitCompMgr *,      myCompMgr,       myProblem ())
      accessWrapper (WitGlobalComp *,   myGlobalComp,    myProblem ())
      accessWrapper (WitOptComp *,      myOptComp,       myProblem ())
      accessWrapper (WitDetOptImpMgr *, myDetOptImpMgr,  myProblem ())
      accessWrapper (WitStochImpMgr *,  myStochImpMgr,   myProblem ())
      accessWrapper (int,               nPeriods,        myProblem ())
      accessWrapper (bool,              wit34Compatible, myProblem ())

      WitObjFunc * objChoice () const;
      WitInputID * myInputID () const;

   private:

      //------------------------------------------------------------------------
      // Private member functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitRun ();
         //
         // Declared private so that newInstance must be used.

      //------------------------------------------------------------------------
d2472 34
@


1.307
log
@witGetExpCycle
@
text
@d2503 1
a2503 1
         const WitBoundSet *  theValue);
@


1.306
log
@Stochastic Implosion
@
text
@d88 5
@


1.305
log
@Stochastic Implosion
@
text
@d852 1
a852 1
      void witGetPartStageNo (
d854 1
a854 1
         int *        stageNo);
d983 1
a983 1
      void witSetPartStageNo (
d985 1
a985 1
         int          stageNo);
d1523 1
a1523 1
      void witGetOperationStageNo (
d1525 1
a1525 1
         int *        stageNo);
d1601 1
a1601 1
      void witSetOperationStageNo (
d1603 1
a1603 1
         int          stageNo);
@


1.304
log
@Stochastic Implosion
@
text
@d590 2
a591 2
      void witGetCurScenarioNo (
         int * curScenarioNo);
d608 2
a609 2
      void witSetCurScenarioNo (
         int curScenarioNo);
@


1.303
log
@Stochastic Implosion
@
text
@d588 1
a588 1
      void witDiscardStochSoln ();
@


1.302
log
@Stochastic Implosion
@
text
@a2503 7
      void prepApiGet (void * theVarPtr, const char * argName);
         //
         // Prepares to do an API "get".
         // theVarPtr is a pointer to a variable in which the value is to be
         // stored.
         // argName is the name of the argument.

@


1.301
log
@Stochastic Implosion
@
text
@a805 4
      void witGetPartRecourseStage (
         const char * partName,
         WitBoolean * recourseStage);

d852 4
a966 4
      void witSetPartRecourseStage (
         const char * partName,
         WitBoolean   recourseStage);

d983 4
a1514 4
      void witGetOperationRecourseStage (
         const char * operationName,
         WitBoolean * recourseStage);

d1523 4
d1597 1
a1597 1
      void witSetOperationRecourseStage (
d1599 1
a1599 1
         WitBoolean   recourseStage);
d1601 1
a1601 1
      void witSetOperationSelForDel (
d1603 1
a1603 1
         WitBoolean   selForDel);
@


1.300
log
@Stochastic Implosion
@
text
@d590 3
a598 3
      void witGetScenarioIndex (
         int * scenarioIndex);

d608 3
a616 3
      void witSetScenarioIndex (
         int scenarioIndex);

@


1.299
log
@Stochastic Implosion
@
text
@d593 3
a598 3
      void witGetScenarioProb (
         const WitOSRealArg & scenarioProb);

d611 3
a616 3
      void witSetScenarioProb (
         const WitISRealArg & scenarioProb);

@


1.298
log
@ASAP Pegging Order
@
text
@d2381 2
a2382 2
      accessFunc    (WitApiMgr *,      myApiMgr)
      accessFunc    (WitSession *,     mySession)
d2384 9
a2392 9
      accessWrapper (WitMsgFacility &, myMsgFac,        mySession ())
      accessWrapper (WitProblem *,     myProblem,       mySession ())
      accessWrapper (WitCompMgr *,     myCompMgr,       myProblem ())
      accessWrapper (WitGlobalComp *,  myGlobalComp,    myProblem ())
      accessWrapper (WitOptComp *,     myOptComp,       myProblem ())
      accessWrapper (WitOptImploder *, myOptImploder,   myProblem ())
      accessWrapper (WitStochImpMgr *, myStochImpMgr,   myProblem ())
      accessWrapper (int,              nPeriods,        myProblem ())
      accessWrapper (bool,             wit34Compatible, myProblem ())
@


1.297
log
@ASAP Pegging Order
@
text
@d659 1
a659 1
      void witGetPartAsapPip (
d661 1
a661 1
         WitBoolean * asapPip);
d901 1
a901 1
      void witSetPartAsapPip (
d903 1
a903 1
         WitBoolean   asapPip);
@


1.296
log
@Stochastic Implosion
@
text
@d659 4
d901 4
@


1.295
log
@Stochastic Implosion
@
text
@d2496 6
a2501 1
      noCopyCtorAssign (WitRun);
a2568 6
      void issueScenMsgIfNeeded (const char * theAttName);
         //
         // Issues a message for an API function call working with a
         // scenario-specific attribute whose name is given by theAttName, if
         // it's needed.

d2573 2
@


1.294
log
@Stochastic Implosion.
@
text
@d2564 1
a2564 1
      void issueSsiMsgIfNeeded (const char * theAttName);
d2567 2
a2568 2
         // Scenario-specific input attribute whoase name is given by
         // theAttName, if it's needed.
@


1.293
log
@Stochastic Implosion
@
text
@d2564 1
a2564 1
      void issueSsiMsgIfNeeded (const char * theAttrName);
d2568 1
a2568 1
         // theAttrName, if it's needed.
@


1.292
log
@Stochastic Implosion
@
text
@d2382 1
d2564 6
@


1.291
log
@Stochastic Implosion
@
text
@d602 2
a603 2
      void witGetStochDataMode (
         WitBoolean * stochDataMode);
d620 2
a621 2
      void witSetStochDataMode (
         WitBoolean stochDataMode);
d2559 1
a2559 1
      void forbidStochDataMode ();
d2561 1
a2561 1
         // Issues a severe error, if this WitRun is in stochastic data mode.
@


1.290
log
@Stochastic Implosion
@
text
@a592 3
      void witGetProbability (
         const WitOSRealArg & probability);

d596 3
a610 3
      void witSetProbability (
         const WitISRealArg & probability);

d614 3
@


1.289
log
@Stochastic Implosion
@
text
@d802 4
d959 4
d1507 4
d1589 4
@


1.288
log
@Stochastic Implosion
@
text
@a2503 4
      const char * apiFuncName ();
         //
         // Returns myApiMgr ()->apiFuncName ();

d2543 8
@


1.287
log
@Stochastic Implosion
@
text
@d605 2
a606 2
      void witGetStochSolnExists (
         WitBoolean * stochSolnExists);
@


1.286
log
@Stochastic Implosion
@
text
@d593 3
a598 3
      void witGetScenarioProb (
         const WitOSRealArg & scenarioProb);

d611 3
a616 3
      void witSetScenarioProb (
         const WitISRealArg & scenarioProb);

@


1.285
log
@Stochastic Implosion
@
text
@d602 3
a607 3
      void witGetStochasticMode (
         WitBoolean * stochasticMode);

d620 2
a621 2
      void witSetStochasticMode (
         WitBoolean stochasticMode);
@


1.284
log
@Stochastic Implosion
@
text
@d588 2
d602 2
a603 2
      void witGetStochSolnAvail (
         WitBoolean * stochSolnAvail);
d720 1
a720 1
         WitBoolean * exist);
d1449 1
a1449 1
         WitBoolean * exist);
@


1.283
log
@Stochastic Implosion
@
text
@d589 1
a589 1
         int * value);
d598 4
a601 1
         WitBoolean * value);
d604 1
a604 1
         WitBoolean * value);
@


1.282
log
@Stochastic Implosion
@
text
@d600 1
a600 1
      void witGetStochImpMode (
d615 2
a616 2
      void witSetStochImpMode (
         WitBoolean stochImpMode);
@


1.281
log
@Stochastic Implosion
@
text
@d618 2
@


1.280
log
@Stochastic Implosion
@
text
@a590 3
      void witGetProbability (
         const WitOSRealArg & probability);

d594 3
a605 3
      void witSetProbability (
         const WitISRealArg & probability);

d609 3
@


1.279
log
@Stochastic Implosion
@
text
@d591 3
d606 3
@


1.278
log
@Stochastic Implosion
@
text
@d30 1
a30 1
// All non-API responsibilties are delegated to class Session.
d40 1
a255 3
      void witGetNScenarios (
         int * value);

a312 3
      void witGetScenarioIndex (
         int * scenarioIndex);

a318 6
      void witGetStageByObject (
         WitBoolean * value);

      void witGetStochImpMode (
         WitBoolean * value);

a402 3
      void witSetNScenarios (
         int nScenarios);

a435 3
      void witSetScenarioIndex (
         int scenarioIndex);

a441 6
      void witSetStageByObject (
         WitBoolean stageByObject);

      void witSetStochImpMode (
         WitBoolean stochImpMode);

d585 28
@


1.277
log
@Stochastic implosion.
@
text
@d315 3
d450 3
@


1.276
log
@Stochastic implosion.
@
text
@d324 1
a324 1
      void witGetStochImpActive (
d456 2
a457 2
      void witSetStochImpActive (
         WitBoolean stochImpActive);
@


1.275
log
@Stochastic Implosion.
@
text
@d2520 1
a2520 1
         // Tells this WitRun that DelComp is being added.
@


1.274
log
@Stochastic Implosion.
@
text
@d2518 5
@


1.273
log
@Stochastic implosion.
@
text
@d2459 1
a2459 1
            WitMsgFragID theClassFragID);
d2462 1
a2462 1
         // objItrStateVal and theClassFragID must match the class of DelComp
@


1.272
log
@Stochastic implosion.
@
text
@a2517 6
      void forbidAddStochAct (WitMsgFragID theMsgFragID);
         //
         // If stochastic implosion is active, this function issues a severe
         // error msg indicating that a attempt was made to add an object of the
         // type indicated by theMsgFragID.

@


1.271
log
@Stochastic Implosion.
@
text
@d2518 6
@


1.270
log
@Stochastic implosion.
@
text
@d324 3
d456 3
@


1.269
log
@Stochastic implosion.
@
text
@d255 3
d408 3
@


1.268
log
@Removed witThrowUnknownExc.
@
text
@d318 3
d444 3
@


1.267
log
@[disallowing scrap]
@
text
@a178 5
      void witThrowUnknownExc ();
         //
         // Throws an exception of unknown type.
         // Used to test WIT's response to this situtation.

@


1.266
log
@[disallowed backlog]
@
text
@d787 4
d918 4
@


1.265
log
@[disallowed backlog]
@
text
@a998 5
      void witGetDemandBacklogAllowed (
         const char * partName,
         const char * demandName,
         WitBoolean * backlogAllowed);

d1146 1
a1146 1
      void witGetDemandShipLateUB (
d1149 1
a1149 1
         int * *      shipLateUB);
d1156 5
a1236 5
      void witSetDemandBacklogAllowed (
         const char * partName,
         const char * demandName,
         WitBoolean   backlogAllowed);

d1314 1
a1314 1
      void witSetDemandShipLateUB (
d1317 1
a1317 1
         const int *  shipLateUB);
d1324 5
@


1.264
log
@[disallowed backlog]
@
text
@d999 5
a1067 5
      void witGetDemandDisallowBacklog (
         const char * partName,
         const char * demandName,
         WitBoolean * disallowBacklog);

d1237 5
a1268 5
      void witSetDemandDisallowBacklog (
         const char * partName,
         const char * demandName,
         WitBoolean   disallowBacklog);

@


1.263
log
@[backlog avoidance]
@
text
@a998 5
      void witGetDemandBacklogAllowed (
         const char * partName,
         const char * demandName,
         WitBoolean * backlogAllowed);

d1063 5
a1236 5
      void witSetDemandBacklogAllowed (
         const char * partName,
         const char * demandName,
         WitBoolean   backlogAllowed);

d1264 5
@


1.262
log
@[backlog avoidance]
@
text
@d999 5
d1237 5
@


1.261
log
@[backlog avoidance]
@
text
@a200 3
      void witGetBacklogAllowed (
         WitBoolean * backlogAllowed);

a358 3
      void witSetBacklogAllowed (
         WitBoolean backlogAllowed);

@


1.260
log
@witCopy<Object>Data
@
text
@d201 3
d362 3
@


1.259
log
@witCopy<Object>Data
@
text
@d1551 1
a1551 1
         const char * dupConsumingOperationName,
d1554 1
a1554 1
         const char * origConsumingOperationName,
d1763 1
a1763 1
         const char * dupConsumingOperationName,
d1767 1
a1767 1
         const char * origConsumingOperationName,
d2072 1
a2072 1
         const char * dupProducingOperationName,
d2075 1
a2075 1
         const char * origProducingOperationName,
@


1.258
log
@witCopy<Object>Data
@
text
@d2444 5
@


1.257
log
@witCopy<Object>Data
@
text
@d1762 9
@


1.256
log
@witCopy<Object>Data
@
text
@d2062 7
@


1.255
log
@witCopy<Object>Data
@
text
@d1550 7
@


1.254
log
@witCopy<Object>Data
@
text
@d70 1
a70 1
         WitRun * srcWitRun);
d606 3
a608 3
         const char * dstPartName,
         WitRun *     srcWitRun,
         const char * srcPartName);
d967 5
a971 5
         const char * dstPartName,
         const char * dstDemandName,
         WitRun *     srcWitRun,
         const char * srcPartName,
         const char * srcDemandName);
d1340 3
a1342 3
         const char * dstOperationName,
         WitRun *     srcWitRun,
         const char * srcOperationName);
d2416 1
a2416 1
      void startCopyObjData (WitRun * srcWitRun);
@


1.253
log
@witCopy<Object>Data.
@
text
@d966 7
@


1.252
log
@witCopy<Object>Data
@
text
@d606 1
a606 1
         const char * dstpartName,
d1332 5
@


1.251
log
@witCopy<Object>Data
@
text
@d2404 5
a2486 7
      void copyPartData (
            const char * dstpartName,
            WitRun *     srcWitRun,
            const char * srcPartName);
         //
         // Does the main work of witCopyPartData.

@


1.250
log
@witCopy<Object>Data
@
text
@d2482 7
@


1.249
log
@witCopy<Object>Data
@
text
@d184 1
a184 1
      void witInterpDevCmd (const char * theCmd);
d186 2
a187 2
         // Interprets the development command indicated by theCmd.
         // Severe error, if theCmd is not recognized.
@


1.248
log
@witCopy<Object>Data
@
text
@d605 5
@


1.247
log
@External opt implosion.
@
text
@d184 5
a2228 2
      void witTestFatalMesg ();

@


1.246
log
@External opt implosion.
@
text
@d128 1
a128 1
      void witSetExtOptSoln (const WitIVRealArg & soln);
@


1.245
log
@External opt implosion.
@
text
@d87 1
a87 1
      void witGetExtOptIntVars (int * * indices, int * len);
@


1.244
log
@External opt implosion.
@
text
@d132 2
@


1.243
log
@external optimzing implosion.
@
text
@d87 1
a87 1
      void witGetExtOptIntIndices (int * * intIndices, int * numIntCols);
d128 1
a128 1
      void witSetExtOptColSol (const WitIVRealArg & colsol);
@


1.242
log
@External opt implosion.
@
text
@d87 3
a89 1
      void witGetExtOptProb (
d99 1
a99 4
         const WitOVRealArg & rowub,
         int * *              intIndices,
         int *                numIntCols,
         const WitOSRealArg & objSense);
@


1.241
log
@External opt implosion.
@
text
@a482 3
      void witGetAllowIntCons (
         WitBoolean * value);

d495 3
a542 3
      void witSetAllowIntCons (
         WitBoolean allowIntCons);

d552 3
@


1.240
log
@External opt implosion.
@
text
@d483 3
a491 3
      void witGetEnforceIntCons (
         WitBoolean * value);

d543 3
a551 3
      void witSetEnforceIntCons (
         WitBoolean enforceIntCons);

@


1.239
log
@External opt implosion.
@
text
@d489 3
d549 3
@


1.238
log
@External opt implosion.
@
text
@d800 10
d1016 12
d1340 5
@


1.237
log
@External opt implosion.
@
text
@d1318 4
a1321 3
      void witGetOperationExecutable (
         const char *   operationName,
         WitBoolean * * executable);
d1326 1
a1326 1
         int *        execIndex);
d1332 4
@


1.236
log
@External opt implosion.
@
text
@a2434 5
      WitMaterial * requiredMaterial (WitPart * thePart) const;
         //
         // If the Part is a Material, returns it.
         // Otherwise issues a severe msg.

@


1.235
log
@External opt implosion.
@
text
@d759 1
a759 1
         int *        rowIndex);
d764 1
a764 1
         int *        colIndex);
d803 1
a803 1
         int *        colIndex);
d1010 1
a1010 1
         int *        colIndex);
d1098 1
a1098 1
         int *        rowIndex);
d1119 1
a1119 1
         int *        colIndex);
d1325 1
a1325 1
         int *        colIndex);
d1552 1
a1552 1
         int *        colIndex);
d1588 1
a1588 1
         int *        rowIndex);
d1842 1
a1842 1
         int *        colIndex);
@


1.234
log
@External opt implosion.
@
text
@d2391 4
@


1.233
log
@External opt implosion.
@
text
@d761 5
d800 5
d1006 6
d1094 6
d1115 6
d1322 5
d1548 6
d1584 6
d1837 7
@


1.232
log
@External opt implosion.
@
text
@d2305 1
a2305 1
      const WitString & apiFuncName () const;
d2467 1
a2467 1
      const char * levelExtNumFragID (int theExtNum) const;
d2472 1
a2472 1
      bool checkMsgExtNum (int theExtNum) const;
@


1.231
log
@External opt implosion.
@
text
@d756 5
@


1.230
log
@External opt implosion.
@
text
@d87 1
a87 1
      void witGetExtOptProblem (
d129 1
a129 1
      void witSetExtOptColSolution (const WitIVRealArg & colsol);
@


1.229
log
@External opt implosion.
@
text
@d87 1
a87 5
      void witGetMultiThread (WitBoolean * multiThread);

      void witGetObjItrState (WitAttr * objItrState);

      void witGetOptProblem (
d102 4
d129 2
@


1.228
log
@External opt implosion.
@
text
@d1027 1
a1027 1
      void witGetDemandIntConShipVols (
d1030 1
a1030 1
         WitBoolean * intConShipVols);
d1193 1
a1193 1
      void witSetDemandIntConShipVols (
d1196 1
a1196 1
         WitBoolean   intConShipVols);
d1307 1
a1307 1
      void witGetOperationIntConExecVols (
d1309 1
a1309 1
         WitBoolean * intConExecVols);
d1397 1
a1397 1
      void witSetOperationIntConExecVols (
d1399 1
a1399 1
         WitBoolean   intConExecVols);
d1713 1
a1713 1
      void witGetSubsBomEntryIntConSubVols (
d1717 1
a1717 1
         WitBoolean * intConSubVols);
d1845 1
a1845 1
      void witSetSubsBomEntryIntConSubVols (
d1849 1
a1849 1
         WitBoolean   intConSubVols);
@


1.227
log
@External opt implosion.
@
text
@d81 1
a81 1
      void witFinishAsstOpt ();
d133 1
a133 1
      void witStartAsstOpt ();
a480 3
      void witGetAsstOptActive (
         WitBoolean * asstOptActive);

d487 3
@


1.226
log
@Assisted opt implosion.
@
text
@a132 2
      void witSolveOptProblem ();

@


1.225
log
@Assisted opt implosion.
@
text
@d101 4
a104 1
         const WitOVRealArg & rowub);
@


1.224
log
@Custom opt implosion.
@
text
@d81 1
a81 1
      void witFinishCustOptImp ();
d132 1
a132 1
      void witStartCustOptImp ();
d480 3
a488 3
      void witGetCustOptImpActive (
         WitBoolean * custOptImpActive);

@


1.223
log
@App controlled opt implosion.
@
text
@d81 2
a84 2
      void witFinishOptImp ();

d132 2
a135 2
      void witStartOptImp ();

d486 3
a516 3
      void witGetOptImpActive (
         WitBoolean * optImpActive);

@


1.222
log
@App controlled opt implosion.
@
text
@d517 2
@


1.221
log
@App controlled opt implosion.
@
text
@d2136 7
a2142 2
      void forbidNullArg (
            const void * theArg, const char * argName);
d2471 4
@


1.220
log
@App controlled opt implosion.
@
text
@d91 12
d2236 8
a2243 3
         int * *               theVarPtr,
         const char *          argName,
         const WitTVec <int> & theValue);
d2246 3
a2248 3
         WitBoolean * *         theVarPtr,
         const char *           argName,
         const WitTVec <bool> & theValue);
@


1.219
log
@App controlled opt implosion.
@
text
@d118 1
a118 1
      void witSolveOptImp ();
a546 3
      void witSetOptImpActive (
         WitBoolean optImpActive);

@


1.218
log
@Heuristic search increment.
@
text
@d83 2
d118 2
d122 2
@


1.217
log
@Heuristic search increment.
@
text
@a205 3
      void witGetHeurSearchInc (
         const WitOSRealArg & heurSearchInc);

a352 3
      void witSetHeurSearchInc (
         const WitISRealArg & heurSearchInc);

d1043 5
d1200 5
@


1.216
log
@App controlled opt implosion.
@
text
@d206 3
d356 3
@


1.215
log
@App controlled opt implosion.
@
text
@a2138 3
      accessWrapper (WitDataAlt *,     noOpAlt,         myProblem ())
      accessWrapper (WitDataAlt *,     postprocAlt,     myProblem ())
      accessWrapper (WitDataAlt *,     preprocAlt,      myProblem ())
@


1.214
log
@App controlled opt implosion.
@
text
@d541 3
@


1.213
log
@NSTN residualVol.
@
text
@d74 2
@


1.212
log
@NSTN residualVols.
@
text
@d219 3
d366 3
@


1.211
log
@App controlled opt implosion.
@
text
@d234 3
d378 3
@


1.210
log
@App controlled opt implosion.
@
text
@a20 1
#include <StateTags.h>
a2232 5
      void startInnerApiFunc (WitInitState::Tag, WitOptImpState::Tag);
         //
         // Takes action appropriate at the beginning of the execution of an
         // inner API function with required states indicated by the arguments.

@


1.209
log
@App controlled opt implosion.
@
text
@d21 1
d2234 5
@


1.208
log
@App controlled opt implode.
@
text
@d482 3
@


1.207
log
@Integrality constraints.
@
text
@a76 2
#ifdef OPT_IMPLODE

a78 2
#endif

a94 2
#ifdef OPT_IMPLODE

a98 2
#endif

@


1.206
log
@Removed optimizing implosion with lot sizes.
@
text
@d997 1
a997 1
      void witGetDemandIntShipVols (
d1000 1
a1000 1
         WitBoolean * intShipVols);
d1158 1
a1158 1
      void witSetDemandIntShipVols (
d1161 1
a1161 1
         WitBoolean   intShipVols);
d1267 1
a1267 1
      void witGetOperationIntExecVols (
d1269 1
a1269 1
         WitBoolean * intExecVols);
d1357 1
a1357 1
      void witSetOperationIntExecVols (
d1359 1
a1359 1
         WitBoolean   intExecVols);
d1673 1
a1673 1
      void witGetSubsBomEntryIntSubVols (
d1677 1
a1677 1
         WitBoolean * intSubVols);
d1805 1
a1805 1
      void witSetSubsBomEntryIntSubVols (
d1809 1
a1809 1
         WitBoolean   intSubVols);
@


1.205
log
@Opt implosion with integrality constraints.
@
text
@a492 3
      void witGetOptWithLotSizes (
         WitBoolean * value);

a534 3
      void witSetOptWithLotSizes (
         WitBoolean optWithLotSizes);

@


1.204
log
@ExecVol pegging for BOP entries.
@
text
@d1003 5
d1164 5
d1273 4
d1363 4
d1679 6
d1811 6
@


1.203
log
@BOP entry execVol pegging.
@
text
@d934 1
a934 1
      void witGetDemandCoexVolPip (
@


1.202
log
@GPIP migration.
@
text
@d934 10
d986 1
a986 1
         const WitOVRealArg & peggedExecVolList);
d1086 1
a1086 1
         const WitOVRealArg & peggedSubVolList);
@


1.201
log
@GPIP migration
@
text
@a1909 5
      void witGetBopEntryPipShare (
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOVRealArg & pipShare);

a1974 5
      void witSetBopEntryPipShare (
         const char *         producingOperationName,
         int                  bopEntryIndex,
         const WitIVRealArg & pipShare);

@


1.200
log
@Removed the postSolveRecovery attribute.
@
text
@a205 3
      void witGetGroupPipMode (
         WitBoolean * groupPipMode);

a349 3
      void witSetGroupPipMode (
         WitBoolean groupPipMode);

@


1.199
log
@New PIP pegging order.
@
text
@a504 3
      void witGetPostSolveRecovery (
         WitBoolean * value);

a549 3
      void witSetPostSolveRecovery (
         WitBoolean postSolveRecovery);

@


1.198
log
@Updated the copyright date on all source files.
@
text
@d239 3
d383 3
@


1.197
log
@Removed access to the oslMesgFileName attribute.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.196
log
@Continued the effort to make the apparent infinite loop in witExhaustMemory
invisible to the compiler, in order to prevent the compiler from issuing a
warning about it.
@
text
@a489 3
      void witGetOslMesgFileName (
         char * * oslMesgFileName);

a537 3
      void witSetOslMesgFileName (
         const char * oslMesgFileName);

@


1.195
log
@Minor update.
@
text
@a2272 7
      bool alwaysTrue ();
         //
         // Always returns true.
         // This is used by witExhaustMemory () to prevent a compiler from
         // issuing a warning message about the function's apparent infinite
         // loop.

d2289 8
@


1.194
log
@Made the apparent infinite loop in witExhaustMemory invisible to the compiler,
in order to prevent a compiler warning about it.
@
text
@d2276 3
a2278 3
         // This is used by witExhaustMemory () to prevent an optimizing
         // compiler from issuing a warning message about the function's
         // infinite loop.
@


1.193
log
@GPIP
@
text
@d2273 7
@


1.192
log
@[shared-resource pegging]
@
text
@d206 3
a295 3
      void witGetSrpMode (
         WitBoolean * srpMode);

d350 3
a412 3
      void witSetSrpMode (
         WitBoolean srpMode);

@


1.191
log
@[shared-resource pegging]
@
text
@a20 1
#include <PipPartAtt.h>
d2348 1
a2348 4
         const char *         partName,
         const char *         demandName,
         int                  shipPeriod,
         WitPipPartAtt::Tag   theAttTag,
@


1.190
log
@[shared-resource pegging]
@
text
@d2097 1
a2097 1
      static void apiVoidAlloc (void * *, WitSiz, size_t);
d2429 1
a2429 1
         void apiAlloc (Elem * * theCVecPtr, WitSiz nElems);
d2435 1
a2435 1
   void apiAlloc (const WitOVRealArg & theOVRealArg, WitSiz nElems);
@


1.189
log
@Began [shared-resource pegging]
@
text
@d2097 1
a2097 1
      static void apiVoidAlloc (void * *, size_t, size_t);
a2160 5
         int *        theVarPtr,
         const char * argName,
         size_t       theValue);

      void apiGet (
d2429 1
a2429 1
         void apiAlloc (Elem * * theCVecPtr, size_t nElems);
d2435 1
a2435 1
   void apiAlloc (const WitOVRealArg & theOVRealArg, size_t nElems);
@


1.188
log
@[error recovery]
@
text
@d294 3
d411 3
@


1.187
log
@[error recovery]
@
text
@a168 2
      void witSetErrorRecovery ();

@


1.186
log
@[multi-thread]
@
text
@d169 2
@


1.185
log
@Updated WIT's exception throwing capability.
@
text
@d119 1
a119 1
      void witSetMultiThread ();
@


1.184
log
@[multi-thread]
@
text
@d2051 1
a2051 1
      void witSetMesgThrowException (
d2054 1
a2054 1
         WitBoolean mesgThrowException);
d2056 1
a2056 1
      void witGetMesgThrowException (
d2058 1
a2058 1
         WitBoolean * mesgThrowException);
@


1.183
log
@Removed code supporting the variable-argument-list API functions.
@
text
@d164 5
@


1.182
log
@[multi-thread]
@
text
@a22 2
#include <stdarg.h>

a565 5
      void witAddPartVa (
         const char * partName,
         WitAttr      partCategory,
         va_list      ap);

a893 5
      void witAddDemandVa (
         const char * partName,
         const char * demandName,
         va_list      ap);

a1388 5
      void witAddBomEntryVa (
         const char * consumingOperationName,
         const char * consumedPartName,
         va_list      ap);

a1581 6
      void witAddSubsBomEntryVa (
         const char * consumingOperationName,
         int          bomEntryIndex,
         const char * consumedPartName,
         va_list      ap);

@


1.181
log
@[multi-thread]
@
text
@d160 6
@


1.180
log
@[multi-thread]
@
text
@d2247 1
a2247 1
      static void newErrorForCtor ();
d2249 1
a2249 3
         // This function will be called when "new" is unable to satisfy a
         // request for more storage during construction of a WitRun.
         // It is used as the argument to set_new_handler.
@


1.179
log
@[multi-thread]
@
text
@d2440 7
a2446 1
{
d2448 4
a2451 14
template <typename Elem> 
      void apiAlloc (Elem * * theCVecPtr, size_t nElems);
   //
   // Allocates * theCVecPtr to nElems elements.
   // Uses malloc, so the * theCVecPtr can be passed back to the application
   // program.

void apiAlloc (const WitOVRealArg & theOVRealArg, size_t nElems);
   //
   // Same as the above.

};
   //
   // Leaving namespace NonClass.
@


1.178
log
@[multi-thread]
@
text
@d75 2
d158 2
@


1.177
log
@modified to compile on cygwin
@
text
@a18 3
// Needed for va_list
#include <stdarg.h>

d23 2
@


1.176
log
@[multi-thread]
@
text
@d19 3
@


1.175
log
@[multi-threads]
@
text
@d86 2
d117 2
@


1.174
log
@[multi-thread]:
   Moved PROLOG/EPILOG responsibility from the inner layer of the API
   to the outer layer.
@
text
@a2442 1
// Leaving namespace NonClass.
d2444 2
@


1.173
log
@[multi-thread]
@
text
@d64 1
a64 1
      WitReturnCode witAdvanceObjItr ();
d66 1
a66 1
      WitReturnCode witBuildPip ();
d68 1
a68 1
      WitReturnCode witClearPegging ();
d70 1
a70 1
      WitReturnCode witCopyData (
d73 1
a73 3
      WitReturnCode witDeleteRun ();

      WitReturnCode witDisplayData (
d78 1
a78 1
      WitReturnCode witEvalObjectives ();
d82 1
a82 1
      WitReturnCode witFinishHeurAlloc ();
d84 1
a84 1
      WitReturnCode witGeneratePriorities ();
d86 1
a86 1
      WitReturnCode witGetObjItrState (WitAttr * objItrState);
d88 1
a88 1
      WitReturnCode witHeurImplode ();
d90 1
a90 1
      WitReturnCode witInitialize ();
d92 1
a92 1
      WitReturnCode witMrp ();
d94 1
a94 1
      WitReturnCode witNewRun ();
d98 1
a98 1
      WitReturnCode witOptImplode ();
d100 1
a100 1
      WitReturnCode witOptPreprocess ();
d104 1
a104 1
      WitReturnCode witPostprocess ();
d106 1
a106 1
      WitReturnCode witPreprocess ();
d108 1
a108 1
      WitReturnCode witPurgeData ();
d110 1
a110 1
      WitReturnCode witReadData (
d113 1
a113 1
      WitReturnCode witResetObjItr ();
d115 1
a115 1
      WitReturnCode witShutDownHeurAlloc ();
d117 1
a117 1
      WitReturnCode witStartHeurAlloc ();
d119 1
a119 1
      WitReturnCode witWriteCriticalList (
d124 1
a124 1
      WitReturnCode witWriteData (
d127 1
a127 1
      WitReturnCode witWriteExecSched (
d131 1
a131 1
      WitReturnCode witWriteProdSched (
d135 1
a135 1
      WitReturnCode witWriteReqSched (
d139 1
a139 1
      WitReturnCode witWriteShipSched (
d143 1
a143 1
      WitReturnCode witNoDependantWitRunVeneersIsOne (
d146 1
a146 1
      WitReturnCode witNoDependantWitRunVeneersDecr  ();
d148 1
a148 1
      WitReturnCode witNoDependantWitRunVeneersIncr  ();
d154 1
a154 1
      WitReturnCode witClearPipSeq ();
d156 1
a156 1
      WitReturnCode witGetAppData (
d159 1
a159 1
      WitReturnCode witGetAutoPriority (
d162 1
a162 1
      WitReturnCode witGetBuildWhenEmpty (
d165 1
a165 1
      WitReturnCode witGetComputeCriticalList (
d168 1
a168 1
      WitReturnCode witGetCriticalList (
d173 1
a173 1
      WitReturnCode witGetEquitability (
d176 1
a176 1
      WitReturnCode witGetExecEmptyBom (
d179 1
a179 1
      WitReturnCode witGetExpCutoff (
d182 1
a182 1
      WitReturnCode witGetFeasible (
d185 1
a185 1
      WitReturnCode witGetForcedMultiEq (
d188 1
a188 1
      WitReturnCode witGetHashTableSize (
d191 1
a191 1
      WitReturnCode witGetHeurAllocActive (
d194 1
a194 1
      WitReturnCode witGetHighPrecisionWD (
d197 1
a197 1
      WitReturnCode witGetIndependentOffsets (
d200 1
a200 1
      WitReturnCode witGetLocalBuildAhead (
d203 1
a203 1
      WitReturnCode witGetLocalMultiExec (
d206 1
a206 1
      WitReturnCode witGetLotSizeTol (
d209 1
a209 1
      WitReturnCode witGetMultiExec (
d212 1
a212 1
      WitReturnCode witGetMultiRoute (
d215 1
a215 1
      WitReturnCode witGetNPeriods (
d218 1
a218 1
      WitReturnCode witGetNonMrSelSplit (
d221 1
a221 1
      WitReturnCode witGetOutputPrecision (
d224 1
a224 1
      WitReturnCode witGetPenExec (
d227 1
a227 1
      WitReturnCode witGetPerfPegging (
d230 1
a230 1
      WitReturnCode witGetPgdCritList (
d238 1
a238 1
      WitReturnCode witGetPgdCritListMode (
d241 1
a241 1
      WitReturnCode witGetPipExists (
d244 1
a244 1
      WitReturnCode witGetPipSeq (
d251 1
a251 1
      WitReturnCode witGetPipSeqFromHeur (
d254 1
a254 1
      WitReturnCode witGetPostprocessed (
d257 1
a257 1
      WitReturnCode witGetPrefHighStockSLBs (
d260 1
a260 1
      WitReturnCode witGetPreprocessed (
d263 1
a263 1
      WitReturnCode witGetRespectStockSLBs (
d266 1
a266 1
      WitReturnCode witGetRoundReqVols (
d269 1
a269 1
      WitReturnCode witGetSelSplit (
d272 1
a272 1
      WitReturnCode witGetSkipFailures (
d275 1
a275 1
      WitReturnCode witGetStockRealloc (
d278 1
a278 1
      WitReturnCode witGetStockReallocation (
d281 1
a281 1
      WitReturnCode witGetSrSelSplit (
d284 1
a284 1
      WitReturnCode witGetTieBreakPropRt (
d287 1
a287 1
      WitReturnCode witGetTitle (
d290 1
a290 1
      WitReturnCode witGetTruncOffsets (
d293 1
a293 1
      WitReturnCode witGetTwoWayMultiExec (
d296 1
a296 1
      WitReturnCode witGetUseFocusHorizons (
d299 1
a299 1
      WitReturnCode witGetUserHeurStart (
d302 1
a302 1
      WitReturnCode witGetWit34Compatible (
d305 1
a305 1
      WitReturnCode witSetAppData (
d308 1
a308 1
      WitReturnCode witSetAutoPriority (
d311 1
a311 1
      WitReturnCode witSetBuildWhenEmpty (
d314 1
a314 1
      WitReturnCode witSetComputeCriticalList (
d317 1
a317 1
      WitReturnCode witSetEquitability (
d320 1
a320 1
      WitReturnCode witSetExecEmptyBom (
d323 1
a323 1
      WitReturnCode witSetExpCutoff (
d326 1
a326 1
      WitReturnCode witSetForcedMultiEq (
d329 1
a329 1
      WitReturnCode witSetHashTableSize (
d332 1
a332 1
      WitReturnCode witSetHighPrecisionWD (
d335 1
a335 1
      WitReturnCode witSetIndependentOffsets (
d338 1
a338 1
      WitReturnCode witSetLocalBuildAhead (
d341 1
a341 1
      WitReturnCode witSetLocalMultiExec (
d344 1
a344 1
      WitReturnCode witSetLotSizeTol (
d347 1
a347 1
      WitReturnCode witSetMultiExec (
d350 1
a350 1
      WitReturnCode witSetMultiRoute (
d353 1
a353 1
      WitReturnCode witSetNPeriods (
d356 1
a356 1
      WitReturnCode witSetNonMrSelSplit (
d359 1
a359 1
      WitReturnCode witSetOutputPrecision (
d362 1
a362 1
      WitReturnCode witSetPenExec (
d365 1
a365 1
      WitReturnCode witSetPerfPegging (
d368 1
a368 1
      WitReturnCode witSetPgdCritListMode (
d371 1
a371 1
      WitReturnCode witSetPipSeqFromHeur (
d374 1
a374 1
      WitReturnCode witSetPrefHighStockSLBs (
d377 1
a377 1
      WitReturnCode witSetRespectStockSLBs (
d380 1
a380 1
      WitReturnCode witSetRoundReqVols (
d383 1
a383 1
      WitReturnCode witSetSelSplit (
d386 1
a386 1
      WitReturnCode witSetSkipFailures (
d389 1
a389 1
      WitReturnCode witSetStockRealloc (
d392 1
a392 1
      WitReturnCode witSetStockReallocation (
d395 1
a395 1
      WitReturnCode witSetSrSelSplit (
d398 1
a398 1
      WitReturnCode witSetTieBreakPropRt (
d401 1
a401 1
      WitReturnCode witSetTitle (
d404 1
a404 1
      WitReturnCode witSetTruncOffsets (
d407 1
a407 1
      WitReturnCode witSetTwoWayMultiExec (
d410 1
a410 1
      WitReturnCode witSetUseFocusHorizons (
d413 1
a413 1
      WitReturnCode witSetUserHeurStart (
d416 1
a416 1
      WitReturnCode witSetWit34Compatible (
d423 1
a423 1
      WitReturnCode witGetAccAfterOptImp (
d426 1
a426 1
      WitReturnCode witGetAccAfterSoftLB (
d429 1
a429 1
      WitReturnCode witGetAccelerated (
d432 1
a432 1
      WitReturnCode witGetCapCost (
d435 1
a435 1
      WitReturnCode witGetCompPrices (
d438 1
a438 1
      WitReturnCode witGetInvCost (
d441 1
a441 1
      WitReturnCode witGetObj2Values (
d447 1
a447 1
      WitReturnCode witGetObj2Winv (
d450 1
a450 1
      WitReturnCode witGetObj2Wrev (
d453 1
a453 1
      WitReturnCode witGetObj2Wserv (
d456 1
a456 1
      WitReturnCode witGetObj2Wsub (
d459 1
a459 1
      WitReturnCode witGetObjChoice (
d462 1
a462 1
      WitReturnCode witGetObjValues (
d466 1
a466 1
      WitReturnCode witGetOslMesgFileName (
d469 1
a469 1
      WitReturnCode witGetOptInitMethod (
d472 1
a472 1
      WitReturnCode witGetOptWithLotSizes (
d475 1
a475 1
      WitReturnCode witGetPeriodsPerYear (
d478 1
a478 1
      WitReturnCode witGetPostSolveRecovery (
d481 1
a481 1
      WitReturnCode witGetSolverLogFileName (
d484 1
a484 1
      WitReturnCode witGetWbounds (
d487 1
a487 1
      WitReturnCode witSetAccAfterOptImp (
d490 1
a490 1
      WitReturnCode witSetAccAfterSoftLB (
d493 1
a493 1
      WitReturnCode witSetCapCost (
d496 1
a496 1
      WitReturnCode witSetCompPrices (
d499 1
a499 1
      WitReturnCode witSetInvCost (
d502 1
a502 1
      WitReturnCode witSetObj2Winv (
d505 1
a505 1
      WitReturnCode witSetObj2Wrev (
d508 1
a508 1
      WitReturnCode witSetObj2Wserv (
d511 1
a511 1
      WitReturnCode witSetObj2Wsub (
d514 1
a514 1
      WitReturnCode witSetObjChoice (
d517 1
a517 1
      WitReturnCode witSetOslMesgFileName (
d520 1
a520 1
      WitReturnCode witSetOptInitMethod (
d523 1
a523 1
      WitReturnCode witSetOptWithLotSizes (
d526 1
a526 1
      WitReturnCode witSetPeriodsPerYear (
d529 1
a529 1
      WitReturnCode witSetPostSolveRecovery (
d532 1
a532 1
      WitReturnCode witSetSolverLogFileName (
d535 1
a535 1
      WitReturnCode witSetWbounds (
d549 1
a549 1
      WitReturnCode witAddPart (
d552 1
a552 1
      WitReturnCode witAddPartVa (
d557 1
a557 1
      WitReturnCode witAddPartWithOperation (
d560 1
a560 1
      WitReturnCode witGetFocusShortageVol (
d565 1
a565 1
      WitReturnCode witGetObjItrPart (
d568 1
a568 1
      WitReturnCode witGetPartAppData (
d572 1
a572 1
      WitReturnCode witGetPartBaSelSplit (
d576 1
a576 1
      WitReturnCode witGetPartBelowList (
d581 1
a581 1
      WitReturnCode witGetPartBuildAheadUB (
d585 1
a585 1
      WitReturnCode witGetPartBuildAheadLimit (
d589 1
a589 1
      WitReturnCode witGetPartBuildAsap (
d593 1
a593 1
      WitReturnCode witGetPartBuildNstn (
d597 1
a597 1
      WitReturnCode witGetPartCategory (
d601 1
a601 1
      WitReturnCode witGetPartConsVol (
d605 1
a605 1
      WitReturnCode witGetPartConsumingBomEntry (
d611 1
a611 1
      WitReturnCode witGetPartConsumingSubsBomEntry (
d618 1
a618 1
      WitReturnCode witGetPartCycleTime (
d622 1
a622 1
      WitReturnCode witGetPartDemands (
d627 1
a627 1
      WitReturnCode witGetPartExcessVol (
d631 1
a631 1
      WitReturnCode witGetPartExists (
d635 1
a635 1
      WitReturnCode witGetPartFocusShortageVol (
d639 1
a639 1
      WitReturnCode witGetPartIncLotSize (
d643 1
a643 1
      WitReturnCode witGetPartMinLotSize (
d647 1
a647 1
      WitReturnCode witGetPartMrpConsVol (
d651 1
a651 1
      WitReturnCode witGetPartMrpExcessVol (
d655 1
a655 1
      WitReturnCode witGetPartMrpProdVol (
d659 1
a659 1
      WitReturnCode witGetPartMrpResidualVol (
d663 1
a663 1
      WitReturnCode witGetPartNBomEntries (
d667 1
a667 1
      WitReturnCode witGetPartNConsumingBomEntries (
d671 1
a671 1
      WitReturnCode witGetPartNConsumingSubsBomEntries (
d675 1
a675 1
      WitReturnCode witGetPartNProducingBopEntries (
d679 1
a679 1
      WitReturnCode witGetPartObj1ProdCost (
d683 1
a683 1
      WitReturnCode witGetPartObj1ScrapCost (
d687 1
a687 1
      WitReturnCode witGetPartObj1StockCost (
d691 1
a691 1
      WitReturnCode witGetPartProdBounds (
d697 1
a697 1
      WitReturnCode witGetPartProdVol (
d701 1
a701 1
      WitReturnCode witGetPartProducingBopEntry (
d707 1
a707 1
      WitReturnCode witGetPartPropRouting (
d711 1
a711 1
      WitReturnCode witGetPartPropRtg (
d715 1
a715 1
      WitReturnCode witGetPartReqVol (
d719 1
a719 1
      WitReturnCode witGetPartResidualVol (
d723 1
a723 1
      WitReturnCode witGetParts (
d727 1
a727 1
      WitReturnCode witGetPartScrapCost (
d731 1
a731 1
      WitReturnCode witGetPartScrapVol  (
d735 1
a735 1
      WitReturnCode witGetPartSelForDel (
d739 1
a739 1
      WitReturnCode witGetPartShadowPrice  (
d743 1
a743 1
      WitReturnCode witGetPartSingleSource (
d747 1
a747 1
      WitReturnCode witGetPartStockBounds (
d753 1
a753 1
      WitReturnCode witGetPartStockCost (
d757 1
a757 1
      WitReturnCode witGetPartStockVol  (
d761 1
a761 1
      WitReturnCode witGetPartSupplyVol (
d765 1
a765 1
      WitReturnCode witGetPartUnitCost (
d769 1
a769 1
      WitReturnCode witGetPartYield (
d773 1
a773 1
      WitReturnCode witSetPartAppData (
d777 1
a777 1
      WitReturnCode witSetPartBaSelSplit (
d781 1
a781 1
      WitReturnCode witSetPartBuildAheadUB (
d785 1
a785 1
      WitReturnCode witSetPartBuildAheadLimit (
d789 1
a789 1
      WitReturnCode witSetPartBuildAsap (
d793 1
a793 1
      WitReturnCode witSetPartBuildNstn (
d797 1
a797 1
      WitReturnCode witSetPartCycleTime (
d801 1
a801 1
      WitReturnCode witSetPartIncLotSize (
d805 1
a805 1
      WitReturnCode witSetPartMinLotSize (
d809 1
a809 1
      WitReturnCode witSetPartObj1ProdCost (
d813 1
a813 1
      WitReturnCode witSetPartObj1ScrapCost (
d817 1
a817 1
      WitReturnCode witSetPartObj1StockCost (
d821 1
a821 1
      WitReturnCode witSetPartProdBounds (
d827 1
a827 1
      WitReturnCode witSetPartProdVol (
d831 1
a831 1
      WitReturnCode witSetPartPropRouting (
d835 1
a835 1
      WitReturnCode witSetPartPropRtg (
d839 1
a839 1
      WitReturnCode witSetPartScrapCost (
d843 1
a843 1
      WitReturnCode witSetPartSelForDel (
d847 1
a847 1
      WitReturnCode witSetPartSingleSource (
d851 1
a851 1
      WitReturnCode witSetPartStockBounds (
d857 1
a857 1
      WitReturnCode witSetPartStockCost (
d861 1
a861 1
      WitReturnCode witSetPartSupplyVol (
d865 1
a865 1
      WitReturnCode witSetPartUnitCost (
d869 1
a869 1
      WitReturnCode witSetPartYield (
d881 1
a881 1
      WitReturnCode witAddDemand (
d885 1
a885 1
      WitReturnCode witAddDemandVa (
d890 1
a890 1
      WitReturnCode witAppendToPipSeq (
d896 1
a896 1
      WitReturnCode witEqHeurAlloc (
d904 1
a904 1
      WitReturnCode witEqHeurAllocTwme (
d913 1
a913 1
      WitReturnCode witGetObjItrDemand (
d917 1
a917 1
      WitReturnCode witGetDemandAppData (
d922 1
a922 1
      WitReturnCode witGetDemandBuildAheadUB (
d927 1
a927 1
      WitReturnCode witGetDemandBuildAheadLimit (
d932 1
a932 1
      WitReturnCode witGetDemandConsVolPip (
d941 1
a941 1
      WitReturnCode witGetDemandCumShipBounds (
d948 1
a948 1
      WitReturnCode witGetDemandCumShipReward (
d953 1
a953 1
      WitReturnCode witGetDemandDemandVol (
d958 1
a958 1
      WitReturnCode witGetDemandExecVolPegging (
d967 1
a967 1
      WitReturnCode witGetDemandExecVolPip (
d976 1
a976 1
      WitReturnCode witGetDemandFocusHorizon (
d981 1
a981 1
      WitReturnCode witGetDemandFssShipVol (
d986 1
a986 1
      WitReturnCode witGetDemandGrossRev (
d991 1
a991 1
      WitReturnCode witGetDemandObj1CumShipReward (
d996 1
a996 1
      WitReturnCode witGetDemandObj1ShipReward (
d1001 1
a1001 1
      WitReturnCode witGetDemandPrefBuildAhead (
d1006 1
a1006 1
      WitReturnCode witGetDemandPriority (
d1011 1
a1011 1
      WitReturnCode witGetDemandProdVolPip (
d1020 1
a1020 1
      WitReturnCode witGetDemandSelForDel (
d1025 1
a1025 1
      WitReturnCode witGetDemandShipLateUB (
d1030 1
a1030 1
      WitReturnCode witGetDemandShipLateLimit (
d1035 1
a1035 1
      WitReturnCode witGetDemandShipReward (
d1040 1
a1040 1
      WitReturnCode witGetDemandShipVol  (
d1045 1
a1045 1
      WitReturnCode witGetDemandSideVolPip (
d1054 1
a1054 1
      WitReturnCode witGetDemandSubVolPegging (
d1065 1
a1065 1
      WitReturnCode witGetDemandSubVolPip (
d1076 1
a1076 1
      WitReturnCode witGetDemandSupplyVolPip (
d1085 1
a1085 1
      WitReturnCode witIncHeurAlloc (
d1092 1
a1092 1
      WitReturnCode witIncHeurAllocTwme (
d1100 1
a1100 1
      WitReturnCode witSetDemandAppData (
d1105 1
a1105 1
      WitReturnCode witSetDemandBuildAheadUB (
d1110 1
a1110 1
      WitReturnCode witSetDemandBuildAheadLimit (
d1115 1
a1115 1
      WitReturnCode witSetDemandCumShipBounds (
d1122 1
a1122 1
      WitReturnCode witSetDemandCumShipReward (
d1127 1
a1127 1
      WitReturnCode witSetDemandDemandVol (
d1132 1
a1132 1
      WitReturnCode witSetDemandFocusHorizon (
d1137 1
a1137 1
      WitReturnCode witSetDemandFssShipVol (
d1142 1
a1142 1
      WitReturnCode witSetDemandGrossRev (
d1147 1
a1147 1
      WitReturnCode witSetDemandObj1CumShipReward (
d1152 1
a1152 1
      WitReturnCode witSetDemandObj1ShipReward (
d1157 1
a1157 1
      WitReturnCode witSetDemandPrefBuildAhead (
d1162 1
a1162 1
      WitReturnCode witSetDemandPriority (
d1167 1
a1167 1
      WitReturnCode witSetDemandSelForDel (
d1172 1
a1172 1
      WitReturnCode witSetDemandShipLateUB (
d1177 1
a1177 1
      WitReturnCode witSetDemandShipLateLimit (
d1182 1
a1182 1
      WitReturnCode witSetDemandShipReward (
d1187 1
a1187 1
      WitReturnCode witSetDemandShipVol (
d1199 1
a1199 1
      WitReturnCode witAddOperation (
d1202 1
a1202 1
      WitReturnCode witGetObjItrOperation (
d1205 1
a1205 1
      WitReturnCode witGetOperationAppData (
d1209 1
a1209 1
      WitReturnCode witGetOperationCycleTime34 (
d1213 1
a1213 1
      WitReturnCode witGetOperationExecBounds (
d1219 1
a1219 1
      WitReturnCode witGetOperationExecCost (
d1223 1
a1223 1
      WitReturnCode witGetOperationExecPenalty (
d1227 1
a1227 1
      WitReturnCode witGetOperationExecutable (
d1231 1
a1231 1
      WitReturnCode witGetOperationExecVol (
d1235 1
a1235 1
      WitReturnCode witGetOperationExists (
d1239 1
a1239 1
      WitReturnCode witGetOperationFssExecVol (
d1243 1
a1243 1
      WitReturnCode witGetOperationIncLotSize (
d1247 1
a1247 1
      WitReturnCode witGetOperationIncLotSize2 (
d1251 1
a1251 1
      WitReturnCode witGetOperationLotSize2Thresh (
d1255 1
a1255 1
      WitReturnCode witGetOperationMinLotSize (
d1259 1
a1259 1
      WitReturnCode witGetOperationMinLotSize2 (
d1263 1
a1263 1
      WitReturnCode witGetOperationMrpExecVol (
d1267 1
a1267 1
      WitReturnCode witGetOperationNBomEntries (
d1271 1
a1271 1
      WitReturnCode witGetOperationNBopEntries (
d1275 1
a1275 1
      WitReturnCode witGetOperationObj1ExecCost (
d1279 1
a1279 1
      WitReturnCode witGetOperationObj2AuxCost (
d1283 1
a1283 1
      WitReturnCode witGetOperations (
d1287 1
a1287 1
      WitReturnCode witGetOperationSelForDel (
d1291 1
a1291 1
      WitReturnCode witGetOperationTwoLevelLotSizes (
d1295 1
a1295 1
      WitReturnCode witGetOperationYield (
d1299 1
a1299 1
      WitReturnCode witGetOperationYieldRate (
d1303 1
a1303 1
      WitReturnCode witSetOperationAppData (
d1307 1
a1307 1
      WitReturnCode witSetOperationCycleTime34 (
d1311 1
a1311 1
      WitReturnCode witSetOperationExecBounds (
d1317 1
a1317 1
      WitReturnCode witSetOperationExecCost (
d1321 1
a1321 1
      WitReturnCode witSetOperationExecPenalty (
d1325 1
a1325 1
      WitReturnCode witSetOperationExecVol (
d1329 1
a1329 1
      WitReturnCode witSetOperationIncLotSize (
d1333 1
a1333 1
      WitReturnCode witSetOperationIncLotSize2 (
d1337 1
a1337 1
      WitReturnCode witSetOperationLotSize2Thresh (
d1341 1
a1341 1
      WitReturnCode witSetOperationMinLotSize (
d1345 1
a1345 1
      WitReturnCode witSetOperationMinLotSize2 (
d1349 1
a1349 1
      WitReturnCode witSetOperationObj1ExecCost (
d1353 1
a1353 1
      WitReturnCode witSetOperationObj2AuxCost (
d1357 1
a1357 1
      WitReturnCode witSetOperationSelForDel (
d1361 1
a1361 1
      WitReturnCode witSetOperationTwoLevelLotSizes (
d1365 1
a1365 1
      WitReturnCode witSetOperationYield (
d1369 1
a1369 1
      WitReturnCode witSetOperationYieldRate (
d1381 1
a1381 1
      WitReturnCode witAddBomEntry (
d1385 1
a1385 1
      WitReturnCode witAddBomEntryVa (
d1390 1
a1390 1
      WitReturnCode witGetObjItrBomEntry (
d1394 1
a1394 1
      WitReturnCode witGetBomEntryAppData (
d1399 1
a1399 1
      WitReturnCode witGetBomEntryConsRate (
d1404 1
a1404 1
      WitReturnCode witGetBomEntryConsumedPart (
d1409 1
a1409 1
      WitReturnCode witGetBomEntryEarliestPeriod (
d1414 1
a1414 1
      WitReturnCode witGetBomEntryExecPenalty (
d1419 1
a1419 1
      WitReturnCode witGetBomEntryFallout (
d1424 1
a1424 1
      WitReturnCode witGetBomEntryFalloutRate (
d1429 1
a1429 1
      WitReturnCode witGetBomEntryImpactPeriod (
d1434 1
a1434 1
      WitReturnCode witGetBomEntryLatestPeriod (
d1439 1
a1439 1
      WitReturnCode witGetBomEntryMandEC (
d1444 1
a1444 1
      WitReturnCode witGetBomEntryNSubsBomEntries (
d1449 1
a1449 1
      WitReturnCode witGetBomEntryOffset (
d1454 1
a1454 1
      WitReturnCode witGetBomEntryPropRouting (
d1459 1
a1459 1
      WitReturnCode witGetBomEntryPropRtg (
d1464 1
a1464 1
      WitReturnCode witGetBomEntryRoutingShare (
d1469 1
a1469 1
      WitReturnCode witGetBomEntrySelForDel (
d1474 1
a1474 1
      WitReturnCode witGetBomEntrySingleSource (
d1479 1
a1479 1
      WitReturnCode witGetBomEntryUsageRate (
d1484 1
a1484 1
      WitReturnCode witGetBomEntryUsageTime (
d1489 1
a1489 1
      WitReturnCode witSetBomEntryAppData (
d1494 1
a1494 1
      WitReturnCode witSetBomEntryConsRate (
d1499 1
a1499 1
      WitReturnCode witSetBomEntryEarliestPeriod (
d1504 1
a1504 1
      WitReturnCode witSetBomEntryExecPenalty (
d1509 1
a1509 1
      WitReturnCode witSetBomEntryFallout (
d1514 1
a1514 1
      WitReturnCode witSetBomEntryFalloutRate (
d1519 1
a1519 1
      WitReturnCode witSetBomEntryLatestPeriod (
d1524 1
a1524 1
      WitReturnCode witSetBomEntryMandEC (
d1529 1
a1529 1
      WitReturnCode witSetBomEntryOffset (
d1534 1
a1534 1
      WitReturnCode witSetBomEntryPropRouting (
d1539 1
a1539 1
      WitReturnCode witSetBomEntryPropRtg (
d1544 1
a1544 1
      WitReturnCode witSetBomEntryRoutingShare (
d1549 1
a1549 1
      WitReturnCode witSetBomEntrySelForDel (
d1554 1
a1554 1
      WitReturnCode witSetBomEntrySingleSource (
d1559 1
a1559 1
      WitReturnCode witSetBomEntryUsageRate (
d1564 1
a1564 1
      WitReturnCode witSetBomEntryUsageTime (
d1578 1
a1578 1
      WitReturnCode witAddSubsBomEntry (
d1583 1
a1583 1
      WitReturnCode witAddSubsBomEntryVa (
d1589 1
a1589 1
      WitReturnCode witGetObjItrSubsBomEntry (
d1594 1
a1594 1
      WitReturnCode witGetSubsBomEntryAppData (
d1600 1
a1600 1
      WitReturnCode witGetSubsBomEntryConsRate (
d1606 1
a1606 1
      WitReturnCode witGetSubsBomEntryConsumedPart (
d1612 1
a1612 1
      WitReturnCode witGetSubsBomEntryEarliestPeriod (
d1618 1
a1618 1
      WitReturnCode witGetSubsBomEntryExecPenalty (
d1624 1
a1624 1
      WitReturnCode witGetSubsBomEntryExpAllowed (
d1630 1
a1630 1
      WitReturnCode witGetSubsBomEntryExpNetAversion (
d1636 1
a1636 1
      WitReturnCode witGetSubsBomEntryFallout (
d1642 1
a1642 1
      WitReturnCode witGetSubsBomEntryFalloutRate (
d1648 1
a1648 1
      WitReturnCode witGetSubsBomEntryFssSubVol (
d1654 1
a1654 1
      WitReturnCode witGetSubsBomEntryImpactPeriod (
d1660 1
a1660 1
      WitReturnCode witGetSubsBomEntryLatestPeriod (
d1666 1
a1666 1
      WitReturnCode witGetSubsBomEntryMrpNetAllowed (
d1672 1
a1672 1
      WitReturnCode witGetSubsBomEntryMrpSubVol (
d1678 1
a1678 1
      WitReturnCode witGetSubsBomEntryNetAllowed (
d1684 1
a1684 1
      WitReturnCode witGetSubsBomEntryObj1SubCost (
d1690 1
a1690 1
      WitReturnCode witGetSubsBomEntryObj2SubPenalty (
d1696 1
a1696 1
      WitReturnCode witGetSubsBomEntryOffset (
d1702 1
a1702 1
      WitReturnCode witGetSubsBomEntryProdVol (
d1708 1
a1708 1
      WitReturnCode witGetSubsBomEntryRoutingShare (
d1714 1
a1714 1
      WitReturnCode witGetSubsBomEntrySelForDel (
d1720 1
a1720 1
      WitReturnCode witGetSubsBomEntrySubCost (
d1726 1
a1726 1
      WitReturnCode witGetSubsBomEntrySubVol (
d1732 1
a1732 1
      WitReturnCode witGetSubsBomEntryUsageRate (
d1738 1
a1738 1
      WitReturnCode witSetSubsBomEntryAppData (
d1744 1
a1744 1
      WitReturnCode witSetSubsBomEntryConsRate (
d1750 1
a1750 1
      WitReturnCode witSetSubsBomEntryEarliestPeriod (
d1756 1
a1756 1
      WitReturnCode witSetSubsBomEntryExecPenalty (
d1762 1
a1762 1
      WitReturnCode witSetSubsBomEntryExpAllowed (
d1768 1
a1768 1
      WitReturnCode witSetSubsBomEntryExpNetAversion (
d1774 1
a1774 1
      WitReturnCode witSetSubsBomEntryFallout (
d1780 1
a1780 1
      WitReturnCode witSetSubsBomEntryFalloutRate (
d1786 1
a1786 1
      WitReturnCode witSetSubsBomEntryLatestPeriod (
d1792 1
a1792 1
      WitReturnCode witSetSubsBomEntryMrpNetAllowed (
d1798 1
a1798 1
      WitReturnCode witSetSubsBomEntryNetAllowed (
d1804 1
a1804 1
      WitReturnCode witSetSubsBomEntryObj1SubCost (
d1810 1
a1810 1
      WitReturnCode witSetSubsBomEntryObj2SubPenalty (
d1816 1
a1816 1
      WitReturnCode witSetSubsBomEntryOffset (
d1822 1
a1822 1
      WitReturnCode witSetSubsBomEntryProdVol (
d1828 1
a1828 1
      WitReturnCode witSetSubsBomEntryRoutingShare (
d1834 1
a1834 1
      WitReturnCode witSetSubsBomEntrySelForDel (
d1840 1
a1840 1
      WitReturnCode witSetSubsBomEntrySubCost (
d1846 1
a1846 1
      WitReturnCode witSetSubsBomEntrySubVol (
d1852 1
a1852 1
      WitReturnCode witSetSubsBomEntryUsageRate (
d1866 1
a1866 1
      WitReturnCode witAddBopEntry (
d1870 1
a1870 1
      WitReturnCode witGetObjItrBopEntry (
d1874 1
a1874 1
      WitReturnCode witGetBopEntryAppData (
d1879 1
a1879 1
      WitReturnCode witGetBopEntryByProduct (
d1884 1
a1884 1
      WitReturnCode witGetBopEntryEarliestPeriod (
d1889 1
a1889 1
      WitReturnCode witGetBopEntryExpAllowed (
d1894 1
a1894 1
      WitReturnCode witGetBopEntryExpAversion (
d1899 1
a1899 1
      WitReturnCode witGetBopEntryImpactPeriod (
d1904 1
a1904 1
      WitReturnCode witGetBopEntryLatestPeriod (
d1909 1
a1909 1
      WitReturnCode witGetBopEntryMeSelSplit (
d1914 1
a1914 1
      WitReturnCode witGetBopEntryOffset (
d1919 1
a1919 1
      WitReturnCode witGetBopEntryPipShare (
d1924 1
a1924 1
      WitReturnCode witGetBopEntryProdRate (
d1929 1
a1929 1
      WitReturnCode witGetBopEntryProductRate (
d1934 1
a1934 1
      WitReturnCode witGetBopEntryProducedPart (
d1939 1
a1939 1
      WitReturnCode witGetBopEntryRoutingShare (
d1944 1
a1944 1
      WitReturnCode witGetBopEntrySelForDel (
d1949 1
a1949 1
      WitReturnCode witSetBopEntryAppData (
d1954 1
a1954 1
      WitReturnCode witSetBopEntryByProduct (
d1959 1
a1959 1
      WitReturnCode witSetBopEntryEarliestPeriod (
d1964 1
a1964 1
      WitReturnCode witSetBopEntryExpAllowed (
d1969 1
a1969 1
      WitReturnCode witSetBopEntryExpAversion (
d1974 1
a1974 1
      WitReturnCode witSetBopEntryLatestPeriod (
d1979 1
a1979 1
      WitReturnCode witSetBopEntryMeSelSplit (
d1984 1
a1984 1
      WitReturnCode witSetBopEntryOffset (
d1989 1
a1989 1
      WitReturnCode witSetBopEntryPipShare (
d1994 1
a1994 1
      WitReturnCode witSetBopEntryProdRate (
d1999 1
a1999 1
      WitReturnCode witSetBopEntryProductRate (
d2004 1
a2004 1
      WitReturnCode witSetBopEntryRoutingShare (
d2009 1
a2009 1
      WitReturnCode witSetBopEntrySelForDel (
d2018 1
a2018 1
      WitReturnCode witGetMesgFile (
d2021 1
a2021 1
      WitReturnCode witSetMesgFileAccessMode (
d2025 1
a2025 1
      WitReturnCode witGetMesgFileAccessMode (
d2028 1
a2028 1
      WitReturnCode witSetMesgFileName (
d2032 1
a2032 1
      WitReturnCode witGetMesgFileName (
d2035 1
a2035 1
      WitReturnCode witSetMesgPrintNumber (
d2040 1
a2040 1
      WitReturnCode witGetMesgPrintNumber (
d2044 1
a2044 1
      WitReturnCode witSetMesgStopRunning (
d2049 1
a2049 1
      WitReturnCode witGetMesgStopRunning (
d2053 1
a2053 1
      WitReturnCode witSetMesgThrowException (
d2058 1
a2058 1
      WitReturnCode witGetMesgThrowException (
d2062 1
a2062 1
      WitReturnCode witSetMesgTimesPrint (
d2067 1
a2067 1
      WitReturnCode witGetMesgTimesPrint (
d2071 1
a2071 1
      WitReturnCode witTestFatalMesg ();
d2073 1
a2073 1
      WitReturnCode witListUnissuedMsgs ();
a2083 11
      void reqNoActApiCalls ();
         //
         // If this function is called when some API function
         // has been called for this WitRun and has not yet returned,
         // an error message is printed and the program is terminated.
         // This function is intended to be called from each outer API function
         // just prior to calling the corresponding inner API function.
         // If the error condition occurs, it indicates that there are two
         // concurrent API function calls to the same WitRun in a
         // multiply-threaded environment.

@


1.172
log
@[multi-threads]
@
text
@d2086 1
a2086 1
      WitRun * reqNoActApiCalls ();
d2088 8
a2095 6
         // If this function is called when there are currently no API functions
         // that have been called for this WitRun that have not yet returned,
         // this function simply returns this WitRun.
         // Otherwise an error message is printed and the program is terminated.
         // If the latter case occurs, it is presumably caused by an
         // application program running in a multiply-threaded environment.
@


1.171
log
@[exceptions]
@
text
@d61 1
a61 1
      // Other public member functions implemented in WitRun.C.
a63 21
      static WitRun * newInstance ();
         //
         // Constructs (on the heap) and returns a new WitRun.
         // To be used instead of the WitRun ctor, which is private.

      WitReturnCode witNoDependantWitRunVeneersIsOne (
         int * isOne);

      WitReturnCode witNoDependantWitRunVeneersDecr  ();

      WitReturnCode witNoDependantWitRunVeneersIncr  ();

      void forbidNullArg (
            const void * theArg, const char * argName);
         //
         // theArg:  A pointer that was passed to WIT as an argument to an
         //          API function.
         // argName: The name of the argument
         // If theArg is NULL, this function issues a severe error
         // identifying argName.

d145 6
a150 3
      static void apiVoidAlloc (void * *, size_t, size_t);
         //
         // Called by NonClass::apiAlloc.
d153 1
a153 1
      // Public member functions implemented in globApi.C.
d422 1
a422 1
      // Public member functions implemented in optApi.C.
d541 1
a541 1
      // Public member functions implemented in partApi.C.
d876 1
a876 1
      // Public member functions implemented in demApi.C.
d1195 1
a1195 1
      // Public member functions implemented in opnApi.C.
d1376 1
a1376 1
      // Public member functions implemented in bomApi.C.
d1572 1
a1572 1
      // Public member functions implemented in subApi.C.
d1861 1
a1861 1
      // Public member functions implemented in bopApi.C.
d2017 1
a2017 1
      // Public member functions implemented in msgApi.C.
d2078 31
@


1.170
log
@[exceptions]
@
text
@d23 1
a23 1
class WitInputId;
d2115 1
a2115 1
      WitInputId * myInputId () const;
@


1.169
log
@[exceptions]
@
text
@a110 3
      WitReturnCode witGetThrowExcOnError (
         WitBoolean * throwExcOnError);

a137 4
      WitReturnCode witSetThrowExcOnError (
         WitBoolean quiet,
         WitBoolean throwExcOnError);

d2073 9
@


1.168
log
@[exceptions]
@
text
@d111 3
d141 1
a141 1
      WitReturnCode witSetThrowOnErrors (
d143 1
a143 1
         WitBoolean throwOnErrors);
@


1.167
log
@Changed names of obj1 attributes, e.g., obj1ScrapCost to scrapCost.
@
text
@a54 4
      // Public member functions implemented in WitRun.C.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
d138 4
@


1.166
log
@Made opt implosion use COIN unconditionally when COIN_BUILD is defined.
@
text
@d751 4
d777 4
d863 4
d881 4
d972 5
d1059 5
d1146 5
d1173 1
a1173 1
         const char * demandName,
d1206 5
d1243 4
d1341 4
d1744 6
d1864 6
@


1.165
log
@Allowed obj1 attributes to be set and retrieved when objChoice != 1.
Allowed objChoice to be set when parts or operations exist.
@
text
@a504 3
      WitReturnCode witGetSolverIsCoin (
         WitBoolean * value);

a555 3
      WitReturnCode witSetSolverIsCoin (
         WitBoolean solverIsCoin);

@


1.164
log
@Vector PropRtg.
@
text
@a2164 5
      void apiGetObj1Vector (
         const WitOVRealArg &  theArg,
         const char *          argName,
         const WitDblFlexVec & theValue);

@


1.163
log
@Vector PropRt.
@
text
@d741 1
a741 1
      WitReturnCode witGetPartPropRt (
d743 1
a743 1
         WitBoolean * * propRt);
d857 1
a857 1
      WitReturnCode witSetPartPropRt (
d859 1
a859 1
         const WitBoolean * propRt);
d1445 1
a1445 1
      WitReturnCode witGetBomEntryPropRt (
d1448 1
a1448 1
         WitBoolean * * propRt);
d1525 1
a1525 1
      WitReturnCode witSetBomEntryPropRt (
d1528 1
a1528 1
         const WitBoolean * propRt);
@


1.162
log
@Vector PropRt.
@
text
@d1445 5
d1525 5
@


1.161
log
@Vector propRt.
@
text
@d204 1
a204 1
         const WitOutScalRA & expCutoff);
d231 1
a231 1
         const WitOutScalRA & lotSizeTol);
d269 5
a273 5
         int *               lenLists,
         char * * *          partNameList,
         char * * *          demandNameList,
         int * *             shipPerList,
         const WitOutVecRA & incShipVolList);
d348 1
a348 1
         const WitInScalRA & expCutoff);
d369 1
a369 1
         const WitInScalRA & lotSizeTol);
d457 1
a457 1
         const WitOutScalRA & capCost);
d463 1
a463 1
         const WitOutScalRA & invCost);
d466 4
a469 4
         const WitOutScalRA & revValue,
         const WitOutScalRA & invValue,
         const WitOutScalRA & servValue,
         const WitOutScalRA & subsValue);
d472 1
a472 1
         const WitOutScalRA & obj2Winv);
d475 1
a475 1
         const WitOutScalRA & obj2Wrev);
d478 1
a478 1
         const WitOutScalRA & obj2Wserv);
d481 1
a481 1
         const WitOutScalRA & obj2Wsub);
d487 2
a488 2
         const WitOutScalRA & objValue,
         const WitOutScalRA & boundsValue);
d500 1
a500 1
        const WitOutScalRA & periodsPerYear);
d512 1
a512 1
         const WitOutScalRA & wbounds);
d521 1
a521 1
         const WitInScalRA & capCost);
d527 1
a527 1
         const WitInScalRA & invCost);
d530 1
a530 1
         const WitInScalRA & obj2Winv);
d533 1
a533 1
         const WitInScalRA & obj2Wrev);
d536 1
a536 1
         const WitInScalRA & obj2Wserv);
d539 1
a539 1
         const WitInScalRA & obj2Wsub);
d554 1
a554 1
         const WitInScalRA & periodsPerYear);
d566 1
a566 1
         const WitInScalRA & wbounds);
d591 3
a593 3
         int   *             lenList,
         char  * * *         partList,
         const WitOut2DARA & shortageVolList);
d632 2
a633 2
         const char *        partName,
         const WitOutVecRA & consVol);
d649 2
a650 2
         const char *        partName,
         const WitOutVecRA & cycleTime);
d658 2
a659 2
         const char *        partName,
         const WitOutVecRA & excessVol);
d666 2
a667 2
         const char *        partName,
         const WitOutVecRA & shortageVol);
d670 2
a671 2
         const char *        partName,
         const WitOutVecRA & incLotSize);
d674 2
a675 2
         const char *        partName,
         const WitOutVecRA & minLotSize);
d678 2
a679 2
         const char *        partName,
         const WitOutVecRA & mrpConsVol);
d682 2
a683 2
         const char *        partName,
         const WitOutVecRA & mrpExcessVol);
d686 2
a687 2
         const char *        partName,
         const WitOutVecRA & mrpProdVol);
d690 2
a691 2
         const char *        partName,
         const WitOutVecRA & mrpResidualVol);
d710 2
a711 2
         const char *        partName,
         const WitOutVecRA & obj1ProdCost);
d714 2
a715 2
         const char *        partName,
         const WitOutVecRA & obj1ScrapCost);
d718 2
a719 2
         const char *        partName,
         const WitOutVecRA & obj1StockCost);
d722 4
a725 4
         const char *        partName,
         const WitOutVecRA & hardLower,
         const WitOutVecRA & softLower,
         const WitOutVecRA & hardUpper);
d728 2
a729 2
         const char *        partName,
         const WitOutVecRA & prodVol);
d746 2
a747 2
         const char *        partName,
         const WitOutVecRA & reqVol);
d750 2
a751 2
         const char *        partName,
         const WitOutVecRA & residualVol);
d758 2
a759 2
         const char *        partName,
         const WitOutVecRA & scrapVol);
d766 2
a767 2
         const char *        partName,
         const WitOutVecRA & shadowPrice);
d774 4
a777 4
         const char *        partName,
         const WitOutVecRA & hardLower,
         const WitOutVecRA & softLower,
         const WitOutVecRA & hardUpper);
d780 2
a781 2
         const char *        partName,
         const WitOutVecRA & stockVol);
d784 2
a785 2
         const char *        partName,
         const WitOutVecRA & supplyVol);
d788 2
a789 2
         const char * partName,
         const WitOutScalRA & unitCost);
d820 2
a821 2
         const char *       partName,
         const WitInVecRA & cycleTime);
d824 2
a825 2
         const char *       partName,
         const WitInVecRA & incLotSize);
d828 2
a829 2
         const char *       partName,
         const WitInVecRA & minLotSize);
d832 2
a833 2
         const char *       partName,
         const WitInVecRA & obj1ProdCost);
d836 2
a837 2
         const char *       partName,
         const WitInVecRA & obj1ScrapCost);
d840 2
a841 2
         const char *       partName,
         const WitInVecRA & obj1StockCost);
d844 4
a847 4
         const char *       partName,
         const WitInVecRA & hardLower,
         const WitInVecRA & softLower,
         const WitInVecRA & hardUpper);
d850 2
a851 2
         const char *       partName,
         const WitInVecRA & prodVol);
d870 4
a873 4
         const char *       partName,
         const WitInVecRA & hardLower,
         const WitInVecRA & softLower,
         const WitInVecRA & hardUpper);
d876 2
a877 2
         const char *       partName,
         const WitInVecRA & supplyVol);
d880 2
a881 2
         const char *        partName,
         const WitInScalRA & unitCost);
d905 4
a908 4
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         const WitInScalRA & incShipVol);
d915 2
a916 2
         const WitInVecRA &   desIncVolList,
         const WitOutVecRA &  incVolList);
d923 2
a924 2
         const WitInVecRA &   desIncVolList,
         const WitOutVecRA &  incVolList,
d947 7
a953 7
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         int *               lenLists,
         char * * *          partNameList,
         int * *             periodList,
         const WitOutVecRA & peggedVolList);
d956 5
a960 5
         const char *        partNameParm,
         const char *        demandNameParm,
         const WitOutVecRA & hardlbP,
         const WitOutVecRA & softlbP,
         const WitOutVecRA & hardubP);
d963 3
a965 3
         const char *        partName,
         const char *        demandName,
         const WitOutVecRA & demandVol);
d968 7
a974 7
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         int *               lenLists,
         char * * *          operationNameList,
         int * *             execPeriodList,
         const WitOutVecRA & peggedExecVolList);
d977 7
a983 7
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         int *               lenLists,
         char * * *          operationNameList,
         int * *             execPeriodList,
         const WitOutVecRA & peggedExecVolList);
d991 3
a993 3
         const char *        partName,
         const char *        demandName,
         const WitOutVecRA & fssShipVol);
d998 1
a998 1
         const WitOutScalRA & grossRev);
d1001 3
a1003 3
         const char *        partNameParm,
         const char *        demandNameParm,
         const WitOutVecRA & obj1CumShipReward);
d1006 3
a1008 3
         const char *        partNameParm,
         const char *        demandNameParm,
         const WitOutVecRA & obj1ShipReward);
d1021 7
a1027 7
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         int *               lenLists,
         char * * *          partNameList,
         int * *             periodList,
         const WitOutVecRA & peggedVolList);
d1045 3
a1047 3
         const char *        partName,
         const char *        demandName,
         const WitOutVecRA & shipVol);
d1050 7
a1056 7
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         int *               lenLists,
         char * * *          partNameList,
         int * *             periodList,
         const WitOutVecRA & peggedVolList);
d1059 9
a1067 9
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         int *               lenLists,
         char * * *          operationNameList,
         int * *             bomEntryIndexList,
         int * *             subsBomEntryIndexList,
         int * *             execPeriodList,
         const WitOutVecRA & peggedSubVolList);
d1070 9
a1078 9
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         int *               lenLists,
         char * * *          operationNameList,
         int * *             bomEntryIndexList,
         int * *             subsBomEntryIndexList,
         int * *             execPeriodList,
         const WitOutVecRA & peggedSubVolList);
d1081 7
a1087 7
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         int *               lenLists,
         char * * *          partNameList,
         int * *             periodList,
         const WitOutVecRA & peggedVolList);
d1093 2
a1094 2
         const WitInScalRA &  desIncVol,
         const WitOutScalRA & incVol);
d1100 2
a1101 2
         const WitInScalRA &  desIncVol,
         const WitOutScalRA & incVol,
d1120 5
a1124 5
         const char *       partName,
         const char *       demandName,
         const WitInVecRA & hardLower,
         const WitInVecRA & softLower,
         const WitInVecRA & hardUpper);
d1127 3
a1129 3
         const char *       partName,
         const char *       demandName,
         const WitInVecRA & demandVol);
d1137 3
a1139 3
         const char *       partName,
         const char *       demandName,
         const WitInVecRA & fssShipVol);
d1142 3
a1144 3
         const char *        partName,
         const char *        demandName,
         const WitInScalRA & grossRev);
d1147 3
a1149 3
         const char *       partName,
         const char *       demandName,
         const WitInVecRA & obj1CumShipReward);
d1152 3
a1154 3
         const char *       partName,
         const char *       demandName,
         const WitInVecRA & obj1ShipReward);
d1182 3
a1184 3
         const char *       partName,
         const char *       demandName,
         const WitInVecRA & shipVol);
d1204 2
a1205 2
         const char *        operationName,
         const WitOutVecRA & cycleTime34);
d1208 4
a1211 4
         const char *        operationName,
         const WitOutVecRA & hardLower,
         const WitOutVecRA & softLower,
         const WitOutVecRA & hardUpper);
d1215 1
a1215 1
         const WitOutScalRA & execPenalty);
d1222 2
a1223 2
         const char *        operationName,
         const WitOutVecRA & execVol);
d1230 2
a1231 2
         const char *        operationName,
         const WitOutVecRA & fssExecVol);
d1234 2
a1235 2
         const char *        operationName,
         const WitOutVecRA & incLotSize);
d1238 2
a1239 2
         const char *        operationName,
         const WitOutVecRA & incLotSize2);
d1242 2
a1243 2
         const char *        operationName,
         const WitOutVecRA & lotSize2Thresh);
d1246 2
a1247 2
         const char *        operationName,
         const WitOutVecRA & minLotSize);
d1250 2
a1251 2
         const char *        operationName,
         const WitOutVecRA & minLotSize2);
d1254 2
a1255 2
         const char *        operationName,
         const WitOutVecRA & mrpExecVol);
d1266 2
a1267 2
         const char *        operationName,
         const WitOutVecRA & obj1ExecCost);
d1271 1
a1271 1
         const WitOutScalRA & obj2AuxCost);
d1290 2
a1291 2
         const char *        operationName,
         const WitOutVecRA & yield);
d1298 2
a1299 2
         const char *       operationName,
         const WitInVecRA & cycleTime34);
d1302 4
a1305 4
         const char *       operationName,
         const WitInVecRA & hardLower,
         const WitInVecRA & softLower,
         const WitInVecRA & hardUpper);
d1308 2
a1309 2
         const char *        operationName,
         const WitInScalRA & execPenalty);
d1312 2
a1313 2
         const char *       operationName,
         const WitInVecRA & execVol);
d1316 2
a1317 2
         const char *       operationName,
         const WitInVecRA & incLotSize);
d1320 2
a1321 2
         const char *       operationName,
         const WitInVecRA & incLotSize2);
d1324 2
a1325 2
         const char *       operationName,
         const WitInVecRA & lotSize2Thresh);
d1328 2
a1329 2
         const char *       operationName,
         const WitInVecRA & minLotSize);
d1332 2
a1333 2
         const char *       operationName,
         const WitInVecRA & minLotSize2);
d1336 2
a1337 2
         const char *       operationName,
         const WitInVecRA & obj1ExecCost);
d1340 2
a1341 2
         const char *        operationName,
         const WitInScalRA & obj2AuxCost);
d1356 2
a1357 2
         const char *       operationName,
         const WitInVecRA & yieldRate);
d1386 3
a1388 3
         const char *        partName,
         int                 bomEntryIndex,
         const WitOutVecRA & consRate);
d1403 1
a1403 1
         const WitOutScalRA & execPenalty);
d1413 1
a1413 1
         const WitOutScalRA & falloutRate);
d1436 3
a1438 3
         const char *        partName,
         int                 bomEntryIndex,
         const WitOutVecRA & offset);
d1446 3
a1448 3
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         const WitOutVecRA & routingShare);
d1463 1
a1463 1
         const WitOutScalRA & usageRate);
d1468 1
a1468 1
         const WitOutScalRA & usageTime);
d1476 3
a1478 3
         const char *       operationName,
         int                bomEntryIndex,
         const WitInVecRA & consRate);
d1486 3
a1488 3
         const char *        operationName,
         int                 bomEntryIndex,
         const WitInScalRA & execPenalty);
d1496 3
a1498 3
         const char *        operationName,
         int                 bomEntryIndex,
         const WitInScalRA & falloutRate);
d1511 3
a1513 3
         const char *       operationName,
         int                bomEntryIndex,
         const WitInVecRA & offset);
d1521 3
a1523 3
         const char *       operationName,
         int                bomEntryIndex,
         const WitInVecRA & routingShare);
d1536 3
a1538 3
         const char *        operationName,
         int                 bomEntryIndex,
         const WitInScalRA & usageRate);
d1541 3
a1543 3
         const char *        operationName,
         int                 bomEntryIndex,
         const WitInScalRA & time);
d1577 4
a1580 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitOutVecRA & consRate);
d1598 1
a1598 1
         const WitOutScalRA & execPenalty);
d1610 1
a1610 1
         const WitOutScalRA & expNetAversion);
d1622 1
a1622 1
         const WitOutScalRA & falloutRate);
d1625 4
a1628 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitOutVecRA & fssSubVol);
d1649 4
a1652 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitOutVecRA & mrpSubVol);
d1661 4
a1664 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitOutVecRA & obj1SubCost);
d1670 1
a1670 1
         const WitOutScalRA & obj2SubPenalty);
d1673 4
a1676 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitOutVecRA & offset);
d1679 4
a1682 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitOutVecRA & prodVol);
d1685 4
a1688 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitOutVecRA & routingShare);
d1697 4
a1700 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitOutVecRA & subVol);
d1706 1
a1706 1
         const WitOutScalRA & usageRate);
d1715 4
a1718 4
         const char *       consumingOperationName,
         int                bomEntryIndex,
         int                subsBomEntryIndex,
         const WitInVecRA & consRate);
d1727 4
a1730 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitInScalRA & execPenalty);
d1739 4
a1742 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitInScalRA & expNetAversion);
d1751 4
a1754 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitInScalRA & falloutRate);
d1775 4
a1778 4
         const char *       consumingOperationName,
         int                bomEntryIndex,
         int                subsBomEntryIndex,
         const WitInVecRA & obj1SubCost);
d1781 4
a1784 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitInScalRA & obj2SubPenalty);
d1787 4
a1790 4
         const char *       consumingOperationName,
         int                bomEntryIndex,
         int                subsBomEntryIndex,
         const WitInVecRA & offset);
d1793 4
a1796 4
         const char *       consumingOperationName,
         int                bomEntryIndex,
         int                subsBomEntryIndex,
         const WitInVecRA & prodVol);
d1799 4
a1802 4
         const char *       consumingOperationName,
         int                bomEntryIndex,
         int                subsBomEntryIndex,
         const WitInVecRA & routingShare);
d1811 4
a1814 4
         const char *       consumingOperationName,
         int                bomEntryIndex,
         int                subsBomEntryIndex,
         const WitInVecRA & subVol);
d1817 4
a1820 4
         const char *        consumingOperationName,
         int                 bomEntryIndex,
         int                 subsBomEntryIndex,
         const WitInScalRA & usageRate);
d1861 1
a1861 1
         const WitOutScalRA & expAversion);
d1879 3
a1881 3
         const char *        producingOperationName,
         int                 bomEntryIndex,
         const WitOutVecRA & offset);
d1884 3
a1886 3
         const char *        producingOperationName,
         int                 bomEntryIndex,
         const WitOutVecRA & pipShare);
d1891 1
a1891 1
         const WitOutScalRA & prodRate);
d1894 3
a1896 3
         const char *        producingOperationName,
         int                 bomEntryIndex,
         const WitOutVecRA & productRate);
d1904 3
a1906 3
         const char *        producingOperationName,
         int                 bomEntryIndex,
         const WitOutVecRA & routingShare);
d1934 3
a1936 3
         const char *        producingOperationName,
         int                 bopEntryIndex,
         const WitInScalRA & expAversion);
d1949 3
a1951 3
         const char *       producingOperationName,
         int                bopEntryIndex,
         const WitInVecRA & offset);
d1954 3
a1956 3
         const char *       producingOperationName,
         int                bopEntryIndex,
         const WitInVecRA & pipShare);
d1959 3
a1961 3
         const char *        producingOperationName,
         int                 bopEntryIndex,
         const WitInScalRA & prodRate);
d1964 3
a1966 3
         const char *       producingOperationName,
         int                bopEntryIndex,
         const WitInVecRA & productRate);
d1969 3
a1971 3
         const char *       producingOperationName,
         int                bopEntryIndex,
         const WitInVecRA & routingShare);
d2100 1
a2100 1
         const WitOutScalRA & theArg,
d2135 1
a2135 1
         const WitOutVecRA &   theArg,
d2150 4
a2153 4
         const WitOutVecRA & hardLBVec,
         const WitOutVecRA & softLBVec,
         const WitOutVecRA & hardUBVec,
         const WitBoundSet * theValue);
d2156 1
a2156 1
         const WitOutVecRA &   theArg,
d2223 1
a2223 1
      void issueGetAttrMsg (WitAttr, const WitOutScalRA &) const;
d2265 2
a2266 2
         const WitInVecRA &   desIncVolList,
         const WitOutVecRA &  incVolList,
d2273 2
a2274 2
         const WitInScalRA &  desIncVol,
         const WitOutScalRA & incVol,
d2290 8
a2297 8
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         WitPipPartAtt::Tag  theAttTag,
         int *               lenLists,
         char * * *          partNameList,
         int * *             periodList,
         const WitOutVecRA & peggedVolList);
d2377 1
a2377 1
void apiAlloc (const WitOutVecRA & theOutVecRA, size_t nElems);
@


1.160
log
@Pegged Critical List.
@
text
@d741 4
d857 4
@


1.159
log
@Pegged Critical List.
@
text
@a2176 6
      char * dupCstring (const WitString & theString) const;
         //
         // Allocates and returns a char * copy of theString.
         // Uses malloc, so the returned value can be passed to the application
         // program.

@


1.158
log
@Pegged Critical List.
@
text
@d256 2
d260 1
a260 3
         int * *    shipPerList,
         char * * * critPartNameList,
         int * *    critPerList);
@


1.157
log
@Pegged Critical List.
@
text
@d254 8
@


1.156
log
@Pegged Critical List
@
text
@d254 2
a255 2
      WitReturnCode witGetPgdCritListNeeded (
         WitBoolean * pgdCritListNeeded);
d384 2
a385 2
      WitReturnCode witSetPgdCritListNeeded (
         WitBoolean pgdCritListNeeded);
@


1.155
log
@Pegged Critical List.
@
text
@a188 3
      WitReturnCode witGetCompPgdCritList (
         WitBoolean * compPgdCritList);

d254 3
a329 3
      WitReturnCode witSetCompPgdCritList (
         WitBoolean compPgdCritList);

d384 3
@


1.154
log
@Tie Breaking Prop-Rt.
@
text
@d189 3
d330 3
d334 1
a334 1
         WitBoolean computCriticalList);
@


1.153
log
@Changed terminology from "low priority proportionate routing" to
"tie breaking proportionate routing".
@
text
@d2277 1
a2277 1
         WitPip::PartAtt     thePartAtt,
@


1.152
log
@Continued implmentation of low priority proportionate routing.
@
text
@a232 3
      WitReturnCode witGetLowPriPropRt (
         WitBoolean * lowPriPropRt);

d297 3
a359 3
      WitReturnCode witSetLowPriPropRt (
         WitBoolean lowPriPropRt);

d408 3
@


1.151
log
@Began work on [propRouting as penExec tie-breaker].
@
text
@d233 3
a253 3
      WitReturnCode witGetPenExecOverPropRt (
         WitBoolean * penExecOverPropRt);

d360 3
a380 3
      WitReturnCode witSetPenExecOverPropRt (
         WitBoolean penExecOverPropRt);

@


1.150
log
@Initial work on [vector propRouting attribute].
@
text
@d251 3
d378 3
@


1.149
log
@Added "solverIsCoin" attribute.
@
text
@d2112 5
@


1.148
log
@More work on handling severe and fatal errors.
@
text
@d485 3
d538 3
@


1.147
log
@Added:
   WitFATAL_RC
   witTestFatalMesg
@
text
@d98 2
d120 2
@


1.146
log
@PIP.
@
text
@d1988 2
@


1.145
log
@Continued implementation of PIP.
@
text
@d1846 3
a1848 3
         const char *         producingOperationName,
         int                  bomEntryIndex,
         const WitOutScalRA & pipShare);
d1916 3
a1918 3
         const char *        producingOperationName,
         int                 bopEntryIndex,
         const WitInScalRA & pipShare);
@


1.144
log
@Double Precision.
@
text
@d1845 5
d1914 5
@


1.143
log
@Double Precision.
@
text
@a2049 5
         float *      theVarPtr,
         const char * argName,
         double       theValue);

      void apiGet (
a2074 5
         float * *               theVarPtr,
         const char *            argName,
         const WitTVec <float> & theValue);

      void apiGet (
a2084 5
         float * *             theVarPtr,
         const char *          argName,
         const WitDblFlexVec & theValue);

      void apiGet (
a2094 6
         float * *           hardLBPtr,
         float * *           softLBPtr,
         float * *           hardUBPtr,
         const WitBoundSet * theValue);

      void apiGet (
a2100 5
         float * *             theVarPtr,
         const char *          argName,
         const WitDblFlexVec & theValue);

      void apiGetObj1Vector (
a2173 4
      void issueGetAttrMsg (WitAttr, const float *) const;
         //
         // Same as above, but for a float attribute.

d2176 1
a2176 1
         // Same as above, but for a float attribute.
@


1.142
log
@Double Precision.
@
text
@d214 2
a215 2
      WitReturnCode witGetPipSeqFromHeur (
         WitBoolean * pipSeqFromHeur);
d260 3
d338 2
a339 2
      WitReturnCode witSetPipSeqFromHeur (
         WitBoolean pipSeqFromHeur);
d373 3
@


1.141
log
@Double Precision.
@
text
@d613 2
a614 2
         const char * partName,
         float * *    cycleTime);
d634 2
a635 2
         const char * partName,
         float * *    incLotSize);
d638 2
a639 2
         const char * partName,
         float * *    minLotSize);
d650 2
a651 2
         const char * partName,
         float * *    mrpProdVol);
d674 2
a675 2
         const char * partName,
         float * *    obj1ProdCost);
d686 4
a689 4
         const char * partName,
         float * *    hardLower,
         float * *    softLower,
         float * *    hardUpper);
d780 2
a781 2
         const char *  partName,
         const float * cycleTime);
d784 2
a785 2
         const char *  partName,
         const float * incLotSize);
d788 2
a789 2
         const char *  partName,
         const float * minLotSize);
d792 2
a793 2
         const char *  partName,
         const float * obj1ProdCost);
d804 4
a807 4
         const char *  partName,
         const float * hardLower,
         const float * softLower,
         const float * hardUpper);
d810 2
a811 2
         const char *  partName,
         const float * prodVol);
d1160 2
a1161 2
         const char * operationName,
         float * *    cycleTime34);
d1254 2
a1255 2
         const char *  operationName,
         const float * cycleTime34);
d1635 4
a1638 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float * *    prodVol);
d1749 4
a1752 4
         const char *  consumingOperationName,
         int           bomEntryIndex,
         int           subsBomEntryIndex,
         const float * prodVol);
@


1.140
log
@Double Precision.
@
text
@d1417 3
a1419 3
         const char * partName,
         int          bomEntryIndex,
         float *      usageRate);
d1422 3
a1424 3
         const char * partName,
         int          bomEntryIndex,
         float *      usageTime);
d1492 3
a1494 3
         const char * operationName,
         int          bomEntryIndex,
         float        usageRate);
d1497 3
a1499 3
         const char * operationName,
         int          bomEntryIndex,
         float        time);
d1659 4
a1662 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float *      usageRate);
d1773 4
a1776 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float        usageRate);
d1840 3
a1842 3
         const char * producingOperationName,
         int          bomEntryIndex,
         float *      prodRate);
d1905 3
a1907 3
         const char * producingOperationName,
         int          bopEntryIndex,
         float        prodRate);
a2290 4

      WitReturnCode witGetBomEntryUsageTime34 (const char *, int, float *);

      WitReturnCode witSetBomEntryUsageTime34 (const char *, int, float);
@


1.139
log
@Double Precision.
@
text
@d555 3
a557 8
         int   *     lenList,
         char  * * * partList,
         float * * * shortageVolList);

      WitReturnCode witGetFocusShortageVolDbl (
         int    *     lenList,
         char   * * * partList,
         double * * * shortageVolList);
a2226 9
      void getFSSTypeInd (
            int *      lenList,
            char * * * partList,
            void *     shortageVolList);
         //
         // Does those tasks of witGetFocusShortageVol and 
         // witGetFocusShortageVolDbl that do not depend on the type of
         // shortageVolList.

a2358 11

template <typename Elem> 
      void getFSSTypeDep (
         WitRun *   theWitRun,
         int  *     lenList,
         Elem * * * shortageVolList);
   //
   // Does those tasks of WitRun::witGetFocusShortageVol and
   // WitRun::witGetFocusShortageVolDbl that depend on the type of
   // shortageVolList.
   // Implemented in partApi.C.
@


1.138
log
@Double Precision.
@
text
@d2232 8
a2239 4
      void getFSS (int * lenList, char * * * partList);
         //
         // Does those portions of witGetFocusShortageVol that are independent
         // of float vs. double.
d2373 11
@


1.137
log
@Double Precision.
@
text
@d559 5
d2231 5
@


1.136
log
@Double Precision.
@
text
@d903 7
a909 7
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   partNameList,
         int * *      periodList,
         float * *    peggedVolList);
d933 7
a939 7
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   operationNameList,
         int * *      execPeriodList,
         float * *    peggedExecVolList);
d977 7
a983 7
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   partNameList,
         int * *      periodList,
         float * *    peggedVolList);
d1006 7
a1012 7
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   partNameList,
         int * *      periodList,
         float * *    peggedVolList);
d1026 9
a1034 9
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   operationNameList,
         int * *      bomEntryIndexList,
         int * *      subsBomEntryIndexList,
         int * *      execPeriodList,
         float * *    peggedSubVolList);
d1037 7
a1043 7
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   partNameList,
         int * *      periodList,
         float * *    peggedVolList);
d2265 8
a2272 8
         const char *    partName,
         const char *    demandName,
         int             shipPeriod,
         WitPip::PartAtt thePartAtt,
         int *           lenLists,
         char * * *      partNameList,
         int * *         periodList,
         float * *       peggedVolList);
@


1.135
log
@Double Precision.
@
text
@d166 1
a166 1
      static void apiVoidAlloc (void * & theCVec, size_t nElems, size_t elSize);
d2350 1
a2350 1
      void apiAlloc (Elem * & theCVec, size_t nElems);
d2352 7
a2358 2
   // Allocates theCVec to nElems elements.
   // Uses malloc, so the theCVec can be passed back to the application program.
@


1.134
log
@Double Precision.
@
text
@d254 5
a258 5
         int *      lenLists,
         char * * * partNameList,
         char * * * demandNameList,
         int * *    shipPerList,
         float * *  incShipVolList);
@


1.133
log
@Double Precision.
@
text
@d924 7
a930 7
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   operationNameList,
         int * *      execPeriodList,
         float * *    peggedExecVolList);
d1015 9
a1023 9
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   operationNameList,
         int * *      bomEntryIndexList,
         int * *      subsBomEntryIndexList,
         int * *      execPeriodList,
         float * *    peggedSubVolList);
@


1.132
log
@Double Precision.
@
text
@d871 2
a872 2
         const float *        desIncVolList,
         float * *            incVolList);
d879 2
a880 2
         const float *        desIncVolList,
         float * *            incVolList,
d2240 2
a2241 2
         const float *        desIncVolList,
         float * *            incVolList,
d2256 1
a2256 1
         float            desIncVol,
@


1.131
log
@Double Precision.
@
text
@d1160 2
a1161 2
         const char *        operationName,
         const WitOutVecRA & cycleTime34);
d1254 2
a1255 2
         const char *       operationName,
         const WitInVecRA & cycleTime34);
@


1.130
log
@Double Precision.
@
text
@d557 1
a557 1
         float * * * ShortageVolList);
d622 2
a623 2
         const char * partName,
         float * *    excessVol);
d630 2
a631 2
         const char * partName,
         float * *    shortageVol);
d642 2
a643 2
         const char * partName,
         float * *    mrpConsVol);
d646 2
a647 2
         const char * partName,
         float * *    mrpExcessVol);
d654 2
a655 2
         const char * partName,
         float * *    mrpResidualVol);
d682 2
a683 2
         const char * partName,
         float * *    obj1StockCost);
d706 2
a707 2
         const char * partName,
         float * *    reqVol);
d710 2
a711 2
         const char * partName,
         float * *    residualVol);
d740 2
a741 2
         const char * partName,
         float * *    stackVol);
d919 3
a921 3
         const char * partName,
         const char * demandName,
         float * *    demandVol);
d947 3
a949 3
         const char * partName,
         const char * demandName,
         float * *    fssShipVol);
d957 3
a959 3
         const char * partNameParm,
         const char * demandNameParm,
         float * *    floatP);
d962 3
a964 3
         const char * partNameParm,
         const char * demandNameParm,
         float * *    floatP);
d1001 3
a1003 3
         const char * partName,
         const char * demandName,
         float * *    shipVol);
d1160 2
a1161 2
         const char * operationName,
         float * *    cycleTime34);
d1186 2
a1187 2
         const char * operationName,
         float * *    fssExecVol);
d1190 2
a1191 2
         const char * operationName,
         float * *    incLotSize);
d1194 2
a1195 2
         const char * operationName,
         float * *    incLotSize2);
d1198 2
a1199 2
         const char * operationName,
         float * *    lotSize2Thresh);
d1202 2
a1203 2
         const char * operationName,
         float * *    minLotSize);
d1206 2
a1207 2
         const char * operationName,
         float * *    minLotSize2);
d1210 2
a1211 2
         const char * operationName,
         float * *    mrpExecVol);
d1222 2
a1223 2
         const char * operationName,
         float * *    obj1ExecCost);
d1246 2
a1247 2
         const char * operationName,
         float * *    yield);
d1342 3
a1344 3
         const char * partName,
         int          bomEntryIndex,
         float * *    consRate);
d1392 3
a1394 3
         const char * partName,
         int          bomEntryIndex,
         float * *    offset);
d1402 3
a1404 3
         const char * consumingOperationName,
         int          bomEntryIndex,
         float * *    routingShare);
d1533 4
a1536 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float * *    consRate);
d1581 4
a1584 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float * *    fssSubVol);
d1605 4
a1608 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float * *    mrpSubVol);
d1617 4
a1620 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float * * obj1SubCost);
d1629 4
a1632 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float * *    offset);
d1641 4
a1644 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float * *    routingShare);
d1653 4
a1656 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float * *    subVol);
d1835 3
a1837 3
         const char * producingOperationName,
         int          bomEntryIndex,
         float * *    offset);
d1845 3
a1847 3
         const char * producingOperationName,
         int          bomEntryIndex,
         float * *    productRate);
d1855 3
a1857 3
         const char * producingOperationName,
         int          bomEntryIndex,
         float * *    routingShare);
@


1.129
log
@Double Precision.
@
text
@d800 2
a801 2
         const char *  partName,
         const float * obj1StockCost);
d1083 3
a1085 3
         const char *  partName,
         const char *  demandName,
         const float * demandVol);
d1093 3
a1095 3
         const char *  partName,
         const char *  demandName,
         const float * fssShipVol);
d1103 3
a1105 3
         const char *  partName,
         const char *  demandName,
         const float * obj1CumShipReward);
d1108 3
a1110 3
         const char *  partName,
         const char *  demandName,
         const float * obj1ShipReward);
d1138 3
a1140 3
         const char *  partName,
         const char *  demandName,
         const float * shipVol);
d1254 2
a1255 2
         const char *  operationName,
         const float * cycleTime34);
d1272 2
a1273 2
         const char *  operationName,
         const float * incLotSize);
d1276 2
a1277 2
         const char *  operationName,
         const float * incLotSize2);
d1280 2
a1281 2
         const char *  operationName,
         const float * lotSize2Thresh);
d1284 2
a1285 2
         const char *  operationName,
         const float * minLotSize);
d1288 2
a1289 2
         const char *  operationName,
         const float * minLotSize2);
d1292 2
a1293 2
         const char *  operationName,
         const float * obj1ExecCost);
d1312 2
a1313 2
         const char *  operationName,
         const float * yieldRate);
d1432 3
a1434 3
         const char *  operationName,
         int           bomEntryIndex,
         const float * consRate);
d1467 3
a1469 3
         const char *  operationName,
         int           bomEntryIndex,
         const float * offset);
d1477 3
a1479 3
         const char *  operationName,
         int           bomEntryIndex,
         const float * routingShare);
d1671 4
a1674 4
         const char *  consumingOperationName,
         int           bomEntryIndex,
         int           subsBomEntryIndex,
         const float * consRate);
d1731 4
a1734 4
         const char *  consumingOperationName,
         int           bomEntryIndex,
         int           subsBomEntryIndex,
         const float * obj1SubCost);
d1743 4
a1746 4
         const char *  consumingOperationName,
         int           bomEntryIndex,
         int           subsBomEntryIndex,
         const float * offset);
d1755 4
a1758 4
         const char *  consumingOperationName,
         int           bomEntryIndex,
         int           subsBomEntryIndex,
         const float * routingShare);
d1767 4
a1770 4
         const char *  consumingOperationName,
         int           bomEntryIndex,
         int           subsBomEntryIndex,
         const float * subVol);
d1900 3
a1902 3
         const char *  producingOperationName,
         int           bopEntryIndex,
         const float * offset);
d1910 3
a1912 3
         const char *  producingOperationName,
         int           bopEntryIndex,
         const float * productRate);
d1915 3
a1917 3
         const char *  producingOperationName,
         int           bopEntryIndex,
         const float * routingShare);
@


1.128
log
@Double Precision.
@
text
@d692 2
a693 2
         const char * partName,
         float * *    prodVol);
d718 2
a719 2
         const char * partName,
         float * *    scrapVol);
d1178 2
a1179 2
         const char * operationName,
         float * *    execVol);
d1268 2
a1269 2
         const char *  operationName,
         const float * execVol);
@


1.127
log
@Double Precision.
@
text
@a2304 30
      WitReturnCode getSubBomEntry34Attribute (
         const char * producingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         const char * the34Attribute,
         const char * the40Object,
         const char * the40Attribute,
         const char * witApiName,
         WitReturnCode (WitRun::*equivalentMethod) (
            const char *,
            int,
            int,
            float * *),
         float * * retVal);

      WitReturnCode setSubBomEntry34Attribute (
         const char * producingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         const char * witApiName,
         const char * the34Attribute,
         const char * the40Object,
         const char * the40Attribute,
         WitReturnCode (WitRun::*equivalentMethod) (
            const char *,
            int,
            int,
            const float *),
         const float * inpVal);

@


1.126
log
@Double Precision.
@
text
@d2150 1
a2150 2
      char * dupCstring (
         const WitString & theString) const;
d2156 30
a2220 72

      WitReturnCode getPart34Attribute (
         const char * partName,
         const char * witApiName,
         const char * the34Attribute,
         const char * the40Object,
         const char * the40Attribute,
         WitReturnCode (
         WitRun::*equivalentMethod) (const char *, int * *),
         int * * retVal);

      WitReturnCode getPart34Attribute (
         const char * partName,
         const char * witApiName,
         const char * the34Attribute,
         const char * the40Object,
         const char * the40Attribute,
         WitReturnCode (
         WitRun::*equivalentMethod) (const char *, float * *),
         float * * retVal);

      WitReturnCode getPart34Attribute (
         const char * partName,
         const char * witApiName,
         const char * the34Attribute,
         const char * the40Object,
         const char * the40Attribute,

         WitReturnCode (WitRun::*equivalentMethod) (
            const char *,
            const WitOutVecRA & hardLB,
            const WitOutVecRA & softLB,
            const WitOutVecRA & hardUB),

         const WitOutVecRA & hardLB,
         const WitOutVecRA & softLB,
         const WitOutVecRA & hardUB);

      WitReturnCode setPart34Attribute (
         const char * partName,
         const char * witApiName,
         const char * the34Attribute,
         const char * the40Object,
         const char * the40Attribute,
         WitReturnCode (WitRun::*equivalentMethod) (const char *, const int *),
         const int *  inpVal);

      WitReturnCode setPart34Attribute (
         const char * partName,
         const char * witApiName,
         const char * the34Attribute,
         const char * the40Object,
         const char * the40Attribute,
         WitReturnCode (WitRun::*equivalentMethod) (
            const char *,
            const float *),
         const float * inpVal);

      WitReturnCode setPart34Attribute (
         const char * partName,
         const char * witApiName,
         const char * the34Attribute,
         const char * the40Object,
         const char * the40Attribute,
         WitReturnCode (WitRun::*equivalentMethod) (
            const char *,
            const WitInVecRA &,
            const WitInVecRA &,
            const WitInVecRA &),
         const WitInVecRA & hardLB,
         const WitInVecRA & softLB,
         const WitInVecRA & hardUB);
@


1.125
log
@Double Precision.
@
text
@d596 2
a597 2
         const char * partName,
         float * *    consVol);
@


1.124
log
@Double Precision.
@
text
@d726 2
a727 2
         const char * partName,
         float * *    shadowPrice);
@


1.123
log
@Double Precision.
@
text
@d678 2
a679 2
         const char * partName,
         float * *    obj1ScrapCost);
d796 2
a797 2
         const char *  partName,
         const float * obj1ScrapCost);
d2115 1
a2115 1
      void witGetObj1Vector (
d2117 5
@


1.122
log
@Double Precision.
@
text
@d734 4
a737 4
         const char * partName,
         float * *    hardLower,
         float * *    softLower,
         float * *    hardUpper);
d826 4
a829 4
         const char *  partName,
         const float * hardLower,
         const float * softLower,
         const float * hardUpper);
d912 5
a916 5
         const char * partNameParm,
         const char * demandNameParm,
         float * *    hardlbP,
         float * *    softlbP,
         float * *    hardubP);
d1076 5
a1080 5
         const char *  partName,
         const char *  demandName,
         const float * hardLower,
         const float * softLower,
         const float * hardUpper);
d1164 4
a1167 4
         const char * operationName,
         float * *    hardLower,
         float * *    softLower,
         float * *    hardUpper);
d1258 4
a1261 4
         const char *  operationName,
         const float * hardLower,
         const float * softLower,
         const float * hardUpper);
d2109 6
d2217 7
a2223 7
            float * * hardLB,
            float * * softLB,
            float * * hardUB),

         float * * hardLB,
         float * * softLB,
         float * * hardUB);
d2253 6
a2258 6
            const float *,
            const float *,
            const float *),
         const float * hardLB,
         const float * softLB,
         const float * hardUB);
@


1.121
log
@Double Precision.
@
text
@a2406 5
// NonClass function template apiAlloc
//
// Allocates theCVec to nElems elements.
// Uses malloc, so the theCVec can be passed back to the application program.
//------------------------------------------------------------------------------
d2411 5
a2415 8
template <typename TheType> 
      inline void apiAlloc (TheType * & theCVec, size_t nElems)
   {
   WitRun::apiVoidAlloc (
      reinterpret_cast <void * &> (theCVec),
      nElems,
      sizeof (TheType));
   }
@


1.120
log
@Double Precision.
@
text
@d166 1
a166 2
      template <typename TheType> 
            inline static void apiAlloc (TheType * & theCVec, size_t nElems);
d168 1
a168 3
         // Allocates theCVec to nElems elements.
         // Uses malloc, so the theCVec can be passed back to the application
         // program.
a2145 4
      static void apiVoidAlloc (void * & theCVec, size_t nElems, size_t elSize);
         //
         // Called by apiAlloc.

d2407 4
a2410 1
// Inline implementations.
d2413 3
d2417 1
a2417 1
      inline void WitRun::apiAlloc (TheType * & theCVec, size_t nElems)
d2419 1
a2419 1
   apiVoidAlloc (
d2424 3
@


1.119
log
@Double Precision.
@
text
@d747 2
a748 2
         const char * partName,
         float * *    supplyVol);
d2093 5
@


1.118
log
@Double Precision.
@
text
@d166 7
d2144 1
a2144 5
      void apiVoidAlloc (
            void * & theCVec,
            size_t   nElems,
            size_t   elSize)
            const;
a2147 13
      template <typename TheType> 
            inline void apiAlloc (TheType * & theCVec, size_t nElems) const
         {
         apiVoidAlloc (
            reinterpret_cast <void * &> (theCVec),
            nElems,
            sizeof (TheType));
         }
         //
         // Allocates theCVec to nElems elements.
         // Uses malloc, so the theCVec can be passed back to the application
         // program.

d2407 13
@


1.117
log
@Double Precision.
@
text
@d196 1
a196 1
         WitOutScalRA expCutoff);
d223 1
a223 1
         WitOutScalRA lotSizeTol);
d423 1
a423 1
         WitOutScalRA capCost);
d429 1
a429 1
         WitOutScalRA invCost);
d432 4
a435 4
         WitOutScalRA revValue,
         WitOutScalRA invValue,
         WitOutScalRA servValue,
         WitOutScalRA subsValue);
d438 1
a438 1
         WitOutScalRA obj2Winv);
d441 1
a441 1
         WitOutScalRA obj2Wrev);
d444 1
a444 1
         WitOutScalRA obj2Wserv);
d447 1
a447 1
         WitOutScalRA obj2Wsub);
d453 2
a454 2
         WitOutScalRA objValue,
         WitOutScalRA boundsValue);
d466 1
a466 1
        WitOutScalRA periodsPerYear);
d475 1
a475 1
         WitOutScalRA wbounds);
d745 1
a745 1
         WitOutScalRA unitCost);
d948 3
a950 3
         const char * partName,
         const char * demandName,
         WitOutScalRA grossRev);
d1042 5
a1046 5
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         const WitInScalRA & desIncVol,
         WitOutScalRA        incVol);
d1049 6
a1054 6
         const char *        partName,
         const char *        demandName,
         int                 shipPeriod,
         const WitInScalRA & desIncVol,
         WitOutScalRA        incVol,
         WitBoolean          asapMultiExec);
d1166 2
a1167 2
         const char * operationName,
         WitOutScalRA execPenalty);
d1222 2
a1223 2
         const char * operationName,
         WitOutScalRA obj2AuxCost);
d1353 3
a1355 3
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitOutScalRA execPenalty);
d1363 3
a1365 3
         const char * consumingOperationName,
         int          bomEntryIndex,
         WitOutScalRA falloutRate);
d1547 4
a1550 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitOutScalRA execPenalty);
d1559 4
a1562 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitOutScalRA expNetAversion);
d1571 4
a1574 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitOutScalRA falloutRate);
d1619 4
a1622 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitOutScalRA obj2SubPenalty);
d1811 3
a1813 3
         const char * producingOperationName,
         int          bomEntryIndex,
         WitOutScalRA expAversion);
d2045 3
a2047 3
         WitOutScalRA & theArg,
         const char *   argName,
         double         theValue);
d2289 6
a2294 6
         const char *        demandedPartName,
         const char *        demandName,
         int                 shipPeriod,
         const WitInScalRA & desIncVol,
         WitOutScalRA        incVol,
         WitBoolean          asapMultiExec);
@


1.116
log
@Double Precision.
@
text
@d323 1
a323 1
         WitInScalRA expCutoff);
d344 1
a344 1
         WitInScalRA lotSizeTol);
d490 1
a490 1
         WitInScalRA invCost);
d493 1
a493 1
         WitInScalRA obj2Winv);
d496 1
a496 1
         WitInScalRA obj2Wrev);
d499 1
a499 1
         WitInScalRA obj2Wserv);
d502 1
a502 1
         WitInScalRA obj2Wsub);
d517 1
a517 1
         WitInScalRA periodsPerYear);
d526 1
a526 1
         WitInScalRA wbounds);
d832 2
a833 2
         const char * partName,
         WitInScalRA  unitCost);
d857 4
a860 4
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         WitInScalRA  incShipVol);
d1042 5
a1046 5
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         WitInScalRA  desIncVol,
         WitOutScalRA incVol);
d1049 6
a1054 6
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         WitInScalRA  desIncVol,
         WitOutScalRA incVol,
         WitBoolean   asapMultiExec);
d1094 3
a1096 3
         const char * partName,
         const char * demandName,
         WitInScalRA  grossRev);
d1260 2
a1261 2
         const char * operationName,
         WitInScalRA  execPenalty);
d1292 2
a1293 2
         const char * operationName,
         WitInScalRA  obj2AuxCost);
d1438 3
a1440 3
         const char * operationName,
         int          bomEntryIndex,
         WitInScalRA  execPenalty);
d1448 3
a1450 3
         const char * operationName,
         int          bomEntryIndex,
         WitInScalRA  falloutRate);
d1679 4
a1682 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitInScalRA  execPenalty);
d1691 4
a1694 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitInScalRA  expNetAversion);
d1703 4
a1706 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitInScalRA  falloutRate);
d1733 4
a1736 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitInScalRA  obj2SubPenalty);
d1881 3
a1883 3
         const char * producingOperationName,
         int          bopEntryIndex,
         WitInScalRA  expAversion);
d2289 6
a2294 6
         const char * demandedPartName,
         const char * demandName,
         int          shipPeriod,
         WitInScalRA  desIncVol,
         WitOutScalRA incVol,
         WitBoolean   asapMultiExec);
@


1.115
log
@Double Precision.
@
text
@a24 4
typedef int witBoolean;
   //
   // See wit.h.

d176 1
a176 1
         witBoolean * value);
d179 1
a179 1
         witBoolean * value);
d182 1
a182 1
         witBoolean * computeCriticalList);
d193 1
a193 1
         witBoolean * execEmptyBom);
d199 1
a199 1
         witBoolean * feasible);
d202 1
a202 1
         witBoolean * value);
d208 1
a208 1
         witBoolean * heurAllocActive);
d211 1
a211 1
         witBoolean * pipSeqFromHeur);
d214 1
a214 1
         witBoolean * independentOffsets);
d217 1
a217 1
         witBoolean * localBuildAhead);
d220 1
a220 1
         witBoolean * localMultiExec);
d226 1
a226 1
         witBoolean * multiExec);
d229 1
a229 1
         witBoolean * value);
d235 1
a235 1
         witBoolean * nonMrSelSplit);
d241 1
a241 1
         witBoolean * penExec);
d244 1
a244 1
         witBoolean * perfPegging);
d247 1
a247 1
         witBoolean * pipExists);
d257 1
a257 1
         witBoolean * postprocessed);
d260 1
a260 1
         witBoolean * prefHighStockSLBs);
d263 1
a263 1
         witBoolean * preprocessed);
d266 1
a266 1
         witBoolean * respectStockSLBs);
d269 1
a269 1
         witBoolean * roundReqVols);
d272 1
a272 1
         witBoolean * selSplit);
d275 1
a275 1
         witBoolean * value);
d278 1
a278 1
         witBoolean * stockRealloc);
d281 1
a281 1
         witBoolean * stockReallocation);
d284 1
a284 1
         witBoolean * srSelSplit);
d290 1
a290 1
         witBoolean * value);
d293 1
a293 1
         witBoolean * twoWayMultiExec);
d296 1
a296 1
         witBoolean * useFocusHorizons);
d299 1
a299 1
         witBoolean * userHeurStart);
d302 1
a302 1
         witBoolean * value);
d308 1
a308 1
         witBoolean autoPriority);
d311 1
a311 1
         witBoolean buildWhenEmpty);
d314 1
a314 1
         witBoolean computCriticalList);
d320 1
a320 1
         witBoolean execEmptyBom);
d326 1
a326 1
         witBoolean forcedMultiEq);
d332 1
a332 1
         witBoolean pipSeqFromHeur);
d335 1
a335 1
         witBoolean independentOffsets);
d338 1
a338 1
         witBoolean localBuildAhead);
d341 1
a341 1
         witBoolean localMultiExec);
d347 1
a347 1
         witBoolean multiExec);
d350 1
a350 1
         witBoolean multiRoute);
d356 1
a356 1
         witBoolean nonMrSelSplit);
d362 1
a362 1
         witBoolean penExec);
d365 1
a365 1
         witBoolean perfPegging);
d368 1
a368 1
         witBoolean prefHighStockSLBs);
d371 1
a371 1
         witBoolean respectStockSLBs);
d374 1
a374 1
         witBoolean roundReqVols);
d377 1
a377 1
         witBoolean selSplit);
d380 1
a380 1
         witBoolean skipFailures);
d383 1
a383 1
         witBoolean stockRealloc);
d386 1
a386 1
         witBoolean stockReallocation);
d389 1
a389 1
         witBoolean srSelSplit);
d395 1
a395 1
         witBoolean truncOffsets);
d398 1
a398 1
         witBoolean twoWayMultiExec);
d401 1
a401 1
         witBoolean useFocusHorizons);
d404 1
a404 1
         witBoolean userHeurStart);
d407 1
a407 1
         witBoolean boolval);
d414 1
a414 1
         witBoolean * value);
d417 1
a417 1
         witBoolean * value);
d420 1
a420 1
         witBoolean * value);
d426 1
a426 1
         witBoolean * value);
d463 1
a463 1
         witBoolean * value);
d469 1
a469 1
         witBoolean * value);
d478 1
a478 1
         witBoolean accAfterOptImp);
d481 1
a481 1
         witBoolean accAfterSoftLB);
d487 1
a487 1
         witBoolean compPrices);
d514 1
a514 1
         witBoolean optWithLotSizes);
d520 1
a520 1
         witBoolean postSolveRecovery);
d564 1
a564 1
         witBoolean * baSelSplit);
d581 1
a581 1
         witBoolean * buildAsap);
d585 1
a585 1
         witBoolean * buildNstn);
d623 1
a623 1
         witBoolean * exist);
d699 1
a699 1
         witBoolean * propRouting);
d719 1
a719 1
         witBoolean * selForDel);
d727 1
a727 1
         witBoolean * singleSource);
d757 1
a757 1
         witBoolean   baSelSplit);
d769 1
a769 1
         witBoolean   buildAsap);
d773 1
a773 1
         witBoolean   buildNstn);
d811 1
a811 1
         witBoolean   propRouting);
d815 1
a815 1
         witBoolean   selForDel);
d819 1
a819 1
         witBoolean   singleSource);
d877 1
a877 1
         const witBoolean *   asapMultiExecList);
d965 1
a965 1
         witBoolean * prefBuildAhead);
d984 1
a984 1
         witBoolean * selForDel);
d1054 1
a1054 1
         witBoolean   asapMultiExec);
d1111 1
a1111 1
         witBoolean   prefBuildAhead);
d1121 1
a1121 1
         witBoolean   selForDel);
d1171 1
a1171 1
         witBoolean * * executable);
d1179 1
a1179 1
         witBoolean * exist);
d1231 1
a1231 1
         witBoolean * selForDel);
d1235 1
a1235 1
         witBoolean * twoLevelLotSizes);
d1297 1
a1297 1
         witBoolean   selForDel);
d1301 1
a1301 1
         witBoolean   twoLevelLotSizes);
d1380 1
a1380 1
         witBoolean * mandEC);
d1395 1
a1395 1
         witBoolean * propRouting);
d1405 1
a1405 1
         witBoolean * selForDel);
d1410 1
a1410 1
         witBoolean * singleSource);
d1460 1
a1460 1
         witBoolean   mandEC);
d1470 1
a1470 1
         witBoolean   propRouting);
d1480 1
a1480 1
         witBoolean   selForDel);
d1485 1
a1485 1
         witBoolean   singleSource);
d1556 1
a1556 1
         witBoolean * expAllowed);
d1598 1
a1598 1
         witBoolean * mrpNetAllowed);
d1610 1
a1610 1
         witBoolean * netAllowed);
d1646 1
a1646 1
         witBoolean * selForDel);
d1688 1
a1688 1
         witBoolean   expAllowed);
d1718 1
a1718 1
         witBoolean   mrpNetAllowed);
d1724 1
a1724 1
         witBoolean   netAllowed);
d1760 1
a1760 1
         witBoolean   selForDel);
d1798 1
a1798 1
         witBoolean * byProduct);
d1808 1
a1808 1
         witBoolean * expAllowed);
d1828 1
a1828 1
         witBoolean * meSelSplit);
d1858 1
a1858 1
         witBoolean * selForDel);
d1868 1
a1868 1
         witBoolean   byProduct);
d1878 1
a1878 1
         witBoolean   expAllowed);
d1893 1
a1893 1
         witBoolean   meSelSplit);
d1918 1
a1918 1
         witBoolean   selForDel);
d1928 1
a1928 1
         witBoolean   quiet,
d1935 1
a1935 1
         witBoolean   quiet,
d1942 1
a1942 1
         witBoolean quiet,
d1944 1
a1944 1
         witBoolean mesgPrintMunber);
d1948 1
a1948 1
         witBoolean * mesgPrintMunber);
d1951 1
a1951 1
         witBoolean quiet,
d1953 1
a1953 1
         witBoolean mesgStopRunning);
d1957 1
a1957 1
         witBoolean * mesgStopRunning);
d1960 1
a1960 1
         witBoolean quiet,
d2035 1
a2035 1
         witBoolean * theVarPtr,
d2080 1
a2080 1
         witBoolean * *         theVarPtr,
d2286 1
a2286 1
         const witBoolean *   asapMultiExecList);
d2294 1
a2294 1
         witBoolean   asapMultiExec);
@


1.114
log
@Double Precision.
@
text
@d2089 3
a2091 3
         float * *                   theVarPtr,
         const char *                argName,
         const WitFlexVec <double> & theValue);
d2105 3
a2107 3
         float * *                   theVarPtr,
         const char *                argName,
         const WitFlexVec <double> & theValue);
@


1.113
log
@Double Precision.
@
text
@a2088 5
         float * *                  theVarPtr,
         const char *               argName,
         const WitFlexVec <float> & theValue);

      void apiGet (
a2102 5

      void witGetObj1Vector (
         float * *                  theVarPtr,
         const char *               argName,
         const WitFlexVec <float> & theValue);
@


1.112
log
@Double Precision.
@
text
@d488 1
a488 1
         WitInScalRA capCost);
@


1.111
log
@Double Precision.
@
text
@d832 2
a833 2
         const char * partName,
         WitInVecRA   supplyVol);
@


1.110
log
@Double Precision.
@
text
@d832 2
a833 2
         const char *  partName,
         const float * supplyVol);
@


1.109
log
@Double Precision.
@
text
@a2098 5
         float * *          theVarPtr,
         const char *       argName,
         const WitRealVec & theValue);

      void apiGet (
d2115 3
a2117 3
         float * *          theVarPtr,
         const char *       argName,
         const WitRealVec & theValue);
@


1.108
log
@Double Precision.
@
text
@d2099 3
a2101 13
         float * *             theVarPtr,
         const char *          argName,
         const WitFltRealVec & theValue);

      void apiGet (
         float * *             theVarPtr,
         const char *          argName,
         const WitDblRealVec & theValue);

      void apiGet (
         float * *             theVarPtr,
         const char *          argName,
         const WitFltRealTVc & theValue);
@


1.107
log
@Double Precision.
@
text
@d2099 13
a2111 3
         float * *          theVarPtr,
         const char *       argName,
         const WitRealVec & theValue);
@


1.106
log
@Double Precision.
@
text
@a192 3
      WitReturnCode witGetDoubleMode (
         witBoolean * doubleMode);

a318 3

      WitReturnCode witSetDoubleMode (
         witBoolean doubleMode);
@


1.105
log
@Double Precision.
@
text
@d2163 1
a2163 1
            void * & theCvector,
d2171 1
a2171 1
            inline void apiAlloc (TheType * & theCvector, size_t nElems) const
d2174 1
a2174 1
            reinterpret_cast <void * &> (theCvector),
d2179 2
a2180 2
         // Allocates theCvector to nElems elements.
         // Uses malloc, so the theCvector can be passed back to the application
@


1.104
log
@Double Precision.
@
text
@d2125 5
@


1.103
log
@Double Precision.
@
text
@a2084 5
         float * *                   theVarPtr,
         const char *                argName,
         const WitFlexVec <double> & theValue);

      void apiGet (
d2098 10
@


1.102
log
@Continued double precision.
@
text
@d203 1
a203 1
         OutScalRA expCutoff);
d230 1
a230 1
         OutScalRA lotSizeTol);
d333 1
a333 1
         InScalRA expCutoff);
d354 1
a354 1
         InScalRA lotSizeTol);
d433 1
a433 1
         OutScalRA capCost);
d439 1
a439 1
         OutScalRA invCost);
d442 4
a445 4
         OutScalRA revValue,
         OutScalRA invValue,
         OutScalRA servValue,
         OutScalRA subsValue);
d448 1
a448 1
         OutScalRA obj2Winv);
d451 1
a451 1
         OutScalRA obj2Wrev);
d454 1
a454 1
         OutScalRA obj2Wserv);
d457 1
a457 1
         OutScalRA obj2Wsub);
d463 2
a464 2
         OutScalRA objValue,
         OutScalRA boundsValue);
d476 1
a476 1
        OutScalRA periodsPerYear);
d485 1
a485 1
         OutScalRA wbounds);
d494 1
a494 1
         InScalRA capCost);
d500 1
a500 1
         InScalRA invCost);
d503 1
a503 1
         InScalRA obj2Winv);
d506 1
a506 1
         InScalRA obj2Wrev);
d509 1
a509 1
         InScalRA obj2Wserv);
d512 1
a512 1
         InScalRA obj2Wsub);
d527 1
a527 1
         InScalRA periodsPerYear);
d536 1
a536 1
         InScalRA wbounds);
d755 1
a755 1
         OutScalRA    unitCost);
d843 1
a843 1
         InScalRA     unitCost);
d870 1
a870 1
         InScalRA     incShipVol);
d960 1
a960 1
         OutScalRA    grossRev);
d1055 2
a1056 2
         InScalRA     desIncVol,
         OutScalRA    incVol);
d1062 2
a1063 2
         InScalRA     desIncVol,
         OutScalRA    incVol,
d1106 1
a1106 1
         InScalRA     grossRev);
d1177 1
a1177 1
         OutScalRA    execPenalty);
d1233 1
a1233 1
         OutScalRA    obj2AuxCost);
d1271 1
a1271 1
         InScalRA     execPenalty);
d1303 1
a1303 1
         InScalRA     obj2AuxCost);
d1365 1
a1365 1
         OutScalRA    execPenalty);
d1375 1
a1375 1
         OutScalRA    falloutRate);
d1450 1
a1450 1
         InScalRA     execPenalty);
d1460 1
a1460 1
         InScalRA     falloutRate);
d1560 1
a1560 1
         OutScalRA    execPenalty);
d1572 1
a1572 1
         OutScalRA    expNetAversion);
d1584 1
a1584 1
         OutScalRA    falloutRate);
d1632 1
a1632 1
         OutScalRA    obj2SubPenalty);
d1692 1
a1692 1
         InScalRA     execPenalty);
d1704 1
a1704 1
         InScalRA     expNetAversion);
d1716 1
a1716 1
         InScalRA     falloutRate);
d1746 1
a1746 1
         InScalRA     obj2SubPenalty);
d1823 1
a1823 1
         OutScalRA    expAversion);
d1893 1
a1893 1
         InScalRA     expAversion);
d2055 3
a2057 3
         OutScalRA &   theArg,
         const char *  argName,
         double        theValue);
d2185 1
a2185 1
      void issueGetAttrMsg (WitAttr, const OutScalRA &) const;
d2307 2
a2308 2
         InScalRA     desIncVol,
         OutScalRA    incVol,
@


1.101
log
@Continued double precision.
@
text
@d870 1
a870 1
         float        incShipVol);
d1055 2
a1056 2
         float        desIncVol,
         float *      incVol);
d1062 2
a1063 2
         float        desIncVol,
         float *      incVol,
d2307 2
a2308 2
         float        desIncVol,
         float *      incVol,
@


1.100
log
@Continued double precision.
@
text
@d33 1
a33 1
// Non-delegated responsibility: the 2nd layer of WIT's API.
d442 4
a445 4
         float * revValue,
         float * invValue,
         float * servValue,
         float * subsValue);
d463 2
a464 2
         float * objValue,
         float * boundsValue);
@


1.99
log
@Continued double precision.
@
text
@d203 1
a203 1
         RealSOutArg expCutoff);
d230 1
a230 1
         RealSOutArg lotSizeTol);
d333 1
a333 1
         RealSInArg expCutoff);
d354 1
a354 1
         RealSInArg lotSizeTol);
d433 1
a433 1
         RealSOutArg capCost);
d439 1
a439 1
         RealSOutArg invCost);
d448 1
a448 1
         RealSOutArg obj2Winv);
d451 1
a451 1
         RealSOutArg obj2Wrev);
d454 1
a454 1
         RealSOutArg obj2Wserv);
d457 1
a457 1
         RealSOutArg obj2Wsub);
d476 1
a476 1
        RealSOutArg periodsPerYear);
d485 1
a485 1
         RealSOutArg wbounds);
d494 1
a494 1
         RealSInArg capCost);
d500 1
a500 1
         RealSInArg invCost);
d503 1
a503 1
         RealSInArg obj2Winv);
d506 1
a506 1
         RealSInArg obj2Wrev);
d509 1
a509 1
         RealSInArg obj2Wserv);
d512 1
a512 1
         RealSInArg obj2Wsub);
d527 1
a527 1
         RealSInArg periodsPerYear);
d536 1
a536 1
         RealSInArg wbounds);
d755 1
a755 1
         RealSOutArg  unitCost);
d843 1
a843 1
         RealSInArg   unitCost);
d960 1
a960 1
         RealSOutArg  grossRev);
d1106 1
a1106 1
         RealSInArg   grossRev);
d1177 1
a1177 1
         RealSOutArg  execPenalty);
d1233 1
a1233 1
         RealSOutArg  obj2AuxCost);
d1271 1
a1271 1
         RealSInArg   execPenalty);
d1303 1
a1303 1
         RealSInArg   obj2AuxCost);
d1365 1
a1365 1
         RealSOutArg  execPenalty);
d1375 1
a1375 1
         RealSOutArg  falloutRate);
d1450 1
a1450 1
         RealSInArg   execPenalty);
d1460 1
a1460 1
         RealSInArg   falloutRate);
d1560 1
a1560 1
         RealSOutArg  execPenalty);
d1572 1
a1572 1
         RealSOutArg  expNetAversion);
d1584 1
a1584 1
         RealSOutArg  falloutRate);
d1632 1
a1632 1
         RealSOutArg  obj2SubPenalty);
d1692 1
a1692 1
         RealSInArg   execPenalty);
d1704 1
a1704 1
         RealSInArg   expNetAversion);
d1716 1
a1716 1
         RealSInArg   falloutRate);
d1746 1
a1746 1
         RealSInArg   obj2SubPenalty);
d1823 1
a1823 1
         RealSOutArg  expAversion);
d1893 1
a1893 1
         RealSInArg   expAversion);
d2055 1
a2055 1
         RealSOutArg & theArg,
d2185 1
a2185 1
      void issueGetAttrMsg (WitAttr, const RealSOutArg &) const;
@


1.98
log
@Continued double precision.
@
text
@d433 1
a433 1
         float * capCost);
d439 1
a439 1
         float * invCost);
d448 1
a448 1
         float * obj2Winv);
d451 1
a451 1
         float * obj2Wrev);
d454 1
a454 1
         float * obj2Wserv);
d457 1
a457 1
         float * obj2Wsub);
d476 1
a476 1
        float * periodsPerYear);
d494 1
a494 1
         float capCost);
d500 1
a500 1
         float invCost);
d503 1
a503 1
         float obj2Winv);
d506 1
a506 1
         float obj2Wrev);
d509 1
a509 1
         float obj2Wserv);
d512 1
a512 1
         float obj2Wsub);
d527 1
a527 1
         float periodsPerYear);
d755 1
a755 1
         float *      unitCost);
d843 1
a843 1
         float        unitCost);
d960 1
a960 1
         float *      grossRev);
d1106 1
a1106 1
         float        grossRev);
d1177 1
a1177 1
         float *      execPenalty);
d1233 1
a1233 1
         float *      obj2AuxCost);
d1271 1
a1271 1
         float        execPenalty);
d1303 1
a1303 1
         float        obj2AuxCost);
d1365 1
a1365 1
         float *      execPenalty);
d1375 1
a1375 1
         float *      falloutRate);
d1450 1
a1450 1
         float        execPenalty);
d1460 1
a1460 1
         float        falloutRate);
d1560 1
a1560 1
         float *      execPenalty);
d1572 1
a1572 1
         float *      expNetAversion);
d1584 1
a1584 1
         float *      falloutRate);
d1632 1
a1632 1
         float *      obj2SubPenalty);
d1692 1
a1692 1
         float        execPenalty);
d1704 1
a1704 1
         float        expNetAversion);
d1716 1
a1716 1
         float        falloutRate);
d1746 1
a1746 1
         float obj2SubPenalty);
@


1.97
log
@Continued double precision.
@
text
@d485 1
a485 1
         float * wbounds);
d536 1
a536 1
         float wbounds);
@


1.96
log
@Continued double precision.
@
text
@d203 1
a203 1
         float * expCutoff);
d333 1
a333 1
         float expCutoff);
@


1.95
log
@Continued double precision.
@
text
@d230 1
a230 1
         float * lotSizeTol);
d354 1
a354 1
         float lotSizeTol);
d2177 1
a2177 2
      void issueGetAttrMsg (
            WitAttr theAttr) const;
d2181 1
a2181 2
      void issueGetAttrMsg (
            WitAttr theAttr, const float * theFloatPtr) const;
d2185 5
a2189 2
      void issueGetAttrMsg (
            WitAttr theAttr, const int * theIntPtr) const;
@


1.94
log
@Continued double precision.
@
text
@d1893 1
a1893 1
         float        expAversion);
@


1.93
log
@Continued double precision.
@
text
@d1823 1
a1823 1
         RealOutArg   expAversion);
d2055 3
a2057 3
         RealOutArg & theArg,
         const char * argName,
         double       theValue);
@


1.92
log
@Continued double precision.
@
text
@d193 2
a194 2
      WitReturnCode witGetDoublePrecision (
         witBoolean * doublePrecision);
d323 2
a324 2
      WitReturnCode witSetDoublePrecision (
         witBoolean doublePrecision);
@


1.91
log
@Continued double precision.
@
text
@d1823 1
a1823 1
         float *      expAversion);
d2051 5
@


1.90
log
@Continued double precision.
@
text
@a20 1
#include <StrDbl.h>
d2052 1
a2052 1
         StrDbl       theValue);
@


1.89
log
@Continued double precision.
@
text
@d194 3
d198 1
a198 1
         int * equitablity);
d324 3
d328 1
a328 1
         int equitablity);
@


1.88
log
@Removed the "pip" attribute.
@
text
@a2046 5
         float        theValue);

      void apiGet (
         float *      theVarPtr,
         const char * argName,
@


1.87
log
@Continued double precision.
@
text
@a250 3
      WitReturnCode witGetPip (
         witBoolean * pip);

a370 3

      WitReturnCode witSetPip (
         witBoolean pip);
@


1.86
log
@Continued double precision.
@
text
@a2173 5
      inline static double floatToDouble (float theFloat)
         {
         return static_cast <double> (theFloat);
         }

@


1.85
log
@Continued double precision.
@
text
@d21 1
d2058 1
a2058 1
         double       theValue);
@


1.84
log
@Continued implementation of PIP.
@
text
@d2055 5
d2172 5
@


1.83
log
@Continued implementation of PIP.
@
text
@d214 2
a215 2
      WitReturnCode witGetHeurPipSeq (
         witBoolean * heurPipSeq);
d338 2
a339 2
      WitReturnCode witSetHeurPipSeq (
         witBoolean heurPipSeq);
@


1.82
log
@Continued implementation of PIP.
@
text
@a376 18
      WitReturnCode witSetPipSeqAppendsNow (
         witBoolean pipSeqAppendsNow);

      WitReturnCode witSetPipSeqClearsNow (
         witBoolean pipSeqClearsNow);

      WitReturnCode witSetPipSeqDemandName (
         const char * pipSeqDemandName);

      WitReturnCode witSetPipSeqIncShipVol (
         float pipSeqIncShipVol);

      WitReturnCode witSetPipSeqPartName (
         const char * pipSeqPartName);

      WitReturnCode witSetPipSeqShipPeriod (
         int pipSeqShipPeriod);

@


1.81
log
@Implemented API function witAppendToPipSeq.
@
text
@d377 18
@


1.80
log
@Added API function witClearPipSeq.
@
text
@d866 6
@


1.79
log
@Added API function witGetPipSeq.
@
text
@d174 2
@


1.78
log
@Added pipExists attribute.
@
text
@d254 7
@


1.77
log
@Added API function witBuildPip.
@
text
@d251 3
@


1.76
log
@Continued implementation of PIP.
@
text
@d95 2
@


1.75
log
@Continued implementation of PIP.
@
text
@d210 3
d323 3
@


1.74
log
@Continued implementation of PIP.
@
text
@d2295 1
a2295 1
         WitPIP::PartAtt thePartAtt,
@


1.73
log
@Continued implementation of PIP.
@
text
@d2295 1
a2295 1
         WitPip::PartAtt thePartAtt,
@


1.72
log
@Continued implementation of PIP.
@
text
@d21 1
d2291 10
a2303 7

      void getPartPip (
         WitPartPipStack & thePegPairs,
         int *             lenLists,
         char * * *        partNameList,
         int * *           periodList,
         float * *         peggedVolList);
@


1.71
log
@Continued implementation of PIP.
@
text
@d984 9
@


1.70
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d53 1
a53 1
class WitRun: public WitUtil
@


1.69
log
@Continued implementation of Post-Implosion Pegging.
@
text
@d2285 1
a2285 1
      WitReturnCode getPartPip (
@


1.68
log
@Continued implementation of post-implosion pegging.
@
text
@a238 3
      WitReturnCode witGetPerfPIPegging (
         witBoolean * perfPIPegging);

d242 3
a349 3
      WitReturnCode witSetPerfPIPegging (
         witBoolean perfPIPegging);

d353 3
d881 9
d911 9
d955 9
d995 20
d2279 12
a2290 1
         // Prepares a pegging API function call.
@


1.67
log
@Began implementation of post-implosion pegging.
@
text
@d239 3
a244 3
      WitReturnCode witGetPiPegging (
         witBoolean * piPegging);

d350 3
a355 3
      WitReturnCode witSetPiPegging (
         witBoolean piPegging);

d2229 4
@


1.66
log
@Continued implementation of opt with COIN.
@
text
@d242 3
d352 3
@


1.65
log
@Continued implementation of opt with COIN.
@
text
@a298 3
      WitReturnCode witSetSolverLogFileName (
         const char * solverLogFileName);

a407 3
      WitReturnCode witGetSolverLogFileName (
         char * * solverLogFileName);

d454 3
d504 3
@


1.64
log
@Changed the routingShare attributes from scalars to vectors.
@
text
@d299 2
a300 2
      WitReturnCode witSetCoinLogFileName (
         const char * coinLogFileName);
d411 2
a412 2
      WitReturnCode witGetCoinLogFileName (
         char * * coinLogFileName);
@


1.63
log
@Continued implementation of opt with COIN.
@
text
@d1321 1
a1321 1
         float *      routingShare);
d1394 3
a1396 3
         const char * operationName,
         int          bomEntryIndex,
         float        routingShare);
d1561 1
a1561 1
         float *      routingShare);
d1672 4
a1675 4
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float        routingShare);
d1774 1
a1774 1
         float *      routingShare);
d1832 3
a1834 3
         const char * producingOperationName,
         int          bopEntryIndex,
         float        routingShare);
@


1.62
log
@Continued implementation of opt with COIN.
@
text
@d299 2
a300 2
      WitReturnCode witSetCoinMesgFileName (
         const char * coinMesgFileName);
d411 2
a412 2
      WitReturnCode witGetCoinMesgFileName (
         char * * coinMesgFileName);
@


1.61
log
@Continued implementation of proportionate routing.
@
text
@d299 3
d410 3
@


1.60
log
@Implemented OSL postSolve error recovery.
@
text
@a1271 5
      WitReturnCode witGetBomEntryExpShare (
         const char * consumingOperationName,
         int          bomEntryIndex,
         float *      expShare);

d1312 5
a1356 5
      WitReturnCode witSetBomEntryExpShare (
         const char * operationName,
         int          bomEntryIndex,
         float        expShare);

d1387 5
a1478 6
      WitReturnCode witGetSubsBomEntryExpShare (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float *      expShare);

d1551 6
a1610 6
      WitReturnCode witSetSubsBomEntryExpShare (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float        expShare);

d1665 6
a1729 5
      WitReturnCode witGetBopEntryExpShare (
         const char * producingOperationName,
         int          bomEntryIndex,
         float *      expShare);

d1765 5
a1799 5
      WitReturnCode witSetBopEntryExpShare (
         const char * producingOperationName,
         int          bopEntryIndex,
         float        expShare);

d1824 5
@


1.59
log
@Continued implementation of proportionate routing.
@
text
@d451 3
d498 3
@


1.58
log
@Continued implementation of proportionate routing.
@
text
@d1266 5
d1306 5
d1351 5
d1381 5
d1473 6
d1604 6
@


1.57
log
@Continued implementation of proportionate routing.
@
text
@a250 3
      WitReturnCode witGetPropRouting (
         witBoolean * propRouting);

a352 3
      WitReturnCode witSetPropRouting (
         witBoolean propRouting);

d628 12
d668 4
a679 26
      WitReturnCode witGetPartSelForDel (
         const char * partName,
         witBoolean * selForDel);

      WitReturnCode witGetPartStockBounds (
         const char * partName,
         float * *    hardLower,
         float * *    softLower,
         float * *    hardUpper);

      WitReturnCode witGetPartYield (
         const char * partName,
         int * *      yield);

      WitReturnCode witGetPartNConsumingBomEntries (
         const char * partName,
         int *        nConsumingBomEntries);

      WitReturnCode witGetPartNConsumingSubsBomEntries (
         const char * partName,
         int *        nConsumingSubsBomEntries);

      WitReturnCode witGetPartNProducingBopEntries (
         const char * partName,
         int *        nProducingBopEntries);

d688 4
d700 6
d718 4
d779 4
@


1.56
log
@Began implementation of Proportionate Routing.
@
text
@d251 3
d356 3
d1690 1
a1690 1
      WitReturnCode witGetBopEntryExpFactor (
d1693 1
a1693 1
         float *      expFactor);
d1760 1
a1760 1
      WitReturnCode witSetBopEntryExpFactor (
d1763 1
a1763 1
         float        expFactor);
@


1.55
log
@Added API function witShutDownHeurAlloc.
@
text
@d1684 5
d1753 5
@


1.54
log
@Changed some C style casts to C++ style.
@
text
@d139 2
@


1.53
log
@Replaced some C-style casts with C++ style casts.
@
text
@a28 15
// Macro defApiAlloc (TheType)
//
// Declares and implements the WitRun::apiAlloc function.
// apiAlloc allocates theCvector to nElems elements.
// Uses malloc, so the theCvector can be passed back to the application program.
//------------------------------------------------------------------------------

#define defApiAlloc(TheType)                                                   \
                                                                               \
   inline void apiAlloc (TheType * & theCvector, size_t nElems) const          \
      {                                                                        \
      apiVoidAlloc ((void * &) theCvector, nElems, sizeof (TheType));          \
      }                                                                        \

//------------------------------------------------------------------------------
d2000 12
a2011 1
         // Allocates theCvector to nElems elements of size elSize.
a2013 11
         // Normally be called by apiAlloc.

      //------------------------------------------------------------------------
      // apiAlloc functions.
      //------------------------------------------------------------------------

      defApiAlloc (float)
      defApiAlloc (int)
      defApiAlloc (char)
      defApiAlloc (char *)
      defApiAlloc (float *)
@


1.52
log
@Added a function to convert from witBoolean to bool.
@
text
@a18 1
#include <wit.h>
d24 4
a80 14

      //------------------------------------------------------------------------
      // Inline public member functions.
      //------------------------------------------------------------------------

      inline static bool asaBool (witBoolean theApiBoolean)
         {
         return
            theApiBoolean?
               true:
               false;
         }
         //
         // Portably converts witBooleans to bools.
@


1.51
log
@Internal changes.
@
text
@d19 1
a24 4
typedef int witBoolean;
   //
   // See wit.h.

d80 14
d1913 10
d1962 1
a1962 1
      void apiGetBoolVec (
@


1.50
log
@Continued implementation of execPenalties on BOM entries and subs.
@
text
@d24 4
d188 1
a188 1
         WitBoolean * value);
d191 1
a191 1
         WitBoolean * value);
d194 1
a194 1
         WitBoolean * computeCriticalList);
d205 1
a205 1
         WitBoolean * execEmptyBom);
d211 1
a211 1
         WitBoolean * feasible);
d214 1
a214 1
         WitBoolean * value);
d220 1
a220 1
         WitBoolean * heurAllocActive);
d223 1
a223 1
         WitBoolean * independentOffsets);
d226 1
a226 1
         WitBoolean * localBuildAhead);
d229 1
a229 1
         WitBoolean * localMultiExec);
d235 1
a235 1
         WitBoolean * multiExec);
d238 1
a238 1
         WitBoolean * value);
d244 1
a244 1
         WitBoolean * nonMrSelSplit);
d250 1
a250 1
         WitBoolean * penExec);
d253 1
a253 1
         WitBoolean * perfPegging);
d256 1
a256 1
         WitBoolean * postprocessed);
d259 1
a259 1
         WitBoolean * prefHighStockSLBs);
d262 1
a262 1
         WitBoolean * preprocessed);
d265 1
a265 1
         WitBoolean * respectStockSLBs);
d268 1
a268 1
         WitBoolean * roundReqVols);
d271 1
a271 1
         WitBoolean * selSplit);
d274 1
a274 1
         WitBoolean * value);
d277 1
a277 1
         WitBoolean * stockRealloc);
d280 1
a280 1
         WitBoolean * stockReallocation);
d283 1
a283 1
         WitBoolean * srSelSplit);
d289 1
a289 1
         WitBoolean * value);
d292 1
a292 1
         WitBoolean * twoWayMultiExec);
d295 1
a295 1
         WitBoolean * useFocusHorizons);
d298 1
a298 1
         WitBoolean * userHeurStart);
d301 1
a301 1
         WitBoolean * value);
d307 1
a307 1
         WitBoolean autoPriority);
d310 1
a310 1
         WitBoolean buildWhenEmpty);
d313 1
a313 1
         WitBoolean computCriticalList);
d319 1
a319 1
         WitBoolean execEmptyBom);
d325 1
a325 1
         WitBoolean forcedMultiEq);
d331 1
a331 1
         WitBoolean independentOffsets);
d334 1
a334 1
         WitBoolean localBuildAhead);
d337 1
a337 1
         WitBoolean localMultiExec);
d343 1
a343 1
         WitBoolean multiExec);
d346 1
a346 1
         WitBoolean multiRoute);
d352 1
a352 1
         WitBoolean nonMrSelSplit);
d358 1
a358 1
         WitBoolean penExec);
d361 1
a361 1
         WitBoolean perfPegging);
d364 1
a364 1
         WitBoolean prefHighStockSLBs);
d367 1
a367 1
         WitBoolean respectStockSLBs);
d370 1
a370 1
         WitBoolean roundReqVols);
d373 1
a373 1
         WitBoolean selSplit);
d376 1
a376 1
         WitBoolean skipFailures);
d379 1
a379 1
         WitBoolean stockRealloc);
d382 1
a382 1
         WitBoolean stockReallocation);
d385 1
a385 1
         WitBoolean srSelSplit);
d391 1
a391 1
         WitBoolean truncOffsets);
d394 1
a394 1
         WitBoolean twoWayMultiExec);
d397 1
a397 1
         WitBoolean useFocusHorizons);
d400 1
a400 1
         WitBoolean userHeurStart);
d403 1
a403 1
         WitBoolean boolval);
d410 1
a410 1
         WitBoolean * value);
d413 1
a413 1
         WitBoolean * value);
d416 1
a416 1
         WitBoolean * value);
d422 1
a422 1
         WitBoolean * value);
d459 1
a459 1
         WitBoolean * value);
d468 1
a468 1
         WitBoolean accAfterOptImp);
d471 1
a471 1
         WitBoolean accAfterSoftLB);
d477 1
a477 1
         WitBoolean compPrices);
d504 1
a504 1
         WitBoolean optWithLotSizes);
d548 1
a548 1
         WitBoolean * baSelSplit);
d565 1
a565 1
         WitBoolean * buildAsap);
d569 1
a569 1
         WitBoolean * buildNstn);
d607 1
a607 1
         WitBoolean * exist);
d679 1
a679 1
         WitBoolean * selForDel);
d717 1
a717 1
         WitBoolean * singleSource);
d737 1
a737 1
         WitBoolean   baSelSplit);
d749 1
a749 1
         WitBoolean   buildAsap);
d753 1
a753 1
         WitBoolean   buildNstn);
d791 1
a791 1
         WitBoolean   selForDel);
d795 1
a795 1
         WitBoolean   singleSource);
d847 1
a847 1
         const WitBoolean *   asapMultiExecList);
d917 1
a917 1
         WitBoolean * prefBuildAhead);
d927 1
a927 1
         WitBoolean * selForDel);
d968 1
a968 1
         WitBoolean   asapMultiExec);
d1025 1
a1025 1
         WitBoolean   prefBuildAhead);
d1035 1
a1035 1
         WitBoolean   selForDel);
d1085 1
a1085 1
         WitBoolean * * executable);
d1093 1
a1093 1
         WitBoolean * exist);
d1145 1
a1145 1
         WitBoolean * selForDel);
d1149 1
a1149 1
         WitBoolean * twoLevelLotSizes);
d1211 1
a1211 1
         WitBoolean   selForDel);
d1215 1
a1215 1
         WitBoolean   twoLevelLotSizes);
d1294 1
a1294 1
         WitBoolean * mandEC);
d1309 1
a1309 1
         WitBoolean * selForDel);
d1314 1
a1314 1
         WitBoolean * singleSource);
d1364 1
a1364 1
         WitBoolean   mandEC);
d1374 1
a1374 1
         WitBoolean   selForDel);
d1379 1
a1379 1
         WitBoolean   singleSource);
d1450 1
a1450 1
         WitBoolean * expAllowed);
d1492 1
a1492 1
         WitBoolean * mrpNetAllowed);
d1504 1
a1504 1
         WitBoolean * netAllowed);
d1534 1
a1534 1
         WitBoolean * selForDel);
d1576 1
a1576 1
         WitBoolean   expAllowed);
d1606 1
a1606 1
         WitBoolean   mrpNetAllowed);
d1612 1
a1612 1
         WitBoolean   netAllowed);
d1642 1
a1642 1
         WitBoolean   selForDel);
d1680 1
a1680 1
         WitBoolean * byProduct);
d1690 1
a1690 1
         WitBoolean * expAllowed);
d1710 1
a1710 1
         WitBoolean * meSelSplit);
d1735 1
a1735 1
         WitBoolean * selForDel);
d1745 1
a1745 1
         WitBoolean   byProduct);
d1755 1
a1755 1
         WitBoolean   expAllowed);
d1770 1
a1770 1
         WitBoolean   meSelSplit);
d1790 1
a1790 1
         WitBoolean   selForDel);
d1800 1
a1800 1
         WitBoolean   quiet,
d1807 1
a1807 1
         WitBoolean   quiet,
d1814 1
a1814 1
         WitBoolean quiet,
d1816 1
a1816 1
         WitBoolean mesgPrintMunber);
d1820 1
a1820 1
         WitBoolean * mesgPrintMunber);
d1823 1
a1823 1
         WitBoolean quiet,
d1825 1
a1825 1
         WitBoolean mesgStopRunning);
d1829 1
a1829 1
         WitBoolean * mesgStopRunning);
d1832 1
a1832 1
         WitBoolean quiet,
d1856 1
a1856 1
      accessWrapper (WitBoolean,       wit34Compatible, myProblem ())
d1941 5
d2147 1
a2147 1
         const WitBoolean *   asapMultiExecList);
d2155 1
a2155 1
         WitBoolean   asapMultiExec);
d2162 1
a2162 1
         WitBoolean       asapMultiExec,
d2239 1
a2239 1
      WitBoolean checkMsgExtNum (int theExtNum) const;
d2241 1
a2241 1
         // Returns TRUE, iff theExtNum is the externalNumber of a Msg.
@


1.49
log
@Added penalties on BOM entries and substitutes to pen-exec.
@
text
@d1262 5
a1321 5
      WitReturnCode witGetBomEntryUsePenalty (
         const char * consumingOperationName,
         int          bomEntryIndex,
         float *      usePenalty);

d1337 5
a1386 5
      WitReturnCode witSetBomEntryUsePenalty (
         const char * operationName,
         int          bomEntryIndex,
         float        usePenalty);

d1436 6
a1543 6
      WitReturnCode witGetSubsBomEntryUsePenalty (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float *      usePenalty);

d1562 6
a1650 6

      WitReturnCode witSetSubsBomEntryUsePenalty (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         float        usePenalty);
@


1.48
log
@Continued implementation of user-specified heuristic starting solution.
@
text
@d1317 5
d1382 5
d1538 6
d1645 6
@


1.47
log
@Continued implementation of heuristic initial solution.
@
text
@a217 3
      WitReturnCode witGetHeurInitSoln (
         WitBoolean * heurInitSoln);

d293 3
a325 3
      WitReturnCode witSetHeurInitSoln (
         WitBoolean heurInitSoln);

d394 3
@


1.46
log
@Continued implementation of heuristic implosion from an initial solution.
Added some debugging code to Single-Source.
@
text
@d218 3
a223 3
      WitReturnCode witGetInitHeurSoln (
         WitBoolean * initHeurSoln);

d326 3
a330 3

      WitReturnCode witSetInitHeurSoln (
         WitBoolean initHeurSoln);
@


1.45
log
@Began implementation of heuristic implosion from an initial solution.
@
text
@a217 3
      WitReturnCode witGetHeurInitSoln (
         WitBoolean * heurInitSoln);

d221 3
a325 3
      WitReturnCode witSetHeurInitSoln (
         WitBoolean heurInitSoln);

d328 3
@


1.44
log
@Continued implementation of two-level lot sizes.
@
text
@d218 3
d325 3
@


1.43
log
@Continued implementation of two-level lot sizes.
@
text
@d1137 4
d1202 4
@


1.42
log
@Began implementation of opt implosion with lot sizes.
@
text
@d1093 8
d1105 4
d1171 8
d1182 4
@


1.41
log
@Made minor changes in order for wit to compile with the vacpp compiler.
@
text
@d448 3
d492 3
@


1.40
log
@Continued implementation of Single-Source.
@
text
@d393 1
a393 1
         WitBoolean bool);
@


1.39
log
@Continued implementation of single-source.
@
text
@d1258 5
d1317 5
@


1.38
log
@Preliminary work on single source.
@
text
@d661 4
a670 4
      WitReturnCode witGetPartSelForDel (
         const char * partName,
         WitBoolean * selForDel);

d687 4
d699 4
a710 4
      WitReturnCode witGetParts (
         int *      lenPartList,
         char * * * partList);

d773 8
a790 4
      WitReturnCode witSetPartSelForDel (
         const char * partName,
         WitBoolean   selForDel);

a897 11
      WitReturnCode witGetDemandSubVolPegging (
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   operationNameList,
         int * *      bomEntryIndexList,
         int * *      subsBomEntryIndexList,
         int * *      execPeriodList,
         float * *    peggedSubVolList);

d908 5
d928 1
a928 1
      WitReturnCode witGetDemandSelForDel (
d931 7
a937 1
         WitBoolean * selForDel);
d1016 5
a1035 5
      WitReturnCode witSetDemandSelForDel (
         const char * partName,
         const char * demandName,
         WitBoolean   selForDel);

d1456 1
a1456 1
      WitReturnCode witGetSubsBomEntrySubVol (
d1460 1
a1460 1
         float * *    subVol);
d1462 1
a1462 1
      WitReturnCode witGetSubsBomEntrySelForDel (
d1466 1
a1466 1
         WitBoolean * selForDel);
d1558 6
a1568 6

      WitReturnCode witSetSubsBomEntrySelForDel (
         const char * consumingOperationName,
         int          bomEntryIndex,
         int          subsBomEntryIndex,
         WitBoolean   selForDel);
@


1.37
log
@Continued preliminary work on single source.
@
text
@d1846 1
a1846 1
         const WitFlexVec (double) & theValue);
d1856 1
a1856 1
         const WitFlexVec (float) & theValue);
d1861 1
a1861 1
         const WitFlexVec (int) & theValue);
d1872 1
a1872 1
         const WitFlexVec (float) & theValue);
@


1.36
log
@Continued implementation of object iteration.
@
text
@d1841 1
a1841 1
         const WitTVec (float) & theValue);
d1851 1
a1851 1
         const WitTVec (int) & theValue);
@


1.35
log
@Continued implementation of object iteration.
@
text
@d103 1
a103 1
      WitReturnCode witAdvanceObjItr (WitAttr * objItrState);
@


1.34
log
@Continued implementation of object iteration.
@
text
@d103 1
a103 1
      WitReturnCode witAdvanceItr (WitAttr * curItrState);
d123 1
a123 1
      WitReturnCode witGetCurItrState (WitAttr * curItrState);
d148 1
a148 1
      WitReturnCode witResetItr ();
d523 1
a523 1
      WitReturnCode witGetItrPart (
d825 1
a825 1
      WitReturnCode witGetItrDemand (
d1038 1
a1038 1
      WitReturnCode witGetItrOperation (
d1186 1
a1186 1
      WitReturnCode witGetItrBomEntry (
d1335 1
a1335 1
      WitReturnCode witGetItrSubsBomEntry (
d1580 1
a1580 1
      WitReturnCode witGetItrBopEntry (
d1881 1
a1881 1
            WitAttr      theItrState,
d1884 2
a1885 2
         // Does error checking for witGetItr<Object> functions.
         // theItrState and theClassFragID must match the class of DelComp
@


1.33
log
@Continued implementation of object iteration.
@
text
@a19 1
#include <wit.h>
d103 2
d123 2
d148 2
d523 3
d825 4
d1038 3
d1186 4
d1335 5
d1580 4
d1879 9
@


1.32
log
@Initial implementation of selection splitting for multi-route.
@
text
@d1741 1
a1741 1
      accessWrapper (WitDataAlt *,     noopAlt,         myProblem ())
@


1.31
log
@Began implementation of selection splitting for stock reallocation.
@
text
@d234 3
d261 3
d339 3
d359 3
@


1.30
log
@Changed selStockRe attribute to stockReallocation (fullSR, internally).
@
text
@d267 3
d359 3
@


1.29
log
@Replaced uncondStockRe attribute with the old stockRealloc attribute.
@
text
@a257 3
      WitReturnCode witGetSelStockRe (
         WitBoolean * selStockRe);

d264 3
a347 3
      WitReturnCode witSetSelStockRe (
         WitBoolean selStockRe);

d353 3
@


1.28
log
@Renamed mandatory stock reallocation to unconditional stock reallocation.
@
text
@a275 3
      WitReturnCode witGetUncondStockRe (
         WitBoolean * uncondStockRe);

a364 3

      WitReturnCode witSetUncondStockRe (
         WitBoolean uncondStockRe);
@


1.27
log
@Changed attribute stockRealloc to mandStockRe.
@
text
@a224 3
      WitReturnCode witGetMandStockRe (
         WitBoolean * mandStockRe);

d276 3
a323 3
      WitReturnCode witSetMandStockRe (
         WitBoolean mandStockRe);

d368 3
@


1.26
log
@Continued implementation of selective stock reallocation.
@
text
@d225 3
d323 3
@


1.25
log
@Added selStockRealloc attribute.
@
text
@d258 2
a259 2
      WitReturnCode witGetSelStockRealloc (
         WitBoolean * selStockRealloc);
d348 2
a349 2
      WitReturnCode witSetSelStockRealloc (
         WitBoolean selStockRealloc);
@


1.24
log
@Added shadowPrice and compPrices attributes.
@
text
@d258 3
d347 3
@


1.23
log
@Minor change.
@
text
@d382 3
d434 3
d655 5
a659 1
      WitReturnCode witGetPartStockVol  (
d661 1
a661 1
         float * *    excessVol);
d663 1
a663 1
      WitReturnCode witGetPartScrapVol  (
d665 1
a665 1
         float * *    excessVol);
@


1.22
log
@Minor change.
@
text
@d237 3
a242 3
      WitReturnCode witGetPenExec (
         WitBoolean * penExec);

d330 3
a334 3

      WitReturnCode witSetPenExec (
         WitBoolean penExec);
@


1.21
log
@Continued implementation of pegging.
@
text
@d237 2
a238 2
      WitReturnCode witGetPeggingNeeded (
         WitBoolean * peggingNeeded);
d330 2
a331 2
      WitReturnCode witSetPeggingNeeded (
         WitBoolean peggingNeeded);
@


1.20
log
@Continued implementation of pegging.
@
text
@d237 2
a238 2
      WitReturnCode witGetPegging (
         WitBoolean * pegging);
d330 2
a331 2
      WitReturnCode witSetPegging (
         WitBoolean pegging);
d810 9
d844 1
a844 10
      WitReturnCode witGetDemandPeggedExecVols (
         const char * partName,
         const char * demandName,
         int          shipPeriod,
         int *        lenLists,
         char * * *   operationNameList,
         int * *      execPeriodList,
         float * *    peggedExecVolList);

      WitReturnCode witGetDemandPeggedSubVols (
@


1.19
log
@Continued implementation of pegging.
@
text
@d237 3
a242 3
      WitReturnCode witGetPerfPegging (
         WitBoolean * perfPegging);

d330 3
a334 3

      WitReturnCode witSetPerfPegging (
         WitBoolean perfPegging);
@


1.18
log
@Continued implementation of pegging.
@
text
@a191 3
      WitReturnCode witGetDoPegging (
         WitBoolean * doPegging);

d240 3
a290 3
      WitReturnCode witSetDoPegging (
         WitBoolean doPegging);

d332 3
@


1.17
log
@Initial implementation of pegging.
@
text
@d842 12
a853 1
         float * *    deltaExecVolList);
@


1.16
log
@Added meSelSplitOK development parameter.
Added meSelSplit attribute.
Refactoring for sel-split for multi-exec.
@
text
@d104 2
d192 3
d291 3
d834 9
@


1.15
log
@Used rusage for timing on AIX.
Made generic class StackSpSched use only 1 argument.
Added baSelSplit attribute.
Removed selSplit development parameter.
Added selSplitAll development parameter.
@
text
@d1529 5
d1588 5
@


1.14
log
@Re-worked the controls for selection splitting.
@
text
@d484 4
d664 4
@


1.13
log
@Added the attribute ID to the error msg for calling an API function for a
   material part attribute and giving it a capacity part.
Began implementation of the new selection splitting design.
@
text
@a660 4
      WitReturnCode witSetPartBaSplitRes (
         const char * partName,
         float        baSplitRes);

@


1.12
log
@Removed the coarse selection splitting code that's not needed for the new
design of selection splitting.
@
text
@d461 2
a462 1
         const char * partName);
@


1.11
log
@Implemented EBS lower bound adjustment for sel-split.
@
text
@d660 4
@


1.10
log
@Added print_global control parameter.
Completed a very restricted form of coarse selection splitting.
@
text
@d105 1
a105 1
         WitRun * rhsWitRun);
@


1.9
log
@Refactoring for selection splitting.
@
text
@d1947 6
a1952 6
         const char *        demandedPartName,
         const char *        demandName,
         int                 shipPeriod,
         float               desIncVol,
         WitBoolean          asapMultiExec,
         WitDemPerDynStack & theDemPers);
@


1.8
log
@Began implementation of coarse selection splitting.
Made DynStack classes more general.
@
text
@d1769 1
a1769 4
      copyCtorAndAssignment (
         WitRun);
         //
         // Prevents unintentional copying and assignment.
@


1.7
log
@Implemented respectStockSLBs and prefHighStockSLBs global attributes.
@
text
@d1950 6
a1955 6
         const char *     demandedPartName,
         const char *     demandName,
         int              shipPeriod,
         float            desIncVol,
         WitBoolean       asapMultiExec,
         WitDemPerStack & theDemPers);
@


1.6
log
@Replaced some scalar attributes with vector attributes:

   BOM entry  usageRate ==> consRate
   substitute usageRate ==> consRate
   BOP entry  prodRate  ==> productRate
@
text
@d241 3
d247 3
d327 6
@


1.5
log
@Fixed bug: MCL Client Error on emptyBom msg.
@
text
@d1093 5
d1163 5
d1239 6
d1365 6
d1518 5
d1572 5
@


1.4
log
@Finished implementing stock reallocation.
@
text
@d1691 5
@


1.3
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d250 3
d327 3
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d65 1
a65 1
class WitRun
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
