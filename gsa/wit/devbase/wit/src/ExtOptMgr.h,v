head	1.13;
access;
symbols
	sce_5_01_20080919:1.8;
locks; strict;
comment	@ * @;


1.13
date	2011.09.28.23.49.20;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.09.24.00.27.39;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.08.30.20.17.29;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.25.23.27.00;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.08.19.18.00.12;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.03.22.35.42;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.02.27.23.43.42;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.27.22.49.17;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.22.19.04.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.10.17.22.14;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.28.22.05.44;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.28.21.03.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.27.22.45.40;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ExtOptMgrH
#define ExtOptMgrH

//------------------------------------------------------------------------------
// Header file: "ExtOptMgr.h"
//
// Contains the declaration of the following class:
//
//    ExtOptMgr
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// Class ExtOptMgr
//
// "External Optimizing Implosion Manager"
// Responsible for performing most of the tasks that are specific to external
// optimizing implosion.
//------------------------------------------------------------------------------

class WitExtOptMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExtOptMgr (WitDetImpOP *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExtOptMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void getLpProb (
            WitVector <int> &    start,
            WitVector <int> &    index,
            WitVector <double> & value,
            WitVector <double> & collb,
            WitVector <double> & colub,
            WitVector <double> & obj,
            WitVector <double> & rowlb,
            WitVector <double> & rowub);
         //
         // Retrieves data specifying the LP portion of the optimization
         // problem, using "standard column major ordered format".

      void getIntVarIndices (WitVector <int> & indices);
         //
         // Retrieves a list of the column indices of all of the
         // integer-constrained variables in the optimization problem.

      void setSoln (const WitIVRealArg & theVector);
         //
         // Sets the primal solution to theVector.

      int       scrapVarIndex (WitPart *,      WitPeriod);
      int      nonSubVarIndex (WitBomEntry *,  WitPeriod);
      int         subVarIndex (WitSubEntry *,  WitPeriod);
      int        shipVarIndex (WitDemand *,    WitPeriod);
      int        execVarIndex (WitOperation *, WitPeriod);
      int       stockVarIndex (WitMaterial *,  WitPeriod);
      int     cumShipVarIndex (WitDemand *,    WitPeriod);
      int    execSlbvVarIndex (WitOperation *, WitPeriod);
      int   stockSlbvVarIndex (WitMaterial *,  WitPeriod);
      int cumShipSlbvVarIndex (WitDemand *,    WitPeriod);
         //
         // Each of the above functions returns the colmun index of the
         // indicated opt variable corresponding to the arguments, or -1, if no
         // such variable exists.
         //
         // Indicated variables:
         //    Scrap
         //    Non-Substitution
         //    Substitution
         //    Shipment
         //    Execution
         //    Stock
         //    Cumulative Shipment
         //    Execution           SLBV
         //    Stock               SLBV
         //    Cumulative Shipment SLBV

      int   resourceConIndex (WitPart *,      WitPeriod);
      int        subConIndex (WitBomEntry *,  WitPeriod);
      int       shipConIndex (WitDemand *,    WitPeriod);
      int    execSlbConIndex (WitOperation *, WitPeriod);
      int   stockSlbConIndex (WitMaterial *,  WitPeriod);
      int cumShipSlbConIndex (WitDemand *,    WitPeriod);
         //
         // Each of the above functions returns the row index of the indicated
         // constraint corresponding to the arguments, or -1, if no such
         // constraint exists.
         //
         // Indicated constraints:
         //    Resource Allocation
         //    Substitution
         //    Shipment Cumulation
         //    Execution           SLB
         //    Stock               SLB
         //    Cumulative Shipment SLB

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, solnProvided)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void getColData (
            WitVector <double> & collb,
            WitVector <double> & colub,
            WitVector <double> & obj);
         //
         // Retrieves data specifying column data for the optimization problem,
         // for getProb (...).

      void getRowData (
            WitVector <double> & rowlb,
            WitVector <double> & rowub);
         //
         // Retrieves data specifying row data for the optimization problem,
         // for getProb (...).

      int slbvVarIndexOf (WitBoundedVar * theBoundedVar);
         //
         // Returns the index of the SlbvVar for theBoundedVar, if any;
         // otherwise -1.

      int slbConIndexOf (WitBoundedVar * theBoundedVar);
         //
         // Returns the index of the SlbCon for theBoundedVar, if any;
         // otherwise -1.

      int indexOf (WitOptVC * theOptVC);
         //
         // Returns theOptVC->index (), or -1, if theOptVC is NULL.

      noCopyCtorAssign (WitExtOptMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDetImpOP * const myDetImpOP_;
         //
         // The DetImpOP for this ExtOptMgr.

      bool solnProvided_;
         //
         // True, iff a solution has been provides through setSoln.
   };

#endif
@


1.12
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.11
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d32 2
a33 106
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitExtOptMgr (WitDetImpOP *);

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitExtOptMgr ();

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

void getLpProb (
WitVector <int> &    start,
WitVector <int> &    index,
WitVector <double> & value,
WitVector <double> & collb,
WitVector <double> & colub,
WitVector <double> & obj,
WitVector <double> & rowlb,
WitVector <double> & rowub);
//
// Retrieves data specifying the LP portion of the optimization
// problem, using "standard column major ordered format".

void getIntVarIndices (WitVector <int> & indices);
//
// Retrieves a list of the column indices of all of the
// integer-constrained variables in the optimization problem.

void setSoln (const WitIVRealArg & theVector);
//
// Sets the primal solution to theVector.

int       scrapVarIndex (WitPart *,      WitPeriod);
int      nonSubVarIndex (WitBomEntry *,  WitPeriod);
int         subVarIndex (WitSubEntry *,  WitPeriod);
int        shipVarIndex (WitDemand *,    WitPeriod);
int        execVarIndex (WitOperation *, WitPeriod);
int       stockVarIndex (WitMaterial *,  WitPeriod);
int     cumShipVarIndex (WitDemand *,    WitPeriod);
int    execSlbvVarIndex (WitOperation *, WitPeriod);
int   stockSlbvVarIndex (WitMaterial *,  WitPeriod);
int cumShipSlbvVarIndex (WitDemand *,    WitPeriod);
//
// Each of the above functions returns the colmun index of the
// indicated opt variable corresponding to the arguments, or -1, if no
// such variable exists.
//
// Indicated variables:
//    Scrap
//    Non-Substitution
//    Substitution
//    Shipment
//    Execution
//    Stock
//    Cumulative Shipment
//    Execution           SLBV
//    Stock               SLBV
//    Cumulative Shipment SLBV

int   resourceConIndex (WitPart *,      WitPeriod);
int        subConIndex (WitBomEntry *,  WitPeriod);
int       shipConIndex (WitDemand *,    WitPeriod);
int    execSlbConIndex (WitOperation *, WitPeriod);
int   stockSlbConIndex (WitMaterial *,  WitPeriod);
int cumShipSlbConIndex (WitDemand *,    WitPeriod);
//
// Each of the above functions returns the row index of the indicated
// constraint corresponding to the arguments, or -1, if no such
// constraint exists.
//
// Indicated constraints:
//    Resource Allocation
//    Substitution
//    Shipment Cumulation
//    Execution           SLB
//    Stock               SLB
//    Cumulative Shipment SLB

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (bool, solnProvided)

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

void getColData (
WitVector <double> & collb,
WitVector <double> & colub,
WitVector <double> & obj);
//
// Retrieves data specifying column data for the optimization problem,
// for getProb (...).
d35 139
a173 35
void getRowData (
WitVector <double> & rowlb,
WitVector <double> & rowub);
//
// Retrieves data specifying row data for the optimization problem,
// for getProb (...).

int slbvVarIndexOf (WitBoundedVar * theBoundedVar);
//
// Returns the index of the SlbvVar for theBoundedVar, if any;
// otherwise -1.

int slbConIndexOf (WitBoundedVar * theBoundedVar);
//
// Returns the index of the SlbCon for theBoundedVar, if any;
// otherwise -1.

int indexOf (WitOptVC * theOptVC);
//
// Returns theOptVC->index (), or -1, if theOptVC is NULL.

noCopyCtorAssign (WitExtOptMgr);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitDetImpOP * const myDetImpOP_;
//
// The DetImpOP for this ExtOptMgr.

bool solnProvided_;
//
// True, iff a solution has been provides through setSoln.
};
@


1.10
log
@Removed COIN from WIT.
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d32 106
a137 2
   {
   public:
d139 35
a173 139
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitExtOptMgr (WitDetImpOP *);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitExtOptMgr ();

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      void getLpProb (
            WitVector <int> &    start,
            WitVector <int> &    index,
            WitVector <double> & value,
            WitVector <double> & collb,
            WitVector <double> & colub,
            WitVector <double> & obj,
            WitVector <double> & rowlb,
            WitVector <double> & rowub);
         //
         // Retrieves data specifying the LP portion of the optimization
         // problem, using "standard column major ordered format".

      void getIntVarIndices (WitVector <int> & indices);
         //
         // Retrieves a list of the column indices of all of the
         // integer-constrained variables in the optimization problem.

      void setSoln (const WitIVRealArg & theVector);
         //
         // Sets the primal solution to theVector.

      int       scrapVarIndex (WitPart *,      WitPeriod);
      int      nonSubVarIndex (WitBomEntry *,  WitPeriod);
      int         subVarIndex (WitSubEntry *,  WitPeriod);
      int        shipVarIndex (WitDemand *,    WitPeriod);
      int        execVarIndex (WitOperation *, WitPeriod);
      int       stockVarIndex (WitMaterial *,  WitPeriod);
      int     cumShipVarIndex (WitDemand *,    WitPeriod);
      int    execSlbvVarIndex (WitOperation *, WitPeriod);
      int   stockSlbvVarIndex (WitMaterial *,  WitPeriod);
      int cumShipSlbvVarIndex (WitDemand *,    WitPeriod);
         //
         // Each of the above functions returns the colmun index of the
         // indicated opt variable corresponding to the arguments, or -1, if no
         // such variable exists.
         //
         // Indicated variables:
         //    Scrap
         //    Non-Substitution
         //    Substitution
         //    Shipment
         //    Execution
         //    Stock
         //    Cumulative Shipment
         //    Execution           SLBV
         //    Stock               SLBV
         //    Cumulative Shipment SLBV

      int   resourceConIndex (WitPart *,      WitPeriod);
      int        subConIndex (WitBomEntry *,  WitPeriod);
      int       shipConIndex (WitDemand *,    WitPeriod);
      int    execSlbConIndex (WitOperation *, WitPeriod);
      int   stockSlbConIndex (WitMaterial *,  WitPeriod);
      int cumShipSlbConIndex (WitDemand *,    WitPeriod);
         //
         // Each of the above functions returns the row index of the indicated
         // constraint corresponding to the arguments, or -1, if no such
         // constraint exists.
         //
         // Indicated constraints:
         //    Resource Allocation
         //    Substitution
         //    Shipment Cumulation
         //    Execution           SLB
         //    Stock               SLB
         //    Cumulative Shipment SLB

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (bool, solnProvided)

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      void getColData (
            WitVector <double> & collb,
            WitVector <double> & colub,
            WitVector <double> & obj);
         //
         // Retrieves data specifying column data for the optimization problem,
         // for getProb (...).

      void getRowData (
            WitVector <double> & rowlb,
            WitVector <double> & rowub);
         //
         // Retrieves data specifying row data for the optimization problem,
         // for getProb (...).

      int slbvVarIndexOf (WitBoundedVar * theBoundedVar);
         //
         // Returns the index of the SlbvVar for theBoundedVar, if any;
         // otherwise -1.

      int slbConIndexOf (WitBoundedVar * theBoundedVar);
         //
         // Returns the index of the SlbCon for theBoundedVar, if any;
         // otherwise -1.

      int indexOf (WitOptVC * theOptVC);
         //
         // Returns theOptVC->index (), or -1, if theOptVC is NULL.

      noCopyCtorAssign (WitExtOptMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitDetImpOP * const myDetImpOP_;
         //
         // The DetImpOP for this ExtOptMgr.

      bool solnProvided_;
         //
         // True, iff a solution has been provides through setSoln.
   };
@


1.9
log
@CPLEX
@
text
@d62 1
a62 3
         // problem, using "standard column major ordered format". On return,
         // the args can be passed to the following COIN function:
         //    OsiSolverInterface::loadProblem (...).
@


1.8
log
@Stochastic Implosion
@
text
@d39 1
a39 1
      WitExtOptMgr (WitDetImpOM *);
d62 1
a62 1
         // model, using "standard column major ordered format". On return,
d69 1
a69 1
         // integer-constrained variables in the optimization model.
d138 1
a138 1
         // Retrieves data specifying column data for the optimization model,
d145 1
a145 1
         // Retrieves data specifying row data for the optimization model,
d168 1
a168 1
      WitDetImpOM * const myDetImpOM_;
d170 1
a170 1
         // The DetImpOM for this ExtOptMgr.
@


1.7
log
@Stochastic Implosion
@
text
@d62 1
a62 1
         // problem, using "standard column major ordered format". On return,
d69 1
a69 1
         // integer-constrained variables in the optimization problem.
d138 1
a138 1
         // Retrieves data specifying column data for the optimization problem,
d145 1
a145 1
         // Retrieves data specifying row data for the optimization problem,
@


1.6
log
@Stochastic Implosion
@
text
@d39 1
a39 1
      WitExtOptMgr (WitDetImpOP *);
d168 1
a168 1
      WitDetImpOP * const myDetImpOP_;
d170 1
a170 1
         // The DetImpOP for this ExtOptMgr.
@


1.5
log
@Stochastic Implosion
@
text
@d158 1
a158 1
      int indexOf (WitOptProbEl * theOptProbEl);
d160 1
a160 1
         // Returns theOptProbEl->index (), or -1, if theOptProbEl is NULL.
@


1.4
log
@Stochastic Implosion
@
text
@d39 1
a39 1
      WitExtOptMgr (WitImpOptProb *);
d168 1
a168 1
      WitImpOptProb * const myImpOptProb_;
d170 1
a170 1
         // The ImpOptProb for this ExtOptMgr.
@


1.3
log
@External opt implosion.
@
text
@d26 1
a26 1
// "External Optimizing Implosion Handler"
@


1.2
log
@External opt implosion.
@
text
@d121 6
d171 4
@


1.1
log
@External opt implosion.
@
text
@d66 1
a66 1
      void getIntVars (WitVector <int> & indices);
@

