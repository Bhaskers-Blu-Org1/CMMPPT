head	1.24;
access;
symbols
	sce_5_01_20080919:1.21
	latest_sce_4_20_20060523:1.19.0.2
	sce_4_20_20060523:1.19
	latest_sce4_20_OSL:1.18.0.2
	sce_4_20_OSL:1.18
	sce_410_withVa:1.17
	sce_4_05_20040511:1.17
	sce_4_00_20040201:1.14
	nextGenBranch:1.12.0.2
	nextGenRoot:1.12
	sce_3_30_20030627:1.12
	EndRw-branch:1.10.0.4
	Root-of-EndRw:1.10
	rwToStl:1.10.0.2
	latest_sce_3_10_20010924:1.6.0.4
	sce_3_10_20010924:1.6
	latest_sce_3_00_20010601:1.6.0.2
	sce_3_00_20010601:1.6
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5;
locks; strict;
comment	@ * @;


1.24
date	2011.09.28.23.50.36;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.24.00.28.51;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.08.30.20.18.20;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.02.27.19.59.33;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.08.22.47.36;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.02.17.34.14;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.22.14.59.51;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.30.23.27.44;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.14.21.16.18;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.13.21.50.14;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.11.18.37.27;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.09.22.44.06;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.15.21.01.26;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.13.22.22.15;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.07.20.15.05;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.03.23.16.42;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.02.20.53.16;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.18.14.02.46;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.25.14.53.28;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.02.19.24.07;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.20.00.44.22;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.28.22.13.40;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.20.20.08.38;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.06.19.58.42;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef TVecH
#define TVecH

//------------------------------------------------------------------------------
// Header file: "TVec.h"
//
// Contains the declaration and inline implementation of class template TVec.
//------------------------------------------------------------------------------

#include <Vector.h>

//------------------------------------------------------------------------------
// Class template TVec <Elem>
//
// A WitVector <Elem> of length Problem::nPeriods, for some Problem.
// Implemented by inheriting from WitVector <Elem>.
// Implemented in Vecs.C.
//------------------------------------------------------------------------------

template <typename Elem> 
      class WitTVec: public WitVector <Elem>
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTVec ();

      WitTVec (WitProblem *, Elem initValue);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitTVec ();

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      inline void operator = (const WitTVec & theTVec)
         {
         thisVector () = theTVec;
         }

      inline void operator = (Elem theScalar)
         {
         thisVector () = theScalar;
         }

      inline void operator = (const Elem * theCVec)
         {
         thisVector () = theCVec;
         }

      void operator = (const WitFlexVec <Elem> &);

      void allocate (WitProblem *, Elem theScalar);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      inline WitVector <Elem> & thisVector ()
         {
         return (* this);
         }

      noCopyCtor (WitTVec);
   };

#endif
@


1.23
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.22
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d29 4
a32 4
template <typename Elem>
class WitTVec: public WitVector <Elem>
{
public:
d34 3
a36 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d38 1
a38 1
WitTVec ();
d40 1
a40 1
WitTVec (WitProblem *, Elem initValue);
d42 3
a44 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d46 1
a46 1
~WitTVec ();
d48 3
a50 3
//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------
d52 4
a55 4
inline void operator = (const WitTVec & theTVec)
{
thisVector () = theTVec;
}
d57 4
a60 4
inline void operator = (Elem theScalar)
{
thisVector () = theScalar;
}
d62 4
a65 4
inline void operator = (const Elem * theCVec)
{
thisVector () = theCVec;
}
d67 1
a67 1
void operator = (const WitFlexVec <Elem> &);
d69 1
a69 1
void allocate (WitProblem *, Elem theScalar);
d71 1
a71 1
private:
d73 3
a75 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d77 4
a80 4
inline WitVector <Elem> & thisVector ()
{
return (* this);
}
d82 2
a83 2
noCopyCtor (WitTVec);
};
@


1.21
log
@Rescinded all changed made since 1/31/07.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d29 4
a32 4
template <typename Elem> 
      class WitTVec: public WitVector <Elem>
   {
   public:
d34 3
a36 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d38 1
a38 1
      WitTVec ();
d40 1
a40 1
      WitTVec (WitProblem *, Elem initValue);
d42 3
a44 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d46 1
a46 1
      ~WitTVec ();
d48 3
a50 3
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------
d52 4
a55 4
      inline void operator = (const WitTVec & theTVec)
         {
         thisVector () = theTVec;
         }
d57 4
a60 4
      inline void operator = (Elem theScalar)
         {
         thisVector () = theScalar;
         }
d62 4
a65 4
      inline void operator = (const Elem * theCVec)
         {
         thisVector () = theCVec;
         }
d67 1
a67 1
      void operator = (const WitFlexVec <Elem> &);
d69 1
a69 1
      void allocate (WitProblem *, Elem theScalar);
d71 1
a71 1
   private:
d73 3
a75 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d77 4
a80 4
      inline WitVector <Elem> & thisVector ()
         {
         return (* this);
         }
d82 2
a83 2
      noCopyCtor (WitTVec);
   };
@


1.20
log
@[disallowed backlog]
@
text
@d40 1
a40 1
      WitTVec (WitProblem *, Elem initValue = static_cast <Elem> (0));
@


1.19
log
@Updated the copyright date on all source files.
@
text
@d40 1
a40 1
      WitTVec (WitProblem *, Elem initValue);
@


1.18
log
@[multi-thread]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.17
log
@PIP.
@
text
@d22 1
a22 1
// Class template TVec <TheType>
d24 2
a25 2
// A WitVector <TheType> of length Problem::nPeriods, for some Problem.
// Implemented by inheriting from WitVector <TheType>.
d29 2
a30 2
template <typename TheType> 
      class WitTVec: public WitVector <TheType>
d40 1
a40 1
      WitTVec (WitProblem *, TheType initValue);
d57 1
a57 1
      inline void operator = (TheType theScalar)
d62 1
a62 1
      inline void operator = (const TheType * theCVec)
d67 1
a67 1
      void operator = (const WitFlexVec <TheType> &);
d69 1
a69 1
      void allocate (WitProblem *, TheType theScalar);
d77 1
a77 1
      inline WitVector <TheType> & thisVector ()
@


1.16
log
@Double Precision.
@
text
@a21 15
// Namespace TVecUtil
//
// Functions used by class template TVec <TheType>
// Implemented in Vecs.C.
//------------------------------------------------------------------------------

namespace WitTVecUtil
{

int nPeriodsForTVec (WitProblem *);

// Leaving namespace NonClass.
}

//------------------------------------------------------------------------------
d26 1
d38 1
a38 4
      inline WitTVec ():
            WitVector <TheType> ()
         {
         }
d40 1
a40 5
      inline WitTVec (WitProblem * theProblem, TheType initValue):
            WitVector <TheType> ()
         {
         allocate (theProblem, initValue);
         }
d46 1
a46 3
      inline ~WitTVec ()
         {
         }
d67 3
a69 4
      inline void allocate (WitProblem * theProblem, TheType theScalar)
         {
         resize (WitTVecUtil::nPeriodsForTVec (theProblem), theScalar);
         }
@


1.15
log
@Double Precision.
@
text
@d77 1
a77 1
         WitVector <TheType>::operator = (theTVec);
d80 1
a80 1
      inline void allocate (WitProblem * theProblem, TheType theValue)
d82 11
a92 2
         WitVector <TheType>::resize (
            WitTVecUtil::nPeriodsForTVec (theProblem), theValue);
d100 5
@


1.14
log
@Continued implementation of PIP.
@
text
@d75 5
d92 1
a92 1
      noCopyCtorAssign (WitTVec);
@


1.13
log
@Continued implementation of PIP.
@
text
@d29 6
a34 3
   {
   int nPeriodsForTVec (WitProblem *);
   }
@


1.12
log
@Various internal changes.
@
text
@d22 4
a25 1
// Global function used by class template TVec <TheType>
d28 4
a31 3
int nPeriodsForTVec (WitProblem * theProblem);
   //
   // Implemented in Vecs.C.
d74 2
a75 1
         WitVector <TheType>::resize (nPeriodsForTVec (theProblem), theValue);
@


1.11
log
@Various internal changes.
@
text
@d79 1
a79 1
      noCopyCtorAssignTemp (WitTVec, TheType);
@


1.10
log
@Continued preliminary work on single source.
@
text
@d36 1
a36 1
template <class TheType> 
@


1.9
log
@Continued preliminary work on single source.
@
text
@d22 8
d51 1
a51 1
            WitVector <TheType> (theProblem->nPeriods (), initValue)
d53 1
d70 1
a70 1
         WitVector <TheType>::resize (theProblem->nPeriods (), theValue);
@


1.8
log
@Preliminary work on single source.
@
text
@d16 1
a16 1
// Contains the declaration of generic class TVec.
d22 1
a22 1
// generic class TVec (TheType)
a25 1
// Implemented in Vecs.C.
d28 41
a68 68
//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitTVecdeclare(TheType)                                                \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitTVec (TheType): public WitVector <TheType>                            \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitTVec (TheType) ();                                                    \
         /*                                                                  */\
         /* Constructs an instance with 0 elements.                          */\
                                                                               \
      WitTVec (TheType) (WitProblem * theProblem, TheType initValue);          \
                                                                               \
         /* Constructs an instance with theProblem->nPeriods () elements.    */\
         /* Each element is initialized to initValue.                        */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitTVec (TheType) ();                                                   \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Public member functions.                                            */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      void allocate (WitProblem * theProblem, TheType theValue);               \
         /*                                                                  */\
         /* Resizes this TVec to theProblem->nPeriods () elements.           */\
         /* The elements are all set to theValue.                            */\
                                                                               \
      inline void operator = (TheType theValue)                                \
         {                                                                     \
         WitVector <TheType>::setTo (theValue);                                \
         }                                                                     \
                                                                               \
      inline void operator = (const WitTVec (TheType) & theVector)             \
         {                                                                     \
         WitVector <TheType>::copy (theVector);                                \
         }                                                                     \
                                                                               \
      inline void operator = (const TheType * theCvector)                      \
         {                                                                     \
         WitVector <TheType>::copy (theCvector);                               \
         }                                                                     \
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtor (WitTVec (TheType));                                          \
   };                                                                          \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------
d70 2
a71 4
declare (WitTVec, WitTlObjPtr)
declare (WitTVec, int)
declare (WitTVec, float)
declare (WitTVec, double)
@


1.7
log
@Began implementation of object iteration.
@
text
@d24 2
a25 2
// A WitVector (TheType) of length Problem::nPeriods, for some Problem.
// Implemented by inheriting from WitVector (TheType).
d37 1
a37 1
class WitTVec (TheType): public WitVector (TheType)                            \
d71 1
a71 1
         WitVector (TheType)::operator = (theValue);                           \
d76 1
a76 1
         WitVector (TheType)::operator = (theVector);                          \
d81 1
a81 1
         WitVector (TheType)::operator = (theCvector);                         \
@


1.6
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@d19 1
a19 1
#include <Str.h>
@


1.5
log
@Changed name of String.h to be Str.h to avoid windows build problems
@
text
@d98 1
a98 1
declare (WitTVec, WitTlPtr)
@


1.4
log
@Implemented and used class SelMgr.
@
text
@d19 1
a19 1
#include <String.h>
@


1.3
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d26 1
a26 1
// Implemented in Vector.C.
@


1.2
log
@Further development of coarse selection splitting.
@
text
@d94 2
a95 2
// Declarations of all specific cases of the generic classes and functions
// declared in this file.
@


1.1
log
@Some minor changes.
@
text
@d98 1
a98 1
declare (WitTVec, WitTypelessPtr)
@

