head	1.32;
access;
symbols
	sce_5_01_20080919:1.29
	latest_sce_4_20_20060523:1.29.0.2
	sce_4_20_20060523:1.29
	latest_sce4_20_OSL:1.28.0.2
	sce_4_20_OSL:1.28
	sce_410_withVa:1.28
	sce_4_05_20040511:1.18
	sce_4_00_20040201:1.18
	nextGenBranch:1.18.0.2
	nextGenRoot:1.18
	sce_3_30_20030627:1.18
	EndRw-branch:1.15.0.4
	Root-of-EndRw:1.15
	rwToStl:1.15.0.2
	latest_sce_3_10_20010924:1.10.0.2
	sce_3_10_20010924:1.10;
locks; strict;
comment	@ * @;


1.32
date	2011.09.28.23.49.33;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.09.24.00.27.53;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.08.30.20.17.38;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.02.17.34.02;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2005.01.01.00.43.13;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2004.12.31.18.28.28;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2004.12.20.18.36.24;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2004.12.17.21.53.00;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2004.12.16.23.35.16;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.15.23.50.10;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.14.22.37.10;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.13.23.35.47;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.10.16.49.43;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.09.19.22.50;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.19.16.48.18;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.07.21.34.16;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.02.22.18.32;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.26.19.05.26;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.16.23.32.07;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.08.19.21.52;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.13.19.27.19;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.07.23.24.27;	author bobw;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.17.18.56.28;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.23.21.13.53;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.22.20.41.49;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.12.19.58.25;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.06.16.13.37;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.28.23.11.15;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.27.21.45.11;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.21.18.24.31;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.21.15.40.04;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.20.20.07.04;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MrCandH
#define MrCandH

//------------------------------------------------------------------------------
// Header file: "MrCand.h"
//
// Contains the declaration of class MrCand.
//------------------------------------------------------------------------------

#include <SelCand.h>

//------------------------------------------------------------------------------
// Class MrCand.
//
// "Multi-Route Candidate"
// Represents a candidate for selection by multi-route.
//
// Class Hierarchy:
//
// SelCand
//    MrCand
//
// Implemented in MultiRoute.C.
//------------------------------------------------------------------------------

class WitMrCand: public WitSelCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrCand (WitRtCand *);

   private:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitMrCand ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void prtID     ();
      virtual void getMrData (WitRtCand * &);
         //
         // Overrides from class SelCand.

      noCopyCtorAssign (WitMrCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitRtCand * const myRtCand_;
         //
         // The RtCand for this MrCand.
   };

#endif
@


1.31
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.30
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d36 2
a37 2
{
public:
d39 3
a41 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d43 1
a43 1
WitMrCand (WitRtCand *);
d45 1
a45 1
private:
d47 3
a49 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d51 1
a51 1
virtual ~WitMrCand ();
d53 3
a55 3
//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------
d57 4
a60 4
virtual void prtID     ();
virtual void getMrData (WitRtCand * &);
//
// Overrides from class SelCand.
d62 1
a62 1
noCopyCtorAssign (WitMrCand);
d64 3
a66 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d68 4
a71 4
WitRtCand * const myRtCand_;
//
// The RtCand for this MrCand.
};
@


1.29
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d36 2
a37 2
   {
   public:
d39 3
a41 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d43 1
a43 1
      WitMrCand (WitRtCand *);
d45 1
a45 1
   private:
d47 3
a49 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d51 1
a51 1
      virtual ~WitMrCand ();
d53 3
a55 3
      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d57 4
a60 4
      virtual void prtID     ();
      virtual void getMrData (WitRtCand * &);
         //
         // Overrides from class SelCand.
d62 1
a62 1
      noCopyCtorAssign (WitMrCand);
d64 3
a66 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d68 4
a71 4
      WitRtCand * const myRtCand_;
         //
         // The RtCand for this MrCand.
   };
@


1.28
log
@Low-Pri Prop-Rt.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.27
log
@Low-Pri Prop-Rt.
@
text
@d43 1
a43 1
      WitMrCand (WitMrPt *);
d57 2
a58 3
      virtual void prtID            ();
      virtual void restoreSelToThis ();
      virtual void getMrData        (WitRtCand * &);
a67 4
      WitMrPt * const myMrPt_;
         //
         // The MrPt at which this MrCand represents a candidate for selection.

@


1.26
log
@Low-Pri Prop-Rt.
@
text
@a57 1
      virtual void updateToCurSel   ();
d73 1
a73 1
      WitRtCand * myRtCand_;
@


1.25
log
@Low-Pri Prop-Rt.
@
text
@a44 6
      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (WitRtCand *, myRtCand)

d57 4
a60 4
      virtual void        prtID            ();
      virtual void        updateToCurSel   ();
      virtual void        restoreSelToThis ();
      virtual WitMrCand * myMrCand         ();
@


1.24
log
@Low-Pri Prop-Rt.
@
text
@d43 1
a43 1
      WitMrCand (WitMrSelMgr *);
d46 1
a46 1
      // Destructor function.
d49 3
a51 1
      virtual ~WitMrCand ();
d54 1
a54 1
      // Data access functions.
d57 1
a57 3
      accessFunc (WitRtCand *, myRtCand)

   private:
d60 1
a60 1
      // Private member functions.
d64 1
a66 1
      virtual void        setToCurSelOf    (WitMrPt  *);
d76 1
a76 1
      WitMrPt * myMrPt_;
a78 1
         // Valid only when this MrCand is active.
a82 1
         // Valid only when this MrCand is active.
@


1.23
log
@Low-Pri Prop-Rt.
@
text
@d63 4
a66 3
      virtual void        prtID         ();
      virtual WitMrCand * myMrCand      ();
      virtual void        setToCurSelOf (WitMrPt  *);
d76 5
d83 2
a84 1
         // The RtCand for this MrCand, if any; otherwise NULL.
@


1.22
log
@Low-Pri Prop-Rt.
@
text
@a51 8
      // Other public member functions.
      //------------------------------------------------------------------------

      void setToCurSel (WitMrPt * theMrPt);
         //
         // Sets this MrCand to represent the current selection at theMrPt.

      //------------------------------------------------------------------------
d63 3
a65 2
      virtual void        prtID    ();
      virtual WitMrCand * myMrCand ();
d77 1
a77 1
         // The RtCand for this MrCand.
@


1.21
log
@Low-Pri Prop-Rt.
@
text
@d43 1
a43 1
      WitMrCand (WitRtCand *, WitMrSelMgr *);
d52 8
@


1.20
log
@Low-Pri Prop-Rt.
@
text
@d43 1
a43 1
      WitMrCand (WitRtCand *);
d74 1
a74 1
      WitRtCand * const myRtCand_;
@


1.19
log
@Low-Pri Prop-Rt.
@
text
@a51 6
      // Overrides from class SelCand.
      //------------------------------------------------------------------------

      virtual WitMrCand * myMrCand ();

      //------------------------------------------------------------------------
d63 2
a64 1
      virtual void prtID ();
d66 1
a66 1
         // Override from class SelCand.
@


1.18
log
@Continued implementation of proportionate routing.
@
text
@d43 1
a43 1
      WitMrCand (WitRtCand *, WitMrSite *);
a57 13
      // Other public member functions.
      //------------------------------------------------------------------------

      bool valid (WitPeriod thePer);
         //
         // Returns true, iff this MrCand is currently valid for selection in
         // thePer.

      void setPrevSel (WitPeriod thePer, bool theVal);
         //
         // Sets prevSel_[thePer] to theVal.

      //------------------------------------------------------------------------
a61 9
      accessFunc (WitMrSite *, myMrSite)

      inline bool prevSel (WitPeriod thePer)
         {
         return
            prevSel_.isAllocated ()?
               prevSel_[thePer]:
               false;
         }
a81 14

      WitMrSite * const myMrSite_;
         //
         // The MrSite that owns this MrCand.

      WitTVec <bool> prevSel_;
         //
         // If prevSel_ is allocated:
         //    prevSel_[thePer] is true, iff the currently selected candidate
         //    has been previously selected in thePer.
         //
         // Otherwise:
         //    The currently selected candidate has not been previously selected
         //    in any period.
@


1.17
log
@Continued implementation of proportionate routing.
@
text
@d16 1
a16 5
// Contains the declaration of the following classes:
//
//    MrCand.
//    PmrCand.
//    CmrCand.
a30 2
//       PmrCand
//       CmrCand
d40 6
a69 6
      virtual void getMyComp (WitBopEntry  * &) = 0;
      virtual void getMyComp (WitConsEntry * &) = 0;
         //
         // If the candidate component for this MrCand matches the argument,
         // the argument is set to it. Otherwise an error is issued.

d75 1
a84 8
   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrCand (WitRtCand *, WitMrSite *);

a117 114
   };

//------------------------------------------------------------------------------
// Class PmrCand
//
// "Production Multi-Route Candidate"
// Represents a candidate BopEntry for selection by production multi-route.
//
// Class Hierarchy:
//
// SelCand
//    MrCand
//       PmrCand
//
// Implemented in MultiRoute.C.
//------------------------------------------------------------------------------

class WitPmrCand: public WitMrCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPmrCand (WitBopEntry *, WitPmrSite *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPmrCand ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void getMyComp (WitBopEntry  * &);
      virtual void getMyComp (WitConsEntry * &);
         //
         // Overrides from class MrCand.

      noCopyCtorAssign (WitPmrCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitBopEntry * const myBopEnt_;
         //
         // The BopEntry for this PmrCand.
   };

//------------------------------------------------------------------------------
// Class CmrCand
//
// "Consumption Multi-Route Candidate"
// Represents a candidate ConsEntry for selection by consumption multi-route.
//
// Class Hierarchy:
//
// SelCand
//    MrCand
//       CmrCand
//
// Implemented in MultiRoute.C.
//------------------------------------------------------------------------------

class WitCmrCand: public WitMrCand
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitCmrCand (WitConsEntry *, WitCmrSite *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitCmrCand ();

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual void getMyComp (WitBopEntry  * &);
      virtual void getMyComp (WitConsEntry * &);
         //
         // Overrides from class MrCand.

      noCopyCtorAssign (WitCmrCand);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitConsEntry * const myConsEnt_;
         //
         // The ConsEntry for this CmrCand.
@


1.16
log
@Internal changes.
@
text
@a65 5
      virtual bool isEligible (WitPeriod thePer) = 0;
         //
         // Returns true, iff the candidate component is eligible to be selected
         // in thePer.

a69 4
      virtual void prtAsSel () = 0;
         //
         // Prints this MrCand as a selection.

d80 2
a92 4
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
d96 1
a96 1
      WitMrCand (WitMrSite *);
d104 4
d114 4
d174 2
a175 8
      virtual void prtID ();
         //
         // Override from class SelCand.

      virtual bool isEligible (WitPeriod);
      virtual void prtAsSel   ();
      virtual void getMyComp  (WitBopEntry  * &);
      virtual void getMyComp  (WitConsEntry * &);
d231 2
a232 8
      virtual void prtID ();
         //
         // Override from class SelCand.

      virtual bool isEligible (WitPeriod);
      virtual void prtAsSel   ();
      virtual void getMyComp  (WitBopEntry  * &);
      virtual void getMyComp  (WitConsEntry * &);
@


1.15
log
@Began implementation of multi-level lot sizes.
@
text
@d61 1
a61 1
      WitBoolean valid (WitPeriod thePer);
d63 1
a63 1
         // Returns TRUE, iff this MrCand is currently valid for selection in
d66 1
a66 1
      virtual WitBoolean isEligible (WitPeriod thePer) = 0;
d68 1
a68 1
         // Returns TRUE, iff the candidate component is eligible to be selected
d71 1
a71 1
      void setPrevSel (WitPeriod thePer, WitBoolean theVal);
d89 1
a89 1
      inline WitBoolean prevSel (WitPeriod thePer)
d94 1
a94 1
               witFALSE;
d125 1
a125 1
      WitTVec <WitBoolean> prevSel_;
d128 1
a128 1
         //    prevSel_[thePer] is TRUE, iff the currently selected candidate
d181 4
a184 4
      virtual WitBoolean isEligible (WitPeriod);
      virtual void       prtAsSel   ();
      virtual void       getMyComp  (WitBopEntry  * &);
      virtual void       getMyComp  (WitConsEntry * &);
d244 4
a247 4
      virtual WitBoolean isEligible (WitPeriod);
      virtual void       prtAsSel   ();
      virtual void       getMyComp  (WitBopEntry  * &);
      virtual void       getMyComp  (WitConsEntry * &);
@


1.14
log
@Continued implementation of single source.
@
text
@d16 5
a20 1
// Contains the declaration of class template MrCand <MrArgs>.
a22 1
#include <MrMgr.h>
d26 1
a26 1
// Class template MrCand <MrArgs>
a30 3
// For more information on this template, see:
//    "General Comments on the Multi-Route Class Templates" in MrMgr.h.
//
d34 3
a36 1
//    MrCand <MrArgs>
d38 1
a38 3
// Parametric     implementation         in MultiRoute_TI.h.
// Non-parametric implementation for Pmr in ProdMR.C.
// Non-parametric implementation for Cmr in ConsMR.C.
d41 1
a41 2
template <MrArgDecs>
      class WitMrCand: public WitSelCand
a45 6
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMrCand (CandComp *, WitMrSelSite <MrArgs> *);

      //------------------------------------------------------------------------
d49 1
a49 1
      ~WitMrCand ();
d55 1
a55 3
      virtual void              prtID     ();
      virtual WitMrCand <Pmr> * myPmrCand ();
      virtual WitMrCand <Cmr> * myCmrCand ();
d61 1
a61 1
      WitBoolean isEligible (WitPeriod thePer);
d63 7
a69 1
         // Returns TRUE, iff myCandComp_ is eligible to be selected in thePer.
d75 9
a83 1
      inline static WitMrCand <MrArgs> * theMrCandFor (WitSelCand *);
d97 11
a107 1
      accessFunc (CandComp *, myCandComp)
d115 1
a115 1
      noCopyCtorAssignTemp (WitMrCand, MrArgs);
d121 1
a121 5
      WitMrSelSite <MrArgs> * const myMrSelSite_;
         //
         // The MrSelSite that owns this MrCand.

      CandComp * const myCandComp_;
d123 1
a123 1
         // The CandComp for this MrCand.
d128 3
a130 2
         //    prevSel_[thePer] is TRUE, iff myCandComp_ has been previously 
         //    selected in thePer.
d132 2
a133 1
         //    myCandComp_ has not been previously selected in any period.
d137 12
a148 2
// Non-parametric implementation of template class MrCand <Pmr> inline member
// functions.
d151 1
a151 1
inline WitMrCand <Pmr> * WitMrCand <Pmr>::theMrCandFor (WitSelCand * theSelCand)
d153 45
a197 2
   return theSelCand->myPmrCand ();
   }
d200 12
a211 2
// Non-parametric implementation of template class MrCand <Cmr> inline member
// functions.
d214 1
a214 1
inline WitMrCand <Cmr> * WitMrCand <Cmr>::theMrCandFor (WitSelCand * theSelCand)
d216 9
a224 2
   return theSelCand->myCmrCand ();
   }
d226 24
a249 3
//------------------------------------------------------------------------------
// Global functions that take MrCand arguments.
//------------------------------------------------------------------------------
d251 1
a251 4
inline WitBopEntry * theBopEntFor (WitMrCand <Pmr> * thePmrCand)
   {
   return thePmrCand->myCandComp ();
   }
d253 3
a255 1
//------------------------------------------------------------------------------
d257 4
a260 4
inline WitConsEntry * theConsEntFor (WitMrCand <Cmr> * theCmrCand)
   {
   return theCmrCand->myCandComp ();
   }
@


1.13
log
@Preliminary work on single source.
@
text
@a20 1
#include <FlexVec.h>
d50 1
a50 1
      WitMrCand (CandComp *);
d84 9
a92 2
      accessFunc (CandComp *,                      myCandComp)
      accessFunc (const WitFlexVec <WitBoolean> &, prevSel)
d106 4
d114 1
a114 1
      WitFlexVec <WitBoolean> prevSel_;
d116 5
a120 2
         // prevSel_[thePer] is TRUE, iff myCandComp_ has been previously 
         // selected in thePer.
@


1.12
log
@Continued implementation of sel-split for pen-exec.
@
text
@d86 1
a86 1
      accessFunc (const WitFlexVec (WitBoolean) &, prevSel)
d104 1
a104 1
      WitFlexVec (WitBoolean) prevSel_;
@


1.11
log
@Continued implementation of sel-split fpr pen-exec.
@
text
@d63 3
a65 3
      virtual void              prtID       ();
      virtual WitMrCand <Pmr> * myMrCandPmr ();
      virtual WitMrCand <Cmr> * myMrCandCmr ();
d117 1
a117 1
   return theSelCand->myMrCandPmr ();
d127 1
a127 1
   return theSelCand->myMrCandCmr ();
@


1.10
log
@Continued implmentation of selective stock reallocation.
@
text
@d75 1
a75 1
      void setPrevSel (WitPeriod thePer);
d77 1
a77 1
         // Sets prevSel_[thePer] to TRUE.
@


1.9
log
@Refactoring for constrained stock reallocation.
@
text
@d63 3
a65 3
      virtual void       prtID      ();
      virtual WitBoolean isaPmrCand ();
      virtual WitBoolean isaCmrCand ();
d79 1
a79 6
      inline static WitMrCand <MrArgs> * safeCast (WitSelCand * theSelCand)
         {
         witAssert ((theSelCand == NULL) || isanMrCand (theSelCand));

         return (WitMrCand <MrArgs> *) theSelCand;
         }
a93 4
      inline static WitBoolean isanMrCand (WitSelCand * theSelCand);
         //
         // Returns TRUE, iff theSelCand is actually an MrCand <MrArgs>.

d115 1
a115 1
inline WitBoolean WitMrCand <Pmr>::isanMrCand (WitSelCand * theSelCand)
d117 1
a117 1
   return theSelCand->isaPmrCand ();
d125 1
a125 1
inline WitBoolean WitMrCand <Cmr>::isanMrCand (WitSelCand * theSelCand)
d127 1
a127 1
   return theSelCand->isaCmrCand ();
@


1.8
log
@Refactoring for constrained stock reallocation.
@
text
@d63 1
d79 1
a79 1
      inline static WitMrCand <MrArgs> * downCast (WitSelCand * theSelCand)
d81 1
a81 6
         if (DEBUG_MODE)
            if (theSelCand != NULL)
               if (WitMrMgr <MrArgs>::forPmr ())
                  witAssert (theSelCand->isaPmrCand ());
               else
                  witAssert (theSelCand->isaCmrCand ());
d99 4
d118 36
@


1.7
log
@Refactoring.
@
text
@d16 1
a16 2
// Contains the declaration    of class template MrCand <MrArgs>.
// Contains the implementation of class template MrCand <MrArgs>.
d37 3
a39 3
// Parametric     implementation             in this file.
// Non-parametric implementation for PmrArgs in ProdMR.C.
// Non-parametric implementation for CmrArgs in ConsMR.C.
d60 7
d78 12
a117 29

//------------------------------------------------------------------------------
// Implementation of class template MrCand <MrArgs>.
//------------------------------------------------------------------------------

template <MrArgDecs>
      WitMrCand <MrArgs>::WitMrCand (CandComp * theCandComp):

         WitSelCand  (theCandComp),

         myCandComp_ (theCandComp),
         prevSel_    (myProblem (), witFALSE)
   {
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      WitMrCand <MrArgs>::~WitMrCand ()
   {
   }

//------------------------------------------------------------------------------

template <MrArgDecs>
      void WitMrCand <MrArgs>::setPrevSel (WitPeriod thePer)
   {
   prevSel_.elemRef (thePer) = witTRUE;
   }
@


1.6
log
@Minor modification.
@
text
@d16 2
a17 1
// Contains the declaration of class template MrCand <MrArgs>.
d20 1
a21 1
#include <MrMgr.h>
d38 3
a40 1
// Implemented in MultiRoute.C.
d100 29
@


1.5
log
@Refactoring.
@
text
@d37 1
a37 1
// Implemented in MultiRt.C.
@


1.4
log
@Initial implementation of multi-route class templates.
@
text
@d49 1
a49 1
      WitMrCand (WitBopEntry *);
d61 1
a61 1
      WitBoolean isEligible (WitPeriod expPer);
d63 1
a63 2
         // Returns TRUE, iff myBopEnt_ is eligible to be selected for explosion
         // in expPer.
d65 1
a65 1
      void setPrevSel (WitPeriod expPer);
d67 1
a67 1
         // Sets prevSel_[expPer] to TRUE.
d73 1
a73 1
      accessFunc (WitBopEntry *,                   myBopEnt)
d88 1
a88 1
      WitBopEntry * const myBopEnt_;
d90 1
a90 1
         // The candidate BopEntry for this MrCand.
d94 2
a95 2
         // prevSel_[expPer] is TRUE, iff myBopEnt_ has been previously selected
         // for explosion in expPer.
@


1.3
log
@More templates.
@
text
@d16 1
a16 1
// Contains the declaration of class template MrCand <SelComp, CandComp>.
d20 1
d24 1
a24 1
// Class template MrCand <SelComp, CandComp>
a27 2
// SelComp  is the class of the actual selecting component.
// CandComp is the class of the actual candidate component.
d29 2
a30 10
// This template is expected to have only two cases:
//    One for Production  MR
//    One for Consumption MR
//
// Template Argument Values:
//
//    Arg       Prod-MR   Cons-MR
//    ---       -------   -------
//    SelComp   Part      BomEntry
//    CandComp  BopEntry  ConsEntry
d35 1
a35 1
//    MrCand <SelComp, CandComp>
d37 1
a37 1
// Implemented in ProdMR.C.
d40 1
a40 1
template <class SelComp, class CandComp>
d49 1
a49 1
      WitMrCand (CandComp *, WitPmrPart *);
d74 1
a74 1
      accessFunc (CandComp *,                      myBopEnt)
d83 1
a83 7
      WitPairStItr                                 (
            const WitMrCand <SelComp, CandComp> &);

      WitMrCand <SelComp, CandComp> & operator = (
            const WitMrCand <SelComp, CandComp> &);
         //
         // See noCopyCtorAssign in macs.h.
d89 1
a89 1
      CandComp * const myBopEnt_;
a91 4

      WitPmrPart * const myPmrPart_;
         //
         // The PmrPart that owns this MrCand.
@


1.2
log
@Some template stuff.
@
text
@d98 1
a98 1
         // See noCopyCtorAssign in mac.h.
@


1.1
log
@Converted several generic classes into class templates.
@
text
@d16 1
a16 1
// Contains the declaration of class MrCand.
d19 98
a116 1
#include <Util.h>
@

