head	1.27;
access;
symbols
	sce_5_01_20080919:1.24
	latest_sce_4_20_20060523:1.24.0.2
	sce_4_20_20060523:1.24
	latest_sce4_20_OSL:1.23.0.2
	sce_4_20_OSL:1.23
	sce_410_withVa:1.18
	sce_4_05_20040511:1.18
	sce_4_00_20040201:1.18
	nextGenBranch:1.15.0.2
	nextGenRoot:1.15
	sce_3_30_20030627:1.15
	EndRw-branch:1.12.0.4
	Root-of-EndRw:1.12
	rwToStl:1.12.0.2
	latest_sce_3_10_20010924:1.10.0.2
	sce_3_10_20010924:1.10
	latest_sce_3_00_20010601:1.5.0.4
	sce_3_00_20010601:1.5
	latest_sce_2_31_20010308:1.5.0.2
	sce_2_31_20010308:1.5;
locks; strict;
comment	@ * @;


1.27
date	2011.09.28.23.49.28;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.09.24.00.27.48;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.08.30.20.17.35;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2006.05.02.17.34.01;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2006.01.09.20.02.30;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.16.19.24.33;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.15.19.55.21;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.15.19.18.50;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.15.19.13.57;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.24.20.12.34;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.24.17.11.16;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.24.16.23.23;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.23.19.13.20;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.15.21.01.21;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.13.22.22.09;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.26.18.42.52;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.21.21.52.19;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.09.22.09.44;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.03.20.07.30;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.27.21.45.10;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.21.18.24.31;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.20.20.07.04;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.11.16.35.09;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.22.16.18.25;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.20.20.22.27;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.13.19.57.25;	author bobw;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.05.19.05.30;	author bobw;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef LinkMgrH
#define LinkMgrH

//------------------------------------------------------------------------------
// Header file: "LinkMgr.h"
//
// Contains the declaration of the following classes and templates:
//
//    AbsLinkMgr
//    ObjLinkMgr
//    PairLinkMgr <ObjByVal>
//    TripLinkMgr
//------------------------------------------------------------------------------

#include <Link.h>
#include <Assoc.h>

//------------------------------------------------------------------------------
// Class AbsLinkMgr
//
// A manager of abstract dynamic stack links.
// Responsible for owning and recycling the AbsLinks of a Problem.
//
// Class Hierarchy:
//
// AbsLinkMgr
//    ObjLinkMgr
//    PairLinkMgr <ObjByVal>
//    TripLinkMgr
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitAbsLinkMgr: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------

      static void deleteInstance (WitAbsLinkMgr * theAbsLinkMgr);
         //
         // Heap-destructs theAbsLinkMgr.

      WitAbsLink * freshAbsLink (WitAbsLink * theAbsLink);
         //
         // Attaches an available AbsLink to theAbsLink and returns it.

      void recycleAbsLink (WitAbsLink * theAbsLink);
         //
         // Stores theAbsLink for future re-use.

   protected:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitAbsLinkMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitAbsLinkMgr ();

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      virtual WitAbsLink * newAbsLink () = 0;
         //
         // Heap-constructs and returns new instance of a class derived from 
         // AbsLink.
         // Base class function.

      virtual void deleteAbsLink (WitAbsLink * theAbsLink) = 0;
         //
         // Heap-destructs the derived class version of theAbsLink.
         // Base class function.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitAbsLinkMgr);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitAbsLink * firstUnusedAbsLink_;
         //
         // First unused AbsLink stored by this AbsLinkMgr.
   };

//------------------------------------------------------------------------------
// Class ObjLinkMgr
//
// A manager of links for dynamic stacks of individual objects.
// Responsible for owning and recycling the ObjLinks of a Problem.
//
// Class Hierarchy:
//
// AbsLinkMgr
//    ObjLinkMgr
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitObjLinkMgr: public WitAbsLinkMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjLinkMgr (WitProblem * theProblem);
         //
         // AbsLinkMgr <<< theProblem.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjLinkMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjLinkMgr ();
         //
         // Override from class AbsLinkMgr.                                 

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAbsLink * newAbsLink ();
         //
         // Override from class AbsLinkMgr.

      virtual void deleteAbsLink (WitAbsLink *);
         //
         // Override from class AbsLinkMgr.
   };

//------------------------------------------------------------------------------
// Class Template PairLinkMgr <ObjByVal>
//
// A manager of dynamic stack links for pairs of the form: (Object, ObjByVal).
// Responsible for owning and recycling the PairLinks of a Problem.
//
// Class Hierarchy:
//
// AbsLinkMgr
//    PairLinkMgr <ObjByVal>
//
// Implemented in Stack.C.
//------------------------------------------------------------------------------

template <typename ObjByVal> 
      class WitPairLinkMgr: public WitAbsLinkMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPairLinkMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static WitPairLinkMgr * theInstanceFor (WitProblem * theProblem);
         //
         // Returns the PairLinkMgr <ObjByVal> owned by theProblem.
         // Implemented non-parametrically in Stack.C.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPairLinkMgr ();
         //
         // Override from class AbsLinkMgr.

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAbsLink * newAbsLink    ();
      virtual void         deleteAbsLink (WitAbsLink *);
         //
         // Overrides from class AbsLinkMgr.

      noCopyCtorAssign (WitPairLinkMgr);
   };

//------------------------------------------------------------------------------
// Class TripLinkMgr
//
// A manager of links for dynamic stacks of triples.
// Responsible for owning and recycling the TripLinks of a Problem.
//
// Class Hierarchy:
//
// AbsLinkMgr
//    TripLinkMgr
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitTripLinkMgr: public WitAbsLinkMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitTripLinkMgr (WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitTripLinkMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitTripLinkMgr ();
         //
         // Override from class AbsLinkMgr.                                 

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAbsLink * newAbsLink ();
         //
         // Override from class AbsLinkMgr.

      virtual void deleteAbsLink (WitAbsLink *);
         //
         // Override from class AbsLinkMgr.
   };

#endif
@


1.26
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.25
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d44 2
a45 2
{
public:
d47 3
a49 3
//------------------------------------------------------------------------
// Public member functions.
//------------------------------------------------------------------------
d51 3
a53 3
static void deleteInstance (WitAbsLinkMgr * theAbsLinkMgr);
//
// Heap-destructs theAbsLinkMgr.
d55 3
a57 3
WitAbsLink * freshAbsLink (WitAbsLink * theAbsLink);
//
// Attaches an available AbsLink to theAbsLink and returns it.
d59 3
a61 3
void recycleAbsLink (WitAbsLink * theAbsLink);
//
// Stores theAbsLink for future re-use.
d63 1
a63 1
protected:
d65 3
a67 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d69 3
a71 3
WitAbsLinkMgr (WitProblem * theProblem);
//
// ProbAssoc <<< theProblem.
d73 3
a75 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d77 1
a77 1
virtual ~WitAbsLinkMgr ();
d79 3
a81 3
//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------
d83 5
a87 5
virtual WitAbsLink * newAbsLink () = 0;
//
// Heap-constructs and returns new instance of a class derived from
// AbsLink.
// Base class function.
d89 4
a92 4
virtual void deleteAbsLink (WitAbsLink * theAbsLink) = 0;
//
// Heap-destructs the derived class version of theAbsLink.
// Base class function.
d94 1
a94 1
private:
d96 3
a98 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d100 1
a100 1
noCopyCtorAssign (WitAbsLinkMgr);
d102 3
a104 3
//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------
d106 4
a109 4
WitAbsLink * firstUnusedAbsLink_;
//
// First unused AbsLink stored by this AbsLinkMgr.
};
d126 2
a127 2
{
public:
d129 3
a131 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d133 3
a135 3
WitObjLinkMgr (WitProblem * theProblem);
//
// AbsLinkMgr <<< theProblem.
d137 1
a137 1
private:
d139 3
a141 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d143 1
a143 1
noCopyCtorAssign (WitObjLinkMgr);
d145 3
a147 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d149 3
a151 3
virtual ~WitObjLinkMgr ();
//
// Override from class AbsLinkMgr.
d153 3
a155 3
//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------
d157 3
a159 3
virtual WitAbsLink * newAbsLink ();
//
// Override from class AbsLinkMgr.
d161 4
a164 4
virtual void deleteAbsLink (WitAbsLink *);
//
// Override from class AbsLinkMgr.
};
d180 42
a221 10
template <typename ObjByVal>
class WitPairLinkMgr: public WitAbsLinkMgr
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitPairLinkMgr (WitProblem *);
d223 2
a224 34
//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

static WitPairLinkMgr * theInstanceFor (WitProblem * theProblem);
//
// Returns the PairLinkMgr <ObjByVal> owned by theProblem.
// Implemented non-parametrically in Stack.C.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitPairLinkMgr ();
//
// Override from class AbsLinkMgr.

//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------

virtual WitAbsLink * newAbsLink    ();
virtual void         deleteAbsLink (WitAbsLink *);
//
// Overrides from class AbsLinkMgr.

noCopyCtorAssign (WitPairLinkMgr);
};
d241 2
a242 2
{
public:
d244 3
a246 3
//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------
d248 1
a248 1
WitTripLinkMgr (WitProblem *);
d250 1
a250 1
private:
d252 3
a254 3
//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------
d256 1
a256 1
noCopyCtorAssign (WitTripLinkMgr);
d258 3
a260 3
//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------
d262 3
a264 3
virtual ~WitTripLinkMgr ();
//
// Override from class AbsLinkMgr.
d266 3
a268 3
//------------------------------------------------------------------------
// Other private member functions.
//------------------------------------------------------------------------
d270 3
a272 3
virtual WitAbsLink * newAbsLink ();
//
// Override from class AbsLinkMgr.
d274 4
a277 4
virtual void deleteAbsLink (WitAbsLink *);
//
// Override from class AbsLinkMgr.
};
@


1.24
log
@Updated the copyright date on all source files.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d44 2
a45 2
   {
   public:
d47 3
a49 3
      //------------------------------------------------------------------------
      // Public member functions.
      //------------------------------------------------------------------------
d51 3
a53 3
      static void deleteInstance (WitAbsLinkMgr * theAbsLinkMgr);
         //
         // Heap-destructs theAbsLinkMgr.
d55 3
a57 3
      WitAbsLink * freshAbsLink (WitAbsLink * theAbsLink);
         //
         // Attaches an available AbsLink to theAbsLink and returns it.
d59 3
a61 3
      void recycleAbsLink (WitAbsLink * theAbsLink);
         //
         // Stores theAbsLink for future re-use.
d63 1
a63 1
   protected:
d65 3
a67 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d69 3
a71 3
      WitAbsLinkMgr (WitProblem * theProblem);
         //
         // ProbAssoc <<< theProblem.
d73 3
a75 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d77 1
a77 1
      virtual ~WitAbsLinkMgr ();
d79 3
a81 3
      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------
d83 5
a87 5
      virtual WitAbsLink * newAbsLink () = 0;
         //
         // Heap-constructs and returns new instance of a class derived from 
         // AbsLink.
         // Base class function.
d89 4
a92 4
      virtual void deleteAbsLink (WitAbsLink * theAbsLink) = 0;
         //
         // Heap-destructs the derived class version of theAbsLink.
         // Base class function.
d94 1
a94 1
   private:
d96 3
a98 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d100 1
a100 1
      noCopyCtorAssign (WitAbsLinkMgr);
d102 3
a104 3
      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------
d106 4
a109 4
      WitAbsLink * firstUnusedAbsLink_;
         //
         // First unused AbsLink stored by this AbsLinkMgr.
   };
d126 2
a127 2
   {
   public:
d129 3
a131 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d133 3
a135 3
      WitObjLinkMgr (WitProblem * theProblem);
         //
         // AbsLinkMgr <<< theProblem.
d137 1
a137 1
   private:
d139 3
a141 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d143 1
a143 1
      noCopyCtorAssign (WitObjLinkMgr);
d145 3
a147 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d149 3
a151 3
      virtual ~WitObjLinkMgr ();
         //
         // Override from class AbsLinkMgr.                                 
d153 3
a155 3
      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d157 3
a159 3
      virtual WitAbsLink * newAbsLink ();
         //
         // Override from class AbsLinkMgr.
d161 4
a164 4
      virtual void deleteAbsLink (WitAbsLink *);
         //
         // Override from class AbsLinkMgr.
   };
d180 10
a189 42
template <typename ObjByVal> 
      class WitPairLinkMgr: public WitAbsLinkMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPairLinkMgr (WitProblem *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      static WitPairLinkMgr * theInstanceFor (WitProblem * theProblem);
         //
         // Returns the PairLinkMgr <ObjByVal> owned by theProblem.
         // Implemented non-parametrically in Stack.C.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPairLinkMgr ();
         //
         // Override from class AbsLinkMgr.

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAbsLink * newAbsLink    ();
      virtual void         deleteAbsLink (WitAbsLink *);
         //
         // Overrides from class AbsLinkMgr.
d191 34
a224 2
      noCopyCtorAssign (WitPairLinkMgr);
   };
d241 2
a242 2
   {
   public:
d244 3
a246 3
      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------
d248 1
a248 1
      WitTripLinkMgr (WitProblem *);
d250 1
a250 1
   private:
d252 3
a254 3
      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------
d256 1
a256 1
      noCopyCtorAssign (WitTripLinkMgr);
d258 3
a260 3
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------
d262 3
a264 3
      virtual ~WitTripLinkMgr ();
         //
         // Override from class AbsLinkMgr.                                 
d266 3
a268 3
      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------
d270 3
a272 3
      virtual WitAbsLink * newAbsLink ();
         //
         // Override from class AbsLinkMgr.
d274 4
a277 4
      virtual void deleteAbsLink (WitAbsLink *);
         //
         // Override from class AbsLinkMgr.
   };
@


1.23
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.22
log
@[shared-resource pegging]
@
text
@a19 1
//    DblDblLinkMgr
a36 1
//    DblDblLinkMgr
a166 55
// Class DblDblLinkMgr
//
// A manager of links for dynamic stacks of pairs of doubles.
// Responsible for owning and recycling the DblDblLinks of a Problem.
//
// Class Hierarchy:
//
// AbsLinkMgr
//    DblDblLinkMgr
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitDblDblLinkMgr: public WitAbsLinkMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitDblDblLinkMgr (WitProblem * theProblem);
         //
         // AbsLinkMgr <<< theProblem.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitDblDblLinkMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitDblDblLinkMgr ();
         //
         // Override from class AbsLinkMgr.                                 

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAbsLink * newAbsLink ();
         //
         // Override from class AbsLinkMgr.

      virtual void deleteAbsLink (WitAbsLink *);
         //
         // Override from class AbsLinkMgr.
   };

//------------------------------------------------------------------------------
@


1.21
log
@[shared-resource pegging]
@
text
@d20 1
d38 1
d169 55
@


1.20
log
@[shared-resource pegging]
@
text
@d20 1
a20 1
//    PairLinkMgr <ValType>
d37 1
a37 1
//    PairLinkMgr <ValType>
d167 1
a167 1
// Class Template PairLinkMgr <ValType>
d169 1
a169 1
// A manager of dynamic stack links for pairs of the form: (Object, ValType).
d175 1
a175 1
//    PairLinkMgr <ValType>
d180 1
a180 1
template <typename ValType> 
d197 1
a197 1
         // Returns the PairLinkMgr <ValType> owned by theProblem.
@


1.19
log
@[shared-resource pegging]
@
text
@d20 1
a20 1
//    PairLinkMgr <ObjType>
d37 1
a37 1
//    PairLinkMgr <ObjType>
d167 1
a167 1
// Class Template PairLinkMgr <ObjType>
d169 1
a169 1
// A manager of dynamic stack links for pairs of the form: (Object, ObjType).
d175 1
a175 1
//    PairLinkMgr <ObjType>
d180 1
a180 1
template <typename ObjType> 
d197 1
a197 1
         // Returns the PairLinkMgr <ObjType> owned by theProblem.
@


1.18
log
@Continued implementation of PIP.
@
text
@d20 1
a20 1
//    PairLinkMgr <ValType>
d37 1
a37 1
//    PairLinkMgr <ValType>
d167 1
a167 1
// Class Template PairLinkMgr <ValType>
d169 1
a169 1
// A manager of dynamic stack links for pairs of the form: (Object, Value).
d175 1
a175 1
//    PairLinkMgr <ValType>
d180 1
a180 1
template <typename ValType> 
d197 1
a197 1
         // Returns the PairLinkMgr <ValType> owned by theProblem.
@


1.17
log
@Continued implementation of PIP.
@
text
@d21 1
d38 1
d224 53
@


1.16
log
@Continued implementation of PIP.
@
text
@d175 1
a175 1
// Implemented in this file.
@


1.15
log
@Replaced some C style casts with C++ style casts.
@
text
@a20 4
//
// Contains the implementation of the following templates:
//
//    PairLinkMgr <ValType>
a222 34

//------------------------------------------------------------------------------
// Implementation of class template PairLinkMgr <ValType>.
//------------------------------------------------------------------------------

template <typename ValType> 
      WitPairLinkMgr <ValType>::WitPairLinkMgr (WitProblem * theProblem):

         WitAbsLinkMgr (theProblem)
   {
   }

//------------------------------------------------------------------------------

template <typename ValType> 
      WitPairLinkMgr <ValType>::~WitPairLinkMgr ()
   {
   }

//------------------------------------------------------------------------------

template <typename ValType> 
      WitAbsLink * WitPairLinkMgr <ValType>::newAbsLink ()
   {
   return new WitPairLink <ValType>;
   }

//------------------------------------------------------------------------------

template <typename ValType> 
      void WitPairLinkMgr <ValType>::deleteAbsLink (WitAbsLink * theAbsLink)
   {
   delete static_cast <WitPairLink <ValType> *> (theAbsLink);
   }
@


1.14
log
@Various internal changes.
@
text
@d259 1
a259 1
   delete (WitPairLink <ValType> *) theAbsLink;
@


1.13
log
@Various internal changes.
@
text
@d197 1
a197 2
      static WitPairLinkMgr <ValType> * theInstanceFor (
            WitProblem * theProblem);
d225 1
a225 1
      noCopyCtorAssignTemp (WitPairLinkMgr, ValType);
@


1.12
log
@Continued implementation of Single-Source.
@
text
@d182 1
a182 1
template <class ValType> 
d233 1
a233 1
template <class ValType> 
d242 1
a242 1
template <class ValType> 
d249 1
a249 1
template <class ValType> 
d257 1
a257 1
template <class ValType> 
@


1.11
log
@Continued implementation of Single-Source.
@
text
@a19 1
//    PerLinkMgr
a39 1
//    PerLinkMgr
a151 53
         //
         // Override from class AbsLinkMgr.                                 

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitAbsLink * newAbsLink ();
         //
         // Override from class AbsLinkMgr.

      virtual void deleteAbsLink (WitAbsLink *);
         //
         // Override from class AbsLinkMgr.
   };

//------------------------------------------------------------------------------
// Class PerLinkMgr
//
// A manager of links for dynamic stacks of Periods.
// Responsible for owning and recycling the PerLinks of a Problem.
//
// Class Hierarchy:
//
// AbsLinkMgr
//    PerLinkMgr
//
// Implemented in Stack.C
//------------------------------------------------------------------------------

class WitPerLinkMgr: public WitAbsLinkMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitPerLinkMgr (WitProblem *);

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitPerLinkMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitPerLinkMgr ();
@


1.10
log
@Removed class template AbsPairStack <*,*>.
@
text
@d20 1
d41 1
d154 53
@


1.9
log
@Moved Stack template implementations to header files.
@
text
@d179 1
a179 1
// Implemented in Stack.C
d192 10
@


1.8
log
@Initial implementation of multi-route class templates.
@
text
@d21 4
d218 34
@


1.7
log
@More templates.
@
text
@d212 1
a212 4
      WitPairLinkMgr                        (const WitPairLinkMgr <ValType> &);
      WitPairLinkMgr <ValType> & operator = (const WitPairLinkMgr <ValType> &);
         //
         // See noCopyCtorAssign in macs.h. 
@


1.6
log
@Converted several generic classes into class templates.
@
text
@d215 1
a215 1
         // See noCopyCtorAssign in mac.h. 
@


1.5
log
@Initial implementation of coarse selection splitting for build-ahead.
@
text
@d16 1
a16 1
// Contains the declaration of the following classes:
d20 1
a20 1
//    PairLinkMgr (ValType)
d36 1
a36 1
//    PairLinkMgr (ValType)
d165 1
a165 1
// Generic class PairLinkMgr (ValType)
d167 1
a167 1
// A manager of dynamic stack links for (Object, Value)s.
d173 1
a173 1
//    PairLinkMgr (ValType)
d178 20
a197 3
//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------
d199 3
a201 44
#define WitPairLinkMgrdeclare(ValType)                                         \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitPairLinkMgr (ValType): public WitAbsLinkMgr                           \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitPairLinkMgr (ValType) (WitProblem * theProblem);                      \
         /*                                                                  */\
         /* AbsLinkMgr <<< theProblem.                                       */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      noCopyCtorAssign (WitPairLinkMgr (ValType));                             \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      virtual ~WitPairLinkMgr (ValType) ();                                    \
         /*                                                                  */\
         /* Override from class AbsLinkMgr.                                  */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other private member functions.                                     */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      virtual WitAbsLink * newAbsLink ();                                      \
         /*                                                                  */\
         /* Override from class AbsLinkMgr.                                  */\
                                                                               \
      virtual void deleteAbsLink (WitAbsLink *);                               \
         /*                                                                  */\
         /* Override from class AbsLinkMgr.                                  */\
   };                                                                          \
d203 8
a210 4
//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------
d212 5
a216 2
declare (WitPairLinkMgr, WitPeriod)
declare (WitPairLinkMgr, double)
@


1.4
log
@Further development of coarse selection splitting.
@
text
@d53 8
a80 8
      WitAbsLink * freshAbsLink (WitAbsLink * theAbsLink);
         //
         // Attaches an available AbsLink to theAbsLink and returns it.

      void recycleAbsLink (WitAbsLink * theAbsLink);
         //
         // Stores theAbsLink for future re-use.

a134 14
      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline WitObjLink * freshObjLink (WitObjLink * theObjLink)
         {
         return (WitObjLink *) freshAbsLink (theObjLink);
         }

      inline void recycleObjLink (WitObjLink * theObjLink)
         {
         recycleAbsLink (theObjLink);
         }

a161 5

      inline WitObjLink * asanObjLink (WitAbsLink * theAbsLink)
         {
         return (WitObjLink *) theAbsLink;
         }
a185 6
class WitPairLink (ValType);                                                   \
   /*                                                                        */\
   /* Forward declaration.                                                   */\
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
a197 20
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      static WitPairLinkMgr (ValType) * itsInstance (                          \
            WitProblem * theProblem);                                          \
         /*                                                                  */\
         /* Returns the PairLinkMgr (ValType) owned by theProblem.           */\
                                                                               \
      inline WitPairLink (ValType) * freshPairLink (                           \
            WitPairLink (ValType) * thePairLink)                               \
         {                                                                     \
         return (WitPairLink (ValType) *) freshAbsLink (thePairLink);          \
         }                                                                     \
                                                                               \
      inline void recyclePairLink (WitPairLink (ValType) * thePairLink)        \
         {                                                                     \
         recycleAbsLink (thePairLink);                                         \
         }                                                                     \
                                                                               \
a224 6
                                                                               \
      inline WitPairLink (ValType) * asaPairLink (                             \
            WitAbsLink * theAbsLink)                                           \
         {                                                                     \
         return (WitPairLink (ValType) *) theAbsLink;                          \
         }                                                                     \
@


1.3
log
@Minor correction.
@
text
@d18 1
a18 1
//    LinkMgr
d23 1
d27 1
a27 1
// Class LinkMgr
d29 2
a30 2
// A manager of dynamic stack links.
// Responsible for owning and recycling the Links of a Problem.
d34 1
a34 1
// LinkMgr
d37 2
d41 1
a41 1
class WitLinkMgr: public WitProbAssoc
d46 1
a46 1
      // Constructor functions.
d49 1
a49 1
      WitLinkMgr (WitProblem * theProblem);
d51 3
a53 1
         // ProbAssoc <<< theProblem.
d56 1
a56 1
      // Other public member functions.
d59 1
a59 1
      virtual void copyDataInto (WitLink * dstLink, WitLink * srcLink) = 0;
d61 1
a61 17
         // Copies the data (not the link) from the derived class version of
         // srcLink to  that of dstLink.
         // Base class function.

      static void deleteInstance (WitLinkMgr * theLinkMgr);
         //
         // Heap-destructs theLinkMgr.

      WitLink * freshLink (WitLink * theLink);
         //
         // Attaches an available Link to theLink and returns it.

      void recycle (WitLink * theLink);
         //
         // Stores theLink for future re-use.

   protected:
d67 1
a67 1
      virtual ~WitLinkMgr ();
d73 9
a81 1
      virtual WitLink * newLink () = 0;
d84 1
a84 1
         // Link.
d87 1
a87 1
      virtual void deleteLink (WitLink * theLink) = 0;
d89 1
a89 1
         // Heap-destructs the derived class version of theLink.
d98 1
a98 1
      noCopyCtorAssign (WitLinkMgr);
d104 1
a104 1
      WitLink * firstUnusedLink_;
d106 1
a106 1
         // First unused Link stored by this LinkMgr.
d117 1
a117 1
// LinkMgr
d119 2
d123 1
a123 1
class WitObjLinkMgr: public WitLinkMgr
d133 1
a133 1
         // LinkMgr <<< theProblem.
d139 9
a147 3
      virtual void copyDataInto (WitLink *, WitLink *);
         //
         // Override from class LinkMgr.
d163 1
a163 1
         // Override from class LinkMgr.                                 
d169 1
a169 1
      virtual WitLink * newLink ();
d171 1
a171 1
         // Override from class LinkMgr.
d173 1
a173 1
      virtual void deleteLink (WitLink *);
d175 1
a175 1
         // Override from class LinkMgr.
d177 1
a177 1
      inline WitObjLink * asanObjLink (WitLink * theLink)
d179 1
a179 1
         return (WitObjLink *) theLink;
d191 1
a191 1
// LinkMgr
d193 2
d211 1
a211 1
class WitPairLinkMgr (ValType): public WitLinkMgr                              \
d221 1
a221 1
         /* LinkMgr <<< theProblem.                                          */\
d232 10
a241 3
      virtual void copyDataInto (WitLink *, WitLink *);                        \
         /*                                                                  */\
         /* Override from class LinkMgr.                                     */\
d257 1
a257 1
         /* Override from class LinkMgr.                                     */\
d263 1
a263 1
      virtual WitLink * newLink ();                                            \
d265 1
a265 1
         /* Override from class LinkMgr.                                     */\
d267 1
a267 1
      virtual void deleteLink (WitLink *);                                     \
d269 1
a269 1
         /* Override from class LinkMgr.                                     */\
d272 1
a272 1
            WitLink * theLink)                                                 \
d274 1
a274 1
         return (WitPairLink (ValType) *) theLink;                             \
@


1.2
log
@Further development of selection splitting for multi-route on substitutes.
@
text
@a20 1
//    ObjPerDblLinkMgr
a35 1
//    ObjPerDblLinkMgr
a262 67

//------------------------------------------------------------------------------
// Class ObjPerDblLinkMgr
//
// A manager of links for dynamic stacks of individual objects.
// Responsible for owning and recycling the ObjPerDblLinks of a Problem.
//
// Class Hierarchy:
//
// LinkMgr
//    ObjPerDblLinkMgr
//------------------------------------------------------------------------------

class WitObjPerDblLinkMgr: public WitLinkMgr
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitObjPerDblLinkMgr (WitProblem * theProblem);
         //
         // LinkMgr <<< theProblem.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual void copyDataInto (WitLink *, WitLink *);
         //
         // Override from class LinkMgr.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitObjPerDblLinkMgr);

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitObjPerDblLinkMgr ();
         //
         // Override from class LinkMgr.                                 

      //------------------------------------------------------------------------
      // Other private member functions.
      //------------------------------------------------------------------------

      virtual WitLink * newLink ();
         //
         // Override from class LinkMgr.

      virtual void deleteLink (WitLink *);
         //
         // Override from class LinkMgr.

      inline WitObjPerDblLink * asanObjPerDblLink (
            WitLink * theLink)
         {
         return (WitObjPerDblLink *) theLink;
         }
   };
@


1.1
log
@Some minor modifications.
@
text
@d18 4
a21 3
//    StackLinkMgr
//    ObjStackLinkMgr
//    PairStackLinkMgr (ValType)
d27 1
a27 1
// Class StackLinkMgr
d30 1
a30 1
// Responsible for owning and recycling the StackLinks of a Problem.
d34 4
a37 3
// StackLinkMgr
//    ObjStackLinkMgr
//    PairStackLinkMgr (ValType)
d40 1
a40 1
class WitStackLinkMgr: public WitProbAssoc
d48 1
a48 1
      WitStackLinkMgr (WitProblem * theProblem);
d56 1
a56 3
      virtual void copyDataInto (
            WitStackLink * dstLink, 
            WitStackLink * srcLink) = 0;
d62 1
a62 1
      static void deleteInstance (WitStackLinkMgr * theStackLinkMgr);
d64 1
a64 1
         // Heap-destructs theStackLinkMgr.
d66 1
a66 1
      WitStackLink * freshLink (WitStackLink * theLink);
d68 1
a68 1
         // Attaches an available StackLink to theLink and returns it.
d70 1
a70 1
      void recycle (WitStackLink * theLink);
d80 1
a80 1
      virtual ~WitStackLinkMgr ();
d86 1
a86 1
      virtual WitStackLink * newLink () = 0;
d89 1
a89 1
         // StackLink.
d92 1
a92 1
      virtual void deleteLink (WitStackLink * theLink) = 0;
d103 1
a103 1
      noCopyCtorAssign (WitStackLinkMgr);
d109 1
a109 1
      WitStackLink * firstUnusedLink_;
d111 1
a111 1
         // First unused StackLink stored by this StackLinkMgr.
d115 1
a115 1
// Class ObjStackLinkMgr
d118 1
a118 1
// Responsible for owning and recycling the ObjStackLinks of a Problem.
d122 2
a123 2
// StackLinkMgr
//    ObjStackLinkMgr
d126 1
a126 1
class WitObjStackLinkMgr: public WitStackLinkMgr
d134 1
a134 1
      WitObjStackLinkMgr (WitProblem * theProblem);
d136 1
a136 1
         // StackLinkMgr <<< theProblem.
d142 1
a142 1
      virtual void copyDataInto (WitStackLink *, WitStackLink *);
d144 1
a144 1
         // Override from class StackLinkMgr.
d152 1
a152 1
      noCopyCtorAssign (WitObjStackLinkMgr);
d158 1
a158 1
      virtual ~WitObjStackLinkMgr ();
d160 1
a160 1
         // Override from class StackLinkMgr.                                 
d166 1
a166 1
      virtual WitStackLink * newLink ();
d168 1
a168 1
         // Override from class StackLinkMgr.
d170 1
a170 1
      virtual void deleteLink (WitStackLink *);
d172 1
a172 1
         // Override from class StackLinkMgr.
d174 1
a174 1
      inline WitObjStackLink * asanObjStackLink (WitStackLink * theLink)
d176 1
a176 1
         return (WitObjStackLink *) theLink;
d181 1
a181 1
// Generic class PairStackLinkMgr (ValType)
d184 1
a184 1
// Responsible for owning and recycling the PairStackLinks of a Problem.
d188 2
a189 2
// StackLinkMgr
//    PairStackLinkMgr (ValType)
d196 1
a196 1
#define WitPairStackLinkMgrdeclare(ValType)                                    \
d200 1
a200 1
class WitPairStackLink (ValType);                                              \
d206 1
a206 1
class WitPairStackLinkMgr (ValType): public WitStackLinkMgr                    \
d214 1
a214 1
      WitPairStackLinkMgr (ValType) (WitProblem * theProblem);                 \
d216 1
a216 1
         /* StackLinkMgr <<< theProblem.                                     */\
d222 1
a222 1
      static WitPairStackLinkMgr (ValType) * itsInstance (                     \
d225 1
a225 1
         /* Returns the PairStackLinkMgr (ValType) owned by theProblem.      */\
d227 1
a227 1
      virtual void copyDataInto (WitStackLink *, WitStackLink *);              \
d229 1
a229 1
         /* Override from class StackLinkMgr.                                */\
d237 1
a237 1
      noCopyCtorAssign (WitPairStackLinkMgr (ValType));                        \
d243 1
a243 1
      virtual ~WitPairStackLinkMgr (ValType) ();                               \
d245 1
a245 1
         /* Override from class StackLinkMgr.                                */\
d251 1
a251 1
      virtual WitStackLink * newLink ();                                       \
d253 1
a253 1
         /* Override from class StackLinkMgr.                                */\
d255 1
a255 1
      virtual void deleteLink (WitStackLink *);                                \
d257 1
a257 1
         /* Override from class StackLinkMgr.                                */\
d259 2
a260 2
      inline WitPairStackLink (ValType) * asaPairStackLink (                   \
            WitStackLink * theLink)                                            \
d262 1
a262 1
         return (WitPairStackLink (ValType) *) theLink;                        \
d267 67
d338 2
a339 2
declare (WitPairStackLinkMgr, WitPeriod)
declare (WitPairStackLinkMgr, double)
@

