head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2011.09.28.23.49.08;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.24.00.27.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.30.20.17.21;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.09.20.20.32;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef ComponentH
#define ComponentH

//------------------------------------------------------------------------------
// Header file: "Component.h"
//
// Contains the declaration of the following classes:
//
//    Component
//    DelComp
//    Node
//------------------------------------------------------------------------------

#include <Assoc.h>

//------------------------------------------------------------------------------
// class Component.
//
// A component of a WIT problem.
// The collection of Components of a WIT problem define the problem.
//
// Class Hierarchy:
//
// ProbAssoc
//    Component
//       GlobalComp
//       OptComp
//       DelComp
//          Node
//             Part
//                Material
//                Capacity
//             Operation
//          BillEntry
//             ConsEntry
//                BomEntry
//                SubEntry
//             BopEntry
//          Demand
//------------------------------------------------------------------------------

class WitComponent: public WitProbAssoc
   {
   public:

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitComponent ();
         //
         // This function can only be called from myCompMgr ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (void *, appData)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setAppData (void *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool inserted () = 0;
         //
         // Returns true, iff this Component has been inserted into
         // myCompMgr ().

      void writeData ();
         //
         // Writes the section of the input data file for this Component.

      virtual void writeMultiObjVecs (WitObjective * theObj);
         //
         // Valid in multiple objectives mode only.
         // Writes to an input data file the ObjVecIRs owned by this Component.
         // For each ObjVecIR, the vector for theObj is written.
         // The default implementation does nothing.

      virtual void writeSolnData ();
         //
         // Writes the section of the solution data file for this Component.
         // This default version is a no-op.

      virtual void copySelfInto (WitCompMgr * theCompMgr) = 0;
         //
         // Creates a corresponding Component in theCompMgr, unless this
         // Component is the kind that automatically gets constructed by the
         // ctor of class Problem. Copies the input attributes of this Component
         // into the corresponding Component in theCompMgr.

      void purgeCompLists ();
         //
         // Removes all selForDel Components from this Component's Component
         // Lists.
         // Valid only during a purge.

      void reindexBoundSet ();
         //
         // Sets the mappingIndex of the BoundSet for this Component.
         // Valid only if this Component has a BoundSet, and myCompMgr () is
         // reindexing it.

      virtual void recount () = 0;
         //
         // Recomputes mappingIndex for this Component and tells myCompMgr ()
         // to recount this Component. This may be done for multiple levels of
         // derived classes.
         // Valid only if called by myCompMgr ().

      void clearDepLists ();
         //
         // Clears the dependent Lists of this Component.

      virtual WitBoundSet * myBoundSet ();
         //
         // Returns the BoundSet owned by this Component, if any, else NULL.
         // The base class implementation returns NULL.

      virtual void unpreprocess ();
         //
         // Puts this Component into its unpreprocessed state.

      virtual void clearOptSoln ();
         //
         // Clears this Component's portion of the solution.
         // Valid only when the optimizing implosion subsystem is clearing the
         // solution.

      virtual void clearStochSoln ();
         //
         // Clears this Component's portion of the stochastic solution.
         // Valid only when the stochastic implosion subsystem is clearing the
         // stochastic solution.

      //------------------------------------------------------------------------
      // This-derived-class-instance functions.
      //
      // In each case, if this Component is actually an instance of the
      // indicated derived class, the function returns that instance;
      // otherwise, it returns NULL.
      //------------------------------------------------------------------------

      virtual WitDelComp *   thisDelComp ();
      virtual WitNode *      thisNode    ();
      virtual WitPart *      thisPart    ();
      virtual WitMaterial *  thisMat     ();
      virtual WitCapacity *  thisCap     ();
      virtual WitOperation * thisOpn     ();
      virtual WitConsEntry * thisConsEnt ();
      virtual WitBomEntry *  thisBomEnt  ();
      virtual WitSubEntry *  thisSub     ();
      virtual WitBopEntry *  thisBopEnt  ();
      virtual WitDemand *    thisDemand  ();

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitComponent (WitCompMgr * theCompMgr);
         //
         // theCompMgr is the CompMgr that owns this Component.

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void prepSetUnpreAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpreprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetNonUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set without necessitating unpreprocessing or unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      virtual void writeDataID () = 0;
         //
         // Writes text identifying this Component to an input data file.

      virtual void writeDataAttrs () = 0;
         //
         // Writes the attributes of this Component to an input data file.

      void copyAttrsFrom (WitComponent * theComp);
         //
         // Copies the input attributes of theComp into this Component.

      virtual void purgeCompListsSpec ();
         //
         // Does aspects of purgeCompLists specific to the derived class.
         // The base class implementation is a no-op.

      virtual void clearDepListsSpec ();
         //
         // Does aspects of clearDepLists specific to the derived class.
         // The base class implementation is a no-op.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitComponent);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      void * appData_;
         //
         // The application data that has been attached to this Component, if
         // any.
   };

#endif
@


1.3
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.2
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d52 2
a53 86
{
public:

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

virtual ~WitComponent ();
//
// This function can only be called from myCompMgr ().

//------------------------------------------------------------------------
// Data access functions.
//------------------------------------------------------------------------

accessFunc (void *, appData)

//------------------------------------------------------------------------
// "Set" functions.
//------------------------------------------------------------------------

void setAppData (void *);

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

virtual bool inserted () = 0;
//
// Returns true, iff this Component has been inserted into
// myCompMgr ().

void writeData ();
//
// Writes the section of the input data file for this Component.

virtual void writeMultiObjVecs (WitObjective * theObj);
//
// Valid in multiple objectives mode only.
// Writes to an input data file the ObjVecIRs owned by this Component.
// For each ObjVecIR, the vector for theObj is written.
// The default implementation does nothing.

virtual void writeSolnData ();
//
// Writes the section of the solution data file for this Component.
// This default version is a no-op.

virtual void copySelfInto (WitCompMgr * theCompMgr) = 0;
//
// Creates a corresponding Component in theCompMgr, unless this
// Component is the kind that automatically gets constructed by the
// ctor of class Problem. Copies the input attributes of this Component
// into the corresponding Component in theCompMgr.

void purgeCompLists ();
//
// Removes all selForDel Components from this Component's Component
// Lists.
// Valid only during a purge.

void reindexBoundSet ();
//
// Sets the mappingIndex of the BoundSet for this Component.
// Valid only if this Component has a BoundSet, and myCompMgr () is
// reindexing it.

virtual void recount () = 0;
//
// Recomputes mappingIndex for this Component and tells myCompMgr ()
// to recount this Component. This may be done for multiple levels of
// derived classes.
// Valid only if called by myCompMgr ().

void clearDepLists ();
//
// Clears the dependent Lists of this Component.

virtual WitBoundSet * myBoundSet ();
//
// Returns the BoundSet owned by this Component, if any, else NULL.
// The base class implementation returns NULL.

virtual void unpreprocess ();
//
// Puts this Component into its unpreprocessed state.
d55 195
a249 111
virtual void clearOptSoln ();
//
// Clears this Component's portion of the solution.
// Valid only when the optimizing implosion subsystem is clearing the
// solution.

virtual void clearStochSoln ();
//
// Clears this Component's portion of the stochastic solution.
// Valid only when the stochastic implosion subsystem is clearing the
// stochastic solution.

//------------------------------------------------------------------------
// This-derived-class-instance functions.
//
// In each case, if this Component is actually an instance of the
// indicated derived class, the function returns that instance;
// otherwise, it returns NULL.
//------------------------------------------------------------------------

virtual WitDelComp *   thisDelComp ();
virtual WitNode *      thisNode    ();
virtual WitPart *      thisPart    ();
virtual WitMaterial *  thisMat     ();
virtual WitCapacity *  thisCap     ();
virtual WitOperation * thisOpn     ();
virtual WitConsEntry * thisConsEnt ();
virtual WitBomEntry *  thisBomEnt  ();
virtual WitSubEntry *  thisSub     ();
virtual WitBopEntry *  thisBopEnt  ();
virtual WitDemand *    thisDemand  ();

protected:

//------------------------------------------------------------------------
// Protected member functions.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitComponent (WitCompMgr * theCompMgr);
//
// theCompMgr is the CompMgr that owns this Component.

//------------------------------------------------------------------------
// Other protected member functions.
//------------------------------------------------------------------------

void prepSetUnpreAttr ();
//
// Takes action appropriate just before the value of an attribute is to
// be set, thereby necessitating unpreprocessing.
// The attribute is not allowed to be set in stochastic mode.

void prepSetUnpostAttr ();
//
// Takes action appropriate just before the value of an attribute is to
// be set, thereby necessitating unpostprocessing.
// The attribute is not allowed to be set in stochastic mode.

void prepSetNonUnpostAttr ();
//
// Takes action appropriate just before the value of an attribute is to
// be set without necessitating unpreprocessing or unpostprocessing.
// The attribute is not allowed to be set in stochastic mode.

virtual void writeDataID () = 0;
//
// Writes text identifying this Component to an input data file.

virtual void writeDataAttrs () = 0;
//
// Writes the attributes of this Component to an input data file.

void copyAttrsFrom (WitComponent * theComp);
//
// Copies the input attributes of theComp into this Component.

virtual void purgeCompListsSpec ();
//
// Does aspects of purgeCompLists specific to the derived class.
// The base class implementation is a no-op.

virtual void clearDepListsSpec ();
//
// Does aspects of clearDepLists specific to the derived class.
// The base class implementation is a no-op.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitComponent);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

//------------------------------------------------------------------------
// Input data.
//------------------------------------------------------------------------

void * appData_;
//
// The application data that has been attached to this Component, if
// any.
};
@


1.1
log
@Heuristic Adjustment
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d52 86
a137 2
   {
   public:
d139 111
a249 195
      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      virtual ~WitComponent ();
         //
         // This function can only be called from myCompMgr ().

      //------------------------------------------------------------------------
      // Data access functions.
      //------------------------------------------------------------------------

      accessFunc (void *, appData)

      //------------------------------------------------------------------------
      // "Set" functions.
      //------------------------------------------------------------------------

      void setAppData (void *);

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      virtual bool inserted () = 0;
         //
         // Returns true, iff this Component has been inserted into
         // myCompMgr ().

      void writeData ();
         //
         // Writes the section of the input data file for this Component.

      virtual void writeMultiObjVecs (WitObjective * theObj);
         //
         // Valid in multiple objectives mode only.
         // Writes to an input data file the ObjVecIRs owned by this Component.
         // For each ObjVecIR, the vector for theObj is written.
         // The default implementation does nothing.

      virtual void writeSolnData ();
         //
         // Writes the section of the solution data file for this Component.
         // This default version is a no-op.

      virtual void copySelfInto (WitCompMgr * theCompMgr) = 0;
         //
         // Creates a corresponding Component in theCompMgr, unless this
         // Component is the kind that automatically gets constructed by the
         // ctor of class Problem. Copies the input attributes of this Component
         // into the corresponding Component in theCompMgr.

      void purgeCompLists ();
         //
         // Removes all selForDel Components from this Component's Component
         // Lists.
         // Valid only during a purge.

      void reindexBoundSet ();
         //
         // Sets the mappingIndex of the BoundSet for this Component.
         // Valid only if this Component has a BoundSet, and myCompMgr () is
         // reindexing it.

      virtual void recount () = 0;
         //
         // Recomputes mappingIndex for this Component and tells myCompMgr ()
         // to recount this Component. This may be done for multiple levels of
         // derived classes.
         // Valid only if called by myCompMgr ().

      void clearDepLists ();
         //
         // Clears the dependent Lists of this Component.

      virtual WitBoundSet * myBoundSet ();
         //
         // Returns the BoundSet owned by this Component, if any, else NULL.
         // The base class implementation returns NULL.

      virtual void unpreprocess ();
         //
         // Puts this Component into its unpreprocessed state.

      virtual void clearOptSoln ();
         //
         // Clears this Component's portion of the solution.
         // Valid only when the optimizing implosion subsystem is clearing the
         // solution.

      virtual void clearStochSoln ();
         //
         // Clears this Component's portion of the stochastic solution.
         // Valid only when the stochastic implosion subsystem is clearing the
         // stochastic solution.

      //------------------------------------------------------------------------
      // This-derived-class-instance functions.
      //
      // In each case, if this Component is actually an instance of the
      // indicated derived class, the function returns that instance;
      // otherwise, it returns NULL.
      //------------------------------------------------------------------------

      virtual WitDelComp *   thisDelComp ();
      virtual WitNode *      thisNode    ();
      virtual WitPart *      thisPart    ();
      virtual WitMaterial *  thisMat     ();
      virtual WitCapacity *  thisCap     ();
      virtual WitOperation * thisOpn     ();
      virtual WitConsEntry * thisConsEnt ();
      virtual WitBomEntry *  thisBomEnt  ();
      virtual WitSubEntry *  thisSub     ();
      virtual WitBopEntry *  thisBopEnt  ();
      virtual WitDemand *    thisDemand  ();

   protected:

      //------------------------------------------------------------------------
      // Protected member functions.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitComponent (WitCompMgr * theCompMgr);
         //
         // theCompMgr is the CompMgr that owns this Component.

      //------------------------------------------------------------------------
      // Other protected member functions.
      //------------------------------------------------------------------------

      void prepSetUnpreAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpreprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set, thereby necessitating unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      void prepSetNonUnpostAttr ();
         //
         // Takes action appropriate just before the value of an attribute is to
         // be set without necessitating unpreprocessing or unpostprocessing.
         // The attribute is not allowed to be set in stochastic mode.

      virtual void writeDataID () = 0;
         //
         // Writes text identifying this Component to an input data file.

      virtual void writeDataAttrs () = 0;
         //
         // Writes the attributes of this Component to an input data file.

      void copyAttrsFrom (WitComponent * theComp);
         //
         // Copies the input attributes of theComp into this Component.

      virtual void purgeCompListsSpec ();
         //
         // Does aspects of purgeCompLists specific to the derived class.
         // The base class implementation is a no-op.

      virtual void clearDepListsSpec ();
         //
         // Does aspects of clearDepLists specific to the derived class.
         // The base class implementation is a no-op.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitComponent);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      //------------------------------------------------------------------------
      // Input data.
      //------------------------------------------------------------------------

      void * appData_;
         //
         // The application data that has been attached to this Component, if
         // any.
   };
@

