head	1.32;
access;
symbols
	sce_5_01_20080919:1.29
	latest_sce_4_20_20060523:1.28.0.2
	sce_4_20_20060523:1.28
	latest_sce4_20_OSL:1.27.0.2
	sce_4_20_OSL:1.27
	sce_410_withVa:1.23
	sce_4_05_20040511:1.23
	sce_4_00_20040201:1.22
	nextGenBranch:1.21.0.2
	nextGenRoot:1.21
	sce_3_30_20030627:1.21
	EndRw-branch:1.16.0.4
	Root-of-EndRw:1.16
	rwToStl:1.16.0.2
	latest_sce_3_10_20010924:1.10.0.2
	sce_3_10_20010924:1.10
	latest_sce_3_00_20010601:1.9.0.2
	sce_3_00_20010601:1.9
	latest_sce_2_31_20010308:1.8.0.2
	sce_2_31_20010308:1.8
	latest_sce_2_31_20001003:1.4.0.2
	sce_2_31_20001003:1.4
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.32
date	2011.09.28.23.49.29;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.09.24.00.27.49;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.08.30.20.17.36;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.15.20.17.35;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.02.17.34.01;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2006.02.21.15.44.14;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.17.17.07.17;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.15.19.55.21;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.15.19.13.57;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.10.22.53.19;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.01.21.05.03;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.13.23.06.28;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2003.01.23.19.13.20;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2003.01.15.21.01.21;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.13.22.22.10;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2002.12.30.20.37.26;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.03.22.35.19;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.10.18.02.12;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.07.20.14.59;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.02.20.53.13;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.01.14.25.57;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2002.04.18.14.02.35;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.06.23.36.01;	author bobw;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.25.14.53.24;	author bobw;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.20.00.44.18;	author bobw;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.28.22.13.36;	author bobw;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.20.20.08.36;	author bobw;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.22.23.11.42;	author bobw;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.24.19.55.23;	author bobw;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.19.22.35.32;	author bobw;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.16.56.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.13.53.23;	author wit;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef MappingH
#define MappingH

//------------------------------------------------------------------------------
// Header file: "Mapping.h"
//
// Contains the declaration of class template Mapping <DomEl, RangeEl>.
//------------------------------------------------------------------------------

#include <CompMgr.h>
#include <Vector.h>

//------------------------------------------------------------------------------
// Class template Mapping <DomEl, RangeEl>
//
// An instance of class template Mapping <DomEl, RangeEl>
// represents a mapping whose domain is the set of all the instances of DomEl
// owned by a Problem into the set of all instances of RangeEl.
// For example, the declaration
//
//    WitMapping <WitPart, double> cost (myProblem);
//
// declares "cost" to be a mapping from the parts of myProblem into the set of
// all doubles. It is used by invoking the () operator, e.g.,
//
//   cost (thePart) = 17.9;
//
// This class is implemented using vectors, which are indexed by using the
// function: int DomEl::mappingIndex () const.
//
// This is a value-based collection class; its methods make heavy use of the
// copy constructor for RangeEl. However, instances of DomEl are accessed
// through pointers.
//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      class WitMapping
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMapping ();
         //
         // Constructs an empty Mapping (one that does not map any instances of
         // DomEl).

      WitMapping (WitProblem * theProblem, RangeEl initValue);
         //
         // Constructs a Mapping for those instances of DomEl that are owned
         // by theProblem.
         // Sets every element of this Mapping to initValue.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMapping ();

      //------------------------------------------------------------------------
      // Public member operators.
      //------------------------------------------------------------------------

      inline RangeEl operator () (DomEl * theDomEl) const;
         //
         // Returns the value of this Mapping for theDomEl.
         // The returned value is not an lvalue.

      inline RangeEl & operator () (DomEl * theDomEl);
         //
         // Returns the value of this Mapping for theDomEl.
         // The returned value is an lvalue.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline int domainSize () const;
         //
         // Returns # DomEl instances mapped.

      void clear ();
         //
         // Resizes this Mapping to map 0 instances.

      void allocate (WitProblem * theProblem, RangeEl theRangeEl);
         //
         // Resizes this Mapping to cover the instances of DomEl
         // owned by theProblem. The value of this mapping for each instance
         // will be set to theRangeEl.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMapping);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitVector <RangeEl> myVector_;
         //
         // Stores the member value for each instance of DomEl.
   };

//------------------------------------------------------------------------------
// Implementation of class template Mapping <DomEl, RangeEl>
//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      inline RangeEl WitMapping <DomEl, RangeEl>::operator () (
         DomEl * theDomEl) const
   {
   witAssert (theDomEl != NULL);

   return myVector_[theDomEl->mappingIndex ()];
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      inline RangeEl & WitMapping <DomEl, RangeEl>::operator () (
         DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);

   return myVector_[theDomEl->mappingIndex ()];
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      inline int WitMapping <DomEl, RangeEl>::domainSize () const
   {
   return myVector_.length ();
   }

#endif
@


1.31
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 2006.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.30
log
@Revised the copyright date.
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2011.
d6 2
a7 2
//     IBM Confidential
//
d46 73
a118 73
class WitMapping
{
public:

//------------------------------------------------------------------------
// Constructor functions.
//------------------------------------------------------------------------

WitMapping ();
//
// Constructs an empty Mapping (one that does not map any instances of
// DomEl).

WitMapping (WitProblem * theProblem, RangeEl initValue);
//
// Constructs a Mapping for those instances of DomEl that are owned
// by theProblem.
// Sets every element of this Mapping to initValue.

//------------------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------------------

~WitMapping ();

//------------------------------------------------------------------------
// Public member operators.
//------------------------------------------------------------------------

inline RangeEl operator () (DomEl * theDomEl) const;
//
// Returns the value of this Mapping for theDomEl.
// The returned value is not an lvalue.

inline RangeEl & operator () (DomEl * theDomEl);
//
// Returns the value of this Mapping for theDomEl.
// The returned value is an lvalue.

//------------------------------------------------------------------------
// Other public member functions.
//------------------------------------------------------------------------

inline int domainSize () const;
//
// Returns # DomEl instances mapped.

void clear ();
//
// Resizes this Mapping to map 0 instances.

void allocate (WitProblem * theProblem, RangeEl theRangeEl);
//
// Resizes this Mapping to cover the instances of DomEl
// owned by theProblem. The value of this mapping for each instance
// will be set to theRangeEl.

private:

//------------------------------------------------------------------------
// Private member functions.
//------------------------------------------------------------------------

noCopyCtorAssign (WitMapping);

//------------------------------------------------------------------------
// Private member data.
//------------------------------------------------------------------------

WitVector <RangeEl> myVector_;
//
// Stores the member value for each instance of DomEl.
};
d125 4
a128 4
inline RangeEl WitMapping <DomEl, RangeEl>::operator () (
DomEl * theDomEl) const
{
witAssert (theDomEl != NULL);
d130 2
a131 2
return myVector_[theDomEl->mappingIndex ()];
}
d136 4
a139 4
inline RangeEl & WitMapping <DomEl, RangeEl>::operator () (
DomEl * theDomEl)
{
witAssert (theDomEl != NULL);
d141 2
a142 2
return myVector_[theDomEl->mappingIndex ()];
}
d147 4
a150 4
inline int WitMapping <DomEl, RangeEl>::domainSize () const
{
return myVector_.length ();
}
@


1.29
log
@Stochastic Implosion
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 2006.
d6 2
a7 2
//     IBM Confidential 
// 
d46 73
a118 73
      class WitMapping
   {
   public:

      //------------------------------------------------------------------------
      // Constructor functions.
      //------------------------------------------------------------------------

      WitMapping ();
         //
         // Constructs an empty Mapping (one that does not map any instances of
         // DomEl).

      WitMapping (WitProblem * theProblem, RangeEl initValue);
         //
         // Constructs a Mapping for those instances of DomEl that are owned
         // by theProblem.
         // Sets every element of this Mapping to initValue.

      //------------------------------------------------------------------------
      // Destructor function.
      //------------------------------------------------------------------------

      ~WitMapping ();

      //------------------------------------------------------------------------
      // Public member operators.
      //------------------------------------------------------------------------

      inline RangeEl operator () (DomEl * theDomEl) const;
         //
         // Returns the value of this Mapping for theDomEl.
         // The returned value is not an lvalue.

      inline RangeEl & operator () (DomEl * theDomEl);
         //
         // Returns the value of this Mapping for theDomEl.
         // The returned value is an lvalue.

      //------------------------------------------------------------------------
      // Other public member functions.
      //------------------------------------------------------------------------

      inline int domainSize () const;
         //
         // Returns # DomEl instances mapped.

      void clear ();
         //
         // Resizes this Mapping to map 0 instances.

      void allocate (WitProblem * theProblem, RangeEl theRangeEl);
         //
         // Resizes this Mapping to cover the instances of DomEl
         // owned by theProblem. The value of this mapping for each instance
         // will be set to theRangeEl.

   private:

      //------------------------------------------------------------------------
      // Private member functions.
      //------------------------------------------------------------------------

      noCopyCtorAssign (WitMapping);

      //------------------------------------------------------------------------
      // Private member data.
      //------------------------------------------------------------------------

      WitVector <RangeEl> myVector_;
         //
         // Stores the member value for each instance of DomEl.
   };
d125 4
a128 4
      inline RangeEl WitMapping <DomEl, RangeEl>::operator () (
         DomEl * theDomEl) const
   {
   witAssert (theDomEl != NULL);
d130 2
a131 2
   return myVector_[theDomEl->mappingIndex ()];
   }
d136 4
a139 4
      inline RangeEl & WitMapping <DomEl, RangeEl>::operator () (
         DomEl * theDomEl)
   {
   witAssert (theDomEl != NULL);
d141 2
a142 2
   return myVector_[theDomEl->mappingIndex ()];
   }
d147 4
a150 4
      inline int WitMapping <DomEl, RangeEl>::domainSize () const
   {
   return myVector_.length ();
   }
@


1.28
log
@Updated the copyright date on all source files.
@
text
@a124 30
      WitMapping <DomEl, RangeEl>::WitMapping ():
         myVector_ ()
   {
   ifDebug (DomEl * theDomEl);

   ifDebug (DomEl::verifyMappingIndex (theDomEl));
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      WitMapping <DomEl, RangeEl>::WitMapping (
         WitProblem * theProblem,
         RangeEl      initValue):

      myVector_ ()
   {
   allocate (theProblem, initValue);
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      WitMapping <DomEl, RangeEl>::~WitMapping ()
   {
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
a151 18
//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      void WitMapping <DomEl, RangeEl>::clear ()
   {
   myVector_.clear ();
   }

//------------------------------------------------------------------------------

template <typename DomEl, typename RangeEl>
      void WitMapping <DomEl, RangeEl>::allocate (
         WitProblem * theProblem,
         RangeEl      theRangeEl)
   {
   myVector_.resize (DomEl::nInstances (theProblem), theRangeEl);
   }

@


1.27
log
@[shared-resource pegging]
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
@


1.26
log
@[shared-resource pegging]
@
text
@d89 1
a89 1
      inline WitSiz domainSize () const;
d177 1
a177 1
      inline WitSiz WitMapping <DomEl, RangeEl>::domainSize () const
@


1.25
log
@[shared-resource pegging]
@
text
@d89 1
a89 1
      inline size_t domainSize () const;
d177 1
a177 1
      inline size_t WitMapping <DomEl, RangeEl>::domainSize () const
@


1.24
log
@[shared-resource pegging]
@
text
@d97 1
a97 1
      void allocate (WitProblem * theProblem, RangeEl theValue);
d101 1
a101 1
         // will be set to theValue.
d195 1
a195 1
         RangeEl      theValue)
d197 1
a197 1
   myVector_.resize (DomEl::nInstances (theProblem), theValue);
@


1.23
log
@Double Precision.
@
text
@d16 1
a16 1
// Contains the declaration of class template Mapping <DomainType, RangeType>.
d23 1
a23 1
// Class template Mapping <DomainType, RangeType>
d25 3
a27 3
// An instance of class template Mapping <DomainType, RangeType>
// represents a mapping whose domain is the set of all the instances of
// DomainType owned by a Problem into the set of all instances of RangeType.
d38 1
a38 1
// function: int DomainType::mappingIndex () const.
d41 2
a42 2
// copy constructor for RangeType. However, instances of DomainType are
// accessed through pointers.
d45 1
a45 1
template <typename DomainType, typename RangeType>
d56 2
a57 2
         // Constructs an empty Mapping (one that does not map any
         // instances of DomainType).
d59 1
a59 1
      WitMapping (WitProblem * theProblem, RangeType initValue);
d61 2
a62 2
         // Constructs a Mapping for those instances of DomainType
         // that are owned by theProblem.
d75 1
a75 1
      inline RangeType operator () (DomainType * theObject) const;
d77 1
a77 1
         // Returns the value of this Mapping for theObject.
d80 1
a80 1
      inline RangeType & operator () (DomainType * theObject);
d82 1
a82 1
         // Returns the value of this Mapping for theObject.
d91 1
a91 1
         // Returns # DomainType instances mapped.
d97 1
a97 1
      void allocate (WitProblem * theProblem, RangeType theValue);
d99 1
a99 1
         // Resizes this Mapping to cover the instances of DomainType
d115 1
a115 1
      WitVector <RangeType> myVector_;
d117 1
a117 1
         // Stores the member value for each instance of DomainType.
d121 1
a121 1
// Implementation of class template Mapping <DomainType, RangeType>
d124 2
a125 2
template <typename DomainType, typename RangeType>
      WitMapping <DomainType, RangeType>::WitMapping ():
d128 1
a128 1
   ifDebug (DomainType * theObject);
d130 1
a130 1
   ifDebug (DomainType::verifyMappingIndex (theObject));
d135 2
a136 2
template <typename DomainType, typename RangeType>
      WitMapping <DomainType, RangeType>::WitMapping (
d138 1
a138 1
         RangeType    initValue):
d147 2
a148 2
template <typename DomainType, typename RangeType>
      WitMapping <DomainType, RangeType>::~WitMapping ()
d154 3
a156 3
template <typename DomainType, typename RangeType>
      inline RangeType WitMapping <DomainType, RangeType>::operator () (
         DomainType * theObject) const
d158 1
a158 1
   witAssert (theObject != NULL);
d160 1
a160 1
   return myVector_[theObject->mappingIndex ()];
d165 3
a167 3
template <typename DomainType, typename RangeType>
      inline RangeType & WitMapping <DomainType, RangeType>::operator () (
         DomainType * theObject)
d169 1
a169 1
   witAssert (theObject != NULL);
d171 1
a171 1
   return myVector_[theObject->mappingIndex ()];
d176 2
a177 2
template <typename DomainType, typename RangeType>
      inline size_t WitMapping <DomainType, RangeType>::domainSize () const
d184 2
a185 2
template <typename DomainType, typename RangeType>
      void WitMapping <DomainType, RangeType>::clear ()
d192 2
a193 2
template <typename DomainType, typename RangeType>
      void WitMapping <DomainType, RangeType>::allocate (
d195 1
a195 1
         RangeType    theValue)
d197 1
a197 1
   myVector_.resize (DomainType::nInstances (theProblem), theValue);
@


1.22
log
@Continued implementation of PIP.
@
text
@d30 1
a30 1
//    WitMapping <WitPart, float> cost (myProblem);
d33 1
a33 1
// all floats. It is used by invoking the () operator, e.g.,
@


1.21
log
@Continued implementation of proportionate routing.
@
text
@d46 1
a46 1
      class WitMapping: public WitUtil
@


1.20
log
@Replaced some C style casts with C++ style casts.
@
text
@d197 1
a197 6
   int nInst;

   nInst =
      theProblem->myCompMgr ()->nInstances (static_cast <DomainType *> (NULL));

   myVector_.resize (nInst, theValue);
@


1.19
log
@Various internal changes.
@
text
@d199 2
a200 1
   nInst = theProblem->myCompMgr ()->nInstances ((DomainType *) NULL);
@


1.18
log
@Various internal changes.
@
text
@d109 1
a109 7
      WitMapping (
            const WitMapping <DomainType, RangeType> &);

      WitMapping <DomainType, RangeType> & operator = (
            const WitMapping <DomainType, RangeType> &);
         //
         // See noCopyCtorAssign in macs.h.
@


1.17
log
@Added penalties on BOM entries and substitutes to pen-exec.
@
text
@d45 1
a45 1
template <class DomainType, class RangeType>
d130 1
a130 1
template <class DomainType, class RangeType>
d141 1
a141 1
template <class DomainType, class RangeType>
d153 1
a153 1
template <class DomainType, class RangeType>
d160 1
a160 1
template <class DomainType, class RangeType>
d171 1
a171 1
template <class DomainType, class RangeType>
d182 1
a182 1
template <class DomainType, class RangeType>
d190 1
a190 1
template <class DomainType, class RangeType>
d198 1
a198 1
template <class DomainType, class RangeType>
@


1.16
log
@Continued implementation of single-source.
@
text
@d59 1
a59 1
      WitMapping (WitProblem * theProblem,   RangeType initValue);
@


1.15
log
@Continued implementation of single source.
@
text
@d75 1
a75 1
      inline RangeType operator () (const DomainType * theObject) const;
d80 1
a80 1
      inline RangeType & operator () (const DomainType * theObject);
d162 1
a162 1
         const DomainType * theObject) const
d173 1
a173 1
         const DomainType * theObject)
@


1.14
log
@Continued preliminary work on single source.
@
text
@d89 1
a89 1
      size_t domainSize () const;
d131 1
a131 1
      inline WitMapping <DomainType, RangeType>::WitMapping ():
d142 1
a142 1
      inline WitMapping <DomainType, RangeType>::WitMapping (
d154 1
a154 1
      inline WitMapping <DomainType, RangeType>::~WitMapping ()
d191 1
a191 1
      inline void WitMapping <DomainType, RangeType>::clear ()
d199 1
a199 1
      inline void WitMapping <DomainType, RangeType>::allocate (
@


1.13
log
@Preliminary work on single source.
@
text
@d16 1
a16 1
// Contains the declaration of the class Mapping (DomainType, RangeType).
a19 1
#include <Material.h>
d23 1
a23 1
// generic class Mapping (DomainType, RangeType)
d25 1
a25 1
// Each instance of generic class Mapping (DomainType, RangeType)
d30 1
a30 1
//    WitMapping (WitPart, float) cost (myProblem);
d35 1
a35 1
//   cost(thePart) = 17.9;
d43 163
a205 151
//
// To declare and implement WitMapping (YourDomain, YourRange),
//
// 1. Be sure the following two functions are declared and implemented:
//
//    inline int YourDomain::mappingIndex () const;
//       //
//       // Returns an index that distinguishes theObject from all other
//       // instances of YourDomain in theObject's Problem.
//
//    int CompMgr::nInstances (const YourDomain *) const;
//       //
//       // Returns the # of instances of YourDomain in the CompMgr.
//
// 2. Next follow instructions in Vector.h called "To declare and implement
//    WitVector <YourType>", where YourType = YourRange.
//
// 3. Finally look for the following line in this file, Mapping.h:
//
//       declare2 (WitMapping, YourDomain, YourRange)
//
//    If it already exists, WitMapping (YourDomain, YourRange) has already
//    been implemented and no further action is required. Otherwise, you must
//    add this line. In this case, you must also add the following line to
//    Mapping.C:
//
//       implement2 (WitMapping, YourDomain, YourRange)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Generic class declaration macro.
//------------------------------------------------------------------------------

#define WitMappingdeclare2(DomainType, RangeType)                              \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
class WitMapping (DomainType, RangeType): public WitUtil                       \
   {                                                                           \
   public:                                                                     \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Constructor functions.                                              */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitMapping (DomainType, RangeType) ();                                   \
         /*                                                                  */\
         /* Constructs an empty Mapping (one that does not map any           */\
         /* instances of DomainType).                                        */\
                                                                               \
      WitMapping (DomainType, RangeType) (                                     \
            WitProblem * theProblem,                                           \
            RangeType    initValue);                                           \
         /*                                                                  */\
         /* Constructs a Mapping for those instances of DomainType           */\
         /* that are owned by theProblem.                                    */\
         /* Sets every element of this Mapping to initValue.                 */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Destructor function.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      ~WitMapping (DomainType, RangeType) ();                                  \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Public member operators.                                            */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      inline RangeType operator () (const DomainType * theObject) const;       \
         /*                                                                  */\
         /* Returns the value of this Mapping for theObject.                 */\
         /* The returned value is not an lvalue.                             */\
                                                                               \
      inline RangeType & operator () (const DomainType * theObject);           \
         /*                                                                  */\
         /* Returns the value of this Mapping for theObject.                 */\
         /* The returned value is an lvalue.                                 */\
                                                                               \
      void operator = (const WitMapping (DomainType, RangeType) & theMapping); \
         /*                                                                  */\
         /* Copies the elements of theMapping into the corresponding         */\
         /* elements of this Mapping.                                        */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Other public member functions.                                      */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      size_t domainSize () const;                                              \
         /*                                                                  */\
         /* Returns # DomainType instances mapped.                           */\
                                                                               \
      void clear ();                                                           \
         /*                                                                  */\
         /* Resizes this Mapping to map 0 instances.                         */\
                                                                               \
      void allocate (WitProblem * theProblem, RangeType theValue);             \
         /*                                                                  */\
         /* Resizes this Mapping to cover the instances of DomainType        */\
         /* owned by theProblem. The value of this mapping for each instance*/ \
         /* will be set to theValue.                                         */\
                                                                               \
   private:                                                                    \
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member functions.                                           */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitMapping (DomainType, RangeType) (                                     \
         const WitMapping (DomainType, RangeType) &);                          \
         /*                                                                  */\
         /* Not Implemented: Prevents unintentional copying.                 */\
                                                                               \
      /*---------------------------------------------------------------------*/\
      /* Private member data.                                                */\
      /*---------------------------------------------------------------------*/\
                                                                               \
      WitVector <RangeType> myVector_;                                         \
         /*                                                                  */\
         /* Stores the member value for each instance of DomainType.         */\
   };                                                                          \
                                                                               \
/*---------------------------------------------------------------------------*/\
/* Implementations of inlines.                                               */\
/*---------------------------------------------------------------------------*/\
                                                                               \
inline RangeType WitMapping (DomainType, RangeType)::                          \
      operator () (const DomainType * theObject) const                         \
   {                                                                           \
   witAssert (theObject != NULL);                                              \
                                                                               \
   return myVector_[theObject->mappingIndex ()];                               \
   }                                                                           \
                                                                               \
/*---------------------------------------------------------------------------*/\
                                                                               \
inline RangeType & WitMapping (DomainType, RangeType)::                        \
      operator () (const DomainType * theObject)                               \
   {                                                                           \
   witAssert (theObject != NULL);                                              \
                                                                               \
   return myVector_[theObject->mappingIndex ()];                               \
   }                                                                           \

//------------------------------------------------------------------------------
// Declarations of all specific cases of the generic classes declared in this
// file.
//------------------------------------------------------------------------------

declare2 (WitMapping, WitNode,      int)
declare2 (WitMapping, WitPart,      int)
declare2 (WitMapping, WitMaterial,  int)
d207 2
a208 1
declare2 (WitMapping, WitPart,      double)
@


1.12
log
@Preliminary work on single source.
@
text
@d59 1
a59 1
//    WitVector (YourType)", where YourType = YourRange.
d160 1
a160 1
      WitVector (RangeType) myVector_;                                         \
@


1.11
log
@Began implementation of object iteration.
@
text
@a121 4
      void operator = (RangeType theValue);                                    \
         /*                                                                  */\
         /* Sets every element of this Mapping to theValue.                  */\
                                                                               \
@


1.10
log
@Replaced Mapping (*, WitTlObjPtr) with PtrMap <*, *>.
@
text
@d20 2
@


1.9
log
@Implemented and used class SplitPt.
Removed generic class StackSpSched.
@
text
@a199 8
declare2 (WitMapping, WitNode,      WitTlObjPtr)
declare2 (WitMapping, WitPart,      WitTlObjPtr)
declare2 (WitMapping, WitMaterial,  WitTlObjPtr)
declare2 (WitMapping, WitOperation, WitTlObjPtr)
declare2 (WitMapping, WitBomEntry,  WitTlObjPtr)
declare2 (WitMapping, WitSubEntry,  WitTlObjPtr)
declare2 (WitMapping, WitDemand,    WitTlObjPtr)

@


1.8
log
@Implemented and used class SelMgr.
@
text
@d200 7
a206 7
declare2 (WitMapping, WitNode,      WitTlPtr)
declare2 (WitMapping, WitPart,      WitTlPtr)
declare2 (WitMapping, WitMaterial,  WitTlPtr)
declare2 (WitMapping, WitOperation, WitTlPtr)
declare2 (WitMapping, WitBomEntry,  WitTlPtr)
declare2 (WitMapping, WitSubEntry,  WitTlPtr)
declare2 (WitMapping, WitDemand,    WitTlPtr)
@


1.7
log
@Completed a limited implementation of coarse selection splitting for BOP
entries.
@
text
@d56 1
a56 1
// 2. Next follow instructions in RWClient.h called "To declare and implement
@


1.6
log
@Further development of coarse selection splitting.
@
text
@d190 2
a191 2
// Declarations of all specific cases of generic class
// Mapping (DomainType, RangeType)
@


1.5
log
@Refactoring for selection splitting.
@
text
@d200 7
a206 7
declare2 (WitMapping, WitNode,      WitTypelessPtr)
declare2 (WitMapping, WitPart,      WitTypelessPtr)
declare2 (WitMapping, WitMaterial,  WitTypelessPtr)
declare2 (WitMapping, WitOperation, WitTypelessPtr)
declare2 (WitMapping, WitBomEntry,  WitTypelessPtr)
declare2 (WitMapping, WitSubEntry,  WitTypelessPtr)
declare2 (WitMapping, WitDemand,    WitTypelessPtr)
@


1.4
log
@Continued implementation of stock reallocation.
Added emptyFss development control parameter.
@
text
@d120 1
a120 1
      WitMapping (DomainType, RangeType) & operator = (RangeType theValue);    \
d124 1
a124 2
      WitMapping (DomainType, RangeType) & operator = (                        \
            const WitMapping (DomainType, RangeType) & theMapping);            \
@


1.3
log
@Continued implementation of stock re-allocation.
@
text
@d79 1
a79 1
class WitMapping (DomainType, RangeType)                                       \
@


1.2
log
@Updating wit/src in /u/wit/devbase to be in synch with /u/implode/devbase
@
text
@d120 1
a120 1
      WitMapping(DomainType, RangeType) & operator = (RangeType theValue);     \
d124 6
d151 1
a151 1
      /* Private member data.                                                */\
d154 2
a155 1
      WitVector (RangeType) myVector_;                                         \
d157 1
a157 1
         /* Stores the member value for each instance of DomainType.         */\
d160 1
a160 1
      /* Private member functions.                                           */\
d163 1
a163 1
      copyCtorAndAssignment (WitMapping(DomainType, RangeType));               \
d165 1
a165 1
         /* Prevents unintentional copying and assignment.                   */\
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
//     (c) Copyright IBM Corp. 1993,1994,1996.
@


1.1.1.1
log
@Import wit
@
text
@@
