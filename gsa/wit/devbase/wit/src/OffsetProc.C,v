head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2011.09.28.23.49.44;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.24.00.28.05;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.30.20.17.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.10.22.10.39;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.16.22.42.26;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.07.22.58.48;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//------------------------------------------------------------------------------
// Source file: "OffsetProc.C"
//
// Contains the implementation of class OffsetProc.
//------------------------------------------------------------------------------

#include <OffsetProc.h>
#include <BopEntry.h>
#include <SubEntry.h>
#include <GlobalComp.h>
#include <Part.h>
#include <Operation.h>

//------------------------------------------------------------------------------
// Implementation of class OffsetProc.
//------------------------------------------------------------------------------

WitOffsetProc::WitOffsetProc (WitProblem * theProblem):

      WitProbAssoc (theProblem),
      truncOffset_ (),
      dblCumLead_  ()
   {
   }

//------------------------------------------------------------------------------

WitOffsetProc::~WitOffsetProc ()
   {
   }

//------------------------------------------------------------------------------

void WitOffsetProc::roundOffsets ()
   {
   WitOperation * theOpn;
   WitPeriod      thePer;
   bool           executableVal;

   WitTVec <double> leadToImpact (myProblem (), 0.0);
   WitTVec <bool>   hasImpact    (myProblem (), false);
      //
      // See updateProdCumLeads.

   if (myGlobalComp ()->truncOffsets ())
      truncateOffsets ();

   dblCumLead_.allocate (myProblem (), 0.0);

   forEachOperation (theOpn, myProblem ())
      {
      forEachPeriod (thePer, myProblem ())
         {
         executableVal = roundOffsets (theOpn, thePer);

         theOpn->storePreExecutable (thePer, executableVal);

         if (not executableVal)
            resetExec (theOpn, thePer);
         }

      updateProdCumLeads (theOpn, leadToImpact, hasImpact);
      }

   truncOffset_.clear ();
   dblCumLead_ .clear ();
   }

//------------------------------------------------------------------------------

void WitOffsetProc::truncateOffsets ()
   {
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;

   truncOffset_.allocate (myProblem (), 0.0);

   forEachBomEntry (theBomEnt, myProblem ())
      {
      truncateOffset (theBomEnt);

      forEachEl (theSub, theBomEnt->mySubEntries ())
         truncateOffset (theSub);
      }

   forEachBopEntry (theBopEnt, myProblem ())
      truncateOffset (theBopEnt);
   }

//------------------------------------------------------------------------------

void WitOffsetProc::truncateOffset (WitBillEntry * theBillEnt)
   {
   WitPeriod thePer;

   forEachPeriod (thePer, myProblem ())
      truncOffset_ (theBillEnt)[thePer] =
         min (static_cast <double> (thePer), theBillEnt->offset ()[thePer]);
   }

//------------------------------------------------------------------------------
// roundOffsets
//
// Computes impactPeriods for the BomEntries and BopEntries of theOpn in thePer.
// Also checks for the various conditions under which execution of
// theOpn is to be forbidden in thePer.
// If any such condition occurs, computation is terminated and false
// is returned, indicating forbidden execution.
// Otherwise true is returned.
//
// The conditions for forbidding execution are:
//
//   yieldRate         == 0.0
//   cycle time        < 0 (3.4 mode only)
//   release date      < 0 (3.4 mode only)
//   an impactPeriod   < 0, or >= nPeriods
//   execEmptyBom () is false and no BomEntries are in effect in period t.
//------------------------------------------------------------------------------

bool WitOffsetProc::roundOffsets (WitOperation * theOpn, WitPeriod thePer)
   {
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;
   bool          emptyBom;

   if (theOpn->yieldRate ()[thePer] == 0.0)
      return false;

   if (wit34Compatible ())
      if (theOpn->cycleTime34PreventsExec (thePer))
         return false;

   forEachEl (theBomEnt, theOpn->bom ())
      {
      if (not compImpactPeriod (theBomEnt, thePer))
         return false;

      forEachEl (theSub, theBomEnt->mySubEntries ())
         if (myGlobalComp ()->independentOffsets ())
            compImpactPeriod (theSub, thePer);
         else
            copyImpactPeriod (theSub, thePer);
      }

   forEachEl (theBopEnt, theOpn->bop ())
      if (not compImpactPeriod (theBopEnt, thePer))
         return false;

   if (not myGlobalComp ()->execEmptyBom ())
      {
      emptyBom = true;

      forEachEl (theBomEnt, theOpn->bom ())
         if (theBomEnt->inEffect (thePer))
            emptyBom = false;

      if (emptyBom)
         return false;
      }

   return true;
   }

//------------------------------------------------------------------------------
// compImpactPeriod.
// Computes theConsEnt->impactPeriod_[thePer].
// If the resulting impactPeriod falls outside the time horizon, the
// computation is aborted and the function returns false, indicating that
// execution of theConsEnt->myOperation () should be forbidden in thePer.
// Otherwise returns true.
//
// An initial value for the impactPeriod is computed using a simple integer
// round down of the double workOffset ()[thePer]. The final value is computed
// by rounding the double lead time either up or down so as to have the right
// effect on cumulative lead time.
//
// Variables:
//
//    initImpactPeriod:   Initial value for impactPeriod
//    consDCLead:         The double cum lead time for the consumed Part.
//    propDCLead:         The proposed double cum lead time for the consuming
//                        Operation. The proposed value is taken iff it is
//                        larger than the current value.
//    leadTime:           The int lead time
//    finalImpactPeriod:  Final value for ImpactPeriod
//------------------------------------------------------------------------------

bool WitOffsetProc::compImpactPeriod (
      WitConsEntry * theConsEnt,
      WitPeriod      thePer)
   {
   WitPeriod initImpactPeriod;
   double    consDCLead;
   double    propDCLead;
   int       leadTime;
   WitPeriod finalImpactPeriod;

   theConsEnt->storePreImpactPeriod (thePer, -1);

   if (not theConsEnt->withinInterval (thePer))
      return true;

   initImpactPeriod = thePer - ltRoundDown (workOffset (theConsEnt, thePer));

   if (initImpactPeriod < 0)
      return false;

   if (initImpactPeriod >= nPeriods ())
      return false;

   consDCLead = dblCumLead_ (theConsEnt->myPart ())[initImpactPeriod];

   propDCLead = consDCLead + workOffset (theConsEnt, thePer);

   leadTime =
        ltRoundDown (propDCLead)
      - ltRoundDown (consDCLead);

   finalImpactPeriod = thePer - leadTime;

   if (finalImpactPeriod < 0)
      return false;

   theConsEnt->storePreImpactPeriod (thePer, finalImpactPeriod);

   setToMax (dblCumLead_ (theConsEnt->myOperation ())[thePer], propDCLead);

   return true;
   }

//------------------------------------------------------------------------------

void WitOffsetProc::copyImpactPeriod (WitSubEntry * theSub, WitPeriod thePer)
   {
   WitPeriod impactPer;

   theSub->storePreImpactPeriod (thePer, -1);

   if (theSub->myBomEnt ()->inEffect (thePer))
      if (theSub->withinInterval (thePer))
         {
         impactPer = theSub->myBomEnt ()->impactPeriod () [thePer];

         theSub->storePreImpactPeriod (thePer, impactPer);
         }
   }

//------------------------------------------------------------------------------
// compImpactPeriod for a BopEntry.
//
// Variables:
//
//    opnDCLead:        The double cum lead time for the producing Operation:
//    propDCLead:       The proposed double cum lead time for the produced
//                      Part. The proposed value is taken iff it is larger
//                      than the current value.
//    leadTime:         The int lead time
//    theImpactPeriod:  The impactPeriod
//------------------------------------------------------------------------------

bool WitOffsetProc::compImpactPeriod (
      WitBopEntry * theBopEnt,
      WitPeriod     thePer)
   {
   double    opnDCLead;
   double    propDCLead;
   int       leadTime;
   WitPeriod impactPer;

   theBopEnt->storePreImpactPeriod (thePer, -1);

   if (not theBopEnt->withinInterval (thePer))
      return true;

   opnDCLead  = dblCumLead_ (theBopEnt->myOperation ())[thePer];

   propDCLead = opnDCLead - workOffset (theBopEnt, thePer);

   leadTime =
        ltRoundDown (opnDCLead)
      - ltRoundDown (propDCLead);

   impactPer = thePer - leadTime;

   if (impactPer < 0)
      return false;

   if (impactPer >= nPeriods ())
      return false;

   theBopEnt->storePreImpactPeriod (thePer, impactPer);

   return true;
   }

//------------------------------------------------------------------------------

int WitOffsetProc::ltRoundDown (double leadTime)
   {
   return static_cast <int> (floor (leadTime + 1.0E-3));
   }

//------------------------------------------------------------------------------

void WitOffsetProc::resetExec (WitOperation * theOpn, WitPeriod thePer)
   {
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;

   forEachEl (theBomEnt, theOpn->bom ())
      {
      theBomEnt->storePreImpactPeriod (thePer, -1);

      forEachEl (theSub, theBomEnt->mySubEntries ())
         theSub->storePreImpactPeriod (thePer, -1);
      }

   forEachEl (theBopEnt, theOpn->bop ())
      theBopEnt->storePreImpactPeriod (thePer, -1);

   dblCumLead_ (theOpn)[thePer] = 0.0;
   }

//------------------------------------------------------------------------------

void WitOffsetProc::updateProdCumLeads (
      WitOperation *     theOpn,
      WitTVec <double> & leadToImpact,
      WitTVec <bool> &   hasImpact)
   {
   WitBopEntry * theBopEnt;
   WitPeriod     thePer;
   WitPeriod     theImpactPer;

   forEachEl (theBopEnt, theOpn->bop ())
      {
      hasImpact = false;

      forEachPeriod (thePer, myProblem ())
         if (theBopEnt->inEffect (thePer))
            {
            theImpactPer = theBopEnt->impactPeriod ()[thePer];

            hasImpact[theImpactPer]    = true;

            leadToImpact[theImpactPer] = 
               dblCumLead_ (theOpn)[thePer] - workOffset (theBopEnt, thePer);
            }

      forEachPeriod (theImpactPer, myProblem ())
         if (hasImpact[theImpactPer])
            setToMax (
               dblCumLead_ (theBopEnt->myPart ())[theImpactPer],
               leadToImpact[theImpactPer]);
      }
   }

//------------------------------------------------------------------------------

double WitOffsetProc::workOffset (WitBillEntry * theBillEnt, WitPeriod thePer)
   {
   return
      myGlobalComp ()->truncOffsets ()?
         truncOffset_ (theBillEnt)[thePer]:
         theBillEnt->offset ()[thePer];
   }
@


1.5
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.4
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d29 5
a33 5
WitProbAssoc (theProblem),
truncOffset_ (),
dblCumLead_  ()
{
}
d38 2
a39 2
{
}
d44 33
a76 33
{
WitOperation * theOpn;
WitPeriod      thePer;
bool           executableVal;

WitTVec <double> leadToImpact (myProblem (), 0.0);
WitTVec <bool>   hasImpact    (myProblem (), false);
//
// See updateProdCumLeads.

if (myGlobalComp ()->truncOffsets ())
truncateOffsets ();

dblCumLead_.allocate (myProblem (), 0.0);

forEachOperation (theOpn, myProblem ())
{
forEachPeriod (thePer, myProblem ())
{
executableVal = roundOffsets (theOpn, thePer);

theOpn->storePreExecutable (thePer, executableVal);

if (not executableVal)
resetExec (theOpn, thePer);
}

updateProdCumLeads (theOpn, leadToImpact, hasImpact);
}

truncOffset_.clear ();
dblCumLead_ .clear ();
}
d81 18
a98 18
{
WitBomEntry * theBomEnt;
WitSubEntry * theSub;
WitBopEntry * theBopEnt;

truncOffset_.allocate (myProblem (), 0.0);

forEachBomEntry (theBomEnt, myProblem ())
{
truncateOffset (theBomEnt);

forEachEl (theSub, theBomEnt->mySubEntries ())
truncateOffset (theSub);
}

forEachBopEntry (theBopEnt, myProblem ())
truncateOffset (theBopEnt);
}
d103 2
a104 2
{
WitPeriod thePer;
d106 4
a109 4
forEachPeriod (thePer, myProblem ())
truncOffset_ (theBillEnt)[thePer] =
min (static_cast <double> (thePer), theBillEnt->offset ()[thePer]);
}
d131 40
a170 40
{
WitBomEntry * theBomEnt;
WitSubEntry * theSub;
WitBopEntry * theBopEnt;
bool          emptyBom;

if (theOpn->yieldRate ()[thePer] == 0.0)
return false;

if (wit34Compatible ())
if (theOpn->cycleTime34PreventsExec (thePer))
return false;

forEachEl (theBomEnt, theOpn->bom ())
{
if (not compImpactPeriod (theBomEnt, thePer))
return false;

forEachEl (theSub, theBomEnt->mySubEntries ())
if (myGlobalComp ()->independentOffsets ())
compImpactPeriod (theSub, thePer);
else
copyImpactPeriod (theSub, thePer);
}

forEachEl (theBopEnt, theOpn->bop ())
if (not compImpactPeriod (theBopEnt, thePer))
return false;

if (not myGlobalComp ()->execEmptyBom ())
{
emptyBom = true;

forEachEl (theBomEnt, theOpn->bom ())
if (theBomEnt->inEffect (thePer))
emptyBom = false;

if (emptyBom)
return false;
}
d172 2
a173 2
return true;
}
d200 8
a207 8
WitConsEntry * theConsEnt,
WitPeriod      thePer)
{
WitPeriod initImpactPeriod;
double    consDCLead;
double    propDCLead;
int       leadTime;
WitPeriod finalImpactPeriod;
d209 1
a209 1
theConsEnt->storePreImpactPeriod (thePer, -1);
d211 2
a212 2
if (not theConsEnt->withinInterval (thePer))
return true;
d214 1
a214 1
initImpactPeriod = thePer - ltRoundDown (workOffset (theConsEnt, thePer));
d216 2
a217 2
if (initImpactPeriod < 0)
return false;
d219 2
a220 2
if (initImpactPeriod >= nPeriods ())
return false;
d222 1
a222 1
consDCLead = dblCumLead_ (theConsEnt->myPart ())[initImpactPeriod];
d224 1
a224 1
propDCLead = consDCLead + workOffset (theConsEnt, thePer);
d226 3
a228 3
leadTime =
ltRoundDown (propDCLead)
- ltRoundDown (consDCLead);
d230 1
a230 1
finalImpactPeriod = thePer - leadTime;
d232 2
a233 2
if (finalImpactPeriod < 0)
return false;
d235 1
a235 1
theConsEnt->storePreImpactPeriod (thePer, finalImpactPeriod);
d237 1
a237 1
setToMax (dblCumLead_ (theConsEnt->myOperation ())[thePer], propDCLead);
d239 2
a240 2
return true;
}
d245 2
a246 2
{
WitPeriod impactPer;
d248 1
a248 1
theSub->storePreImpactPeriod (thePer, -1);
d250 8
a257 8
if (theSub->myBomEnt ()->inEffect (thePer))
if (theSub->withinInterval (thePer))
{
impactPer = theSub->myBomEnt ()->impactPeriod () [thePer];

theSub->storePreImpactPeriod (thePer, impactPer);
}
}
d273 7
a279 7
WitBopEntry * theBopEnt,
WitPeriod     thePer)
{
double    opnDCLead;
double    propDCLead;
int       leadTime;
WitPeriod impactPer;
d281 1
a281 1
theBopEnt->storePreImpactPeriod (thePer, -1);
d283 2
a284 2
if (not theBopEnt->withinInterval (thePer))
return true;
d286 1
a286 1
opnDCLead  = dblCumLead_ (theBopEnt->myOperation ())[thePer];
d288 1
a288 1
propDCLead = opnDCLead - workOffset (theBopEnt, thePer);
d290 3
a292 3
leadTime =
ltRoundDown (opnDCLead)
- ltRoundDown (propDCLead);
d294 1
a294 1
impactPer = thePer - leadTime;
d296 2
a297 2
if (impactPer < 0)
return false;
d299 2
a300 2
if (impactPer >= nPeriods ())
return false;
d302 1
a302 1
theBopEnt->storePreImpactPeriod (thePer, impactPer);
d304 2
a305 2
return true;
}
d310 3
a312 3
{
return static_cast <int> (floor (leadTime + 1.0E-3));
}
d317 12
a328 12
{
WitBomEntry * theBomEnt;
WitSubEntry * theSub;
WitBopEntry * theBopEnt;

forEachEl (theBomEnt, theOpn->bom ())
{
theBomEnt->storePreImpactPeriod (thePer, -1);

forEachEl (theSub, theBomEnt->mySubEntries ())
theSub->storePreImpactPeriod (thePer, -1);
}
d330 2
a331 2
forEachEl (theBopEnt, theOpn->bop ())
theBopEnt->storePreImpactPeriod (thePer, -1);
d333 2
a334 2
dblCumLead_ (theOpn)[thePer] = 0.0;
}
d339 30
a368 30
WitOperation *     theOpn,
WitTVec <double> & leadToImpact,
WitTVec <bool> &   hasImpact)
{
WitBopEntry * theBopEnt;
WitPeriod     thePer;
WitPeriod     theImpactPer;

forEachEl (theBopEnt, theOpn->bop ())
{
hasImpact = false;

forEachPeriod (thePer, myProblem ())
if (theBopEnt->inEffect (thePer))
{
theImpactPer = theBopEnt->impactPeriod ()[thePer];

hasImpact[theImpactPer]    = true;

leadToImpact[theImpactPer] =
dblCumLead_ (theOpn)[thePer] - workOffset (theBopEnt, thePer);
}

forEachPeriod (theImpactPer, myProblem ())
if (hasImpact[theImpactPer])
setToMax (
dblCumLead_ (theBopEnt->myPart ())[theImpactPer],
leadToImpact[theImpactPer]);
}
}
d373 6
a378 6
{
return
myGlobalComp ()->truncOffsets ()?
truncOffset_ (theBillEnt)[thePer]:
theBillEnt->offset ()[thePer];
}
@


1.3
log
@Heuristic Adjustment
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d29 5
a33 5
      WitProbAssoc (theProblem),
      truncOffset_ (),
      dblCumLead_  ()
   {
   }
d38 2
a39 2
   {
   }
d44 33
a76 33
   {
   WitOperation * theOpn;
   WitPeriod      thePer;
   bool           executableVal;

   WitTVec <double> leadToImpact (myProblem (), 0.0);
   WitTVec <bool>   hasImpact    (myProblem (), false);
      //
      // See updateProdCumLeads.

   if (myGlobalComp ()->truncOffsets ())
      truncateOffsets ();

   dblCumLead_.allocate (myProblem (), 0.0);

   forEachOperation (theOpn, myProblem ())
      {
      forEachPeriod (thePer, myProblem ())
         {
         executableVal = roundOffsets (theOpn, thePer);

         theOpn->storePreExecutable (thePer, executableVal);

         if (not executableVal)
            resetExec (theOpn, thePer);
         }

      updateProdCumLeads (theOpn, leadToImpact, hasImpact);
      }

   truncOffset_.clear ();
   dblCumLead_ .clear ();
   }
d81 18
a98 18
   {
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;

   truncOffset_.allocate (myProblem (), 0.0);

   forEachBomEntry (theBomEnt, myProblem ())
      {
      truncateOffset (theBomEnt);

      forEachEl (theSub, theBomEnt->mySubEntries ())
         truncateOffset (theSub);
      }

   forEachBopEntry (theBopEnt, myProblem ())
      truncateOffset (theBopEnt);
   }
d103 2
a104 2
   {
   WitPeriod thePer;
d106 4
a109 4
   forEachPeriod (thePer, myProblem ())
      truncOffset_ (theBillEnt)[thePer] =
         min (static_cast <double> (thePer), theBillEnt->offset ()[thePer]);
   }
d131 40
a170 40
   {
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;
   bool          emptyBom;

   if (theOpn->yieldRate ()[thePer] == 0.0)
      return false;

   if (wit34Compatible ())
      if (theOpn->cycleTime34PreventsExec (thePer))
         return false;

   forEachEl (theBomEnt, theOpn->bom ())
      {
      if (not compImpactPeriod (theBomEnt, thePer))
         return false;

      forEachEl (theSub, theBomEnt->mySubEntries ())
         if (myGlobalComp ()->independentOffsets ())
            compImpactPeriod (theSub, thePer);
         else
            copyImpactPeriod (theSub, thePer);
      }

   forEachEl (theBopEnt, theOpn->bop ())
      if (not compImpactPeriod (theBopEnt, thePer))
         return false;

   if (not myGlobalComp ()->execEmptyBom ())
      {
      emptyBom = true;

      forEachEl (theBomEnt, theOpn->bom ())
         if (theBomEnt->inEffect (thePer))
            emptyBom = false;

      if (emptyBom)
         return false;
      }
d172 2
a173 2
   return true;
   }
d200 8
a207 8
      WitConsEntry * theConsEnt,
      WitPeriod      thePer)
   {
   WitPeriod initImpactPeriod;
   double    consDCLead;
   double    propDCLead;
   int       leadTime;
   WitPeriod finalImpactPeriod;
d209 1
a209 1
   theConsEnt->storePreImpactPeriod (thePer, -1);
d211 2
a212 2
   if (not theConsEnt->withinInterval (thePer))
      return true;
d214 1
a214 1
   initImpactPeriod = thePer - ltRoundDown (workOffset (theConsEnt, thePer));
d216 2
a217 2
   if (initImpactPeriod < 0)
      return false;
d219 2
a220 2
   if (initImpactPeriod >= nPeriods ())
      return false;
d222 1
a222 1
   consDCLead = dblCumLead_ (theConsEnt->myPart ())[initImpactPeriod];
d224 1
a224 1
   propDCLead = consDCLead + workOffset (theConsEnt, thePer);
d226 3
a228 3
   leadTime =
        ltRoundDown (propDCLead)
      - ltRoundDown (consDCLead);
d230 1
a230 1
   finalImpactPeriod = thePer - leadTime;
d232 2
a233 2
   if (finalImpactPeriod < 0)
      return false;
d235 1
a235 1
   theConsEnt->storePreImpactPeriod (thePer, finalImpactPeriod);
d237 1
a237 1
   setToMax (dblCumLead_ (theConsEnt->myOperation ())[thePer], propDCLead);
d239 2
a240 2
   return true;
   }
d245 2
a246 2
   {
   WitPeriod impactPer;
d248 1
a248 1
   theSub->storePreImpactPeriod (thePer, -1);
d250 8
a257 8
   if (theSub->myBomEnt ()->inEffect (thePer))
      if (theSub->withinInterval (thePer))
         {
         impactPer = theSub->myBomEnt ()->impactPeriod () [thePer];

         theSub->storePreImpactPeriod (thePer, impactPer);
         }
   }
d273 7
a279 7
      WitBopEntry * theBopEnt,
      WitPeriod     thePer)
   {
   double    opnDCLead;
   double    propDCLead;
   int       leadTime;
   WitPeriod impactPer;
d281 1
a281 1
   theBopEnt->storePreImpactPeriod (thePer, -1);
d283 2
a284 2
   if (not theBopEnt->withinInterval (thePer))
      return true;
d286 1
a286 1
   opnDCLead  = dblCumLead_ (theBopEnt->myOperation ())[thePer];
d288 1
a288 1
   propDCLead = opnDCLead - workOffset (theBopEnt, thePer);
d290 3
a292 3
   leadTime =
        ltRoundDown (opnDCLead)
      - ltRoundDown (propDCLead);
d294 1
a294 1
   impactPer = thePer - leadTime;
d296 2
a297 2
   if (impactPer < 0)
      return false;
d299 2
a300 2
   if (impactPer >= nPeriods ())
      return false;
d302 1
a302 1
   theBopEnt->storePreImpactPeriod (thePer, impactPer);
d304 2
a305 2
   return true;
   }
d310 3
a312 3
   {
   return static_cast <int> (floor (leadTime + 1.0E-3));
   }
d317 12
a328 12
   {
   WitBomEntry * theBomEnt;
   WitSubEntry * theSub;
   WitBopEntry * theBopEnt;

   forEachEl (theBomEnt, theOpn->bom ())
      {
      theBomEnt->storePreImpactPeriod (thePer, -1);

      forEachEl (theSub, theBomEnt->mySubEntries ())
         theSub->storePreImpactPeriod (thePer, -1);
      }
d330 2
a331 2
   forEachEl (theBopEnt, theOpn->bop ())
      theBopEnt->storePreImpactPeriod (thePer, -1);
d333 2
a334 2
   dblCumLead_ (theOpn)[thePer] = 0.0;
   }
d339 30
a368 30
      WitOperation *     theOpn,
      WitTVec <double> & leadToImpact,
      WitTVec <bool> &   hasImpact)
   {
   WitBopEntry * theBopEnt;
   WitPeriod     thePer;
   WitPeriod     theImpactPer;

   forEachEl (theBopEnt, theOpn->bop ())
      {
      hasImpact = false;

      forEachPeriod (thePer, myProblem ())
         if (theBopEnt->inEffect (thePer))
            {
            theImpactPer = theBopEnt->impactPeriod ()[thePer];

            hasImpact[theImpactPer]    = true;

            leadToImpact[theImpactPer] = 
               dblCumLead_ (theOpn)[thePer] - workOffset (theBopEnt, thePer);
            }

      forEachPeriod (theImpactPer, myProblem ())
         if (hasImpact[theImpactPer])
            setToMax (
               dblCumLead_ (theBopEnt->myPart ())[theImpactPer],
               leadToImpact[theImpactPer]);
      }
   }
d373 6
a378 6
   {
   return
      myGlobalComp ()->truncOffsets ()?
         truncOffset_ (theBillEnt)[thePer]:
         theBillEnt->offset ()[thePer];
   }
@


1.2
log
@Changed source file names:
   Global.h ==> GlobalComp.h
   Global.C ==> GlobalComp.C
@
text
@d21 1
a21 1
#include <Opn.h>
@


1.1
log
@Re-organized code.
@
text
@d19 1
a19 1
#include <Global.h>
@

