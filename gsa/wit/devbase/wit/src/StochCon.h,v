head	1.31;
access;
symbols
	sce_5_01_20080919:1.27;
locks; strict;
comment	@ * @;


1.31
date	2011.09.28.23.50.31;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.09.24.00.28.47;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.08.30.20.18.16;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2010.08.19.18.00.14;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2008.03.03.22.35.43;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2008.02.29.23.24.30;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2008.02.28.00.00.43;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2008.02.27.23.19.12;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.27.22.49.18;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2008.02.12.22.04.04;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2007.10.08.18.56.36;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2007.09.25.21.03.05;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2007.09.19.17.41.35;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.06.18.59.14;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.04.22.20.12;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2007.08.30.19.39.02;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.24.22.14.01;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2007.08.24.20.17.24;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2007.08.24.15.48.08;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.22.22.45.30;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2007.08.22.22.16.16;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2007.08.16.21.27.41;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.14.15.03.01;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2007.08.09.20.17.42;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.09.19.30.37;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.07.19.17.43;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.07.17.35.36;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.03.20.36.18;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.27.23.15.16;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.27.19.53.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.27.18.58.03;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Revised the source code proprietary statement.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Watson Implosion Technology
//
// (C) Copyright IBM Corp. 1993, 2011  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef StochConH
#define StochConH

//------------------------------------------------------------------------------
// Header file: "StochCon.h"
//
// Contains the declaration of class StochCon.
//------------------------------------------------------------------------------

#include <OptCon.h>
#include <StochLoc.h>
#include <ScenGroup.h>

//------------------------------------------------------------------------------
// class StochCon
//
// "Stochastic Constraint"
// An OptCon in a stochastic implosion optimization problem.
//
// Class hierarchy:
//
//    OptVC
//       OptCon
//          StochCon
//             StResCon
//             StSubCon
//             StShipCon
//             StSlbCon
//
// Implemented in StochOpt.C.
//------------------------------------------------------------------------------

class WitStochCon: public WitOptCon
   {
   public:

      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------

      WitStochCon (WitStochLoc *);

      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------

      virtual ~WitStochCon ();

      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------

      virtual WitOptProblem * myOptProblem ();

   protected:

      //-----------------------------------------------------------------------
      // Protected member functions.
      //-----------------------------------------------------------------------

      WitStochLoc * findVarStochLocFor (WitNode * theNode, WitPeriod thePer);
         //
         // Returns the StochLoc for any StochVar for theNode and thePer that
         // is to have Coeffs in this StochCon.

      accessFunc    (WitStochLoc *,   myStochLoc)
      accessWrapper (WitPeriod,       myPer,         myStochLoc_)
      accessWrapper (WitScenGroup *,  myScenGroup,   myStochLoc_)
      accessWrapper (WitStochImpOP *, myStochImpOP,  myStochLoc_)
      accessWrapper (WitScenAttMgr *, myScenAttMgr,  myStochLoc_)
      accessWrapper (WitScenario *,   firstScenario, myScenGroup ())

   private:

      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------

      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printSource ();

      //-----------------------------------------------------------------------
      // Private pure virtual member functions.
      //-----------------------------------------------------------------------

      virtual void printItem () = 0;
         //
         // Prints to the optProbFile text identifying the non-StochLoc data
         // from which this StochCon was generated.

      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------

      noCopyCtorAssign (WitStochCon);

      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------

      WitStochLoc * const myStochLoc_;
         //
         // The StochLoc for this StochCon.
   };

#endif
@


1.30
log
@Reverted to the version of 8-30-2011, which has the following differences:
   Release 7.0
   Old copyright dates (2006)
   The leading blanks in each line, which were lost with the 2011 copyright
      update, are restored.
Restored release # as 8.0.
@
text
@d1 8
a8 1
//------------------------------------------------------------------------------
d10 4
a13 6
//     (c) Copyright IBM Corp. 1993,1994,1996,2000.
//     (Unpublished)
//     OCO Source Modules
//     IBM Confidential 
// 
//------------------------------------------------------------------------------
@


1.29
log
@Revised the copyright date.
@
text
@d6 2
a7 2
//     IBM Confidential
//
d43 2
a44 2
{
public:
d46 3
a48 3
//-----------------------------------------------------------------------
// Constructor functions.
//-----------------------------------------------------------------------
d50 1
a50 1
WitStochCon (WitStochLoc *);
d52 3
a54 3
//-----------------------------------------------------------------------
// Destructor function.
//-----------------------------------------------------------------------
d56 1
a56 1
virtual ~WitStochCon ();
d58 3
a60 3
//-----------------------------------------------------------------------
// Overriding public virtual member functions.
//-----------------------------------------------------------------------
d62 1
a62 1
virtual WitOptProblem * myOptProblem ();
d64 1
a64 1
protected:
d66 3
a68 3
//-----------------------------------------------------------------------
// Protected member functions.
//-----------------------------------------------------------------------
d70 4
a73 4
WitStochLoc * findVarStochLocFor (WitNode * theNode, WitPeriod thePer);
//
// Returns the StochLoc for any StochVar for theNode and thePer that
// is to have Coeffs in this StochCon.
d75 6
a80 6
accessFunc    (WitStochLoc *,   myStochLoc)
accessWrapper (WitPeriod,       myPer,         myStochLoc_)
accessWrapper (WitScenGroup *,  myScenGroup,   myStochLoc_)
accessWrapper (WitStochImpOP *, myStochImpOP,  myStochLoc_)
accessWrapper (WitScenAttMgr *, myScenAttMgr,  myStochLoc_)
accessWrapper (WitScenario *,   firstScenario, myScenGroup ())
d82 1
a82 1
private:
d84 3
a86 3
//-----------------------------------------------------------------------
// Private member functions.
//-----------------------------------------------------------------------
d88 3
a90 3
//-----------------------------------------------------------------------
// Overriding private virtual member functions.
//-----------------------------------------------------------------------
d92 1
a92 1
virtual void printSource ();
d94 3
a96 3
//-----------------------------------------------------------------------
// Private pure virtual member functions.
//-----------------------------------------------------------------------
d98 4
a101 4
virtual void printItem () = 0;
//
// Prints to the optProbFile text identifying the non-StochLoc data
// from which this StochCon was generated.
d103 3
a105 3
//-----------------------------------------------------------------------
// Other private member functions.
//-----------------------------------------------------------------------
d107 1
a107 1
noCopyCtorAssign (WitStochCon);
d109 3
a111 3
//-----------------------------------------------------------------------
// Private member data.
//-----------------------------------------------------------------------
d113 4
a116 4
WitStochLoc * const myStochLoc_;
//
// The StochLoc for this StochCon.
};
@


1.28
log
@CPLEX
@
text
@d6 2
a7 2
//     IBM Confidential 
// 
d43 2
a44 2
   {
   public:
d46 3
a48 3
      //-----------------------------------------------------------------------
      // Constructor functions.
      //-----------------------------------------------------------------------
d50 1
a50 1
      WitStochCon (WitStochLoc *);
d52 3
a54 3
      //-----------------------------------------------------------------------
      // Destructor function.
      //-----------------------------------------------------------------------
d56 1
a56 1
      virtual ~WitStochCon ();
d58 3
a60 3
      //-----------------------------------------------------------------------
      // Overriding public virtual member functions.
      //-----------------------------------------------------------------------
d62 1
a62 1
      virtual WitOptProblem * myOptProblem ();
d64 1
a64 1
   protected:
d66 3
a68 3
      //-----------------------------------------------------------------------
      // Protected member functions.
      //-----------------------------------------------------------------------
d70 4
a73 4
      WitStochLoc * findVarStochLocFor (WitNode * theNode, WitPeriod thePer);
         //
         // Returns the StochLoc for any StochVar for theNode and thePer that
         // is to have Coeffs in this StochCon.
d75 6
a80 6
      accessFunc    (WitStochLoc *,   myStochLoc)
      accessWrapper (WitPeriod,       myPer,         myStochLoc_)
      accessWrapper (WitScenGroup *,  myScenGroup,   myStochLoc_)
      accessWrapper (WitStochImpOP *, myStochImpOP,  myStochLoc_)
      accessWrapper (WitScenAttMgr *, myScenAttMgr,  myStochLoc_)
      accessWrapper (WitScenario *,   firstScenario, myScenGroup ())
d82 1
a82 1
   private:
d84 3
a86 3
      //-----------------------------------------------------------------------
      // Private member functions.
      //-----------------------------------------------------------------------
d88 3
a90 3
      //-----------------------------------------------------------------------
      // Overriding private virtual member functions.
      //-----------------------------------------------------------------------
d92 1
a92 1
      virtual void printSource ();
d94 3
a96 3
      //-----------------------------------------------------------------------
      // Private pure virtual member functions.
      //-----------------------------------------------------------------------
d98 4
a101 4
      virtual void printItem () = 0;
         //
         // Prints to the optProbFile text identifying the non-StochLoc data
         // from which this StochCon was generated.
d103 3
a105 3
      //-----------------------------------------------------------------------
      // Other private member functions.
      //-----------------------------------------------------------------------
d107 1
a107 1
      noCopyCtorAssign (WitStochCon);
d109 3
a111 3
      //-----------------------------------------------------------------------
      // Private member data.
      //-----------------------------------------------------------------------
d113 4
a116 4
      WitStochLoc * const myStochLoc_;
         //
         // The StochLoc for this StochCon.
   };
@


1.27
log
@Stochastic Implosion
@
text
@d27 1
a27 1
// An OptCon in a stochastic implosion optimization model.
d62 1
a62 1
      virtual WitOptModel * myOptModel ();
d78 1
a78 1
      accessWrapper (WitStochImpOM *, myStochImpOM,  myStochLoc_)
d100 1
a100 1
         // Prints to the modelFile text identifying the non-StochLoc data
@


1.26
log
@Stochastic Implosion
@
text
@d27 1
a27 1
// An OptCon in a stochastic implosion optimization problem.
@


1.25
log
@Stochastic Implosion
@
text
@d100 1
a100 1
         // Prints to the optProbFile text identifying the non-StochLoc data
@


1.24
log
@Stochastic Implosion
@
text
@d78 1
a78 1
      accessWrapper (WitStochImpOP *, myStochImpOP,  myStochLoc_)
@


1.23
log
@Stochastic Implosion
@
text
@d62 1
a62 1
      virtual WitOptProb * myOptProb ();
@


1.22
log
@Stochastic Implosion
@
text
@d31 1
a31 1
//    OptProbEl
@


1.21
log
@Stochastic Implosion
@
text
@d70 5
@


1.20
log
@Stochastic Implosion
@
text
@d74 1
@


1.19
log
@Stochastic Implosion
@
text
@d71 4
a74 3
      accessWrapper (WitPeriod,       myPer,        myStochLoc_)
      accessWrapper (WitScenGroup *,  myScenGroup,  myStochLoc_)
      accessWrapper (WitStochImpOP *, myStochImpOP, myStochLoc_)
@


1.18
log
@Stochastic Implosion
@
text
@d73 1
a73 1
      accessWrapper (WitStochImpOP *, myStochImpOP, myScenGroup ())
@


1.17
log
@Stochastic Implosion
@
text
@d37 1
@


1.16
log
@Stochastic Implosion
@
text
@d35 1
a36 1
//             StSubCon
@


1.15
log
@Stochastic Implosion
@
text
@a68 4
      WitStochLoc * myStochLocForPer (WitPeriod thePer);
         //
         // Returns the StochLoc for the ScenGroup for this StochCon and thePer.

@


1.14
log
@Stochastic Implosion
@
text
@d21 1
a21 1
#include <ScenSet.h>
d71 1
a71 1
         // Returns the StochLoc for the ScenSet for this StochCon and thePer.
d75 2
a76 2
      accessWrapper (WitScenSet *,    myScenSet,    myStochLoc_)
      accessWrapper (WitStochImpOP *, myStochImpOP, myScenSet ())
@


1.13
log
@Stochastic Implosion
@
text
@d21 1
d73 4
a76 3
      accessFunc    (WitStochLoc *, myStochLoc)

      accessWrapper (WitPeriod,     myPer,      myStochLoc_)
@


1.12
log
@Stochastic Implosion
@
text
@d20 1
a20 1
#include <ScenPer.h>
d48 1
a48 1
      WitStochCon (WitScenPer *);
d72 3
a74 4
      accessFunc    (WitStochLoc *,   myStochLoc)
      accessWrapper (WitStochImpOP *, myStochImpOP, myScenPer_)
      accessWrapper (WitScenario *,   myScenario,   myScenPer_)
      accessWrapper (WitPeriod,       myPer,        myScenPer_)
d94 2
a95 2
         // Prints to the optProbFile text identifying the non-ScenPer
         // data from which this StochCon was generated.
a100 4
      static WitStochLoc * theStochLocFor (WitScenPer * theScenPer);
         //
         // Returns the StochLoc for theScenPer.

a106 4
      WitScenPer * const myScenPer_;
         //
         // The ScenPer for this StochCon.

@


1.11
log
@Stochastic Implosion
@
text
@d68 1
a68 1
      WitScenSetPer * myScenSetPerForPer (WitPeriod thePer);
d70 1
a70 1
         // Returns the ScenSetPer for the ScenSet for this StochCon and thePer.
d72 1
a72 1
      accessFunc    (WitScenSetPer *, myScenSetPer)
d102 1
a102 1
      static WitScenSetPer * theScenSetPerFor (WitScenPer * theScenPer);
d104 1
a104 1
         // Returns the ScenSetPer for theScenPer.
d116 1
a116 1
      WitScenSetPer * const myScenSetPer_;
d118 1
a118 1
         // The ScenSetPer for this StochCon.
@


1.10
log
@Stochastic Implosion
@
text
@d68 5
d102 4
d115 4
@


1.9
log
@Stochastic Implosion
@
text
@d35 1
@


1.8
log
@Stochastic Implosion
@
text
@d34 1
@


1.7
log
@Stochastic Implosion
@
text
@d86 1
a86 1
      virtual void printItem () const = 0;
@


1.6
log
@Stochastic Implosion
@
text
@d58 1
a58 1
      virtual WitOptProb * myOptProb () const;
d80 1
a80 1
      virtual void printSource () const;
@


1.5
log
@Stochastic Implosion
@
text
@d35 1
a35 1
// Implemented in StOptMisc.C.
@


1.4
log
@Stochastic Implosion
@
text
@d34 2
@


1.3
log
@Stochastic Implosion
@
text
@d81 9
@


1.2
log
@Stochastic Implosion
@
text
@d20 1
d58 2
d61 1
a61 1
      // Data access functions.
d64 4
@


1.1
log
@Stochastic Implosion
@
text
@d32 1
@

