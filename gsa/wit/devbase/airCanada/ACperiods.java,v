head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2002.11.25.13.41.22;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.23.15.04.42;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.23.04.19.15;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.31.19.33.23;	author yingdong;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Added inRange method to ACperiods to determine if a Date is within the planning horizon
@
text
@package com.ibm.mathsci.witApplications.airCanada;


import java.util.*;
import java.text.DateFormat;
import java.util.Calendar;

/**
 * @@author JPF2
 *
 * Convert Dates to periods
 */
public class ACperiods {
	
	Date startDate_;
	int daysPerPeriod_;
	int nPeriods_;
	static Calendar calendar_= new GregorianCalendar();


	/**
	 * Constructor for ACperiods.
	 */
	public ACperiods() {
		super();
		daysPerPeriod_ = 1;
		nPeriods_ = 365;
		startDate_ = calendar_.getTime();
	}
	
	public ACperiods(Date startDate, int numPeriods ) {
		super();
		daysPerPeriod_ = 1;
		nPeriods_ = numPeriods;
		startDate_ = startDate;
	}
	
	//Convert date to period number
    int periodNumber(Date date) throws ACexception
    {
    	//long  dateCount = (date.getTime() - startDate_.getTime()) / (1000l * 60l * 60l * 24l);
    	long  dateCount = (date.getTime()/(1000l * 60l * 60l * 24l) - startDate_.getTime()/(1000l * 60l * 60l * 24l)) ;
        int retVal =(int)( dateCount/daysPerPeriod_ );
        if (retVal<0){
	  		throw new ACexception(
	  		  "Error ACperiods::periodNumber. Period before starting period. period is " + retVal);
	  	}
        if (retVal>=nPeriods_){
	  		throw new ACexception(
	  		  "Error ACperiods::periodNumber. Period after last period. period is " + retVal +". Last period is " + (nPeriods_-1));
	  	}
        
        return retVal;    	
    }
    
    	
	//Return true if date is within the planning horizon
    boolean inRange(Date date) 
    {
    	boolean retVal = true;
    	long  dateCount = (date.getTime()/(1000l * 60l * 60l * 24l) - startDate_.getTime()/(1000l * 60l * 60l * 24l)) ;
        int period =(int)( dateCount/daysPerPeriod_ );
        if (period<0) retVal=false;
        if (period>=nPeriods_) retVal=false;        
        return retVal;    	
    }
    
    //Convert period to date
    Date date(int period) throws ACexception
    {
    	long pl = period;
    	Date retVal = new Date(startDate_.getTime() + pl*(1000l * 60l * 60l * 24l));
    	
        if (period>=nPeriods_){
	  		throw new ACexception(
	  		  "Error ACperiods::periodNumber. Period after last period. period is " + retVal +". Last period is " + (nPeriods_-1));
	  	}
 
        return retVal;    	
    }
    	
    // Method to test this class by invoking
	// member functions and checking for reasonable
	// results
	public static void test() {
		
		
		try  {
			Calendar cal = Calendar.getInstance();
			cal.set(2003,0,1); // Jan 2, 2003
			Date Jan2 = cal.getTime();
			
			cal.set(2003,9,24);  //Oct 25, 2003
			Date Oct25 = cal.getTime();
			cal.set(2003,9,25);  //Oct 26, 2003
			Date Oct26 = cal.getTime();
			cal.set(2003,9,26);  //Oct 27, 2003
			Date Oct27 = cal.getTime();
			
			ACperiods perMgr= new ACperiods(Jan2,300);
			int pOct25 = perMgr.periodNumber(Oct25);
			int pOct26 = perMgr.periodNumber(Oct26);
			int pOct27 = perMgr.periodNumber(Oct27);
			
			if ( pOct26-pOct25 != 1 ) 
			   throw new ACexception("ACperiods failure 0");
			if ( pOct27-pOct25 != 2 ) 
			   throw new ACexception("ACperiods failure 1");
            
		}
		catch (ACexception ace) {
			ace.printStackTrace();
			System.out.println(ace.getMessage());
		}
		
		try  {
			Calendar cal = Calendar.getInstance();
			cal.set(2001,2,21);
			
			Date startDate = cal.getTime();
			int np = 400;
			ACperiods perMgr= new ACperiods(startDate,400);
			for ( int d=0; d<np; d++ ) {
				Date date =perMgr.date(d);
				int period = perMgr.periodNumber(date);
				//System.out.println(d+" "+period+" "+DateFormat.getDateInstance().format(date));
				if ( period != d ) 
					throw new ACexception("ACperiods failure 1");
			}
            
		}
		catch (ACexception ace) {
			ace.printStackTrace();
			System.out.println(ace.getMessage());
		}

		

    }
}
@


1.3
log
@Fixed problem with calendar
@
text
@d56 12
@


1.2
log
@Updated ACperiods to have method to return date from period.
Added ACperiods.test method.
Updated ACunitTest to call new test method.
Updated ACmain to use new ACperiods method.
@
text
@d41 2
a42 1
    	long  dateCount = (long) (date.getTime() - startDate_.getTime()) / (1000 * 60 * 60 * 24);
d60 1
a60 1
    	Date retVal = new Date(startDate_.getTime() + pl*(1000 * 60 * 60 * 24));
d75 28
@


1.1
log
@Moved Java Classes from src directory to AirCanada directory
@
text
@d5 2
d53 45
@

