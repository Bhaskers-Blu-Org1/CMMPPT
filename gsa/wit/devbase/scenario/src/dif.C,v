head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.31;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.39;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.39;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.27;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.42;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <scenario/src/dif.h>
#include <scenario/src/difImpl.h>

// Set problem title
void
LgFrDataInterface::title(
    std::string t)
{
    difImpPtr_->title(t);
}

// Return problem title

std::string 
LgFrDataInterface::title(const LgFrDataInterfaceEssentials * difEssenPtr)
const
{
  return difImpPtr_->title(difEssenPtr);
}

// Extract part attributes
void*
LgFrDataInterface::partAttribute(
  LgFrPartVector & pv,
  const std::string & itemSubTypeStr,
  const std::string & attrName,
  const LgFrDataInterfaceEssentials* difEssenPtr
  ) const
{
  LgFrItemType itemType = part;
  LgFrItemSubType itemSubType = material;
  if ( itemSubTypeStr == "capacity" )
     itemSubType =  capacity;
  else if ( itemSubTypeStr != "material" ) {
    std::cerr << "\n Wrong item sub-type is used.  "
      << "It should be \"material\" or \"capacity\"." 
      << std::endl;
  }
  
  LgFrItemPtrVector itemPtrVect;
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < pv.size(); i++)
    {
      LgFrPart& part = pv[i];
      itemPtrVect.push_back(&part);
    }
  return this->getAttributeValue(attrName, itemSubType,
				 itemType, itemPtrVect, difEssenPtr);
}

// Extract demand attributes
void*
LgFrDataInterface::demandAttribute(
    LgFrDemandVector & dv,
    const std::string & attrName,
    const LgFrDataInterfaceEssentials* difEssenPtr
    ) const
{
  LgFrItemType itemType = demand;
  LgFrItemSubType itemSubType = demandType;
  LgFrItemPtrVector itemPtrVect;
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < dv.size(); i++)
    {
      LgFrDemand& demand = dv[i];
      itemPtrVect.push_back(&demand);
    }
  return this->getAttributeValue(attrName, itemSubType,
				 itemType, itemPtrVect, difEssenPtr);
}

LgFrAttributeValueType
LgFrDataInterface::attributeValueType(const std::string& attributeName,
                                      const LgFrItemSubType& itemSubType,
                                      const LgFrItemType& itemType)
     const
{
  return difImpPtr_->attributeValueType(attributeName,
                                        itemSubType, itemType);
}

void*
LgFrDataInterface::getAttributeValue(
    const std::string& attrName,
    const LgFrItemSubType& itemSubType,
    const LgFrItemType& itemType,
    const LgFrItemPtrVector& pv,
    const LgFrDataInterfaceEssentials* difEssenPtr)
const
{
  return difImpPtr_->getAttributeValue
           (attrName, itemSubType, itemType, pv, difEssenPtr);
}

bool
LgFrDataInterface::isAttributeFunctionImplemented(
                           const std::string& attrName,
                           const LgFrItemSubType& itemSubType,
                           const LgFrItemType& itemType)
     const
{
  return difImpPtr_->
           isAttributeFunctionImplemented(attrName,
					  itemSubType, itemType);
}

// Assignment
LgFrDataInterface&
LgFrDataInterface::operator=(const LgFrDataInterface& rhs)
{
  if (this != &rhs) {           // Check for assignment to self
    difImpPtr_ = rhs.difImpPtr_->clone();
  }
  return *this;
}

// Free up any resources
void
LgFrDataInterface::deleteExtraResources()
{
  // Nothing to do here in base class
}


// Overloaded operator ->
// This is used to invoke methods in difImpPtr_ stored in this class
// to avoid duplicating all signatures in difImpPtr_.
// This follows the handle/body (counted pointer idiom) in 
// "Advanced C++" by James. Coplien.
// LgFrDataInterface is used as a handle class and 
// LgFrDataInterfaceImplementation is used as a body class.
// 6/29/95 JMT have not yet found a good use of this operator.
LgFrDataInterfaceImplementation* 
LgFrDataInterface::operator->() 
const
{
    return difImpPtr_;
}

// Return the LgFrDataInterfaceImplementation (return const refernece for security)
LgFrDataInterfaceImplementation*
LgFrDataInterface::dataInterfaceImplementation() 
const
{
    return difImpPtr_;
}


// Make copy of DIF without making it belong to a scenario
LgFrDataInterfaceAbstract *
LgFrDataInterface::clone()
const
{
  return new LgFrDataInterface(*this);
}

// Copy constructor in same scenario
LgFrDataInterface::LgFrDataInterface(const LgFrDataInterface& copy)
    : LgFrDataInterfaceAbstract(copy)
{
   difImpPtr_ = copy.difImpPtr_->clone();
}

// Default constructor
LgFrDataInterface::LgFrDataInterface()
    : LgFrDataInterfaceAbstract(),
      difImpPtr_(0)
{
// nothing to do here
}

// Constructor
LgFrDataInterface::LgFrDataInterface(std::string title,
			     LgFrDataInterfaceImplementation* impPtr)
    : LgFrDataInterfaceAbstract(),
      difImpPtr_(impPtr->clone())
{
    difImpPtr_->title(title);
}

// Constructor
LgFrDataInterface::LgFrDataInterface(LgFrDataInterfaceImplementation* impPtr)
    : LgFrDataInterfaceAbstract(),
      difImpPtr_(impPtr->clone())
{
// Nothing to do here
}

// Destructor
LgFrDataInterface::~LgFrDataInterface()
{
  delete difImpPtr_;
}
@


1.1
log
@Initial revision
@
text
@d1 4
d11 1
a11 1
    RWCString t)
d18 1
a18 1
RWCString 
d28 3
a30 3
  LgFrOrderedVectorPart & pv,
  const RWCString & itemSubTypeStr,
  const RWCString & attrName,
d39 1
a39 1
    cerr << "\n Wrong item sub-type is used.  "
d41 1
a41 1
      << endl;
d44 3
a46 2
  LgFrOrderedVectorItemPtr itemPtrVect;
  for ( int i = 0; i < pv.entries(); i++)
d49 1
a49 1
      itemPtrVect.insert(&part);
d58 2
a59 2
    LgFrOrderedVectorDemand & dv,
    const RWCString & attrName,
d65 3
a67 2
  LgFrOrderedVectorItemPtr itemPtrVect;
  for ( int i = 0; i < dv.entries(); i++)
d70 1
a70 1
      itemPtrVect.insert(&demand);
d77 1
a77 1
LgFrDataInterface::attributeValueType(const RWCString& attributeName,
d88 1
a88 1
    const RWCString& attrName,
d91 1
a91 1
    const LgFrOrderedVectorItemPtr& pv,
d99 1
a99 1
RWBoolean
d101 1
a101 1
                           const RWCString& attrName,
a128 8
// Return type identifier
isAReturnType
LgFrDataInterface::isA()
const
{
  return __LGFRDATAINTERFACE;
}

d171 1
a171 1
      difImpPtr_(NULL)
d177 1
a177 1
LgFrDataInterface::LgFrDataInterface(RWCString title,
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
d7 1
a7 1
    std::string t)
d14 1
a14 1
std::string 
d24 3
a26 3
  LgFrPartVector & pv,
  const std::string & itemSubTypeStr,
  const std::string & attrName,
d40 2
a41 3
  LgFrItemPtrVector itemPtrVect;
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < pv.size(); i++)
d44 1
a44 1
      itemPtrVect.push_back(&part);
d53 2
a54 2
    LgFrDemandVector & dv,
    const std::string & attrName,
d60 2
a61 3
  LgFrItemPtrVector itemPtrVect;
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < dv.size(); i++)
d64 1
a64 1
      itemPtrVect.push_back(&demand);
d71 1
a71 1
LgFrDataInterface::attributeValueType(const std::string& attributeName,
d82 1
a82 1
    const std::string& attrName,
d85 1
a85 1
    const LgFrItemPtrVector& pv,
d93 1
a93 1
bool
d95 1
a95 1
                           const std::string& attrName,
d123 8
d173 1
a173 1
      difImpPtr_(0)
d179 1
a179 1
LgFrDataInterface::LgFrDataInterface(std::string title,
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d39 1
a39 1
    std::cerr << "\n Wrong item sub-type is used.  "
d41 1
a41 1
      << std::endl;
@


