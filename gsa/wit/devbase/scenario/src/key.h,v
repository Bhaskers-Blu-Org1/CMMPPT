head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.39;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.31;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFRKEYH
#define LGFRKEYH
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.

#include <scenario/src/idnumber.h>

class LgFrKey 
{
public:
  
  // extract string
  std::string key() const;

  // Overloaded isEqual() (needed)
  bool isEqual(const LgFrKey* a) const;

  // Overloaded compareTo()
  int compareTo(const LgFrKey* source) const;
  
  // Equality and inequality
  int operator==(const LgFrKey&) const;
  int operator!=(const LgFrKey&) const;  

  // Assignment
  LgFrKey& operator=(const LgFrKey&);

  // Copy constructor
  LgFrKey(const LgFrKey&);

  // Constructor
  LgFrKey(const char*);

  // Destructor
  ~LgFrKey();

private:
  std::string key_;
};
#endif
@


1.1
log
@Initial revision
@
text
@d3 3
a6 2
#include <rw/collect.h>
#include <rw/cstring.h>
d9 1
a9 1
class LgFrKey : public RWCollectable
a12 3
  // Return the id
  isAReturnType isA() const;

d14 1
a14 1
  RWCString key() const;
a15 3
  // Overloaded hash (needed)
  unsigned hash() const;
  
d17 1
a17 1
  RWBoolean isEqual(const RWCollectable* a) const;
d20 1
a20 1
  int compareTo(const RWCollectable* source) const;
d39 1
a39 1
  RWCString key_;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 3
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
d4 2
d8 1
a8 1
class LgFrKey 
d12 3
d16 1
a16 1
  std::string key() const;
d18 3
d22 1
a22 1
  bool isEqual(const LgFrKey* a) const;
d25 1
a25 1
  int compareTo(const LgFrKey* source) const;
d44 1
a44 1
  std::string key_;
@

