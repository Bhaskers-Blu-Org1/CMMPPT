head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.45;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.45;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef LGFR_MULTISCHEDULE_ATTRIBUTEITERATOR_H
#define LGFR_MULTISCHEDULE_ATTRIBUTEITERATOR_H

// This is the minor iterator for a multi-schedule.
// MSAttributeIterator will iterate through the priority list in a ms,
// returning itemTimeVec's for the schedule in the ms and item
// that are used to construct it.

#include <scenario/src/msItemIt.h>

class LgFrItem;
class LgFrItemTimeVecPairFloat;

class LgFrMultiScheduleAttributeIterator {

public:

  // Function call operator
  // Advances iterator index.  Returns NULL iff at end of multi-schedule,
  // otherwise return the pointer to itself (this) after advancing the index.
  LgFrMultiScheduleAttributeIterator*
    operator()();  

  // Return the itemTimeVec for the current index.
  const LgFrItemTimeVecPairFloat * const
  itemTimeVec() const;

  // Constructor
  LgFrMultiScheduleAttributeIterator (const LgFrMultiScheduleItemIterator&);
  
  // Assignment operator
  LgFrMultiScheduleAttributeIterator &
    operator=(const LgFrMultiScheduleAttributeIterator& rhs);

  // Copy constructor
  LgFrMultiScheduleAttributeIterator
    (const LgFrMultiScheduleAttributeIterator &);

  // Default constructor
  LgFrMultiScheduleAttributeIterator ();

  // Destructor
  virtual
    ~LgFrMultiScheduleAttributeIterator ();

  // print
  virtual void print() const;

  // test this class
  static void test();

// ---------------------------------------------------------------------
//  PRIVATE MEMBERS
// --------------------------------------------------------------------- 
private:
  LgFrMultiScheduleItemIterator itemIter_;
  int attrIndex_;
  
};

#endif
@


1.1.1.1
log
@Import scenario
@
text
@@
