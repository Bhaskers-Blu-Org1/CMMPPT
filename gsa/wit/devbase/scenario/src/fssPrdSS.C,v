head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.36;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.42;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.42;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.30;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
// Schedule Strategy for a focussed shortage schedule's production schedule.
// The items are parts.
// The timeVecs are the parts' focussed shortage schedule's production schedule.
#include <iostream>

#include <scenario/src/fssPrdSS.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/scenario.h>
#include <scenario/src/zeroTvFS.h>
#include <scenario/src/machdep.h>



// Populate Schedule with itemTimeVecs
void
LgFrFocussedShortageScheduleProductionScheduleStrategy::kernalOfPopulate(
   LgFrSortingScheduleFloat& schedule )
const
{
  LgFrPart part;
  LgFrTimeVecFloat tv;
  LgFrItemTimeVecPairFloat itv( part, tv );

  // Loop once for each part
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {

     part = setOfParts()[i];

     // Is i'th part a product?
     if ( fssCtrlPtr_->implodePtr()->lastProblemSolved().category( &part )
          == LgFrPRODUCT ) {

        // Make itemTimeVec
        itv.item( part );
        itv.timeVecFloat(
              fssCtrlPtr_->fssProductionVolume( &part )   );

        // Check to see if i'th itemTimeVec is to be filtered out
        if ( schedule.filterStrategy().exclude( itv ) ) continue;

        // Insert itemTimeVec into schedule
        schedule.localInsert( itv );

     }
  }

}

// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrFocussedShortageScheduleProductionScheduleStrategy::clone()
const
{
  LgFrFocussedShortageScheduleProductionScheduleStrategy* newInst = 
      new LgFrFocussedShortageScheduleProductionScheduleStrategy(*this);
  return (newInst);
}


// Make clone copy of object with newScenario
LgFrAttributeScheduleStrategy *
LgFrFocussedShortageScheduleProductionScheduleStrategy::clone(
        LgFrScenario& newScenario)
const
{ 
//  return (0);
  LgFrFocussedShortageScheduleProductionScheduleStrategy* newInst = 
      new LgFrFocussedShortageScheduleProductionScheduleStrategy(*this, newScenario);
  return (newInst);
}

// Assignment operator
LgFrFocussedShortageScheduleProductionScheduleStrategy &
LgFrFocussedShortageScheduleProductionScheduleStrategy::operator=(
	  const LgFrFocussedShortageScheduleProductionScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrPartScheduleStrategy::operator= ) (rhs);

    fssCtrlPtr_ = rhs.fssCtrlPtr_;
  }
  return *this;
}


// Copy constructor
LgFrFocussedShortageScheduleProductionScheduleStrategy::
   LgFrFocussedShortageScheduleProductionScheduleStrategy (
      const LgFrFocussedShortageScheduleProductionScheduleStrategy & source)
:  LgFrPartScheduleStrategy( source ), 
   fssCtrlPtr_( source.fssCtrlPtr_ ),
   id_(__LGFRFOCUSSEDSHORTAGESCHEDULEPRODUCTIONSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Copy constructor with new Scenario
LgFrFocussedShortageScheduleProductionScheduleStrategy::
   LgFrFocussedShortageScheduleProductionScheduleStrategy (
      const LgFrFocussedShortageScheduleProductionScheduleStrategy & source,
      LgFrScenario & newScenario)
:  LgFrPartScheduleStrategy( 
         source, 
         newScenario ),
   fssCtrlPtr_( &(focussedShortageScheduleControl(newScenario)) ),
   id_(__LGFRFOCUSSEDSHORTAGESCHEDULEPRODUCTIONSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Constructor
LgFrFocussedShortageScheduleProductionScheduleStrategy::
   LgFrFocussedShortageScheduleProductionScheduleStrategy (
     LgFrScenario & scenario )
:  LgFrPartScheduleStrategy( 
      LgFrAttributeScheduleStrategy::setOfParts(scenario),
      &(focussedShortageScheduleControl(scenario)) ),
   fssCtrlPtr_( &(focussedShortageScheduleControl(scenario)) ),
   id_(__LGFRFOCUSSEDSHORTAGESCHEDULEPRODUCTIONSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrFocussedShortageScheduleProductionScheduleStrategy::
   LgFrFocussedShortageScheduleProductionScheduleStrategy ()
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   fssCtrlPtr_( 0 ),
   id_(__LGFRFOCUSSEDSHORTAGESCHEDULEPRODUCTIONSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrFocussedShortageScheduleProductionScheduleStrategy::
   ~LgFrFocussedShortageScheduleProductionScheduleStrategy ()
{
  // Nothing to do here
}



#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrFocussedShortageScheduleProductionScheduleStrategy methods.
void
LgFrFocussedShortageScheduleProductionScheduleStrategy::test()
{
}

// test LgFrFocussedShortageScheduleProductionScheduleStrategy methods.
// Expects the data in testScenario to come from
// "/u/implode/wit/data/examples/diner12/wit.data"
void
LgFrFocussedShortageScheduleProductionScheduleStrategy::contextTest
    (LgFrScenario          & testScenario,
     LgFrLastProblemSolved & lps,             // testScenario's
     LgFrSetOfParts        & sop,             // testScenario's
     LgFrSetOfDemands      & sod)             // testScenario's
{
  int i;

  // Test constructor
  LgFrFocussedShortageScheduleProductionScheduleStrategy cs1(testScenario);

  // Test copy constructor
  LgFrFocussedShortageScheduleProductionScheduleStrategy cs2(cs1);

  // Test assignment operator
  LgFrFocussedShortageScheduleProductionScheduleStrategy cs3;
  cs3 = cs2;

  {
    // Test clone method
    LgFrAttributeScheduleStrategy *cs4Ptr = cs1.clone();

    // Test destructor
    delete cs4Ptr;
  }
  
  // Set a focus horizon
  testScenario.focussedShortageScheduleControl().
     focusHorizon( *sod.findValue("demand","Ham_Sand"), 1 );

  // Test populate due to new implosion solution.
  LgFrSortingPartScheduleFloat schedule;
  const LgFrSortingPartScheduleFloat & constSchedule = schedule;
  schedule.attributeScheduleStrategy( cs1 );
  testScenario.newImplosionSolution();
  //  cout <<endl <<"LgFrFocussedShortageScheduleProductionScheduleStrategy" <<endl
  //      <<schedule.format() <<endl;

  for ( i=0; i<sop.size(); i++ )
    if ( lps.category( &sop[i] ) == LgFrPRODUCT )
      assert( lps.fssProductionVolume(&sop[i]) == 
	     constSchedule[sop[i]].timeVecFloat() );

  // Test populate with filter
  LgFrSortingPartScheduleFloat schedule1;
  const LgFrSortingPartScheduleFloat & constSchedule1 = schedule1;
  schedule1.filterStrategy( LgFrZeroTimeVecFilterStrategy() );
  schedule1.attributeScheduleStrategy( cs1 );

  schedule1.populate();   // equivalent to cs1.populate( schedule1 );
  //    cout <<endl 
  //         <<"LgFrFocussedShortageScheduleProductionScheduleStrategy with zero filter" 
  //         <<endl
  //         <<schedule1.format() <<endl;

  for ( i=0; i<schedule1.size(); i++ ) {
     assert(  !(constSchedule1[i].timeVecFloat() == 0.0)  );
  }
}
@


1.1
log
@Initial revision
@
text
@d1 3
d7 1
a7 1
#include <iostream.h>
d28 2
a29 1
  for ( size_t i=0; i<setOfParts().entries(); i++ ) {
d70 1
a70 1
//  return (NULL);
a75 8
// Return comparison strategy identifier
isAReturnType
LgFrFocussedShortageScheduleProductionScheduleStrategy::isA()
const
{
   return id_;
}

a80 1
  assert( id_ == rhs.id_ );
d132 2
a133 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), NULL ),
   fssCtrlPtr_( NULL ),
a170 4
  assert( cs1.id_ == __LGFRFOCUSSEDSHORTAGESCHEDULEPRODUCTIONSCHEDULESTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRFOCUSSEDSHORTAGESCHEDULEPRODUCTIONSCHEDULESTRATEGY );
a173 1
  assert( cs2.isA() == __LGFRFOCUSSEDSHORTAGESCHEDULEPRODUCTIONSCHEDULESTRATEGY );
a177 1
  assert( cs3.isA() == cs2.isA() );
a181 1
    assert( cs4Ptr->isA() == cs1.isA() );
d199 1
a199 1
  for ( i=0; i<sop.entries(); i++ )
d216 1
a216 1
  for ( i=0; i<schedule1.entries(); i++ ) {
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 3
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
d4 1
a4 1
#include <iostream>
d25 1
a25 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {
d66 1
a66 1
//  return (0);
d72 8
d85 1
d137 2
a138 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   fssCtrlPtr_( 0 ),
d176 4
d183 1
d188 1
d193 1
d211 1
a211 1
  for ( i=0; i<sop.size(); i++ )
d228 1
a228 1
  for ( i=0; i<schedule1.size(); i++ ) {
@

