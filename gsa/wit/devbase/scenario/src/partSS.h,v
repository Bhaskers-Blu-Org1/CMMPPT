head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.42;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.33;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_PART_SCHEDULE_STRATEGY_H
#define LGFR_PART_SCHEDULE_STRATEGY_H
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/schdStrt.h>

// #include <scenario/src/sOfParts.h>

// Base Class for implementing Schedule Strategies used for populating
// a part schedule by LgFrSortingSchedule

// This class follows the Strategy Pattern

// Forward references
class LgFrSetOfParts;

class LgFrPartScheduleStrategy : 
   public LgFrAttributeScheduleStrategy {

public:

  // Set the  Set Of Parts
  void
    setOfParts(const LgFrSetOfParts &);

  // Assignment operator
  LgFrPartScheduleStrategy &
    operator=(
	      const LgFrPartScheduleStrategy& rhs);

  // Copy constructor
  LgFrPartScheduleStrategy (
     const LgFrPartScheduleStrategy &);

  // Copy constructor associated with a new Scenario
  LgFrPartScheduleStrategy (
     const LgFrPartScheduleStrategy &,
     LgFrScenario & );


  // Constructor
  LgFrPartScheduleStrategy (
     const LgFrSetOfParts &,
     LgFrAlgorithm * algorithmPtr = 0 );


  // Destructor
  virtual
     ~LgFrPartScheduleStrategy ();

protected:

  // Estimate size of schedule using this ass.
  // The populate method uses this to set an initial size of the
  // schedule.
  virtual
     size_t
        estimatedSize(
           const LgFrSortingScheduleFloat& )
              const;

  // Get Set Of Parts
  const LgFrSetOfParts &
     setOfParts()
        const;

private:

  const LgFrSetOfParts * sopPtr_;

  // Default Constructor
  LgFrPartScheduleStrategy ();

};

#endif
@


1.1
log
@Initial revision
@
text
@d3 2
a6 1
#include <rw/cstring.h>
d45 1
a45 1
     LgFrAlgorithm * algorithmPtr = NULL );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d5 1
d44 1
a44 1
     LgFrAlgorithm * algorithmPtr = 0 );
@

