head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.6
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.6
	Root-of-EndRw:1.2
	EndWitRw-branch:1.2.0.4
	Root-of-EndWitRw:1.2
	UsedBySCE:1.2
	RwToStl-branch:1.2.0.2
	Root-of-RwToStl:1.2
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.15.19.36.30;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.07.19.01.11;	author austel;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.02.24.15.29.39;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.39;	author wit;	state Exp;
branches;
next	;

1.2.6.1
date	2003.01.08.17.42.27;	author rwToStl;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2003.01.09.13.54.43;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/demdSchd.h>
#include <scenario/src/demdSchP.h>
#include <scenario/src/machdep.h>
#include <scenario/src/demVolSS.h>

// Set Schedule Strategy
void
LgFrSortingDemandScheduleFloat::attributeScheduleStrategy(
const LgFrDemandScheduleStrategy & attributeScheduleStrategy )
{
   LgFrSortingScheduleFloat::attributeScheduleStrategy( attributeScheduleStrategy );
}

// Get Schedule Strategy
// If this object ceases to exist or the attributeScheduleStrategy is changed,
// then the returned reference will be dangling
const LgFrDemandScheduleStrategy *
LgFrSortingDemandScheduleFloat::attributeScheduleStrategy()
const
{
   return (const LgFrDemandScheduleStrategy *)
      LgFrSortingScheduleFloat::attributeScheduleStrategy();
}

// Add ItemTimeVecPairFloat to demand schedule
void
LgFrSortingDemandScheduleFloat::insert (
       const LgFrItemTimeVecPairFloat itvpf )
{
   assert( &(itvpf.item()) != 0 );
   assert( itvpf.item().isADemand() );
   LgFrSortingScheduleFloat::insert( itvpf );
}

// Add demand (demand) and timeVecFloat(tvf) to the end of the collection
void
LgFrSortingDemandScheduleFloat::insert (
       const LgFrDemand& demand,
       const LgFrTimeVecFloat tvf)
{
   insert( LgFrItemTimeVecPairFloat( demand, tvf ) );
}

// Insert ItemTimeVecPairFloat to demand schedule
void
LgFrSortingDemandScheduleFloat::insertAt (
       const size_t index,
       const LgFrItemTimeVecPairFloat itvpf )
{
   assert( itvpf.item().isADemand() );
   LgFrSortingScheduleFloat::insertAt( index, itvpf );
}

// Add demand (demand) and timeVecFloat(tvf) to the end of the collection
void
LgFrSortingDemandScheduleFloat::insertAt (
       const size_t index,
       const LgFrDemand& demand,
       const LgFrTimeVecFloat tvf)
{
   insertAt( index, LgFrItemTimeVecPairFloat( demand, tvf ) );
}
  
// Insert Demand if it isn't already in the schedule.  In any case,
// associate timeVec with demand.
void
LgFrSortingDemandScheduleFloat::insertKeyAndValue(const LgFrDemand& demand,
					 const LgFrTimeVecFloat& value)
{
  this -> LgFrSortingScheduleFloat::insertKeyAndValue (demand, value);
}


// Return demand at location i
LgFrDemand
LgFrSortingDemandScheduleFloat::demand (const size_t i)
     const
{
  assert (  i < this->size()  );
  return (  (*this)[i]  . demand()  );
}

// Make clone copy of object
LgFrSortingScheduleFloat *
LgFrSortingDemandScheduleFloat::clone()
const
{
  LgFrSortingDemandScheduleFloat* newInst = 
      new LgFrSortingDemandScheduleFloat(*this);
  return (newInst);
}

// Make clone copy of object with newScenario
LgFrSortingScheduleFloat *
LgFrSortingDemandScheduleFloat::clone(LgFrScenario& newScenario)
const
{ 
  LgFrSortingDemandScheduleFloat* newInst = 
      new LgFrSortingDemandScheduleFloat(*this, newScenario);
  return (newInst);
}

LgFrItemTimeVecPairFloat &
LgFrSortingDemandScheduleFloat::operator[](const LgFrDemand& demand)
{
  return (this->LgFrSortingScheduleFloat::operator[](demand));
}

const LgFrItemTimeVecPairFloat &
LgFrSortingDemandScheduleFloat::operator[](const LgFrDemand& demand)
const
{
  return (this->LgFrSortingScheduleFloat::operator[](demand));
}

  
LgFrItemTimeVecPairFloat
LgFrSortingDemandScheduleFloat::operator[](const size_t& i) const
{
  return (this->LgFrSortingScheduleFloat::operator[](i));
}

  
LgFrItemTimeVecPairFloat &
LgFrSortingDemandScheduleFloat::operator[](const size_t& i)
{
  return (this->LgFrSortingScheduleFloat::operator[](i));
}
  
// This should not be used by clients of this class.  Since it is a
// virtual method in the base class, it is used by the base
// class when *this is a LgFrSortingDemandScheduleFloat.
LgFrItemTimeVecPairFloat &
LgFrSortingDemandScheduleFloat::operator[](const LgFrItem& item)
{
  assert (item.isADemand());
  return this->LgFrSortingScheduleFloat::operator[](item);
}

// This should not be used by clients of this class.  Since it is a
// virtual method in the base class, it is used by the base
// class when *this is a LgFrSortingDemandScheduleFloat.
const LgFrItemTimeVecPairFloat &
LgFrSortingDemandScheduleFloat::operator[](const LgFrItem& item)
const
{
  assert (item.isADemand());
  return this->LgFrSortingScheduleFloat::operator[](item);
}


// default constructor
LgFrSortingDemandScheduleFloat::LgFrSortingDemandScheduleFloat(const size_t n)
: LgFrSortingScheduleFloat ( n ) //(size_tMax (n, 1)) )
{
   // Nothing to do here
}
  
// Copy constructor
LgFrSortingDemandScheduleFloat::LgFrSortingDemandScheduleFloat (
   const LgFrSortingDemandScheduleFloat& source)
: LgFrSortingScheduleFloat ( source )
// : LgFrSortingScheduleFloat ( (LgFrSortingScheduleFloat)(source) )
{
   // Nothing to do here
}
  
// Copy constructor with new Scenario
LgFrSortingDemandScheduleFloat::LgFrSortingDemandScheduleFloat (
   const LgFrSortingDemandScheduleFloat& source,
   LgFrScenario & newScenario)
: LgFrSortingScheduleFloat ( source, newScenario )
{
   // Nothing to do here
}
  
// destructor
LgFrSortingDemandScheduleFloat::~LgFrSortingDemandScheduleFloat()
{
   // Nothing to do here
}
  
// Assignment 
LgFrSortingDemandScheduleFloat &
LgFrSortingDemandScheduleFloat::operator=(
    const LgFrSortingDemandScheduleFloat& rhs)
{
  if (this != &rhs) {           // Check for assignment to self
    (this->LgFrSortingScheduleFloat::operator= ) (rhs);
  }

  // Test assignment operator result
  assert (this->size() == rhs.size());

  return *this;
}

// Perform diadic schedule operation.
LgFrSortingDemandScheduleFloat
LgFrSortingDemandScheduleFloat::op(
   LgFrTimeVecFloatOpFunction vectorOp,
   const LgFrSortingDemandScheduleFloat& rhs,
   float defaultValue )
const
{
   LgFrSortingDemandScheduleFloat retVal;

   kernalOfOp( vectorOp, rhs, retVal, defaultValue );

   return retVal;
}


// Perform diadic schedule operation.
LgFrSortingDemandScheduleFloat
LgFrSortingDemandScheduleFloat::op(
   LgFrTimeVecFloatRhsScalarOpFunction scalarOp, 
   const float rhs )
const
{
   LgFrSortingDemandScheduleFloat retVal;

   kernalOfOp( scalarOp, rhs, retVal );

   return retVal;
}


// Perform diadic schedule operation.
LgFrSortingDemandScheduleFloat
LgFrSortingDemandScheduleFloat::op(
   const float lhs,
   LgFrTimeVecFloatLhsScalarOpFunction scalarOp )
const
{
   LgFrSortingDemandScheduleFloat retVal;

   kernalOfOp( lhs, scalarOp, retVal );

   return retVal;
}


// perform scalar operation on column (period) in schedule
LgFrSortingDemandScheduleFloat
LgFrSortingDemandScheduleFloat::columnOp(
  const size_t period,
  float (*scalarOperation) (const float, const float),
  const float rhs )
const
{
   LgFrSortingDemandScheduleFloat retVal;

   kernalOfColumnOp(  period, scalarOperation, rhs, retVal );

   return retVal;
}
  
// Addition operator
// (schedule + schedule)
LgFrSortingDemandScheduleFloat
operator+ (
   const LgFrSortingDemandScheduleFloat& lhs, 
   const LgFrSortingDemandScheduleFloat& rhs)
{
  return lhs.op(
#ifdef WIN32
  // Other compilers don't need this cast-not req'd for MSVC4, req'd for MSVC2
  (LgFrTimeVecFloatOpFunction)
#endif
  &LgFrTimeVecFloat::add,rhs);
}

// Subtraction operator
// (schedule - schedule)
LgFrSortingDemandScheduleFloat
operator- (
   const LgFrSortingDemandScheduleFloat& lhs,
   const LgFrSortingDemandScheduleFloat& rhs)
{
  return lhs.op(
#ifdef WIN32
  // Other compilers don't need this cast-not req'd for MSVC4, req'd for MSVC2
  (LgFrTimeVecFloatOpFunction)
#endif
  &LgFrTimeVecFloat::subtract,rhs);
}

// Multiplcation operator
// (schedule * float)
LgFrSortingDemandScheduleFloat
operator* (
   const LgFrSortingDemandScheduleFloat& lhs,
   const float rhs)
{
  return lhs.op ( operator*, rhs );
}
// (float * schedule)
LgFrSortingDemandScheduleFloat
operator* (
   const float lhs,
   const LgFrSortingDemandScheduleFloat& rhs)
{
  return rhs.op ( lhs, operator*);
}


// Division operator
// (schedule / float)
LgFrSortingDemandScheduleFloat
operator/ (
   const LgFrSortingDemandScheduleFloat& lhs,
   const float rhs)
{
  return lhs.op ( operator/, rhs );
}
// (float / schedule)
LgFrSortingDemandScheduleFloat
operator/ (
   const float lhs,
   const LgFrSortingDemandScheduleFloat& rhs)
{
  return rhs.op( lhs, operator/ );
}


// Addition operator
// (schedule + float)
LgFrSortingDemandScheduleFloat
operator+ (
   const LgFrSortingDemandScheduleFloat& lhs,
   const float rhs)
{
  return lhs.op ( operator+, rhs);
}
// (float + schedule)
LgFrSortingDemandScheduleFloat
operator+ (
   const float lhs,
   const LgFrSortingDemandScheduleFloat& rhs)
{
  return rhs.op ( lhs, operator+);
}


// Subtraction operator
// (schedule - float)
LgFrSortingDemandScheduleFloat
operator- (
   const LgFrSortingDemandScheduleFloat& lhs,
   const float rhs)
{
  return lhs.op ( operator-, rhs );
}
// (float - schedule)
LgFrSortingDemandScheduleFloat
operator- (
   const float lhs,
   const LgFrSortingDemandScheduleFloat& rhs)
{
  return rhs.op ( lhs, operator- );
}

  

#ifdef NDEBUG
#undef NDEBUG
#endif

// test this class
void LgFrSortingDemandScheduleFloat::test()
{
  // Make some demand for the test
  LgFrPart p1( "part1" );
  LgFrPart p2( "part2" );
  LgFrPart p3( "part3" );
  LgFrDemand d1( "demand1", &p1 );
  LgFrDemand d2( "demand2", &p2 );
  LgFrDemand d3( "demand3", &p3 );

  // Make some timeVecFloat for the test
  LgFrTimeVecFloat tvf1(10,1.11f);
  LgFrTimeVecFloat tvf2(10,2.22f);

  // Make some demand timeVecFloat pairs for the test
  LgFrItemTimeVecPairFloat dtvfp1( d1, tvf1 );
  LgFrItemTimeVecPairFloat dtvfp2( d2, tvf1 );
  LgFrItemTimeVecPairFloat dtvfp3( d3, tvf2 );
  LgFrItemTimeVecPairFloat dtvfp4( d1, tvf2 );

  // Test the insertion methods
  LgFrSortingDemandScheduleFloat ss (1);	// Make it a little small
  				// to test automatic resizing
  ss.insert(dtvfp2);
  ss.insert(d3, tvf2);          // equivalent to ss.insert(ptvfp3)
  ss.insertAt(0, d1, tvf1);     // equivalent to ss.insertAt(0, ptvfp1);
  assert (3 == ss.size());
  assert (ss[0].item().name() == "demand1");
  assert (ss[0].demand().partPtr() == &p1);
  assert (ss[2].item().name() == "demand3");
  assert (ss[2].demand().partPtr() == &p3);
  assert (ss[1].item().name() == "demand2");

  // Test the assignment operator and the copy constructor
  LgFrSortingDemandScheduleFloat ss1 (1);	// Make it a little small
  				// to test resizing at assignment time
  ss1.insert(dtvfp4);		
  ss1 = ss;
  LgFrSortingDemandScheduleFloat ss2 (ss);

  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < ss.size(); i++) {
    // Test result of assignment
    assert (ss1[i] == ss[i]);
    // Test result of copy
    assert (ss2[i] == ss[i]);
    // Print the contents of partSchedule
    // ss[i].print();
    // std::cout << std::endl;
  }

  // Test to ensure that an item without a defined type cannot be 
  // inserted.
  // ss.push_back( LgFrItemTimeVecPairFloat() );  // <-- assert in insert 
                                               //     should fail 
  // Test indexing by item
  assert( ss[d3] == dtvfp3 );
  const LgFrSortingScheduleFloat constSs(ss);
  assert( constSs[d3] == dtvfp3 );

  // Test resize ... no more, we let the tools do their job
  //LgFrSortingDemandScheduleFloat ss3(0);
  //ss3.resize(3);
  //assert (ss3.size() == 0);

  // Test op method
  {
  LgFrSortingDemandScheduleFloat lhs,rhs,diff;
  float v1[]={ 1., 2., 3., 4. };
  float v2[]={ 4., 3., 2., 1. };
  LgFrTimeVecFloat vec1(4,v1), vec2(4,v2);
  lhs.insertKeyAndValue( d1, vec1 );
  lhs.insertKeyAndValue( d2, vec1 );
  rhs.insertKeyAndValue( d2, vec2 );
  rhs.insertKeyAndValue( d3, vec2 );
  diff = lhs.op(
#ifdef WIN32
  // Other compilers don't need this cast-not req'd for MSVC4, req'd for MSVC2
  (LgFrTimeVecFloatOpFunction)
#endif
  &LgFrTimeVecFloat::subtract, rhs );
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
  assert( diff.size() == 3 );
  assert( diff[0].item() == d1 );
  assert( diff[1].item() == d2 );
  assert( diff[2].item() == d3 );
  assert( diff[0].timeVecFloat() == vec1 );
  assert( diff[1].timeVecFloat() == vec1-vec2 );
  assert( diff[2].timeVecFloat() == 0.0 -vec2 );
  }
  {  // empty rhs
  LgFrSortingDemandScheduleFloat lhs,rhs,diff;
  float v1[]={ 1., 2., 3., 4. };
  float v2[]={ 4., 3., 2., 1. };
  LgFrTimeVecFloat vec1(4,v1), vec2(4,v2);
  lhs.insertKeyAndValue( d1, vec1 );
  lhs.insertKeyAndValue( d2, vec2 );
  diff = lhs.op(
#ifdef WIN32
  // Other compilers don't need this cast-not req'd for MSVC4, req'd for MSVC2
  (LgFrTimeVecFloatOpFunction)
#endif
  &LgFrTimeVecFloat::subtract, rhs );
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
  assert( diff.size() == 2 );
  assert( diff[0].item() == d1 );
  assert( diff[1].item() == d2 );
  assert( diff[0].timeVecFloat() == vec1 );
  assert( diff[1].timeVecFloat() == vec2 );
  }
  {   // empty lhs
  LgFrSortingDemandScheduleFloat lhs,rhs,diff;
  float v1[]={ 1., 2., 3., 4. };
  float v2[]={ 4., 3., 2., 1. };
  LgFrTimeVecFloat vec1(4,v1), vec2(4,v2);
  rhs.insertKeyAndValue( d2, vec1 );
  rhs.insertKeyAndValue( d3, vec2 );
  diff = lhs.op(
#ifdef WIN32
  // Other compilers don't need this cast-not req'd for MSVC4, req'd for MSVC2
  (LgFrTimeVecFloatOpFunction)
#endif
  &LgFrTimeVecFloat::subtract, rhs );
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
  assert( diff.size() == 2 );
  assert( diff[0].item() == d2 );
  assert( diff[1].item() == d3 );
  assert( diff[0].timeVecFloat() == 0.0-vec1 );
  assert( diff[1].timeVecFloat() == 0.0 -vec2 );
  }
  {   // empty lhs and rhs
  LgFrSortingDemandScheduleFloat lhs,rhs,diff;
  float v1[]={ 1., 2., 3., 4. };
  float v2[]={ 4., 3., 2., 1. };
  diff = lhs.op(
#ifdef WIN32
  // Other compilers don't need this cast-not req'd for MSVC4, req'd for MSVC2
  (LgFrTimeVecFloatOpFunction)
#endif
  &LgFrTimeVecFloat::subtract, rhs );
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
  assert( diff.size() == 0 );
  }

  // Test operation- method
  {
  LgFrSortingDemandScheduleFloat lhs,rhs,diff;
  float v1[]={ 1., 2., 3., 4. };
  float v2[]={ 4., 3., 2., 1. };
  LgFrTimeVecFloat vec1(4,v1), vec2(4,v2);
  lhs.insertKeyAndValue( d1, vec1 );
  lhs.insertKeyAndValue( d2, vec1 );
  rhs.insertKeyAndValue( d2, vec2 );
  rhs.insertKeyAndValue( d3, vec2 );
  diff = lhs - rhs;
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
  assert( diff.size() == 3 );
  assert( diff[0].item() == d1 );
  assert( diff[1].item() == d2 );
  assert( diff[2].item() == d3 );
  assert( diff[0].timeVecFloat() == vec1 );
  assert( diff[1].timeVecFloat() == vec1-vec2 );
  assert( diff[2].timeVecFloat() == 0.0 -vec2 );
  }

  // Test operation+ method
  {
  LgFrSortingDemandScheduleFloat lhs,rhs,result;
  float v1[]={ 1., 2., 3., 4. };
  float v2[]={ 4., 3., 2., 1. };
  LgFrTimeVecFloat vec1(4,v1), vec2(4,v2);
  lhs.insertKeyAndValue( d1, vec1 );
  lhs.insertKeyAndValue( d2, vec1 );
  rhs.insertKeyAndValue( d2, vec2 );
  rhs.insertKeyAndValue( d3, vec2 );
  result = lhs + rhs;
  // std::cout <<"result" <<std::endl;
  // std::cout <<result.format() <<std::endl;
  assert( result.size() == 3 );
  assert( result[0].item() == d1 );
  assert( result[1].item() == d2 );
  assert( result[2].item() == d3 );
  assert( result[0].timeVecFloat() == vec1 );
  assert( result[1].timeVecFloat() == vec1+vec2 );
  assert( result[2].timeVecFloat() == 0.0 +vec2 );
  }

  // Test scalar operation+,-,*,/ methods
  {
  LgFrSortingDemandScheduleFloat x,y,z,r;
  float v1[]={ 1., 2., 3., 4. };
  float v2[]={ 4., 3., 2., 1. };
  LgFrTimeVecFloat vec1(4,v1), vec2(4,v2);
  x.insertKeyAndValue( d1, vec1 );
  x.insertKeyAndValue( d2, vec2 );
  y.insertKeyAndValue( d1, 2.34f*vec1 );
  y.insertKeyAndValue( d2, 2.34f*vec2 );
  z.insertKeyAndValue( d1, 5.6f+vec1 );
  z.insertKeyAndValue( d2, 5.6f+vec2 );
  r.insertKeyAndValue( d1, 7.8f/vec1 );
  r.insertKeyAndValue( d2, 7.8f/vec2 );

  assert( 2.34f*x == y );
  assert( x*2.34f == y );

  assert( y/2.34f == x );
  assert( 7.8f/x == r );

  assert( 5.6f+x == z );
  assert( x+5.6f == z );

  assert( z-5.6f == x );
  assert( 3.13f-x == 3.13f + (-1)*x );
  }
}

// test LgFrSortingDemandScheduleFloat methods.
// Expects the data in testScenario to come from
// "/u/implode/wit/data/examples/diner12/wit.data"
void
LgFrSortingDemandScheduleFloat::contextTest(LgFrScenario& testScenario)
{
  // see if all schedules are properly updated when wip is updated

  LgFrSortingDemandScheduleFloatSmartPointer schedule1;
  LgFrSortingDemandScheduleFloatSmartPointer schedule2;
  LgFrDemandVolumeScheduleStrategy ss1(testScenario);
  LgFrDemandVolumeScheduleStrategy ss2(ss1);
  schedule1->attributeScheduleStrategy(ss1);
  schedule2->attributeScheduleStrategy(ss2);

  // populate schedules
  ss1.populate( *schedule1 );
  ss2.populate( *schedule2 );  

  // change a schedule
  LgFrDemand aDemand = schedule1->demand(0);

  std::cout << std::endl << "schedule2 before schedule 1 changes" << std::endl
      << schedule2->format() << std::endl;
  
  schedule1->insertKeyAndValue( aDemand,
				(*schedule1)[0].timeVecFloat() + 2.5
			      );
  std::cout << std::endl << "schedule1 after schedule 1 changes" << std::endl
      << schedule1->format() << std::endl;

  std::cout << std::endl << "schedule2 after schedule 1 changes" << std::endl
      << schedule2->format() << std::endl;

  
  // Test columnOp
  {
  LgFrSortingDemandScheduleFloat schedA;
  float vA1[]={ 1.f, 2.f, 3.f, 4.f };
  float vA2[]={ 4.f, 3.f, 2.f, 1.f };
  LgFrTimeVecFloat vecA1(4,vA1), vecA2(4,vA2);
  schedA.insertKeyAndValue( schedule1->demand(0), vecA1 );
  schedA.insertKeyAndValue( schedule1->demand(1), vecA2 );
  LgFrSortingDemandScheduleFloat schedB = schedA.columnOp( 2, ::LgFrAssign, 3.14f );
  LgFrTimeVecFloat vecB1 = vecA1;
  vecB1[2] = 3.14f;
  LgFrTimeVecFloat vecB2 = vecA2;
  vecB2[2] = 3.14f;
  assert( schedB.size() == 2 );
  assert( schedB[0].item() == schedule1->demand(0) );
  assert( schedB[1].item() == schedule1->demand(1) );
  assert( schedB[0].timeVecFloat() == vecB1 );
  assert( schedB[1].timeVecFloat() == vecB2 );

  LgFrSortingDemandScheduleFloat schedC =
    schedB.columnOp( 2, ::LgFrMultiply, 2.0 );
  LgFrTimeVecFloat vecC1 = vecB1;
  vecC1[2] = 2 * vecB1[2];
  LgFrTimeVecFloat vecC2 = vecB2;
  vecC2[2] = 2 * vecB2[2];
  assert( schedC.size() == 2 );
  assert( schedC[0].item() == schedule1->demand(0) );
  assert( schedC[1].item() == schedule1->demand(1) );
  assert( schedC[0].timeVecFloat() == vecC1 );
  assert( schedC[1].timeVecFloat() == vecC2 );
  }
}
@


1.2
log
@

NOTE CONCERNING FOR-SEMANTICS.

In old C++ semantics, this was illegal:
	for (int i=...) { ...}
	for (int i=...) { ...}

because the scope of i extended beyond the first for-loop, making
the second declaration a conflict.

In new C++ semantics, this is illegal:
	for (int i=...) { ...}
	for (i=...) { ...}

because the scope of i extends in the first for-loop, making
the use of "i" in the second loop unbound.

We can't have it both ways.  We could convert the source to be this:
	inti;
	for (i=...) { ...}
	for (i=...) { ...}

but rather than do that, I have opted to just use a special flag
("-qlanglvl=noansifor") to tell vacpp to use the old semantics.
This flag is in config/p_powerVac.mk.
We can always convert these for loops later if we like, and take
out the flag.


Now some notes concerning what I did in the various components.
Hopefully no one will ever have to read this.

CONFIG:
changed config/p_powerVac.mk by copying setting for ds_comp_std_flags
from config/p_power64v5.mk, to suppress error messages concerning
the technique to avoid accidental use of compiler-generated constructors.

WITUTIL:
changed return type of "main" to int in several files.

SCENARIO and SCE:
In many files, some member declarations had (unnecessary) qualifiers:

	class S {
	S::f();
	};

The obvious solution was to just remove the "S::" qualifier.



In some files (such as ipDifT.h), a member declaration using a class
name in a return type caused a syntax error; the compiler complained
about ambiguity.

	class X {
	C f();
	};

Solution:  add "class C" in front.  Should really have no possible problems.

	class C;
	class X {
	C f();
	};



Some classes declared protected members of other classes to be friends:

	class A {
	protected:
	  int mem();
	};

	class B {
	friend int A::mem();
	};

This is evidentally now illegal.  I suppose it makes sense that one
should already have access to the thing that one wants to be a friend of.

My solution was to just drop the "protected" keyword.
This allows everyone access to these members (which is presumably
undesirable), but at least doesn't allow the friend classes access
to the private data of this class (which presumably is desired).

Another alternative would be to keep the "protected" keyword and
add "friend class A" to the friend class.
The situation is now reversed; it would have the drawback of allowing
the friend class access to private data (which presumably isn't desired),
but would disallow non-friends access to these protected members.




attrInfo.h:  typedef declarations for functions types cannot have
default arguments, i.e. this is illegal:

	typedef int (*f)(int x = 1);

Solution:  drop the default argument:

	typedef int (*f)(int x);

(I suppose this makes sense, given that the treatment of default arguments
seems to have gotten a bit complicated - you can add and remove them
using new declarations.)



(THIS NOTE IS OBSOLETE since I ended up leaving these for-loops alone.
However, it may be useful if we ever do convert the source to the
new syntax.
calendar.C, consSS.C, difCmrpF.C, difWit[DR].C:
  added "int" (or size_t, as appropriate) to "for" loops:

was:
	for (int t=...) { ..}
	for (t=...) { ..}

now:
	for (int t=...) { ..}
	for (int t=...) { ..}

This is ok since t is initialized in each loop.

This wasn't possible in one spot in sched.C, in LgFrScheduleFloat::reduceItems.
It also wasn't possible in a spot in sce/ipSce.C.
It had code like this:
	int t;
	... code setting t
	for (...) {
	  for (int t = ...)
		...
	  somevar = t;
	}

According to the old rules, the assignment "somevar = t" refers to the
t in the nested for-loop.  I've changed it to this:

	for (...) {
	  int t;
	  for (t = ...)
		...
	  somevar = t;
	}

Fortunately, in most places the loop was not nested inside some other
construct, which makes it likely that I didn't make any mistakes.

END OBSOLETE NOTE)



demdSchd.C, partSchd.C, scenATP.C, ...:
  apparently, expressions that refer to a pointer-to-member must use "&":
	class C {
	int f();
	};

	g(C::f);	// ILLEGAL
	g(&C::f);	// GOOD BOY!

(maybe this makes parsing easier?)



dfa.C:  changed
	#include "dfa.h"
to
	#include <scenario/src/dfa.h>

so that the depedency generated by makedepend (and that ends up in Makefile)
doesn't cause problems.




lastPrbS.C:  "bool" is now a keyword.  Changed variable "bool" to "Bool".





multDSch.C:

start with this decl:

    LgFrMultiDemandScheduleFloat& msdClone = *msdClonePtr;

and this call:

    const LgFrSortingDemandScheduleFloat& demandSchdClone
      = *( (LgFrSortingDemandScheduleFloatSmartPointer&)(msdClone.schedule(LGFRDemandVolume)) );


LgFrMultiDemandScheduleFloat (in multDSch.h) apparently inherits the
declaration of method "schedule" from its baseclass, LgFrMultiScheduleFloat
(in multiSch.h).

  // Return a non-const schedule
  virtual
    LgFrSortingScheduleFloatSmartPointer
     schedule(const LgFrScheduleDescriptor& sd) const;


class LgFrSortingScheduleFloatSmartPointer is defined in sortSchP.h.
Its baseclass is LgFrSortingScheduleFloatSmartPointerToConst,
defined in the same file, and that has no baseclass.

class LgFrSortingDemandScheduleFloatSmartPointer is defined in demdSchP.h,
and looks similar to LgFrSortingScheduleFloatSmartPointer,
probably one was copied from the other and the names were changed.

So, the problematic statement is probably the equivalent of casting a pointer.

This was the code I used instead.
It may just be that one can't cast using "&" anymore.

    LgFrSortingScheduleFloatSmartPointer XtmpschX = msdClone.schedule(LGFRDemandVolume);
    LgFrSortingDemandScheduleFloatSmartPointer &XtmpschX2 = *(LgFrSortingDemandScheduleFloatSmartPointer*)&XtmpschX;
    const LgFrSortingDemandScheduleFloat& demandSchdClone = *(XtmpschX2);


This is *probably* ok, since both smartpointers have the same private
data fields (in their basetypes).  The code snippets below give the
general idea.  I imagine that this would all be done with templates
these days (if there isn't already a smartpointer library somewhere).



protected:
    LgFrSortingDemandScheduleFloat* pointer_; // should make this const but I want to use
                            //  it for the LgFrSortingDemandScheduleFloatSmartPointer class
			    //  (the non-const class) to inherit this member.
			    //  The way it's been set up only const stuff
                            //  is being returned so we're OK.
    LgFrReferenceCount count_;




protected:
    LgFrSortingScheduleFloat* pointer_; // should make this const but I want to use
                            //  it for the LgFrSortingScheduleFloatSmartPointer class
			    //  (the non-const class) to inherit this member.
			    //  The way it's been set up only const stuff
                            //  is being returned so we're OK.
    LgFrReferenceCount count_;


Dereference is just what it should be:


const LgFrSortingDemandScheduleFloat &
LgFrSortingDemandScheduleFloatSmartPointer::operator*() const
{
    return *pointer_;
}

LgFrSortingScheduleFloat &
LgFrSortingScheduleFloatSmartPointer::operator*()
{
    return *pointer_;
}



SCE:
Created powerVac/Makefile
by copying power64/Makefile and just changine "power64" to "powerVac".





For convenience, here is the output of these commands:

	cvs diff scenario/src
	cvs diff sce/src


Index: scenario/src/attrInfo.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/attrInfo.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 attrInfo.h
17c17,20
< 	       const LgFrDataInterfaceEssentials* difEssenPtr = NULL);
---
>
> 	       // syntax error - typedefs can (no longer) have default args
> 	       const LgFrDataInterfaceEssentials* difEssenPtr /////= NULL
> 	       );
47c50
< LgFrAttributeInformation::LgFrAttributeInformation(const LgFrAttributeInformation& );
---
> LgFrAttributeInformation(const LgFrAttributeInformation& );
Index: scenario/src/backlgSS.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/backlgSS.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 backlgSS.h
83c83
<   LgFrBacklogScheduleStrategy::contextTest
---
>   contextTest
Index: scenario/src/calendar.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/calendar.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 calendar.h
252c252
<   LgFrCalendar::addMonths(const RWTime& aTime, unsigned numMonthsOut,
---
>   addMonths(const RWTime& aTime, unsigned numMonthsOut,
281c281
<   LgFrCalendar::display()
---
>   display()
Index: scenario/src/demdSchd.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/demdSchd.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 demdSchd.C
273c273
<   LgFrTimeVecFloat::add,rhs);
---
>   &LgFrTimeVecFloat::add,rhs);
288c288
<   LgFrTimeVecFloat::subtract,rhs);
---
>   &LgFrTimeVecFloat::subtract,rhs);
452c452
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
475c475
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
496c496
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
514c514
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
Index: scenario/src/dfa.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/dfa.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 dfa.C
14c14,16
< #include "dfa.h"
---
>
> //#include "dfa.h"
> #include <scenario/src/dfa.h>
Index: scenario/src/filtStrt.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/filtStrt.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 filtStrt.h
89c89,90
< protected:
---
>   // see the comment in schdStrt.h.
>   /////protected:
Index: scenario/src/fssCtrl.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/fssCtrl.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 fssCtrl.h
109c109
<         LgFrFocussedShortageScheduleControl::isValid()
---
>         isValid()
117c117
<         LgFrFocussedShortageScheduleControl::focusChanged()
---
>         focusChanged()
151c151
<    LgFrFocussedShortageScheduleControl::LgFrFocussedShortageScheduleControl(
---
>    LgFrFocussedShortageScheduleControl(
Index: scenario/src/ipDifT.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/ipDifT.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 ipDifT.h
10a11,15
>
> // added to avoid syntax error in declaration of difTestingScenario below - vra
> class LgFrScenarioForDifTestingSmartPointer;
>
>
Index: scenario/src/lastPrbS.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/lastPrbS.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 lastPrbS.C
98c98
<    witBoolean bool;
---
>    witBoolean Bool;
100,101c100,101
<       witRunVeneer().constWitRun(), &bool );
<    if ( bool ) return TRUE;
---
>       witRunVeneer().constWitRun(), &Bool );
>    if ( Bool ) return TRUE;
248c248
<    witBoolean bool;
---
>    witBoolean Bool;
250,251c250,251
<       witRunVeneer().constWitRun(), &bool );
<    if ( bool ) return TRUE;
---
>       witRunVeneer().constWitRun(), &Bool );
>    if ( Bool ) return TRUE;
Index: scenario/src/lastPrbS.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/lastPrbS.h,v
retrieving revision 1.2
diff -r1.2 lastPrbS.h
182c182
<         LgFrLastProblemSolved::focusHorizon(
---
>         focusHorizon(
686c686
<         LgFrLastProblemSolved::cumShipBounds(
---
>         cumShipBounds(
760c760
<         LgFrLastProblemSolved::cumShipSoftLowerBound(
---
>         cumShipSoftLowerBound(
910c910
<       LgFrLastProblemSolved::getPartFloatVecAttribute(
---
>       getPartFloatVecAttribute(
917c917
<        LgFrLastProblemSolved::setPartFloatVecAttribute(
---
>        setPartFloatVecAttribute(
924c924
<       LgFrLastProblemSolved::setPartBoundsAttribute(
---
>       setPartBoundsAttribute(
933c933
<       LgFrLastProblemSolved::getDemandFloatVecAttribute(
---
>       getDemandFloatVecAttribute(
940c940
<       LgFrLastProblemSolved::getDemandSoftLowerBoundAttribute(
---
>       getDemandSoftLowerBoundAttribute(
947c947
<       LgFrLastProblemSolved::setDemandBoundsAttribute(
---
>       setDemandBoundsAttribute(
956c956
<    LgFrLastProblemSolved::writeSchedule(
---
>    writeSchedule(
Index: scenario/src/multDSch.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/multDSch.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 multDSch.C
436,438c436,446
<
<     const LgFrSortingDemandScheduleFloat& demandSchdClone
<       = *( (LgFrSortingDemandScheduleFloatSmartPointer&)(msdClone.schedule(LGFRDemandVolume)) );
---
>
>     //// LET'S TRY THIS AGAIN...
>     /////const LgFrSortingDemandScheduleFloat& demandSchdClone
>     /////= *( (LgFrSortingDemandScheduleFloatSmartPointer&)(msdClone.schedule(LGFRDemandVolume)) );
>
>     LgFrSortingScheduleFloatSmartPointer XtmpschX = msdClone.schedule(LGFRDemandVolume);
>     LgFrSortingDemandScheduleFloatSmartPointer &XtmpschX2 = *(LgFrSortingDemandScheduleFloatSmartPointer*)&XtmpschX;
>     const LgFrSortingDemandScheduleFloat& demandSchdClone = *(XtmpschX2);
>
>     ///// DONE
>
Index: scenario/src/outInter.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/outInter.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 outInter.h
43c43
<   static const LgFrSchedulePrintStyle LgFrSolutionOutputInterface::pmTEXT;
---
>   static const LgFrSchedulePrintStyle pmTEXT;
Index: scenario/src/pairComp.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/pairComp.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 pairComp.h
84c84,86
< protected:
---
>   // in scenario.h, class LgFrScenario declares these methods to be "friend".
>   // see the comment in schdStrt.h.
>   //// protected:
Index: scenario/src/partSchd.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/partSchd.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 partSchd.C
261c261
<   LgFrTimeVecFloat::add,rhs);
---
>   &LgFrTimeVecFloat::add,rhs);
276c276
<   LgFrTimeVecFloat::subtract,rhs);
---
>   &LgFrTimeVecFloat::subtract,rhs);
443c443
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
466c466
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
487c487
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
503c503
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
Index: scenario/src/scenATP.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/scenATP.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 scenATP.C
484c484
<           LgFrTimeVecFloat::returnRHS, newVol ) );
---
>           &LgFrTimeVecFloat::returnRHS, newVol ) );
513c513
<           LgFrTimeVecFloat::returnRHS, newVol ) );
---
>           &LgFrTimeVecFloat::returnRHS, newVol ) );
Index: scenario/src/scenSnFS.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/scenSnFS.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 scenSnFS.h
16c16
<   LgFrScenarioSensitiveFilterStrategy::scenario(
---
>   scenario(
21c21
<   LgFrScenarioSensitiveFilterStrategy::scenarioPtr()
---
>   scenarioPtr()
Index: scenario/src/scenario.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/scenario.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 scenario.h
46a47,54
> // had to add this line in order to avoid syntax error concerning
> // the uses of this class in members below.
> // vacpp complained that is was ambiguous.
> // I don't know why.
> // Perhaps in older versions of the compiler the friend declarations
> // below also implicitly declared the class as well?
> class LgFrScheduleFactory;
>
231c239
<   const LgFrScheduleFactory*
---
>     const LgFrScheduleFactory*
Index: scenario/src/schFCMRP.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/schFCMRP.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 schFCMRP.C
82c82
<       sumSS->combiningFunction (LgFrTimeVecFloat::add);
---
>       sumSS->combiningFunction (&LgFrTimeVecFloat::add);
184c184
<       sumSS->combiningFunction (LgFrTimeVecFloat::add);
---
>       sumSS->combiningFunction (&LgFrTimeVecFloat::add);
370c370
<       usagePctSS->combiningFunction (LgFrTimeVecFloat::percentageOf);
---
>       usagePctSS->combiningFunction (&LgFrTimeVecFloat::percentageOf);
416c416
<       deltaSS->combiningFunction (LgFrTimeVecFloat::subtract);
---
>       deltaSS->combiningFunction (&LgFrTimeVecFloat::subtract);
Index: scenario/src/schFctry.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/schFctry.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 schFctry.h
96c96
< friend LgFrScenarioBuilder;
---
> friend class LgFrScenarioBuilder;
Index: scenario/src/schdSnSS.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/schdSnSS.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 schdSnSS.C
242c242
<    combiningFunction_(LgFrTimeVecFloat::add),
---
>    combiningFunction_(&LgFrTimeVecFloat::add),
260c260
<    combiningFunction_(LgFrTimeVecFloat::add),
---
>    combiningFunction_(&LgFrTimeVecFloat::add),
613c613
<       cs1.combiningFunction (LgFrTimeVecFloat::subtract);
---
>       cs1.combiningFunction (&LgFrTimeVecFloat::subtract);
Index: scenario/src/schdStrt.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/schdStrt.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 schdStrt.h
141c141,168
< protected:
---
>   ////??????
>   // in scenario.h, class LgFrScenario declares (most of) the
>   // following methods to be "friend"s.
>   // I (vra) can't see how that would have ever been possible,
>   // given that these are protected methods.
>   // Perhaps the compilers are just more finicky now.
>   // As a hack to get this working right away, I will remove the
>   // protected keyword.
>   //
>   // An an alternative, one could add
>   //    friend class LgFrAttributeScheduleStrategy;
>   // to the classes that need access (such as LgFrScenario)
>   // and make these methods protected again.
>   //
>   // The differences between these two styles is:
>   //	dropping "protected" here allows everyone access,
>   //	(which presumably isn't intended),
>   //	but denies friends (such as LgFrScenario) access to private members
>   //	(which presumably is intended).
>   //
>   //	in contrast, using friend class LgFrAttributeScheduleStrategy
>   //	(and putting back the "protected" keyword here)
>   //	allows the friend classes access to private members
>   //	(presumably not intended),
>   //	but denies everyone else access to protected members
>   //	(presumably intended).
>   //
>   ////// protected:
Index: scenario/src/sched.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/sched.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 sched.C
578c578
<   return lhs.op(LgFrTimeVecFloat::add,rhs);
---
>   return lhs.op(&LgFrTimeVecFloat::add,rhs);
585c585
<   return lhs.op(LgFrTimeVecFloat::subtract,rhs);
---
>   return lhs.op(&LgFrTimeVecFloat::subtract,rhs);
594c594
<   return op(LgFrTimeVecFloat::maximum,rhs,-FLT_MAX);
---
>   return op(&LgFrTimeVecFloat::maximum,rhs,-FLT_MAX);
716c716
<   diff = lhs.op( LgFrTimeVecFloat::subtract, rhs );
---
>   diff = lhs.op( &LgFrTimeVecFloat::subtract, rhs );
734c734
<   diff = lhs.op( LgFrTimeVecFloat::subtract, rhs );
---
>   diff = lhs.op( &LgFrTimeVecFloat::subtract, rhs );
750c750
<   diff = lhs.op( LgFrTimeVecFloat::subtract, rhs );
---
>   diff = lhs.op( &LgFrTimeVecFloat::subtract, rhs );
761c761
<   diff = lhs.op( LgFrTimeVecFloat::subtract, rhs );
---
>   diff = lhs.op( &LgFrTimeVecFloat::subtract, rhs );
Index: scenario/src/sched.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/sched.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 sched.h
81c81
<       LgFrScheduleFloat::capacity()
---
>       capacity()
Index: scenario/src/sortSchd.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/sortSchd.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 sortSchd.C
679c679
<   return lhs.op(LgFrTimeVecFloat::add,rhs);
---
>   return lhs.op(&LgFrTimeVecFloat::add,rhs);
688c688
<   return lhs.op(LgFrTimeVecFloat::subtract,rhs);
---
>   return lhs.op(&LgFrTimeVecFloat::subtract,rhs);
Index: scenario/src/wrkgProb.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/wrkgProb.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 wrkgProb.C
641c641
<                LgFrLastProblemSolved::capitalCost);
---
>                &LgFrLastProblemSolved::capitalCost);
650c650
<                       LgFrLastProblemSolved::capitalCost );
---
>                       &LgFrLastProblemSolved::capitalCost );
660c660
<                LgFrLastProblemSolved::equitability);
---
> 	     &LgFrLastProblemSolved::equitability);
669c669
<                       LgFrLastProblemSolved::equitability );
---
> 		    &LgFrLastProblemSolved::equitability );
679c679
<                LgFrLastProblemSolved::buildAhead);
---
> 		   &LgFrLastProblemSolved::buildAhead);
688c688
<                       LgFrLastProblemSolved::buildAhead );
---
> 			  &LgFrLastProblemSolved::buildAhead );
698c698
<                LgFrLastProblemSolved::computeCriticalList);
---
> 		   &LgFrLastProblemSolved::computeCriticalList);
707c707
<                       LgFrLastProblemSolved::computeCriticalList );
---
> 			  &LgFrLastProblemSolved::computeCriticalList );
717c717
<                LgFrLastProblemSolved::inventoryCost);
---
>                &LgFrLastProblemSolved::inventoryCost);
726c726
<                       LgFrLastProblemSolved::inventoryCost );
---
>                       &LgFrLastProblemSolved::inventoryCost );
736c736
<                LgFrLastProblemSolved::obj2WeightInventory);
---
>                &LgFrLastProblemSolved::obj2WeightInventory);
745c745
<                       LgFrLastProblemSolved::obj2WeightInventory );
---
>                       &LgFrLastProblemSolved::obj2WeightInventory );
755c755
<                LgFrLastProblemSolved::obj2WeightRevenue);
---
>                &LgFrLastProblemSolved::obj2WeightRevenue);
764c764
<                       LgFrLastProblemSolved::obj2WeightRevenue );
---
>                       &LgFrLastProblemSolved::obj2WeightRevenue );
774c774
<                LgFrLastProblemSolved::obj2WeightService);
---
>                &LgFrLastProblemSolved::obj2WeightService);
783c783
<                       LgFrLastProblemSolved::obj2WeightService );
---
>                       &LgFrLastProblemSolved::obj2WeightService );
793c793
<                LgFrLastProblemSolved::obj2WeightSubstitutes);
---
>                &LgFrLastProblemSolved::obj2WeightSubstitutes);
802c802
<                       LgFrLastProblemSolved::obj2WeightSubstitutes );
---
>                       &LgFrLastProblemSolved::obj2WeightSubstitutes );
812c812
<                LgFrLastProblemSolved::weightBounds);
---
>                &LgFrLastProblemSolved::weightBounds);
821c821
<                       LgFrLastProblemSolved::weightBounds );
---
>                       &LgFrLastProblemSolved::weightBounds );




Index: sce/src/aEngMgr.h
===================================================================
RCS file: /u/wit/devbase/sce/src/aEngMgr.h,v
retrieving revision 1.5
diff -r1.5 aEngMgr.h
77c77
< LgFrSceAllocationEngineMgr::sortID();
---
> sortID();
Index: sce/src/scePegging.C
===================================================================
RCS file: /u/wit/devbase/sce/src/scePegging.C,v
retrieving revision 1.6
diff -r1.6 scePegging.C
121c121
<   virtual RWBoolean SceCollectableDouble::operator==(const SceCollectableDouble& c) const
---
>   virtual RWBoolean operator==(const SceCollectableDouble& c) const
124c124
<   virtual RWBoolean SceCollectableDouble::isEqual(const RWCollectable* c) const
---
>   virtual RWBoolean isEqual(const RWCollectable* c) const
Index: sce/src/scePegging.h
===================================================================
RCS file: /u/wit/devbase/sce/src/scePegging.h,v
retrieving revision 1.4
diff -r1.4 scePegging.h
120c120
<   void ScePegging::computeConsVolAndUpdateConsDict(
---
>   void computeConsVolAndUpdateConsDict(
Index: sce/src/scenSce.h
===================================================================
RCS file: /u/wit/devbase/sce/src/scenSce.h,v
retrieving revision 1.6
diff -r1.6 scenSce.h
35a36,38
> // added to avoid syntax error - vra
> class LgFrScenarioForSceSmartPointer;
>
@
text
@d1 4
a4 1
#include <iostream.h>
d35 2
a36 2
   assert( &(itvpf.item()) != NULL );
   assert( itvpf.item().isA() == __LGFRDEMAND );
d55 1
a55 1
   assert( itvpf.item().isA() == __LGFRDEMAND );
d84 1
a84 1
  assert (  i < this->entries()  );
d141 1
a141 1
  assert (item.isA() == __LGFRDEMAND);
d152 1
a152 1
  assert (item.isA() == __LGFRDEMAND);
d159 1
a159 1
: LgFrSortingScheduleFloat ( (size_tMax (n, 1)) )
d198 1
a198 1
  assert (this->entries() == rhs.entries());
d402 1
a402 1
  assert (3 == ss.entries());
d416 2
a417 1
  for ( size_t i = 0; i < ss.entries(); i++) {
d424 1
a424 1
    // cout << endl;
d429 1
a429 1
  // ss.insert( LgFrItemTimeVecPairFloat() );  // <-- assert in insert 
d436 4
a439 4
  // Test resize
  LgFrSortingDemandScheduleFloat ss3(0);
  ss3.resize(3);
  assert (ss3.entries() == 0);
d457 3
a459 3
  // cout <<"diff" <<endl;
  // cout <<diff.format() <<endl;
  assert( diff.entries() == 3 );
d480 3
a482 3
  // cout <<"diff" <<endl;
  // cout <<diff.format() <<endl;
  assert( diff.entries() == 2 );
d501 3
a503 3
  // cout <<"diff" <<endl;
  // cout <<diff.format() <<endl;
  assert( diff.entries() == 2 );
d519 3
a521 3
  // cout <<"diff" <<endl;
  // cout <<diff.format() <<endl;
  assert( diff.entries() == 0 );
d535 3
a537 3
  // cout <<"diff" <<endl;
  // cout <<diff.format() <<endl;
  assert( diff.entries() == 3 );
d557 3
a559 3
  // cout <<"result" <<endl;
  // cout <<result.format() <<endl;
  assert( result.entries() == 3 );
d619 2
a620 2
  cout << endl << "schedule2 before schedule 1 changes" << endl
      << schedule2->format() << endl;
d625 2
a626 2
  cout << endl << "schedule1 after schedule 1 changes" << endl
      << schedule1->format() << endl;
d628 2
a629 2
  cout << endl << "schedule2 after schedule 1 changes" << endl
      << schedule2->format() << endl;
d645 1
a645 1
  assert( schedB.entries() == 2 );
d657 1
a657 1
  assert( schedC.entries() == 2 );
@


1.2.6.1
log
@Roguewave is gone
@
text
@d1 1
a1 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
d32 2
a33 2
   assert( &(itvpf.item()) != 0 );
   assert( itvpf.item().isADemand() );
d52 1
a52 1
   assert( itvpf.item().isADemand() );
d81 1
a81 1
  assert (  i < this->size()  );
d138 1
a138 1
  assert (item.isADemand());
d149 1
a149 1
  assert (item.isADemand());
d156 1
a156 1
: LgFrSortingScheduleFloat ( n ) //(size_tMax (n, 1)) )
d195 1
a195 1
  assert (this->size() == rhs.size());
d399 1
a399 1
  assert (3 == ss.size());
d413 1
a413 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < ss.size(); i++) {
d425 1
a425 1
  // ss.push_back( LgFrItemTimeVecPairFloat() );  // <-- assert in insert 
d432 4
a435 4
  // Test resize ... no more, we let the tools do their job
  //LgFrSortingDemandScheduleFloat ss3(0);
  //ss3.resize(3);
  //assert (ss3.size() == 0);
d455 1
a455 1
  assert( diff.size() == 3 );
d478 1
a478 1
  assert( diff.size() == 2 );
d499 1
a499 1
  assert( diff.size() == 2 );
d517 1
a517 1
  assert( diff.size() == 0 );
d533 1
a533 1
  assert( diff.size() == 3 );
d555 1
a555 1
  assert( result.size() == 3 );
d641 1
a641 1
  assert( schedB.size() == 2 );
d653 1
a653 1
  assert( schedC.size() == 2 );
@


1.2.6.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d424 1
a424 1
    // std::cout << std::endl;
d457 2
a458 2
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
d480 2
a481 2
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
d501 2
a502 2
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
d519 2
a520 2
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
d535 2
a536 2
  // std::cout <<"diff" <<std::endl;
  // std::cout <<diff.format() <<std::endl;
d557 2
a558 2
  // std::cout <<"result" <<std::endl;
  // std::cout <<result.format() <<std::endl;
d619 2
a620 2
  std::cout << std::endl << "schedule2 before schedule 1 changes" << std::endl
      << schedule2->format() << std::endl;
d625 2
a626 2
  std::cout << std::endl << "schedule1 after schedule 1 changes" << std::endl
      << schedule1->format() << std::endl;
d628 2
a629 2
  std::cout << std::endl << "schedule2 after schedule 1 changes" << std::endl
      << schedule2->format() << std::endl;
@


1.1
log
@Initial revision
@
text
@d273 1
a273 1
  LgFrTimeVecFloat::add,rhs);
d288 1
a288 1
  LgFrTimeVecFloat::subtract,rhs);
d452 1
a452 1
  LgFrTimeVecFloat::subtract, rhs );
d475 1
a475 1
  LgFrTimeVecFloat::subtract, rhs );
d496 1
a496 1
  LgFrTimeVecFloat::subtract, rhs );
d514 1
a514 1
  LgFrTimeVecFloat::subtract, rhs );
@


1.1.1.1
log
@Import scenario
@
text
@@
