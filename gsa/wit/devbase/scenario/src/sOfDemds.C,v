head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.46;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.47;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.47;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.36;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.39;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <assert.h>
#include <iostream>


#include <scenario/src/sOfDemds.h>
#include <scenario/src/machdep.h>
#include <scenario/src/hashUtil.h>

typedef LgFrDemandVector LgFrDemandVector;


// Return a demand with name demandName for the specified part.
// If the demand is not in the SetOfDemands, then insert it.
LgFrDemand
LgFrSetOfDemands::newDemand( 
   const std::string& demandName,
   const LgFrPart * const demandedPart )
{
  const LgFrDemand * itemPtr;
  if (demandedPart == 0) {
      std::cerr << "Error in " << __FILE__ << " at line " << __LINE__ << '\n'
      << "Trying to create a demand with a 0 part-pointer.\n"
      << "The name of the demand being created was " << demandName << std::endl;
    abort();
  }
  itemPtr = this->findValue(demandName, demandedPart->name());
  if (itemPtr == 0) {
    LgFrDemand item( demandName, demandedPart );
    insert( item );
    itemPtr = & ( (*this) [(this->size()) - 1] );
  }
  return *itemPtr;
}

// Return true if demand is contained in set
bool
LgFrSetOfDemands::contains( const LgFrDemand demand )
const
{
  const std::string itemName (demand.name()
                                      + LgFrDemand::uniqueSeparator()
                                      + demand.partPtr()->name() );

  NameItemDictionary::const_iterator it = nameToItem_.find( itemName );
  return ( it != nameToItem_.end() );


  //return nameToItem_.contains( &itemName );
}


// Add new demand item to the end of the collection
void
LgFrSetOfDemands::insert (const LgFrDemand item)
{
  assert( !contains( item ) );
  if ( contains( item ) ) return;
  else {
    // If the vector is at full capacity, we know it will have to move
      // and the dictionary addresses will become stale.
    bool moved = capacity() == size(); 

    // Put it in the inherited ordered vector
    LgFrDemandVector::push_back(item);
    // Put it into the dictionary
    if( moved )
    {
        refreshDictionary();
    }
    else
    {
        int index = (this->size()) - 1;
        this->dictionaryInsert (  index  );
    }
  }
}

// Add new demand item to the collection at position index.  Everything afterwards
// is shifted to a higher index.
void
LgFrSetOfDemands::insertAt (const size_t index, 
			  const LgFrDemand item)
{
  assert( !contains( item ) );
  // Test for valid index
  assert (index < this->size());
  // Put it in the inherited ordered vector
  LgFrDemandVector::insert( begin() + index, item);

  refreshDictionary();
}


// Change the size of the set
void
LgFrSetOfDemands::reserve (const size_t newCapacity)
{
  const size_t nEntries (LgFrDemandVector::size());
  if (newCapacity > nEntries) 
  {
    // Change the size of the vector
    LgFrDemandVector::reserve(newCapacity);
    // Record the new capacity
    minBuckets_ = newCapacity;
    // The demands were copied so regenerate the dictionary to point
    // to their new locations
    refreshDictionary();
  }
}

LgFrSetOfDemands &
LgFrSetOfDemands::operator=(
			  const LgFrSetOfDemands& rhs)
{
  if (this != &rhs) 
  {		// Check for assignment to self
#if 0    
    (this->LgFrDemandVector::operator= ) (rhs);
#else
    // Try doing assignment w/o operator= because OrderDemandVector does not
    // support operator=.
    {
      // Clear the vector contents and change its size
      LgFrDemandVector::clear();
      LgFrDemandVector::reserve( rhs.size() );
      int j = 0; // Pulled out of the for below by RW2STL
      for (j = 0;  j < rhs.size();  ++j) {
        LgFrDemandVector::push_back( rhs[j] );
        // this->operator[](j) = rhs[j];
      }        
    }
#endif     

    size_t newSize = this->size();
    size_t newCapacity = rhs.minBuckets_;
    assert (newSize == rhs.size());      // Test assignment operator result

    refreshDictionary();
  }
  return *this;
}


// Copy constructor
LgFrSetOfDemands::LgFrSetOfDemands (const LgFrSetOfDemands & source)
: LgFrDemandVector ( (const LgFrDemandVector &)(source) ),
  minBuckets_ (source.minBuckets_)//,
  //nameToItem_ (minBuckets_)
{
  const size_t newSize = source.size();
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < newSize;  ++j) {
    this->dictionaryInsert(j);
  }
}


// Constructor for a set expected to have up to n demands
LgFrSetOfDemands::LgFrSetOfDemands (const size_t n)
: //LgFrDemandVector (),	// Not all new's do well
						// with 0-length arrays
  minBuckets_ (goodSize (n))//,
  //nameToItem_ (minBuckets_)
{
  // Nothing to do in here
  reserve( n );
}

void LgFrSetOfDemands::refreshDictionary()
{
  clearDictionary();
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < size();  ++j)
    this->dictionaryInsert(j);
}


void
LgFrSetOfDemands::dictionaryInsert (const size_t i)
{
  LgFrDemandPtr demandPtr = &at(i);
  nameToItem_.insert( NameItemPair( demandPtr->uniqueName(), demandPtr ) );

/*  for( NameItemDictionary::const_iterator it0 = nameToItem_.begin(); it0 != nameToItem_.end(); it0++ )
  {
      const LgFrDemand* p = (*it0).second;
        cout << "--" << (*it0).second->name() << std::endl;
  }*/

}


const LgFrDemand*
LgFrSetOfDemands::findValue (
			   const std::string& demandName,
			   const std::string& partName
			   )
     const
{
  const std::string itemName (demandName 
				      + LgFrDemand::uniqueSeparator()
				      + partName);

/*  for( NameItemDictionary::const_iterator it0 = nameToItem_.begin(); it0 != nameToItem_.end(); it0++ )
  {
      const LgFrDemand* p = (*it0).second;
        cout << "=-" << (*it0).second->name() << std::endl;
  }*/

  NameItemDictionary::const_iterator it = nameToItem_.find( itemName );

  if( it != nameToItem_.end() )
    return (*it).second;
  else
    return 0;

//  return ((LgFrDemand *) nameToItem_.findValue (&itemName));
}


// Display for xcdb
void 
LgFrSetOfDemands::xcdb() const
{
  std::cerr << "\n";
  std::cerr << "Set of demands:\n\tminBuckets_ = " << minBuckets_ << "\n";
  std::cerr << "\t\tsize() = " << this->size() << "\n";
  int i = 0; // Pulled out of the for below by RW2STL
  for (i = 0; i < this->size(); ++i)
    std::cerr << i << ": " << (*this)[i].printingName() << "\n";
  std::cerr << std::endl;
}


// Display for xcdb
void 
LgFrSetOfDemands::xcdb()
{
  (  (const LgFrSetOfDemands*) this  )     -> xcdb();
}


// Destructor
LgFrSetOfDemands::~LgFrSetOfDemands()
{
  clearDictionary();
}


// Remove the entries in the dictionary 
void
LgFrSetOfDemands::clearDictionary()
{
    nameToItem_.clear();
}


#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrSetOfDemands methods.
void
LgFrSetOfDemands::test()
{
  LgFrSetOfDemands sod(2);      // Make it a little small
  				// to test automatic resizing
  std::string n1 = "demand1";
  const LgFrPart p1 ("part1");
  LgFrDemand d1(n1,&p1);
  std::string n2 = "demand2";
  const LgFrPart p2("part2");
  LgFrDemand d2(n2,&p2);
  std::string n3 = "demand3";
  const LgFrPart p3("part3");
  LgFrDemand d3(n3,&p3);
  sod.insert(d1);
  sod.insert(d2);
  sod.insert(d3);
  assert (3 == sod.size());
  assert (sod[0].name() == n1);
  assert (sod[0].partPtr()->name() == "part1");
  assert (sod[2].name() == n3);
  assert (sod[2].partPtr()->name() == "part3");
  assert (sod[1].name() == n2);
  assert (sod[1].partPtr()->name() == "part2");

  // Test newDemand method
  LgFrDemand newDemand = sod.newDemand( "newDemand", &p2 );
  int sodEntries( sod.size() );
  assert( newDemand == sod[ sodEntries - 1 ] );
  sod.newDemand( "newDemand", &p2 );  // Test inserting a 2nd time
  sod.newDemand( n3, // Test inserting something that is not the
		 &p3); // last thing in the set a second time
  assert( sodEntries == sod.size() );
  assert( newDemand == sod[ sodEntries - 1 ] );

  // Test contains method
  assert( sod.contains( d3 ) );
  LgFrDemand oddDemand( "OddDemand", &p1 );
  assert( !sod.contains( oddDemand ) );

  // Print the OrderedVector part
  /*
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < sod.size(); i++) {
    sod[i]->print();
    cout << std::endl;
  }
  */

  // Test the dictionary part
  const char * n3char = "demand3";
  const LgFrDemand * foundDemand = sod.findValue (n3char, "part3");
  assert (*foundDemand  ==  d3);
}
@


1.1
log
@Initial revision
@
text
@d1 4
d6 1
a7 1
#include <rw/rstream.h>
d13 1
a13 1
typedef LgFrOrderedVectorDemand OrderedDemandVector;
d20 1
a20 1
   const RWCString demandName,
d24 4
a27 4
  if (demandedPart == NULL) {
    cerr << "Error in " << __FILE__ << " at line " << __LINE__ << '\n'
      << "Trying to create a demand with a NULL part-pointer.\n"
      << "The name of the demand being created was " << demandName << endl;
d31 1
a31 1
  if (itemPtr == NULL) {
d34 1
a34 1
    itemPtr = & ( (*this) [(this->entries()) - 1] );
d40 1
a40 1
RWBoolean
d44 1
a44 1
  const RWCollectableString itemName (demand.name()
d47 3
a49 2
  return nameToItem_.contains( &itemName );
}
d52 1
a52 10
// Resize if the amount of space allocated for the hash table is below generally
// accepted guidelines for good performance.  (Always doubling the size insures
// that only log(n) resizes will be done when inserting n demands.)
void
LgFrSetOfDemands::resizeIfAboveGuidelines()
{
  size_t numberOfEntries = this->entries();
  if ( ( (float) numberOfEntries )   /   minBuckets_
       >=  goodHashTableFullness  )
     this->resize (minBuckets_*2);
d63 4
a66 2
    // Resize if apropos
    this -> resizeIfAboveGuidelines();
d68 11
a78 4
    OrderedDemandVector::insert(item);
    // Put it into the hash dictionary
    int index = (this->entries()) - 1;
    this->hashDictionaryInsert (  index  );
d90 1
a90 3
  assert (index < this->entries());
  // Resize if apropos
  this -> resizeIfAboveGuidelines();
d92 3
a94 6
  OrderedDemandVector::insertAt(index, item);
  // Regenerate the hash table to point to the demands in their new positions
  this -> clearDictionaryAndFreeKeys();
  for (int j = 0;  j < this->entries();  ++j) {
    this->hashDictionaryInsert(j);
  }
d100 1
a100 1
LgFrSetOfDemands::resize (const size_t newCapacity)
d102 3
a104 2
  const size_t nEntries (OrderedDemandVector::entries());
  if (newCapacity > nEntries) {
d106 1
a106 4
    OrderedDemandVector::resize(newCapacity);
    // Change the size of the hash table
    this -> clearDictionaryAndFreeKeys();
    nameToItem_.resize(newCapacity);
d109 1
a109 1
    // The demands were copied so regenerate the hash table to point
d111 1
a111 2
    for (int j = 0;  j < nEntries;  ++j)
      this->hashDictionaryInsert(j);
d119 2
a120 1
  if (this != &rhs) {		// Check for assignment to self
d122 1
a122 1
    (this->OrderedDemandVector::operator= ) (rhs);
d128 5
a132 4
      OrderedDemandVector::clear();
      OrderedDemandVector::resize( rhs.entries() );
      for (int j = 0;  j < rhs.entries();  ++j) {
        OrderedDemandVector::insert( rhs[j] );
d138 1
a138 1
    size_t newSize = this->entries();
d140 3
a142 8
    assert (newSize == rhs.entries());      // Test assignment operator result
    // Make *this' hash table the same size as rhs'
    // and insert the demands into it
    this -> clearDictionaryAndFreeKeys();
    nameToItem_.resize(newCapacity);
    for (int j = 0;  j < newSize;  ++j) {
      this->hashDictionaryInsert(j);
    }
d150 8
a157 7
: OrderedDemandVector ( (const OrderedDemandVector &)(source) ),
  minBuckets_ (source.minBuckets_),
  nameToItem_ (minBuckets_)
{
  const size_t newSize = source.entries();
  for (int j = 0;  j < newSize;  ++j) {
    this->hashDictionaryInsert(j);
d164 1
a164 1
: OrderedDemandVector (   goodSize (n)   ),	// Not all new's do well
d166 2
a167 2
  minBuckets_ (goodSize (n)),
  nameToItem_ (minBuckets_)
d170 9
d183 1
a183 1
LgFrSetOfDemands::hashDictionaryInsert (const size_t i)
d185 9
a193 8
  LgFrDemandPtr demandPtr = & ( (*this)[i] );
  RWCollectableString* namePtr =
    new RWCollectableString (demandPtr->uniqueName());

  RWCollectable* returnCode =
     nameToItem_.insertKeyAndValue (namePtr, demandPtr);
  
  assert( returnCode == namePtr );
d199 2
a200 2
			   const RWCString demandName,
			   const RWCString partName
d204 1
a204 1
  const RWCollectableString itemName (demandName 
d207 15
a221 1
  return ((LgFrDemand *) nameToItem_.findValue (&itemName));
d229 7
a235 6
  cerr << "\n";
  cerr << "Set of demands:\n\tminBuckets_ = " << minBuckets_ << "\n";
  cerr << "\t\tentries() = " << this->entries() << "\n";
  for (int i = 0; i < this->entries(); ++i)
    cerr << i << ": " << (*this)[i].printingName() << "\n";
  cerr << endl;
d250 1
a250 1
  clearDictionaryAndFreeKeys();
d254 1
a254 1
// Remove the entries in the hash table and free the keys
d256 1
a256 1
LgFrSetOfDemands::clearDictionaryAndFreeKeys()
d258 1
a258 5
  RWHashDictionaryIterator iter (nameToItem_);
  while (iter()) {
    RWCollectable *namePtr = iter.remove();
    delete namePtr;
  }
d271 1
a271 1
  RWCString n1 = "demand1";
d274 1
a274 1
  RWCString n2 = "demand2";
d277 1
a277 1
  RWCString n3 = "demand3";
d283 1
a283 1
  assert (3 == sod.entries());
d293 1
a293 1
  int sodEntries( sod.entries() );
d298 1
a298 1
  assert( sodEntries == sod.entries() );
d308 2
a309 1
  for ( size_t i = 0; i < sod.entries(); i++) {
d311 1
a311 1
    cout << endl;
d315 1
a315 1
  // Test the hash table part
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
a1 1
#include <ostream.h>
d3 1
d9 1
a9 1
typedef LgFrDemandVector LgFrDemandVector;
d16 1
a16 1
   const std::string& demandName,
d20 1
a20 1
  if (demandedPart == 0) {
d22 1
a22 1
      << "Trying to create a demand with a 0 part-pointer.\n"
d27 1
a27 1
  if (itemPtr == 0) {
d30 1
a30 1
    itemPtr = & ( (*this) [(this->size()) - 1] );
d36 1
a36 1
bool
d40 1
a40 1
  const std::string itemName (demand.name()
d43 2
a45 2
  NameItemDictionary::const_iterator it = nameToItem_.find( itemName );
  return ( it != nameToItem_.end() );
d47 10
a56 2

  //return nameToItem_.contains( &itemName );
d67 2
a68 4
    // If the vector is at full capacity, we know it will have to move
      // and the dictionary addresses will become stale.
    bool moved = capacity() == size(); 

d70 4
a73 11
    LgFrDemandVector::push_back(item);
    // Put it into the dictionary
    if( moved )
    {
        refreshDictionary();
    }
    else
    {
        int index = (this->size()) - 1;
        this->dictionaryInsert (  index  );
    }
d85 3
a87 1
  assert (index < this->size());
d89 6
a94 3
  LgFrDemandVector::insert( begin() + index, item);

  refreshDictionary();
d100 1
a100 1
LgFrSetOfDemands::reserve (const size_t newCapacity)
d102 2
a103 3
  const size_t nEntries (LgFrDemandVector::size());
  if (newCapacity > nEntries) 
  {
d105 4
a108 1
    LgFrDemandVector::reserve(newCapacity);
d111 1
a111 1
    // The demands were copied so regenerate the dictionary to point
d113 2
a114 1
    refreshDictionary();
d122 1
a122 2
  if (this != &rhs) 
  {		// Check for assignment to self
d124 1
a124 1
    (this->LgFrDemandVector::operator= ) (rhs);
d130 4
a133 5
      LgFrDemandVector::clear();
      LgFrDemandVector::reserve( rhs.size() );
      int j = 0; // Pulled out of the for below by RW2STL
      for (j = 0;  j < rhs.size();  ++j) {
        LgFrDemandVector::push_back( rhs[j] );
d139 1
a139 1
    size_t newSize = this->size();
d141 8
a148 3
    assert (newSize == rhs.size());      // Test assignment operator result

    refreshDictionary();
d156 7
a162 8
: LgFrDemandVector ( (const LgFrDemandVector &)(source) ),
  minBuckets_ (source.minBuckets_)//,
  //nameToItem_ (minBuckets_)
{
  const size_t newSize = source.size();
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < newSize;  ++j) {
    this->dictionaryInsert(j);
d169 1
a169 1
: //LgFrDemandVector (),	// Not all new's do well
d171 2
a172 2
  minBuckets_ (goodSize (n))//,
  //nameToItem_ (minBuckets_)
a174 9
  reserve( n );
}

void LgFrSetOfDemands::refreshDictionary()
{
  clearDictionary();
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < size();  ++j)
    this->dictionaryInsert(j);
d179 1
a179 1
LgFrSetOfDemands::dictionaryInsert (const size_t i)
d181 8
a188 9
  LgFrDemandPtr demandPtr = &at(i);
  nameToItem_.insert( NameItemPair( demandPtr->uniqueName(), demandPtr ) );

/*  for( NameItemDictionary::const_iterator it0 = nameToItem_.begin(); it0 != nameToItem_.end(); it0++ )
  {
      const LgFrDemand* p = (*it0).second;
        cout << "--" << (*it0).second->name() << endl;
  }*/

d194 2
a195 2
			   const std::string& demandName,
			   const std::string& partName
d199 1
a199 1
  const std::string itemName (demandName 
d202 1
a202 15

/*  for( NameItemDictionary::const_iterator it0 = nameToItem_.begin(); it0 != nameToItem_.end(); it0++ )
  {
      const LgFrDemand* p = (*it0).second;
        cout << "=-" << (*it0).second->name() << endl;
  }*/

  NameItemDictionary::const_iterator it = nameToItem_.find( itemName );

  if( it != nameToItem_.end() )
    return (*it).second;
  else
    return 0;

//  return ((LgFrDemand *) nameToItem_.findValue (&itemName));
d212 2
a213 3
  cerr << "\t\tsize() = " << this->size() << "\n";
  int i = 0; // Pulled out of the for below by RW2STL
  for (i = 0; i < this->size(); ++i)
d230 1
a230 1
  clearDictionary();
d234 1
a234 1
// Remove the entries in the dictionary 
d236 1
a236 1
LgFrSetOfDemands::clearDictionary()
d238 5
a242 1
    nameToItem_.clear();
d255 1
a255 1
  std::string n1 = "demand1";
d258 1
a258 1
  std::string n2 = "demand2";
d261 1
a261 1
  std::string n3 = "demand3";
d267 1
a267 1
  assert (3 == sod.size());
d277 1
a277 1
  int sodEntries( sod.size() );
d282 1
a282 1
  assert( sodEntries == sod.size() );
d292 1
a292 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < sod.size(); i++) {
d298 1
a298 1
  // Test the dictionary part
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d6 1
a6 1
#include <iostream>
d25 1
a25 1
      std::cerr << "Error in " << __FILE__ << " at line " << __LINE__ << '\n'
d27 1
a27 1
      << "The name of the demand being created was " << demandName << std::endl;
d191 1
a191 1
        cout << "--" << (*it0).second->name() << std::endl;
d211 1
a211 1
        cout << "=-" << (*it0).second->name() << std::endl;
d229 3
a231 3
  std::cerr << "\n";
  std::cerr << "Set of demands:\n\tminBuckets_ = " << minBuckets_ << "\n";
  std::cerr << "\t\tsize() = " << this->size() << "\n";
d234 2
a235 2
    std::cerr << i << ": " << (*this)[i].printingName() << "\n";
  std::cerr << std::endl;
d311 1
a311 1
    cout << std::endl;
@


