head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.44;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.50;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.50;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.34;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LgFrScenarioSMARTPTRH
#define LgFrScenarioSMARTPTRH
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.

#include <scenario/src/refCount.h>


// forward declaration
class LgFrScenario;

class LgFrScenarioSmartPointerToConst
{
    friend class LgFrScenarioForATPSmartPointerToConst;
    friend class LgFrScenarioForCMRPSmartPointerToConst;
    friend class LgFrScenarioForDifTestingSmartPointerToConst;
    friend class LgFrTestScenarioSmartPointerToConst;
    friend class LgFrScenarioForSceSmartPointerToConst;
    friend class LgFrScenarioForImanSmartPointerToConst;
    friend class LgFrScenarioForSmanSmartPointerToConst;

    friend class LgFrScenarioForATPSmartPointer;
    friend class LgFrScenarioForCMRPSmartPointer;
    friend class LgFrScenarioForDifTestingSmartPointer;
    friend class LgFrTestScenarioSmartPointer;
    friend class LgFrScenarioForSceSmartPointer;

public:
    LgFrScenarioSmartPointerToConst();
    LgFrScenarioSmartPointerToConst(LgFrScenario*);
    LgFrScenarioSmartPointerToConst(LgFrScenario*, LgFrReferenceCount&);
    virtual ~LgFrScenarioSmartPointerToConst();
    LgFrScenarioSmartPointerToConst(const LgFrScenarioSmartPointerToConst&);
    LgFrScenarioSmartPointerToConst deepCopy() const;
    LgFrScenarioSmartPointerToConst& operator=(const LgFrScenarioSmartPointerToConst&);
    bool operator==(const LgFrScenarioSmartPointerToConst&) const;
    bool operator!=(const LgFrScenarioSmartPointerToConst&) const;
    const LgFrScenario& operator*() const;
    const LgFrScenario * const operator->() const;

    bool unique() const;
    bool null() const;

    //-------------------------------------------------------------------------
    // This method was used for debugging.  Be warned that the reference
    // count can be changed by invoking this method.
    //
    // Example Usage:
    //   LgFrScenarioForATPSmartPointer scenarioPtr = builder.getScenario();
    //   cout <<((LgFrScenarioSmartPointerToConst)scenarioPtr).referenceCount();
    //-------------------------------------------------------------------------
    //unsigned int referenceCount() { return count_.reference(); } const

    static void test();

protected:
    LgFrScenario* pointer_; // should make this const but I want to use
                            //  it for the LgFrScenarioSmartPointer class
			    //  (the non-const class) to inherit this member.
			    //  The way it's been set up only const stuff
                            //  is being returned so we're OK.
    LgFrReferenceCount count_;

    static int deletingScenario_;

};


class LgFrScenarioSmartPointer : public LgFrScenarioSmartPointerToConst
{
    friend class LgFrScenarioForATPSmartPointer;
    friend class LgFrScenarioForCMRPSmartPointer;
    friend class LgFrScenarioForDifTestingSmartPointer;
    friend class LgFrTestScenarioSmartPointer;
    friend class LgFrScenarioForSceSmartPointer;
    friend class LgFrScenarioForImanSmartPointer;
    friend class LgFrScenarioForSmanSmartPointer;

public:
    LgFrScenarioSmartPointer();
    LgFrScenarioSmartPointer(LgFrScenario*);
    LgFrScenarioSmartPointer(LgFrScenario*, LgFrReferenceCount&);
    ~LgFrScenarioSmartPointer();
    LgFrScenarioSmartPointer(const LgFrScenarioSmartPointer&);
    LgFrScenarioSmartPointer(LgFrScenarioSmartPointerToConst);
    LgFrScenarioSmartPointer deepCopy();
    LgFrScenarioSmartPointer& operator=(const LgFrScenarioSmartPointer&);
    LgFrScenarioSmartPointer& operator=(LgFrScenarioSmartPointerToConst);
    bool operator==(const LgFrScenarioSmartPointer&) const;
    bool operator!=(const LgFrScenarioSmartPointer&) const;

    // these are really dangerous as they circumvent the notion
    //  of using smart pointers anyways.  you had better be using
    //  these just to call another method
    LgFrScenario& operator*();
    const LgFrScenario& operator*() const;
    LgFrScenario* const operator->();
    const LgFrScenario* const operator->() const;

    bool unique() const;
    bool null() const;
    static void test();

	static const LgFrScenarioSmartPointer nullScenarioSmartPointer;
};

#endif

@


1.1
log
@Initial revision
@
text
@d3 3
a6 1
#include <rw/defs.h>
d37 2
a38 2
    RWBoolean operator==(const LgFrScenarioSmartPointerToConst&) const;
    RWBoolean operator!=(const LgFrScenarioSmartPointerToConst&) const;
d42 2
a43 2
    RWBoolean unique() const;
    RWBoolean null() const;
d90 2
a91 2
    RWBoolean operator==(const LgFrScenarioSmartPointer&) const;
    RWBoolean operator!=(const LgFrScenarioSmartPointer&) const;
d101 2
a102 2
    RWBoolean unique() const;
    RWBoolean null() const;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 3
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
d4 1
d35 2
a36 2
    bool operator==(const LgFrScenarioSmartPointerToConst&) const;
    bool operator!=(const LgFrScenarioSmartPointerToConst&) const;
d40 2
a41 2
    bool unique() const;
    bool null() const;
d88 2
a89 2
    bool operator==(const LgFrScenarioSmartPointer&) const;
    bool operator!=(const LgFrScenarioSmartPointer&) const;
d99 2
a100 2
    bool unique() const;
    bool null() const;
@

