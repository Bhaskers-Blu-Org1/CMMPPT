head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.41;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.32;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/scenario.h>
#include <scenario/src/pairComp.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/partSchd.h>
#include <scenario/src/machdep.h>

// Do comparison
int
LgFrPairCompareFloat::itemTimeVecPairCompareFloat(
   const LgFrItemTimeVecPairFloat & itvpf1,
   const LgFrItemTimeVecPairFloat & itvpf2)
const
{
   return itvpf1.compareTo(&itvpf2);
}

// Make clone copy of object
LgFrPairCompareFloat *
LgFrPairCompareFloat::clone()
const
{
  LgFrPairCompareFloat* newInst = 
      new LgFrPairCompareFloat(*this);
  return (newInst);
}

// Make clone copy of object with new Scenario
LgFrPairCompareFloat *
LgFrPairCompareFloat::clone(LgFrScenario & newScenario)
const
{
  LgFrPairCompareFloat* newInst = 
      new LgFrPairCompareFloat(*this, newScenario);
  return (newInst);
}

// Return the setOfParts which belongs to a scenario
const LgFrSetOfParts&
LgFrPairCompareFloat::constSetOfParts(
   int k,
   LgFrScenario & scenario)
{
   return scenario.setOfParts(k);
}

// Return the setOfDemands which belongs to a scenario
const LgFrSetOfDemands&
LgFrPairCompareFloat::constSetOfDemands(
   int k,
   LgFrScenario & scenario)
{
   return scenario.setOfDemands(k);
}

// Return the LastProblemSolved which belongs to a scenario
LgFrLastProblemSolved&
LgFrPairCompareFloat::lastProblemSolved(
   LgFrScenario & scenario)
{
   return scenario.lastProblemSolved();
}

// Return the WorkingImplosionProblem which belongs to a scenario
LgFrWorkingImplosionProblem&
LgFrPairCompareFloat::workingImplosionProblem(
   LgFrScenario & scenario)
{
   return scenario.workingImplosionProblem();
}

// Return the Implode which belongs to a scenario
LgFrImplode&
LgFrPairCompareFloat::implode(
   LgFrScenario & scenario)
{
   return scenario.implode();
}

// Return the focussed shortage schedule which belongs to a scenario
LgFrFocussedShortageScheduleControl&
LgFrPairCompareFloat::focussedShortageScheduleControl(
   LgFrScenario & scenario)
{
   return scenario.focussedShortageScheduleControl();
}

// Assignment operator
LgFrPairCompareFloat &
LgFrPairCompareFloat::operator=(
			  const LgFrPairCompareFloat& rhs)
{
  if (this != &rhs) {		// Check for assignment to self

     (this->LgFrSubscription::operator= ) (rhs);

     if ( algorithmPtr_ != 0 ) algorithmPtr_->removeDependentFromHeterogeneousList( this );
     algorithmPtr_ = rhs.algorithmPtr_;
     if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );

  }
  return *this;
}


// Copy constructor
LgFrPairCompareFloat::
   LgFrPairCompareFloat (
      const LgFrPairCompareFloat & source)
:  
   LgFrSubscription(),
   algorithmPtr_(source.algorithmPtr_),
   id_(__LGFRPAIRCOMPAREFLOAT)
{
  if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
}

// Copy constructor associated with a new Scenario
LgFrPairCompareFloat::
   LgFrPairCompareFloat (
      const LgFrPairCompareFloat & source,
      LgFrScenario & ,
      LgFrModel * algorithmPtr )
:  
   LgFrSubscription(),
   algorithmPtr_(algorithmPtr),
   id_(__LGFRPAIRCOMPAREFLOAT)
{
  if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
}


// Default Constructor
LgFrPairCompareFloat::
   LgFrPairCompareFloat (
      LgFrModel * algorithmPtr )
:  
   LgFrSubscription(),
   algorithmPtr_(algorithmPtr),
   id_(__LGFRPAIRCOMPAREFLOAT)
{
  if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
}

// Destructor
LgFrPairCompareFloat::
   ~LgFrPairCompareFloat ()
{
  if ( algorithmPtr_ != 0 ) algorithmPtr_->removeDependentFromHeterogeneousList( this );
}


#ifdef NDEBUG
#undef NDEBUG
#endif

// test LgFrPairCompareFloat methods.
void
LgFrPairCompareFloat::test()
{
  int i,t;

  // Test default constructor
  LgFrPairCompareFloat cs1;

  // Test copy constructor
  LgFrPairCompareFloat cs2(cs1);

  // Test assignment operator
  LgFrPairCompareFloat cs3;
  cs3 = cs2;

  // Test clone method
  LgFrPairCompareFloat *cs4Ptr = cs1.clone();

  // Test destructor
  delete cs4Ptr;

  // Test itemTimeVecPairCompareFloat
  // method by doing sort and testing result

  // Create a part schedule to sort
  const size_t psSize(100);
  LgFrSortingPartScheduleFloat ps(psSize); 
  const LgFrSortingPartScheduleFloat & constps = ps;
  std::string partName;
  LgFrPart part;
  LgFrTimeVecFloat tvf(10);
  srand( 1 );
  char chars[]="abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUV";
  int nChars = sizeof(chars)-1;
  for ( i=0; ps.size()<psSize; i++ ) {
     // Generate 2 character partname
     partName = std::string(1,chars[rand()%nChars]) + 
                std::string(1,chars[rand()%nChars]);
     // Create part
     part = LgFrPart(partName);
     // Make sure part was not already created
     if ( ! (ps.contains(part)) ) {
       // Generate random timeVecFloat
       for ( t=0; t<tvf.length(); t++ ) tvf[t] = rand()/10.f; 
       // Insert part and timeVecFloat in schedule
       ps.insertKeyAndValue( part, tvf );
     }
  }

  // Display unsorted schedule
  // cout <<"$$$$$$$$$$ Unsorted $$$$$$$$$$$$$$$" <<endl;
  // ps.print();

  // Set compare strategy and Sort the part schedule
  ps.sort( &cs1 );

  // Display sorted schedule
  // cout <<"$$$$$$$$$$  Sorted  $$$$$$$$$$$$$$$" <<endl;
  // ps.print();

  // Test to insure schedule is sorted
  for ( i=1; i<ps.size(); i++ ) {
     LgFrItemTimeVecPairFloat itvf (constps[i]);
     assert( constps[i-1].compareTo(& itvf) <= 0 );
  }

  
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 1
#include <iostream.h>
a42 8
// Return comparison strategy identifier
isAReturnType
LgFrPairCompareFloat::isA()
const
{
   return id_;
}

a97 1
  assert( id_ == rhs.id_ );
d102 1
a102 1
     if ( algorithmPtr_ != NULL ) algorithmPtr_->removeDependentFromHeterogeneousList( this );
d104 1
a104 1
     if ( algorithmPtr_ != NULL ) algorithmPtr_->addDependent( this );
d120 1
a120 2
  assert( id_ == source.id_ );
  if ( algorithmPtr_ != NULL ) algorithmPtr_->addDependent( this );
d134 1
a134 2
  assert( id_ == source.id_ );
  if ( algorithmPtr_ != NULL ) algorithmPtr_->addDependent( this );
d147 1
a147 1
  if ( algorithmPtr_ != NULL ) algorithmPtr_->addDependent( this );
d154 1
a154 1
  if ( algorithmPtr_ != NULL ) algorithmPtr_->removeDependentFromHeterogeneousList( this );
a169 4
  assert( cs1.id_ == __LGFRPAIRCOMPAREFLOAT );

  // Test isA method
  assert( cs1.isA() == __LGFRPAIRCOMPAREFLOAT );
a172 1
  assert( cs2.isA() == __LGFRPAIRCOMPAREFLOAT );
a176 1
  assert( cs3.isA() == cs2.isA() );
a179 1
  assert( cs4Ptr->isA() == cs1.isA() );
d191 1
a191 1
  RWCString partName;
d197 1
a197 1
  for ( i=0; ps.entries()<psSize; i++ ) {
d199 2
a200 2
     partName = RWCString(chars[rand()%nChars]) + 
                RWCString(chars[rand()%nChars]);
d224 1
a224 1
  for ( i=1; i<ps.entries(); i++ ) {
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 5
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <iostream>
d39 8
d102 1
d107 1
a107 1
     if ( algorithmPtr_ != 0 ) algorithmPtr_->removeDependentFromHeterogeneousList( this );
d109 1
a109 1
     if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
d125 2
a126 1
  if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
d140 2
a141 1
  if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
d154 1
a154 1
  if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
d161 1
a161 1
  if ( algorithmPtr_ != 0 ) algorithmPtr_->removeDependentFromHeterogeneousList( this );
d177 4
d184 1
d189 1
d193 1
d205 1
a205 1
  std::string partName;
d211 1
a211 1
  for ( i=0; ps.size()<psSize; i++ ) {
d213 2
a214 2
     partName = std::string(1,chars[rand()%nChars]) + 
                std::string(1,chars[rand()%nChars]);
d238 1
a238 1
  for ( i=1; i<ps.size(); i++ ) {
@

