head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.41;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.32;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_PART_CATEGORY_FILTER_STRATEGY_H
#define LGFR_PART_CATEGORY_FILTER_STRATEGY_H
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/scenSnFS.h>
#include <scenario/src/part.h>

// Filter strategy for parts based on part's category (LgFrPartCategory).

class LgFrScenario;

class LgFrPartCategoryFilterStrategy : public LgFrScenarioSensitiveFilterStrategy {
public:

  // Return true if itemTimeVec is not of the category represented by 
  // this strategy.
  // This base class always returns false and does not filter any
  // itemTimeVecs from the schedule.
  virtual
    bool
      exclude(
        const LgFrItemTimeVecPairFloat &)
          const;

  // Get the LgFrPartCategory associated with this filter
  LgFrPartCategory
     partCategory()
        const;

  // Make clone copy of this object
  virtual
     LgFrFilterStrategy *
        clone() 
           const;

  // Make clone copy of this object with new Scenario
  virtual
     LgFrFilterStrategy *
        clone(LgFrScenario &) 
           const;

  // Preferred Constructor
  LgFrPartCategoryFilterStrategy (
          const LgFrPartCategory & pc,
	  const LgFrScenario & scenario);

  // Default Constructor
  LgFrPartCategoryFilterStrategy ();

  // Assignment operator
  LgFrPartCategoryFilterStrategy &
    operator=(
	      const LgFrPartCategoryFilterStrategy& rhs);

  // Copy constructor
  LgFrPartCategoryFilterStrategy (
     const LgFrPartCategoryFilterStrategy &);

  // Copy constructor with new Scenario
  LgFrPartCategoryFilterStrategy (
     const LgFrPartCategoryFilterStrategy &,
     LgFrScenario &);

  // Destructor
  ~LgFrPartCategoryFilterStrategy ();

  // test this class
  static void test();

  static void contextTest(LgFrScenario &);

private:

  LgFrPartCategory partCategory_;
  const int id_;

};

#endif
@


1.1
log
@Initial revision
@
text
@d3 2
d16 1
a16 1
  // Return TRUE if itemTimeVec is not of the category represented by 
d18 1
a18 1
  // This base class always returns FALSE and does not filter any
d21 1
a21 1
    RWBoolean
a40 6
           const;

  // Return Filter Strategy Identifier
  virtual
     isAReturnType
        isA()
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d14 1
a14 1
  // Return true if itemTimeVec is not of the category represented by 
d16 1
a16 1
  // This base class always returns false and does not filter any
d19 1
a19 1
    bool
d39 6
@

