head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.42;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.33;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.41;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
#include <assert.h>
#include <scenario/src/partSchP.h>
#include <scenario/src/partSchd.h>
#include <scenario/src/sortSchP.h>


// Default Constructor
LgFrSortingPartScheduleFloatSmartPointerToConst::LgFrSortingPartScheduleFloatSmartPointerToConst() : pointer_(new LgFrSortingPartScheduleFloat), count_(1)
{
};

// Preferred Constructor
LgFrSortingPartScheduleFloatSmartPointerToConst::LgFrSortingPartScheduleFloatSmartPointerToConst(LgFrSortingPartScheduleFloat* newedPointer) 
: pointer_(newedPointer), count_(1)
{
}

// Constructor for cast operator
LgFrSortingPartScheduleFloatSmartPointerToConst::LgFrSortingPartScheduleFloatSmartPointerToConst(
    LgFrSortingPartScheduleFloat* existingPointer,
    LgFrReferenceCount& count) : pointer_(existingPointer)
{
    count_ = count;
}

// Destructor
LgFrSortingPartScheduleFloatSmartPointerToConst::~LgFrSortingPartScheduleFloatSmartPointerToConst()
{
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
}

// Copy Constructor
LgFrSortingPartScheduleFloatSmartPointerToConst::LgFrSortingPartScheduleFloatSmartPointerToConst(const LgFrSortingPartScheduleFloatSmartPointerToConst& rhs) 
: pointer_(rhs.pointer_)
{
    count_ = ((LgFrSortingPartScheduleFloatSmartPointerToConst&)rhs).count_;
}

// Deep Copy
LgFrSortingPartScheduleFloatSmartPointerToConst
LgFrSortingPartScheduleFloatSmartPointerToConst::deepCopy() const
{
    // do SortingPartScheduleFloat deep copy and create a new smart pointer
    //  we can cast as we know that we are cloning a derived class
    return LgFrSortingPartScheduleFloatSmartPointerToConst((LgFrSortingPartScheduleFloat *)pointer_->clone());
}

// Assignment Operator
LgFrSortingPartScheduleFloatSmartPointerToConst& 
LgFrSortingPartScheduleFloatSmartPointerToConst::operator=(const LgFrSortingPartScheduleFloatSmartPointerToConst& rhs)
{
    // check to see if this smart pointer is the only one pointing to
    //  the actual object.  If it is, then we want to delete the
    //  pointer
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
    count_ = ((LgFrSortingPartScheduleFloatSmartPointerToConst&)rhs).count_;
    pointer_ = rhs.pointer_;
    return *this;
}


bool
LgFrSortingPartScheduleFloatSmartPointerToConst::operator==(const LgFrSortingPartScheduleFloatSmartPointerToConst& rhs) const
{
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
    else
	return false;
}

bool
LgFrSortingPartScheduleFloatSmartPointerToConst::operator!=(const LgFrSortingPartScheduleFloatSmartPointerToConst& rhs) const
{
    return !( *this == rhs );
}

const LgFrSortingPartScheduleFloat* const
LgFrSortingPartScheduleFloatSmartPointerToConst::operator->() const
{
    // implicit cast to const
    return pointer_;
}

const LgFrSortingPartScheduleFloat&
LgFrSortingPartScheduleFloatSmartPointerToConst::operator*() const
{
    // implicit cast to const
    return *pointer_;
}

/*
LgFrSortingPartScheduleFloatSmartPointerToConst::operator const LgFrSortingPartScheduleFloat* const () const
{
    return &(*pointer_);
}
*/


LgFrSortingPartScheduleFloatSmartPointerToConst::operator LgFrSortingScheduleFloatSmartPointerToConst () const
{
    // need to cast away const for count_
    return LgFrSortingScheduleFloatSmartPointerToConst(pointer_, (LgFrReferenceCount&)count_);
}

bool
LgFrSortingPartScheduleFloatSmartPointerToConst::unique() const
{
    return (count_.reference() == 1);
}

bool 
LgFrSortingPartScheduleFloatSmartPointerToConst::null() const
{
    return (pointer_ == 0);
}

void
LgFrSortingPartScheduleFloatSmartPointerToConst::test()
{
    std::cout << "Testing default constructor" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointerToConst dummy;
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;

    std::cout << "Testing preferred constructor (dummy)" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointerToConst b(new LgFrSortingPartScheduleFloat);
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing assignement operator dummy = b" << std::endl;
    dummy = b;
    std::cout << "b count is " << b.count_.reference() << std::endl;    


    std::cout << "Testing copy constructor (c = b)" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointerToConst c(b);
    std::cout << "b count is " << b.count_.reference() << std::endl;    


    std::cout << "Testing backdoor constructor" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointerToConst e(b.pointer_, b.count_);
    std::cout << "e count is " << e.count_.reference() << std::endl;    

    std::cout << "Testing equality operator (c == b)" << std::endl;
    assert(c == b);

    std::cout << "Testing inequality operator (c != d)" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointerToConst d(new LgFrSortingPartScheduleFloat);
    assert(c != d);

    std::cout << "Test destructor" << std::endl;
    c = d;
    std::cout << "b count is " << b.count_.reference() << std::endl;    
    c = b;
    d = b;

    // this should be a compiler error
//    LgFrSortingPartScheduleFloatSmartPointerToConst e(&(*d));
}



LgFrSortingPartScheduleFloatSmartPointer::LgFrSortingPartScheduleFloatSmartPointer() 
{
    // calls base class default constructor
}

LgFrSortingPartScheduleFloatSmartPointer::LgFrSortingPartScheduleFloatSmartPointer(LgFrSortingPartScheduleFloat* newedPointer) 
: LgFrSortingPartScheduleFloatSmartPointerToConst(newedPointer)
{
}

LgFrSortingPartScheduleFloatSmartPointer::LgFrSortingPartScheduleFloatSmartPointer(
    LgFrSortingPartScheduleFloat* existingPointer,
    LgFrReferenceCount& count) 
: LgFrSortingPartScheduleFloatSmartPointerToConst(existingPointer, count)
{
}


LgFrSortingPartScheduleFloatSmartPointer::~LgFrSortingPartScheduleFloatSmartPointer()
{
    // call base class destructor
}

LgFrSortingPartScheduleFloatSmartPointer::LgFrSortingPartScheduleFloatSmartPointer(const LgFrSortingPartScheduleFloatSmartPointer& rhs) 
: LgFrSortingPartScheduleFloatSmartPointerToConst(rhs.pointer_)
{
    count_ = ((LgFrSortingPartScheduleFloatSmartPointer&)rhs).count_;
}

// need to do some casting to a derived class so that we can access protected
//  members
LgFrSortingPartScheduleFloatSmartPointer::LgFrSortingPartScheduleFloatSmartPointer(LgFrSortingPartScheduleFloatSmartPointerToConst rhs) 
    : LgFrSortingPartScheduleFloatSmartPointerToConst(((LgFrSortingPartScheduleFloatSmartPointer&)rhs).pointer_)
{
    count_ = ((LgFrSortingPartScheduleFloatSmartPointer&)rhs).count_;
}

LgFrSortingPartScheduleFloatSmartPointer
LgFrSortingPartScheduleFloatSmartPointer::deepCopy() 
{
    // do SortingPartScheduleFloat deep copy and create a new smart pointer
    return LgFrSortingPartScheduleFloatSmartPointer((LgFrSortingPartScheduleFloat *)pointer_->clone());
}

LgFrSortingPartScheduleFloatSmartPointer& 
LgFrSortingPartScheduleFloatSmartPointer::operator=(const LgFrSortingPartScheduleFloatSmartPointer& rhs)
{
    // check to see if this smart pointer is the only one pointing to
    //  the actual object.  If it is, then we want to delete the
    //  pointer
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
    count_ = ((LgFrSortingPartScheduleFloatSmartPointer&)rhs).count_;
    pointer_ = rhs.pointer_;
    return *this;
}

// need to do some casting to a derived class so that we can access protected
//  members
/*
LgFrSortingPartScheduleFloatSmartPointer& 
LgFrSortingPartScheduleFloatSmartPointer::operator=(LgFrSortingPartScheduleFloatSmartPointerToConst rhs)
{
    // check to see if this smart pointer is the only one pointing to
    //  the actual object.  If it is, then we want to delete the
    //  pointer
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
    count_ = ((LgFrSortingPartScheduleFloatSmartPointer&)rhs).count_;
    pointer_ = ((LgFrSortingPartScheduleFloatSmartPointer&)rhs).pointer_;
    return *this;
}
*/

bool
LgFrSortingPartScheduleFloatSmartPointer::operator==(const LgFrSortingPartScheduleFloatSmartPointer& rhs) const
{
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
    else
	return false;
}
/*
bool
LgFrSortingPartScheduleFloatSmartPointer::operator==(LgFrSortingPartScheduleFloatSmartPointerToConst rhs) const
{
    if ( (pointer_ == rhs.pointer_) && (count_ == rhs.count_) )
	return true;
    else
	return false;
}
*/
bool
LgFrSortingPartScheduleFloatSmartPointer::operator!=(const LgFrSortingPartScheduleFloatSmartPointer& rhs) const
{
    return !( *this == rhs );
}
/*
bool
LgFrSortingPartScheduleFloatSmartPointer::operator!=(LgFrSortingPartScheduleFloatSmartPointerToConst rhs) const
{
    if ( (pointer_ != rhs.pointer_) || (count_ != rhs.count_) )
	return true;
    else
	return false;
}
*/
const LgFrSortingPartScheduleFloat* const
LgFrSortingPartScheduleFloatSmartPointer::operator->() const
{
    return pointer_;
}

LgFrSortingPartScheduleFloat* const
LgFrSortingPartScheduleFloatSmartPointer::operator->()
{
    return pointer_;
}

LgFrSortingPartScheduleFloat &
LgFrSortingPartScheduleFloatSmartPointer::operator*()
{
    return *pointer_;
}

const LgFrSortingPartScheduleFloat &
LgFrSortingPartScheduleFloatSmartPointer::operator*() const
{
    return *pointer_;
}

/*
LgFrSortingPartScheduleFloatSmartPointer::operator const LgFrSortingPartScheduleFloat* const () const
{
    return &(*pointer_);
}

LgFrSortingPartScheduleFloatSmartPointer::operator LgFrSortingPartScheduleFloat* ()
{
    return &(*pointer_);
}
*/


LgFrSortingPartScheduleFloatSmartPointer::operator LgFrSortingScheduleFloatSmartPointerToConst () const
{
    // need to cast away const for count_
    return LgFrSortingScheduleFloatSmartPointerToConst(pointer_, (LgFrReferenceCount&)count_);
}

LgFrSortingPartScheduleFloatSmartPointer::operator LgFrSortingScheduleFloatSmartPointer () 
{
    return LgFrSortingScheduleFloatSmartPointer(pointer_, count_);
}

bool
LgFrSortingPartScheduleFloatSmartPointer::unique() const
{
    return (count_.reference() == 1);
}

bool 
LgFrSortingPartScheduleFloatSmartPointer::null() const
{
    return (pointer_ == 0);
}


void
LgFrSortingPartScheduleFloatSmartPointer::test()
{
    std::cout << "Testing default constructor" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointer dummy;
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;

    std::cout << "Testing preferred constructor (dummy)" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointer b(new LgFrSortingPartScheduleFloat);
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing assignement operator dummy = b" << std::endl;
    dummy = b;
    std::cout << "b count is " << b.count_.reference() << std::endl;    


    std::cout << "Testing copy constructor (c = b)" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointer c(b);
    std::cout << "b count is " << b.count_.reference() << std::endl;    


    std::cout << "Testing backdoor constructor" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointer e(b.pointer_, b.count_);
    std::cout << "e count is " << e.count_.reference() << std::endl;    

    std::cout << "Testing equality operator (c == b)" << std::endl;
    assert(c == b);

    std::cout << "Testing inequality operator (c != d)" << std::endl;
    LgFrSortingPartScheduleFloatSmartPointer d(new LgFrSortingPartScheduleFloat);
    assert(c != d);

    std::cout << "Test destructor" << std::endl;
    c = d;
    std::cout << "b count is " << b.count_.reference() << std::endl;    
    c = b;
    d = b;
}

@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
#include <iostream.h>
d33 1
a33 1
    if (pointer_ != NULL)  {
d62 1
a62 1
    if (pointer_ != NULL)  {
d72 1
a72 1
RWBoolean
d75 2
a76 2
    if ( (pointer_ == rhs.pointer_) && (count_ == rhs.count_) )
	return TRUE;
d78 1
a78 1
	return FALSE;
d81 1
a81 1
RWBoolean
d84 1
a84 4
    if ( (pointer_ != rhs.pointer_) || (count_ != rhs.count_) )
	return TRUE;
    else
	return FALSE;
d115 1
a115 1
RWBoolean
d121 1
a121 1
RWBoolean 
d124 1
a124 1
    return (pointer_ == NULL);
d130 1
a130 1
    cout << "Testing default constructor" << endl;
d132 1
a132 1
    cout << "dummy count is " << dummy.count_.reference() << endl;
d134 1
a134 1
    cout << "Testing preferred constructor (dummy)" << endl;
d136 1
a136 1
    cout << "b count is " << b.count_.reference() << endl;    
d138 1
a138 1
    cout << "Testing assignement operator dummy = b" << endl;
d140 1
a140 1
    cout << "b count is " << b.count_.reference() << endl;    
d143 1
a143 1
    cout << "Testing copy constructor (c = b)" << endl;
d145 1
a145 1
    cout << "b count is " << b.count_.reference() << endl;    
d148 1
a148 1
    cout << "Testing backdoor constructor" << endl;
d150 1
a150 1
    cout << "e count is " << e.count_.reference() << endl;    
d152 1
a152 1
    cout << "Testing equality operator (c == b)" << endl;
d155 1
a155 1
    cout << "Testing inequality operator (c != d)" << endl;
d159 1
a159 1
    cout << "Test destructor" << endl;
d161 1
a161 1
    cout << "b count is " << b.count_.reference() << endl;    
d221 1
a221 1
    if (pointer_ != NULL)  {
d239 1
a239 1
    if (pointer_ != NULL)  {
d249 1
a249 1
RWBoolean
d252 2
a253 2
    if ( (pointer_ == rhs.pointer_) && (count_ == rhs.count_) )
	return TRUE;
d255 1
a255 1
	return FALSE;
d258 1
a258 1
RWBoolean
d262 1
a262 1
	return TRUE;
d264 1
a264 1
	return FALSE;
d267 1
a267 1
RWBoolean
d270 1
a270 4
    if ( (pointer_ != rhs.pointer_) || (count_ != rhs.count_) )
	return TRUE;
    else
	return FALSE;
d273 1
a273 1
RWBoolean
d277 1
a277 1
	return TRUE;
d279 1
a279 1
	return FALSE;
d330 1
a330 1
RWBoolean
d336 1
a336 1
RWBoolean 
d339 1
a339 1
    return (pointer_ == NULL);
d346 1
a346 1
    cout << "Testing default constructor" << endl;
d348 1
a348 1
    cout << "dummy count is " << dummy.count_.reference() << endl;
d350 1
a350 1
    cout << "Testing preferred constructor (dummy)" << endl;
d352 1
a352 1
    cout << "b count is " << b.count_.reference() << endl;    
d354 1
a354 1
    cout << "Testing assignement operator dummy = b" << endl;
d356 1
a356 1
    cout << "b count is " << b.count_.reference() << endl;    
d359 1
a359 1
    cout << "Testing copy constructor (c = b)" << endl;
d361 1
a361 1
    cout << "b count is " << b.count_.reference() << endl;    
d364 1
a364 1
    cout << "Testing backdoor constructor" << endl;
d366 1
a366 1
    cout << "e count is " << e.count_.reference() << endl;    
d368 1
a368 1
    cout << "Testing equality operator (c == b)" << endl;
d371 1
a371 1
    cout << "Testing inequality operator (c != d)" << endl;
d375 1
a375 1
    cout << "Test destructor" << endl;
d377 1
a377 1
    cout << "b count is " << b.count_.reference() << endl;    
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
d30 1
a30 1
    if (pointer_ != 0)  {
d59 1
a59 1
    if (pointer_ != 0)  {
d69 1
a69 1
bool
d72 2
a73 2
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
d75 1
a75 1
	return false;
d78 1
a78 1
bool
d81 4
a84 1
    return !( *this == rhs );
d115 1
a115 1
bool
d121 1
a121 1
bool 
d124 1
a124 1
    return (pointer_ == 0);
d221 1
a221 1
    if (pointer_ != 0)  {
d239 1
a239 1
    if (pointer_ != 0)  {
d249 1
a249 1
bool
d252 2
a253 2
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
d255 1
a255 1
	return false;
d258 1
a258 1
bool
d262 1
a262 1
	return true;
d264 1
a264 1
	return false;
d267 1
a267 1
bool
d270 4
a273 1
    return !( *this == rhs );
d276 1
a276 1
bool
d280 1
a280 1
	return true;
d282 1
a282 1
	return false;
d333 1
a333 1
bool
d339 1
a339 1
bool 
d342 1
a342 1
    return (pointer_ == 0);
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d130 1
a130 1
    std::cout << "Testing default constructor" << std::endl;
d132 1
a132 1
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;
d134 1
a134 1
    std::cout << "Testing preferred constructor (dummy)" << std::endl;
d136 1
a136 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d138 1
a138 1
    std::cout << "Testing assignement operator dummy = b" << std::endl;
d140 1
a140 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d143 1
a143 1
    std::cout << "Testing copy constructor (c = b)" << std::endl;
d145 1
a145 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d148 1
a148 1
    std::cout << "Testing backdoor constructor" << std::endl;
d150 1
a150 1
    std::cout << "e count is " << e.count_.reference() << std::endl;    
d152 1
a152 1
    std::cout << "Testing equality operator (c == b)" << std::endl;
d155 1
a155 1
    std::cout << "Testing inequality operator (c != d)" << std::endl;
d159 1
a159 1
    std::cout << "Test destructor" << std::endl;
d161 1
a161 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d346 1
a346 1
    std::cout << "Testing default constructor" << std::endl;
d348 1
a348 1
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;
d350 1
a350 1
    std::cout << "Testing preferred constructor (dummy)" << std::endl;
d352 1
a352 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d354 1
a354 1
    std::cout << "Testing assignement operator dummy = b" << std::endl;
d356 1
a356 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d359 1
a359 1
    std::cout << "Testing copy constructor (c = b)" << std::endl;
d361 1
a361 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d364 1
a364 1
    std::cout << "Testing backdoor constructor" << std::endl;
d366 1
a366 1
    std::cout << "e count is " << e.count_.reference() << std::endl;    
d368 1
a368 1
    std::cout << "Testing equality operator (c == b)" << std::endl;
d371 1
a371 1
    std::cout << "Testing inequality operator (c != d)" << std::endl;
d375 1
a375 1
    std::cout << "Test destructor" << std::endl;
d377 1
a377 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
@


