head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.28;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.25;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.43;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>

#include <math.h>

#include <witutil/src/witU5.h>

#include <scenario/src/consSS.h>
#include <scenario/src/explode.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/scenario.h>
#include <scenario/src/zeroTvFS.h>
#include <scenario/src/machdep.h>
#include <scenario/src/partSchP.h>



//---------------------------------------------------------------------------
//
//   LgFrMrpConsVolScheduleStrategy
//
//---------------------------------------------------------------------------


// Populate Schedule with itemTimeVecs
void
LgFrMrpConsVolScheduleStrategy::kernalOfPopulate(
   LgFrSortingScheduleFloat& schedule )
const
{
  LgFrPart part;
  LgFrTimeVecFloat tv;
  LgFrItemTimeVecPairFloat itv( part, tv );

  // Loop once for each part
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {

     part = setOfParts()[i];

     // Make itemTimeVec
     itv.item( part );
     itv.timeVecFloat(
           explodePtr_->lastProblemSolved().mrpConsVolume( &part )   );

     // Check to see if i'th itemTimeVec is to be filtered out
     if ( schedule.filterStrategy().exclude( itv ) ) continue;

     // Insert itemTimeVec into schedule
     schedule.localInsert( itv );

  }

}


// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrMrpConsVolScheduleStrategy::clone()
const
{
  LgFrMrpConsVolScheduleStrategy* newInst = 
      new LgFrMrpConsVolScheduleStrategy(*this);
  return (newInst);
}

// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrMrpConsVolScheduleStrategy::clone(LgFrScenario& newScenario)
const
{  LgFrMrpConsVolScheduleStrategy* newInst = 
      new LgFrMrpConsVolScheduleStrategy(*this, newScenario);
  return (newInst);
}
 

// Assignment operator
LgFrMrpConsVolScheduleStrategy &
LgFrMrpConsVolScheduleStrategy::operator=(
	  const LgFrMrpConsVolScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrPartScheduleStrategy::operator= ) (rhs);

    explodePtr_ = rhs.explodePtr_;
  }
  return *this;
}


// Copy constructor
LgFrMrpConsVolScheduleStrategy::
   LgFrMrpConsVolScheduleStrategy (
      const LgFrMrpConsVolScheduleStrategy & source)
:  LgFrPartScheduleStrategy( source ), 
   explodePtr_( source.explodePtr_ ),
   id_(__LGFRMRPCONSVOLSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Copy constructor with newScenario
LgFrMrpConsVolScheduleStrategy::
   LgFrMrpConsVolScheduleStrategy (
      const LgFrMrpConsVolScheduleStrategy & source,
      LgFrScenario & newScenario)
:  LgFrPartScheduleStrategy( 
         source, 
         newScenario ),
   explodePtr_( &(explode(newScenario)) ),
   id_(__LGFRMRPCONSVOLSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Constructor
LgFrMrpConsVolScheduleStrategy::
   LgFrMrpConsVolScheduleStrategy (
     LgFrScenario & scenario )
:  LgFrPartScheduleStrategy(
      LgFrAttributeScheduleStrategy::setOfParts(scenario),
      &(explode(scenario)) ), 
   explodePtr_( &(explode(scenario)) ),
   id_(__LGFRMRPCONSVOLSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrMrpConsVolScheduleStrategy::
   LgFrMrpConsVolScheduleStrategy ()
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   explodePtr_( 0 ),
   id_(__LGFRMRPCONSVOLSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrMrpConsVolScheduleStrategy::
   ~LgFrMrpConsVolScheduleStrategy ()
{
  // Nothing to do here
}



//---------------------------------------------------------------------------
//
//   LgFrFullyExplodedMrpConsVolScheduleStrategy
//
//---------------------------------------------------------------------------

// Populate Schedule with itemTimeVecs
void
LgFrFullyExplodedMrpConsVolScheduleStrategy::kernalOfPopulate(
   LgFrSortingScheduleFloat& schedule )
const
{
  //-----------------------------------------------------------------
  // Set up to invoke wit utility to compute attribute
  //-----------------------------------------------------------------
  
  // Get a veneer of WitRun being used by LPS
  LgFrLastProblemSolved & lps = explodePtr_->lastProblemSolved();
  LgFrWitRunVeneer witRunVeneer( lps.witRunVeneer() );

  // Set up parmameters for WUtlComputeDependentDemandAndPlanOrders
  int nParts;
  char ** partList;
  witGetParts( 
            witRunVeneer.constWitRun(), 
            &nParts,
            &partList );
  int nPeriods = lps.numberOfPeriods(); 
  float ** femcv      = new float* [nParts]; // fully exploded mrp cons vol

  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<nParts; i++ ) {
    femcv     [i] = new float [nPeriods];
  }

  // Invoke wit utility to compute fully exploded mrp cons vol
  WUtlComputeDependentDemandAndPlanOrders(
     witRunVeneer.mutableWitRun(), 
     nParts,     
     partList,
     femcv,  
     0,
     WUTL_CURRENT_PERIOD, // whereToPutOutstandingReqVolForRaw
     WUTL_CURRENT_PERIOD, // whereToPutOutstandingReqVolForProductWithEmptyBom
     WUTL_CURRENT_PERIOD, // whereToPutOutstandingReqVolForProductWithBom
     false,               // includeOrderCancelRecommendationInPlanOrder
     false                // resetDemandVolsWhenDone
     );
  
  const LgFrPart * partPtr;
  LgFrPart part;
  LgFrTimeVecFloat tv;
  LgFrItemTimeVecPairFloat itv( part, tv );

  // Loop once for each part in wit
  for ( i=0; i<nParts; i++ ) {

    // Check to see if i'th part is in set of parts
    partPtr = setOfParts().findValue( partList[i] );
    if ( partPtr == 0 ) continue;
    part = *partPtr;

    // Make itemTimeVec
    itv.item( part );
    itv.timeVecFloat( LgFrTimeVecFloat( nPeriods, femcv[i] ) );

    // Check to see if i'th itemTimeVec is to be filtered out
    if ( schedule.filterStrategy().exclude( itv ) ) continue;

    // Insert itemTimeVec into schedule
    schedule.localInsert( itv );

  }
  
  // Free storage of previously allocated vectors
  for ( i=0; i<nParts; i++ ) {
    delete [] femcv[i];
    portableFree( partList[i] );
  }
  delete [] femcv;
  portableFree( partList );

}


// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrFullyExplodedMrpConsVolScheduleStrategy::clone()
const
{
  LgFrFullyExplodedMrpConsVolScheduleStrategy* newInst = 
      new LgFrFullyExplodedMrpConsVolScheduleStrategy(*this);
  return (newInst);
}

// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrFullyExplodedMrpConsVolScheduleStrategy::clone(LgFrScenario& newScenario)
const
{  LgFrFullyExplodedMrpConsVolScheduleStrategy* newInst = 
      new LgFrFullyExplodedMrpConsVolScheduleStrategy(*this, newScenario);
  return (newInst);
}
 
// Assignment operator
LgFrFullyExplodedMrpConsVolScheduleStrategy &
LgFrFullyExplodedMrpConsVolScheduleStrategy::operator=(
	  const LgFrFullyExplodedMrpConsVolScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrPartScheduleStrategy::operator= ) (rhs);

    explodePtr_ = rhs.explodePtr_;
  }
  return *this;
}


// Copy constructor
LgFrFullyExplodedMrpConsVolScheduleStrategy::
   LgFrFullyExplodedMrpConsVolScheduleStrategy (
      const LgFrFullyExplodedMrpConsVolScheduleStrategy & source)
:  LgFrPartScheduleStrategy( source ), 
   explodePtr_( source.explodePtr_ ),
   id_(__LGFRFULLYEXPLODEDMRPCONSVOLSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Copy constructor with newScenario
LgFrFullyExplodedMrpConsVolScheduleStrategy::
   LgFrFullyExplodedMrpConsVolScheduleStrategy (
      const LgFrFullyExplodedMrpConsVolScheduleStrategy & source,
      LgFrScenario & newScenario)
:  LgFrPartScheduleStrategy( 
         source, 
         newScenario ),
   explodePtr_( &(explode(newScenario)) ),
   id_(__LGFRFULLYEXPLODEDMRPCONSVOLSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Constructor
LgFrFullyExplodedMrpConsVolScheduleStrategy::
   LgFrFullyExplodedMrpConsVolScheduleStrategy (
     LgFrScenario & scenario )
:  LgFrPartScheduleStrategy(
      LgFrAttributeScheduleStrategy::setOfParts(scenario),
      &(explode(scenario)) ), 
   explodePtr_( &(explode(scenario)) ),
   id_(__LGFRFULLYEXPLODEDMRPCONSVOLSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrFullyExplodedMrpConsVolScheduleStrategy::
   LgFrFullyExplodedMrpConsVolScheduleStrategy ()
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   explodePtr_( 0 ),
   id_(__LGFRFULLYEXPLODEDMRPCONSVOLSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrFullyExplodedMrpConsVolScheduleStrategy::
   ~LgFrFullyExplodedMrpConsVolScheduleStrategy ()
{
  // Nothing to do here
}

//---------------------------------------------------------------------------
//
//   Test Methods
//
//---------------------------------------------------------------------------



#ifdef NDEBUG
#undef NDEBUG
#endif




// test LgFrMrpConsVolScheduleStrategy methods.
void
LgFrMrpConsVolScheduleStrategy::test()
{
}


// test LgFrMrpConsVolScheduleStrategy methods.
// testScenario should have been generated using the diner12 dataset
void
LgFrMrpConsVolScheduleStrategy::contextTest
    (LgFrScenario          & testScenario,
     LgFrWorkingImplosionProblem & wip,
     LgFrLastProblemSolved & lps,
     LgFrSetOfParts        & sop)
{
  int i;

  // Test constructor
  LgFrMrpConsVolScheduleStrategy cs1(testScenario);

  // Test copy constructor
  LgFrMrpConsVolScheduleStrategy cs2(cs1);

  // Test assignment operator
  LgFrMrpConsVolScheduleStrategy cs3;
  cs3 = cs2;

  // Test clone method
  LgFrAttributeScheduleStrategy *cs4Ptr = cs1.clone();

  // Test destructor
  delete cs4Ptr;

  // See if we can break the LgFrModel stuff
  cs4Ptr = cs2.clone();
  *cs4Ptr = cs1;
  delete cs4Ptr;


  // Test populate..
  LgFrSortingPartScheduleFloatSmartPointer 
     schedule(new LgFrSortingPartScheduleFloat); 
  const LgFrSortingPartScheduleFloat & constSchedule = *schedule;
  cs1.populate( *schedule );
  for ( i=0; i<sop.size(); i++ ) {
     assert(  schedule->contains( sop[i] )  );
     assert( constSchedule[sop[i]].timeVecFloat() == 0.0 );
  }

  // Test populate, due to new explosion solution.
  schedule->attributeScheduleStrategy( cs1 );
  lps.mrp(wip);
  cs1.populate( *schedule );
  std::cout << std::endl <<"LgFrMrpConsVolScheduleStrategy" << std::endl
       <<schedule->format() << std::endl;

  for ( i=0; i<sop.size(); i++ ) {
     assert(  schedule->contains( sop[i] )  );
     assert( lps.mrpConsVolume(&sop[i]) <= 
             constSchedule[sop[i]].timeVecFloat() );
  }

}



// test LgFrFullyExplodedMrpConsVolScheduleStrategy methods.
void
LgFrFullyExplodedMrpConsVolScheduleStrategy::test()
{
}


// test LgFrFullyExplodedMrpConsVolScheduleStrategy methods.
// testScenario should have been generated using the diner12 dataset
void
LgFrFullyExplodedMrpConsVolScheduleStrategy::contextTest
    (LgFrScenario          & testScenario,
     LgFrWorkingImplosionProblem & wip,
     LgFrLastProblemSolved & lps,
     LgFrSetOfParts        & sop)
{
  int i;

  // Test constructor
  LgFrFullyExplodedMrpConsVolScheduleStrategy cs1(testScenario);

  // Test copy constructor
  LgFrFullyExplodedMrpConsVolScheduleStrategy cs2(cs1);

  // Test assignment operator
  LgFrFullyExplodedMrpConsVolScheduleStrategy cs3;
  cs3 = cs2;

  // Test clone method
  LgFrAttributeScheduleStrategy *cs4Ptr = cs1.clone();

  // Test destructor
  delete cs4Ptr;

  // See if we can break the LgFrModel stuff
  cs4Ptr = cs2.clone();
  *cs4Ptr = cs1;
  delete cs4Ptr;


  // Test populate..
  LgFrSortingPartScheduleFloatSmartPointer 
     schedule(new LgFrSortingPartScheduleFloat); 
  const LgFrSortingPartScheduleFloat & constSchedule = *schedule;
  cs1.populate( *schedule );


  // Test populate, due to new explosion solution.
  schedule->attributeScheduleStrategy( cs1 );
  lps.mrp(wip);
  cs1.populate( *schedule );
  std::cout << std::endl <<"LgFrFullyExplodedMrpConsVolScheduleStrategy" << std::endl
       <<schedule->format() << std::endl;

  for ( i=0; i<sop.size(); i++ ) {
     assert(  schedule->contains( sop[i] )  );
     assert( lps.mrpConsVolume(&sop[i]) <= 
             constSchedule[sop[i]].timeVecFloat() );
  }

}

@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
#include <iostream.h>
d38 2
a39 1
  for ( size_t i=0; i<setOfParts().entries(); i++ ) {
a78 8
// Return comparison strategy identifier
isAReturnType
LgFrMrpConsVolScheduleStrategy::isA()
const
{
   return id_;
}

a83 1
  assert( id_ == rhs.id_ );
d135 2
a136 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), NULL ),
   explodePtr_( NULL ),
d181 2
a182 1
  for ( size_t i=0; i<nParts; i++ ) {
d192 1
a192 1
     NULL,
d196 2
a197 2
     FALSE,               // includeOrderCancelRecommendationInPlanOrder
     FALSE                // resetDemandVolsWhenDone
d210 1
a210 1
    if ( partPtr == NULL ) continue;
a254 9

// Return comparison strategy identifier
isAReturnType
LgFrFullyExplodedMrpConsVolScheduleStrategy::isA()
const
{
   return id_;
}

a259 1
  assert( id_ == rhs.id_ );
d311 2
a312 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), NULL ),
   explodePtr_( NULL ),
a359 4
  assert( cs1.id_ == __LGFRMRPCONSVOLSCHEDULESTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRMRPCONSVOLSCHEDULESTRATEGY );
a362 1
  assert( cs2.isA() == __LGFRMRPCONSVOLSCHEDULESTRATEGY );
a366 1
  assert( cs3.isA() == cs2.isA() );
a369 1
  assert( cs4Ptr->isA() == cs1.isA() );
d385 1
a385 1
  for ( i=0; i<sop.entries(); i++ ) {
d394 2
a395 2
  cout <<endl <<"LgFrMrpConsVolScheduleStrategy" <<endl
       <<schedule->format() <<endl;
d397 1
a397 1
  for ( i=0; i<sop.entries(); i++ ) {
a426 4
  assert( cs1.id_ == __LGFRFULLYEXPLODEDMRPCONSVOLSCHEDULESTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRFULLYEXPLODEDMRPCONSVOLSCHEDULESTRATEGY );
a429 1
  assert( cs2.isA() == __LGFRFULLYEXPLODEDMRPCONSVOLSCHEDULESTRATEGY );
a433 1
  assert( cs3.isA() == cs2.isA() );
a436 1
  assert( cs4Ptr->isA() == cs1.isA() );
d458 2
a459 2
  cout <<endl <<"LgFrFullyExplodedMrpConsVolScheduleStrategy" <<endl
       <<schedule->format() <<endl;
d461 1
a461 1
  for ( i=0; i<sop.entries(); i++ ) {
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
d35 1
a35 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {
d75 8
d88 1
d140 2
a141 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   explodePtr_( 0 ),
d186 1
a186 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<nParts; i++ ) {
d196 1
a196 1
     0,
d200 2
a201 2
     false,               // includeOrderCancelRecommendationInPlanOrder
     false                // resetDemandVolsWhenDone
d214 1
a214 1
    if ( partPtr == 0 ) continue;
d259 9
d273 1
d325 2
a326 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   explodePtr_( 0 ),
d374 4
d381 1
d386 1
d390 1
d406 1
a406 1
  for ( i=0; i<sop.size(); i++ ) {
d418 1
a418 1
  for ( i=0; i<sop.size(); i++ ) {
d448 4
d455 1
d460 1
d464 1
d489 1
a489 1
  for ( i=0; i<sop.size(); i++ ) {
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d394 2
a395 2
  std::cout << std::endl <<"LgFrMrpConsVolScheduleStrategy" << std::endl
       <<schedule->format() << std::endl;
d458 2
a459 2
  std::cout << std::endl <<"LgFrFullyExplodedMrpConsVolScheduleStrategy" << std::endl
       <<schedule->format() << std::endl;
@


