head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.47;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.52;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.52;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.37;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.39;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
#include <assert.h>
#include <scenario/src/sortSchP.h>
#include <scenario/src/sortSchd.h>

// Default Constructor
LgFrSortingScheduleFloatSmartPointerToConst::LgFrSortingScheduleFloatSmartPointerToConst() : pointer_(new LgFrSortingScheduleFloat), count_(1)
{
};

// Preferred Constructor
LgFrSortingScheduleFloatSmartPointerToConst::LgFrSortingScheduleFloatSmartPointerToConst(LgFrSortingScheduleFloat* newedPointer) 
: pointer_(newedPointer), count_(1)
{
}

// Constructor for cast operator
LgFrSortingScheduleFloatSmartPointerToConst::LgFrSortingScheduleFloatSmartPointerToConst(
    LgFrSortingScheduleFloat* existingPointer,
    LgFrReferenceCount& count) : pointer_(existingPointer)
{
    count_ = count;
}

// Destructor
LgFrSortingScheduleFloatSmartPointerToConst::~LgFrSortingScheduleFloatSmartPointerToConst()
{
    if (pointer_ != 0)  {
	if (count_.reference() == 1)  {
	    delete pointer_;
	}
    }
}

// Copy Constructor
LgFrSortingScheduleFloatSmartPointerToConst::LgFrSortingScheduleFloatSmartPointerToConst(const LgFrSortingScheduleFloatSmartPointerToConst& rhs) 
: pointer_(rhs.pointer_)
{
    count_ = ((LgFrSortingScheduleFloatSmartPointerToConst&)rhs).count_;
}

// Deep Copy
LgFrSortingScheduleFloatSmartPointerToConst
LgFrSortingScheduleFloatSmartPointerToConst::deepCopy() const
{
    // do SortingScheduleFloat deep copy and create a new smart pointer
    return LgFrSortingScheduleFloatSmartPointerToConst(pointer_->clone());
}

// Assignment Operator
LgFrSortingScheduleFloatSmartPointerToConst& 
LgFrSortingScheduleFloatSmartPointerToConst::operator=(const LgFrSortingScheduleFloatSmartPointerToConst& rhs)
{
    // check to see if this smart pointer is the only one pointing to
    //  the actual object.  If it is, then we want to delete the
    //  pointer
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
    count_ = ((LgFrSortingScheduleFloatSmartPointerToConst&)rhs).count_;
    pointer_ = rhs.pointer_;
    return *this;
}

bool
LgFrSortingScheduleFloatSmartPointerToConst::operator==(const LgFrSortingScheduleFloatSmartPointerToConst& rhs) const
{
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
    else
	return false;
}

bool
LgFrSortingScheduleFloatSmartPointerToConst::operator!=(const LgFrSortingScheduleFloatSmartPointerToConst& rhs) const
{
    return !( *this == rhs );
}

const LgFrSortingScheduleFloat* const
LgFrSortingScheduleFloatSmartPointerToConst::operator->() const
{
    // implicit cast to const
    return pointer_;
}

const LgFrSortingScheduleFloat&
LgFrSortingScheduleFloatSmartPointerToConst::operator*() const
{
    // implicit cast to const
    return *pointer_;
}

/*
LgFrSortingScheduleFloatSmartPointerToConst::operator const LgFrSortingScheduleFloat* const () const
{
    return &(*pointer_);
}
*/

bool
LgFrSortingScheduleFloatSmartPointerToConst::unique() const
{
    return (count_.reference() == 1);
}

bool 
LgFrSortingScheduleFloatSmartPointerToConst::null() const
{
    return (pointer_ == 0);
}

void
LgFrSortingScheduleFloatSmartPointerToConst::test()
{
    std::cout << "Testing default constructor" << std::endl;
    LgFrSortingScheduleFloatSmartPointerToConst dummy;
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;

    std::cout << "Testing preferred constructor (dummy)" << std::endl;
    LgFrSortingScheduleFloatSmartPointerToConst b(new LgFrSortingScheduleFloat);
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing assignement operator dummy = b" << std::endl;
    dummy = b;
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing copy constructor (c = b)" << std::endl;
    LgFrSortingScheduleFloatSmartPointerToConst c(b);
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing backdoor constructor" << std::endl;
    LgFrSortingScheduleFloatSmartPointerToConst e(b.pointer_, b.count_);
    std::cout << "e count is " << e.count_.reference() << std::endl;    

    std::cout << "Testing equality operator (c == b)" << std::endl;
    assert(c == b);

    std::cout << "Testing inequality operator (c != d)" << std::endl;
    LgFrSortingScheduleFloatSmartPointerToConst d(new LgFrSortingScheduleFloat);
    assert(c != d);

    std::cout << "Test destructor" << std::endl;
    c = d;
    std::cout << "b count is " << b.count_.reference() << std::endl;    
    c = b;
    d = b;

    // this should be a compiler error
//    LgFrSortingScheduleFloatSmartPointerToConst e(&(*d));
}



LgFrSortingScheduleFloatSmartPointer::LgFrSortingScheduleFloatSmartPointer() 
{
    // calls base class default constructor
}

LgFrSortingScheduleFloatSmartPointer::LgFrSortingScheduleFloatSmartPointer(LgFrSortingScheduleFloat* newedPointer) 
: LgFrSortingScheduleFloatSmartPointerToConst(newedPointer)
{
}

LgFrSortingScheduleFloatSmartPointer::LgFrSortingScheduleFloatSmartPointer(
    LgFrSortingScheduleFloat* existingPointer,
    LgFrReferenceCount& count) 
: LgFrSortingScheduleFloatSmartPointerToConst(existingPointer, count)
{
}


LgFrSortingScheduleFloatSmartPointer::~LgFrSortingScheduleFloatSmartPointer()
{
    // call base class destructor
}

LgFrSortingScheduleFloatSmartPointer::LgFrSortingScheduleFloatSmartPointer(const LgFrSortingScheduleFloatSmartPointer& rhs) 
: LgFrSortingScheduleFloatSmartPointerToConst(rhs.pointer_)
{
    count_ = ((LgFrSortingScheduleFloatSmartPointer&)rhs).count_;
}

// need to do some casting to a derived class so that we can access protected
//  members
LgFrSortingScheduleFloatSmartPointer::LgFrSortingScheduleFloatSmartPointer(LgFrSortingScheduleFloatSmartPointerToConst rhs) 
    : LgFrSortingScheduleFloatSmartPointerToConst(((LgFrSortingScheduleFloatSmartPointer&)rhs).pointer_)
{
    count_ = ((LgFrSortingScheduleFloatSmartPointer&)rhs).count_;
}

LgFrSortingScheduleFloatSmartPointer
LgFrSortingScheduleFloatSmartPointer::deepCopy() const
{
    // do SortingScheduleFloat deep copy and create a new smart pointer
    return LgFrSortingScheduleFloatSmartPointer(pointer_->clone());
}

LgFrSortingScheduleFloatSmartPointer& 
LgFrSortingScheduleFloatSmartPointer::operator=(const LgFrSortingScheduleFloatSmartPointer& rhs)
{
    // check to see if this smart pointer is the only one pointing to
    //  the actual object.  If it is, then we want to delete the
    //  pointer
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
    count_ = ((LgFrSortingScheduleFloatSmartPointer&)rhs).count_;
    pointer_ = rhs.pointer_;
    return *this;
}

// need to do some casting to a derived class so that we can access protected
//  members
/*
LgFrSortingScheduleFloatSmartPointer& 
LgFrSortingScheduleFloatSmartPointer::operator=(LgFrSortingScheduleFloatSmartPointerToConst rhs)
{
    // check to see if this smart pointer is the only one pointing to
    //  the actual object.  If it is, then we want to delete the
    //  pointer
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
    count_ = ((LgFrSortingScheduleFloatSmartPointer&)rhs).count_;
    pointer_ = ((LgFrSortingScheduleFloatSmartPointer&)rhs).pointer_;
    return *this;
}
*/

bool
LgFrSortingScheduleFloatSmartPointer::operator==(const LgFrSortingScheduleFloatSmartPointer& rhs) const
{
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
    else
	return false;
}
/*
bool
LgFrSortingScheduleFloatSmartPointer::operator==(LgFrSortingScheduleFloatSmartPointerToConst rhs) const
{
    if ( (pointer_ == rhs.pointer_) && (count_ == rhs.count_) )
	return true;
    else
	return false;
}
*/
bool
LgFrSortingScheduleFloatSmartPointer::operator!=(const LgFrSortingScheduleFloatSmartPointer& rhs) const
{
    return !( *this == rhs );
}
/*
bool
LgFrSortingScheduleFloatSmartPointer::operator!=(LgFrSortingScheduleFloatSmartPointerToConst rhs) const
{
    if ( (pointer_ != rhs.pointer_) || (count_ != rhs.count_) )
	return true;
    else
	return false;
}
*/
const LgFrSortingScheduleFloat* const
LgFrSortingScheduleFloatSmartPointer::operator->() const
{
    return pointer_;
}

LgFrSortingScheduleFloat* const
LgFrSortingScheduleFloatSmartPointer::operator->()
{
    return pointer_;
}

LgFrSortingScheduleFloat &
LgFrSortingScheduleFloatSmartPointer::operator*()
{
    return *pointer_;
}

const LgFrSortingScheduleFloat &
LgFrSortingScheduleFloatSmartPointer::operator*() const
{
    return *pointer_;
}

/*
LgFrSortingScheduleFloatSmartPointer::operator const LgFrSortingScheduleFloat* const () const
{
    return &(*pointer_);
}

LgFrSortingScheduleFloatSmartPointer::operator LgFrSortingScheduleFloat* ()
{
    return &(*pointer_);
}
*/

bool
LgFrSortingScheduleFloatSmartPointer::unique() const
{
    return (count_.reference() == 1);
}

bool 
LgFrSortingScheduleFloatSmartPointer::null() const
{
    return (pointer_ == 0);
}


void
LgFrSortingScheduleFloatSmartPointer::test()
{
    std::cout << "Testing default constructor" << std::endl;
    LgFrSortingScheduleFloatSmartPointer dummy;
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;

    std::cout << "Testing preferred constructor (dummy)" << std::endl;
    LgFrSortingScheduleFloatSmartPointer b(new LgFrSortingScheduleFloat);
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing assignement operator dummy = b" << std::endl;
    dummy = b;
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing copy constructor (c = b)" << std::endl;
    LgFrSortingScheduleFloatSmartPointer c(b);
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing backdoor constructor" << std::endl;
    LgFrSortingScheduleFloatSmartPointer e(b.pointer_, b.count_);
    std::cout << "e count is " << e.count_.reference() << std::endl;    

    std::cout << "Testing equality operator (c == b)" << std::endl;
    assert(c == b);

    std::cout << "Testing inequality operator (c != d)" << std::endl;
    LgFrSortingScheduleFloatSmartPointer d(new LgFrSortingScheduleFloat);
    assert(c != d);

    std::cout << "Test destructor" << std::endl;
    c = d;
    std::cout << "b count is " << b.count_.reference() << std::endl;    
    c = b;
    d = b;
}

@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
#include <iostream.h>
d31 1
a31 1
    if (pointer_ != NULL)  {
d60 1
a60 1
    if (pointer_ != NULL)  {
d69 1
a69 1
RWBoolean
d72 2
a73 2
    if ( (pointer_ == rhs.pointer_) && (count_ == rhs.count_) )
	return TRUE;
d75 1
a75 1
	return FALSE;
d78 1
a78 1
RWBoolean
d81 1
a81 4
    if ( (pointer_ != rhs.pointer_) || (count_ != rhs.count_) )
	return TRUE;
    else
	return FALSE;
d105 1
a105 1
RWBoolean
d111 1
a111 1
RWBoolean 
d114 1
a114 1
    return (pointer_ == NULL);
d120 1
a120 1
    cout << "Testing default constructor" << endl;
d122 1
a122 1
    cout << "dummy count is " << dummy.count_.reference() << endl;
d124 1
a124 1
    cout << "Testing preferred constructor (dummy)" << endl;
d126 1
a126 1
    cout << "b count is " << b.count_.reference() << endl;    
d128 1
a128 1
    cout << "Testing assignement operator dummy = b" << endl;
d130 1
a130 1
    cout << "b count is " << b.count_.reference() << endl;    
d132 1
a132 1
    cout << "Testing copy constructor (c = b)" << endl;
d134 1
a134 1
    cout << "b count is " << b.count_.reference() << endl;    
d136 1
a136 1
    cout << "Testing backdoor constructor" << endl;
d138 1
a138 1
    cout << "e count is " << e.count_.reference() << endl;    
d140 1
a140 1
    cout << "Testing equality operator (c == b)" << endl;
d143 1
a143 1
    cout << "Testing inequality operator (c != d)" << endl;
d147 1
a147 1
    cout << "Test destructor" << endl;
d149 1
a149 1
    cout << "b count is " << b.count_.reference() << endl;    
d209 1
a209 1
    if (pointer_ != NULL)  {
d227 1
a227 1
    if (pointer_ != NULL)  {
d237 1
a237 1
RWBoolean
d240 2
a241 2
    if ( (pointer_ == rhs.pointer_) && (count_ == rhs.count_) )
	return TRUE;
d243 1
a243 1
	return FALSE;
d246 1
a246 1
RWBoolean
d250 1
a250 1
	return TRUE;
d252 1
a252 1
	return FALSE;
d255 1
a255 1
RWBoolean
d258 1
a258 4
    if ( (pointer_ != rhs.pointer_) || (count_ != rhs.count_) )
	return TRUE;
    else
	return FALSE;
d261 1
a261 1
RWBoolean
d265 1
a265 1
	return TRUE;
d267 1
a267 1
	return FALSE;
d306 1
a306 1
RWBoolean
d312 1
a312 1
RWBoolean 
d315 1
a315 1
    return (pointer_ == NULL);
d322 1
a322 1
    cout << "Testing default constructor" << endl;
d324 1
a324 1
    cout << "dummy count is " << dummy.count_.reference() << endl;
d326 1
a326 1
    cout << "Testing preferred constructor (dummy)" << endl;
d328 1
a328 1
    cout << "b count is " << b.count_.reference() << endl;    
d330 1
a330 1
    cout << "Testing assignement operator dummy = b" << endl;
d332 1
a332 1
    cout << "b count is " << b.count_.reference() << endl;    
d334 1
a334 1
    cout << "Testing copy constructor (c = b)" << endl;
d336 1
a336 1
    cout << "b count is " << b.count_.reference() << endl;    
d338 1
a338 1
    cout << "Testing backdoor constructor" << endl;
d340 1
a340 1
    cout << "e count is " << e.count_.reference() << endl;    
d342 1
a342 1
    cout << "Testing equality operator (c == b)" << endl;
d345 1
a345 1
    cout << "Testing inequality operator (c != d)" << endl;
d349 1
a349 1
    cout << "Test destructor" << endl;
d351 1
a351 1
    cout << "b count is " << b.count_.reference() << endl;    
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
d28 1
a28 1
    if (pointer_ != 0)  {
d57 1
a57 1
    if (pointer_ != 0)  {
d66 1
a66 1
bool
d69 2
a70 2
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
d72 1
a72 1
	return false;
d75 1
a75 1
bool
d78 4
a81 1
    return !( *this == rhs );
d105 1
a105 1
bool
d111 1
a111 1
bool 
d114 1
a114 1
    return (pointer_ == 0);
d209 1
a209 1
    if (pointer_ != 0)  {
d227 1
a227 1
    if (pointer_ != 0)  {
d237 1
a237 1
bool
d240 2
a241 2
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
d243 1
a243 1
	return false;
d246 1
a246 1
bool
d250 1
a250 1
	return true;
d252 1
a252 1
	return false;
d255 1
a255 1
bool
d258 4
a261 1
    return !( *this == rhs );
d264 1
a264 1
bool
d268 1
a268 1
	return true;
d270 1
a270 1
	return false;
d309 1
a309 1
bool
d315 1
a315 1
bool 
d318 1
a318 1
    return (pointer_ == 0);
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d120 1
a120 1
    std::cout << "Testing default constructor" << std::endl;
d122 1
a122 1
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;
d124 1
a124 1
    std::cout << "Testing preferred constructor (dummy)" << std::endl;
d126 1
a126 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d128 1
a128 1
    std::cout << "Testing assignement operator dummy = b" << std::endl;
d130 1
a130 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d132 1
a132 1
    std::cout << "Testing copy constructor (c = b)" << std::endl;
d134 1
a134 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d136 1
a136 1
    std::cout << "Testing backdoor constructor" << std::endl;
d138 1
a138 1
    std::cout << "e count is " << e.count_.reference() << std::endl;    
d140 1
a140 1
    std::cout << "Testing equality operator (c == b)" << std::endl;
d143 1
a143 1
    std::cout << "Testing inequality operator (c != d)" << std::endl;
d147 1
a147 1
    std::cout << "Test destructor" << std::endl;
d149 1
a149 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d322 1
a322 1
    std::cout << "Testing default constructor" << std::endl;
d324 1
a324 1
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;
d326 1
a326 1
    std::cout << "Testing preferred constructor (dummy)" << std::endl;
d328 1
a328 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d330 1
a330 1
    std::cout << "Testing assignement operator dummy = b" << std::endl;
d332 1
a332 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d334 1
a334 1
    std::cout << "Testing copy constructor (c = b)" << std::endl;
d336 1
a336 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d338 1
a338 1
    std::cout << "Testing backdoor constructor" << std::endl;
d340 1
a340 1
    std::cout << "e count is " << e.count_.reference() << std::endl;    
d342 1
a342 1
    std::cout << "Testing equality operator (c == b)" << std::endl;
d345 1
a345 1
    std::cout << "Testing inequality operator (c != d)" << std::endl;
d349 1
a349 1
    std::cout << "Test destructor" << std::endl;
d351 1
a351 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
@


