head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.31;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.39;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.39;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.27;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFRDATAINTERFACE_H
#define LGFRDATAINTERFACE_H
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.

#include <scenario/src/attrInfo.h>
#include <scenario/src/generVc.h>
#include <scenario/src/scenario.h>
#include <scenario/src/difAbstr.h>


// LgFrDataInterface owns LgFrDataInterfaceImplementation
// and will free it when LgFrDataInterface is destroyed.

// At this time, LgFrDataInterface will only return void* and
// the client of this class should own the attribute data
// and free them when done.  Once we have implemented the smart
// pointer class, we can relieve this extra burden from the client.

class LgFrDataInterfaceImplementation;

class LgFrDataInterface : public LgFrDataInterfaceAbstract
{
public:

  virtual int GetDIType() const { return __LGFRDATAINTERFACE; }

  //-------------------------------------------------------------------
  //  
  //   Methods to obtain attribute information.
  //
  //-------------------------------------------------------------------

  virtual
  void* partAttribute(LgFrPartVector &,
                      const std::string &,
                      const std::string &,
                      const LgFrDataInterfaceEssentials* difEssenPtr = 0
		      ) const;
  
  virtual
  void* demandAttribute(LgFrDemandVector &,
                        const std::string &,
			const LgFrDataInterfaceEssentials* difEssenPtr = 0
			) const;
   
  virtual
  void* getAttributeValue(const std::string& attributeName,
                          const LgFrItemSubType& itemSubType,
                          const LgFrItemType& itemType,
                          const LgFrItemPtrVector& pv,
			  const LgFrDataInterfaceEssentials* difEssenPtr = 0
			  ) const;
  
  virtual
    LgFrAttributeValueType
      attributeValueType(const std::string& attributeName,
                         const LgFrItemSubType& itemSubType,
                         const LgFrItemType& itemType) const;

  virtual
    bool
      isAttributeFunctionImplemented(const std::string& attributeName,
                                     const LgFrItemSubType& itemSubType,
                                     const LgFrItemType& itemType) const;

  //-------------------------------------------------------------------
  //  
  //   Methods to obtain global attributes
  //
  //-------------------------------------------------------------------

  // Set problem title
  virtual
    void
      title(std::string t);

  // Return problem title
  virtual
    std::string 
      title(const LgFrDataInterfaceEssentials * = 0) const;

  //--------------------------------------------------------------------
  //
  //   Methods to manage resources
  //
  //-------------------------------------------------------------------

  // Free up extra resources
  virtual
    void
      deleteExtraResources();


  //--------------------------------------------------------------------
  //  
  //   Standard class methods
  //
  //-------------------------------------------------------------------

  // Overloaded operator ->
  // This is used to invoke methods in difImpPtr_ stored in this class
  // to avoid duplicating all signatures in difImpPtr_.
  LgFrDataInterfaceImplementation* operator->() const;

  // Return the LgFrDataInterfaceImplementation pointer
  LgFrDataInterfaceImplementation*
    dataInterfaceImplementation() const;
    
  // Make a clone copy of this object
  virtual
    LgFrDataInterfaceAbstract *
        clone()
           const;

  // Copy constructor
  LgFrDataInterface(const LgFrDataInterface&);

  // Constructor
  LgFrDataInterface(std::string title,
		    LgFrDataInterfaceImplementation* difImpPtr);

  // Constructor
  LgFrDataInterface(LgFrDataInterfaceImplementation* difImpPtr);

  // Destructor
  virtual
    ~LgFrDataInterface();

private:
    // Default constructor
  LgFrDataInterface();

  // Assigment
  LgFrDataInterface& operator=(const LgFrDataInterface&);

private:
  LgFrDataInterfaceImplementation* difImpPtr_;
    
};
#endif
@


1.1
log
@Initial revision
@
text
@d3 3
d27 2
d36 4
a39 4
  void* partAttribute(LgFrOrderedVectorPart &,
                      const RWCString &,
                      const RWCString &,
                      const LgFrDataInterfaceEssentials* difEssenPtr = NULL
d43 3
a45 3
  void* demandAttribute(LgFrOrderedVectorDemand &,
                        const RWCString &,
			const LgFrDataInterfaceEssentials* difEssenPtr = NULL
d49 1
a49 1
  void* getAttributeValue(const RWCString& attributeName,
d52 2
a53 2
                          const LgFrOrderedVectorItemPtr& pv,
			  const LgFrDataInterfaceEssentials* difEssenPtr = NULL
d58 1
a58 1
      attributeValueType(const RWCString& attributeName,
d63 2
a64 2
    RWBoolean
      isAttributeFunctionImplemented(const RWCString& attributeName,
d77 1
a77 1
      title(RWCString t);
d81 2
a82 2
    RWCString 
      title(const LgFrDataInterfaceEssentials * = NULL) const;
a97 10
  //   Dynamic type query methods
  //
  //-------------------------------------------------------------------
  virtual
    isAReturnType
      isA()
        const;

  //--------------------------------------------------------------------
  //  
d121 1
a121 1
  LgFrDataInterface(RWCString title,
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 3
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
a23 2
  virtual int GetDIType() const { return __LGFRDATAINTERFACE; }

d31 4
a34 4
  void* partAttribute(LgFrPartVector &,
                      const std::string &,
                      const std::string &,
                      const LgFrDataInterfaceEssentials* difEssenPtr = 0
d38 3
a40 3
  void* demandAttribute(LgFrDemandVector &,
                        const std::string &,
			const LgFrDataInterfaceEssentials* difEssenPtr = 0
d44 1
a44 1
  void* getAttributeValue(const std::string& attributeName,
d47 2
a48 2
                          const LgFrItemPtrVector& pv,
			  const LgFrDataInterfaceEssentials* difEssenPtr = 0
d53 1
a53 1
      attributeValueType(const std::string& attributeName,
d58 2
a59 2
    bool
      isAttributeFunctionImplemented(const std::string& attributeName,
d72 1
a72 1
      title(std::string t);
d76 2
a77 2
    std::string 
      title(const LgFrDataInterfaceEssentials * = 0) const;
d93 10
d126 1
a126 1
  LgFrDataInterface(std::string title,
@

