head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef LGFR_DEMAND_BACKLOG_TIMES_GROSS_REV_PAIR_COMPARE_H
#define LGFR_DEMAND_BACKLOG_TIMES_GROSS_REV_PAIR_COMPARE_H

#include <scenario/src/attrSnPC.h>

// Comparison Strategy for sorting DemandSchedule's on 
// demand backlog volumes times gross revenue.
//
// This strategy sorts the ItemTimeVec's using the demand's backlog
// volume timeVec times the demand's gross revenue as
// the major sort key.  ItemTimeVec::compareTo is used as the minor
// sort key.


// ModelClients dependent on instances of this Model object will
// be notified when the backlog might have changed due to a new
// implosion solution.

// Forward References
class LgFrImplode;

class LgFrDemandBacklogTimesGrossRevenuePairCompare : 
  public LgFrAttributeSensitivePairCompareFloat {

public:

  // Compare two ItemTimeVecPairFloat's
  // return 0 if equal
  //        <0 if first less than second
  //        >0 if first greater than second
  virtual
    int
      itemTimeVecPairCompareFloat(
         const LgFrItemTimeVecPairFloat &,
         const LgFrItemTimeVecPairFloat &)
            const;

  // Make clone copy of this object
  virtual
     LgFrPairCompareFloat *
        clone() 
           const;

  // Make clone copy of this object with a new Scenario
  virtual
     LgFrPairCompareFloat *
        clone(LgFrScenario &) 
           const;

  // Return Comparison Strategy Identifier
  virtual
     isAReturnType
        isA()
           const;

  // Assignment operator
  LgFrDemandBacklogTimesGrossRevenuePairCompare &
    operator=(
	      const LgFrDemandBacklogTimesGrossRevenuePairCompare& rhs);

  // Copy constructor
  LgFrDemandBacklogTimesGrossRevenuePairCompare (
     const LgFrDemandBacklogTimesGrossRevenuePairCompare &);

  // Copy constructor with a new Scenario
  LgFrDemandBacklogTimesGrossRevenuePairCompare (
     const LgFrDemandBacklogTimesGrossRevenuePairCompare &,
     LgFrScenario &);

  // Constructor
  LgFrDemandBacklogTimesGrossRevenuePairCompare (
     LgFrScenario & );

  // Destructor
  ~LgFrDemandBacklogTimesGrossRevenuePairCompare ();

  // test this class
  static void test();

  static
  void
  contextTest
    (
     LgFrScenario 	         & testScenario,
     LgFrWorkingImplosionProblem & wip,			// testScenario's 
     LgFrLastProblemSolved       & lps,			// testScenario's 
     LgFrSetOfDemands            & sod);		// testScenario's 

private:

   const LgFrImplode * implodePtr_;
   const int id_;

   // Default Constructor
   LgFrDemandBacklogTimesGrossRevenuePairCompare ();

};

#endif
@


1.1.1.1
log
@Import scenario
@
text
@@
