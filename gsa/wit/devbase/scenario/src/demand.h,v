head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.29;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.26;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFRDEMAND_H
#define LGFRDEMAND_H
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
// File: LgFrDemand.h
// Author: jmt
// Created: 3 December 1993 9:09:27 pm
// System: WITUSE


#include <assert.h>


#include <scenario/src/item.h>
#include <scenario/src/idnumber.h>
#include <scenario/src/part.h>

// This class contains demand name and pointer to the part
// of this particular demand. 
class LGFR_DECLSPEC LgFrDemand : public LgFrItem  {

public:

        // isEqual method, returns true if they have the same name and
        // their parts' isEqual returns true  
        virtual bool isEqual(const LgFrItem*) const;

        // compareTo method, uses demand name to to the comparison.
	// should return 0  if *this "is equal to" *source
	//               >0 if *this "is larger" than *source
	//               <0 if *this "is smaller" than *source
        virtual int compareTo(const LgFrItem*) const;

	// Default constructor
	LgFrDemand();

	// Copy constructor
	LgFrDemand (const LgFrDemand&);

	// Constructor
	LgFrDemand(const std::string&, const LgFrPart* p);

	// Destructor
        virtual
	   ~LgFrDemand();

    virtual LgFrItem* Clone() const { return new LgFrDemand( *this ); }

    virtual bool isADemand() const { return true; }

	// Assignment 
        LgFrDemand& 
	operator=(const LgFrDemand&);

	// Assignment 
        LgFrItem&
	operator=(const LgFrItem&);

        // Get the string used to separate names in the unique string
        static const std::string uniqueSeparator();

        // Get a printing name for the demand and part
        // This function returns a printing name for the demand.
        // If the trunc parameter is set to true then part name will be
        // truncated/padded to pnchars and the demand name will be 
        // truncated/padded to dnchars.  Otherwise the full demand/part 
        // name will be used.
        // Defaults: trunc = true, 
        //           part name is truncated/padded to be 18 chars
        //           demand name is truncated/padded to be 12 chars
        std::string 
	  printingName(bool trunc = true) const;

        // Get a unique name for the demand
        std::string uniqueName() const;

        // Get the demand name
        std::string name() const;
        
        // Get the demand name for gui use
        std::string guiName() const;

        // Get the characters used to separate
        static std::string guiSeparator();

        // Get the part pointer
        const LgFrPart * partPtr() const;

	// Equality
	virtual
        int
	operator==(const LgFrItem&)
	const;

        // Print demand data
        virtual void print() const;

        // Display part data for xcdb()
        void xcdb() const;
        void xcdb();

        // test this class
        static void test();

private:
        std::string         name_;          // demand name
        const LgFrPart*   partPtr_;       // part pointer
};

inline
const
std::string
LgFrDemand::uniqueSeparator() 
{   return std::string("\n");   };

#endif
@


1.1
log
@Initial revision
@
text
@d1 5
a10 2
#ifndef LGFRDEMAND_H
#define LGFRDEMAND_H
a13 2
#include <rw/cstring.h>
#include <rw/collect.h>
a22 4
  // isA(), newSpecies(), copy(), and some other things are declared
  // by this macro
  RWDECLARE_COLLECTABLE(LgFrDemand)

d25 3
a27 6
        // hash method
        virtual unsigned hash() const;

        // isEqual method, returns TRUE if they have the same name and
        // their parts' isEqual returns TRUE  
        virtual RWBoolean isEqual(const RWCollectable*) const;
d33 1
a33 1
        virtual int compareTo(const RWCollectable*) const;
d42 1
a42 1
	LgFrDemand(const RWCString, const LgFrPart* p);
d48 4
d61 1
a61 1
        static const RWCString uniqueSeparator();
d65 1
a65 1
        // If the trunc parameter is set to TRUE then part name will be
d72 2
a73 2
        RWCString 
	  printingName(RWBoolean trunc = TRUE) const;
d76 1
a76 1
        RWCString uniqueName() const;
d79 1
a79 1
        RWCString name() const;
d82 1
a82 1
        RWCString guiName() const;
d85 1
a85 1
        static RWCString guiSeparator();
d107 1
a107 1
        RWCString         name_;          // demand name
d113 1
a113 1
RWCString
d115 1
a115 1
{   return RWCString("\n");   };
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 5
#ifndef LGFRDEMAND_H
#define LGFRDEMAND_H
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
d6 2
d11 2
d22 4
d28 6
a33 3
        // isEqual method, returns true if they have the same name and
        // their parts' isEqual returns true  
        virtual bool isEqual(const LgFrItem*) const;
d39 1
a39 1
        virtual int compareTo(const LgFrItem*) const;
d48 1
a48 1
	LgFrDemand(const std::string&, const LgFrPart* p);
a53 4
    virtual LgFrItem* Clone() const { return new LgFrDemand( *this ); }

    virtual bool isADemand() const { return true; }

d63 1
a63 1
        static const std::string uniqueSeparator();
d67 1
a67 1
        // If the trunc parameter is set to true then part name will be
d74 2
a75 2
        std::string 
	  printingName(bool trunc = true) const;
d78 1
a78 1
        std::string uniqueName() const;
d81 1
a81 1
        std::string name() const;
d84 1
a84 1
        std::string guiName() const;
d87 1
a87 1
        static std::string guiSeparator();
d109 1
a109 1
        std::string         name_;          // demand name
d115 1
a115 1
std::string
d117 1
a117 1
{   return std::string("\n");   };
@

