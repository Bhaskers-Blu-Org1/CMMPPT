head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.41;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.32;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.41;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
// File: LgFrPart.C
// Author: jmt
// Created: 3 December 1993 9:08:46 pm
// System: WITUSE
#include <iostream>

#include <scenario/src/part.h>
#include <scenario/src/machdep.h>

using std::cout;
using std::cerr;

//----------------------------------------------------------------------
//
//   Part
//
//----------------------------------------------------------------------

// Print out the part data
void 
LgFrPart::print() const
{
  cout << "\n part name  = " << name_;
  cout << "\n printing part name: " << printingName();
}

// Display for xcdb
void 
LgFrPart::xcdb() const
{
  cerr << "\n part name  = " << name_;
  cerr << "\n printing part name: " << printingName();
}


// Display for xcdb
void 
LgFrPart::xcdb()
{
  (  (const LgFrPart*) this  )     -> xcdb();
}


bool
LgFrPart::isEqual(
		   const LgFrItem* t
		 ) const
{
  assert (t->isAPart());
  return name_ == ((const LgFrPart*)t)->name_;
}

// compareTo method, uses part name to do the comparison.
// should return 0  if this->name_ "is equal to" source->name_.
//               >0 if this->name_ "is larger" than source->name_.
//               <0 if this->name_ "is smaller" than source->name_.
// C lib. function memcmp() is used to do the comparison.

int 
LgFrPart::compareTo(
		    const LgFrItem* source
		    ) const
{
  const LgFrPart* part = static_cast<const LgFrPart*>( source );
  return name_.compare( part->name_ );
}

// Default constructor
// Initialize part name to null string
LgFrPart::LgFrPart()
: name_()
{
  // All the work is done in the initialization part
}

// Constructor
// Create part with a string
LgFrPart::LgFrPart(const std::string& n)
: name_ (n)
{
  // All the work is done in the initialization part
}

// Copy constructor
LgFrPart::LgFrPart(const LgFrPart& source)
: name_ (source.name())
{
  // All the work is done in the initialization part
}

// Assignment
LgFrPart&
LgFrPart::operator=(const LgFrPart& rhs)
{
  // Don't have to call operator= for base class
  name_ = rhs.name();
  return (*this);
}

// Another Assignment
LgFrItem&
LgFrPart::operator=(const LgFrItem& rhs)
{
  assert( rhs.isAPart() );
  (this->LgFrPart::operator=) ( (const LgFrPart&)rhs );
  return (*this);
}


// Destructor
LgFrPart::~LgFrPart()
{
  // Nothing to do but reutrn.
}

// This function returns a printing name for the part.
std::string
LgFrPart::printingName(
		       bool trunc
		       ) const
{
  int pnchars = 18;
  std::string printingPartName = name_;
  if ( trunc ) printingPartName.resize(pnchars);
  else printingPartName.resize(size_tMax(printingPartName.length(),pnchars));
  return (printingPartName);
}

// This function is only to query the part name, not used to set it.
std::string
LgFrPart::uniqueName() const
{
  return (name_);
}

// This function is only to query the part name, not used to set it.
std::string
LgFrPart::name() const
{
  return (name_);
}

// This function is only to query the part name, not used to set it.
// For gui use
std::string
LgFrPart::guiName() const
{
  return (name_);
}


// Equality test
int
LgFrPart::operator== (const LgFrItem& rhs)
const
{
  return ( compareTo( &rhs ) == 0 );
}


#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrPart
void
LgFrPart::test()
{
  // Test constructors
  LgFrPart pDef; 
  LgFrPart pInit1 ("pInit1");
  LgFrPart pInit2 ("pInit2");

  assert( pDef.isAPart() && !pDef.isADemand() );
  // Test assignment
  pDef = pInit1;
  assert (pDef.name() == pInit1.name());
  
  // Test comparison
  assert (pDef   == pInit1);
  assert (! (pInit1 == pInit2));
  assert (! (pDef   == pInit2));

  // Test hashing, isEqual, compareTo
  assert (pDef.isEqual(&pInit1));
  assert (pDef.compareTo(&pInit1) == 0);
  assert (pInit1.compareTo(&pInit2) < 0);
/*
  // Test printingName method
  LgFrPart p1 ("IBMPS2mod95",3); 
  LgFrPart p2 ("IBMPS2mod90serial45conf78", 4);
  p1.print();
  p2.print();
*/
}
@


1.1
log
@Initial revision
@
text
@d1 4
d9 1
a9 3


#include <rw/rstream.h>
d14 3
a22 4
// isA(), newSpecies(), copy(), and some other things are defined
// by this macro
RWDEFINE_COLLECTABLE(LgFrPart, __LGFRPART)

d48 1
a48 8
unsigned
LgFrPart::hash() const
{
  return name_.hash();  
}


RWBoolean
d50 1
a50 1
		   const RWCollectable* t
d53 1
a53 1
  assert (t->isA()==__LGFRPART);
d65 1
a65 1
		    const RWCollectable* source
d68 2
a69 2
  assert (source->isA()==__LGFRPART);
  return name_.compareTo(((const LgFrPart*)source)->name_);
d82 1
a82 1
LgFrPart::LgFrPart(const RWCString n)
d108 1
a108 1
  assert( rhs.isA() == __LGFRPART );
d121 1
a121 1
RWCString
d123 1
a123 1
		       RWBoolean trunc
d127 1
a127 1
  RWCString printingPartName = name_;
d134 1
a134 1
RWCString
d141 1
a141 1
RWCString
d149 1
a149 1
RWCString
d177 1
a187 1
  assert (pInit1.hash() == pDef.hash());
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
d5 3
a7 1
#include <ostream.h>
d18 4
d47 8
a54 1
bool
d56 1
a56 1
		   const LgFrItem* t
d59 1
a59 1
  assert (t->isAPart());
d71 1
a71 1
		    const LgFrItem* source
d74 2
a75 2
  const LgFrPart* part = static_cast<const LgFrPart*>( source );
  return name_.compare( part->name_ );
d88 1
a88 1
LgFrPart::LgFrPart(const std::string& n)
d114 1
a114 1
  assert( rhs.isAPart() );
d127 1
a127 1
std::string
d129 1
a129 1
		       bool trunc
d133 1
a133 1
  std::string printingPartName = name_;
d140 1
a140 1
std::string
d147 1
a147 1
std::string
d155 1
a155 1
std::string
a182 1
  assert( pDef.isAPart() && !pDef.isADemand() );
d193 1
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d9 1
a9 1
#include <iostream>
a12 3

using std::cout;
using std::cerr;
@


