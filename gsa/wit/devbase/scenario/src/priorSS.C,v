head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.6
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.15.23.05.47;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.15.19.36.42;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.47;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.47;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.33;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Modified to build on windows laptop that was causing compiler to run out of stack space
@
text
@// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#if defined(_MSC_VER)
#pragma warning(disable:4786)
#endif

#include <iostream>

#include <scenario/src/priorSS.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/sortSchd.h>
#include <scenario/src/zeroTvFS.h>
#include <scenario/src/scenario.h>
#include <scenario/src/machdep.h>
#include <scenario/src/demdSchP.h>


// Populate Schedule with itemTimeVecs
void
LgFrPriorityScheduleStrategy::kernalOfPopulate(
   LgFrSortingScheduleFloat& schedule )
const
{
  LgFrDemand demand;
  LgFrTimeVecFloat tv;
  LgFrItemTimeVecPairFloat itv( demand, tv );

  // Loop once for each demand
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfDemands().size(); i++ ) {

     demand = setOfDemands()[i];

     // Make itemTimeVec
     itv.item( demand );
     itv.timeVecFloat(
           wipPtr_->priority( setOfDemands()[i] )   );

     // Check to see if i'th itemTimeVec is to be filtered out
     if ( schedule.filterStrategy().exclude( itv ) ) continue;

     // Insert itemTimeVec into schedule
     schedule.localInsert( itv );
     
  }

}

// Update (propogate) a demand change to wip 
void 
LgFrPriorityScheduleStrategy::update(
          const LgFrItemTimeVecPairFloat & newITV)
{
  wipPtr_->priority(newITV.demand(), newITV.timeVecFloat());
}

// Demand Priorities are mutable
bool
LgFrPriorityScheduleStrategy::isMutable()
const
{
 return true;
}


// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrPriorityScheduleStrategy::clone()
const
{
  LgFrPriorityScheduleStrategy* newInst = 
      new LgFrPriorityScheduleStrategy(*this);
  return (newInst);
}

// Make clone copy of object with a new Scenario
LgFrAttributeScheduleStrategy *
LgFrPriorityScheduleStrategy::clone(LgFrScenario & newScenario)
const
{
  LgFrPriorityScheduleStrategy* newInst = 
      new LgFrPriorityScheduleStrategy(*this, newScenario);
  return (newInst);
}

// Assignment operator
LgFrPriorityScheduleStrategy &
LgFrPriorityScheduleStrategy::operator=(
	  const LgFrPriorityScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrDemandScheduleStrategy::operator= ) (rhs);
    wipPtr_ = rhs.wipPtr_;
  }
  return *this;
}


// Copy constructor
LgFrPriorityScheduleStrategy::
   LgFrPriorityScheduleStrategy (
      const LgFrPriorityScheduleStrategy & source)
:  LgFrDemandScheduleStrategy( source ),
   wipPtr_( source.wipPtr_ ), 
   id_(__LGFRPRIORITYSCHEDULESTRATEGY)
{
}

// Copy constructor with new Scenario
LgFrPriorityScheduleStrategy::
   LgFrPriorityScheduleStrategy (
      const LgFrPriorityScheduleStrategy & source,
      LgFrScenario & newScenario)
:  LgFrDemandScheduleStrategy(
         source, 
         newScenario ),
   wipPtr_( &(workingImplosionProblem(newScenario)) ),
   id_(__LGFRPRIORITYSCHEDULESTRATEGY)
{
}

// Constructor
LgFrPriorityScheduleStrategy::
   LgFrPriorityScheduleStrategy (
     LgFrScenario & scenario )
:  LgFrDemandScheduleStrategy( 
      LgFrAttributeScheduleStrategy::setOfDemands(scenario),
                               &(userInputModification(scenario)) ),
   wipPtr_( &(workingImplosionProblem(scenario)) ),
   id_(__LGFRPRIORITYSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrPriorityScheduleStrategy::
   LgFrPriorityScheduleStrategy ()
:  LgFrDemandScheduleStrategy( LgFrSetOfDemands() ),
   wipPtr_( 0 ),
   id_(__LGFRPRIORITYSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrPriorityScheduleStrategy::
   ~LgFrPriorityScheduleStrategy ()
{
  // Nothing to do here
}


#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrPriorityScheduleStrategy methods.
void
LgFrPriorityScheduleStrategy::test()
{
}

// test LgFrPriorityScheduleStrategy methods.
// Expects the data in testScenario to come from
// "/u/implode/wit/data/examples/diner12/wit.data"
void
LgFrPriorityScheduleStrategy::contextTest
    (LgFrScenario                & testScenario,
     LgFrWorkingImplosionProblem & wip,			// testScenario's 
     LgFrSetOfDemands            & sod)			// testScenario's 
{
  int i;

  // Test constructor
  LgFrPriorityScheduleStrategy cs1(testScenario);

  // Test copy constructor
  LgFrPriorityScheduleStrategy cs2(cs1);

  // Test assignment operator
  LgFrPriorityScheduleStrategy cs3;
  cs3 = cs2;

  {
    // Test clone method
    LgFrAttributeScheduleStrategy *cs4Ptr = cs1.clone();

    // Test destructor
    delete cs4Ptr;
  }
  
  // Test populate. 
  LgFrSortingDemandScheduleFloatSmartPointer schedule; 
  const LgFrSortingDemandScheduleFloat & constSchedule = *schedule;
  cs1.populate( *schedule );
  for ( i=0; i<sod.size(); i++ ) {
     assert( sod[i] == constSchedule[i].demand() );
     assert( wip.priority(sod[i]) == constSchedule[i].timeVecFloat() );
  }

  // Test the update() method
  LgFrDemand aDemand(sod[0]);
  LgFrItemTimeVecPairFloat anITV(aDemand, 
                                constSchedule[0].timeVecFloat() + 2.);
  cs1.update(anITV);
  cs1.populate(*schedule);
  assert(anITV.timeVecFloat() == constSchedule[aDemand].timeVecFloat());

}
@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d3 5
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
#include <iostream.h>
d25 2
a26 1
  for ( size_t i=0; i<setOfDemands().entries(); i++ ) {
d54 1
a54 1
RWBoolean
d58 1
a58 1
 return TRUE;
a81 8
// Return schedule strategy identifier
isAReturnType
LgFrPriorityScheduleStrategy::isA()
const
{
   return id_;
}

a86 1
  assert( id_ == rhs.id_ );
a102 1
  assert( id_ == source.id_ );
a115 1
  assert( id_ == source.id_ );
d136 1
a136 1
   wipPtr_( NULL ),
a171 4
  assert( cs1.id_ == __LGFRPRIORITYSCHEDULESTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRPRIORITYSCHEDULESTRATEGY );
a174 1
  assert( cs2.isA() == __LGFRPRIORITYSCHEDULESTRATEGY );
a178 1
  assert( cs3.isA() == cs2.isA() );
a182 1
    assert( cs4Ptr->isA() == cs1.isA() );
d192 1
a192 1
  for ( i=0; i<sod.entries(); i++ ) {
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 3
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <iostream>
d23 1
a23 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfDemands().size(); i++ ) {
d51 1
a51 1
bool
d55 1
a55 1
 return true;
d79 8
d92 1
d109 1
d123 1
d144 1
a144 1
   wipPtr_( 0 ),
d180 4
d187 1
d192 1
d197 1
d207 1
a207 1
  for ( i=0; i<sod.size(); i++ ) {
@

