head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#include <scenario/src/lastPrbS.h>
#include <scenario/src/wrkgProb.h>
#include <scenario/src/attrSnPC.h>

// Get LastProblemSolved
const LgFrLastProblemSolved &
LgFrAttributeSensitivePairCompareFloat::lastProblemSolved()
const
{
   assert (lpsPtr_ != NULL);
   return *lpsPtr_;
}

// Get WorkingImplosionProblem
const LgFrWorkingImplosionProblem &
LgFrAttributeSensitivePairCompareFloat::workingImplosionProblem()
const
{
   assert (wipPtr_ != NULL);
   return *wipPtr_;
}


// Assignment operator
LgFrAttributeSensitivePairCompareFloat &
LgFrAttributeSensitivePairCompareFloat::operator=(
			  const LgFrAttributeSensitivePairCompareFloat& rhs)
{
  if (this != &rhs) {		// Check for assignment to self

     (this->LgFrPairCompareFloat::operator= ) (rhs);

      lpsPtr_ = rhs.lpsPtr_;
      wipPtr_ = rhs.wipPtr_;
  }
  return *this;
}


// Copy constructor
LgFrAttributeSensitivePairCompareFloat::
   LgFrAttributeSensitivePairCompareFloat (
      const LgFrAttributeSensitivePairCompareFloat & source)
:  
   LgFrPairCompareFloat( source ),
   lpsPtr_( source.lpsPtr_ ),
   wipPtr_( source.wipPtr_ )
{
  // Nothing to do here
}

// Copy constructor with new Scenario
LgFrAttributeSensitivePairCompareFloat::
   LgFrAttributeSensitivePairCompareFloat (
      const LgFrAttributeSensitivePairCompareFloat & source,
      LgFrScenario & newScenario, 
      LgFrModel * algorithmPtr )
:  
   LgFrPairCompareFloat( source, newScenario, algorithmPtr ),
   lpsPtr_(&(LgFrPairCompareFloat::lastProblemSolved(newScenario))),
   wipPtr_(&(LgFrPairCompareFloat::workingImplosionProblem(newScenario)))
{
  // Nothing to do here
}

// Constructor
LgFrAttributeSensitivePairCompareFloat::
   LgFrAttributeSensitivePairCompareFloat (
     LgFrScenario & scenario,
     LgFrModel * algorithmPtr )
:   
   LgFrPairCompareFloat(algorithmPtr),
   lpsPtr_( &LgFrPairCompareFloat::lastProblemSolved(scenario) ),
   wipPtr_( &LgFrPairCompareFloat::workingImplosionProblem(scenario) )
{
   assert( lpsPtr_ != NULL );
   assert( wipPtr_ != NULL );
}


// Default Constructor
// This is a private member function.
LgFrAttributeSensitivePairCompareFloat::
   LgFrAttributeSensitivePairCompareFloat ()
:   
   LgFrPairCompareFloat(),
   lpsPtr_( NULL ),
   wipPtr_( NULL )
{
  // Nothing to do here
}

// Destructor
LgFrAttributeSensitivePairCompareFloat::
   ~LgFrAttributeSensitivePairCompareFloat ()
{
   // Nothing to do here
}
@


1.1.1.1
log
@Import scenario
@
text
@@
