head	1.4;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.4.0.4
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.8
	Root-of-EndRw:1.2
	EndWitRw-branch:1.2.0.6
	Root-of-EndWitRw:1.2
	UsedBySCE:1.2
	RwToStl-branch:1.2.0.4
	Root-of-RwToStl:1.2
	latest_sce_3_10_20010924:1.2.0.2
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.08.05.13.00.49;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.15.19.36.48;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.10.23.02.06;	author fasano;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	2000.02.24.15.29.55;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.55;	author wit;	state Exp;
branches;
next	;

1.2.8.1
date	2003.01.08.17.42.38;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changed absolute paths to relative paths.
@
text
@// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <stdlib.h>

#if !defined (WIN32) && !defined (__OS2__) && !defined (__WINDOWS__)
#include <unistd.h>
#endif

#include <errno.h>
#include <assert.h>


#include <scenario/src/witRunVn.h>
#include <scenario/src/machdep.h>

// Return a pointer to a const version of my WitRun
// Note: implement the const part after there has been time to
// change witRun and the WIT API to handle const
/* const */ WitRun *
LgFrWitRunVeneer::constWitRun ()
const {
  assert (myRun_ != 0);
  return (/* (const WitRun *) */ myRun_);
}

// Return a pointer to a non-const version of my WitRun.
WitRun *
LgFrWitRunVeneer::mutableWitRun ()
{
  if (myRun_ == 0) 
    {
      // If the client wants to change it, better create
      // a real run, even if it is has no real data.
      witNewRun (&myRun_);
      witNoDependantWitRunVeneersIncr(myRun_);

      // If WIT Informational messages are desired, the following
      // line can me commented or LastProblemSolved::printMessage
      // can be used to control the printing of WIT messages.
      // Turn off WIT Informational messages
      witSetMesgTimesPrint(
          myRun_,
          WitTRUE,
          WitINFORMATIONAL_MESSAGES,
          0 );

      // Turn off WIT message warning that a part name is greater than
      // 12 characters long.
      witSetMesgTimesPrint( myRun_, WitTRUE, 338, 0 );

      witInitialize(myRun_);   // Initialize this wit run.

      witSetMesgTimesPrint( myRun_, WitTRUE, 538, 0 );
      witSetWit34Compatible( myRun_, WitTRUE );
    }
  else if (! (this -> noVeneersAroundMyWitRunIsOne()))
    {
      // Copy the old WitRun and decrement the number of references to it
      WitRun * oldWitRun;
      oldWitRun = myRun_;
      witNewRun (&myRun_);
      // If WIT Informational messages are desired, the following
      // line can me commented or LastProblemSolved::printMessage
      // can be used to control the printing of WIT messages.
      // Turn off WIT Informational messages
      witSetMesgTimesPrint(
               myRun_,
               WitTRUE,
               WitINFORMATIONAL_MESSAGES,
               0 );
      // Turn off WIT message warning that a part name is greater than
      // 12 characters long.
      witSetMesgTimesPrint( myRun_, WitTRUE, 338, 0 );

      witInitialize(myRun_);   // Initialize this wit run.

      // No need to set wit34Compatible attribute, because this is done
      // by witCopyData.

      witCopyData( myRun_, oldWitRun );

      witNoDependantWitRunVeneersDecr (oldWitRun);
      witNoDependantWitRunVeneersIncr (myRun_);
    }
  return myRun_;
}


int 
LgFrWitRunVeneer::noVeneersAroundMyWitRunIsOne ()
{
  assert (myRun_ != 0);
  int isOne;
  witNoDependantWitRunVeneersIsOne (myRun_, &isOne);
  return isOne;
}

LgFrWitRunVeneer::~LgFrWitRunVeneer()
{
  // Remove the reference to the old WitRun (and destroy the
  // old WitRun if this was the last reference to it)
  if (myRun_ != 0)
    {
      if (this -> noVeneersAroundMyWitRunIsOne())
	witDeleteRun (myRun_);
      else witNoDependantWitRunVeneersDecr(myRun_);
    }
}

// Assignment operator.
LgFrWitRunVeneer&
LgFrWitRunVeneer::operator=(
            const LgFrWitRunVeneer& rhs)
{
  if (&rhs != this) 
    {
      // Remove the reference to the old WitRun (and destroy the
      // old WitRun if this was the last reference to it)
      if (myRun_ != 0)
	{
	  if (this -> noVeneersAroundMyWitRunIsOne())
	    witDeleteRun (myRun_); // This line is causing PostProcessor::deleteConsVol() 
				   // [PostProc.o, pc=0xbbd80]  to read unitialized memory
	  else witNoDependantWitRunVeneersDecr (myRun_);
	}
      // Start refering to rhs's WitRun.
      myRun_ = rhs.myRun_;
      if (myRun_ != 0)
	witNoDependantWitRunVeneersIncr (myRun_);
    }
  return *this;
}

// Copy constructor
LgFrWitRunVeneer::LgFrWitRunVeneer(
            const LgFrWitRunVeneer& source)
: myRun_ (source.myRun_)
{
  if (myRun_ != 0)
    witNoDependantWitRunVeneersIncr (myRun_);
}

// Default Constructor
LgFrWitRunVeneer::LgFrWitRunVeneer()
: myRun_ (0)
{
}


// Another Constructor
LgFrWitRunVeneer::LgFrWitRunVeneer(
  WitRun * wr )
: myRun_ (wr)
{
 witNoDependantWitRunVeneersIncr(myRun_);
 assert( this->noVeneersAroundMyWitRunIsOne() );
}


#ifdef NDEBUG
#undef NDEBUG
#endif
// Test this class
void
LgFrWitRunVeneer::test()
{
  // Test constructors
  LgFrWitRunVeneer nullVeneer;
  LgFrWitRunVeneer veneerCopy (nullVeneer);

  // Test the assignment method.
  veneerCopy = nullVeneer;

  // Test the mutableWitRun and constWitRun methods
  char * realProb = "../../../../wit/wit-data/brenda/denise/wit.data";
  WitRun * veneerCopiesWitRun = veneerCopy.mutableWitRun();
  witReadData (veneerCopiesWitRun, realProb);
  int n = 0;
  witGetNPeriods (veneerCopy.constWitRun(), &n);
  assert (n == 5);

  LgFrWitRunVeneer walnut;	// A popular veneer
  char * realProb1 = "../../../../wit/wit-data/standard/obj1/wit.data";
  WitRun * walnutsWitRun = walnut.mutableWitRun();
  witReadData (walnutsWitRun, realProb1);
  int walnutNPeriods;
  witGetNPeriods (walnut.constWitRun(), &walnutNPeriods);
  assert (walnutNPeriods == 8);

  // Test the assignment method with non-null operands
  veneerCopy = walnut;
  int veneerCopyNPeriods;
  witGetNPeriods (walnut.constWitRun(), &veneerCopyNPeriods);
  assert (veneerCopyNPeriods == walnutNPeriods);
}

@


1.3
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d175 1
a175 1
  char * realProb = "/u/wit/wit-data/brenda/denise/wit.data";
d183 1
a183 1
  char * realProb1 = "/u/wit/wit-data/standard/obj1/wit.data";
@


1.2
log
@Updated so unitTest reads files from
  /u/wit/wit-data
instead of
  /u/implode/data
With these changes unitTest is running correctly on Windows
@
text
@d1 2
a11 2
#include <rw/rstream.h>
#include <rw/cstring.h>
d22 1
a22 1
  assert (myRun_ != NULL);
d30 1
a30 1
  if (myRun_ == NULL) 
d92 1
a92 1
  assert (myRun_ != NULL);
d102 1
a102 1
  if (myRun_ != NULL)
d119 1
a119 1
      if (myRun_ != NULL)
d128 1
a128 1
      if (myRun_ != NULL)
d139 1
a139 1
  if (myRun_ != NULL)
d145 1
a145 1
: myRun_ (NULL)
@


1.2.8.1
log
@Roguewave is gone
@
text
@a0 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d10 2
d22 1
a22 1
  assert (myRun_ != 0);
d30 1
a30 1
  if (myRun_ == 0) 
d92 1
a92 1
  assert (myRun_ != 0);
d102 1
a102 1
  if (myRun_ != 0)
d119 1
a119 1
      if (myRun_ != 0)
d128 1
a128 1
      if (myRun_ != 0)
d139 1
a139 1
  if (myRun_ != 0)
d145 1
a145 1
: myRun_ (0)
@


1.1
log
@Initial revision
@
text
@d175 1
a175 1
  char * realProb = "/u/implode/wit/data/brenda/denise/wit.data";
d183 1
a183 1
  char * realProb1 = "/u/implode/wit/data/standard/obj1/wit.data";
@


1.1.1.1
log
@Import scenario
@
text
@@
