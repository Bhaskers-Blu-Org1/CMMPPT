head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.29;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.26;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.43;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/demdNmFS.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/demand.h>
#include <scenario/src/part.h>
#include <scenario/src/machdep.h>
#include <scenario/src/idnumber.h>


// Do Filtering
bool
LgFrDemandNameFilterStrategy::exclude(
   const LgFrItemTimeVecPairFloat & itvpf)
const
{
   assert( itvpf.item().isADemand() );

#ifdef WIN32   
   const LgFrDemand (& theDemand) (itvpf.demand());
#else
   const LgFrDemand & theDemand = itvpf.demand();
#endif   

   std::string partName (theDemand.partPtr()->name());
   std::string demandName (theDemand.name());


   if ( sce::matchRegexp( partName, partRegexp_ ) == false )
      return 1;

   if ( sce::matchRegexp( demandName, demandRegexp_ ) == false )
      return 1;
   
   return 0;
}

// Get the Part Regexp as a std::string associated with this Filter
std::string
LgFrDemandNameFilterStrategy::partRE()
const
{
   return partREstring_;
}

// Get the Demand Regexp as a std::string associated with this Filter
std::string
LgFrDemandNameFilterStrategy::demandRE()
const
{
   return demandREstring_;
}

// Get the partRegexp  associated with this filter
std::string
LgFrDemandNameFilterStrategy::partRegexp()
const
{
   return partRegexp_;
}

// Get the demandRegexp  associated with this filter
std::string
LgFrDemandNameFilterStrategy::demandRegexp()
const
{
   return demandRegexp_;
}

// Make clone copy of object
LgFrFilterStrategy *
LgFrDemandNameFilterStrategy::clone()
const
{
  LgFrDemandNameFilterStrategy* newInst = 
      new LgFrDemandNameFilterStrategy(*this);
  return (newInst);
}

// Make clone copy of object with new Scenario
LgFrFilterStrategy *
LgFrDemandNameFilterStrategy::clone(LgFrScenario & newScenario)
const
{
  LgFrDemandNameFilterStrategy* newInst = 
      new LgFrDemandNameFilterStrategy(*this, newScenario);
  return (newInst);
}

// Assignment operator
LgFrDemandNameFilterStrategy &
LgFrDemandNameFilterStrategy::operator=(
			  const LgFrDemandNameFilterStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
     (this->LgFrFilterStrategy::operator= ) (rhs);
     partREstring_   = rhs.partREstring_;
     demandREstring_ = rhs.demandREstring_;
  }
  return *this;
}


// Copy constructor
LgFrDemandNameFilterStrategy::
   LgFrDemandNameFilterStrategy (
      const LgFrDemandNameFilterStrategy & source)
:  
   LgFrFilterStrategy( source ),
   id_(__LGFRDEMANDNAMEFILTERSTRATEGY),
   partREstring_(source.partREstring_),
   demandREstring_(source.demandREstring_),
   partRegexp_(source.partRegexp_),
   demandRegexp_(source.demandRegexp_)
{
}

// Copy constructor with new Scenario
LgFrDemandNameFilterStrategy::
   LgFrDemandNameFilterStrategy (
      const LgFrDemandNameFilterStrategy & source,
      LgFrScenario & newScenario )
:  
   LgFrFilterStrategy( source, newScenario ),
   id_(__LGFRDEMANDNAMEFILTERSTRATEGY),
   partREstring_(source.partREstring_),
   demandREstring_(source.demandREstring_),
   partRegexp_(source.partRegexp_),
   demandRegexp_(source.demandRegexp_)
{
}

// Preferred Constructor
LgFrDemandNameFilterStrategy::
   LgFrDemandNameFilterStrategy (
          const std::string & partREstring,
          const std::string & demandREstring)
:  
   LgFrFilterStrategy(), 
   id_(__LGFRDEMANDNAMEFILTERSTRATEGY),
   partREstring_(partREstring),
   demandREstring_(demandREstring),
   partRegexp_(partREstring),
   demandRegexp_(demandREstring)
{
   if ( !sce::checkRegexp( partRegexp_ ) )
   {
      std::cerr << "\nIllegal RWCRegexp specified for part ---> " 
           << partREstring
           << "\n";
      assert( sce::checkRegexp( partRegexp_ ) );
   }

   if ( !sce::checkRegexp( demandRegexp_ ) )
   {
      std::cerr << "\nIllegal RWCRegexp specified for demand ---> " 
           << demandREstring
           << "\n";
      assert( sce::checkRegexp( demandRegexp_ ) );
   }

}


// Default Constructor -- this will match anything
LgFrDemandNameFilterStrategy::
   LgFrDemandNameFilterStrategy ()
:  
   LgFrFilterStrategy(),
   id_(__LGFRDEMANDNAMEFILTERSTRATEGY),
   partREstring_(".*"),
   demandREstring_(".*"),   
   partRegexp_(".*"),
   demandRegexp_(".*")
{
  // Nothing to do here
}

// Destructor
LgFrDemandNameFilterStrategy::
   ~LgFrDemandNameFilterStrategy ()
{
   // Nothing to do here
}


#ifdef NDEBUG
#undef NDEBUG
#endif

// test LgFrDemandNameFilterStrategy methods.
void
LgFrDemandNameFilterStrategy::test()
{
  // Test Preferred constructor
  LgFrDemandNameFilterStrategy cs1(".*", "USA");

  // Test copy constructor
  LgFrDemandNameFilterStrategy cs2(cs1);
  assert( sce::checkRegexp( cs2.partRegexp() ));
  assert( sce::checkRegexp( cs2.demandRegexp() ));
  assert( cs2.partRE() == cs1.partRE());
  assert( cs2.demandRE() == cs1.demandRE());

  // Test assignment operator
  LgFrDemandNameFilterStrategy cs3("abc", "APG");
  cs3 = cs2;
  assert( sce::checkRegexp( cs2.partRegexp() ));
  assert( sce::checkRegexp( cs2.demandRegexp() ));
  assert( cs3.partRE() == cs2.partRE() );
  assert( cs3.demandRE() == cs2.demandRE() );

  // Test clone method
  LgFrFilterStrategy *cs4Ptr = cs1.clone();
  
  // cast the clone back down to a DemandNameFS
  LgFrDemandNameFilterStrategy *cs5Ptr = 
         (LgFrDemandNameFilterStrategy *) cs4Ptr; 
  assert(  sce::checkRegexp( cs1.partRegexp() ));
  assert(  sce::checkRegexp( cs1.demandRegexp() ));
  assert( cs1.partRE() == cs5Ptr->partRE() );
  assert( cs1.demandRE() == cs5Ptr->demandRE() );

  // Test destructor
  delete cs4Ptr;

  // Test exclude
  LgFrPart aPart("abc45");
  LgFrDemand aDemand("USA", &aPart);
  LgFrTimeVecFloat aTVF(2,2.);
  LgFrItemTimeVecPairFloat itvp1( aDemand, aTVF);
  assert( !cs1.exclude( itvp1 ) );
  assert(  cs3.exclude( itvp1 ) );

  LgFrDemandNameFilterStrategy cs6(".*45", "USA");
  assert( ! cs6.exclude( itvp1 ) );
  LgFrDemandNameFilterStrategy cs7("abc.*", "USA");
  assert( ! cs7.exclude( itvp1 ) );
  LgFrDemandNameFilterStrategy cs8("abc.*", "US.*");
  assert( ! cs8.exclude( itvp1 ) );
  LgFrDemandNameFilterStrategy cs9(".*", "APG");
  assert( cs9.exclude( itvp1 ) );

  // default constructor should let anything through
  LgFrDemandNameFilterStrategy cs10;
  assert( ! cs10.exclude( itvp1 ) );
  
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 1
#include <iostream.h>
d14 1
d16 1
a16 1
RWBoolean
d21 1
a21 1
   assert( itvpf.item().isA() == __LGFRDEMAND );
d29 2
a30 2
   RWCString partName (theDemand.partPtr()->name());
   RWCString demandName (theDemand.name());
d33 1
a33 1
   if (partName.compareTo(partName(partRegexp_)) != 0)
d36 1
a36 1
   if (demandName.compareTo(demandName(demandRegexp_)) != 0)
d42 2
a43 2
// Get the Part Regexp as a RWCString associated with this Filter
RWCString
d50 2
a51 2
// Get the Demand Regexp as a RWCString associated with this Filter
RWCString
d59 1
a59 1
RWCRegexp
d67 1
a67 1
RWCRegexp
a93 8
// Return comparison strategy identifier
isAReturnType
LgFrDemandNameFilterStrategy::isA()
const
{
   return id_;
}

a98 1
  assert( id_ == rhs.id_ );
a119 1
  assert( id_ == source.id_ );
a134 1
  assert( id_ == source.id_ );
d140 2
a141 2
          const RWCString & partREstring,
          const RWCString & demandREstring)
d150 1
a150 1
   if (partRegexp_.status() != RWCRegexp::OK)
d152 1
a152 1
      cerr << "\nIllegal RWCRegexp specified for part ---> " 
d155 1
a155 1
      assert( partRegexp_.status() == RWCRegexp::OK);
d158 1
a158 1
   if (demandRegexp_.status() != RWCRegexp::OK)
d160 1
a160 1
      cerr << "\nIllegal RWCRegexp specified for demand ---> " 
d163 1
a163 1
      assert( partRegexp_.status() == RWCRegexp::OK);
a200 4
  assert( cs1.id_ == __LGFRDEMANDNAMEFILTERSTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRDEMANDNAMEFILTERSTRATEGY );
d204 4
a207 5
  assert( cs2.isA() == __LGFRDEMANDNAMEFILTERSTRATEGY );
  assert( cs2.partRegexp().status() == RWCRegexp::OK);
  assert( cs2.demandRegexp().status() == RWCRegexp::OK);
  assert(! cs2.partRE().compareTo(cs1.partRE()));
  assert(! cs2.demandRE().compareTo(cs1.demandRE()));
d212 4
a215 5
  assert( cs3.isA() == cs2.isA() );
  assert( cs2.partRegexp().status() == RWCRegexp::OK);
  assert( cs2.demandRegexp().status() == RWCRegexp::OK);
  assert(! cs3.partRE().compareTo(cs2.partRE()) );
  assert(! cs3.demandRE().compareTo(cs2.demandRE()) );
a218 1
  assert( cs4Ptr->isA() == cs1.isA() );
d223 4
a226 4
  assert(  cs1.partRegexp().status() == RWCRegexp::OK);
  assert(  cs1.demandRegexp().status() == RWCRegexp::OK);
  assert(! cs1.partRE().compareTo(cs5Ptr->partRE()) );
  assert(! cs1.demandRE().compareTo(cs5Ptr->demandRE()) );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 5
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <iostream>
a9 1

d11 1
a11 1
bool
d16 1
a16 1
   assert( itvpf.item().isADemand() );
d24 2
a25 2
   std::string partName (theDemand.partPtr()->name());
   std::string demandName (theDemand.name());
d28 1
a28 1
   if ( sce::matchRegexp( partName, partRegexp_ ) == false )
d31 1
a31 1
   if ( sce::matchRegexp( demandName, demandRegexp_ ) == false )
d37 2
a38 2
// Get the Part Regexp as a std::string associated with this Filter
std::string
d45 2
a46 2
// Get the Demand Regexp as a std::string associated with this Filter
std::string
d54 1
a54 1
std::string
d62 1
a62 1
std::string
d89 8
d102 1
d124 1
d140 1
d146 2
a147 2
          const std::string & partREstring,
          const std::string & demandREstring)
d156 1
a156 1
   if ( !sce::checkRegexp( partRegexp_ ) )
d161 1
a161 1
      assert( sce::checkRegexp( partRegexp_ ) );
d164 1
a164 1
   if ( !sce::checkRegexp( demandRegexp_ ) )
d169 1
a169 1
      assert( sce::checkRegexp( demandRegexp_ ) );
d207 4
d214 5
a218 4
  assert( sce::checkRegexp( cs2.partRegexp() ));
  assert( sce::checkRegexp( cs2.demandRegexp() ));
  assert( cs2.partRE() == cs1.partRE());
  assert( cs2.demandRE() == cs1.demandRE());
d223 5
a227 4
  assert( sce::checkRegexp( cs2.partRegexp() ));
  assert( sce::checkRegexp( cs2.demandRegexp() ));
  assert( cs3.partRE() == cs2.partRE() );
  assert( cs3.demandRE() == cs2.demandRE() );
d231 1
d236 4
a239 4
  assert(  sce::checkRegexp( cs1.partRegexp() ));
  assert(  sce::checkRegexp( cs1.demandRegexp() ));
  assert( cs1.partRE() == cs5Ptr->partRE() );
  assert( cs1.demandRE() == cs5Ptr->demandRE() );
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d152 1
a152 1
      std::cerr << "\nIllegal RWCRegexp specified for part ---> " 
d160 1
a160 1
      std::cerr << "\nIllegal RWCRegexp specified for demand ---> " 
@


