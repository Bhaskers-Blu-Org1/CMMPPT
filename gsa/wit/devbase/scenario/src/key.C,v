head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.39;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.31;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
#include <scenario/src/key.h>
#include <assert.h>

// extract string
std::string
LgFrKey::key() const
{
  return key_;
}

// overloaded isEqual()
bool
LgFrKey::isEqual(const LgFrKey* a) const
{
  // should do a check to make sure that a is a LgFrKey
  return key_ == ((LgFrKey *)a)->key();
}

// compareTo method, uses std::string to do the comparison.
// should return 0  if this->key_ "is equal to" source->key_.
//               >0 if this->key_ "is larger" than source->key_.
//               <0 if this->key_ "is smaller" than source->key_.

int 
LgFrKey::compareTo(const LgFrKey* source) const
{
  const LgFrKey* skey = static_cast<const LgFrKey*>( source );
  return key_ == skey->key_;
}

// Equality and inequality
int
LgFrKey::operator==(const LgFrKey& otherKey) const
{
  return key_ == otherKey.key();
}

LgFrKey::operator!=(const LgFrKey& otherKey) const
{
  return key_ != otherKey.key();
}

// Assignment
LgFrKey&
LgFrKey::operator=(const LgFrKey& rhs)
{
  if (this != &rhs) {           // Check for assignment to self
      key_ = rhs.key();
  }
  return *this;
}

// Copy constructor
LgFrKey::LgFrKey(const LgFrKey& copy)
{
  key_ = copy.key();
}

// Constructor
LgFrKey::LgFrKey(const char* string) : key_(string)
{
// nothing to do here
}

// Destructor
LgFrKey::~LgFrKey()
{
// nothing to do here
}

@


1.1
log
@Initial revision
@
text
@d1 3
d8 1
a8 1
RWCString
a13 6
isAReturnType
LgFrKey::isA() const
{
  return __LGFRKEY;
}

d15 2
a16 2
RWBoolean
LgFrKey::isEqual(const RWCollectable* a) const
a18 1
  assert ( a->isA() ==__LGFRKEY );
d22 1
a22 8
// hash
unsigned
LgFrKey::hash() const
{
  return __LGFRKEY;
}

// compareTo method, uses RWCString to do the comparison.
d28 1
a28 1
LgFrKey::compareTo(const RWCollectable* source) const
d30 2
a31 2
  assert (source->isA()==__LGFRKEY);
  return key_.compareTo(((const LgFrKey*)source)->key_);
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 3
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
d5 1
a5 1
std::string
d11 6
d18 2
a19 2
bool
LgFrKey::isEqual(const LgFrKey* a) const
d22 1
d26 8
a33 1
// compareTo method, uses std::string to do the comparison.
d39 1
a39 1
LgFrKey::compareTo(const LgFrKey* source) const
d41 2
a42 2
  const LgFrKey* skey = static_cast<const LgFrKey*>( source );
  return key_ == skey->key_;
@

