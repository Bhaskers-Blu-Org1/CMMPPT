head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.6
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.15.23.05.46;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.15.19.36.28;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.25;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Modified to build on windows laptop that was causing compiler to run out of stack space
@
text
@// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#if defined(_MSC_VER)
#pragma warning(disable:4786)
#endif

#include <iostream>

#include <scenario/src/boolFS.h>
#include <scenario/src/sortSchd.h>
#include <scenario/src/prodSS.h>
#include <scenario/src/zeroTvFS.h>
#include <scenario/src/demdNmFS.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/machdep.h>

//-------------------------------------------------------------------------
//
// LgFrDiadicFilterStrategy Methods
//
//-------------------------------------------------------------------------

// Set left hand side filter strategy
void
LgFrDiadicFilterStrategy::leftHandSideFilterStrategy(
   const LgFrFilterStrategy & lhs)
{
   assert( leftHandSideFilterStrategyPtr_ != 0 );
   leftHandSideFilterStrategyPtr_->removeDependent( this );
   delete leftHandSideFilterStrategyPtr_;

   leftHandSideFilterStrategyPtr_ = lhs.clone();
   leftHandSideFilterStrategyPtr_->addDependent( this );
}


// Get left hand side filter strategy
const LgFrFilterStrategy &
LgFrDiadicFilterStrategy::leftHandSideFilterStrategy()
const
{
   assert (leftHandSideFilterStrategyPtr_ != 0);
   return *leftHandSideFilterStrategyPtr_;
}


// Set right hand side filter strategy
void
LgFrDiadicFilterStrategy::rightHandSideFilterStrategy(
   const LgFrFilterStrategy & rhs)
{
   assert( rightHandSideFilterStrategyPtr_ != 0 );
   rightHandSideFilterStrategyPtr_->removeDependent( this );
   delete rightHandSideFilterStrategyPtr_;

   rightHandSideFilterStrategyPtr_ = rhs.clone();
   rightHandSideFilterStrategyPtr_->addDependent( this );
}


// Get right hand side filter strategy
const LgFrFilterStrategy &
LgFrDiadicFilterStrategy::rightHandSideFilterStrategy()
const
{
   assert (rightHandSideFilterStrategyPtr_ != 0);
   return *rightHandSideFilterStrategyPtr_;
}

// Assignment operator
LgFrDiadicFilterStrategy &
LgFrDiadicFilterStrategy::operator=(
			  const LgFrDiadicFilterStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self

     (this->LgFrFilterStrategy::operator= ) (rhs);

     assert( leftHandSideFilterStrategyPtr_ != 0 );
     leftHandSideFilterStrategyPtr_->removeDependent( this );
     delete leftHandSideFilterStrategyPtr_;
     leftHandSideFilterStrategyPtr_  = 
        rhs.leftHandSideFilterStrategyPtr_->clone();
     leftHandSideFilterStrategyPtr_->addDependent( this );

     assert( rightHandSideFilterStrategyPtr_ != 0 );
     rightHandSideFilterStrategyPtr_->removeDependent( this );
     delete rightHandSideFilterStrategyPtr_;
     rightHandSideFilterStrategyPtr_ = 
        rhs.rightHandSideFilterStrategyPtr_->clone();
     rightHandSideFilterStrategyPtr_->addDependent( this );

  }
  return *this;
}


// Copy constructor
LgFrDiadicFilterStrategy::
   LgFrDiadicFilterStrategy (
      const LgFrDiadicFilterStrategy & source)
:  
   LgFrFilterStrategy( source ),
   leftHandSideFilterStrategyPtr_ ( 0 ),
   rightHandSideFilterStrategyPtr_( 0 )
{
   leftHandSideFilterStrategyPtr_  = 
      source.leftHandSideFilterStrategyPtr_->clone();
   leftHandSideFilterStrategyPtr_->addDependent( this );

   rightHandSideFilterStrategyPtr_ = 
      source.rightHandSideFilterStrategyPtr_->clone();
   rightHandSideFilterStrategyPtr_->addDependent( this );
}

// Copy constructor with new Scenario
LgFrDiadicFilterStrategy::
   LgFrDiadicFilterStrategy (
      const LgFrDiadicFilterStrategy & source,
      LgFrScenario & newScenario)
:  
   LgFrFilterStrategy( source, newScenario ),
   leftHandSideFilterStrategyPtr_ ( 0 ),
   rightHandSideFilterStrategyPtr_( 0 )
{

   leftHandSideFilterStrategyPtr_  = 
      source.leftHandSideFilterStrategyPtr_->clone(newScenario);
   leftHandSideFilterStrategyPtr_->addDependent( this );

   rightHandSideFilterStrategyPtr_  = 
      source.rightHandSideFilterStrategyPtr_->clone(newScenario);
   rightHandSideFilterStrategyPtr_->addDependent( this );

}


// Default Constructor
LgFrDiadicFilterStrategy::
   LgFrDiadicFilterStrategy ()
:  
   LgFrFilterStrategy()
{

   leftHandSideFilterStrategyPtr_ = new LgFrFilterStrategy;
   leftHandSideFilterStrategyPtr_->addDependent( this );

   rightHandSideFilterStrategyPtr_ = new LgFrFilterStrategy;
   rightHandSideFilterStrategyPtr_->addDependent( this );

}


// Another Constructor
LgFrDiadicFilterStrategy::
   LgFrDiadicFilterStrategy (
      LgFrFilterStrategy & leftHandSideFilterStrategy,
      LgFrFilterStrategy & rightHandSideFilterStrategy ) 
:  
   LgFrFilterStrategy(),
   leftHandSideFilterStrategyPtr_ ( 0 ),
   rightHandSideFilterStrategyPtr_ ( 0 )
{
   leftHandSideFilterStrategyPtr_ = leftHandSideFilterStrategy.clone();
   leftHandSideFilterStrategyPtr_->addDependent( this );

   rightHandSideFilterStrategyPtr_ = rightHandSideFilterStrategy.clone();
   rightHandSideFilterStrategyPtr_->addDependent( this );
}


// Destructor
LgFrDiadicFilterStrategy::
   ~LgFrDiadicFilterStrategy ()
{

  leftHandSideFilterStrategyPtr_->removeDependent( this );
  delete leftHandSideFilterStrategyPtr_;

  rightHandSideFilterStrategyPtr_->removeDependent( this );
  delete rightHandSideFilterStrategyPtr_;

}



//-------------------------------------------------------------------------
//
// LgFrAndFilterStrategy Methods
//
//-------------------------------------------------------------------------

// Do Filtering
bool
LgFrAndFilterStrategy::exclude(
   const LgFrItemTimeVecPairFloat & itvpf)
const
{

   // Evaluate left and right filter strategies
   bool lhs(  leftHandSideFilterStrategy().exclude( itvpf ) );
   bool rhs( rightHandSideFilterStrategy().exclude( itvpf ) );

   return ( lhs && rhs );

}


// Make clone copy of object
LgFrFilterStrategy *
LgFrAndFilterStrategy::clone()
const
{
  LgFrAndFilterStrategy* newInst = 
      new LgFrAndFilterStrategy(*this);
  return (newInst);
}

// Make clone copy of object with new Scenario
LgFrFilterStrategy *
LgFrAndFilterStrategy::clone(LgFrScenario & newScenario)
const
{
  LgFrAndFilterStrategy* newInst = 
      new LgFrAndFilterStrategy(*this, newScenario);
  return (newInst);
}

// Assignment operator
LgFrAndFilterStrategy &
LgFrAndFilterStrategy::operator=(
			  const LgFrAndFilterStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
     (this->LgFrDiadicFilterStrategy::operator= ) (rhs);
  }
  return *this;
}


// Copy constructor
LgFrAndFilterStrategy::
   LgFrAndFilterStrategy (
      const LgFrAndFilterStrategy & source)
:  
   LgFrDiadicFilterStrategy( source ),
   id_(__LGFRANDFILTERSTRATEGY)
{
}

// Copy constructor with new Scenario
LgFrAndFilterStrategy::
   LgFrAndFilterStrategy (
      const LgFrAndFilterStrategy & source,
      LgFrScenario & newScenario)
:  
   LgFrDiadicFilterStrategy( source, newScenario ),
   id_(__LGFRANDFILTERSTRATEGY)
{
}


// Constructor
LgFrAndFilterStrategy::
   LgFrAndFilterStrategy ()
:  
   LgFrDiadicFilterStrategy(),
   id_(__LGFRANDFILTERSTRATEGY)
{
  // Nothing to do here
}

// Another Constructor
LgFrAndFilterStrategy::
   LgFrAndFilterStrategy (
     LgFrFilterStrategy & leftHandSideFilterStrategy,
     LgFrFilterStrategy & rightHandSideFilterStrategy )
:  
   LgFrDiadicFilterStrategy(
      leftHandSideFilterStrategy,
      rightHandSideFilterStrategy),
   id_(__LGFRANDFILTERSTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrAndFilterStrategy::
   ~LgFrAndFilterStrategy ()
{
   // Nothing to do here
}





//-------------------------------------------------------------------------
//
// LgFrOrFilterStrategy Methods
//
//-------------------------------------------------------------------------

// Do Filtering
bool
LgFrOrFilterStrategy::exclude(
   const LgFrItemTimeVecPairFloat & itvpf)
const
{

   // Evaluate left and right filter strategies
   bool lhs(  leftHandSideFilterStrategy().exclude( itvpf ) );
   bool rhs( rightHandSideFilterStrategy().exclude( itvpf ) );

   return ( lhs || rhs );

}


// Make clone copy of object
LgFrFilterStrategy *
LgFrOrFilterStrategy::clone()
const
{
  LgFrOrFilterStrategy* newInst = 
      new LgFrOrFilterStrategy(*this);
  return (newInst);
}

// Make clone copy of object with new Scenario
LgFrFilterStrategy *
LgFrOrFilterStrategy::clone(LgFrScenario & newScenario)
const
{
  LgFrOrFilterStrategy* newInst = 
      new LgFrOrFilterStrategy(*this, newScenario);
  return (newInst);
}

// Assignment operator
LgFrOrFilterStrategy &
LgFrOrFilterStrategy::operator=(
			  const LgFrOrFilterStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
     (this->LgFrDiadicFilterStrategy::operator= ) (rhs);
  }
  return *this;
}


// Copy constructor
LgFrOrFilterStrategy::
   LgFrOrFilterStrategy (
      const LgFrOrFilterStrategy & source)
:  
   LgFrDiadicFilterStrategy( source ),
   id_(__LGFRORFILTERSTRATEGY)
{
}

// Copy constructor with new Scenario
LgFrOrFilterStrategy::
   LgFrOrFilterStrategy (
      const LgFrOrFilterStrategy & source,
      LgFrScenario & newScenario)
:  
   LgFrDiadicFilterStrategy( source, newScenario ),
   id_(__LGFRORFILTERSTRATEGY)
{
}


// Constructor
LgFrOrFilterStrategy::
   LgFrOrFilterStrategy ()
:  
   LgFrDiadicFilterStrategy(),
   id_(__LGFRORFILTERSTRATEGY)
{
  // Nothing to do here
}

// Another Constructor
LgFrOrFilterStrategy::
   LgFrOrFilterStrategy (
     LgFrFilterStrategy & leftHandSideFilterStrategy,
     LgFrFilterStrategy & rightHandSideFilterStrategy )
:  
   LgFrDiadicFilterStrategy(
      leftHandSideFilterStrategy,
      rightHandSideFilterStrategy),
   id_(__LGFRORFILTERSTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrOrFilterStrategy::
   ~LgFrOrFilterStrategy ()
{
   // Nothing to do here
}




//-------------------------------------------------------------------------
//
// LgFrNotFilterStrategy Methods
//
//-------------------------------------------------------------------------

// Do Filtering
bool
LgFrNotFilterStrategy::exclude(
   const LgFrItemTimeVecPairFloat & itvpf)
const
{

   // Evaluate filter strategies
   bool fs(  filterStrategy().exclude( itvpf ) );

   return !fs;

}


// Set filter strategy
void
LgFrNotFilterStrategy::filterStrategy(
   const LgFrFilterStrategy & fs)
{
   assert( filterStrategyPtr_ != 0 );
   filterStrategyPtr_->removeDependent( this );
   delete filterStrategyPtr_;

   filterStrategyPtr_ = fs.clone();
   filterStrategyPtr_->addDependent( this );
}

// Get filter strategy
const LgFrFilterStrategy &
LgFrNotFilterStrategy::filterStrategy()
const
{
   assert (filterStrategyPtr_ != 0);
   return *filterStrategyPtr_;
}


// Make clone copy of object
LgFrFilterStrategy *
LgFrNotFilterStrategy::clone()
const
{
  LgFrNotFilterStrategy* newInst = 
      new LgFrNotFilterStrategy(*this);
  return (newInst);
}

// Make clone copy of object with new Scenario
LgFrFilterStrategy *
LgFrNotFilterStrategy::clone(LgFrScenario & newScenario)
const
{
  LgFrNotFilterStrategy* newInst = 
      new LgFrNotFilterStrategy(*this, newScenario);
  return (newInst);
}

// Assignment operator
LgFrNotFilterStrategy &
LgFrNotFilterStrategy::operator=(
			  const LgFrNotFilterStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
     (this->LgFrFilterStrategy::operator= ) (rhs);

     assert( filterStrategyPtr_ != 0 );
     filterStrategyPtr_->removeDependent( this );
     delete filterStrategyPtr_;
     filterStrategyPtr_  = 
        rhs.filterStrategyPtr_->clone();
     filterStrategyPtr_->addDependent( this );

  }
  return *this;
}


// Copy constructor
LgFrNotFilterStrategy::
   LgFrNotFilterStrategy (
      const LgFrNotFilterStrategy & source)
:  
   LgFrFilterStrategy( source ),
   filterStrategyPtr_( 0 ),
   id_(__LGFRNOTFILTERSTRATEGY)
{
  filterStrategyPtr_  = source.filterStrategyPtr_->clone();
  filterStrategyPtr_->addDependent( this );
}


// Copy constructor with new Scenario
LgFrNotFilterStrategy::
   LgFrNotFilterStrategy (
      const LgFrNotFilterStrategy & source,
      LgFrScenario & newScenario)
:  
   LgFrFilterStrategy( source, newScenario ),
   id_(__LGFRNOTFILTERSTRATEGY)
{
  filterStrategyPtr_  = source.filterStrategyPtr_->clone(newScenario);
  filterStrategyPtr_->addDependent( this );
}


// Constructor
LgFrNotFilterStrategy::
   LgFrNotFilterStrategy ()
:  
   LgFrFilterStrategy(),
   id_(__LGFRNOTFILTERSTRATEGY)
{
   filterStrategyPtr_ = new LgFrFilterStrategy;
   filterStrategyPtr_->addDependent( this );
}

// Another Constructor
LgFrNotFilterStrategy::
   LgFrNotFilterStrategy (
     const LgFrFilterStrategy & filterStrategy )
:  
   LgFrFilterStrategy(),
   filterStrategyPtr_ ( 0 ),
   id_(__LGFRNOTFILTERSTRATEGY)
{
   filterStrategyPtr_ = filterStrategy.clone();
   filterStrategyPtr_->addDependent( this );
}

// Destructor
LgFrNotFilterStrategy::
   ~LgFrNotFilterStrategy ()
{
   assert( filterStrategyPtr_ != 0 );
   filterStrategyPtr_->removeDependent( this );
   delete filterStrategyPtr_;
}

//-------------------------------------------------------------------------
//
// Test Methods for all the classes in this file
//
//-------------------------------------------------------------------------

#ifdef NDEBUG
#undef NDEBUG
#endif

// test LgFrNotFilterStrategy methods.
void
LgFrNotFilterStrategy::test()
{

  // Test default constructor
  LgFrNotFilterStrategy fs1;

  // Test copy constructor
  LgFrNotFilterStrategy fs2(fs1);

  // Test assignment operator
  LgFrNotFilterStrategy fs3;
  fs3 = fs2;

  // Test clone method
  LgFrFilterStrategy *fs4Ptr = fs1.clone();

  // Test destructor
  delete fs4Ptr;

  // Test setting/getting filter strategy 
  fs1.filterStrategy( LgFrZeroTimeVecFilterStrategy() );

  // Test alternate constructor
  LgFrZeroTimeVecFilterStrategy zeroTvFS;
  LgFrNotFilterStrategy fs5( zeroTvFS );

  // Test exclude
  LgFrItemTimeVecPairFloat itvp1( LgFrPart("abc"), LgFrTimeVecFloat(2,2.) );
  assert( fs5.exclude( itvp1 ) );

  itvp1.timeVecFloat( LgFrTimeVecFloat(2, 0.0) );
  assert( !fs5.exclude( itvp1 ) );

}


// test LgFrAndFilterStrategy methods.
void
LgFrAndFilterStrategy::test()
{

  // Test default constructor
  LgFrAndFilterStrategy fs1;

  // Test copy constructor
  LgFrAndFilterStrategy fs2(fs1);

  // Test assignment operator
  LgFrAndFilterStrategy fs3;
  fs3 = fs2;

  // Test clone method
  LgFrFilterStrategy *fs4Ptr = fs1.clone();

  // Test destructor
  delete fs4Ptr;

  fs1.leftHandSideFilterStrategy( LgFrZeroTimeVecFilterStrategy() );

  // Test setting/getting rhs filter strategy which are methods of 
  // the abstract base class LgFrDiadicFilterStrategy
  fs1.rightHandSideFilterStrategy( LgFrDemandNameFilterStrategy() );

  // Test alternate constructor
  LgFrFilterStrategy fs;
  LgFrZeroTimeVecFilterStrategy zeroTvFS;
  LgFrAndFilterStrategy fs5( fs, zeroTvFS );

  // Test exclude
  LgFrItemTimeVecPairFloat itvp1( LgFrPart("abc"), LgFrTimeVecFloat(2,2.) );
  assert( !fs5.exclude( itvp1 ) );

  itvp1.timeVecFloat( LgFrTimeVecFloat(2, 0.0) );
  assert( !fs5.exclude( itvp1 ) );

  fs5.leftHandSideFilterStrategy( zeroTvFS );
  assert( fs5.exclude( itvp1 ) );

}


// test LgFrOrFilterStrategy methods.
void
LgFrOrFilterStrategy::test()
{

  // Test default constructor
  LgFrOrFilterStrategy fs1;

  // Test copy constructor
  LgFrOrFilterStrategy fs2(fs1);

  // Test assignment operator
  LgFrOrFilterStrategy fs3;
  fs3 = fs2;

  // Test clone method
  LgFrFilterStrategy *fs4Ptr = fs1.clone();

  // Test destructor
  delete fs4Ptr;

  // Test setting/getting lhs filter strategy which are methods of 
  // the abstract base class
  fs1.leftHandSideFilterStrategy( LgFrZeroTimeVecFilterStrategy() );

  // Test setting/getting rhs filter strategy which are methods of 
  // the abstract base class
  fs1.rightHandSideFilterStrategy( LgFrDemandNameFilterStrategy() );

  // Test alternate constructor
  LgFrFilterStrategy fs;
  LgFrZeroTimeVecFilterStrategy zeroTvFS;
  LgFrOrFilterStrategy fs5( fs, zeroTvFS );

  // Test exclude
  LgFrItemTimeVecPairFloat itvp1( LgFrPart("abc"), LgFrTimeVecFloat(2,2.) );
  assert( !fs5.exclude( itvp1 ) );

  itvp1.timeVecFloat( LgFrTimeVecFloat(2, 0.0) );
  assert( fs5.exclude( itvp1 ) );

}

@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d3 5
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
#include <iostream.h>
d24 1
a24 1
   assert( leftHandSideFilterStrategyPtr_ != NULL );
d38 1
a38 1
   assert (leftHandSideFilterStrategyPtr_ != NULL);
d48 1
a48 1
   assert( rightHandSideFilterStrategyPtr_ != NULL );
d62 1
a62 1
   assert (rightHandSideFilterStrategyPtr_ != NULL);
d75 1
a75 1
     assert( leftHandSideFilterStrategyPtr_ != NULL );
d82 1
a82 1
     assert( rightHandSideFilterStrategyPtr_ != NULL );
d100 2
a101 2
   leftHandSideFilterStrategyPtr_ ( NULL ),
   rightHandSideFilterStrategyPtr_( NULL )
d119 2
a120 2
   leftHandSideFilterStrategyPtr_ ( NULL ),
   rightHandSideFilterStrategyPtr_( NULL )
d157 2
a158 2
   leftHandSideFilterStrategyPtr_ ( NULL ),
   rightHandSideFilterStrategyPtr_ ( NULL )
d190 1
a190 1
RWBoolean
d197 2
a198 2
   RWBoolean lhs(  leftHandSideFilterStrategy().exclude( itvpf ) );
   RWBoolean rhs( rightHandSideFilterStrategy().exclude( itvpf ) );
a224 8
// Return comparison strategy identifier
isAReturnType
LgFrAndFilterStrategy::isA()
const
{
   return id_;
}

a229 1
  assert( id_ == rhs.id_ );
a244 1
  assert( id_ == source.id_ );
a255 1
  assert( id_ == source.id_ );
d301 1
a301 1
RWBoolean
d308 2
a309 2
   RWBoolean lhs(  leftHandSideFilterStrategy().exclude( itvpf ) );
   RWBoolean rhs( rightHandSideFilterStrategy().exclude( itvpf ) );
a335 8
// Return comparison strategy identifier
isAReturnType
LgFrOrFilterStrategy::isA()
const
{
   return id_;
}

a340 1
  assert( id_ == rhs.id_ );
a355 1
  assert( id_ == source.id_ );
a366 1
  assert( id_ == source.id_ );
d411 1
a411 1
RWBoolean
d418 1
a418 1
   RWBoolean fs(  filterStrategy().exclude( itvpf ) );
d430 1
a430 1
   assert( filterStrategyPtr_ != NULL );
d443 1
a443 1
   assert (filterStrategyPtr_ != NULL);
a467 8
// Return comparison strategy identifier
isAReturnType
LgFrNotFilterStrategy::isA()
const
{
   return id_;
}

a472 1
  assert( id_ == rhs.id_ );
d476 1
a476 1
     assert( filterStrategyPtr_ != NULL );
d494 1
a494 1
   filterStrategyPtr_( NULL ),
a496 1
  assert( id_ == source.id_ );
a510 1
  assert( id_ == source.id_ );
d533 1
a533 1
   filterStrategyPtr_ ( NULL ),
d544 1
a544 1
   assert( filterStrategyPtr_ != NULL );
a565 4
  assert( fs1.id_ == __LGFRNOTFILTERSTRATEGY );

  // Test isA method
  assert( fs1.isA() == __LGFRNOTFILTERSTRATEGY );
a568 1
  assert( fs2.isA() == __LGFRNOTFILTERSTRATEGY );
a572 1
  assert( fs3.isA() == fs2.isA() );
a575 1
  assert( fs4Ptr->isA() == fs1.isA() );
a580 1
  assert( fs1.filterStrategy().isA() != __LGFRZEROTIMEVECFILTERSTRATEGY );
a581 1
  assert( fs1.filterStrategy().isA() == __LGFRZEROTIMEVECFILTERSTRATEGY );
a585 1
  assert( fs5.filterStrategy().isA() == __LGFRZEROTIMEVECFILTERSTRATEGY );
a603 4
  assert( fs1.id_ == __LGFRANDFILTERSTRATEGY );

  // Test isA method
  assert( fs1.isA() == __LGFRANDFILTERSTRATEGY );
a606 1
  assert( fs2.isA() == __LGFRANDFILTERSTRATEGY );
a610 1
  assert( fs3.isA() == fs2.isA() );
a613 1
  assert( fs4Ptr->isA() == fs1.isA() );
a617 4
  // Test setting/getting lhs filter strategy which are methods of 
  // the abstract base class LgFrDiadicFilterStrategy
  assert( fs1.leftHandSideFilterStrategy().isA() != 
          __LGFRZEROTIMEVECFILTERSTRATEGY );
a618 2
  assert( fs1.leftHandSideFilterStrategy().isA() == 
          __LGFRZEROTIMEVECFILTERSTRATEGY );
a621 2
  assert( fs1.rightHandSideFilterStrategy().isA() != 
          __LGFRDEMANDNAMEFILTERSTRATEGY );
a622 2
  assert( fs1.rightHandSideFilterStrategy().isA() == 
          __LGFRDEMANDNAMEFILTERSTRATEGY );
a627 3
  assert( fs5.leftHandSideFilterStrategy().isA() == __LGFRFILTERSTRATEGY );
  assert( fs5.rightHandSideFilterStrategy().isA() == 
          __LGFRZEROTIMEVECFILTERSTRATEGY );
a648 4
  assert( fs1.id_ == __LGFRORFILTERSTRATEGY );

  // Test isA method
  assert( fs1.isA() == __LGFRORFILTERSTRATEGY );
a651 1
  assert( fs2.isA() == __LGFRORFILTERSTRATEGY );
a655 1
  assert( fs3.isA() == fs2.isA() );
a658 1
  assert( fs4Ptr->isA() == fs1.isA() );
a664 2
  assert( fs1.leftHandSideFilterStrategy().isA() != 
          __LGFRZEROTIMEVECFILTERSTRATEGY );
a665 2
  assert( fs1.leftHandSideFilterStrategy().isA() == 
          __LGFRZEROTIMEVECFILTERSTRATEGY );
a668 2
  assert( fs1.rightHandSideFilterStrategy().isA() != 
          __LGFRDEMANDNAMEFILTERSTRATEGY );
a669 2
  assert( fs1.rightHandSideFilterStrategy().isA() == 
          __LGFRDEMANDNAMEFILTERSTRATEGY );
a674 3
  assert( fs5.leftHandSideFilterStrategy().isA() == __LGFRFILTERSTRATEGY );
  assert( fs5.rightHandSideFilterStrategy().isA() == 
          __LGFRZEROTIMEVECFILTERSTRATEGY );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 3
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <iostream>
d22 1
a22 1
   assert( leftHandSideFilterStrategyPtr_ != 0 );
d36 1
a36 1
   assert (leftHandSideFilterStrategyPtr_ != 0);
d46 1
a46 1
   assert( rightHandSideFilterStrategyPtr_ != 0 );
d60 1
a60 1
   assert (rightHandSideFilterStrategyPtr_ != 0);
d73 1
a73 1
     assert( leftHandSideFilterStrategyPtr_ != 0 );
d80 1
a80 1
     assert( rightHandSideFilterStrategyPtr_ != 0 );
d98 2
a99 2
   leftHandSideFilterStrategyPtr_ ( 0 ),
   rightHandSideFilterStrategyPtr_( 0 )
d117 2
a118 2
   leftHandSideFilterStrategyPtr_ ( 0 ),
   rightHandSideFilterStrategyPtr_( 0 )
d155 2
a156 2
   leftHandSideFilterStrategyPtr_ ( 0 ),
   rightHandSideFilterStrategyPtr_ ( 0 )
d188 1
a188 1
bool
d195 2
a196 2
   bool lhs(  leftHandSideFilterStrategy().exclude( itvpf ) );
   bool rhs( rightHandSideFilterStrategy().exclude( itvpf ) );
d223 8
d236 1
d252 1
d264 1
d310 1
a310 1
bool
d317 2
a318 2
   bool lhs(  leftHandSideFilterStrategy().exclude( itvpf ) );
   bool rhs( rightHandSideFilterStrategy().exclude( itvpf ) );
d345 8
d358 1
d374 1
d386 1
d431 1
a431 1
bool
d438 1
a438 1
   bool fs(  filterStrategy().exclude( itvpf ) );
d450 1
a450 1
   assert( filterStrategyPtr_ != 0 );
d463 1
a463 1
   assert (filterStrategyPtr_ != 0);
d488 8
d501 1
d505 1
a505 1
     assert( filterStrategyPtr_ != 0 );
d523 1
a523 1
   filterStrategyPtr_( 0 ),
d526 1
d541 1
d564 1
a564 1
   filterStrategyPtr_ ( 0 ),
d575 1
a575 1
   assert( filterStrategyPtr_ != 0 );
d597 4
d604 1
d609 1
d613 1
d619 1
d621 1
d626 1
d645 4
d652 1
d657 1
d661 1
d666 4
d671 2
d676 2
d679 2
d686 3
d710 4
d717 1
d722 1
d726 1
d733 2
d736 2
d741 2
d744 2
d751 3
@

