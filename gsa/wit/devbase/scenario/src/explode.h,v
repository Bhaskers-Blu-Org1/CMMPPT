head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.35;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.41;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.41;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.29;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_EXPLODE_H
#define LGFR_EXPLODE_H
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/algorthm.h>

// This class represents the mrp explosion algorithm

// Forward Reference
class LgFrLastProblemSolved;

class LgFrExplode : public LgFrAlgorithm {

public:

    int virtual GetAlgorithmType() const { return __LGFREXPLODE; }

  // updateFrom - This method is invoked when the algorthm solution has
  // been updated.
  virtual
     void
        updateFrom (
           LgFrModel * p,
           void * d );

  // Return pointer to the explode algorithm in the specified scenario.
  virtual
     LgFrAlgorithm *
        counterPart(
           LgFrScenario & )
              const;

  // Constructor.
   LgFrExplode(
       LgFrLastProblemSolved & lps );

  // Copy constructor
  LgFrExplode (
     const LgFrExplode& source);
  
  // destructor
  ~LgFrExplode();
  
  // Assignment 
  LgFrExplode& 
    operator=(const LgFrExplode& rhs);
  
  // Get Last Problem Solved associated with this explosion alogrithm.
  // If the owner of the lastProblemSolved is deleted by its owner then
  // then the returned reference will be dangling
  virtual
     LgFrLastProblemSolved &
        lastProblemSolved()
           const;

  // test this class
  static void test();

  // Test this class in the context of it's owner(s).
  // The data for this test should have come from
  // "/u/implode/wit/data/examples/diner12/wit.data"
  static void contextTest(LgFrLastProblemSolved       &lps,
                          LgFrSetOfParts              &sop);

private:

  LgFrLastProblemSolved  * lpsPtr_;

  const int id_;

  // default constructor
  LgFrExplode();

};

#endif
@


1.1
log
@Initial revision
@
text
@d3 2
d17 2
a25 6

  // Return Object Class Identifier
  virtual
     isAReturnType
        isA()
           const;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
a14 2
    int virtual GetAlgorithmType() const { return __LGFREXPLODE; }

d22 6
@

