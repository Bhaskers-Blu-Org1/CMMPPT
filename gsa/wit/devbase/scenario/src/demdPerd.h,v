head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.30;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.26;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_DEMAND_PERIOD_PAIR_H
#define LGFR_DEMAND_PERIOD_PAIR_H
// Author: Wally

// This class is for representing demand-period pairs.

#include <scenario/src/demand.h>

// This class contains demand and period (period number)
class LGFR_DECLSPEC LgFrDemandPeriodPair {
  
       
public:

  virtual
  bool
  isEqual(const LgFrDemandPeriodPair*) 
       const;
       
  // compareTo method, uses DemandPeriodPair name to to the comparison.
  // should return 0  if this->name_ "is equal to" source->name_.
  //               >0 if this->name_ "is larger" than source->name_.
  //               <0 if this->name_ "is smaller" than source->name_.
       
  virtual int compareTo(const LgFrDemandPeriodPair*) const;
       
  // Set and Get methods
  // Demand
  void demand (const LgFrDemand&);		// Set
  const LgFrDemand& demand () const;		// Get
  // Period
  void period (const int&);			// Set
  const int& period () const;			// Get
  
  // Constructor that sets both parts
  LgFrDemandPeriodPair(const LgFrDemand& item, const int& p);
  
  // default constructor
  LgFrDemandPeriodPair();
  
  // Copy constructor
  LgFrDemandPeriodPair (const LgFrDemandPeriodPair& source);
  
  // destructor
  ~LgFrDemandPeriodPair();
  
  // Assignment 
  LgFrDemandPeriodPair& 
  operator=(const LgFrDemandPeriodPair& rhs);
  
  // Equality
  virtual
  int
  operator==(const LgFrDemandPeriodPair&)
       const;
       
  // Print DemandPeriodPair data
  virtual void print() const;
       
  // test this class
  static void test();
  
private:
  LgFrDemand        demand_;
  int               period_;
};

#endif
@


1.1
log
@Initial revision
@
text
@a0 2
// Author: Wally

d3 1
a5 2
#include <rw/cstring.h>
#include <rw/collect.h>
d10 1
a10 1
class LGFR_DECLSPEC LgFrDemandPeriodPair : public RWCollectable  {
a11 3
  // isA(), newSpecies(), copy(), and some other things are declared
  // by this macro
  RWDECLARE_COLLECTABLE(LgFrDemandPeriodPair)
d16 2
a17 7
  unsigned
  hash() 
       const;
       
  virtual
  RWBoolean
  isEqual(const RWCollectable*) 
d25 1
a25 1
  virtual int compareTo(const RWCollectable*) const;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 2
a4 1
// Author: Wally
d7 2
d13 1
a13 1
class LGFR_DECLSPEC LgFrDemandPeriodPair {
d15 3
d22 7
a28 2
  bool
  isEqual(const LgFrDemandPeriodPair*) 
d36 1
a36 1
  virtual int compareTo(const LgFrDemandPeriodPair*) const;
@

