head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.6
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.15.23.05.46;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.15.19.36.27;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.35;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.35;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.25;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Modified to build on windows laptop that was causing compiler to run out of stack space
@
text
@#ifndef LGFR_ALGORITHM_H
#define LGFR_ALGORITHM_H

#if defined(_MSC_VER)
#pragma warning(disable:4786)
#endif

#include <scenario/src/model.h>

#include <scenario/src/idnumber.h>

// This class if the base class for the algorithm of the logistics framework.
// Currently, these are:
//   Implosion
//   Mrp
//   FocussedShortageScheduleControl

// Forward declaration
class LgFrScenario;

class LgFrAlgorithm : 
   public LgFrSubscription {

public:

  int virtual GetAlgorithmType() const = 0;

  // Return pointer to algorithm of same type which is in the specified
  // scenario.
  virtual
     LgFrAlgorithm *
        counterPart(
           LgFrScenario & )
              const
                 = 0;

  // Constructor.
   LgFrAlgorithm( );

  // Copy constructor
  LgFrAlgorithm( 
     const LgFrAlgorithm& source);
  
  // destructor
  ~LgFrAlgorithm();
  
  // Assignment 
  LgFrAlgorithm& 
    operator=(const LgFrAlgorithm& rhs);
  
private:

};

#endif
@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d4 4
@


1.1
log
@Initial revision
@
text
@d22 1
a22 14

  // Return Object Class Identifier
  //
  // Note:  This class inherits from ModelClient which inherits from
  //        RWCollectable.  RWCollectable provides an isA() member function
  //        which can be defined and implemented using macros
  //        RWDECLARE_COLLECTABLE and RWDEFINE_COLLECTABLE.  These macros
  //        are not used because they require a public default constructor.
  //
  virtual
     isAReturnType
        isA()
           const 
              = 0;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d22 14
a35 1
  int virtual GetAlgorithmType() const = 0;
@

