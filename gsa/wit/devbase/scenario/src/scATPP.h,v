head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.43;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.48;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.48;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.33;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LgFrScenarioForATPSMARTPTRH
#define LgFrScenarioForATPSMARTPTRH
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/refCount.h>


// forward declaration

class LgFrScenarioSmartPointerToConst;
class LgFrScenarioSmartPointer;
class LgFrScenarioForATP;

class LgFrScenarioForATPSmartPointerToConst
{

public:
    LgFrScenarioForATPSmartPointerToConst();
    LgFrScenarioForATPSmartPointerToConst(LgFrScenarioForATP*);
    LgFrScenarioForATPSmartPointerToConst(LgFrScenarioForATP*, LgFrReferenceCount&);
    LgFrScenarioForATPSmartPointerToConst(LgFrScenarioSmartPointerToConst);
    virtual ~LgFrScenarioForATPSmartPointerToConst();
    LgFrScenarioForATPSmartPointerToConst(const LgFrScenarioForATPSmartPointerToConst&);
    LgFrScenarioForATPSmartPointerToConst deepCopy() const;
    LgFrScenarioForATPSmartPointerToConst& operator=(const LgFrScenarioForATPSmartPointerToConst&);
    bool operator==(const LgFrScenarioForATPSmartPointerToConst&) const;
    bool operator!=(const LgFrScenarioForATPSmartPointerToConst&) const;
    const LgFrScenarioForATP& operator*() const;
    const LgFrScenarioForATP * const operator->() const;
    operator LgFrScenarioSmartPointerToConst () const;

    bool unique() const;
    bool null() const;
    static void test();

protected:
    LgFrScenarioForATP* pointer_; // should make this const but I want to use
                            //  it for the LgFrScenarioForATPSmartPointer class
			    //  (the non-const class) to inherit this member.
			    //  The way it's been set up only const stuff
                            //  is being returned so we're OK.
    LgFrReferenceCount count_;

};


class LgFrScenarioForATPSmartPointer : public LgFrScenarioForATPSmartPointerToConst
{

public:
    LgFrScenarioForATPSmartPointer();
    LgFrScenarioForATPSmartPointer(LgFrScenarioForATP*);
    LgFrScenarioForATPSmartPointer(LgFrScenarioForATP*, LgFrReferenceCount&);
    LgFrScenarioForATPSmartPointer(LgFrScenarioSmartPointerToConst);
    ~LgFrScenarioForATPSmartPointer();
    LgFrScenarioForATPSmartPointer(const LgFrScenarioForATPSmartPointer&);
    LgFrScenarioForATPSmartPointer(LgFrScenarioForATPSmartPointerToConst);
    LgFrScenarioForATPSmartPointer deepCopy();
    LgFrScenarioForATPSmartPointer& operator=(const LgFrScenarioForATPSmartPointer&);
    LgFrScenarioForATPSmartPointer& operator=(LgFrScenarioForATPSmartPointerToConst);
    bool operator==(const LgFrScenarioForATPSmartPointer&) const;
    bool operator!=(const LgFrScenarioForATPSmartPointer&) const;

    // these are really dangerous as they circumvent the notion
    //  of using smart pointers anyways.  you had better be using
    //  these just to call another method
    LgFrScenarioForATP& operator*();
    const LgFrScenarioForATP& operator*() const;
    LgFrScenarioForATP* const operator->();
    const LgFrScenarioForATP* const operator->() const;
    operator LgFrScenarioSmartPointerToConst () const;
    operator LgFrScenarioSmartPointer ();

    bool unique() const;
    bool null() const;
    static void test();
};

#endif

@


1.1
log
@Initial revision
@
text
@d3 2
a5 1
#include <rw/defs.h>
d27 2
a28 2
    RWBoolean operator==(const LgFrScenarioForATPSmartPointerToConst&) const;
    RWBoolean operator!=(const LgFrScenarioForATPSmartPointerToConst&) const;
d33 2
a34 2
    RWBoolean unique() const;
    RWBoolean null() const;
d62 2
a63 2
    RWBoolean operator==(const LgFrScenarioForATPSmartPointer&) const;
    RWBoolean operator!=(const LgFrScenarioForATPSmartPointer&) const;
d75 2
a76 2
    RWBoolean unique() const;
    RWBoolean null() const;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d4 1
d26 2
a27 2
    bool operator==(const LgFrScenarioForATPSmartPointerToConst&) const;
    bool operator!=(const LgFrScenarioForATPSmartPointerToConst&) const;
d32 2
a33 2
    bool unique() const;
    bool null() const;
d61 2
a62 2
    bool operator==(const LgFrScenarioForATPSmartPointer&) const;
    bool operator!=(const LgFrScenarioForATPSmartPointer&) const;
d74 2
a75 2
    bool unique() const;
    bool null() const;
@

