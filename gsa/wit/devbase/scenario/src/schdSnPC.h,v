head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.45;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.35;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_SCHEDULE_SENSITIVE_PAIR_COMPARE_H
#define LGFR_SCHEDULE_SENSITIVE_PAIR_COMPARE_H
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/pairComp.h>
#include <scenario/src/idnumber.h>
#include <scenario/src/sortSchP.h>

// This is a Class for implementing 
// Comparison Strategies used for sorting
// LgFrSortingSchedule.

// This class is used when sorting ItemTimeVecPairs on values found
// in a seperate schedule.

// Forward references
class LgFrSortingScheduleFloat;
class LgFrSortingScheduleFloatSmartPointerToConst;
class LgFrSortingScheduleFloatSmartPointer;
class LgFrTimeVecCompareFloat;
class LgFrSortingPartScheduleFloat;
class LgFrSortingPartScheduleFloatSmartPointerToConst;
class LgFrSortingPartScheduleFloatSmartPointer;

class LgFrScheduleSensitivePairCompareFloat : 
   public LgFrPairCompareFloat    {
public:

  // Compare two ItemTimeVecPairFloat's
  // return 0 if equal
  //        <0 if first less than second
  //        >0 if first greater than second
  virtual
    int
      itemTimeVecPairCompareFloat(
         const LgFrItemTimeVecPairFloat &,
         const LgFrItemTimeVecPairFloat &)
           const;
           
  // Set Schedule containing values to be sorted on
  // A pointer to this schedule is kept by this object.
  // The life of the schedule must be greater than the live of this object.
  virtual
     void
        schedule(
           LgFrSortingScheduleFloatSmartPointer );

  // Get Schedule containing values to be sorted on
  virtual
     LgFrSortingScheduleFloatSmartPointerToConst
        schedule()
           const;

  // Set timeVec pair compare object.
  // This object contains the method used for comparing timeVecs
  // in schedule.
  //
  // Initial value is LgFrTimeVecCompareFloat
  virtual
     void
        timeVecCompareFloat(
           const LgFrTimeVecCompareFloat & );

  // Get timeVec pair compair object.
  virtual
     const LgFrTimeVecCompareFloat *
       timeVecCompareFloat()
          const;

  // Make clone copy of this object
  virtual
     LgFrPairCompareFloat *
        clone() 
           const;

  // Make clone copy of this object with new Scenario
  virtual
     LgFrPairCompareFloat *
        clone(LgFrScenario &) 
           const;

  // Assignment operator
  LgFrScheduleSensitivePairCompareFloat &
    operator=(
	      const LgFrScheduleSensitivePairCompareFloat& rhs);

  // Copy constructor
  LgFrScheduleSensitivePairCompareFloat (
     const LgFrScheduleSensitivePairCompareFloat &);

  // Copy constructor with new Scenario
  LgFrScheduleSensitivePairCompareFloat (
     const LgFrScheduleSensitivePairCompareFloat &,
     LgFrScenario &);

  // Constructor
  LgFrScheduleSensitivePairCompareFloat ();

  // Destructor
  ~LgFrScheduleSensitivePairCompareFloat ();

  // test this class
  static void test();

  // test LgFrScheduleSensitivePairCompareFloat methods.
  // Expects testScenario and testScenario2 to contain data from
  // /u/implode/wit/data/brenda/denise/wit.data
  static
  void
  contextTest
    (
     LgFrScenario & testScenario,
     LgFrLastProblemSolved & lps,		// testScenario's
     LgFrSortingPartScheduleFloatSmartPointer criticalSchedule, // testScenario's,
                                                      // these values will be
                                                      // used for sorting
                                                      // a supply and production
                                                      // schedule
     LgFrSortingPartScheduleFloatSmartPointer supplySchedule,   // testScenario's,
                                                      // this schedule will be
                                                      // sorted by
                                                      // critical value
     LgFrSortingPartScheduleFloatSmartPointer productionSchedule, // testScenario's,
                                                      // this schedule will be
                                                      // sorted by max
                                                      // critical value
     LgFrScenario & testScenario2,		// used to test clone(scenario)
     						// method
     LgFrLastProblemSolved & lps2);		// testScenario2's

private:

  LgFrSortingScheduleFloatSmartPointer   schedulePtr_;
  LgFrTimeVecCompareFloat  *   timeVecCompareFloatPtr_;
  const isAReturnType          id_;

  // Copy constructor used by clone
  LgFrScheduleSensitivePairCompareFloat (
     const LgFrScheduleSensitivePairCompareFloat*);
};

#endif
@


1.1
log
@Initial revision
@
text
@d3 2
a80 6
           const;

  // Return Comparison Strategy Identifier
  virtual
     isAReturnType
        isA()
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d79 6
@

