head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.46;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.48;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.48;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.36;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LgFrSetOfParts_h
#define LgFrSetOfParts_h

// RW2STL -- inserted:
#include <map>
#include <string>
// End of RW2STL -- inserted includes.
// Set of Parts
// Authors: Wally and Jung-Mu

// This class has three primary responsibilities:
// 1. Hold a sequenced set of all of the parts
// 2. Provide a mapping from part-name to part.
// 3. Provide a mapping from part-index to part.
// Parts are inserted into this set by another object (LgFrScenario,
// generally); the other object is responsible for putting the parts
// into the sequenced set so that they are at the right place.

// The class LgFrSetOfParts is an abstract base class for
// LgFrSetOfPartsWithMovableParts and LgFrSetOfPartsWithUnmovableParts.
  
// LgFrSetOfPartsWithMovableParts:
// This is a value-based set.  (See Tools.h++ manual for definition of
// value-based. It has better performance than LgFrSetOfPartsWithUnmovableParts
// so it should be used when possible.

// LgFrSetOfPartsWithUnmovableParts:
// This set is used for the universalSetOfParts in scenario.h.  The parts
// stored by this set are not moved in memory, so it is OK to maintain a
// pointer to a part obtained from this set.  Part pointers should be obtained
// from this set when creating a demand.



#include <scenario/src/generVc.h>


class  LgFrSetOfParts
{
public:

  // Create a new part and insert it in the collection.
  virtual
     LgFrPart
        newPart( 
           const std::string& );

  // Returns true if part is in set.
  virtual
     bool
       contains( 
         const LgFrPart )
           const; 
   
  // Add part p to the end of the collection
  virtual
    void
      insert (const LgFrPart p);

  // Add part p to the collection at position index.  Everything afterwards
  // is shifted to a higher index.
  virtual
    void
      insertAt (const size_t index,
                const LgFrPart p);

  // Return a pointer to the part whose name is partName.
  // You can call this member function
  // with a char* or a std::string.
  // Note: Having this return a LgFrPart* is consistent with Rogue Waves'
  virtual
    const LgFrPart*
      findValue (const std::string& partName)
        const;

  // Increase the amount of storage allocated to the set
  virtual
    void
      reserve (const size_t newCapacity);

  // Number of parts currently in set
  virtual
    size_t
      size()
        const = 0;

  // Return the i'th part in the set
  const LgFrPart & 
    operator[]
      ( size_t i )
        const;
  virtual
    LgFrPart &
      operator[]
        ( size_t i )
          = 0;

  // Display part data for xcdb()
  virtual void xcdb() const = 0;
  virtual void xcdb() = 0;

  // Destructor
  virtual
    ~LgFrSetOfParts();

    // Assignment operator
  LgFrSetOfParts &
    operator=(
	      const LgFrSetOfParts& rhs);

  // Copy constructor
  LgFrSetOfParts (const LgFrSetOfParts &);

  // Constructor for a set expected to have up to n parts
  // (and default constructor)
  LgFrSetOfParts (const size_t n = DEFAULT_VECTOR_CAPACITY);

protected:

  // Remove the entries in the dictionary and free the keys
  virtual
    void
      clearDictionary();

  // Refresh the dictionary
  virtual
    void
      refreshDictionary() = 0;

  // Insert the part at partVec_[i] into the dictionary.
  virtual
    void
      dictionaryInsert (const size_t index);

private:
  
  // Add part p to the end of the sequenced set. Returns true if the vector had to move in memory
  virtual
    bool
      sequencedSetInsert (const LgFrPart p) = 0;

  // Add part p to the sequenced set at position index.  Everything afterwards
  // is shifted to a higher index.
  virtual
    bool
      sequencedSetInsertAt (const size_t index,
	                    const LgFrPart p) = 0;

  // Resize the sequenced set
  virtual
    void
      sequencedSetReserve (const size_t newCapacity) = 0;
  
  size_t minBuckets_;           // Minimum number of buckets in dictionary
                                // and actual capacity of this set.

  typedef std::pair<std::string,LgFrPartPtr> NameItemPair;
  typedef std::map<std::string,LgFrPartPtr> NameItemDictionary;
  NameItemDictionary nameToItem_;	// Used to implement the mapping from 
					// part-name to part.  The key is an 
					// std::string* and the value
					// is a "part*"
  

};



class LgFrSetOfPartsWithMovableParts
:  public   LgFrSetOfParts
  
{
public:

  // Increase the amount of storage allocated to the set
  void
    reserve (const size_t newCapacity);

  // Number of parts currently in set
  virtual
    size_t
      size()
        const;
  
  // Return the i'th part in the set
  virtual
    LgFrPart &
      operator[]
        ( size_t i );
  
  // Display part data for xcdb()
  void xcdb() const;
  void xcdb();

  // Destructor
  virtual
    ~LgFrSetOfPartsWithMovableParts();

  // Assignment operator
  LgFrSetOfPartsWithMovableParts &
    operator=(
	      const LgFrSetOfPartsWithMovableParts& rhs);

  // Copy constructor
  LgFrSetOfPartsWithMovableParts (const LgFrSetOfPartsWithMovableParts &);

  // Constructor for a set expected to have up to n parts (and default constructor)
  LgFrSetOfPartsWithMovableParts (const size_t n = DEFAULT_VECTOR_CAPACITY);

  // test this class
  static void test();

 
private:

  // Refresh the dictionary
  virtual
    void
      refreshDictionary();

  // Add part p to the end of the collection
  bool
    sequencedSetInsert (const LgFrPart p);

  // Add part p to the collection at position index.  Everything afterwards
  // is shifted to a higher index.
  bool
    sequencedSetInsertAt (const size_t index,
	      const LgFrPart p);

  // Resize the sequenced set
  void
    sequencedSetReserve (const size_t newCapacity);
  
  LgFrPartVector	partVec_;       // Used to store parts in this set.
                                        // This is implements
                                        // the sequenced set of parts.

					
};


class LgFrSetOfPartsWithUnmovableParts
:  public   LgFrSetOfParts
  
{
public:

  // Number of parts currently in set
  virtual
    size_t
      size()
        const;
  
  // Return the i'th part in the set
  virtual
    LgFrPart &
      operator[]
        ( size_t i );
  
  // Display part data for xcdb()
  void xcdb() const;
  void xcdb();

  // Destructor
  virtual
    ~LgFrSetOfPartsWithUnmovableParts();

  // Assignment operator
  LgFrSetOfPartsWithUnmovableParts &
    operator=(
	      const LgFrSetOfPartsWithUnmovableParts& rhs);

  // Copy constructor
  LgFrSetOfPartsWithUnmovableParts (const LgFrSetOfPartsWithUnmovableParts &);

  // Constructor for a set expected to have up to n parts (and default constructor)
  LgFrSetOfPartsWithUnmovableParts (const size_t n = DEFAULT_VECTOR_CAPACITY);

  // test this class
  static void test();


private:

  // Refresh the dictionary
  virtual
    void
      refreshDictionary();

  // Add part p to the end of the collection
  bool
    sequencedSetInsert (const LgFrPart p);

  // Add part p to the collection at position index.  Everything afterwards
  // is shifted to a higher index.
  bool
    sequencedSetInsertAt (const size_t index,
	      const LgFrPart p);

  // Resize the sequenced set
  void
    sequencedSetReserve (const size_t newCapacity);
  
  LgFrPartPtrVector partPtrVec_;    // Used to store pointers to
                                           // unmoveable parts in this set.
                                           // This is implements
                                           // the sequenced set of parts.
					
};

#endif
@


1.1
log
@Initial revision
@
text
@d1 7
a10 3
#ifndef LgFrSetOfParts_h
#define LgFrSetOfParts_h

a33 2
#include <rw/hashdict.h>
#include <rw/collstr.h>
d46 1
a46 1
           const RWCString );
d50 1
a50 1
     RWBoolean
d69 1
a69 1
  // with a char* or a RWCString.
d73 1
a73 1
      findValue (const RWCString partName)
a75 6
  // Resize if the amount of space allocated for the hash table
  // is below generally accepted guidelines for good performance.
  virtual
    void
      resizeIfAboveGuidelines();

d79 1
a79 1
      resize (const size_t newCapacity);
d84 1
a84 1
      entries()
d116 1
a116 1
  LgFrSetOfParts (const size_t n = RWDEFAULT_CAPACITY);
d120 6
a125 1
  // Remove the entries in the hash table and free the keys
d128 1
a128 1
      clearDictionaryAndFreeKeys();
d130 1
a130 1
  // Insert the part at partVec_[i] into the hash table.
d133 1
a133 1
      hashDictionaryInsert (const size_t index);
d137 1
a137 1
  // Add part p to the end of the sequenced set
d139 1
a139 1
    void
d145 1
a145 1
    void
d152 1
a152 1
      sequencedSetResize (const size_t newCapacity) = 0;
d154 1
a154 1
  size_t minBuckets_;           // Minimum number of buckets in hash table
d157 3
a159 1
  RWHashDictionary nameToItem_;		// Used to implement the mapping from 
d161 1
a161 1
					// RWCollectableString* and the value
d177 1
a177 1
    resize (const size_t newCapacity);
d182 1
a182 1
      entries()
d208 1
a208 1
  LgFrSetOfPartsWithMovableParts (const size_t n = RWDEFAULT_CAPACITY);
d216 5
d222 1
a222 1
  void
d227 1
a227 1
  void
d233 1
a233 1
    sequencedSetResize (const size_t newCapacity);
d235 1
a235 1
  LgFrOrderedVectorPart	partVec_;       // Used to store parts in this set.
d252 1
a252 1
      entries()
d278 1
a278 1
  LgFrSetOfPartsWithUnmovableParts (const size_t n = RWDEFAULT_CAPACITY);
d286 5
d292 1
a292 1
  void
d297 1
a297 1
  void
d303 1
a303 1
    sequencedSetResize (const size_t newCapacity);
d305 1
a305 1
  LgFrOrderedVectorPartPtr partPtrVec_;    // Used to store pointers to
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 3
a6 7
// RW2STL -- inserted:
#include <map>
#include <string>
// End of RW2STL -- inserted includes.
// Set of Parts
// Authors: Wally and Jung-Mu

d30 2
d44 1
a44 1
           const std::string& );
d48 1
a48 1
     bool
d67 1
a67 1
  // with a char* or a std::string.
d71 1
a71 1
      findValue (const std::string& partName)
d74 6
d83 1
a83 1
      reserve (const size_t newCapacity);
d88 1
a88 1
      size()
d120 1
a120 1
  LgFrSetOfParts (const size_t n = DEFAULT_VECTOR_CAPACITY);
d124 1
a124 6
  // Remove the entries in the dictionary and free the keys
  virtual
    void
      clearDictionary();

  // Refresh the dictionary
d127 1
a127 1
      refreshDictionary() = 0;
d129 1
a129 1
  // Insert the part at partVec_[i] into the dictionary.
d132 1
a132 1
      dictionaryInsert (const size_t index);
d136 1
a136 1
  // Add part p to the end of the sequenced set. Returns true if the vector had to move in memory
d138 1
a138 1
    bool
d144 1
a144 1
    bool
d151 1
a151 1
      sequencedSetReserve (const size_t newCapacity) = 0;
d153 1
a153 1
  size_t minBuckets_;           // Minimum number of buckets in dictionary
d156 1
a156 3
  typedef std::pair<std::string,LgFrPartPtr> NameItemPair;
  typedef std::map<std::string,LgFrPartPtr> NameItemDictionary;
  NameItemDictionary nameToItem_;	// Used to implement the mapping from 
d158 1
a158 1
					// std::string* and the value
d174 1
a174 1
    reserve (const size_t newCapacity);
d179 1
a179 1
      size()
d205 1
a205 1
  LgFrSetOfPartsWithMovableParts (const size_t n = DEFAULT_VECTOR_CAPACITY);
a212 5
  // Refresh the dictionary
  virtual
    void
      refreshDictionary();

d214 1
a214 1
  bool
d219 1
a219 1
  bool
d225 1
a225 1
    sequencedSetReserve (const size_t newCapacity);
d227 1
a227 1
  LgFrPartVector	partVec_;       // Used to store parts in this set.
d244 1
a244 1
      size()
d270 1
a270 1
  LgFrSetOfPartsWithUnmovableParts (const size_t n = DEFAULT_VECTOR_CAPACITY);
a277 5
  // Refresh the dictionary
  virtual
    void
      refreshDictionary();

d279 1
a279 1
  bool
d284 1
a284 1
  bool
d290 1
a290 1
    sequencedSetReserve (const size_t newCapacity);
d292 1
a292 1
  LgFrPartPtrVector partPtrVec_;    // Used to store pointers to
@

