head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.45;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.35;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.40;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/schdSnFS.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/supplySS.h>
#include <scenario/src/scenario.h>
#include <scenario/src/partSchP.h>

// Do Filtering
bool
LgFrScheduleSensitiveFilterStrategy::exclude(
   const LgFrItemTimeVecPairFloat & itvpf)
const
{
   return ! schedulePtr_->contains( itvpf.item() );
}


// Set Schedule containing values to be used for filtering
void
LgFrScheduleSensitiveFilterStrategy::schedule(
   LgFrSortingScheduleFloatSmartPointer schedule )
{
   if ( !schedulePtr_.null() ) schedulePtr_->removeDependentFromHeterogeneousList( this );
   schedulePtr_ = schedule;
   schedulePtr_->addDependent( this );
}


// Get Schedule containing values to used for filtering
LgFrSortingScheduleFloatSmartPointerToConst
LgFrScheduleSensitiveFilterStrategy::schedule()
const
{
   return schedulePtr_;
}

// Make clone copy of object
LgFrFilterStrategy*
LgFrScheduleSensitiveFilterStrategy::clone()
const
{
  // shallow copy the dependencies
  LgFrScheduleSensitiveFilterStrategy* temp = 
      new LgFrScheduleSensitiveFilterStrategy(*this);



  // remove dependency of schedule
  temp->schedulePtr_->removeDependentFromHeterogeneousList(temp);

  // make a deep copy of the sensitive schedule
  // cast away const
  temp->schedulePtr_ = ((LgFrSortingScheduleFloatSmartPointer&)schedulePtr_).deepCopy();

  // add dependency of new deep copied schedule
  temp->schedulePtr_->addDependent(temp);

  return temp;
}

// Make clone copy of object with new Scenario
LgFrFilterStrategy*
LgFrScheduleSensitiveFilterStrategy::clone(LgFrScenario & newScenario)
const
{
  // shallow copy the dependencies but deep copy the schedule
  LgFrScheduleSensitiveFilterStrategy* temp = 
      new LgFrScheduleSensitiveFilterStrategy(*this, newScenario);
  return temp;
}

// Assignment operator
LgFrScheduleSensitiveFilterStrategy &
LgFrScheduleSensitiveFilterStrategy::operator=(
			  const LgFrScheduleSensitiveFilterStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
     (this->LgFrFilterStrategy::operator= ) (rhs);
     if ( !schedulePtr_.null() )   {
        schedulePtr_->removeDependentFromHeterogeneousList( this );
      }

     schedulePtr_ = rhs.schedulePtr_;

     if ( !schedulePtr_.null() ) schedulePtr_->addDependent( this );
  }
  return *this;
}

// Copy constructor
LgFrScheduleSensitiveFilterStrategy::
   LgFrScheduleSensitiveFilterStrategy (
      const LgFrScheduleSensitiveFilterStrategy & source)
:  
   LgFrFilterStrategy( source ),
   schedulePtr_( source.schedulePtr_ ),
   id_(__LGFRSCHEDULESENSITIVEFILTERSTRATEGY)
{
  if ( !schedulePtr_.null() ) schedulePtr_->addDependent( this );
}

// Copy constructor with new Scenario
LgFrScheduleSensitiveFilterStrategy::
   LgFrScheduleSensitiveFilterStrategy (
      const LgFrScheduleSensitiveFilterStrategy & source, 
      LgFrScenario & newScenario)
:  
   LgFrFilterStrategy( source, newScenario ),
   schedulePtr_(0),
   id_(__LGFRSCHEDULESENSITIVEFILTERSTRATEGY)
{
  if ( !(source.schedulePtr_.null())  )  {
     schedulePtr_ = (LgFrSortingScheduleFloatSmartPointerToConst)(source.schedulePtr_->clone(newScenario));
     schedulePtr_->addDependent( this );
   }
}


// Default Constructor
LgFrScheduleSensitiveFilterStrategy::
   LgFrScheduleSensitiveFilterStrategy ()
:  
   LgFrFilterStrategy(),
   id_(__LGFRSCHEDULESENSITIVEFILTERSTRATEGY),
   schedulePtr_(0)
{
  // Nothing to do here
}

// Destructor
LgFrScheduleSensitiveFilterStrategy::
   ~LgFrScheduleSensitiveFilterStrategy ()
{
   if ( !schedulePtr_.null() ) schedulePtr_->removeDependentFromHeterogeneousList( this );
}



#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrScheduleSensitiveFilterStrategy methods.
void
LgFrScheduleSensitiveFilterStrategy::test()
{
  LgFrScheduleSensitiveFilterStrategy cs1;
  assert( cs1.schedulePtr_.null() );
}


// test LgFrScheduleSensitiveFilterStrategy methods.
// Expects testScenario to contain data from
// /u/implode/wit/data/brenda/denise/wit.data
// Expects criticalSchedule to be a critical supply schedule for testScenario
// (containing a LgFrCriticalPartScheduleStrategy)
// Expects supplySchedule to be a supply schedule for testScenario
// (containing a LgFrSupplyScheduleStrategy)
void
LgFrScheduleSensitiveFilterStrategy::contextTest
    (
     LgFrScenario & testScenario,
     LgFrLastProblemSolved & lps,
     LgFrSortingPartScheduleFloatSmartPointer criticalSchedule, // these values will be
                                                      // used for filtering
                                                      // a supply
     LgFrSortingPartScheduleFloatSmartPointer supplySchedule    // this schedule will be
                                                      // filtered by
                                                      // criticalSchedule
     )
{
std::cerr << "entering LgFrScheduleSensitiveFilterStrategy::contextTest" << std::endl;
  int i;
  LgFrScheduleSensitiveFilterStrategy cs1;

  // Test setting getting schedule
  assert( cs1.schedule().null() );
  cs1.schedule( criticalSchedule );
  assert( cs1.schedule() == criticalSchedule );

  // Test copy constructor
  LgFrScheduleSensitiveFilterStrategy cs2(cs1);
  assert( cs2.schedule() == criticalSchedule );

  // Test assignment operator
  LgFrScheduleSensitiveFilterStrategy cs3;
  cs3 = cs2;
  assert( cs3.schedule() == criticalSchedule );

  // Test clone method
  {
    LgFrFilterStrategy *cs4Ptr = cs1.clone();

    // since clone is a deep copy, need to compare the actual schedules
    //  item by item
    assert( *(  (LgFrScheduleSensitiveFilterStrategy *) cs4Ptr)
            ->schedule() 
            == *criticalSchedule );
    
    // Test destructor
    delete cs4Ptr;
  }

  // Filter supply scheulde by critical value
  supplySchedule->filterStrategy(cs3);
  supplySchedule->populate();

  // Supply schedule should now be empty, because there aren't any critical
  // parts. ( critical parts only exist after an implosion ).
  assert( supplySchedule->size() == 0 );

  // Do implosion and populate criticalSchedule and supplySchedule.
  lps.computeCriticalList(true);
  testScenario.newImplosionSolution();

  // Test exclude
  LgFrPart tmpPart ("abclksjd");
  LgFrItemTimeVecPairFloat itvp1( tmpPart,
                                  LgFrTimeVecFloat(2,2.) );
  assert( cs1.exclude( itvp1 ) );
  
  assert( criticalSchedule->size()>5 );
  {
    LgFrSortingPartScheduleFloatSmartPointerToConst constCriticalSchedule = criticalSchedule;
    LgFrItemTimeVecPairFloat itvp2( (*constCriticalSchedule)[4].part(), 
                                    LgFrTimeVecFloat(2,2.) );
    assert( !cs1.exclude( itvp2 ) );
  }


  // Test to make sure supply is filtered to exclude non-critical parts
  {
    LgFrSortingPartScheduleFloatSmartPointerToConst constSupplySchedule = supplySchedule;
    for ( i=0; i<supplySchedule->size(); i++ ){
      assert( criticalSchedule->contains( (*constSupplySchedule)[i].item() ) );
    }
  }
  // std::cerr <<"Critical schedule"
  //      <<std::endl
  //      <<criticalSchedule.format()
  //      <<std::endl;
  // std::cerr <<"Supply schedule filtered by Critical parts"
  //      <<std::endl
  //      <<supplySchedule.format(criticalSchedule)
  //      <<std::endl;

  // Test scenario copy constructor - deep copy 
  LgFrScheduleSensitiveFilterStrategy scenCtor(cs1,testScenario);
  assert( !scenCtor.schedulePtr_.null() );
  assert( scenCtor.schedulePtr_ != cs1.schedulePtr_ );
  assert( *(scenCtor.schedulePtr_) == *(cs1.schedulePtr_) );

  // Test copy constructor when filter strategy owns the schedule
  LgFrScheduleSensitiveFilterStrategy cs5(scenCtor);
  assert( cs5.schedule() != criticalSchedule );


  // Test cloning w/scenario 
  //  since cloning is a deep copy, we have to check the schedule
  //    not just the Smart Pointer equality
  LgFrFilterStrategy *cs6Ptr = cs1.clone(testScenario);

// check that the schedules are equivalent but not exactly the same
  assert( *(((LgFrScheduleSensitiveFilterStrategy *)cs6Ptr)->schedule())
          == *criticalSchedule );
  assert( ((LgFrScheduleSensitiveFilterStrategy *)cs6Ptr)->schedule()
          != criticalSchedule );
  assert( *(((LgFrScheduleSensitiveFilterStrategy *)cs6Ptr)->schedule()) 
          == *(cs1.schedule()) );
  assert( ((LgFrScheduleSensitiveFilterStrategy *)cs6Ptr)->schedule()
          != cs1.schedule() );

  delete cs6Ptr;
std::cerr << "exiting LgFrScheduleSensitiveFilterStrategy::contextTest" << std::endl;
}

@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
#include <iostream.h>
d13 1
a13 1
RWBoolean
a75 8
// Return comparison strategy identifier
isAReturnType
LgFrScheduleSensitiveFilterStrategy::isA()
const
{
   return id_;
}

a80 1
  assert( id_ == rhs.id_ );
a102 1
  assert( id_ == source.id_ );
d113 1
a113 1
   schedulePtr_(NULL),
a115 1
  assert( id_ == source.id_ );
d129 1
a129 1
   schedulePtr_(NULL)
a150 1
  assert( cs1.id_ == __LGFRSCHEDULESENSITIVEFILTERSTRATEGY );
a151 1
  assert( cs1.isA() == __LGFRSCHEDULESENSITIVEFILTERSTRATEGY );
d175 1
a175 1
cerr << "entering LgFrScheduleSensitiveFilterStrategy::contextTest" << endl;
a185 1
  assert( cs2.isA() == __LGFRSCHEDULESENSITIVEFILTERSTRATEGY );
a190 1
  assert( cs3.isA() == cs2.isA() );
a195 1
    assert( cs4Ptr->isA() == cs1.isA() );
d213 1
a213 1
  assert( supplySchedule->entries() == 0 );
d216 1
a216 1
  lps.computeCriticalList(TRUE);
d225 1
a225 1
  assert( criticalSchedule->entries()>5 );
d237 1
a237 1
    for ( i=0; i<supplySchedule->entries(); i++ ){
d241 2
a242 2
  // cerr <<"Critical schedule"
  //      <<endl
d244 3
a246 3
  //      <<endl;
  // cerr <<"Supply schedule filtered by Critical parts"
  //      <<endl
d248 1
a248 1
  //      <<endl;
a251 1
  assert( scenCtor.id_ == __LGFRSCHEDULESENSITIVEFILTERSTRATEGY );
a257 1
  assert( cs5.isA() == __LGFRSCHEDULESENSITIVEFILTERSTRATEGY );
a264 1
  assert( cs6Ptr->isA() == cs1.isA() );
d277 1
a277 1
cerr << "exiting LgFrScheduleSensitiveFilterStrategy::contextTest" << endl;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
d10 1
a10 1
bool
d73 8
d86 1
d109 1
d120 1
a120 1
   schedulePtr_(0),
d123 1
d137 1
a137 1
   schedulePtr_(0)
d159 1
d161 1
d196 1
d202 1
d208 1
d226 1
a226 1
  assert( supplySchedule->size() == 0 );
d229 1
a229 1
  lps.computeCriticalList(true);
d238 1
a238 1
  assert( criticalSchedule->size()>5 );
d250 1
a250 1
    for ( i=0; i<supplySchedule->size(); i++ ){
d265 1
d272 1
d280 1
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d175 1
a175 1
std::cerr << "entering LgFrScheduleSensitiveFilterStrategy::contextTest" << std::endl;
d241 2
a242 2
  // std::cerr <<"Critical schedule"
  //      <<std::endl
d244 3
a246 3
  //      <<std::endl;
  // std::cerr <<"Supply schedule filtered by Critical parts"
  //      <<std::endl
d248 1
a248 1
  //      <<std::endl;
d277 1
a277 1
std::cerr << "exiting LgFrScheduleSensitiveFilterStrategy::contextTest" << std::endl;
@


