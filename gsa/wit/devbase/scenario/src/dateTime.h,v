head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.4
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.2
	sce_4_20_OSL:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2003.08.05.12.35.02;	author dpc;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.15.19.36.29;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.08.17.40.21;	author rwToStl;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.01.08.17.40.21;	author rwToStl;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.01.09.13.54.43;	author rwToStl;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.01.09.19.28.00;	author rwToStl;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.01.09.19.42.09;	author rwToStl;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2003.01.14.19.05.41;	author rwToStl;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2003.01.14.21.11.11;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Changed output formats of date and time.
@
text
@#ifndef sceDateTime_h 
#define sceDateTime_h 

#include <string>
#include <iostream>
#include <time.h>

// As a general rule, the LgFrDatetime methods do not check for valid dates. 
// The class provides an IsValid() method to verify error conditions, and it
// should be called after every call that modifies the object

class LgFrDatetime
{
  time_t time_; // Always number of seconds since jan 1st 1970, same as time()

public:

  LgFrDatetime( time_t s = 0 ); // passing-in LgFrDatetime::currentTime() constructs it as now
  LgFrDatetime( const LgFrDatetime& t );
  LgFrDatetime( const std::string& date, const std::string& time = "" );

  // accessors - all const methods
  bool isValid() const { return time_ != 0; }

  // No assumption should be made about the units returned by getValue.
  // getValue() and setValue() are only provided so you can make date arithmetics
  // with no regards to seconds, months, years etc...
  time_t getValue() const {return time_;}

  // This formats with a default, but you can provide an alternate format.
  // see documentation on "strftime"
  std::string getDateAsString( const std::string& format = "%m/%d/%y" ) const;
  std::string getDateAsStraightString() const { return getDateAsString( "%Y%m%d" ); };
  std::string getTimeAsString( const std::string& format = "%H:%M:%S" ) const;

  void getDate( int& month, int& day, int& year ) const;
  void getTime( int& hour, int& min, int& sec ) const;
  void getDatetime( int& month, int& day, int& year, int& hour, int& min, int& sec ) const;

  int  getHour() const;      // 0-23
  int  getMin() const;       // 0-59
  int  getSec() const;       // 0-59
  int  getDayOfWeek() const; // Sunday = 0
  int  getDayOfMonth() const;// 1-31
  int  getDayOfYear() const; // Jan 1st = 0
  int  getDayJulian() const; // 1-?
  int  getMonth() const;     // 1-12
  int  getYear() const;      // 0 - 38 representing 2000-2038, 70 - 99 representing 1970 to 1999
  int  getLongYear() const;  // 1970-2038

  friend std::ostream& operator<<(std::ostream&, const LgFrDatetime&);

  // modifiers
  void clear() { time_ = 0; }

  void setTime( int h, int m, int s );
  void setTime( const std::string& hms ); // expected format: hh:mm:ss

  void setDate( int month, int day, int year );
  void setDate( const std::string& mdy ); // expected format: mm/dd/yy OR yyyymmdd

  void setValue( time_t secs ) { time_ = secs; }

  // operators
  LgFrDatetime& operator=(const LgFrDatetime& t) { time_ = t.time_; return *this; }

  bool   operator==( const LgFrDatetime& t ) const { return time_ == t.time_; }
  bool   operator< ( const LgFrDatetime& t ) const { return time_ < t.time_; }
  bool   operator> ( const LgFrDatetime& t ) const { return time_ > t.time_; }
  bool   operator>=( const LgFrDatetime& t ) const { return time_ >= t.time_; }
  bool   operator<=( const LgFrDatetime& t ) const { return time_ <= t.time_; }

  LgFrDatetime operator-(const LgFrDatetime& t) { return( time_ - t.time_ ); }
  LgFrDatetime operator+(const LgFrDatetime& t) { return( time_ + t.time_ ); }

  LgFrDatetime plusYears( int y ) const;
  LgFrDatetime plusQuarters( int q ) const;
  LgFrDatetime plusMonths( int m ) const;
  LgFrDatetime plusWeeks( int w ) const;
  LgFrDatetime plusDays( int d ) const;
  LgFrDatetime plusHours( int h ) const;
  LgFrDatetime plusMinutes( int m ) const;
  LgFrDatetime plusSeconds( int s ) const;

  // general services
  static  bool   validateDate( int month, int day, int year );
  static  bool   validateTime( int hours, int mins, int seconds );
  static  time_t currentTime() { return ::time(0); }

  static  bool   unitTest();

private:

  const struct tm& getAsStruct_tm() const;

  static bool isLeapYear( size_t y ) { return ( y % 400 == 0 || (y % 4 == 0 && y % 100 != 0 )); }
  static long julian_date(int day, int month, int year);
  static void calendar_date(long jdate, int& day, int& month, int& year);
  static bool valid_date(int day, int month, int year);

};


#endif

@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d32 1
a32 1
  std::string getDateAsString( const std::string& format = "%#m/%#d/%#y" ) const;
d34 1
a34 1
  std::string getTimeAsString( const std::string& format = "%#H:%M:%S" ) const;
@


1.1
log
@file dateTime.h was initially added on branch EndRw-branch.
@
text
@d1 105
@


1.1.2.1
log
@New files for RWTime & RWDate replacements
@
text
@a0 95
#ifndef sceDateTime_h 
#define sceDateTime_h 

#include <string>
#include <time.h>

#include <ostream.h> // for cout and cerr

class SCEDate;

class SCETime
{

public:

//  SCETime()                  : secs_( SCETime::currentTime() ) {}  
  SCETime( unsigned long s )  : secs_( s) {}  
  SCETime( const SCETime& t = SCETime::currentTime() ) : secs_( t.secs_ ) {}

  SCETime( const SCEDate&, unsigned h=0, unsigned m=0, unsigned s=0 );
  SCETime( const SCEDate&, const std::string& str );

  SCETime& operator=(const SCETime& t) { secs_ = t.secs_; return *this; }

  bool     isValid() const { return secs_ != 0; }

  unsigned long seconds() const {return secs_;}

  bool   operator==( const SCETime& t ) { return secs_ == t.secs_; }
  bool   operator< ( const SCETime& t ) const { return secs_ < t.secs_; }
  bool   operator> ( const SCETime& t ) const { return secs_ > t.secs_; }
  bool   operator>=( const SCETime& t ) { return secs_ >= t.secs_; }
  bool   operator<=( const SCETime& t ) { return secs_ <= t.secs_; }

  SCETime operator-(unsigned long s) { return( secs_ - s ); }
  SCETime operator+(unsigned long s) { return( secs_ + s ); }

  static  unsigned long currentTime() { return time(0); }

  static bool unitTest();
private:
  // the number of seconds elapsed since midnight (00:00:00), January 1, 1970
  unsigned long         secs_; 

};


class SCEDate
{

public:

  SCEDate(unsigned long j) : julday_(j) {;} // Julian day; beware type conversion
  SCEDate(unsigned d, unsigned m, unsigned y);
  SCEDate(const std::string& str);
  SCEDate(const SCETime&);

  std::string asString(char format = 'x') const;

  struct tm toStruct_tm() const;

  unsigned int  day() const;            // 1-365
  unsigned int  dayOfMonth() const;     // 1-31

  bool          isValid() const { return julday_>0; }

  unsigned int  month() const;

  unsigned int  year() const;

  friend ostream& operator<<(ostream&, const SCEDate&);

  const SCEDate& operator+(unsigned long dd) { julday_ += dd; return *this; }

  bool   operator<( const SCEDate& d ) { return julday_ < d.julday_; }
  bool   operator>( const SCEDate& d ) { return julday_ > d.julday_; }

  bool   operator==( const SCEDate& d ) { return julday_ == d.julday_; }

  static  bool   dayWithinMonth(unsigned mon, unsigned day, unsigned yr);

private:
  friend class SCETime;

  unsigned long julday_; // Julian Day Number (not same as Julian date).


  bool isLeapYear( size_t y ) { return ( y % 400 == 0 || (y % 4 == 0 && y % 100 != 0 )); }

};



#endif

@


1.1.2.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d5 1
a5 2
//#include <iosfwd>
#include <iostream>
d7 1
a7 1
#include <time.h>
d47 1
d71 1
a71 1
  friend std::ostream& operator<<(std::ostream&, const SCEDate&);
@


1.1.2.3
log
@Fixed SCETime streaming problems
@
text
@a35 2
  std::string asString() const;

@


1.1.2.4
log
@SCETime now holds a time_t
@
text
@d28 1
a28 1
  time_t seconds() const {return secs_;}
d41 1
a41 1
  static  time_t currentTime() { return time(0); }
d46 1
a46 1
  time_t         secs_; 
@


1.1.2.5
log
@New LgFrDatetime class
@
text
@d5 1
d7 1
d10 3
a12 1
class LgFrDatetime
a13 1
  time_t time_; // Always number of seconds since jan 1st 1970, same as time()
d17 20
a36 71
  LgFrDatetime( time_t s = 0 ); 
  LgFrDatetime( const LgFrDatetime& t );
  LgFrDatetime( const std::string& date, const std::string& time = "" );

  // accessors - all const methods
  bool isValid() const { return time_ != 0; }

  // No assumption should be made about the units returned by getValue.
  // getValue() and setValue() are only provided so you can make date arithmetics
  // with no regards to seconds, months, years etc...
  time_t getValue() const {return time_;}

  // This formats with a default, but you can provide an alternate format.
  // see documentation on "strftime"
  std::string getDateAsString( const std::string& format = "%#m/%#d/%#y" ) const;
  std::string getDateAsStraightString() const { return getDateAsString( "%Y%m%d" ); };
  std::string getTimeAsString( const std::string& format = "%#H:%M:%S" ) const;

  void getDate( int& month, int& day, int& year ) const;
  void getTime( int& hour, int& min, int& sec ) const;
  void getDatetime( int& month, int& day, int& year, int& hour, int& min, int& sec ) const;

  int  getHour() const; // 0-23
  int  getMin() const; // 0-59
  int  getSec() const; // 0-59
  int  getDayOfWeek() const;      // Sunday = 0
  int  getDayOfMonth() const;     // 1-31
  int  getDayOfYear() const;      // Jan 1st = 0
  int  getDayJulian() const;     // 1-?
  int  getMonth() const; // 1-12
  int  getYear() const; // 0 - 38 representing 2000-2038, 70 - 99 representing 1970 to 1999
  int  getLongYear() const; // 1970-2038

  friend std::ostream& operator<<(std::ostream&, const LgFrDatetime&);

  // modifiers
  void clear() { time_ = 0; }

  void setTime( int h, int m, int s );
  void setTime( const std::string& hms ); // expected format: hh:mm::ss

  void setDate( int month, int day, int year );
  void setDate( const std::string& mdy ); // expected format: mm/dd/yy OR mm/dd/yyyy

  void setValue( time_t secs ) { time_ = secs; }

  // operators
  LgFrDatetime& operator=(const LgFrDatetime& t) { time_ = t.time_; return *this; }

  bool   operator==( const LgFrDatetime& t ) const { return time_ == t.time_; }
  bool   operator< ( const LgFrDatetime& t ) const { return time_ < t.time_; }
  bool   operator> ( const LgFrDatetime& t ) const { return time_ > t.time_; }
  bool   operator>=( const LgFrDatetime& t ) const { return time_ >= t.time_; }
  bool   operator<=( const LgFrDatetime& t ) const { return time_ <= t.time_; }

  LgFrDatetime operator-(const LgFrDatetime& t) { return( time_ - t.time_ ); }
  LgFrDatetime operator+(const LgFrDatetime& t) { return( time_ + t.time_ ); }

  LgFrDatetime plusYears( int y ) const;
  LgFrDatetime plusQuarters( int q ) const;
  LgFrDatetime plusMonths( int m ) const;
  LgFrDatetime plusWeeks( int w ) const;
  LgFrDatetime plusDays( int d ) const;
  LgFrDatetime plusHours( int h ) const;
  LgFrDatetime plusMinutes( int m ) const;
  LgFrDatetime plusSeconds( int s ) const;

  // general services
  static  bool   validateDate( int month, int day, int year );
  static  bool   validateTime( int hours, int mins, int seconds );
  static  time_t currentTime() { return ::time(0); }
d38 2
a39 1
  static  bool   unitTest();
d41 3
d45 14
d60 1
a60 1
  const struct tm& getAsStruct_tm() const;
d62 29
a90 4
  static bool isLeapYear( size_t y ) { return ( y % 400 == 0 || (y % 4 == 0 && y % 100 != 0 )); }
  static long julian_date(int day, int month, int year);
  static void calendar_date(long jdate, int *day, int *month, int *year);
  static bool valid_date(int day, int month, int year);
d93 1
@


1.1.2.6
log
@Cleanup and removed assert statements
@
text
@a7 4
// As a general rule, the LgFrDatetime methods do not check for valid dates. 
// The class provides an IsValid() method to verify error conditions, and it
// should be called after every call that modifies the object

d14 1
a14 1
  LgFrDatetime( time_t s = 0 ); // passing-in LgFrDatetime::currentTime() constructs it as now
d36 10
a45 10
  int  getHour() const;      // 0-23
  int  getMin() const;       // 0-59
  int  getSec() const;       // 0-59
  int  getDayOfWeek() const; // Sunday = 0
  int  getDayOfMonth() const;// 1-31
  int  getDayOfYear() const; // Jan 1st = 0
  int  getDayJulian() const; // 1-?
  int  getMonth() const;     // 1-12
  int  getYear() const;      // 0 - 38 representing 2000-2038, 70 - 99 representing 1970 to 1999
  int  getLongYear() const;  // 1970-2038
d53 1
a53 1
  void setTime( const std::string& hms ); // expected format: hh:mm:ss
d56 1
a56 1
  void setDate( const std::string& mdy ); // expected format: mm/dd/yy OR yyyymmdd
d94 1
a94 1
  static void calendar_date(long jdate, int& day, int& month, int& year);
@


