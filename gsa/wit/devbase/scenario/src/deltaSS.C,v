head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.29;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.37;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.37;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.26;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.43;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/cumSS.h>
#include <scenario/src/deltaSS.h>
#include <scenario/src/partSchd.h>
#include <scenario/src/partSchP.h>
#include <scenario/src/scenario.h>


//-----------------------------------------------------------------------
//
//  Implementation of LgFrTwoScheduleDeltaPartScheduleStrategy
//
//-----------------------------------------------------------------------


// Populate Schedule with itemTimeVecs
void
LgFrTwoScheduleDeltaPartScheduleStrategy::kernalOfPopulate(
   LgFrSortingScheduleFloat& schedule )
const
{
  assert( schedules().size() == 2 && 
          "Two Schedule Delta Part Schedule Strategy depends on exactly 2 schedules");

  LgFrPart part;
  LgFrTimeVecFloat tv;
  LgFrItemTimeVecPairFloat itv( part, tv );

  const LgFrSortingScheduleFloat & indepSched1 = *(schedules()[0]);
  const LgFrSortingScheduleFloat & indepSched2 = *(schedules()[1]);

  LgFrSortingScheduleFloat tempSchedule = indepSched1 - indepSched2;
  const  LgFrSortingScheduleFloat & tempSched = tempSchedule;

  // Loop once for each item in independent schedule
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<tempSched.size(); i++ ) {

     // get next itemTimeVec
     itv = tempSched[i];

     // Check to see if i'th itemTimeVec is to be filtered out
     if ( schedule.filterStrategy().exclude( itv ) ) continue;

     // Insert itemTimeVec into schedule
     schedule.localInsert( itv );
  }

}


// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrTwoScheduleDeltaPartScheduleStrategy::clone()
const
{
    LgFrTwoScheduleDeltaPartScheduleStrategy* temp = 
	new LgFrTwoScheduleDeltaPartScheduleStrategy(*this);
    // hack up the schedules
    // need to deep copy the independent schedules
    size_t i = 0; // Pulled out of the for below by RW2STL
    for ( i=0; i< temp->independentSchedules_.size(); i++ )  {
      // cast away const here to get subscription stuff to work
	temp->independentSchedules_[i]->removeDependentFromHeterogeneousList(temp );
	temp->independentSchedules_[i] = independentSchedules_[i].deepCopy();
	temp->independentSchedules_[i]->addDependent(temp );
    }
    return temp;
}

// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrTwoScheduleDeltaPartScheduleStrategy::clone(LgFrScenario& newScenario)
const
{  
  return new LgFrTwoScheduleDeltaPartScheduleStrategy(*this, newScenario);
}


// Assignment operator
LgFrTwoScheduleDeltaPartScheduleStrategy &
LgFrTwoScheduleDeltaPartScheduleStrategy::operator=(
	  const LgFrTwoScheduleDeltaPartScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrPartScheduleSensitiveScheduleStrategy::operator= ) (rhs);
  }
  return *this;
}


// Copy constructor
LgFrTwoScheduleDeltaPartScheduleStrategy::
   LgFrTwoScheduleDeltaPartScheduleStrategy (
      const LgFrTwoScheduleDeltaPartScheduleStrategy & source)
:  LgFrPartScheduleSensitiveScheduleStrategy( source ), 
   id_(__LGFRTWOSCHEDULEDELTAPARTSCHEDULESTRATEGY)
{
}

// Copy constructor with newScenario
LgFrTwoScheduleDeltaPartScheduleStrategy::
   LgFrTwoScheduleDeltaPartScheduleStrategy (
      const LgFrTwoScheduleDeltaPartScheduleStrategy & source,
      LgFrScenario & newScenario)
:  LgFrPartScheduleSensitiveScheduleStrategy( 
         source, 
         newScenario ),
   id_(__LGFRTWOSCHEDULEDELTAPARTSCHEDULESTRATEGY)
{
}

// Constructor
LgFrTwoScheduleDeltaPartScheduleStrategy::
   LgFrTwoScheduleDeltaPartScheduleStrategy (
     LgFrScenario & scenario )
:  LgFrPartScheduleSensitiveScheduleStrategy( scenario ),
   id_(__LGFRTWOSCHEDULEDELTAPARTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrTwoScheduleDeltaPartScheduleStrategy::
   LgFrTwoScheduleDeltaPartScheduleStrategy ()
:  LgFrPartScheduleSensitiveScheduleStrategy(),
   id_(__LGFRTWOSCHEDULEDELTAPARTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrTwoScheduleDeltaPartScheduleStrategy::
   ~LgFrTwoScheduleDeltaPartScheduleStrategy ()
{
   // Nothing to do here
}

//-----------------------------------------------------------------------
//
//  Test of LgFrTwoScheduleDeltaPartScheduleStrategy
//
//-----------------------------------------------------------------------

#ifdef NDEBUG
#undef NDEBUG
#endif

// test LgFrTwoScheduleDeltaPartScheduleStrategy methods.

void
LgFrTwoScheduleDeltaPartScheduleStrategy::test()
{
  LgFrTwoScheduleDeltaPartScheduleStrategy cs1;
  assert( cs1.schedules().size() == 0 );
}


// test LgFrTwoScheduleDeltaPartScheduleStrategy methods.
// Expects testScenario to contain data from
// /u/implode/wit/data/examples/diner12/wit.data
// Expects supplySchedule to be a supply schedule for testScenario
// (containing a LgFrSupplyScheduleStrategy)
void
LgFrTwoScheduleDeltaPartScheduleStrategy::contextTest
    (
     LgFrScenario & testScenario,
     LgFrSortingPartScheduleFloatSmartPointer supplySchedule
     )
{
    std::cerr << "entering LgFrTwoScheduleDeltaPartScheduleStrategy::contextTest" << std::endl;
    int i;
    LgFrSortingPartScheduleFloatSmartPointer supplySchedule2(new LgFrSortingPartScheduleFloat);
    *supplySchedule2 = *supplySchedule + *supplySchedule;

  LgFrTwoScheduleDeltaPartScheduleStrategy cs1;

  // Test inserting two dependent schedule
  cs1.insertPartSchedule( supplySchedule ); 
  cs1.insertPartSchedule( supplySchedule2 ); 


  assert( cs1.schedules()[0] == supplySchedule );
  assert( cs1.schedules()[1] == supplySchedule2 );

  // Test copy constructor
  LgFrTwoScheduleDeltaPartScheduleStrategy cs2(cs1);
  assert( cs2.schedules()[0] == supplySchedule );
  assert( cs2.schedules()[1] == supplySchedule2 );

  // Test assignment operator
  LgFrTwoScheduleDeltaPartScheduleStrategy cs3;
  cs3 = cs2;
  assert( cs3.schedules()[0] == supplySchedule );
  assert( cs3.schedules()[1] == supplySchedule2 );

  // Test clone method
  {
    LgFrAttributeScheduleStrategy *cs4Ptr = cs1.clone();
    assert( (  (LgFrTwoScheduleDeltaPartScheduleStrategy *) cs4Ptr)
            ->schedules().size() == 2 );

    assert( (  (LgFrTwoScheduleDeltaPartScheduleStrategy *) cs4Ptr)
            ->schedules()[0] 
            != supplySchedule );
    assert( *((  (LgFrTwoScheduleDeltaPartScheduleStrategy *) cs4Ptr)
            ->schedules()[0])
            == *supplySchedule );

    assert( (  (LgFrTwoScheduleDeltaPartScheduleStrategy *) cs4Ptr)
            ->schedules()[1] 
            != supplySchedule2 );
    assert( *((  (LgFrTwoScheduleDeltaPartScheduleStrategy *) cs4Ptr)
            ->schedules()[1])
            == *supplySchedule2 );
    
    // Test destructor
    delete cs4Ptr;
  }


  // Test Kernal of populate
  const LgFrSortingPartScheduleFloat & constSupplySchedule = *supplySchedule;
  const LgFrSortingPartScheduleFloat & constSupplySchedule2 = *supplySchedule2;

  LgFrSortingPartScheduleFloat deltaSup;
  const LgFrSortingPartScheduleFloat & constDeltaSup = deltaSup;
  deltaSup.attributeScheduleStrategy( cs1 );
  deltaSup.populate();
  for ( i=0; i<supplySchedule->size(); i++ ) 
     assert(         constDeltaSup[i].timeVecFloat() == 
               (constSupplySchedule[i].timeVecFloat() - 
                constSupplySchedule2[i].timeVecFloat()));

  // Test subscription mechanism
  LgFrPart part2 = constSupplySchedule[2].part();
  supplySchedule->insertKeyAndValue(  part2, LgFrTimeVecFloat(2, 3.1f) );
//  supplySchedule2.insertKeyAndValue( part2, LgFrTimeVecFloat(2, 1.5) );
//  std::cerr << "supplySchedule[" <<  part2.name() << "][0] = " 
//                     << (constSupplySchedule[part2].timeVecFloat())[0] << "\n";
//  std::cerr << "supplySchedule2[" << part2.name()  << "][0] = " 
//                     << (constSupplySchedule2[part2].timeVecFloat())[0] << "\n";
//  std::cerr << "deltaSup[" << part2.name() << "][0] = " 
//                     << (constDeltaSup[part2].timeVecFloat())[0] << "\n";
//  std::cerr << "supplySchedule[" <<  part2.name() << "][0] = " 
//                     << (constSupplySchedule[part2].timeVecFloat())[0] << "\n";
//  std::cerr << "supplySchedule2[" << part2.name()  << "][0] = " 
//                     << (constSupplySchedule2[part2].timeVecFloat())[0] << "\n";

  assert(         constDeltaSup[part2].timeVecFloat() == 
               (constSupplySchedule[part2].timeVecFloat() - 
                constSupplySchedule2[part2].timeVecFloat()));

  // Test subscription mechanism


  // Test scenario copy constructor
  LgFrTwoScheduleDeltaPartScheduleStrategy scenCtor(cs1,testScenario);
  assert( scenCtor.schedules().size() ==  
               cs1.schedules().size() );

  // Test copy constructor when strategy owns the schedule
  LgFrTwoScheduleDeltaPartScheduleStrategy cs5(scenCtor);
  assert( scenCtor.schedules().size() ==  
               cs5.schedules().size() );


  // Test cloning w/scenario 
  LgFrAttributeScheduleStrategy *cs6Ptr = cs1.clone(testScenario);
  assert( ((LgFrTwoScheduleDeltaPartScheduleStrategy *)cs6Ptr)->schedules()[0] 
          != supplySchedule );
  assert( ((LgFrTwoScheduleDeltaPartScheduleStrategy *)cs6Ptr)->schedules()[0] 
          != cs1.schedules()[0] );
  assert( *(((LgFrTwoScheduleDeltaPartScheduleStrategy *)cs6Ptr)->schedules()[0])
          == *(cs1.schedules()[0]) );

  delete cs6Ptr;
}



@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
#include <iostream.h>
d26 1
a26 1
  assert( schedules().length() == 2 && 
d40 2
a41 1
  for ( size_t i=0; i<tempSched.entries(); i++ ) {
d65 2
a66 1
    for ( size_t i=0; i< temp->independentSchedules_.entries(); i++ )  {
a83 8
// Return comparison strategy identifier
isAReturnType
LgFrTwoScheduleDeltaPartScheduleStrategy::isA()
const
{
   return id_;
}

a88 1
  assert( id_ == rhs.id_ );
a102 1
  assert( id_ == source.id_ );
a114 1
  assert( id_ == source.id_ );
d160 1
a160 3
  assert( cs1.id_ == __LGFRTWOSCHEDULEDELTAPARTSCHEDULESTRATEGY );
  assert( cs1.schedules().length() == 0 );
  assert( cs1.isA() == __LGFRTWOSCHEDULEDELTAPARTSCHEDULESTRATEGY );
d176 1
a176 1
    cerr << "entering LgFrTwoScheduleDeltaPartScheduleStrategy::contextTest" << endl;
a192 1
  assert( cs2.isA() == __LGFRTWOSCHEDULEDELTAPARTSCHEDULESTRATEGY );
a198 1
  assert( cs3.isA() == cs2.isA() );
a204 1
    assert( cs4Ptr->isA() == cs1.isA() );
d206 1
a206 1
            ->schedules().length() == 2 );
d235 1
a235 1
  for ( i=0; i<supplySchedule->entries(); i++ ) 
d244 1
a244 1
//  cerr << "supplySchedule[" <<  part2.name() << "][0] = " 
d246 1
a246 1
//  cerr << "supplySchedule2[" << part2.name()  << "][0] = " 
d248 1
a248 1
//  cerr << "deltaSup[" << part2.name() << "][0] = " 
d250 1
a250 1
//  cerr << "supplySchedule[" <<  part2.name() << "][0] = " 
d252 1
a252 1
//  cerr << "supplySchedule2[" << part2.name()  << "][0] = " 
d264 2
a265 3
  assert( scenCtor.id_ == __LGFRTWOSCHEDULEDELTAPARTSCHEDULESTRATEGY );
  assert( scenCtor.schedules().length() ==  
               cs1.schedules().length() );
d269 2
a270 3
  assert( cs5.isA() == __LGFRTWOSCHEDULEDELTAPARTSCHEDULESTRATEGY );
  assert( scenCtor.schedules().length() ==  
               cs5.schedules().length() );
a274 1
  assert( cs6Ptr->isA() == cs1.isA() );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
d23 1
a23 1
  assert( schedules().size() == 2 && 
d37 1
a37 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<tempSched.size(); i++ ) {
d61 1
a61 2
    size_t i = 0; // Pulled out of the for below by RW2STL
    for ( i=0; i< temp->independentSchedules_.size(); i++ )  {
d79 8
d92 1
d107 1
d120 1
d166 3
a168 1
  assert( cs1.schedules().size() == 0 );
d201 1
d208 1
d215 1
d217 1
a217 1
            ->schedules().size() == 2 );
d246 1
a246 1
  for ( i=0; i<supplySchedule->size(); i++ ) 
d275 3
a277 2
  assert( scenCtor.schedules().size() ==  
               cs1.schedules().size() );
d281 3
a283 2
  assert( scenCtor.schedules().size() ==  
               cs5.schedules().size() );
d288 1
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d176 1
a176 1
    std::cerr << "entering LgFrTwoScheduleDeltaPartScheduleStrategy::contextTest" << std::endl;
d244 1
a244 1
//  std::cerr << "supplySchedule[" <<  part2.name() << "][0] = " 
d246 1
a246 1
//  std::cerr << "supplySchedule2[" << part2.name()  << "][0] = " 
d248 1
a248 1
//  std::cerr << "deltaSup[" << part2.name() << "][0] = " 
d250 1
a250 1
//  std::cerr << "supplySchedule[" <<  part2.name() << "][0] = " 
d252 1
a252 1
//  std::cerr << "supplySchedule2[" << part2.name()  << "][0] = " 
@


