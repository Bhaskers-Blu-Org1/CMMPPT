head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.32;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.39;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.39;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.28;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFRDATAINTERFACE_ESSENTIALS_FROM_SCENARIO_H
#define LGFRDATAINTERFACE_ESSENTIALS_FROM_SCENARIO_H
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.

#include <scenario/src/difEssen.h>

// forward declaration
class LgFrScenario;
class WitRun;

// This is a concrete class to serve as a bridge class between the
// initialProblem(InitProb) class and dataInterface(DIF) class 
// because some of the functions in the DIF class
// need informations (from scenario) which are not stored 
// (and can not be accessed) in the DIF class.
// These extra data need to be passed into DIF functions (whenever needed)
// when an InitProb object calls a DIF object to get data.
// The base class (LGFRDataInterfaceEssentials) defines the interface.
// All detail implementations will be defined in concrete subclasses
// and will be hidden from the user.
// An object of this class will be instantiated on the flight 
// (trantient object) and will be passed to those functions in a DIF 
// object when needed.
 
class LgFrDataInterfaceEssentialsFromScenario: public LgFrDataInterfaceEssentials
{
public:

  // Create a part and insert it to set_of_part
  virtual
    LgFrPart
      createAndInsertPart(const std::string& partName) const;

  // Create a demand and insert it to set_of_demand
  virtual
    LgFrDemand
      createAndInsertDemand(const std::string& demandName,
			    const std::string& partName) const;

  // Get a calander from the scenario
  virtual
    const LgFrCalendar& calendar() const;

  // Return a mutable pointer to LastSolvedProblem's WitRun.
  virtual
    WitRun*
      mutableWitRun();

  //--------------------------------------------------------------------
  //  
  //   Standard class methods
  //
  //-------------------------------------------------------------------

  // Make a clone copy of this object in same scenario
  virtual
    LgFrDataInterfaceEssentials *
        clone() const;

  // Make a clone copy of this object in new scenario
  virtual
    LgFrDataInterfaceEssentials *
        clone(const LgFrScenario*) const;

  // Copy constructor with same scenario
  LgFrDataInterfaceEssentialsFromScenario
    (const LgFrDataInterfaceEssentialsFromScenario& copy);

  // Copy constructor with new scenario
  LgFrDataInterfaceEssentialsFromScenario
    (const LgFrDataInterfaceEssentialsFromScenario& copy,
     const LgFrScenario* newScenPtr);


  // Default constructor
  LgFrDataInterfaceEssentialsFromScenario();

  // Constructor
  LgFrDataInterfaceEssentialsFromScenario(const LgFrScenario*);

  // Destructor
  virtual
    ~LgFrDataInterfaceEssentialsFromScenario();

private:
  // Assignment (not allowed at this time)
  LgFrDataInterfaceEssentialsFromScenario&
    operator=(const LgFrDataInterfaceEssentialsFromScenario& rhs);

private:
  const LgFrScenario* scenarioPtr_;

};
#endif

@


1.1
log
@Initial revision
@
text
@d3 3
d34 1
a34 1
      createAndInsertPart(const RWCString& partName) const;
d39 2
a40 2
      createAndInsertDemand(const RWCString& demandName,
			    const RWCString& partName) const;
a50 10
  //--------------------------------------------------------------------
  //  
  //   Dynamic type query methods
  //
  //-------------------------------------------------------------------
  virtual
    isAReturnType
      isA()
        const;
  
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 3
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
d31 1
a31 1
      createAndInsertPart(const std::string& partName) const;
d36 2
a37 2
      createAndInsertDemand(const std::string& demandName,
			    const std::string& partName) const;
d48 10
@

