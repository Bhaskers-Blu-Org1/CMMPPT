head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.31;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.27;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LgFrSortingDemandScheduleFloatSMARTPTRH
#define LgFrSortingDemandScheduleFloatSMARTPTRH
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <scenario/src/refCount.h>

/*
class LgFrSortingDemandScheduleFloat
{
private:
    int i_;
public:
    LgFrSortingDemandScheduleFloat(int j = 0) : i_(j) {}
    const int i() const {return i_;}
    void i(const int j) {i_ = j;}
};
*/

// forward declaration
class LgFrSortingScheduleFloatSmartPointerToConst;
class LgFrSortingScheduleFloatSmartPointer;
class LgFrSortingDemandScheduleFloat;

class LgFrSortingDemandScheduleFloatSmartPointerToConst
{

public:
    LgFrSortingDemandScheduleFloatSmartPointerToConst();
    LgFrSortingDemandScheduleFloatSmartPointerToConst(LgFrSortingDemandScheduleFloat*);
    LgFrSortingDemandScheduleFloatSmartPointerToConst(LgFrSortingDemandScheduleFloat*, LgFrReferenceCount&);
    virtual ~LgFrSortingDemandScheduleFloatSmartPointerToConst();
    LgFrSortingDemandScheduleFloatSmartPointerToConst(const LgFrSortingDemandScheduleFloatSmartPointerToConst&);
    LgFrSortingDemandScheduleFloatSmartPointerToConst deepCopy() const;
    LgFrSortingDemandScheduleFloatSmartPointerToConst& operator=(const LgFrSortingDemandScheduleFloatSmartPointerToConst&);
    bool operator==(const LgFrSortingDemandScheduleFloatSmartPointerToConst&) const;
    bool operator!=(const LgFrSortingDemandScheduleFloatSmartPointerToConst&) const;
    const LgFrSortingDemandScheduleFloat& operator*() const;
    const LgFrSortingDemandScheduleFloat * const operator->() const;
//    operator const LgFrSortingDemandScheduleFloat* const () const;
    operator LgFrSortingScheduleFloatSmartPointerToConst () const;

    bool unique() const;
    bool null() const;
    static void test();

protected:
    LgFrSortingDemandScheduleFloat* pointer_; // should make this const but I want to use
                            //  it for the LgFrSortingDemandScheduleFloatSmartPointer class
			    //  (the non-const class) to inherit this member.
			    //  The way it's been set up only const stuff
                            //  is being returned so we're OK.
    LgFrReferenceCount count_;

};


class LgFrSortingDemandScheduleFloatSmartPointer : public LgFrSortingDemandScheduleFloatSmartPointerToConst
{
public:
    LgFrSortingDemandScheduleFloatSmartPointer();
    LgFrSortingDemandScheduleFloatSmartPointer(LgFrSortingDemandScheduleFloat*);
    LgFrSortingDemandScheduleFloatSmartPointer(LgFrSortingDemandScheduleFloat*, LgFrReferenceCount&);
    ~LgFrSortingDemandScheduleFloatSmartPointer();
    LgFrSortingDemandScheduleFloatSmartPointer(const LgFrSortingDemandScheduleFloatSmartPointer&);
    LgFrSortingDemandScheduleFloatSmartPointer(LgFrSortingDemandScheduleFloatSmartPointerToConst);
    LgFrSortingDemandScheduleFloatSmartPointer deepCopy();
    LgFrSortingDemandScheduleFloatSmartPointer& operator=(const LgFrSortingDemandScheduleFloatSmartPointer&);
//    LgFrSortingDemandScheduleFloatSmartPointer& operator=(LgFrSortingDemandScheduleFloatSmartPointerToConst);
    bool operator==(const LgFrSortingDemandScheduleFloatSmartPointer&) const;
//    bool operator==(LgFrSortingDemandScheduleFloatSmartPointerToConst) const;
    bool operator!=(const LgFrSortingDemandScheduleFloatSmartPointer&) const;
//    bool operator!=(LgFrSortingDemandScheduleFloatSmartPointerToConst) const;

    // these are really dangerous as they circumvent the notion
    //  of using smart pointers anyways.  you had better be using
    //  these just to call another method
    LgFrSortingDemandScheduleFloat& operator*();
    const LgFrSortingDemandScheduleFloat& operator*() const;
    LgFrSortingDemandScheduleFloat* const operator->();
    const LgFrSortingDemandScheduleFloat* const operator->() const;
//    operator const LgFrSortingDemandScheduleFloat* const () const;
//    operator LgFrSortingDemandScheduleFloat* ();
    operator LgFrSortingScheduleFloatSmartPointerToConst () const;
    operator LgFrSortingScheduleFloatSmartPointer ();

    bool unique() const;
    bool null() const;
    static void test();
};

#endif

@


1.1
log
@Initial revision
@
text
@d3 2
a4 2

#include <rw/defs.h>
d35 2
a36 2
    RWBoolean operator==(const LgFrSortingDemandScheduleFloatSmartPointerToConst&) const;
    RWBoolean operator!=(const LgFrSortingDemandScheduleFloatSmartPointerToConst&) const;
d42 2
a43 2
    RWBoolean unique() const;
    RWBoolean null() const;
d69 4
a72 4
    RWBoolean operator==(const LgFrSortingDemandScheduleFloatSmartPointer&) const;
//    RWBoolean operator==(LgFrSortingDemandScheduleFloatSmartPointerToConst) const;
    RWBoolean operator!=(const LgFrSortingDemandScheduleFloatSmartPointer&) const;
//    RWBoolean operator!=(LgFrSortingDemandScheduleFloatSmartPointerToConst) const;
d86 2
a87 2
    RWBoolean unique() const;
    RWBoolean null() const;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d3 2
a4 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d35 2
a36 2
    bool operator==(const LgFrSortingDemandScheduleFloatSmartPointerToConst&) const;
    bool operator!=(const LgFrSortingDemandScheduleFloatSmartPointerToConst&) const;
d42 2
a43 2
    bool unique() const;
    bool null() const;
d69 4
a72 4
    bool operator==(const LgFrSortingDemandScheduleFloatSmartPointer&) const;
//    bool operator==(LgFrSortingDemandScheduleFloatSmartPointerToConst) const;
    bool operator!=(const LgFrSortingDemandScheduleFloatSmartPointer&) const;
//    bool operator!=(LgFrSortingDemandScheduleFloatSmartPointerToConst) const;
d86 2
a87 2
    bool unique() const;
    bool null() const;
@

