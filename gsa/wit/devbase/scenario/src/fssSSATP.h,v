head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.43;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.43;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef LGFR_FOCUSSED_SHORTAGE_SCHEDULE_SCHEDULE_STRATEGY_FOR_ATP_H
#define LGFR_FOCUSSED_SHORTAGE_SCHEDULE_SCHEDULE_STRATEGY_FOR_ATP_H


#include <scenario/src/fssSS.h>
#include <scenario/src/mixInATP.h>
#include <scenario/src/stateATP.h>


// Schedules using this strategy will be updated with the new
// shipment solution after running implode.

// This class follows the Strategy Pattern


class LgFrFocussedShortageScheduleScheduleStrategyForATP : 
   public LgFrFocussedShortageScheduleScheduleStrategy,
   public LgFrScheduleMixInForATP
{

public:

  // Override base class populate method.
  virtual
     void
        populate(
           LgFrSortingScheduleFloat& )
              const;


  // Make clone copy of this object
  virtual
     LgFrAttributeScheduleStrategy *
        clone() 
           const;

  // Make clone copy of this object with new Scenario
  virtual
     LgFrAttributeScheduleStrategy *
        clone(LgFrScenarioSmartPointer) 
           const;



  // Return Comparison Strategy Identifier
  virtual
     isAReturnType
        isA()
           const;

  // Assignment operator
  LgFrFocussedShortageScheduleScheduleStrategyForATP &
    operator=(
	      const LgFrFocussedShortageScheduleScheduleStrategyForATP& rhs);

  // Copy constructor
  LgFrFocussedShortageScheduleScheduleStrategyForATP (
     const LgFrFocussedShortageScheduleScheduleStrategyForATP &);

  // Copy constructor with new Scenario
  LgFrFocussedShortageScheduleScheduleStrategyForATP (
     const LgFrFocussedShortageScheduleScheduleStrategyForATP &,
     LgFrScenarioSmartPointer);

  // Constructor
  LgFrFocussedShortageScheduleScheduleStrategyForATP (
     LgFrScenarioSmartPointer, int desiredState = LGFR_ATP_STATE_COMMITTED_IMPLODED_RECOVERY );

  // Destructor
  virtual
     ~LgFrFocussedShortageScheduleScheduleStrategyForATP ();

  // test this class
  static void test();

  // test LgFrFocussedShortageScheduleScheduleStrategyForATP methods.
  // Expects the data in testScenario to come from
  // "/u/implode/wit/data/examples/diner12/wit.data"

  static
  void
  contextTest (LgFrScenarioForATPSmartPointer testScenario,
               LgFrLastProblemSolved & lps,             // testScenario's
               LgFrSetOfParts        & sop,             // testScenario's
               LgFrSetOfDemands      & sod);            // testScenario's

private:
  const int id_;

  // Default Constructor
  LgFrFocussedShortageScheduleScheduleStrategyForATP ();

  virtual
     LgFrAttributeScheduleStrategy *
        clone(LgFrScenario &) 
           const;

};

#endif
@


1.1.1.1
log
@Import scenario
@
text
@@
