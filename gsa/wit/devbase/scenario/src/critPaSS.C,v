head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.28;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.37;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.37;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.26;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/critPaSS.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/scenario.h>
#include <scenario/src/zeroTvFS.h>
#include <scenario/src/sortSchd.h>
#include <scenario/src/machdep.h>
#include <scenario/src/partSchP.h>


// Populate Schedule with itemTimeVecs
void
LgFrCriticalPartScheduleStrategy::kernalOfPopulate(
   LgFrSortingScheduleFloat& schedule )
const
{
  LgFrPart part, critPart;
  LgFrTimeVecFloat tv, critTimeVec;
  LgFrItemTimeVecPairFloat itv( part, tv );
  LgFrSortingPartScheduleFloat lpsCritSched;
  const LgFrSortingPartScheduleFloat & constLpsCritSched = lpsCritSched;
  
  // Generate complete critical part schedule
  int lenCritList;
  char ** critPartList;
  int * critPeriod = 0;
  implodePtr_->lastProblemSolved().criticalList( 
     &lenCritList,
     &critPartList,
     &critPeriod);

  // Generate unfiltered critical schedule
  int nPeriods( implodePtr_->lastProblemSolved().numberOfPeriods() );
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<lenCritList; i++ )
  {
     critPart = *(setOfParts().findValue(critPartList[i]));

     // Get part's timeVec if it is in the schedule
     if ( !lpsCritSched.findValue(critPart, critTimeVec) ) {
        // Part is not in schedule, so set timeVec to zero
        critTimeVec = LgFrTimeVecFloat(nPeriods,0.0);
     }

     // Update timeVec with period
     critTimeVec[ critPeriod[ i ] ] = (float) -lenCritList + i;

     // Update schedule with part and timeVec
     lpsCritSched.insertKeyAndValue( critPart, critTimeVec );
     portableFree( critPartList[i] );

  }
  portableFree( critPartList );
  portableFree( critPeriod );

  // Loop once for each critical part and apply filter
  size_t j = 0; // Pulled out of the for below by RW2STL
  for ( j=0; j<lpsCritSched.size(); j++ ) {

     // Make itemTimeVec
     itv = constLpsCritSched[j];

     // Check to see if j'th itemTimevec is in schedule's set of Parts
     // and is not to be filtered out
     if (   setOfParts()  .  contains ( itv.part() )
	    &&
	    !  schedule.filterStrategy().exclude( itv )   ) 
	 {
	     // Insert itemTimeVec into schedule
	     schedule.localInsert( itv );
	 }
  }

}

// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrCriticalPartScheduleStrategy::clone()
const
{
  LgFrCriticalPartScheduleStrategy* newInst = 
      new LgFrCriticalPartScheduleStrategy(*this);
  return (newInst);
}

// Make clone copy of object with new Scenario
LgFrAttributeScheduleStrategy *
LgFrCriticalPartScheduleStrategy::clone(LgFrScenario& newScenario)
const
{
  LgFrCriticalPartScheduleStrategy* newInst = 
      new LgFrCriticalPartScheduleStrategy(*this, newScenario);
  return (newInst);

}

// Assignment operator
LgFrCriticalPartScheduleStrategy &
LgFrCriticalPartScheduleStrategy::operator=(
	  const LgFrCriticalPartScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrPartScheduleStrategy::operator= ) (rhs);

    implodePtr_ = rhs.implodePtr_;
  }
  return *this;
}


// Copy constructor
LgFrCriticalPartScheduleStrategy::
   LgFrCriticalPartScheduleStrategy (
      const LgFrCriticalPartScheduleStrategy & source)
:  LgFrPartScheduleStrategy( source ), 
   implodePtr_( source.implodePtr_ ),
   id_(__LGFRCRITICALPARTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Copy constructor with new Scenario
LgFrCriticalPartScheduleStrategy::
   LgFrCriticalPartScheduleStrategy (
      const LgFrCriticalPartScheduleStrategy & source,
      LgFrScenario & newScenario)
:  LgFrPartScheduleStrategy( 
         source, 
         newScenario ),
   implodePtr_( &(implode(newScenario)) ),
   id_(__LGFRCRITICALPARTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Constructor
LgFrCriticalPartScheduleStrategy::
   LgFrCriticalPartScheduleStrategy (
     LgFrScenario & scenario )
:  LgFrPartScheduleStrategy( 
       LgFrAttributeScheduleStrategy::setOfParts(scenario),
      &(implode(scenario)) ),
   implodePtr_( &(implode(scenario)) ),
   id_(__LGFRCRITICALPARTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrCriticalPartScheduleStrategy::
   LgFrCriticalPartScheduleStrategy ()
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   implodePtr_( 0 ),
   id_(__LGFRCRITICALPARTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrCriticalPartScheduleStrategy::
   ~LgFrCriticalPartScheduleStrategy ()
{
  // Nothing to do here
}



#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrCriticalPartScheduleStrategy methods.
void
LgFrCriticalPartScheduleStrategy::test()
{
}

// test LgFrCriticalPartScheduleStrategy methods.
// Expects the data in testScenario to come from
// "/u/implode/wit/data/examples/diner12/wit.data"
void
LgFrCriticalPartScheduleStrategy::contextTest(
                                              LgFrScenario          & testScenario,
                                              LgFrLastProblemSolved & lps)
{
  int i;

  // Test constructor
  LgFrCriticalPartScheduleStrategy cs1(testScenario);

  // Test copy constructor
  LgFrCriticalPartScheduleStrategy cs2(cs1);

  // Test assignment operator
  LgFrCriticalPartScheduleStrategy cs3;
  cs3 = cs2;

  {
    // Test clone method
    LgFrAttributeScheduleStrategy *cs4Ptr = cs1.clone();

    // Test destructor
    delete cs4Ptr;
  }
  
  // Test populate via Model Client notification after new implode
  // solution.
  lps.computeCriticalList(true);
  LgFrSortingPartScheduleFloatSmartPointer schedule(new LgFrSortingPartScheduleFloat);
  const LgFrSortingPartScheduleFloat& constSchedule = *schedule;
  schedule->attributeScheduleStrategy(cs1);
  testScenario.newImplosionSolution(); 
  // cout <<endl <<"LgFrCriticalPartScheduleStrategy" <<endl
  //      <<schedule.format() <<endl;

  for ( i=0; i<schedule->size(); i++ ) {
     assert(  !(constSchedule[i].timeVecFloat() == 0.0)  );
  }

  // Test populate with filter
  LgFrZeroTimeVecFilterStrategy zeroFilter;
  schedule->filterStrategy( zeroFilter);
  
  cs1.populate( *schedule );
  // cout <<endl 
  //      <<"LgFrCriticalPartScheduleStrategy with zero filter" 
  //      <<endl
  //      <<schedule->format() <<endl;

  for ( i=0; i<schedule->size(); i++ ) {
     assert(  !(constSchedule[i].timeVecFloat() == 0.0)  );
  }
}

@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
#include <iostream.h>
d30 1
a30 1
  int * critPeriod = NULL;
d38 2
a39 1
  for ( int i=0; i<lenCritList; i++ )
d61 2
a62 1
  for ( size_t j=0; j<lpsCritSched.entries(); j++ ) {
a100 8
// Return comparison strategy identifier
isAReturnType
LgFrCriticalPartScheduleStrategy::isA()
const
{
   return id_;
}

a105 1
  assert( id_ == rhs.id_ );
d157 2
a158 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), NULL ),
   implodePtr_( NULL ),
a193 4
  assert( cs1.id_ == __LGFRCRITICALPARTSCHEDULESTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRCRITICALPARTSCHEDULESTRATEGY );
a196 1
  assert( cs2.isA() == __LGFRCRITICALPARTSCHEDULESTRATEGY );
a200 1
  assert( cs3.isA() == cs2.isA() );
a204 1
    assert( cs4Ptr->isA() == cs1.isA() );
d212 1
a212 1
  lps.computeCriticalList(TRUE);
d220 1
a220 1
  for ( i=0; i<schedule->entries(); i++ ) {
d234 1
a234 1
  for ( i=0; i<schedule->entries(); i++ ) {
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
d27 1
a27 1
  int * critPeriod = 0;
d35 1
a35 2
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<lenCritList; i++ )
d57 1
a57 2
  size_t j = 0; // Pulled out of the for below by RW2STL
  for ( j=0; j<lpsCritSched.size(); j++ ) {
d96 8
d109 1
d161 2
a162 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   implodePtr_( 0 ),
d198 4
d205 1
d210 1
d215 1
d223 1
a223 1
  lps.computeCriticalList(true);
d231 1
a231 1
  for ( i=0; i<schedule->size(); i++ ) {
d245 1
a245 1
  for ( i=0; i<schedule->size(); i++ ) {
@

