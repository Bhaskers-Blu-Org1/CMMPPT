head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.50;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.50;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@
#include <stdlib.h>

#include <scenario/src/calendar.h>
#include <scenario/src/scenDifT.h>

// forward declarations
class LgFrDataInterfaceAbstract;

isAReturnType
LgFrScenarioForDifTesting::isA() const
{
    return id_;
}

LgFrDataInterfaceAbstract*
LgFrScenarioForDifTesting::dif()
{
   return LgFrScenario::dataInterface();
}

// Constructor
LgFrScenarioForDifTesting::LgFrScenarioForDifTesting(
   const LgFrDataInterfaceAbstract&    dif,
   const LgFrCalendar&                 calendar)
:LgFrScenario(dif, calendar),
 id_(__LGFRSCENARIOFORDIFTESTING)
{
  // builder does the rest
}

// Destructor 
LgFrScenarioForDifTesting::~LgFrScenarioForDifTesting()
{
  // Nothing to do here
}

// Assignment operator.
LgFrScenarioForDifTesting&
LgFrScenarioForDifTesting::operator=(
   const LgFrScenarioForDifTesting& rhs)
{
    cerr << "don't use LgFrScenarioForDifTesting::operator=(const LgFrScenarioForDifTesting&)" << endl;
    assert(0);
/*
   if (this != &rhs) {           // Check for assignment to self
     (this->LgFrScenario::operator= ) (rhs);
   }
*/
   return *this;
}


// Customized copy constructor
LgFrScenarioForDifTesting::LgFrScenarioForDifTesting(
   const LgFrScenarioForDifTesting& source )
: LgFrScenario( source )
{
  // Nothing to do here
}

// Default constructor
LgFrScenarioForDifTesting::LgFrScenarioForDifTesting()
: LgFrScenario()
{
  // Nothing to do here
}
@


1.1.1.1
log
@Import scenario
@
text
@@
