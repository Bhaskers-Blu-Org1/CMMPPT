head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.47;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.53;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.53;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.37;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/stockSS.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/scenario.h>
#include <scenario/src/zeroTvFS.h>
#include <scenario/src/machdep.h>
#include <scenario/src/partSchP.h>



// Populate Schedule with itemTimeVecs
void
LgFrStockScheduleStrategy::kernalOfPopulate(
   LgFrSortingScheduleFloat& schedule )
const
{
  LgFrPart part;
  LgFrTimeVecFloat tv;
  LgFrItemTimeVecPairFloat itv( part, tv );

  // Loop once for each part
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {

     part = setOfParts()[i];

     if ( implodePtr_->lastProblemSolved().category( &part )  !=  
                LgFrCAPACITY ) {
        // Make itemTimeVec
        itv.item( part );
        itv.timeVecFloat(
              implodePtr_->lastProblemSolved().stockVolume( &part )   );

        // Check to see if i'th itemTimeVec is to be filtered out
        if ( schedule.filterStrategy().exclude( itv ) ) continue;

        // Insert itemTimeVec into schedule
        schedule.localInsert( itv );
     }
     
  }

}


// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrStockScheduleStrategy::clone()
const
{
  LgFrStockScheduleStrategy* newInst = 
      new LgFrStockScheduleStrategy(*this);
  return (newInst);
}

// Make clone copy of object with new Scenario
LgFrAttributeScheduleStrategy *
LgFrStockScheduleStrategy::clone(LgFrScenario& newScenario)
const
{
  LgFrStockScheduleStrategy* newInst = 
      new LgFrStockScheduleStrategy(*this, newScenario);
  return (newInst);
}

// Assignment operator
LgFrStockScheduleStrategy &
LgFrStockScheduleStrategy::operator=(
	  const LgFrStockScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrPartScheduleStrategy::operator= ) (rhs);

    implodePtr_ = rhs.implodePtr_;
  }
  return *this;
}


// Copy constructor
LgFrStockScheduleStrategy::
   LgFrStockScheduleStrategy (
      const LgFrStockScheduleStrategy & source)
:  LgFrPartScheduleStrategy( source ), 
   implodePtr_( source.implodePtr_ ),
   id_(__LGFRSTOCKSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Copy constructor with new Scenario
LgFrStockScheduleStrategy::
   LgFrStockScheduleStrategy (
      const LgFrStockScheduleStrategy & source,
      LgFrScenario & newScenario)
:  LgFrPartScheduleStrategy( 
         source, 
         newScenario ),
   implodePtr_( &(implode(newScenario)) ),
   id_(__LGFRSTOCKSCHEDULESTRATEGY)
{
  // Nothing to do here
}


// Constructor
LgFrStockScheduleStrategy::
   LgFrStockScheduleStrategy (
     LgFrScenario & scenario )
:  LgFrPartScheduleStrategy( 
       LgFrAttributeScheduleStrategy::setOfParts(scenario), 
      &(implode(scenario)) ),
   implodePtr_( &(implode(scenario)) ),
   id_(__LGFRSTOCKSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrStockScheduleStrategy::
   LgFrStockScheduleStrategy ()
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   implodePtr_( 0 ),
   id_(__LGFRSTOCKSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrStockScheduleStrategy::
   ~LgFrStockScheduleStrategy ()
{
  // Nothing to do here
}



#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrStockScheduleStrategy methods.
void
LgFrStockScheduleStrategy::test()
{
}

// test LgFrStockScheduleStrategy methods.
// Expects the data in testScenario to come from
// "/u/implode/wit/data/examples/diner12/wit.data"
void
LgFrStockScheduleStrategy::contextTest
    (LgFrScenario          & testScenario,
     LgFrLastProblemSolved & /* lps */ ,	// testScenario's 
     LgFrSetOfParts        & sop)		// testScenario's
{
  int i;

  // Test constructor
  LgFrStockScheduleStrategy cs1(testScenario);

  // Test copy constructor
  LgFrStockScheduleStrategy cs2(cs1);

  // Test assignment operator
  LgFrStockScheduleStrategy cs3;
  cs3 = cs2;

  {
    // Test clone method
    LgFrAttributeScheduleStrategy *cs4Ptr = cs1.clone();

    // Test destructor
    delete cs4Ptr;
  }

  const LgFrPart * egg = sop.findValue("Egg");

  // Test populate.  Should be populated with zero timeVec because
  // a Stock schedule does not exist.
  LgFrSortingPartScheduleFloatSmartPointer schedule;
  const LgFrSortingPartScheduleFloat & constSchedule = *schedule;
  cs1.populate( *schedule );
  assert(  schedule->contains(*egg));
  assert((constSchedule[*egg].timeVecFloat())[0] - 5.0 < .0001 );
  assert((constSchedule[*egg].timeVecFloat())[1] - 4.0 < .0001 );


  // Test popluate with zeroFilter.  Should produce an empty schedule
  LgFrZeroTimeVecFilterStrategy zeroFilter;
  schedule->filterStrategy( zeroFilter );
  cs1.populate( *schedule );
  assert( schedule->size()==0 );

  // Test populate, due to new implosion solution.
  {
    LgFrFilterStrategy defaultFilter;
    schedule->filterStrategy( defaultFilter );
  }
  schedule->attributeScheduleStrategy( cs1 );
  testScenario.newImplosionSolution();
  // cs1.populate( *schedule );
  // cout <<endl <<"LgFrStockScheduleStrategy" <<endl
  //      <<schedule->format() <<endl;


  assert(  schedule->contains(*egg));
  assert((constSchedule[*egg].timeVecFloat())[0] - 5.0 < .0001 );
  assert((constSchedule[*egg].timeVecFloat())[1] - 4.0 < .0001 );
  

  // Test populate with filter
  schedule->filterStrategy( zeroFilter);
  schedule->attributeScheduleStrategy( cs1 );
  testScenario.newImplosionSolution();

  cs1.populate( *schedule );
  // cout <<endl <<"LgFrStockScheduleStrategy with zero filter" <<endl
  //      <<schedule.format() <<endl;

  for ( i=0; i<schedule->size(); i++ ) {
     assert(  !(constSchedule[i].timeVecFloat() == 0.0)  );
  }
  
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
#include <iostream.h>
d26 2
a27 1
  for ( size_t i=0; i<setOfParts().entries(); i++ ) {
a69 8
// Return comparison strategy identifier
isAReturnType
LgFrStockScheduleStrategy::isA()
const
{
   return id_;
}

a74 1
  assert( id_ == rhs.id_ );
d127 2
a128 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), NULL ),
   implodePtr_( NULL ),
a164 4
  assert( cs1.id_ == __LGFRSTOCKSCHEDULESTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRSTOCKSCHEDULESTRATEGY );
a167 1
  assert( cs2.isA() == __LGFRSTOCKSCHEDULESTRATEGY );
a171 1
  assert( cs3.isA() == cs2.isA() );
a175 1
    assert( cs4Ptr->isA() == cs1.isA() );
d197 1
a197 1
  assert( schedule->entries()==0 );
d225 1
a225 1
  for ( i=0; i<schedule->entries(); i++ ) {
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <iostream>
d23 1
a23 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {
d66 8
d79 1
d132 2
a133 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   implodePtr_( 0 ),
d170 4
d177 1
d182 1
d187 1
d209 1
a209 1
  assert( schedule->size()==0 );
d237 1
a237 1
  for ( i=0; i<schedule->size(); i++ ) {
@

