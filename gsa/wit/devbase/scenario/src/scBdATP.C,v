head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.48;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.48;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#include <scenario/src/calendar.h>
#include <scenario/src/dif.h>
#include <scenario/src/difImpl.h>
#include <scenario/src/difPWatp.h>
#include <scenario/src/scBdATP.h>
#include <scenario/src/fctyATP.h>
#include <scenario/src/scenATP.h>

LgFrScenarioBuilderForATP::LgFrScenarioBuilderForATP()
: LgFrScenarioBuilder(new LgFrATPFactory)
{
}

LgFrScenarioBuilderForATP::~LgFrScenarioBuilderForATP()
{
}


void
LgFrScenarioBuilderForATP::buildScenario(
    const LgFrDataInterfaceAbstract& dif,
    const LgFrCalendar& calendar)
{
  cout << "Creating Scenario For ATP" << endl;
  scenarioPtr_ = LgFrScenarioForATPSmartPointer(new LgFrScenarioForATP(dif, calendar));
  this->finishBuildingScenario (scenarioPtr_);
}

LgFrScenarioForATPSmartPointer
LgFrScenarioBuilderForATP::getScenario()
{
  assert( (!scenarioPtr_.null()) && ("no scenario pointer here") );
  return scenarioPtr_;
}

void
LgFrScenarioBuilderForATP::factoryType() const
{
  factoryPtr_->factoryType();
}

LgFrInitialProblemAndParameters*
LgFrScenarioBuilderForATP::createIPP(LgFrScenarioSmartPointer scenario) const
{
  return factoryPtr_->createIPP(scenario);
}

LgFrScheduleFactory*
LgFrScenarioBuilderForATP::createScheduleFactory(LgFrScenarioSmartPointer scenario) const
{
  return factoryPtr_->createScheduleFactory(scenario);
}


#ifdef NDEBUG
#undef NDEBUG
#endif

void
LgFrScenarioBuilderForATP::test()
{
  LgFrCalendar calendar;
  LgFrDataInterfaceImplementation * difPWImpPtr
      = new LgFrDataInterfaceImplementation("internal data set pw2");
  // Register all functions
  registerPWatpDifImpFunctions(difPWImpPtr);
  LgFrDataInterface dif(difPWImpPtr);

  LgFrScenarioBuilderForATP factory;
  factory.factoryType();
  factory.buildScenario(dif, calendar);
  
  cout << endl;
}
@


1.1.1.1
log
@Import scenario
@
text
@@
