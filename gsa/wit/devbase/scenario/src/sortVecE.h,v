head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.53;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.53;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@// SortedVectorEnhanced
#ifndef LgFrSortedVectorEnhanced_h
#define LgFrSortedVectorEnhanced_h

// This class has three primary responsibilities:
// 1. Fullfill all of the responsibilities of an RWSortedVector.
// 2. Return the index of the first item in the set that is greater than 
// or equal to any given item.
//
// This is a reference-based collection.  Insertions into it take the same
// amount of time that insertions into an RWSortedVector take.  The most
// efficient way to insert a lot of things into this set is to insert them
// in sorted order.  A good way to do this is (probably) to insert the 
// objects into a b-tree first and then insert them into this collection
// by traversing the b-tree

#include <rw/sortvec.h>

class LgFrSortedVectorEnhanced
: public   RWSortedVector		// Used to provide the interface
					// and most of the implementation
{
  // isA(), newSpecies(), copy(), and some other things are declared
  // by this macro
  RWDECLARE_COLLECTABLE(LgFrSortedVectorEnhanced)

public:

  // Returns the index of the first member of the collection that
  // is greater than or equal to the argument.  If there is no such element,
  // return the index of the greatest element.
  virtual
  size_t
  indexGreaterThanOrEqual(
			  const RWCollectable*)
  const; 


  // Note that this class defines neither it's destructor nor certain constructors.
  // This is not in keeping with our convention that all classes define them
  // so that we are using canonical form.  I decided that since this class
  // does not have any instance variables and probaly never will, I would
  // not do it this time. --- Wally

  // Default constructor and constructor that allows you to set size
  LgFrSortedVectorEnhanced( size_t size = RWCollection::DEFAULT_CAPACITY );


  // test this class
  static void test();
};

#endif
@


1.1.1.1
log
@Import scenario
@
text
@@
