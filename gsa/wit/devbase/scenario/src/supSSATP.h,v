head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.47;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.53;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.53;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.37;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_SUPPLY_SCHEDULE_STRATEGY_FOR_ATP_H
#define LGFR_SUPPLY_SCHEDULE_STRATEGY_FOR_ATP_H
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/supplySS.h>
#include <scenario/src/wrkgProb.h>
#include <scenario/src/mixInATP.h> // helper class to control state of state machine
#include <scenario/src/stateATP.h>


// Schedule Strategy for a supply schedule.
// The items are parts.
// The timeVecs are the parts supplyVolume.

// This class follows the Strategy Pattern


class LgFrSupplyScheduleStrategyForATP : 
   public LgFrSupplyScheduleStrategy,
   public LgFrScheduleMixInForATP
{

public:

  // Populate Schedule with itemTimeVecs
  virtual
     void
        kernalOfPopulate(
           LgFrSortingScheduleFloat& )
              const;
  
  // Update (propogate) a supply change to wip
  virtual
     void 
        update(
            const LgFrItemTimeVecPairFloat &);
  
  // Make clone copy of this object
  virtual
     LgFrAttributeScheduleStrategy *
        clone() 
           const;

  // Make clone copy of this object with new Scenario
  virtual
     LgFrAttributeScheduleStrategy *
        clone(LgFrScenarioSmartPointer) 
           const;

  // Assignment operator
  LgFrSupplyScheduleStrategyForATP &
    operator=(
	      const LgFrSupplyScheduleStrategyForATP& rhs);

  // Copy constructor
  LgFrSupplyScheduleStrategyForATP (
     const LgFrSupplyScheduleStrategyForATP &);

  // Copy constructor with new Scenario
  LgFrSupplyScheduleStrategyForATP (
     const LgFrSupplyScheduleStrategyForATP &,
     LgFrScenarioSmartPointer);

  // Constructor
  LgFrSupplyScheduleStrategyForATP (
     LgFrScenarioSmartPointer, int desiredState = LGFR_ATP_STATE_COMMITTED_IMPLODED);

  // Destructor
  virtual
     ~LgFrSupplyScheduleStrategyForATP ();

  // test this class
  static void test();

  // test LgFrSupplyScheduleStrategyForATP methods.
  // Expects data for both testScenario and testScenario2 to come from
  // /u/implode/wit/data/examples/diner12/wit.data, but expects them to
  // be two different scenarios.
  static
  void
  contextTest (LgFrScenarioForATPSmartPointer testScnario,
               LgFrWorkingImplosionProblem & wip,            // from testScenario
               LgFrSetOfParts              & sop,            // from testScenario
               LgFrScenarioForATPSmartPointer testScenario2);
private:

  const int id_;

  // Default Constructor
  LgFrSupplyScheduleStrategyForATP ();

  virtual
     LgFrAttributeScheduleStrategy *
        clone(LgFrScenario &) 
           const;

};

#endif
@


1.1
log
@Initial revision
@
text
@d3 2
a48 6
           const;

  // Return Comparison Strategy Identifier
  virtual
     isAReturnType
        isA()
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d47 6
@

