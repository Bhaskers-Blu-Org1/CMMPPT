head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.30;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.26;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_DEMAND_NAME_FILTER_STRATEGY_H
#define LGFR_DEMAND_NAME_FILTER_STRATEGY_H
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
#include <scenario/src/filtStrt.h>

// Filter strategy for demands based on DemandName
// This filter takes RWCRegexp's as a filter.  You must be 
// careful using it.  For example the filter --->
// LgFrDemandNameFilterStrategy(".", "US") will not exclude
// a demand with demandName="WITUSE".  If you want an exact match, you must
// specify it as LgFrDemandNameFilterStrategy(".", "^US$").  See
// RW documentation for RWCRegexp ...

class LgFrDemandNameFilterStrategy : public LgFrFilterStrategy {
public:

  virtual int GetFSType() const { return __LGFRDEMANDNAMEFILTERSTRATEGY; }

  // Return true if itemTimeVec is not of the type represented by 
  // this strategy.
  // This base class always returns false and does not filter any
  // itemTimeVecs from the schedule.
  virtual
    bool
      exclude(
        const LgFrItemTimeVecPairFloat &)
          const;

  // Get the Part Regexp as a std::string associated with this Filter
  std::string
     partRE()
        const;

  // Get the Demand Regexp as a std::string associated with this Filter
  std::string
     demandRE()
        const;

  // Get the Part Regexp associated with this DemandName Filter
  std::string
     partRegexp()
        const;

  // Get the Demand Regexp associated with this DemandName Filter
  std::string
     demandRegexp()
        const;

  // Make clone copy of this object
  virtual
     LgFrFilterStrategy *
        clone() 
           const;

  // Make clone copy of this object with new Scenario
  virtual
     LgFrFilterStrategy *
        clone(LgFrScenario &) 
           const;

  // Preferred Constructor
  LgFrDemandNameFilterStrategy (
          const std::string & pREstring,
          const std::string & dREstring);

  // Default Constructor
  LgFrDemandNameFilterStrategy ();

  // Assignment operator
  LgFrDemandNameFilterStrategy &
    operator=(
	      const LgFrDemandNameFilterStrategy& rhs);

  // Copy constructor
  LgFrDemandNameFilterStrategy (
     const LgFrDemandNameFilterStrategy &);

  // Copy constructor with new Scenario
  LgFrDemandNameFilterStrategy (
     const LgFrDemandNameFilterStrategy &,
     LgFrScenario &);

  // Destructor
  ~LgFrDemandNameFilterStrategy ();

  // test this class
  static void test();

private:

  const int id_;
  std::string  partREstring_;
  std::string  demandREstring_;
  std::string  partRegexp_;
  std::string  demandRegexp_;


};

#endif
@


1.1
log
@Initial revision
@
text
@d3 3
a5 3

#include <rw/regexp.h>
#include <rw/cstring.h>
d19 3
a21 1
  // Return TRUE if itemTimeVec is not of the type represented by 
d23 1
a23 1
  // This base class always returns FALSE and does not filter any
d26 1
a26 1
    RWBoolean
d31 2
a32 2
  // Get the Part Regexp as a RWCString associated with this Filter
  RWCString
d36 2
a37 2
  // Get the Demand Regexp as a RWCString associated with this Filter
  RWCString
d42 1
a42 1
  RWCRegexp
d47 1
a47 1
  RWCRegexp
a62 6
  // Return Filter Strategy Identifier
  virtual
     isAReturnType
        isA()
           const;

d65 2
a66 2
          const RWCString & pREstring,
          const RWCString & dREstring);
d94 4
a97 4
  RWCString  partREstring_;
  RWCString  demandREstring_;
  RWCRegexp  partRegexp_;
  RWCRegexp  demandRegexp_;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d3 3
a5 3
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
d19 1
a19 3
  virtual int GetFSType() const { return __LGFRDEMANDNAMEFILTERSTRATEGY; }

  // Return true if itemTimeVec is not of the type represented by 
d21 1
a21 1
  // This base class always returns false and does not filter any
d24 1
a24 1
    bool
d29 2
a30 2
  // Get the Part Regexp as a std::string associated with this Filter
  std::string
d34 2
a35 2
  // Get the Demand Regexp as a std::string associated with this Filter
  std::string
d40 1
a40 1
  std::string
d45 1
a45 1
  std::string
d61 6
d69 2
a70 2
          const std::string & pREstring,
          const std::string & dREstring);
d98 4
a101 4
  std::string  partREstring_;
  std::string  demandREstring_;
  std::string  partRegexp_;
  std::string  demandRegexp_;
@

