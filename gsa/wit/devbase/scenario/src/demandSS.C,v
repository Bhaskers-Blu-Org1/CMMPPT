head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.6
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.15.23.05.46;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.15.19.36.29;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.26;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Modified to build on windows laptop that was causing compiler to run out of stack space
@
text
@// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#if defined(_MSC_VER)
#pragma warning(disable:4786)
#endif

#include <iostream>

#include <scenario/src/scenario.h>
#include <scenario/src/algorthm.h>
#include <scenario/src/demandSS.h>
#include <scenario/src/sOfDemds.h>


//estimatedSize
size_t
LgFrDemandScheduleStrategy::estimatedSize(
   const LgFrSortingScheduleFloat& schedule )
const
{
  size_t retVal = setOfDemands().size();

  if (  schedule.filterStrategy().GetFSType() != __LGFRFILTERSTRATEGY )
     retVal = retVal / 2 + 1;

  retVal = size_tMax( 
                    retVal, 
                    LgFrAttributeScheduleStrategy::estimatedSize( schedule ) 
                    );

  return retVal;
}


// Get SetOfDemands
const LgFrSetOfDemands &
LgFrDemandScheduleStrategy::setOfDemands()
const
{
   assert (sodPtr_ != 0);
   return *sodPtr_;
}

// Set the  Set Of Demands
void
LgFrDemandScheduleStrategy::setOfDemands(const LgFrSetOfDemands & theSOD)
{
 sodPtr_ = &theSOD;
}

// Assignment operator
LgFrDemandScheduleStrategy &
LgFrDemandScheduleStrategy::operator=(
			  const LgFrDemandScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrAttributeScheduleStrategy::operator= ) (rhs);
    sodPtr_ = rhs.sodPtr_;
  }
  return *this;
}


// Copy constructor
LgFrDemandScheduleStrategy::
   LgFrDemandScheduleStrategy (
      const LgFrDemandScheduleStrategy & source)
:  LgFrAttributeScheduleStrategy( source ),
   sodPtr_( source.sodPtr_ )
{
  // Nothing to do here
}

// Copy constructor with new Scenario
LgFrDemandScheduleStrategy::
   LgFrDemandScheduleStrategy (
      const LgFrDemandScheduleStrategy & source,
      LgFrScenario & newScenario )
:  LgFrAttributeScheduleStrategy( source, newScenario ),
   sodPtr_( &(this->LgFrAttributeScheduleStrategy::setOfDemands(newScenario)) )
{
  // Nothing to do here
}

// Constructor
LgFrDemandScheduleStrategy::
   LgFrDemandScheduleStrategy (
     const LgFrSetOfDemands & sod,
     LgFrAlgorithm * algorithmPtr )
:  LgFrAttributeScheduleStrategy( algorithmPtr ),
   sodPtr_( &sod )
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrDemandScheduleStrategy::
   LgFrDemandScheduleStrategy ()
:  LgFrAttributeScheduleStrategy(),
   sodPtr_( 0 )
{
  // Nothing to do here
}

// Destructor
LgFrDemandScheduleStrategy::
   ~LgFrDemandScheduleStrategy ()
{
   // Nothing to do here
}
@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d3 5
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
#include <iostream.h>
d17 1
a17 1
  size_t retVal = setOfDemands().entries();
d19 1
a19 1
  if (  schedule.filterStrategy().isA() != __LGFRFILTERSTRATEGY )
d36 1
a36 1
   assert (sodPtr_ != NULL);
d97 1
a97 1
   sodPtr_( NULL )
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 3
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <iostream>
d15 1
a15 1
  size_t retVal = setOfDemands().size();
d17 1
a17 1
  if (  schedule.filterStrategy().GetFSType() != __LGFRFILTERSTRATEGY )
d34 1
a34 1
   assert (sodPtr_ != 0);
d95 1
a95 1
   sodPtr_( 0 )
@

