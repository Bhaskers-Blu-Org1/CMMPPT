head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.44;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.34;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.40;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
//#include <iostream>
#include <iostream>

#include <scenario/src/schdDesc.h>

// RW2STL - implement (RWGVector, LgFrScheduleDescriptor)

// RW2STL - implement (RWGOrderedVector, LgFrScheduleDescriptor)



// Create and initialize maxAbbrevLength_
const int LgFrScheduleDescriptor::maxAbbrevLength_ = 15;

// Schedule descriptor's long name
const std::string &
LgFrScheduleDescriptor::name(
       LgFrNationalLanguage nationalLanguage )
const
{
  const std::string * retVal = &englishDescriptorName_;
  if ( nationalLanguage == Kana && kanaDescriptorName_ != "" )
    retVal = & kanaDescriptorName_;
  return *retVal;
}

// Schedule descriptor's name abbreviation
const std::string &
LgFrScheduleDescriptor::abbrev(
       LgFrNationalLanguage nationalLanguage )
const
{
  const std::string * retVal = &englishDescriptorAbbrev_;
  if ( nationalLanguage == Kana && kanaDescriptorAbbrev_ != "" )
    retVal = &kanaDescriptorAbbrev_;
  return *retVal;
}

int
LgFrScheduleDescriptor::compareTo(
   const LgFrScheduleDescriptor* c)
const
{
  const LgFrScheduleDescriptor * sd = (const LgFrScheduleDescriptor *) c; 
  int retVal = name().compare( sd->name() );
#ifdef DEBUG
  // If names are equal then assert that abbreviations & NLS names are equal
  if ( retVal==0 ) assert( abbrev() == sd->abbrev() );
  if ( retVal==0 ) assert( name(Kana) == sd->name(Kana) );
  if ( retVal==0 ) assert( abbrev(Kana) == sd->abbrev(Kana) );
#endif  
  return retVal;
}

bool
LgFrScheduleDescriptor::isEqual(
   const LgFrScheduleDescriptor * sd)
const
{
  return ( compareTo(sd) == 0 );
}

int
LgFrScheduleDescriptor::maxAbbrevLength()
{
    return LgFrScheduleDescriptor::maxAbbrevLength_;
}


// English Constructor.
LgFrScheduleDescriptor::LgFrScheduleDescriptor( 
   const std::string & englishDescriptorName,
   const std::string & englishDescriptorAbbrev)
:
   englishDescriptorName_  ( englishDescriptorName ),
   englishDescriptorAbbrev_( englishDescriptorAbbrev ),
   kanaDescriptorName_     ( "" ),
   kanaDescriptorAbbrev_   ( "" )
{
  // Make sure abbreviations are not longer than maxAbbrevLength
  testAbbrevLength();
} 

// English and Kana Constructor.
LgFrScheduleDescriptor::LgFrScheduleDescriptor( 
   const std::string & englishDescriptorName,
   const std::string & englishDescriptorAbbrev, 
   const std::string &    kanaDescriptorName,
   const std::string &    kanaDescriptorAbbrev)
:
   englishDescriptorName_  ( englishDescriptorName ),
   englishDescriptorAbbrev_( englishDescriptorAbbrev ),
   kanaDescriptorName_     (    kanaDescriptorName ),
   kanaDescriptorAbbrev_   (    kanaDescriptorAbbrev )
{
  // Make sure abbreviations are not longer than maxAbbrevLength
  testAbbrevLength();
}  

//test to make sure abbreviation length is not too long
void
LgFrScheduleDescriptor::testAbbrevLength()
const
{
#ifdef RW_NO_LOCALE
  if (
      englishDescriptorAbbrev_.length() >
      LgFrScheduleDescriptor::maxAbbrevLength()
      )
    std::cout <<englishDescriptorAbbrev_ <<std::endl;
  if (
      kanaDescriptorAbbrev_.length() >
      LgFrScheduleDescriptor::maxAbbrevLength()
      )
    std::cout <<kanaDescriptorAbbrev_ <<std::endl;
  assert(
         englishDescriptorAbbrev_.length() <=
         LgFrScheduleDescriptor::maxAbbrevLength()
         );
  assert(
         kanaDescriptorAbbrev_.length() <=
         LgFrScheduleDescriptor::maxAbbrevLength()
         );
#else
  if (
      englishDescriptorAbbrev_.length() >
      LgFrScheduleDescriptor::maxAbbrevLength()
      )
    std::cout <<englishDescriptorAbbrev_ <<std::endl;
  if (
      kanaDescriptorAbbrev_.length() >
      LgFrScheduleDescriptor::maxAbbrevLength()
      )
    std::cout <<kanaDescriptorAbbrev_ <<std::endl;
  assert(
         englishDescriptorAbbrev_.length() <=
         LgFrScheduleDescriptor::maxAbbrevLength()
         );
  assert(
         kanaDescriptorAbbrev_.length() <=
         LgFrScheduleDescriptor::maxAbbrevLength()
         );
#endif
}


// Copy constructor
LgFrScheduleDescriptor::LgFrScheduleDescriptor( 
   const LgFrScheduleDescriptor& source)
:
   englishDescriptorName_  ( source.englishDescriptorName_ ),
   englishDescriptorAbbrev_( source.englishDescriptorAbbrev_ ),
      kanaDescriptorName_  ( source.   kanaDescriptorName_ ),
      kanaDescriptorAbbrev_( source.   kanaDescriptorAbbrev_ )
{
  // Nothing to do here
}
  
// destructor
LgFrScheduleDescriptor::~LgFrScheduleDescriptor()
{
  // Nothing to do here
}     
  
// Assignment 
LgFrScheduleDescriptor& 
  LgFrScheduleDescriptor::operator=(const LgFrScheduleDescriptor& rhs)
{
  if (this != &rhs) {           // Check for assignment to self
    englishDescriptorName_   = rhs.englishDescriptorName_;
    englishDescriptorAbbrev_ = rhs.englishDescriptorAbbrev_;
       kanaDescriptorName_   = rhs.   kanaDescriptorName_;
       kanaDescriptorAbbrev_ = rhs.   kanaDescriptorAbbrev_;
  }
  return *this;
}

// Constructor.
LgFrScheduleDescriptor::LgFrScheduleDescriptor( )
:
   englishDescriptorName_( ),
   englishDescriptorAbbrev_( ),
      kanaDescriptorName_( ),
      kanaDescriptorAbbrev_( )
{
  // Nothing to do here
}



// Test equality.  If string descriptors are equal then
// scheduleDescriptors are equal.
bool
   operator==(
      const LgFrScheduleDescriptor & lhs,
      const LgFrScheduleDescriptor & rhs)
{
  return lhs.isEqual( &rhs );
}


bool
   operator!=(
      const LgFrScheduleDescriptor & lhs,
      const LgFrScheduleDescriptor & rhs)
{
  return ! operator==(lhs,rhs);
}
@


1.1
log
@Initial revision
@
text
@d1 6
a6 1
#include <iostream.h>
d10 4
a13 2
implement (RWGVector, LgFrScheduleDescriptor)
implement (RWGOrderedVector, LgFrScheduleDescriptor)
d20 1
a20 1
const RWCString &
d25 1
a25 1
  const RWCString * retVal = &englishDescriptorName_;
d32 1
a32 1
const RWCString &
d37 1
a37 1
  const RWCString * retVal = &englishDescriptorAbbrev_;
a42 8
// Virtual methods inherited from RWCollectable
RWClassID
LgFrScheduleDescriptor::isA()
const
{
  return __LGFRSCHEDULEDESCRIPTOR;
}

d45 1
a45 1
   const RWCollectable* c)
a47 1
  assert( c->isA() == __LGFRSCHEDULEDESCRIPTOR );
d49 1
a49 1
  int retVal = name().compareTo( sd->name() );
d59 1
a59 9
unsigned
LgFrScheduleDescriptor::hash()
const
{
  RWCString str = name() + abbrev();
  return str.hash();
}

RWBoolean
d61 1
a61 1
   const RWCollectable * sd)
d76 2
a77 2
   const RWCString & englishDescriptorName,
   const RWCString & englishDescriptorAbbrev)
d90 4
a93 4
   const RWCString & englishDescriptorName,
   const RWCString & englishDescriptorAbbrev, 
   const RWCString &    kanaDescriptorName,
   const RWCString &    kanaDescriptorAbbrev)
d114 1
a114 1
    cout <<englishDescriptorAbbrev_ <<endl;
d119 1
a119 1
    cout <<kanaDescriptorAbbrev_ <<endl;
d130 1
a130 1
      englishDescriptorAbbrev_.mbLength() >
d133 1
a133 1
    cout <<englishDescriptorAbbrev_ <<endl;
d135 1
a135 1
      kanaDescriptorAbbrev_.mbLength() >
d138 1
a138 1
    cout <<kanaDescriptorAbbrev_ <<endl;
d140 1
a140 1
         englishDescriptorAbbrev_.mbLength() <=
d144 1
a144 1
         kanaDescriptorAbbrev_.mbLength() <=
d197 1
a197 1
RWBoolean
d206 1
a206 1
RWBoolean
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 6
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
//#include <iostream>
#include <ostream.h>
d5 2
a6 4
// RW2STL - implement (RWGVector, LgFrScheduleDescriptor)

// RW2STL - implement (RWGOrderedVector, LgFrScheduleDescriptor)

d13 1
a13 1
const std::string &
d18 1
a18 1
  const std::string * retVal = &englishDescriptorName_;
d25 1
a25 1
const std::string &
d30 1
a30 1
  const std::string * retVal = &englishDescriptorAbbrev_;
d36 8
d46 1
a46 1
   const LgFrScheduleDescriptor* c)
d49 1
d51 1
a51 1
  int retVal = name().compare( sd->name() );
d61 9
a69 1
bool
d71 1
a71 1
   const LgFrScheduleDescriptor * sd)
d86 2
a87 2
   const std::string & englishDescriptorName,
   const std::string & englishDescriptorAbbrev)
d100 4
a103 4
   const std::string & englishDescriptorName,
   const std::string & englishDescriptorAbbrev, 
   const std::string &    kanaDescriptorName,
   const std::string &    kanaDescriptorAbbrev)
d140 1
a140 1
      englishDescriptorAbbrev_.length() >
d145 1
a145 1
      kanaDescriptorAbbrev_.length() >
d150 1
a150 1
         englishDescriptorAbbrev_.length() <=
d154 1
a154 1
         kanaDescriptorAbbrev_.length() <=
d207 1
a207 1
bool
d216 1
a216 1
bool
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d6 1
a6 1
#include <iostream>
d114 1
a114 1
    std::cout <<englishDescriptorAbbrev_ <<std::endl;
d119 1
a119 1
    std::cout <<kanaDescriptorAbbrev_ <<std::endl;
d133 1
a133 1
    std::cout <<englishDescriptorAbbrev_ <<std::endl;
d138 1
a138 1
    std::cout <<kanaDescriptorAbbrev_ <<std::endl;
@


