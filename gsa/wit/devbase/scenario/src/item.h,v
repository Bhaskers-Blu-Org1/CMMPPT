head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.38;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.31;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFRITEM_H
#define LGFRITEM_H

#include <string>
#include <assert.h>

#include <scenario/src/idnumber.h>

#include <scenario/src/dll.h>

// This LgFrItem class is an abstract base class for LgFrDemand and LgFrPart.

class LGFR_DECLSPEC LgFrItem 
{ 
public:
    // build
    virtual LgFrItem* Clone() const = 0;

    // Get the name
    virtual std::string name() const = 0;

    // Get the name for gui use
    virtual std::string guiName() const = 0;

    // Get name in printable form
    virtual std::string printingName(bool trunc = true) const = 0;

    // Assignment
    virtual LgFrItem& operator=(const LgFrItem& rhs) = 0;

    // Comparison
    virtual int operator==(const LgFrItem&) const = 0;
    virtual int compareTo( const LgFrItem* ) const = 0;
    virtual bool isEqual( const LgFrItem* ) const = 0;

    // Print part data
    virtual void print() const = 0;

    // Polymorphism: Exactly one of these two must be defined 
    // in the derived class and return true
    virtual bool isAPart() const { return false; }
    virtual bool isADemand() const { return false; }

};

#endif
@


1.1
log
@Initial revision
@
text
@d4 4
a7 1
#include <rw/collect.h>
a8 1
// #include <scenario/src/idnumber.h>
d11 13
a23 1
// This part class is an abstract base class for LgFrDemand and LgFrPart.
d25 2
a26 1
class LGFR_DECLSPEC LgFrItem : public RWCollectable {
d28 2
a29 1
public:
d31 4
a34 1
        RWDECLARE_ABSTRACT_COLLECTABLE(LgFrItem);
d36 2
a37 20
        // Get the name
        virtual RWCString name() const = 0;
        
        // Get the name for gui use
        virtual RWCString guiName() const = 0;

        // Get name in printable form
        virtual 
	  RWCString printingName(RWBoolean trunc = TRUE) const = 0;

        // Assignment
        virtual
          LgFrItem&
            operator=(const LgFrItem& rhs) = 0;

	// Equality
	virtual
           int
              operator==(const LgFrItem&)
	              const = 0;
d39 4
a42 2
        // Print part data
        virtual void print() const = 0;
a43 1
private:
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d4 1
a4 2
#include <string>
#include <assert.h>
d6 2
a7 1
#include <scenario/src/idnumber.h>
d9 1
a9 1
#include <scenario/src/dll.h>
d11 1
a11 1
// This LgFrItem class is an abstract base class for LgFrDemand and LgFrPart.
a12 2
class LGFR_DECLSPEC LgFrItem 
{ 
a13 14
    // build
    virtual LgFrItem* Clone() const = 0;

    // Get the name
    virtual std::string name() const = 0;

    // Get the name for gui use
    virtual std::string guiName() const = 0;

    // Get name in printable form
    virtual std::string printingName(bool trunc = true) const = 0;

    // Assignment
    virtual LgFrItem& operator=(const LgFrItem& rhs) = 0;
d15 1
a15 4
    // Comparison
    virtual int operator==(const LgFrItem&) const = 0;
    virtual int compareTo( const LgFrItem* ) const = 0;
    virtual bool isEqual( const LgFrItem* ) const = 0;
d17 20
a36 2
    // Print part data
    virtual void print() const = 0;
d38 2
a39 4
    // Polymorphism: Exactly one of these two must be defined 
    // in the derived class and return true
    virtual bool isAPart() const { return false; }
    virtual bool isADemand() const { return false; }
d41 1
@

