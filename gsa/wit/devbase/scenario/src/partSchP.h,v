head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.42;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.33;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LgFrSortingPartScheduleFloatSMARTPTRH
#define LgFrSortingPartScheduleFloatSMARTPTRH
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/refCount.h>

/*
class LgFrSortingPartScheduleFloat
{
private:
    int i_;
public:
    LgFrSortingPartScheduleFloat(int j = 0) : i_(j) {}
    const int i() const {return i_;}
    void i(const int j) {i_ = j;}
};
*/

// forward declaration
class LgFrSortingScheduleFloatSmartPointerToConst;
class LgFrSortingScheduleFloatSmartPointer;
class LgFrSortingPartScheduleFloat;

class LgFrSortingPartScheduleFloatSmartPointerToConst
{

public:
    LgFrSortingPartScheduleFloatSmartPointerToConst();
    LgFrSortingPartScheduleFloatSmartPointerToConst(LgFrSortingPartScheduleFloat*);
    LgFrSortingPartScheduleFloatSmartPointerToConst(LgFrSortingPartScheduleFloat*, LgFrReferenceCount&);
    virtual ~LgFrSortingPartScheduleFloatSmartPointerToConst();
    LgFrSortingPartScheduleFloatSmartPointerToConst(const LgFrSortingPartScheduleFloatSmartPointerToConst&);
    LgFrSortingPartScheduleFloatSmartPointerToConst deepCopy() const;
    LgFrSortingPartScheduleFloatSmartPointerToConst& operator=(const LgFrSortingPartScheduleFloatSmartPointerToConst&);
    bool operator==(const LgFrSortingPartScheduleFloatSmartPointerToConst&) const;
    bool operator!=(const LgFrSortingPartScheduleFloatSmartPointerToConst&) const;
    const LgFrSortingPartScheduleFloat& operator*() const;
    const LgFrSortingPartScheduleFloat * const operator->() const;
//    operator const LgFrSortingPartScheduleFloat* const () const;
    operator LgFrSortingScheduleFloatSmartPointerToConst () const;

    bool unique() const;
    bool null() const;
    static void test();

protected:
    LgFrSortingPartScheduleFloat* pointer_; // should make this const but I want to use
                            //  it for the LgFrSortingPartScheduleFloatSmartPointer class
			    //  (the non-const class) to inherit this member.
			    //  The way it's been set up only const stuff
                            //  is being returned so we're OK.
    LgFrReferenceCount count_;

};


class LgFrSortingPartScheduleFloatSmartPointer : public LgFrSortingPartScheduleFloatSmartPointerToConst
{
public:
    LgFrSortingPartScheduleFloatSmartPointer();
    LgFrSortingPartScheduleFloatSmartPointer(LgFrSortingPartScheduleFloat*);
    LgFrSortingPartScheduleFloatSmartPointer(LgFrSortingPartScheduleFloat*, LgFrReferenceCount&);
    ~LgFrSortingPartScheduleFloatSmartPointer();
    LgFrSortingPartScheduleFloatSmartPointer(const LgFrSortingPartScheduleFloatSmartPointer&);
    LgFrSortingPartScheduleFloatSmartPointer(LgFrSortingPartScheduleFloatSmartPointerToConst);
    LgFrSortingPartScheduleFloatSmartPointer deepCopy();
    LgFrSortingPartScheduleFloatSmartPointer& operator=(const LgFrSortingPartScheduleFloatSmartPointer&);
//    LgFrSortingPartScheduleFloatSmartPointer& operator=(LgFrSortingPartScheduleFloatSmartPointerToConst);
    bool operator==(const LgFrSortingPartScheduleFloatSmartPointer&) const;
//    bool operator==(LgFrSortingPartScheduleFloatSmartPointerToConst) const;
    bool operator!=(const LgFrSortingPartScheduleFloatSmartPointer&) const;
//    bool operator!=(LgFrSortingPartScheduleFloatSmartPointerToConst) const;

    // these are really dangerous as they circumvent the notion
    //  of using smart pointers anyways.  you had better be using
    //  these just to call another method
    LgFrSortingPartScheduleFloat& operator*();
    const LgFrSortingPartScheduleFloat& operator*() const;
    LgFrSortingPartScheduleFloat* const operator->();
    const LgFrSortingPartScheduleFloat* const operator->() const;
//    operator const LgFrSortingPartScheduleFloat* const () const;
//    operator LgFrSortingPartScheduleFloat* ();
    operator LgFrSortingScheduleFloatSmartPointerToConst () const;
    operator LgFrSortingScheduleFloatSmartPointer ();

    bool unique() const;
    bool null() const;
    static void test();
};

#endif

@


1.1
log
@Initial revision
@
text
@d3 2
a5 1
#include <rw/defs.h>
d36 2
a37 2
    RWBoolean operator==(const LgFrSortingPartScheduleFloatSmartPointerToConst&) const;
    RWBoolean operator!=(const LgFrSortingPartScheduleFloatSmartPointerToConst&) const;
d43 2
a44 2
    RWBoolean unique() const;
    RWBoolean null() const;
d70 4
a73 4
    RWBoolean operator==(const LgFrSortingPartScheduleFloatSmartPointer&) const;
//    RWBoolean operator==(LgFrSortingPartScheduleFloatSmartPointerToConst) const;
    RWBoolean operator!=(const LgFrSortingPartScheduleFloatSmartPointer&) const;
//    RWBoolean operator!=(LgFrSortingPartScheduleFloatSmartPointerToConst) const;
d87 2
a88 2
    RWBoolean unique() const;
    RWBoolean null() const;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d4 1
d35 2
a36 2
    bool operator==(const LgFrSortingPartScheduleFloatSmartPointerToConst&) const;
    bool operator!=(const LgFrSortingPartScheduleFloatSmartPointerToConst&) const;
d42 2
a43 2
    bool unique() const;
    bool null() const;
d69 4
a72 4
    bool operator==(const LgFrSortingPartScheduleFloatSmartPointer&) const;
//    bool operator==(LgFrSortingPartScheduleFloatSmartPointerToConst) const;
    bool operator!=(const LgFrSortingPartScheduleFloatSmartPointer&) const;
//    bool operator!=(LgFrSortingPartScheduleFloatSmartPointerToConst) const;
d86 2
a87 2
    bool unique() const;
    bool null() const;
@

