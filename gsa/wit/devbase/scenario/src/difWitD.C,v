head	1.4;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.4.0.4
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	nextGenBranch:1.3.0.4
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.3.0.2
	Root-of-EndRw:1.3
	EndWitRw-branch:1.2.0.6
	Root-of-EndWitRw:1.2
	RwToStl-branch:1.2.0.4
	Root-of-RwToStl:1.2
	latest_sce_3_10_20010924:1.2.0.2
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.08.05.12.36.13;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.02.17.42.24;	author austel;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.10.23.02.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.41;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.41;	author wit;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changed hard coded path to relative path.
@
text
@#include <math.h>
#include <iostream.h>
#include <fstream.h>

#include <rw/ctoken.h>

#include <scenario/src/difWitD.h>
#include <scenario/src/scenario.h>
#include <scenario/src/testScen.h>
#include <scenario/src/idnumber.h>
#include <scenario/src/difEssSc.h>


// added for vacpp - vra
implement (RWGVector, int)

//----------------------------------------------------------------------------
// To register all global functions for this class
// The following functions are registered by using difWitR globle function: 
// unitCost, procCost, obj1ScrapCost,obj1StockCost, supplyVol, yield, 
// cycleTime, obj1ProdCost, obj1ProdCos, grossRev, demandVol, 
// obj1CumShipReward, obj1ShipReward   
//----------------------------------------------------------------------------
void
registerWitFileDifImpFunctions(
    LgFrDataInterfaceImplementation * dImpWF) 
{

// Globle function for raw parts
// Register difWitRun global functions for
//   unitcost, procCost, constrained, procLeadTime, 
//   obj1ScrapCost, obj1StockCost, and supplyVol.

dImpWF->registerFunction("rawUnitCost", material, part,
                            vectorFloat, difWitRunGetPartUnitCost);
dImpWF->registerFunction("rawProcCost", material, part,
                            vectorFloat, difWitRunGetPartProcCost);
dImpWF->registerFunction("rawConstrained", material, part,
                            vectorInt, difWitRunGetPartConstrained);
dImpWF->registerFunction("rawProcLeadTime", material, part,
                            timeVecFloat, difWitRunGetPartProcLeadTime);
dImpWF->registerFunction("rawObj1ScrapCost", material, part,
                            timeVecFloat, difWitRunGetPartObj1ScrapCost);
dImpWF->registerFunction("rawObj1StockCost", material, part,
                            timeVecFloat, difWitRunGetPartObj1StockCost);
dImpWF->registerFunction("rawSupplyVol", material, part,
                            timeVecFloat, difWitRunGetPartSupplyVol);


// Global functions for product parts.
// Register difWitRun global functions for
//   unitcost, procCost, constrained, yiels, procLeadTime, cycleTime, 
//   obj1ProdCost, obj1ScrapCost, obj1StockCost, supplyVol, and minLotSize. 

dImpWF->registerFunction("productUnitCost", material, part,
                            vectorFloat, difWitRunGetPartUnitCost);
dImpWF->registerFunction("productProcCost", material, part,
                            vectorFloat, difWitRunGetPartProcCost);
dImpWF->registerFunction("productConstrained", material, part,
                            vectorInt, difWitRunGetPartConstrained);
dImpWF->registerFunction("productYield", material, part,
                            vectorInt, difWitRunGetProductYield);
dImpWF->registerFunction("productYieldFloat", material, part,
                            timeVecFloat, difWitRunGetProductYieldFloat);
dImpWF->registerFunction("productProcLeadTime", material, part,
                            timeVecFloat, difWitRunGetPartProcLeadTime);
dImpWF->registerFunction("productCycleTime", material, part,
                           timeVecFloat , difWitRunGetProductCycleTime);
dImpWF->registerFunction("productObj1ProdCost", material, part,
                            timeVecFloat, difWitRunGetProductObj1ProdCost);
dImpWF->registerFunction("productObj1ScrapCost", material, part,
                            timeVecFloat, difWitRunGetPartObj1ScrapCost);
dImpWF->registerFunction("productObj1StockCost", material, part,
                            timeVecFloat, difWitRunGetPartObj1StockCost);
dImpWF->registerFunction("productSupplyVol", material, part,
                            timeVecFloat, difWitRunGetPartSupplyVol);
dImpWF->registerFunction("productMinLotSize", material, part,
                            timeVecFloat, difWitRunGetProductMinLotSize);
dImpWF->registerFunction("productIncLotSize", material, part,
                            timeVecFloat, difWitRunGetProductIncLotSize);


// Global functions for capacity parts.
// Register difWitRun global functions for
//   unitcost, constrained, obj1ScrapCost, and supplyVol 

dImpWF->registerFunction("capacityUnitCost", material, part,
                            vectorFloat, difWitRunGetPartUnitCost);
dImpWF->registerFunction("capacityConstrained", material, part,
                            vectorInt, difWitRunGetPartConstrained);
dImpWF->registerFunction("capacityObj1ScrapCost", material, part,
                            timeVecFloat, difWitRunGetPartObj1ScrapCost);
dImpWF->registerFunction("capacitySupplyVol", material, part,
                            timeVecFloat, difWitRunGetPartSupplyVol);


// Global functions for demands
// Register difWitRun global functions for
//  grossRev, demandVol, Obj1CumShipReward, priority, and obj1ShipReward.

dImpWF->registerFunction("demandGrossRev", demandType, demand,
                            vectorFloat, difWitRunGetDemandGrossRev);
dImpWF->registerFunction("demandVol", demandType, demand,
                            timeVecFloat, difWitRunGetDemandVol);
dImpWF->registerFunction("demandObj1CumShipReward", demandType, demand,
                            timeVecFloat, difWitRunGetDemandObj1CumShipReward);
dImpWF->registerFunction("demandObj1ShipReward", demandType, demand,
                            timeVecFloat, difWitRunGetDemandObj1ShipReward);
dImpWF->registerFunction("demandPriority", demandType, demand,
                            timeVecFloat,difWitRunGetDemandPriority );


// Parts table, register globle functions from difWitR, 7/19/95 DW 
dImpWF->registerFunction("rawParts", material, part,
			   orderedVecPart, difWitRunGetRawParts);
dImpWF->registerFunction("productParts", material, part,
			   orderedVecPart, difWitRunGetProductParts);
dImpWF->registerFunction("capacityParts", material, part,
			   orderedVecPart, difWitRunGetCapacityParts);

// using globle function from difWitR, 7/19/95 DW
dImpWF->registerFunction("committedDemands",demandType , demand,
			   orderedVecDemand, difWitRunGetCommittedDemands);
dImpWF->registerFunction("newOpportunityDemands", demandType, demand,
			   orderedVecDemand, difWitRunGetNewOpportunityDemands);
dImpWF->registerFunction("firmForecastDemands", demandType, demand,
			   orderedVecDemand, difWitRunGetFirmForecastDemands);
dImpWF->registerFunction("riskForecastDemands", demandType, demand,
			   orderedVecDemand, difWitRunGetRiskForecastDemands);
// Register define bom globle function
dImpWF->registerFunction("defineBom", material, part,
                            timeVecFloat, difWitRunDefineBom);

}


// -----------------------------------------------------------------------
//  Create a LgFrDataInterfaceImplementationFromWitDataFile*
// -----------------------------------------------------------------------

LgFrDataInterfaceImplementation * createWitFileDifImp(const RWCString filename)
{
   return new LgFrDataInterfaceImplementationFromWitDataFile(filename);
} 

//-------------------------------------------------------------------
//
//   Methods to obtain global attributes
//
//-------------------------------------------------------------------

// Return problem title
RWCString
LgFrDataInterfaceImplementationFromWitDataFile::title(
    const LgFrDataInterfaceEssentials* difEssenPtr)
const
{
  return filename_;
}

//-------------------------------------------------------------------
// Set problem title (private member function)
//-------------------------------------------------------------------
void
LgFrDataInterfaceImplementationFromWitDataFile::title(
     RWCString t 
    )
{
// not allowed here
}


LgFrCalendar
LgFrDataInterfaceImplementationFromWitDataFile::calendar (
    const RWCString witDataFileName
)
{

 RWBoolean directlyReadNPeriods = FALSE;
 int nPeriods;
 
 // Try reading WIT data file to find nPeriods.
 // If directly reading does not work, then read file using witReadData.

 // First attempt direct read of datafile
 {
   // Open file
   ifstream witF( witDataFileName );
   if ( !witF )
   {
     cerr <<"File open failed: " + witDataFileName <<endl;
     exit( EXIT_FAILURE );
   }

   RWCString line;
   // Read first 40 lines looking for nPeriods
   for ( int lineCount=0;
         lineCount<40 && !directlyReadNPeriods;
         lineCount++ ) {
     line.readLine(witF);
     if ( !witF ) break;   

     // Was line just read an nPeriods line?
     RWCTokenizer next(line);
     RWCSubString token = next();
     RWCString token1 = token;
     if (token1 == "nPeriods" ) {

       // nPeriods line found
       RWCSubString token2 = next();
       long period;
       RWBoolean result = RWLocale::global().stringToNum(token2, &period);
       if ( result ) {
         nPeriods = period;
         directlyReadNPeriods = TRUE;
       }

     } /* end if ( ) */
   }
 } // finished with direct read of data file

 // If direct read of data file did not find nPeriods, then have wit read the
 // data file
 if ( !directlyReadNPeriods )
   {
   WitRun * wr;
   witNewRun( &wr );
   witSetMesgTimesPrint( wr, WitTRUE, WitINFORMATIONAL_MESSAGES, 0 );
   witInitialize( wr );
   witReadData( wr, witDataFileName );
   witGetNPeriods( wr, &nPeriods );
   }

 
 // Assume first period is today, and period size is a week.
 // These should be added as parameters to this method.
 return LgFrCalendar(nPeriods, RWTime(RWDate()), LgFrWeek );

}


// Return type identifier
isAReturnType
LgFrDataInterfaceImplementationFromWitDataFile::isA()
const
{
  return __LGFRDATAINTERFACEIMPLEMENTATIONFROMWITDATAFILE;
}

// Define a new WitRun
void  
  LgFrDataInterfaceImplementationFromWitDataFile::defineWitRun()
const
{
  
  assert( !validWitRun() );
  // make a local version of this that's
  // not a pointer-to-const, Scott Meyers item 21 p 77.
  LgFrDataInterfaceImplementationFromWitDataFile * const localThis =
        ( LgFrDataInterfaceImplementationFromWitDataFile * const ) this;
  WitRun * wr = localThis->LgFrDataInterfaceImplementationFromWitRun::mutableWitRun();
  witSetMesgTimesPrint(wr, WitTRUE, WitINFORMATIONAL_MESSAGES, 0);
  witInitialize( wr );

  witSetMesgTimesPrint( wr, WitTRUE, 538, 0 );
  witSetWit34Compatible( wr, WitTRUE );

  witReadData( wr, filename_);

  assert ( validWitRun() );
}

// Return a mutable WitRun*
WitRun *  
  LgFrDataInterfaceImplementationFromWitDataFile::mutableWitRun(
      const LgFrDataInterfaceEssentials* difEssenPtr)
{
  if( !validWitRun() ) defineWitRun();
  return LgFrDataInterfaceImplementationFromWitRun::mutableWitRun();
}

// Return a const WitRun*
WitRun *  
  LgFrDataInterfaceImplementationFromWitDataFile::constWitRun(
      const LgFrDataInterfaceEssentials* difEssenPtr)
const
{
  if( !validWitRun() ) defineWitRun();
  return LgFrDataInterfaceImplementationFromWitRun::constWitRun();
}

// Make clone copy of object
LgFrDataInterfaceImplementation *
LgFrDataInterfaceImplementationFromWitDataFile::clone()
const
{
  LgFrDataInterfaceImplementationFromWitDataFile* newInst =
      new LgFrDataInterfaceImplementationFromWitDataFile(*this);
  return (newInst);
}

// Destructor
LgFrDataInterfaceImplementationFromWitDataFile::~LgFrDataInterfaceImplementationFromWitDataFile()
{
  // nothing to do here
}

// Assignment operator.
LgFrDataInterfaceImplementationFromWitDataFile&
LgFrDataInterfaceImplementationFromWitDataFile::operator=(
  const LgFrDataInterfaceImplementationFromWitDataFile& rhs)
{
  if (this != &rhs) {           // Check for assignment to self
     (this->LgFrDataInterfaceImplementationFromWitRun::operator= ) (rhs);
     
     filename_ = rhs.filename_;
  }
  return *this;
}

// Copy constructor
LgFrDataInterfaceImplementationFromWitDataFile::LgFrDataInterfaceImplementationFromWitDataFile(
  const LgFrDataInterfaceImplementationFromWitDataFile& source)
:
   LgFrDataInterfaceImplementationFromWitRun(source),
   filename_(source.filename_)
{
  // nothing to do here
}

// Preferred Constructor
 LgFrDataInterfaceImplementationFromWitDataFile::LgFrDataInterfaceImplementationFromWitDataFile(
   const RWCString filename_)

:
   LgFrDataInterfaceImplementationFromWitRun(),
   filename_(filename_)
{
// Nothing to do here
}

// Default Constructor
// This is a private method
LgFrDataInterfaceImplementationFromWitDataFile::LgFrDataInterfaceImplementationFromWitDataFile()
:
   LgFrDataInterfaceImplementationFromWitRun(),
   filename_(" ")

{
   // Nothing to do here
}     
#ifdef NDEBUG
#undef NDEBUG
#endif
// Tests this class.  Only returns if all tests passed
// Tests this class.  Only returns if all tests passed
// Expects data in testScenario1 to have come from
// ../../../../wit/wit-data/examples/diner12/wit.data, and expects
// testScenario2 to have been made by copying testScenario1
// testSc.
// Right now, the only scenario that works correctly with a 
// LgFrTestDataInterface is LgFrScenarioforCMRP.  Although the above 
// comment says that data should have come from a file, it is probably
// misleading (WCD, 9/15/94).  The data from the file (which has already
// been put into WIT) is probably ignored.  This should be changed
// to take LgFrScenarioforCMRP's for the 1st and 6th arguments.
void
LgFrDataInterfaceImplementationFromWitDataFile::contextTest
  (
   LgFrDataInterface    	* tdif1Ptr,	// testScenario1's
   LgFrLastProblemSolved        & lps,          // testScenario1's
   LgFrDataInterface    	* ts1dupDifPtr,	// testScenario1dup's
   LgFrDataInterface    	* tdif2Ptr,	// testScenario2's
   const LgFrScenario           * scenPtr)	// testScenario1's
{
  const float fltEps = .0001f;

  LgFrDataInterface& tdif1 = *tdif1Ptr;
  LgFrDataInterface& ts1dupDif = *ts1dupDifPtr;
  LgFrDataInterface& tdif2 = *tdif2Ptr;
  LgFrDataInterfaceImplementation* tdif1Imp
      = tdif1.dataInterfaceImplementation();
  LgFrDataInterfaceImplementation* ts1dupDifImp
      = ts1dupDif.dataInterfaceImplementation();
  LgFrDataInterfaceImplementation* tdif2Imp
      = tdif2.dataInterfaceImplementation();

  // Register all functions
  registerWitFileDifImpFunctions(tdif1Imp);
  registerWitFileDifImpFunctions(tdif2Imp);
  registerWitFileDifImpFunctions(ts1dupDifImp);

  // Test calendar method
  {
      LgFrCalendar c
          = LgFrDataInterfaceImplementationFromWitDataFile::
                  calendar( "../../../../wit/wit-data/examples/diner12/wit.data" );
      assert (c.nPeriods() == 2);
  }

  // Test isA method
  assert (tdif1.isA() == __LGFRDATAINTERFACE);
  assert (tdif2.isA() == __LGFRDATAINTERFACE);
  assert (ts1dupDif.isA() == __LGFRDATAINTERFACE);
  assert (tdif1Imp->isA() == __LGFRDATAINTERFACEIMPLEMENTATIONFROMWITDATAFILE);
  assert (tdif2Imp->isA() == __LGFRDATAINTERFACEIMPLEMENTATIONFROMWITDATAFILE);
  assert (ts1dupDifImp->isA() 
	  == __LGFRDATAINTERFACEIMPLEMENTATIONFROMWITDATAFILE);

  // Test title method
  assert( tdif1.title()=="../../../../wit/wit-data/examples/diner12/wit.data" );
  assert( tdif2.title()=="../../../../wit/wit-data/examples/difWit/wit.data" );
  assert( ts1dupDif.title()=="../../../../wit/wit-data/examples/diner12/wit.data" );
  assert( tdif1Imp->title()=="../../../../wit/wit-data/examples/diner12/wit.data" );
  assert( tdif2Imp->title()=="../../../../wit/wit-data/examples/difWit/wit.data" );
  assert( ts1dupDifImp->title()=="../../../../wit/wit-data/examples/diner12/wit.data" );

  // Test get parts global functions
  LgFrDataInterfaceEssentialsFromScenario difEssen(scenPtr);
  LgFrOrderedVectorPart partpv;
  RWCString itemSubTypeStr = "material";  
  LgFrOrderedVectorPart* rawPartsPtr
    = (LgFrOrderedVectorPart*) tdif2.partAttribute(
	partpv, itemSubTypeStr, "rawParts" , &difEssen);
  LgFrOrderedVectorPart& raw = *rawPartsPtr;
  for(size_t t = 0 ; t < 7 ; t++)
    witAddPart( lps.witRun(), raw[t].name(), WitRAW);
  assert( raw.entries() == 7 );
  assert( raw[0].name() == "Egg" );
  assert( raw[1].name() == "Butter" );


  LgFrOrderedVectorPart* productPartsPtr
    = (LgFrOrderedVectorPart*) tdif2.partAttribute(
	partpv, itemSubTypeStr, "productParts", &difEssen );
  LgFrOrderedVectorPart& product = * productPartsPtr;
  for( t = 0 ; t < 10 ; t++)
    witAddPart( lps.witRun(), product[t].name(), WitPRODUCT);
  assert( product.entries() == 10 );
  assert( product[9].name() == "HamEgg_Sand" );


  LgFrOrderedVectorPart* capacityPartsPtr
    = (LgFrOrderedVectorPart*) tdif2.partAttribute(
	partpv, itemSubTypeStr, "capacityParts", &difEssen );
  LgFrOrderedVectorPart& capacity = * capacityPartsPtr;
  for( t = 0 ; t < 2 ; t++)
    witAddPart( lps.witRun(), capacity[t].name(), WitCAPACITY);
  assert( capacity.entries() == 2 );
  assert( capacity[0].name() == "Skillet" );



  // Test get raw part attributes global functions
  {
  LgFrVectorFloat* unitCostVectPtr
    = (LgFrVectorFloat*) tdif2.partAttribute
      (raw,itemSubTypeStr,"rawUnitCost", &difEssen ); 
  LgFrVectorFloat& unitCost = *unitCostVectPtr;
  assert( unitCost.length() == 7 );
  assert( unitCost[0] == 1.5 );


  LgFrVectorInt* constrainedVectPtr
   = (LgFrVectorInt*) tdif2.partAttribute
      (raw,itemSubTypeStr,"rawConstrained", &difEssen );
  LgFrVectorInt& constrained = *constrainedVectPtr;
  assert( constrained.length() == 7 );
  for (int i=0; i<constrained.length(); i++) assert( constrained[i] );


  LgFrVectorTimeVecFloat* obj1ScrapCostVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
	raw,itemSubTypeStr,"rawObj1ScrapCost", &difEssen );
  LgFrVectorTimeVecFloat& obj1ScrapCost = *obj1ScrapCostVectPtr;
  assert( obj1ScrapCost.length() == 7 );
  assert( obj1ScrapCost[0] == LgFrTimeVecFloat(8,".01 .01 0 0 0 0 0 0") );


  LgFrVectorTimeVecFloat* obj1StockCostVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
	raw,itemSubTypeStr,"rawObj1StockCost", &difEssen );
  LgFrVectorTimeVecFloat& obj1StockCost = *obj1StockCostVectPtr;
  assert( obj1StockCost.length() == 7 );
  assert( obj1StockCost[0] == LgFrTimeVecFloat(8,".02 .02 0 0 0 0 0 0") );


  LgFrVectorTimeVecFloat* supplyVolVectPtr
   = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
       raw,itemSubTypeStr,"rawSupplyVol", &difEssen);
  LgFrVectorTimeVecFloat& supplyVol = *supplyVolVectPtr;
  assert( supplyVol.length() == 7 );
  assert( supplyVol[0] == LgFrTimeVecFloat(8," 5.0 2.0 0 0 0 0 0 0") );
  }



  // Test get product part attributes global functions
  {
  LgFrVectorTimeVecFloat* cycleTimeVectPtr
   = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
       product,itemSubTypeStr,"productCycleTime", &difEssen);
  LgFrVectorTimeVecFloat& cycleTime = *cycleTimeVectPtr;
  assert( cycleTime.length() == 10 );
  assert( cycleTime[0] == LgFrTimeVecFloat(8," 0.3 0.3 0 0 0 0 0 0") );


  LgFrVectorFloat* unitCostVectPtr
    = (LgFrVectorFloat*) tdif2.partAttribute(
	product,itemSubTypeStr,"productUnitCost", &difEssen); 
  LgFrVectorFloat& unitCost = *unitCostVectPtr;
  assert( unitCost.length() == 10 );
  assert ( fabs(unitCost[0] - 1.2) < fltEps );


  LgFrVectorInt* constrainedVectPtr
   = (LgFrVectorInt*) tdif2.partAttribute(
       product,itemSubTypeStr,"productConstrained", &difEssen);
  LgFrVectorInt& constrained = *constrainedVectPtr;
  assert( constrained.length() == 10 );
  for (int i=0; i<constrained.length(); i++)
  assert( constrained[i] );


  LgFrVectorInt* yieldVectPtr
   = (LgFrVectorInt*) tdif2.partAttribute(
       product,itemSubTypeStr,"productYield", &difEssen);
  LgFrVectorInt& yield = *yieldVectPtr;
  assert( yield.length() == 10 );
  assert (yield[0] == 99 );


  LgFrVectorTimeVecFloat* obj1ProdCostVectPtr
   = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
     product,itemSubTypeStr,"productObj1ProdCost", &difEssen);
  LgFrVectorTimeVecFloat& obj1ProdCost = *obj1ProdCostVectPtr;
  assert( obj1ProdCost.length() == 10 );
  assert( obj1ProdCost[0] == LgFrTimeVecFloat(8," 0.5 0.5 0 0 0 0 0 0") );


  LgFrVectorTimeVecFloat* obj1ScrapCostVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
	product,itemSubTypeStr,"productObj1ScrapCost", &difEssen );
  LgFrVectorTimeVecFloat& obj1ScrapCost = *obj1ScrapCostVectPtr;
  assert( obj1ScrapCost.length() == 10 );
  assert( obj1ScrapCost[0] == LgFrTimeVecFloat(8," 0.23 0.23 0 0 0 0 0 0") );


  LgFrVectorTimeVecFloat* obj1StockCostVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
	product,itemSubTypeStr,"productObj1StockCost", &difEssen );
  LgFrVectorTimeVecFloat& obj1StockCost = *obj1StockCostVectPtr; 
  assert( obj1StockCost.length() == 10 );
  assert( obj1StockCost[0] == LgFrTimeVecFloat(8," 0.24 0.24 0 0 0 0 0 0") );


  LgFrVectorTimeVecFloat* supplyVolVectPtr
   = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
       product,itemSubTypeStr,"productSupplyVol", &difEssen);
  LgFrVectorTimeVecFloat& supplyVol = *supplyVolVectPtr;
  assert( supplyVol.length() == 10 );
  assert( supplyVol[0] == LgFrTimeVecFloat(8," 0.01 0.01 0 0 0 0 0 0") );
  }



  // Test get capacity attributes global functions
  {
  LgFrVectorFloat* unitCostVectPtr
    = (LgFrVectorFloat*) tdif2.partAttribute(
	capacity,itemSubTypeStr,"capacityUnitCost", &difEssen); 
  LgFrVectorFloat& unitCost = *unitCostVectPtr;
  assert( unitCost.length() == 2 );
  assert ( fabs(unitCost[0] - 1.11 ) < fltEps );


  LgFrVectorInt* constrainedVectPtr
   = (LgFrVectorInt*) tdif2.partAttribute(
       capacity,itemSubTypeStr,"capacityConstrained", &difEssen);
  LgFrVectorInt& constrained = *constrainedVectPtr;
  assert( constrained.length() == 2 );
  assert( constrained[0] );
  assert( constrained[1] );


  LgFrVectorTimeVecFloat* obj1ScrapCostVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
	capacity,itemSubTypeStr,"capacityObj1ScrapCost", &difEssen );
  LgFrVectorTimeVecFloat& obj1ScrapCost = *obj1ScrapCostVectPtr;
  assert( obj1ScrapCost.length() == 2 );
  assert( obj1ScrapCost[0] == LgFrTimeVecFloat(8," 0.33 0.22 0 0 0 0 0 0") );


  LgFrVectorTimeVecFloat* supplyVolVectPtr
   = (LgFrVectorTimeVecFloat*) tdif2.partAttribute(
       capacity,itemSubTypeStr,"capacitySupplyVol", &difEssen);
  LgFrVectorTimeVecFloat& supplyVol = *supplyVolVectPtr;
  assert( supplyVol.length() == 2 );
  assert( supplyVol[0] == LgFrTimeVecFloat(8," 15 20 0 0 0 0 0 0") );
  
  }


  // Test Get Demands global functions
  {
  LgFrOrderedVectorDemand demandpv;

  LgFrOrderedVectorDemand* committedDemandPtr
    = (LgFrOrderedVectorDemand*) tdif2.demandAttribute(
	demandpv, "committedDemands", &difEssen );
  LgFrOrderedVectorDemand& committed = * committedDemandPtr; 
  assert( committed.entries() == 7 ); 
 

  LgFrOrderedVectorDemand* newOpportunityDemandPtr
    = (LgFrOrderedVectorDemand*) tdif2.demandAttribute(
	demandpv, "newOpportunityDemands", &difEssen );
  LgFrOrderedVectorDemand& newOpportunity = * newOpportunityDemandPtr; 
  assert( newOpportunity.entries() == 1 );


  LgFrOrderedVectorDemand* firmForecastDemandPtr
    = (LgFrOrderedVectorDemand*) tdif2.demandAttribute(
	demandpv, "firmForecastDemands", &difEssen );
  LgFrOrderedVectorDemand& firmForecast = * firmForecastDemandPtr;
  assert( firmForecast.entries() == 1 );
//  assert( firmForecast[1].name() == "FirmForecast" );


  LgFrOrderedVectorDemand* riskForecastDemandPtr
    = (LgFrOrderedVectorDemand*) tdif2.demandAttribute(
	demandpv, "riskForecastDemands", &difEssen );
  LgFrOrderedVectorDemand& riskForecast = * riskForecastDemandPtr;
  assert( riskForecast.entries() == 1 );
//  assert( riskForecast[0].name() == "RiskForecast" );
//  assert( riskForecast[1].name() == "RiskForecast" );
//  assert( riskForecast[2].name() == "RiskForecast" );



  // Test get demand Attribute global functions
  LgFrVectorFloat* grossRevVectPtr
   = (LgFrVectorFloat*) tdif2.demandAttribute(
       committed,"demandGrossRev", &difEssen);
  LgFrVectorFloat& grossRev = *grossRevVectPtr;
  assert( grossRev.length() == 7 );
  assert ( fabs(grossRev[0] - 3.1 ) < fltEps );


  grossRevVectPtr = (LgFrVectorFloat*)
      tdif2.demandAttribute(newOpportunity,"demandGrossRev", &difEssen );
  grossRev = *grossRevVectPtr;
  assert( grossRev.length() == 1 );
  assert ( fabs(grossRev[0] - 3.55 ) < fltEps );


  grossRevVectPtr = (LgFrVectorFloat*)
      tdif2.demandAttribute(firmForecast,"demandGrossRev", &difEssen );
  grossRev = *grossRevVectPtr;
  assert( grossRev.length() == 1 );
  assert ( fabs(grossRev[0] - 1.23 ) < fltEps );


  grossRevVectPtr = (LgFrVectorFloat*)
      tdif2.demandAttribute(riskForecast,"demandGrossRev", &difEssen );
  grossRev = *grossRevVectPtr;
  assert( grossRev.length() == 1 );
  assert ( fabs(grossRev[0] - 2.45 ) < fltEps );


  LgFrVectorTimeVecFloat * demandVolVectPtr = (LgFrVectorTimeVecFloat *)
      tdif2.demandAttribute(committed, "demandVol", &difEssen);
  LgFrVectorTimeVecFloat& demandVol = *demandVolVectPtr;
  assert(demandVol.length() == 7 );
  assert( demandVol[0] == LgFrTimeVecFloat(8," 0.14 0.14 0 0 0 0 0 0") );


  demandVolVectPtr = (LgFrVectorTimeVecFloat *)
      tdif2.demandAttribute(newOpportunity, "demandVol", &difEssen);
  demandVol = *demandVolVectPtr;
  assert(demandVol.length() == 1 );
  assert( demandVol[0] == LgFrTimeVecFloat(8," 3 4 0 0 0 0 0 0") );


  demandVolVectPtr = (LgFrVectorTimeVecFloat *)
      tdif2.demandAttribute(firmForecast, "demandVol", &difEssen);
  demandVol = *demandVolVectPtr;
  assert(demandVol.length() == 1 );
  assert( demandVol[0] == LgFrTimeVecFloat(8," 4 2 0 0 0 0 0 0") );


  demandVolVectPtr = (LgFrVectorTimeVecFloat *)
      tdif2.demandAttribute(riskForecast, "demandVol", &difEssen);
  demandVol = *demandVolVectPtr;
  assert(demandVol.length() == 1 );
  assert( demandVol[0] == LgFrTimeVecFloat(8," 0.27 0.27 0 0 0 0 0 0") );


  LgFrVectorTimeVecFloat* obj1CumShipRewardVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.demandAttribute(
	committed, "demandObj1CumShipReward", &difEssen);
  LgFrVectorTimeVecFloat& obj1CumShipReward = *obj1CumShipRewardVectPtr;
  assert(obj1CumShipReward.length() == 7 );
  assert( obj1CumShipReward[0] ==
          LgFrTimeVecFloat(8," 0.21 0.21 0 0 0 0 0 0") );


  obj1CumShipRewardVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.demandAttribute(
	newOpportunity, "demandObj1CumShipReward", &difEssen);
  obj1CumShipReward = *obj1CumShipRewardVectPtr;
  assert(obj1CumShipReward.length() == 1 );
  assert( obj1CumShipReward[0] ==
          LgFrTimeVecFloat(8," 0.09 0.09 0 0 0 0 0 0") );


  obj1CumShipRewardVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.demandAttribute(
firmForecast, "demandObj1CumShipReward", &difEssen);
  obj1CumShipReward = *obj1CumShipRewardVectPtr;
  assert(obj1CumShipReward.length() == 1 );
  assert( obj1CumShipReward[0] ==
          LgFrTimeVecFloat(8," 0.17 0.17 0 0 0 0 0 0") );


  obj1CumShipRewardVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.demandAttribute(
	riskForecast, "demandObj1CumShipReward", &difEssen);
  obj1CumShipReward = *obj1CumShipRewardVectPtr;
  assert(obj1CumShipReward.length() == 1 );
  assert( obj1CumShipReward[0] ==
          LgFrTimeVecFloat(8," 0.07 0.07 0 0 0 0 0 0") );


  LgFrVectorTimeVecFloat* obj1ShipRewardVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.demandAttribute(
	committed, "demandObj1ShipReward", &difEssen);
  LgFrVectorTimeVecFloat& obj1ShipReward = *obj1ShipRewardVectPtr;
  assert(obj1ShipReward.length() == 7 );
  assert( obj1ShipReward[0] ==
          LgFrTimeVecFloat(8," 3.81 3.81 0 0 0 0 0 0") );


  obj1ShipRewardVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.demandAttribute(
	newOpportunity, "demandObj1ShipReward", &difEssen);
  obj1ShipReward = *obj1ShipRewardVectPtr;
  assert(obj1ShipReward.length() == 1 );
  assert( obj1ShipReward[0] ==
          LgFrTimeVecFloat(8," 3.5 3.5 0 0 0 0 0 0") );
 

  obj1ShipRewardVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.demandAttribute(
	firmForecast, "demandObj1ShipReward", &difEssen);
  obj1ShipReward = *obj1ShipRewardVectPtr;
  assert(obj1ShipReward.length() == 1 );
  assert( obj1ShipReward[0] ==
          LgFrTimeVecFloat(8," 1.12 1.12 0 0 0 0 0 0") );


  obj1ShipRewardVectPtr
    = (LgFrVectorTimeVecFloat*) tdif2.demandAttribute(
	riskForecast, "demandObj1ShipReward", &difEssen);
  obj1ShipReward = *obj1ShipRewardVectPtr;
  assert(obj1ShipReward.length() == 1 );
  assert( obj1ShipReward[0] ==
          LgFrTimeVecFloat(8," 2.19 2.19 0 0 0 0 0 0") );

  }


  // Test BOM

  tdif1.partAttribute(
        partpv, itemSubTypeStr, "defineBom", &difEssen );

  int nBomEntries, retInt;
  witBoolean retBool;
  float retFloat;
  char * consumedPartName; 
  witGetPartNBomEntries( lps.witRun(), "Plain_Omlet", &nBomEntries);
  assert( nBomEntries == 3);
  witGetBomEntryConsumedPart(lps.witRun(), "Plain_Omlet", 0,
                             &consumedPartName);
  assert ( RWCString (consumedPartName) == RWCString ("Skillet"));
  portableFree (consumedPartName);
  witGetBomEntryUsageRate( lps.witRun(), "Plain_Omlet", 0,
                           &retFloat);
  assert ( fabs(retFloat - 3.0) < fltEps );
  witGetBomEntryConsumedPart(lps.witRun(), "Plain_Omlet", 2,
                             &consumedPartName);
  assert ( RWCString (consumedPartName) == RWCString ("Butter"));
  portableFree (consumedPartName);
  witGetBomEntryEarliestPeriod(lps.witRun(), "Plain_Omlet", 2,
                               &retInt);
  assert ( retInt == 0 );
  witGetBomEntryLatestPeriod(lps.witRun(), "Plain_Omlet", 2,
                               &retInt);
  assert ( retInt == 1 );
  witGetBomEntryMandEC(lps.witRun(), "Plain_Omlet", 2,
                               &retBool);
  assert ( !retBool );
  witGetBomEntryUsageRate(lps.witRun(), "Plain_Omlet", 2,
                               &retFloat);
  assert ( fabs(retFloat - 1.0) < fltEps );
  witGetBomEntryUsageTime(lps.witRun(), "Plain_Omlet", 2,
                               &retFloat);
  assert ( fabs(retFloat - 0.0) < fltEps );
}
@


1.3
log
@Added implement (RWGVector, XXX) to satisfy vacpp linker.
@
text
@d358 1
a358 1
// /u/wit/wit-data/examples/diner12/wit.data, and expects
d397 1
a397 1
                  calendar( "/u/wit/wit-data/examples/diner12/wit.data" );
d411 6
a416 6
  assert( tdif1.title()=="/u/wit/wit-data/examples/diner12/wit.data" );
  assert( tdif2.title()=="/u/wit/wit-data/examples/difWit/wit.data" );
  assert( ts1dupDif.title()=="/u/wit/wit-data/examples/diner12/wit.data" );
  assert( tdif1Imp->title()=="/u/wit/wit-data/examples/diner12/wit.data" );
  assert( tdif2Imp->title()=="/u/wit/wit-data/examples/difWit/wit.data" );
  assert( ts1dupDifImp->title()=="/u/wit/wit-data/examples/diner12/wit.data" );
@


1.2
log
@Updated so unitTest reads files from
  /u/wit/wit-data
instead of
  /u/implode/data
With these changes unitTest is running correctly on Windows
@
text
@d14 2
@


1.1
log
@Initial revision
@
text
@d356 1
a356 1
// /u/implode/wit/data/examples/diner12/wit.data, and expects
d395 1
a395 1
                  calendar( "/u/implode/wit/data/examples/diner12/wit.data" );
d409 6
a414 6
  assert( tdif1.title()=="/u/implode/wit/data/examples/diner12/wit.data" );
  assert( tdif2.title()=="/u/implode/wit/data/examples/difWit/wit.data" );
  assert( ts1dupDif.title()=="/u/implode/wit/data/examples/diner12/wit.data" );
  assert( tdif1Imp->title()=="/u/implode/wit/data/examples/diner12/wit.data" );
  assert( tdif2Imp->title()=="/u/implode/wit/data/examples/difWit/wit.data" );
  assert( ts1dupDifImp->title()=="/u/implode/wit/data/examples/diner12/wit.data" );
@


1.1.1.1
log
@Import scenario
@
text
@@
