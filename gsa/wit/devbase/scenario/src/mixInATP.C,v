head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.45;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.45;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#include <iostream.h>
#include <scenario/src/mixInATP.h>
#include <scenario/src/idnumber.h>
#include <scenario/src/scenATP.h>
#include <scenario/src/scATPP.h>

// Get the scenario
LgFrScenarioForATPSmartPointer
LgFrScheduleMixInForATP::scenario()
{
  return scenarioPtr_;
}

LgFrScenarioForATPSmartPointerToConst
LgFrScheduleMixInForATP::scenario() const
{
  return scenarioPtr_;
}

// Set the scenario
void
LgFrScheduleMixInForATP::scenario(LgFrScenarioForATPSmartPointerToConst scenarioPtr)
{
  scenarioPtr_ = scenarioPtr;
}

// Get the desired state
int
LgFrScheduleMixInForATP::desiredState() const
{
  return desiredState_;
}

// Set the desired state
void
LgFrScheduleMixInForATP::desiredState(int state)
{
  desiredState_ = state;
}

// Get the current state
int
LgFrScheduleMixInForATP::currentState() const
{
  return scenarioPtr_->currentState();
}

// Send a token discrete finite automata (state machine) controller
void
LgFrScheduleMixInForATP::sendToken(int token)
{
    scenarioPtr_->inputToken (token);
}

// Assignment operator
LgFrScheduleMixInForATP&
LgFrScheduleMixInForATP::operator=(const LgFrScheduleMixInForATP& rhs)
{
  scenarioPtr_ = rhs.scenarioPtr_;
  desiredState_ = rhs.desiredState_;
  return *this;
}

// Copy constructor
LgFrScheduleMixInForATP::LgFrScheduleMixInForATP(const LgFrScheduleMixInForATP& rhs)
{
  scenarioPtr_ = rhs.scenarioPtr_;
  desiredState_ = rhs.desiredState_;
}

// Constructor
LgFrScheduleMixInForATP::LgFrScheduleMixInForATP(LgFrScenarioSmartPointerToConst scenario, int desiredState)
: scenarioPtr_(scenario), desiredState_(desiredState)
{
}

// Default Constructor
LgFrScheduleMixInForATP::LgFrScheduleMixInForATP()
{
}

// Destructor
LgFrScheduleMixInForATP::~LgFrScheduleMixInForATP()
{
}

@


1.1.1.1
log
@Import scenario
@
text
@@
