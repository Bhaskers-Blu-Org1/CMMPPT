head	1.4;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.4.0.4
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.8
	Root-of-EndRw:1.2
	EndWitRw-branch:1.2.0.6
	Root-of-EndWitRw:1.2
	RwToStl-branch:1.2.0.4
	Root-of-RwToStl:1.2
	latest_sce_3_10_20010924:1.2.0.2
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.08.05.13.03.36;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.15.19.36.47;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.10.23.02.06;	author fasano;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	2000.02.24.15.29.53;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.53;	author wit;	state Exp;
branches;
next	;

1.2.8.1
date	2003.01.08.17.42.37;	author rwToStl;	state Exp;
branches;
next	1.2.8.2;

1.2.8.2
date	2003.01.09.13.54.39;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Had to change the names of sched.h(C) to schedLF.h(C) to avoid naming conflicts on GCC Linux.
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
// Used for testing
// This class is a subclass of Scenario and allows LgFr*::test()
// methods access to the scenarios lastProblemSolved, 
// setOfParts and setOfDemands.

#include <stdlib.h>

#include <scenario/src/testScen.h>
#include <scenario/src/scenario.h>
#include <scenario/src/calendar.h>
#include <scenario/src/difSFile.h>
#include <scenario/src/scBdTest.h>
#include <scenario/src/scenDrct.h>

// Return the setOfParts which belongs to this scenario
LgFrSetOfParts&
LgFrTestScenario::setOfParts(int k)
{
   return LgFrScenario::setOfParts(k);
}

// Return the setOfDemands which belongs to this scenario
LgFrSetOfDemands&
LgFrTestScenario::setOfDemands(int k)
{
   return LgFrScenario::setOfDemands(k);
}

// Return the LastProblemSolved which belongs to this scenario
LgFrLastProblemSolved&
LgFrTestScenario::lastProblemSolved()
{
   return LgFrScenario::lastProblemSolved();
}

const LgFrLastProblemSolved&
LgFrTestScenario::lastProblemSolved()
  const
{
   return LgFrScenario::lastProblemSolved();
}

// Assignment operator.
LgFrTestScenario&
LgFrTestScenario::operator=(
   const LgFrTestScenario& rhs)
{
    std::cerr << "should not use LgFrTestScenario::operator=(const LgFrTestScenario&)" << std::endl;
    assert(0);
    return *this; 
}


// Constructor
LgFrTestScenario::LgFrTestScenario (const LgFrDataInterfaceAbstract& dif,
                                    const LgFrCalendar& cal)

: LgFrScenario(dif, cal), id_(__LGFRTESTSCENARIO)
{
  // Nothing to do here
}

// Copy Constructor
LgFrTestScenario::LgFrTestScenario (const LgFrTestScenario& rhs)
    : LgFrScenario(rhs)
{
    // Nothing to do here
}

// Destructor 
LgFrTestScenario::~LgFrTestScenario()
{
  // Nothing to do here
}


// Default constructor
LgFrTestScenario::LgFrTestScenario()
: LgFrScenario(), id_(__LGFRTESTSCENARIO)
{
  // Nothing to do here
}


#ifdef NDEBUG
#undef NDEBUG
#endif
void
LgFrTestScenario::test()
{
  // Make objects needed by the tests
  LgFrDataInterfaceSpecialPurposeFromFile
    simpleProb ("../../../../wit/wit-data/wally/simple/wit.data");
  LgFrCalendar calInst;

  // Create an instance using the builder
  LgFrScenarioBuilderForTest builder;
  LgFrScenarioDirector director(&builder);
  director.construct(simpleProb, calInst);
  LgFrTestScenarioSmartPointer testScenarioPtr = builder.getScenario();

  // Test the constructors and setOfParts() and setOfDemands()
  LgFrTestScenarioSmartPointer nullScenario(new LgFrTestScenario);
  LgFrTestScenarioSmartPointer simpleScenarioDup = testScenarioPtr.deepCopy();
  LgFrTestScenarioSmartPointer assignee(new LgFrTestScenario);
  assert(testScenarioPtr->setOfParts().size() == 7);
  assert(testScenarioPtr->setOfDemands().size() == 3);
  assert(simpleScenarioDup->setOfParts().size() == 7);
  assert(simpleScenarioDup->setOfDemands().size() == 3);
  assert(nullScenario->title() != assignee->title());
  assert(nullScenario->title() != testScenarioPtr->title());
  assert(nullScenario->title() != simpleScenarioDup->title());
  assert(testScenarioPtr->title() != simpleScenarioDup->title());

  // Test the assignment operator - shallow copy
  assignee = testScenarioPtr;
  assert(assignee->setOfParts().size() == 7);
  assert(assignee->setOfDemands().size() == 3);
  assert(testScenarioPtr->title() == assignee->title());

  // Test lastProblemSolved()
  assert (      assignee->lastProblemSolved().numberOfPeriods() ==
          testScenarioPtr->lastProblemSolved().numberOfPeriods()   ); 

  // Test workingImplosionProblem()
  LgFrDemand lhsDemand = (       assignee->setOfDemands() )[2];
  LgFrDemand rhsDemand = ( testScenarioPtr->setOfDemands() )[2];
  assert ( lhsDemand.name() == rhsDemand.name() );
  assert (      assignee->workingImplosionProblem().timeVec( lhsDemand ) ==
          testScenarioPtr->workingImplosionProblem().timeVec( rhsDemand ) ); 

}
@


1.3
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d96 1
a96 1
    simpleProb ("/u/wit/wit-data/wally/simple/wit.data");
@


1.2
log
@Updated so unitTest reads files from
  /u/wit/wit-data
instead of
  /u/implode/data
With these changes unitTest is running correctly on Windows
@
text
@d1 3
a17 6
isAReturnType
LgFrTestScenario::isA() const
{
  return id_;
}

d51 1
a51 1
    cerr << "should not use LgFrTestScenario::operator=(const LgFrTestScenario&)" << endl;
d109 4
a112 4
  assert(testScenarioPtr->setOfParts().entries() == 7);
  assert(testScenarioPtr->setOfDemands().entries() == 3);
  assert(simpleScenarioDup->setOfParts().entries() == 7);
  assert(simpleScenarioDup->setOfDemands().entries() == 3);
d120 2
a121 2
  assert(assignee->setOfParts().entries() == 7);
  assert(assignee->setOfDemands().entries() == 3);
@


1.2.8.1
log
@Roguewave is gone
@
text
@a0 3
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
d15 6
d112 4
a115 4
  assert(testScenarioPtr->setOfParts().size() == 7);
  assert(testScenarioPtr->setOfDemands().size() == 3);
  assert(simpleScenarioDup->setOfParts().size() == 7);
  assert(simpleScenarioDup->setOfDemands().size() == 3);
d123 2
a124 2
  assert(assignee->setOfParts().size() == 7);
  assert(assignee->setOfDemands().size() == 3);
@


1.2.8.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d51 1
a51 1
    std::cerr << "should not use LgFrTestScenario::operator=(const LgFrTestScenario&)" << std::endl;
@


1.1
log
@Initial revision
@
text
@d99 1
a99 1
    simpleProb ("/u/implode/wit/data/wally/simple/wit.data");
@


1.1.1.1
log
@Import scenario
@
text
@@
