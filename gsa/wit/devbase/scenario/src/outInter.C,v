head	1.4;
access;
symbols
	sce_5_01_20080919:1.4
	latest_sce_4_20_20060523:1.4.0.4
	sce_4_20_20060523:1.4
	latest_sce4_20_OSL:1.4.0.2
	sce_4_20_OSL:1.4
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.12.19.17.49.20;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.05.12.55.44;	author dpc;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.15.19.36.40;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.32;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.41;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.3;

1.1.1.1.14.3
date	2003.01.09.19.09.46;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.4;

1.1.1.1.14.4
date	2003.01.09.20.08.29;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.4
log
@updated testcase to run on cygwinGcc
@
text
@// RW2STL -- inserted:
#include <fstream>
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
//#include <iostream>

#if !defined(WIN32) && !defined(__OS2__) && !defined(__WINDOWS__)
#include <unistd.h>
#endif

#include <scenario/src/machdep.h>

#include <scenario/src/outInter.h>
#include <scenario/src/zeroTvFS.h>
#include <scenario/src/machdep.h>
#include <scenario/src/schFctry.h>
#include <scenario/src/schdDeSt.h>
#include <scenario/src/demdSchP.h>
#include <scenario/src/partSchP.h>

//const std::ios_base::openmode LgFrSolutionOutputInterface::noReplace = 0x800; // replacement for old stream's noReplace open mode

// Create constants needed for Sun4 default parm in prototypes
const std::string 
   LgFrSolutionOutputInterface::writeScheduleTitle("Schedule:");
const std::string 
   LgFrSolutionOutputInterface::fopenAccessModeAppend("a");
const std::string 
   LgFrSolutionOutputInterface::writeProductionScheduleTitle(
      "Production Schedule:");
const std::string 
   LgFrSolutionOutputInterface::writeShipmentScheduleTitle(
      "Shipment Schedule:");
const std::string 
   LgFrSolutionOutputInterface::writeRequirementScheduleTitle(
      "Requirement Schedule:");
const std::string 
   LgFrSolutionOutputInterface::writeCriticalListTitle(
      "Critical List:");
const std::string 
   LgFrSolutionOutputInterface::writeChangedSupplyVolumeTitle(
      "Part Supply Volume Changes:");
const std::string 
   LgFrSolutionOutputInterface::writeChangedDemandVolumeTitle(
      "Demand Volume Changes:");
const std::string 
   LgFrSolutionOutputInterface::writeChangedPriorityTitle(
      "Demand Priority Changes:");
const std::string 
   LgFrSolutionOutputInterface::writeFocusShortageScheduleTitle(
      "Focus Shortage Schedule:");
const std::string 
   LgFrSolutionOutputInterface::writeFocusShortageScheduleFocusHorizonTitle(
      "\nFocus Horizon:");
const LgFrSchedulePrintStyle LgFrSolutionOutputInterface::pmTEXT (TEXT);

// Write a schedule.
// LgFrDoesFileExist can be used to determine if the file already exists.
bool
LgFrSolutionOutputInterface::writeSchedule(
   const LgFrScheduleFloat & schedule,
   const std::string& fileName,
   const std::string & title,
   const std::ios_base::openmode iosMode )
const
{

  if( LgFrDoesFileExist( fileName.c_str() ) && !(iosMode == (std::ofstream::out|std::ofstream::trunc) || iosMode == (std::ofstream::out|std::ofstream::app)) )
    return false;
  // Construct ofstream for output
  std::ofstream  ofs( fileName.c_str(), iosMode );
  if ( !ofs ) return false;

  // Write the title
  ofs <<title << std::endl;
  if ( !ofs ) return false;

  // Write the schedule
  ofs << schedule.format(LgFrScheduleFloat(),false);
  if ( !ofs ) return false;

  // Close file
  ofs.close();
  if ( !ofs ) return false;

  return true;
}

// Write production schedule.
bool
LgFrSolutionOutputInterface::writeWitProductionSchedule(
   const std::string& fileName,
   const std::string & fopenAccessMode,
   const LgFrSchedulePrintStyle & ot )
const
{
  assert( scenarioPtr_ != 0 );
  return 
     scenarioPtr_->
        lastProblemSolved().writeProductionSchedule(fileName,fopenAccessMode,ot);
}

// Write shipment schedule.
bool
LgFrSolutionOutputInterface::writeWitShipmentSchedule(
   const std::string& fileName,
   const std::string & fopenAccessMode,
   const LgFrSchedulePrintStyle & ot )
const
{
  assert( scenarioPtr_ != 0 );
  return 
    scenarioPtr_->
      lastProblemSolved().writeShipmentSchedule(fileName,fopenAccessMode,ot);
}
  
// Write requirement schedule.
bool
LgFrSolutionOutputInterface::writeWitRequirementSchedule(
   const std::string& fileName,
   const std::string & fopenAccessMode,
   const LgFrSchedulePrintStyle & ot )
const
{
  assert( scenarioPtr_ != 0 );
  return 
    scenarioPtr_->
      lastProblemSolved().writeRequirementSchedule(fileName,fopenAccessMode,ot);
}
  
// Write Production Schedule
bool            // true if no error was encountered
LgFrSolutionOutputInterface::writeProductionSchedule(
   const std::string& fileName,
   const std::string & title,
   const std::ios_base::openmode iosMode )
const
{
   const LgFrScheduleFactory * sf = scenarioPtr_ -> scheduleFactory();
   LgFrSortingPartScheduleFloatSmartPointer schedPtr = 
      sf -> newPartSchedule (LGFRProductionVolume, true, false );
   schedPtr->filterStrategy( LgFrZeroTimeVecFilterStrategy() );
   schedPtr->populate();
   bool retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
   return retVal;
}
  
// Write Shipment Schedule
bool            // true if no error was encountered
LgFrSolutionOutputInterface::writeShipmentSchedule(
   const std::string& fileName,
   const std::string & title,
   const std::ios_base::openmode iosMode )
const
{
   const LgFrScheduleFactory * sf = scenarioPtr_ -> scheduleFactory();
   LgFrSortingDemandScheduleFloatSmartPointer schedPtr =
      sf -> newDemandSchedule (LGFRShipmentVolume, true, false );
   schedPtr->filterStrategy( LgFrZeroTimeVecFilterStrategy() );
   schedPtr->populate();
   bool retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
   return retVal;
}
  
// Write Requirement Schedule
bool            // true if no error was encountered
LgFrSolutionOutputInterface::writeRequirementSchedule(
   const std::string& fileName,
   const std::string & title,
   const std::ios_base::openmode iosMode )
const
{
   const LgFrScheduleFactory * sf = scenarioPtr_ -> scheduleFactory();
   LgFrSortingPartScheduleFloatSmartPointer schedPtr =
      sf -> newPartSchedule (LGFRRequirementVolume, true, false );
   schedPtr->filterStrategy( LgFrZeroTimeVecFilterStrategy() );
   schedPtr->populate();
   bool retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
   return retVal;
}
  
// Write Critical List
bool            // true if no error was encountered
LgFrSolutionOutputInterface::writeCriticalList(
   const std::string& fileName,
   const std::string & title,
   const std::ios_base::openmode iosMode )
const
{
   const LgFrScheduleFactory * sf = scenarioPtr_ -> scheduleFactory();
   LgFrSortingPartScheduleFloatSmartPointer schedPtr =
      sf -> newPartSchedule (LGFRCriticalPartRankingList, true, false );
   schedPtr->filterStrategy( LgFrZeroTimeVecFilterStrategy() );
   schedPtr->populate();
   bool retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
   return retVal;
}
  
// Write changes made to part supply
bool            // true if no error was encountered
LgFrSolutionOutputInterface::writeChangedSupplyVolume(
   const std::string& fileName,
   const std::string & title,
   const std::ios_base::openmode iosMode )
const
{
   return writeSchedule(
      scenarioPtr_->workingImplosionProblem().changedSupplyVolume(),
      fileName,
      title,
      iosMode );
}
  
// Write changes made to demand volume
bool            // true if no error was encountered
LgFrSolutionOutputInterface::writeChangedDemandVolume(
   const std::string& fileName,
   const std::string & title,
   const std::ios_base::openmode iosMode )
const
{
   return writeSchedule(
      scenarioPtr_->workingImplosionProblem().changedDemandVolume(),
      fileName,
      title,
      iosMode );
}
  
// Write changes made to demand priority
bool            // true if no error was encountered
LgFrSolutionOutputInterface::writeChangedPriority(
   const std::string& fileName,
   const std::string & title,
   const std::ios_base::openmode iosMode )
const
{
   return writeSchedule(
      scenarioPtr_->workingImplosionProblem().changedPriority(),
      fileName,
      title,
      iosMode );
}
  
// Write Focussed Shortage Schedule including focus horizon
bool            // true if no error was encountered
LgFrSolutionOutputInterface::writeFocusShortageSchedule(
   LgFrFocussedShortageScheduleControl & fssCtrl,
   const std::string& fileName,
   const std::string & title1,
   const std::string & title2,
   const std::ios_base::openmode iosMode )
const
{
  
  // Write the focussed Shortage Schedule
  if ( ! writeSchedule(
     fssCtrl.focussedShortageSchedule(),
     fileName,
     title1,
     iosMode )
     )   return false;

  // Write the focus horizon

  // Construct ofstream for output
  std::ofstream  ofs( fileName.c_str(), std::ofstream::out | std::ofstream::app );
  if ( !ofs ) return false;

  // Write the title
  ofs <<title2 << std::endl;
  if ( !ofs ) return false;

  // Loop once for each demand
  int fh;
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<scenarioPtr_->setOfDemands().size(); i++ ) {

     // Get demands focus horizon
     fh = fssCtrl.focusHorizon( (scenarioPtr_->setOfDemands())[i] );

     // If horizon is not equal to -1, then write it to file
     if ( fh == -1 ) continue;

     // Write the focus horizon
     const std::string & temp = (scenarioPtr_->setOfDemands())[i].printingName(false);
     ofs << temp; 
     ofs <<std::string("  ");
     ofs <<fh;
     ofs << std::endl;
     if ( !ofs ) return false;

  }

  // Close file
  ofs.close();
  if ( !ofs ) return false;

  return true;
}
  

// A Copy constructor
LgFrSolutionOutputInterface::LgFrSolutionOutputInterface(
   const LgFrSolutionOutputInterface& source )
: 
   scenarioPtr_( source.scenarioPtr_)
{
   // Nothing to do here
}

// Another Constructor
LgFrSolutionOutputInterface::LgFrSolutionOutputInterface(LgFrScenario* scenario )
:  
   scenarioPtr_( scenario )
{
   // Nothing to do here
}

// Default Constructor
LgFrSolutionOutputInterface::LgFrSolutionOutputInterface()
:  scenarioPtr_ ( 0 )
{
   // Nothing to do here
}

// Destructor
LgFrSolutionOutputInterface::~LgFrSolutionOutputInterface()
{
// Nothing to do here
}

#ifdef NDEBUG
#undef NDEBUG
#endif
// test this class
void 
LgFrSolutionOutputInterface::test()
{
  // Test default constructors
  LgFrSolutionOutputInterface defaultSoi;
  assert( defaultSoi.scenarioPtr_ == 0 );
}

// test this class
//
// The data for case11Scenario should come from
// "u/implode/wit/data/csi/case11/wit.data"
//
// The data for case11Scenario should come from
// "u/implode/wit/data/examples/diner12/wit.data"

void 
LgFrSolutionOutputInterface::contextTest(
   LgFrScenarioSmartPointer case11Scenario,
     LgFrWorkingImplosionProblem &case11Wip,
     LgFrLastProblemSolved &case11Lps,
     LgFrSetOfParts &case11Sop,
     LgFrSetOfDemands &case11Sod,
   LgFrScenarioSmartPointer diner12Scenario, 
     LgFrSetOfDemands &diner12Sod,
     LgFrFocussedShortageScheduleControl & diner12FssCtrl )
{
  LgFrWorkingImplosionProblem & wip = case11Wip;
  LgFrLastProblemSolved       & lps = case11Lps;
  LgFrSetOfParts              & sop = case11Sop;
  LgFrSetOfDemands            & sod = case11Sod;

  LgFrSolutionOutputInterface aSoi (&(*case11Scenario));
  LgFrSolutionOutputInterface copiedSoi (aSoi);
  assert ( (copiedSoi.scenarioPtr_->lastProblemSolved()).numberOfPeriods()  ==
                (aSoi.scenarioPtr_->lastProblemSolved()).numberOfPeriods() );
  assert ((aSoi.scenarioPtr_->lastProblemSolved()).numberOfPeriods() == 26);

  int nPeriods = (aSoi.scenarioPtr_->lastProblemSolved()).numberOfPeriods();

  // Test assignment operator
//  LgFrSolutionOutputInterface defaultSoi;
//  copiedSoi = defaultSoi;
//  assert (copiedSoi.scenarioPtr_ == 0);
//  defaultSoi = aSoi;
//  assert ((defaultSoi.scenarioPtr_->lastProblemSolved()).numberOfPeriods()
//          == (aSoi.scenarioPtr_->lastProblemSolved()).numberOfPeriods());

  // Make some parts for the test
  LgFrPart p1( "part1" );
  LgFrPart p2( "part2" );
  LgFrPart p3( "part3" );

  // Make some timeVecFloat for the test
  LgFrTimeVecFloat tvf1(10,1.11f);
  LgFrTimeVecFloat tvf2(10,2.22f);

  // Make some part timeVecFloat pairs for the test
  LgFrItemTimeVecPairFloat ptvfp1( p1, tvf1 );
  LgFrItemTimeVecPairFloat ptvfp2( p2, tvf1 );
  LgFrItemTimeVecPairFloat ptvfp3( p3, tvf2 );

  // Make a partSchedule for the test
  LgFrSortingPartScheduleFloat ps(3);
  ps.insertKeyAndValue(p1, tvf1);
  ps.insertKeyAndValue(p2, tvf2);
  ps.insertKeyAndValue(p3, tvf1);


  // Test writing a schedule to a file
  std::string fn1 = LgFrTempFileName();
  LgFrSolutionOutputInterface outObj;
  assert( outObj.writeSchedule(ps,fn1) );

  // Test overwriting an existing file.
  assert( !outObj.writeSchedule(ps,fn1) );
  assert( outObj.writeSchedule(ps,fn1,"Overwriting existing file", std::ofstream::out|std::ofstream::trunc) );

  // Test appending to a file
  assert( outObj.writeSchedule(ps,fn1,"2nd Schedule",std::ofstream::out | std::ofstream::app) );
  assert (unlink (fn1.c_str()) == 0);

  // Test writing production schedule to a file
  std::string prodFile = LgFrTempFileName();
  lps.computeCriticalList(true);
  case11Scenario->newImplosionSolution();
  assert( aSoi.writeWitProductionSchedule( prodFile ) );
  // Test writing to file with invalid file name
  lps.printMessage( 75, false );
#if !defined(_MSC_VER)
  // MSVC++ runtime library fails to return when fopen is called with
  // a filename of "".  So this test is skipped when in the MSVC++ environment.

  // this test is failing on cygwinGcc, so it is being removed.
  // It seems that this test should fail.
  //assert( !aSoi.writeWitProductionSchedule( std::string() ) );
#endif
  lps.printMessage( 75, true );
  // Test appending to an existing file
  assert( aSoi.writeWitProductionSchedule( prodFile ) );
  assert( aSoi.writeProductionSchedule( prodFile, "Testing", 
          std::ofstream::out | std::ofstream::app ) );
  assert (unlink (prodFile.c_str()) == 0);

  // Test writing of shipment schedule
  std::string shipFile = LgFrTempFileName();
  assert( aSoi.writeWitShipmentSchedule( shipFile ) );
  assert( aSoi.writeShipmentSchedule( shipFile, "Testing", 
          std::ofstream::out | std::ofstream::app ) );
  assert (unlink (shipFile.c_str()) == 0);

  // Test writing of critical list
  std::string critListFile = LgFrTempFileName();
  assert( aSoi.writeCriticalList( critListFile ) );
  assert (unlink (critListFile.c_str()) == 0);

  // Test writing of requirement schedule
  std::string reqFile = LgFrTempFileName();
  lps.mrp(wip);
  assert( aSoi.writeWitRequirementSchedule( reqFile ) );
  assert( aSoi.writeRequirementSchedule( reqFile, "Testing", 
          std::ofstream::out | std::ofstream::app ) );
  assert (unlink (reqFile.c_str()) == 0);

  // Test writing supply volume changes
  std::string supplyDeltaFile = LgFrTempFileName();
  assert ( sop.size() >= 6 );
  LgFrTimeVecFloat v1=wip.timeVec(sop[1]);
  LgFrTimeVecFloat v2=wip.timeVec(sop[3]);
  LgFrTimeVecFloat v3=wip.timeVec(sop[5]);
  wip.timeVec( sop[1], v1 + 1 );
  wip.timeVec( sop[3], v2 + 2 );
  wip.timeVec( sop[5], v3 + 3 );
  aSoi.writeChangedSupplyVolume( supplyDeltaFile );
  assert (unlink (supplyDeltaFile.c_str()) == 0);

  // Test writing demand volume changes
  std::string demandDeltaFile = LgFrTempFileName();
  assert ( sod.size() >= 6 );
  v1=wip.timeVec(sod[1]);
  v2=wip.timeVec(sod[3]);
  v3=wip.timeVec(sod[5]);
  wip.timeVec( sod[1], v1 + 1 );
  wip.timeVec( sod[3], v2 + 2 );
  wip.timeVec( sod[5], v3 + 3 );
  aSoi.writeChangedDemandVolume( demandDeltaFile );
  assert (unlink (demandDeltaFile.c_str()) == 0);

  // Test writing demand priority changes
  demandDeltaFile = LgFrTempFileName();
  assert ( sod.size() >= 6 );
  v1=wip.priority(sod[1]);
  v2=wip.priority(sod[3]);
  v3=wip.priority(sod[5]);
  wip.priority( sod[1], v1 + 1 );
  wip.priority( sod[3], v2 + 2 );
  wip.priority( sod[5], v3 + 3 );
  aSoi.writeChangedPriority( demandDeltaFile );
  assert (unlink (demandDeltaFile.c_str()) == 0);

  // Test writing focussed shortage schedule
  {
  LgFrSetOfDemands            & sod = diner12Sod;
  LgFrFocussedShortageScheduleControl & aFssCtrl = diner12FssCtrl;

  std::string fssFile = LgFrTempFileName();

  LgFrSolutionOutputInterface aSoi (&(*diner12Scenario));
  aFssCtrl.focusHorizon( *sod.findValue("demand","GrlChs_Sand"), 1 );
  aFssCtrl.focusHorizon( *sod.findValue("demand","Ham_Sand"), 1 );
  diner12Scenario->newImplosionSolution();

  aSoi.writeFocusShortageSchedule( aFssCtrl, fssFile );
  assert (unlink (fssFile.c_str()) == 0);
  }
}
@


1.3
log
@Made several changes to the iosMode.  RW allowed for different modes to open a file but STL doesn't support some of those modes.
@
text
@d429 4
a432 1
  assert( !aSoi.writeWitProductionSchedule( std::string() ) );
@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d22 1
a22 1
const int LgFrSolutionOutputInterface::noReplace = 0x800; // replacement for old stream's noReplace open mode
d65 1
a65 1
   const int iosMode )
d69 2
a70 4
  if( LgFrDoesFileExist( fileName.c_str() ) && ( iosMode & noReplace ) )
      return false;

  *(int*)&iosMode &= ~noReplace; // clear our bit
d137 1
a137 1
   const int iosMode )
d154 1
a154 1
   const int iosMode )
d171 1
a171 1
   const int iosMode )
d188 1
a188 1
   const int iosMode )
d205 1
a205 1
   const int iosMode )
d220 1
a220 1
   const int iosMode )
d235 1
a235 1
   const int iosMode )
d252 1
a252 1
   const int iosMode )
d413 1
a413 1
  assert( outObj.writeSchedule(ps,fn1,"Overwriting existing file", std::ofstream::out) );
@


1.1
log
@Initial revision
@
text
@d1 6
a6 2
#include <iostream.h>
#include <fstream.h>
d8 1
a8 1
#if !defined (WIN32) && !defined (__OS2__) && !defined (__WINDOWS__)
d12 2
d22 2
d25 1
a25 1
const RWCString 
d27 1
a27 1
const RWCString 
d29 1
a29 1
const RWCString 
d32 1
a32 1
const RWCString 
d35 1
a35 1
const RWCString 
d38 1
a38 1
const RWCString 
d41 1
a41 1
const RWCString 
d44 1
a44 1
const RWCString 
d47 1
a47 1
const RWCString 
d50 1
a50 1
const RWCString 
d53 1
a53 1
const RWCString 
d60 1
a60 1
RWBoolean
d63 2
a64 2
   const RWCString fileName,
   const RWCString & title,
d69 4
d74 2
a75 2
  ofstream  ofs( fileName, iosMode );
  if ( !ofs ) return FALSE;
d78 2
a79 2
  ofs <<title <<endl;
  if ( !ofs ) return FALSE;
d82 2
a83 2
  ofs << schedule.format(LgFrScheduleFloat(),FALSE);
  if ( !ofs ) return FALSE;
d87 1
a87 1
  if ( !ofs ) return FALSE;
d89 1
a89 1
  return TRUE;
d93 1
a93 1
RWBoolean
d95 2
a96 2
   const RWCString fileName,
   const RWCString & fopenAccessMode,
d100 1
a100 1
  assert( scenarioPtr_ != NULL );
d107 1
a107 1
RWBoolean
d109 2
a110 2
   const RWCString fileName,
   const RWCString & fopenAccessMode,
d114 1
a114 1
  assert( scenarioPtr_ != NULL );
d121 1
a121 1
RWBoolean
d123 2
a124 2
   const RWCString fileName,
   const RWCString & fopenAccessMode,
d128 1
a128 1
  assert( scenarioPtr_ != NULL );
d135 1
a135 1
RWBoolean            // TRUE if no error was encountered
d137 2
a138 2
   const RWCString fileName,
   const RWCString & title,
d144 1
a144 1
      sf -> newPartSchedule (LGFRProductionVolume, TRUE, FALSE );
d147 1
a147 1
   RWBoolean retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
d152 1
a152 1
RWBoolean            // TRUE if no error was encountered
d154 2
a155 2
   const RWCString fileName,
   const RWCString & title,
d161 1
a161 1
      sf -> newDemandSchedule (LGFRShipmentVolume, TRUE, FALSE );
d164 1
a164 1
   RWBoolean retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
d169 1
a169 1
RWBoolean            // TRUE if no error was encountered
d171 2
a172 2
   const RWCString fileName,
   const RWCString & title,
d178 1
a178 1
      sf -> newPartSchedule (LGFRRequirementVolume, TRUE, FALSE );
d181 1
a181 1
   RWBoolean retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
d186 1
a186 1
RWBoolean            // TRUE if no error was encountered
d188 2
a189 2
   const RWCString fileName,
   const RWCString & title,
d195 1
a195 1
      sf -> newPartSchedule (LGFRCriticalPartRankingList, TRUE, FALSE );
d198 1
a198 1
   RWBoolean retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
d203 1
a203 1
RWBoolean            // TRUE if no error was encountered
d205 2
a206 2
   const RWCString fileName,
   const RWCString & title,
d218 1
a218 1
RWBoolean            // TRUE if no error was encountered
d220 2
a221 2
   const RWCString fileName,
   const RWCString & title,
d233 1
a233 1
RWBoolean            // TRUE if no error was encountered
d235 2
a236 2
   const RWCString fileName,
   const RWCString & title,
d248 1
a248 1
RWBoolean            // TRUE if no error was encountered
d251 3
a253 3
   const RWCString fileName,
   const RWCString & title1,
   const RWCString & title2,
d264 1
a264 1
     )   return FALSE;
d269 2
a270 2
  ofstream  ofs( fileName, ios::out | ios::app );
  if ( !ofs ) return FALSE;
d273 2
a274 2
  ofs <<title2 <<endl;
  if ( !ofs ) return FALSE;
d278 2
a279 1
  for ( int i=0; i<scenarioPtr_->setOfDemands().entries(); i++ ) {
d288 6
a293 5
     ofs << (scenarioPtr_->setOfDemands())[i].printingName(FALSE)
         <<"  "
         <<fh
         <<endl;
     if ( !ofs ) return FALSE;
d299 1
a299 1
  if ( !ofs ) return FALSE;
d301 1
a301 1
  return TRUE;
d324 1
a324 1
:  scenarioPtr_ ( NULL )
d344 1
a344 1
  assert( defaultSoi.scenarioPtr_ == NULL );
d382 1
a382 1
//  assert (copiedSoi.scenarioPtr_ == NULL);
d409 1
a409 1
  RWCString fn1 = LgFrTempFileName();
d415 1
a415 1
  assert( outObj.writeSchedule(ps,fn1,"Overwriting existing file", ios::out) );
d418 2
a419 2
  assert( outObj.writeSchedule(ps,fn1,"2nd Schedule",ios::out | ios::app) );
  assert (unlink (fn1) == 0);
d422 2
a423 2
  RWCString prodFile = LgFrTempFileName();
  lps.computeCriticalList(TRUE);
d427 1
a427 1
  lps.printMessage( 75, FALSE );
d431 1
a431 1
  assert( !aSoi.writeWitProductionSchedule( RWCString() ) );
d433 1
a433 1
  lps.printMessage( 75, TRUE );
d437 2
a438 2
          ios::out | ios::app ) );
  assert (unlink (prodFile) == 0);
d441 1
a441 1
  RWCString shipFile = LgFrTempFileName();
d444 2
a445 2
          ios::out | ios::app ) );
  assert (unlink (shipFile) == 0);
d448 1
a448 1
  RWCString critListFile = LgFrTempFileName();
d450 1
a450 1
  assert (unlink (critListFile) == 0);
d453 1
a453 1
  RWCString reqFile = LgFrTempFileName();
d457 2
a458 2
          ios::out | ios::app ) );
  assert (unlink (reqFile) == 0);
d461 2
a462 2
  RWCString supplyDeltaFile = LgFrTempFileName();
  assert ( sop.entries() >= 6 );
d470 1
a470 1
  assert (unlink (supplyDeltaFile) == 0);
d473 2
a474 2
  RWCString demandDeltaFile = LgFrTempFileName();
  assert ( sod.entries() >= 6 );
d482 1
a482 1
  assert (unlink (demandDeltaFile) == 0);
d486 1
a486 1
  assert ( sod.entries() >= 6 );
d494 1
a494 1
  assert (unlink (demandDeltaFile) == 0);
d501 1
a501 1
  RWCString fssFile = LgFrTempFileName();
d509 1
a509 1
  assert (unlink (fssFile) == 0);
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 2
a2 6
// RW2STL -- inserted:
#include <fstream>
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
//#include <iostream>
a7 2
#include <io.h>

a15 2
const int LgFrSolutionOutputInterface::noReplace = 0x800; // replacement for old stream's noReplace open mode

d17 1
a17 1
const std::string 
d19 1
a19 1
const std::string 
d21 1
a21 1
const std::string 
d24 1
a24 1
const std::string 
d27 1
a27 1
const std::string 
d30 1
a30 1
const std::string 
d33 1
a33 1
const std::string 
d36 1
a36 1
const std::string 
d39 1
a39 1
const std::string 
d42 1
a42 1
const std::string 
d45 1
a45 1
const std::string 
d52 1
a52 1
bool
d55 2
a56 2
   const std::string& fileName,
   const std::string & title,
a60 4
  if( !access( fileName.c_str(), 0 ) && ( iosMode & noReplace ) )
      return false;

  (int)iosMode &= ~noReplace; // clear our bit
d62 2
a63 2
  std::ofstream  ofs( fileName.c_str(), iosMode );
  if ( !ofs ) return false;
d67 1
a67 1
  if ( !ofs ) return false;
d70 2
a71 2
  ofs << schedule.format(LgFrScheduleFloat(),false);
  if ( !ofs ) return false;
d75 1
a75 1
  if ( !ofs ) return false;
d77 1
a77 1
  return true;
d81 1
a81 1
bool
d83 2
a84 2
   const std::string& fileName,
   const std::string & fopenAccessMode,
d88 1
a88 1
  assert( scenarioPtr_ != 0 );
d95 1
a95 1
bool
d97 2
a98 2
   const std::string& fileName,
   const std::string & fopenAccessMode,
d102 1
a102 1
  assert( scenarioPtr_ != 0 );
d109 1
a109 1
bool
d111 2
a112 2
   const std::string& fileName,
   const std::string & fopenAccessMode,
d116 1
a116 1
  assert( scenarioPtr_ != 0 );
d123 1
a123 1
bool            // true if no error was encountered
d125 2
a126 2
   const std::string& fileName,
   const std::string & title,
d132 1
a132 1
      sf -> newPartSchedule (LGFRProductionVolume, true, false );
d135 1
a135 1
   bool retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
d140 1
a140 1
bool            // true if no error was encountered
d142 2
a143 2
   const std::string& fileName,
   const std::string & title,
d149 1
a149 1
      sf -> newDemandSchedule (LGFRShipmentVolume, true, false );
d152 1
a152 1
   bool retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
d157 1
a157 1
bool            // true if no error was encountered
d159 2
a160 2
   const std::string& fileName,
   const std::string & title,
d166 1
a166 1
      sf -> newPartSchedule (LGFRRequirementVolume, true, false );
d169 1
a169 1
   bool retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
d174 1
a174 1
bool            // true if no error was encountered
d176 2
a177 2
   const std::string& fileName,
   const std::string & title,
d183 1
a183 1
      sf -> newPartSchedule (LGFRCriticalPartRankingList, true, false );
d186 1
a186 1
   bool retVal = writeSchedule( *schedPtr, fileName, title, iosMode );
d191 1
a191 1
bool            // true if no error was encountered
d193 2
a194 2
   const std::string& fileName,
   const std::string & title,
d206 1
a206 1
bool            // true if no error was encountered
d208 2
a209 2
   const std::string& fileName,
   const std::string & title,
d221 1
a221 1
bool            // true if no error was encountered
d223 2
a224 2
   const std::string& fileName,
   const std::string & title,
d236 1
a236 1
bool            // true if no error was encountered
d239 3
a241 3
   const std::string& fileName,
   const std::string & title1,
   const std::string & title2,
d252 1
a252 1
     )   return false;
d257 2
a258 2
  std::ofstream  ofs( fileName.c_str(), std::ofstream::out | std::ofstream::app );
  if ( !ofs ) return false;
d262 1
a262 1
  if ( !ofs ) return false;
d266 1
a266 2
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<scenarioPtr_->setOfDemands().size(); i++ ) {
d275 1
a275 1
     ofs << (scenarioPtr_->setOfDemands())[i].printingName(false)
d279 1
a279 1
     if ( !ofs ) return false;
d285 1
a285 1
  if ( !ofs ) return false;
d287 1
a287 1
  return true;
d310 1
a310 1
:  scenarioPtr_ ( 0 )
d330 1
a330 1
  assert( defaultSoi.scenarioPtr_ == 0 );
d368 1
a368 1
//  assert (copiedSoi.scenarioPtr_ == 0);
d395 1
a395 1
  std::string fn1 = LgFrTempFileName();
d401 1
a401 1
  assert( outObj.writeSchedule(ps,fn1,"Overwriting existing file", std::ofstream::out) );
d404 2
a405 2
  assert( outObj.writeSchedule(ps,fn1,"2nd Schedule",std::ofstream::out | std::ofstream::app) );
  assert (unlink (fn1.c_str()) == 0);
d408 2
a409 2
  std::string prodFile = LgFrTempFileName();
  lps.computeCriticalList(true);
d413 1
a413 1
  lps.printMessage( 75, false );
d417 1
a417 1
  assert( !aSoi.writeWitProductionSchedule( std::string() ) );
d419 1
a419 1
  lps.printMessage( 75, true );
d423 2
a424 2
          std::ofstream::out | std::ofstream::app ) );
  assert (unlink (prodFile.c_str()) == 0);
d427 1
a427 1
  std::string shipFile = LgFrTempFileName();
d430 2
a431 2
          std::ofstream::out | std::ofstream::app ) );
  assert (unlink (shipFile.c_str()) == 0);
d434 1
a434 1
  std::string critListFile = LgFrTempFileName();
d436 1
a436 1
  assert (unlink (critListFile.c_str()) == 0);
d439 1
a439 1
  std::string reqFile = LgFrTempFileName();
d443 2
a444 2
          std::ofstream::out | std::ofstream::app ) );
  assert (unlink (reqFile.c_str()) == 0);
d447 2
a448 2
  std::string supplyDeltaFile = LgFrTempFileName();
  assert ( sop.size() >= 6 );
d456 1
a456 1
  assert (unlink (supplyDeltaFile.c_str()) == 0);
d459 2
a460 2
  std::string demandDeltaFile = LgFrTempFileName();
  assert ( sod.size() >= 6 );
d468 1
a468 1
  assert (unlink (demandDeltaFile.c_str()) == 0);
d472 1
a472 1
  assert ( sod.size() >= 6 );
d480 1
a480 1
  assert (unlink (demandDeltaFile.c_str()) == 0);
d487 1
a487 1
  std::string fssFile = LgFrTempFileName();
d495 1
a495 1
  assert (unlink (fssFile.c_str()) == 0);
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d78 1
a78 1
  ofs <<title << std::endl;
d273 1
a273 1
  ofs <<title2 << std::endl;
d291 1
a291 1
         << std::endl;
@


1.1.1.1.14.3
log
@Replaced call to access() by call to LgFrDoesFileExist()
@
text
@d8 5
a12 1
#include <scenario/src/machdep.h>
d69 1
a69 1
  if( LgFrDoesFileExist( fileName.c_str() ) && ( iosMode & noReplace ) )
@


1.1.1.1.14.4
log
@modified to build on AIX
@
text
@a7 4
#if !defined(WIN32) && !defined(__OS2__) && !defined(__WINDOWS__)
#include <unistd.h>
#endif

d68 1
a68 1
  *(int*)&iosMode &= ~noReplace; // clear our bit
d284 4
a287 5
     const std::string & temp = (scenarioPtr_->setOfDemands())[i].printingName(false);
     ofs << temp; 
     ofs <<std::string("  ");
     ofs <<fh;
     ofs << std::endl;
@


