head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.6
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.15.23.05.46;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.15.19.36.27;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.25;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Modified to build on windows laptop that was causing compiler to run out of stack space
@
text
@#ifndef LGFRATTRIBUTETABLE_H
#define LGFRATTRIBUTETABLE_H

#if defined(_MSC_VER)
#pragma warning(disable:4786)
#endif

// RW2STL -- inserted:
#include <map>
#include <string>
#include <vector>
// End of RW2STL -- inserted includes.

// This file conatins LgFrAttributeTable and LgFrGSlistAttributeInformation.

#include <scenario/src/attrInfo.h>
#include <scenario/src/generVc.h>
#include <scenario/src/key.h>

// This attribute table uses attribute name as the key and a singled
// linked-list of LgFrAttributeInformation(LgFrGSlistAttributeInformation)
// as the value.
// The search sequence is,
// (1) Search the right key first,
// (2) Then loop through the linked-list of LgFrAttributeInformation and
//     find the one that matches the itemSubType and itemType.

//declare (RWGSlist, LgFrAttributeInformation)
//typedef RWGSlist(LgFrAttributeInformation) LgFrGSlistAttributeInformation;

typedef std::vector<LgFrAttributeInformation*> LgFrGSlistAttributeInformation;
typedef std::pair<std::string,LgFrGSlistAttributeInformation*> AttrInfoDictPair;
typedef std::map<std::string,LgFrGSlistAttributeInformation*> AttributeInfoDictionary;

class LgFrAttributeTable 
{
public:
  
  LgFrAttributeValueType
    attributeValueType(const std::string& attributeName,
                       const LgFrItemSubType& itemSubType,
                       const LgFrItemType& itemType) const;

  void registerFunction(const std::string& attributeName,
                        const LgFrItemSubType& itemSubType,
                        const LgFrItemType& itemType,
                        const LgFrAttributeValueType& attrValueType,
                        const LgFrPtrToValueExtractionFunction& valFuncPtr);

  void unregisterFunction(const std::string& attributeName,
                          const LgFrItemSubType& itemSubType,
                          const LgFrItemType& itemType);


  LgFrPtrToValueExtractionFunction
    getAttributeFunction(const std::string& attributeName,
                         const LgFrItemSubType& itemSubType,
                         const LgFrItemType& itemType) const;

  // Copy constructor (deep copy)
  LgFrAttributeTable (const LgFrAttributeTable& copy);

  // Constructor
  LgFrAttributeTable ();

  // Destructor
  ~LgFrAttributeTable();
  
private:

  // disallow assignment and equality as they don't really make sense here
  int operator==(const LgFrAttributeTable&);
  LgFrAttributeTable& operator=(const LgFrAttributeTable&);

  void
      unregisterFunction(const std::string& key,
                     const LgFrAttributeInformation& attrInfo);

  // Insert new LgFrAttributeInformation into the dictionary_.
  void
      insert(const std::string& keyPtr,
         const LgFrAttributeInformation& attrInfoPtr);

private:  

  //RWHashDictionary dictionary_;
    AttributeInfoDictionary dictionary_;
};

#endif
@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d3 5
@


1.1
log
@Initial revision
@
text
@d3 5
d9 1
a9 1
// This file conatins LgFrAttributeTable and LgFrGSlistAttrInfoAndCollectable.
a10 3
#include <rw/cstring.h>
#include <rw/hashdict.h>
#include <rw/gslist.h>
d16 1
a16 1
// linked-list of LgFrAttributeInformation(LgFrGSlistAttrInfoAndCollectable)
d23 2
a24 2
declare (RWGSlist, LgFrAttributeInformation)
typedef RWGSlist(LgFrAttributeInformation) LgFrGSlistAttributeInformation;
d26 3
a28 7
class LgFrGSlistAttrInfoAndCollectable : public RWCollectable,
                                  public LgFrGSlistAttributeInformation
{
public:
  LgFrGSlistAttrInfoAndCollectable(){}
  ~LgFrGSlistAttrInfoAndCollectable(){}
};
d35 1
a35 1
    attributeValueType(const RWCString& attributeName,
d39 1
a39 1
  void registerFunction(const RWCString& attributeName,
d45 1
a45 1
  void unregisterFunction(const RWCString& attributeName,
d51 1
a51 1
    getAttributeFunction(const RWCString& attributeName,
d71 1
a71 1
  unregisterFunction(const LgFrKey& key,
d76 2
a77 2
  insert(LgFrKey& keyPtr,
         LgFrAttributeInformation& attrInfoPtr);
d80 3
a82 1
  RWHashDictionary dictionary_;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 5
// RW2STL -- inserted:
#include <map>
#include <string>
#include <vector>
// End of RW2STL -- inserted includes.
d4 1
a4 1
// This file conatins LgFrAttributeTable and LgFrGSlistAttributeInformation.
d6 3
d14 1
a14 1
// linked-list of LgFrAttributeInformation(LgFrGSlistAttributeInformation)
d21 2
a22 2
//declare (RWGSlist, LgFrAttributeInformation)
//typedef RWGSlist(LgFrAttributeInformation) LgFrGSlistAttributeInformation;
d24 7
a30 3
typedef std::vector<LgFrAttributeInformation*> LgFrGSlistAttributeInformation;
typedef std::pair<std::string,LgFrGSlistAttributeInformation*> AttrInfoDictPair;
typedef std::map<std::string,LgFrGSlistAttributeInformation*> AttributeInfoDictionary;
d37 1
a37 1
    attributeValueType(const std::string& attributeName,
d41 1
a41 1
  void registerFunction(const std::string& attributeName,
d47 1
a47 1
  void unregisterFunction(const std::string& attributeName,
d53 1
a53 1
    getAttributeFunction(const std::string& attributeName,
d73 1
a73 1
      unregisterFunction(const std::string& key,
d78 2
a79 2
      insert(const std::string& keyPtr,
         const LgFrAttributeInformation& attrInfoPtr);
d82 1
a82 3

  //RWHashDictionary dictionary_;
    AttributeInfoDictionary dictionary_;
@

