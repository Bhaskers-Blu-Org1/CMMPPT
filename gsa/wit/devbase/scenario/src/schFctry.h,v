head	1.3;
access;
symbols
	sce_5_01_20080919:1.3
	latest_sce_4_20_20060523:1.3.0.6
	sce_4_20_20060523:1.3
	latest_sce4_20_OSL:1.3.0.4
	sce_4_20_OSL:1.3
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.2.0.6
	Root-of-EndRw:1.2
	EndWitRw-branch:1.2.0.4
	Root-of-EndWitRw:1.2
	RwToStl-branch:1.2.0.2
	Root-of-RwToStl:1.2
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.01.15.19.36.46;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.07.19.01.16;	author austel;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches;
next	;

1.2.6.1
date	2003.01.08.17.42.36;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef ScheduleFactory_H
#define ScheduleFactory_H
// RW2STL -- inserted:
#include <map>
#include <string>
// End of RW2STL -- inserted includes.

// This is a base class used to create default set of 
// sorting[Part|Demand]ScheduleFloat.  The derived subclass of this class
// will implement the code to handle application-specific cases.

// With a unique string passed in, a set of objects designed to work
// together will be created with respect to the particular application.  
// They are sorting[Part|Demand]ScheduleStrategy,
// specific kind of setOf[Parts|Demands], and the resulted
// sorting[Part|Demand]ScheduleFloat.
// The sorting[Part|Demand]ScheduleFloat will be returned either populated
// or not depending on the population flag.

// sorting[Part|Demand]ScheduleStrategy is set in this class and will be cloned/
// owned by the schedule.  This class has the reference to the scenario that it
// belongs to so that it can get the reference of sop/sod.

#include <scenario/src/schdDesc.h>
#include <scenario/src/lastPrbS.h>
#include <scenario/src/scenP.h>
#include <scenario/src/demdSchP.h>
#include <scenario/src/partSchP.h>

enum schdType { INPUT, OUTPUT };

// Forword declaration
class LgFrScenario;
class LgFrSortingScheduleFloat;
class LgFrSortingPartScheduleFloatSmartPointer;
class LgFrSortingDemandScheduleFloatSmartPointer;



class LgFrFilterStrategy;
class LgFrPartScheduleStrategy;
class LgFrDemandScheduleStrategy;
class LgFrScenarioBuilder;
class LgFrScenarioSmartPointer;



typedef std::map<std::string,LgFrSortingDemandScheduleFloatSmartPointer> NameDemandDictionary;
typedef std::map<std::string,LgFrSortingPartScheduleFloatSmartPointer> NamePartDictionary;

class LgFrScheduleFactory
{

friend class LgFrScenarioBuilder;
  
public:

  
  // Create a new sorting part schedule and the default is to populate.
  virtual LgFrSortingPartScheduleFloatSmartPointer
    newPartSchedule  (const LgFrScheduleDescriptor& desc,
		      const bool deepCopy = true,
		      const bool toPopulate = true
		      ) const;

  // Create a new sorting demand schedule and the default is to populate.
  virtual LgFrSortingDemandScheduleFloatSmartPointer
    newDemandSchedule(const LgFrScheduleDescriptor& desc,
		      const bool deepCopy = true,
		      const bool toPopulate = true
		      ) const;

  // Removes the schedule factory's links to the schedules it has already created.
  // Call this before trying to delete the factory's scenario.  (See the comment
  // before this member function's implementation for the reason.)
  virtual
  void
  clearAndDestroy();

  // Return an abbreviation for a given LgFrScheduleDescriptor
  virtual std::string
    abbreviationOf (const LgFrScheduleDescriptor & desc) const;

  // Return list of schedule descriptors which can be used by factory to
  // create schedules.
  virtual
   LgFrScheduleDescriptorVector
     demandScheduleDescriptors()
       const;
  virtual
   LgFrScheduleDescriptorVector
     partScheduleDescriptors()
       const;

    
  // Create a copy of the *this on the heap and return a pointer to it.
  virtual
    LgFrScheduleFactory*
      clone (LgFrScenarioSmartPointer)
        const;

  // Constructor
  LgFrScheduleFactory(LgFrScenarioSmartPointer);
   
  // Destructor
  virtual
    ~LgFrScheduleFactory ();

  // test this class
  static void test();
  // Expects *testScenario to contain data from
  // /u/implode/wit/data/examples/diner12/wit.data and expects
  // f to be the scedule factory for testScenario
  static void contextTest(const LgFrScheduleFactory & f,
			  LgFrScenarioSmartPointer & testScenario);


  // ---------------------------------------------------------------------
  // Protected member functions
  // ---------------------------------------------------------------------
protected:
    
  // ---------------------------------------------------------------------
  // Create a Part Schedule and set it's strategy to partSS strategy
  // and optional filterstrategy
  // ---------------------------------------------------------------------
  LgFrSortingPartScheduleFloatSmartPointer 
  createPartSched(
     const LgFrPartScheduleStrategy & partSS,
     const LgFrFilterStrategy * filterStrat = 0,
     const LgFrPairCompareFloat * pairComparePtr = 0,
     const bool ascending = true
                    ) const;
  
  // ---------------------------------------------------------------------
  // Create a Demand Schedule and set it's strategy to demandSS strategy
  // and optional filterstrategy
  // ---------------------------------------------------------------------
  LgFrSortingDemandScheduleFloatSmartPointer
  createDemandSched(
     const LgFrDemandScheduleStrategy & demandSS,
     const LgFrFilterStrategy * filterStrat = 0,
     const LgFrPairCompareFloat * pairComparePtr = 0,
     const bool ascending = true
                    ) const;
  
  LgFrScenarioSmartPointer scenario() const;

  // Return the LastProblemSolved which belongs to this scenario
  LgFrLastProblemSolved& lastProblemSolved() const;

  // Return the schedule type: INPUT or OUTPUT of implosion run.
  virtual schdType
    scheduleType(const LgFrScheduleDescriptor& desc,
		 const LgFrAttributeScheduleStrategy & ass) const;

  // Return a schedule created by using a previously-created schedule
  virtual
  LgFrSortingPartScheduleFloatSmartPointer
  newPartScheduleFromExistingOne (const LgFrScheduleDescriptor& desc,
				  const bool deepCopy,
				  const bool toPopulate,
				  LgFrSortingPartScheduleFloatSmartPointer 
				    schedulePtrPtr)
      const;

  // Return a schedule without getting it from the list of previously-
  // constructed schedules
  virtual
  LgFrSortingPartScheduleFloatSmartPointer 
  newPartScheduleFromScratch (const LgFrScheduleDescriptor& desc,
			      const bool deepCopy,
			      const bool toPopulate
			      )
      const;

  // Return a schedule without getting it from the list of previously-
  // constructed schedules
  virtual
  LgFrSortingDemandScheduleFloatSmartPointer 
  newDemandScheduleFromScratch (const LgFrScheduleDescriptor& desc,
				const bool deepCopy,
				const bool toPopulate
				)
      const;

  // Return a schedule created by using a previously-created schedule
  virtual
  LgFrSortingDemandScheduleFloatSmartPointer
  newDemandScheduleFromExistingOne (const LgFrScheduleDescriptor& desc,
				    const bool deepCopy,
				    const bool toPopulate,
				    LgFrSortingDemandScheduleFloatSmartPointer
				      schedulePtrPtr)
      const;

  // dictionaries for part and demand schedules already allocated by
  //   this schedule factory

  // Returns the factory's demandSchedules_
  NameDemandDictionary &  demandSchedules();

  // Returns the factory's partSchedules_
  NamePartDictionary &   partSchedules();


  void insertDemandSchedule(const LgFrScheduleDescriptor&,
		     LgFrSortingDemandScheduleFloatSmartPointer);

  void insertPartSchedule(const LgFrScheduleDescriptor&,
		     LgFrSortingPartScheduleFloatSmartPointer);

  // Vector of descriptors which this factory supports.
  static LgFrScheduleDescriptorVector demandScheduleDescriptors_;  
  static LgFrScheduleDescriptorVector partScheduleDescriptors_;
  
  // ---------------------------------------------------------------------
  //  PRIVATE MEMBERS
  // --------------------------------------------------------------------- 
private:

  // used to initialize demandScheduleDescriptors_ and partScheduleDescriptors_ 
  static LgFrScheduleDescriptorVector initializeDemandScheduleDescriptors();
  static LgFrScheduleDescriptorVector initializePartScheduleDescriptors();

  // Assignment operator (not allowed , use clone(LgFrScenarioSmartPointer)
  // instead )
  LgFrScheduleFactory &
    operator=(const LgFrScheduleFactory& rhs);   

  // Copy constructor (not allowed , use clone(LgFrScenarioSmartPointer) 
  // instead )
  LgFrScheduleFactory (const LgFrScheduleFactory &);

  // Default constructor (not allowed , use a different constructor instead)
  LgFrScheduleFactory ();

  virtual void printWarning () const;

  LgFrScenarioSmartPointer scenarioPtr_;

  typedef std::pair<std::string,LgFrSortingDemandScheduleFloatSmartPointer> NameDemandPair;
  NameDemandDictionary demandSchedules_;

  typedef std::pair<std::string,LgFrSortingPartScheduleFloatSmartPointer> NamePartPair;
  NamePartDictionary partSchedules_;
};

#endif
@


1.2
log
@

NOTE CONCERNING FOR-SEMANTICS.

In old C++ semantics, this was illegal:
	for (int i=...) { ...}
	for (int i=...) { ...}

because the scope of i extended beyond the first for-loop, making
the second declaration a conflict.

In new C++ semantics, this is illegal:
	for (int i=...) { ...}
	for (i=...) { ...}

because the scope of i extends in the first for-loop, making
the use of "i" in the second loop unbound.

We can't have it both ways.  We could convert the source to be this:
	inti;
	for (i=...) { ...}
	for (i=...) { ...}

but rather than do that, I have opted to just use a special flag
("-qlanglvl=noansifor") to tell vacpp to use the old semantics.
This flag is in config/p_powerVac.mk.
We can always convert these for loops later if we like, and take
out the flag.


Now some notes concerning what I did in the various components.
Hopefully no one will ever have to read this.

CONFIG:
changed config/p_powerVac.mk by copying setting for ds_comp_std_flags
from config/p_power64v5.mk, to suppress error messages concerning
the technique to avoid accidental use of compiler-generated constructors.

WITUTIL:
changed return type of "main" to int in several files.

SCENARIO and SCE:
In many files, some member declarations had (unnecessary) qualifiers:

	class S {
	S::f();
	};

The obvious solution was to just remove the "S::" qualifier.



In some files (such as ipDifT.h), a member declaration using a class
name in a return type caused a syntax error; the compiler complained
about ambiguity.

	class X {
	C f();
	};

Solution:  add "class C" in front.  Should really have no possible problems.

	class C;
	class X {
	C f();
	};



Some classes declared protected members of other classes to be friends:

	class A {
	protected:
	  int mem();
	};

	class B {
	friend int A::mem();
	};

This is evidentally now illegal.  I suppose it makes sense that one
should already have access to the thing that one wants to be a friend of.

My solution was to just drop the "protected" keyword.
This allows everyone access to these members (which is presumably
undesirable), but at least doesn't allow the friend classes access
to the private data of this class (which presumably is desired).

Another alternative would be to keep the "protected" keyword and
add "friend class A" to the friend class.
The situation is now reversed; it would have the drawback of allowing
the friend class access to private data (which presumably isn't desired),
but would disallow non-friends access to these protected members.




attrInfo.h:  typedef declarations for functions types cannot have
default arguments, i.e. this is illegal:

	typedef int (*f)(int x = 1);

Solution:  drop the default argument:

	typedef int (*f)(int x);

(I suppose this makes sense, given that the treatment of default arguments
seems to have gotten a bit complicated - you can add and remove them
using new declarations.)



(THIS NOTE IS OBSOLETE since I ended up leaving these for-loops alone.
However, it may be useful if we ever do convert the source to the
new syntax.
calendar.C, consSS.C, difCmrpF.C, difWit[DR].C:
  added "int" (or size_t, as appropriate) to "for" loops:

was:
	for (int t=...) { ..}
	for (t=...) { ..}

now:
	for (int t=...) { ..}
	for (int t=...) { ..}

This is ok since t is initialized in each loop.

This wasn't possible in one spot in sched.C, in LgFrScheduleFloat::reduceItems.
It also wasn't possible in a spot in sce/ipSce.C.
It had code like this:
	int t;
	... code setting t
	for (...) {
	  for (int t = ...)
		...
	  somevar = t;
	}

According to the old rules, the assignment "somevar = t" refers to the
t in the nested for-loop.  I've changed it to this:

	for (...) {
	  int t;
	  for (t = ...)
		...
	  somevar = t;
	}

Fortunately, in most places the loop was not nested inside some other
construct, which makes it likely that I didn't make any mistakes.

END OBSOLETE NOTE)



demdSchd.C, partSchd.C, scenATP.C, ...:
  apparently, expressions that refer to a pointer-to-member must use "&":
	class C {
	int f();
	};

	g(C::f);	// ILLEGAL
	g(&C::f);	// GOOD BOY!

(maybe this makes parsing easier?)



dfa.C:  changed
	#include "dfa.h"
to
	#include <scenario/src/dfa.h>

so that the depedency generated by makedepend (and that ends up in Makefile)
doesn't cause problems.




lastPrbS.C:  "bool" is now a keyword.  Changed variable "bool" to "Bool".





multDSch.C:

start with this decl:

    LgFrMultiDemandScheduleFloat& msdClone = *msdClonePtr;

and this call:

    const LgFrSortingDemandScheduleFloat& demandSchdClone
      = *( (LgFrSortingDemandScheduleFloatSmartPointer&)(msdClone.schedule(LGFRDemandVolume)) );


LgFrMultiDemandScheduleFloat (in multDSch.h) apparently inherits the
declaration of method "schedule" from its baseclass, LgFrMultiScheduleFloat
(in multiSch.h).

  // Return a non-const schedule
  virtual
    LgFrSortingScheduleFloatSmartPointer
     schedule(const LgFrScheduleDescriptor& sd) const;


class LgFrSortingScheduleFloatSmartPointer is defined in sortSchP.h.
Its baseclass is LgFrSortingScheduleFloatSmartPointerToConst,
defined in the same file, and that has no baseclass.

class LgFrSortingDemandScheduleFloatSmartPointer is defined in demdSchP.h,
and looks similar to LgFrSortingScheduleFloatSmartPointer,
probably one was copied from the other and the names were changed.

So, the problematic statement is probably the equivalent of casting a pointer.

This was the code I used instead.
It may just be that one can't cast using "&" anymore.

    LgFrSortingScheduleFloatSmartPointer XtmpschX = msdClone.schedule(LGFRDemandVolume);
    LgFrSortingDemandScheduleFloatSmartPointer &XtmpschX2 = *(LgFrSortingDemandScheduleFloatSmartPointer*)&XtmpschX;
    const LgFrSortingDemandScheduleFloat& demandSchdClone = *(XtmpschX2);


This is *probably* ok, since both smartpointers have the same private
data fields (in their basetypes).  The code snippets below give the
general idea.  I imagine that this would all be done with templates
these days (if there isn't already a smartpointer library somewhere).



protected:
    LgFrSortingDemandScheduleFloat* pointer_; // should make this const but I want to use
                            //  it for the LgFrSortingDemandScheduleFloatSmartPointer class
			    //  (the non-const class) to inherit this member.
			    //  The way it's been set up only const stuff
                            //  is being returned so we're OK.
    LgFrReferenceCount count_;




protected:
    LgFrSortingScheduleFloat* pointer_; // should make this const but I want to use
                            //  it for the LgFrSortingScheduleFloatSmartPointer class
			    //  (the non-const class) to inherit this member.
			    //  The way it's been set up only const stuff
                            //  is being returned so we're OK.
    LgFrReferenceCount count_;


Dereference is just what it should be:


const LgFrSortingDemandScheduleFloat &
LgFrSortingDemandScheduleFloatSmartPointer::operator*() const
{
    return *pointer_;
}

LgFrSortingScheduleFloat &
LgFrSortingScheduleFloatSmartPointer::operator*()
{
    return *pointer_;
}



SCE:
Created powerVac/Makefile
by copying power64/Makefile and just changine "power64" to "powerVac".





For convenience, here is the output of these commands:

	cvs diff scenario/src
	cvs diff sce/src


Index: scenario/src/attrInfo.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/attrInfo.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 attrInfo.h
17c17,20
< 	       const LgFrDataInterfaceEssentials* difEssenPtr = NULL);
---
>
> 	       // syntax error - typedefs can (no longer) have default args
> 	       const LgFrDataInterfaceEssentials* difEssenPtr /////= NULL
> 	       );
47c50
< LgFrAttributeInformation::LgFrAttributeInformation(const LgFrAttributeInformation& );
---
> LgFrAttributeInformation(const LgFrAttributeInformation& );
Index: scenario/src/backlgSS.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/backlgSS.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 backlgSS.h
83c83
<   LgFrBacklogScheduleStrategy::contextTest
---
>   contextTest
Index: scenario/src/calendar.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/calendar.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 calendar.h
252c252
<   LgFrCalendar::addMonths(const RWTime& aTime, unsigned numMonthsOut,
---
>   addMonths(const RWTime& aTime, unsigned numMonthsOut,
281c281
<   LgFrCalendar::display()
---
>   display()
Index: scenario/src/demdSchd.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/demdSchd.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 demdSchd.C
273c273
<   LgFrTimeVecFloat::add,rhs);
---
>   &LgFrTimeVecFloat::add,rhs);
288c288
<   LgFrTimeVecFloat::subtract,rhs);
---
>   &LgFrTimeVecFloat::subtract,rhs);
452c452
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
475c475
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
496c496
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
514c514
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
Index: scenario/src/dfa.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/dfa.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 dfa.C
14c14,16
< #include "dfa.h"
---
>
> //#include "dfa.h"
> #include <scenario/src/dfa.h>
Index: scenario/src/filtStrt.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/filtStrt.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 filtStrt.h
89c89,90
< protected:
---
>   // see the comment in schdStrt.h.
>   /////protected:
Index: scenario/src/fssCtrl.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/fssCtrl.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 fssCtrl.h
109c109
<         LgFrFocussedShortageScheduleControl::isValid()
---
>         isValid()
117c117
<         LgFrFocussedShortageScheduleControl::focusChanged()
---
>         focusChanged()
151c151
<    LgFrFocussedShortageScheduleControl::LgFrFocussedShortageScheduleControl(
---
>    LgFrFocussedShortageScheduleControl(
Index: scenario/src/ipDifT.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/ipDifT.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 ipDifT.h
10a11,15
>
> // added to avoid syntax error in declaration of difTestingScenario below - vra
> class LgFrScenarioForDifTestingSmartPointer;
>
>
Index: scenario/src/lastPrbS.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/lastPrbS.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 lastPrbS.C
98c98
<    witBoolean bool;
---
>    witBoolean Bool;
100,101c100,101
<       witRunVeneer().constWitRun(), &bool );
<    if ( bool ) return TRUE;
---
>       witRunVeneer().constWitRun(), &Bool );
>    if ( Bool ) return TRUE;
248c248
<    witBoolean bool;
---
>    witBoolean Bool;
250,251c250,251
<       witRunVeneer().constWitRun(), &bool );
<    if ( bool ) return TRUE;
---
>       witRunVeneer().constWitRun(), &Bool );
>    if ( Bool ) return TRUE;
Index: scenario/src/lastPrbS.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/lastPrbS.h,v
retrieving revision 1.2
diff -r1.2 lastPrbS.h
182c182
<         LgFrLastProblemSolved::focusHorizon(
---
>         focusHorizon(
686c686
<         LgFrLastProblemSolved::cumShipBounds(
---
>         cumShipBounds(
760c760
<         LgFrLastProblemSolved::cumShipSoftLowerBound(
---
>         cumShipSoftLowerBound(
910c910
<       LgFrLastProblemSolved::getPartFloatVecAttribute(
---
>       getPartFloatVecAttribute(
917c917
<        LgFrLastProblemSolved::setPartFloatVecAttribute(
---
>        setPartFloatVecAttribute(
924c924
<       LgFrLastProblemSolved::setPartBoundsAttribute(
---
>       setPartBoundsAttribute(
933c933
<       LgFrLastProblemSolved::getDemandFloatVecAttribute(
---
>       getDemandFloatVecAttribute(
940c940
<       LgFrLastProblemSolved::getDemandSoftLowerBoundAttribute(
---
>       getDemandSoftLowerBoundAttribute(
947c947
<       LgFrLastProblemSolved::setDemandBoundsAttribute(
---
>       setDemandBoundsAttribute(
956c956
<    LgFrLastProblemSolved::writeSchedule(
---
>    writeSchedule(
Index: scenario/src/multDSch.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/multDSch.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 multDSch.C
436,438c436,446
<
<     const LgFrSortingDemandScheduleFloat& demandSchdClone
<       = *( (LgFrSortingDemandScheduleFloatSmartPointer&)(msdClone.schedule(LGFRDemandVolume)) );
---
>
>     //// LET'S TRY THIS AGAIN...
>     /////const LgFrSortingDemandScheduleFloat& demandSchdClone
>     /////= *( (LgFrSortingDemandScheduleFloatSmartPointer&)(msdClone.schedule(LGFRDemandVolume)) );
>
>     LgFrSortingScheduleFloatSmartPointer XtmpschX = msdClone.schedule(LGFRDemandVolume);
>     LgFrSortingDemandScheduleFloatSmartPointer &XtmpschX2 = *(LgFrSortingDemandScheduleFloatSmartPointer*)&XtmpschX;
>     const LgFrSortingDemandScheduleFloat& demandSchdClone = *(XtmpschX2);
>
>     ///// DONE
>
Index: scenario/src/outInter.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/outInter.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 outInter.h
43c43
<   static const LgFrSchedulePrintStyle LgFrSolutionOutputInterface::pmTEXT;
---
>   static const LgFrSchedulePrintStyle pmTEXT;
Index: scenario/src/pairComp.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/pairComp.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 pairComp.h
84c84,86
< protected:
---
>   // in scenario.h, class LgFrScenario declares these methods to be "friend".
>   // see the comment in schdStrt.h.
>   //// protected:
Index: scenario/src/partSchd.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/partSchd.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 partSchd.C
261c261
<   LgFrTimeVecFloat::add,rhs);
---
>   &LgFrTimeVecFloat::add,rhs);
276c276
<   LgFrTimeVecFloat::subtract,rhs);
---
>   &LgFrTimeVecFloat::subtract,rhs);
443c443
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
466c466
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
487c487
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
503c503
<   LgFrTimeVecFloat::subtract, rhs );
---
>   &LgFrTimeVecFloat::subtract, rhs );
Index: scenario/src/scenATP.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/scenATP.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 scenATP.C
484c484
<           LgFrTimeVecFloat::returnRHS, newVol ) );
---
>           &LgFrTimeVecFloat::returnRHS, newVol ) );
513c513
<           LgFrTimeVecFloat::returnRHS, newVol ) );
---
>           &LgFrTimeVecFloat::returnRHS, newVol ) );
Index: scenario/src/scenSnFS.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/scenSnFS.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 scenSnFS.h
16c16
<   LgFrScenarioSensitiveFilterStrategy::scenario(
---
>   scenario(
21c21
<   LgFrScenarioSensitiveFilterStrategy::scenarioPtr()
---
>   scenarioPtr()
Index: scenario/src/scenario.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/scenario.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 scenario.h
46a47,54
> // had to add this line in order to avoid syntax error concerning
> // the uses of this class in members below.
> // vacpp complained that is was ambiguous.
> // I don't know why.
> // Perhaps in older versions of the compiler the friend declarations
> // below also implicitly declared the class as well?
> class LgFrScheduleFactory;
>
231c239
<   const LgFrScheduleFactory*
---
>     const LgFrScheduleFactory*
Index: scenario/src/schFCMRP.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/schFCMRP.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 schFCMRP.C
82c82
<       sumSS->combiningFunction (LgFrTimeVecFloat::add);
---
>       sumSS->combiningFunction (&LgFrTimeVecFloat::add);
184c184
<       sumSS->combiningFunction (LgFrTimeVecFloat::add);
---
>       sumSS->combiningFunction (&LgFrTimeVecFloat::add);
370c370
<       usagePctSS->combiningFunction (LgFrTimeVecFloat::percentageOf);
---
>       usagePctSS->combiningFunction (&LgFrTimeVecFloat::percentageOf);
416c416
<       deltaSS->combiningFunction (LgFrTimeVecFloat::subtract);
---
>       deltaSS->combiningFunction (&LgFrTimeVecFloat::subtract);
Index: scenario/src/schFctry.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/schFctry.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 schFctry.h
96c96
< friend LgFrScenarioBuilder;
---
> friend class LgFrScenarioBuilder;
Index: scenario/src/schdSnSS.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/schdSnSS.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 schdSnSS.C
242c242
<    combiningFunction_(LgFrTimeVecFloat::add),
---
>    combiningFunction_(&LgFrTimeVecFloat::add),
260c260
<    combiningFunction_(LgFrTimeVecFloat::add),
---
>    combiningFunction_(&LgFrTimeVecFloat::add),
613c613
<       cs1.combiningFunction (LgFrTimeVecFloat::subtract);
---
>       cs1.combiningFunction (&LgFrTimeVecFloat::subtract);
Index: scenario/src/schdStrt.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/schdStrt.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 schdStrt.h
141c141,168
< protected:
---
>   ////??????
>   // in scenario.h, class LgFrScenario declares (most of) the
>   // following methods to be "friend"s.
>   // I (vra) can't see how that would have ever been possible,
>   // given that these are protected methods.
>   // Perhaps the compilers are just more finicky now.
>   // As a hack to get this working right away, I will remove the
>   // protected keyword.
>   //
>   // An an alternative, one could add
>   //    friend class LgFrAttributeScheduleStrategy;
>   // to the classes that need access (such as LgFrScenario)
>   // and make these methods protected again.
>   //
>   // The differences between these two styles is:
>   //	dropping "protected" here allows everyone access,
>   //	(which presumably isn't intended),
>   //	but denies friends (such as LgFrScenario) access to private members
>   //	(which presumably is intended).
>   //
>   //	in contrast, using friend class LgFrAttributeScheduleStrategy
>   //	(and putting back the "protected" keyword here)
>   //	allows the friend classes access to private members
>   //	(presumably not intended),
>   //	but denies everyone else access to protected members
>   //	(presumably intended).
>   //
>   ////// protected:
Index: scenario/src/sched.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/sched.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 sched.C
578c578
<   return lhs.op(LgFrTimeVecFloat::add,rhs);
---
>   return lhs.op(&LgFrTimeVecFloat::add,rhs);
585c585
<   return lhs.op(LgFrTimeVecFloat::subtract,rhs);
---
>   return lhs.op(&LgFrTimeVecFloat::subtract,rhs);
594c594
<   return op(LgFrTimeVecFloat::maximum,rhs,-FLT_MAX);
---
>   return op(&LgFrTimeVecFloat::maximum,rhs,-FLT_MAX);
716c716
<   diff = lhs.op( LgFrTimeVecFloat::subtract, rhs );
---
>   diff = lhs.op( &LgFrTimeVecFloat::subtract, rhs );
734c734
<   diff = lhs.op( LgFrTimeVecFloat::subtract, rhs );
---
>   diff = lhs.op( &LgFrTimeVecFloat::subtract, rhs );
750c750
<   diff = lhs.op( LgFrTimeVecFloat::subtract, rhs );
---
>   diff = lhs.op( &LgFrTimeVecFloat::subtract, rhs );
761c761
<   diff = lhs.op( LgFrTimeVecFloat::subtract, rhs );
---
>   diff = lhs.op( &LgFrTimeVecFloat::subtract, rhs );
Index: scenario/src/sched.h
===================================================================
RCS file: /u/wit/devbase/scenario/src/sched.h,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 sched.h
81c81
<       LgFrScheduleFloat::capacity()
---
>       capacity()
Index: scenario/src/sortSchd.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/sortSchd.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 sortSchd.C
679c679
<   return lhs.op(LgFrTimeVecFloat::add,rhs);
---
>   return lhs.op(&LgFrTimeVecFloat::add,rhs);
688c688
<   return lhs.op(LgFrTimeVecFloat::subtract,rhs);
---
>   return lhs.op(&LgFrTimeVecFloat::subtract,rhs);
Index: scenario/src/wrkgProb.C
===================================================================
RCS file: /u/wit/devbase/scenario/src/wrkgProb.C,v
retrieving revision 1.1.1.1
diff -r1.1.1.1 wrkgProb.C
641c641
<                LgFrLastProblemSolved::capitalCost);
---
>                &LgFrLastProblemSolved::capitalCost);
650c650
<                       LgFrLastProblemSolved::capitalCost );
---
>                       &LgFrLastProblemSolved::capitalCost );
660c660
<                LgFrLastProblemSolved::equitability);
---
> 	     &LgFrLastProblemSolved::equitability);
669c669
<                       LgFrLastProblemSolved::equitability );
---
> 		    &LgFrLastProblemSolved::equitability );
679c679
<                LgFrLastProblemSolved::buildAhead);
---
> 		   &LgFrLastProblemSolved::buildAhead);
688c688
<                       LgFrLastProblemSolved::buildAhead );
---
> 			  &LgFrLastProblemSolved::buildAhead );
698c698
<                LgFrLastProblemSolved::computeCriticalList);
---
> 		   &LgFrLastProblemSolved::computeCriticalList);
707c707
<                       LgFrLastProblemSolved::computeCriticalList );
---
> 			  &LgFrLastProblemSolved::computeCriticalList );
717c717
<                LgFrLastProblemSolved::inventoryCost);
---
>                &LgFrLastProblemSolved::inventoryCost);
726c726
<                       LgFrLastProblemSolved::inventoryCost );
---
>                       &LgFrLastProblemSolved::inventoryCost );
736c736
<                LgFrLastProblemSolved::obj2WeightInventory);
---
>                &LgFrLastProblemSolved::obj2WeightInventory);
745c745
<                       LgFrLastProblemSolved::obj2WeightInventory );
---
>                       &LgFrLastProblemSolved::obj2WeightInventory );
755c755
<                LgFrLastProblemSolved::obj2WeightRevenue);
---
>                &LgFrLastProblemSolved::obj2WeightRevenue);
764c764
<                       LgFrLastProblemSolved::obj2WeightRevenue );
---
>                       &LgFrLastProblemSolved::obj2WeightRevenue );
774c774
<                LgFrLastProblemSolved::obj2WeightService);
---
>                &LgFrLastProblemSolved::obj2WeightService);
783c783
<                       LgFrLastProblemSolved::obj2WeightService );
---
>                       &LgFrLastProblemSolved::obj2WeightService );
793c793
<                LgFrLastProblemSolved::obj2WeightSubstitutes);
---
>                &LgFrLastProblemSolved::obj2WeightSubstitutes);
802c802
<                       LgFrLastProblemSolved::obj2WeightSubstitutes );
---
>                       &LgFrLastProblemSolved::obj2WeightSubstitutes );
812c812
<                LgFrLastProblemSolved::weightBounds);
---
>                &LgFrLastProblemSolved::weightBounds);
821c821
<                       LgFrLastProblemSolved::weightBounds );
---
>                       &LgFrLastProblemSolved::weightBounds );




Index: sce/src/aEngMgr.h
===================================================================
RCS file: /u/wit/devbase/sce/src/aEngMgr.h,v
retrieving revision 1.5
diff -r1.5 aEngMgr.h
77c77
< LgFrSceAllocationEngineMgr::sortID();
---
> sortID();
Index: sce/src/scePegging.C
===================================================================
RCS file: /u/wit/devbase/sce/src/scePegging.C,v
retrieving revision 1.6
diff -r1.6 scePegging.C
121c121
<   virtual RWBoolean SceCollectableDouble::operator==(const SceCollectableDouble& c) const
---
>   virtual RWBoolean operator==(const SceCollectableDouble& c) const
124c124
<   virtual RWBoolean SceCollectableDouble::isEqual(const RWCollectable* c) const
---
>   virtual RWBoolean isEqual(const RWCollectable* c) const
Index: sce/src/scePegging.h
===================================================================
RCS file: /u/wit/devbase/sce/src/scePegging.h,v
retrieving revision 1.4
diff -r1.4 scePegging.h
120c120
<   void ScePegging::computeConsVolAndUpdateConsDict(
---
>   void computeConsVolAndUpdateConsDict(
Index: sce/src/scenSce.h
===================================================================
RCS file: /u/wit/devbase/sce/src/scenSce.h,v
retrieving revision 1.6
diff -r1.6 scenSce.h
35a36,38
> // added to avoid syntax error - vra
> class LgFrScenarioForSceSmartPointer;
>
@
text
@d3 4
a23 3
#include <rw/cstring.h>
#include <rw/collstr.h>
#include <rw/hashdict.h>
a46 45
// Dummy classes to make RWHashDictionary happy
class LgFrSortingDemandScheduleFloatSmartPointerCollectable : public RWCollectable
{
  // isA(), newSpecies(), copy(), and some other things are declared
  // by this macro
  RWDECLARE_COLLECTABLE(LgFrSortingDemandScheduleFloatSmartPointerCollectable)

public:
  unsigned hash() const;
  LgFrSortingDemandScheduleFloatSmartPointer schedule();
  RWBoolean isEqual(const RWCollectable*) const;

  // Constructors
  LgFrSortingDemandScheduleFloatSmartPointerCollectable(LgFrSortingDemandScheduleFloatSmartPointer);
  LgFrSortingDemandScheduleFloatSmartPointerCollectable();

  // Destructor
  virtual ~LgFrSortingDemandScheduleFloatSmartPointerCollectable();

private:
  LgFrSortingDemandScheduleFloatSmartPointer schedulePtr_;
};


class LgFrSortingPartScheduleFloatSmartPointerCollectable : public RWCollectable
{
  // isA(), newSpecies(), copy(), and some other things are declared
  // by this macro
  RWDECLARE_COLLECTABLE(LgFrSortingPartScheduleFloatSmartPointerCollectable)

public:
  unsigned hash() const;
  LgFrSortingPartScheduleFloatSmartPointer schedule();
  RWBoolean isEqual(const RWCollectable*) const;

  // Constructors
  LgFrSortingPartScheduleFloatSmartPointerCollectable(LgFrSortingPartScheduleFloatSmartPointer);
  LgFrSortingPartScheduleFloatSmartPointerCollectable();

  // Destructor
  virtual ~LgFrSortingPartScheduleFloatSmartPointerCollectable();

private:
    LgFrSortingPartScheduleFloatSmartPointer schedulePtr_;
};
d48 2
d62 2
a63 2
		      const RWBoolean deepCopy = TRUE,
		      const RWBoolean toPopulate = TRUE
d69 2
a70 2
		      const RWBoolean deepCopy = TRUE,
		      const RWBoolean toPopulate = TRUE
d81 1
a81 1
  virtual RWCString
d87 1
a87 1
   LgFrOrderedVectorScheduleDescriptor
d91 1
a91 1
   LgFrOrderedVectorScheduleDescriptor
d130 3
a132 3
     const LgFrFilterStrategy * filterStrat = NULL,
     const LgFrPairCompareFloat * pairComparePtr = NULL,
     const RWBoolean ascending = TRUE
d142 3
a144 3
     const LgFrFilterStrategy * filterStrat = NULL,
     const LgFrPairCompareFloat * pairComparePtr = NULL,
     const RWBoolean ascending = TRUE
a156 5
  // hash table initializer
  virtual
  void
  initHashTable ();
  
d161 3
a163 3
				  const RWBoolean deepCopy,
				  const RWBoolean toPopulate,
				  LgFrSortingPartScheduleFloatSmartPointerCollectable* 
d172 2
a173 2
			      const RWBoolean deepCopy,
			      const RWBoolean toPopulate
d182 2
a183 2
				const RWBoolean deepCopy,
				const RWBoolean toPopulate
d191 3
a193 3
				    const RWBoolean deepCopy,
				    const RWBoolean toPopulate,
				    LgFrSortingDemandScheduleFloatSmartPointerCollectable* 
d201 1
a201 1
  RWHashDictionary &  demandSchedules();
d204 1
a204 1
  RWHashDictionary &   partSchedules();
d214 2
a215 2
  static LgFrOrderedVectorScheduleDescriptor demandScheduleDescriptors_;  
  static LgFrOrderedVectorScheduleDescriptor partScheduleDescriptors_;
d223 2
a224 2
  static LgFrOrderedVectorScheduleDescriptor initializeDemandScheduleDescriptors();
  static LgFrOrderedVectorScheduleDescriptor initializePartScheduleDescriptors();
d242 5
a246 2
  RWHashDictionary demandSchedules_;
  RWHashDictionary partSchedules_;
@


1.2.6.1
log
@Roguewave is gone
@
text
@a2 4
// RW2STL -- inserted:
#include <map>
#include <string>
// End of RW2STL -- inserted includes.
d20 3
d46 45
a91 2
typedef std::map<std::string,LgFrSortingDemandScheduleFloatSmartPointer> NameDemandDictionary;
typedef std::map<std::string,LgFrSortingPartScheduleFloatSmartPointer> NamePartDictionary;
d104 2
a105 2
		      const bool deepCopy = true,
		      const bool toPopulate = true
d111 2
a112 2
		      const bool deepCopy = true,
		      const bool toPopulate = true
d123 1
a123 1
  virtual std::string
d129 1
a129 1
   LgFrScheduleDescriptorVector
d133 1
a133 1
   LgFrScheduleDescriptorVector
d172 3
a174 3
     const LgFrFilterStrategy * filterStrat = 0,
     const LgFrPairCompareFloat * pairComparePtr = 0,
     const bool ascending = true
d184 3
a186 3
     const LgFrFilterStrategy * filterStrat = 0,
     const LgFrPairCompareFloat * pairComparePtr = 0,
     const bool ascending = true
d199 5
d208 3
a210 3
				  const bool deepCopy,
				  const bool toPopulate,
				  LgFrSortingPartScheduleFloatSmartPointer 
d219 2
a220 2
			      const bool deepCopy,
			      const bool toPopulate
d229 2
a230 2
				const bool deepCopy,
				const bool toPopulate
d238 3
a240 3
				    const bool deepCopy,
				    const bool toPopulate,
				    LgFrSortingDemandScheduleFloatSmartPointer
d248 1
a248 1
  NameDemandDictionary &  demandSchedules();
d251 1
a251 1
  NamePartDictionary &   partSchedules();
d261 2
a262 2
  static LgFrScheduleDescriptorVector demandScheduleDescriptors_;  
  static LgFrScheduleDescriptorVector partScheduleDescriptors_;
d270 2
a271 2
  static LgFrScheduleDescriptorVector initializeDemandScheduleDescriptors();
  static LgFrScheduleDescriptorVector initializePartScheduleDescriptors();
d289 2
a290 5
  typedef std::pair<std::string,LgFrSortingDemandScheduleFloatSmartPointer> NameDemandPair;
  NameDemandDictionary demandSchedules_;

  typedef std::pair<std::string,LgFrSortingPartScheduleFloatSmartPointer> NamePartPair;
  NamePartDictionary partSchedules_;
@


1.1
log
@Initial revision
@
text
@d96 1
a96 1
friend LgFrScenarioBuilder;
@


1.1.1.1
log
@Import scenario
@
text
@@
