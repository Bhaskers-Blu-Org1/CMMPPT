head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.44;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.49;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.49;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.34;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.40;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.3;

1.1.1.1.14.3
date	2003.01.14.19.05.41;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <math.h>
#include <stdlib.h>

#include <scenario/src/calendar.h>
#include <scenario/src/dif.h>
#include <scenario/src/difCmrpF.h>
#include <scenario/src/difTest.h>
#include <scenario/src/difPWcmr.h>
#include <scenario/src/scBdCMRP.h>
#include <scenario/src/scenCMRP.h>
#include <scenario/src/scenDrct.h>
#include <scenario/src/schFCMRP.h>
#include <scenario/src/ipCMRP.h>
#include <scenario/src/schdDeSt.h>

// forward declarations
class LgFrSetOfParts;
class LgFrSetOfDemands;

void
LgFrScenarioForCMRP::newImplosionSolution ()
{
  // Scale cumShipReward relative to shipReward
  // Get all changed shipReward's
   LgFrDemandVector chgObj1ShipReward
      = this->workingImplosionProblem().changedDemandsObj1ShipReward();

   // Loop once for each changed demand
   int chgObj1ShipRewardEntries = chgObj1ShipReward.size();
   int i = 0; // Pulled out of the for below by RW2STL
   for ( i=0; i< chgObj1ShipRewardEntries; i++ ) {

      // Update demand volume for demand i
      this->lastProblemSolved().obj1CumShipReward( &chgObj1ShipReward[i],
                 .001f *
                 (this->workingImplosionProblem().obj1ShipReward( chgObj1ShipReward [i] )) );

   }

  this -> LgFrScenario::newImplosionSolution();
}

void
LgFrScenarioForCMRP::newExplosionSolution ()
{

#if 0
  // get a copy of the current procLeadTimes
  LgFrSortingPartScheduleFloat * cycleTimesPtr = 
        this->scheduleFactory()->newPartSchedule(LGFRProcurementLeadTime);

  const LgFrScheduleFloat procurementLeadTimeCopy = *cycleTimesPtr;


  // set cycle times for PROCUREABLE parts to -1 in wit before
  // calling mrp()
  LgFrTimeVecFloat negOne(this->calendar().nPeriods(), -1.0);
  int numProcParts = constSetOfParts(LGFR_PROCUREABLE_SET).size();
  this->workingImplosionProblem().beginSeriesOfChanges();  // Added to enhance
                                                         // Performance.

  int i = 0; // Pulled out of the for below by RW2STL
  for (i=0; i<numProcParts; i++)   {
       cycleTimesPtr->insertKeyAndValue (
	   procurementLeadTimeCopy[i].part(),
	   negOne);
  }
  // this->workingImplosionProblem().endSeriesOfChanges();
#endif


  // do the explosion (the way the base class does it)
  this -> LgFrScenario::newExplosionSolution();

//  // me trying to get production schedule, witdata file and wit display data
//  this->lastProblemSolved().writeWitDataFile("CMRP.wit.data",this->workingImplosionProblem());
//  witReturnCode rc;
//  WitRun * theWitRun =  this->lastProblemSolved().witRun();
//  rc = witSetMesgTimesPrint ( theWitRun, WitTRUE, WitINFORMATIONAL_MESSAGES, UCHAR_MAX);
//  rc = witDisplayData ( theWitRun, "DDforRob.out");
//  assert (rc < WitWARNING_RC);
//  this->lastProblemSolved().writeProductionSchedule("PPforRob.out");


#if 0
  // put back the cycle times
  // this->workingImplosionProblem().beginSeriesOfChanges();
  for (i=0; i<procurementLeadTimeCopy.size(); i++)  {
      cycleTimesPtr->insertKeyAndValue (procurementLeadTimeCopy[i].part(),
					procurementLeadTimeCopy[i].timeVecFloat());
  }
  this->workingImplosionProblem().endSeriesOfChanges();

  delete cycleTimesPtr;
#endif

};

LgFrSetOfParts&
LgFrScenarioForCMRP::setOfParts(int k)
{
  // OK to cast away const. This is non-const member function
  return (LgFrSetOfParts &) constSetOfParts(k);
}


const
LgFrSetOfParts&
LgFrScenarioForCMRP::constSetOfParts(int k)
const
{
  assert (k>-1 && k<9);
  switch (k) {
    case LGFR_DEFAULT_SET:
       return defaultSOP_;
    case LGFR_UNIVERSAL_SET:
       return LgFrScenario::constSetOfParts(LGFR_UNIVERSAL_SET);
    case LGFR_PROCUREABLE_SET:
       return procureableSOP_;
    case LGFR_PRODUCEABLE_SET:
       return produceableSOP_;
    case LGFR_CONSTRAINED_SET:
       return constrainedSOP_;
    case LGFR_RAW_SET:
       return rawSOP_;
    case LGFR_MRP_PLANNED_SET:
       return mrpPlannedSOP_;
    case LGFR_CAPACITY_SET:
       return capacitySOP_;
    case LGFR_BUDGET_SET:
       return budgetSOP_;
    default:
       assert(1==0);
     }
  return defaultSOP_;
}


LgFrSetOfDemands&
LgFrScenarioForCMRP::setOfDemands(int k)
{
  // OK to cast away const. This is non-const member function
  return (LgFrSetOfDemands &) constSetOfDemands(k);
}

const
LgFrSetOfDemands&
LgFrScenarioForCMRP::constSetOfDemands(int k)
const
{
  assert(k==LGFR_DEFAULT_SET || k==LGFR_UNIVERSAL_SET ||
         k==LGFR_COMMITTED_DEMAND_SET);
  switch (k) {
    case LGFR_DEFAULT_SET:
       return defaultSOD_;
    case LGFR_UNIVERSAL_SET:
       return LgFrScenario::constSetOfDemands(LGFR_UNIVERSAL_SET);
    case LGFR_COMMITTED_DEMAND_SET:
       return committedSOD_;
    default:
       assert(1==0);
     }
  return defaultSOD_;
}

#if 0
// helper function for LgFrMultiDemandScheduleFloat::highestPriorityDemands
static
float
minNonZeroFloat (const float a, const float b)
{
    return (a <= b  
	    ? (a != 0  ?  a  :  b)
	    : (b != 0  ?  b  :  a)
	   );
}
#endif

static float fltEps = .00001f;

// ---------------------------------------------------------------------
// Return the set of demands that contain at least one time-period
// that has a priority greater than or equal to all of the other
// priorities
// ---------------------------------------------------------------------
LgFrSetOfDemands
LgFrScenarioForCMRP::mostUrgentDemands
   (const LgFrSortingDemandScheduleFloat& prioritySchedule)
const
{
    LgFrSetOfDemands hotDemands;	// demands with the lowest priority

    // find the numerically lowest non-zero priority
    LgFrTimeVecFloat lowestPriorities
	= prioritySchedule.reduceItems (minNonZeroFloat);

    // build the set of demands with lowest priority
    if (lowestPriorities.length() > 0) {
      float lowestPriority = lowestPriorities.reduce(minNonZeroFloat);
      int i = 0; // Pulled out of the for below by RW2STL
      for (i = 0; i < prioritySchedule.size(); ++i)
	  if ( fabs (prioritySchedule[i].timeVecFloat().reduce(minNonZeroFloat)
		     - lowestPriority)
	       <=  fltEps   )
	      hotDemands.insert (prioritySchedule[i].demand());
    }

    return hotDemands;
}

// Make wit use or not use focus horizons.
void
LgFrScenarioForCMRP::useFocusHorizons (bool b)
{
  this->lastProblemSolved().useFocusHorizons( b );
}
  
// Constructor
LgFrScenarioForCMRP::LgFrScenarioForCMRP(
    const LgFrDataInterfaceAbstract&    dif,
    const LgFrCalendar&                 calendar
    )
:LgFrScenario(dif, calendar),
 defaultSOP_(0),
 defaultSOD_(0),
 committedSOD_(0),
 procureableSOP_(0),
 produceableSOP_(0),
 constrainedSOP_(0),
 rawSOP_(0),
 mrpPlannedSOP_(0),
 capacitySOP_(0),
 budgetSOP_(0),
 id_(__LGFRSCENARIOFORCMRP)
{
  // builder does the rest
}

// Destructor 
LgFrScenarioForCMRP::~LgFrScenarioForCMRP()
{
  // Nothing to do here
}

// Assignment operator.
LgFrScenarioForCMRP&
LgFrScenarioForCMRP::operator=(
   const LgFrScenarioForCMRP& )
{
    std::cerr << "ERROR: do not use LgFrScenarioForCMRP::operator=(const LgFrSceanrioForCMRP&)" << std::endl;
    assert(0);
/*
   if (this != &rhs) {           // Check for assignment to self
     (this->LgFrScenario::operator= ) (rhs);
     defaultSOP_ = rhs.defaultSOP_;
     defaultSOD_ = rhs.defaultSOD_;
     committedSOD_ = rhs.committedSOD_;     
     procureableSOP_ = rhs.procureableSOP_;
     produceableSOP_ = rhs.produceableSOP_;
     constrainedSOP_ = rhs.constrainedSOP_;
     rawSOP_ = rhs.rawSOP_;
     mrpPlannedSOP_ = rhs.mrpPlannedSOP_;
     capacitySOP_ = rhs.capacitySOP_;
     budgetSOP_ = rhs.budgetSOP_;
   }
*/
   return *this;
}


// Customized copy constructor
LgFrScenarioForCMRP::LgFrScenarioForCMRP(
   const LgFrScenarioForCMRP& source )
: LgFrScenario( source ),
  defaultSOP_(source.defaultSOP_),
  defaultSOD_(source.defaultSOD_),
  committedSOD_(source.committedSOD_),  
  procureableSOP_(source.procureableSOP_),
  produceableSOP_(source.produceableSOP_),
  constrainedSOP_(source.constrainedSOP_),
  rawSOP_(source.rawSOP_),
  mrpPlannedSOP_(source.mrpPlannedSOP_),
  capacitySOP_(source.capacitySOP_),
  budgetSOP_(source.budgetSOP_),
 id_(__LGFRSCENARIOFORCMRP)
{
  // Nothing to do here
}

// Default constructor
LgFrScenarioForCMRP::LgFrScenarioForCMRP()
: LgFrScenario(),
 defaultSOP_(0),
 defaultSOD_(0),
 committedSOD_(0),
 procureableSOP_(0),
 produceableSOP_(0),
 constrainedSOP_(0),
 rawSOP_(0),
 mrpPlannedSOP_(0),
 capacitySOP_(0),
 budgetSOP_(0),
 id_(__LGFRSCENARIOFORCMRP)
{
  // Nothing to do here
}



#ifdef NDEBUG
#undef NDEBUG
#endif

void
LgFrScenarioForCMRP::test()
{

  // Check the LgFrDataInterfaceImplmentationForTest
  // ==================================================  
  LgFrCalendar calendar1;
  LgFrDataInterfaceImplementation* protoDif1ImpPtr
      = createDifTestImp();
  protoDif1ImpPtr->title("Test problem for LgFrDataInterfaceImplementation");
  registerDifTestImpFunctions(protoDif1ImpPtr);

  LgFrDataInterface protoDif1(protoDif1ImpPtr);
  delete protoDif1ImpPtr;  // free it from heap since dif constr clone's it's own copy
  protoDif1ImpPtr = 0;

  // Create a scenario using the builder
  LgFrScenarioBuilderForCMRP builder1;
  LgFrScenarioDirector director1(&builder1);  
  director1.construct(protoDif1, calendar1);
  LgFrScenarioForCMRPSmartPointer testScenarioPtr1 = builder1.getScenario();

  // Test the deep copy constructor
  LgFrScenarioForCMRPSmartPointer testScenarioDupPtr1
                 = testScenarioPtr1.deepCopy();
  
  assert(testScenarioDupPtr1->title() != testScenarioPtr1->title());

  assert(testScenarioDupPtr1->setOfParts(LGFR_DEFAULT_SET).size() == 3);
  assert(testScenarioDupPtr1->setOfParts(LGFR_UNIVERSAL_SET).size() == 4);
  assert(testScenarioDupPtr1->setOfParts(LGFR_BUDGET_SET).size() == 1);
  assert(testScenarioDupPtr1->setOfDemands(LGFR_DEFAULT_SET).size() == 2);

  // Test the assignment operator - shallow copy
  LgFrScenarioForCMRPSmartPointer assignee;
  assignee =  testScenarioPtr1;

  
  assert(assignee->title() == testScenarioPtr1->title());

  assert(assignee->setOfParts(LGFR_DEFAULT_SET).size() == 3);
  assert(assignee->setOfParts(LGFR_UNIVERSAL_SET).size() == 4);
  assert(assignee->setOfParts(LGFR_BUDGET_SET).size() == 1);
  assert(assignee->setOfDemands(LGFR_DEFAULT_SET).size() == 2);

  // Make another deep copy
  LgFrScenarioForCMRPSmartPointer yetAnotherScenarioPtr
                 = testScenarioDupPtr1.deepCopy();

  // Do some downcasts

  LgFrDataInterface * tsDifPtr1 
      = (LgFrDataInterface*)(testScenarioPtr1->dataInterface());
  assert (tsDifPtr1 != 0);

  LgFrDataInterfaceImplementation* tsDifImpPtr1
       = tsDifPtr1->dataInterfaceImplementation();

//  LgFrDataInterface tsTestDif1(tsDifImpPtr1->clone());
  LgFrDataInterface tsTestDif1(tsDifImpPtr1);
  LgFrDataInterface* tsTestDifPtr1 = &tsTestDif1;
          
  LgFrDataInterface * tsDupDifPtr1 
      = (LgFrDataInterface*)(testScenarioDupPtr1->dataInterface());

  assert (tsDupDifPtr1 );

  LgFrDataInterfaceImplementation* tsDupDifImpPtr1
     = tsDupDifPtr1->dataInterfaceImplementation();

//  LgFrDataInterface tsDupTestDif1(tsDupDifImpPtr1->clone());
  LgFrDataInterface tsDupTestDif1(tsDupDifImpPtr1);
  LgFrDataInterface* tsDupTestDifPtr1 = &tsDupTestDif1;

  // Check for typo's in the downcasting code
  assert (tsTestDifPtr1 != tsDupTestDifPtr1);

  // And test the test dif
  difTestContextTest(
      *testScenarioPtr1, 
      testScenarioPtr1->lastProblemSolved(),
      *tsTestDifPtr1,
      *testScenarioDupPtr1, 
      *tsDupTestDifPtr1
      );


  // Test the LgFrDataInterfaceImplementationFromPWcmrp
  // =================================================== 

  LgFrCalendar calendar2(8, LgFrDatetime("7/15/94"));
  LgFrDataInterfaceImplementation* protoDif2ImpPtr
      = createPWcmrpDifImp();
  registerPWcmrpDifImpFunctions(protoDif2ImpPtr);

  LgFrDataInterface protoDif2(protoDif2ImpPtr);
  delete protoDif2ImpPtr;
  protoDif2ImpPtr = 0;

  // Create a scenario using the builder
  LgFrScenarioBuilderForCMRP builder2;
  LgFrScenarioDirector director2(&builder2);  
  director2.construct(protoDif2, calendar2);
  LgFrScenarioForCMRPSmartPointer testScenarioPtr2 = builder2.getScenario();

  // Shouldn't have to downcast.  Add a method in scenCMRP to get the ippCMRP
  LgFrInitialProblemForCMRP * testIpp2 = (LgFrInitialProblemForCMRP *)
                        &(testScenarioPtr2->initialProblemAndParameters());
 
  // Make a deep copy of it
  LgFrScenarioForCMRPSmartPointer testScenarioDupPtr2
    = testScenarioPtr2.deepCopy();

  // Do some downcasts
  LgFrDataInterface * tsDifPtr2 
      = (LgFrDataInterface*)(testScenarioPtr2->dataInterface());

  assert (tsDifPtr2 != 0);

  LgFrDataInterfaceImplementation* tsDifImpPtr2
       = tsDifPtr2->dataInterfaceImplementation();

//  LgFrDataInterface tsTestDif2(tsDifImpPtr2->clone());
  LgFrDataInterface tsTestDif2(tsDifImpPtr2);
  LgFrDataInterface* tsTestDifPtr2 = &tsTestDif2;

  LgFrDataInterface * tsDupDifPtr2
      = (LgFrDataInterface*)(testScenarioDupPtr2->dataInterface());

  assert (tsDupDifPtr2 != 0);

  LgFrDataInterfaceImplementation* tsDupDifImpPtr2
     = tsDupDifPtr2->dataInterfaceImplementation();

//  LgFrDataInterface tsDupTestDif2(tsDupDifImpPtr2->clone());
  LgFrDataInterface tsDupTestDif2(tsDupDifImpPtr2);
  LgFrDataInterface* tsDupTestDifPtr2 = &tsDupTestDif2;
          
  // Check for typo's in the downcasting code
  assert (tsTestDifPtr2 != tsDupTestDifPtr2);

  // Context test for difPWcmrp
  difPWcmrpContextTest(
      *tsDifPtr2,
      *tsDupDifPtr2,
      &(*testScenarioPtr2)
      );

  
  // Check LgFrInitialProblemForCMRP
  // ===================================== 
  // Must re-create the scenario's because the dif's contextTest() methods
  // mucked around with  the witRun's.
  // Use difTest to test

  LgFrCalendar calendar3(8, LgFrDatetime("7/15/94"));
  LgFrDataInterfaceImplementation* protoDif3ImpPtr
      = createDifTestImp();
  registerDifTestImpFunctions(protoDif3ImpPtr);

  LgFrDataInterface protoDif3(protoDif3ImpPtr);
  delete protoDif3ImpPtr;
  protoDif3ImpPtr = 0;

  // Create a scenario using the builder
  LgFrScenarioBuilderForCMRP builder3;
  LgFrScenarioDirector director3(&builder3);  
  director3.construct(protoDif3, calendar3);
  LgFrScenarioForCMRPSmartPointer testScenarioPtr3 = builder3.getScenario();

  // Shouldn't have to downcast.  Add a method in scenCMRP to get the ippCMRP
  LgFrInitialProblemForCMRP * testIpp3 = (LgFrInitialProblemForCMRP *)
                        &(testScenarioPtr3->initialProblemAndParameters());
 
  // Make a deep copy of it
  LgFrScenarioForCMRPSmartPointer testScenarioDupPtr3
    = testScenarioPtr3.deepCopy();  

  // Do some downcasts
  LgFrDataInterface * tsDifPtr3 
      = (LgFrDataInterface*)(testScenarioPtr3->dataInterface());

  assert (tsDifPtr3 != 0);

  LgFrDataInterfaceImplementation* tsDifImpPtr3
       = tsDifPtr3->dataInterfaceImplementation();

//  LgFrDataInterface tsTestDif3(tsDifImpPtr3->clone());
  LgFrDataInterface tsTestDif3(tsDifImpPtr3);
  LgFrDataInterface* tsTestDifPtr3 = &tsTestDif3;
          
  LgFrDataInterface * tsDupDifPtr3 
      = (LgFrDataInterface*)(testScenarioDupPtr3->dataInterface());

  assert (tsDupDifPtr3 != 0);

  LgFrDataInterfaceImplementation* tsDupDifImpPtr3
     = tsDupDifPtr3->dataInterfaceImplementation();

//  LgFrDataInterface tsDupTestDif3(tsDupDifImpPtr3->clone());
  LgFrDataInterface tsDupTestDif3(tsDupDifImpPtr3);
  LgFrDataInterface* tsDupTestDifPtr3 = &tsDupTestDif3;

  // Check for typo's in the downcasting code
  assert (tsDifPtr3 != tsDupDifPtr3);

  // Check for typo's in the downcasting code
  assert (tsTestDifPtr3 != tsDupTestDifPtr3);

  // Constext test for difTest
  difTestContextTest(
      *testScenarioPtr1, 
      testScenarioPtr1->lastProblemSolved(),
      *tsTestDifPtr1,
      *testScenarioDupPtr1, 
      *tsDupTestDifPtr1
      );
  
  
  
  // Check LgFrInitialProblemForCMRP
  // ===============================
  // Must re-create the scenario's because the dif's contextTest() methods
  // mucked around with  the witRun's.

  LgFrCalendar calendar4;
  LgFrDataInterfaceImplementation* protoDif4ImpPtr
      = createPWcmrpDifImp();
  registerPWcmrpDifImpFunctions(protoDif4ImpPtr);
  LgFrDataInterface protoDif4(protoDif4ImpPtr);
  delete protoDif4ImpPtr;
  protoDif4ImpPtr = 0;

  // Create a scenario using the builder
  LgFrScenarioBuilderForCMRP builder4;
  LgFrScenarioDirector director4(&builder4);  
  director4.construct(protoDif4, calendar4);
  LgFrScenarioForCMRPSmartPointer testScenarioPtr4 = builder4.getScenario();
  LgFrInitialProblemForCMRP * testIpp4 = (LgFrInitialProblemForCMRP *)
                        &(testScenarioPtr4->initialProblemAndParameters());
  // Make a deep copy of it
  LgFrScenarioForCMRPSmartPointer testScenarioDupPtr4
    = testScenarioPtr4.deepCopy();

  // Do some downcasts
  LgFrDataInterface * tsDifPtr4 
      = (LgFrDataInterface*)(testScenarioPtr4->dataInterface());

  assert (tsDifPtr4 != 0);

  LgFrDataInterfaceImplementation* tsDifImpPtr4
       = tsDifPtr4->dataInterfaceImplementation();

//  LgFrDataInterface tsTestDif4(tsDifImpPtr4->clone());
  LgFrDataInterface tsTestDif4(tsDifImpPtr4);
  LgFrDataInterface* tsTestDifPtr4 = &tsTestDif4;

  LgFrDataInterface * tsDupDifPtr4
      = (LgFrDataInterface*)(testScenarioDupPtr4->dataInterface());

  assert (tsDupDifPtr4 != 0);

  LgFrDataInterfaceImplementation* tsDupDifImpPtr4
     = tsDupDifPtr4->dataInterfaceImplementation();

//  LgFrDataInterface tsDupTestDif4(tsDupDifImpPtr4->clone());
  LgFrDataInterface tsDupTestDif4(tsDupDifImpPtr4);
  LgFrDataInterface* tsDupTestDifPtr4 = &tsDupTestDif4;

  // Check for typo's in the downcasting code
  assert (tsTestDifPtr4 != tsDupTestDifPtr4);
  
 // Context test for LgFrInitialProblemForCMRP
  
  LgFrInitialProblemForCMRP::contextTest
  (*testIpp3, *testIpp4); // ippTest, ippPWcmrp


  // Test LgFrScheduleFactoryForCMRP
  LgFrScheduleFactoryForCMRP::contextTest ( 
      * (testScenarioDupPtr4
	 ->scheduleFactory())  );


  // Test LgFrInitialProblemForCMRPwithPrioritesFromDif
  // Use LgFrDataInterfaceImplementationFromFiles to test

  LgFrDataInterfaceImplementation * difImpPtr
	= createCmrpFilesDifImp(CMRP_DATA_PATH "difTest");

  registerCmrpFilesDifImpFunctions(difImpPtr);
  LgFrDataInterface difWithPriorities(difImpPtr);

  LgFrDatetime dt;
  dt.setDate( 10,4,1995 );
  LgFrCalendar calendar5( 3,dt,LgFrDay);
  LgFrScenarioBuilderForCMRP builder5;
  LgFrScenarioDirector director5(&builder5);  
  director5.construct(difWithPriorities, calendar5);
  LgFrScenarioForCMRPSmartPointer testScenarioPtr5 = builder5.getScenario();
  LgFrInitialProblemForCMRPwithPrioritiesFromDif * testIpp5 = 
                        (LgFrInitialProblemForCMRPwithPrioritiesFromDif *)
                        &(testScenarioPtr5->initialProblemAndParameters());
    LgFrDataInterface * tsDifPtr5 
	= (LgFrDataInterface*)(testScenarioPtr5->dataInterface());
    assert (tsDifPtr5 != 0);

  LgFrDataInterfaceImplementation* tsDifImpPtr5
       = tsDifPtr5->dataInterfaceImplementation();

  LgFrDataInterface tsTestDif5(tsDifImpPtr5);
  LgFrDataInterface* tsTestDifPtr5 = &tsTestDif5;

//  delete tsDifImpPtr5;

    // Make a copy of it
    LgFrScenarioForCMRP * testScenarioDupPtr5
	= new LgFrScenarioForCMRP (*testScenarioPtr5);

    LgFrDataInterface * tsDupDifPtr5
	= (LgFrDataInterface*)(testScenarioDupPtr5->dataInterface());

    assert (tsDupDifPtr5 != 0);

    LgFrDataInterfaceImplementation* tsDupDifImpPtr5
	= tsDupDifPtr5->dataInterfaceImplementation();

    LgFrDataInterface tsDupTestDif5(tsDupDifImpPtr5);
    LgFrDataInterface* tsDupTestDifPtr5 = &tsDupTestDif5;

  // Check for typo's in the downcasting code
  assert (tsDifPtr5 != tsDupDifPtr5);

  // Check for typo's in the downcasting code
  assert (tsTestDifPtr5 != tsDupTestDifPtr5);

 // contextTest for LgFrInitialProblemForCMRPwithPrioritiesFromDif
    LgFrInitialProblemForCMRPwithPrioritiesFromDif::contextTest( 
	*testIpp5,
	*tsDifPtr5); 

//  delete testScenarioDupPtr5;
//  delete difImpPtr;

  // Now that source/rhs (testScenarioDupPtr3) has been deleted, 
  // retest the assignee and yetAnotherScenarioPtr

  assert(assignee->title() == testScenarioPtr1->title());

  assert(assignee->setOfParts(LGFR_DEFAULT_SET).size() == 3);
  assert(assignee->setOfParts(LGFR_UNIVERSAL_SET).size() == 4);
  assert(assignee->setOfParts(LGFR_BUDGET_SET).size() == 1);
  assert(assignee->setOfDemands(LGFR_DEFAULT_SET).size() == 2);

  assert(yetAnotherScenarioPtr->title() != testScenarioPtr1->title());

  assert(yetAnotherScenarioPtr->setOfParts(LGFR_DEFAULT_SET).size() == 3);
  assert(yetAnotherScenarioPtr->setOfParts(LGFR_UNIVERSAL_SET).size() == 4);
  assert(yetAnotherScenarioPtr->setOfParts(LGFR_BUDGET_SET).size() == 1);
  assert(yetAnotherScenarioPtr->setOfDemands(LGFR_DEFAULT_SET).size() == 2);

  delete testScenarioDupPtr5;
  delete difImpPtr;

  // Release smart pointers to schedules in the schedule factory so
  // that the scenario can be deleted when the current block exists.
#define releaseMacro(ptr)	\
  ( (LgFrScheduleFactory *)    /* Cast away const */	\
    (ptr->scheduleFactory()) )			\
    -> clearAndDestroy()
  releaseMacro(testScenarioPtr4);
  
} 
@


1.1
log
@Initial revision
@
text
@d1 3
a22 7
isAReturnType
LgFrScenarioForCMRP::isA() const
{
    return id_;
}


d28 1
a28 1
   LgFrOrderedVectorDemand chgObj1ShipReward
d32 3
a34 2
   int chgObj1ShipRewardEntries = chgObj1ShipReward.entries();
   for ( int i=0; i< chgObj1ShipRewardEntries; i++ ) {
d61 1
a61 1
  int numProcParts = constSetOfParts(LGFR_PROCUREABLE_SET).entries();
d65 2
a66 1
  for (int i=0; i<numProcParts; i++)   {
d91 1
a91 1
  for (i=0; i<procurementLeadTimeCopy.entries(); i++)  {
d203 2
a204 1
      for (int i = 0; i < prioritySchedule.entries(); ++i)
d216 1
a216 1
LgFrScenarioForCMRP::useFocusHorizons (RWBoolean b)
d253 1
a253 1
    cerr << "ERROR: do not use LgFrScenarioForCMRP::operator=(const LgFrSceanrioForCMRP&)" << endl;
d331 1
a331 1
  protoDif1ImpPtr = NULL;
d344 5
a348 10
  assert(testScenarioDupPtr1->dataInterface()->isA() 
	 == __LGFRDATAINTERFACE);
  assert(((LgFrDataInterface*)(testScenarioDupPtr1->dataInterface()))
	 ->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);

  assert(testScenarioDupPtr1->setOfParts(LGFR_DEFAULT_SET).entries() == 3);
  assert(testScenarioDupPtr1->setOfParts(LGFR_UNIVERSAL_SET).entries() == 4);
  assert(testScenarioDupPtr1->setOfParts(LGFR_BUDGET_SET).entries() == 1);
  assert(testScenarioDupPtr1->setOfDemands(LGFR_DEFAULT_SET).entries() == 2);
d356 5
a360 10
  assert(((LgFrDataInterface*)(assignee->dataInterface()))
	 ->isA() == __LGFRDATAINTERFACE);
  assert(((LgFrDataInterface*)(assignee->dataInterface()))
	 ->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);

  assert(assignee->setOfParts(LGFR_DEFAULT_SET).entries() == 3);
  assert(assignee->setOfParts(LGFR_UNIVERSAL_SET).entries() == 4);
  assert(assignee->setOfParts(LGFR_BUDGET_SET).entries() == 1);
  assert(assignee->setOfDemands(LGFR_DEFAULT_SET).entries() == 2);
d370 1
a370 4
  assert (tsDifPtr1 != NULL
          &&  tsDifPtr1->isA() == __LGFRDATAINTERFACE);
  assert(tsDifPtr1->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);
d382 1
a382 4
  assert (tsDupDifPtr1 != NULL
          &&  tsDupDifPtr1->isA() == __LGFRDATAINTERFACE);
  assert(tsDupDifPtr1->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);
d407 1
a407 1
  LgFrCalendar calendar2(8, RWTime(RWDate("7/15/94")));
d414 1
a414 1
  protoDif2ImpPtr = NULL;
d434 1
a434 6
  assert (tsDifPtr2 != NULL
        &&  tsDifPtr2->isA()
	  == __LGFRDATAINTERFACE);

  assert(tsDifPtr2->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);
d446 1
a446 4
  assert (tsDupDifPtr2 != NULL
          &&  tsDupDifPtr2->isA() == __LGFRDATAINTERFACE);
  assert(tsDupDifPtr2->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);
d472 1
a472 1
  LgFrCalendar calendar3(8, RWTime(RWDate("7/15/94")));
d479 1
a479 1
  protoDif3ImpPtr = NULL;
d499 1
a499 4
  assert (tsDifPtr3 != NULL
          &&  tsDifPtr3->isA() == __LGFRDATAINTERFACE);
  assert(tsDifPtr3->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);
d511 1
a511 4
  assert (tsDupDifPtr3 != NULL
          &&  tsDupDifPtr3->isA() == __LGFRDATAINTERFACE);
  assert(tsDupDifPtr3->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);
d548 1
a548 1
  protoDif4ImpPtr = NULL;
d565 1
a565 6
  assert (tsDifPtr4 != NULL
        &&  tsDifPtr4->isA()
	  == __LGFRDATAINTERFACE);

  assert(tsDifPtr4->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);
d577 1
a577 4
  assert (tsDupDifPtr4 != NULL
          &&  tsDupDifPtr4->isA() == __LGFRDATAINTERFACE);
  assert(tsDupDifPtr4->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);
d610 3
a612 1
  LgFrCalendar calendar5( 3,RWTime(RWDate(10,4,1995)),LgFrDay);
d622 1
a622 4
    assert (tsDifPtr5 != NULL
	    &&  tsDifPtr5->isA() == __LGFRDATAINTERFACE);
    assert(tsDifPtr5->dataInterfaceImplementation()->isA() 
	   == __LGFRDATAINTERFACEIMPLEMENTATIONFROMCMRPFILES);
d639 1
a639 4
    assert (tsDupDifPtr5 != NULL
	    &&  tsDupDifPtr5->isA() == __LGFRDATAINTERFACE);
    assert(tsDupDifPtr5->dataInterfaceImplementation()->isA() 
	   == __LGFRDATAINTERFACEIMPLEMENTATIONFROMCMRPFILES);
d665 5
a669 10
  assert(((LgFrDataInterface*)(assignee->dataInterface()))
	 ->isA() == __LGFRDATAINTERFACE);
  assert(((LgFrDataInterface*)(assignee->dataInterface()))
	 ->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);

  assert(assignee->setOfParts(LGFR_DEFAULT_SET).entries() == 3);
  assert(assignee->setOfParts(LGFR_UNIVERSAL_SET).entries() == 4);
  assert(assignee->setOfParts(LGFR_BUDGET_SET).entries() == 1);
  assert(assignee->setOfDemands(LGFR_DEFAULT_SET).entries() == 2);
d672 5
a676 12
  assert(yetAnotherScenarioPtr->dataInterface()->isA() 
	 == __LGFRDATAINTERFACE);
  assert(((LgFrDataInterface*)(yetAnotherScenarioPtr->dataInterface()))
	 ->isA() == __LGFRDATAINTERFACE);
  assert(((LgFrDataInterface*)(yetAnotherScenarioPtr->dataInterface()))
	 ->dataInterfaceImplementation()->isA() 
	 == __LGFRDATAINTERFACEIMPLEMENTATION);

  assert(yetAnotherScenarioPtr->setOfParts(LGFR_DEFAULT_SET).entries() == 3);
  assert(yetAnotherScenarioPtr->setOfParts(LGFR_UNIVERSAL_SET).entries() == 4);
  assert(yetAnotherScenarioPtr->setOfParts(LGFR_BUDGET_SET).entries() == 1);
  assert(yetAnotherScenarioPtr->setOfDemands(LGFR_DEFAULT_SET).entries() == 2);
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 3
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
d20 7
d32 1
a32 1
   LgFrDemandVector chgObj1ShipReward
d36 2
a37 3
   int chgObj1ShipRewardEntries = chgObj1ShipReward.size();
   int i = 0; // Pulled out of the for below by RW2STL
   for ( i=0; i< chgObj1ShipRewardEntries; i++ ) {
d64 1
a64 1
  int numProcParts = constSetOfParts(LGFR_PROCUREABLE_SET).size();
d68 1
a68 2
  int i = 0; // Pulled out of the for below by RW2STL
  for (i=0; i<numProcParts; i++)   {
d93 1
a93 1
  for (i=0; i<procurementLeadTimeCopy.size(); i++)  {
d205 1
a205 2
      int i = 0; // Pulled out of the for below by RW2STL
      for (i = 0; i < prioritySchedule.size(); ++i)
d217 1
a217 1
LgFrScenarioForCMRP::useFocusHorizons (bool b)
d332 1
a332 1
  protoDif1ImpPtr = 0;
d345 10
a354 5

  assert(testScenarioDupPtr1->setOfParts(LGFR_DEFAULT_SET).size() == 3);
  assert(testScenarioDupPtr1->setOfParts(LGFR_UNIVERSAL_SET).size() == 4);
  assert(testScenarioDupPtr1->setOfParts(LGFR_BUDGET_SET).size() == 1);
  assert(testScenarioDupPtr1->setOfDemands(LGFR_DEFAULT_SET).size() == 2);
d362 10
a371 5

  assert(assignee->setOfParts(LGFR_DEFAULT_SET).size() == 3);
  assert(assignee->setOfParts(LGFR_UNIVERSAL_SET).size() == 4);
  assert(assignee->setOfParts(LGFR_BUDGET_SET).size() == 1);
  assert(assignee->setOfDemands(LGFR_DEFAULT_SET).size() == 2);
d381 4
a384 1
  assert (tsDifPtr1 != 0);
d396 4
a399 1
  assert (tsDupDifPtr1 );
d424 1
a424 1
  LgFrCalendar calendar2(8, SCETime(SCEDate("7/15/94")));
d431 1
a431 1
  protoDif2ImpPtr = 0;
d451 6
a456 1
  assert (tsDifPtr2 != 0);
d468 4
a471 1
  assert (tsDupDifPtr2 != 0);
d497 1
a497 1
  LgFrCalendar calendar3(8, SCETime(SCEDate("7/15/94")));
d504 1
a504 1
  protoDif3ImpPtr = 0;
d524 4
a527 1
  assert (tsDifPtr3 != 0);
d539 4
a542 1
  assert (tsDupDifPtr3 != 0);
d579 1
a579 1
  protoDif4ImpPtr = 0;
d596 6
a601 1
  assert (tsDifPtr4 != 0);
d613 4
a616 1
  assert (tsDupDifPtr4 != 0);
d649 1
a649 1
  LgFrCalendar calendar5( 3,SCETime(SCEDate(10,4,1995)),LgFrDay);
d659 4
a662 1
    assert (tsDifPtr5 != 0);
d679 4
a682 1
    assert (tsDupDifPtr5 != 0);
d708 10
a717 5

  assert(assignee->setOfParts(LGFR_DEFAULT_SET).size() == 3);
  assert(assignee->setOfParts(LGFR_UNIVERSAL_SET).size() == 4);
  assert(assignee->setOfParts(LGFR_BUDGET_SET).size() == 1);
  assert(assignee->setOfDemands(LGFR_DEFAULT_SET).size() == 2);
d720 12
a731 5

  assert(yetAnotherScenarioPtr->setOfParts(LGFR_DEFAULT_SET).size() == 3);
  assert(yetAnotherScenarioPtr->setOfParts(LGFR_UNIVERSAL_SET).size() == 4);
  assert(yetAnotherScenarioPtr->setOfParts(LGFR_BUDGET_SET).size() == 1);
  assert(yetAnotherScenarioPtr->setOfDemands(LGFR_DEFAULT_SET).size() == 2);
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d253 1
a253 1
    std::cerr << "ERROR: do not use LgFrScenarioForCMRP::operator=(const LgFrSceanrioForCMRP&)" << std::endl;
@


1.1.1.1.14.3
log
@New LgFrDatetime class
@
text
@d407 1
a407 1
  LgFrCalendar calendar2(8, LgFrDatetime("7/15/94"));
d472 1
a472 1
  LgFrCalendar calendar3(8, LgFrDatetime("7/15/94"));
d610 1
a610 3
  LgFrDatetime dt;
  dt.setDate( 10,4,1995 );
  LgFrCalendar calendar5( 3,dt,LgFrDay);
@


