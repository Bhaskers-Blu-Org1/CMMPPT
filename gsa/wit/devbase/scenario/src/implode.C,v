head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.37;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.43;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.43;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.31;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/implode.h>
#include <scenario/src/machdep.h>
#include <scenario/src/scenario.h>


// updateFrom - This method is invoked when the algorthm solution has
// been updated.
void
LgFrImplode::updateFrom (
   LgFrModel * ,
   void * a )
{
  if (a != 0)  {
    LgFrAlgorithm * algorithm = (LgFrAlgorithm *)a;

    if ( algorithm->GetAlgorithmType() == __LGFRIMPLODE )
      changed( 0 );
  }
}

// Get Last Problem Solved
LgFrLastProblemSolved &
LgFrImplode::lastProblemSolved()
const
{
   assert (lpsPtr_ != 0);
   return *lpsPtr_;
}


// Return pointer to the implode algorithm in the specified scenario.
LgFrAlgorithm *
LgFrImplode::counterPart(
LgFrScenario & scenario)
const
{
   return &( scenario.implode() );
}

// Default constructor
LgFrImplode::LgFrImplode()
: 
  LgFrAlgorithm(),
  lpsPtr_(0),
  id_(__LGFRIMPLODE)
{
  assert (this->numberDependents() == 0);
  // All the work is done in the initialization part
}

// A Constructor
LgFrImplode::LgFrImplode(
   LgFrLastProblemSolved & lps )
: 
  LgFrAlgorithm(),
  lpsPtr_(&lps),
  id_(__LGFRIMPLODE)
{
  assert (this->numberDependents() == 0);
  // Register with LPS to be informed when implosion solution changes
  lpsPtr_->addDependent( this );
}


//Copy constructor
LgFrImplode::LgFrImplode 
   (const LgFrImplode& source)
: 
  LgFrAlgorithm(source),
  lpsPtr_(source.lpsPtr_),
  id_(__LGFRIMPLODE)
{
  assert (this->numberDependents() == 0);
  // Register with LPS to be informed when implosion solution changes
  if (lpsPtr_!=0) lpsPtr_->addDependent( this );
}

// Destructor
LgFrImplode::~LgFrImplode()
{
  // Unregister with LPS
  if (lpsPtr_!=0) lpsPtr_->removeDependent( this );
}

// Assignment
LgFrImplode&
LgFrImplode::operator=
(const LgFrImplode& )
{
  // Difficult to implement, so wait till it is necessary
  abort();
  return *this;
}

#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrImplode
void
LgFrImplode::test()
{

  // Test default constructor
  LgFrImplode defaultImplodeCtrl;
  assert (defaultImplodeCtrl.lpsPtr_ == 0);

}

//
void
LgFrImplode::contextTest(LgFrLastProblemSolved       &lps,
                         LgFrSetOfParts              &sop)
{
  // The data for this test should have come from
  // "/u/implode/wit/data/examples/diner12/wit.data"

  // Test non-default constructors
  LgFrImplode anImplodeCtrl (lps);
  assert(sop[0].name() == "Skillet");
  LgFrImplode copiedImplodeCtrl (anImplodeCtrl);
  assert ((copiedImplodeCtrl.lpsPtr_)->numberOfPeriods()
          == (anImplodeCtrl.lpsPtr_)->numberOfPeriods());
  assert ((anImplodeCtrl.lpsPtr_)->numberOfPeriods() == 2);
}
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
#include <iostream.h>
d17 1
a17 1
  if (a != NULL)  {
d20 2
a21 2
    if ( algorithm->isA() == __LGFRIMPLODE )
      changed( NULL );
d30 1
a30 1
   assert (lpsPtr_ != NULL);
a34 8
// Return object class identifier
isAReturnType
LgFrImplode::isA()
const
{
   return id_;
}

d48 1
a48 1
  lpsPtr_(NULL),
a76 1
  assert( id_ == source.id_ );
d79 1
a79 1
  if (lpsPtr_!=NULL) lpsPtr_->addDependent( this );
d86 1
a86 1
  if (lpsPtr_!=NULL) lpsPtr_->removeDependent( this );
d109 1
a109 2
  assert (defaultImplodeCtrl.lpsPtr_ == NULL);
  assert (defaultImplodeCtrl.isA() == __LGFRIMPLODE );
a123 1
  assert (anImplodeCtrl.isA() == __LGFRIMPLODE );
a127 1
  assert (copiedImplodeCtrl.isA() == __LGFRIMPLODE );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 3
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <iostream>
d15 1
a15 1
  if (a != 0)  {
d18 2
a19 2
    if ( algorithm->GetAlgorithmType() == __LGFRIMPLODE )
      changed( 0 );
d28 1
a28 1
   assert (lpsPtr_ != 0);
d33 8
d54 1
a54 1
  lpsPtr_(0),
d83 1
d86 1
a86 1
  if (lpsPtr_!=0) lpsPtr_->addDependent( this );
d93 1
a93 1
  if (lpsPtr_!=0) lpsPtr_->removeDependent( this );
d116 2
a117 1
  assert (defaultImplodeCtrl.lpsPtr_ == 0);
d132 1
d137 1
@

