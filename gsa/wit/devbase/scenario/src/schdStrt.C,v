head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.45;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.35;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.40;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <scenario/src/algorthm.h>
#include <scenario/src/schdStrt.h>
#include <scenario/src/scenario.h>
#include <scenario/src/sortSchd.h>
#include <scenario/src/filtStrt.h>


// Populate Schedule with itemTimeVecs
// Do generic part of schedule population and invoke
// derived class method to do the class specific portions.
void
LgFrAttributeScheduleStrategy::populate(
   LgFrSortingScheduleFloat& schedule )
const
{
  // Remove any itemTimeVecs from schedule
  schedule.localClear();

  // Resize to estimated size.  This is done for better performance,
  // by avoiding resize calls when inserting itemTimeVecs in kernalOfPopulate.
  schedule.reserve( estimatedSize( schedule ) );

  // Do the inner part of populate, the derived class specific portion
  kernalOfPopulate( schedule );

  // Sort the schedule
  schedule.sort( 
     schedule.compareStrategy(), 
     schedule.isSortAscending() );

}

//estimatedSize
size_t
LgFrAttributeScheduleStrategy::estimatedSize(
   const LgFrSortingScheduleFloat& schedule )
const
{
  size_t retVal = schedule.capacity();

  return retVal;
}

// isMutable
bool
LgFrAttributeScheduleStrategy::isMutable()
const
{
 return false;
}

// validity
// Defaults to NOTKNOWN (which should usually be treated as if VALID)
// (Note that, on OS/2, UNKNOWN is changed to "7" by math.h or related
// functionality, which makes it a bad choice for a type.)
LgFrValidity
LgFrAttributeScheduleStrategy::validity( 
    const LgFrTimeVecFloat& proposedTimeVec)
const
{
  return NOTKNOWN;
}

// Print an error message and go on.  
// If *this is mutable, this method has to be overriden by a method
// in the subclass to propate a change in the sortingSchedule into the
// appropriate parts of the underlying system, e.g. workingImplosionProblem.
void
LgFrAttributeScheduleStrategy::update (
				       const LgFrItemTimeVecPairFloat & /* pair */ )
{
  std::cerr << "Warning: In " << __FILE__ << ", line " << __LINE__ << ",\n"
    << "trying to update an attribute that is not updatable" << std::endl;
}


// Return the setOfParts which belongs to a scenario
LgFrSetOfParts&
LgFrAttributeScheduleStrategy::setOfParts(
   LgFrScenario & scenario)
{
   return scenario.setOfParts();
}

// Return the setOfDemands which belongs to a scenario
LgFrSetOfDemands&
LgFrAttributeScheduleStrategy::setOfDemands(
   LgFrScenario & scenario)
{
   return scenario.setOfDemands();
}

// Return the WorkingImplosionProblem which belongs to a scenario
LgFrWorkingImplosionProblem&
LgFrAttributeScheduleStrategy::workingImplosionProblem(
   LgFrScenario & scenario)
{
   return scenario.workingImplosionProblem();
}

const LgFrWorkingImplosionProblem&
LgFrAttributeScheduleStrategy::workingImplosionProblem(
   const LgFrScenario & scenario)
const
{
   return scenario.workingImplosionProblem();
}

// Return the LastProblemSolved which belongs to a scenario
LgFrLastProblemSolved&
LgFrAttributeScheduleStrategy::lastProblemSolved(
   LgFrScenario & scenario)
{
   return scenario.lastProblemSolved();
}

const LgFrLastProblemSolved&
LgFrAttributeScheduleStrategy::lastProblemSolved(
   const LgFrScenario & scenario)
const
{
   return scenario.lastProblemSolved();
}


// Return the Implode which belongs to a scenario
LgFrImplode&
LgFrAttributeScheduleStrategy::implode(
   LgFrScenario & scenario)
{
   return scenario.implode();
}


// Return the Explode which belongs to a scenario
LgFrExplode&
LgFrAttributeScheduleStrategy::explode(
   LgFrScenario & scenario)
{
   return scenario.explode();
}

// Return the UserInputModification which belongs to a scenario
LgFrUserInputModification&
LgFrAttributeScheduleStrategy::userInputModification(
   LgFrScenario & scenario)
{
   return scenario.userInputModification();
}

// Return the focussed shortage schedule which belongs to a scenario
LgFrFocussedShortageScheduleControl&
LgFrAttributeScheduleStrategy::focussedShortageScheduleControl(
   LgFrScenario & scenario)
{
   return scenario.focussedShortageScheduleControl();
}


// Assignment operator
LgFrAttributeScheduleStrategy &
LgFrAttributeScheduleStrategy::operator=(
			  const LgFrAttributeScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self

     (this->LgFrSubscription::operator= ) (rhs);
     if ( algorithmPtr_ != 0 ) algorithmPtr_->removeDependent( this );
     algorithmPtr_ = rhs.algorithmPtr_;
     if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );

  }
  return *this;
}


// Copy constructor
LgFrAttributeScheduleStrategy::
   LgFrAttributeScheduleStrategy (
      const LgFrAttributeScheduleStrategy & source)
:  
   LgFrSubscription(),   
   algorithmPtr_( source.algorithmPtr_ )
{
  if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
}

// Copy constructor associated with a new Scenario
LgFrAttributeScheduleStrategy::
   LgFrAttributeScheduleStrategy (
      const LgFrAttributeScheduleStrategy & source,
      LgFrScenario &  newScenario )
:  
   LgFrSubscription(),
   algorithmPtr_( 0 )
{
  if ( source.algorithmPtr_ != 0 ) {
    algorithmPtr_ = source.algorithmPtr_->counterPart( newScenario );
    algorithmPtr_->addDependent( this );
  }
}

// Constructor
LgFrAttributeScheduleStrategy::
   LgFrAttributeScheduleStrategy(
      LgFrAlgorithm * algorithmPtr )
:  
   LgFrSubscription(),
   algorithmPtr_(algorithmPtr)
{
   if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
}


// Destructor
LgFrAttributeScheduleStrategy::
   ~LgFrAttributeScheduleStrategy ()
{
   if ( algorithmPtr_ != 0 ) algorithmPtr_->removeDependent( this );
}
@


1.1
log
@Initial revision
@
text
@d1 3
d24 1
a24 1
  schedule.resize( estimatedSize( schedule ) );
d48 1
a48 1
RWBoolean
d52 1
a52 1
 return FALSE;
d75 2
a76 3
  cerr << "Warning: In " << __FILE__ << ", line " << __LINE__ << ",\n"
    << "trying to update an attribute that is not updatable\n"
      << "Attribute type number is " << this->isA() << endl;
d171 1
a171 1
     if ( algorithmPtr_ != NULL ) algorithmPtr_->removeDependent( this );
d173 1
a173 1
     if ( algorithmPtr_ != NULL ) algorithmPtr_->addDependent( this );
d188 1
a188 1
  if ( algorithmPtr_ != NULL ) algorithmPtr_->addDependent( this );
d198 1
a198 1
   algorithmPtr_( NULL )
d200 1
a200 1
  if ( source.algorithmPtr_ != NULL ) {
d214 1
a214 1
   if ( algorithmPtr_ != NULL ) algorithmPtr_->addDependent( this );
d222 1
a222 1
   if ( algorithmPtr_ != NULL ) algorithmPtr_->removeDependent( this );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 3
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
d21 1
a21 1
  schedule.reserve( estimatedSize( schedule ) );
d45 1
a45 1
bool
d49 1
a49 1
 return false;
d73 2
a74 1
    << "trying to update an attribute that is not updatable" << endl;
d169 1
a169 1
     if ( algorithmPtr_ != 0 ) algorithmPtr_->removeDependent( this );
d171 1
a171 1
     if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
d186 1
a186 1
  if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
d196 1
a196 1
   algorithmPtr_( 0 )
d198 1
a198 1
  if ( source.algorithmPtr_ != 0 ) {
d212 1
a212 1
   if ( algorithmPtr_ != 0 ) algorithmPtr_->addDependent( this );
d220 1
a220 1
   if ( algorithmPtr_ != 0 ) algorithmPtr_->removeDependent( this );
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d75 2
a76 2
  std::cerr << "Warning: In " << __FILE__ << ", line " << __LINE__ << ",\n"
    << "trying to update an attribute that is not updatable" << std::endl;
@


