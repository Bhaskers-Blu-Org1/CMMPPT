head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.46;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.48;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.48;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.36;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.39;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <assert.h>
#include <iostream>


#include <scenario/src/sOfParts.h>
#include <scenario/src/machdep.h>
#include <scenario/src/hashUtil.h>

using std::cout;
using std::cerr;

// Return a part with name partName.
// If the part is not in the SetOfParts, then insert it.
LgFrPart
LgFrSetOfParts::newPart( const std::string& partName )
{
  const LgFrPart * itemPtr = 0;
  itemPtr = this->findValue(partName);
  if (itemPtr == 0) {
    LgFrPart item( partName );
    insert( item );
    itemPtr = &operator[]( size() - 1 );
  }
  return *itemPtr;
}

// Return true if part is contained in set
bool
LgFrSetOfParts::contains( const LgFrPart part )
const
{
  NameItemDictionary::const_iterator it = nameToItem_.find( part.name() );
  return ( it != nameToItem_.end() );
}


// Find part from partName
const LgFrPart*
LgFrSetOfParts::findValue (
			   const std::string& partName
			   )
     const
{
  NameItemDictionary::const_iterator it = nameToItem_.find( partName );
  if( it != nameToItem_.end() )
  {
      NameItemPair pr = *it;
    const LgFrPart * partPtr1 = &(*this)[0];
    return (*it).second;
  }
  else
    return 0;
    
//    const std::string itemName (partName);
//  const LgFrPart * retVal = ((LgFrPart *) nameToItem_.findValue (&itemName));
//  return retVal;
}


void
LgFrSetOfParts::dictionaryInsert (const size_t i)
{
  LgFrPart * partPtr = &(*this)[i];

  nameToItem_.insert( NameItemPair( partPtr->uniqueName(), partPtr ) );
  
}


//-----------------------------------------------------------------
//
// entries
//
//-----------------------------------------------------------------

// Number of parts currently in set
size_t
LgFrSetOfPartsWithMovableParts::size()
const
{
  return partVec_.size();
}

// Number of parts currently in set
size_t
LgFrSetOfPartsWithUnmovableParts::size()
const
{
  return partPtrVec_.size();
}
//-----------------------------------------------------------------
//
// operator[]
//
//-----------------------------------------------------------------

// Return the i'th part in the set
const LgFrPart &
LgFrSetOfParts::operator[]
  ( size_t i )
const
{
  // OK to cast away const'ness of this, since returning a const
  // reference
  LgFrSetOfParts* const nonConstThis = (LgFrSetOfParts* const) this;

  return (*nonConstThis)[ i ];
}

// Return the i'th part in the set
LgFrPart &
LgFrSetOfPartsWithMovableParts::operator[]
  ( size_t i )
{
  return partVec_[i];
}


// Return the i'th part in the set
LgFrPart &
LgFrSetOfPartsWithUnmovableParts::operator[]
  ( size_t i )
{
  return *( partPtrVec_[i] );
}


//-----------------------------------------------------------------
//
// insert, sequencedSetInsert
//
//-----------------------------------------------------------------


// Add new part item to the end of the collection
void
LgFrSetOfParts::insert (const LgFrPart item)
{
  assert( !contains( item ) );
  if ( contains( item ) ) return;
  else 
  {
    // Put it in the sequenced set
    bool setMoved = sequencedSetInsert(item);
    
    this->dictionaryInsert (  size() - 1  );
    
    if( setMoved )
        refreshDictionary();
   
  }
}

void LgFrSetOfPartsWithMovableParts::refreshDictionary()
{
  clearDictionary();
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < size();  ++j)
    this->dictionaryInsert(j);
}


void LgFrSetOfPartsWithUnmovableParts::refreshDictionary()
{
    // Nothing to refresh here since the parts never move
}



// Add new part item to the end of the sequenced set
bool
LgFrSetOfPartsWithMovableParts::sequencedSetInsert (const LgFrPart item)
{
    bool moved = partVec_.capacity() == partVec_.size();
    partVec_.push_back(item);

    return moved;
}


// Add new part item to the end of the sequenced set
bool
LgFrSetOfPartsWithUnmovableParts::sequencedSetInsert (const LgFrPart item)
{
  LgFrPart * partPtr = new LgFrPart( item );

  partPtrVec_.push_back(partPtr);

  return false; // The addresses of the LgFrSetOfPartsWithUnmovableParts class never change by definition
}

//-----------------------------------------------------------------
//
// insertAt, sequencedSetInsertAt
//
//-----------------------------------------------------------------


// Add new part item to the collection at position index.
// Everything afterwards
// is shifted to a higher index.
void
LgFrSetOfParts::insertAt (const size_t index, 
			  const LgFrPart item)
{
  assert( !contains( item ) );
  // Test for valid index
  assert (index < size());
  // Put it in the sequenced set
  sequencedSetInsertAt(index, item);

  this->dictionaryInsert (  index  );
    
  refreshDictionary();
}

// Add new part item to the sequenced set at position index.
// Everything afterwards is shifted to a higher index.
bool
LgFrSetOfPartsWithMovableParts::sequencedSetInsertAt (const size_t index, const LgFrPart item)
{
  bool moved = partVec_.capacity() == partVec_.size();
  partVec_.insert(partVec_.begin()+index, item);
  // This will tell to regenerate the dictionary to point to the parts in their new positions
  return moved;
}

// Add new part item to the sequenced set at position index.
// Everything afterwards is shifted to a higher index.
bool
LgFrSetOfPartsWithUnmovableParts::sequencedSetInsertAt (const size_t index, 
			  const LgFrPart item)
{
  LgFrPart * partPtr = new LgFrPart( item );

  partPtrVec_.insert(partPtrVec_.begin()+index, partPtr);

  return true;
}

//-----------------------------------------------------------------
//
// resize, sequencedSetResize
//
//-----------------------------------------------------------------

// Change the size of the set

void
LgFrSetOfParts::reserve (const size_t newCapacity)
{
  const size_t nEntries ( size() );
  if (newCapacity > nEntries) {
    // Change the size of the vector
    this -> sequencedSetReserve(newCapacity);

    minBuckets_ = newCapacity;
  }
}

void
LgFrSetOfPartsWithMovableParts::reserve (const size_t newCapacity)
{
  const size_t nEntries ( size() );
  if (newCapacity > nEntries) {
    // Clear dictionary entries so resize will not be burdened with them
    this -> clearDictionary();
    // Perform base class resizing
    LgFrSetOfParts::reserve( newCapacity );
    // The parts were copied so regenerate the dictionary to point
    // to their new locations
    int j = 0; // Pulled out of the for below by RW2STL
    for (j = 0;  j < nEntries;  ++j)
      this->dictionaryInsert(j);
  }
}

void
LgFrSetOfPartsWithMovableParts::sequencedSetReserve (const size_t newCapacity)
{
  partVec_.reserve(newCapacity);
}

void
LgFrSetOfPartsWithUnmovableParts::sequencedSetReserve (const size_t newCapacity)
{
  partPtrVec_.reserve(newCapacity);
}

#if 0
//-----------------------------------------------------------------
//
// dictionaryInsert
//
//-----------------------------------------------------------------


void
LgFrSetOfPartsWithUnmovableParts::dictionaryInsert (const size_t i)
{
  LgFrPart * partPtr = partPtrVec_[i];
  
  std::string* namePtr =
    new std::string (partPtr->uniqueName());

    nameToItem_.insertKeyAndValue (namePtr, partPtr);

}
#endif
//-----------------------------------------------------------------
//
// operator=
//
//-----------------------------------------------------------------

LgFrSetOfParts &
LgFrSetOfParts::operator=(
			  const LgFrSetOfParts& rhs)
{
  if (this != &rhs) {		// Check for assignment to self  

    size_t newSize = this->size();
    size_t newCapacity = rhs.minBuckets_;
    assert (newSize == rhs.size());      // Test assignment operator result

    this -> clearDictionary();

    int j = 0; // Pulled out of the for below by RW2STL
    for (j = 0;  j < newSize;  ++j) {
      this->dictionaryInsert(j);
    }
  }
  return *this;
}

LgFrSetOfPartsWithMovableParts &
LgFrSetOfPartsWithMovableParts::operator=(
			  const LgFrSetOfPartsWithMovableParts& rhs)
{
  if (this != &rhs) {		// Check for assignment to self

    
    // Clear the vector contents and change its size
    partVec_.clear();
    partVec_.reserve( rhs.size() );
    const LgFrSetOfParts & rhsSop = rhs;
    int j = 0; // Pulled out of the for below by RW2STL
    for (j = 0;  j < rhs.size();  ++j) {
      partVec_.push_back( rhsSop[j] );
    }          

    // invoking base class operator= method must follow the setting
    // up of the sequenced set partVec_
    (this->LgFrSetOfParts::operator= ) (rhs);
  }
  return *this;
}


LgFrSetOfPartsWithUnmovableParts &
LgFrSetOfPartsWithUnmovableParts::operator=(
			  const LgFrSetOfPartsWithUnmovableParts& rhs)
{
  if (this != &rhs) {		// Check for assignment to self

    
    // Clear the vector contents and change its size
    int j = 0; // Pulled out of the for below by RW2STL
    for ( j=0; j < size(); ++j ) delete partPtrVec_[j];
    partPtrVec_.clear();
    partPtrVec_.reserve( rhs.size() );
    const LgFrSetOfParts & rhsSop = rhs;
    for (j = 0;  j < rhs.size();  ++j) {
      insert( rhsSop[j] );
    }          

    // invoking base class operator= method must follow the setting
    // up of the sequenced set partPtrVec_
    (this->LgFrSetOfParts::operator= ) (rhs);
  }
  return *this;
}

//-----------------------------------------------------------------
//
// Copy Constructor
//
//-----------------------------------------------------------------

// Copy constructor
LgFrSetOfParts::LgFrSetOfParts (
  const LgFrSetOfParts & source)
: 
  minBuckets_ (source.minBuckets_)//,
  //nameToItem_ (minBuckets_)
{
  // Nothing to do here 
}

// Copy constructor
LgFrSetOfPartsWithMovableParts::LgFrSetOfPartsWithMovableParts (
  const LgFrSetOfPartsWithMovableParts & source)
:
  LgFrSetOfParts( source ),
  partVec_    (source.partVec_)
  
{
  const size_t newSize = source.size();
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < newSize;  ++j) {
    this->dictionaryInsert(j);
  }
  
}

// Copy constructor
LgFrSetOfPartsWithUnmovableParts::LgFrSetOfPartsWithUnmovableParts (
  const LgFrSetOfPartsWithUnmovableParts & source)
:
  LgFrSetOfParts( source ),
  partPtrVec_    (source.partPtrVec_)
  
{
  // partPtrVec points to parts which belong to source.
  // Make copies which belong to *this and update partPtrVec_
  // to point to the copies
  const size_t newSize = source.size();
  partPtrVec_.clear();
  const LgFrSetOfParts & sourceSop = source;
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < newSize;  ++j) insert( sourceSop[j] );
  
}

//-----------------------------------------------------------------
//
// Constructor with specified initial size
//
//-----------------------------------------------------------------

// Constructor for a set expected to have up to n parts
LgFrSetOfParts::LgFrSetOfParts (const size_t n)
:
  minBuckets_ (goodSize (n))//,
  //nameToItem_ (minBuckets_)
{
  // Nothing to do in here
}

// Constructor for a set expected to have up to n parts
LgFrSetOfPartsWithMovableParts::LgFrSetOfPartsWithMovableParts (const size_t n)
:
  LgFrSetOfParts( n )//,
  //partVec_ (   goodSize (n)   ) 	        // Not all new's do well
						// with 0-length arrays
{
  // Nothing to do in here
}

// Constructor for a set expected to have up to n parts
LgFrSetOfPartsWithUnmovableParts::LgFrSetOfPartsWithUnmovableParts(
 const size_t n )
:
  LgFrSetOfParts( n )//,
  //partPtrVec_ (   goodSize (n)   ) 	        // Not all new's do well
						// with 0-length arrays
{
      partPtrVec_.reserve( n );
  // Nothing to do in here
}

//---------------------------------------------------------------------------
//
// Destructor
//
//---------------------------------------------------------------------------

// Destructor
LgFrSetOfParts::~LgFrSetOfParts()
{
  clearDictionary();
}

// Destructor
LgFrSetOfPartsWithMovableParts::~LgFrSetOfPartsWithMovableParts()
{
  // Nothing to do here

}

// Destructor
LgFrSetOfPartsWithUnmovableParts::~LgFrSetOfPartsWithUnmovableParts()
{
  size_t i = 0; // Pulled out of the for below by RW2STL
  for( i=0; i<size(); i++ ) delete partPtrVec_[i];
}

// Remove the entries in the dictionary and free the keys
void
LgFrSetOfParts::clearDictionary()
{
    nameToItem_.clear();
}

//-----------------------------------------------------------------
//
// Xcdb methods
//
//-----------------------------------------------------------------


// Display for xcdb
void 
LgFrSetOfParts::xcdb() const
{
  cerr << "\n";
  cerr << "Set of parts:\tminBuckets_ = " << minBuckets_ << "\n";
  cerr << "\t\tsize() = " << this->size() << "\n";
  int i = 0; // Pulled out of the for below by RW2STL
  for (i = 0; i < this->size(); ++i)
    cerr << i << ": " << (*this)[i].printingName() << "\n";
  cerr << std::endl;
}

// Display for xcdb
void 
LgFrSetOfParts::xcdb()
{
  (  (const LgFrSetOfParts*) this  )     -> xcdb();
}

// Display for xcdb
void 
LgFrSetOfPartsWithMovableParts::xcdb() const
{
  (  (const LgFrSetOfParts*) this  )     -> xcdb();
}

// Display for xcdb
void 
LgFrSetOfPartsWithMovableParts::xcdb()
{
  (  (const LgFrSetOfParts*) this  )     -> xcdb();
}

// Display for xcdb
void 
LgFrSetOfPartsWithUnmovableParts::xcdb() const
{
  (  (const LgFrSetOfParts*) this  )     -> xcdb();
}

// Display for xcdb
void 
LgFrSetOfPartsWithUnmovableParts::xcdb()
{
  (  (const LgFrSetOfParts*) this  )     -> xcdb();
}




#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrSetOfPartsWithMovableParts methods.
void
LgFrSetOfPartsWithMovableParts::test()
{
  // Make some parts for the test
  int partIndex = 0;
  const char* n3char = "part3";
  LgFrPart p1( "part1");
  LgFrPart p2( "part2");
  LgFrPart p3( "part3");
  LgFrPart p4( "part4");

  // Test the insertion methods
  LgFrSetOfPartsWithMovableParts sop (2);	// Make it a little small
  				// to test automatic resizing
  sop.insert(p2);
  const LgFrPart* pPart2 = sop.findValue ( "part2" );
  pPart2 = sop.findValue ( "part2" );

  sop.insert(p3);
  pPart2 = sop.findValue ( "part2" );
  sop.insertAt(0, p1);
  assert (3 == sop.size());
  assert (sop[0].name() == "part1");
  assert (sop[2].name() == "part3");
  assert (sop[1].name() == "part2");

  // Test the assignment operator and the copy constructor
  LgFrSetOfPartsWithMovableParts sop1 (1);	// Make it a little small
  				// to test resizing at assignment time
  sop.insert(p4);		// Give it something that should go away
  sop1 = sop;
  LgFrSetOfPartsWithMovableParts sop2 (sop);
  pPart2 = sop.findValue ( "part2" );

  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < sop.size(); i++) {
    // Test result of assignment
    assert (sop1[i] == sop[i]);
    // Test result of copy
    assert (sop2[i] == sop[i]);
    // Print the contents of the OrderedVector part of sop
    /*
    sop[i]->print();
    cout << endl;
    */
  }

  assert (sop[0].name() == "part1");
  assert (sop[1].name() == "part2");
  assert (sop[2].name() == "part3");

  // Test newPart method
  LgFrPart newPart = sop.newPart( "newPart" );
  int sopEntries( sop.size() );
  assert( newPart == sop[ sopEntries - 1 ] );
  sop.newPart( "newPart" );  // Test inserting a 2nd time

  assert (sop[0].name() == "part1");
  assert (sop[1].name() == "part2");
  assert (sop[2].name() == "part3");

  pPart2 = sop.findValue ( "part2" );

  sop.newPart( "part2" ); // Test inserting something that is not the
	                     // last thing in the set a second time
  assert( sopEntries == sop.size() );
  assert( newPart == sop[ sopEntries - 1 ] );

  // Test contains method
  assert( sop.contains( p4 ) );
  LgFrPart oddPart( "OddPart");
  assert( !sop.contains( oddPart ) );

  // Test the dictionary part
  const LgFrPart * foundPart = sop.findValue (n3char);
  assert (*foundPart == p3);
  foundPart = sop1.findValue (n3char);
  assert (*foundPart == p3);

  // Test resize
  //LgFrSetOfPartsWithMovableParts sop3(0);
  //sop3.resize(3);
  //assert (sop3.size() == 0);
  
}


// test LgFrSetOfPartsWithUnmovableParts methods.
void
LgFrSetOfPartsWithUnmovableParts::test()
{
  // Make some parts for the test
  int partIndex = 0;
  const char* n3char = "part3";
  LgFrPart p1( "part1");
  LgFrPart p2( "part2");
  LgFrPart p3( "part3");
  LgFrPart p4( "part4");

  // Test the insertion methods
  {
  LgFrSetOfPartsWithUnmovableParts sop (2);	// Make it a little small
  				// to test automatic resizing
  sop.insert(p2);
  sop.insert(p3);
  sop.insertAt(0, p1);
  assert (3 == sop.size());
  assert (sop[0].name() == "part1");
  assert (sop[2].name() == "part3");
  assert (sop[1].name() == "part2");

  // Test the assignment operator and the copy constructor
  {
  LgFrSetOfPartsWithUnmovableParts sop1 (1);	// Make it a little small
  				// to test resizing at assignment time
  sop.insert(p4);		// Give it something that should go away
  sop1 = sop;
  {
  LgFrSetOfPartsWithUnmovableParts sop2 (sop);

  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < sop.size(); i++) {
    // Test result of assignment
    assert (sop1[i] == sop[i]);
    // Test result of copy
    assert (sop2[i] == sop[i]);
    // Print the contents of the OrderedVector part of sop
    /*
    sop[i]->print();
    cout << endl;
    */
  }

  // Test newPart method
  LgFrPart newPart = sop.newPart( "newPart" );
  int sopEntries( sop.size() );
  assert( newPart == sop[ sopEntries - 1 ] );
  sop.newPart( "newPart" );  // Test inserting a 2nd time
  sop.newPart( "part2" // Test inserting something that is not the
	       ); // last thing in the set a second time
  assert( sopEntries == sop.size() );
  assert( newPart == sop[ sopEntries - 1 ] );

  // Test contains method
  assert( sop.contains( p4 ) );
  LgFrPart oddPart( "OddPart");
  assert( !sop.contains( oddPart ) );

  // Test the dictionary part
  const LgFrPart * foundPart = sop.findValue (n3char);
  assert (*foundPart == p3);
  foundPart = sop1.findValue (n3char);
  assert (*foundPart == p3);


  
  // Test resize
  {
  //LgFrSetOfPartsWithUnmovableParts sop3(0);
  //sop3.resize(3);
  //assert (sop3.size() == 0);

  
  // Test that parts do not move when resizing
  {
    const LgFrPart * const partPtr = &sop[1];
    assert( partPtr == sop.findValue("part2") );
    sop.reserve( sop.size() * 25 );
    assert( partPtr == &sop[1] );
    assert( partPtr == sop.findValue("part2") );
  }

    
  }  // sop3 destructor invoked
  }  // sop2 destructor invoked
  }  // sop1 destructor invoked
  }  // sop  destructor invoked
}
@


1.1
log
@Initial revision
@
text
@d1 4
d6 1
a7 1
#include <rw/rstream.h>
d13 2
a14 2


d19 1
a19 1
LgFrSetOfParts::newPart( const RWCString partName )
d21 1
a21 1
  const LgFrPart * itemPtr;
d23 1
a23 1
  if (itemPtr == NULL) {
d26 1
a26 1
    itemPtr = &operator[]( entries() - 1 );
d32 1
a32 1
RWBoolean
d36 2
a37 2
  const RWCollectableString itemName ( part.name() );
  return nameToItem_.contains( &itemName );
a40 13
// Resize if the amount of space allocated for the hash
// table is below generally
// accepted guidelines for good performance.  (Always doubling the size insures
// that only log(n) resizes will be done when inserting n parts.)
void
LgFrSetOfParts::resizeIfAboveGuidelines()
{
  size_t numberOfEntries = entries();
  if ( ( (float) numberOfEntries )   /   minBuckets_
       >=  goodHashTableFullness  )
     this -> resize (minBuckets_*2);
}

d44 1
a44 1
			   const RWCString partName
d48 13
a60 3
  const RWCollectableString itemName (partName);
  const LgFrPart * retVal = ((LgFrPart *) nameToItem_.findValue (&itemName));
  return retVal;
d65 1
a65 1
LgFrSetOfParts::hashDictionaryInsert (const size_t i)
d67 1
a67 1
  const LgFrPart * constPartPtr = &(*this)[i];
d69 1
a69 3
  // OK to cast away constness. Part is not being altered and
  // insertKeyAndValue requires non-const partPtr
  LgFrPart * partPtr = (LgFrPart *)constPartPtr;
d71 1
a71 2
  RWCollectableString* namePtr =
    new RWCollectableString (partPtr->uniqueName());
a72 5
  RWCollectable* returnCode =
    nameToItem_.insertKeyAndValue (namePtr, partPtr);

  assert (returnCode == namePtr);
}
d82 1
a82 1
LgFrSetOfPartsWithMovableParts::entries()
d85 1
a85 1
  return partVec_.entries();
d90 1
a90 1
LgFrSetOfPartsWithUnmovableParts::entries()
d93 1
a93 1
  return partPtrVec_.entries();
d145 2
a146 3
  else {
    // Resize if apropos
    this -> resizeIfAboveGuidelines();
d148 7
a154 4
    this -> sequencedSetInsert(item);
    // Put it into the hash dictionary
    int index = entries() - 1;
    this->hashDictionaryInsert (  index  );
d158 15
d175 1
a175 1
void
d178 4
a181 1
  partVec_.insert(item);
d186 1
a186 1
void
d190 4
a193 1
  partPtrVec_.insert(partPtr);
d212 1
a212 3
  assert (index < entries());
  // Resize if apropos
  this -> resizeIfAboveGuidelines();
d214 5
a218 1
  this -> sequencedSetInsertAt(index, item);
d223 2
a224 3
void
LgFrSetOfPartsWithMovableParts::sequencedSetInsertAt (const size_t index, 
			  const LgFrPart item)
d226 4
a229 6
  partVec_.insertAt(index, item);
  // Regenerate the hash table to point to the parts in their new positions
  this -> clearDictionaryAndFreeKeys();
  for (int j = 0;  j < entries();  ++j) {
    this->hashDictionaryInsert(j);
  }
d234 1
a234 1
void
d239 4
a242 1
  partPtrVec_.insertAt(index, partPtr);
d254 1
a254 1
LgFrSetOfParts::resize (const size_t newCapacity)
d256 1
a256 1
  const size_t nEntries ( entries() );
d259 2
a260 3
    this -> sequencedSetResize(newCapacity);
    // Change the size of the hash table
    nameToItem_.resize( newCapacity );
d266 1
a266 1
LgFrSetOfPartsWithMovableParts::resize (const size_t newCapacity)
d268 1
a268 1
  const size_t nEntries ( entries() );
d270 2
a271 2
    // Clear hash table entries so resize will not be burdened with them
    this -> clearDictionaryAndFreeKeys();
d273 2
a274 2
    LgFrSetOfParts::resize( newCapacity );
    // The parts were copied so regenerate the hash table to point
d276 3
a278 2
    for (int j = 0;  j < nEntries;  ++j)
      this->hashDictionaryInsert(j);
d283 1
a283 1
LgFrSetOfPartsWithMovableParts::sequencedSetResize (const size_t newCapacity)
d285 1
a285 1
  partVec_.resize(newCapacity);
d289 1
a289 1
LgFrSetOfPartsWithUnmovableParts::sequencedSetResize (const size_t newCapacity)
d291 1
a291 1
  partPtrVec_.resize(newCapacity);
d297 1
a297 1
// hashDictionaryInsert
d303 1
a303 1
LgFrSetOfPartsWithUnmovableParts::hashDictionaryInsert (const size_t i)
d307 2
a308 2
  RWCollectableString* namePtr =
    new RWCollectableString (partPtr->uniqueName());
a309 1
  RWCollectable* returnCode =
a311 1
  assert (returnCode == namePtr);
d326 1
a326 1
    size_t newSize = this->entries();
d328 7
a334 7
    assert (newSize == rhs.entries());      // Test assignment operator result
    // Make *this' hash table the same size as rhs'
    // and insert the parts into it
    this -> clearDictionaryAndFreeKeys();
    nameToItem_.resize(newCapacity);
    for (int j = 0;  j < newSize;  ++j) {
      this->hashDictionaryInsert(j);
d349 1
a349 1
    partVec_.resize( rhs.entries() );
d351 3
a353 2
    for (int j = 0;  j < rhs.entries();  ++j) {
      partVec_.insert( rhsSop[j] );
d372 2
a373 1
    for ( int j=0; j < entries(); ++j ) delete partPtrVec_[j];
d375 1
a375 1
    partPtrVec_.resize( rhs.entries() );
d377 1
a377 1
    for (j = 0;  j < rhs.entries();  ++j) {
d398 2
a399 2
  minBuckets_ (source.minBuckets_),
  nameToItem_ (minBuckets_)
d412 4
a415 3
  const size_t newSize = source.entries();
  for (int j = 0;  j < newSize;  ++j) {
    this->hashDictionaryInsert(j);
d431 1
a431 1
  const size_t newSize = source.entries();
d434 2
a435 1
  for (int j = 0;  j < newSize;  ++j) insert( sourceSop[j] );
d448 2
a449 2
  minBuckets_ (goodSize (n)),
  nameToItem_ (minBuckets_)
d457 2
a458 2
  LgFrSetOfParts( n ),
  partVec_ (   goodSize (n)   ) 	        // Not all new's do well
d468 2
a469 2
  LgFrSetOfParts( n ),
  partPtrVec_ (   goodSize (n)   ) 	        // Not all new's do well
d472 1
d485 1
a485 1
  clearDictionaryAndFreeKeys();
d498 2
a499 1
  for( size_t i=0; i<entries(); i++ ) delete partPtrVec_[i];
d502 1
a502 1
// Remove the entries in the hash table and free the keys
d504 1
a504 1
LgFrSetOfParts::clearDictionaryAndFreeKeys()
d506 1
a506 5
  RWHashDictionaryIterator iter (nameToItem_);
  while (iter()) {
    RWCollectable *namePtr = iter.remove();
    delete namePtr;
  }
d522 3
a524 2
  cerr << "\t\tentries() = " << this->entries() << "\n";
  for (int i = 0; i < this->entries(); ++i)
d526 1
a526 1
  cerr << endl;
d586 3
d590 1
d592 1
a592 1
  assert (3 == sop.entries());
d603 1
d605 2
a606 1
  for ( size_t i = 0; i < sop.entries(); i++) {
d618 4
d624 1
a624 1
  int sopEntries( sop.entries() );
d627 10
a636 3
  sop.newPart( "part2" // Test inserting something that is not the
	       ); // last thing in the set a second time
  assert( sopEntries == sop.entries() );
d644 1
a644 1
  // Test the hash table part
d651 3
a653 3
  LgFrSetOfPartsWithMovableParts sop3(0);
  sop3.resize(3);
  assert (sop3.entries() == 0);
d677 1
a677 1
  assert (3 == sop.entries());
d691 2
a692 1
  for ( size_t i = 0; i < sop.entries(); i++) {
d706 1
a706 1
  int sopEntries( sop.entries() );
d711 1
a711 1
  assert( sopEntries == sop.entries() );
d719 1
a719 1
  // Test the hash table part
d729 3
a731 3
  LgFrSetOfPartsWithUnmovableParts sop3(0);
  sop3.resize(3);
  assert (sop3.entries() == 0);
d738 1
a738 1
    sop.resize( sop.entries() * 25 );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
a1 1
#include <ostream.h>
d3 1
d15 1
a15 1
LgFrSetOfParts::newPart( const std::string& partName )
d17 1
a17 1
  const LgFrPart * itemPtr = 0;
d19 1
a19 1
  if (itemPtr == 0) {
d22 1
a22 1
    itemPtr = &operator[]( size() - 1 );
d28 1
a28 1
bool
d32 2
a33 2
  NameItemDictionary::const_iterator it = nameToItem_.find( part.name() );
  return ( it != nameToItem_.end() );
d37 13
d53 1
a53 1
			   const std::string& partName
d57 3
a59 13
  NameItemDictionary::const_iterator it = nameToItem_.find( partName );
  if( it != nameToItem_.end() )
  {
      NameItemPair pr = *it;
    const LgFrPart * partPtr1 = &(*this)[0];
    return (*it).second;
  }
  else
    return 0;
    
//    const std::string itemName (partName);
//  const LgFrPart * retVal = ((LgFrPart *) nameToItem_.findValue (&itemName));
//  return retVal;
d64 1
a64 1
LgFrSetOfParts::dictionaryInsert (const size_t i)
d66 1
a66 1
  LgFrPart * partPtr = &(*this)[i];
d68 3
a70 1
  nameToItem_.insert( NameItemPair( partPtr->uniqueName(), partPtr ) );
d72 7
a80 1

d89 1
a89 1
LgFrSetOfPartsWithMovableParts::size()
d92 1
a92 1
  return partVec_.size();
d97 1
a97 1
LgFrSetOfPartsWithUnmovableParts::size()
d100 1
a100 1
  return partPtrVec_.size();
d152 3
a154 2
  else 
  {
d156 4
a159 7
    bool setMoved = sequencedSetInsert(item);
    
    this->dictionaryInsert (  size() - 1  );
    
    if( setMoved )
        refreshDictionary();
   
a162 15
void LgFrSetOfPartsWithMovableParts::refreshDictionary()
{
  clearDictionary();
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < size();  ++j)
    this->dictionaryInsert(j);
}


void LgFrSetOfPartsWithUnmovableParts::refreshDictionary()
{
    // Nothing to refresh here since the parts never move
}


d165 1
a165 1
bool
d168 1
a168 4
    bool moved = partVec_.capacity() == partVec_.size();
    partVec_.push_back(item);

    return moved;
d173 1
a173 1
bool
d177 1
a177 4

  partPtrVec_.push_back(partPtr);

  return false; // The addresses of the LgFrSetOfPartsWithUnmovableParts class never change by definition
d196 3
a198 1
  assert (index < size());
d200 1
a200 5
  sequencedSetInsertAt(index, item);

  this->dictionaryInsert (  index  );
    
  refreshDictionary();
d205 3
a207 2
bool
LgFrSetOfPartsWithMovableParts::sequencedSetInsertAt (const size_t index, const LgFrPart item)
d209 6
a214 4
  bool moved = partVec_.capacity() == partVec_.size();
  partVec_.insert(partVec_.begin()+index, item);
  // This will tell to regenerate the dictionary to point to the parts in their new positions
  return moved;
d219 1
a219 1
bool
d224 1
a224 4

  partPtrVec_.insert(partPtrVec_.begin()+index, partPtr);

  return true;
d236 1
a236 1
LgFrSetOfParts::reserve (const size_t newCapacity)
d238 1
a238 1
  const size_t nEntries ( size() );
d241 3
a243 2
    this -> sequencedSetReserve(newCapacity);

d249 1
a249 1
LgFrSetOfPartsWithMovableParts::reserve (const size_t newCapacity)
d251 1
a251 1
  const size_t nEntries ( size() );
d253 2
a254 2
    // Clear dictionary entries so resize will not be burdened with them
    this -> clearDictionary();
d256 2
a257 2
    LgFrSetOfParts::reserve( newCapacity );
    // The parts were copied so regenerate the dictionary to point
d259 2
a260 3
    int j = 0; // Pulled out of the for below by RW2STL
    for (j = 0;  j < nEntries;  ++j)
      this->dictionaryInsert(j);
d265 1
a265 1
LgFrSetOfPartsWithMovableParts::sequencedSetReserve (const size_t newCapacity)
d267 1
a267 1
  partVec_.reserve(newCapacity);
d271 1
a271 1
LgFrSetOfPartsWithUnmovableParts::sequencedSetReserve (const size_t newCapacity)
d273 1
a273 1
  partPtrVec_.reserve(newCapacity);
d279 1
a279 1
// dictionaryInsert
d285 1
a285 1
LgFrSetOfPartsWithUnmovableParts::dictionaryInsert (const size_t i)
d289 2
a290 2
  std::string* namePtr =
    new std::string (partPtr->uniqueName());
d292 1
d295 1
d310 1
a310 1
    size_t newSize = this->size();
d312 7
a318 7
    assert (newSize == rhs.size());      // Test assignment operator result

    this -> clearDictionary();

    int j = 0; // Pulled out of the for below by RW2STL
    for (j = 0;  j < newSize;  ++j) {
      this->dictionaryInsert(j);
d333 1
a333 1
    partVec_.reserve( rhs.size() );
d335 2
a336 3
    int j = 0; // Pulled out of the for below by RW2STL
    for (j = 0;  j < rhs.size();  ++j) {
      partVec_.push_back( rhsSop[j] );
d355 1
a355 2
    int j = 0; // Pulled out of the for below by RW2STL
    for ( j=0; j < size(); ++j ) delete partPtrVec_[j];
d357 1
a357 1
    partPtrVec_.reserve( rhs.size() );
d359 1
a359 1
    for (j = 0;  j < rhs.size();  ++j) {
d380 2
a381 2
  minBuckets_ (source.minBuckets_)//,
  //nameToItem_ (minBuckets_)
d394 3
a396 4
  const size_t newSize = source.size();
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < newSize;  ++j) {
    this->dictionaryInsert(j);
d412 1
a412 1
  const size_t newSize = source.size();
d415 1
a415 2
  int j = 0; // Pulled out of the for below by RW2STL
  for (j = 0;  j < newSize;  ++j) insert( sourceSop[j] );
d428 2
a429 2
  minBuckets_ (goodSize (n))//,
  //nameToItem_ (minBuckets_)
d437 2
a438 2
  LgFrSetOfParts( n )//,
  //partVec_ (   goodSize (n)   ) 	        // Not all new's do well
d448 2
a449 2
  LgFrSetOfParts( n )//,
  //partPtrVec_ (   goodSize (n)   ) 	        // Not all new's do well
a451 1
      partPtrVec_.reserve( n );
d464 1
a464 1
  clearDictionary();
d477 1
a477 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for( i=0; i<size(); i++ ) delete partPtrVec_[i];
d480 1
a480 1
// Remove the entries in the dictionary and free the keys
d482 1
a482 1
LgFrSetOfParts::clearDictionary()
d484 5
a488 1
    nameToItem_.clear();
d504 2
a505 3
  cerr << "\t\tsize() = " << this->size() << "\n";
  int i = 0; // Pulled out of the for below by RW2STL
  for (i = 0; i < this->size(); ++i)
a566 3
  const LgFrPart* pPart2 = sop.findValue ( "part2" );
  pPart2 = sop.findValue ( "part2" );

a567 1
  pPart2 = sop.findValue ( "part2" );
d569 1
a569 1
  assert (3 == sop.size());
a579 1
  pPart2 = sop.findValue ( "part2" );
d581 1
a581 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < sop.size(); i++) {
a592 4
  assert (sop[0].name() == "part1");
  assert (sop[1].name() == "part2");
  assert (sop[2].name() == "part3");

d595 1
a595 1
  int sopEntries( sop.size() );
d598 3
a600 10

  assert (sop[0].name() == "part1");
  assert (sop[1].name() == "part2");
  assert (sop[2].name() == "part3");

  pPart2 = sop.findValue ( "part2" );

  sop.newPart( "part2" ); // Test inserting something that is not the
	                     // last thing in the set a second time
  assert( sopEntries == sop.size() );
d608 1
a608 1
  // Test the dictionary part
d615 3
a617 3
  //LgFrSetOfPartsWithMovableParts sop3(0);
  //sop3.resize(3);
  //assert (sop3.size() == 0);
d641 1
a641 1
  assert (3 == sop.size());
d655 1
a655 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i = 0; i < sop.size(); i++) {
d669 1
a669 1
  int sopEntries( sop.size() );
d674 1
a674 1
  assert( sopEntries == sop.size() );
d682 1
a682 1
  // Test the dictionary part
d692 3
a694 3
  //LgFrSetOfPartsWithUnmovableParts sop3(0);
  //sop3.resize(3);
  //assert (sop3.size() == 0);
d701 1
a701 1
    sop.reserve( sop.size() * 25 );
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d6 1
a6 1
#include <iostream>
d13 2
a14 2
using std::cout;
using std::cerr;
d526 1
a526 1
  cerr << std::endl;
@


