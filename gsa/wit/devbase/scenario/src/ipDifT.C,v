head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#include <rw/rstream.h>

#include <wit/src/wit.h>

#include <scenario/src/ipDifT.h>
#include <scenario/src/dif.h>
#include <scenario/src/scenDifT.h>
#include <scenario/src/scDifTP.h>

// Returns a description of the problem that is suitable for use as a
// window heading. This can not be used to set the title; only to query
// it.
RWCString
LgFrInitialProblemForDifTesting::title(
    const LgFrDataInterfaceEssentials * difEssenPtr)
     const
{
  RWCString theTitle("Constrained MRP: ");
  theTitle.append(difTestingScenario()->dataInterface()->title(difEssenPtr));
  return theTitle;
}

// get the scenario
LgFrScenarioForDifTestingSmartPointer
LgFrInitialProblemForDifTesting::difTestingScenario()
     const
{
  return LgFrScenarioForDifTestingSmartPointer(scenario());
}


// Populates the WitRun's data structures 
void
LgFrInitialProblemForDifTesting::feedInto(
				     LgFrLastProblemSolved & )
{
  // Don't invoke dif or populate witRun.  This allows the dif methods
  // to be tested.
}

// Make scenario clone copy of object
LgFrInitialProblemAndParameters *
LgFrInitialProblemForDifTesting::clone(
   LgFrScenarioSmartPointer newScenario)
const
{
  LgFrInitialProblemAndParameters* newInst =
      new LgFrInitialProblemForDifTesting(newScenario);
  return (newInst);
}



LgFrInitialProblemForDifTesting::~LgFrInitialProblemForDifTesting()
{
  // Nothing to do, so do nothing but return
}

// Assignment operator.
LgFrInitialProblemForDifTesting&
LgFrInitialProblemForDifTesting::operator=(
            const LgFrInitialProblemForDifTesting& rhs)
{
  return *new LgFrInitialProblemForDifTesting(rhs.difTestingScenario());
}

// Copy constructor
LgFrInitialProblemForDifTesting::LgFrInitialProblemForDifTesting(
            const LgFrInitialProblemForDifTesting& source)
:
   LgFrInitialProblemAndParameters(source.scenario())
{
  // All the work is done in the initialization part
}

// Default Constructor
LgFrInitialProblemForDifTesting::LgFrInitialProblemForDifTesting()
:
LgFrInitialProblemAndParameters(LgFrScenarioSmartPointer::nullScenarioSmartPointer)
{
  // All the work is done in the initialization part
}

// the preferred Constructor
LgFrInitialProblemForDifTesting::LgFrInitialProblemForDifTesting(LgFrScenarioSmartPointer scenario)
:
    LgFrInitialProblemAndParameters(scenario)
{
  // All the work is done in the initialization part
}
@


1.1.1.1
log
@Import scenario
@
text
@@
