head	1.1;
branch	1.1.1;
access;
symbols
	sce_5_01_20080919:1.1.1.1
	latest_sce_4_20_20060523:1.1.1.1.0.20
	sce_4_20_20060523:1.1.1.1
	latest_sce4_20_OSL:1.1.1.1.0.18
	sce_4_20_OSL:1.1.1.1
	sce_4_05_20040511:1.1.1.1
	sce_4_00_20040201:1.1.1.1
	nextGenBranch:1.1.1.1.0.16
	nextGenRoot:1.1.1.1
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.02.24.15.29.54;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.54;	author wit;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef LGFR_TIME_VEC_COMPARE_H
#define LGFR_TIME_VEC_COMPARE_H

#include <scenario/src/idnumber.h>

// Class for implementing methods of comparing time vectors.
// This class is used by the LgFrScheduleSensitivePairCompareStrategy class.


// Forward References
class LgFrTimeVecFloat;

// -------------------------------------------------------------------------
//
// LgFrTimeVecCompareFloat- base class.
// TimeVecs are compared using LgFrTimeVecFloat::compareTo method.
//
// -------------------------------------------------------------------------

class LgFrTimeVecCompareFloat {
public:

  // Compare two TimeVecPairFloat's
  // return 0 if equal
  //        <0 if first less than second
  //        >0 if first greater than second
  //
  // This is implemented as LgFrTimeVecFloat::compareTo in this base class.
  virtual
    int
      compare(
         const LgFrTimeVecFloat &,
         const LgFrTimeVecFloat &)
            const;

  // Make clone copy of this object
  virtual
     LgFrTimeVecCompareFloat *
        clone() 
           const;

  // Return Comparison Strategy Identifier
  virtual
     isAReturnType
        isA()
           const;

  // Assignment operator
  LgFrTimeVecCompareFloat &
    operator=(
	      const LgFrTimeVecCompareFloat& rhs);

  // Copy constructor
  LgFrTimeVecCompareFloat (
     const LgFrTimeVecCompareFloat &);

  // Default Constructor
  LgFrTimeVecCompareFloat ();

  // Destructor
  ~LgFrTimeVecCompareFloat ();

  // test this class
  static void test();

private:

  const int id_;
};


// -------------------------------------------------------------------------
//
// LgFrMaximumElementTimeVecCompareFloat- derived class.
// TimeVecs are compared by comparing their maximum element values.
//
// -------------------------------------------------------------------------

class LgFrMaximumElementTimeVecCompareFloat :
   public LgFrTimeVecCompareFloat{
public:

  // Compare two TimeVecPairFloat's
  // return 0 if maximum elements are equal
  //        <0 if maximum element of first less than second
  //        >0 if maximum element of first greater than second
  virtual
    int
      compare(
         const LgFrTimeVecFloat &,
         const LgFrTimeVecFloat &)
            const;

  // Make clone copy of this object
  virtual
     LgFrTimeVecCompareFloat *
        clone() 
           const;

  // Return Comparison Strategy Identifier
  virtual
     isAReturnType
        isA()
           const;

  // Assignment operator
  LgFrTimeVecCompareFloat &
    operator=(
	      const LgFrMaximumElementTimeVecCompareFloat& rhs);

  // Copy constructor
  LgFrMaximumElementTimeVecCompareFloat (
     const LgFrMaximumElementTimeVecCompareFloat &);

  // Default Constructor
  LgFrMaximumElementTimeVecCompareFloat ();

  // Destructor
  ~LgFrMaximumElementTimeVecCompareFloat ();

  // test this class
  static void test();

private:

  const int id_;
};


// -------------------------------------------------------------------------
//
// LgFrMinimumElementTimeVecCompareFloat- derived class.
// TimeVecs are compared by comparing their maximum element values.
//
// -------------------------------------------------------------------------

class LgFrMinimumElementTimeVecCompareFloat :
   public LgFrTimeVecCompareFloat{
public:

  // Compare two TimeVecPairFloat's
  // return 0 if maximum elements are equal
  //        <0 if maximum element of first less than second
  //        >0 if maximum element of first greater than second
  virtual
    int
      compare(
         const LgFrTimeVecFloat &,
         const LgFrTimeVecFloat &)
            const;

  // Make clone copy of this object
  virtual
     LgFrTimeVecCompareFloat *
        clone() 
           const;

  // Return Comparison Strategy Identifier
  virtual
     isAReturnType
        isA()
           const;

  // Assignment operator
  LgFrTimeVecCompareFloat &
    operator=(
	      const LgFrMinimumElementTimeVecCompareFloat& rhs);

  // Copy constructor
  LgFrMinimumElementTimeVecCompareFloat (
     const LgFrMinimumElementTimeVecCompareFloat &);

  // Default Constructor
  LgFrMinimumElementTimeVecCompareFloat ();

  // Destructor
  ~LgFrMinimumElementTimeVecCompareFloat ();

  // test this class
  static void test();

private:

  const int id_;
};

#endif
@


1.1.1.1
log
@Import scenario
@
text
@@
