head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.31;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.27;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.42;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <ostream>
#include <assert.h>
#include <scenario/src/demdSchP.h>
#include <scenario/src/demdSchd.h>
#include <scenario/src/sortSchP.h>


// Default Constructor
LgFrSortingDemandScheduleFloatSmartPointerToConst::LgFrSortingDemandScheduleFloatSmartPointerToConst() : pointer_(new LgFrSortingDemandScheduleFloat), count_(1)
{
};

// Preferred Constructor
LgFrSortingDemandScheduleFloatSmartPointerToConst::LgFrSortingDemandScheduleFloatSmartPointerToConst(LgFrSortingDemandScheduleFloat* newedPointer) 
: pointer_(newedPointer), count_(1)
{
}

// Constructor for cast operator
LgFrSortingDemandScheduleFloatSmartPointerToConst::LgFrSortingDemandScheduleFloatSmartPointerToConst(
    LgFrSortingDemandScheduleFloat* existingPointer,
    LgFrReferenceCount& count) : pointer_(existingPointer)
{
    count_ = count;
}

// Destructor
LgFrSortingDemandScheduleFloatSmartPointerToConst::~LgFrSortingDemandScheduleFloatSmartPointerToConst()
{
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
}

// Copy Constructor
LgFrSortingDemandScheduleFloatSmartPointerToConst::LgFrSortingDemandScheduleFloatSmartPointerToConst(
    const LgFrSortingDemandScheduleFloatSmartPointerToConst& rhs) 
: pointer_(rhs.pointer_)
{
    count_ = // cast away const because of LgFrReferenceCount::operator=()
      ((LgFrSortingDemandScheduleFloatSmartPointerToConst&)rhs).count_;
}

// Deep Copy
LgFrSortingDemandScheduleFloatSmartPointerToConst
LgFrSortingDemandScheduleFloatSmartPointerToConst::deepCopy() const
{
    // do SortingDemandScheduleFloat deep copy and create a new smart pointer
    //  we can cast as we know that we are cloning a derived class
    return LgFrSortingDemandScheduleFloatSmartPointerToConst((LgFrSortingDemandScheduleFloat *)pointer_->clone());
}

// Assignment Operator
LgFrSortingDemandScheduleFloatSmartPointerToConst& 
LgFrSortingDemandScheduleFloatSmartPointerToConst::operator=(const LgFrSortingDemandScheduleFloatSmartPointerToConst& rhs)
{
    // check to see if this smart pointer is the only one pointing to
    //  the actual object.  If it is, then we want to delete the
    //  pointer
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
    count_ = // cast away const because of LgFrReferenceCount::operator=()
      ((LgFrSortingDemandScheduleFloatSmartPointerToConst&)rhs).count_;
    pointer_ = rhs.pointer_;
    return *this;
}


bool
LgFrSortingDemandScheduleFloatSmartPointerToConst::operator==(const LgFrSortingDemandScheduleFloatSmartPointerToConst& rhs) const
{
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
    else
	return false;
}

bool
LgFrSortingDemandScheduleFloatSmartPointerToConst::operator!=(const LgFrSortingDemandScheduleFloatSmartPointerToConst& rhs) const
{
    return !( *this == rhs );
}

const LgFrSortingDemandScheduleFloat* const
LgFrSortingDemandScheduleFloatSmartPointerToConst::operator->() const
{
    // implicit cast to const
    return pointer_;
}

const LgFrSortingDemandScheduleFloat&
LgFrSortingDemandScheduleFloatSmartPointerToConst::operator*() const
{
    // implicit cast to const
    return *pointer_;
}

/*
LgFrSortingDemandScheduleFloatSmartPointerToConst::operator const LgFrSortingDemandScheduleFloat* const () const
{
    return &(*pointer_);
}
*/


LgFrSortingDemandScheduleFloatSmartPointerToConst::operator LgFrSortingScheduleFloatSmartPointerToConst () const
{
    return	// need to cast away const for count_
      LgFrSortingScheduleFloatSmartPointerToConst(pointer_,
						  (LgFrReferenceCount&)count_);
}

bool
LgFrSortingDemandScheduleFloatSmartPointerToConst::unique() const
{
    return (count_.reference() == 1);
}

bool 
LgFrSortingDemandScheduleFloatSmartPointerToConst::null() const
{
    return (pointer_ == 0);
}

void
LgFrSortingDemandScheduleFloatSmartPointerToConst::test()
{
    std::cout << "Testing default constructor" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointerToConst dummy;
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;

    std::cout << "Testing preferred constructor (dummy)" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointerToConst b(new LgFrSortingDemandScheduleFloat);
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing assignement operator dummy = b" << std::endl;
    dummy = b;
    std::cout << "b count is " << b.count_.reference() << std::endl;    


    std::cout << "Testing copy constructor (c = b)" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointerToConst c(b);
    std::cout << "b count is " << b.count_.reference() << std::endl;    


    std::cout << "Testing backdoor constructor" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointerToConst e(b.pointer_, b.count_);
    std::cout << "e count is " << e.count_.reference() << std::endl;    

    std::cout << "Testing equality operator (c == b)" << std::endl;
    assert(c == b);

    std::cout << "Testing inequality operator (c != d)" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointerToConst d(new LgFrSortingDemandScheduleFloat);
    assert(c != d);

    std::cout << "Test destructor" << std::endl;
    c = d;
    std::cout << "b count is " << b.count_.reference() << std::endl;    
    c = b;
    d = b;

    // this should be a compiler error
//    LgFrSortingDemandScheduleFloatSmartPointerToConst e(&(*d));
}



LgFrSortingDemandScheduleFloatSmartPointer::LgFrSortingDemandScheduleFloatSmartPointer() 
{
    // calls base class default constructor
}

LgFrSortingDemandScheduleFloatSmartPointer::LgFrSortingDemandScheduleFloatSmartPointer(LgFrSortingDemandScheduleFloat* newedPointer) 
: LgFrSortingDemandScheduleFloatSmartPointerToConst(newedPointer)
{
}

LgFrSortingDemandScheduleFloatSmartPointer::LgFrSortingDemandScheduleFloatSmartPointer(
    LgFrSortingDemandScheduleFloat* existingPointer,
    LgFrReferenceCount& count) 
: LgFrSortingDemandScheduleFloatSmartPointerToConst(existingPointer, count)
{
}


LgFrSortingDemandScheduleFloatSmartPointer::~LgFrSortingDemandScheduleFloatSmartPointer()
{
    // call base class destructor
}

LgFrSortingDemandScheduleFloatSmartPointer::LgFrSortingDemandScheduleFloatSmartPointer
    (const LgFrSortingDemandScheduleFloatSmartPointer& rhs) 
: LgFrSortingDemandScheduleFloatSmartPointerToConst(rhs.pointer_)
{
    count_ = // cast away const because of LgFrReferenceCount::operator=()
      ((LgFrSortingDemandScheduleFloatSmartPointer&)rhs).count_;
}

// need to do some casting to a derived class so that we can access protected
//  members
LgFrSortingDemandScheduleFloatSmartPointer::LgFrSortingDemandScheduleFloatSmartPointer(LgFrSortingDemandScheduleFloatSmartPointerToConst rhs) 
    : LgFrSortingDemandScheduleFloatSmartPointerToConst(((LgFrSortingDemandScheduleFloatSmartPointer&)rhs).pointer_)
{
    count_ = ((LgFrSortingDemandScheduleFloatSmartPointer&)rhs).count_;
}

LgFrSortingDemandScheduleFloatSmartPointer
LgFrSortingDemandScheduleFloatSmartPointer::deepCopy() 
{
    // do SortingDemandScheduleFloat deep copy and create a new smart pointer
    return LgFrSortingDemandScheduleFloatSmartPointer((LgFrSortingDemandScheduleFloat *)pointer_->clone());
}

LgFrSortingDemandScheduleFloatSmartPointer& 
LgFrSortingDemandScheduleFloatSmartPointer::operator=(const LgFrSortingDemandScheduleFloatSmartPointer& rhs)
{
    // check to see if this smart pointer is the only one pointing to
    //  the actual object.  If it is, then we want to delete the
    //  pointer
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
    count_ = // cast away const because of LgFrReferenceCount::operator=()
      ((LgFrSortingDemandScheduleFloatSmartPointer&)rhs).count_;
    pointer_ = rhs.pointer_;
    return *this;
}

// need to do some casting to a derived class so that we can access protected
//  members
/*
LgFrSortingDemandScheduleFloatSmartPointer& 
LgFrSortingDemandScheduleFloatSmartPointer::operator=(LgFrSortingDemandScheduleFloatSmartPointerToConst rhs)
{
    // check to see if this smart pointer is the only one pointing to
    //  the actual object.  If it is, then we want to delete the
    //  pointer
    if (pointer_ != 0)  {
	if (count_.reference() == 1)
	    delete pointer_;
    }
    count_ = ((LgFrSortingDemandScheduleFloatSmartPointer&)rhs).count_;
    pointer_ = ((LgFrSortingDemandScheduleFloatSmartPointer&)rhs).pointer_;
    return *this;
}
*/

bool
LgFrSortingDemandScheduleFloatSmartPointer::operator==(const LgFrSortingDemandScheduleFloatSmartPointer& rhs) const
{
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
    else
	return false;
}
/*
bool
LgFrSortingDemandScheduleFloatSmartPointer::operator==(LgFrSortingDemandScheduleFloatSmartPointerToConst rhs) const
{
    if ( (pointer_ == rhs.pointer_) && (count_ == rhs.count_) )
	return true;
    else
	return false;
}
*/
bool
LgFrSortingDemandScheduleFloatSmartPointer::operator!=(const LgFrSortingDemandScheduleFloatSmartPointer& rhs) const
{
    return !( *this == rhs );
}
/*
bool
LgFrSortingDemandScheduleFloatSmartPointer::operator!=(LgFrSortingDemandScheduleFloatSmartPointerToConst rhs) const
{
    if ( (pointer_ != rhs.pointer_) || (count_ != rhs.count_) )
	return true;
    else
	return false;
}
*/
const LgFrSortingDemandScheduleFloat* const
LgFrSortingDemandScheduleFloatSmartPointer::operator->() const
{
    return pointer_;
}

LgFrSortingDemandScheduleFloat* const
LgFrSortingDemandScheduleFloatSmartPointer::operator->()
{
    return pointer_;
}

LgFrSortingDemandScheduleFloat &
LgFrSortingDemandScheduleFloatSmartPointer::operator*()
{
    return *pointer_;
}

const LgFrSortingDemandScheduleFloat &
LgFrSortingDemandScheduleFloatSmartPointer::operator*() const
{
    return *pointer_;
}

/*
LgFrSortingDemandScheduleFloatSmartPointer::operator const LgFrSortingDemandScheduleFloat* const () const
{
    return &(*pointer_);
}

LgFrSortingDemandScheduleFloatSmartPointer::operator LgFrSortingDemandScheduleFloat* ()
{
    return &(*pointer_);
}
*/


LgFrSortingDemandScheduleFloatSmartPointer::operator LgFrSortingScheduleFloatSmartPointerToConst () const
{
    return	// need to cast away const for count_
      LgFrSortingScheduleFloatSmartPointerToConst(pointer_,
						  (LgFrReferenceCount&)count_);
}

LgFrSortingDemandScheduleFloatSmartPointer::operator LgFrSortingScheduleFloatSmartPointer () 
{
    return LgFrSortingScheduleFloatSmartPointer(pointer_, count_);
}

bool
LgFrSortingDemandScheduleFloatSmartPointer::unique() const
{
    return (count_.reference() == 1);
}

bool 
LgFrSortingDemandScheduleFloatSmartPointer::null() const
{
    return (pointer_ == 0);
}


void
LgFrSortingDemandScheduleFloatSmartPointer::test()
{
    std::cout << "Testing default constructor" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointer dummy;
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;

    std::cout << "Testing preferred constructor (dummy)" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointer b(new LgFrSortingDemandScheduleFloat);
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing assignement operator dummy = b" << std::endl;
    dummy = b;
    std::cout << "b count is " << b.count_.reference() << std::endl;    


    std::cout << "Testing copy constructor (c = b)" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointer c(b);
    std::cout << "b count is " << b.count_.reference() << std::endl;    

    std::cout << "Testing backdoor constructor" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointer e(b.pointer_, b.count_);
    std::cout << "e count is " << e.count_.reference() << std::endl;    

    std::cout << "Testing equality operator (c == b)" << std::endl;
    assert(c == b);

    std::cout << "Testing inequality operator (c != d)" << std::endl;
    LgFrSortingDemandScheduleFloatSmartPointer d(new LgFrSortingDemandScheduleFloat);
    assert(c != d);

    std::cout << "Test destructor" << std::endl;
    c = d;
    std::cout << "b count is " << b.count_.reference() << std::endl;    
    c = b;
    d = b;
}

@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
#include <iostream.h>
d33 1
a33 1
    if (pointer_ != NULL)  {
d64 1
a64 1
    if (pointer_ != NULL)  {
d75 1
a75 1
RWBoolean
d78 2
a79 2
    if ( (pointer_ == rhs.pointer_) && (count_ == rhs.count_) )
	return TRUE;
d81 1
a81 1
	return FALSE;
d84 1
a84 1
RWBoolean
d87 1
a87 4
    if ( (pointer_ != rhs.pointer_) || (count_ != rhs.count_) )
	return TRUE;
    else
	return FALSE;
d119 1
a119 1
RWBoolean
d125 1
a125 1
RWBoolean 
d128 1
a128 1
    return (pointer_ == NULL);
d134 1
a134 1
    cout << "Testing default constructor" << endl;
d136 1
a136 1
    cout << "dummy count is " << dummy.count_.reference() << endl;
d138 1
a138 1
    cout << "Testing preferred constructor (dummy)" << endl;
d140 1
a140 1
    cout << "b count is " << b.count_.reference() << endl;    
d142 1
a142 1
    cout << "Testing assignement operator dummy = b" << endl;
d144 1
a144 1
    cout << "b count is " << b.count_.reference() << endl;    
d147 1
a147 1
    cout << "Testing copy constructor (c = b)" << endl;
d149 1
a149 1
    cout << "b count is " << b.count_.reference() << endl;    
d152 1
a152 1
    cout << "Testing backdoor constructor" << endl;
d154 1
a154 1
    cout << "e count is " << e.count_.reference() << endl;    
d156 1
a156 1
    cout << "Testing equality operator (c == b)" << endl;
d159 1
a159 1
    cout << "Testing inequality operator (c != d)" << endl;
d163 1
a163 1
    cout << "Test destructor" << endl;
d165 1
a165 1
    cout << "b count is " << b.count_.reference() << endl;    
d227 1
a227 1
    if (pointer_ != NULL)  {
d246 1
a246 1
    if (pointer_ != NULL)  {
d256 1
a256 1
RWBoolean
d259 2
a260 2
    if ( (pointer_ == rhs.pointer_) && (count_ == rhs.count_) )
	return TRUE;
d262 1
a262 1
	return FALSE;
d265 1
a265 1
RWBoolean
d269 1
a269 1
	return TRUE;
d271 1
a271 1
	return FALSE;
d274 1
a274 1
RWBoolean
d277 1
a277 4
    if ( (pointer_ != rhs.pointer_) || (count_ != rhs.count_) )
	return TRUE;
    else
	return FALSE;
d280 1
a280 1
RWBoolean
d284 1
a284 1
	return TRUE;
d286 1
a286 1
	return FALSE;
d338 1
a338 1
RWBoolean
d344 1
a344 1
RWBoolean 
d347 1
a347 1
    return (pointer_ == NULL);
d354 1
a354 1
    cout << "Testing default constructor" << endl;
d356 1
a356 1
    cout << "dummy count is " << dummy.count_.reference() << endl;
d358 1
a358 1
    cout << "Testing preferred constructor (dummy)" << endl;
d360 1
a360 1
    cout << "b count is " << b.count_.reference() << endl;    
d362 1
a362 1
    cout << "Testing assignement operator dummy = b" << endl;
d364 1
a364 1
    cout << "b count is " << b.count_.reference() << endl;    
d367 1
a367 1
    cout << "Testing copy constructor (c = b)" << endl;
d369 1
a369 1
    cout << "b count is " << b.count_.reference() << endl;    
d371 1
a371 1
    cout << "Testing backdoor constructor" << endl;
d373 1
a373 1
    cout << "e count is " << e.count_.reference() << endl;    
d375 1
a375 1
    cout << "Testing equality operator (c == b)" << endl;
d378 1
a378 1
    cout << "Testing inequality operator (c != d)" << endl;
d382 1
a382 1
    cout << "Test destructor" << endl;
d384 1
a384 1
    cout << "b count is " << b.count_.reference() << endl;    
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <ostream.h>
d30 1
a30 1
    if (pointer_ != 0)  {
d61 1
a61 1
    if (pointer_ != 0)  {
d72 1
a72 1
bool
d75 2
a76 2
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
d78 1
a78 1
	return false;
d81 1
a81 1
bool
d84 4
a87 1
    return !( *this == rhs );
d119 1
a119 1
bool
d125 1
a125 1
bool 
d128 1
a128 1
    return (pointer_ == 0);
d227 1
a227 1
    if (pointer_ != 0)  {
d246 1
a246 1
    if (pointer_ != 0)  {
d256 1
a256 1
bool
d259 2
a260 2
    if ( (pointer_ == rhs.pointer_) && (pointer_ == 0 || count_ == rhs.count_) )
	return true;
d262 1
a262 1
	return false;
d265 1
a265 1
bool
d269 1
a269 1
	return true;
d271 1
a271 1
	return false;
d274 1
a274 1
bool
d277 4
a280 1
    return !( *this == rhs );
d283 1
a283 1
bool
d287 1
a287 1
	return true;
d289 1
a289 1
	return false;
d341 1
a341 1
bool
d347 1
a347 1
bool 
d350 1
a350 1
    return (pointer_ == 0);
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d4 1
a4 1
#include <ostream>
d134 1
a134 1
    std::cout << "Testing default constructor" << std::endl;
d136 1
a136 1
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;
d138 1
a138 1
    std::cout << "Testing preferred constructor (dummy)" << std::endl;
d140 1
a140 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d142 1
a142 1
    std::cout << "Testing assignement operator dummy = b" << std::endl;
d144 1
a144 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d147 1
a147 1
    std::cout << "Testing copy constructor (c = b)" << std::endl;
d149 1
a149 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d152 1
a152 1
    std::cout << "Testing backdoor constructor" << std::endl;
d154 1
a154 1
    std::cout << "e count is " << e.count_.reference() << std::endl;    
d156 1
a156 1
    std::cout << "Testing equality operator (c == b)" << std::endl;
d159 1
a159 1
    std::cout << "Testing inequality operator (c != d)" << std::endl;
d163 1
a163 1
    std::cout << "Test destructor" << std::endl;
d165 1
a165 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d354 1
a354 1
    std::cout << "Testing default constructor" << std::endl;
d356 1
a356 1
    std::cout << "dummy count is " << dummy.count_.reference() << std::endl;
d358 1
a358 1
    std::cout << "Testing preferred constructor (dummy)" << std::endl;
d360 1
a360 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d362 1
a362 1
    std::cout << "Testing assignement operator dummy = b" << std::endl;
d364 1
a364 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d367 1
a367 1
    std::cout << "Testing copy constructor (c = b)" << std::endl;
d369 1
a369 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
d371 1
a371 1
    std::cout << "Testing backdoor constructor" << std::endl;
d373 1
a373 1
    std::cout << "e count is " << e.count_.reference() << std::endl;    
d375 1
a375 1
    std::cout << "Testing equality operator (c == b)" << std::endl;
d378 1
a378 1
    std::cout << "Testing inequality operator (c != d)" << std::endl;
d382 1
a382 1
    std::cout << "Test destructor" << std::endl;
d384 1
a384 1
    std::cout << "b count is " << b.count_.reference() << std::endl;    
@


