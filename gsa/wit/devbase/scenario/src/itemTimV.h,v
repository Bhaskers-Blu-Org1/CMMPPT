head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.39;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.31;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.42;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_ITEM_TIME_VEC_PAIR_H
#define LGFR_ITEM_TIME_VEC_PAIR_H
// RW2STL -- inserted:
#include <string>
#include <vector>
// End of RW2STL -- inserted includes.
#include <ostream>


#include <scenario/src/timeVecs.h>

// This class represents a pair of Items and TimeVecFloat.
// The intended items are Part and Demand.

class LGFR_DECLSPEC LgFrItemTimeVecPairFloat { 

private:
  
  static const LgFrTimeVecFloat emptyVec; // Used for default arg because SUN
                                          // compiler fails when passed
                                          // LgFrTimeVecFloat()


public:

  // Returns true if compareTo returns 0.
  virtual
    bool
      isEqual(const LgFrItemTimeVecPairFloat*) 
	const;

  // compareTo method, uses ItemTimeVecPairFloat item->name and timeVecFloat
  // to do the comparison.
  // should return 0  if this->name_ "is equal to" source->name_ and
  //                     this->timeVecFloat "is equal" to source->timeVecFloat
  //               >0 if this->name_ "is larger" than source->name_.
  //               <0 if this->name_ "is smaller" than source->name_.
  //    
  //               If the name's are equal then the timeVecFloats are compared. 
  //               >0 if this->timeVecFloat "is larger" than
  //                     source->timeVecFloat.
  //               <0 if this->timeVecFloat "is smaller" than
  //                     source->timeVecFloat.
  
  virtual int compareTo(const LgFrItemTimeVecPairFloat*) const;

  // Set and Get methods
  // Item
  void  item (const LgFrItem&);	                // Set
  const LgFrItem& item () const;	        // Get
  const LgFrPart& part () const;		// If the item is really
						// a part, get it, otherwise
						// bomb out on assert
  const LgFrDemand& demand () const;		// If the item is really
						// a demand, get it, otherwise
						// bomb out on assert

  // timeVecFloat
  virtual  void timeVecFloat (const LgFrTimeVecFloat&);    // Set
  virtual  const LgFrTimeVecFloat& timeVecFloat () const;  // Get
  
  // Constructor that sets both parts
  LgFrItemTimeVecPairFloat(const LgFrItem& item, const LgFrTimeVecFloat& p);

  // default constructor
  LgFrItemTimeVecPairFloat();
  
  // Copy constructor
  LgFrItemTimeVecPairFloat (const LgFrItemTimeVecPairFloat& source);
  
  // destructor
  ~LgFrItemTimeVecPairFloat();
  
  // Assignment
  virtual
    LgFrItemTimeVecPairFloat& 
      operator=(const LgFrItemTimeVecPairFloat& rhs);
  
  // Equality
  virtual
    int
      operator==(const LgFrItemTimeVecPairFloat&)
	const;
  
   // Format an itemTimeVec for display.
   // Returns a string representing the itemTimeVecFloat.
   //
   // highLight:
   //   If highLight[i] != 0.0 then the i'th element of the timeVec
   //   is emphasized by following the number with an "*",
   //   or a client specified character.
   //
   // truncate: true indicates that item names all have the same length
   //           and are truncated if they can not fit in the alloted
   //           width.
   //
   // highLightFlag: character to follow a highlighted timeVec entry.
   //
   // width: ios width used to format each timeVec entry.
   //
   // precision: ios precision used to format each timeVec entry.
   //
   // iosFlags: ios formating flags used to format each timeVec entry.
   //
   std::string format(
      const LgFrTimeVecFloat & highLight = LgFrItemTimeVecPairFloat::emptyVec,
      const bool truncate = true,
      const char highLightFlag = '*',
      const int width = 10,
      const int precision = 1)//,
      //const long iosFlags = ios::fixed | ios::showpoint | ios::right )
   const;

  // Print Class
  virtual void print() const;
  
  // test this class
  static void test();

private:

  LgFrItem*          item_;
  LgFrTimeVecFloat   timeVecFloat_;
};


// RW2STL - declare (RWGVector,LgFrItemTimeVecPairFloat);

// RW2STL - declare (RWGOrderedVector,LgFrItemTimeVecPairFloat);

typedef std::vector<LgFrItemTimeVecPairFloat> LgFrItemTimeVecPairFloatVector; // RW2STL - typedef RWGOrderedVector(LgFrItemTimeVecPairFloat) LgFrItemTimeVecPairFloatVector;


#endif
@


1.1
log
@Initial revision
@
text
@d3 5
a8 3
#include <rw/cstring.h>
#include <rw/collect.h>
#include <rw/gordvec.h>
d15 1
a15 5
class LGFR_DECLSPEC LgFrItemTimeVecPairFloat : public RWCollectable  {

  // isA(), newSpecies(), copy(), and some other things are declared
  // by this macro
  RWDECLARE_COLLECTABLE(LgFrItemTimeVecPairFloat)
d26 1
a26 1
  // Returns TRUE if compareTo returns 0.
d28 2
a29 2
    RWBoolean
      isEqual(const RWCollectable*) 
d45 1
a45 1
  virtual int compareTo(const RWCollectable*) const;
d93 1
a93 1
   // truncate: TRUE indicates that item names all have the same length
d105 1
a105 1
   RWCString format(
d107 1
a107 1
      const RWBoolean truncate = TRUE,
d110 2
a111 2
      const int precision = 1,
      const long iosFlags = ios::fixed | ios::showpoint | ios::right )
d127 6
a132 3
declare (RWGVector,LgFrItemTimeVecPairFloat);
declare (RWGOrderedVector,LgFrItemTimeVecPairFloat);
typedef RWGOrderedVector(LgFrItemTimeVecPairFloat) LgFrOrderedVectorItemTimeVecPairFloat;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 5
// RW2STL -- inserted:
#include <string>
#include <vector>
// End of RW2STL -- inserted includes.
#include <ostream.h>
d4 3
d13 5
a17 1
class LGFR_DECLSPEC LgFrItemTimeVecPairFloat { 
d28 1
a28 1
  // Returns true if compareTo returns 0.
d30 2
a31 2
    bool
      isEqual(const LgFrItemTimeVecPairFloat*) 
d47 1
a47 1
  virtual int compareTo(const LgFrItemTimeVecPairFloat*) const;
d95 1
a95 1
   // truncate: true indicates that item names all have the same length
d107 1
a107 1
   std::string format(
d109 1
a109 1
      const bool truncate = true,
d129 3
a131 6
// RW2STL - declare (RWGVector,LgFrItemTimeVecPairFloat);

// RW2STL - declare (RWGOrderedVector,LgFrItemTimeVecPairFloat);

typedef std::vector<LgFrItemTimeVecPairFloat> LgFrItemTimeVecPairFloatVector; // RW2STL - typedef RWGOrderedVector(LgFrItemTimeVecPairFloat) LgFrItemTimeVecPairFloatVector;

@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d7 1
a7 1
#include <ostream>
d110 2
a111 2
      const int precision = 1)//,
      //const long iosFlags = ios::fixed | ios::showpoint | ios::right )
@


