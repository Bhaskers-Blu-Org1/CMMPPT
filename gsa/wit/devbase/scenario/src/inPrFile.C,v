head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.38;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.43;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.43;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.31;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.42;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <assert.h>


#include <wit/src/wit.h>
#include <scenario/src/inPrFile.h>
#include <scenario/src/dif.h>
#include <scenario/src/difSFile.h>
#include <scenario/src/lastPrbS.h>
#include <scenario/src/scenario.h>
#include <scenario/src/calendar.h>

// Populates the WitRun's data structures using the data in
// fileName_.
void
LgFrInitialProblemFromFile::feedInto(
				     LgFrLastProblemSolved & lps)
{
  WitRun* const eater = lps.witRun();


  // Put the data into WIT
  if (fileName_.empty()) {
    assert (!(this->scenario().null()));
    LgFrDataInterfaceAbstract* difPtr  =  this->dataInterfacePtr();
    assert (difPtr != 0);
    if (difPtr->GetDIType() != __LGFRDATAINTERFACESPECIALPURPOSEFROMFILE)
     std::cerr << "Warning: LgFrInitialProblemFromFile is downcasting some kind of\n"
          << "LgFrDataInterface (DIF) to an LGFRDATAINTERFACESPECIALPURPOSEFROMFILE (DIFSFile).\n"
          << "The DIF had better be a subclass of DIFFFile" << std::endl;
    LgFrDataInterfaceSpecialPurposeFromFile*
	ddifPtr  =  (LgFrDataInterfaceSpecialPurposeFromFile*) difPtr;
    fileName_ = ddifPtr->fileName();
    ddifPtr->readDataFile (eater);
    ddifPtr->massageWitRun (eater);
  }
  else
    witReadData (eater, fileName_.c_str());

  // fix up calendar if the number of periods in the calendar is not
  //   equal to the number of periods in the data file.  for the case
  //   of loading data directly from a file we don't have a choice in
  //   the number of periods we want to see - we must see ALL of them.
  scenario()->calendar().nPeriods(lps.numberOfPeriods());

  // Initialize Scenario's Universal Set of Parts and Universal Set of Demands
  // (In most cases, LgFrDataInterface does this, but InitialProblemFromFile 
  // doesn't use really use LgFrDataInterface to read the data.
  LgFrSetOfParts   & usop = this->setOfParts (LGFR_UNIVERSAL_SET);
  LgFrSetOfDemands & usod = this->setOfDemands (LGFR_UNIVERSAL_SET);
  this->createPartsAndFillSoP (lps, usop);
  this->createDemandsAndFillSoD (lps, usop, usod);
    
  // Initialize the Default Sets of Parts and Demands
  LgFrSetOfParts   & dsop = this->setOfParts (LGFR_DEFAULT_SET);
  LgFrSetOfDemands & dsod = this->setOfDemands (LGFR_DEFAULT_SET);
  dsop = usop;                  // OK because LgFrSetOfParts and LgFrSetOfDemands 
  dsod = usod;                  // instances check for assignment to themselves

}

// Returns a description of the problem that is suitable for use as a
// window heading. This can not be used to set the title; only to query
// it.
std::string
LgFrInitialProblemFromFile::title(
    const LgFrDataInterfaceEssentials * )
     const
{
  if (fileName_.empty()) return (std::string("(unnamed)"));
  else return (fileName_);
}

// Returns the file name of the wit.data file that the initial parameters
// are coming from.
std::string
LgFrInitialProblemFromFile::fileName()
     const
{
  return (fileName_);
}

// Make scenario clone copy of object
LgFrInitialProblemAndParameters *
LgFrInitialProblemFromFile::clone(
   LgFrScenarioSmartPointer newScenario)
const
{
  LgFrInitialProblemAndParameters* newInst =
      new LgFrInitialProblemFromFile(
             this->fileName(),
             newScenario );
  return (newInst);
}


// Constructor for given filename and scenario
// Create an instance for the file named in the first parameter
// Assign parameter to fileName_ 
LgFrInitialProblemFromFile::LgFrInitialProblemFromFile(
						       const std::string& fileName,
						       LgFrScenarioSmartPointer scenario )
: LgFrInitialProblemAndParameters(scenario), fileName_ (fileName)
{
  // All the work is done in the initialization part
}

LgFrInitialProblemFromFile::~LgFrInitialProblemFromFile()
{
  // Nothing to do, so do nothing but return
}

// Assignment operator.
LgFrInitialProblemFromFile&
LgFrInitialProblemFromFile::operator=(
            const LgFrInitialProblemFromFile& rhs)
{
  fileName_ = rhs.fileName();
  return (*this);
}

// Copy constructor
// Since this uses RWCstring, Rogue Wave can take care of managing the
// string's storage space.
LgFrInitialProblemFromFile::LgFrInitialProblemFromFile(
            const LgFrInitialProblemFromFile& source)
: fileName_ (source.fileName())
{
  // All the work is done in the initialization part
}

// Default Constructor
// Initialize file name to null string.
LgFrInitialProblemFromFile::LgFrInitialProblemFromFile()
: fileName_()
{
  // All the work is done in the initialization part
}


void
LgFrInitialProblemFromFile::createPartsAndFillSoP (LgFrLastProblemSolved & lps,
                                                   LgFrSetOfParts & sop)
{
  // Get the list of parts WIT read in
#if 0  
  int nParts(0);
  char** partList;
  lps.parts (&nParts, &partList);
#else
  LgFrStringVector partList( lps.parts() );
  int nParts( partList.size() );
#endif  

  // Make sop the right size
  //sop.resize(nParts);

  // Fill in sop
  int partNo = 0; // Pulled out of the for below by RW2STL
  for (partNo = 0;  partNo < nParts;  ++partNo) {
    sop.insert(LgFrPart(partList[partNo]));
#if 0    
    portableFree( partList[partNo] );
#endif    
  }
#if 0  
  portableFree (partList);
#endif  
}


void
freeDemandCharPtrPtrList (char** curPartsDemands,
			  const int& n)
{
  int k;			// Number of demand being processed
  for (k = 0;  k < n;  ++k)
    portableFree (curPartsDemands[k]);
  portableFree (curPartsDemands);
}


void
LgFrInitialProblemFromFile::createDemandsAndFillSoD (LgFrLastProblemSolved & lps,
                                                     LgFrSetOfParts & sop,
                                                     LgFrSetOfDemands & sod)
{
  size_t noParts		// Number of parts in this scenario
    = sop.size();
  int noTotalDemands;		// Number of demands in this scenario
  int curPartNo;		// Index number of part being processed
  int noDemandsByCurPart;	// Number of demands by current part
  char** curPartsDemands;	// List of all demands for current part

  // Find out how many demands there are
  noTotalDemands = 0;
  for (curPartNo = 0;  curPartNo < noParts;  ++curPartNo) {
    lps.demands(& (sop[curPartNo]),
		 &noDemandsByCurPart,
		 &curPartsDemands);
    noTotalDemands += (noDemandsByCurPart);
    freeDemandCharPtrPtrList (curPartsDemands, noDemandsByCurPart);
  }

  // Make the demand list the right size
  //sod.resize(noTotalDemands);

  // Create all of the demand objects and put them in sod
  for (curPartNo = 0;  curPartNo < noParts;  ++curPartNo) {
    lps.demands(& (sop[curPartNo]),
		 &noDemandsByCurPart,
		 &curPartsDemands);
    int k = 0; // Pulled out of the for below by RW2STL
    for (k = 0;  k < noDemandsByCurPart;  ++k) {
      LgFrDemand dP (curPartsDemands[k],	// Create demand
		     & (sop[curPartNo]));
      sod.insert(dP);			// Copy into set
    }
    freeDemandCharPtrPtrList (curPartsDemands, noDemandsByCurPart);
  }
}



#ifdef NDEBUG
#undef NDEBUG
#endif
// Test this class
void
LgFrInitialProblemFromFile::test()
{
  char*  testFileName = "wit.data";
  char*  testFile2Name = "wit2.data";

  // Test constructors
  LgFrInitialProblemFromFile defInst;
  LgFrInitialProblemFromFile fileInst (testFileName, 
	  LgFrScenarioSmartPointer::nullScenarioSmartPointer);
  const LgFrInitialProblemFromFile constFileInst (testFileName, 
	  LgFrScenarioSmartPointer::nullScenarioSmartPointer);
  LgFrInitialProblemFromFile copyInst (constFileInst);

  // Test the assignment method.
  defInst = constFileInst;

  // Test the fileName method, also checks to see if the constructors
  // and operator= did reasonably well
  assert (std::string (testFileName) == fileInst.fileName());
  assert (fileInst.fileName() == constFileInst.fileName());
  assert (fileInst.fileName() == copyInst.fileName());
  assert (defInst.fileName() == constFileInst.fileName());  

  // Test the title method
  assert (std::string (testFileName) == fileInst.title());
  assert (fileInst.title() == constFileInst.title());
  assert (fileInst.title() == copyInst.title());
  assert (fileInst.title() == defInst.title());
}
@


1.1
log
@Initial revision
@
text
@d1 4
a6 1
#include <rw/rstream.h>
d26 1
a26 1
  if (fileName_.isNull()) {
d29 3
a31 3
    assert (difPtr != NULL);
    if (difPtr->isA() != __LGFRDATAINTERFACESPECIALPURPOSEFROMFILE)
     cerr << "Warning: LgFrInitialProblemFromFile is downcasting some kind of\n"
d33 1
a33 1
          << "The DIF had better be a subclass of DIFFFile" << endl;
d41 1
a41 1
    witReadData (eater, fileName_);
d68 1
a68 1
RWCString
d73 1
a73 1
  if (fileName_.isNull()) return (RWCString("(unnamed)"));
d79 1
a79 1
RWCString
d104 1
a104 1
						       const RWCString fileName,
d154 2
a155 2
  LgFrVectorRWCString partList( lps.parts() );
  int nParts( partList.length() );
d159 1
a159 1
  sop.resize(nParts);
d162 2
a163 1
  for (int partNo = 0;  partNo < nParts;  ++partNo) {
d192 1
a192 1
    = sop.entries();
d209 1
a209 1
  sod.resize(noTotalDemands);
d216 2
a217 1
    for (int k = 0;  k < noDemandsByCurPart;  ++k) {
d251 1
a251 1
  assert (RWCString (testFileName) == fileInst.fileName());
d257 1
a257 1
  assert (RWCString (testFileName) == fileInst.title());
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
d3 1
d23 1
a23 1
  if (fileName_.empty()) {
d26 2
a27 2
    assert (difPtr != 0);
    if (difPtr->GetDIType() != __LGFRDATAINTERFACESPECIALPURPOSEFROMFILE)
d38 1
a38 1
    witReadData (eater, fileName_.c_str());
d65 1
a65 1
std::string
d70 1
a70 1
  if (fileName_.empty()) return (std::string("(unnamed)"));
d76 1
a76 1
std::string
d101 1
a101 1
						       const std::string& fileName,
d151 2
a152 2
  LgFrStringVector partList( lps.parts() );
  int nParts( partList.size() );
d156 1
a156 1
  //sop.resize(nParts);
d159 1
a159 2
  int partNo = 0; // Pulled out of the for below by RW2STL
  for (partNo = 0;  partNo < nParts;  ++partNo) {
d188 1
a188 1
    = sop.size();
d205 1
a205 1
  //sod.resize(noTotalDemands);
d212 1
a212 2
    int k = 0; // Pulled out of the for below by RW2STL
    for (k = 0;  k < noDemandsByCurPart;  ++k) {
d246 1
a246 1
  assert (std::string (testFileName) == fileInst.fileName());
d252 1
a252 1
  assert (std::string (testFileName) == fileInst.title());
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d31 1
a31 1
     std::cerr << "Warning: LgFrInitialProblemFromFile is downcasting some kind of\n"
d33 1
a33 1
          << "The DIF had better be a subclass of DIFFFile" << std::endl;
@


