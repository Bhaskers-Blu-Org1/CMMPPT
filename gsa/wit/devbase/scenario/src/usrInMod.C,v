head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.47;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.54;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.54;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.37;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/usrInMod.h>
#include <scenario/src/machdep.h>
#include <scenario/src/scenario.h>


// updateFrom - This method is invoked when the algorithm solution has
// been updated.  We only actually want something to happen if the user
// has updated things.  If the output solution changes, we don't care as
// only input schedules should be subscribing to objects of this class.
void
LgFrUserInputModification::updateFrom (
   LgFrModel * ,
   void * a )
{
  if (a != 0)  {
    LgFrAlgorithm * algorithm = (LgFrAlgorithm *)a;
    
    if ( algorithm->GetAlgorithmType() == __LGFRUSERINPUTMODIFICATION ) 
      changed( 0 );
  }
}

// Get Working Implosion Problem
LgFrWorkingImplosionProblem &
LgFrUserInputModification::workingImplosionProblem()
const
{
   assert (wipPtr_ != 0);
   return *wipPtr_;
}


// Return pointer to the implode algorithm in the specified scenario.
LgFrAlgorithm *
LgFrUserInputModification::counterPart(
LgFrScenario & scenario)
const
{
   return &( scenario.userInputModification() );
}

// Default constructor
LgFrUserInputModification::LgFrUserInputModification()
: 
  LgFrAlgorithm(),
  wipPtr_(0),
  id_(__LGFRUSERINPUTMODIFICATION)
{
  assert (this->numberDependents() == 0);
  // All the work is done in the initialization part
}

// A Constructor
LgFrUserInputModification::LgFrUserInputModification(
   LgFrWorkingImplosionProblem & wip )
: 
  LgFrAlgorithm(),
  wipPtr_(&wip),
  id_(__LGFRUSERINPUTMODIFICATION)
{
  assert (this->numberDependents() == 0);
  // Register with WIP to be informed when working implosion problem changes
  wipPtr_->addDependent( this );
}


//Copy constructor
LgFrUserInputModification::LgFrUserInputModification 
   (const LgFrUserInputModification& source)
: 
  LgFrAlgorithm(source),
  wipPtr_(source.wipPtr_),
  id_(__LGFRUSERINPUTMODIFICATION)
{
  assert (this->numberDependents() == 0);
  // Register with WIP to be informed when working implosion problem changes
  if (wipPtr_!=0) wipPtr_->addDependent( this );
}

// Destructor
LgFrUserInputModification::~LgFrUserInputModification()
{
  // Unregister with WIP
  if (wipPtr_!=0) wipPtr_->removeDependent( this );
}

// Assignment
LgFrUserInputModification&
LgFrUserInputModification::operator=
(const LgFrUserInputModification& )
{
  // Difficult to implement, so wait till it is necessary
  abort();
  return *this;
}

#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrUserInputModification
void
LgFrUserInputModification::test()
{

  // Test default constructor
  LgFrUserInputModification defaultImplodeCtrl;
  assert (defaultImplodeCtrl.wipPtr_ == 0);

}

//
void
LgFrUserInputModification::contextTest(LgFrWorkingImplosionProblem &wip)
{
  // The data for this test should have come from
  // "/u/implode/wit/data/examples/diner12/wit.data"

  // Test non-default constructors
  LgFrUserInputModification anImplodeCtrl (wip);
  LgFrUserInputModification copiedImplodeCtrl (anImplodeCtrl);
  assert ((copiedImplodeCtrl.wipPtr_)->implosionMethod()
          == (anImplodeCtrl.wipPtr_)->implosionMethod());
}
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
#include <iostream.h>
d19 1
a19 1
  if (a != NULL)  {
d22 2
a23 2
    if ( algorithm->isA() == __LGFRUSERINPUTMODIFICATION ) 
      changed( NULL );
d32 1
a32 1
   assert (wipPtr_ != NULL);
a36 8
// Return object class identifier
isAReturnType
LgFrUserInputModification::isA()
const
{
   return id_;
}

d50 1
a50 1
  wipPtr_(NULL),
a78 1
  assert( id_ == source.id_ );
d81 1
a81 1
  if (wipPtr_!=NULL) wipPtr_->addDependent( this );
d88 1
a88 1
  if (wipPtr_!=NULL) wipPtr_->removeDependent( this );
d111 1
a111 2
  assert (defaultImplodeCtrl.wipPtr_ == NULL);
  assert (defaultImplodeCtrl.isA() == __LGFRUSERINPUTMODIFICATION );
a123 1
  assert (anImplodeCtrl.isA() == __LGFRUSERINPUTMODIFICATION );
a126 1
  assert (copiedImplodeCtrl.isA() == __LGFRUSERINPUTMODIFICATION );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 3
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <iostream>
d17 1
a17 1
  if (a != 0)  {
d20 2
a21 2
    if ( algorithm->GetAlgorithmType() == __LGFRUSERINPUTMODIFICATION ) 
      changed( 0 );
d30 1
a30 1
   assert (wipPtr_ != 0);
d35 8
d56 1
a56 1
  wipPtr_(0),
d85 1
d88 1
a88 1
  if (wipPtr_!=0) wipPtr_->addDependent( this );
d95 1
a95 1
  if (wipPtr_!=0) wipPtr_->removeDependent( this );
d118 2
a119 1
  assert (defaultImplodeCtrl.wipPtr_ == 0);
d132 1
d136 1
@

