head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.46;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.52;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.52;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.36;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_SHIPMENT_VOLUME_SCHEDULE_STRATEGY_H
#define LGFR_SHIPMENT_VOLUME_SCHEDULE_STRATEGY_H
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/demandSS.h>

// Schedule Strategy for a shipment schedule.
// The items are demands
// The timeVecs are the demands' shipmentVolume

// Schedules using this strategy will be updated with the new
// shipment solution after running implode.

// This class follows the Strategy Pattern

// Forward references
class LgFrImplode;
class LgFrSortingDemandScheduleFloat;
class LgFrLastProblemSolved;

class LgFrShipmentScheduleStrategy : 
   public LgFrDemandScheduleStrategy {

public:

  // Populate Schedule with itemTimeVecs
  virtual
     void
        kernalOfPopulate(
           LgFrSortingScheduleFloat& )
              const;


  // Make clone copy of this object
  virtual
     LgFrAttributeScheduleStrategy *
        clone() 
           const;

  // Make clone copy of this object with new Scenario
  virtual
     LgFrAttributeScheduleStrategy *
        clone(LgFrScenario &) 
           const;

  // Assignment operator
  LgFrShipmentScheduleStrategy &
    operator=(
	      const LgFrShipmentScheduleStrategy& rhs);

  // Copy constructor
  LgFrShipmentScheduleStrategy (
     const LgFrShipmentScheduleStrategy &);

  // Copy constructor with new Scenario
  LgFrShipmentScheduleStrategy (
     const LgFrShipmentScheduleStrategy &,
     LgFrScenario &);

  // Constructor
  LgFrShipmentScheduleStrategy (
     LgFrScenario & );

  // Destructor
  virtual
     ~LgFrShipmentScheduleStrategy ();

  // test this class
  static void test();

  // test LgFrShipmentScheduleStrategy methods.
  // Expects the data in testScenario to come from
  // "/u/implode/wit/data/examples/diner12/wit.data"
  static
  void
  contextTest
    (LgFrScenario			& testScenario,
     LgFrScenario			& testScenario2,
     LgFrLastProblemSolved		& lps,			// testScenario's 
     LgFrSetOfDemands			& sod);			// testScenario's 


protected:

  LgFrImplode * implodePtr_;

  // Default Constructor
  LgFrShipmentScheduleStrategy ();


private:
  const int id_;
};

#endif
@


1.1
log
@Initial revision
@
text
@d3 2
a44 8
           const;



  // Return Comparison Strategy Identifier
  virtual
     isAReturnType
        isA()
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d43 8
@

