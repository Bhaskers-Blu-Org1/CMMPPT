head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.40;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.45;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.45;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.32;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.41;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
#include <limits.h>

#include <scenario/src/model.h>
#include <scenario/src/lastPrbS.h>
#include <scenario/src/zeroTvFS.h>

// This file contains the implementation of 
// class LgFrSubscription 

// Initialize class high water mark
unsigned long LgFrSubscription::highWaterMark_ = 0;


//--------------------------------------------------------------------------
//
// Implementation of LgFrSubscription model methods
//
//--------------------------------------------------------------------------

// addDependent - Adds the object pointed to by m to the list of
// dependents of self.
void
LgFrSubscription::addDependent(
   LgFrModelClient * mc )
{
   modelClientList_.push_back( mc );
   mc->addDependence(*this);
}

// addDependents
void
LgFrSubscription::addDependents(
   const LgFrModelClientList & modelClientList )
{
  for( LgFrModelClientList::const_iterator it = modelClientList.begin();
        it != modelClientList.end();
        it++ )
    addDependent( *it );
}



// removeDependent - Removes the object pointed to by m to the list of
// dependents of self.
void
LgFrSubscription::removeDependent(
   LgFrModelClient * mc )
{
  for( LgFrModelClientList::iterator it = modelClientList_.begin();
        it != modelClientList_.end();
        it++ )
  {
    if( *it == mc )  
    {
        modelClientList_.erase( it );
        mc->removeDependence(*this);
        break;
    }
  }

//   assert( modelClientList_.size() >= 0 );
//   modelClientList_.remove( mc );
//   mc->removeDependence(*this);
}

void
LgFrSubscription::removeDependentFromHeterogeneousList(
   LgFrModelClient * mc )
{
    removeDependent( mc ); // removeDependent now handles different object types

}

// removeDependents
void
LgFrSubscription::removeDependents(
   const LgFrModelClientList &  modelClientList )
{
  for( LgFrModelClientList::const_iterator it = modelClientList.begin();
        it != modelClientList.end();
        it++ )
    removeDependent( *it );
}


// numberDependents - Returns number of subscribers to this object
size_t
LgFrSubscription::numberDependents( )
const
{
   return modelClientList_.size();
}

// Get list of dependents
const LgFrModelClientList &
LgFrSubscription::dependents()
const
{
  return modelClientList_;
}

// externalChange - Inform all dependent objects that this object has changed.
// This is done by invoking the dependent objects updateFrom method.
void
LgFrSubscription::externalChange(
   void * pData )
{
  incrementHighWaterMark();
  waterMark_ = highWaterMark();
  numberOfTimesVisited_ = waterMark_;

  for( LgFrModelClientList::const_iterator it = modelClientList_.begin();
        it != modelClientList_.end();
        it++ )
  {
      LgFrModelClient* mc = *it;
      mc->bringUpToDateAndCheckIfObjectHasChanged(waterMark_, this, pData);
  }

}


void
LgFrSubscription::changed(
   void * pData )
{
//  cout <<  std::endl << "in LgFrSubscript::changed for object " << (unsigned long)this <<  std::endl;
//  cout << "this object has " << modelClientList_.size() << " children" <<  std::endl;
  for( LgFrModelClientList::const_iterator it = modelClientList_.begin();
        it != modelClientList_.end();
        it++ )
  {
      LgFrModelClient* mc = *it;
      mc->bringUpToDateAndCheckIfObjectHasChanged(waterMark_, this, pData);
  }
//  LgFrModelClient* mc;
//  RWOrderedIterator next(modelClientList_);
//  while ((mc = (LgFrModelClient*)next())!=0)
//    mc->bringUpToDateAndCheckIfObjectHasChanged(waterMark_, this, pData);
}

// updateFrom - do local update and send changed() to all of the
//  objects that subscribe to you
void
LgFrSubscription::updateFrom (
   LgFrModel * p,
   void * d)
{
  // Do a local update if neccessary
  localUpdate(p, d);
  // Inform all objects dependent on this object that there has been
  // a change in the data
  
  changed( 0 );
}


void
LgFrSubscription::localUpdate (
   LgFrModel * /* p */,
   void *      /* d */ )
{
  // the user should overload this method if anything of significance is being
  //   done
}



// Get instance water mark
unsigned long
LgFrSubscription::waterMark() const
{
   return waterMark_;
}

// Set instance water mark
void
LgFrSubscription::waterMark(unsigned long waterMark)
{
   waterMark_ = waterMark;
}

// Get class high water mark
unsigned long
LgFrSubscription::highWaterMark()
{
   return highWaterMark_;
}

// increment class high water mark
void
LgFrSubscription::incrementHighWaterMark()
{
   if( highWaterMark_ == ULONG_MAX ) {
       std::cerr <<"LgFrSubscription::incrementHighWaterMark()" << std::endl
            <<"  highWaterMark is at maximum allowed value" << std::endl;
       abort();
   }
   highWaterMark_++;
}

// Use the high water mark to update all objects that I depend on
//  (i.e. all objects that I subscribe to)
int
LgFrSubscription::bringUpToDateAndCheckIfObjectHasChanged(unsigned long highWaterMark,
                                  LgFrModel* model,
                                  void* pData)
{
  // smart algorithm (recursive)
  // visit object(s) I subscribe to
  //    numberOfTimesVisited_ = highWaterMark
  // if any objects I subscribe to have changed (waterMark_ == highWaterMark)  {
  //    updateFrom
  //    return 1;
  // }
  // else  {
  //    return 0;
  // }
  

//  cout <<  std::endl << "object address is " << (unsigned long)this <<  std::endl;
//  cout << "high water mark is " << highWaterMark << " and local water mark is " << waterMark_ <<  std::endl;
//  cout << "this object has " << modelList_.size() << " parents and " << modelClientList_.size() << " children" <<  std::endl;

  // if this object subscribes to no one we don't have to do anything
  int changed = 0;
  if ( (modelList_.size() != 0) && (highWaterMark > numberOfTimesVisited_) )  
  {
    int hasObjectSubscribedToChanged = 0;
    for( LgFrModelClientList::const_iterator it = modelList_.begin();
          it != modelList_.end();
          it++ )
    {
        LgFrModelClient* mc = *it;
        if( mc->bringUpToDateAndCheckIfObjectHasChanged(highWaterMark, model, pData) )
          hasObjectSubscribedToChanged++;
    }

    //RWOrderedIterator next(modelList_);
    //while ((mc = (LgFrModel*)next())!=0) 
    //  if (mc->bringUpToDateAndCheckIfObjectHasChanged(highWaterMark, model, pData))
    //    hasObjectSubscribedToChanged++;
    
    numberOfTimesVisited_ = highWaterMark;
    if ( (waterMark_ < highWaterMark) && hasObjectSubscribedToChanged ) 
    {
      waterMark_ = highWaterMark;
      updateFrom(model, pData);
      changed = 1;
    }
  }
  else  {
    // check for the case where the object is the one that originated the
    //   external change or where the object has already been visited.
    if (waterMark_ == highWaterMark)
      changed = 1;
  }
  return changed;
}

//--------------------------------------------------------------------------
//
// Implementation of LgFrSubscription cannonical methods
//
//--------------------------------------------------------------------------


// Assignment
LgFrSubscription&
LgFrSubscription::operator=
(const LgFrSubscription& rhs )
{

  // This could be tricky. Needs to be looked into since RWModel
  // does not have an assignment operator.

  if (this != &rhs) {           // Check for assignment to self
  }
  return *this;

}


// Default constructor
LgFrSubscription::LgFrSubscription(unsigned long waterMark)
:  
   waterMark_(waterMark),
   numberOfTimesVisited_(waterMark),
   modelList_(),
   modelClientList_()
    
{
  // nothing to do
}


//Copy constructor
LgFrSubscription::LgFrSubscription 
   (const LgFrSubscription& rhs)
:  
   waterMark_(rhs.waterMark_),
   numberOfTimesVisited_(rhs.numberOfTimesVisited_),
   modelList_(),
   modelClientList_()
{
  // nothing to do
}

// Destructor
LgFrSubscription::~LgFrSubscription()
{
  assert( numberDependents() == 0 );
}



//--------------------------------------------------------------------------
//
// Implementation of LgFrSubscription modelClient methods
//
//--------------------------------------------------------------------------


// deleteAndRemoveDependence - Removes the dependence this object 
// has on object m. If m has no other subscribers, then it is deleted.
void
LgFrSubscription::deleteAndRemoveDependence(
   LgFrModel * m )
{
   // Remove this objects subscription to m.
   m->removeDependent( this );

   // Is anything else subscribing to m?
   if ( m->numberDependents() == 0 ) {

      // Nothing else is dependent on m, so it no longer has a reason to live.
      delete m;

   }
   
}

// insert model into list of the modelClient depenencies
void
LgFrSubscription::addDependence(
   LgFrModel & m )
{
   modelList_.push_back( &m );
}

// remove model from list of the modelClient depenencies
void
LgFrSubscription::removeDependence(
   const LgFrModel & m )
{
  for( LgFrModelClientList::iterator it = modelList_.begin();
        it != modelList_.end();
        it++ )
  {
    if( *it == &m )  
    {
        modelList_.erase( it );
        break;
    }
  }
}


//--------------------------------------------------------------------------
//
// Implementation of of Test methods
//
//--------------------------------------------------------------------------


#ifdef NDEBUG
#undef NDEBUG
#endif

// test LgFrSubscription
void
LgFrSubscription::test()
{


  // Test default constructor
  LgFrZeroTimeVecFilterStrategy m;
  assert (m.dependents().size() == 0);
  assert (m.numberDependents() == 0);

  // Test copy constructor
  LgFrZeroTimeVecFilterStrategy mCopy(m);

  // Test assignment
  m = mCopy; 
  
  // Test addDependent
  LgFrZeroTimeVecFilterStrategy mc; 
  m.addDependent( &mc );
  assert (m.dependents().size() == 1);
  assert (m.numberDependents() == 1);
  m.addDependent( &mc );
  assert (m.dependents().size() == 2);
  assert (m.numberDependents() == 2);

  // Test changed
  m.externalChange( 0 );

  // Test remove dependents
  LgFrModelClientList mcl = m.dependents();
  m.removeDependents(mcl);
  assert (m.dependents().size() == 0);
  assert (m.numberDependents() == 0);

  // Test add dependents
  m.addDependents(mcl);
  assert (m.dependents().size() == 2);
  assert (m.numberDependents() == 2);

  // Test removeDependent
  m.removeDependent( &mc );
  assert (m.dependents().size() == 1);
  assert (m.numberDependents() == 1);
  m.removeDependent( &mc );
  assert (m.dependents().size() == 0);
  assert (m.numberDependents() == 0);


  {
  LgFrLastProblemSolved * m = new LgFrLastProblemSolved;

  // Test default constructor
  LgFrZeroTimeVecFilterStrategy mc;

  // Test copy constructor
  LgFrZeroTimeVecFilterStrategy mcCopy(mc); 

  // Test assignment
  mc = mcCopy; 
  
  // Test updateFrom by invoking model's changed method
  m->addDependent( &mc );
  m->externalChange( 0 );

  // test Remove dependence
  mc.deleteAndRemoveDependence( m );
  }

  
  // test out high water update code
  {

    //                 e
    //               /   \
    //              d     b
    //               \   / \
    //                 c    a
    //
    //  b subscribes to a and c
    //  e subscribes to b and d
    //  d subscribes to c
    //  we update a and want to see c, {b, d}, and e updated
    //  to prove this works, add some debug code in
    //    LgFrFilterStrategy::updateFrom
    
    
  LgFrZeroTimeVecFilterStrategy a;
  LgFrZeroTimeVecFilterStrategy b;
  LgFrZeroTimeVecFilterStrategy c;
  LgFrZeroTimeVecFilterStrategy d;
  LgFrZeroTimeVecFilterStrategy e;

/*  
  cout << "a is " << (unsigned long)&a <<  std::endl;
  cout << "b is " << (unsigned long)&b <<  std::endl;
  cout << "c is " << (unsigned long)&c <<  std::endl;
  cout << "d is " << (unsigned long)&d <<  std::endl;
  cout << "e is " << (unsigned long)&e <<  std::endl;
*/
  
  a.addDependent(&b);
  c.addDependent(&b);
  c.addDependent(&d);  
  b.addDependent(&e);
  d.addDependent(&e);
  
//  cout << "a changes (update path should be b->e)" <<  std::endl;  
  a.externalChange( 0 );
  
  // do an update at C
//  cout << "c changes (update path should be b->d->e)" <<  std::endl;    
  c.externalChange( 0 );

  // do an update at D
//  cout << "d changes (update path should be e)" <<  std::endl;      
  d.externalChange( 0 );
  
  b.removeDependent(&e);
  d.removeDependent(&e);
  c.removeDependent(&d);
  c.removeDependent(&b);
  a.removeDependent(&b);  
  }

  // test out high water update code
  {

    // to see this code really work uncomment the couts here
    //   and in LgFrFilterStrategy::localUpdate

    //                 e
    //                   \
    //              d     b
    //               \   / \
    //                 c    a
    //
    //  b subscribes to a and c
    //  e subscribes to b and d
    //  d subscribes to c
    //  we update a and want to see c, b, e and d updated
    //  to prove this works, add some debug code in    
    //    LgFrFilterStrategy::updateFrom
    
  LgFrZeroTimeVecFilterStrategy a;
  LgFrZeroTimeVecFilterStrategy b;
  LgFrZeroTimeVecFilterStrategy c;
  LgFrZeroTimeVecFilterStrategy d;
  LgFrZeroTimeVecFilterStrategy e;

/*
  cout << "a is " << (unsigned long)&a <<  std::endl;
  cout << "b is " << (unsigned long)&b <<  std::endl;
  cout << "c is " << (unsigned long)&c <<  std::endl;
  cout << "d is " << (unsigned long)&d <<  std::endl;
  cout << "e is " << (unsigned long)&e <<  std::endl;  
*/
  
  a.addDependent(&b);
  c.addDependent(&b);
  c.addDependent(&d);  
  b.addDependent(&e);
  
//  cout << "a changes (update path should be b->e)" <<  std::endl;      
  a.externalChange( 0 );

  b.removeDependent(&e);
  c.removeDependent(&d);
  c.removeDependent(&b);
  a.removeDependent(&b);  
  
  }
}
@


1.1
log
@Initial revision
@
text
@d1 3
d29 1
a29 1
   modelClientList_.insert( mc );
d38 4
a41 3
  LgFrModelClient* mc;
  RWOrderedIterator next(modelClientList);
  while ((mc = (LgFrModelClient*)next())!=0) addDependent( mc );
d52 15
a66 3
   assert( modelClientList_.entries() >= 0 );
   modelClientList_.remove( mc );
   mc->removeDependence(*this);
d73 1
a73 1
   assert( modelClientList_.entries() >= 0 );
a74 18
   // as we have a heterogeneous list, we can't use the remove() method
   //  as our isEqual() assumes that the key is the same type as the
   //  objects in the list
   LgFrModelClient* item;
   RWOrderedIterator next(modelClientList_);
   size_t index = 0;
   int done = 0;
   while ( ((item = (LgFrModelClient*)next())!=0) && !done )  {
       if (item->isA() == mc->isA())  {
	   // we can see if we want to remove it as it is of the same type
	   if (mc->isEqual(item)) {
	       modelClientList_.removeAt(index);
	       done++;
	   }
       }
       index++;
   }
   mc->removeDependence(*this);
d82 4
a85 3
  LgFrModelClient* mc;
  RWOrderedIterator next(modelClientList);
  while ((mc = (LgFrModelClient*)next())!=0) removeDependent( mc );
d94 1
a94 1
   return modelClientList_.entries();
d114 9
a122 4
  LgFrModelClient* mc;
  RWOrderedIterator next(modelClientList_);
  while ((mc = (LgFrModelClient*)next())!=0)
    mc->bringUpToDateAndCheckIfObjectHasChanged(waterMark_, this, pData);
d130 13
a142 6
//  cout << endl << "in LgFrSubscript::changed for object " << (unsigned long)this << endl;
//  cout << "this object has " << modelClientList_.entries() << " children" << endl;
  LgFrModelClient* mc;
  RWOrderedIterator next(modelClientList_);
  while ((mc = (LgFrModelClient*)next())!=0)
    mc->bringUpToDateAndCheckIfObjectHasChanged(waterMark_, this, pData);
d157 1
a157 1
  changed( NULL );
d198 2
a199 2
       cerr <<"LgFrSubscription::incrementHighWaterMark()" <<endl
            <<"  highWaterMark is at maximum allowed value" <<endl;
d224 3
a226 3
//  cout << endl << "object address is " << (unsigned long)this << endl;
//  cout << "high water mark is " << highWaterMark << " and local water mark is " << waterMark_ << endl;
//  cout << "this object has " << modelList_.entries() << " parents and " << modelClientList_.entries() << " children" << endl;
d230 2
a231 3
  if ( (modelList_.entries() != 0) && (highWaterMark > numberOfTimesVisited_) )  {
    LgFrModel* mc;          
    RWOrderedIterator next(modelList_);
d233 13
a245 3
    while ((mc = (LgFrModel*)next())!=0) 
      if (mc->bringUpToDateAndCheckIfObjectHasChanged(highWaterMark, model, pData))
        hasObjectSubscribedToChanged++;
d248 2
a249 1
    if ( (waterMark_ < highWaterMark) && hasObjectSubscribedToChanged ) {
d351 1
a351 1
   modelList_.append( &m );
d359 10
a368 2
   assert( modelList_.entries() > 0 );
   modelList_.remove( &m );
d391 1
a391 1
  assert (m.dependents().entries() == 0);
d403 1
a403 1
  assert (m.dependents().entries() == 1);
d406 1
a406 1
  assert (m.dependents().entries() == 2);
d410 1
a410 1
  m.externalChange( NULL );
d415 1
a415 1
  assert (m.dependents().entries() == 0);
d420 1
a420 1
  assert (m.dependents().entries() == 2);
d425 1
a425 1
  assert (m.dependents().entries() == 1);
d428 1
a428 1
  assert (m.dependents().entries() == 0);
d446 1
a446 1
  m->externalChange( NULL );
d477 5
a481 5
  cout << "a is " << (unsigned long)&a << endl;
  cout << "b is " << (unsigned long)&b << endl;
  cout << "c is " << (unsigned long)&c << endl;
  cout << "d is " << (unsigned long)&d << endl;
  cout << "e is " << (unsigned long)&e << endl;
d490 2
a491 2
//  cout << "a changes (update path should be b->e)" << endl;  
  a.externalChange( NULL );
d494 2
a495 2
//  cout << "c changes (update path should be b->d->e)" << endl;    
  c.externalChange( NULL );
d498 2
a499 2
//  cout << "d changes (update path should be e)" << endl;      
  d.externalChange( NULL );
d534 5
a538 5
  cout << "a is " << (unsigned long)&a << endl;
  cout << "b is " << (unsigned long)&b << endl;
  cout << "c is " << (unsigned long)&c << endl;
  cout << "d is " << (unsigned long)&d << endl;
  cout << "e is " << (unsigned long)&e << endl;  
d546 2
a547 2
//  cout << "a changes (update path should be b->e)" << endl;      
  a.externalChange( NULL );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 3
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
d26 1
a26 1
   modelClientList_.push_back( mc );
d35 3
a37 4
  for( LgFrModelClientList::const_iterator it = modelClientList.begin();
        it != modelClientList.end();
        it++ )
    addDependent( *it );
d48 3
a50 15
  for( LgFrModelClientList::iterator it = modelClientList_.begin();
        it != modelClientList_.end();
        it++ )
  {
    if( *it == mc )  
    {
        modelClientList_.erase( it );
        mc->removeDependence(*this);
        break;
    }
  }

//   assert( modelClientList_.size() >= 0 );
//   modelClientList_.remove( mc );
//   mc->removeDependence(*this);
d57 1
a57 1
    removeDependent( mc ); // removeDependent now handles different object types
d59 18
d84 3
a86 4
  for( LgFrModelClientList::const_iterator it = modelClientList.begin();
        it != modelClientList.end();
        it++ )
    removeDependent( *it );
d95 1
a95 1
   return modelClientList_.size();
d115 4
a118 9

  for( LgFrModelClientList::const_iterator it = modelClientList_.begin();
        it != modelClientList_.end();
        it++ )
  {
      LgFrModelClient* mc = *it;
      mc->bringUpToDateAndCheckIfObjectHasChanged(waterMark_, this, pData);
  }

d127 5
a131 12
//  cout << "this object has " << modelClientList_.size() << " children" << endl;
  for( LgFrModelClientList::const_iterator it = modelClientList_.begin();
        it != modelClientList_.end();
        it++ )
  {
      LgFrModelClient* mc = *it;
      mc->bringUpToDateAndCheckIfObjectHasChanged(waterMark_, this, pData);
  }
//  LgFrModelClient* mc;
//  RWOrderedIterator next(modelClientList_);
//  while ((mc = (LgFrModelClient*)next())!=0)
//    mc->bringUpToDateAndCheckIfObjectHasChanged(waterMark_, this, pData);
d146 1
a146 1
  changed( 0 );
d215 1
a215 1
//  cout << "this object has " << modelList_.size() << " parents and " << modelClientList_.size() << " children" << endl;
d219 3
a221 2
  if ( (modelList_.size() != 0) && (highWaterMark > numberOfTimesVisited_) )  
  {
d223 3
a225 13
    for( LgFrModelClientList::const_iterator it = modelList_.begin();
          it != modelList_.end();
          it++ )
    {
        LgFrModelClient* mc = *it;
        if( mc->bringUpToDateAndCheckIfObjectHasChanged(highWaterMark, model, pData) )
          hasObjectSubscribedToChanged++;
    }

    //RWOrderedIterator next(modelList_);
    //while ((mc = (LgFrModel*)next())!=0) 
    //  if (mc->bringUpToDateAndCheckIfObjectHasChanged(highWaterMark, model, pData))
    //    hasObjectSubscribedToChanged++;
d228 1
a228 2
    if ( (waterMark_ < highWaterMark) && hasObjectSubscribedToChanged ) 
    {
d330 1
a330 1
   modelList_.push_back( &m );
d338 2
a339 10
  for( LgFrModelClientList::iterator it = modelList_.begin();
        it != modelList_.end();
        it++ )
  {
    if( *it == &m )  
    {
        modelList_.erase( it );
        break;
    }
  }
d362 1
a362 1
  assert (m.dependents().size() == 0);
d374 1
a374 1
  assert (m.dependents().size() == 1);
d377 1
a377 1
  assert (m.dependents().size() == 2);
d381 1
a381 1
  m.externalChange( 0 );
d386 1
a386 1
  assert (m.dependents().size() == 0);
d391 1
a391 1
  assert (m.dependents().size() == 2);
d396 1
a396 1
  assert (m.dependents().size() == 1);
d399 1
a399 1
  assert (m.dependents().size() == 0);
d417 1
a417 1
  m->externalChange( 0 );
d462 1
a462 1
  a.externalChange( 0 );
d466 1
a466 1
  c.externalChange( 0 );
d470 1
a470 1
  d.externalChange( 0 );
d518 1
a518 1
  a.externalChange( 0 );
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d130 2
a131 2
//  cout <<  std::endl << "in LgFrSubscript::changed for object " << (unsigned long)this <<  std::endl;
//  cout << "this object has " << modelClientList_.size() << " children" <<  std::endl;
d198 2
a199 2
       std::cerr <<"LgFrSubscription::incrementHighWaterMark()" << std::endl
            <<"  highWaterMark is at maximum allowed value" << std::endl;
d224 3
a226 3
//  cout <<  std::endl << "object address is " << (unsigned long)this <<  std::endl;
//  cout << "high water mark is " << highWaterMark << " and local water mark is " << waterMark_ <<  std::endl;
//  cout << "this object has " << modelList_.size() << " parents and " << modelClientList_.size() << " children" <<  std::endl;
d477 5
a481 5
  cout << "a is " << (unsigned long)&a <<  std::endl;
  cout << "b is " << (unsigned long)&b <<  std::endl;
  cout << "c is " << (unsigned long)&c <<  std::endl;
  cout << "d is " << (unsigned long)&d <<  std::endl;
  cout << "e is " << (unsigned long)&e <<  std::endl;
d490 1
a490 1
//  cout << "a changes (update path should be b->e)" <<  std::endl;  
d494 1
a494 1
//  cout << "c changes (update path should be b->d->e)" <<  std::endl;    
d498 1
a498 1
//  cout << "d changes (update path should be e)" <<  std::endl;      
d534 5
a538 5
  cout << "a is " << (unsigned long)&a <<  std::endl;
  cout << "b is " << (unsigned long)&b <<  std::endl;
  cout << "c is " << (unsigned long)&c <<  std::endl;
  cout << "d is " << (unsigned long)&d <<  std::endl;
  cout << "e is " << (unsigned long)&e <<  std::endl;  
d546 1
a546 1
//  cout << "a changes (update path should be b->e)" <<  std::endl;      
@


