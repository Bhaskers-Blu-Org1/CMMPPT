head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.28;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.36;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.25;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@
#include <math.h>
#include <assert.h>

#include <scenario/src/collflt.h>
#include <scenario/src/idnumber.h>

float LgFrCollectableFloat::fltEps = .00001f;



bool
LgFrCollectableFloat::operator==(
  const LgFrCollectableFloat& c) 
const
{ 
  return isEqual(&c);
}

int
LgFrCollectableFloat::compareTo(
  const LgFrCollectableFloat* c) 
const
{ 
  return
    (
      ( fabs( value() - ((const LgFrCollectableFloat*)c)->value() ) < fltEps )
     ? 0
     : ( ( value() < ((const LgFrCollectableFloat*)c)->value() )
	? -1 
	: 1
	)
     );
}


bool
LgFrCollectableFloat::isEqual(
  const LgFrCollectableFloat* c) 
const
{ 
  return compareTo(c) == 0;
}


float
LgFrCollectableFloat::value()
const
{ 
  return value_;
}

float
LgFrCollectableFloat::value(
  float val)
{ 
  float temp = value_;
  value_ = val;
  return temp;
}


// Destructor
LgFrCollectableFloat::~LgFrCollectableFloat()
{
  // Nothing to do here
}

// Assignment operator.
LgFrCollectableFloat&
LgFrCollectableFloat::operator=(
  const LgFrCollectableFloat& rhs)
{
  if (this != &rhs) {           // Check for assignment to self
     
     value_ = rhs.value_;

  }
  return *this;
}

// Copy constructor
LgFrCollectableFloat::LgFrCollectableFloat(
  const LgFrCollectableFloat& source)
:
   value_(source.value_)
{
  // Nothing to do here
}


// Preferred Constructor
LgFrCollectableFloat::LgFrCollectableFloat(
   float val )
:
   value_( val )
{
   // Nothing to do here
}

// Default Constructor
LgFrCollectableFloat::LgFrCollectableFloat()
:
   value_(0)
{
   // Nothing to do here
}     

#ifdef NDEBUG
#undef NDEBUG
#endif
// Tests this class.  Only returns if all tests passed
void
LgFrCollectableFloat::test()
{

  LgFrCollectableFloat zero;
  LgFrCollectableFloat one(1.0);
  LgFrCollectableFloat two(2.0);
  LgFrCollectableFloat twoC(two);

  assert( two.compareTo(&twoC) == 0 );
  assert( one.compareTo(&two)  < 0 );
  assert( one.compareTo(&zero) > 0 );


  assert( two.isEqual(&twoC) );
  assert(!two.isEqual(&zero) );

  assert( two==twoC );

  assert( fabs( two.value() - 2. ) < fltEps );

}
@


1.1
log
@Initial revision
@
text
@d1 1
a10 5
// isA(), newSpecies(), copy(), and some other things are defined
// by this macro
RWDEFINE_COLLECTABLE(LgFrCollectableFloat, __LGFRCOLLECTABLEFLOAT)


d12 1
a12 1
RWBoolean
d22 1
a22 1
  const RWCollectable* c) 
a24 1
  assert( c->isA() == __LGFRCOLLECTABLEFLOAT );
d37 1
a37 1
RWBoolean
d39 1
a39 1
  const RWCollectable* c) 
a62 9
unsigned
LgFrCollectableFloat::hash() 
const
{ 
   return (unsigned)(10.*value()); 
}



a74 1
     (this->RWCollectable::operator= ) (rhs);
a85 1
   RWCollectable(source),
a95 1
   RWCollectable(),
a103 1
   RWCollectable(),
a120 3

  // Test isA method
  assert (zero.isA() == __LGFRCOLLECTABLEFLOAT);
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 1

d10 5
d16 1
a16 1
bool
d26 1
a26 1
  const LgFrCollectableFloat* c) 
d29 1
d42 1
a42 1
bool
d44 1
a44 1
  const LgFrCollectableFloat* c) 
d68 9
d89 1
d101 1
d112 1
d121 1
d139 3
@

