head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.34;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.41;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.41;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.29;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LgFrDataInterfaceImplementationFromWitRun_h
#define LgFrDataInterfaceImplementationFromWitRun_h
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.

// This file contains the class: 
// LgFrDataInterfaceImplementationFromWitRun

#include <wit/src/wit.h>

#include <scenario/src/dif.h>
#include <scenario/src/difImpl.h>

//---------------------------------------------------------------------------------------
//
// Forward references
//
//---------------------------------------------------------------------------------------
class LgFrWitRunVeneer;
class LgFrDataInterfaceEssentials;           

//---------------------------------------------------------------------------------------
//
// All gobal functions declarations
//
//---------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------
// To register all global functions for this class
//---------------------------------------------------------------------------------------
void
registerWitRunDifImpFunctions(LgFrDataInterfaceImplementation *dImpWR);

//---------------------------------------------------------------------------------------
// To create a LgFrDataInterfaceImplementationFromWitRun object
//---------------------------------------------------------------------------------------
LgFrDataInterfaceImplementation * 
createWitRunDifImp(LgFrWitRunVeneer * witRunVeneerPtr);

//---------------------------------------------------------------------------------------
//
// Global functions to get "parts"
//
//---------------------------------------------------------------------------------------
// Return: a LgFrPartVector object (vector of parts in general)
// used by difWitRunGetRawPart, difWitRunGetProductParts, difWitRunGetCapacityParts to get different
// kinds of parts from WIT.
//---------------------------------------------------------------------------------------
void *
difWitRunGetParts(
    const LgFrDataInterfaceImplementation *dImp, 
    const LgFrDataInterfaceEssentials *difEssenPtr,
    witAttr ma, 
    LgFrError& status);

//---------------------------------------------------------------------------------------
// difWitRunGetRawPart global function (registering in the attribute table).
// Get raw parts from WIT and insert them into set_of_part
// Return: a LgFrPartVector object (vector of raw parts).
//---------------------------------------------------------------------------------------
void *
difWitRunGetRawParts(
    const LgFrDataInterfaceImplementation * dImp,
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunProductPart global function (registering in the attribute table).
// Get product parts from WIT and insert it into set_of_part
// Return: a LgFrPartVector object (vector of producible parts)
//---------------------------------------------------------------------------------------
void*
difWitRunGetProductParts(
    const LgFrDataInterfaceImplementation * dImp,
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetCapacityParts global function (registering in the attribute table).
// Get capacity parts from WIT and insert it into set_of_part
// Return: a LgFrPartVector object (vector of capacities).
//---------------------------------------------------------------------------------------
void*
difWitRunGetCapacityParts(
    const LgFrDataInterfaceImplementation * dImp,
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0); 

//---------------------------------------------------------------------------------------
//
// Global functions to get part attributes.
//
//---------------------------------------------------------------------------------------
// difWitRunGetPartUnitCost global function (registered in the attribute table)
// it returns a LgFrFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetPartUnitCost(
  const LgFrDataInterfaceImplementation * dImp,
  const LgFrItemPtrVector* itemPtrOrdVecPtr,
  LgFrError & status,
  const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetPartProcCost global function (registered in the attribute table).
// It returns a LgFrFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetPartProcCost(
    const LgFrDataInterfaceImplementation * difImp,
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetPartConstrained global function (registered in the attribute table).
// It returns a LgFrIntVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetPartConstrained(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);               

//---------------------------------------------------------------------------------------
// difWitRunGetPartProcLeadTime global function (registered in the attribute table).
// It returns a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetPartProcLeadTime(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// Global function to get some part attributes, such as,
// Obj1ScrapCost, Obj1StockCost, and SupplyVol
// (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
extern "C" {typedef witReturnCode (STDCALL * apiFuncGetPartAttrTimeVecFloat) 
          (WitRun * const, const char * const, float * * );}

extern "C" {typedef witReturnCode (STDCALL * apiFuncGetDemandAttrTimeVecFloat) 
       (WitRun * const, const char * const, const char * const, float * *);}

extern "C" {typedef witReturnCode (STDCALL * apiFuncGetDemandAttrTimeVecInt)
       (WitRun * const, const char * const, const char * const, int * *);}

void *
difWitRunGetDemandAttrTimeVecInt(
    const LgFrDataInterfaceImplementation * dImp,
      const LgFrItemPtrVector* itemPtrOrdVecPtr,
      apiFuncGetDemandAttrTimeVecInt apiFunc,
             LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

void *
difWitRunGetPartAttrTimeVecFloat(
    const LgFrDataInterfaceImplementation * dImp,
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    apiFuncGetPartAttrTimeVecFloat apiFunc,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetPartObj1ScrapCost global function (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetPartObj1ScrapCost(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetPartObj1StockCost global function (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetPartObj1StockCost(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetPartsupplyVol global function (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetPartSupplyVol(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//------------------------------------------------------------------------------
// difWitRunGetProductYield global function (registered in the attribute table).
// Return: a LgFrIntVector object
//------------------------------------------------------------------------------
void *
difWitRunGetProductYield(
    const LgFrDataInterfaceImplementation * dImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//------------------------------------------------------------------------------
// difWitRunGetProductYield global function (registered in the attribute table).
// Return: a LgFrTimeVectorFloat object
//------------------------------------------------------------------------------
void *
difWitRunGetProductYieldFloat(
    const LgFrDataInterfaceImplementation * dImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------
// difWitRunGetProductCycleTime global function
// (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------
void *
difWitRunGetProductCycleTime(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetProductObj1ProdCost global function (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetProductObj1ProdCost(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------
// difWitRunGetProductMinLotSize global function
// (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------
void *
difWitRunGetProductMinLotSize(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------
// difWitRunGetProductIncLotSize global function
// (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------
void *
difWitRunGetProductIncLotSize(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);


//--------------------------------------------------------------------
//  
//   Global functions to obtain demands
//
//-------------------------------------------------------------------

//---------------------------------------------------------------------------------------
// difWitRunGetCommittedDemands global function (registering in the attribute table).
// Get committed demands from WIT and insert them into set_of_demand
// Return: a LgFrDemandVector object (vector of committed demands).
//---------------------------------------------------------------------------------------
void *
difWitRunGetCommittedDemands(
  const LgFrDataInterfaceImplementation * dImp,
  const LgFrItemPtrVector* itemPtrOrdVecPtr,
  LgFrError & status,
  const LgFrDataInterfaceEssentials * difEssenPtr = 0); 

//---------------------------------------------------------------------------------------
// difWitRunGetNewOpportunityDemands global function (registering in the attribute table).
// Get new opportunity demands from WIT and insert them into set_of_demand
// Return: a LgFrDemandVector object (vector of new opportunity demands).
//---------------------------------------------------------------------------------------
void *
difWitRunGetNewOpportunityDemands(
    const LgFrDataInterfaceImplementation * dImp,
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0); 

//---------------------------------------------------------------------------------------
// difWitRunGetFirmForecastDemands global function (registering in the attribute table).
// Get firm forcast demands from WIT and insert them into set_of_demand
// Return: a LgFrDemandVector object (vector of firm forcast demands).
//---------------------------------------------------------------------------------------
void *
difWitRunGetFirmForecastDemands(
    const LgFrDataInterfaceImplementation * dImp,
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetRiskForecastDemands global function (registering in the attribute table).
// Get risk forcast demands from WIT and insert them into set_of_demand
// Return: a LgFrDemandVector object (vector of risk forcast demands).
//---------------------------------------------------------------------------------------
void *
difWitRunGetRiskForecastDemands(
    const LgFrDataInterfaceImplementation * dImp,
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

// ------------------------------------------------------------------------
//
// Global functions to obtain demands attributes
//
// ------------------------------------------------------------------------

//---------------------------------------------------------------------------------------
// difWitRunGetDemandGrossRev global function (registering in the attribute table).
// Compute total demand gross revenue with data from WIT.
// Return: a LgFrFloatVector object (vector of demand gross revenues).
//---------------------------------------------------------------------------------------
void *
difWitRunGetDemandGrossRev(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// Global function to get some demand attributes, such as,
// demandVol, getObj1CumShipReward, getObj1ShipReward
// (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetDemandAttrTimeVecFloat(
    const LgFrDataInterfaceImplementation * dImp,
      const LgFrItemPtrVector* itemPtrOrdVecPtr,
      apiFuncGetDemandAttrTimeVecFloat apiFunc,
             LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetDemandVol global function (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetDemandVol(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunDemanObj1CumShipReward global function (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetDemandObj1CumShipReward(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunDemanObj1ShipReward global function (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetDemandObj1ShipReward(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//---------------------------------------------------------------------------------------
// difWitRunGetDemanPriority global function (registered in the attribute table).
// Return: a LgFrTimeVecFloatVector object.
//
// Note that priority should be a TimeVecInt, and not  TimeVecFloat.
// should return LgFrVectorTimeVecInt jmt 7/21/95, need to implement TimeVectInt class.
// Now, simply returns a LgFrTimeVecFloatVector object.
//---------------------------------------------------------------------------------------
void *
difWitRunGetDemandPriority(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
    LgFrError & status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

//--------------------------------------------------------------------
//  
//   Global function to define BOM
//
//-------------------------------------------------------------------
void*
difWitRunDefineBom(
    const LgFrDataInterfaceImplementation * difImp, 
    const LgFrItemPtrVector*, //  itemPtrOrdVecPtr,
    LgFrError &, // status,
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);

// end of global functions declarations
 
//---------------------------------------------------------------------
//   Data interface from Wit Run
//
//   LgFrDataInterfaceImplementationFromWitRun class
//
//---------------------------------------------------------------------

class LgFrDataInterfaceImplementationFromWitRun 
: public LgFrDataInterfaceImplementation {

    virtual int GetDIIType() const { return __LGFRDATAINTERFACEIMPLEMENTATIONFROMWITRUN; }
//private:
protected:  
  static const std::string defaultRiskForecast;
  static const std::string defaultFirmForecast;
  static const std::string defaultNewOps;
  static const std::string defaultCommitted;

public:

  //-------------------------------------------------------------------
  //  
  //   Methods to obtain global attributes
  //
  //-------------------------------------------------------------------

  // Return problem title
  // This should be the name of the underlying dataset.
  virtual
    std::string
      title(const LgFrDataInterfaceEssentials * = 0 )
        const;

  // Make a problem title
  // This should be the name of the underlying dataset.
  virtual
    std::string
      makeTitle(const LgFrDataInterfaceEssentials * = 0 )
        const;

  //--------------------------------------------------------------------
  //  
  //   Methods to query demands
  //
  //-------------------------------------------------------------------

  // return true if demand name matches compareExpression
  virtual
    bool isADemand(
      std::string demandedPartName,
      std::string demandName,
      std::string compareExprssion) const;                      

  virtual
    bool isANewOpDemand(
      std::string demandedPartName,
      std::string demandName) const;

  virtual
    bool isAFirmForecastDemand(
      std::string demandedPartName,
      std::string demandName) const;

 virtual 
   bool isARiskForecastDemand(
     std::string demandedPartName,
     std::string demandName) const;

  virtual
    bool isACommittedDemand(
      std::string demandedPartName,
      std::string demandName) const;

  //--------------------------------------------------------------------
  //
  //   Methods to manage resources
  //
  //-------------------------------------------------------------------

  // Free up extra resources
  virtual
    void
      deleteExtraResources();


  //--------------------------------------------------------------------
  //  
  //   Standard class methods
  //
  //-------------------------------------------------------------------

  // Make clone copy of this object
  virtual
    LgFrDataInterfaceImplementation *
      clone()
        const;

  // Assignment operator.
  LgFrDataInterfaceImplementationFromWitRun&
    operator=(
      const LgFrDataInterfaceImplementationFromWitRun& rhs);

  // Copy constructor
  LgFrDataInterfaceImplementationFromWitRun(
    const LgFrDataInterfaceImplementationFromWitRun& source);

  // Preferred Constructor
  LgFrDataInterfaceImplementationFromWitRun(
     WitRun * witRun,
     const std::string & riskForecastDemandNamePattern = defaultRiskForecast,
     const std::string & firmForecastDemandNamePattern = defaultFirmForecast,
     const std::string & newOpDemandNamePattern        = defaultNewOps);
  
  // Destructor
  virtual
     ~LgFrDataInterfaceImplementationFromWitRun();

  // Tests this class.  Only returns if all tests passed
  static
    void
      test ();

  // Context test
  static
    void
      contextTest
        ( LgFrDataInterface        * tdif1Ptr,        // testScenario1's
          LgFrLastProblemSolved    & lps,  	      // testScenario1's
          LgFrDataInterface        * ts1dupDifPtr,    // testScenario1dup's
          LgFrDataInterface        * tdif2Ptr,        // testScenario2's
          const LgFrScenario       * scen);	      // testScenario1's

// protected:

  virtual
    /* const */ WitRun *
      constWitRun(const LgFrDataInterfaceEssentials* = 0) 
        const;

protected:

  virtual
    WitRun *
      mutableWitRun(const LgFrDataInterfaceEssentials* = 0);

  // Returns true if witRunVeneer exists.
  // Returns false if witRun needs to be populated with data.
  virtual
    bool
      validWitRun()
        const;

  // Free the memory resources associated with the witRun
  virtual
    void
      deleteWitRun();

  // Default Constructor
  LgFrDataInterfaceImplementationFromWitRun();

  std::string riskForecastRE_;
  std::string firmForecastRE_;
  std::string newOpsRE_;

private:

  LgFrWitRunVeneer * witRunVeneerPtr_;


  // Set problem title (not allowed since the title is the dataset name and can not be set
  // arbitrarily).
  virtual
    void
      title(std::string);

};


// demand in general
// Return: a LgFrDemandVector object (vector of demands in general)
// used by commited, newOps, firmForecast, riskForecast to get different
// kinds of demands from WIT.
void*
  difWitRunGetDemands(
    const LgFrDataInterfaceImplementation * dImp,
    LgFrDataInterfaceEssentials * difEssenPtr,
    bool
     ( LgFrDataInterfaceImplementationFromWitRun::*isA)
        (std::string, std::string)const,
    LgFrError & status);


#endif

@


1.1
log
@Initial revision
@
text
@d3 3
a9 1
#include <rw/regexp.h>
d46 1
a46 1
// Return: a LgFrOrderedVectorPart object (vector of parts in general)
d60 1
a60 1
// Return: a LgFrOrderedVectorPart object (vector of raw parts).
d65 1
a65 1
    const LgFrOrderedVectorItemPtr* /* itemPtrOrdVecPtr, not used */,
d67 1
a67 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d72 1
a72 1
// Return: a LgFrOrderedVectorPart object (vector of producible parts)
d77 1
a77 1
    const LgFrOrderedVectorItemPtr* /* itemPtrOrdVecPtr, not used */,
d79 1
a79 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d84 1
a84 1
// Return: a LgFrOrderedVectorPart object (vector of capacities).
d89 1
a89 1
    const LgFrOrderedVectorItemPtr* /* itemPtrOrdVecPtr, not used */,
d91 1
a91 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL); 
d99 1
a99 1
// it returns a LgFrVectorFloat object.
d104 1
a104 1
  const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d106 1
a106 1
  const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d110 1
a110 1
// It returns a LgFrVectorFloat object.
d115 1
a115 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d117 1
a117 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d121 1
a121 1
// It returns a LgFrVectorInt object.
d126 1
a126 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d128 1
a128 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);               
d132 1
a132 1
// It returns a LgFrVectorTimeVecFloat object.
d137 1
a137 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d139 1
a139 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d145 1
a145 1
// Return: a LgFrVectorTimeVecFloat object.
d159 1
a159 1
      const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d162 1
a162 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d167 1
a167 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d170 1
a170 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d174 1
a174 1
// Return: a LgFrVectorTimeVecFloat object.
d179 1
a179 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d181 1
a181 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d185 1
a185 1
// Return: a LgFrVectorTimeVecFloat object.
d190 1
a190 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d192 1
a192 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d196 1
a196 1
// Return: a LgFrVectorTimeVecFloat object.
d201 1
a201 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d203 1
a203 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d207 1
a207 1
// Return: a LgFrVectorInt object
d212 1
a212 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d214 1
a214 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d223 1
a223 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d225 1
a225 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d230 1
a230 1
// Return: a LgFrVectorTimeVecFloat object.
d235 1
a235 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d237 1
a237 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d241 1
a241 1
// Return: a LgFrVectorTimeVecFloat object.
d246 1
a246 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d248 1
a248 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d253 1
a253 1
// Return: a LgFrVectorTimeVecFloat object.
d258 1
a258 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d260 1
a260 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d265 1
a265 1
// Return: a LgFrVectorTimeVecFloat object.
d270 1
a270 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d272 1
a272 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d284 1
a284 1
// Return: a LgFrOrderedVectorDemand object (vector of committed demands).
d289 1
a289 1
  const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d291 1
a291 1
  const LgFrDataInterfaceEssentials * difEssenPtr = NULL); 
d296 1
a296 1
// Return: a LgFrOrderedVectorDemand object (vector of new opportunity demands).
d301 1
a301 1
    const LgFrOrderedVectorItemPtr* /* itemPtrOrdVecPtr, not used */,
d303 1
a303 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL); 
d308 1
a308 1
// Return: a LgFrOrderedVectorDemand object (vector of firm forcast demands).
d313 1
a313 1
    const LgFrOrderedVectorItemPtr* /* itemPtrOrdVecPtr, not used */,
d315 1
a315 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d320 1
a320 1
// Return: a LgFrOrderedVectorDemand object (vector of risk forcast demands).
d325 1
a325 1
    const LgFrOrderedVectorItemPtr* /* itemPtrOrdVecPtr, not used */,
d327 1
a327 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d338 1
a338 1
// Return: a LgFrVectorFloat object (vector of demand gross revenues).
d343 1
a343 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d345 1
a345 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d351 1
a351 1
// Return: a LgFrVectorTimeVecFloat object.
d356 1
a356 1
      const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d359 1
a359 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d363 1
a363 1
// Return: a LgFrVectorTimeVecFloat object.
d368 1
a368 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d370 1
a370 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d374 1
a374 1
// Return: a LgFrVectorTimeVecFloat object.
d379 1
a379 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d381 1
a381 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d385 1
a385 1
// Return: a LgFrVectorTimeVecFloat object.
d390 1
a390 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d392 1
a392 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d396 1
a396 1
// Return: a LgFrVectorTimeVecFloat object.
d400 1
a400 1
// Now, simply returns a LgFrVectorTimeVecFloat object.
d405 1
a405 1
    const LgFrOrderedVectorItemPtr* itemPtrOrdVecPtr,
d407 1
a407 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d417 1
a417 1
    const LgFrOrderedVectorItemPtr*, //  itemPtrOrdVecPtr,
d419 1
a419 1
    const LgFrDataInterfaceEssentials * difEssenPtr = NULL);
d433 1
d436 4
a439 4
  static const RWCString defaultRiskForecast;
  static const RWCString defaultFirmForecast;
  static const RWCString defaultNewOps;
  static const RWCString defaultCommitted;
d452 2
a453 2
    RWCString
      title(const LgFrDataInterfaceEssentials * = NULL )
d459 2
a460 2
    RWCString
      makeTitle(const LgFrDataInterfaceEssentials * = NULL )
d471 4
a474 4
    RWBoolean isADemand(
      RWCString demandedPartName,
      RWCString demandName,
      RWCRegexp compareExprssion) const;                      
d477 3
a479 3
    RWBoolean isANewOpDemand(
      RWCString demandedPartName,
      RWCString demandName) const;
d482 3
a484 3
    RWBoolean isAFirmForecastDemand(
      RWCString demandedPartName,
      RWCString demandName) const;
d487 3
a489 3
   RWBoolean isARiskForecastDemand(
     RWCString demandedPartName,
     RWCString demandName) const;
d492 3
a494 3
    RWBoolean isACommittedDemand(
      RWCString demandedPartName,
      RWCString demandName) const;
a509 10
  //   Dynamic type query methods
  //
  //-------------------------------------------------------------------
  virtual
    isAReturnType
      isA()
        const;

  //--------------------------------------------------------------------
  //  
d532 3
a534 3
     const RWCString & riskForecastDemandNamePattern = defaultRiskForecast,
     const RWCString & firmForecastDemandNamePattern = defaultFirmForecast,
     const RWCString & newOpDemandNamePattern        = defaultNewOps);
d559 1
a559 1
      constWitRun(const LgFrDataInterfaceEssentials* = NULL) 
d566 1
a566 1
      mutableWitRun(const LgFrDataInterfaceEssentials* = NULL);
d571 1
a571 1
    RWBoolean
d583 3
a585 3
  RWCRegexp riskForecastRE_;
  RWCRegexp firmForecastRE_;
  RWCRegexp newOpsRE_;
d596 1
a596 1
      title(RWCString);
d602 1
a602 1
// Return: a LgFrOrderedVectorDemand object (vector of demands in general)
d609 1
a609 1
    RWBoolean
d611 1
a611 1
        (RWCString, RWCString)const,
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 3
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
d7 1
d44 1
a44 1
// Return: a LgFrPartVector object (vector of parts in general)
d58 1
a58 1
// Return: a LgFrPartVector object (vector of raw parts).
d63 1
a63 1
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
d65 1
a65 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d70 1
a70 1
// Return: a LgFrPartVector object (vector of producible parts)
d75 1
a75 1
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
d77 1
a77 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d82 1
a82 1
// Return: a LgFrPartVector object (vector of capacities).
d87 1
a87 1
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
d89 1
a89 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0); 
d97 1
a97 1
// it returns a LgFrFloatVector object.
d102 1
a102 1
  const LgFrItemPtrVector* itemPtrOrdVecPtr,
d104 1
a104 1
  const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d108 1
a108 1
// It returns a LgFrFloatVector object.
d113 1
a113 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d115 1
a115 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d119 1
a119 1
// It returns a LgFrIntVector object.
d124 1
a124 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d126 1
a126 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);               
d130 1
a130 1
// It returns a LgFrTimeVecFloatVector object.
d135 1
a135 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d137 1
a137 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d143 1
a143 1
// Return: a LgFrTimeVecFloatVector object.
d157 1
a157 1
      const LgFrItemPtrVector* itemPtrOrdVecPtr,
d160 1
a160 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d165 1
a165 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d168 1
a168 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d172 1
a172 1
// Return: a LgFrTimeVecFloatVector object.
d177 1
a177 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d179 1
a179 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d183 1
a183 1
// Return: a LgFrTimeVecFloatVector object.
d188 1
a188 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d190 1
a190 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d194 1
a194 1
// Return: a LgFrTimeVecFloatVector object.
d199 1
a199 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d201 1
a201 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d205 1
a205 1
// Return: a LgFrIntVector object
d210 1
a210 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d212 1
a212 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d221 1
a221 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d223 1
a223 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d228 1
a228 1
// Return: a LgFrTimeVecFloatVector object.
d233 1
a233 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d235 1
a235 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d239 1
a239 1
// Return: a LgFrTimeVecFloatVector object.
d244 1
a244 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d246 1
a246 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d251 1
a251 1
// Return: a LgFrTimeVecFloatVector object.
d256 1
a256 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d258 1
a258 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d263 1
a263 1
// Return: a LgFrTimeVecFloatVector object.
d268 1
a268 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d270 1
a270 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d282 1
a282 1
// Return: a LgFrDemandVector object (vector of committed demands).
d287 1
a287 1
  const LgFrItemPtrVector* itemPtrOrdVecPtr,
d289 1
a289 1
  const LgFrDataInterfaceEssentials * difEssenPtr = 0); 
d294 1
a294 1
// Return: a LgFrDemandVector object (vector of new opportunity demands).
d299 1
a299 1
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
d301 1
a301 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0); 
d306 1
a306 1
// Return: a LgFrDemandVector object (vector of firm forcast demands).
d311 1
a311 1
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
d313 1
a313 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d318 1
a318 1
// Return: a LgFrDemandVector object (vector of risk forcast demands).
d323 1
a323 1
    const LgFrItemPtrVector* /* itemPtrOrdVecPtr, not used */,
d325 1
a325 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d336 1
a336 1
// Return: a LgFrFloatVector object (vector of demand gross revenues).
d341 1
a341 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d343 1
a343 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d349 1
a349 1
// Return: a LgFrTimeVecFloatVector object.
d354 1
a354 1
      const LgFrItemPtrVector* itemPtrOrdVecPtr,
d357 1
a357 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d361 1
a361 1
// Return: a LgFrTimeVecFloatVector object.
d366 1
a366 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d368 1
a368 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d372 1
a372 1
// Return: a LgFrTimeVecFloatVector object.
d377 1
a377 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d379 1
a379 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d383 1
a383 1
// Return: a LgFrTimeVecFloatVector object.
d388 1
a388 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d390 1
a390 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d394 1
a394 1
// Return: a LgFrTimeVecFloatVector object.
d398 1
a398 1
// Now, simply returns a LgFrTimeVecFloatVector object.
d403 1
a403 1
    const LgFrItemPtrVector* itemPtrOrdVecPtr,
d405 1
a405 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
d415 1
a415 1
    const LgFrItemPtrVector*, //  itemPtrOrdVecPtr,
d417 1
a417 1
    const LgFrDataInterfaceEssentials * difEssenPtr = 0);
a430 1
    virtual int GetDIIType() const { return __LGFRDATAINTERFACEIMPLEMENTATIONFROMWITRUN; }
d433 4
a436 4
  static const std::string defaultRiskForecast;
  static const std::string defaultFirmForecast;
  static const std::string defaultNewOps;
  static const std::string defaultCommitted;
d449 2
a450 2
    std::string
      title(const LgFrDataInterfaceEssentials * = 0 )
d456 2
a457 2
    std::string
      makeTitle(const LgFrDataInterfaceEssentials * = 0 )
d468 4
a471 4
    bool isADemand(
      std::string demandedPartName,
      std::string demandName,
      std::string compareExprssion) const;                      
d474 3
a476 3
    bool isANewOpDemand(
      std::string demandedPartName,
      std::string demandName) const;
d479 3
a481 3
    bool isAFirmForecastDemand(
      std::string demandedPartName,
      std::string demandName) const;
d484 3
a486 3
   bool isARiskForecastDemand(
     std::string demandedPartName,
     std::string demandName) const;
d489 3
a491 3
    bool isACommittedDemand(
      std::string demandedPartName,
      std::string demandName) const;
d507 10
d539 3
a541 3
     const std::string & riskForecastDemandNamePattern = defaultRiskForecast,
     const std::string & firmForecastDemandNamePattern = defaultFirmForecast,
     const std::string & newOpDemandNamePattern        = defaultNewOps);
d566 1
a566 1
      constWitRun(const LgFrDataInterfaceEssentials* = 0) 
d573 1
a573 1
      mutableWitRun(const LgFrDataInterfaceEssentials* = 0);
d578 1
a578 1
    bool
d590 3
a592 3
  std::string riskForecastRE_;
  std::string firmForecastRE_;
  std::string newOpsRE_;
d603 1
a603 1
      title(std::string);
d609 1
a609 1
// Return: a LgFrDemandVector object (vector of demands in general)
d616 1
a616 1
    bool
d618 1
a618 1
        (std::string, std::string)const,
@

