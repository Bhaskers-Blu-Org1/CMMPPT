head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.41;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.46;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.32;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFRPART_H
#define LGFRPART_H

// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
// File: LgFrPart.h
// Author: jmt
// Created: 3 December 1993 9:08:46 pm
// System: WITUSE

#include <assert.h>


#include <scenario/src/item.h>
//#include <scenario/src/idnumber.h>

// Typedef used to identify a part category
typedef enum
  {
  LgFrRAW,
  LgFrCAPACITY,
  LgFrPRODUCT
  }
LgFrPartCategory;

// This part class contains part name/number
class LGFR_DECLSPEC LgFrPart : public LgFrItem {

public:

        // isEqual method, returns true if they have the same name.
        virtual bool isEqual(const LgFrItem*) const;

        // compareTo method, uses part name to to the comparison.
	// should return 0  if part1->name_ "is equal to" part2->name_.
	//               >0 if part1->name_ "is larger" than part2->name_.
	//               <0 if part1->name_ "is smaller" than part2->name_.

        virtual int compareTo(const LgFrItem*) const;

	// Default constructor
	LgFrPart();

	// Copy constructor
	LgFrPart(const LgFrPart&);

	// Constructor
	LgFrPart(const std::string&);

	// Destructor
        virtual
	   ~LgFrPart();

	// Assignment 
        LgFrPart&
	operator=(const LgFrPart&);

	// Assignment 
        LgFrItem&
	operator=(const LgFrItem&);

        // Get a printing name for part
        // This function returns a printing name for the part.
        // If the trunc parameter is set to true then part name will be
        // truncated/padded to pnchars. Otherwise the full part 
        // name will be used.
        // Defaults: trunc = true, 
        //           part name is truncated/padded to be 18 chars
        std::string 
	  printingName(bool trunc = true) const;

        virtual LgFrItem* Clone() const { return new LgFrPart( *this ); }

        virtual bool isAPart() const { return true; }


        // Get a unique name for the part
        std::string uniqueName() const;

        // Get the part name
        std::string name() const;
        
        // Get the part name for gui use
        std::string guiName() const;

	// Equality
	virtual
        int
	operator==(const LgFrItem&)
	const;

        // Print part data
        virtual void print() const;

        // Display part data for xcdb()
        void xcdb() const;
        void xcdb();

	// test this class
	static void test();

private:
        std::string name_;    // part name
};
#endif
@


1.1
log
@Initial revision
@
text
@d1 6
a11 3
#ifndef LGFRPART_H
#define LGFRPART_H

a13 2
#include <rw/cstring.h>
#include <rw/collect.h>
d16 1
a16 1
#include <scenario/src/idnumber.h>
a29 4
  // isA(), newSpecies(), copy(), and some other things are declared
  // by this macro
  RWDECLARE_COLLECTABLE(LgFrPart)

d32 2
a33 5
        // hash method
        virtual unsigned hash() const;

        // isEqual method, returns TRUE if they have the same name.
        virtual RWBoolean isEqual(const RWCollectable*) const;
d40 1
a40 1
        virtual int compareTo(const RWCollectable*) const;
d49 1
a49 1
	LgFrPart(const RWCString);
d65 1
a65 1
        // If the trunc parameter is set to TRUE then part name will be
d70 7
a76 2
        RWCString 
	  printingName(RWBoolean trunc = TRUE) const;
d79 1
a79 1
        RWCString uniqueName() const;
d82 1
a82 1
        RWCString name() const;
d85 1
a85 1
        RWCString guiName() const;
d104 1
a104 1
        RWCString name_;    // part name
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 6
#ifndef LGFRPART_H
#define LGFRPART_H

// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
d6 3
d11 2
d15 1
a15 1
//#include <scenario/src/idnumber.h>
d29 4
d35 5
a39 2
        // isEqual method, returns true if they have the same name.
        virtual bool isEqual(const LgFrItem*) const;
d46 1
a46 1
        virtual int compareTo(const LgFrItem*) const;
d55 1
a55 1
	LgFrPart(const std::string&);
d71 1
a71 1
        // If the trunc parameter is set to true then part name will be
d76 2
a77 7
        std::string 
	  printingName(bool trunc = true) const;

        virtual LgFrItem* Clone() const { return new LgFrPart( *this ); }

        virtual bool isAPart() const { return true; }

d80 1
a80 1
        std::string uniqueName() const;
d83 1
a83 1
        std::string name() const;
d86 1
a86 1
        std::string guiName() const;
d105 1
a105 1
        std::string name_;    // part name
@

