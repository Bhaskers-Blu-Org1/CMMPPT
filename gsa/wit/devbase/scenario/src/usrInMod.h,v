head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.47;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.54;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.54;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.38;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFR_USER_INPUT_MODIFICATION_H
#define LGFR_USER_INPUT_MODIFICATION_H
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/algorthm.h>
#include <scenario/src/supplySS.h>
#include <scenario/src/supSSATP.h>
#include <scenario/src/demVolSS.h>
#include <scenario/src/demSSATP.h>
#include <scenario/src/cycleSS.h>

// This class represents the implosion algorithm

// Forward references
class LgFrWorkingImplosionProblem;

class LgFrUserInputModification : public LgFrAlgorithm {

   // This is a list of methods which obtain the results of a user
   // updating wip by obtaining this objects wipPtr_ and then accessing the
   // wip directly.

   // The updated wip results used by these methods are
   // supply, demandVolume, and cycleTime

  
   // ------------------------------------------------------------------------
   // Attribute Schedule Strategies:
   // ------------------------------------------------------------------------
   friend 
      void
         LgFrSupplyScheduleStrategy::kernalOfPopulate(
            LgFrSortingScheduleFloat& schedule )
               const;

   friend 
      void
         LgFrSupplyScheduleStrategyForATP::kernalOfPopulate(
            LgFrSortingScheduleFloat& schedule )
               const;

   friend 
      void
         LgFrDemandVolumeScheduleStrategy::kernalOfPopulate(
            LgFrSortingScheduleFloat& schedule )
               const;

   friend 
      void
         LgFrDemandVolumeScheduleStrategyForATP::kernalOfPopulate(
            LgFrSortingScheduleFloat& schedule )
               const;

   friend 
      void
         LgFrCycleTimeScheduleStrategy::kernalOfPopulate(
            LgFrSortingScheduleFloat& schedule )
               const;

public:

  int virtual GetAlgorithmType() const { return __LGFRUSERINPUTMODIFICATION; }

  // updateFrom - This method is invoked when the algorthm solution has
  // been updated.
  virtual
     void
        updateFrom (
           LgFrModel * p,
           void * d );

  // Return pointer to the implode algorithm in the specified scenario.
  virtual
     LgFrAlgorithm *
        counterPart(
           LgFrScenario & )
              const;

  // Constructor.
   LgFrUserInputModification(
       LgFrWorkingImplosionProblem & wip );

  // Copy constructor
  LgFrUserInputModification (
     const LgFrUserInputModification& source);
  
  // destructor
  ~LgFrUserInputModification();
  
  // test this class
  static void test();

  // Test this class in the context of it's owner(s).
  // The data for this test should have come from
  // "/u/implode/wit/data/examples/diner12/wit.data"
  static void contextTest(LgFrWorkingImplosionProblem       &wip);


private:

  LgFrWorkingImplosionProblem  * wipPtr_;

  const int id_;

  // default constructor
  LgFrUserInputModification();

  // Assignment 
  LgFrUserInputModification& 
    operator=(const LgFrUserInputModification& rhs);

  // Get Working Implosion Problem associated with this alogrithm.
  // If the owner of the workingImplosionProblem is deleted by its owner then
  // then the returned reference will be dangling
  virtual
     LgFrWorkingImplosionProblem &
        workingImplosionProblem()
           const;

};

#endif
@


1.1
log
@Initial revision
@
text
@d3 2
d63 2
a71 6

  // Return Object Class Identifier
  virtual
     isAReturnType
        isA()
           const;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
a60 2
  int virtual GetAlgorithmType() const { return __LGFRUSERINPUTMODIFICATION; }

d68 6
@

