head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.29;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.37;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.37;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.26;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.43;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
// File: LgFrDemand.C
// Author: jmt
// Created: 3 December 1993 9:09:27 pm
// System: WITUSE

#include <iostream>

#include <scenario/src/demand.h>
#include <scenario/src/machdep.h>

//----------------------------------------------------------------------
//
//   Demand
//
//----------------------------------------------------------------------

static const std::string guiSepChars (",\n  ");

// Print out the demand data
void 
LgFrDemand::print() const
{
  std::cout << "\n demand name  = " << name_
       << "\n part data for this demand: ";
  partPtr_ ->print();
  std::cout << "\n printing part/demand name: " << printingName();
}

// Display for xcdb
void 
LgFrDemand::xcdb() const
{
  std::cerr << "\n demand name  = " << name_;
  std::cerr << "\n printing part/demand name: " << printingName();
  partPtr_ ->xcdb();
}

// Display for xcdb
void 
LgFrDemand::xcdb()
{
  (  (const LgFrDemand*) this  )     -> xcdb();
}

// isEqual method, returns true if they have the same demand
// and part name
bool
LgFrDemand::isEqual(
		   const LgFrItem* t
		 ) const
{
  bool d = t->isADemand();
  assert (t->isADemand());
  return ( *this == * ( (const LgFrDemand*) t) ? true : false );
}

// compareTo method, uses demand name and part name to do the comparison.
// should return 0  if *this "is equal to" *source.
//               >0 if *this "is larger" than *source.
//               <0 if *this "is smaller" than *source.
// C lib. function memcmp() is used to do the comparison.

int 
LgFrDemand::compareTo(
		    const LgFrItem* source
		    ) const
{
  assert (source->isADemand());
  const LgFrDemand* sourceDemandPtr = (const LgFrDemand*)source;
  int majorCompare = name_.compare( sourceDemandPtr->name_ );
  if (majorCompare == 0)	// Have to use minor key
    return partPtr_->compareTo( sourceDemandPtr->partPtr()  );
  else    
    return majorCompare;
}

// Default constructor
// Initialize demand name to null string
// and part pointer to null.
LgFrDemand::LgFrDemand()
: name_ (), partPtr_ (0)
{
  // All the work is done in the initialization part
}

// Constructor
LgFrDemand::LgFrDemand(const std::string& n, const LgFrPart* p)
: name_ (n), partPtr_ (p)
{
  // All the work is done in the initialization part
}

//Copy constructor
LgFrDemand::LgFrDemand (const LgFrDemand& source)
: name_ (source.name()), partPtr_ (source.partPtr())
{
  // All the work is done in the initialization part
}

// Assignment
LgFrDemand&
LgFrDemand::operator=(const LgFrDemand& rhs)
{
  // Don't have to call operator= for base class
  name_ = rhs.name();
  partPtr_ = rhs.partPtr();
  return (*this);
}

// Another Assignment
LgFrItem&
LgFrDemand::operator=(const LgFrItem& rhs)
{
  assert( rhs.isADemand() );
  (this->LgFrDemand::operator=) ( (const LgFrDemand &)rhs );
  return (*this);
}


// Destructor
LgFrDemand::~LgFrDemand()
{
  // Nothing to do but reutrn.
}

// This function returns a printing name: part name-demand name
std::string
LgFrDemand::printingName(
			 bool trunc
			 ) const
{
  int dnchars = 12;
  std::string printingDemandName = name_;
  std::string printingPartName   = partPtr()->printingName(trunc);
  if ( trunc ) 
    printingDemandName.resize(dnchars);
  else 
    printingDemandName.resize(size_tMax(printingDemandName.length(),dnchars));
  return (printingPartName
	  + "-"
	  + printingDemandName
	  );
}

// This function is only to query the demand name, not used to set it.
std::string
LgFrDemand::uniqueName() const
{
  return (name_
	  + "\n"
	  + (partPtr()->name())
	  );
}

// This function is only to query the demand name, not used to set it.
std::string
LgFrDemand::name() const
{
  return (name_);
}

// This function is only to query the demand name, not used to set it.
// For gui use
std::string
LgFrDemand::guiName() const
{
  return ((partPtr()->name())
	  + guiSepChars
	  + name_
	  );
}

std::string
LgFrDemand::guiSeparator()
{
  return guiSepChars;
}

// This function is only used to query the part pointer, not used to set it.
const LgFrPart *
LgFrDemand::partPtr() const
{
  return (partPtr_);
}

// Equality test
int
LgFrDemand::operator== (const LgFrItem& rhs)
const
{
  return ( compareTo( &rhs ) == 0 );
}


#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrSetOfDemands methods.
void
LgFrDemand::test()
{
 // Test constructors 
  LgFrDemand dDef; 
  std::string n1 = "demand1";
  const LgFrPart p1 ("IBMPS2model9508ext2conf");
  LgFrDemand d1(n1,&p1);
  std::string n2 = "IBMNorthAmerican";
  const LgFrPart p2("IBMPS2mod85A");
  LgFrDemand d2(n2,&p2);
  std::string n3 = "IBMAsia";
  const LgFrPart p3("IBMRIOS6K");
  LgFrDemand d3(n3,&p3);
  std::string n4 = "IBMAsia";
  const LgFrPart p4("IBMRIOS6KX");
  LgFrDemand d4(n4,&p4);

  assert( dDef.isADemand() && !dDef.isAPart() );

  // Test assignment
  dDef = d1;
  assert (dDef.name() == d1.name());
  
  // Test comparison
  assert (dDef   == d1);
  assert (!(d1   == d2));
  assert (!(dDef == d2));
  assert (!(dDef == d3));
  assert (!(d2   == d3));
  assert (!(d1   == d3));
  assert (!(d3   == d4));

  // Test hashing, isEqual, compareTo
  assert (dDef.isEqual(&d1));
  assert (dDef.compareTo(&d1) == 0);
  assert (d2.compareTo(&d3) != 0);
  assert (d3.compareTo(&d4) != 0);

  // Test printingName method
  std::cout << "\nPrinting dDef:    \n" << dDef.printingName(); 
  std::cout << "\nPrinting demand1: \n" << d1.printingName(); 
  std::cout << "\nPrinting demand2: \n" << d2.printingName(); 
  std::cout << "\nPrinting demand3: \n" << d3.printingName();
  std::cout << "\nPrinting demand4: \n" << d4.printingName();

   // Test printingName method without truncation
  std::cout << "\nPrinting dDef:    \n" << dDef.printingName(false); 
  std::cout << "\nPrinting demand1: \n" << d1.printingName(false); 
  std::cout << "\nPrinting demand2: \n" << d2.printingName(false); 
  std::cout << "\nPrinting demand3: \n" << d3.printingName(false);
  std::cout << "\nPrinting demand4: \n" << d4.printingName(false);

  // Test uniqueName method
  std::cout << "\nUnique name for dDef:    \n" << dDef.uniqueName(); 
  std::cout << "\nUnique name for demand1: \n" << d1.uniqueName(); 
  std::cout << "\nUnique name for demand2: \n" << d2.uniqueName(); 
  std::cout << "\nUnique name for demand3: \n" << d3.uniqueName(); 
  std::cout << "\nUnique name for demand4: \n" << d4.uniqueName();
  
  // Test guiName method
  std::cout << "\nGui name for dDef:    \n" << dDef.guiName(); 
  std::cout << "\nGui name for demand1: \n" << d1.guiName(); 
  std::cout << "\nGui name for demand2: \n" << d2.guiName(); 
  std::cout << "\nGui name for demand3: \n" << d3.guiName(); 
  std::cout << "\nGui name for demand4: \n" << d4.guiName(); 

}
@


1.1
log
@Initial revision
@
text
@d1 4
d10 1
a10 2

#include <rw/rstream.h>
d21 1
a21 5
// isA(), newSpecies(), copy(), and some other things are defined
// by this macro
RWDEFINE_COLLECTABLE(LgFrDemand, __LGFRDEMAND)

static const RWCString guiSepChars (",\n  ");
d27 1
a27 1
  cout << "\n demand name  = " << name_
d30 1
a30 1
  cout << "\n printing part/demand name: " << printingName();
d37 2
a38 2
  cerr << "\n demand name  = " << name_;
  cerr << "\n printing part/demand name: " << printingName();
d49 1
a49 8
// hash method
unsigned
LgFrDemand::hash() const
{
  return (this->uniqueName()) . hash();  
}

// isEqual method, returns TRUE if they have the same demand
d51 1
a51 1
RWBoolean
d53 1
a53 1
		   const RWCollectable* t
d56 3
a58 2
  assert (t->isA()==__LGFRDEMAND);
  return (   *this   ==  * ( (const LgFrDemand*) t)    );
d69 1
a69 1
		    const RWCollectable* source
d72 1
a72 1
  assert (source->isA()==__LGFRDEMAND);
d74 1
a74 1
  int majorCompare = (name_.compareTo(sourceDemandPtr->name_));
d85 1
a85 1
: name_ (), partPtr_ (NULL)
d91 1
a91 1
LgFrDemand::LgFrDemand(const RWCString n, const LgFrPart* p)
d118 1
a118 1
  assert( rhs.isA() == __LGFRDEMAND );
d131 1
a131 1
RWCString
d133 1
a133 1
			 RWBoolean trunc
d137 2
a138 2
  RWCString printingDemandName = name_;
  RWCString printingPartName   = partPtr()->printingName(trunc);
d150 1
a150 1
RWCString
d160 1
a160 1
RWCString
d168 1
a168 1
RWCString
d177 1
a177 1
RWCString
d208 1
a208 1
  RWCString n1 = "demand1";
d211 1
a211 1
  RWCString n2 = "IBMNorthAmerican";
d214 1
a214 1
  RWCString n3 = "IBMAsia";
d217 1
a217 1
  RWCString n4 = "IBMAsia";
d221 2
a236 1
  assert (d1.hash() == dDef.hash());
d243 5
a247 5
  cout << "\nPrinting dDef:    \n" << dDef.printingName(); 
  cout << "\nPrinting demand1: \n" << d1.printingName(); 
  cout << "\nPrinting demand2: \n" << d2.printingName(); 
  cout << "\nPrinting demand3: \n" << d3.printingName();
  cout << "\nPrinting demand4: \n" << d4.printingName();
d250 5
a254 5
  cout << "\nPrinting dDef:    \n" << dDef.printingName(FALSE); 
  cout << "\nPrinting demand1: \n" << d1.printingName(FALSE); 
  cout << "\nPrinting demand2: \n" << d2.printingName(FALSE); 
  cout << "\nPrinting demand3: \n" << d3.printingName(FALSE);
  cout << "\nPrinting demand4: \n" << d4.printingName(FALSE);
d257 5
a261 5
  cout << "\nUnique name for dDef:    \n" << dDef.uniqueName(); 
  cout << "\nUnique name for demand1: \n" << d1.uniqueName(); 
  cout << "\nUnique name for demand2: \n" << d2.uniqueName(); 
  cout << "\nUnique name for demand3: \n" << d3.uniqueName(); 
  cout << "\nUnique name for demand4: \n" << d4.uniqueName();
d264 5
a268 5
  cout << "\nGui name for dDef:    \n" << dDef.guiName(); 
  cout << "\nGui name for demand1: \n" << d1.guiName(); 
  cout << "\nGui name for demand2: \n" << d2.guiName(); 
  cout << "\nGui name for demand3: \n" << d3.guiName(); 
  cout << "\nGui name for demand4: \n" << d4.guiName(); 
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 4
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
d6 2
a7 1
#include <ostream.h>
d18 5
a22 1
static const std::string guiSepChars (",\n  ");
d50 8
a57 1
// isEqual method, returns true if they have the same demand
d59 1
a59 1
bool
d61 1
a61 1
		   const LgFrItem* t
d64 2
a65 3
  bool d = t->isADemand();
  assert (t->isADemand());
  return ( *this == * ( (const LgFrDemand*) t) ? true : false );
d76 1
a76 1
		    const LgFrItem* source
d79 1
a79 1
  assert (source->isADemand());
d81 1
a81 1
  int majorCompare = name_.compare( sourceDemandPtr->name_ );
d92 1
a92 1
: name_ (), partPtr_ (0)
d98 1
a98 1
LgFrDemand::LgFrDemand(const std::string& n, const LgFrPart* p)
d125 1
a125 1
  assert( rhs.isADemand() );
d138 1
a138 1
std::string
d140 1
a140 1
			 bool trunc
d144 2
a145 2
  std::string printingDemandName = name_;
  std::string printingPartName   = partPtr()->printingName(trunc);
d157 1
a157 1
std::string
d167 1
a167 1
std::string
d175 1
a175 1
std::string
d184 1
a184 1
std::string
d215 1
a215 1
  std::string n1 = "demand1";
d218 1
a218 1
  std::string n2 = "IBMNorthAmerican";
d221 1
a221 1
  std::string n3 = "IBMAsia";
d224 1
a224 1
  std::string n4 = "IBMAsia";
a227 2
  assert( dDef.isADemand() && !dDef.isAPart() );

d242 1
d256 5
a260 5
  cout << "\nPrinting dDef:    \n" << dDef.printingName(false); 
  cout << "\nPrinting demand1: \n" << d1.printingName(false); 
  cout << "\nPrinting demand2: \n" << d2.printingName(false); 
  cout << "\nPrinting demand3: \n" << d3.printingName(false);
  cout << "\nPrinting demand4: \n" << d4.printingName(false);
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d10 1
a10 1
#include <iostream>
d27 1
a27 1
  std::cout << "\n demand name  = " << name_
d30 1
a30 1
  std::cout << "\n printing part/demand name: " << printingName();
d37 2
a38 2
  std::cerr << "\n demand name  = " << name_;
  std::cerr << "\n printing part/demand name: " << printingName();
d243 5
a247 5
  std::cout << "\nPrinting dDef:    \n" << dDef.printingName(); 
  std::cout << "\nPrinting demand1: \n" << d1.printingName(); 
  std::cout << "\nPrinting demand2: \n" << d2.printingName(); 
  std::cout << "\nPrinting demand3: \n" << d3.printingName();
  std::cout << "\nPrinting demand4: \n" << d4.printingName();
d250 5
a254 5
  std::cout << "\nPrinting dDef:    \n" << dDef.printingName(false); 
  std::cout << "\nPrinting demand1: \n" << d1.printingName(false); 
  std::cout << "\nPrinting demand2: \n" << d2.printingName(false); 
  std::cout << "\nPrinting demand3: \n" << d3.printingName(false);
  std::cout << "\nPrinting demand4: \n" << d4.printingName(false);
d257 5
a261 5
  std::cout << "\nUnique name for dDef:    \n" << dDef.uniqueName(); 
  std::cout << "\nUnique name for demand1: \n" << d1.uniqueName(); 
  std::cout << "\nUnique name for demand2: \n" << d2.uniqueName(); 
  std::cout << "\nUnique name for demand3: \n" << d3.uniqueName(); 
  std::cout << "\nUnique name for demand4: \n" << d4.uniqueName();
d264 5
a268 5
  std::cout << "\nGui name for dDef:    \n" << dDef.guiName(); 
  std::cout << "\nGui name for demand1: \n" << d1.guiName(); 
  std::cout << "\nGui name for demand2: \n" << d2.guiName(); 
  std::cout << "\nGui name for demand3: \n" << d3.guiName(); 
  std::cout << "\nGui name for demand4: \n" << d4.guiName(); 
@


