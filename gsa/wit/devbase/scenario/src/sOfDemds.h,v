head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.46;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.47;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.47;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.36;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LgFrSetOfDemands_h
#define LgFrSetOfDemands_h

// RW2STL -- inserted:
#include <map>
#include <string>
// End of RW2STL -- inserted includes.
// Set of Demands
// Authors: Wally and Jung-Mu

// This class has three primary responsibilities:
// 1. Hold a sequenced set of all of the demands
// 2. Provide a mapping from demand-name to demand.
// 3. Provide a mapping from demand-index to demand.
// Demands are inserted into this set by another object (LgFrScenario,
// generally); the other object is responsible for putting the demands
// into the OrderedVector so that they are at the right place.
// This is a value-based set.  (See Tools.h++ manual for definition of
// value-based.


#include <scenario/src/generVc.h>

class LgFrSetOfDemands
: public LgFrDemandVector	// Used to provide the interface
					// for the mapping from demand
  					// index to demand
{
public:

  // Create a new demand and insert it in the collection.
  LgFrDemand
    newDemand(
      const std::string& demandName,
        const LgFrPart * const demandedPart );

  // Returns true if demand is in set.
  bool
    contains( 
      const LgFrDemand )
        const; 

  // Add demand d to the end of the collection
  void
    insert (const LgFrDemand d);

  // Add demand d to the collection at position index.  Everything afterwards
  // is shifted to a higher index.
  void
    insertAt (const size_t index,
	      const LgFrDemand d);

  // Return a pointer to the demand whose name is demandName.
  // You can call this member function 
  // with a char* or a std::string.
  // Note: Having this return a LgFrPart* is consistent with Rogue Waves'
  const LgFrDemand*
    findValue (const std::string& demandName,
	       const std::string& partName
	       )
      const;

  // Increase the amount of storage allocated to the set
  void
    reserve (const size_t newCapacity);

  // Display part data for xcdb()
  void xcdb() const;
  void xcdb();

  // Destructor
  virtual
    ~LgFrSetOfDemands();

  // Assignment operator
  LgFrSetOfDemands &
    operator=(
	      const LgFrSetOfDemands& rhs);

  // Copy constructor
  LgFrSetOfDemands (const LgFrSetOfDemands &);

  // Constructor for a set expected to have up to n demands (and default constructor)
  LgFrSetOfDemands (const size_t n = DEFAULT_VECTOR_CAPACITY);

  // test this class
  static void test();

private:
  // Insert the demand at demandVec_[i] into the dictionary.
  void
    dictionaryInsert (const size_t index);

  // Refresh the dictionary
  virtual
    void
      refreshDictionary();

  // Remove the entries in the dictionary
  void
    clearDictionary();

  size_t minBuckets_;           // Minimum number of buckets in dictionary
                                // and actual capacity of this set.

  typedef std::pair<std::string,LgFrDemandPtr> NameItemPair;
  typedef std::map<std::string,LgFrDemandPtr> NameItemDictionary;
  NameItemDictionary nameToItem_;	// Used to implement the mapping from 
					// demand-name to demand.  The key is an 
					// std::string* and the value
					// is a "demand*".
};

#endif
@


1.1
log
@Initial revision
@
text
@d1 7
a10 3
#ifndef LgFrSetOfDemands_h
#define LgFrSetOfDemands_h

a20 2
#include <rw/hashdict.h>
#include <rw/collstr.h>
d25 1
a25 1
: public LgFrOrderedVectorDemand	// Used to provide the interface
d34 1
a34 1
      const RWCString demandName,
d38 1
a38 1
  RWBoolean
d55 1
a55 1
  // with a char* or a RWCString.
d58 2
a59 2
    findValue (const RWCString demandName,
	       const RWCString partName
a62 5
  // Resize if the amount of space allocated for the hash table is below generally
  // accepted guidelines for good performance.
  void
    resizeIfAboveGuidelines();

d65 1
a65 1
    resize (const size_t newCapacity);
d84 1
a84 1
  LgFrSetOfDemands (const size_t n = RWDEFAULT_CAPACITY);
d90 1
a90 1
  // Insert the demand at demandVec_[i] into the hash table.
d92 6
a97 1
    hashDictionaryInsert (const size_t index);
d99 1
a99 1
  // Remove the entries in the hash table and free the keys
d101 1
a101 1
    clearDictionaryAndFreeKeys();
d103 1
a103 1
  size_t minBuckets_;           // Minimum number of buckets in hash table
d106 3
a108 1
  RWHashDictionary nameToItem_;	// Used to implement the mapping from 
d110 1
a110 1
					// RWCollectableString* and the value
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 3
a6 7
// RW2STL -- inserted:
#include <map>
#include <string>
// End of RW2STL -- inserted includes.
// Set of Demands
// Authors: Wally and Jung-Mu

d17 2
d23 1
a23 1
: public LgFrDemandVector	// Used to provide the interface
d32 1
a32 1
      const std::string& demandName,
d36 1
a36 1
  bool
d53 1
a53 1
  // with a char* or a std::string.
d56 2
a57 2
    findValue (const std::string& demandName,
	       const std::string& partName
d61 5
d68 1
a68 1
    reserve (const size_t newCapacity);
d87 1
a87 1
  LgFrSetOfDemands (const size_t n = DEFAULT_VECTOR_CAPACITY);
d93 1
a93 1
  // Insert the demand at demandVec_[i] into the dictionary.
d95 1
a95 6
    dictionaryInsert (const size_t index);

  // Refresh the dictionary
  virtual
    void
      refreshDictionary();
d97 1
a97 1
  // Remove the entries in the dictionary
d99 1
a99 1
    clearDictionary();
d101 1
a101 1
  size_t minBuckets_;           // Minimum number of buckets in dictionary
d104 1
a104 3
  typedef std::pair<std::string,LgFrDemandPtr> NameItemPair;
  typedef std::map<std::string,LgFrDemandPtr> NameItemDictionary;
  NameItemDictionary nameToItem_;	// Used to implement the mapping from 
d106 1
a106 1
					// std::string* and the value
@

