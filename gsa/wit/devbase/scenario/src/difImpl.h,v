head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.33;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.40;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.40;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.28;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef LGFRDATAINTERFACEIMPLEMENTATIONH
#define LGFRDATAINTERFACEIMPLEMENTATIONH
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.

#include <scenario/src/attTable.h>
#include <scenario/src/scenario.h>

// This is a DIF implementation class used to do the
// actual data interface implementation.
// The current implementation is to register all global attribute functions
// in a table, LgFrAttributeTable_.  These global functions can be C++ or C functions
// assumming the user will write these interfaces to their database, such as MAPICS.
// All registering/unregistering of functions are controlled by the user.
// This class is supposed to be hidden.  
// All golobal functions will return a 'newed' object and the client of those
// functions owns the object and needs to free it when done to avoid memory leaks.

class LgFrError;
class LgFrDataInterface;

class LgFrDataInterfaceImplementation
{
public:

  virtual int GetDIIType() const { return __LGFRDATAINTERFACEIMPLEMENTATION; }

  // Register global attribute functoion 
  void registerFunction(const std::string& attributeName,
                        const LgFrItemSubType& itemSubType,
                        const LgFrItemType& itemType,
                        const LgFrAttributeValueType& attrValueType,
                        LgFrPtrToValueExtractionFunction valFuncPtr);

  // un-register global attribute function
  void unregisterFunction(const std::string& attributeName,
                          const LgFrItemSubType& itemSubType,
                          const LgFrItemType& itemType);

  // Return attribute value type
  LgFrAttributeValueType
    attributeValueType(const std::string& attributeName,
                       const LgFrItemSubType& itemSubType,
                       const LgFrItemType& itemType) const;
  // Check to see if a global function is 
  bool
    isAttributeFunctionImplemented(const std::string& attributeName,
                                   const LgFrItemSubType& itemSubType,
                                   const LgFrItemType& itemType) const;

  // Get attribute values    
  void* getAttributeValue(const std::string& attributeName,
                          const LgFrItemSubType& itemSubType,
                          const LgFrItemType& itemType,
                          const LgFrItemPtrVector& pv,
			  const LgFrDataInterfaceEssentials* difEssenPtr = 0
                          ) const;

  //-------------------------------------------------------------------
  //  
  //   Methods to obtain global attributes
  //
  //-------------------------------------------------------------------

  // Set problem title
  virtual
    void
      title(std::string t);

  // Return problem title
  virtual
    std::string 
      title(const LgFrDataInterfaceEssentials * = 0 ) const;

  //--------------------------------------------------------------------
  //  
  //   Standard class methods
  //
  //-------------------------------------------------------------------

  // Make a clone copy of this object
  virtual
    LgFrDataInterfaceImplementation *
      clone()
        const;

  // Copy constructor in same scenario
  LgFrDataInterfaceImplementation
    (const LgFrDataInterfaceImplementation& source);
  
  // Default constructor
  LgFrDataInterfaceImplementation();

  // Another constructor
  LgFrDataInterfaceImplementation(std::string t);

  // Destructor
  virtual
    ~LgFrDataInterfaceImplementation();  

protected:

  // Assignment operator.
  LgFrDataInterfaceImplementation&
    operator=(const LgFrDataInterfaceImplementation& rhs);

private:
  std::string title_;
  LgFrAttributeTable attributeTable_;
  
};
#endif
@


1.1
log
@Initial revision
@
text
@d3 3
d25 1
d27 1
a27 1
public:
d30 1
a30 1
  void registerFunction(const RWCString& attributeName,
d37 1
a37 1
  void unregisterFunction(const RWCString& attributeName,
d43 1
a43 1
    attributeValueType(const RWCString& attributeName,
d47 2
a48 2
  RWBoolean
    isAttributeFunctionImplemented(const RWCString& attributeName,
d53 1
a53 1
  void* getAttributeValue(const RWCString& attributeName,
d56 2
a57 2
                          const LgFrOrderedVectorItemPtr& pv,
			  const LgFrDataInterfaceEssentials* difEssenPtr = NULL
d69 1
a69 1
      title(RWCString t);
d73 2
a74 13
    RWCString 
      title(const LgFrDataInterfaceEssentials * = NULL ) const;

  //--------------------------------------------------------------------
  //  
  //   Dynamic type query methods
  //
  //-------------------------------------------------------------------

  virtual
    isAReturnType
      isA()
        const;
d96 1
a96 1
  LgFrDataInterfaceImplementation(RWCString t);
d109 1
a109 1
  RWCString title_;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 3
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
d22 1
a24 2
  virtual int GetDIIType() const { return __LGFRDATAINTERFACEIMPLEMENTATION; }

d26 1
a26 1
  void registerFunction(const std::string& attributeName,
d33 1
a33 1
  void unregisterFunction(const std::string& attributeName,
d39 1
a39 1
    attributeValueType(const std::string& attributeName,
d43 2
a44 2
  bool
    isAttributeFunctionImplemented(const std::string& attributeName,
d49 1
a49 1
  void* getAttributeValue(const std::string& attributeName,
d52 2
a53 2
                          const LgFrItemPtrVector& pv,
			  const LgFrDataInterfaceEssentials* difEssenPtr = 0
d65 1
a65 1
      title(std::string t);
d69 13
a81 2
    std::string 
      title(const LgFrDataInterfaceEssentials * = 0 ) const;
d103 1
a103 1
  LgFrDataInterfaceImplementation(std::string t);
d116 1
a116 1
  std::string title_;
@

