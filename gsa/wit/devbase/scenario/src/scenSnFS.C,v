head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.44;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.50;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.50;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.34;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <assert.h>

#include <scenario/src/scenSnFS.h>
#include <scenario/src/idnumber.h>

// Set the scenario to be used when filtering,
void
LgFrScenarioSensitiveFilterStrategy::scenario(
   const LgFrScenario & scenario)
{
   scenarioPtr_ = &scenario;
}


// Get the scenario pointer to be used when filtering
const LgFrScenario *
LgFrScenarioSensitiveFilterStrategy::scenarioPtr()
  const
{
  return (scenarioPtr_);
}


// Make clone copy of object
LgFrFilterStrategy *
LgFrScenarioSensitiveFilterStrategy::clone()
const
{
  LgFrScenarioSensitiveFilterStrategy* newInst = 
      new LgFrScenarioSensitiveFilterStrategy(*this);
  return (newInst);
}

// Make clone copy of object with new Scenario
LgFrFilterStrategy *
LgFrScenarioSensitiveFilterStrategy::clone(LgFrScenario & newScenario)
const
{
  LgFrScenarioSensitiveFilterStrategy* newInst = 
      new LgFrScenarioSensitiveFilterStrategy(*this, newScenario);
  return (newInst);
}

// Assignment operator
LgFrScenarioSensitiveFilterStrategy &
LgFrScenarioSensitiveFilterStrategy::operator=(
			  const LgFrScenarioSensitiveFilterStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
     (this->LgFrFilterStrategy::operator= ) (rhs);
     scenarioPtr_ = rhs.scenarioPtr_;
  }
  return *this;
}


// Copy constructor
LgFrScenarioSensitiveFilterStrategy::
   LgFrScenarioSensitiveFilterStrategy (
      const LgFrScenarioSensitiveFilterStrategy & source)
:  
   LgFrFilterStrategy( source ),
   scenarioPtr_(source.scenarioPtr_),
   id_(__LGFRSCENARIOSENSITIVEFILTERSTRATEGY)
{
}

// Copy constructor with new Scenario
LgFrScenarioSensitiveFilterStrategy::
   LgFrScenarioSensitiveFilterStrategy (
      const LgFrScenarioSensitiveFilterStrategy & source,
      LgFrScenario & newScenario)
:  
   LgFrFilterStrategy( source, newScenario ),
   scenarioPtr_(&newScenario),
   id_(__LGFRSCENARIOSENSITIVEFILTERSTRATEGY)
{
}

// Preferred Constructor
LgFrScenarioSensitiveFilterStrategy::LgFrScenarioSensitiveFilterStrategy(
  const LgFrScenario & scenario)
:  
   LgFrFilterStrategy(), 
   scenarioPtr_(&scenario),
   id_(__LGFRSCENARIOSENSITIVEFILTERSTRATEGY)
{
    // Nothing else to do
}

// Default Constructor
LgFrScenarioSensitiveFilterStrategy::
   LgFrScenarioSensitiveFilterStrategy ()
:  
   LgFrFilterStrategy(),
   scenarioPtr_(0),
   id_(__LGFRSCENARIOSENSITIVEFILTERSTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrScenarioSensitiveFilterStrategy::
   ~LgFrScenarioSensitiveFilterStrategy ()
{
   // Nothing to do here
}


// test LgFrScenarioSensitiveFilterStrategy methods.
void
LgFrScenarioSensitiveFilterStrategy::test()
{

  // Test default constructor
  LgFrScenarioSensitiveFilterStrategy cs1;

  // Test copy constructor
  LgFrScenarioSensitiveFilterStrategy cs2(cs1);

  // Test assignment operator
  LgFrScenarioSensitiveFilterStrategy cs3;
  cs3 = cs2;

  // Test clone method
  LgFrFilterStrategy *cs4Ptr = cs1.clone();

  // Test destructor
  delete cs4Ptr;

}

// test LgFrScenarioSensitiveFilterStrategy methods.
void
LgFrScenarioSensitiveFilterStrategy::contextTest(
   LgFrScenario & scenario1,
   LgFrScenario & scenario2)
{
  LgFrScenarioSensitiveFilterStrategy cs1;

  // Test setting FS's scenario
  cs1.scenario( scenario1);

  // Test copy constructor
  LgFrScenarioSensitiveFilterStrategy cs2(cs1);
  assert( cs2.scenarioPtr_ == cs1.scenarioPtr_ );

  // Test copy constructor with a new scenario
  LgFrScenarioSensitiveFilterStrategy cs2a(cs1, scenario2);
  assert( cs2a.scenarioPtr_ != cs1.scenarioPtr_ );

  // Test assignment operator
  LgFrScenarioSensitiveFilterStrategy cs3;
  LgFrScenarioSensitiveFilterStrategy cs3a (cs1);
  cs3 = cs2;
  assert( cs3.scenarioPtr_ == cs2.scenarioPtr_ );

  // Test clone method
  LgFrFilterStrategy *cs4Ptr = cs1.clone();
  assert( ( (LgFrScenarioSensitiveFilterStrategy *) cs4Ptr)
	  ->scenarioPtr_ == cs1.scenarioPtr_ );
  
  // Cast the clone back down to an instance of this class
  LgFrScenarioSensitiveFilterStrategy *cs5Ptr = 
         (LgFrScenarioSensitiveFilterStrategy *) cs4Ptr; 
  assert( cs5Ptr->scenarioPtr_ == cs1.scenarioPtr_ );

  // Test destructor
  delete cs4Ptr;
}
@


1.1
log
@Initial revision
@
text
@d1 2
a45 8
// Return comparison strategy identifier
isAReturnType
LgFrScenarioSensitiveFilterStrategy::isA()
const
{
   return id_;
}

a50 1
  assert( id_ == rhs.id_ );
a67 1
  assert( id_ == source.id_ );
a79 1
  assert( id_ == source.id_ );
d98 1
a98 1
   scenarioPtr_(NULL),
a118 4
  assert( cs1.id_ == __LGFRSCENARIOSENSITIVEFILTERSTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRSCENARIOSENSITIVEFILTERSTRATEGY );
a121 1
  assert( cs2.isA() == __LGFRSCENARIOSENSITIVEFILTERSTRATEGY );
a125 1
  assert( cs3.isA() == cs2.isA() );
a128 1
  assert( cs4Ptr->isA() == cs1.isA() );
a147 1
  assert( cs2.isA() == __LGFRSCENARIOSENSITIVEFILTERSTRATEGY );
a151 1
  assert( cs2a.isA() == __LGFRSCENARIOSENSITIVEFILTERSTRATEGY );
a157 1
  assert( cs3.isA() == cs2.isA() );
a161 1
  assert( cs4Ptr->isA() == cs1.isA() );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d44 8
d57 1
d75 1
d88 1
d107 1
a107 1
   scenarioPtr_(0),
d128 4
d135 1
d140 1
d144 1
d164 1
d169 1
d176 1
d181 1
@

