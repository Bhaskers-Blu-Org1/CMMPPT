head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.42;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.47;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.47;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.33;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.41;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.

#include <math.h>
#include <scenario/src/reqSS.h>
#include <scenario/src/explode.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/scenario.h>
#include <scenario/src/zeroTvFS.h>
#include <scenario/src/machdep.h>
#include <scenario/src/partSchP.h>

#include <iostream>

//---------------------------------------------------------------------------
//
//   LgFrRequirementScheduleStrategy
//
//---------------------------------------------------------------------------


// Populate Schedule with itemTimeVecs
void
LgFrRequirementScheduleStrategy::kernalOfPopulate(
   LgFrSortingScheduleFloat& schedule )
const
{
  LgFrPart part;
  LgFrTimeVecFloat tv;
  LgFrItemTimeVecPairFloat itv( part, tv );

  // Loop once for each part
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {

     part = setOfParts()[i];

     // Make itemTimeVec
     itv.item( part );
     itv.timeVecFloat(
           explodePtr_->lastProblemSolved().requirementVolume( &part )   );

     // Check to see if i'th itemTimeVec is to be filtered out
     if ( schedule.filterStrategy().exclude( itv ) ) continue;

     // Insert itemTimeVec into schedule
     schedule.localInsert( itv );

  }

}


// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrRequirementScheduleStrategy::clone()
const
{
  LgFrRequirementScheduleStrategy* newInst = 
      new LgFrRequirementScheduleStrategy(*this);
  return (newInst);
}

// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrRequirementScheduleStrategy::clone(LgFrScenario& newScenario)
const
{  LgFrRequirementScheduleStrategy* newInst = 
      new LgFrRequirementScheduleStrategy(*this, newScenario);
  return (newInst);
}
 

// Assignment operator
LgFrRequirementScheduleStrategy &
LgFrRequirementScheduleStrategy::operator=(
	  const LgFrRequirementScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrPartScheduleStrategy::operator= ) (rhs);

    explodePtr_ = rhs.explodePtr_;
  }
  return *this;
}


// Copy constructor
LgFrRequirementScheduleStrategy::
   LgFrRequirementScheduleStrategy (
      const LgFrRequirementScheduleStrategy & source)
:  LgFrPartScheduleStrategy( source ), 
   explodePtr_( source.explodePtr_ ),
   id_(__LGFRREQUIREMENTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Copy constructor with newScenario
LgFrRequirementScheduleStrategy::
   LgFrRequirementScheduleStrategy (
      const LgFrRequirementScheduleStrategy & source,
      LgFrScenario & newScenario)
:  LgFrPartScheduleStrategy( 
         source, 
         newScenario ),
   explodePtr_( &(explode(newScenario)) ),
   id_(__LGFRREQUIREMENTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Constructor
LgFrRequirementScheduleStrategy::
   LgFrRequirementScheduleStrategy (
     LgFrScenario & scenario )
:  LgFrPartScheduleStrategy(
      LgFrAttributeScheduleStrategy::setOfParts(scenario),
      &(explode(scenario)) ), 
   explodePtr_( &(explode(scenario)) ),
   id_(__LGFRREQUIREMENTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrRequirementScheduleStrategy::
   LgFrRequirementScheduleStrategy ()
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   explodePtr_( 0 ),
   id_(__LGFRREQUIREMENTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrRequirementScheduleStrategy::
   ~LgFrRequirementScheduleStrategy ()
{
  // Nothing to do here
}


//---------------------------------------------------------------------------
//
//   LgFrCmrpRequirementScheduleStrategy
//
//---------------------------------------------------------------------------


// Populate Schedule with itemTimeVecs
void
LgFrCmrpRequirementScheduleStrategy::kernalOfPopulate(
   LgFrSortingScheduleFloat& schedule )
const
{
  LgFrPart part;
  LgFrTimeVecFloat tv;
  LgFrItemTimeVecPairFloat itv( part, tv );

  // Loop once for each part
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {

     part = setOfParts()[i];

     // Make itemTimeVec
     itv.item( part );
     itv.timeVecFloat(
           explodePtr_->lastProblemSolved().requirementVolume( &part )   );

     // If a product with zero bom entries then add mrpProdVol
     if ( explodePtr_->lastProblemSolved().category( &part ) == LgFrPRODUCT 
          &&
          explodePtr_->lastProblemSolved().nBomEntries( &part ) == 0 ) {
        
        itv.timeVecFloat(
           itv.timeVecFloat()
           +
           explodePtr_->lastProblemSolved().mrpProductionVolume( &part )   );
         
     }
 

     // Check to see if i'th itemTimeVec is to be filtered out
     if ( schedule.filterStrategy().exclude( itv ) ) continue;

     // Insert itemTimeVec into schedule
     schedule.localInsert( itv );

  }

}


// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrCmrpRequirementScheduleStrategy::clone()
const
{
  LgFrCmrpRequirementScheduleStrategy* newInst = 
      new LgFrCmrpRequirementScheduleStrategy(*this);
  return (newInst);
}

// Make clone copy of object
LgFrAttributeScheduleStrategy *
LgFrCmrpRequirementScheduleStrategy::clone(LgFrScenario& newScenario)
const
{  LgFrCmrpRequirementScheduleStrategy* newInst = 
      new LgFrCmrpRequirementScheduleStrategy(*this, newScenario);
  return (newInst);
}
 

// Assignment operator
LgFrCmrpRequirementScheduleStrategy &
LgFrCmrpRequirementScheduleStrategy::operator=(
	  const LgFrCmrpRequirementScheduleStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
    (this->LgFrPartScheduleStrategy::operator= ) (rhs);

    explodePtr_ = rhs.explodePtr_;
  }
  return *this;
}


// Copy constructor
LgFrCmrpRequirementScheduleStrategy::
   LgFrCmrpRequirementScheduleStrategy (
      const LgFrCmrpRequirementScheduleStrategy & source)
:  LgFrPartScheduleStrategy( source ), 
   explodePtr_( source.explodePtr_ ),
   id_(__LGFRCMRPREQUIREMENTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Copy constructor with newScenario
LgFrCmrpRequirementScheduleStrategy::
   LgFrCmrpRequirementScheduleStrategy (
      const LgFrCmrpRequirementScheduleStrategy & source,
      LgFrScenario & newScenario)
:  LgFrPartScheduleStrategy( 
         source, 
         newScenario ),
   explodePtr_( &(explode(newScenario)) ),
   id_(__LGFRCMRPREQUIREMENTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Constructor
LgFrCmrpRequirementScheduleStrategy::
   LgFrCmrpRequirementScheduleStrategy (
     LgFrScenario & scenario )
:  LgFrPartScheduleStrategy(
      LgFrAttributeScheduleStrategy::setOfParts(scenario),
      &(explode(scenario)) ), 
   explodePtr_( &(explode(scenario)) ),
   id_(__LGFRCMRPREQUIREMENTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Default Constructor
// This is a private member function.
LgFrCmrpRequirementScheduleStrategy::
   LgFrCmrpRequirementScheduleStrategy ()
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   explodePtr_( 0 ),
   id_(__LGFRCMRPREQUIREMENTSCHEDULESTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrCmrpRequirementScheduleStrategy::
   ~LgFrCmrpRequirementScheduleStrategy ()
{
  // Nothing to do here
}



//---------------------------------------------------------------------------
//
//   Test Methods
//
//---------------------------------------------------------------------------



#ifdef NDEBUG
#undef NDEBUG
#endif

// test LgFrRequirementScheduleStrategy methods.
void
LgFrRequirementScheduleStrategy::test()
{
}


// test LgFrRequirementScheduleStrategy methods.
// testScenario should have been generated using the diner12 dataset
void
LgFrRequirementScheduleStrategy::contextTest
    (LgFrScenario          & testScenario,
     LgFrWorkingImplosionProblem & wip,
     LgFrLastProblemSolved & lps,
     LgFrSetOfParts        & sop)
{
  int i;

  // Test constructor
  LgFrRequirementScheduleStrategy cs1(testScenario);

  // Test copy constructor
  LgFrRequirementScheduleStrategy cs2(cs1);

  // Test assignment operator
  LgFrRequirementScheduleStrategy cs3;
  cs3 = cs2;

  // Test clone method
  LgFrAttributeScheduleStrategy *cs4Ptr = cs1.clone();

  // Test destructor
  delete cs4Ptr;

  // See if we can break the LgFrModel stuff
  cs4Ptr = cs2.clone();
  *cs4Ptr = cs1;
  delete cs4Ptr;


  // Test populate.  Should be populated with zero timeVec because
  // a requirement schedule does not exist.
  LgFrSortingPartScheduleFloatSmartPointer schedule(new LgFrSortingPartScheduleFloat); 
  const LgFrSortingPartScheduleFloat & constSchedule = *schedule;
  cs1.populate( *schedule );
  for ( i=0; i<sop.size(); i++ ) {
     assert(  schedule->contains( sop[i] )  );
     assert( constSchedule[sop[i]].timeVecFloat() == 0.0 );
  }

  // Test popluate with zeroFilter.  Should produce an empty schedule
  LgFrZeroTimeVecFilterStrategy zeroFilter2;
  schedule->filterStrategy( zeroFilter2 );
  cs1.populate( *schedule );
  assert( schedule->size()==0 );

  // Test populate, due to new explosion solution.
  {
  LgFrFilterStrategy defaultFilter;
  schedule->filterStrategy( defaultFilter );
  }
  schedule->attributeScheduleStrategy( cs1 );
  lps.mrp(wip);
  cs1.populate( *schedule );
  std::cout <<std::endl <<"LgFrRequirementScheduleStrategy" <<std::endl
      <<schedule->format() << std::endl;

  for ( i=0; i<sop.size(); i++ ) {
     assert(  schedule->contains( sop[i] )  );
     assert( lps.requirementVolume(&sop[i]) == 
             constSchedule[sop[i]].timeVecFloat() );
  }

  // Test populate with filter
  schedule->filterStrategy( zeroFilter2);
  schedule->attributeScheduleStrategy( cs1 );
  testScenario.newImplosionSolution();

  cs1.populate( *schedule );
  // std::cout <<std::endl <<"LgFrRequirementScheduleStrategy with zero filter" <<std::endl
  //      <<schedule->format() <<std::endl;

  for ( i=0; i<schedule->size(); i++ ) {
     assert(  !(constSchedule[i].timeVecFloat() == 0.0)  );
  }

}


// test LgFrCmrpRequirementScheduleStrategy methods.
void
LgFrCmrpRequirementScheduleStrategy::test()
{
}


// test LgFrCmrpRequirementScheduleStrategy methods.
// testScenario should have been generated using the diner12 dataset
void
LgFrCmrpRequirementScheduleStrategy::contextTest
    (LgFrScenario          & testScenario,
     LgFrWorkingImplosionProblem & wip,
     LgFrLastProblemSolved & lps,
     LgFrSetOfParts        & sop)
{
  int i;

  // Test constructor
  LgFrCmrpRequirementScheduleStrategy cs1(testScenario);

  // Test copy constructor
  LgFrCmrpRequirementScheduleStrategy cs2(cs1);

  // Test assignment operator
  LgFrCmrpRequirementScheduleStrategy cs3;
  cs3 = cs2;

  // Test clone method
  LgFrAttributeScheduleStrategy *cs4Ptr = cs1.clone();

  // Test destructor
  delete cs4Ptr;

  // See if we can break the LgFrModel stuff
  cs4Ptr = cs2.clone();
  *cs4Ptr = cs1;
  delete cs4Ptr;


  // Test populate.  Should be populated with zero timeVec because
  // a requirement schedule does not exist.
  LgFrSortingPartScheduleFloatSmartPointer schedule(new LgFrSortingPartScheduleFloat); 
  const LgFrSortingPartScheduleFloat & constSchedule = *schedule;
  cs1.populate( *schedule );
  for ( i=0; i<sop.size(); i++ ) {
     assert(  schedule->contains( sop[i] )  );
     assert( constSchedule[sop[i]].timeVecFloat() == 0.0 );
  }

  // Test popluate with zeroFilter.  Should produce an empty schedule
  LgFrZeroTimeVecFilterStrategy zeroFilter2;
  schedule->filterStrategy( zeroFilter2 );
  cs1.populate( *schedule );
  assert( schedule->size()==0 );

  // Test populate, due to new explosion solution.
  {
  LgFrFilterStrategy defaultFilter;
  schedule->filterStrategy( defaultFilter );
  }
  schedule->attributeScheduleStrategy( cs1 );
  lps.mrp(wip);
  cs1.populate( *schedule );
  std::cout <<std::endl <<"LgFrCmrpRequirementScheduleStrategy" <<std::endl
       <<schedule->format() <<std::endl;

  for ( i=0; i<sop.size(); i++ ) {
     assert(  schedule->contains( sop[i] )  );
     assert( lps.requirementVolume(&sop[i]) <= 
             constSchedule[sop[i]].timeVecFloat() );
  }

  // Test populate with filter
  schedule->filterStrategy( zeroFilter2);
  schedule->attributeScheduleStrategy( cs1 );
  testScenario.newImplosionSolution();

  cs1.populate( *schedule );
  // std::cout <<std::endl <<"LgFrCmrpRequirementScheduleStrategy with zero filter" <<std::endl
  //      <<schedule->format() <<std::endl;

  for ( i=0; i<schedule->size(); i++ ) {
     assert(  !(constSchedule[i].timeVecFloat() == 0.0)  );
  }

}

@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
#include <iostream.h>
d14 1
a14 1

d34 2
a35 1
  for ( size_t i=0; i<setOfParts().entries(); i++ ) {
a74 8
// Return comparison strategy identifier
isAReturnType
LgFrRequirementScheduleStrategy::isA()
const
{
   return id_;
}

a79 1
  assert( id_ == rhs.id_ );
d131 2
a132 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), NULL ),
   explodePtr_( NULL ),
d164 2
a165 1
  for ( size_t i=0; i<setOfParts().entries(); i++ ) {
a217 8
// Return comparison strategy identifier
isAReturnType
LgFrCmrpRequirementScheduleStrategy::isA()
const
{
   return id_;
}

a222 1
  assert( id_ == rhs.id_ );
d274 2
a275 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), NULL ),
   explodePtr_( NULL ),
a321 4
  assert( cs1.id_ == __LGFRREQUIREMENTSCHEDULESTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRREQUIREMENTSCHEDULESTRATEGY );
a324 1
  assert( cs2.isA() == __LGFRREQUIREMENTSCHEDULESTRATEGY );
a328 1
  assert( cs3.isA() == cs2.isA() );
a331 1
  assert( cs4Ptr->isA() == cs1.isA() );
d347 1
a347 1
  for ( i=0; i<sop.entries(); i++ ) {
d356 1
a356 1
  assert( schedule->entries()==0 );
d366 2
a367 2
  cout <<endl <<"LgFrRequirementScheduleStrategy" <<endl
       <<schedule->format() <<endl;
d369 1
a369 1
  for ( i=0; i<sop.entries(); i++ ) {
d381 2
a382 2
  // cout <<endl <<"LgFrRequirementScheduleStrategy with zero filter" <<endl
  //      <<schedule->format() <<endl;
d384 1
a384 1
  for ( i=0; i<schedule->entries(); i++ ) {
a410 4
  assert( cs1.id_ == __LGFRCMRPREQUIREMENTSCHEDULESTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRCMRPREQUIREMENTSCHEDULESTRATEGY );
a413 1
  assert( cs2.isA() == __LGFRCMRPREQUIREMENTSCHEDULESTRATEGY );
a417 1
  assert( cs3.isA() == cs2.isA() );
a420 1
  assert( cs4Ptr->isA() == cs1.isA() );
d436 1
a436 1
  for ( i=0; i<sop.entries(); i++ ) {
d445 1
a445 1
  assert( schedule->entries()==0 );
d455 2
a456 2
  cout <<endl <<"LgFrCmrpRequirementScheduleStrategy" <<endl
       <<schedule->format() <<endl;
d458 1
a458 1
  for ( i=0; i<sop.entries(); i++ ) {
d470 2
a471 2
  // cout <<endl <<"LgFrCmrpRequirementScheduleStrategy with zero filter" <<endl
  //      <<schedule->format() <<endl;
d473 1
a473 1
  for ( i=0; i<schedule->entries(); i++ ) {
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 3
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
// End of RW2STL -- inserted includes.
d32 1
a32 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {
d72 8
d85 1
d137 2
a138 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   explodePtr_( 0 ),
d170 1
a170 2
  size_t i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<setOfParts().size(); i++ ) {
d223 8
d236 1
d288 2
a289 2
:  LgFrPartScheduleStrategy( LgFrSetOfPartsWithMovableParts(), 0 ),
   explodePtr_( 0 ),
d336 4
d343 1
d348 1
d352 1
d368 1
a368 1
  for ( i=0; i<sop.size(); i++ ) {
d377 1
a377 1
  assert( schedule->size()==0 );
d390 1
a390 1
  for ( i=0; i<sop.size(); i++ ) {
d405 1
a405 1
  for ( i=0; i<schedule->size(); i++ ) {
d432 4
d439 1
d444 1
d448 1
d464 1
a464 1
  for ( i=0; i<sop.size(); i++ ) {
d473 1
a473 1
  assert( schedule->size()==0 );
d486 1
a486 1
  for ( i=0; i<sop.size(); i++ ) {
d501 1
a501 1
  for ( i=0; i<schedule->size(); i++ ) {
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d14 1
a14 1
#include <iostream>
d366 2
a367 2
  std::cout <<std::endl <<"LgFrRequirementScheduleStrategy" <<std::endl
      <<schedule->format() << std::endl;
d381 2
a382 2
  // std::cout <<std::endl <<"LgFrRequirementScheduleStrategy with zero filter" <<std::endl
  //      <<schedule->format() <<std::endl;
d455 2
a456 2
  std::cout <<std::endl <<"LgFrCmrpRequirementScheduleStrategy" <<std::endl
       <<schedule->format() <<std::endl;
d470 2
a471 2
  // std::cout <<std::endl <<"LgFrCmrpRequirementScheduleStrategy with zero filter" <<std::endl
  //      <<schedule->format() <<std::endl;
@


