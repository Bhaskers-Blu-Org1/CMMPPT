head	1.5;
access;
symbols
	sce_5_01_20080919:1.5
	latest_sce_4_20_20060523:1.5.0.4
	sce_4_20_20060523:1.5
	latest_sce4_20_OSL:1.5.0.2
	sce_4_20_OSL:1.5
	sce_4_05_20040511:1.5
	sce_4_00_20040201:1.5
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.2.0.8
	Root-of-EndRw:1.2
	EndWitRw-branch:1.2.0.6
	Root-of-EndWitRw:1.2
	RwToStl-branch:1.2.0.4
	Root-of-RwToStl:1.2
	latest_sce_3_10_20010924:1.2.0.2
	sce_3_10_20010924:1.2
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.08.05.12.35.46;	author dpc;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.15.23.05.47;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.15.19.36.33;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.10.23.02.04;	author fasano;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	2000.02.24.15.29.40;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.40;	author wit;	state Exp;
branches;
next	;

1.2.8.1
date	2003.01.08.17.42.28;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Changed hard coded path to relative path
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#endif

// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
#include <math.h>

#include <wit/src/wit.h>
#include <scenario/src/difSFile.h>
#include <scenario/src/scenario.h>


// Return problem title
std::string
LgFrDataInterfaceSpecialPurposeFromFile::title(
    const LgFrDataInterfaceEssentials* difEssenPtr)
const
{
  return fileName();
}

// Set problem title
void
LgFrDataInterfaceSpecialPurposeFromFile::title(
    std::string t /* not used */
    )
{
// do nothing here since we don't want to change the filename.
}

std::string
LgFrDataInterfaceSpecialPurposeFromFile::fileName()
     const
{
  return fileName_;
}


void
LgFrDataInterfaceSpecialPurposeFromFile::readDataFile (WitRun * const wr)
{
  witReadData (wr, fileName_.c_str());
}

void
LgFrDataInterfaceSpecialPurposeFromFile::massageWitRun (WitRun * const )
{
}


// Free up any resources
void
LgFrDataInterfaceSpecialPurposeFromFile::deleteExtraResources()
{
  // Nothing to do here in base class
}



// Make copy of DIF without making it belong to a scenario
LgFrDataInterfaceAbstract *
LgFrDataInterfaceSpecialPurposeFromFile::clone()
const
{
  return new LgFrDataInterfaceSpecialPurposeFromFile(*this);
}

// Destructor
LgFrDataInterfaceSpecialPurposeFromFile::~LgFrDataInterfaceSpecialPurposeFromFile()
{
   // Nothing to do here
}

// Assignment operator.
LgFrDataInterfaceSpecialPurposeFromFile&
LgFrDataInterfaceSpecialPurposeFromFile::operator=(
  const LgFrDataInterfaceSpecialPurposeFromFile& rhs)
{
  if (this != &rhs) {           // Check for assignment to self
     (this->LgFrDataInterfaceSpecialPurpose::operator= ) (rhs);
     this->fileName_ = rhs.fileName_;
  }
  return *this;
}

// Another constructor
LgFrDataInterfaceSpecialPurposeFromFile::LgFrDataInterfaceSpecialPurposeFromFile(const std::string& fileName)
:
  LgFrDataInterfaceSpecialPurpose(),
  fileName_(fileName)  
{
  // Nothing to do here
}

// Copy constructor
LgFrDataInterfaceSpecialPurposeFromFile::LgFrDataInterfaceSpecialPurposeFromFile(
  const LgFrDataInterfaceSpecialPurposeFromFile& source)
:
  LgFrDataInterfaceSpecialPurpose(source),
  fileName_(source.fileName_)
{
   // Nothing to do here
}

// Default Constructor
LgFrDataInterfaceSpecialPurposeFromFile::LgFrDataInterfaceSpecialPurposeFromFile()
:
  fileName_()
{
}


#ifdef NDEBUG
#undef NDEBUG
#endif
// Tests this class.  Only returns if all tests passed
void
LgFrDataInterfaceSpecialPurposeFromFile::test ()
{
  char* fn = "../../../../wit/wit-data/examples/diner12/wit.data";

  // Test default constructor
  LgFrDataInterfaceSpecialPurposeFromFile tdif1;

  // Test filename constructor
  LgFrDataInterfaceSpecialPurposeFromFile tdif2 (fn);
  assert( tdif1.fileName() != tdif2.fileName() );

  // Test copy constructor
  LgFrDataInterfaceSpecialPurposeFromFile tdif3( tdif1 );
  assert( tdif1.fileName() == tdif3.fileName() );

  // Test clone method that takes a pointer
  LgFrDataInterfaceAbstract * dif4Ptr= tdif2.clone( );
  LgFrDataInterfaceSpecialPurposeFromFile * tdif4Ptr = (LgFrDataInterfaceSpecialPurposeFromFile *)dif4Ptr;
  assert( tdif2.fileName() == tdif4Ptr->fileName() );

  // Test destructor
  delete tdif4Ptr;

  // Test assignment
  tdif3 = tdif2;
  assert( tdif3.fileName() == tdif2.fileName() );
  assert( tdif3.fileName() != tdif1.fileName() );

  assert( tdif1.title() == tdif1.fileName() );

}
@


1.4
log
@Modified to build on windows laptop that was causing compiler to run out of stack space
@
text
@d122 1
a122 1
  char* fn = "/u/wit/wit-data/examples/diner12/wit.data";
@


1.3
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@d1 4
@


1.2
log
@Updated so unitTest reads files from
  /u/wit/wit-data
instead of
  /u/implode/data
With these changes unitTest is running correctly on Windows
@
text
@d1 3
d12 1
a12 1
RWCString
d23 1
a23 1
    RWCString t /* not used */
d29 1
a29 1
RWCString
d40 1
a40 1
  witReadData (wr, fileName_);
a57 8
// Return type identifier
isAReturnType
LgFrDataInterfaceSpecialPurposeFromFile::isA()
const
{
  return __LGFRDATAINTERFACESPECIALPURPOSEFROMFILE;
}

d85 1
a85 1
LgFrDataInterfaceSpecialPurposeFromFile::LgFrDataInterfaceSpecialPurposeFromFile(const RWCString fileName)
a134 7

  // Test isA
  assert (tdif1.isA() == __LGFRDATAINTERFACESPECIALPURPOSEFROMFILE);
  assert (tdif2.isA() == __LGFRDATAINTERFACESPECIALPURPOSEFROMFILE);
  assert (tdif3.isA() == __LGFRDATAINTERFACESPECIALPURPOSEFROMFILE);
  assert (dif4Ptr -> isA()  ==  __LGFRDATAINTERFACESPECIALPURPOSEFROMFILE);
  assert (tdif4Ptr -> isA()  ==  __LGFRDATAINTERFACESPECIALPURPOSEFROMFILE);
@


1.2.8.1
log
@Roguewave is gone
@
text
@a0 3
// RW2STL -- inserted:
#include <string>
// End of RW2STL -- inserted includes.
d9 1
a9 1
std::string
d20 1
a20 1
    std::string t /* not used */
d26 1
a26 1
std::string
d37 1
a37 1
  witReadData (wr, fileName_.c_str());
d55 8
d90 1
a90 1
LgFrDataInterfaceSpecialPurposeFromFile::LgFrDataInterfaceSpecialPurposeFromFile(const std::string& fileName)
d140 7
@


1.1
log
@Initial revision
@
text
@d123 1
a123 1
  char* fn = "/u/implode/wit/data/examples/diner12/wit.data";
@


1.1.1.1
log
@Import scenario
@
text
@@
