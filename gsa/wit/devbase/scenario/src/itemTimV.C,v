head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.38;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.44;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.31;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.42;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <iostream>
#include <stdio.h>

#include <scenario/src/itemTimV.h>
#include <scenario/src/demand.h>

// RW2STL - implement (RWGVector, LgFrItemTimeVecPairFloat)

// RW2STL - implement (RWGOrderedVector, LgFrItemTimeVecPairFloat)


// Create and initialize emptyVec
const LgFrTimeVecFloat LgFrItemTimeVecPairFloat::emptyVec;

// Print out the timeVec data
void 
LgFrItemTimeVecPairFloat::print() const
{
  std::cout << "\n************************************";
  std::cout << "\n Item data for this LgFrItemTimeVecPairFloat: ";
  this->item_->print();
  std::cout << "\n timeVecFloat is\n";
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<timeVecFloat_.length(); i++ )
     std::cout <<"   " <<timeVecFloat_[i];
  std::cout <<std::endl;
}

// Format an itemTimeVec for display.
// Returns a string representing the itemTimeVecFloat.
std::string 
LgFrItemTimeVecPairFloat::format(
   const LgFrTimeVecFloat & highLight,
   const bool truncate,
   const char highLightFlag,
   const int width,
   const int precision )//,
   //const long iosFlags )
const
{
   assert( item_ != 0 );
   return 
     item_->printingName(truncate) + 
     std::string(" ") + 
     timeVecFloat_.format( highLight, 
                           highLightFlag, 
                           width, 
                           precision );//, 
                           //iosFlags ); 
}

// isEqual method, returns true if they have the same part and timeVecFloat
bool
LgFrItemTimeVecPairFloat::isEqual(
		   const LgFrItemTimeVecPairFloat* t
		 ) const
{
  const LgFrItemTimeVecPairFloat *rhs = (const LgFrItemTimeVecPairFloat*) t;
  return ( this->compareTo(rhs) == 0 );
}

// compareTo method, uses part and TimeVecFloat to do the comparison.
// should return 0  if *this "is equal to" *source.
//               >0 if *this "is larger" than *source.
//               <0 if *this "is smaller" than *source.

int 
LgFrItemTimeVecPairFloat::compareTo(
		    const LgFrItemTimeVecPairFloat* source
		    ) const
{
  const LgFrItemTimeVecPairFloat* sourceITVFPPtr = 
    (const LgFrItemTimeVecPairFloat*)source;
  int majorCompare 
    = (  (this->item_) -> compareTo(
				     sourceITVFPPtr->item_ )
       );
  if (majorCompare != 0)	// Can use major key
    return majorCompare;
  else    
    return ( this->timeVecFloat_.compareTo( sourceITVFPPtr->timeVecFloat_ ) );
}

// This function is only used to query the item, not used to set it.
const LgFrItem&
LgFrItemTimeVecPairFloat::item() const
{
  return (*item_);
}


// This function is only used to query the part, not used to set it.
// If the item is really a part, get it, otherwise bomb out on assert.
const LgFrPart& 
LgFrItemTimeVecPairFloat::part () 
     const
{
  assert (item_->isAPart());
  return (* (LgFrPart*) item_);
}


// This function is only used to query the demand, not used to set it.
// If the item is really a demand, get it, otherwise bomb out on assert.
const LgFrDemand& 
LgFrItemTimeVecPairFloat::demand () 
     const
{
  assert (item_->isADemand() );
  return (* (LgFrDemand*) item_);
}


// This function is only used to set the part
void
LgFrItemTimeVecPairFloat::item(const LgFrItem& item)
{
  item_ = static_cast<LgFrItem*>( item.Clone() );
}

// This function is only used to query the timeVecFloat, not used to set it.
const LgFrTimeVecFloat&
LgFrItemTimeVecPairFloat::timeVecFloat() const
{
  return (timeVecFloat_);
}


// This function is only used to set the timeVecFloat
void
LgFrItemTimeVecPairFloat::timeVecFloat(const LgFrTimeVecFloat& tvf)
{
  timeVecFloat_ = tvf;
}


// Equality test
int
LgFrItemTimeVecPairFloat::operator== (
   const LgFrItemTimeVecPairFloat& rhs)
const
{
  return ( this->isEqual (&rhs) );
}

// Default constructor
LgFrItemTimeVecPairFloat::LgFrItemTimeVecPairFloat()
: item_ (0), timeVecFloat_()
{
  // Nothing to do but return
}

// Constructor
LgFrItemTimeVecPairFloat::LgFrItemTimeVecPairFloat(
   const LgFrItem& item, 
   const LgFrTimeVecFloat& tvf)
: item_ (0), timeVecFloat_ (tvf)
{
  item_ = static_cast<LgFrItem*>( item.Clone() );
}

//Copy constructor
LgFrItemTimeVecPairFloat::LgFrItemTimeVecPairFloat (
   const LgFrItemTimeVecPairFloat& source)
: item_ (0),  timeVecFloat_ (source.timeVecFloat_)
{
  if( source.item_ )
  {
    item_ = static_cast<LgFrItem*>( source.item_->Clone() );
  }
}

// Destructor
LgFrItemTimeVecPairFloat::~LgFrItemTimeVecPairFloat()
{
   delete item_;
}

// Assignment
LgFrItemTimeVecPairFloat&
LgFrItemTimeVecPairFloat::operator=(
   const LgFrItemTimeVecPairFloat& rhs)
{
  // Assertion should not be necessary, but caught a compiler bug 
  // in xlC.
  assert( &rhs != 0 );
  if (this != &rhs) {
     // If item_ was allocated then free it
     if ( item_ != 0 ) {
        delete item_;
        item_ = 0;
     }
     // If rhs item exists then allocate and assign
     if ( rhs.item_ != 0 ) {
        item_ = static_cast<LgFrItem*>( rhs.item_->Clone() );
        *item_  = *(rhs.item_);
     }
     // Assign timeVec
     timeVecFloat_ = rhs.timeVecFloat_;
  }
  return (*this);
}


#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrItemTimeVecPairFloat
void
LgFrItemTimeVecPairFloat::test()
{
  const LgFrPart p1 ("part1");
  const LgFrPart p2("part2");
  const LgFrTimeVecFloat timeVecFloat1(5,3.33f);
  const LgFrTimeVecFloat timeVecFloat2(5,5.55f);
  const LgFrDemand d1( "demand1", &p1 );
  const LgFrDemand d2( "demand2", &p1 );

  // Test constructors
  LgFrItemTimeVecPairFloat pDef; 
  LgFrItemTimeVecPairFloat pInit1 (p1, timeVecFloat1);
  LgFrItemTimeVecPairFloat pInit2 (p2, timeVecFloat1);
  LgFrItemTimeVecPairFloat pInit3 (p2, timeVecFloat2);
  LgFrItemTimeVecPairFloat dInit1 (d1, timeVecFloat2);
  LgFrItemTimeVecPairFloat dInit2 (d2, timeVecFloat1);

  // Test assignment
  pDef = pInit1;
  assert (pDef.item() == pInit1.item() );

  assert ( !(dInit1==dInit2) );
  dInit2 = dInit1;
  assert (dInit1.item() == dInit2.item() );
  LgFrTimeVecFloat tv1(  dInit1.timeVecFloat()); 
  LgFrTimeVecFloat tv2(  dInit2.timeVecFloat()); 
  assert ( tv1.length() == tv2.length() );
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<tv1.length(); i++ ) assert( tv1[1]==tv2[i] );
  
  // Test comparison
  assert (dInit1 == dInit2 );
  // dInit1.item().print();
  // dInit2.item().print();
  assert (! (pInit1 == pInit2));
  assert (! (pDef   == pInit2));
  assert (! (pInit3 == pInit2));
  // assert (pInit3 == dInit1);   <-- This test correctly causes assert to
  //                                  fail in part::operator==

  // Test isEqual, compareTo
  assert (pDef.isEqual(&pInit1));
  assert (pDef.compareTo(&pInit1) == 0);
  assert (dInit1.isEqual(&dInit2));
  assert (dInit1.compareTo(&dInit2) == 0);
  assert (pInit1.compareTo(&pInit2) < 0);
  assert (pInit2.compareTo(&pInit3) < 0);

  // Test format method
  LgFrTimeVecFloat hlD(dInit1.timeVecFloat().length());
  LgFrTimeVecFloat hlP(pInit1.timeVecFloat().length());
  hlD[1] = hlP[2] = 1.;
  std::cout << dInit1.format() <<std::endl;
  std::cout << dInit1.format(hlD) <<std::endl;
  std::cout << pInit1.format() <<std::endl;
  std::cout << pInit1.format(hlP) <<std::endl;


}

@


1.1
log
@Initial revision
@
text
@d1 5
a6 1
#include <rw/rstream.h>
d11 1
a11 2
implement (RWGVector, LgFrItemTimeVecPairFloat)
implement (RWGOrderedVector, LgFrItemTimeVecPairFloat)
d13 1
a13 3
// isA(), newSpecies(), copy(), and some other things are defined
// by this macro
RWDEFINE_COLLECTABLE(LgFrItemTimeVecPairFloat, __LGFRITEMTIMEVECPAIRFLOAT)
d23 2
a24 2
  cout << "\n************************************";
  cout << "\n Item data for this LgFrItemTimeVecPairFloat: ";
d26 5
a30 4
  cout << "\n timeVecFloat is\n";
  for ( int i=0; i<timeVecFloat_.length(); i++ )
     cout <<"   " <<timeVecFloat_[i];
  cout <<endl;
d35 1
a35 1
RWCString 
d38 1
a38 1
   const RWBoolean truncate,
d41 2
a42 2
   const int precision,
   const long iosFlags )
d45 1
a45 1
   assert( item_ != NULL );
d48 1
a48 1
     RWCString(" ") + 
d52 2
a53 2
                           precision, 
                           iosFlags ); 
d56 2
a57 2
// isEqual method, returns TRUE if they have the same part and timeVecFloat
RWBoolean
d59 1
a59 1
		   const RWCollectable* t
a61 1
  assert (t->isA()==__LGFRITEMTIMEVECPAIRFLOAT);
d73 1
a73 1
		    const RWCollectable* source
a75 1
  assert (source->isA()==__LGFRITEMTIMEVECPAIRFLOAT);
a77 1
  assert ( this->item_->isA() ==  sourceITVFPPtr->item_->isA() );
d102 1
a102 1
  assert (item_->isA() == __LGFRPART);
d113 1
a113 1
  assert (item_->isA() == __LGFRDEMAND);
d122 1
a122 3
  if ( item_ == NULL )
    item_ = (LgFrItem *)item.newSpecies();
  *item_ = item;
d152 1
a152 1
: item_ (NULL), timeVecFloat_()
d161 1
a161 1
: item_ (NULL), timeVecFloat_ (tvf)
d163 1
a163 2
  item_ = (LgFrItem *)item.newSpecies();
  *item_ = item;
d169 1
a169 1
: item_ (NULL),  timeVecFloat_ (source.timeVecFloat_)
d171 4
a174 2
  item_ = (LgFrItem *)(source.item_)->newSpecies();
  *item_ = *(source.item_);
d190 1
a190 1
  assert( &rhs != NULL );
d193 1
a193 1
     if ( item_ != NULL ) {
d195 1
a195 1
        item_ = NULL;
d198 2
a199 2
     if ( rhs.item_ != NULL ) {
        item_ = (LgFrItem *)(rhs.item_)->newSpecies();
d241 2
a242 1
  for ( int i=0; i<tv1.length(); i++ ) assert( tv1[1]==tv2[i] );
d266 4
a269 4
  cout << dInit1.format() <<endl;
  cout << dInit1.format(hlD) <<endl;
  cout << pInit1.format() <<endl;
  cout << pInit1.format(hlP) <<endl;
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a0 5
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <ostream.h>
d2 1
d7 2
a8 1
// RW2STL - implement (RWGVector, LgFrItemTimeVecPairFloat)
d10 3
a12 1
// RW2STL - implement (RWGOrderedVector, LgFrItemTimeVecPairFloat)
d26 1
a26 2
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<timeVecFloat_.length(); i++ )
d33 1
a33 1
std::string 
d36 1
a36 1
   const bool truncate,
d43 1
a43 1
   assert( item_ != 0 );
d46 1
a46 1
     std::string(" ") + 
d54 2
a55 2
// isEqual method, returns true if they have the same part and timeVecFloat
bool
d57 1
a57 1
		   const LgFrItemTimeVecPairFloat* t
d60 1
d72 1
a72 1
		    const LgFrItemTimeVecPairFloat* source
d75 1
d78 1
d103 1
a103 1
  assert (item_->isAPart());
d114 1
a114 1
  assert (item_->isADemand() );
d123 3
a125 1
  item_ = static_cast<LgFrItem*>( item.Clone() );
d155 1
a155 1
: item_ (0), timeVecFloat_()
d164 1
a164 1
: item_ (0), timeVecFloat_ (tvf)
d166 2
a167 1
  item_ = static_cast<LgFrItem*>( item.Clone() );
d173 1
a173 1
: item_ (0),  timeVecFloat_ (source.timeVecFloat_)
d175 2
a176 4
  if( source.item_ )
  {
    item_ = static_cast<LgFrItem*>( source.item_->Clone() );
  }
d192 1
a192 1
  assert( &rhs != 0 );
d195 1
a195 1
     if ( item_ != 0 ) {
d197 1
a197 1
        item_ = 0;
d200 2
a201 2
     if ( rhs.item_ != 0 ) {
        item_ = static_cast<LgFrItem*>( rhs.item_->Clone() );
d243 1
a243 2
  int i = 0; // Pulled out of the for below by RW2STL
  for ( i=0; i<tv1.length(); i++ ) assert( tv1[1]==tv2[i] );
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d5 1
a5 1
#include <iostream>
d23 2
a24 2
  std::cout << "\n************************************";
  std::cout << "\n Item data for this LgFrItemTimeVecPairFloat: ";
d26 1
a26 1
  std::cout << "\n timeVecFloat is\n";
d29 2
a30 2
     std::cout <<"   " <<timeVecFloat_[i];
  std::cout <<std::endl;
d41 2
a42 2
   const int precision )//,
   //const long iosFlags )
d52 2
a53 2
                           precision );//, 
                           //iosFlags ); 
d266 4
a269 4
  std::cout << dInit1.format() <<std::endl;
  std::cout << dInit1.format(hlD) <<std::endl;
  std::cout << pInit1.format() <<std::endl;
  std::cout << pInit1.format(hlP) <<std::endl;
@


