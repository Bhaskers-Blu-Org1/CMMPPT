head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.30;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.38;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.26;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.14.2;

1.1.1.1.14.2
date	2003.01.09.13.54.43;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/demdPerd.h>

// Author: wally

// Print out the demand data
void 
LgFrDemandPeriodPair::print() const
{
  std::cout << "\n************************************";
  std::cout << "\n Demand data for this LgFrDemandPeriodPair: ";
  this->demand_.print();
  std::cout << "\n period       = " << period_ << "\n";
}

// isEqual method, returns true if they have the same demand and period
bool
LgFrDemandPeriodPair::isEqual(
		   const LgFrDemandPeriodPair* t
		 ) const
{
  const LgFrDemandPeriodPair *rhs = (const LgFrDemandPeriodPair*) t;
  return (    this->demand_ == rhs->demand_
	  &&  this->period_ == rhs->period_);
}

// compareTo method, uses demand and period to do the comparison.
// should return 0  if *this "is equal to" *source.
//               >0 if *this "is larger" than *source.
//               <0 if *this "is smaller" than *source.
// C lib. function memcmp() is used to do the comparison.

int 
LgFrDemandPeriodPair::compareTo(
		    const LgFrDemandPeriodPair* source
		    ) const
{
  const LgFrDemandPeriodPair* sourceDPPPtr = 
    (const LgFrDemandPeriodPair*)source;
  int majorCompare 
    = (  (this->demand_) . compareTo(
				     &(sourceDPPPtr->demand_) )
       );
  if (majorCompare != 0)	// Can use major key
    return majorCompare;
  else    
    return (this->period_ - sourceDPPPtr->period_);
}

// This function is only used to query the demand, not used to set it.
const LgFrDemand&
LgFrDemandPeriodPair::demand() const
{
  return (demand_);
}


// This function is only used to set the demand
void
LgFrDemandPeriodPair::demand(const LgFrDemand& item)
{
  demand_ = item;
}

// This function is only used to query the period, not used to set it.
const int&
LgFrDemandPeriodPair::period() const
{
  return (period_);
}


// This function is only used to set the period
void
LgFrDemandPeriodPair::period(const int& p)
{
  period_ = p;
}


// Equality test
int
LgFrDemandPeriodPair::operator== (const LgFrDemandPeriodPair& rhs)
const
{
  return (this->isEqual (&rhs));
}

// Default constructor
LgFrDemandPeriodPair::LgFrDemandPeriodPair()
: demand_ (), period_ (0)
{
  // All the work is done in the initialization part
}

// Constructor
LgFrDemandPeriodPair::LgFrDemandPeriodPair(const LgFrDemand& item, 
					   const int& p)
: demand_ (item), period_ (p)
{
  // All the work is done in the initialization part
}

//Copy constructor
LgFrDemandPeriodPair::LgFrDemandPeriodPair (const LgFrDemandPeriodPair& source)
: demand_ (source.demand_), period_ (source.period_)
{
  // All the work is done in the initialization part
}

// Destructor
LgFrDemandPeriodPair::~LgFrDemandPeriodPair()
{
  // Nothing to do but reutrn.
}

// Assignment
LgFrDemandPeriodPair&
LgFrDemandPeriodPair::operator=(const LgFrDemandPeriodPair& rhs)
{
  if (this != &rhs) {
    demand_ = rhs.demand_;
    period_ = rhs.period_;
  }
  return (*this);
}



#ifdef NDEBUG
#undef NDEBUG
#endif
// test LgFrDemandPeriodPair
void
LgFrDemandPeriodPair::test()
{
  std::string n1 = "demand1";
  const LgFrPart p1 ("part1");
  LgFrDemand d1(n1,&p1);
  std::string n2 = "demand2";
  const LgFrPart p2("part2");
  LgFrDemand d2(n2,&p2);

  // Test constructors
  LgFrDemandPeriodPair dDef; 
  LgFrDemandPeriodPair dInit1 (d1, 10);
  LgFrDemandPeriodPair dInit2 (d2, 10);
  LgFrDemandPeriodPair dInit3 (d2, 20);

  // Test assignment
  dDef = dInit1;
  assert (dDef.demand() == dInit1.demand()
	  &&  dDef.period() == dInit1.period()  );
  
  // Test comparison
  assert (dDef   == dInit1);
  assert (! (dInit1 == dInit2));
  assert (! (dDef   == dInit2));
  assert (! (dInit3 == dInit2));

  // Test hashing, isEqual, compareTo
  assert (dDef.isEqual(&dInit1));
  assert (dDef.compareTo(&dInit1) == 0);
  assert (dInit1.compareTo(&dInit2) < 0);
  assert (dInit2.compareTo(&dInit3) < 0);
}
@


1.1
log
@Initial revision
@
text
@d1 5
a5 3
// Author: wally

#include <rw/rstream.h>
d9 1
a9 3
// isA(), newSpecies(), copy(), and some other things are defined
// by this macro
RWDEFINE_COLLECTABLE(LgFrDemandPeriodPair, __LGFRDEMANDPERIODPAIR)
d15 2
a16 2
  cout << "\n************************************";
  cout << "\n Demand data for this LgFrDemandPeriodPair: ";
d18 1
a18 7
  cout << "\n period       = " << period_ << "\n";
}

unsigned
LgFrDemandPeriodPair::hash() const
{
  return ((this->demand_.hash() << 7) + period_);
d21 2
a22 2
// isEqual method, returns TRUE if they have the same demand and period
RWBoolean
d24 1
a24 1
		   const RWCollectable* t
a26 1
  assert (t->isA()==__LGFRDEMANDPERIODPAIR);
d40 1
a40 1
		    const RWCollectable* source
a42 1
  assert (source->isA()==__LGFRDEMANDPERIODPAIR);
d142 1
a142 1
  RWCString n1 = "demand1";
d145 1
a145 1
  RWCString n2 = "demand2";
a166 1
  assert (dInit1.hash() == dDef.hash());
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 3
a3 5
// RW2STL -- inserted:
#include <scenario/src/RWToSTLHelpers.h>
#include <string>
// End of RW2STL -- inserted includes.
#include <ostream.h>
d7 3
a9 1
// Author: wally
d21 8
a28 2
// isEqual method, returns true if they have the same demand and period
bool
d30 1
a30 1
		   const LgFrDemandPeriodPair* t
d33 1
d47 1
a47 1
		    const LgFrDemandPeriodPair* source
d50 1
d150 1
a150 1
  std::string n1 = "demand1";
d153 1
a153 1
  std::string n2 = "demand2";
d175 1
@


1.1.1.1.14.2
log
@Removed STD_CPP_LIB #ifdefs
and went to std for cout
@
text
@d5 1
a5 1
#include <iostream>
d15 2
a16 2
  std::cout << "\n************************************";
  std::cout << "\n Demand data for this LgFrDemandPeriodPair: ";
d18 1
a18 1
  std::cout << "\n period       = " << period_ << "\n";
@


