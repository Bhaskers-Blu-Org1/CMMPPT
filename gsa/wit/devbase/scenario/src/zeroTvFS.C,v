head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	UsedBySCE:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.48;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.55;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.55;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.38;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <iostream>

#include <scenario/src/zeroTvFS.h>
#include <scenario/src/itemTimV.h>
#include <scenario/src/machdep.h>

// Do Filtering
bool
LgFrZeroTimeVecFilterStrategy::exclude(
   const LgFrItemTimeVecPairFloat & itvpf)
const
{
    return itvpf.timeVecFloat() == 0.0 ? true : false;
}

// Make clone copy of object
LgFrFilterStrategy *
LgFrZeroTimeVecFilterStrategy::clone()
const
{
  LgFrZeroTimeVecFilterStrategy* newInst = 
      new LgFrZeroTimeVecFilterStrategy(*this);
  return (newInst);
}

// Make clone copy of object with new Scenario
LgFrFilterStrategy *
LgFrZeroTimeVecFilterStrategy::clone(LgFrScenario & newScenario)
const
{
  LgFrZeroTimeVecFilterStrategy* newInst = 
      new LgFrZeroTimeVecFilterStrategy(*this, newScenario);
  return (newInst);
}

// Assignment operator
LgFrZeroTimeVecFilterStrategy &
LgFrZeroTimeVecFilterStrategy::operator=(
			  const LgFrZeroTimeVecFilterStrategy& rhs)
{
  if (this != &rhs) {		// Check for assignment to self
     (this->LgFrFilterStrategy::operator= ) (rhs);
  }
  return *this;
}


// Copy constructor
LgFrZeroTimeVecFilterStrategy::
   LgFrZeroTimeVecFilterStrategy (
      const LgFrZeroTimeVecFilterStrategy & source)
:  
   LgFrFilterStrategy( source ),
   id_(__LGFRZEROTIMEVECFILTERSTRATEGY)
{
}

// Copy constructor with new Scenario
LgFrZeroTimeVecFilterStrategy::
   LgFrZeroTimeVecFilterStrategy (
      const LgFrZeroTimeVecFilterStrategy & source,
      LgFrScenario & newScenario)
:  
   LgFrFilterStrategy( source, newScenario ),
   id_(__LGFRZEROTIMEVECFILTERSTRATEGY)
{
}


// Default Constructor
LgFrZeroTimeVecFilterStrategy::
   LgFrZeroTimeVecFilterStrategy ()
:  
   LgFrFilterStrategy(),
   id_(__LGFRZEROTIMEVECFILTERSTRATEGY)
{
  // Nothing to do here
}

// Destructor
LgFrZeroTimeVecFilterStrategy::
   ~LgFrZeroTimeVecFilterStrategy ()
{
   // Nothing to do here
}


// test LgFrZeroTimeVecFilterStrategy methods.
void
LgFrZeroTimeVecFilterStrategy::test()
{

  // Test default constructor
  LgFrZeroTimeVecFilterStrategy cs1;

  LgFrZeroTimeVecFilterStrategy cs2(cs1);

  // Test assignment operator
  LgFrZeroTimeVecFilterStrategy cs3;
  cs3 = cs2;

  // Test clone method
  LgFrFilterStrategy *cs4Ptr = cs1.clone();

  // Test destructor
  delete cs4Ptr;

  // Test exclude
  LgFrItemTimeVecPairFloat itvp1( LgFrPart("abc"), LgFrTimeVecFloat(2,2.) );
  assert( !cs1.exclude( itvp1 ) );

  itvp1.timeVecFloat( LgFrTimeVecFloat(2, 0.0) );
  assert( cs1.exclude( itvp1 ) );

}
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
#include <iostream.h>
d10 1
a10 1
RWBoolean
d15 1
a15 1
   return itvpf.timeVecFloat() == 0.0;
a37 8
// Return comparison strategy identifier
isAReturnType
LgFrZeroTimeVecFilterStrategy::isA()
const
{
   return id_;
}

a42 1
  assert( id_ == rhs.id_ );
a57 1
  assert( id_ == source.id_ );
a68 1
  assert( id_ == source.id_ );
a96 4
  assert( cs1.id_ == __LGFRZEROTIMEVECFILTERSTRATEGY );

  // Test isA method
  assert( cs1.isA() == __LGFRZEROTIMEVECFILTERSTRATEGY );
a97 1
  // Test copy constructor
a98 1
  assert( cs2.isA() == __LGFRZEROTIMEVECFILTERSTRATEGY );
a102 1
  assert( cs3.isA() == cs2.isA() );
a105 1
  assert( cs4Ptr->isA() == cs1.isA() );
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@d1 1
a1 3
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
#include <iostream>
d8 1
a8 1
bool
d13 1
a13 1
    return itvpf.timeVecFloat() == 0.0 ? true : false;
d36 8
d49 1
d65 1
d77 1
d106 4
d111 1
d113 1
d118 1
d122 1
@

