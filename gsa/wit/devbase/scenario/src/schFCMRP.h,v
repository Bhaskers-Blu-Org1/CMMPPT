head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.14
	Root-of-EndRw:1.1.1.1
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.45;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.29.51;	author wit;	state Exp;
branches
	1.1.1.1.14.1;
next	;

1.1.1.1.14.1
date	2003.01.08.17.42.35;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@#ifndef ScheduleFactoryForCMRP_H
#define ScheduleFactoryForCMRP_H
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.

#include <scenario/src/schFctry.h>

class LgFrScheduleFactoryForCMRP: public LgFrScheduleFactory
{
public:

  
  // Return list of schedule descriptors which can be used by factory to
  // create schedules.
  virtual
   LgFrScheduleDescriptorVector
     demandScheduleDescriptors()
       const;
  virtual
   LgFrScheduleDescriptorVector
     partScheduleDescriptors()
       const;
  
  // Create a copy of the *this on the heap and return a pointer to it.
  virtual
    LgFrScheduleFactory*
      clone (LgFrScenarioSmartPointer)
       const;
  
  // Constructor
  LgFrScheduleFactoryForCMRP(LgFrScenarioSmartPointer);
   
  // Destructor
  virtual
    ~LgFrScheduleFactoryForCMRP ();

  // test this class
  static void test();
  static void contextTest(const LgFrScheduleFactory & f);
  

// ---------------------------------------------------------------------
//  PROTECTED MEMBERS
// --------------------------------------------------------------------- 
protected:
  // Return the schedule type: INPUT or OUTPUT 
  virtual schdType
    scheduleType(const LgFrScheduleDescriptor& desc,
		 const LgFrAttributeScheduleStrategy & ass) const;

  // Return a schedule without getting it from the list of previously-
  // constructed schedules
  virtual
  LgFrSortingPartScheduleFloatSmartPointer 
  newPartScheduleFromScratch (const LgFrScheduleDescriptor& desc,
			      const bool deepCopy,
			      const bool toPopulate
			      )
      const;

  // Return a schedule without getting it from the list of previously-
  // constructed schedules
  virtual
  LgFrSortingDemandScheduleFloatSmartPointer 
  newDemandScheduleFromScratch (const LgFrScheduleDescriptor& desc,
				const bool deepCopy,
				const bool toPopulate
				)
      const;

  
  // Vector of descriptors which this factory supports.
  static LgFrScheduleDescriptorVector demandScheduleDescriptors_;  
  static LgFrScheduleDescriptorVector partScheduleDescriptors_;


// ---------------------------------------------------------------------
//  PRIVATE MEMBERS
// --------------------------------------------------------------------- 
private:

  // used to initialize demandScheduleDescriptors_ and partScheduleDescriptors_ 
  static LgFrScheduleDescriptorVector initializeDemandScheduleDescriptors();
  static LgFrScheduleDescriptorVector initializePartScheduleDescriptors();
  
  // Assignment operator (not allowed, use clone(LgFrScenarioSmartPointer) instead)
  LgFrScheduleFactoryForCMRP &
    operator=(const LgFrScheduleFactoryForCMRP& rhs);

  // Copy constructor (not allowed, use clone(LgFrScenarioSmartPointer) instead)
  LgFrScheduleFactoryForCMRP (const LgFrScheduleFactoryForCMRP &);

};
#endif


@


1.1
log
@Initial revision
@
text
@d3 2
a5 1
#include <rw/cstring.h>
d16 1
a16 1
   LgFrOrderedVectorScheduleDescriptor
d20 1
a20 1
   LgFrOrderedVectorScheduleDescriptor
a36 5
  // hash table initializer
  virtual
  void
  initHashTable ();
  
d56 2
a57 2
			      const RWBoolean deepCopy,
			      const RWBoolean toPopulate
d66 2
a67 2
				const RWBoolean deepCopy,
				const RWBoolean toPopulate
d73 2
a74 2
  static LgFrOrderedVectorScheduleDescriptor demandScheduleDescriptors_;  
  static LgFrOrderedVectorScheduleDescriptor partScheduleDescriptors_;
d83 2
a84 2
  static LgFrOrderedVectorScheduleDescriptor initializeDemandScheduleDescriptors();
  static LgFrOrderedVectorScheduleDescriptor initializePartScheduleDescriptors();
@


1.1.1.1
log
@Import scenario
@
text
@@


1.1.1.1.14.1
log
@Roguewave is gone
@
text
@a2 2
// RW2STL -- inserted:
// End of RW2STL -- inserted includes.
d4 1
d15 1
a15 1
   LgFrScheduleDescriptorVector
d19 1
a19 1
   LgFrScheduleDescriptorVector
d36 5
d60 2
a61 2
			      const bool deepCopy,
			      const bool toPopulate
d70 2
a71 2
				const bool deepCopy,
				const bool toPopulate
d77 2
a78 2
  static LgFrScheduleDescriptorVector demandScheduleDescriptors_;  
  static LgFrScheduleDescriptorVector partScheduleDescriptors_;
d87 2
a88 2
  static LgFrScheduleDescriptorVector initializeDemandScheduleDescriptors();
  static LgFrScheduleDescriptorVector initializePartScheduleDescriptors();
@

