head	1.10;
access;
symbols
	latest_sce_4_20_20060523:1.6.0.2
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.4.0.4
	sce_4_20_OSL:1.4
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.4
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.3.0.2
	Root-of-EndRw:1.3
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2010.11.22.22.01.48;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.26.17.51.20;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.26.16.25.08;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.08.15.02.05;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.19.22.34.37;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.19.22.14.19;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.30.18.34.30;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.25.23.13.49;	author austel;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.05.22.52.53;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.21.44.30;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.21.44.30;	author wit;	state Exp;
branches;
next	;


desc
@@


1.10
log
@WIT with CPLEX
@
text
@# Make Include File for Decision Support tools

# $Source: /u/wit/devbase/config/ds.mk,v $
# $Revision: 1.9 $
# $Id: ds.mk,v 1.9 2010/05/26 17:51:20 rjw Exp $

# This include file is for things that are generally useful when making
# applications for Decision Support.  It is intended to be included in all
# makefiles that are used to make WIT, programs that use the WIT API, and 
# later, programs that are in the Logistics Framework.
#
# IMPORTANT NOTES:
# Makefiles should include p_$(platform).mk before this file
#	because $(sep) and a lot of other things are defined there
# Makefiles should define $(appl_name) before calling this.  It is the
#   name of the directory where the application's subtree is kept, such as
#   "wit", "pmrp", or other immediate descendants of "$(DSD_DIR)".
# Makefiles should define $(sources) before using the rules in this
# file. $(sources) sould contain the list of .C and .c files that
# are in $(appl_name)'s source directory.
#
# Makefiles that use this make files should define the following
# variables so that the rules for constructing various types of files
# do the right thing.  Included with the variables are definitions for a 
# simple application that uses the WIT API
# CPPFLAGS	= -I$(wit_api_include_dir).
# CFLAGS  	= $(ds_comp_flags) 
# C++FLAGS 	= $(ds_comp_flags)
# LDFLAGS 	= $(ds_link_flags) $(wit_api_link_devbase_dir_flag)
# LOADLIBES	= $(wit_api_lib) $(ds_math_lib) $(ds_fortran_lib) $(db2_api_lib)

# Macros with _api_ in them are for use when making programs that use the API

# A few words about names:
# Names with _comp_ in them have to do with compiling
# Names with _link_ in them have to do with linking
# Names with _debug_ in them have to do with generating debuggable exe's
# Names with _demo_ in them have to do with generating exe's with reduced function
# Names with _profile_ in them have to do with ugenerating profilable exe's
# Names with _product_ in them have to do with exe's for production (includes
#					options to compile with code optim-
#					ization, no internal symbol table, etc)
# Names with _std_ in them are for options that are used no matter what
#					kind of exe is wanted
# Names with wit_api_ in them are used when making programs that use the WIT 
# 					API
# Names that end with _lib are linker options specifying libraries to search.
#	The proper from is "-lx", as in "-lm" or "-lxlc".
#	Gnu Make know that when it sees such a name in a dependency list, it
#	should make sure the file named "libx.a" in the library search path
#	is up-to-date.

# For help, see the on-line documentation for make available under GNU emacs

# Note: to see the default SUFFIXES, type make -p -f /dev/null

# Useful directory names.  All end with $(sep)
devbase		= $(DSD_DIR)
wit_dir		= ..$(sep)..$(sep)wit$(sep)
prmp_dir	= ..$(sep)..$(sep)pmrp$(sep)
wit_inc_dir	= $(wit_dir)src

# Relative path to source directory from the <architecture> directories
src_dir = ..$(sep)src$(sep)
# Name of the source directory's make include file
# source_make = appl.mk		Not used so far

# Places to find binary files (libraries, objects, executables)
appls_binary_dir	= .

# The implicit rules that GNU make provides use the following variable(s).  They
# are defined here to avoid undefined variable warnings
TARGET_ARCH =

# Flags for compilers should be defined in the $(platform).mk files
ds_comp_basic_flags	= $(ds_comp_arch_flags) $(ds_comp_std_flags) -DEXE_TYPE=$(exe_type) -DPLATFORM=$(platform)
ds_link_basic_flags	= $(ds_link_std_flags)

wit_api_lib		= -lwit

db2_api_lib             = -ldb2 -lc

db2_compiler_flag	= -DEXPORT_TO_DB2_TABLES

# Lex and Yacc
#lex_yacc_lib    	= -ly -ll
YFLAGS 			= -d

rw_library_dir		= $(RW_ROOT_DIR)$(platform)/lib
rw_include_dir		= $(RW_ROOT_DIR)$(platform)/include

db2_library_dir         = $(DB2INSTANCEPATH)/sqllib/lib
db2_include_dir         = $(DB2INSTANCEPATH)/sqllib/include

wit_api_includes_dir	= $(wit_inc_dir)
# Most WITUSE includes should be of the form <subsystemName>/src/<filename>
wituse_includes_dir	= ..$(sep)..

# This makes the right options get chosen based on whether the executable
# is for debugging, profiling, or production (running fast)
empty			:=
space			:= $(empty) $(empty)
space_exe_type_space	:= $(space)$(exe_type)$(space)
valid_exe_types		:= $(space)beta$(space)debug$(space)demo$(space)fast$(space)profile$(space)released$(space)slow$(space)
find_result		:= $(findstring $(space_exe_type_space),$(valid_exe_types))
stripped_find_result	:= $(strip $(find_result))

ifeq ($(exe_type),$(stripped_find_result))
    good_exe_type := true
else
    error_print1 := $(shell echo '***' Error in argument to make, exe_type is $(exe_type) but it must be one of  > /dev/tty)
    error_print2 := $(shell echo '***' the following  > /dev/tty)
    error_print3 := $(shell echo '***' $(valid_exe_types) > /dev/tty)
    good_exe_type := false
    SYNTAX ERROR INTENDED TO MAKE $(make) STOP.  FIX YOUR exe_type!
endif

include $(config_dir)t_$(exe_type).mk

include $(config_dir)sfDefine.mk

################################################################

depend: 
	chmod u+w Makefile
	cd ../src;$(X11R5_BIN_DIR)makedepend -f../$(platform)/Makefile  -- $(ds_make_depend_flags) $(CPPFLAGS) $(ds_comp_flags) -- $(dummyInclude)  $(sources) 

#	$(X11R5_BIN_DIR)makedepend  -- $(ds_make_depend_flags) $(CPPFLAGS) $(ds_comp_flags) -- $(addprefix $(src_dir),$(sources))

#		$(ds_comp_flags) is needed because it contains at
#		least some of the -D macrod definitions
#	/afs/watson.ibm.com/agora/share/power/X11R5/bin/makedepend -- $(ds_make_depend_flags) $(CPPFLAGS) $(ds_comp_flags) -- $(addprefix $(src_dir),$(sources))

################################################################

# This will run compiles on compile-servers concurrently, 
# assuming that it is started from a server machine.
# To use it, you have to be logged onto the serverss
# and have current AFS tokens.  (AFS tokens are passed to remote shell
# executions between Agora machines, but not to or from non-Agora 
# machines.)  You also have to be able to use rsh to run commands on the
# two remote machines, which will generally mean having lines in your .rhosts
# of the form
# host userid
# file to allow it.  See the rsh documentation.
parComp:
	$(save_exe_type)
	# Make names of object files that depend on the changed source files
	# oodObjs: file for out-of-date-object file names
	$(MAKE) -n dotohs \
	| sed -e '/^mv /d' -e '/^yacc /d' -e '/^lex /d' \
	| sed -e '1d' -e '$$d' -e '/Nothing to be done/d' \
	| sed -e 's/^.* \([a-zA-Z0-9_]*\.o\) .*$$/\1/' -e 's/^.* \([a-zA-Z0-9_]*\.o\)$$/\1/' >oodObjs
	# Compile the .o files
	$(DS_DIR)bin/distCompile oodObjs $(MAKEOVERRIDES)
	rm oodObjs

# this is a variation of the above.
# here, we save the whole command in oodObjs.
# the script newdistCompile starts up slave processes and sends commands
# to the slaves.  I don't think assumptions are made about what the commands are,
# although they are executed individually, so builtins like "cd" won't have
# the desired effect.
# There is no point in MAKEOVERRIDES now.
newparComp:
	$(save_exe_type)
	# Make names of object files that depend on the changed source files
	# oodObjs: file for out-of-date-object file names
	$(MAKE) -n dotohs \
	| sed -e '/^mv /d' -e '/^yacc /d' -e '/^lex /d' \
	| sed -e '1d' -e '$$d' -e '/Nothing to be done/d' > oodObjs
	# Compile the .o files
	$(DS_DIR)bin/newdistCompile oodObjs 
	rm oodObjs

################################################################

clean:	
	-$(RM) *.$(obj_suffix) *.$(lib_suffix) ptrepository/* $(exes) \
	*.so *.rco *.dat *.class $(exe_type_file) $(intermediate_files)

#-------------------------------------------------------------------------------
# Macros to facilitate building WIT and WIT application programs when CPLEX is
# to be embedded into WIT.
#
# ds_cplex_lib_dir:
#    When WIT is to embed CPLEX, this is the directory where CPLEX can be found.
#    Otherwise this is the null string.
#
# ds_cplex_link_flags:
#    When WIT is to embed CPLEX, this expands to the flags required for CPLEX
#    when linking a WIT application program.
#    Otherwise this is the null string.
#
# Prereqisite macros:
#
#    WIT_CPLEX_HOME:
#       This is an environment variable.
#       If CPLEX is to be embedded into WIT, WIT_CPLEX_HOME should be defined as
#          the path where CPLEX files are found.
#       If CPLEX is not to be embedded into WIT, WIT_CPLEX_HOME should be left
#          undefined, or defined as the null string.
#
#    ds_cplex_lib_subdir:
#       This is defined in the p_{platform}.mk files.
#       This is the subdirectory in which the CPLEX library can be found on the
#          current platform (when CPLEX is installed).
#
#    ds_cplex_as_dll:
#       This is defined in the p_{platform}.mk files.
#       YES indicates that CPLEX is to be linked in as a DLL on the current
#          platform.
#       Anything but YES indicates that CPLEX is not to be linked in as a DLL
#          on the current platform.
#
#    ds_posix_threads_flag:
#       This is defined in the p_{platform}.mk files.
#       On platforms on which CPLEX requires POSIX threads support, this is the
#          flag to link-in POSIX threads support.
#       On other platforms, this is the null string.
#-------------------------------------------------------------------------------

ifneq ($(WIT_CPLEX_HOME),)

      #-------------------------
      # CPLEX is to be embedded.
      #-------------------------

   ds_cplex_lib_dir       = $(WIT_CPLEX_HOME)/lib/$(ds_cplex_lib_subdir)

   ifeq ($(ds_cplex_as_dll),YES)

         #-----------------------------------
         # CPLEX is to be linked in as a DLL.
         #-----------------------------------

      ds_cplex_link_flags = $(ds_posix_threads_flag) \
                            -L$(ds_cplex_lib_dir)    \
                            -lcplex122

   else

         #---------------------------------------
         # CPLEX is not to be linked in as a DLL.
         #---------------------------------------

      ds_cplex_link_flags = $(ds_posix_threads_flag)

   endif

else

      #-----------------------------
      # CPLEX is not to be embedded.
      #-----------------------------

   ds_cplex_lib_dir       =
   ds_cplex_link_flags    =

endif

@


1.9
log
@Porting WIT-J to Cygwin.
@
text
@d4 2
a5 2
# $Revision: 1.8 $
# $Id: ds.mk,v 1.8 2010/05/26 16:25:08 rjw Exp $
d182 50
d233 28
@


1.8
log
@Porting WIT-J to Cygwin.
@
text
@d4 2
a5 2
# $Revision: 1.7 $
# $Id: ds.mk,v 1.7 2008/04/08 15:02:05 rjw Exp $
a117 5
   # The following macro should be redefined as -mno-cygwin on platforms where
   # the -mno-cygwin compile/link flag is desired:
   #
mno_cygwin_flag =

@


1.7
log
@Added "*.so" to the argument list of the remove command that is executed
when "make clean" is issued.
This is needed for doing make clean properly on the C++ portion of WIT-J.
@
text
@d4 2
a5 2
# $Revision: 1.6 $
# $Id: ds.mk,v 1.6 2006/04/19 22:34:37 rjw Exp $
d118 5
@


1.6
log
@Removed osl_library_dir.
@
text
@d4 2
a5 2
# $Revision: 1.5 $
# $Id: ds.mk,v 1.5 2006/04/19 22:14:19 rjw Exp $
d180 1
a180 1
	*.rco *.dat *.class $(exe_type_file) $(intermediate_files)
@


1.5
log
@Removed osl_include_dir.
@
text
@d4 2
a5 2
# $Revision: 1.4 $
# $Id: ds.mk,v 1.4 2003/06/30 18:34:30 dpc Exp $
a94 2
osl_library_dir		= $(OSL_ROOT_DIR)$(platform)/lib

@


1.4
log
@Added dummyHeaders for GNU makedepend problem.
@
text
@d4 2
a5 2
# $Revision: 1.3 $
# $Id: ds.mk,v 1.3 2002/11/25 23:13:49 austel Exp $
a95 1
osl_include_dir		= $(OSL_ROOT_DIR)$(platform)/include
@


1.3
log
@Added new target "newdistCompile" to compile wit in parallel.
This relies on two new perl scripts in wit/bin:
	/u/wit/bin/newdistCompile
	/u/wit/bin/newdistCompileSlave
@
text
@d4 2
a5 2
# $Revision: 1.2 $
# $Id: ds.mk,v 1.2 2001/12/05 22:52:53 fasano Exp $
d129 1
a129 1
	cd ../src;$(X11R5_BIN_DIR)makedepend -f../$(platform)/Makefile  -- $(ds_make_depend_flags) $(CPPFLAGS) $(ds_comp_flags) -- $(sources)
@


1.2
log
@Attempted to fix to work with new makedepend
@
text
@d4 2
a5 2
# $Revision: 1.1.1.1 $
# $Id: ds.mk,v 1.1.1.1 2000/02/23 21:44:30 wit Exp $
d159 18
@


1.1
log
@Initial revision
@
text
@d3 3
a5 3
# $Source: /u/implode/devbase/config/ds.mk,v $
# $Revision: 1.33 $
# $Id: ds.mk,v 1.33 2000/02/08 18:41:54 fasano Exp $
d129 3
a131 1
	$(X11R5_BIN_DIR)makedepend -- $(ds_make_depend_flags) $(CPPFLAGS) $(ds_comp_flags) -- $(addprefix $(src_dir),$(sources))
@


1.1.1.1
log
@config Import
@
text
@@
