head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2002.09.17.13.25.38;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Added so solve does optImplode multiple times.
The demandVols are set based on probability of project occuring.
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include <vector>
#include "probAppData.h"

void ILSprobAppData::setProbGrid(std::vector<float> grid)
{
  probGrid_ = grid;
}
std::vector<float> ILSprobAppData::getProbGrid() const
{
  return probGrid_;
}


// default constructor
ILSprobAppData::ILSprobAppData()
:
ILSappData(),probGrid_()
{
  probGrid_.push_back(0.0f);
}

// destructor

ILSprobAppData::~ILSprobAppData()
{}

// copy constructor
ILSprobAppData::ILSprobAppData( const ILSprobAppData& source ):
ILSappData(source),
probGrid_(source.probGrid_)
{};

// assignment operator
ILSprobAppData&
ILSprobAppData::operator=(const ILSprobAppData& rhs)
{  
  if (this != &rhs) {        
    ILSappData::operator=(rhs);
    probGrid_ = rhs.probGrid_;
  }
  return *this;
}

ILSappData * ILSprobAppData::clone() const
{ return (new ILSprobAppData(*this));}

// Self-test
void ILSprobAppData::test()
{

  ILSprobAppData ad0;
  assert(ad0.getProbGrid().size()==1);
  assert(ad0.getProbGrid()[0]==0.0f);

  std::vector<float> g(10);
  ad0.setProbGrid(g);  
  assert(ad0.getProbGrid().size()==10);
  assert(ad0.getProbGrid()[2]!=2.0);
  
  g[2]=2.0;;
  ad0.setProbGrid(g);  
  assert(ad0.getProbGrid().size()==10);
  assert(ad0.getProbGrid()[2]==2.0);
}
@
