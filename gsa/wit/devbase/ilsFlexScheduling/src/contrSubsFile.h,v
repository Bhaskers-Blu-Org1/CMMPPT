head	1.3;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2002.10.28.03.01.43;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.06.17.39.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added ability in ScoFile class to handle SCE like comments
@
text
@#ifndef ILS_CONTRSUBSFILE_h
#define ILS_CONTRSUBSFILE_h

#include "scoFile.h"


class ILScontrSubsFile : public SCOcsvFormatFile {
public:

  // Fields
  getIntFieldH(band);
  getFloatFieldH(subsPer);
  
  // preferred constructor
  ILScontrSubsFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
#if 0 
    insertField("proj");
#else
    hasHeaderRecord(2);
#endif
    commentRecords(true);
  };
  
  // destructor
  ~ILScontrSubsFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ILScontrSubsFile file("../data/example1/contrSubs.csv");
    
    // Test reading first record

    int band = file.bandAsInt(1);
    assert( file.bandAsInt(1) == 7 );
    assert( file.subsPerAsFloat(1) == 0.7f );

    // Test reading second record
    assert( file.bandAsInt(2) == 8 );
    assert( file.subsPerAsFloat(2) == 0.8f );


    // Test reading third record
    assert( file.bandAsInt(3) == 9 );
    assert( file.subsPerAsFloat(3) == 0.9f );

    
    // Test reading record by key    
    assert( file.bandAsInt(file.key(3)) == 9 );
    assert( file.subsPerAsFloat(file.key(3)) == 0.9f );

    assert( file.numRecords() == 4 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = band(recNum);
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ILScontrSubsFile();
  
  // copy constructor  -- don't use!
  ILScontrSubsFile( const ILScontrSubsFile& source );
  
  // assignment operator -- don't use!
  ILScontrSubsFile&
  operator=(const ILScontrSubsFile& rhs);

  
};



class ILScontrSubsFileIterator : public SCOfileIterator {
public:
  
  // fields
  getIntFieldFileWithIteratorH(band);
  getFloatFieldFileWithIteratorH(subsPer);

  
  // preferred constructor
  ILScontrSubsFileIterator(const ILScontrSubsFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ILScontrSubsFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ILScontrSubsFile file("../data/example1/contrSubs.csv");
    ILScontrSubsFileIterator fileIter(file);
    
    // loop once for each record
    bool firstRecord = true;
    for ( fileIter(); fileIter()!=NULL; ) {    
      if ( firstRecord ) {
        
        assert( fileIter.bandAsInt() == 7 );
        assert( fileIter.subsPerAsFloat() == 0.7f );
        
        firstRecord = false;
      }
    }
  }

private:
  
  
  // default constructor -- don't use!
  ILScontrSubsFileIterator();
  
  // copy constructor  -- don't use!
  ILScontrSubsFileIterator( const ILScontrSubsFileIterator& source );
  
  // assignment operator -- don't use!
  ILScontrSubsFileIterator&
  operator=(const ILScontrSubsFileIterator& rhs);

  
};
#endif
@


1.2
log
@modified so unitTest can be run from the power43 directory
@
text
@d25 1
d37 2
d56 1
@


1.1
log
@Initial revision
@
text
@d33 1
a33 1
    ILScontrSubsFile file("contrSubs.csv");
d101 1
a101 1
    ILScontrSubsFile file("contrSubs.csv");
@


1.1.1.1
log
@initial import
@
text
@@
