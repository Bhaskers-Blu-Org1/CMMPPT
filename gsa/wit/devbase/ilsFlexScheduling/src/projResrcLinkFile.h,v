head	1.3;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2002.10.28.03.01.43;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.06.17.39.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added ability in ScoFile class to handle SCE like comments
@
text
@#ifndef ILS_PROJRESRCLINKFILE_h
#define ILS_PROJRESRCLINKFILE_h

#include "scoFile.h"


class ILSprojResrcLinkFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(proj);
  getFieldH(role);
  getIntFieldH(band);

  
  // preferred constructor
  ILSprojResrcLinkFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
#if 0 
    insertField("proj");
#else
    hasHeaderRecord(3);
#endif
    commentRecords(true);
  };
  
  // destructor
  ~ILSprojResrcLinkFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ILSprojResrcLinkFile file("../data/example1/projResrcLink.csv");
    
    // Test reading first record
    assert( file.proj(1) == "p1" );
    assert( file.role(1) == "role1" );
    assert( file.bandAsInt(1) == 7 );

    // Test reading second record
    assert( file.proj(2) == "p1" );
    assert( file.role(2) == "role1" );
    assert( file.bandAsInt(2) == 8 );

    // Test reading third record
    assert( file.proj(3) == "p2" );
    assert( file.role(3) == "role1" );
    assert( file.bandAsInt(3) == 7 );
    
    // Test reading record by key
    assert( file.proj(file.key(4)) == "p2" );
    assert( file.role(file.key(4)) == "role2" );
    assert( file.bandAsInt(file.key(4)) == 8 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = proj(recNum)+"$+&"+role(recNum)+"$+&"+band(recNum);
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ILSprojResrcLinkFile();
  
  // copy constructor  -- don't use!
  ILSprojResrcLinkFile( const ILSprojResrcLinkFile& source );
  
  // assignment operator -- don't use!
  ILSprojResrcLinkFile&
  operator=(const ILSprojResrcLinkFile& rhs);

  
};



class ILSprojResrcLinkFileIterator : public SCOfileIterator {
public:
  
  // fields
  getFieldFileWithIteratorH(proj);
  getFieldFileWithIteratorH(role);
  getIntFieldFileWithIteratorH(band);

  
  // preferred constructor
  ILSprojResrcLinkFileIterator(const ILSprojResrcLinkFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ILSprojResrcLinkFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ILSprojResrcLinkFile file("../data/example1/projResrcLink.csv");
    ILSprojResrcLinkFileIterator fileIter(file);
    
    // loop once for each record
    bool firstRecord = true;
    for ( fileIter(); fileIter()!=NULL; ) {    
      if ( firstRecord ) {
        
        assert( fileIter.proj() == "p1" );
        assert( fileIter.role() == "role1" );
        assert( fileIter.bandAsInt() == 7 );
        
        firstRecord = false;
      }
    }
  }

private:
  
  
  // default constructor -- don't use!
  ILSprojResrcLinkFileIterator();
  
  // copy constructor  -- don't use!
  ILSprojResrcLinkFileIterator( const ILSprojResrcLinkFileIterator& source );
  
  // assignment operator -- don't use!
  ILSprojResrcLinkFileIterator&
  operator=(const ILSprojResrcLinkFileIterator& rhs);

  
};
#endif
@


1.2
log
@modified so unitTest can be run from the power43 directory
@
text
@d27 1
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
    ILSprojResrcLinkFile file("projResrcLink.csv");
d105 1
a105 1
    ILSprojResrcLinkFile file("projResrcLink.csv");
@


1.1.1.1
log
@initial import
@
text
@@
