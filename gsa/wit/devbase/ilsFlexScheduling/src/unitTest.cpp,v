head	1.6;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@// @;


1.6
date	2002.10.28.03.01.43;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.17.13.25.38;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.09.18.46.15;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.09.17.47.48;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.06.18.15.33;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Added ability in ScoFile class to handle SCE like comments
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include <assert.h>
#include <iostream.h>
#include <float.h>

//#include <wit.h>

#include "projFile.h"
#include "resrcFile.h"
#include "resrcAttrFile.h"
#include "projResrcLinkFile.h"
#include "projResrcLinkAttrFile.h"
#include "contrSubsFile.h"
#include "globalAttrFile.h"
#include "projAppData.h"
#include "resrcAppData.h"
#include "probAppData.h"
#include "ilsProblem.h"

// Function Prototypes. Function definitions is in this file.
void testingMessage( const char * const msg );



int
main (int argc, char * argv[])
{
  testingMessage( "Testing ILSprojFile\n" );
  ILSprojFile::test();

  testingMessage( "Testing ILSprojFileIterator\n" );
  ILSprojFileIterator::test();

  testingMessage( "Testing ILSresrcFile\n" );
  ILSresrcFile::test();

  testingMessage( "Testing ILSresrcFileIterator\n" );
  ILSresrcFileIterator::test();

  testingMessage( "Testing ILSresrcAttrFile\n" );
  ILSresrcAttrFile::test();

  testingMessage( "Testing ILSresrcAttrFileIterator\n" );
  ILSresrcAttrFileIterator::test();

  testingMessage( "Testing ILSprojResrcLinkFile\n" );
  ILSprojResrcLinkFile::test();

  testingMessage( "Testing ILSprojResrcLinkFileIterator\n" );
  ILSprojResrcLinkFileIterator::test();

  testingMessage( "Testing ILSprojResrcLinkAttrFile\n" );
  ILSprojResrcLinkAttrFile::test();

  testingMessage( "Testing ILSprojResrcLinkAttrFileIterator\n" );
  ILSprojResrcLinkAttrFileIterator::test();

  testingMessage( "Testing ILScontrSubsFile\n" );
  ILScontrSubsFile::test();

  testingMessage( "Testing ILScontrSubsFileIterator\n" );
  ILScontrSubsFileIterator::test();
  
  testingMessage( "Testing ILSglobalAttrFile\n" );
  ILSglobalAttrFile::test();

  testingMessage( "Testing ILSprojAppData\n" );
  ILSprojAppData::test();

  testingMessage( "Testing ILSresrcAppData\n" );
  ILSresrcAppData::test();

  testingMessage( "Testing ILSprobAppData\n" );
  ILSprobAppData::test();
  
  testingMessage( "Testing ILSproblem\n" );
  ILSproblem::test();

  testingMessage( "All tests completed successfully\n" );

  return 0;
}


// Display message on stdout and stderr
void testingMessage( const char * const msg )
{
  cerr <<msg;
  //cout <<endl <<"*****************************************"
  //     <<endl <<msg <<endl;
}
@


1.5
log
@Added so solve does optImplode multiple times.
The demandVols are set based on probability of project occuring.
@
text
@d63 1
a63 1
  ILSprojResrcLinkAttrFile::test();
d66 1
a66 1
  ILSprojResrcLinkAttrFileIterator::test();
@


1.4
log
@Adding resrcAppData
@
text
@d21 1
d76 3
@


1.3
log
@Updated to add projApp Data
@
text
@d19 2
a21 1
#include "projAppData.h"
d72 3
@


1.2
log
@adding ilsProblem class
@
text
@d20 1
d68 3
@


1.1
log
@Initial revision
@
text
@d19 1
d67 3
@


1.1.1.1
log
@initial import
@
text
@@
