head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2002.09.17.13.25.38;	author fasano;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.16.21.35.23;	author fasano;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.16.16.33.29;	author fasano;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.13.19.54.41;	author sanjeebd;	state Exp;
branches;
next	1.12;

1.12
date	2002.09.11.23.11.48;	author sanjeebd;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.11.14.15.31;	author fasano;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.11.13.07.52;	author fasano;	state Exp;
branches;
next	1.9;

1.9
date	2002.09.11.11.42.26;	author fasano;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.10.22.19.07;	author sanjeebd;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.10.12.13.40;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.10.02.31.51;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.07.12.02.28;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.06.21.43.42;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.06.20.34.03;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.06.20.05.41;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.06.18.15.33;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Added so solve does optImplode multiple times.
The demandVols are set based on probability of project occuring.
@
text
@#ifndef ILSproblem_h
#define ILSproblem_h

#include <string>
#include <vector>
#include <map>


class WitRun;

class ILSproblem  {
public:

  //------------------------------------
  // Set/Get String Describing Problem
  void setTitle(const std::string & title);
  std::string getTitle() const;

  // Set/Get Number of Periods in Problem
  void setNPeriods(int nP);
  int getNPeriods() const;

  //----------------------
  // Methods for projects.
  //----------------------
  void addProject(const std::string & project );

  // Get list of all projects
  void getProjects(
    std::vector<std::string> & projects ) const;

  void setProjectCloseProb(const std::string & project, float closingProbability);
  float getProjectCloseProb(const std::string & project) const;

  void setProjectRateScale(const std::string & project, float rateScale);
  float getProjectRateScale(const std::string & project) const;

  void setProjectStartPeriod(const std::string & project, int startPeriod);
  int getProjectStartPeriod(const std::string & project ) const;

  void setProjectRevenue(const std::string & project, float revenue);
  float getProjectRevenue(const std::string & project ) const;

  // Get the execution volume of the project.
  // This will be 0 if the project will not be performed (executed).
  // It will be 1 if the project will be done.
  // It can be between 0 and 1 if the solution includes a portion of the project being done.
  // retVal[g] is the execVol for projects
  // with probability >= getProbGrid()[g].
  std::vector<float> getProjectExecVol(const std::string & project ) const;

  //----------------------
  // Methods for resources
  //----------------------
  void addResource(const std::string & role, int band );

  // Get list of all resources
  void getResources(
    std::vector<std::string> & roles,
    std::vector<int> & bands ) const;
  void setResourceIbmCost(
    const std::string & role, int band, 
    float ibmCost);
  void setResourceContrCost(
    const std::string & role, int band, 
    float ibmCost);
  float getResourceIbmCost(
    const std::string & role, int band);
  float getResourceContrCost(
    const std::string & role, int band);

  void setResourceIbmSupplyVol(
    const std::string & role, int band, 
    std::vector<float> supplyVol );
  std::vector<float> getResourceIbmSupplyVol(
    const std::string & role, int band );
  void setResourceContrSupplyVol(
    const std::string & role, int band, 
    std::vector<float> supplyVol );
  std::vector<float> getResourceContrSupplyVol(
    const std::string & role, int band );
  
  // Get the consVol of resource.
  // retVal[g,t] is the consVol in period t for projects
  // with probability >= getProbGrid()[g].
  std::vector< std::vector<float> > getResourceIbmConsVol(
    const std::string & role, int band );
  std::vector< std::vector<float> > getResourceContrConsVol(
    const std::string & role, int band );

  
  // If all projects can not be executed, then
  // get a list of gating resources
  void getResourceShortages(     
    std::vector<std::string> & resourceDescriptions,
    std::vector<int> & periods,
    std::vector<float> & shortageVols ) const;
  
  //----------------------
  // Methods for project-resource links. 
  //----------------------
  void addProjectResourceLink(
    const std::string & project,
    const std::string & role, int band);

  // Get list of project resource links
  void getProjectResourceLinks(
    std::vector<std::string> & projects,
    std::vector<std::string> & roles, std::vector<int> & bands) const;

  void setProjectResourceLinkConsRate(
    const std::string & project,
    const std::string & role, int band,
    const std::vector<float> & consRate);
  std::vector<float> getProjectResourceLinkConsRate(
    const std::string & project,
    const std::string & role, int band);

  //--------------------
  // Solve Methods
  // Example probGrid: 1., 0.75, 0.5, 0.25, 0.0
  //--------------------
  void setProbabilityGrid(const std::vector<float> & probGrid);
  std::vector<float> getProbabilityGrid();

  void solve();

  //----------------------------------------------------------------------

  void writeWitData( std::string filename ) const;

  //----------------------------------------------------------------------

  // default constructor
  ILSproblem();
  
  // copy constructor
  ILSproblem( const ILSproblem& source );
  
  // assignment operator
  ILSproblem&
  operator=(const ILSproblem& rhs);
  
  // destructor
  ~ILSproblem();
  

  // Self-test
  static void test();

private:

  // Methods for handling resource names
  static std::string ibmBenchResourceName(const std::string & role,int band);
  static std::string contrBenchResourceName(const std::string & role,int band);
#if 0
  static std::string ibmWorkingResourceName(const std::string & role,int band);
  static std::string contrWorkingResourceName(const std::string & role,int band);
#endif
  static std::string resourceName(const std::string & role,int band);
  static std::string roleFromResourceName(const std::string & resName );
  static int         bandFromResourceName(const std::string & resName );

  // Methods for handling project resource link names
  static std::string ibmProjectResourceLinkName(const std::string & proj,const std::string & role,int band);
  static std::string contrProjectResourceLinkName(const std::string & proj,const std::string & role,int band);
  static std::string projectResourceLinkName(const std::string & proj,const std::string & role,int band);
  static std::string roleFromProjectResourceLinkName(const std::string & projResrcLinkName );
  static int         bandFromProjectResourceLinkName(const std::string & projResrcLinkName );
  static std::string projectFromProjectResourceLinkName(const std::string & projResrcLinkName );

  // Return the range of bomEntry indices connecting the operation and part
  void getOperationBomEntryIndices(
                                 const std::string & opName,
                                 const std::string & consPartName,
                                 int & bomEntryIndexFirst,
                                 int & bomEntryIndexLast );

  inline std::vector<float> witFloatStarToStlVec(const float * inputVec ) const
  {
    std::vector<float>  retVal;
    int np = getNPeriods();
    int i;
    for ( i=0; i<np; ++i ) retVal.push_back(inputVec[i]);
    return retVal;
  };

  inline float * stlVecToFloatStar(const std::vector<float> & inputVector ) const
  {
    int len = inputVector.size();
    float * retVal = (float *) malloc(len*sizeof(float));
    int i;
    for ( i=0; i<len; ++i ) retVal[i] = inputVector[i];
    return retVal;
  };
private:
  
 

  WitRun * mutableWitRun() const;
  WitRun * witRun();

  void gutsOfCopy( const ILSproblem& source );
  void gutsOfDestructor();

  mutable WitRun * wr_;

  std::vector<std::string> projectNames_; 
  std::vector<std::string> resourceNames_;  
  std::vector<std::string> projectResourceLinkNames_; 
};


#endif
@


1.15
log
@Added methods to return focussedShortages and added code to call method in main program.
Also fixed bug where DemandVol was never set to 1.
@
text
@d44 7
a50 1
  float getProjectExecVol(const std::string & project ) const;
d83 4
a86 1
  std::vector<float> getResourceIbmConsVol(
d88 1
a88 1
  std::vector<float> getResourceContrConsVol(
d100 1
a100 1
  // Methods for project-resource links. To be added.
d120 2
a121 1
  // Method to optimize
d123 3
d127 2
@


1.14
log
@Added methods to get execVol and consVol.
Updated to write csv files.
@
text
@d81 8
@


1.13
log
@added the Optimize() method to ILSproblem
@
text
@d44 2
d77 5
d102 4
a126 6

  //--------------------
  // Method to optimize
  //--------------------
  void Optimize();
 
@


1.12
log
@Added methods for ResourceSupplyVol
@
text
@a96 1
  
d117 4
@


1.11
log
@Added function prototypes for get/set of resource supply vol
@
text
@d24 1
a24 1
  // Methods for projects. To be added.
@


1.10
log
@implemented [s,g]etProjectResourceLinkConsRate
@
text
@d63 11
@


1.9
log
@started implementing projectResourceLink methods.
slightly modified some of the project methods.
@
text
@d130 6
@


1.8
log
@Added functionality for projects
@
text
@d74 1
a74 1
    std::vector<std::string> & roles, std::vector<int> & bands);
d114 1
d117 1
d122 8
d161 2
a162 1
  std::vector<std::string> resourceNames_; 
@


1.7
log
@Added prototypes for projectResource link methods.
@
text
@a23 20
  // Methods for resources
  //----------------------
  void addResource(const std::string & role, int band );

  // Get list of all resources
  void getResources(
    std::vector<std::string> & roles,
    std::vector<int> & bands ) const;
  void setResourceIbmCost(
    const std::string & role, int band, 
    float ibmCost);
  void setResourceContrCost(
    const std::string & role, int band, 
    float ibmCost);
  float getResourceIbmCost(
    const std::string & role, int band);
  float getResourceContrCost(
    const std::string & role, int band);

  //----------------------
d28 1
a28 1
  // Get list of all resources
d44 19
d149 2
a151 1
  
@


1.6
log
@Added prototypes for project methods.
@
text
@d64 21
@


1.5
log
@Added some comments and fixed function prototypes for getting resourceCost
@
text
@a31 2

  // use witSetOperationExecCost
d42 22
@


1.4
log
@Added method getResources.
Correctly implemented method resourceName(band,role)
@
text
@d23 1
d25 1
d27 2
d40 1
a40 1
  void getResourceIbmCost(
d42 1
a42 1
  void getResourceContrCost(
@


1.3
log
@now have code to addResources and prototypes for setting costs
@
text
@d25 3
d67 1
d73 2
d105 1
a105 1
  
@


1.2
log
@started working on adding resources
@
text
@d26 12
d63 6
@


1.1
log
@adding ilsProblem class
@
text
@d23 3
@

