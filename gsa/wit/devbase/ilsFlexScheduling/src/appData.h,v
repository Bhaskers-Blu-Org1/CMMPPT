head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2002.09.09.17.47.48;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Updated to add projApp Data
@
text
@#ifndef ILSappData_h
#define ILSappData_h

#include <vector>
#include <map>
#include <cassert>

class ILSappData  {
public:
  virtual ILSappData * clone() const = 0;

  // destructor
  virtual ~ILSappData(){};

protected:
  
  // constructor
  ILSappData(){};
  
  // copy constructor
  ILSappData( const ILSappData& source ){};
  
  // assignment operator
  ILSappData & operator=(const ILSappData& rhs)
  {  
    if (this != &rhs) {        
    // nothing to do here
    }
    return *this;
  }
  
  // Self-test
  //static void test();

  static void setVector(int len, const float * inputVec, std::vector<float> & outputVec )
  {
    int i;
    for ( i=0; outputVec.size()<len; ++i ) outputVec.push_back(0.0);
    for ( i=0; i<len; ++i ) outputVec[i] = inputVec[i];
  };
  
  static void setVector(int len, float inputScalar, std::vector<float> & outputVec )
  {
    int i;
    for ( i=0; outputVec.size()<len; ++i ) outputVec.push_back(0.0);
    for ( i=0; i<len; ++i ) outputVec[i] = inputScalar;
  };

  //v2=v2+v1
  static void addVector(const std::vector<float> & v1, std::vector<float> & v2)
  { 
    assert(v1.size()==v2.size());
    for (int t=0; t<v1.size(); t++) v2[t]+=v1[t];
  };

};



#endif
@
