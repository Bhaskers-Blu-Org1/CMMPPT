head	1.2;
access;
symbols;
locks; strict;
comment	@// @;


1.2
date	2002.09.17.13.25.38;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.09.18.46.15;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Added so solve does optImplode multiple times.
The demandVols are set based on probability of project occuring.
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include "resrcAppData.h"

void ILSresrcAppData::setCost(float cost)
{
  cost_ = cost;
}
float ILSresrcAppData::getCost() const
{
  return cost_;
}

void ILSresrcAppData::pushConsVol(std::vector<float> cv )
{
  consVols_.push_back(cv);
}

std::vector< std::vector<float> > ILSresrcAppData::getConsVol() const
{
  return consVols_;
}

// default constructor
ILSresrcAppData::ILSresrcAppData()
:
ILSappData(),cost_(0.0),consVols_()
{}

// destructor

ILSresrcAppData::~ILSresrcAppData()
{}

// copy constructor
ILSresrcAppData::ILSresrcAppData( const ILSresrcAppData& source ):
ILSappData(source),
cost_(source.cost_),
consVols_(source.consVols_)
{};

// assignment operator
ILSresrcAppData&
ILSresrcAppData::operator=(const ILSresrcAppData& rhs)
{  
  if (this != &rhs) {        
    ILSappData::operator=(rhs);
    cost_ = rhs.cost_;
    consVols_ = rhs.consVols_;
  }
  return *this;
}

ILSappData * ILSresrcAppData::clone() const
{ return (new ILSresrcAppData(*this));}

// Self-test
void ILSresrcAppData::test()
{

  ILSresrcAppData ad0;
  assert(ad0.getCost()==0.0f);
  
  {
    ILSresrcAppData ad;
    ad.setCost(5.5f);
    assert(ad.getCost()==5.5f);

    assert(ad.getConsVol().size()==0);

    std::vector<float> cv0(3);
    cv0[0]=1.0f;
    cv0[1]=2.0f;
    cv0[2]=3.0f;
    ad.pushConsVol(cv0);
    assert(ad.getConsVol().size()==1);
    assert(ad.getConsVol()[0].size()==3);
    assert(ad.getConsVol()[0][0]==1.0f);
    assert(ad.getConsVol()[0][1]==2.0f);
    assert(ad.getConsVol()[0][2]==3.0f);

    std::vector<float> cv1(3);
    cv1[0]=4.0f;
    cv1[1]=5.0f;
    cv1[2]=6.0f;
    ad.pushConsVol(cv1);
    assert(ad.getConsVol().size()==2);
    assert(ad.getConsVol()[0].size()==3);
    assert(ad.getConsVol()[0][0]==1.0f);
    assert(ad.getConsVol()[0][1]==2.0f);
    assert(ad.getConsVol()[0][2]==3.0f);
    assert(ad.getConsVol()[1].size()==3);
    assert(ad.getConsVol()[1][0]==4.0f);
    assert(ad.getConsVol()[1][1]==5.0f);
    assert(ad.getConsVol()[1][2]==6.0f);
    
    ad0 = ad;
  }
  
  assert(ad0.getCost()==5.5f);
  
  assert(ad0.getConsVol().size()==2);
  assert(ad0.getConsVol()[0].size()==3);
  assert(ad0.getConsVol()[0][0]==1.0f);
  assert(ad0.getConsVol()[0][1]==2.0f);
  assert(ad0.getConsVol()[0][2]==3.0f);
  assert(ad0.getConsVol()[1].size()==3);
  assert(ad0.getConsVol()[1][0]==4.0f);
  assert(ad0.getConsVol()[1][1]==5.0f);
  assert(ad0.getConsVol()[1][2]==6.0f);
  
  ILSresrcAppData * ad1Clone = (ILSresrcAppData *)ad0.clone();  
  assert(ad1Clone->getCost()==5.5f);
  assert(ad1Clone->getConsVol().size()==2);
  assert(ad1Clone->getConsVol()[0].size()==3);
  assert(ad1Clone->getConsVol()[0][0]==1.0f);
  assert(ad1Clone->getConsVol()[0][1]==2.0f);
  assert(ad1Clone->getConsVol()[0][2]==3.0f);
  assert(ad1Clone->getConsVol()[1].size()==3);
  assert(ad1Clone->getConsVol()[1][0]==4.0f);
  assert(ad1Clone->getConsVol()[1][1]==5.0f);
  assert(ad1Clone->getConsVol()[1][2]==6.0f);
  delete ad1Clone;
}
@


1.1
log
@Adding resrcAppData
@
text
@d17 9
d30 1
a30 1
ILSappData(),cost_(0.0)
d41 2
a42 1
cost_(source.cost_)
d52 1
d71 29
d104 11
a114 1

d117 9
@

