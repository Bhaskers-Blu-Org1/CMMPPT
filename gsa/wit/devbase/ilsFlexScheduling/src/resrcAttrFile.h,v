head	1.4;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2002.10.28.03.01.43;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.11.14.14.57;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.06.17.39.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Added ability in ScoFile class to handle SCE like comments
@
text
@#ifndef ILS_RESRCATTRFILE_h
#define ILS_RESRCATTRFILE_h

#include "scoFile.h"


class ILSresrcAttrFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(role);
  getIntFieldH(band);
  getIntFieldH(period);
  getFloatFieldH(supply);

      
  // compute key for storing record in dictionary
  static std::string key( const std::string & role, int band, int period ) 
  {
    char bandchar[100];
    sprintf( bandchar, "%d", band );
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = role+"$+&"+bandchar+"$+&"+periodchar;
    return retVal;
  };

  // preferred constructor
  ILSresrcAttrFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
#if 0 
    insertField("proj");
#else
    hasHeaderRecord(4);
#endif
    commentRecords(true);
  };
  
  // destructor
  ~ILSresrcAttrFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ILSresrcAttrFile file("../data/example1/resrcAttr.csv");
    
    // Test reading first record
    assert( file.role(1) == "role1" );
    assert( file.bandAsInt(1) == 7 );
    assert( file.periodAsInt(1) == 0 );
    assert( file.supplyAsFloat(1) == 160.0f );


    // Test reading second record
    assert( file.role(2) == "role1" );
    assert( file.bandAsInt(2) == 7 );
    assert( file.periodAsInt(2) == 1 );
    assert( file.supplyAsFloat(2) == 320.0f );

    // Test reading third record
    assert( file.role(3) == "role1" );
    assert( file.bandAsInt(3) == 8 );
    assert( file.periodAsInt(3) == 0 );
    assert( file.supplyAsFloat(3) == 320.0f );

    
    // Test reading record by key    
    assert( file.role(file.key(4)) == "role2" );
    assert( file.bandAsInt(file.key(4)) == 8 );
    assert( file.periodAsInt(file.key(4)) == 1 );
    assert( file.supplyAsFloat(file.key(4)) == 540.0f );

  }

  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    //std::string retVal = role(recNum)+"$+&"+band(recNum)+"$+&"+period(recNum);
    std::string retVal = key(role(recNum),bandAsInt(recNum),periodAsInt(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ILSresrcAttrFile();
  
  // copy constructor  -- don't use!
  ILSresrcAttrFile( const ILSresrcAttrFile& source );
  
  // assignment operator -- don't use!
  ILSresrcAttrFile&
  operator=(const ILSresrcAttrFile& rhs);

  
};



class ILSresrcAttrFileIterator : public SCOfileIterator {
public:
  
  // fields
  
  
  getFieldFileWithIteratorH(role);
  getIntFieldFileWithIteratorH(band);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(supply);
  
  // preferred constructor
  ILSresrcAttrFileIterator(const ILSresrcAttrFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ILSresrcAttrFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ILSresrcAttrFile file("../data/example1/resrcAttr.csv");
    ILSresrcAttrFileIterator fileIter(file);
    
    // loop once for each record
    bool firstRecord = true;
    for ( fileIter(); fileIter()!=NULL; ) {    
      if ( firstRecord ) {
        
        assert( fileIter.role() == "role1" );
        assert( fileIter.bandAsInt() == 7 );
        assert( fileIter.periodAsInt() == 0 );
        assert( fileIter.supplyAsFloat() == 160.0f );
        
        firstRecord = false;
      }
    }
  }

private:
  
  
  // default constructor -- don't use!
  ILSresrcAttrFileIterator();
  
  // copy constructor  -- don't use!
  ILSresrcAttrFileIterator( const ILSresrcAttrFileIterator& source );
  
  // assignment operator -- don't use!
  ILSresrcAttrFileIterator&
  operator=(const ILSresrcAttrFileIterator& rhs);

  
};
#endif
@


1.3
log
@Added ability to get key from role, band & period
@
text
@d39 1
@


1.2
log
@modified so unitTest can be run from the power43 directory
@
text
@d16 12
a27 1
  
d76 1
d83 2
a84 1
    std::string retVal = role(recNum)+"$+&"+band(recNum)+"$+&"+period(recNum);
@


1.1
log
@Initial revision
@
text
@d36 1
a36 1
    ILSresrcAttrFile file("resrcAttr.csv");
d114 1
a114 1
    ILSresrcAttrFile file("resrcAttr.csv");
@


1.1.1.1
log
@initial import
@
text
@@
