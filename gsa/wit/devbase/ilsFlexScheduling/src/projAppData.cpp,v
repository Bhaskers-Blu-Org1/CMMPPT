head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2002.09.17.13.25.38;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.09.18.46.15;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.09.17.47.48;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added so solve does optImplode multiple times.
The demandVols are set based on probability of project occuring.
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include "projAppData.h"

void ILSprojAppData::setCloseProb(float closingProbability)
{
  closeProb_ = closingProbability;
}
float ILSprojAppData::getCloseProb() const
{
  return closeProb_;
}

void ILSprojAppData::setRateScale(float rateScale)
{
  rateScale_ = rateScale;
}
float ILSprojAppData::getRateScale() const
{
  return rateScale_;
}

void ILSprojAppData::setStartPeriod(int startPeriod)
{
  startPeriod_ = startPeriod;
}
int ILSprojAppData::getStartPeriod() const
{
  return startPeriod_;
}

void ILSprojAppData::pushExecVol(float ev)
{
  execVol_.push_back(ev);
}
std::vector<float> ILSprojAppData::getExecVol() const
{
  return execVol_;
}

// default constructor
ILSprojAppData::ILSprojAppData()
:
ILSappData(),closeProb_(0.0),rateScale_(1.0),startPeriod_(0),execVol_()
{}

// destructor

ILSprojAppData::~ILSprojAppData()
{}

// copy constructor
ILSprojAppData::ILSprojAppData( const ILSprojAppData& source ):
ILSappData(source),
closeProb_(source.closeProb_),
rateScale_(source.rateScale_),
startPeriod_(source.startPeriod_),
execVol_(source.execVol_)
{};

// assignment operator
ILSprojAppData&
ILSprojAppData::operator=(const ILSprojAppData& rhs)
{  
  if (this != &rhs) {        
    ILSappData::operator=(rhs);
    closeProb_ = rhs.closeProb_;
    rateScale_ = rhs.rateScale_;
    startPeriod_ = rhs.startPeriod_;
    execVol_ = rhs.execVol_;
  }
  return *this;
}

ILSappData * ILSprojAppData::clone() const
{ return (new ILSprojAppData(*this));}

// Self-test
void ILSprojAppData::test()
{

  ILSprojAppData ad0;
  assert(ad0.getCloseProb()==0.0f);
  assert(ad0.getRateScale()==1.0f);
  assert(ad0.getStartPeriod()==0);
  assert(ad0.getExecVol().size()==0);
  
  {
    ILSprojAppData ad;
    ad.setCloseProb(0.5f);
    assert(ad.getCloseProb()==0.5f);
    ad.setRateScale(2.0f);
    assert(ad.getRateScale()==2.0f);
    ad.setStartPeriod(3);
    assert(ad.getStartPeriod()==3);

    ad.pushExecVol(1.0f);
    assert(ad.getExecVol().size()==1);
    assert(ad.getExecVol()[0]==1.0f);
    ad.pushExecVol(2.0f);
    assert(ad.getExecVol().size()==2);
    assert(ad.getExecVol()[0]==1.0f);
    assert(ad.getExecVol()[1]==2.0f);

    ad0 = ad;
  }
  
  assert(ad0.getCloseProb()==0.5f);
  assert(ad0.getRateScale()==2.0f);
  assert(ad0.getStartPeriod()==3);
  assert(ad0.getExecVol().size()==2);
  assert(ad0.getExecVol()[0]==1.0f);
  assert(ad0.getExecVol()[1]==2.0f);

  
  ILSprojAppData * ad1Clone = (ILSprojAppData *)ad0.clone(); 
  
  assert(ad1Clone->getCloseProb()==0.5f);
  assert(ad1Clone->getRateScale()==2.0f);
  assert(ad1Clone->getStartPeriod()==3);
  assert(ad1Clone->getExecVol().size()==2);
  assert(ad1Clone->getExecVol()[0]==1.0f);
  assert(ad1Clone->getExecVol()[1]==2.0f);

  delete ad1Clone;
}
@


1.2
log
@Adding resrcAppData
@
text
@d35 9
d47 1
a47 1
ILSappData(),closeProb_(0.0),rateScale_(1.0),startPeriod_(0)
d60 2
a61 1
startPeriod_(source.startPeriod_)
d73 1
d89 1
d99 9
d114 3
d124 3
@


1.1
log
@Updated to add projApp Data
@
text
@d17 18
d38 1
a38 1
ILSappData(),closeProb_(0.0)
d49 3
a51 1
closeProb_(source.closeProb_)
d61 2
d73 29
a101 4
  ILSprojAppData pad;
  assert(pad.getCloseProb()==0.0f);
  pad.setCloseProb(2.0f);
  assert(pad.getCloseProb()==2.0f);
@

