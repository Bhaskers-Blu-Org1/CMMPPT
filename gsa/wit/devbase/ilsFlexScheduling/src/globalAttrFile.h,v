head	1.3;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2002.10.28.03.01.43;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.06.17.39.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.04.20.44.46;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added ability in ScoFile class to handle SCE like comments
@
text
@#ifndef ILS_GLOBALATTRFILE_h
#define ILS_GLOBALATTRFILE_h

#include "scoFile.h"


class ILSglobalAttrFile : public SCOcsvFormatFile {
public:
  
  // fields  
  getFieldH(attrName);  
  getFieldH(attrValue);
  
  // preferred constructor
  ILSglobalAttrFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(2);
    commentRecords(true);
  };
  
  // destructor
  ~ILSglobalAttrFile()  
  {
    // Nothing to do here
  }
  
  // Self-test
  static void test()
  {
    
    ILSglobalAttrFile file("../data/example1/globalAttr.csv");
    
    assert( file.attrValue("title") == "Sample Title" );
    assert( file.fieldAsString("title","attrValue") == "Sample Title" );
    assert( file.fieldAsInt("nPeriods","attrValue") == 3 );
  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
    key( unsigned recNum ) const
  {
    std::string retVal = fieldAsString(recNum,"attrName");
    return retVal;
  }
  
private:
  
  
  // default constructor -- don't use!
  ILSglobalAttrFile();
  
  // copy constructor  -- don't use!
  ILSglobalAttrFile( const ILSglobalAttrFile& source );
  
  // assignment operator -- don't use!
  ILSglobalAttrFile&
  operator=(const ILSglobalAttrFile& rhs);

  
};


#if 0
class ILSglobalAttrFileIterator : public SCOfileIterator {
public:
  
  // fields
  //std::string locName() const;

  // preferred constructor
  ILSglobalAttrFileIterator(const ILSglobalAttrFile &);
  
  // destructor
  ~ILSglobalAttrFileIterator();
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  ILSglobalAttrFileIterator();
  
  // copy constructor  -- don't use!
  ILSglobalAttrFileIterator( const ILSglobalAttrFileIterator& source );
  
  // assignment operator -- don't use!
  ILSglobalAttrFileIterator&
  operator=(const ILSglobalAttrFileIterator& rhs);

  
};
#endif
#endif@


1.2
log
@modified so unitTest can be run from the power43 directory
@
text
@d21 1
@


1.1
log
@Initial revision
@
text
@d33 1
a33 1
    ILSglobalAttrFile file("globalAttr.csv");
@


1.1.1.1
log
@initial import
@
text
@@
