head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2004.03.18.19.11.15;	author grzes;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.12.20.03.07;	author grzes;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.12.17.51.10;	author grzes;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.05.19.00.18;	author grzes;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.01.16.35.50;	author grzes;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.20.46.27;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Now the list is sorted! :-))))))))
All seems to work fine, although still a lot has to be done, constructors etc.
Also the algorithm for translating types to camps is now far from
being optimal, most of the changes were supposed
to make the sorted map ONCE, but now it ias being made every time, just to make things run.
I think I know how to fix it.
@
text
@#ifndef FATPcampaignAppData_h
#define FATPcampaignAppData_h

#include "appData.h"
#include <string>

class FATPcampaignAppData : public FATPappData {
public:
  
  void setDuration(int np );
  int getDuration()const;

  void setStartPeriod(int sp );
  int getStartPeriod()const;

  void setExcessCapacity(float eq );
  float getExcessCapacity()const;

  void setCampaignName(std::string name );
  std::string getCampaignName()const;

  void setCampaignType(std::string type );
  std::string getCampaignType()const;

  //operators for comparing start periods
  bool operator< (const FATPcampaignAppData & right);
  bool operator> (const FATPcampaignAppData & right);
  bool operator== (const FATPcampaignAppData & right);

  //method checking if the sequence of two campaigns is feasible
  friend bool checkIfPairOfCampaignsIsFeasible(const FATPcampaignAppData & first,
	  const FATPcampaignAppData & second);


  // default constructor
  FATPcampaignAppData();

    //constructor with campaign type
  FATPcampaignAppData(std::string type);
  
  // destructor
  virtual ~FATPcampaignAppData();
  
  // copy constructor
  FATPcampaignAppData( const FATPcampaignAppData& source );
  
  // assignment operator
  FATPcampaignAppData&
    operator=(const FATPcampaignAppData& rhs);

  virtual FATPappData * clone() const;

  // Self-test
  static void test();

private:

  int duration_;
  int startPeriod_;
  float excessCapacity_;
  std::string campaignName_;
  std::string campaignType_;
};



#endif
@


1.5
log
@Added operators <, > , == and the method
checkIfPairOfCampaignsIsFeasible
to the class FATPcampaignAppData
and test cases for them, they seem to work fine.
@
text
@d19 3
d61 1
@


1.4
log
@Added a private component std::string to the campaign class called
 "campaignType_" and two methods set and get, also added 1 paremeter constructor
and test cases. It seems to work fine.
@
text
@d22 10
@


1.3
log
@Some testing procedure added, but unfinished, 9 campaigns, 5 orders, but just copy and paste, I must work on it a bit more
@
text
@d5 1
d19 3
d24 3
d48 1
a48 1
    
@


1.2
log
@finished implementing campaign methods.
implemented presolve for setting campaign's supplyVol
fixed type problem in campaignAppData
@
text
@d41 1
a41 1
  
@


1.1
log
@Added campaignAppData.
Implemented [sg]etCampaignDuration using app data.
@
text
@d15 2
a16 2
  void setExcessCapacity(int eq );
  int getExcessCapacity()const;
d40 1
a40 1
  int excessCapacity_;
@

