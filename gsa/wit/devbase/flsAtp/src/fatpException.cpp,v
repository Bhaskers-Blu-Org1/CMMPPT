head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2004.05.11.21.19.47;	author grzes;	state Exp;
branches;
next	;


desc
@@


1.1
log
@FAPTException .h and .cpp added, beacuse I forgot to
do that before.
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include "fatpException.h"

bool FATPException::DisplayOn = true;
bool FATPException::DisplayAlways = false;

void FATPException::setSeverity( int p )
{
  severity_ = p;
}

int FATPException::getSeverity() const
{
  return severity_;
}


void FATPException::setErrorMessage(std::string errorMessage)
{
  errorMessage_ = errorMessage;
}

std::string FATPException::getErrorMessage()const
{
  return errorMessage_;
}

bool& FATPException::getDisplayOn()
{
	return DisplayOn;
}

bool& FATPException::getDisplayAlways()
{
	return DisplayAlways;
}


void FATPException::displayMessage()

  {
	if (FATPException::getDisplayOn())
	  {
		  std::cerr << errorMessage_ << std::endl;
	  }
  }

// default constructor
FATPException::FATPException()
:
FATPappData(),
severity_(0),
errorMessage_()
{}

// constructor with error message
FATPException::FATPException(std::string errorMessage)
:
FATPappData(),
severity_(0),
errorMessage_(errorMessage)
{
  if (FATPException::getDisplayAlways())
  {
	  std::cerr << errorMessage << std::endl;
  }
}


// destructor

FATPException::~FATPException()
{}

// copy constructor
FATPException::FATPException( const FATPException& source ):
FATPappData(source),
severity_(source.severity_),
errorMessage_(source.errorMessage_)
{};

// assignment operator
FATPException&
FATPException::operator=(const FATPException& rhs)
{  
  if (this != &rhs) {        
    FATPappData::operator=(rhs);
    severity_ = rhs.severity_;
	errorMessage_ = rhs.errorMessage_;

  }
  return *this;
}

FATPappData * FATPException::clone() const
{ return (new FATPException(*this));}

// Self-test
void FATPException::test()
{
  
  FATPException ex1,ex3;
  
  {
    FATPException ex0;

    assert(ex0.getSeverity()==0);
    ex0.setSeverity(2);
    assert(ex0.getSeverity()==2);

    ex0.getDisplayAlways() = true;
	assert(FATPException::getDisplayAlways() == true);

	ex0.setErrorMessage("Nie jest dobrze, Marcinie");
    assert(ex0.getErrorMessage()=="Nie jest dobrze, Marcinie");

	ex1 = ex0;

	FATPException ex2("I bedzie gorzej");

    assert(ex2.getSeverity()==0);
    ex2.setSeverity(2);
    assert(ex2.getSeverity()==2);

	assert(ex2.getErrorMessage()=="I bedzie gorzej");
	ex2.setErrorMessage("Ze az strach");
    assert(ex2.getErrorMessage()=="Ze az strach");

    ex3 = ex2;

    ex2.setSeverity(3);
    assert(ex2.getSeverity()==3);

    ex0.getDisplayAlways() = false;
	assert(ex1.getDisplayAlways() == false);
  }
  assert(ex1.getSeverity()==2);

  assert(ex1.getErrorMessage()=="Nie jest dobrze, Marcinie");

  assert(ex3.getErrorMessage()=="Ze az strach");
}
@
