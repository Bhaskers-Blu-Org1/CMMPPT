head	1.6;
access;
symbols;
locks; strict;
comment	@// @;


1.6
date	2004.03.18.19.11.15;	author grzes;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.12.20.03.07;	author grzes;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.12.18.34.43;	author grzes;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.12.17.51.24;	author grzes;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.01.16.35.50;	author grzes;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.20.46.27;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Now the list is sorted! :-))))))))
All seems to work fine, although still a lot has to be done, constructors etc.
Also the algorithm for translating types to camps is now far from
being optimal, most of the changes were supposed
to make the sorted map ONCE, but now it ias being made every time, just to make things run.
I think I know how to fix it.
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include "campaignAppData.h"

void FATPcampaignAppData::setDuration( int p )
{
  duration_ = p;
}

int FATPcampaignAppData::getDuration() const
{
  return duration_;
}

void FATPcampaignAppData::setStartPeriod(int sp )
{
  startPeriod_ = sp;
}
int FATPcampaignAppData::getStartPeriod()const
{
  return startPeriod_;
}


void FATPcampaignAppData::setExcessCapacity(float ec )
{
  excessCapacity_ = ec;
}
float FATPcampaignAppData::getExcessCapacity()const
{
  return excessCapacity_;
}


void FATPcampaignAppData::setCampaignName(std::string name )
{
  campaignName_ = name;
}
std::string FATPcampaignAppData::getCampaignName()const
{
  return campaignName_;
}

void FATPcampaignAppData::setCampaignType(std::string type )
{
  campaignType_ = type;
}
std::string FATPcampaignAppData::getCampaignType()const
{
  return campaignType_;
}

bool FATPcampaignAppData::operator< (const FATPcampaignAppData & right)
{
	int l = getStartPeriod();
	int r = right.getStartPeriod();
	return(l < r);
}


bool FATPcampaignAppData::operator> (const FATPcampaignAppData & right)
{
	int l = getStartPeriod();
	int r = right.getStartPeriod();
	return(l > r);
}
bool FATPcampaignAppData::operator== (const FATPcampaignAppData & right)
{
	int l = getStartPeriod();
	int r = right.getStartPeriod();
	return(l == r);
}
  bool checkIfPairOfCampaignsIsFeasible(const FATPcampaignAppData & first,
	  const FATPcampaignAppData & second)
{
	int l = first.getStartPeriod();
	int r = second.getStartPeriod();
	l += first.getDuration();
	return(l <= r);
}


// default constructor
FATPcampaignAppData::FATPcampaignAppData()
:
FATPappData(),
duration_(1),
startPeriod_(0),
excessCapacity_(0.f),
campaignName_(),
campaignType_()
{}

// constructor with campaign type
FATPcampaignAppData::FATPcampaignAppData(std::string type)
:
FATPappData(),
duration_(1),
startPeriod_(0),
excessCapacity_(0.f),
campaignName_(),
campaignType_(type)
{}


// destructor

FATPcampaignAppData::~FATPcampaignAppData()
{}

// copy constructor
FATPcampaignAppData::FATPcampaignAppData( const FATPcampaignAppData& source ):
FATPappData(source),
duration_(source.duration_),
startPeriod_(source.startPeriod_),
excessCapacity_(source.excessCapacity_),
campaignName_(source.campaignName_),
campaignType_(source.campaignType_)
{};

// assignment operator
FATPcampaignAppData&
FATPcampaignAppData::operator=(const FATPcampaignAppData& rhs)
{  
  if (this != &rhs) {        
    FATPappData::operator=(rhs);
    duration_ = rhs.duration_;
    startPeriod_ = rhs.startPeriod_;
    excessCapacity_ = rhs.excessCapacity_;	
	campaignName_ = rhs.campaignName_;
	campaignType_ = rhs.campaignType_;

  }
  return *this;
}

FATPappData * FATPcampaignAppData::clone() const
{ return (new FATPcampaignAppData(*this));}

// Self-test
void FATPcampaignAppData::test()
{
  
  FATPcampaignAppData ad1,ad3;
  
  {
    FATPcampaignAppData ad0;

    assert(ad0.getDuration()==1);
    ad0.setDuration(2);
    assert(ad0.getDuration()==2);

    assert(ad0.getStartPeriod()==0);
    ad0.setStartPeriod(3);
    assert(ad0.getStartPeriod()==3);
    
    assert(ad0.getExcessCapacity()==0.f);
    ad0.setExcessCapacity(200.f);
    assert(ad0.getExcessCapacity()==200.f);

    ad1 = ad0;
    
    ad0.setDuration(3);
    assert(ad0.getDuration()==3);

    ad0.setStartPeriod(4);
    assert(ad0.getStartPeriod()==4);
    
    ad0.setExcessCapacity(201.f);
    assert(ad0.getExcessCapacity()==201.f);

	ad0.setCampaignType("C1");
    assert(ad0.getCampaignType()=="C1");

	FATPcampaignAppData ad2("GrzesC1");

    assert(ad2.getDuration()==1);
    ad2.setDuration(2);
    assert(ad2.getDuration()==2);

    assert(ad2.getStartPeriod()==0);
    ad2.setStartPeriod(7);
    assert(ad2.getStartPeriod()==7);
    
    assert(ad2.getExcessCapacity()==0.f);
    ad2.setExcessCapacity(200.f);
    assert(ad2.getExcessCapacity()==200.f);

	assert(ad2.getCampaignType()=="GrzesC1");
	ad2.setCampaignType("C2");
    assert(ad2.getCampaignType()=="C2");

    ad3 = ad2;

    ad2.setDuration(3);
    assert(ad2.getDuration()==3);

    ad2.setStartPeriod(7);
    assert(ad2.getStartPeriod()==7);
    
    ad2.setExcessCapacity(201.f);
    assert(ad2.getExcessCapacity()==201.f);

	ad2.setCampaignType("C2");
    assert(ad2.getCampaignType()=="C2");

	//test < operator

	assert(ad0 < ad2);
	assert(ad2 > ad0);
	assert(!(ad0 == ad2));

	assert(checkIfPairOfCampaignsIsFeasible(ad0,ad2));
    
  }
  assert(ad1.getDuration()==2);
  
  assert(ad1.getStartPeriod()==3);
  
  assert(ad1.getExcessCapacity()==200.f);

  assert(ad1.getCampaignType()=="");

  assert(ad3.getCampaignType()=="C2");
}
@


1.5
log
@Added operators <, > , == and the method
checkIfPairOfCampaignsIsFeasible
to the class FATPcampaignAppData
and test cases for them, they seem to work fine.
@
text
@d37 10
d93 1
d104 1
d120 1
d132 2
a133 1
    excessCapacity_ = rhs.excessCapacity_;
d135 1
@


1.4
log
@Added methods for campaignType to FATP class.
@
text
@d46 28
d170 2
a171 2
    ad2.setStartPeriod(3);
    assert(ad2.getStartPeriod()==3);
a181 1
    assert(ad3.getCampaignType()=="C2");
d186 2
a187 2
    ad2.setStartPeriod(4);
    assert(ad2.getStartPeriod()==4);
d194 8
d209 4
@


1.3
log
@Added a private component std::string to the campaign class called
 "campaignType_" and two methods set and get, also added 1 paremeter constructor
and test cases. It seems to work fine.
@
text
@d55 1
a55 1
campaignType_("")
@


1.2
log
@finished implementing campaign methods.
implemented presolve for setting campaign's supplyVol
fixed type problem in campaignAppData
@
text
@a7 1

d37 9
d54 12
a65 1
excessCapacity_(0.f)
d79 2
a80 1
excessCapacity_(source.excessCapacity_)
d92 1
d104 1
a104 1
  FATPcampaignAppData ad1;
d131 13
d145 22
@


1.1
log
@Added campaignAppData.
Implemented [sg]etCampaignDuration using app data.
@
text
@d29 1
a29 1
void FATPcampaignAppData::setExcessCapacity(int ec )
d33 1
a33 1
int FATPcampaignAppData::getExcessCapacity()const
d46 1
a46 1
excessCapacity_(0)
@

