head	1.6;
access;
symbols;
locks; strict;
comment	@// @;


1.6
date	2004.04.05.22.24.02;	author grzes;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.31.00.06.08;	author grzes;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.11.17.06.28;	author grzes;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.02.21.00.35;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.01.20.31.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.01.19.56.50;	author grzes;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Finishing touches.
Some error handling.
Some comments fixed.
Ready for April 6 presentation!
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include <iostream>
#include "orderEntryAppData.h"


void FATPorderEntryAppData::setImportance( int p )
{
  importance_ = p;
}

int FATPorderEntryAppData::getImportance() const
{
  return importance_;
}

void FATPorderEntryAppData::setDesiredPeriod(int sp )
{
  desiredPeriod_ = sp;
}
int FATPorderEntryAppData::getDesiredPeriod()const
{
  return desiredPeriod_;
}


void FATPorderEntryAppData::setCoilQty(float ec )
{
  coilQty_ = ec;
}
float FATPorderEntryAppData::getCoilQty()const
{
  return coilQty_;
}

void FATPorderEntryAppData::setOrderEntryId(std::string orderId)
{
  orderEntryId_ = orderId;
}
std::string FATPorderEntryAppData::getOrderEntryId()const
{
  return orderEntryId_;
}

void FATPorderEntryAppData::addRecipe(const FATPvectorString & r, const std::vector<float> & consRates  )
{
	assert(r.size()==consRates.size());
	recipes_.insert(r);
	consRates_.insert(consRates);;
	//std::cout <<"addRecipe " <<recipes_.size() <<" " <<recipes_[0].size() <<std::endl;
}
const FATPorderEntryRecipes & FATPorderEntryAppData::getRecipes()const
{
  //std::cout <<"getRecipes " <<recipes_.size() <<std::endl;
  //if ( recipes_.size()>0 ) std::cout <<"           " <<recipes_[0].size() <<std::endl;
  return recipes_;
}
const FATPorderEntryRecipeConsRates & FATPorderEntryAppData::getConsRates()const
{
  return consRates_;
}



// default constructor
FATPorderEntryAppData::FATPorderEntryAppData()
:
FATPappData(),
importance_(1),
desiredPeriod_(0),
coilQty_(0.f),
orderEntryId_(),
recipes_(),
consRates_()
{}


// destructor

FATPorderEntryAppData::~FATPorderEntryAppData()
{}

// copy constructor
FATPorderEntryAppData::FATPorderEntryAppData( const FATPorderEntryAppData& source ):
FATPappData(source),
importance_(source.importance_),
desiredPeriod_(source.desiredPeriod_),
coilQty_(source.coilQty_),
orderEntryId_(source.orderEntryId_),
recipes_(source.recipes_),
consRates_(source.consRates_)
{};

// assignment operator
FATPorderEntryAppData&
FATPorderEntryAppData::operator=(const FATPorderEntryAppData& rhs)
{  
  if (this != &rhs) {        
    FATPappData::operator=(rhs);
    importance_ = rhs.importance_;
    desiredPeriod_ = rhs.desiredPeriod_;
    coilQty_ = rhs.coilQty_;
	orderEntryId_ = rhs.orderEntryId_,
    recipes_ = rhs.recipes_;
    consRates_ = rhs.consRates_;
  }
  return *this;
}

FATPappData * FATPorderEntryAppData::clone() const
{ return (new FATPorderEntryAppData(*this));}

// Self-test
void FATPorderEntryAppData::test()
{
  
  FATPorderEntryAppData ad1;
  
  {
    FATPorderEntryAppData ad0;

    assert(ad0.getImportance()==1);
    ad0.setImportance(2);
    assert(ad0.getImportance()==2);

    assert(ad0.getDesiredPeriod()==0);
    ad0.setDesiredPeriod(3);
    assert(ad0.getDesiredPeriod()==3);
    
    assert(ad0.getCoilQty()==0.f);
    ad0.setCoilQty(200.f);
    assert(ad0.getCoilQty()==200.f);

	assert(ad0.getOrderEntryId()=="");
    ad0.setOrderEntryId("O1");
    assert(ad0.getOrderEntryId()=="O1");

    // Insert a recipe
    assert( ad0.getRecipes().size()==0 );
    FATPvectorString recipe;
    recipe.push_back("c1");
    recipe.push_back("c2");
    FATPvectorFloat cr;
	cr.push_back(1.f);
	cr.push_back(2.f);
    ad0.addRecipe(recipe,cr);
    assert( ad0.getRecipes().size()==1 );
    FATPorderEntryRecipesConstIterator it = ad0.getRecipes().begin();
    assert( (*it).size()==2 );
    assert( (*it)[0]=="c1" );
    assert( (*it)[1]=="c2" );   
    assert( ++it==ad0.getRecipes().end() );
    {	
    assert( ad0.getConsRates().size()==1 );
    FATPorderEntryRecipeConsRatesConstIterator it = ad0.getConsRates().begin();
    assert( (*it).size()==2 );
    assert( (*it)[0]==1.0f );
    assert( (*it)[1]==2.0f );   
    assert( ++it==ad0.getConsRates().end() );
	}

    ad1 = ad0;
    
    ad0.setImportance(3);
    assert(ad0.getImportance()==3);

    ad0.setDesiredPeriod(4);
    assert(ad0.getDesiredPeriod()==4);
    
    ad0.setCoilQty(201.f);
    assert(ad0.getCoilQty()==201.f);

    // Insert another recipe
    recipe.push_back("c3");
	cr.push_back(3.f);
    ad0.addRecipe(recipe,cr);
    assert( ad0.getRecipes().size()==2 );
    it = ad0.getRecipes().begin();
    assert( (*it).size()==2 );
    assert( (*it)[0]=="c1" );
    assert( (*it)[1]=="c2" );
    ++it;
    assert( (*it).size()==3 );
    assert( (*it)[0]=="c1" );
    assert( (*it)[1]=="c2" );
    assert( (*it)[2]=="c3" );
    assert( ++it==ad0.getRecipes().end() );
	{
		assert( ad0.getConsRates().size()==2 );
		FATPorderEntryRecipeConsRatesConstIterator it = ad0.getConsRates().begin();
		assert( (*it).size()==2 );
		assert( (*it)[0]==1.0f );
		assert( (*it)[1]==2.0f );
		++it;
		assert( (*it).size()==3 );
		assert( (*it)[0]==1.0f );
		assert( (*it)[1]==2.0f );
		assert( (*it)[2]==3.0f );
		assert( ++it==ad0.getConsRates().end() );
	}

    
  }
  assert(ad1.getImportance()==2);
  
  assert(ad1.getDesiredPeriod()==3);
  
  assert(ad1.getCoilQty()==200.f);

  assert(ad1.getOrderEntryId()=="O1");
  
  assert( ad1.getRecipes().size()==1 );
  FATPorderEntryRecipesConstIterator it = ad1.getRecipes().begin();
  assert( (*it).size()==2 );
  assert( (*it)[0]=="c1" );
  assert( (*it)[1]=="c2" );   
  assert( ++it==ad1.getRecipes().end() );
  {
  assert( ad1.getConsRates().size()==1 );
  FATPorderEntryRecipeConsRatesConstIterator it = ad1.getConsRates().begin();
  assert( (*it).size()==2 );
  assert( (*it)[0]==1.0f );
  assert( (*it)[1]==2.0f );   
  assert( ++it==ad1.getConsRates().end() );
  }
}
@


1.5
log
@A failed attempt to use witIncHeurAlloc.
I have produced something that I expected to work, but it does not.
The code still runs, but fails on the assertions.
@
text
@d51 3
a53 3
  recipes_.insert(r);
  consRates_.insert(consRates);;
  //std::cout <<"addRecipe " <<recipes_.size() <<" " <<recipes_[0].size() <<std::endl;
@


1.4
log
@Added consumpution rate to orderEntry appData.
Not yet setting consumption rate on bom arc
@
text
@d39 9
d75 1
d92 1
d106 1
d137 4
d212 2
@


1.3
log
@added method addOrderEntryRecipe
@
text
@d39 1
a39 1
void FATPorderEntryAppData::addRecipe(const FATPvectorString & r )
d41 1
d43 1
d52 4
d66 2
a67 1
recipes_()
d82 2
a83 1
recipes_(source.recipes_)
d96 1
d130 4
a133 1
    ad0.addRecipe(recipe);
d140 8
d162 2
a163 1
    ad0.addRecipe(recipe);
d175 13
d203 8
@


1.2
log
@modified addOrderEntry to create appData
@
text
@d6 1
d39 12
d59 2
a60 1
coilQty_(0.f)
d74 2
a75 1
coilQty_(source.coilQty_)
d87 1
d116 13
d139 16
a154 1
    
d162 7
@


1.1
log
@I think I have managed to do for orders what you did for campaigns, at least it compiles and runs well.
I will now implement the methods in the and commit the fatpProblem.cpp as soon as I can.
@
text
@d9 1
a9 1
void FATPorderAppData::setImportance( int p )
d14 1
a14 1
int FATPorderAppData::getImportance() const
d19 1
a19 1
void FATPorderAppData::setDesiredPeriod(int sp )
d23 1
a23 1
int FATPorderAppData::getDesiredPeriod()const
d29 1
a29 1
void FATPorderAppData::setCoilQty(float ec )
d33 1
a33 1
float FATPorderAppData::getCoilQty()const
d41 1
a41 1
FATPorderAppData::FATPorderAppData()
d52 1
a52 1
FATPorderAppData::~FATPorderAppData()
d56 1
a56 1
FATPorderAppData::FATPorderAppData( const FATPorderAppData& source ):
d64 2
a65 2
FATPorderAppData&
FATPorderAppData::operator=(const FATPorderAppData& rhs)
d76 2
a77 2
FATPappData * FATPorderAppData::clone() const
{ return (new FATPorderAppData(*this));}
d80 1
a80 1
void FATPorderAppData::test()
d83 1
a83 1
  FATPorderAppData ad1;
d86 1
a86 1
    FATPorderAppData ad0;
@

