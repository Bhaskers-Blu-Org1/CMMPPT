head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2004.03.31.00.06.08;	author grzes;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.15.16.06.06;	author grzes;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.12.19.06.08;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.11.17.06.28;	author grzes;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.02.21.00.35;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.01.20.31.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.01.19.56.50;	author grzes;	state Exp;
branches;
next	;


desc
@@


1.7
log
@A failed attempt to use witIncHeurAlloc.
I have produced something that I expected to work, but it does not.
The code still runs, but fails on the assertions.
@
text
@#ifndef FATPorderEntryAppData_h
#define FATPorderEntryAppData_h

#include <set>
#include <string>
#include <vector>

#include "appData.h"

typedef std::vector<std::string> FATPvectorString;
typedef std::vector<std::string>::const_iterator FATPvectorStringConstIterator;
typedef std::set<std::string> FATPsetString;
typedef std::set<std::string>::const_iterator FATPsetStringConstIterator;
typedef std::set<FATPvectorString> FATPorderEntryRecipes;
typedef std::set<FATPvectorString>::const_iterator FATPorderEntryRecipesConstIterator;
typedef std::vector<float> FATPvectorFloat;
typedef std::set<FATPvectorFloat> FATPorderEntryRecipeConsRates;
typedef std::set<FATPvectorFloat>::const_iterator FATPorderEntryRecipeConsRatesConstIterator;

class FATPorderEntryAppData : public FATPappData {
public:
  
  void setImportance(int np );
  int getImportance()const;

  void setDesiredPeriod(int sp );
  int getDesiredPeriod()const;

  void setCoilQty(float eq );
  float getCoilQty()const;

  void setOrderEntryId(std::string  orderId);
  std::string getOrderEntryId()const;

  void addRecipe(const FATPvectorString & recipe, const std::vector<float> & consRates );
  const FATPorderEntryRecipes & getRecipes() const;
  const FATPorderEntryRecipeConsRates & getConsRates() const;

  // default constructor
  FATPorderEntryAppData();
  
  // destructor
  virtual ~FATPorderEntryAppData();
  
  // copy constructor
  FATPorderEntryAppData( const FATPorderEntryAppData& source );
  
  // assignment operator
  FATPorderEntryAppData&
    operator=(const FATPorderEntryAppData& rhs);

  virtual FATPappData * clone() const;

  // Self-test
  static void test();

private:

  int importance_;
  int desiredPeriod_;
  float coilQty_;
  FATPorderEntryRecipes recipes_;
  FATPorderEntryRecipeConsRates consRates_;
  std::string orderEntryId_;
};



#endif
@


1.6
log
@Implemented the methods for converting campaign types
into campaigns, some testing, changes in comments etc.
Fixed the bug detected by J.P.'s test case.
@
text
@d32 3
d64 1
a64 1
  
@


1.5
log
@added some commented out code
@
text
@d12 2
@


1.4
log
@Added consumpution rate to orderEntry appData.
Not yet setting consumption rate on bom arc
@
text
@d11 1
@


1.3
log
@added method addOrderEntryRecipe
@
text
@d13 3
d29 1
a29 1
  void addRecipe(const FATPvectorString & recipe);
d31 1
d57 1
@


1.2
log
@modified addOrderEntry to create appData
@
text
@d4 4
d10 4
d26 3
d52 1
@


1.1
log
@I think I have managed to do for orders what you did for campaigns, at least it compiles and runs well.
I will now implement the methods in the and commit the fatpProblem.cpp as soon as I can.
@
text
@d1 2
a2 2
#ifndef FATPorderAppData_h
#define FATPorderAppData_h
d6 1
a6 1
class FATPorderAppData : public FATPappData {
d19 1
a19 1
  FATPorderAppData();
d22 1
a22 1
  virtual ~FATPorderAppData();
d25 1
a25 1
  FATPorderAppData( const FATPorderAppData& source );
d28 2
a29 2
  FATPorderAppData&
    operator=(const FATPorderAppData& rhs);
@

