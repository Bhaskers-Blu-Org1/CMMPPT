head	1.2;
access;
symbols
	abandoningEtnParts:1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.06.21.14.21.12;	author fasano;	state dead;
branches;
next	1.1;

1.1
date	2004.02.19.19.42.52;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Code restored to state before etnParts were added
@
text
@#ifndef ESO2_generalData_h
#define ESO2_generalData_h

#include "scoFile.h"


class ESO2generalData : public SCOcsvFormatFile {
public:

  // Fields
  //getFieldH(part);
  //getFieldH(custLoc);
  //getFieldH(plantLoc);
  //getIntFieldH(period);
  //getFloatFieldH(demandVol);
  ///getFloatFieldH(wac);
  
  // preferred constructor
  ESO2generalData(BCP_string filename,int numFields)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(false);
    //insertField("feature");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    //hasHeaderRecord(numFields);
    int i;
    for (i=0; i<numFields; i++ ) {
      char fieldName[100];
      sprintf( fieldName, "field%d", i );
      insertField(fieldName);
    }
    commentRecords(true);
  };

#if 0
  // compute key for storing record in dictionary
  static BCP_string key( 
    const BCP_string & field1) 
  {
    BCP_string retVal = field1;
    return retVal;
  };
#endif
  
  // destructor
  ~ESO2generalData(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ESO2generalData file("../data/example1/generalData.csv",4);
    
    // Test reading first record

    assert( file.fieldAsString(0,"field1")=="p2");
    

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual BCP_string key( unsigned int recNum ) const
  {    
    BCP_string retVal = record(recNum); //fileData_[recNum].c_str();
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ESO2generalData();
  
  // copy constructor  -- don't use!
  ESO2generalData( const ESO2generalData& source );
  
  // assignment operator -- don't use!
  ESO2generalData&
  operator=(const ESO2generalData& rhs);

  
};



class ESO2generalDataIterator : public SCOfileIterator {
public:
    
  // Fields
  //getFieldFileWithIteratorH(part);
  //getFieldFileWithIteratorH(custLoc);
  //getFieldFileWithIteratorH(plantLoc);
  //getIntFieldFileWithIteratorH(period);
  //getFloatFieldFileWithIteratorH(demandVol);
  //getFloatFieldFileWithIteratorH(wac);

  
  // preferred constructor
  ESO2generalDataIterator(const ESO2generalData & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ESO2generalDataIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ESO2generalData file("../data/example1/generalData.csv",4);
    ESO2generalDataIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.fieldOnRecord("field1")=="p2");
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ESO2generalDataIterator();
  
  // copy constructor  -- don't use!
  ESO2generalDataIterator( const ESO2generalDataIterator& source );
  
  // assignment operator -- don't use!
  ESO2generalDataIterator&
  operator=(const ESO2generalDataIterator& rhs);

  
};
#endif
@


1.1
log
@Code for converting files to new format
@
text
@@

