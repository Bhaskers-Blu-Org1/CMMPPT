head	1.3;
access;
symbols
	eso2InitialFileFormats:1.2;
locks; strict;
comment	@ * @;


1.3
date	2003.02.20.18.10.41;	author fasano;	state dead;
branches;
next	1.2;

1.2
date	2003.02.06.20.06.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.06.18.32.14;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@modifications to accomodate 2/18 file format changes
@
text
@#ifndef ESO2_interplantData_h
#define ESO2_interplantData_h

#include "scoFile.h"


class ESO2interplantData : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(part);
  getFieldH(srcLoc);
  getFieldH(destLoc);
  getIntFieldH(period);
  getFloatFieldH(moveCost);
  getFloatFieldH(moveTime);
  
  // preferred constructor
  ESO2interplantData(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("feature");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    hasHeaderRecord(6);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & part, 
    const std::string & srcLoc, 
    const std::string & destLoc, 
    int period ) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = 
      part+"$+&"
      +srcLoc+"$+&"
      +destLoc+"$+&"
      +periodchar;
    return retVal;
  };
  
  // destructor
  ~ESO2interplantData(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ESO2interplantData file("../data/example1/interplantData.csv");
    
    // Test reading first record

    assert( file.part(0)=="p2");
    assert( file.srcLoc(0) == "pok" );
    assert( file.destLoc(0) == "wat" );
    assert( file.periodAsInt(0) == 0 );
    assert( file.moveCostAsFloat(0) == 2.0f );
    assert( file.moveTimeAsFloat(0) == 1.0f );

    std::string k = file.key("p2","wat","pok",2);
    assert( file.part(k)=="p2");
    assert( file.srcLoc(k) == "wat" );
    assert( file.destLoc(k) == "pok" );
    assert( file.periodAsInt(k) == 2 );
    assert( file.moveCostAsFloat(k) == 1.0f );
    assert( file.moveTimeAsFloat(k) == 2.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      part(recNum),
      srcLoc(recNum),
      destLoc(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ESO2interplantData();
  
  // copy constructor  -- don't use!
  ESO2interplantData( const ESO2interplantData& source );
  
  // assignment operator -- don't use!
  ESO2interplantData&
  operator=(const ESO2interplantData& rhs);

  
};



class ESO2interplantDataIterator : public SCOfileIterator {
public:
    
  // Fields
  getFieldFileWithIteratorH(part);
  getFieldFileWithIteratorH(srcLoc);
  getFieldFileWithIteratorH(destLoc);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(moveCost);
  getFloatFieldFileWithIteratorH(moveTime);

  
  // preferred constructor
  ESO2interplantDataIterator(const ESO2interplantData & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ESO2interplantDataIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ESO2interplantData file("../data/example1/interplantData.csv");
    ESO2interplantDataIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.part()=="p2");
        assert( fileIter.srcLoc() == "pok" );
        assert( fileIter.destLoc() == "wat" );
        assert( fileIter.periodAsInt() == 0 );
        assert( fileIter.moveCostAsFloat() == 2.0f );
        assert( fileIter.moveTimeAsFloat() == 1.0f );
          
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ESO2interplantDataIterator();
  
  // copy constructor  -- don't use!
  ESO2interplantDataIterator( const ESO2interplantDataIterator& source );
  
  // assignment operator -- don't use!
  ESO2interplantDataIterator&
  operator=(const ESO2interplantDataIterator& rhs);

  
};
#endif
@


1.2
log
@Updated to have 4 periods of data in all data files
@
text
@@


1.1
log
@Updated to match current understanding of file formats
@
text
@d63 1
a63 1
    assert( file.periodAsInt(0) == 1 );
d67 1
a67 1
    std::string k = file.key(1);
d141 1
a141 1
        assert( fileIter.periodAsInt() == 1 );
@

