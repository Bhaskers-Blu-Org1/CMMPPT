head	1.3;
access;
symbols
	eso2InitialFileFormats:1.2;
locks; strict;
comment	@ * @;


1.3
date	2003.02.20.18.10.40;	author fasano;	state dead;
branches;
next	1.2;

1.2
date	2003.02.06.18.32.14;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.02.12.33.31;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@modifications to accomodate 2/18 file format changes
@
text
@#ifndef ESO2_etnCspData_h
#define ESO2_etnCspData_h

#include "scoFile.h"


class ESO2etnCspData : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(upLevelPart);
  getFieldH(downLevelPart);
  getFieldH(plantLoc);
  getIntFieldH(period);
  getFloatFieldH(prodRate);
  getFloatFieldH(cost);
  getFloatFieldH(usageTime);
  
  // preferred constructor
  ESO2etnCspData(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("feature");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    hasHeaderRecord(7);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & upLevelPart, 
    const std::string & downLevelPart, 
    const std::string & plantLoc, 
    int period ) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = upLevelPart+"$+&"+downLevelPart+"$+&"+plantLoc+"$+&"+periodchar;
    return retVal;
  };
  
  // destructor
  ~ESO2etnCspData(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ESO2etnCspData file("../data/example1/etnCspData.csv");
    
    // Test reading first record

    assert( file.upLevelPart(0)=="u1");
    assert( file.downLevelPart(0) == "p1" );
    assert( file.plantLoc(0) == "pok" );
    assert( file.periodAsInt(0) == 0 );
    assert( file.prodRateAsFloat(0) == 1.5f );
    assert( file.costAsFloat(0) == 5.5f );
    assert( file.usageTimeAsFloat(0) == 0.5f );

    
    assert( file.upLevelPart(key("u2","p2","wat",1))=="u2");
    assert( file.downLevelPart(key("u2","p2","wat",1)) == "p2" );
    assert( file.plantLoc(key("u2","p2","wat",1)) == "wat" );
    assert( file.periodAsInt(key("u2","p2","wat",1)) == 1 );
    assert( file.prodRateAsFloat(key("u2","p2","wat",1)) == 2.1f );
    assert( file.costAsFloat(key("u2","p2","wat",1)) == 6.5f );
    assert( file.usageTimeAsFloat(key("u2","p2","wat",1)) == 0.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      upLevelPart(recNum),
      downLevelPart(recNum),
      plantLoc(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ESO2etnCspData();
  
  // copy constructor  -- don't use!
  ESO2etnCspData( const ESO2etnCspData& source );
  
  // assignment operator -- don't use!
  ESO2etnCspData&
  operator=(const ESO2etnCspData& rhs);

  
};



class ESO2etnCspDataIterator : public SCOfileIterator {
public:
    
  // Fields
  getFieldFileWithIteratorH(upLevelPart);
  getFieldFileWithIteratorH(downLevelPart);
  getFieldFileWithIteratorH(plantLoc);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(prodRate);
  getFloatFieldFileWithIteratorH(cost);
  getFloatFieldFileWithIteratorH(usageTime);

  
  // preferred constructor
  ESO2etnCspDataIterator(const ESO2etnCspData & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ESO2etnCspDataIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ESO2etnCspData file("../data/example1/etnCspData.csv");
    ESO2etnCspDataIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.upLevelPart()=="u1");
        assert( fileIter.downLevelPart() == "p1" );
        assert( fileIter.plantLoc() == "pok" );
        assert( fileIter.periodAsInt() == 0 );
        assert( fileIter.prodRateAsFloat() == 1.5f );
        assert( fileIter.costAsFloat() == 5.5f );
        assert( fileIter.usageTimeAsFloat() == 0.5f );
          
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ESO2etnCspDataIterator();
  
  // copy constructor  -- don't use!
  ESO2etnCspDataIterator( const ESO2etnCspDataIterator& source );
  
  // assignment operator -- don't use!
  ESO2etnCspDataIterator&
  operator=(const ESO2etnCspDataIterator& rhs);

  
};
#endif
@


1.2
log
@Updated to match current understanding of file formats
@
text
@@


1.1
log
@Added code to read etnCspData file
@
text
@d17 1
d30 1
a30 1
    hasHeaderRecord(6);
d58 1
a58 1
    assert( file.downLevelPart(0) == "d1" );
d63 1
d66 7
a72 6
    assert( file.upLevelPart(key("u2","d2","kgn",1))=="u2");
    assert( file.downLevelPart(key("u2","d2","kgn",1)) == "d2" );
    assert( file.plantLoc(key("u2","d2","kgn",1)) == "kgn" );
    assert( file.periodAsInt(key("u2","d2","kgn",1)) == 1 );
    assert( file.prodRateAsFloat(key("u2","d2","kgn",1)) == 2.1f );
    assert( file.costAsFloat(key("u2","d2","kgn",1)) == 6.5f );
d116 1
d139 1
a139 1
        assert( fileIter.downLevelPart() == "d1" );
d144 1
@

