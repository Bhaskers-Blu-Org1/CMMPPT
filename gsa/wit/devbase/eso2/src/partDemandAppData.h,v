head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2007.01.10.21.22.55;	author fasano;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.11.22.58.51;	author fasano;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.09.20.16.33;	author fasano;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.23.12.22.37;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.23.02.28.42;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.22.22.11.18;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.22.16.26.41;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.22.13.49.29;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.14.16.56.26;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.03.13.50.26;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.21.18.03.25;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Added code to compute source of supply that makes up totalWac
@
text
@#ifndef ESO2partDemandAppData_h
#define ESO2partDemandAppData_h

#include <utility>

#include "appData.h"
#include "stringStringIntTriple.h"


//#include "stringStringIntIntTuple.h"


#if 0
typedef std::map<ESO2stringStringIntTriple,float,ESO2stringStringIntTripleCompareFunctionObject> ESO2mapStringStringIntToFloat;
typedef std::map<ESO2stringStringIntTriple,float,ESO2stringStringIntTripleCompareFunctionObject>::const_iterator ESO2mapStringStringIntToFloatConstIterator;
typedef std::map<int,ESO2mapStringStringIntToFloat> ESO2mapIntToMapStringStringIntToFloat;
#endif

#if 0
typedef std::map<ESO2stringStringIntIntTuple,float,ESO2stringStringIntIntTupleCompareFunctionObject> ESO2mapStringStringIntIntToFloat;
typedef std::map<ESO2stringStringIntIntTuple,float,ESO2stringStringIntIntTupleCompareFunctionObject>::const_iterator ESO2mapStringStringIntIntToFloatConstIterator;
typedef std::map<int,ESO2mapStringStringIntIntToFloat> ESO2mapIntToMapStringStringIntIntToFloat;
#endif

typedef std::map<ESO2stringStringIntTriple,std::pair<int,float>,ESO2stringStringIntTripleCompareFunctionObject> ESO2mapStringStringIntToIntFloatPair;
typedef std::map<ESO2stringStringIntTriple,std::pair<int,float>,ESO2stringStringIntTripleCompareFunctionObject>::const_iterator ESO2mapStringStringIntToIntFloatPairConstIterator;
typedef std::map<int,ESO2mapStringStringIntToIntFloatPair> ESO2mapIntToMapStringStringIntToIntFloatPair;

class ESO2partDemandAppData : public ESO2appData {
public:
  
  std::set<std::string> getAttributeNames() const;
  
  /*
  void addPeggedItem(
    const std::string & attribName, int shipPeriod, 
    const std::string & item, 
    const std::string & loc,
    int period, 
    float quantity );
    
  void getPeggedItems(
    const std::string & attribName, int shipPeriod,
    std::vector<std::string> &items,
    std::vector<std::string> &locs,
    std::vector<int> &periods,
    std::vector<float> &quantities ) const;
    */

  void addPeggedItem(
    const std::string & attribName, int shipPeriod, 
    const std::string & item, 
    const std::string & loc,
    int period,
    int supplyChainDepth,
    float quantity );
  void getPeggedItems(
    const std::string & attribName, int shipPeriod,
    std::vector<std::string> &items,
    std::vector<std::string> &locs,
    std::vector<int> &periods,
    std::vector<int> &depths,
    std::vector<float> &quantities ) const;

  void setPriority(int);
  int getPriority() const;

  void setWac(int period, float wac);
  float getWac(int period) const;
  std::vector<float> getWac() const;

  void clearPegging();
    
private:
  // default constructor
  ESO2partDemandAppData();
public:
  ESO2partDemandAppData(int nPeriods);
  
  // destructor
  virtual ~ESO2partDemandAppData();
  
  // copy constructor
  ESO2partDemandAppData( const ESO2partDemandAppData& source );
  
  // assignment operator
  ESO2partDemandAppData&
    operator=(const ESO2partDemandAppData& rhs);

  virtual ESO2appData * clone() const;

  // Self-test
  static void test();

private:

  //std::map<std::string,ESO2mapIntToMapStringStringIntToFloat> peggedAttributes_;
  //std::map<std::string,ESO2mapIntToMapStringStringIntIntToFloat> peggedAttributes_;
  std::map<std::string,ESO2mapIntToMapStringStringIntToIntFloatPair> peggedAttributes_;
  std::set<std::string> attributeNames_;

  int priority_;
  std::vector<float> wac_;
  
};



#endif
@


1.10
log
@modified the way the depth is stored in partDemandAppData
@
text
@d32 1
a32 1
  std::vector<std::string> getAttributeNames() const;
@


1.9
log
@Updated to have depth of pegging activity.
@
text
@d4 2
d10 1
a10 2
#include "stringStringIntIntTuple.h"

d13 1
d17 1
d19 1
a19 1

d23 5
d98 2
a99 1
  std::map<std::string,ESO2mapIntToMapStringStringIntIntToFloat> peggedAttributes_;
@


1.8
log
@modified function which offsets execVol to impact period.  some other clean up.
@
text
@a4 1
#include "stringStringIntFloatTuple.h"
d8 1
a11 6
#if 0
typedef std::set<ESO2stringStringIntFloatTuple,ESO2stringStringIntFloatTupleCompareFunctionObject> ESO2setStringStringIntFloatTuple;
typedef std::set<ESO2stringStringIntFloatTuple,ESO2stringStringIntFloatTupleCompareFunctionObject>::const_iterator ESO2setStringStringIntFloatTupleConstIterator;
typedef std::map<int,ESO2setStringStringIntFloatTuple> ESO2mapIntSetStringStringIntFloatTuple;
#endif

a12 1
//typedef std::set<ESO2mapStringStringIntToFloat> ESO2setMapStringStringIntToFloat;
d16 5
d26 1
d33 1
d40 1
d42 14
d89 3
a91 5
#if 0
  std::map<std::string,ESO2mapIntSetStringStringIntFloatTuple> peggedAttributes_;
#endif
  std::map<std::string,ESO2mapIntToMapStringStringIntToFloat> peggedAttributes_;
  std::vector<std::string> attributeNames_;
@


1.7
log
@implemented pegging of harvested and moved parts
@
text
@a9 1
class ESO2stringStringIntFloatTupleCompareFunctionObject {
a10 24
public:
  bool operator()(const ESO2stringStringIntFloatTuple & a, const ESO2stringStringIntFloatTuple & b) const
  {
    bool retVal=false;

    const std::string & as1 = a.getString1();
    const std::string & as2 = a.getString2();
    int ai = a.getInt();
    float af = a.getFloat();

    const std::string & bs1 = b.getString1();
    const std::string & bs2 = b.getString2();
    int bi = b.getInt();
    float bf = b.getFloat();

    if( as1 < bs1 )retVal=true;
    else if ( as1==bs1 && as2<bs2 ) retVal=true;
    else if ( as1==bs1 && as2==bs2 && ai<bi ) retVal=true;
    else if ( as1==bs1 && as2==bs2 && ai==bi && af<bf ) retVal=true;

    return retVal;

  }
};
@


1.6
log
@Modified eso2 & eso2Problem to use generalized storing of pegged attributes in partDemandAppData
@
text
@d6 1
a6 8

#if 0
typedef std::pair<int,float> ESO2intFloatPair;
typedef std::pair<std::string,ESO2intFloatPair> ESO2stringIntFloatTriple;
typedef std::set<ESO2stringIntFloatTriple> ESO2setStringIntFloatTriple;
typedef std::map<int,ESO2setStringIntFloatTriple> ESO2mapIntsetStringIntFloatTriple;
typedef std::map<int,ESO2setStringIntFloatTriple>::const_iterator ESO2mapIntsetStringIntFloatTripleConstIter;
#endif
d29 1
a29 1
    else if ( as1==bs1 && as2==bs2 && ai<<bi ) retVal=true;
d37 1
d41 6
d99 1
a99 1

d101 2
@


1.5
log
@Modified to generalize the storing of pegged attributes in partDemandAppData
@
text
@d5 1
d7 1
d13 34
d51 1
a51 1
  const std::vector<std::string> & getAttributeNames() const;
d56 1
d62 1
d100 1
a100 1
  std::map<std::string,ESO2mapIntsetStringIntFloatTriple> peggedAttributes_;
@


1.4
log
@Added pegging of deman info
@
text
@d10 1
d15 10
a24 23
  void addPeggedAcquiredMtm(int shipPeriod, const std::string & mtm, int period, float quantity );
  void addPeggedDemanMtm(int shipPeriod, const std::string & part, int period, float quantity );
  void addPeggedAcquiredFeature(int shipPeriod, const std::string & feature, int period, float quantity );
  void addPeggedAcquiredLoosePart(int shipPeriod, const std::string & part, int period, float quantity );

  void getPeggedAcquiredMtms(
    int shipPeriod,
    std::vector<std::string> &mtms,
    std::vector<int> &periods,
    std::vector<float> &quantities ) const;
  void getPeggedDemanMtms(
    int shipPeriod,
    std::vector<std::string> &mtms,
    std::vector<int> &periods,
    std::vector<float> &quantities ) const;
  void getPeggedAcquiredFeatures(
    int shipPeriod, 
    std::vector<std::string> &features,
    std::vector<int> &periods,
    std::vector<float> &quantities ) const;
  void getPeggedAcquiredLooseParts(
    int shipPeriod, 
    std::vector<std::string> &looseParts,
d27 1
a60 15
  //void addPeggedAcquiredItem(std::set<ESO2stringIntFloatTriple> & set, const std::string & item, int period, float quantity );
  void addPeggedAcquiredItem(ESO2mapIntsetStringIntFloatTriple & map, int shipPeriod, const std::string & item, int period, float quantity );
  
  //void getPeggedAcquiredItems(
  //  const std::set<ESO2stringIntFloatTriple> & set,
  //  std::vector<std::string> &item,
  //  std::vector<int> &periods,
  //  std::vector<float> &quantities ) const;

  void getPeggedAcquiredItems(
    const ESO2mapIntsetStringIntFloatTriple & map,
    int shipPeriod,
    std::vector<std::string> &item,
    std::vector<int> &periods,
    std::vector<float> &quantities ) const;
d62 2
a63 4
  ESO2mapIntsetStringIntFloatTriple peggedAcquiredMtms_;
  ESO2mapIntsetStringIntFloatTriple peggedAcquiredFeatures_;
  ESO2mapIntsetStringIntFloatTriple peggedAcquiredLooseParts_;
  ESO2mapIntsetStringIntFloatTriple peggedDemanMtms_;
@


1.3
log
@added wac scale factors (one for each demand file)
@
text
@d15 1
d24 5
d91 1
@


1.2
log
@Added a more general method for dealing with the ETN flags
@
text
@d37 4
d43 1
d46 2
d87 1
@


1.1
log
@new files to support pip
@
text
@d34 3
d78 2
@

