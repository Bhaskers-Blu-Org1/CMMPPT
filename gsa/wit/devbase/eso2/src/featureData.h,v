head	1.6;
access;
symbols
	abandoningEtnParts:1.5
	beforeEtnParts:1.5
	eso2InitialFileFormats:1.3;
locks; strict;
comment	@ * @;


1.6
date	2005.01.29.18.27.37;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.29.19.16.01;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.12.01.21.18;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.07.19.24.49;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.07.17.04.19;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.02.02.59.52;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.6
log
@changed code to use std::string rather than BCP_string
@
text
@#ifndef ESO2_FeatureData_h
#define ESO2_FeatureData_h

#include "scoFile.h"


class ESO2featureData : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(feature);
  getFieldH(plantLoc);
  getIntFieldH(period);
  getFloatFieldH(supply);
  getFloatFieldH(wfmv);
  
  // preferred constructor
  ESO2featureData(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("feature");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    hasHeaderRecord(5);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & feature, 
    const std::string & plantLoc, 
    int period ) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = feature+"$+&"+plantLoc+"$+&"+periodchar;
    return retVal;
  };
  
  // destructor
  ~ESO2featureData(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ESO2featureData file("../data/example1/featureData.csv");
    
    // Test reading first record

    std::string feature = file.feature(0);
    assert( feature=="f1");
    assert( file.plantLoc(0) == "pok" );
    assert( file.periodAsInt(0) == 1 );
    assert( file.supplyAsFloat(0) == 20.0f );
    assert( file.wfmvAsFloat(0) == 5.0f );

    assert( file.feature(1) == "f1" );
    assert( file.plantLoc(1) == "pok" );
    assert( file.periodAsInt(1) == 2 );
    assert( file.supplyAsFloat(1) == 21.0f );
    assert( file.wfmvAsFloat(1) == 5.4f );
    
    // Test reading record by key    
    assert( file.wfmvAsFloat(file.key("f2","wat",3)) == 5.0f );
    assert( file.supplyAsFloat(file.key("f2","wat",3)) == 30.0f );

    assert( file.numRecords() == 16 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      feature(recNum),
      plantLoc(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ESO2featureData();
  
  // copy constructor  -- don't use!
  ESO2featureData( const ESO2featureData& source );
  
  // assignment operator -- don't use!
  ESO2featureData&
  operator=(const ESO2featureData& rhs);

  
};



class ESO2featureDataIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(feature);
  getFieldFileWithIteratorH(plantLoc);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(supply);
  getFloatFieldFileWithIteratorH(wfmv);

  
  // preferred constructor
  ESO2featureDataIterator(const ESO2featureData & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ESO2featureDataIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ESO2featureData file("../data/example1/featureData.csv");
    ESO2featureDataIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.feature() == "f1" );
        assert( fileIter.plantLoc() == "pok" );
        assert( fileIter.periodAsInt() == 1 );
        assert( fileIter.supplyAsFloat() == 20.0f );
        assert( fileIter.wfmvAsFloat() == 5.0f );

        assert( fileIter.recNum() == 9 );
          
      }
      recNo++;
    }
    
    // number of records including comments
    assert( fileIter.recNum()==25);
  }

private:
  
  
  // default constructor -- don't use!
  ESO2featureDataIterator();
  
  // copy constructor  -- don't use!
  ESO2featureDataIterator( const ESO2featureDataIterator& source );
  
  // assignment operator -- don't use!
  ESO2featureDataIterator&
  operator=(const ESO2featureDataIterator& rhs);

  
};
#endif
@


1.5
log
@Replaced std::string with BCP_string to work around VAC compiler problem
@
text
@d18 1
a18 1
  ESO2featureData(BCP_string filename)
d33 3
a35 3
  static BCP_string key( 
    const BCP_string & feature, 
    const BCP_string & plantLoc, 
d40 1
a40 1
    BCP_string retVal = feature+"$+&"+plantLoc+"$+&"+periodchar;
d54 1
a54 1
    BCP_string feature = file.feature(0);
d78 1
a78 1
  virtual BCP_string key( unsigned int recNum ) const
d80 1
a80 1
    BCP_string retVal = key(
@


1.4
log
@Updated to change 1 to be the first period.
Added additional test to see if objValue has changed
@
text
@d18 1
a18 1
  ESO2featureData(std::string filename)
d33 3
a35 3
  static std::string key( 
    const std::string & feature, 
    const std::string & plantLoc, 
d40 1
a40 1
    std::string retVal = feature+"$+&"+plantLoc+"$+&"+periodchar;
d54 1
a54 1
    std::string feature = file.feature(0);
d78 1
a78 1
  virtual std::string key( unsigned int recNum ) const
d80 1
a80 1
    std::string retVal = key(
@


1.3
log
@fixed up data files so periods are not greater than 3 (ie removed records for period 4)
@
text
@d57 1
a57 1
    assert( file.periodAsInt(0) == 0 );
d63 1
a63 1
    assert( file.periodAsInt(1) == 1 );
d136 1
a136 1
        assert( fileIter.periodAsInt() == 0 );
@


1.2
log
@updated to add eso2Problem class and eso2 main program
@
text
@d68 2
a69 2
    assert( file.wfmvAsFloat(file.key("f2","wat",4)) == 6.0f );
    assert( file.supplyAsFloat(file.key("f2","wat",4)) == 36.0f );
d71 1
a71 1
    assert( file.numRecords() == 20 );
d147 1
a147 1
    assert( fileIter.recNum()==29);
@


1.1
log
@Added code to read featureData file
@
text
@d140 1
a140 1
        assert( fileIter.recNum() == 8 );
d147 1
a147 1
    assert( fileIter.recNum()==28);
@

