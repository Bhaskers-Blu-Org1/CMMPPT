head	1.3;
access;
symbols
	abandoningEtnParts:1.2
	beforeEtnParts:1.2;
locks; strict;
comment	@ * @;


1.3
date	2005.01.29.18.27.38;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.29.19.16.02;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.01.15.36.41;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@changed code to use std::string rather than BCP_string
@
text
@#ifndef ESO2partInterplant_h
#define ESO2partInterplant_h

#include <string>

class ESO2partInterplant {
public:
  
  const std::string & getSrcLoc(){return srcLoc_;}; 
  const std::string & getDestLoc(){return destLoc_;}; 
  float getDefaultMoveCost(){return defaultMoveCost_;};
  float getDefaultMoveTime(){return defaultMoveTime_;};
    

  // Typical Constructor
  ESO2partInterplant(
    const std::string & srcLoc,
    const std::string & destLoc,
    float defaultMoveCost,
    float defaultMoveTime)
    : 
  srcLoc_(srcLoc),destLoc_(destLoc),defaultMoveCost_(defaultMoveCost),defaultMoveTime_(defaultMoveTime)
  {};
  
  // destructor
  virtual ~ESO2partInterplant();
  
  // copy constructor
  ESO2partInterplant( const ESO2partInterplant& source );
  
  // assignment operator
  ESO2partInterplant&
    operator=(const ESO2partInterplant& rhs);

  // Self-test
  //static void test();

private:
  
  // default constructor
  ESO2partInterplant();

  std::string srcLoc_;
  std::string destLoc_;
  float defaultMoveCost_;
  float defaultMoveTime_;
  
};



#endif
@


1.2
log
@Replaced std::string with BCP_string to work around VAC compiler problem
@
text
@a4 1
#include "BCP_string.h"
d9 2
a10 2
  const BCP_string & getSrcLoc(){return srcLoc_;}; 
  const BCP_string & getDestLoc(){return destLoc_;}; 
d17 2
a18 2
    const BCP_string & srcLoc,
    const BCP_string & destLoc,
d43 2
a44 2
  BCP_string srcLoc_;
  BCP_string destLoc_;
@


1.1
log
@Changed so partInterplants are applied to parts obtained from an mtm that has had an interplant move.
@
text
@d5 1
d10 2
a11 2
  const std::string & getSrcLoc(){return srcLoc_;}; 
  const std::string & getDestLoc(){return destLoc_;}; 
d18 2
a19 2
    const std::string & srcLoc,
    const std::string & destLoc,
d44 2
a45 2
  std::string srcLoc_;
  std::string destLoc_;
@

