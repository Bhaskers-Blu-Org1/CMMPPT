head	1.10;
access;
symbols
	abandoningEtnParts:1.7
	beforeEtnParts:1.7
	eso2InitialFileFormats:1.3
	Start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2006.06.24.22.18.45;	author fasano;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.24.17.14.27;	author fasano;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.29.18.27.38;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.29.19.16.02;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.30.19.04.24;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.17.01.28.20;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.09.19.43.30;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.07.17.04.19;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.07.00.27.10;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.01.17.14.25;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.11.01.17.14.25;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.10
log
@sco::fileIter changed to hopefully better deal with cntrl-m at end of line.
@
text
@#ifndef scoFile_h
#define scoFile_h

#include <stdio.h>
#include <vector>
#include <string>
#include <map>
//#include <rw/cstring.h>
//#include <rw/hashdict.h>
//#include "generVc.h"



#if 0
#if defined(_MSC_VER)
#  if defined(SCO_DLLEXPORT)
#    define SCO_DECLSPEC __declspec(dllexport)
#  else
#    define SCO_DECLSPEC  __declspec(dllimport)
#  endif
#  define SCO_STDCALL __stdcall
#else
#  define SCO_DECLSPEC
#  define SCO_STDCALL
#endif
#else
#  define SCO_DECLSPEC
#  define SCO_STDCALL
#endif

// Macros for defining method implementatons
// getField
#define getField(className,field) \
std::string \
  className::##field ( unsigned int recNum ) const \
{ \
  return fieldAsString( recNum, #field ); \
} \
std::string \
  className::##field ( std::string key ) const \
{ \
  return field( recordIndex( key ) ); \
}
#define getFieldH(field) \
std::string field( unsigned int recNum ) const { return fieldAsString( recNum, #field ); }\
std::string field( const std::string & key ) const { return field( recordIndex( key ) ); }

// getFieldFileWithIterator
#define getFieldFileWithIterator(className,field) \
getField(className,field) \
std::string \
  className##Iterator::##field () const \
{ \
  return fieldOnRecord( #field ); \
}
#define getFieldFileWithIteratorH(field) \
std::string field () const { return fieldOnRecord( #field ); }

// getFloatField
#define getFloatField(className,field) \
getField(className,field) \
float \
  className::##field##AsFloat ( unsigned int recNum ) const \
{ \
  return fieldAsFloat( recNum, #field ); \
} \
float \
  className::##field##AsFloat ( std::string key ) const \
{ \
  return field##AsFloat( recordIndex( key ) ); \
}
#define getFloatFieldH(field) \
getFieldH(field) \
float field##AsFloat(unsigned int recNum) const { return fieldAsFloat( recNum, #field ); } \
float field##AsFloat( const std::string & key ) const { return field##AsFloat( recordIndex( key ) ); }

// getFloatFieldFileWithIterator
#define getFloatFieldFileWithIterator(className,field) \
getFloatField(className,field) \
std::string \
  className##Iterator::##field () const \
{ \
  return fieldOnRecord( #field ); \
}\
float \
  className##Iterator::##field##AsFloat () const \
{ \
  return fieldOnRecordAsFloat( #field ); \
}
#define getFloatFieldFileWithIteratorH(field) \
std::string field () const { return fieldOnRecord( #field ); }; \
float field##AsFloat () const { return fieldOnRecordAsFloat( #field ); }

// getIntField
#define getIntField(className,field) \
getField(className,field) \
int \
  className::##field##AsInt ( unsigned int recNum ) const \
{ \
  return fieldAsInt( recNum, #field ); \
} \
int \
  className::##field##AsInt ( std::string key ) const \
{ \
  return field##AsInt( recordIndex( key ) ); \
}
#define getIntFieldH(field) \
getFieldH(field) \
int field##AsInt(unsigned int recNum) const { return fieldAsInt( recNum, #field ); } \
int field##AsInt(const std::string & key ) const { return field##AsInt( recordIndex( key ) ); }


// getIntFieldFileWithIterator
#define getIntFieldFileWithIterator(className,field) \
getIntField(className,field) \
std::string \
  className##Iterator::##field () const \
{ \
  return fieldOnRecord( #field ); \
}\
int \
  className##Iterator::##field##AsInt () const \
{ \
  return fieldOnRecordAsInt( #field ); \
}
#define getIntFieldFileWithIteratorH(field) \
std::string field() const { return fieldOnRecord( #field ); } \
int field##AsInt() const { return fieldOnRecordAsInt( #field ); }

// Forward declarations
class SCO_DECLSPEC SCOfile;

class SCO_DECLSPEC SCOfileIterator {

public:
  
  //Advances the iterator to the next record a pointer to 
  //the record. Returns nil if the cursor is at the end of the 
  //collection. 
  virtual const std::string * operator()(); 

  // Return current record number
  unsigned int recNum() const;

   
  // Return refernce to file being iterated on
  const SCOfile & scoFile() const;

  // Return current record iterator is pointing to.
  std::string record() const;

    
  std::string
    fieldOnRecord ( std::string fieldName )
      const;

  float 
    fieldOnRecordAsFloat ( 
      std::string fieldName ) 
      const;

  int
    fieldOnRecordAsInt (  
    std::string fieldName  )
    const;
  
  // preferred constructor
  // Construct an iterator for a SCOfile to allow sequential file access.
  // Immediately after construction, the position of the 
  // iterator is undefined until positioned.
  SCOfileIterator(const SCOfile&);
  
  // destructor
  virtual
    ~SCOfileIterator();
  
  // Self-test
  //static void test();

private:

  unsigned int recNumZeroBased() const;

  virtual void openFile();
  
  // default constructor -- don't use!
  SCOfileIterator();
  
  // copy constructor  -- don't use!
  SCOfileIterator( const SCOfileIterator& source );
  
  // assignment operator -- don't use!
  SCOfileIterator&
  operator=(const SCOfileIterator& rhs);

  // Member data
  FILE * filePtr_;
  const SCOfile * scoFilePtr_;
  unsigned int recNum_;
  std::string * recordPtr_;
  
};

//---------------------------------------------------------------

class SCOfile {

  friend class SCOfileIterator;

public:
  
  // return number of records in file.
  // If removeDuplicateRecords is TRUE then then number
  // of unique records is returned.
  virtual unsigned int numRecords() const;

  std::string filename() const;

  // removeDuplicateRecords flag.
  // If true then only one copy of a record will be returned when
  // accessing the file by record number. The duplicates are
  // skipped over.
  // This field must be set when to fileDataInitialized() is false.
  // If this condition is not met, then an error condition is raised.
  bool removeDuplicateRecords() const;
  void removeDuplicateRecords(bool);

  // commentRecords flag.
  // If true then records which are comments are skipped over as if they were not present.
  // This field must be set when to fileDataInitialized() is false.
  // If this condition is not met, then an error condition is raised.
  bool commentRecords() const;
  void commentRecords(bool);



  void initialize();
 
  virtual std::string
    fieldAsString ( unsigned int recNum, std::string fieldName )
      const;
  virtual std::string
    fieldAsString ( std::string key, std::string fieldName )
      const;  
  virtual int
    fieldAsInt ( unsigned int recNum, std::string fieldName )
      const;
  virtual int
    fieldAsInt ( std::string key, std::string fieldName )
      const;
  virtual float
    fieldAsFloat ( unsigned int recNum, std::string fieldName )
      const;
  virtual float
    fieldAsFloat ( std::string key, std::string fieldName )
      const;
  
  // Return true if record with specified key exists
  bool
    keyExists( const std::string & key )
    const;
  
  virtual void initializeFileData();

protected:
  virtual void initializeFileDict();
  virtual void initializeFieldInformation() = 0;

  
  virtual bool hasHeaderRecord() const {return false;};

  // stripBlanks flag.
  bool strip() const;
  void strip(bool);

  // test to see if record is a comment
  bool commentRecord(std::string rec,int physicalRecordNumber ) const;

  // Implement roguewave string strip.
  // needed when converting to stl
  std::string stripString( const std::string & orig ) const;

  // attempt to deal with dos to unix and unix to dos eol issues
  static std::string trimEolCharacters(const std::string & inputRecord);

  // return spefific record in file
  std::string record( unsigned int recNo ) const;
  std::string record( std::string key ) const;

  // Return index of record with specfied key
  int recordIndex ( std::string key ) const;

  // return named field on specified record  
  virtual std::string
    fieldOnRecord ( const std::string & record, std::string fieldName )
      const=0;
  
  virtual float
    fieldToFloat( 
      std::string fieldValue,  
      unsigned int recNum,
      std::string fieldName )
      const;
  float 
    fieldOnRecordAsFloat (
      std::string record,
      unsigned int recNum,  
      std::string fieldName ) 
      const;
  
 
  virtual int
    fieldToInt( 
      std::string fieldValue, 
      unsigned int recNum,
      std::string fieldName )
      const; 
  int
    fieldOnRecordAsInt (
      std::string record,
      unsigned int recNum,  
      std::string fieldName  )
      const;
  // compute key for storing record in dictionary
  virtual
    std::string 
      key( unsigned int ) const = 0;

  // resize vector that contains records
  void resize(size_t newSize);

  bool fileDataInitialized() const;
  void fileDataInitialized(bool val){fileDataInitialized_=val;};
  bool fileDictInitialized() const;

  int recordNumberWithoutComments(int recNum) const;

  
  virtual void testRecordFormat(std::string rec, unsigned int recNum ) const =0;

  // preferred constructor
  SCOfile(std::string filename);
  
  // destructor
  virtual
    ~SCOfile();
  
  // Self-test
  //static void test();

  
private:
  
  
  // default constructor -- don't use!
  SCOfile();
  
  // copy constructor  -- don't use!
  SCOfile( const SCOfile& source );
  
  // assignment operator -- don't use!
  SCOfile&
  operator=(const SCOfile& rhs);

  // Member data
  bool removeDuplicateRecords_;
  bool commentRecords_;
  std::vector<std::string> fileData_;
  bool fileDataInitialized_;
  std::map<std::string,int> fileDict_; // record number skipping comments
  std::map<int,int> recNumWc_; // record number with comments
  bool fileDictInitialized_;
  std::string filename_; 
  bool strip_;
  
};

//---------------------------------------------------------------




class SCO_DECLSPEC SCOfixedFormatFile : public SCOfile {
public:

  // return record length
  // since these are files with fixed length fields all records are
  // the same length.
  int recLength() const;

  // return named field on specified record  
  virtual std::string
    fieldOnRecord ( std::string record, std::string fieldName )
      const;
  
protected:
  
  virtual void initializeFieldInformation();
  virtual void testRecordFormat(std::string rec, unsigned int recNum) const;

  // insert field name and length into file description
  void
    insertField( std::string fieldName, int fieldLen );

  // Given a field name return its lenght on a record
  size_t
    fieldLen( std::string fieldNam )
      const;

  // Given a field name return its starting position on a record
  size_t
    fieldPos( std::string fieldNam )
      const;

  // preferred constructor
  SCOfixedFormatFile(std::string filename);
  
  // destructor
  virtual
    ~SCOfixedFormatFile();
  
  // Self-test
  //static void test();

  
private:
  
  
  // default constructor -- don't use!
  SCOfixedFormatFile();
  
  // copy constructor  -- don't use!
  SCOfixedFormatFile( const SCOfixedFormatFile& source );
  
  // assignment operator -- don't use!
  SCOfixedFormatFile&
  operator=(const SCOfixedFormatFile& rhs);

  // Member data
  std::vector<std::string> fields_;
  std::vector<int>    fieldLens_; 

  std::map<std::string,int> fieldLenDict_;
  std::map<std::string,int> fieldPosDict_;
  
};


class SCO_DECLSPEC SCOcsvFormatFile : public SCOfile {
  
public:

  // return number of fields on a record
  int numberOfFields() const;

  // return named field on specified record  
  virtual std::string
    fieldOnRecord ( const std::string & record, std::string fieldName )
      const;
  std::string 
    fieldOnRecord( const std::string & record, int desiredFieldNumber )
    const;
  
protected:
  
  virtual void initializeFieldInformation();
  virtual void testRecordFormat(std::string rec, unsigned int recNum) const;

  // insert field name and length into file description
  void
    insertField( std::string fieldName );

  // return true if field with specified name exists
  //bool fieldExists(std::string & fileName) const;

  
  // Given a field name return its field column number
  size_t
    fieldPos( const std::string & fieldNam )
      const;

  void fieldSeperator( char );
  char fieldSeperator() const;

  void hasHeaderRecord( int numberOfFields );
  virtual bool hasHeaderRecord() const;

  // preferred constructor
  SCOcsvFormatFile(std::string filename);
  
  // destructor
  virtual
    ~SCOcsvFormatFile();
  
  // Self-test
  //static void test();

  
private:
  
  
  // default constructor -- don't use!
  SCOcsvFormatFile();
  
  // copy constructor  -- don't use!
  SCOcsvFormatFile( const SCOcsvFormatFile& source );
  
  // assignment operator -- don't use!
  SCOcsvFormatFile&
  operator=(const SCOcsvFormatFile& rhs);

  // Member data
  std::vector<std::string> fields_;

  std::map<std::string,int> fieldPosDict_;

  char fieldSeperator_;
  bool hasHeaderRecord_;
  
};

#endif





@


1.9
log
@modifed to write out the number of demand records added to model.
updated scoFile to use WallyProj trim eol method.
@
text
@d284 1
a284 1
  std::string trimEolCharacters(const std::string & inputRecord) const;
@


1.8
log
@changed code to use std::string rather than BCP_string
@
text
@d283 3
@


1.7
log
@Replaced std::string with BCP_string to work around VAC compiler problem
@
text
@a7 1
#include "BCP_string.h"
d34 1
a34 1
BCP_string \
d39 2
a40 2
BCP_string \
  className::##field ( BCP_string key ) const \
d45 2
a46 2
BCP_string field( unsigned int recNum ) const { return fieldAsString( recNum, #field ); }\
BCP_string field( const BCP_string & key ) const { return field( recordIndex( key ) ); }
d51 1
a51 1
BCP_string \
d57 1
a57 1
BCP_string field () const { return fieldOnRecord( #field ); }
d68 1
a68 1
  className::##field##AsFloat ( BCP_string key ) const \
d75 1
a75 1
float field##AsFloat( const BCP_string & key ) const { return field##AsFloat( recordIndex( key ) ); }
d80 1
a80 1
BCP_string \
d91 1
a91 1
BCP_string field () const { return fieldOnRecord( #field ); }; \
d103 1
a103 1
  className::##field##AsInt ( BCP_string key ) const \
d110 1
a110 1
int field##AsInt(const BCP_string & key ) const { return field##AsInt( recordIndex( key ) ); }
d116 1
a116 1
BCP_string \
d127 1
a127 1
BCP_string field() const { return fieldOnRecord( #field ); } \
d140 1
a140 1
  virtual const BCP_string * operator()(); 
d150 1
a150 1
  BCP_string record() const;
d153 2
a154 2
  BCP_string
    fieldOnRecord ( BCP_string fieldName )
d159 1
a159 1
      BCP_string fieldName ) 
d164 1
a164 1
    BCP_string fieldName  )
d200 1
a200 1
  BCP_string * recordPtr_;
d217 1
a217 1
  BCP_string filename() const;
d239 2
a240 2
  virtual BCP_string
    fieldAsString ( unsigned int recNum, BCP_string fieldName )
d242 2
a243 2
  virtual BCP_string
    fieldAsString ( BCP_string key, BCP_string fieldName )
d246 1
a246 1
    fieldAsInt ( unsigned int recNum, BCP_string fieldName )
d249 1
a249 1
    fieldAsInt ( BCP_string key, BCP_string fieldName )
d252 1
a252 1
    fieldAsFloat ( unsigned int recNum, BCP_string fieldName )
d255 1
a255 1
    fieldAsFloat ( BCP_string key, BCP_string fieldName )
d260 1
a260 1
    keyExists( const BCP_string & key )
d277 1
a277 1
  bool commentRecord(BCP_string rec,int physicalRecordNumber ) const;
d281 1
a281 1
  BCP_string stripString( const BCP_string & orig ) const;
d284 2
a285 2
  BCP_string record( unsigned int recNo ) const;
  BCP_string record( BCP_string key ) const;
d288 1
a288 1
  int recordIndex ( BCP_string key ) const;
d291 2
a292 2
  virtual BCP_string
    fieldOnRecord ( const BCP_string & record, BCP_string fieldName )
d297 1
a297 1
      BCP_string fieldValue,  
d299 1
a299 1
      BCP_string fieldName )
d303 1
a303 1
      BCP_string record,
d305 1
a305 1
      BCP_string fieldName ) 
d311 1
a311 1
      BCP_string fieldValue, 
d313 1
a313 1
      BCP_string fieldName )
d317 1
a317 1
      BCP_string record,
d319 1
a319 1
      BCP_string fieldName  )
d323 1
a323 1
    BCP_string 
d336 1
a336 1
  virtual void testRecordFormat(BCP_string rec, unsigned int recNum ) const =0;
d339 1
a339 1
  SCOfile(BCP_string filename);
d365 1
a365 1
  std::vector<BCP_string> fileData_;
d367 1
a367 1
  std::map<BCP_string,int> fileDict_; // record number skipping comments
d370 1
a370 1
  BCP_string filename_; 
d389 2
a390 2
  virtual BCP_string
    fieldOnRecord ( BCP_string record, BCP_string fieldName )
d396 1
a396 1
  virtual void testRecordFormat(BCP_string rec, unsigned int recNum) const;
d400 1
a400 1
    insertField( BCP_string fieldName, int fieldLen );
d404 1
a404 1
    fieldLen( BCP_string fieldNam )
d409 1
a409 1
    fieldPos( BCP_string fieldNam )
d413 1
a413 1
  SCOfixedFormatFile(BCP_string filename);
d437 1
a437 1
  std::vector<BCP_string> fields_;
d440 2
a441 2
  std::map<BCP_string,int> fieldLenDict_;
  std::map<BCP_string,int> fieldPosDict_;
d454 2
a455 2
  virtual BCP_string
    fieldOnRecord ( const BCP_string & record, BCP_string fieldName )
d457 2
a458 2
  BCP_string 
    fieldOnRecord( const BCP_string & record, int desiredFieldNumber )
d464 1
a464 1
  virtual void testRecordFormat(BCP_string rec, unsigned int recNum) const;
d468 1
a468 1
    insertField( BCP_string fieldName );
d471 1
a471 1
  //bool fieldExists(BCP_string & fileName) const;
d476 1
a476 1
    fieldPos( const BCP_string & fieldNam )
d486 1
a486 1
  SCOcsvFormatFile(BCP_string filename);
d510 1
a510 1
  std::vector<BCP_string> fields_;
d512 1
a512 1
  std::map<BCP_string,int> fieldPosDict_;
@


1.6
log
@File changes to allow all parts and mtms defined at a srcLoc to have interplant move operations added.
@
text
@d8 1
d35 1
a35 1
std::string \
d40 2
a41 2
std::string \
  className::##field ( std::string key ) const \
d46 2
a47 2
std::string field( unsigned int recNum ) const { return fieldAsString( recNum, #field ); }\
std::string field( const std::string & key ) const { return field( recordIndex( key ) ); }
d52 1
a52 1
std::string \
d58 1
a58 1
std::string field () const { return fieldOnRecord( #field ); }
d69 1
a69 1
  className::##field##AsFloat ( std::string key ) const \
d76 1
a76 1
float field##AsFloat( const std::string & key ) const { return field##AsFloat( recordIndex( key ) ); }
d81 1
a81 1
std::string \
d92 1
a92 1
std::string field () const { return fieldOnRecord( #field ); }; \
d104 1
a104 1
  className::##field##AsInt ( std::string key ) const \
d111 1
a111 1
int field##AsInt(const std::string & key ) const { return field##AsInt( recordIndex( key ) ); }
d117 1
a117 1
std::string \
d128 1
a128 1
std::string field() const { return fieldOnRecord( #field ); } \
d141 1
a141 1
  virtual const std::string * operator()(); 
d151 1
a151 1
  std::string record() const;
d154 2
a155 2
  std::string
    fieldOnRecord ( std::string fieldName )
d160 1
a160 1
      std::string fieldName ) 
d165 1
a165 1
    std::string fieldName  )
d201 1
a201 1
  std::string * recordPtr_;
d218 1
a218 1
  std::string filename() const;
d240 2
a241 2
  virtual std::string
    fieldAsString ( unsigned int recNum, std::string fieldName )
d243 2
a244 2
  virtual std::string
    fieldAsString ( std::string key, std::string fieldName )
d247 1
a247 1
    fieldAsInt ( unsigned int recNum, std::string fieldName )
d250 1
a250 1
    fieldAsInt ( std::string key, std::string fieldName )
d253 1
a253 1
    fieldAsFloat ( unsigned int recNum, std::string fieldName )
d256 1
a256 1
    fieldAsFloat ( std::string key, std::string fieldName )
d261 1
a261 1
    keyExists( const std::string & key )
d278 1
a278 1
  bool commentRecord(std::string rec,int physicalRecordNumber ) const;
d282 1
a282 1
  std::string stripString( const std::string & orig ) const;
d285 2
a286 2
  std::string record( unsigned int recNo ) const;
  std::string record( std::string key ) const;
d289 1
a289 1
  int recordIndex ( std::string key ) const;
d292 2
a293 2
  virtual std::string
    fieldOnRecord ( const std::string & record, std::string fieldName )
d298 1
a298 1
      std::string fieldValue,  
d300 1
a300 1
      std::string fieldName )
d304 1
a304 1
      std::string record,
d306 1
a306 1
      std::string fieldName ) 
d312 1
a312 1
      std::string fieldValue, 
d314 1
a314 1
      std::string fieldName )
d318 1
a318 1
      std::string record,
d320 1
a320 1
      std::string fieldName  )
d324 1
a324 1
    std::string 
d337 1
a337 1
  virtual void testRecordFormat(std::string rec, unsigned int recNum ) const =0;
d340 1
a340 1
  SCOfile(std::string filename);
d366 1
a366 1
  std::vector<std::string> fileData_;
d368 1
a368 1
  std::map<std::string,int> fileDict_; // record number skipping comments
d371 1
a371 1
  std::string filename_; 
d390 2
a391 2
  virtual std::string
    fieldOnRecord ( std::string record, std::string fieldName )
d397 1
a397 1
  virtual void testRecordFormat(std::string rec, unsigned int recNum) const;
d401 1
a401 1
    insertField( std::string fieldName, int fieldLen );
d405 1
a405 1
    fieldLen( std::string fieldNam )
d410 1
a410 1
    fieldPos( std::string fieldNam )
d414 1
a414 1
  SCOfixedFormatFile(std::string filename);
d438 1
a438 1
  std::vector<std::string> fields_;
d441 2
a442 2
  std::map<std::string,int> fieldLenDict_;
  std::map<std::string,int> fieldPosDict_;
d455 2
a456 2
  virtual std::string
    fieldOnRecord ( const std::string & record, std::string fieldName )
d458 2
a459 2
  std::string 
    fieldOnRecord( const std::string & record, int desiredFieldNumber )
d465 1
a465 1
  virtual void testRecordFormat(std::string rec, unsigned int recNum) const;
d469 1
a469 1
    insertField( std::string fieldName );
d472 1
a472 1
  //bool fieldExists(std::string & fileName) const;
d477 1
a477 1
    fieldPos( const std::string & fieldNam )
d487 1
a487 1
  SCOcsvFormatFile(std::string filename);
d511 1
a511 1
  std::vector<std::string> fields_;
d513 1
a513 1
  std::map<std::string,int> fieldPosDict_;
@


1.5
log
@Modifications to add mtmPriority, featurePriority, and loosePartPriority
@
text
@d292 1
a292 1
    fieldOnRecord ( std::string record, std::string fieldName )
d455 1
a455 1
    fieldOnRecord ( std::string record, std::string fieldName )
d458 1
a458 1
    fieldOnRecord( std::string record, int desiredFieldNumber )
@


1.4
log
@Updated to set aquireCost of features and looseParts using scale factors
@
text
@d183 2
d215 1
a215 1
  unsigned int numRecords() const;
d263 2
a265 2

  virtual void initializeFileData();
@


1.3
log
@updated to add eso2Problem class and eso2 main program
@
text
@d204 1
a204 1
class SCO_DECLSPEC SCOfile {
d328 1
@


1.2
log
@Modified to print record number correctly in warning messages in files with comments
@
text
@d181 2
@


1.1
log
@Initial revision
@
text
@d328 2
d362 2
a363 1
  std::map<std::string,int> fileDict_;
@


1.1.1.1
log
@Initial Import
@
text
@@
