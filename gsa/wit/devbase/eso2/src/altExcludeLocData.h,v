head	1.7;
access;
symbols
	abandoningEtnParts:1.5
	beforeEtnParts:1.4;
locks; strict;
comment	@ * @;


1.7
date	2005.01.29.18.27.37;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.21.14.21.11;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.19.19.43.35;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.15.20.23.30;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.29.19.16.00;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.16.15.11.08;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.09.19.34.10;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.7
log
@changed code to use std::string rather than BCP_string
@
text
@#ifndef ESO2_altExcludeLocData_h
#define ESO2_altExcludeLocData_h

#include "scoFile.h"


class ESO2altExcludeLocData : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(part);
  getFieldH(altPart);
  getFieldH(excludeLoc);
  
  // preferred constructor
  ESO2altExcludeLocData(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("feature");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    hasHeaderRecord(3);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & part, 
    const std::string & altPart, 
    const std::string & excludeLoc ) 
  {
    //char periodchar[100];
    //sprintf( periodchar, "%d", period );
    std::string retVal = part+"$+&"+altPart+"$+&"+excludeLoc;
    return retVal;
  };
  
  // destructor
  ~ESO2altExcludeLocData(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ESO2altExcludeLocData file("../data/example1/altExcludeLocData.csv");
    
    // Test reading first record

    assert( file.part(0)=="p1");
    assert( file.altPart(0) == "altPart1" );
    assert( file.excludeLoc(0) == "roch" );
    
    assert( file.excludeLoc(key("p1","altPart1","roch"))=="roch");
   
  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      part(recNum),
      altPart(recNum),
      excludeLoc(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ESO2altExcludeLocData();
  
  // copy constructor  -- don't use!
  ESO2altExcludeLocData( const ESO2altExcludeLocData& source );
  
  // assignment operator -- don't use!
  ESO2altExcludeLocData&
  operator=(const ESO2altExcludeLocData& rhs);

  
};



class ESO2altExcludeLocDataIterator : public SCOfileIterator {
public:
    
  // Fields
  getFieldFileWithIteratorH(part);
  getFieldFileWithIteratorH(altPart);
  getFieldFileWithIteratorH(excludeLoc);
  
  
  // preferred constructor
  ESO2altExcludeLocDataIterator(const ESO2altExcludeLocData & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ESO2altExcludeLocDataIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ESO2altExcludeLocData file("../data/example1/altExcludeLocData.csv");
    ESO2altExcludeLocDataIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.part()=="p1");
        assert( fileIter.altPart() == "altPart1" );
        assert( fileIter.excludeLoc() == "roch" );
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ESO2altExcludeLocDataIterator();
  
  // copy constructor  -- don't use!
  ESO2altExcludeLocDataIterator( const ESO2altExcludeLocDataIterator& source );
  
  // assignment operator -- don't use!
  ESO2altExcludeLocDataIterator&
  operator=(const ESO2altExcludeLocDataIterator& rhs);

  
};
#endif
@


1.6
log
@Code restored to state before etnParts were added
@
text
@d16 1
a16 1
  ESO2altExcludeLocData(BCP_string filename)
d31 4
a34 4
  static BCP_string key( 
    const BCP_string & part, 
    const BCP_string & altPart, 
    const BCP_string & excludeLoc ) 
d38 1
a38 1
    BCP_string retVal = part+"$+&"+altPart+"$+&"+excludeLoc;
d63 1
a63 1
  virtual BCP_string key( unsigned int recNum ) const
d65 1
a65 1
    BCP_string retVal = key(
@


1.5
log
@Code updated to read new format. (does not yet implement function supported by new format)
@
text
@a11 1
  getIntFieldH(partEtnFlag);
a12 1
  getIntFieldH(altPartEtnFlag);
d26 1
a26 1
    hasHeaderRecord(5);
a32 1
    int partEtnFlag,
a33 1
    int altPartEtnFlag,
d36 3
a38 5
    char etn[100];
    sprintf( etn, "%d", partEtnFlag );
    char altEtn[100];
    sprintf( altEtn, "%d", altPartEtnFlag );
    BCP_string retVal = part+"$+&"+altPart+"$+&"+excludeLoc+"$+&"+etn+"$+&"+altEtn;
a52 1
    assert( file.partEtnFlagAsInt(0)==1);
a53 1
    assert( file.altPartEtnFlagAsInt(0)==1);
d56 1
a56 1
    assert( file.excludeLoc(key("p1",1,"altPart1",1,"roch"))=="roch");
a66 1
      partEtnFlagAsInt(recNum),
a67 1
      altPartEtnFlagAsInt(recNum),
a93 1
  getIntFieldFileWithIteratorH(partEtnFlag);
a94 1
  getIntFieldFileWithIteratorH(altPartEtnFlag);
a117 1
        assert( fileIter.partEtnFlagAsInt()==1);
a118 1
        assert( fileIter.altPartEtnFlagAsInt()==1);
@


1.4
log
@Changed partOrFeature datafile field to be part
@
text
@d12 1
d14 1
d28 1
a28 1
    hasHeaderRecord(3);
d35 1
d37 1
d40 5
a44 3
    //char periodchar[100];
    //sprintf( periodchar, "%d", period );
    BCP_string retVal = part+"$+&"+altPart+"$+&"+excludeLoc;
d59 1
d61 1
d64 1
a64 1
    assert( file.excludeLoc(key("p1","altPart1","roch"))=="roch");
d75 1
d77 1
d104 1
d106 1
d130 1
d132 1
@


1.3
log
@Replaced std::string with BCP_string to work around VAC compiler problem
@
text
@d11 1
a11 1
  getFieldH(partOrFeature);
d32 1
a32 1
    const BCP_string & partOrFeature, 
d38 1
a38 1
    BCP_string retVal = partOrFeature+"$+&"+altPart+"$+&"+excludeLoc;
d52 1
a52 1
    assert( file.partOrFeature(0)=="p1");
d66 1
a66 1
      partOrFeature(recNum),
d93 1
a93 1
  getFieldFileWithIteratorH(partOrFeature);
d117 1
a117 1
        assert( fileIter.partOrFeature()=="p1");
@


1.2
log
@Added code for setting alts
@
text
@d16 1
a16 1
  ESO2altExcludeLocData(std::string filename)
d31 4
a34 4
  static std::string key( 
    const std::string & partOrFeature, 
    const std::string & altPart, 
    const std::string & excludeLoc ) 
d38 1
a38 1
    std::string retVal = partOrFeature+"$+&"+altPart+"$+&"+excludeLoc;
d63 1
a63 1
  virtual std::string key( unsigned int recNum ) const
d65 1
a65 1
    std::string retVal = key(
@


1.1
log
@added code to read alt files.
@
text
@d33 2
a34 1
    const std::string & altPart ) 
d38 1
a38 1
    std::string retVal = partOrFeature+"$+&"+altPart;
d56 1
a56 1
    assert( file.excludeLoc(key("p1","altPart1"))=="roch");
d67 2
a68 1
      altPart(recNum));
@

