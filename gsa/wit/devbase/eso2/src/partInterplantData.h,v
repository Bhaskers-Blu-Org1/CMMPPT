head	1.5;
access;
symbols
	abandoningEtnParts:1.4
	beforeEtnParts:1.4;
locks; strict;
comment	@ * @;


1.5
date	2005.01.29.18.27.38;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.29.19.16.02;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.04.22.06.13;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.30.19.04.24;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.20.18.10.41;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.5
log
@changed code to use std::string rather than BCP_string
@
text
@#ifndef ESO2_partInterplantData_h
#define ESO2_partInterplantData_h

#include "scoFile.h"


class ESO2partInterplantData : public SCOcsvFormatFile {
public:

  // Fields;
  getFieldH(srcLoc);
  getFieldH(destLoc);
  getFloatFieldH(defaultMoveCost);
  getFloatFieldH(defaultMoveTime);
  
  // preferred constructor
  ESO2partInterplantData(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("feature");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    hasHeaderRecord(4);
    commentRecords(true);
  };

  float defaultMoveCostAsFloat(  
    const std::string & srcLoc, 
    const std::string & destLoc) const
  {
    return defaultMoveCostAsFloat(key(srcLoc,destLoc));
  }

  float defaultMoveTimeAsFloat(  
    const std::string & srcLoc, 
    const std::string & destLoc) const
  {
    return defaultMoveTimeAsFloat(key(srcLoc,destLoc));
  }

  bool keyExists(  
    const std::string & srcLoc, 
    const std::string & destLoc) const
  {
    return SCOfile::keyExists(key(srcLoc,destLoc));
  }

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & srcLoc, 
    const std::string & destLoc ) 
  {
    std::string retVal = 
      srcLoc+"$+&"
      +destLoc+"$+&";
    return retVal;
  };
  
  // destructor
  ~ESO2partInterplantData(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ESO2partInterplantData file("../data/example1/partInterplantData.csv");
    
    // Test reading first record

    assert( file.srcLoc(0) == "pok" );
    assert( file.destLoc(0) == "wat" );
    assert( file.defaultMoveCostAsFloat(0) == 3.0f );
    assert( file.defaultMoveTimeAsFloat(0) == 2.0f );

    std::string k = file.key("wat","pok");
    assert( file.srcLoc(k) == "wat" );
    assert( file.destLoc(k) == "pok" );
    assert( file.defaultMoveCostAsFloat(k) == 3.0f );
    assert( file.defaultMoveTimeAsFloat(k) == 2.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      srcLoc(recNum),
      destLoc(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ESO2partInterplantData();
  
  // copy constructor  -- don't use!
  ESO2partInterplantData( const ESO2partInterplantData& source );
  
  // assignment operator -- don't use!
  ESO2partInterplantData&
  operator=(const ESO2partInterplantData& rhs);

  
};



class ESO2partInterplantDataIterator : public SCOfileIterator {
public:
    
  // Fields
  getFieldFileWithIteratorH(srcLoc);
  getFieldFileWithIteratorH(destLoc);
  getFloatFieldFileWithIteratorH(defaultMoveCost);
  getFloatFieldFileWithIteratorH(defaultMoveTime);

  
  // preferred constructor
  ESO2partInterplantDataIterator(const ESO2partInterplantData & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ESO2partInterplantDataIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ESO2partInterplantData file("../data/example1/partInterplantData.csv");
    ESO2partInterplantDataIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.srcLoc() == "pok" );
        assert( fileIter.destLoc() == "wat" );
        assert( fileIter.defaultMoveCostAsFloat() == 3.0f );
        assert( fileIter.defaultMoveTimeAsFloat() == 2.0f );
          
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ESO2partInterplantDataIterator();
  
  // copy constructor  -- don't use!
  ESO2partInterplantDataIterator( const ESO2partInterplantDataIterator& source );
  
  // assignment operator -- don't use!
  ESO2partInterplantDataIterator&
  operator=(const ESO2partInterplantDataIterator& rhs);

  
};
#endif
@


1.4
log
@Replaced std::string with BCP_string to work around VAC compiler problem
@
text
@d17 1
a17 1
  ESO2partInterplantData(BCP_string filename)
d32 2
a33 2
    const BCP_string & srcLoc, 
    const BCP_string & destLoc) const
d39 2
a40 2
    const BCP_string & srcLoc, 
    const BCP_string & destLoc) const
d46 2
a47 2
    const BCP_string & srcLoc, 
    const BCP_string & destLoc) const
d53 3
a55 3
  static BCP_string key( 
    const BCP_string & srcLoc, 
    const BCP_string & destLoc ) 
d57 1
a57 1
    BCP_string retVal = 
d78 1
a78 1
    BCP_string k = file.key("wat","pok");
d89 1
a89 1
  virtual BCP_string key( unsigned int recNum ) const
d91 1
a91 1
    BCP_string retVal = key(
@


1.3
log
@updated unitTest to do something useful.
fixed problems with prunning. Now works for all testCases.
@
text
@d17 1
a17 1
  ESO2partInterplantData(std::string filename)
d32 2
a33 2
    const std::string & srcLoc, 
    const std::string & destLoc) const
d39 2
a40 2
    const std::string & srcLoc, 
    const std::string & destLoc) const
d46 2
a47 2
    const std::string & srcLoc, 
    const std::string & destLoc) const
d53 3
a55 3
  static std::string key( 
    const std::string & srcLoc, 
    const std::string & destLoc ) 
d57 1
a57 1
    std::string retVal = 
d78 1
a78 1
    std::string k = file.key("wat","pok");
d89 1
a89 1
  virtual std::string key( unsigned int recNum ) const
d91 1
a91 1
    std::string retVal = key(
@


1.2
log
@File changes to allow all parts and mtms defined at a srcLoc to have interplant move operations added.
@
text
@d75 2
a76 2
    assert( file.defaultMoveCostAsFloat(0) == 2.0f );
    assert( file.defaultMoveTimeAsFloat(0) == 1.0f );
d81 1
a81 1
    assert( file.defaultMoveCostAsFloat(k) == 1.0f );
d145 2
a146 2
        assert( fileIter.defaultMoveCostAsFloat() == 2.0f );
        assert( fileIter.defaultMoveTimeAsFloat() == 1.0f );
@


1.1
log
@modifications to accomodate 2/18 file format changes
@
text
@d10 1
a10 2
  // Fields
  getFieldH(part);
d13 2
a14 3
  getIntFieldH(period);
  getFloatFieldH(moveCost);
  getFloatFieldH(moveTime);
d27 1
a27 1
    hasHeaderRecord(6);
d31 21
a53 1
    const std::string & part, 
d55 1
a55 2
    const std::string & destLoc, 
    int period ) 
a56 2
    char periodchar[100];
    sprintf( periodchar, "%d", period );
d58 2
a59 4
      part+"$+&"
      +srcLoc+"$+&"
      +destLoc+"$+&"
      +periodchar;
a72 1
    assert( file.part(0)=="p2");
d75 2
a76 3
    assert( file.periodAsInt(0) == 0 );
    assert( file.moveCostAsFloat(0) == 2.0f );
    assert( file.moveTimeAsFloat(0) == 1.0f );
d78 1
a78 2
    std::string k = file.key("p2","wat","pok",2);
    assert( file.part(k)=="p2");
d81 2
a82 3
    assert( file.periodAsInt(k) == 2 );
    assert( file.moveCostAsFloat(k) == 1.0f );
    assert( file.moveTimeAsFloat(k) == 2.0f );
a91 1
      part(recNum),
d93 1
a93 2
      destLoc(recNum),
      periodAsInt(recNum) );
a117 1
  getFieldFileWithIteratorH(part);
d120 2
a121 3
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(moveCost);
  getFloatFieldFileWithIteratorH(moveTime);
a142 1
        assert( fileIter.part()=="p2");
d145 2
a146 3
        assert( fileIter.periodAsInt() == 0 );
        assert( fileIter.moveCostAsFloat() == 2.0f );
        assert( fileIter.moveTimeAsFloat() == 1.0f );
@

