head	1.7;
access;
symbols
	abandoningEtnParts:1.4
	beforeEtnParts:1.3;
locks; strict;
comment	@ * @;


1.7
date	2005.01.29.18.27.36;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.21.17.23.50;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.21.14.21.11;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.19.19.43.35;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.15.20.23.30;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.29.19.16.00;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.09.19.34.10;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.7
log
@changed code to use std::string rather than BCP_string
@
text
@#ifndef ESO2_altData_h
#define ESO2_altData_h

#include "scoFile.h"


class ESO2altData : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(part);
  getFieldH(altPart);
  getFieldH(loc);
  getFloatFieldH(altConvCost);
  getFloatFieldH(altConvTime);
  
  // preferred constructor
  ESO2altData(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("feature");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    hasHeaderRecord(5);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & part, 
    const std::string & altPart, 
    const std::string & loc ) 
  {
    //char periodchar[100];
    //sprintf( periodchar, "%d", period );
    std::string retVal = part+"$+&"+altPart+"$+&"+loc;
    return retVal;
  };
  
  // destructor
  ~ESO2altData(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ESO2altData file("../data/example1/altData.csv");
    
    // Test reading first record

    assert( file.part(0)=="p1");
    assert( file.altPart(0) == "altPart1" );
    assert( file.loc(0) == "WilyWonkaChocolateFactory" );
    assert( file.altConvCostAsFloat(0) == 1.0f );
    assert( file.altConvTimeAsFloat(0) == 2.0f );

    
    assert( file.altConvCostAsFloat(key("p1","altPart1","WilyWonkaChocolateFactory"))==1.0f);
   
  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      part(recNum),
      altPart(recNum),
      loc(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ESO2altData();
  
  // copy constructor  -- don't use!
  ESO2altData( const ESO2altData& source );
  
  // assignment operator -- don't use!
  ESO2altData&
  operator=(const ESO2altData& rhs);

  
};



class ESO2altDataIterator : public SCOfileIterator {
public:
    
  // Fields
  getFieldFileWithIteratorH(part);
  getFieldFileWithIteratorH(altPart);
  getFieldFileWithIteratorH(loc);
  getFloatFieldFileWithIteratorH(altConvCost);
  getFloatFieldFileWithIteratorH(altConvTime);
  
  
  // preferred constructor
  ESO2altDataIterator(const ESO2altData & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ESO2altDataIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ESO2altData file("../data/example1/altData.csv");
    ESO2altDataIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.part()=="p1");
        assert( fileIter.altPart() == "altPart1" );
        assert( fileIter.loc() == "WilyWonkaChocolateFactory" );
        assert( fileIter.altConvCostAsFloat() == 1.0f );
        assert( fileIter.altConvTimeAsFloat() == 2.0f );
          
      }
      recNo++;
    }
    
  }

private:
  
  
  // default constructor -- don't use!
  ESO2altDataIterator();
  
  // copy constructor  -- don't use!
  ESO2altDataIterator( const ESO2altDataIterator& source );
  
  // assignment operator -- don't use!
  ESO2altDataIterator&
  operator=(const ESO2altDataIterator& rhs);

  
};
#endif
@


1.6
log
@Changes to add loc to altData file.
Changes to start implementing PIP (pegging).
@
text
@d18 1
a18 1
  ESO2altData(BCP_string filename)
d33 4
a36 4
  static BCP_string key( 
    const BCP_string & part, 
    const BCP_string & altPart, 
    const BCP_string & loc ) 
d40 1
a40 1
    BCP_string retVal = part+"$+&"+altPart+"$+&"+loc;
d68 1
a68 1
  virtual BCP_string key( unsigned int recNum ) const
d70 1
a70 1
    BCP_string retVal = key(
@


1.5
log
@Code restored to state before etnParts were added
@
text
@d13 1
d28 1
a28 1
    hasHeaderRecord(4);
d35 2
a36 1
    const BCP_string & altPart ) 
d40 1
a40 1
    BCP_string retVal = part+"$+&"+altPart;
d56 1
d61 1
a61 1
    assert( file.altConvCostAsFloat(key("p1","altPart1"))==1.0f);
d72 2
a73 1
      altPart(recNum) );
d100 1
d126 1
@


1.4
log
@Code updated to read new format. (does not yet implement function supported by new format)
@
text
@a11 1
  getIntFieldH(partEtnFlag);
a12 1
  getIntFieldH(altPartEtnFlag);
d27 1
a27 1
    hasHeaderRecord(6);
d33 2
a34 4
    const BCP_string & part,
    int partEtnFlag,
    const BCP_string & altPart,
    int altPartEtnFlag) 
d36 3
a38 5
    char etn[100];
    sprintf( etn, "%d", partEtnFlag );
    char altEtn[100];
    sprintf( altEtn, "%d", altPartEtnFlag );
    BCP_string retVal = part+"$+&"+altPart+"$+&"+etn+"$+&"+altEtn;
a52 1
    assert( file.partEtnFlagAsInt(0) == 1 );
a53 1
    assert( file.altPartEtnFlagAsInt(0) == 1 );
d58 1
a58 1
    assert( file.altConvCostAsFloat(key("p1",1,"altPart1",1))==1.0f);
d69 1
a69 3
      partEtnFlagAsInt(recNum),
      altPart(recNum),
      altPartEtnFlagAsInt(recNum));
a94 1
  getIntFieldFileWithIteratorH(partEtnFlag);
a95 1
  getIntFieldFileWithIteratorH(altPartEtnFlag);
a119 1
        assert( fileIter.partEtnFlagAsInt()==1);
a120 1
        assert( fileIter.altPartEtnFlagAsInt()==1);
@


1.3
log
@Changed partOrFeature datafile field to be part
@
text
@d12 1
d14 1
d29 1
a29 1
    hasHeaderRecord(4);
d35 4
a38 2
    const BCP_string & part, 
    const BCP_string & altPart ) 
d40 5
a44 3
    //char periodchar[100];
    //sprintf( periodchar, "%d", period );
    BCP_string retVal = part+"$+&"+altPart;
d59 1
d61 1
d66 1
a66 1
    assert( file.altConvCostAsFloat(key("p1","altPart1"))==1.0f);
d77 3
a79 1
      altPart(recNum) );
d105 1
d107 1
d132 1
d134 1
@


1.2
log
@Replaced std::string with BCP_string to work around VAC compiler problem
@
text
@d11 1
a11 1
  getFieldH(partOrFeature);
d33 1
a33 1
    const BCP_string & partOrFeature, 
d38 1
a38 1
    BCP_string retVal = partOrFeature+"$+&"+altPart;
d52 1
a52 1
    assert( file.partOrFeature(0)=="p1");
d68 1
a68 1
      partOrFeature(recNum),
d94 1
a94 1
  getFieldFileWithIteratorH(partOrFeature);
d119 1
a119 1
        assert( fileIter.partOrFeature()=="p1");
@


1.1
log
@added code to read alt files.
@
text
@d17 1
a17 1
  ESO2altData(std::string filename)
d32 3
a34 3
  static std::string key( 
    const std::string & partOrFeature, 
    const std::string & altPart ) 
d38 1
a38 1
    std::string retVal = partOrFeature+"$+&"+altPart;
d65 1
a65 1
  virtual std::string key( unsigned int recNum ) const
d67 1
a67 1
    std::string retVal = key(
@

