head	1.6;
access;
symbols
	abandoningEtnParts:1.4
	beforeEtnParts:1.3;
locks; strict;
comment	@ * @;


1.6
date	2005.01.29.18.27.38;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.21.14.21.12;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.19.19.43.35;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.29.19.16.01;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.12.01.21.18;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.28.01.25.08;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.6
log
@changed code to use std::string rather than BCP_string
@
text
@#ifndef ESO2_LoosePartData_h
#define ESO2_LoosePartData_h

#include "scoFile.h"


class ESO2loosePartData : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(part);
  getFieldH(plantLoc);
  getIntFieldH(period);
  getFloatFieldH(supply);
  getFloatFieldH(wfmv);
  
  // preferred constructor
  ESO2loosePartData(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    //insertField("loosePart");
    //insertField("plantLoc");
    //insertField("period");
    //insertField("supply");
    //insertField("wfmv");
    hasHeaderRecord(5);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & loosePart, 
    const std::string & plantLoc, 
    int period ) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = loosePart+"$+&"+plantLoc+"$+&"+periodchar;
    return retVal;
  };
  
  // destructor
  ~ESO2loosePartData(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    ESO2loosePartData file("../data/example1/loosePartData.csv");
    
    // Test reading first record

    std::string loosePart = file.part(0);
    assert( loosePart=="f1");
    assert( file.plantLoc(0) == "wat" );
    assert( file.periodAsInt(0) == 1 );
    assert( file.supplyAsFloat(0) == 2.0f );
    assert( file.wfmvAsFloat(0) == 2.0f );

    assert( file.part(1) == "f1" );
    assert( file.plantLoc(1) == "wat" );
    assert( file.periodAsInt(1) == 2 );
    assert( file.supplyAsFloat(1) == 1.0f );
    assert( file.wfmvAsFloat(1) == 1.0f );
    
    // Test reading record by key    
    assert( file.wfmvAsFloat(file.key("f1","wat",3)) == 0.0f );
    assert( file.supplyAsFloat(file.key("f1","wat",3)) == 0.0f );


  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      part(recNum),
      plantLoc(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  ESO2loosePartData();
  
  // copy constructor  -- don't use!
  ESO2loosePartData( const ESO2loosePartData& source );
  
  // assignment operator -- don't use!
  ESO2loosePartData&
  operator=(const ESO2loosePartData& rhs);

  
};



class ESO2loosePartDataIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(part);
  getFieldFileWithIteratorH(plantLoc);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(supply);
  getFloatFieldFileWithIteratorH(wfmv);

  
  // preferred constructor
  ESO2loosePartDataIterator(const ESO2loosePartData & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~ESO2loosePartDataIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    ESO2loosePartData file("../data/example1/loosePartData.csv");
    ESO2loosePartDataIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.part() == "f1" );
        assert( fileIter.plantLoc() == "wat" );
        assert( fileIter.periodAsInt() == 1 );
        assert( fileIter.supplyAsFloat() == 2.0f );
        assert( fileIter.wfmvAsFloat() == 2.0f );

        //assert( fileIter.recNum() == 9 );
          
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==25);
  }

private:
  
  
  // default constructor -- don't use!
  ESO2loosePartDataIterator();
  
  // copy constructor  -- don't use!
  ESO2loosePartDataIterator( const ESO2loosePartDataIterator& source );
  
  // assignment operator -- don't use!
  ESO2loosePartDataIterator&
  operator=(const ESO2loosePartDataIterator& rhs);

  
};
#endif
@


1.5
log
@Code restored to state before etnParts were added
@
text
@d18 1
a18 1
  ESO2loosePartData(BCP_string filename)
d33 3
a35 3
  static BCP_string key( 
    const BCP_string & loosePart, 
    const BCP_string & plantLoc, 
d40 1
a40 1
    BCP_string retVal = loosePart+"$+&"+plantLoc+"$+&"+periodchar;
d54 1
a54 1
    BCP_string loosePart = file.part(0);
d77 1
a77 1
  virtual BCP_string key( unsigned int recNum ) const
d79 1
a79 1
    BCP_string retVal = key(
@


1.4
log
@Code updated to read new format. (does not yet implement function supported by new format)
@
text
@a11 1
  getIntFieldH(etnFlag);
d28 1
a28 1
    hasHeaderRecord(6);
a34 1
    int etnFlag,
a37 2
    char etn[100];
    sprintf( etn, "%d", etnFlag );
d40 1
a40 1
    BCP_string retVal = loosePart+"$+&"+plantLoc+"$+&"+periodchar+"$+&"+etn;
a55 1
    assert( file.etnFlagAsInt(0) == 1 );
a61 1
    assert( file.etnFlagAsInt(1) == 1 );
d68 2
a69 2
    assert( file.wfmvAsFloat(file.key("f1",1,"wat",3)) == 0.0f );
    assert( file.supplyAsFloat(file.key("f1",1,"wat",3)) == 0.0f );
a80 1
      etnFlagAsInt(recNum),
a107 1
  getIntFieldFileWithIteratorH(etnFlag);
a133 1
        assert( fileIter.etnFlagAsInt() == 1 );
@


1.3
log
@Replaced std::string with BCP_string to work around VAC compiler problem
@
text
@d12 1
d29 1
a29 1
    hasHeaderRecord(5);
d36 1
d40 2
d44 1
a44 1
    BCP_string retVal = loosePart+"$+&"+plantLoc+"$+&"+periodchar;
d60 1
d67 1
d74 2
a75 2
    assert( file.wfmvAsFloat(file.key("f1","wat",3)) == 0.0f );
    assert( file.supplyAsFloat(file.key("f1","wat",3)) == 0.0f );
d87 1
d115 1
d142 1
@


1.2
log
@Updated to change 1 to be the first period.
Added additional test to see if objValue has changed
@
text
@d18 1
a18 1
  ESO2loosePartData(std::string filename)
d33 3
a35 3
  static std::string key( 
    const std::string & loosePart, 
    const std::string & plantLoc, 
d40 1
a40 1
    std::string retVal = loosePart+"$+&"+plantLoc+"$+&"+periodchar;
d54 1
a54 1
    std::string loosePart = file.part(0);
d77 1
a77 1
  virtual std::string key( unsigned int recNum ) const
d79 1
a79 1
    std::string retVal = key(
@


1.1
log
@Added loosePart data file
@
text
@d57 1
a57 1
    assert( file.periodAsInt(0) == 0 );
d63 1
a63 1
    assert( file.periodAsInt(1) == 1 );
d135 1
a135 1
        assert( fileIter.periodAsInt() == 0 );
@

