head	1.5;
access;
symbols
	abandoningEtnParts:1.4
	beforeEtnParts:1.4
	eso2InitialFileFormats:1.2;
locks; strict;
comment	@ * @;


1.5
date	2005.01.29.18.27.38;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2003.10.29.19.16.01;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.17.01.26.48;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.06.20.06.04;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.04.04.52.37;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.5
log
@changed code to use std::string rather than BCP_string
@
text
@#ifndef ESO2_GLOBALATTRDATA_h
#define ESO2_GLOBALATTRDATA_h

#include "scoFile.h"


class ESO2globalAttrData : public SCOcsvFormatFile {
public:
  
  // fields  
  getFieldH(attrName);  
  getFieldH(attrValue);
  
  // preferred constructor
  ESO2globalAttrData(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(2);
    commentRecords(true);
  };
  
  // destructor
  ~ESO2globalAttrData()  
  {
    // Nothing to do here
  }
  
  // Self-test
  static void test()
  {
    
    ESO2globalAttrData file("../data/example1/globalAttrData.csv");
    
    assert( file.attrValue("title") == "Sample Title" );
    assert( file.fieldAsString("title","attrValue") == "Sample Title" );
    assert( file.fieldAsInt("nPeriods","attrValue") == 4 );
    assert( file.fieldAsInt("nWfmvScaleFactors","attrValue") == 4 );
    assert( file.fieldAsFloat("wfmvScaleFactor1","attrValue") == 1. );
    assert( file.fieldAsFloat("wfmvScaleFactor2","attrValue") == 0.8f );
    assert( file.fieldAsFloat("wfmvScaleFactor3","attrValue") == 0.6f );
    assert( file.fieldAsFloat("wfmvScaleFactor4","attrValue") == 0.4f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
    key( unsigned recNum ) const
  {
    std::string retVal = fieldAsString(recNum,"attrName");
    return retVal;
  }
  
private:
  
  
  // default constructor -- don't use!
  ESO2globalAttrData();
  
  // copy constructor  -- don't use!
  ESO2globalAttrData( const ESO2globalAttrData& source );
  
  // assignment operator -- don't use!
  ESO2globalAttrData&
  operator=(const ESO2globalAttrData& rhs);

  
};


#if 0
class ESO2globalAttrDataIterator : public SCOfileIterator {
public:
  
  // fields
  //std::string locName() const;

  // preferred constructor
  ESO2globalAttrDataIterator(const ESO2globalAttrData &);
  
  // destructor
  ~ESO2globalAttrDataIterator();
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  ESO2globalAttrDataIterator();
  
  // copy constructor  -- don't use!
  ESO2globalAttrDataIterator( const ESO2globalAttrDataIterator& source );
  
  // assignment operator -- don't use!
  ESO2globalAttrDataIterator&
  operator=(const ESO2globalAttrDataIterator& rhs);

  
};
#endif
#endif@


1.4
log
@Replaced std::string with BCP_string to work around VAC compiler problem
@
text
@d15 1
a15 1
  ESO2globalAttrData(BCP_string filename)
d51 1
a51 1
    BCP_string
d54 1
a54 1
    BCP_string retVal = fieldAsString(recNum,"attrName");
d80 1
a80 1
  //BCP_string locName() const;
@


1.3
log
@Changes to implement period1SupplyPerishabilityLimit
@
text
@d15 1
a15 1
  ESO2globalAttrData(std::string filename)
d51 1
a51 1
    std::string
d54 1
a54 1
    std::string retVal = fieldAsString(recNum,"attrName");
d80 1
a80 1
  //std::string locName() const;
@


1.2
log
@Updated to have 4 periods of data in all data files
@
text
@d40 4
a43 4
    assert( file.fieldAsFloat("wfmvScaleFactor0","attrValue") == 1. );
    assert( file.fieldAsFloat("wfmvScaleFactor1","attrValue") == 0.8f );
    assert( file.fieldAsFloat("wfmvScaleFactor2","attrValue") == 0.6f );
    assert( file.fieldAsFloat("wfmvScaleFactor3","attrValue") == 0.4f );
@


1.1
log
@added code for globalAttrData files
@
text
@d38 1
a38 1
    assert( file.fieldAsInt("nPeriods","attrValue") == 3 );
@

