head	1.2;
access;
symbols
	sce_5_01_20080919:1.2
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndWitRw-branch:1.1.1.1.0.12
	Root-of-EndWitRw:1.1.1.1
	RwToStl-branch:1.1.1.1.0.10
	Root-of-RwToStl:1.1.1.1
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.01.15.19.36.23;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.24.15.35.14;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.24.15.35.14;	author wit;	state Exp;
branches
	1.1.1.1.12.1;
next	;

1.1.1.1.12.1
date	2003.01.09.13.11.50;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@commiting to main branch witutil, scenario, and sce code which removes RW
@
text
@// file: allocMrp.h
// author:  dan/tom

#ifndef  WUTLALLOCATEDMRP_H
#define  WUTLALLOCATEDMRP_H

#include <stdlib.h>
#include <string>

// forward declarations
class WitRun;


class WUtlAllocatedMrp {  
public:
  
  // compute the allocated MRP
  virtual
  int
  computeAndPopulate(const int version);

  // print the Allocated MRP in generic format
  virtual
  int
  print(const char * filename);

    
  // general constructor ... takes a populated witRun, and a separator character
  WUtlAllocatedMrp(WitRun * const theWitRun, const char separatorChar);

  // destructor
  virtual
  ~WUtlAllocatedMrp();

  int 
  state();

  int 
  version();
 
  int 
  nPeriods();

  char
  separatorChar();

protected:
  // these methods make the witRuns accessible to any sub classes
  WitRun *
  witRun();

  WitRun *
  localWitRun();

private:

  // copy constructor
  WUtlAllocatedMrp(const WUtlAllocatedMrp& source);
  
  // assignment operator
  WUtlAllocatedMrp&
  operator=(const WUtlAllocatedMrp& rhs);
  
  // default constructor
  WUtlAllocatedMrp();
  
  
  
private:
  WitRun *  theWitRun_;
  WitRun * localWitRun_;
  char separatorChar_;
  int state_;
  int version_;
  int nPeriods_;  
};
#endif
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
#include <rw/cstring.h>
@


1.1.1.1
log
@Import witutil
@
text
@@


1.1.1.1.12.1
log
@Final commit for removing Roguewave stuff
@
text
@d8 1
a8 1
#include <string>
@

