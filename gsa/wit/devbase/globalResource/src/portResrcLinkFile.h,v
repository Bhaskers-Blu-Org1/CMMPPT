head	1.1;
branch	1.1.1;
access;
symbols
	beforeTiersAdded:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef GR_PORTRESRCLINKFILE_h
#define GR_PORTRESRCLINKFILE_h

#include "scoFile.h"


class GRportResrcLinkFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(port);
  getFieldH(portLoc);
  getFieldH(skill);
  getFieldH(resrcLoc);
  getFieldH(band);
  getFieldH(role);
  getFieldH(usageLoc);

  bool remoteSite(const std::string & key) const {
    std::string ul = usageLoc(key);
    return ul=="RemoteSite";
  };
  bool homeSite(const std::string & key) const {
    return !remoteSite(key);
  }
  bool remoteSite(int recNum) const {
    std::string ul = usageLoc(recNum);
    return ul=="RemoteSite";
  };
  bool homeSite(int recNum) const {
    return !remoteSite(recNum);
  }
  
  // preferred constructor
  GRportResrcLinkFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
#if 1   
    insertField("port");  
    insertField("portLoc"); 
    insertField("skill"); 
    insertField("resrcLoc"); 
    insertField("band"); 
    insertField("role");  
    insertField("usageLoc"); 
#else
    hasHeaderRecord(7);
#endif
  };
  
  // destructor
  ~GRportResrcLinkFile(){/*nothing to do here*/};
  
  // Self-test
  static void test();
  
protected:
  
  std::string makeKey( 
    const std::string & port,
    const std::string & portLoc,
    const std::string & skill,
    const std::string & resrcLoc,
    const std::string & band,
    const std::string & role,
    const std::string & usageLoc) const
  {
    std::string retVal = port
      +"+"+ portLoc
      +"+"+ skill
      +"+"+ resrcLoc
      +"+"+ band
      +"+"+ role
      +"+"+ usageLoc;
    return retVal;
  }

  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = makeKey(port(recNum),portLoc(recNum),skill(recNum),resrcLoc(recNum),band(recNum),role(recNum),usageLoc(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  GRportResrcLinkFile();
  
  // copy constructor  -- don't use!
  GRportResrcLinkFile( const GRportResrcLinkFile& source );
  
  // assignment operator -- don't use!
  GRportResrcLinkFile&
  operator=(const GRportResrcLinkFile& rhs);

  
};



class GRportResrcLinkFileIterator : public SCOfileIterator {
public:
  
  // fields
  getFieldFileWithIteratorH(port);
  getFieldFileWithIteratorH(portLoc);
  getFieldFileWithIteratorH(skill);
  getFieldFileWithIteratorH(resrcLoc);
  getFieldFileWithIteratorH(band);
  getFieldFileWithIteratorH(role);
  getFieldFileWithIteratorH(usageLoc);

  bool remoteSite() const {
    std::string ul = usageLoc();
    return ul=="RemoteSite";
  };
  bool homeSite() const{
    return !remoteSite();
  }
 
  
  // preferred constructor
  GRportResrcLinkFileIterator(const GRportResrcLinkFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~GRportResrcLinkFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  GRportResrcLinkFileIterator();
  
  // copy constructor  -- don't use!
  GRportResrcLinkFileIterator( const GRportResrcLinkFileIterator& source );
  
  // assignment operator -- don't use!
  GRportResrcLinkFileIterator&
  operator=(const GRportResrcLinkFileIterator& rhs);

  
};
#endif@


1.1.1.1
log
@globalResource import
@
text
@@
