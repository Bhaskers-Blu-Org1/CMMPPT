head	1.7;
access;
symbols
	beforeTiersAdded:1.6
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2002.09.05.13.19.22;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.12.01.47.28;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.09.20.41.35;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.05.01.08.04;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.28.15.41.22;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.06.21.15.43;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.7
log
@changes to accomodate tiers
@
text
@#ifndef GRproblem_h
#define GRproblem_h

#include <string>
#include <map>
#include "appData.h"


class WitRun;

class GRproblem  {
public:

  //------------------------------------
  // Set/Get String Describing Problem
  void setTitle(const std::string & title);
  std::string getTitle() const;

  // Set/Get Number of Periods in Problem
  void setNPeriods(int nP);
  int getNPeriods() const;
  
  //------------------------------------
  // Portfolio Methods
  void addPortfolio( const std::string & portName );
  const std::vector<std::string> & getPortfolios() const {return portNames_;};
  std::vector<std::string> getPortfolioLocs(const std::string & portName) const;

  //------------------------------------
  // Country Methods
  void addCountry( const std::string & countryName );
  const std::vector<std::string> & getCountries() const {return countryNames_;};
  void setCountryMaxFte( 
    const std::string & countryName,
    const std::vector<float>& maxFte );
  std::vector<float> getCountryMaxFte( const std::string & countryName )const;

  //------------------------------------
  // Resource Methods
  void addResource( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role );
  void setResourceSupply( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role,
    const std::vector<float> & supply);
  void setResourceCostHomeSite( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role,
    const std::vector<float> & costHomeSite);
  void setResourceCostRemoteSite( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role,
    const std::vector<float> & costRemoteSite);
  void getResources(
    std::vector<std::string> & skills,
    std::vector<std::string> & locs,
    std::vector<std::string> & bands,
    std::vector<std::string> & tiers,
    std::vector<std::string> & roles)const;
  std::vector<float> getResourceSupply( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role) const;
  std::vector<float> getResourceConsVol( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role) const;
  // When a resource is called for substitutes may be consumed.
  // This method returns the actual list of resources that were consumed
  // when the specified resource was called for.
  void getResourceConsVol( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role,
    bool homeSite,
    std::vector<std::string> & skills,
    std::vector<std::string> & locs,
    std::vector<std::string> & bands,
    std::vector<std::string> & tiers,
    std::vector<std::string> & roles,
    std::vector< std::vector<double> > & consVol
    ) const;
  std::vector<float> getResourceCostHomeSite( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role) const ;
  std::vector<float> getResourceCostRemoteSite( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role) const;
  
  //------------------------------------
  // Portfolio to Location Link Methods
  void addPortfolioLocationLink( 
    const std::string & portName, 
    const std::string & locName );
  float getPortfolioLocationExecVol( 
    const std::string & portName, 
    const std::string & locName ) const;
  void setPortfolioLocationExecVol( 
    const std::string & portName, 
    const std::string & locName,
    float execVol );
  void getPortfolioLocationLinks( 
    std::vector< std::string > & portNames, 
    std::vector< std::string > & locNames ) const;

  // Get cost of performing portfolio at location assuming
  // that only primary resources are used. (that is
  // substitutes are not used).
  float getPortfolioLocationCost( 
    const std::string & portName, 
    const std::string & locName ) const;

  // This is the total FTE's consumed if portfolio is done at location
  // with all primary resources
  float getPortfolioLocationUnitConsVol( 
    const std::string & portName, 
    const std::string & locName ) const;
  bool getPortfolioLocationExecutable( 
    const std::string & portName, 
    const std::string & locName ) const;

  //------------------------------------
  // Portfolio to Resource Link Methods
  void addPortfolioResourceLink( 
    const std::string & port, 
    const std::string & portLoc, 
    const std::string & skill,  
    const std::string & resrcLoc,
    const std::string & band,
    const std::string & tier,
    const std::string & role,
    bool homeSite );  
  void setPortfolioResourceLinkConsRate( 
    const std::string & port, 
    const std::string & portLoc, 
    const std::string & skill, 
    const std::string & resrcLoc,
    const std::string & band,
    const std::string & tier,
    const std::string & role,
    bool homeSite,
    const std::vector<float> & consRate ); 
  std::vector<float> getPortfolioResourceLinkConsRate( 
    const std::string & port, 
    const std::string & portLoc, 
    const std::string & skill, 
    const std::string & resrcLoc,
    const std::string & band,
    const std::string & tier,
    const std::string & role,
    bool homeSite ) const;

#if 0
  // The consvol currently includes consumpution of 
  // substitutes. It probably shouldn't.
  std::vector<float> getPortfolioResourceLinkConsVol( 
    const std::string & port, 
    const std::string & portLoc, 
    const std::string & skill, 
    const std::string & resrcLoc,
    const std::string & band,
    const std::string & role,
    bool homeSite) const;
#else
  void getPortfolioLocConsVols( 
    const std::string & port, 
    const std::string & portLoc, 
    std::vector< std::string > & skills, 
    std::vector< std::string > & resrcLocs,
    std::vector< std::string > & bands,
    std::vector< std::string > & tiers,
    std::vector< std::string > & roles,
    std::vector< bool > & homeSites,
    std::vector< std::vector<float> > & consVols) const;
#endif
  // given port and its location get list of resources it consumes
  // excluding subs
  void getPortfolioResourceLinks(    
    const std::string & ports, 
    const std::string & portLocs, 
    std::vector<std::string> & skills,  
    std::vector<std::string> & resrcLocs,
    std::vector<std::string> & bands,
    std::vector<std::string> & tiers,
    std::vector<std::string> & roles,
    std::vector<bool> & homeSites ) const;
#if 0
  // given port and its location get list of resources it consumes
  // including subs
  void getPortfolioResourceLinksWithSubs(    
    const std::string & ports, 
    const std::string & portLocs, 
    std::vector<std::string> & skills,  
    std::vector<std::string> & resrcLocs,
    std::vector<std::string> & bands,
    std::vector<std::string> & roles,
    std::vector<bool> & homeSites ) const;
  // get list of all portfolioLoc to resource link
  void getPortfolioResourceLinks(    
    std::vector<std::string> & ports, 
    std::vector<std::string> & portLocs, 
    std::vector<std::string> & skills,  
    std::vector<std::string> & resrcLocs,
    std::vector<std::string> & bands,
    std::vector<std::string> & roles,
    std::vector<bool> & homeSites ) const; 
  void getPortfolioResourceLinksWithSubs(    
    std::vector<std::string> & ports, 
    std::vector<std::string> & portLocs, 
    std::vector<std::string> & skills,  
    std::vector<std::string> & resrcLocs,
    std::vector<std::string> & bands,
    std::vector<std::string> & roles,
    std::vector<bool> & homeSites ) const;
  // given a resource get list of port locations which consume the resource
  void getPortfolioResourceLinks(  
    const std::string & skills,  
    const std::string & resrcLocs,
    const std::string & bands,
    const std::string & roles, 
    std::vector<std::string> & ports, 
    std::vector<std::string> & portLocs ) const;
#endif
  
  // Resource to Country Link Methods
  void addResourceCountryLink( 
    const std::string & skill,  
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role,
    const std::string & country );
  std::vector<std::string> getResourceCountryLinks( 
    const std::string & skill,  
    const std::string & loc,
    const std::string & band,
    const std::string & tier,
    const std::string & role ) const;
  
  // add substitute resources
  void addSubstituteResourceLink(
    const std::string & primarySkill,  
    const std::string & primaryResrcLoc,
    const std::string & primaryBand,
    const std::string & primaryTier,
    const std::string & primaryRole,
    const std::string & substituteSkill,  
    const std::string & substituteResrcLoc,
    const std::string & substituteBand,
    const std::string & substituteTier,
    const std::string & substituteRole );
  void getSubstituteResourceLinks(
    const std::string & primarySkill,  
    const std::string & primaryResrcLoc,
    const std::string & primaryBand,
    const std::string & primaryTier,
    const std::string & primaryRole,
    std::vector<std::string> & substituteSkills,  
    std::vector<std::string> & substituteResrcLocs,
    std::vector<std::string> & substituteBands,
    std::vector<std::string> & substituteTiers,
    std::vector<std::string> & substituteRoles ) const;
#if 0
  // Set the amount of substitute resource (subsVol) that 
  // is flowing along a link.
  // This method will be used by grMipProblem for setting
  // the solution.
  // homeSite is true if the resource is consumed at the homeSite.
  // subsVol is the solution and is assumed to be nPeriods long.
  void setSubstituteResourceLinkSubsVol(
    const std::string & primarySkill,  
    const std::string & primaryResrcLoc,
    const std::string & primaryBand,
    const std::string & primaryRole,
    const std::string & substituteSkill,  
    const std::string & substituteResrcLoc,
    const std::string & substituteBand,
    const std::string & substituteRole,
    bool homeSite,
    const std::vector<float> & subsVol );
#endif
#if 0
  std::vector<float> getSubstituteResourceLinkSubsVol(
    const std::string & primarySkill,  
    const std::string & primaryResrcLoc,
    const std::string & primaryBand,
    const std::string & primaryRole,
    const std::string & substituteSkill,  
    const std::string & substituteResrcLoc,
    const std::string & substituteBand,
    const std::string & substituteRole,
    bool homeSite ) const;
#endif
  // Return number of substitutes
  int getNumSubstitutes() const; 
  
  
  // Algorithm Choices
  static std::vector<std::string> algorithmChoices() 
  {
    std::vector<std::string> retVal;
    retVal.push_back("LP");
    retVal.push_back("SimpleGreedy");
    retVal.push_back("MaxMinPortLocCostGreedy");
    retVal.push_back("MaxMaxPortLocCostGreedy");
    retVal.push_back("MaxMinPortLocResrcConsGreedy");
    retVal.push_back("MaxMaxPortLocResrcConsGreedy");
    retVal.push_back("MIP");
    return retVal;
  }
  void setAlgorithm( const std::string & alg );
  const std::string & getAlgorithm() const;
  static bool validAlgorithm(const std::string & alg);
  
  // Solve allocation 
  void solve();
  
  // return true if there are sufficent resources to do all application work
  bool sufficientResources() const;

  // return objective function value
  float getObjValue() const;

  // Get list of shortages
  void getShortages(     
    std::vector<std::string> & resourceDescriptions,
    std::vector<int> & periods,
    std::vector<float> & shortageVols ) const;

  // Indicate that the setting of execVols and subVols are
  // are complete, so consVols can be computed.
  // the is needed by GRmipProblem::solve for testing
  void execVolSubVolSettingComplete();


  //---------------------------
#if 0
  void setResourceSupply( std::string resourceName, std::string location, std::string band,
    float supply );
  float getResourceSupply( std::string resourceName, std::string location, std::string band ) const;
  float getResourceSupply( std::string witPartName ) const;
  void setResourceRate( std::string resourceName, std::string location, std::string band,
    float rate );
  bool resourceExists( std::string resourceName, std::string location, std::string band ) const;
  
  void addAppResource( 
    std::string appName,  
    std::string location, 
    std::string resourceName, 
    std::string band,
    float usageRate ); 


  const std::vector<std::string> & locNames() const {return locNames_;};
  const std::vector<std::string> & resourceNames() const {return resourceNames_;};

  // Get resource usage
  void getResourceUsage( 
      std::vector<std::string> & resName, 
      std::vector<std::string> & locName, 
      std::vector<std::string> & band, 
      std::vector<float> & usage ) const;

#endif

#ifdef CLEANUP
  // Get app sourcing
  void getAppSourcingLoc( 
      std::vector<std::string> & appName,
      std::vector<std::string> & LocName,                               
      std::vector<float> & quantity )
      const;
#endif


  //----------------------------------------------------------------------

  void writeWitData( std::string filename ) const;
  

  //----------------------------------------------------------------------

  // default constructor
  GRproblem();
  
  // copy constructor
  GRproblem( const GRproblem& source );
  
  // assignment operator
  GRproblem&
  operator=(const GRproblem& rhs);
  
  // destructor
  ~GRproblem();
  

  // Self-test
  static void test();

 

private:


  inline std::vector<float> witFloatStarToStlVec(const float * inputVec ) const
  {
    std::vector<float>  retVal;
    int np = getNPeriods();
    int i;
    for ( i=0; i<np; ++i ) retVal.push_back(inputVec[i]);
    return retVal;
  };

  inline float * stlVecToFloatStar(const std::vector<float> & inputVector ) const
  {
    int len = inputVector.size();
    float * retVal = (float *) malloc(len*sizeof(float));
    int i;
    for ( i=0; i<len; ++i ) retVal[i] = inputVector[i];
    return retVal;
  };

  enum State {
    UNPREPROCESSED,
    PREPROCESSED,
    SOLVED,
    POSTPROCESSED
  };
  void setState( State s );
  State getState() const { return state_; };


  void unpreprocess();
  void preprocess();
  void postprocess();
  
#if 0
  // Get number of periods in problem
  int nPeriods() const;
#endif

public:
  static std::string portfolioSourcingOpName( 
    const std::string & portName, 
    const std::string & locName );
  static std::string portFromPortfolioSourcingOpName( const std::string & opName ) ;
  static std::string locFromPortfolioSourcingOpName( const std::string & opName ) ;

  static std::string remoteSiteResourceName( 
    const std::string & skill, 
    const std::string & loc, 
    const std::string & band, 
    const std::string & tier,
    const std::string & role);
  static std::string homeSiteResourceName( 
    const std::string & skill, 
    const std::string & loc, 
    const std::string & band, 
    const std::string & tier,
    const std::string & role);
  static std::string resourceName( 
    const std::string & skill, 
    const std::string & loc, 
    const std::string & band, 
    const std::string & tier,
    const std::string & role,
    bool homeSite);
  static std::string baseResourceName( 
    const std::string & skill, 
    const std::string & loc, 
    const std::string & band,     
    const std::string & tier,
    const std::string & role);
  static std::string skillFromResourceName(const std::string & resName );
  static std::string locFromResourceName(const std::string & resName );
  static std::string bandFromResourceName(const std::string & resName );
  static std::string tierFromResourceName(const std::string & resName );
  static std::string roleFromResourceName(const std::string & resName );
  static bool homeSiteFromResourceName(const std::string & resName );
private:
  
  int getBomEntryIndex( 
    const std::string & port, 
    const std::string & portLoc, 
    const std::string & skill, 
    const std::string & resrcLoc,
    const std::string & band,
    const std::string & tier,
    const std::string & role,
    bool homeSite ) const;
  int getBopEntryIndex( 
    const std::string & port, 
    const std::string & portLoc ) const;
  
#ifdef CLEANUP
  std::string appNameFromAppSourcingOpName( std::string appSourcingOpName ) const;
  std::string locNameFromAppSourcingOpName( std::string appSourcingOpName ) const;
  bool isAppSourcingOpName( std::string opName ) const;
#endif

#if 0
 std::string fullResourceName( std::string, std::string, std::string ) const;
 std::string resourceNameFromFullResourceName( std::string fullResourceName ) const;
  std::string bandFromFullResourceName( std::string fullResourceName ) const;
  std::string locationFromFullResourceName( std::string fullResourceName ) const;

  static const std::string outSourceOpName_;
  static const char * outSourceOpName();
#endif
 

  WitRun * mutableWitRun() const;
  WitRun * witRun();

  void gutsOfCopy( const GRproblem& source );
  void gutsOfDestructor();

  mutable WitRun * wr_;
  State state_;
  std::string alg_;


  int numSubs_;
  std::vector<std::string> portNames_; 
  std::vector<std::string> locNames_;
  std::vector<std::string> resourceNames_;
  std::vector<std::string> countryNames_;

  
  
};


#endif
@


1.6
log
@Added method to get substitute usage
@
text
@d44 1
d50 1
d57 1
d64 1
d71 1
d77 1
d83 1
d92 1
d98 1
d106 1
d112 1
d155 1
d164 1
d174 1
d196 1
d209 1
d212 1
d248 1
d255 1
d262 1
d270 1
d275 1
d281 1
d286 1
d288 1
d306 2
a307 1

d318 1
d477 2
a478 1
    const std::string & band,
d483 2
a484 1
    const std::string & band,
d489 2
a490 1
    const std::string & band,
d496 2
a497 1
    const std::string & band,
d502 1
d513 1
@


1.5
log
@Changed gr.cpp to add substitutes to problem.
Updated grProblem to have method for setting substitute usage
@
text
@d281 11
@


1.4
log
@Added some extra get methods for Francisco.
Modifed postprocess to use technique suggested by Tom
@
text
@d264 17
@


1.3
log
@Changes to add osl mip solver structure to code
@
text
@d32 1
d36 1
d67 1
a67 1
    std::vector<std::string> & roles);
d186 2
d196 2
d206 1
d222 9
a230 1
    std::vector<bool> & homeSites ) const;  
d239 5
a245 1
#if 0
a246 2
    const std::string & port,
    const std::string & portLoc,
a250 1
    bool homeSite,
d254 2
a255 3
    const std::string & substituteRole );  
#else
  void addSubstituteResourceLink(
d260 4
a263 5
    const std::string & substituteSkill,  
    const std::string & substituteResrcLoc,
    const std::string & substituteBand,
    const std::string & substituteRole );
#endif
d300 5
d491 1
@


1.2
log
@Moved substitution back down below home/remote site operations.
Added code to peg home and remote site usage to a portfolio as a postProcess step.
@
text
@d110 4
d250 2
d264 1
d393 1
d426 1
d468 1
@


1.1
log
@Initial revision
@
text
@d8 1
d76 15
d110 3
d158 1
d169 11
d222 1
d235 11
d310 1
d317 1
d369 3
a371 1
    PREPROCESSED
d373 1
a373 1
  void setState( State s ) { state_ = s; };
d377 1
d379 1
d389 1
d431 1
d435 1
@


1.1.1.1
log
@globalResource import
@
text
@@
