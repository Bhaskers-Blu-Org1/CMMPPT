head	1.1;
branch	1.1.1;
access;
symbols
	beforeTiersAdded:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef GR_RESRCSATTRFILE_h
#define GR_RESRCSATTRFILE_h

#include "scoFile.h"


class GRresrcsAttrFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(skill);
  getFieldH(loc);
  getFieldH(band);
  getFieldH(role);
  getIntFieldH(period);
  getFloatFieldH(supplyFte);
  getFloatFieldH(costRemoteSite);
  getFloatFieldH(costHomeSite);

  float supplyFteAsFloat( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & role,
    int period ) const
  {
    std::string key=makeKey(skill,loc,band,role,period);
    float retVal = supplyFteAsFloat(key);
    return retVal;
  };

  float costRemoteSiteAsFloat( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & role,
    int period ) const
  {
    std::string key=makeKey(skill,loc,band,role,period);
    float retVal = costRemoteSiteAsFloat(key);
    return retVal;
  };

  float costHomeSiteAsFloat( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & role,
    int period ) const
  {
    std::string key=makeKey(skill,loc,band,role,period);
    float retVal = costHomeSiteAsFloat(key);
    return retVal;
  };

  
  bool keyExists(  
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & role,
    int period  ) const 
  {
    return SCOfile::keyExists(makeKey(skill,loc,band,role,period));
  };
  
  // preferred constructor
  GRresrcsAttrFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
#if 1    
    insertField("skill"); 
    insertField("loc"); 
    insertField("band"); 
    insertField("role"); 
    insertField("period"); 
    insertField("supplyFte"); 
    insertField("costRemoteSite"); 
    insertField("costHomeSite"); 
#else
    hasHeaderRecord(8);
#endif
  };
  
  // destructor
  ~GRresrcsAttrFile(){/*nothing to do here*/};
  
  // Self-test
  static void test();
  
protected:
  
  std::string makeKey( 
    const std::string & skill,
    const std::string & loc,
    const std::string & band,
    const std::string & role,
    int period ) const
  {
    char periodAsString[250];
    sprintf(periodAsString,"%d",period);
    std::string retVal = skill
      +"+"+ loc
      +"+"+ band
      +"+"+ role
      +"+"+ periodAsString;
    return retVal;
  }

  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = makeKey(skill(recNum),loc(recNum),band(recNum),role(recNum),periodAsInt(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  GRresrcsAttrFile();
  
  // copy constructor  -- don't use!
  GRresrcsAttrFile( const GRresrcsAttrFile& source );
  
  // assignment operator -- don't use!
  GRresrcsAttrFile&
  operator=(const GRresrcsAttrFile& rhs);

  
};



class GRresrcsAttrFileIterator : public SCOfileIterator {
public:
  
  // fields
  getFieldFileWithIteratorH(skill);
  getFieldFileWithIteratorH(loc);
  getFieldFileWithIteratorH(band);
  getFieldFileWithIteratorH(role);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(supplyFte);
  getFloatFieldFileWithIteratorH(costRemoteSite);
  getFloatFieldFileWithIteratorH(costHomeSite);
 
  
  // preferred constructor
  GRresrcsAttrFileIterator(const GRresrcsAttrFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~GRresrcsAttrFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  GRresrcsAttrFileIterator();
  
  // copy constructor  -- don't use!
  GRresrcsAttrFileIterator( const GRresrcsAttrFileIterator& source );
  
  // assignment operator -- don't use!
  GRresrcsAttrFileIterator&
  operator=(const GRresrcsAttrFileIterator& rhs);

  
};
#endif@


1.1.1.1
log
@globalResource import
@
text
@@
