head	1.1;
branch	1.1.1;
access;
symbols
	beforeTiersAdded:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef GR_RESRCSFILE_h
#define GR_RESRCSFILE_h

#include "scoFile.h"


class GRresrcsFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(skill);
  getFieldH(loc);
  getFieldH(band);
  getFieldH(role);

  bool keyExists(  
    const std::string &skill, 
    const std::string &loc, 
    const std::string &band, 
    const std::string &role
    ) const
  {
    return SCOfile::keyExists(makeKey(skill,loc,band,role));
  };
  
  // preferred constructor
  GRresrcsFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
#if 1   
    insertField("skill"); 
    insertField("loc"); 
    insertField("band"); 
    insertField("role");  
#else
    hasHeaderRecord(4);
#endif
  };
  
  // destructor
  ~GRresrcsFile(){/*nothing to do here*/};
  
  // Self-test
  static void test();
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
#if 0
    std::string retVal = skill(recNum) 
      +"+"+ loc(recNum)
      +"+"+ band(recNum)
      +"+"+ role(recNum);
#endif
    std::string retVal = makeKey( skill(recNum), loc(recNum), band(recNum), role(recNum) );
    return retVal;
  };

  virtual std::string makeKey( 
    const std::string &skill, 
    const std::string &loc, 
    const std::string &band, 
    const std::string &role
    ) const
  {
    std::string retVal = skill
      +"+"+ loc
      +"+"+ band
      +"+"+ role;
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  GRresrcsFile();
  
  // copy constructor  -- don't use!
  GRresrcsFile( const GRresrcsFile& source );
  
  // assignment operator -- don't use!
  GRresrcsFile&
  operator=(const GRresrcsFile& rhs);

  
};



class GRresrcsFileIterator : public SCOfileIterator {
public:
  
  // fields
  getFieldFileWithIteratorH(skill);
  getFieldFileWithIteratorH(loc);
  getFieldFileWithIteratorH(band);
  getFieldFileWithIteratorH(role);
  
  // preferred constructor
  GRresrcsFileIterator(const GRresrcsFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~GRresrcsFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  GRresrcsFileIterator();
  
  // copy constructor  -- don't use!
  GRresrcsFileIterator( const GRresrcsFileIterator& source );
  
  // assignment operator -- don't use!
  GRresrcsFileIterator&
  operator=(const GRresrcsFileIterator& rhs);

  
};
#endif@


1.1.1.1
log
@globalResource import
@
text
@@
