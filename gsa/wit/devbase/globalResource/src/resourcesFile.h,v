head	1.1;
branch	1.1.1;
access;
symbols
	beforeTiersAdded:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef DCRESOURCESFILE_h
#define DCRESOURCESFILE_h

#include "scoFile.h"


class DCresourcesFile : public SCOcsvFormatFile {
public:

  // fields
  std::string resourceName( unsigned int recNum ) const;
  std::string loc( unsigned int recNum ) const;
  std::string band( unsigned int recNum ) const;
  std::string supply( unsigned int recNum ) const;
  std::string rate( unsigned int recNum ) const;

  std::string resourceName( std::string key ) const;
  std::string loc( std::string key ) const;
  std::string band( std::string key ) const;
  std::string supply( std::string key ) const;
  std::string rate( std::string key ) const;

  float supplyAsFloat( unsigned int recNum ) const;
  float supplyAsFloat( std::string key ) const;

  float rateAsFloat( unsigned int recNum ) const;
  float rateAsFloat( std::string key ) const;
  
  // preferred constructor
  DCresourcesFile(std::string filename);
  
  // destructor
  ~DCresourcesFile();
  
  // Self-test
  static void test();
  
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
      key( unsigned int ) const;

private:
  
  
  // default constructor -- don't use!
  DCresourcesFile();
  
  // copy constructor  -- don't use!
  DCresourcesFile( const DCresourcesFile& source );
  
  // assignment operator -- don't use!
  DCresourcesFile&
  operator=(const DCresourcesFile& rhs);

  
};



class DCresourcesFileIterator : public SCOfileIterator {
public:
  
  // fields
  std::string resourceName() const;
  std::string loc() const;
  std::string band() const;
  std::string supply() const;
  std::string rate() const;

  float supplyAsFloat() const;
  float rateAsFloat() const;

  // preferred constructor
  DCresourcesFileIterator(const DCresourcesFile &);
  
  // destructor
  ~DCresourcesFileIterator();
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  DCresourcesFileIterator();
  
  // copy constructor  -- don't use!
  DCresourcesFileIterator( const DCresourcesFileIterator& source );
  
  // assignment operator -- don't use!
  DCresourcesFileIterator&
  operator=(const DCresourcesFileIterator& rhs);

  
};
#endif@


1.1.1.1
log
@globalResource import
@
text
@@
