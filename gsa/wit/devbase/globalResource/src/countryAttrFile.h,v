head	1.1;
branch	1.1.1;
access;
symbols
	beforeTiersAdded:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.04.13.48.12;	author fasano;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@#ifndef GR_COUNTRYATTRFILE_h
#define GR_COUNTRYATTRFILE_h

#include "scoFile.h"


class GRcountryAttrFile : public SCOcsvFormatFile {
public:

  // Fields
  getFieldH(country);
  getIntFieldH(period);
  getFloatFieldH(maxFte);
  
  float maxFteAsFloat( 
    const std::string & country,
    int period ) const
  {
    std::string key=makeKey(country,period);
    float retVal = maxFteAsFloat(key);
    return retVal;
  };
  
  bool keyExists(  
    const std::string & country,
    int period  ) const 
  {
    return SCOfile::keyExists(makeKey(country,period));
  };
  
  
  // preferred constructor
  GRcountryAttrFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
#if 1   
    insertField("country");  
    insertField("period"); 
    insertField("maxFte"); 
#else
    hasHeaderRecord(3);
#endif
  };
  
  // destructor
  ~GRcountryAttrFile(){/*nothing to do here*/};
  
  // Self-test
  static void test();
  
protected:
  
  std::string makeKey( 
    const std::string & country,
    int period ) const
  {
    char periodAsString[250];
    sprintf(periodAsString,"%d",period);
    std::string retVal = country +"+"+ periodAsString;
    return retVal;
  }

  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = makeKey(country(recNum),periodAsInt(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  GRcountryAttrFile();
  
  // copy constructor  -- don't use!
  GRcountryAttrFile( const GRcountryAttrFile& source );
  
  // assignment operator -- don't use!
  GRcountryAttrFile&
  operator=(const GRcountryAttrFile& rhs);

  
};



class GRcountryAttrFileIterator : public SCOfileIterator {
public:
  
  // fields
  getFieldFileWithIteratorH(country);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(maxFte);
 
  
  // preferred constructor
  GRcountryAttrFileIterator(const GRcountryAttrFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~GRcountryAttrFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  GRcountryAttrFileIterator();
  
  // copy constructor  -- don't use!
  GRcountryAttrFileIterator( const GRcountryAttrFileIterator& source );
  
  // assignment operator -- don't use!
  GRcountryAttrFileIterator&
  operator=(const GRcountryAttrFileIterator& rhs);

  
};
#endif@


1.1.1.1
log
@globalResource import
@
text
@@
