head	1.12;
access;
symbols;
locks; strict;
comment	@# @;


1.12
date	2011.09.13.20.48.08;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.08.22.43.39;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.22.17.51.14;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.22.16.15.31;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.21.21.44.47;	author rjw;	state dead;
branches;
next	1.7;

1.7
date	2011.07.19.21.37.05;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.19.21.13.13;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.15.17.42.31;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.14.23.40.34;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.08.20.45.59;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.07.19.29.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.07.19.05.03;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Simplified toString.
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File Period.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.Utility.*;

/*******************************************************************************
 * A Period represents a time period in the model instance.
 * A WIT-M Period is identified by a String and corresponds to a WIT period,
 * which is represented as an integer.<br><br>
 * 
 * The factory method for this class is
 * ModelInstance.newPeriod (theName).
 *******************************************************************************
 */
public final class Period
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Fields
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * The name of this Period
 *******************************************************************************
 */
   private final String myName;

/*******************************************************************************
 * The index of this Period.
 *******************************************************************************
 */
   private final int myIndex;

/*******************************************************************************
 * The PeriodMgr that owns this Period.
 *******************************************************************************
 */
   private final PeriodMgr myPeriodMgr;
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////

   Period (String theName, PeriodMgr thePerMgr)
      {
      myName      = theName;
      
      myIndex     = thePerMgr.getAllPeriods ().size ();
      
      myPeriodMgr = thePerMgr;
      
      thePerMgr.store (this);
      }
   
////////////////////////////////////////////////////////////////////////////////
// Public Non-Static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * @@return The name of this Period
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * @@return The index of this Period, which is to be used as the WIT period
 *         corresponding to this WIT-M Period.
 *******************************************************************************
 */
   public int getIndex ()
      {
      return myIndex;
      }

/*******************************************************************************
 * @@return The PeriodMgr that owns this Period
 *******************************************************************************
 */
   public PeriodMgr getPeriodMgr ()
      {
      return myPeriodMgr;
      }

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */             @@Override
   public String toString ()
      {
      return
         concatenation (
            myName,
            " (Period #",
            String.valueOf (myIndex),
            ")");
      }
   
////////////////////////////////////////////////////////////////////////////////
}
@


1.11
log
@ValueByPeriod
@
text
@d98 2
a99 1
            "Period #",
d101 1
a101 2
            ": ",
            myName);
@


1.10
log
@Class Period
@
text
@d38 1
a38 1
 * The ModelInstance that owns this Period.
d41 1
a41 1
   private final ModelInstance myModelInstance;
d47 1
a47 1
   Period (String theName, ModelInstance theInst)
d49 1
a49 1
      myName          = theName;
d51 1
a51 1
      myIndex         = theInst.getPeriodMgr ().getAllPeriods ().size ();
d53 1
a53 1
      myModelInstance = theInst;
d55 1
a55 1
      myModelInstance.getPeriodMgr ().store (this);
d82 9
d93 1
a93 1
 */      @@Override
@


1.9
log
@Class Period
@
text
@d32 6
d50 3
d59 1
a59 1
// Package Internal Non-Static Methods
d66 1
a66 1
   String getName ()
d71 9
a79 3
////////////////////////////////////////////////////////////////////////////////
// Public Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
d87 6
a92 1
      return concatenation ("Period '", myName, "'");
@


1.8
log
@Removed first implementation of the period concept.
@
text
@d8 2
d11 3
a13 3
 * A Period is a Primitive whose ItemCategory is the PERIOD ItemCategory. It
 * represents a time period and has an integer period index that is to
 * correspond to the  integer representation of a period that's used by WIT.<br>
d16 1
a16 2
 * PrimitiveCategory.newPrimitive (theName),
 * where the PrimitiveCategory is the PERIOD ItemCategory.
d19 1
a19 1
class Period extends Primitive
d22 1
a22 1
// Private Non-static Fields
d26 1
a26 2
 * The period index of this Period: the number of Periods in the ModelInstance
 * created before this one.
d29 1
a29 1
   private final int myPeriodIndex;
d31 6
d40 1
a40 1
   
d43 2
a44 4
      super (
         theInst.getModelScheme ().getPeriodCat (),
         theName,
         theInst);
d46 1
a46 5
      myPeriodIndex =
         theInst.
            getPrimitiveMgr (theInst.getModelScheme ().getPeriodCat ()).
               getAll ().
                  size () - 1;
d50 1
a50 1
// Public Non-static Methods
d54 1
a54 2
 * @@see    Primitive.getPeriodIndex ()
 * @@return The index.
d56 2
a57 2
 */          @@Override
   public int getPeriodIndex ()
d59 1
a59 1
      return myPeriodIndex;
d63 13
@


1.7
log
@Scheme ==> ModelScheme
@
text
@@


1.6
log
@Embodiment ==> ModelInstance
@
text
@d38 1
a38 1
         theInst.getScheme ().getPeriodCat (),
d44 1
a44 1
            getPrimitiveMgr (theInst.getScheme ().getPeriodCat ()).
@


1.5
log
@Category ==> ItemCategory
@
text
@d25 1
a25 1
 * The period index of this Period: the number of Periods in the Embodiment
d35 1
a35 1
   Period (String theName, Embodiment theEmb)
d38 1
a38 1
         theEmb.getScheme ().getPeriodCat (),
d40 1
a40 1
         theEmb);
d43 3
a45 3
         theEmb.
            getPrimitiveMgr (theEmb.getScheme ().getPeriodCat ()).
               getInstances ().
@


1.4
log
@Signatures with argument names.
@
text
@d9 3
a11 3
 * A Period is a Primitive whose Category is the PERIOD Category. It represents
 * a time period and has an integer period index that is to correspond to the 
 * integer representation of a period that's used by WIT.<br>
d15 1
a15 1
 * where the PrimitiveCategory is the PERIOD Category.
@


1.3
log
@Class ProblemMgr.
@
text
@d14 1
a14 1
 * PrimitiveCategory.newPrimitive (String),
@


1.2
log
@PERIOD Primitives
@
text
@d6 1
a6 1
package       com.ibm.witm;
@


1.1
log
@Period Primitives.
@
text
@d25 2
a26 2
 * The index of this Period: the number of Periods in the Embodiment created
 * before this one.
d29 1
a29 1
   private final int myIndex;
d35 1
a35 4
   Period (
         PrimitiveCategory thePeriodCat,
         String            theName,
         Embodiment        theEmb)
d37 4
a40 1
      super (thePeriodCat, theName, theEmb);
d42 5
a46 2
      myIndex =
         theEmb.getPrimitiveMgr (thePeriodCat).getInstances ().size () - 1;
d54 1
a54 1
 * @@see    Primitive.getIndex()
d58 1
a58 1
   public int getIndex ()
d60 1
a60 1
      return myIndex;
@

