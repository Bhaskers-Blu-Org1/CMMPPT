head	1.13;
access;
symbols;
locks; strict;
comment	@# @;


1.13
date	2011.07.12.22.39.56;	author rjw;	state dead;
branches;
next	1.12;

1.12
date	2011.07.08.20.45.56;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.06.19.22.43;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.05.21.15.02;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.06.30.23.43.46;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.06.30.23.25.39;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.06.30.22.03.37;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.24.20.29.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.24.16.42.07;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.23.22.52.03;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.22.22.09.42;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.22.02.10.41;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2011.05.22.01.47.57;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Compound ==> Tuple
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File Compound.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/*******************************************************************************
 * A Compound is an Item that represents a data object that's defined in terms
 * of other data objects. More precisely, a Compound represents an ordered list
 * of other Items. These Items are called the coordinates of the Compound and
 * the Compound stores this coordinate list. Each Compound belongs to a
 * particular CompoundCategory and a particular Embodiment.<br><br>
 * 
 * The factory method for creating instances of this class is
 * Embodiment.newCompound (CompoundCategory, Item...)
 *******************************************************************************
 */
public final class Compound extends Item
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-static Fields
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * The coordinate List of this Compound.<br>
 * (An unmodifiable ArrayList)
 *******************************************************************************
 */
   private final List <Item> myCoordinateList;
   
////////////////////////////////////////////////////////////////////////////////
// Private Non-static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * Verifies that the Scheme of theCat matches the Scheme of this Compound.<br>
 * To be called by get (Category <I>).
 *******************************************************************************
 */
   private void requireMatchingScheme (Category <?> theCat, String theSig)
      {
      if (theCat.getScheme () != getScheme ())
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Compound." + theSig + " with a Category\n"
             + "   whose Scheme does not match the Scheme of the Compound.\n"
             + "\n"
             + "      Category:  "
             +        theCat                .getName () + "\n"
             + "         Scheme: "
             +           theCat.getScheme ().getName () + "\n"
             + "      Compound:  "
             +        this                              + "\n"
             + "         Scheme: "
             +           getScheme ()       .getName () + "\n");
      }

/*******************************************************************************
 * Verifies that theCat is a dimension of the CompoundCategory of this Compound.
 * <br>
 * To be called by get (Category <I>).
 * 
 * @@param dimIdx The valued returned by
 *               getCompoundCategory ().uniqueDimenIndex (theCat)
 *******************************************************************************
 */
   private void requireDimen (Category <?> theCat, int dimIdx)
      {
      if (dimIdx == -1)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Compound.get (Category <I>) with a Category that\n"
             + "   is not a dimension of the CompoundCategory of the\n"
             + "   Compound.\n"
             + "\n"
             + "      Category: " + theCat.getName () + "\n"
             + "      Compound: " + this              + "\n");
      }

/*******************************************************************************
 * Verifies that theCat does not occur more than once as a dimension of the
 * CompoundCategory of this Compound.<br>
 * To be called by get (Category <I>).
 * 
 * @@param dimIdx The valued returned by
 *               getCompoundCategory ().uniqueDimenIndex (theCat)
 *******************************************************************************
 */
   private void prohibitDupDimen (Category <?> theCat, int dimIdx)
      {
      if (dimIdx == -2)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Compound.get (Category <I>) with a Category that\n"
             + "   occurs more than once in the dimensions of the\n"
             + "   CompoundCategory of the Compound.\n"
             + "\n"
             + "      Category: " + theCat.getName () + "\n"
             + "      Compound: " + this              + "\n");
      }

/*******************************************************************************
 * Verifies that coordIdx >= 0.<br>
 * 
 * To be called by get (Category <I>, int).
 *******************************************************************************
 */
   private void prohibitCoordIdxTooLow (int coordIdx)
      {
      if (coordIdx < 0)
         {
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Compound.get (Category <I>, int) with a\n"
             + "   negative coordinate index.\n"
             + "\n"
             + "      CompoundCategory: " + getCompoundCategory ().getName ()
             + "\n"
             + "      Coordinate Index: " + coordIdx + "\n");
         }
      }

/*******************************************************************************
 * Verifies that coordIdx < # dimensions.<br>
 * 
 * To be called by get (Category <I>, int).
 *******************************************************************************
 */
   private void prohibitCoordIdxTooHigh (int coordIdx)
      {
      int nDimens;
      
      nDimens = getCompoundCategory ().getDimensions ().size ();
      
      if (coordIdx >= nDimens)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Compound.get (Category <I>, int) with a coordinate\n"
             + "   index >= the # of dimensions in the CompoundCategory.\n"
             + "\n"
             + "      CompoundCategory: " + getCompoundCategory ().getName ()
             + "\n"
             + "      Coordinate Index: " + coordIdx + "\n"
             + "      # Dimensions:     " + nDimens  + "\n");
      }

/*******************************************************************************
 * Verifies that theCat matches the specified dimension.<br>
 * 
 * To be called by get (Category <I>, int).
 *******************************************************************************
 */
   private void requireCatMatchDimen (Category <?> theCat, int coordIdx)
      {
      Category <?> theDimen;
      
      theDimen = getCompoundCategory ().getDimensions ().get (coordIdx);
      
      if (theCat != theDimen)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Compound.get (Category <I>, int) with a Category\n"
             + "   that does not match the CompoundCategory dimension for the\n"
             + "   specified coordinate number.\n"
             + "\n"
             + "      CompoundCategory: " + getCompoundCategory ().getName ()
             + "\n"
             + "      Coordinate Index: " + coordIdx            + "\n"
             + "      Dimension:        " + theDimen.getName () + "\n"
             + "      Category:         " + theCat  .getName () + "\n");
      }

////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////
   
   Compound (
         CompoundCategory theCompCat,
         Embodiment       theEmb,
         Item[]           theCoordArr)
      {
      super (theCompCat, theEmb);
      
      ArrayList <Item> theCoordAList;
      
      theCoordAList = new ArrayList <Item> (Arrays.asList (theCoordArr));
      
      theCoordAList.trimToSize ();
      
      myCoordinateList = Collections.unmodifiableList (theCoordAList);
      
      theEmb.getCompoundMgr (theCompCat).store (this);
      }
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * @@return The coordinate list of this Compound as an unmodifiable ArrayList
 *******************************************************************************
 */
   List <Item> getCoordinateList ()
      {
      return myCoordinateList;
      }

////////////////////////////////////////////////////////////////////////////////
// Public Non-static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * @@return The CompoundCategory of this Compound
 *******************************************************************************
 */
   public CompoundCategory getCompoundCategory ()
      {
      return (CompoundCategory) getCategory ();
      }

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */             @@Override
   public String toString ()
      {
      CompoundMgr theCompMgr;
      
      theCompMgr = getEmbodiment ().getCompoundMgr (getCompoundCategory ());
      
      return theCompMgr.toStringFor (this);
      }
   
/*******************************************************************************
 * Returns the coordinate of this Compound for a specified Category and
 * coordinate number.
 * 
 * @@param  <I>      The type of Item to be retrieved (either Primitive or
 *                  Compound)
 * @@param  theCat   The specified Category
 * @@param  coordIdx The specified coordinate index
 * @@return          The specified coordinate
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theCat does not match the
 *                                  Scheme of this Compound.
 * @@throws IllegalArgumentException If coordIdx is not in the range:
 *                                  0 <= coordIdx < # dimensions
 * @@throws IllegalArgumentException If theCat does not match the
 *                                  CompoundCategory dimension for coordIdx
 *******************************************************************************
 */
                            @@SuppressWarnings("unchecked")
   public <I extends Item> I get (Category <I> theCat, int coordIdx)
      {
      prohibitNull            (theCat, "theCat");
      requireMatchingScheme   (theCat, "get (Category <I>, int)");
      prohibitCoordIdxTooLow  (coordIdx);
      prohibitCoordIdxTooHigh (coordIdx);
      requireCatMatchDimen    (theCat, coordIdx);
      
      return (I) myCoordinateList.get (coordIdx);
      }

/*******************************************************************************
 * If there is exactly one dimension in the CompoundCatagory for this Compound
 * that matches theCat, the corresponding coordinate for this Compound is
 * returned.
 * 
 * @@param  <I>    The type of Item to be retrieved (either Primitive or
 *                Compound)
 * @@param  theCat The Category <I> of the dimension being specified.
 * @@return        The coordinate of this Compound for the specified dimension
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theCat does not match the
 *                                  Scheme of this Compound.
 * @@throws IllegalArgumentException If theCat is not a dimension of the
 *                                  CompoundCategory of this Compound
 * @@throws IllegalArgumentException If theCat occurs more than once as a
 *                                  dimension of the CompoundCategory of this
 *                                  Compound
 *******************************************************************************
 */
                            @@SuppressWarnings("unchecked")
   public <I extends Item> I get (Category <I> theCat)
      {
      int dimIdx;
      
      prohibitNull          (theCat, "theCat");
      requireMatchingScheme (theCat, "get (Category <I>)");

      dimIdx = getCompoundCategory ().uniqueDimenIndex (theCat);
      
      requireDimen     (theCat, dimIdx);
      prohibitDupDimen (theCat, dimIdx);
      
      return (I) myCoordinateList.get (dimIdx);
      }

////////////////////////////////////////////////////////////////////////////////
}
@


1.12
log
@Class ProblemMgr.
@
text
@@


1.11
log
@Moved some responsibility to constructors.
@
text
@d6 1
a6 1
package       com.ibm.witm;
@


1.10
log
@Implementation ==> Embodiment
@
text
@d205 2
@


1.9
log
@//=== ==> /////
@
text
@d20 1
a20 1
 * particular CompoundCategory and a particular Implementation.<br><br>
d23 1
a23 1
 * Implementation.newCompound (CompoundCategory, Item...)
d193 1
a193 1
         Implementation   theImple,
d196 1
a196 1
      super (theCompCat, theImple);
d241 1
a241 1
      theCompMgr = getImplementation ().getCompoundMgr (getCompoundCategory ());
@


1.8
log
@Re-arranged source code.
@
text
@d2 1
a2 1
//==============================================================================
d4 1
a4 1
//==============================================================================
d28 1
a28 1
//==============================================================================
d30 1
a30 1
//==============================================================================
d39 1
a39 1
//==============================================================================
d41 1
a41 1
//==============================================================================
d187 1
a187 1
//==============================================================================
d189 1
a189 1
//==============================================================================
d207 1
a207 1
//==============================================================================
d209 1
a209 1
//==============================================================================
d220 1
a220 1
//==============================================================================
d222 1
a222 1
//==============================================================================
d313 1
a313 1
//==============================================================================
@


1.7
log
@Various revisions.
@
text
@d29 1
a29 1
// Public
d33 2
a34 17
 * If there is exactly one dimension in the CompoundCatagory for this Compound
 * that matches theCat, the corresponding coordinate for this Compound is
 * returned.
 * 
 * @@param  <I>    The type of Item to be retrieved (either Primitive or
 *                Compound)
 * @@param  theCat The Category <I> of the dimension being specified.
 * @@return        The coordinate of this Compound for the specified dimension
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theCat does not match the
 *                                  Scheme of this Compound.
 * @@throws IllegalArgumentException If theCat is not a dimension of the
 *                                  CompoundCategory of this Compound
 * @@throws IllegalArgumentException If theCat occurs more than once as a
 *                                  dimension of the CompoundCategory of this
 *                                  Compound
d37 1
a37 72
                            @@SuppressWarnings("unchecked")
   public <I extends Item> I get (Category <I> theCat)
      {
      int dimIdx;
      
      prohibitNull          (theCat, "theCat");
      requireMatchingScheme (theCat, "get (Category <I>)");

      dimIdx = getCompoundCategory ().uniqueDimenIndex (theCat);
      
      requireDimen     (theCat, dimIdx);
      prohibitDupDimen (theCat, dimIdx);
      
      return (I) myCoordinateList.get (dimIdx);
      }

/*******************************************************************************
 * Returns the coordinate of this Compound for a specified Category and
 * coordinate number.
 * 
 * @@param  <I>      The type of Item to be retrieved (either Primitive or
 *                  Compound)
 * @@param  theCat   The specified Category
 * @@param  coordIdx The specified coordinate index
 * @@return          The specified coordinate
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theCat does not match the
 *                                  Scheme of this Compound.
 * @@throws IllegalArgumentException If coordIdx is not in the range:
 *                                  0 <= coordIdx < # dimensions
 * @@throws IllegalArgumentException If theCat does not match the
 *                                  CompoundCategory dimension for coordIdx
 *******************************************************************************
 */
                            @@SuppressWarnings("unchecked")
   public <I extends Item> I get (Category <I> theCat, int coordIdx)
      {
      prohibitNull            (theCat, "theCat");
      requireMatchingScheme   (theCat, "get (Category <I>, int)");
      prohibitCoordIdxTooLow  (coordIdx);
      prohibitCoordIdxTooHigh (coordIdx);
      requireCatMatchDimen    (theCat, coordIdx);
      
      return (I) myCoordinateList.get (coordIdx);
      }

/*******************************************************************************
 * @@return The CompoundCategory of this Compound
 *******************************************************************************
 */
   public CompoundCategory getCompoundCategory ()
      {
      return (CompoundCategory) getCategory ();
      }

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */             @@Override
   public String toString ()
      {
      CompoundMgr theCompMgr;
      
      theCompMgr = getImplementation ().getCompoundMgr (getCompoundCategory ());
      
      return theCompMgr.toStringFor (this);
      }
   
//==============================================================================
// Package Internal
//==============================================================================
a38 29
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   Compound (
         CompoundCategory theCompCat,
         Implementation   theImple,
         Item[]           theCoordArr)
      {
      super (theCompCat, theImple);
      
      ArrayList <Item> theCoordAList;
      
      theCoordAList = new ArrayList <Item> (Arrays.asList (theCoordArr));
      
      theCoordAList.trimToSize ();
      
      myCoordinateList = Collections.unmodifiableList (theCoordAList);
      }
   
/*******************************************************************************
 * @@return The coordinate list of this Compound as an unmodifiable ArrayList
 *******************************************************************************
 */
   List <Item> getCoordinateList ()
      {
      return myCoordinateList;
      }

d40 1
a40 1
// Private
d187 37
d225 1
a225 2
 * The coordinate List of this Compound.<br>
 * (An unmodifiable ArrayList)
d228 17
a244 1
   private final List <Item> myCoordinateList;
d246 67
@


1.6
log
@0-based indexing of coordinates and dimensions
@
text
@d111 2
a112 2
 */
   @@Override public String toString ()
@


1.5
log
@Added tests for CompoundCategory of a CompoundCategory.
Fixed a bug for this case.
@
text
@d72 5
a76 5
 * @@param  <I>     The type of Item to be retrieved (either Primitive or
 *                 Compound)
 * @@param  theCat  The specified Category
 * @@param  coordNo The specified coordinate number
 * @@return         The specified coordinate
d81 2
a82 2
 * @@throws IllegalArgumentException If coordNo is not in the range:
 *                                  1 <= coordNo <= # dimensions
d84 1
a84 1
 *                                  CompoundCategory dimension for coordNo
d88 1
a88 1
   public <I extends Item> I get (Category <I> theCat, int coordNo)
d90 5
a94 5
      prohibitNull           (theCat, "theCat");
      requireMatchingScheme  (theCat, "get (Category <I>, int)");
      prohibitCoordNoTooLow  (coordNo);
      prohibitCoordNoTooHigh (coordNo);
      requireCatMatchDimen   (theCat, coordNo);
d96 1
a96 1
      return (I) myCoordinateList.get (coordNo - 1);
d229 1
a229 1
 * Verifies that coordNo >= 1.<br>
d234 1
a234 1
   private void prohibitCoordNoTooLow (int coordNo)
d236 1
a236 1
      if (coordNo < 1)
d242 1
a242 1
             + "   non-positive coordinate number.\n"
d246 1
a246 1
             + "      Coordinate #:     " + coordNo + "\n");
d251 1
a251 1
 * Verifies that coordNo <= # dimensions.<br>
d256 1
a256 1
   private void prohibitCoordNoTooHigh (int coordNo)
d262 1
a262 1
      if (coordNo > nDimens)
d267 1
a267 2
             + "   number larger than the # of dimensions in the\n"
             + "   CompoundCategory.\n"
d271 2
a272 2
             + "      Coordinate #:     " + coordNo + "\n"
             + "      # Dimensions:     " + nDimens + "\n");
d281 1
a281 1
   private void requireCatMatchDimen (Category <?> theCat, int coordNo)
d285 1
a285 1
      theDimen = getCompoundCategory ().getDimensions ().get (coordNo - 1);
d297 1
a297 1
             + "      Coordinate #:     " + coordNo             + "\n"
@


1.4
log
@getSlice
@
text
@d114 5
a118 1
      return getImplementation ().toStringFor (this);
@


1.3
log
@Tuple ==> Compound
@
text
@d52 1
a52 1
                             @@SuppressWarnings("unchecked")
d87 1
a87 1
                             @@SuppressWarnings("unchecked")
d127 1
a127 1
         Implementation   theImpl,
d130 1
a130 1
      super (theCompCat, theImpl);
@


1.2
log
@Compound ==> Tuple
@
text
@d10 5
d16 5
a20 6
 * A Compound is an Element that represents a data object that's defined in
 * terms of other data objects. More precisely, a Compound represents an ordered
 * list or tuple or other Elements. These Elements are called the coordinates of
 * the Compound and the Compound stores this coordinate list. Each Compound
 * belongs to a particular CompoundCategory and a particular Fulfillment.
 * <br><br>
d22 2
a23 2
 * Please Note:<br>
 * The factory method for creating instances of this class is method ???
d26 1
a26 1
public final class Compound extends Element
d32 85
a125 1
         Fulfillment      theFulfillment,
d127 2
a128 1
         Element[]        theElemArr)
d130 9
a138 1
      super (theFulfillment, theCompCat);
d141 9
d154 152
@


1.1
log
@Created class Compound.
@
text
@@

