head	1.43;
access;
symbols
	start:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.43
date	2011.10.05.23.07.35;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.10.04.22.57.14;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.09.13.20.48.08;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.07.22.23.47.23;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2011.07.21.21.44.48;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.07.20.18.38.45;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.07.19.21.37.05;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.07.19.21.13.13;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.07.19.19.22.00;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.07.15.23.19.00;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.07.15.17.42.32;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.07.14.23.40.34;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.07.08.20.46.00;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.07.07.19.29.39;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.07.07.19.05.03;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.07.06.22.29.19;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.07.06.19.22.45;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.07.05.21.15.05;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.07.01.20.57.49;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.07.01.18.51.33;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.07.01.15.56.23;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.06.30.23.43.49;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.06.30.23.25.41;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.06.30.22.03.40;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.06.23.22.52.05;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.06.22.15.07.27;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.06.21.22.18.05;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.06.20.16.07.44;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.06.17.22.09.07;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.06.17.18.23.04;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.16.23.36.13;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.06.16.15.35.14;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.06.09.23.27.52;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.06.20.33.31;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.24.18.46.15;	author rjw;	state dead;
branches;
next	1.8;

1.8
date	2011.05.24.17.56.46;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.24.00.11.50;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.20.23.52.01;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.20.21.30.12;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.20.15.16.17;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.17.20.58.42;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.17.19.32.24;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.43
log
@ban ==> rej
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File PrimitiveCategory.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import java.io.PrintStream;

import static com.ibm.witm.Utility.*;

/*******************************************************************************
 * A PrimitiveCategory is an ItemCategory of Primitives.<br><br>
 * 
 * The factory method for creating instances of this class is
 * ModelScheme.newPrimitiveCategory (theName).
 *******************************************************************************
 */
public final class PrimitiveCategory extends ItemCategory <Primitive>
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * Verifies that this PrimitiveCategory is not the GLOBAL ItemCategory.
 *******************************************************************************
 */
   private void rejGlobalCat ()
      {
      if (isGlobalCategory ())
         throw
            new UnsupportedOperationException (
               "\n\n"
             + "   Call to PrimitiveCategory.newPrimitive (theName),\n"
             + "   where the PrimitiveCategory is the GLOBAL ItemCategory.\n");
      }
   
/*******************************************************************************
 * Verifies that theName does not match the name of a Primitive of this
 * PrimitiveCategory in the current ModelInstance.
 *******************************************************************************
 */
   private void rejDupName (String theName)
      {
      Primitive thePrim;
      
      thePrim = curModelInst ().getPrimitiveMgr (this).getPrimitive (theName);
      
      if (thePrim != null)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to PrimitiveCategory.newPrimitive (theName), where\n"
             + "   theName matches the name of an existing Primitive of\n"
             + "   the PrimitiveCategory in the current ModelInstance.\n"
             + "\n"
             + "      PrimitiveCategory: "   + getName () + "\n"
             + "      Name String:       \"" + theName    + "\"\n");
      }

////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////
   
   PrimitiveCategory (ModelScheme theScheme, String theName)
      {
      super (theScheme, theName);
      }

////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * No-op
 *******************************************************************************
 */    @@Override
   void freeze ()
      {
      }
   
/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */    @@Override
   void printConcrete (PrintStream theStream)
      {
      theStream.printf (
         "%n"
      +  "PrimitiveCategory %s:%n",
         getName ());
      }

/*******************************************************************************
 * {@@inheritDoc}
********************************************************************************
 */           @@Override 
   ItemMgr <?> newItemMgr (ModelInstance theInst)
      {
      return new PrimitiveMgr ();
      }

////////////////////////////////////////////////////////////////////////////////
// Public Non-Static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */             @@Override
   public String toString ()
      {
      return getName ();
      }
   
/*******************************************************************************
 * Factory method:<br>
 * Constructs a new Primitive for this PrimitiveCategory in the current
 * ModelInstance.
 *   
 * @@param  theName                       The name for the Primitive 
 * @@return                               The new Primitive
 * @@throws NullPointerException          If any argument is null
 * @@throws IllegalStateException         If the current ModelInstance is null
 * @@throws IllegalStateException         If the ModelScheme of this
 *                                       PrimitiveCategory does not match the
 *                                       ModelScheme of the current
 *                                       ModelInstance
 * @@throws UnsupportedOperationException If this PrimitiveCategory is the global
 *                                       ItemCategory
 * @@throws IllegalArgumentException      If theName matches the name of an
 *                                       existing Primitive of this
 *                                       PrimitiveCategory in the current
 *                                       ModelInstance
 *******************************************************************************
 */
   public Primitive newPrimitive (String theName)
      {
      rejNull                      (theName, "theName");
      reqCurModelInst              ();
      reqSchemeMatchesCurModelInst ();
      rejGlobalCat                 ();
      rejDupName                   (theName);

      return new Primitive (this, theName, curModelInst ());
      }

/*******************************************************************************
 * Primitive look-up method.
 * 
 * @@param  theName    The name of the Primitive to be retrieved
 * @@return            The Primitive of this PrimitiveCategory in the current
 *                    ModelInstance whose name matches theName, if any;
 *                    otherwise null
 *         
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalStateException    If the current ModelInstance is null
 * @@throws IllegalArgumentException If the ModelScheme of this PrimitiveCategory
 *                                  does not match the ModelScheme of the
 *                                  current ModelInstance
 *******************************************************************************
 */
   public Primitive get (String theName)
      {
      rejNull                      (theName, "theName");
      reqCurModelInst              ();
      reqSchemeMatchesCurModelInst ();
      
      return curModelInst ().getPrimitiveMgr (this).getPrimitive (theName);
      }
   
////////////////////////////////////////////////////////////////////////////////
}
@


1.42
log
@bar ==> ban
@
text
@d29 1
a29 1
   private void banGlobalCat ()
d44 1
a44 1
   private void banDupName (String theName)
d140 1
a140 1
      banNull                      (theName, "theName");
d143 2
a144 2
      banGlobalCat                 ();
      banDupName                   (theName);
d166 1
a166 1
      banNull                      (theName, "theName");
@


1.41
log
@Simplified toString.
@
text
@d29 1
a29 1
   private void barGlobalCat ()
d44 1
a44 1
   private void barDupName (String theName)
d140 1
a140 1
      barNull                      (theName, "theName");
d143 2
a144 2
      barGlobalCat                 ();
      barDupName                   (theName);
d166 1
a166 1
      barNull                      (theName, "theName");
@


1.40
log
@Class PeriodTrait
@
text
@d114 1
a114 1
      return concatenation ("PrimitiveCategory ", getName ());
@


1.39
log
@Removed first implementation of the period concept.
@
text
@d114 1
a114 1
      return concatenation ("PrimitiveCategory \"", getName (), "\"");
@


1.38
log
@Some renaming.
@
text
@a21 10
// Private Non-Static Fields
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * True, iff this is the PERIOD ItemCategory for its ModelScheme.
 *******************************************************************************
 */
   private final boolean amPeriodCategory;

////////////////////////////////////////////////////////////////////////////////
a68 2
      
      amPeriodCategory = theName.equals ("PERIOD");
d146 1
a146 4
      return 
         amPeriodCategory?
            new Period          (theName, curModelInst ()):
            new Primitive (this, theName, curModelInst ());
@


1.37
log
@Scheme ==> ModelScheme
@
text
@d39 1
a39 1
   private void prohibitGlobalCat ()
d54 1
a54 1
   private void prohibitDupName (String theName)
d76 1
a76 1
   PrimitiveCategory (ModelScheme theModelScheme, String theName)
d78 1
a78 1
      super (theModelScheme, theName);
d138 4
a141 3
 * @@throws IllegalStateException         If the ModelScheme of this PrimitiveCategory
 *                                       does not match the ModelScheme of the
 *                                       current ModelInstance
d152 5
a156 5
      prohibitNull                     (theName, "theName");
      requireCurModelInst              ();
      requireSchemeMatchesCurModelInst ();
      prohibitGlobalCat                ();
      prohibitDupName                  (theName);
d174 3
a176 3
 * @@throws IllegalArgumentException If the ModelScheme of this PrimitiveCategory does
 *                                  not match the ModelScheme of the current
 *                                  ModelInstance
d181 3
a183 3
      prohibitNull                     (theName, "theName");
      requireCurModelInst              ();
      requireSchemeMatchesCurModelInst ();
@


1.36
log
@Embodiment ==> ModelInstance
@
text
@d16 1
a16 1
 * Scheme.newPrimitiveCategory (theName).
d26 1
a26 1
 * True, iff this is the PERIOD ItemCategory for its Scheme.
d76 1
a76 1
   PrimitiveCategory (Scheme theScheme, String theName)
d78 1
a78 1
      super (theScheme, theName);
d138 2
a139 2
 * @@throws IllegalStateException         If the Scheme of this PrimitiveCategory
 *                                       does not match the Scheme of the
d173 2
a174 2
 * @@throws IllegalArgumentException If the Scheme of this PrimitiveCategory does
 *                                  not match the Scheme of the current
@


1.35
log
@Efficient String concatenation.
@
text
@d51 1
a51 1
 * PrimitiveCategory in the current Embodiment.
d58 1
a58 1
      thePrim = curEmbodiment ().getPrimitiveMgr (this).getPrimitive (theName);
d66 1
a66 1
             + "   the PrimitiveCategory in the current Embodiment.\n"
d111 1
a111 1
   ItemMgr <?> newItemMgr (Embodiment theEmb)
d132 1
a132 1
 * Embodiment.
d137 1
a137 1
 * @@throws IllegalStateException         If the current Embodiment is null
d140 1
a140 1
 *                                       current Embodiment
d146 1
a146 1
 *                                       Embodiment
d151 5
a155 5
      prohibitNull               (theName, "theName");
      requireCurEmbodiment       ();
      requireSchemeMatchesCurEmb ();
      prohibitGlobalCat          ();
      prohibitDupName            (theName);
d159 2
a160 2
            new Period          (theName, curEmbodiment ()):
            new Primitive (this, theName, curEmbodiment ());
d168 1
a168 1
 *                    Embodiment whose name matches theName, if any;
d172 1
a172 1
 * @@throws IllegalStateException    If the current Embodiment is null
d175 1
a175 1
 *                                  Embodiment
d180 3
a182 3
      prohibitNull               (theName, "theName");
      requireCurEmbodiment       ();
      requireSchemeMatchesCurEmb ();
d184 1
a184 1
      return curEmbodiment ().getPrimitiveMgr (this).getPrimitive (theName);
@


1.34
log
@newOperation
@
text
@d126 1
a126 1
      return "PrimitiveCategory \"" + getName () + "\"";
@


1.33
log
@Category ==> ItemCategory
@
text
@d103 1
a103 1
      +  "PrimitiveCategory \"%s\":%n",
@


1.32
log
@Signatures with argument names.
@
text
@d13 1
a13 1
 * A PrimitiveCategory is an Category of Primitives.<br><br>
d19 1
a19 1
public final class PrimitiveCategory extends Category <Primitive>
d26 1
a26 1
 * True, iff this is the PERIOD Category for its Scheme.
d36 1
a36 1
 * Verifies that this PrimitiveCategory is not the GLOBAL Category.
d46 1
a46 1
             + "   where the PrimitiveCategory is the GLOBAL Category.\n");
d142 1
a142 1
 *                                       Category
@


1.31
log
@Class ProblemMgr.
@
text
@d16 1
a16 1
 * Scheme.newPrimitiveCategory (String).
d45 1
a45 1
             + "   Call to PrimitiveCategory.newPrimitive (String),\n"
d64 2
a65 2
             + "   Call to PrimitiveCategory.newPrimitive (String), where the\n"
             + "   name String matches the name of an existing Primitive of\n"
@


1.30
log
@PERIOD Primitives
@
text
@d6 1
a6 1
package       com.ibm.witm;
@


1.29
log
@Period Primitives.
@
text
@d159 1
a159 1
            new Period    (this, theName, curEmbodiment ()):
@


1.28
log
@Removed period index Property.
@
text
@d22 10
d36 1
a36 1
 * Verifies that this PrimitiveCategory is not the global Category.
d41 1
a41 1
      if (isGlobal ())
d46 1
a46 1
             + "   where the PrimitiveCategory is the global Category.\n");
d79 2
d123 1
a123 1
 */      @@Override
d157 4
a160 1
      return new Primitive (this, theName, curEmbodiment ());
@


1.27
log
@Moved some responsibility to constructors.
@
text
@d33 1
a33 1
            new IllegalArgumentException (
d122 13
a134 10
 * @@param  theName                  The name for the Primitive 
 * @@return                          The new Primitive
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalStateException    If the current Embodiment is null
 * @@throws IllegalStateException    If the Scheme of this PrimitiveCategory does
 *                                  not match the Scheme of the current
 *                                  Embodiment
 * @@throws IllegalArgumentException If theName matches the name of an existing
 *                                  Primitive of this PrimitiveCategory in the
 *                                  current Embodiment
@


1.26
log
@Implementation ==> Embodiment
@
text
@a135 2
      Primitive thePrim;
      
d141 2
a142 6
      
      thePrim = new Primitive (this, theName, curEmbodiment ());
      
      curEmbodiment ().getPrimitiveMgr (this).store (thePrim);
      
      return thePrim;
@


1.25
log
@get Implementation ==> PrimitiveCategory
@
text
@d41 1
a41 1
 * PrimitiveCategory in the current Implementation.
d48 1
a48 2
      thePrim =
         curImplementation ().getPrimitiveMgr (this).getPrimitive (theName);
d56 1
a56 1
             + "   the PrimitiveCategory in the current Implementation.\n"
d99 1
a99 1
   ItemMgr <?> newItemMgr (Implementation theImple)
d120 1
a120 1
 * Implementation.
d125 1
a125 1
 * @@throws IllegalStateException    If the current Implementation is null
d128 1
a128 1
 *                                  Implementation
d131 1
a131 1
 *                                  current Implementation
d139 2
a140 2
      requireCurImplementation   ();
      requireSchemeMatchesCurImp ();
d144 1
a144 1
      thePrim = new Primitive (this, theName, curImplementation ());
d146 1
a146 1
      curImplementation ().getPrimitiveMgr (this).store (thePrim);
d156 1
a156 1
 *                    Implementation whose name matches theName, if any;
d160 1
a160 1
 * @@throws IllegalStateException    If the current Implementation is null
d163 1
a163 1
 *                                  Implementation
d169 2
a170 2
      requireCurImplementation   ();
      requireSchemeMatchesCurImp ();
d172 1
a172 1
      return curImplementation ().getPrimitiveMgr (this).getPrimitive (theName);
@


1.24
log
@Moved newPrimitive from Implementation to PrimitiveCategory.
@
text
@d152 24
@


1.23
log
@Moved newProperty to class Category
@
text
@d10 2
d22 42
d118 34
@


1.22
log
@//=== ==> /////
@
text
@a7 2
import static com.ibm.witm.Utility.*;

a8 2
import java.util.Arrays;
import java.util.List;
@


1.21
log
@Re-arranged source code.
@
text
@d2 1
a2 1
//==============================================================================
d4 1
a4 1
//==============================================================================
d23 1
a23 1
//==============================================================================
d25 1
a25 1
//==============================================================================
d32 1
a32 1
//==============================================================================
d34 1
a34 1
//==============================================================================
d65 1
a65 1
//==============================================================================
d67 1
a67 1
//==============================================================================
d78 1
a78 1
//==============================================================================
@


1.20
log
@Various revisions.
@
text
@d24 1
a24 14
// Public
//==============================================================================

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */      @@Override
   public String toString ()
      {
      return "PrimitiveCategory \"" + getName () + "\"";
      }
   
//==============================================================================
// Package Internal
a26 4
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
d32 4
d66 13
@


1.19
log
@getSlice
@
text
@d30 2
a31 2
 */
   @@Override public String toString ()
d52 2
a53 2
 */
   @@Override void freeze ()
d60 2
a61 2
 */
   @@Override void printConcrete (PrintStream theStream)
d69 9
@


1.18
log
@Doc comments
@
text
@a60 9
   @@Override ItemMgr <?> newItemMgr ()
      {
      return new PrimitiveMgr ();
      }
   
/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */
@


1.17
log
@Revised comments, etc.
@
text
@d17 2
a18 3
 * Please Note:<br>
 * The factory method for creating instances of this class is method
 * newPrimitiveCategory of class Scheme.
@


1.16
log
@Category.newItemMgr.
@
text
@d28 3
a30 3
/* *****************************************************************************
 * Doc comment inherited.
 * *****************************************************************************
d58 3
a60 3
/* *****************************************************************************
 * Doc comment inherited.
 * *****************************************************************************
d67 3
a69 3
/* *****************************************************************************
 * Doc comment inherited.
 * *****************************************************************************
@


1.15
log
@myPrimitiveCategories and myTupleCategories ==> myCategories
@
text
@d62 9
@


1.14
log
@Replaced ItemCategory with Category <?>.
@
text
@d11 1
d51 1
a51 1
 * Prints this PrimitiveCategory to theStream.
d54 9
a62 1
   void print (PrintStream theStream)
a67 2
      
      printProperties (theStream);
@


1.13
log
@ItemMgr <I>
@
text
@d14 1
a14 1
 * A PrimitiveCategory is an ItemCategory for Primitives.<br><br>
@


1.12
log
@Added Category <I extends Item>
@
text
@a46 2
      
      myIndex = theScheme.getPrimitiveCategories ().size ();
a62 20
/*******************************************************************************
 * @@return A unique index for this PrimitiveCategory.
 *******************************************************************************
 */
   int getIndex ()
      {
      return myIndex;
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * A unique index for this PrimitiveCategory.<br>
 * # of PrimitiveCategories in the Scheme that were constructed before this one.
 *******************************************************************************
 */
   private final int myIndex;

@


1.11
log
@newPrimitiveCategory with current Scheme.
@
text
@d21 1
a21 1
public final class PrimitiveCategory extends ItemCategory
@


1.10
log
@Type ==> Category
@
text
@a48 2
      
      theScheme.store (this);
@


1.9
log
@Category ==> Type
@
text
@d14 1
a14 1
 * A PrimitiveCategory is an ElementCategory for Primitives.<br><br>
d21 1
a21 1
public final class PrimitiveCategory extends ElementCategory
a26 72
/*******************************************************************************
 * Factory method:<br>
 * Constructs a new Primitive of this PrimitiveCategory
 *   
 * @@param  theEmbodiment           The Embodiment to which the Primitive will
 *                                  belong
 * @@param  theName                  The name for the Primitive 
 * @@return                          The new Primitive
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theEmbodiment does not
 *                                  match the Scheme of this PrimitiveCategory
 * @@throws IllegalArgumentException If theName matches the name of an existing
 *                                  Primitive of this PrimitiveCategory in
 *                                  theEmbodiment
 *******************************************************************************
 */
   public Primitive newPrimitive (Embodiment theEmbodiment, String theName)
      {
      prohibitNull (theEmbodiment, "theEmbodiment");
      prohibitNull (theName,        "theName");
      
      requireSchemesMatch (theEmbodiment);
      prohibitDupName     (theEmbodiment, theName);
      
      return theEmbodiment.getPrimitiveMgr (this).newPrimitive (theName);
      }

/*******************************************************************************
 * Primitive List method
 * 
 * @@param  theEmbodiment The Embodiment whose Primitives are to be listed.
 * @@return An unmodifiable List of all Primitives in a Embodiment that belong
 *         to this PrimitiveCategory, listed in the order in which they were
 *         created.
 * 
 * @@throws NullPointerException     If theEmbodiment is null
 * @@throws IllegalArgumentException If the Scheme of theEmbodiment does not
 *                                  match the Scheme of this PrimitiveCategory.
 *******************************************************************************
 */
   public List <Primitive> getAll (Embodiment theEmbodiment)
      {
      prohibitNull        (theEmbodiment, "theEmbodiment");
      
      requireSchemesMatch (theEmbodiment);
   
      return theEmbodiment.getPrimitiveMgr (this).getPrimitives ();
      }
   
/*******************************************************************************
 * Primitive look-up method
 * 
 * @@param  theEmbodiment The Embodiment whose Primitive is to be retrieved
 * @@param  theName        The name of the Primitive to be retrieved
 * @@return The Primitive of this PrimitiveCategory in theEmbodiment whose name
 *         matches theName, if any; otherwise null
 *         
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theEmbodiment does not match
 *                                  the Scheme of this PrimitiveCategory
 *******************************************************************************
 */
   public Primitive get (Embodiment theEmbodiment, String theName)
      {
      prohibitNull        (theEmbodiment, "theEmbodiment");
      prohibitNull        (theName,        "theName");
      
      requireSchemesMatch (theEmbodiment);
      
      return theEmbodiment.getPrimitiveMgr (this).getPrimitive (theName);
      }
   
d49 2
a80 45
 * Verifies that the Scheme of theEmbodiment matches the Scheme of this
 * PrimitiveCategory.
 *******************************************************************************
 */
   private void requireSchemesMatch (Embodiment theEmbodiment)
      {
      if (theEmbodiment.getScheme () != getScheme ())
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to a PrimitiveCategory method will a Embodiment\n"
             + "   argument whose Scheme does not match the Scheme of the\n"
             + "   PrimitiveCategory.\n"
             + "\n"
             + "      Embodiment Scheme:       "
             +        theEmbodiment.getScheme ().getName () + "\n"
             + "      PrimitiveCategory Scheme: "
             +                       getScheme ().getName () + "\n");
      }
 
/*******************************************************************************
 * Verifies that theName does not match the name of a Primitive of this
 * PrimitiveCategory in theEmbodiment.
 *******************************************************************************
 */
   @@SuppressWarnings("unused")
   private void prohibitDupName (Embodiment theEmbodiment, String theName)
      {
      if (theEmbodiment.getPrimitiveMgr (this).getPrimitive (theName) != null)
         {
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to\n"
             + "   thePrimitiveCategory.newPrimitive (theEmbodiment, theName),"
             + "\n"
             + "   where the theName matches the name of an existing\n"
             + "   Primitive of thePrimitiveCategory in theEmbodiment.\n"
             + "\n"
             + "      PrimitiveCategory: "   + getName () + "\n"
             + "      Name:              \"" + theName    + "\"\n");
         }
      }
   
/*******************************************************************************
@


1.8
log
@Fulfillment ==> Embodiment
@
text
@@


1.7
log
@Primitives
@
text
@d31 1
a31 1
 * @@param  theFulfillment           The Fulfillment to which the Primitive will
d36 1
a36 1
 * @@throws IllegalArgumentException If the Scheme of theFulfillment does not
d40 1
a40 1
 *                                  theFulfillment
d43 1
a43 1
   public Primitive newPrimitive (Fulfillment theFulfillment, String theName)
d45 1
a45 1
      prohibitNull (theFulfillment, "theFulfillment");
d48 2
a49 2
      requireSchemesMatch (theFulfillment);
      prohibitDupName     (theFulfillment, theName);
d51 1
a51 1
      return theFulfillment.getPrimitiveMgr (this).newPrimitive (theName);
d57 2
a58 2
 * @@param  theFulfillment The Fulfillment whose Primitives are to be listed.
 * @@return An unmodifiable List of all Primitives in a Fulfillment that belong
d62 2
a63 2
 * @@throws NullPointerException     If theFulfillment is null
 * @@throws IllegalArgumentException If the Scheme of theFulfillment does not
d67 1
a67 1
   public List <Primitive> getAll (Fulfillment theFulfillment)
d69 1
a69 1
      prohibitNull        (theFulfillment, "theFulfillment");
d71 1
a71 1
      requireSchemesMatch (theFulfillment);
d73 1
a73 1
      return theFulfillment.getPrimitiveMgr (this).getPrimitives ();
d79 1
a79 1
 * @@param  theFulfillment The Fulfillment whose Primitive is to be retrieved
d81 1
a81 1
 * @@return The Primitive of this PrimitiveCategory in theFulfillment whose name
d85 1
a85 1
 * @@throws IllegalArgumentException If the Scheme of theFulfillment does not match
d89 1
a89 1
   public Primitive get (Fulfillment theFulfillment, String theName)
d91 1
a91 1
      prohibitNull        (theFulfillment, "theFulfillment");
d94 1
a94 1
      requireSchemesMatch (theFulfillment);
d96 1
a96 1
      return theFulfillment.getPrimitiveMgr (this).getPrimitive (theName);
d151 1
a151 1
 * Verifies that the Scheme of theFulfillment matches the Scheme of this
d155 1
a155 1
   private void requireSchemesMatch (Fulfillment theFulfillment)
d157 1
a157 1
      if (theFulfillment.getScheme () != getScheme ())
d161 1
a161 1
             + "   Call to a PrimitiveCategory method will a Fulfillment\n"
d165 2
a166 2
             + "      Fulfillment Scheme:       "
             +        theFulfillment.getScheme ().getName () + "\n"
d173 1
a173 1
 * PrimitiveCategory in theFulfillment.
d177 1
a177 1
   private void prohibitDupName (Fulfillment theFulfillment, String theName)
d179 1
a179 1
      if (theFulfillment.getPrimitiveMgr (this).getPrimitive (theName) != null)
d185 1
a185 1
             + "   thePrimitiveCategory.newPrimitive (theFulfillment, theName),"
d188 1
a188 1
             + "   Primitive of thePrimitiveCategory in theFulfillment.\n"
@


1.6
log
@CompoundCategory
@
text
@d11 1
d27 72
d100 2
a101 2
 * The doc comment is inherited
 *******************************************************************************
d151 45
@


1.5
log
@Check for duplicate ComponentCategory name.
@
text
@d10 2
d51 14
@


1.4
log
@@@Override annotations
@
text
@d24 2
a25 1
/*******************************************************************************
@


1.3
log
@Class Property
@
text
@a24 1
 * Override from class Object
d27 1
a27 1
   public String toString ()
@


1.2
log
@Unique Property names.
@
text
@d13 1
a13 1
 * Please Note: <br>
d62 1
a62 1
 * A unique index for this PrimitiveCategory. <br>
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
 * A PrimitiveCategory is an ElementCategory for Primitives.</br></br>
d13 1
a13 1
 * Please Note: </br>
d62 1
a62 1
 * A unique index for this PrimitiveCategory. </br>
@


1.1.1.1
log
@Renaming WIT-ML to WIT-M.

@
text
@@
