head	1.14;
access;
symbols
	start:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2011.06.06.16.39.04;	author rjw;	state dead;
branches;
next	1.13;

1.13
date	2011.05.31.19.26.17;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.27.21.22.42;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.26.18.07.19;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.24.18.46.13;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.24.17.56.44;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.24.00.11.49;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.20.21.57.19;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.20.19.52.34;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.20.19.26.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.18.19.54.58;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.18.17.46.03;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.17.23.38.04;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Element     ==> Item
ElementType ==> ItemTYpe
@
text
@
//==============================================================================
// WIT-M Source File Element.java.
//==============================================================================

package       com.ibm.witm;

import static com.ibm.witm.Utility.*;

/*******************************************************************************
 * An Element represents a data object in a WIT application problem. Each
 * Element belongs to a particular Implementation and a particular ElementType.
 * The Elements that belong to a given Implementation are the building blocks
 * that make up the Implementation.
 *******************************************************************************
 */
public abstract class Element
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Accessor.
 * 
 * @@return The ElementType to which this Element belongs
 *******************************************************************************
 */
   public final ElementType getElementType ()
      {
      return myElementType;
      }

/*******************************************************************************
 * Accessor.
 * 
 * @@return The Implementation that owns this Element
 *******************************************************************************
 */
   public final Implementation getImplementation ()
      {
      return myImplementation;
      }

/*******************************************************************************
 * Casting method
 * 
 * @@return this Element, cast as a Primitive
 * 
 * @@throws ClassCastException If this Element is not a Primitive
 *******************************************************************************
 */
   public final Primitive getPrimitive ()
      {
      return (Primitive) this;
      }

/*******************************************************************************
 * Sets the value of a Property for this Element to a specified value, an
 * instance of type V.<br>
 * Specifically, a reference to the specified V instance is stored.
 * 
 * @@param theProp  The Property whose value is to be set
 * @@param theValue The V instance to which the Property value is to be set.
 *
 * @@throws NullPointerException     If theProp is null
 * @@throws IllegalArgumentException If the ElementType of theProp does not
 *                                  match the ElementType of this Element.
 *******************************************************************************
 */
   public final <V> void set (Property <V> theProp, V theValue)
      {
      prohibitNull        (theProp, "theProp");
      
      requireElTypesMatch (theProp, "set");
      
      myPropValueArr[theProp.getIndex ()] = theValue;
      }

/*******************************************************************************
 * Retrieves the value of a Property for this Element.
 * 
 * @@param theProp The Property whose value is to be retrieved
 * @@return        A reference to the current value of the Property for this
 *                Element
 * 
 * @@throws NullPointerException     If theProp is null
 * @@throws IllegalArgumentException If the ElementType of theProp does not
 *                                  match the ElementType of this Element.
 *******************************************************************************
 */
                      @@SuppressWarnings("unchecked")
   public final <V> V get (Property <V> theProp)
      {
      prohibitNull        (theProp, "theProp");
      
      requireElTypesMatch (theProp, "get");
      
      return (V) myPropValueArr[theProp.getIndex ()];
      }

//==============================================================================
// Package-Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   Element (ElementType theElType, Implementation theImp)
      {
      assert (theImp.getScheme () == theElType.getScheme ());
      
      myElementType    = theElType;
      
      myImplementation = theImp;
      
      myPropValueArr   = new Object[theElType.getNProperties ()];
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * Verifies that the ElementType of theProp matches the ElementType of
 * this Element.
 *******************************************************************************
 */
   private final void requireElTypesMatch (
         Property <?> theProp,
         String       methName)
      {
      if (theProp.getElementType () != myElementType)
         {
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to theElem." + methName + " (...) with a Property of\n"
             + "   an ElementType that does not match the\n"
             + "   ElementType to which the Element belongs.\n"
             + "\n"
             + "      " + this    + "\n"
             + "      " + theProp + " of "
                        + theProp.getElementType () + "\n");
         }
      }
   
/*******************************************************************************
 * The ElementType to which this Element belongs.
 *******************************************************************************
 */
   private final ElementType myElementType;
   
/*******************************************************************************
 * The Implementation that owns this Element.
 *******************************************************************************
 */
   private final Implementation myImplementation;
   
/*******************************************************************************
 * myPropValueArr[theProp.getIndex ()] is the value of theProp associated with
 * this Element.
 *******************************************************************************
 */
   private final Object[] myPropValueArr;
   
//==============================================================================
}
@


1.13
log
@Embodiment ==> Implementation
@
text
@@


1.12
log
@Coordinate List
@
text
@d12 3
a14 3
 * Element belongs to a particular Embodiment and a particular ElementType.
 * The Elements that belong to a given Embodiment are the building blocks that
 * make up the Embodiment.
d37 1
a37 1
 * @@return The Embodiment that owns this Element
d40 1
a40 1
   public final Embodiment getEmbodiment ()
d42 1
a42 1
      return myEmbodiment;
d110 1
a110 1
   Element (ElementType theElType, Embodiment theEmbodiment)
d112 1
a112 1
      assert (theEmbodiment.getScheme () == theElType.getScheme ());
d114 1
a114 1
      myElementType  = theElType;
d116 1
a116 1
      myEmbodiment   = theEmbodiment;
d118 1
a118 1
      myPropValueArr = new Object[theElType.getNProperties ()];
d156 1
a156 1
 * The Embodiment that owns this Element.
d159 1
a159 1
   private final Embodiment myEmbodiment;
@


1.11
log
@Removed ThreadLocal.
@
text
@d59 3
a61 3
 * Sets the value of a Property for this Element to a specified value.<br>
 * Specifically, a reference to the specified value is stored (i.e., a shallow
 * copy)
d64 1
a64 1
 * @@param theValue The value to which the Property value is to be set.
d84 2
a85 1
 * @@return        The retrieved Property value (shallow copy)
@


1.10
log
@Category ==> Type
@
text
@d59 3
a61 1
 * Sets the value of a Property for this Element to a specified value.
d65 1
a65 1
 * 
d84 1
a84 1
 * @@return        The retrieved Property value
@


1.9
log
@Fulfillment ==> Embodiment
@
text
@d12 1
a12 1
 * Element belongs to a particular Embodiment and a particular ElementCategory.
d26 1
a26 1
 * @@return The ElementCategory to which this Element belongs
d29 1
a29 1
   public final ElementCategory getElementCategory ()
d31 1
a31 1
      return myElementCategory;
d65 2
a66 2
 * @@throws IllegalArgumentException If the ElementCategory of theProp does not
 *                                  match the ElementCategory of this Element.
d71 1
a71 1
      prohibitNull       (theProp, "theProp");
d73 1
a73 1
      requireElCatsMatch (theProp, "set");
d85 2
a86 2
 * @@throws IllegalArgumentException If the ElementCategory of theProp does not
 *                                  match the ElementCategory of this Element.
d92 1
a92 1
      prohibitNull       (theProp, "theProp");
d94 1
a94 1
      requireElCatsMatch (theProp, "get");
d107 1
a107 1
   Element (ElementCategory theElCat, Embodiment theEmbodiment)
d109 1
a109 1
      assert (theEmbodiment.getScheme () == theElCat.getScheme ());
d111 1
a111 1
      myElementCategory = theElCat;
d113 1
a113 1
      myEmbodiment     = theEmbodiment;
d115 1
a115 1
      myPropValueArr    = new Object[theElCat.getNProperties ()];
d123 1
a123 1
 * Verifies that the ElementCategory of theProp matches the ElementCategory of
d127 3
a129 1
   private final void requireElCatsMatch (Property <?> theProp, String methName)
d131 1
a131 1
      if (theProp.getElementCategory () != myElementCategory)
d137 2
a138 2
             + "   an ElementCategory that does not match the\n"
             + "   ElementCategory to which the Element belongs.\n"
d142 1
a142 1
                        + theProp.getElementCategory () + "\n");
d147 1
a147 1
 * The ElementCategory to which this Element belongs.
d150 1
a150 1
   private final ElementCategory myElementCategory;
@


1.8
log
@Primitives
@
text
@d12 3
a14 3
 * Element belongs to a particular Fulfillment and a particular ElementCategory.
 * The Elements that belong to a given Fulfillment are the building blocks that
 * make up the Fulfillment.
d37 1
a37 1
 * @@return The Fulfillment that owns this Element
d40 1
a40 1
   public final Fulfillment getFulfillment ()
d42 1
a42 1
      return myFulfillment;
d107 1
a107 1
   Element (ElementCategory theElCat, Fulfillment theFulfillment)
d109 1
a109 1
      assert (theFulfillment.getScheme () == theElCat.getScheme ());
d113 1
a113 1
      myFulfillment     = theFulfillment;
d151 1
a151 1
 * The Fulfillment that owns this Element.
d154 1
a154 1
   private final Fulfillment myFulfillment;
@


1.7
log
@Exception messages.
@
text
@d107 1
a107 1
   Element (Fulfillment theFulfillment, ElementCategory theElCat)
d109 3
a111 1
      assert (theElCat.getScheme () == theFulfillment.getScheme ());
a114 2
      myElementCategory = theElCat;
      
d145 1
a145 1
 * The Fulfillment that owns this Element.
d148 1
a148 1
   private final Fulfillment myFulfillment;
d151 1
a151 1
 * The ElementCategory to which this Element belongs.
d154 1
a154 1
   private final ElementCategory myElementCategory;
@


1.6
log
@theElem.getPrimitive ()
@
text
@d134 2
a135 2
             + "   theElem." + methName + " (...) was called with a Property\n"
             + "   of an ElementCategory that does not match the\n"
@


1.5
log
@AppProblem ==> Fulfillment
@
text
@d46 13
@


1.4
log
@theElem.get (...)
@
text
@d12 3
a14 3
 * Element belongs to a particular AppProblem and a particular ElementCategory.
 * The Elements that belong to a given AppProblem are the building blocks that
 * make up the AppProblem.
d37 1
a37 1
 * @@return The AppProblem that owns this Element
d40 1
a40 1
   public final AppProblem getAppProblem ()
d42 1
a42 1
      return myAppProblem;
d94 1
a94 1
   Element (AppProblem theAppProblem, ElementCategory theElCat)
d96 1
a96 1
      assert (theElCat.getScheme () == theAppProblem.getScheme ());
d98 1
a98 1
      myAppProblem      = theAppProblem;
d132 1
a132 1
 * The AppProblem that owns this Element.
d135 1
a135 1
   private final AppProblem myAppProblem;
@


1.3
log
@Error testing for theElem.set.
@
text
@d46 1
a46 1
 * Sets a Property value for this Element to a specified value.
d65 21
@


1.2
log
@theElem.set (...)
@
text
@d102 5
a106 1
             + "   ElementCategory to which theElem belongs.");
d109 1
a109 15
   /*
   private final void requireFoo (Property <?> theProp)
      {
      if (theProp.get....
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   An ElementCategory was passed as an argument to an\n"
             + "   AppProblem method, where the Scheme of the ElementCategory\n"
             + "   does not match the Scheme of theAppProblem.\n"
             + "\n"
             + "      ElementCategory Scheme: " + theElCat.getScheme () + "\n"
             + "      AppProblem      Scheme: " +          getScheme () + "\n");
      }
   */
@


1.1
log
@Initial revision
@
text
@d24 1
a24 1
 * Abstract Accessor.
d29 4
a32 1
   public abstract ElementCategory getElementCategory ();
d45 20
d73 1
a73 1
   Element (AppProblem theAppProblem)
d75 7
a81 1
      myAppProblem = theAppProblem;
d89 32
d126 13
@


1.1.1.1
log
@Renaming WIT-ML to WIT-M.

@
text
@@
