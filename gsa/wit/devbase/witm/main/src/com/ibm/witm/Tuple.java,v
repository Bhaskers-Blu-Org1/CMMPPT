head	1.35;
access;
symbols;
locks; strict;
comment	@# @;


1.35
date	2011.10.05.23.07.37;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.10.04.22.57.16;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.07.20.18.38.46;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.07.19.21.37.07;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.07.19.21.13.16;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.07.19.19.22.01;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.07.15.21.46.55;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.07.15.17.42.33;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.07.14.23.53.09;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.07.14.23.40.36;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.07.14.22.54.53;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.07.12.22.40.00;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.06.22.22.09.44;	author rjw;	state dead;
branches;
next	1.22;

1.22
date	2011.06.22.15.07.28;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.06.21.22.18.06;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.06.20.21.44.04;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.06.20.17.48.37;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.06.17.18.23.05;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.06.16.16.11.38;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.06.15.22.25.20;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.06.10.21.55.15;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.06.09.18.19.23;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.07.18.37.07;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.06.06.20.33.33;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.06.06.16.39.08;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.31.19.26.21;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.27.23.55.12;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.27.22.12.25;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.27.21.22.42;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.26.18.49.08;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.24.23.44.42;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.24.18.46.16;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.24.17.56.48;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.24.00.11.51;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.22.02.10.43;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.35
log
@ban ==> rej
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File Tuple.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/*******************************************************************************
 * A Tuple is an Item that represents a data object that's defined in terms
 * of other data objects. More precisely, a Tuple represents an ordered list
 * of other Items. These Items are called the coordinates of the Tuple and
 * the Tuple stores this coordinate list. Each Tuple belongs to a
 * particular TupleCategory and a particular ModelInstance.<br><br>
 * 
 * The factory method for creating instances of this class is
 * TupleCategory.newTuple (theCoords)
 *******************************************************************************
 */
public final class Tuple extends Item
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-static Fields
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * The coordinate List of this Tuple.<br>
 * (An unmodifiable ArrayList)
 *******************************************************************************
 */
   private final List <Item> myCoordinateList;
   
////////////////////////////////////////////////////////////////////////////////
// Private Non-static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * Verifies that the ModelScheme of theItemCat matches the ModelScheme of this Tuple.<br>
 * To be called by get (ItemCategory <I>).
 *******************************************************************************
 */
   private void reqMatchingScheme (ItemCategory <?> theItemCat)
      {
      if (theItemCat.getModelScheme () != getModelScheme ())
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Tuple.get (ItemCategory <I>) with a ItemCategory\n"
             + "   whose ModelScheme does not match the ModelScheme of the\n"
             + "   Tuple.\n"
             + "\n"
             + "      ItemCategory:   " + theItemCat       .getName () + "\n"
             + "         ModelScheme: " + theItemCat.getModelScheme ()
                                                           .getName () + "\n"
             + "      Tuple:          " + this                         + "\n"
             + "         ModelScheme: " + getModelScheme ().getName () + "\n");
      }

/*******************************************************************************
 * Verifies that theItemCat is a dimension of the TupleCategory of this Tuple.
 * <br>
 * To be called by get (ItemCategory <I>).
 * 
 * @@param dimIdx The valued returned by
 *               getTupleCategory ().uniqueDimenIndex (theItemCat)
 *******************************************************************************
 */
   private void reqDimen (ItemCategory <?> theItemCat, int dimIdx)
      {
      if (dimIdx == -1)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Tuple.get (theItemCat) with a ItemCategory that\n"
             + "   is not a dimension of the TupleCategory of the Tuple.\n"
             + "\n"
             + "      ItemCategory: " + theItemCat.getName () + "\n"
             + "      Tuple:        " + this                  + "\n");
      }

/*******************************************************************************
 * Verifies that theItemCat does not occur more than once as a dimension of the
 * TupleCategory of this Tuple.<br>
 * To be called by get (ItemCategory <I>).
 * 
 * @@param dimIdx The valued returned by
 *               getTupleCategory ().uniqueDimenIndex (theItemCat)
 *******************************************************************************
 */
   private void rejDupDimen (ItemCategory <?> theItemCat, int dimIdx)
      {
      if (dimIdx == -2)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Tuple.get (theItemCat) with a ItemCategory that\n"
             + "   occurs more than once in the dimensions of the\n"
             + "   TupleCategory of the Tuple.\n"
             + "\n"
             + "      ItemCategory: " + theItemCat.getName () + "\n"
             + "      Tuple:        " + this                  + "\n");
      }

/*******************************************************************************
 * Verifies that theDimID applies to the TupleCatagory of this Tuple.
 *******************************************************************************
 */
   private void reqApplies (DimensionID <?> theDimID)
      {
      if (theDimID.getTupleCategory () != getTupleCategory ())
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Tuple.get (theDimID), where theDimID does not\n"
             + "   apply to the TupleCategory of the Tuple.\n"
             + "\n"
             + "      TupleCategory:    " + getTupleCategory ().
                                               getName () + "\n"
             + "      DimensionID:      " + theDimID.
                                               getName () + "\n"
             + "         Applies To:    " + theDimID.getTupleCategory ().
                                               getName () + "\n");
      }

////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////
   
   Tuple (
         TupleCategory theTupleCat,
         ModelInstance theInst,
         Item[]        theCoordArr)
      {
      super (theTupleCat, theInst);
      
      ArrayList <Item> theCoordAList;
      
      theCoordAList = new ArrayList <Item> (Arrays.asList (theCoordArr));
      
      theCoordAList.trimToSize ();
      
      myCoordinateList = Collections.unmodifiableList (theCoordAList);
      
      theInst.getTupleMgr (theTupleCat).storeTuple (this);
      }
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * @@return The coordinate list of this Tuple as an unmodifiable ArrayList
 *******************************************************************************
 */
   List <Item> getCoordinateList ()
      {
      return myCoordinateList;
      }

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */      @@Override
   String getID ()
      {
      TupleMgr theTupleMgr;
      
      theTupleMgr = getModelInstance ().getTupleMgr (getTupleCategory ());
      
      return theTupleMgr.makeIDFor (this);
      }

////////////////////////////////////////////////////////////////////////////////
// Public Non-static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * @@return The TupleCategory of this Tuple
 *******************************************************************************
 */
   public TupleCategory getTupleCategory ()
      {
      return (TupleCategory) getItemCategory ();
      }

/*******************************************************************************
 * If there is exactly one dimension in the TupleCatagory for this Tuple
 * that matches theItemCat, the corresponding coordinate for this Tuple is
 * returned.
 * 
 * @@param  <I>        The type of Item to be retrieved (either Primitive or
 *                    Tuple)
 * @@param  theItemCat The ItemCategory <I> of the dimension being specified.
 * @@return            The coordinate of this Tuple for the specified dimension
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the ModelScheme of theItemCat does not
 *                                  match the ModelScheme of this Tuple.
 * @@throws IllegalArgumentException If theItemCat is not a dimension of the
 *                                  TupleCategory of this Tuple
 * @@throws IllegalArgumentException If theItemCat occurs more than once as a
 *                                  dimension of the TupleCategory of this Tuple
 *******************************************************************************
 */                         @@SuppressWarnings("unchecked")
   public <I extends Item> I get (ItemCategory <I> theItemCat)
      {
      int dimIdx;
      
      rejNull           (theItemCat, "theItemCat");
      reqMatchingScheme (theItemCat);

      dimIdx = getTupleCategory ().uniqueDimenIndex (theItemCat);
      
      reqDimen    (theItemCat, dimIdx);
      rejDupDimen (theItemCat, dimIdx);
      
      return (I) myCoordinateList.get (dimIdx);
      }

/*******************************************************************************
 * Returns the coordinate of this Tuple corresponding to the TupleCategory
 * dimension indicated by a DimensionID.
 * 
 * @@param  <I>      The type of Item to be retrieved (either Primitive or Tuple)
 * @@param  theDimID The DimensionID that indicates the dimension to be used.
 * @@return          The coordinate of this Tuple for the indicated dimension
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If theDimID does not apply to the
 *                                  TupleCategory of this Tuple
 *******************************************************************************
 */                         @@SuppressWarnings("unchecked")
   public <I extends Item> I get (DimensionID <I> theDimID)
      {
      int dimIdx;
      
      rejNull    (theDimID, "theDimID");
      reqApplies (theDimID);
      
      dimIdx = theDimID.getDimIndex ();
      
      return (I) myCoordinateList.get (dimIdx);
      }

////////////////////////////////////////////////////////////////////////////////
}
@


1.34
log
@bar ==> ban
@
text
@d96 1
a96 1
   private void banDupDimen (ItemCategory <?> theItemCat, int dimIdx)
d215 1
a215 1
      banNull           (theItemCat, "theItemCat");
d221 1
a221 1
      banDupDimen (theItemCat, dimIdx);
d243 1
a243 1
      banNull    (theDimID, "theDimID");
@


1.33
log
@Some renaming.
@
text
@d96 1
a96 1
   private void barDupDimen (ItemCategory <?> theItemCat, int dimIdx)
d215 1
a215 1
      barNull           (theItemCat, "theItemCat");
d221 1
a221 1
      barDupDimen (theItemCat, dimIdx);
d243 1
a243 1
      barNull    (theDimID, "theDimID");
@


1.32
log
@Scheme ==> ModelScheme
@
text
@d48 1
a48 3
   private void requireMatchingModelScheme (
         ItemCategory <?> theItemCat,
         String           theSig)
d54 3
a56 2
             + "   Call to Tuple." + theSig + " with a ItemCategory\n"
             + "   whose ModelScheme does not match the ModelScheme of the Tuple.\n"
d58 5
a62 8
             + "      ItemCategory:  "
             +        theItemCat                .getName () + "\n"
             + "         ModelScheme:     "
             +           theItemCat.getModelScheme ().getName () + "\n"
             + "      Tuple:         "
             +        this                                  + "\n"
             + "         ModelScheme:     "
             +           getModelScheme ()           .getName () + "\n");
d74 1
a74 1
   private void requireDimen (ItemCategory <?> theItemCat, int dimIdx)
d96 1
a96 1
   private void prohibitDupDimen (ItemCategory <?> theItemCat, int dimIdx)
d114 1
a114 1
   private void requireApplies (DimensionID <?> theDimID)
d203 2
a204 2
 * @@throws IllegalArgumentException If the ModelScheme of theItemCat does not match
 *                                  the ModelScheme of this Tuple.
d215 2
a216 2
      prohibitNull          (theItemCat, "theItemCat");
      requireMatchingModelScheme (theItemCat, "get (ItemCategory <I>)");
d220 2
a221 2
      requireDimen     (theItemCat, dimIdx);
      prohibitDupDimen (theItemCat, dimIdx);
d243 2
a244 2
      prohibitNull   (theDimID, "theDimID");
      requireApplies (theDimID);
@


1.31
log
@Embodiment ==> ModelInstance
@
text
@d44 1
a44 1
 * Verifies that the Scheme of theItemCat matches the Scheme of this Tuple.<br>
d48 1
a48 1
   private void requireMatchingScheme (
d52 1
a52 1
      if (theItemCat.getScheme () != getScheme ())
d57 1
a57 1
             + "   whose Scheme does not match the Scheme of the Tuple.\n"
d61 2
a62 2
             + "         Scheme:     "
             +           theItemCat.getScheme ().getName () + "\n"
d65 2
a66 2
             + "         Scheme:     "
             +           getScheme ()           .getName () + "\n");
d207 2
a208 2
 * @@throws IllegalArgumentException If the Scheme of theItemCat does not match
 *                                  the Scheme of this Tuple.
d220 1
a220 1
      requireMatchingScheme (theItemCat, "get (ItemCategory <I>)");
@


1.30
log
@Efficient String concatenation.
@
text
@d20 1
a20 1
 * particular TupleCategory and a particular Embodiment.<br><br>
d141 1
a141 1
         Embodiment    theEmb,
d144 1
a144 1
      super (theTupleCat, theEmb);
d154 1
a154 1
      theEmb.getTupleMgr (theTupleCat).store (this);
d178 1
a178 1
      theTupleMgr = getEmbodiment ().getTupleMgr (getTupleCategory ());
@


1.29
log
@Long names.
@
text
@d180 1
a180 1
      return theTupleMgr.buildIDFor (this);
@


1.28
log
@Category ==> ItemCategory
@
text
@d170 13
a196 13
 * {@@inheritDoc}
 *******************************************************************************
 */             @@Override
   public String toString ()
      {
      TupleMgr theTupleMgr;
      
      theTupleMgr = getEmbodiment ().getTupleMgr (getTupleCategory ());
      
      return theTupleMgr.toStringFor (this);
      }
   
/*******************************************************************************
@


1.27
log
@Removed Tuple.get (theCat, theIdx).
@
text
@d44 2
a45 2
 * Verifies that the Scheme of theCat matches the Scheme of this Tuple.<br>
 * To be called by get (Category <I>).
d48 3
a50 1
   private void requireMatchingScheme (Category <?> theCat, String theSig)
d52 1
a52 1
      if (theCat.getScheme () != getScheme ())
d56 1
a56 1
             + "   Call to Tuple." + theSig + " with a Category\n"
d59 8
a66 8
             + "      Category:  "
             +        theCat                .getName () + "\n"
             + "         Scheme: "
             +           theCat.getScheme ().getName () + "\n"
             + "      Tuple:     "
             +        this                              + "\n"
             + "         Scheme: "
             +           getScheme ()       .getName () + "\n");
d70 1
a70 1
 * Verifies that theCat is a dimension of the TupleCategory of this Tuple.
d72 1
a72 1
 * To be called by get (Category <I>).
d75 1
a75 1
 *               getTupleCategory ().uniqueDimenIndex (theCat)
d78 1
a78 1
   private void requireDimen (Category <?> theCat, int dimIdx)
d84 1
a84 1
             + "   Call to Tuple.get (theCat) with a Category that\n"
d87 2
a88 2
             + "      Category: " + theCat.getName () + "\n"
             + "      Tuple:    " + this              + "\n");
d92 1
a92 1
 * Verifies that theCat does not occur more than once as a dimension of the
d94 1
a94 1
 * To be called by get (Category <I>).
d97 1
a97 1
 *               getTupleCategory ().uniqueDimenIndex (theCat)
d100 1
a100 1
   private void prohibitDupDimen (Category <?> theCat, int dimIdx)
d106 1
a106 1
             + "   Call to Tuple.get (theCat) with a Category that\n"
d110 2
a111 2
             + "      Category: " + theCat.getName () + "\n"
             + "      Tuple:    " + this              + "\n");
d180 1
a180 1
      return (TupleCategory) getCategory ();
d198 1
a198 1
 * that matches theCat, the corresponding coordinate for this Tuple is
d201 4
a204 3
 * @@param  <I>    The type of Item to be retrieved (either Primitive or Tuple)
 * @@param  theCat The Category <I> of the dimension being specified.
 * @@return        The coordinate of this Tuple for the specified dimension
d207 3
a209 3
 * @@throws IllegalArgumentException If the Scheme of theCat does not match the
 *                                  Scheme of this Tuple.
 * @@throws IllegalArgumentException If theCat is not a dimension of the
d211 1
a211 1
 * @@throws IllegalArgumentException If theCat occurs more than once as a
d215 1
a215 1
   public <I extends Item> I get (Category <I> theCat)
d219 2
a220 2
      prohibitNull          (theCat, "theCat");
      requireMatchingScheme (theCat, "get (Category <I>)");
d222 1
a222 1
      dimIdx = getTupleCategory ().uniqueDimenIndex (theCat);
d224 2
a225 2
      requireDimen     (theCat, dimIdx);
      prohibitDupDimen (theCat, dimIdx);
@


1.26
log
@Signatures with argument names.
@
text
@a112 74
 * Verifies that coordIdx >= 0.<br>
 * 
 * To be called by get (Category <I>, int).
 *******************************************************************************
 */
   private void prohibitCoordIdxTooLow (int coordIdx)
      {
      if (coordIdx < 0)
         {
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Tuple.get (theCat, int) with a\n"
             + "   negative coordinate index.\n"
             + "\n"
             + "      TupleCategory:    " + getTupleCategory ().getName ()
             + "\n"
             + "      Coordinate Index: " + coordIdx + "\n");
         }
      }

/*******************************************************************************
 * Verifies that coordIdx < # dimensions.<br>
 * 
 * To be called by get (Category <I>, int).
 *******************************************************************************
 */
   private void prohibitCoordIdxTooHigh (int coordIdx)
      {
      int nDimens;
      
      nDimens = getTupleCategory ().getDimensions ().size ();
      
      if (coordIdx >= nDimens)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Tuple.get (theCat, int) with a coordinate\n"
             + "   index >= the # of dimensions in the TupleCategory.\n"
             + "\n"
             + "      TupleCategory:    " + getTupleCategory ().getName ()
             + "\n"
             + "      Coordinate Index: " + coordIdx + "\n"
             + "      # Dimensions:     " + nDimens  + "\n");
      }

/*******************************************************************************
 * Verifies that theCat matches the specified dimension.<br>
 * 
 * To be called by get (Category <I>, int).
 *******************************************************************************
 */
   private void requireCatMatchDimen (Category <?> theCat, int coordIdx)
      {
      Category <?> theDimen;
      
      theDimen = getTupleCategory ().getDimensions ().get (coordIdx);
      
      if (theCat != theDimen)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to Tuple.get (theCat, int) with a Category\n"
             + "   that does not match the TupleCategory dimension for the\n"
             + "   specified coordinate number.\n"
             + "\n"
             + "      TupleCategory:    " + getTupleCategory ().getName ()
             + "\n"
             + "      Coordinate Index: " + coordIdx            + "\n"
             + "      Dimension:        " + theDimen.getName () + "\n"
             + "      Category:         " + theCat  .getName () + "\n");
      }

/*******************************************************************************
a194 29
 * Returns the coordinate of this Tuple for a specified Category and
 * coordinate number.
 * 
 * @@param  <I>      The type of Item to be retrieved (either Primitive or Tuple)
 * @@param  theCat   The specified Category
 * @@param  coordIdx The specified coordinate index
 * @@return          The specified coordinate
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theCat does not match the
 *                                  Scheme of this Tuple.
 * @@throws IllegalArgumentException If coordIdx is not in the range:
 *                                  0 <= coordIdx < # dimensions
 * @@throws IllegalArgumentException If theCat does not match the
 *                                  TupleCategory dimension for coordIdx
 *******************************************************************************
 */                         @@SuppressWarnings("unchecked")
   public <I extends Item> I get (Category <I> theCat, int coordIdx)
      {
      prohibitNull            (theCat, "theCat");
      requireMatchingScheme   (theCat, "get (Category <I>, int)");
      prohibitCoordIdxTooLow  (coordIdx);
      prohibitCoordIdxTooHigh (coordIdx);
      requireCatMatchDimen    (theCat, coordIdx);
      
      return (I) myCoordinateList.get (coordIdx);
      }

/*******************************************************************************
@


1.25
log
@Tests for Tuple.get (theDimID).
@
text
@d23 1
a23 1
 * Embodiment.newTuple (TupleCategory, Item...)
d82 1
a82 1
             + "   Call to Tuple.get (Category <I>) with a Category that\n"
d104 1
a104 1
             + "   Call to Tuple.get (Category <I>) with a Category that\n"
d125 1
a125 1
             + "   Call to Tuple.get (Category <I>, int) with a\n"
d150 1
a150 1
             + "   Call to Tuple.get (Category <I>, int) with a coordinate\n"
d175 1
a175 1
             + "   Call to Tuple.get (Category <I>, int) with a Category\n"
@


1.24
log
@Compound ==> Tuple
@
text
@d186 21
d285 1
a285 2
 */
                            @@SuppressWarnings("unchecked")
d314 1
a314 2
 */
                            @@SuppressWarnings("unchecked")
d330 25
@


1.23
log
@Tuple ==> Compound
@
text
@d2 1
a2 1
//==============================================================================
d4 1
a4 1
//==============================================================================
d6 1
a6 1
package       com.ibm.witm;
d17 4
a20 4
 * of other data objects. More precisely, a Tuple represents an ordered list of
 * other Items. These Items are called the coordinates of the Tuple and
 * the Tuple stores this coordinate list. Each Tuple belongs to a particular
 * TupleCategory and a particular Implementation.<br><br>
d23 1
a23 1
 * Implementation.newTuple (TupleCategory, Item...)
d28 3
a30 3
//==============================================================================
// Public
//==============================================================================
d33 2
a34 14
 * If there is exactly one dimension in the TupleCatagory for this Tuple that
 * matches theCat, the corresponding coordinate for this Tuple is returned.
 * 
 * @@param  <I>    The type of Item to be retrieved (either Primitive or Tuple)
 * @@param  theCat The Category <I> of the dimension being specified.
 * @@return        The coordinate of this Tuple for the specified dimension
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theCat does not match the
 *                                  Scheme of this Tuple.
 * @@throws IllegalArgumentException If theCat is not a dimension of the
 *                                  TupleCategory of this Tuple
 * @@throws IllegalArgumentException If theCat occurs more than once as a
 *                                  dimension of the TupleCategory of this Tuple
d37 1
a37 67
                             @@SuppressWarnings("unchecked")
   public <I extends Item> I get (Category <I> theCat)
      {
      int dimIdx;
      
      prohibitNull          (theCat, "theCat");
      requireMatchingScheme (theCat, "get (Category <I>)");

      dimIdx = getTupleCategory ().uniqueDimenIndex (theCat);
      
      requireDimen     (theCat, dimIdx);
      prohibitDupDimen (theCat, dimIdx);
      
      return (I) myCoordinateList.get (dimIdx);
      }

/*******************************************************************************
 * Returns the coordinate of this Tuple for a specified Category and coordinate
 * number.
 * 
 * @@param  <I>     The type of Item to be retrieved (either Primitive or Tuple)
 * @@param  theCat  The specified Category
 * @@param  coordNo The specified coordinate number
 * @@return         The specified coordinate
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theCat does not match the
 *                                  Scheme of this Tuple.
 * @@throws IllegalArgumentException If coordNo is not in the range:
 *                                  1 <= coordNo <= # dimensions
 * @@throws IllegalArgumentException If theCat does not match the TupleCategory
 *                                  dimension for coordNo
 *******************************************************************************
 */
                             @@SuppressWarnings("unchecked")
   public <I extends Item> I get (Category <I> theCat, int coordNo)
      {
      prohibitNull           (theCat, "theCat");
      requireMatchingScheme  (theCat, "get (Category <I>, int)");
      prohibitCoordNoTooLow  (coordNo);
      prohibitCoordNoTooHigh (coordNo);
      requireCatMatchDimen   (theCat, coordNo);
      
      return (I) myCoordinateList.get (coordNo - 1);
      }

/*******************************************************************************
 * @@return The TupleCategory of this Tuple
 *******************************************************************************
 */
   public TupleCategory getTupleCategory ()
      {
      return (TupleCategory) getCategory ();
      }

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */
   @@Override public String toString ()
      {
      return getImplementation ().toStringFor (this);
      }
   
//==============================================================================
// Package Internal
//==============================================================================
d39 3
a41 32
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   Tuple (
         TupleCategory  theTupleCat,
         Implementation theImpl,
         Item[]         theCoordArr)
      {
      super (theTupleCat, theImpl);
      
      ArrayList <Item> theCoordAList;
      
      theCoordAList = new ArrayList <Item> (Arrays.asList (theCoordArr));
      
      theCoordAList.trimToSize ();
      
      myCoordinateList = Collections.unmodifiableList (theCoordAList);
      }
   
/*******************************************************************************
 * @@return The coordinate list of this Tuple as an unmodifiable ArrayList
 *******************************************************************************
 */
   List <Item> getCoordinateList ()
      {
      return myCoordinateList;
      }

//==============================================================================
// Private
//==============================================================================
d82 2
a83 2
             + "   Call to Tuple.get (Category <I>) with a Category that is\n"
             + "   not a dimension of the TupleCategory of the Tuple.\n"
d113 1
a113 1
 * Verifies that coordNo >= 1.<br>
d118 1
a118 1
   private void prohibitCoordNoTooLow (int coordNo)
d120 1
a120 1
      if (coordNo < 1)
d125 4
a128 2
             + "   Call to Tuple.get (Category <I>, int) with a non-positive\n"
             + "   coordinate number.\n"
d130 1
a130 2
             + "      TupleCategory: " + getTupleCategory ().getName () + "\n"
             + "      Coordinate #:  " + coordNo                        + "\n");
d135 1
a135 1
 * Verifies that coordNo <= # dimensions.<br>
d140 1
a140 1
   private void prohibitCoordNoTooHigh (int coordNo)
d146 1
a146 1
      if (coordNo > nDimens)
d151 1
a151 2
             + "   number larger than the # of dimensions in the\n"
             + "   TupleCategory.\n"
d153 4
a156 3
             + "      TupleCategory: " + getTupleCategory ().getName () + "\n"
             + "      Coordinate #:  " + coordNo                        + "\n"
             + "      # Dimensions:  " + nDimens                        + "\n");
d165 1
a165 1
   private void requireCatMatchDimen (Category <?> theCat, int coordNo)
d169 1
a169 1
      theDimen = getTupleCategory ().getDimensions ().get (coordNo - 1);
d175 2
a176 2
             + "   Call to Tuple.get (Category <I>, int) with a Category that\n"
             + "   does not match the TupleCategory dimension for the\n"
d179 5
a183 4
             + "      TupleCategory: " + getTupleCategory ().getName () + "\n"
             + "      Coordinate #:  " + coordNo                        + "\n"
             + "      Dimension:     " + theDimen           .getName () + "\n"
             + "      Category:      " + theCat             .getName () + "\n");
d186 39
d226 1
a226 2
 * The coordinate List of this Tuple.<br>
 * (An unmodifiable ArrayList)
d229 17
a245 1
   private final List <Item> myCoordinateList;
d247 65
a311 1
//==============================================================================
@


1.22
log
@Doc comments
@
text
@@


1.21
log
@Revised comments, etc.
@
text
@d22 2
a23 3
 * Please Note:<br>
 * The factory method for creating instances of this class is method newTuple of
 * class TupleCategory.
d36 3
a38 2
 * @@param theCat The Category <I> of the dimension being specified.
 * @@return       The coordinate of this Tuple for the specified dimension
d69 4
a72 3
 * @@param theCat  The specified Category
 * @@param coordNo The specified coordinate number
 * @@return        The coordinate
@


1.20
log
@Tuple.get (Category, int)
@
text
@d103 3
a105 3
/* *****************************************************************************
 * Doc comment inherited.
 * *****************************************************************************
@


1.19
log
@1-based indexing of dimensions/coordinates
@
text
@d55 2
a56 2
      requireMatchingScheme (theCat);
      
d66 29
d154 1
a154 1
   private void requireMatchingScheme (Category <?> theCat)
d160 1
a160 1
             + "   Call to Tuple.get (Category <I>) with a Category\n"
d219 72
@


1.18
log
@Replaced ItemCategory with Category <?>.
@
text
@a73 9
/*******************************************************************************
 * @@return The coordinate list of this Tuple as an unmodifiable ArrayList
 *******************************************************************************
 */
   public List <Item> getCoordinateList ()
      {
      return myCoordinateList;
      }

d107 9
@


1.17
log
@get (Category <I>)
@
text
@d71 1
a71 1
      return (TupleCategory) getItemCategory ();
d121 1
a121 1
 * Verifies that the Scheme of theItemCat matches the Scheme of this Tuple.<br>
d125 1
a125 1
   private void requireMatchingScheme (ItemCategory theItemCat)
d127 1
a127 1
      if (theItemCat.getScheme () != getScheme ())
d135 1
a135 1
             +        theItemCat                .getName () + "\n"
d137 1
a137 1
             +           theItemCat.getScheme ().getName () + "\n"
d139 1
a139 1
             +        this                                  + "\n"
d141 1
a141 1
             +           getScheme ()           .getName () + "\n");
d145 1
a145 1
 * Verifies that theItemCat is a dimension of the TupleCategory of this Tuple.
d150 1
a150 1
 *               getTupleCategory ().uniqueDimenIndex (theItemCat)
d153 1
a153 1
   private void requireDimen (ItemCategory theItemCat, int dimIdx)
d162 2
a163 2
             + "      Category: " + theItemCat.getName () + "\n"
             + "      Tuple:    " + this                  + "\n");
d167 1
a167 1
 * Verifies that theItemCat does not occur more than once as a dimension of the
d172 1
a172 1
 *               getTupleCategory ().uniqueDimenIndex (theItemCat)
d175 1
a175 1
   private void prohibitDupDimen (ItemCategory theItemCat, int dimIdx)
d185 2
a186 2
             + "      Category: " + theItemCat.getName () + "\n"
             + "      Tuple:    " + this                  + "\n");
@


1.16
log
@Tuple.get (ItemCategory)
@
text
@d35 1
a35 1
 * matches theItemCat, the corresponding coordinate for this Tuple is returned.
d37 2
a38 2
 * @@param theItemCat The ItemCategory of the dimension being specified.
 * @@return           The coordinate of this Tuple for the specified dimension
d41 3
a43 3
 * @@throws IllegalArgumentException If the Scheme of theItemCat does not match
 *                                  the Scheme of this Tuple.
 * @@throws IllegalArgumentException If theItemCat is not a dimension of the
d45 1
a45 1
 * @@throws IllegalArgumentException If theItemCat occurs more than once as a
d49 2
a50 1
   public Item get (ItemCategory theItemCat)
d54 2
a55 2
      prohibitNull          (theItemCat, "theItemCat");
      requireMatchingScheme (theItemCat);
d57 1
a57 1
      dimIdx = getTupleCategory ().uniqueDimenIndex (theItemCat);
d59 2
a60 2
      requireDimen     (theItemCat, dimIdx);
      prohibitDupDimen (theItemCat, dimIdx);
d62 1
a62 1
      return myCoordinateList.get (dimIdx);
d122 1
a122 1
 * To be called by get (ItemCategory).
d131 1
a131 1
             + "   Call to Tuple.get (ItemCategory) with an ItemCategory\n"
d134 1
a134 1
             + "      ItemCategory: "
d136 1
a136 1
             + "         Scheme:    "
d138 1
a138 1
             + "      Tuple:        "
d140 1
a140 1
             + "         Scheme:    "
d146 2
d159 2
a160 2
             + "   Call to Tuple.get (ItemCategory) with an ItemCategory that\n"
             + "   is not a dimension of the TupleCategory of the Tuple.\n"
d162 2
a163 2
             + "      ItemCategory: " + theItemCat.getName () + "\n"
             + "      Tuple:        " + this                  + "\n");
d168 2
a169 1
 * TupleCategory of this Tuple.
d181 1
a181 1
             + "   Call to Tuple.get (ItemCategory) with an ItemCategory that\n"
d185 2
a186 2
             + "      ItemCategory: " + theItemCat.getName () + "\n"
             + "      Tuple:        " + this                  + "\n");
@


1.15
log
@Minor revision
@
text
@d34 31
d120 66
@


1.14
log
@theImple ==> theImpl
@
text
@d43 1
a43 1
 * @@return The TupleCategory of this Tuple
@


1.13
log
@Moved newTuple from TupleCategory to Implementation.
@
text
@d70 1
a70 1
         Implementation theImp,
d73 1
a73 1
      super (theTupleCat, theImp);
@


1.12
log
@Type ==> Category
@
text
@a81 2
      
      theImp.getTupleMgr (theTupleCat).store (this);
@


1.11
log
@Element     ==> Item
ElementType ==> ItemTYpe
@
text
@d20 1
a20 1
 * TupleType and a particular Implementation.<br><br>
d24 1
a24 1
 * class TupleType.
d34 1
a34 1
 * @@return The TupleType of this Tuple
d37 1
a37 1
   public TupleType getTupleType ()
d39 1
a39 1
      return (TupleType) getItemType ();
d43 1
a43 1
 * @@return The TupleType of this Tuple
d69 1
a69 1
         TupleType      theTupleType,
d73 1
a73 1
      super (theTupleType, theImp);
d83 1
a83 1
      theImp.getTupleMgr (theTupleType).store (this);
@


1.10
log
@Embodiment ==> Implementation
@
text
@d16 1
a16 1
 * A Tuple is an Element that represents a data object that's defined in terms
d18 1
a18 1
 * other Elements. These Elements are called the coordinates of the Tuple and
d27 1
a27 1
public final class Tuple extends Element
d39 1
a39 1
      return (TupleType) getElementType ();
d46 1
a46 1
   public List <Element> getCoordinateList ()
d71 1
a71 1
         Element[]      theCoordArr)
d75 1
a75 1
      ArrayList <Element> theCoordAList;
d77 1
a77 1
      theCoordAList    = new ArrayList <Element> (Arrays.asList (theCoordArr));
d95 1
a95 1
   private final List <Element> myCoordinateList;
@


1.9
log
@theTupleType.getAll
@
text
@d20 1
a20 1
 * TupleType and a particular Embodiment.<br><br>
d57 1
a57 1
      return getEmbodiment ().toStringFor (this);
d69 3
a71 3
         TupleType  theTupleType,
         Embodiment theEmbodiment,
         Element[]  theCoordArr)
d73 1
a73 1
      super (theTupleType, theEmbodiment);
d83 1
a83 1
      theEmbodiment.getTupleMgr (theTupleType).store (this);
@


1.8
log
@theTuple.toString.
@
text
@d82 2
@


1.7
log
@Coordinate List
@
text
@d51 9
@


1.6
log
@Dimensions and Coordinates
@
text
@d10 5
d23 2
a24 1
 * The factory method for creating instances of this class is method ???
d42 9
d62 1
a62 1
         Element[]  theDimenArr)
d65 8
d79 7
@


1.5
log
@newTuple
@
text
@d47 1
a47 1
         Element[]  theElemArr)
@


1.4
log
@Category ==> Type
@
text
@d27 9
@


1.3
log
@Fulfillment ==> Embodiment
@
text
@d15 1
a15 1
 * TupleCategory and a particular Embodiment.<br><br>
d36 3
a38 3
         TupleCategory theTupleCat,
         Embodiment   theEmbodiment,
         Element[]     theElemArr)
d40 1
a40 1
      super (theTupleCat, theEmbodiment);
@


1.2
log
@Primitives
@
text
@d15 1
a15 1
 * TupleCategory and a particular Fulfillment.<br><br>
d37 1
a37 1
         Fulfillment   theFulfillment,
d40 1
a40 1
      super (theTupleCat, theFulfillment);
@


1.1
log
@Compound ==> Tuple
@
text
@d36 1
a37 1
         TupleCategory theTupleCat,
d40 1
a40 1
      super (theFulfillment, theTupleCat);
@

