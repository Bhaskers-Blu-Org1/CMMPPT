head	1.23;
access;
symbols
	start:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.23
date	2011.07.22.16.15.32;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.07.19.21.13.14;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.07.08.20.46.00;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.07.05.21.15.05;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.06.30.23.43.50;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.06.30.23.25.41;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.06.30.22.03.40;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.06.16.23.36.13;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.06.09.18.19.23;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.06.09.18.09.22;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.08.20.13.57;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.06.07.22.05.17;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.06.07.20.14.11;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.06.20.33.31;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.31.19.26.19;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.24.21.09.37;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.24.18.46.15;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.24.17.56.47;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.24.00.11.51;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.20.19.26.50;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.17.20.58.42;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.17.19.32.24;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Class Period
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File PrimitiveMgr.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import java.util.HashMap;

/*******************************************************************************
 * "Primitive Manager"<br>
 * A PrimitiveMgr is responsible for maintaining the Primitives of a particular
 * PrimitiveCategory that belong to a particular ModelInstance.
 *******************************************************************************
 */
final class PrimitiveMgr extends ItemMgr <Primitive>
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Fields
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * myPrimitiveMap.get (theName) is the Primitive maintained by this PrimitiveMgr
 * whose name matches theName.
 *******************************************************************************
 */
   private final HashMap <String, Primitive> myPrimitiveMap;
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////
   
   PrimitiveMgr ()
      {
      myPrimitiveMap  = new HashMap <String, Primitive> ();
      }
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * Stores thePrim in this PrimitiveMgr.
 *******************************************************************************
 */
   void storePrimitive (Primitive thePrim)
      {
      storeItem (thePrim);
      
      myPrimitiveMap.put (thePrim.getName (), thePrim);
      }
   
/*******************************************************************************
 * @@return The Primitive maintained by this PrimitiveMgr whose name matches
 * theName, if any; otherwise null.
 *******************************************************************************
 */
   Primitive getPrimitive (String theName)
      {
      return myPrimitiveMap.get (theName);
      }
   
////////////////////////////////////////////////////////////////////////////////
}
@


1.22
log
@Embodiment ==> ModelInstance
@
text
@a47 2
      Primitive oldPrim;
      
d50 1
a50 3
      oldPrim = myPrimitiveMap.put (thePrim.getName (), thePrim);
      
      assert (oldPrim == null);
@


1.21
log
@Class ProblemMgr.
@
text
@d13 1
a13 1
 * PrimitiveCategory that belong to a particular Embodiment.
d46 1
a46 1
   void store (Primitive thePrim)
d50 1
a50 1
      storeInstance (thePrim);
@


1.20
log
@Implementation ==> Embodiment
@
text
@d6 1
a6 1
package       com.ibm.witm;
@


1.19
log
@//=== ==> /////
@
text
@d13 1
a13 1
 * PrimitiveCategory that belong to a particular Implementation.
@


1.18
log
@Re-arranged source code.
@
text
@d2 1
a2 1
//==============================================================================
d4 1
a4 1
//==============================================================================
d18 1
a18 1
//==============================================================================
d20 1
a20 1
//==============================================================================
d29 1
a29 1
//==============================================================================
d31 1
a31 1
//==============================================================================
d38 1
a38 1
//==============================================================================
d40 1
a40 1
//==============================================================================
d67 1
a67 1
//==============================================================================
@


1.17
log
@Various revisions.
@
text
@d19 1
a19 1
// Package Internal
d23 2
a24 1
 * Constructor.
d27 6
d38 4
a67 11
// Private
//==============================================================================
   
/*******************************************************************************
 * myPrimitiveMap.get (theName) is the Primitive maintained by this PrimitiveMgr
 * whose name matches theName.
 *******************************************************************************
 */
   private final HashMap <String, Primitive> myPrimitiveMap;
   
//==============================================================================
@


1.16
log
@ItemMgr <I>
@
text
@a7 2
import static com.ibm.witm.Utility.*;

@


1.15
log
@theImple ==> theImpl
@
text
@a9 2
import java.util.ArrayList;
import java.util.Collections;
a10 1
import java.util.List;
d14 1
a14 1
 * A PrimitiveCategory is responsible for maintaining the Primitives of a particular
d18 1
a18 1
final class PrimitiveMgr
d28 1
a28 1
   PrimitiveMgr (Implementation theImpl, PrimitiveCategory thePrimCat)
d30 1
a30 9
      myImplementation    = theImpl;
      
      myPrimitiveCategory = thePrimCat;
      
      myPrimitiveList     = new ArrayList <Primitive> ();
      
      myPrimitiveView     = Collections.unmodifiableList (myPrimitiveList);
      
      myPrimitiveMap      = new HashMap <String, Primitive> ();
d41 1
a41 4
      assert (thePrim.getImplementation    () == myImplementation);
      assert (thePrim.getPrimitiveCategory () == myPrimitiveCategory);
      
      myPrimitiveList.add (thePrim);
a48 10
 * @@return An unmodifiable List of all Primitives maintained by this
 *         PrimitiveMgr, listed in the order in which they were created.
 *******************************************************************************
 */
   List <Primitive> getPrimitives ()
      {
      return myPrimitiveView;
      }
   
/*******************************************************************************
a62 25
 * The Implementation to which this PrimitiveMgr belongs.
 *******************************************************************************
 */
   private final Implementation myImplementation;
   
/*******************************************************************************
 * The PrimitiveCategory of the Primitives maintained by this PrimitiveMgr.
 *******************************************************************************
 */
   private final PrimitiveCategory myPrimitiveCategory;
   
/*******************************************************************************
 * The List of all Primitives maintained by this PrimitiveMgr, listed in the
 * order in which they were created.
 *******************************************************************************
 */
   private final ArrayList <Primitive> myPrimitiveList;
   
/*******************************************************************************
 * An unmodifiable view of myPrimitiveList.
 *******************************************************************************
 */
   private List <Primitive> myPrimitiveView;
   
/*******************************************************************************
@


1.14
log
@Reverting to state as of yesterday 6/8/11 15:00.
@
text
@d31 1
a31 1
   PrimitiveMgr (Implementation theImple, PrimitiveCategory thePrimCat)
d33 1
a33 1
      myImplementation    = theImple;
@


1.13
log
@Matching current Scheme to current Implementation.
@
text
@d31 1
a31 1
   PrimitiveMgr (Implementation theImpl, PrimitiveCategory thePrimCat)
d33 1
a33 1
      myImplementation    = theImpl;
@


1.12
log
@Minor revision.
@
text
@d31 1
a31 1
   PrimitiveMgr (Implementation theImple, PrimitiveCategory thePrimCat)
d33 1
a33 1
      myImplementation    = theImple;
@


1.11
log
@Renaming
@
text
@d31 1
a31 1
   PrimitiveMgr (Implementation theImp, PrimitiveCategory thePrimCat)
d33 1
a33 1
      myImplementation    = theImp;
@


1.10
log
@Type ==> Category
@
text
@d31 1
a31 1
   PrimitiveMgr (Implementation theImp, PrimitiveCategory thePrimCategory)
d35 1
a35 1
      myPrimitiveCategory = thePrimCategory;
@


1.9
log
@Embodiment ==> Implementation
@
text
@d17 2
a18 2
 * A PrimitiveType is responsible for maintaining the Primitives of a particular
 * PrimitiveType that belong to a particular Implementation.
d31 1
a31 1
   PrimitiveMgr (Implementation theImp, PrimitiveType thePrimType)
d33 1
a33 1
      myImplementation = theImp;
d35 1
a35 1
      myPrimitiveType  = thePrimType;
d37 1
a37 1
      myPrimitiveList  = new ArrayList <Primitive> ();
d39 1
a39 1
      myPrimitiveView  = Collections.unmodifiableList (myPrimitiveList);
d41 1
a41 1
      myPrimitiveMap   = new HashMap <String, Primitive> ();
d52 2
a53 2
      assert (thePrim.getImplementation () == myImplementation);
      assert (thePrim.getPrimitiveType  () == myPrimitiveType);
d93 1
a93 1
 * The PrimitiveType of the Primitives maintained by this PrimitiveMgr.
d96 1
a96 1
   private final PrimitiveType myPrimitiveType;
@


1.8
log
@Storing of objects.
@
text
@d18 1
a18 1
 * PrimitiveType that belong to a particular Embodiment.
d31 1
a31 1
   PrimitiveMgr (Embodiment theEmbodiment, PrimitiveType thePrimType)
d33 1
a33 1
      myEmbodiment    = theEmbodiment;
d35 1
a35 1
      myPrimitiveType = thePrimType;
d37 1
a37 1
      myPrimitiveList = new ArrayList <Primitive> ();
d39 1
a39 1
      myPrimitiveView = Collections.unmodifiableList (myPrimitiveList);
d41 1
a41 1
      myPrimitiveMap  = new HashMap <String, Primitive> ();
d52 2
a53 2
      assert (thePrim.getEmbodiment ()    == myEmbodiment);
      assert (thePrim.getPrimitiveType () == myPrimitiveType);
d87 1
a87 1
 * The Embodiment to which this PrimitiveMgr belongs.
d90 1
a90 1
   private final Embodiment myEmbodiment;
@


1.7
log
@Category ==> Type
@
text
@d17 2
a18 3
 * A PrimitiveMgr is associated with a particular Embodiment and a particular
 * PrimitiveType is responsible for maintaining the Primitives of the
 * PrimitiveType that belong to the Embodiment.
d34 1
d36 1
a36 1

d45 1
a45 5
 * Factory method:<br>
 * Constructs a new Primitive that will be maintained by this PrimitiveMgr.
 *   
 * @@param  theName The name for the Primitive 
 * @@return         The new Primitive
d48 1
a48 1
   Primitive newPrimitive (String theName)
a49 1
      Primitive thePrim;
d52 2
a53 1
      thePrim = new Primitive (myPrimitiveType, myEmbodiment, theName);
d57 1
a57 1
      oldPrim = myPrimitiveMap.put (theName, thePrim);
a59 2
      
      return thePrim;
@


1.6
log
@Fulfillment ==> Embodiment
@
text
@d18 2
a19 2
 * PrimitiveCategory is responsible for maintaining the Primitives of the
 * PrimitiveCategory that belong to the Embodiment.
d32 1
a32 1
   PrimitiveMgr (Embodiment theEmbodiment, PrimitiveCategory thePrimCat)
d34 2
a35 2
      myEmbodiment       = theEmbodiment;
      myPrimitiveCategory = thePrimCat;
d37 1
a37 1
      myPrimitiveList     = new ArrayList <Primitive> ();
d39 1
a39 1
      myPrimitiveView     = Collections.unmodifiableList (myPrimitiveList);
d41 1
a41 1
      myPrimitiveMap      = new HashMap <String, Primitive> ();
d57 1
a57 1
      thePrim = new Primitive (myPrimitiveCategory, myEmbodiment, theName);
d99 1
a99 1
 * The PrimitiveCategory of the Primitives maintained by this PrimitiveMgr.
d102 1
a102 1
   private final PrimitiveCategory myPrimitiveCategory;
@


1.5
log
@Primitives
@
text
@d17 1
a17 1
 * A PrimitiveMgr is associated with a particular Fulfillment and a particular
d19 1
a19 1
 * PrimitiveCategory that belong to the Fulfillment.
d32 1
a32 1
   PrimitiveMgr (Fulfillment theFulfillment, PrimitiveCategory thePrimCat)
d34 1
a34 1
      myFulfillment       = theFulfillment;
d57 1
a57 1
      thePrim = new Primitive (myPrimitiveCategory, myFulfillment, theName);
d93 1
a93 1
 * The Fulfillment to which this PrimitiveMgr belongs.
d96 1
a96 1
   private final Fulfillment myFulfillment;
@


1.4
log
@AppProblem ==> Fulfillment
@
text
@d57 1
a57 1
      thePrim = new Primitive (myFulfillment, myPrimitiveCategory, theName);
@


1.3
log
@Class Property
@
text
@d17 1
a17 1
 * A PrimitiveMgr is associated with a particular AppProblem and a particular
d19 1
a19 1
 * PrimitiveCategory that belong to the AppProblem.
d32 1
a32 1
   PrimitiveMgr (AppProblem theAppProblem, PrimitiveCategory thePrimCat)
d34 1
a34 1
      myAppProblem        = theAppProblem;
d57 1
a57 1
      thePrim = new Primitive (myAppProblem, myPrimitiveCategory, theName);
d93 1
a93 1
 * The AppProblem to which this PrimitiveMgr belongs.
d96 1
a96 1
   private final AppProblem myAppProblem;
@


1.2
log
@Unique Property names.
@
text
@d16 1
a16 1
 * "Primitive Manager" <br>
d45 1
a45 1
 * Factory method: <br>
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
 * "Primitive Manager" </br>
@


1.1.1.1
log
@Renaming WIT-ML to WIT-M.

@
text
@@
