head	1.45;
access;
symbols;
locks; strict;
comment	@# @;


1.45
date	2011.09.13.20.48.08;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2011.09.08.22.43.40;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.09.07.23.15.40;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.07.22.23.47.23;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.07.20.18.38.46;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.07.19.21.37.06;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2011.07.19.21.13.15;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.07.19.19.22.01;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.07.15.23.19.01;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.07.15.17.42.32;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.07.15.15.51.21;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.07.14.23.40.35;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.07.14.20.24.03;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.07.13.19.45.47;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.07.08.20.46.01;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.07.07.19.05.04;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.07.06.22.29.19;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.07.06.19.22.45;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.07.05.21.15.05;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.07.01.22.30.01;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.07.01.22.12.54;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.07.01.15.56.23;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.06.30.23.43.50;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.06.30.23.25.41;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.06.30.22.03.40;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.06.22.15.07.27;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.06.21.22.18.05;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.06.20.15.13.20;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.06.17.18.23.04;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.06.16.15.35.14;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.06.10.21.13.47;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.06.06.20.33.33;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.06.16.39.07;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.24.23.44.41;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.24.21.09.38;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.24.18.46.16;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.20.23.52.01;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.20.21.30.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.20.15.16.17;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.17.23.38.05;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.17.21.32.49;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.17.20.58.43;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.17.19.32.25;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.17.17.56.59;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.17.16.09.18;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.45
log
@Simplified toString.
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File Property.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.io.PrintStream;

/*******************************************************************************
 * A Property {@@literal<V>} is associated with an ItemCategory <?> and specifies
 * that a value of type V may be associated with each Item of the ItemCategory.
 * <br><br>
 * The factory method for creating instances of this generic class is
 * ItemCategory.newProperty (theName, theValueType)
 * 
 * @@param <V> The type of value to be associated with the Items
 *******************************************************************************
 */
public final class Property <V>
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Fields
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * The name of this Property.
 *******************************************************************************
 */
   private final String myName;
   
/*******************************************************************************
 * The value type of this Property.
 *******************************************************************************
 */
   private final Class <V> myValueType;
   
/*******************************************************************************
 * The ItemCategory <?> to which this Property applies.
 *******************************************************************************
 */
   private final ItemCategory <?> myItemCategory;
   
/*******************************************************************************
 * The index of this Property.<br>
 * The # of Properties for myItemCategory created before this Property.
 *******************************************************************************
 */
   private final int myIndex;
   
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * Verifies that this Property is global.
 *******************************************************************************
 */
   private void reqGlobalCat (String signature)
      {
      if (! myItemCategory.isGlobalCategory ())
         throw
            new UnsupportedOperationException (
               "\n\n"
             + "   Call to Property <V>." + signature + " on a non-global\n"
             + "   Property.\n"
             + "\n"
             + "      Property " + this + "\n");
      }
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////
   
   Property (
         String           theName,
         Class <V>        theValueType,
         ItemCategory <?> theItemCat)
      {
      assert (theName      != null);
      assert (theValueType != null);
      assert (theItemCat   != null);
      
      myName         = theName;
      myValueType    = theValueType;
      myItemCategory = theItemCat;
      myIndex        = theItemCat.getProperties ().size ();
      
      theItemCat.store (this);

      theItemCat.getModelScheme ().storeName (theName);
      }

////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * Prints this Property.
 * 
 * @@param theStream the PrintStream to which this Property is to be printed.
 *******************************************************************************
 */
   void print (PrintStream theStream)
      {
      theStream.printf (
         "   Property    %s:%n"
       + "   Value Type: %s%n%n",
         myName,
         myValueType.getSimpleName ());
      }

/*******************************************************************************
 * @@return The index of the Property
 *******************************************************************************
 */
   int getIndex ()
      {
      return myIndex;
      }

////////////////////////////////////////////////////////////////////////////////
// Public Non-Static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */             @@Override
   public String toString ()
      {
      return myName;
      }
   
/*******************************************************************************
 * @@return The ItemCategory <?> to which this Property applies
 *******************************************************************************
 */
   public ItemCategory <?> getItemCategory ()
      {
      return myItemCategory;
      }

/*******************************************************************************
 * @@return The value type of this Property
 *******************************************************************************
 */
   public Class <V> getValueType ()
      {
      return myValueType;
      }

/*******************************************************************************
 * @@return The name of this Property
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Sets the value of a global this global Property for the current ModelInstance to
 * a specified value.
 * 
 * @@param theValue The V instance to which the Property value is to be set.
 *
 * @@throws UnsupportedOperationException If the ItemCategory of this Property
 *                                       is not the GLOBAL ItemCategory.
 * @@throws IllegalStateException         If the current ModelInstance is null
 *******************************************************************************
 */
   public void setGlobal (V theValue)
      {
      reqGlobalCat    ("setGlobal (theValue)");
      reqCurModelInst ();

      ModelInstance.getGlobalPrimitive ().setValue (this, theValue);
      }

/*******************************************************************************
 * Retrieves the value of this global Property for the current ModelInstance.
 * 
 * @@return  A reference to the current value of this Property for the current
 *          ModelInstance.
 * 
 * @@throws UnsupportedOperationException If the ItemCategory of this Property
 *                                       is not the GLOBAL ItemCategory.
 * @@throws IllegalStateException         If the current ModelInstance is null
 *******************************************************************************
 */
   public V getGlobal ()
      {
      reqGlobalCat    ("getGlobal ()");
      reqCurModelInst ();

      return ModelInstance.getGlobalPrimitive ().getValue (this);
      }

////////////////////////////////////////////////////////////////////////////////
}
@


1.44
log
@ValueByPeriod
@
text
@d70 1
a70 1
             + "      " + this + " of " + myItemCategory + "\n");
d134 1
a134 1
      return concatenation ("Property ", myName);
@


1.43
log
@ValueByPeriod
@
text
@d131 1
a131 1
 */      @@Override
@


1.42
log
@Class PeriodTrait
@
text
@d89 1
a89 1
      myIndex        = theItemCat.nProperties ();
@


1.41
log
@Some renaming.
@
text
@d101 1
a101 2
 * Prints this Property.<br>
 * To be called by ItemCategory.print (...).
d134 1
a134 1
      return concatenation ("Property \"", myName, "\"");
@


1.40
log
@Scheme ==> ModelScheme
@
text
@d61 1
a61 1
   private void requireGlobalCat (String signature)
d178 2
a179 2
      requireGlobalCat    ("setGlobal (theValue)");
      requireCurModelInst ();
d197 2
a198 2
      requireGlobalCat    ("getGlobal ()");
      requireCurModelInst ();
@


1.39
log
@Embodiment ==> ModelInstance
@
text
@d93 1
a93 1
      theItemCat.getScheme ().storeName (theName);
@


1.38
log
@Efficient String concatenation.
@
text
@d166 1
a166 1
 * Sets the value of a global this global Property for the current Embodiment to
d173 1
a173 1
 * @@throws IllegalStateException         If the current Embodiment is null
d178 2
a179 2
      requireGlobalCat     ("setGlobal (theValue)");
      requireCurEmbodiment ();
d181 1
a181 1
      Embodiment.getGlobalPrimitive ().setValue (this, theValue);
d185 1
a185 1
 * Retrieves the value of this global Property for the current Embodiment.
d188 1
a188 1
 *          Embodiment.
d192 1
a192 1
 * @@throws IllegalStateException         If the current Embodiment is null
d197 2
a198 2
      requireGlobalCat     ("getGlobal ()");
      requireCurEmbodiment ();
d200 1
a200 1
      return Embodiment.getGlobalPrimitive ().getValue (this);
@


1.37
log
@newOperation
@
text
@d135 1
a135 1
      return "Property \"" + myName + "\"";
@


1.36
log
@Category ==> ItemCategory
@
text
@d110 2
a111 2
         "   Property \"%s\":%n"
       + "      Value Type: %s%n",
@


1.35
log
@Checking for duplicate schematic names.
@
text
@d13 3
a15 3
 * A Property {@@literal<V>} is associated with a Category <?> and specifies
 * that a value of type V may be associated with each Item of the Category.<br>
 * <br>
d17 1
a17 1
 * Category.newProperty (theName, theValueType)
d41 1
a41 1
 * The Category <?> to which this Property applies.
d44 1
a44 1
   private final Category <?> myCategory;
d48 1
a48 1
 * The # of Properties for myCategory created before this Property.
d63 1
a63 1
      if (! myCategory.isGlobalCategory ())
d70 1
a70 1
             + "      " + this + " of " + myCategory + "\n");
d77 4
a80 1
   Property (String theName, Class <V> theValueType, Category <?> theCat)
d84 1
a84 1
      assert (theCat       != null);
d86 4
a89 4
      myName      = theName;
      myValueType = theValueType;
      myCategory  = theCat;
      myIndex     = theCat.nProperties ();
d91 1
a91 1
      theCat.store (this);
d93 1
a93 1
      theCat.getScheme ().storeName (theName);
d102 1
a102 1
 * To be called by Category.print (...).
d139 1
a139 1
 * @@return The Category <?> to which this Property applies
d142 1
a142 1
   public Category <?> getCategory ()
d144 1
a144 1
      return myCategory;
d171 2
a172 2
 * @@throws UnsupportedOperationException If the Category of this Property is not the
 *                                       GLOBAL Category.
d190 2
a191 2
 * @@throws UnsupportedOperationException If the Category of this Property is not the
 *                                       GLOBAL Category.
@


1.34
log
@Signatures with argument names.
@
text
@d89 2
@


1.33
log
@Error tests for newDimensionID.
@
text
@d17 1
a17 1
 * Category.newProperty (Class {@@literal<V>}, String)
d173 1
a173 1
      requireGlobalCat     ("setGlobal (V)");
@


1.32
log
@Class DimensionID.
@
text
@d29 6
a46 6
 * The name of this Property.
 *******************************************************************************
 */
   private final String myName;
   
/*******************************************************************************
d77 1
a77 1
   Property (Class <V> theValueType, Category <?> theCat, String theName)
d79 1
a81 1
      assert (theName      != null);
d83 1
a85 1
      myName      = theName;
@


1.31
log
@Class ProblemMgr.
@
text
@d115 1
a115 1
   final int getIndex ()
d137 1
a137 1
   public final Category <?> getCategory ()
d146 1
a146 1
   public final Class <V> getValueType ()
d155 1
a155 1
   public final String getName ()
@


1.30
log
@Period Primitives.
@
text
@d6 1
a6 1
package       com.ibm.witm;
@


1.29
log
@Removed period index Property.
@
text
@d63 1
a63 1
      if (! myCategory.isGlobal ())
d167 1
a167 1
 *                                       global Category.
d186 1
a186 1
 *                                       global Category.
@


1.28
log
@Moved some responsibility to constructors.
@
text
@d65 1
a65 1
            new IllegalStateException (
d166 3
a168 3
 * @@throws IllegalStateException If the Category of this Property is not the
 *                               global Category.
 * @@throws IllegalStateException If the current Embodiment is null
d185 3
a187 3
 * @@throws IllegalStateException If the Category of this Property is not the
 *                               global Category.
 * @@throws IllegalStateException If the current Embodiment is null
@


1.27
log
@Implementation ==> Embodiment
@
text
@d87 2
@


1.26
log
@getGlobal Implementation == Property.
@
text
@d159 2
a160 2
 * Sets the value of a global this global Property for the current
 * Implementation to a specified value.
d165 2
a166 2
 *                                global Category.
 * @@throws IllegalStateException  If the current Implementation is null
d171 2
a172 2
      requireGlobalCat         ("setGlobal (V)");
      requireCurImplementation ();
d174 1
a174 1
      Implementation.getGlobalPrimitive ().setValue (this, theValue);
d178 1
a178 1
 * Retrieves the value of this global Property for the current Implementation.
d181 1
a181 1
 *          Implementation.
d185 1
a185 1
 * @@throws IllegalStateException If the current Implementation is null
d190 2
a191 2
      requireGlobalCat         ("getGlobal ()");
      requireCurImplementation ();
d193 1
a193 1
      return Implementation.getGlobalPrimitive ().getValue (this);
@


1.25
log
@setGlobal Implementation ==> Property
@
text
@d164 3
a166 3
 * @@throws IllegalArgumentException If the Category of this Property is not the
 *                                  global Category.
 * @@throws IllegalStateException    If the current Implementation is null
d177 19
@


1.24
log
@Moved newProperty to class Category
@
text
@d8 2
d54 20
d158 19
@


1.23
log
@//=== ==> /////
@
text
@a7 2
import static com.ibm.witm.Utility.*;

d15 1
a15 1
 * Scheme.newProperty (Class {@@literal<V>}, Category, String)
d20 1
a20 1
public abstract class Property <V>
d64 1
a64 1
      myIndex     = theCat.getProperties ().size ();
@


1.22
log
@Re-arranged source code.
@
text
@d2 1
a2 1
//==============================================================================
d4 1
a4 1
//==============================================================================
d24 1
a24 1
//==============================================================================
d26 1
a26 1
//==============================================================================
d53 1
a53 1
//==============================================================================
d55 1
a55 1
//==============================================================================
d69 1
a69 1
//==============================================================================
d71 1
a71 1
//==============================================================================
d98 1
a98 1
//==============================================================================
d100 1
a100 1
//==============================================================================
d138 1
a138 1
//==============================================================================
@


1.21
log
@Various revisions.
@
text
@d25 1
a25 1
// Public
d29 1
a29 1
 * {@@inheritDoc}
d31 2
a32 5
 */      @@Override
   public String toString ()
      {
      return "Property \"" + myName + "\"";
      }
d35 1
a35 1
 * @@return The Category <?> to which this Property applies
d38 2
a39 5
   public final Category <?> getCategory ()
      {
      return myCategory;
      }

d41 1
a41 1
 * @@return The value type of this Property
d44 2
a45 5
   public final Class <V> getValueType ()
      {
      return myValueType;
      }

d47 2
a48 1
 * @@return The name of this Property
d51 2
a52 5
   public final String getName ()
      {
      return myName;
      }

d54 1
a54 1
// Package Internal
a56 5
/*******************************************************************************
 * Constructor.<br>
 * To be called by Scheme.newProperty (...).
 *******************************************************************************
 */
d69 4
d99 1
a99 1
// Private
d103 1
a103 1
 * The value type of this Property.
d105 5
a109 2
 */
   private final Class <V> myValueType;
d112 1
a112 1
 * The Category <?> to which this Property applies.
d115 5
a119 2
   private final Category <?> myCategory;
   
d121 1
a121 1
 * The name of this Property.
d124 5
a128 2
   private final String myName;
   
d130 1
a130 2
 * The index of this Property.<br>
 * The # of Properties for myCategory created before this Property.
d133 5
a137 2
   private final int myIndex;
   
@


1.20
log
@Doc comments
@
text
@d14 1
a14 1
 * that a value of type V is to be associated with each Item of the Category.
a15 2
 * This is an immutable generic class.<br><br>
 * 
d22 1
a22 1
public final class Property <V>
d31 2
a32 2
 */
   @@Override public String toString ()
@


1.19
log
@Revised comments, etc.
@
text
@d18 2
a19 3
 * Please Note:<br>
 * The factory method for creating instances of this generic class is method
 * newProperty of class Scheme.
d21 1
a21 1
 * @@param <V> The type of value to be associated with Items
@


1.18
log
@Removed Scheme.myPropertyNames.
@
text
@d21 2
d31 3
a33 3
/* *****************************************************************************
 * Doc comment inherited.
 * *****************************************************************************
@


1.17
log
@Replaced ItemCategory with Category <?>.
@
text
@d83 1
a83 1
      myIndex     = theCat.getNProperties ();
@


1.16
log
@Added Category <I extends Item>
@
text
@d13 3
a15 3
 * A Property {@@literal<V>} is associated with an ItemCategory and specifies
 * that a value of type V is to be associated with each Item of the
 * ItemCategory.<br>
d39 1
a39 1
 * @@return The ItemCategory of this Property
d42 1
a42 1
   public final ItemCategory getItemCategory ()
d44 1
a44 1
      return myItemCategory;
d74 1
a74 1
   Property (Class <V> theValueType, ItemCategory theItemCat, String theName)
d77 1
a77 1
      assert (theItemCat   != null);
d80 4
a83 4
      myValueType    = theValueType;
      myItemCategory = theItemCat;
      myName         = theName;
      myIndex        = theItemCat.getNProperties ();
d88 1
a88 1
 * To be called by ItemCategory.print (...).
d122 1
a122 1
 * The ItemCategory associated with this Property.
d125 1
a125 1
   private final ItemCategory myItemCategory;
d135 1
a135 1
 * The # of Properties for myItemCategory created before this Property.
@


1.15
log
@Moved newProperty from ItemCategory to Scheme.
@
text
@d20 1
a20 1
 * newProperty of class ItemCategory.
d71 1
a71 1
 * To be called by theItemCat.newProperty (...).
@


1.14
log
@Type ==> Category
@
text
@d74 1
a74 1
   Property (ItemCategory theItemCat, Class <V> theValueType, String theName)
d76 1
a77 1
      assert (theValueType != null);
d80 1
a81 1
      myValueType    = theValueType;
a83 2
      
      theItemCat.store (this);
d116 1
a116 1
 * The ItemCategory associated with this Property.
d119 1
a119 1
   private final ItemCategory myItemCategory;
d122 1
a122 1
 * The value type of this Property.
d125 1
a125 1
   private final Class <V> myValueType;
@


1.13
log
@Element     ==> Item
ElementType ==> ItemTYpe
@
text
@d13 1
a13 1
 * A Property {@@literal<V>} is associated with an ItemType and specifies
d15 1
a15 1
 * ItemType.<br>
d20 1
a20 1
 * newProperty of class ItemType.
d39 1
a39 1
 * @@return The ItemType of this Property
d42 1
a42 1
   public final ItemType getItemType ()
d44 1
a44 1
      return myItemType;
d71 1
a71 1
 * To be called by theElType.newProperty (...).
d74 1
a74 1
   Property (ItemType theElType, Class <V> theValueType, String theName)
d76 1
a76 1
      assert (theElType    != null);
d80 4
a83 4
      myItemType  = theElType;
      myValueType = theValueType;
      myName      = theName;
      myIndex     = theElType.getNProperties ();
d85 1
a85 1
      theElType.store (this);
d90 1
a90 1
 * To be called by ItemType.print (...).
d118 1
a118 1
 * The ItemType associated with this Property.
d121 1
a121 1
   private final ItemType myItemType;
d137 1
a137 1
 * The # of Properties for myItemType created before this Property.
@


1.12
log
@newTuple
@
text
@d13 3
a15 3
 * A Property {@@literal<V>} is associated with an ElementType and specifies
 * that a value of type V is to be associated with each Element of the
 * ElementType.<br>
d20 1
a20 1
 * newProperty of class ElementType.
d39 1
a39 1
 * @@return The ElementType of this Property
d42 1
a42 1
   public final ElementType getElementType ()
d44 1
a44 1
      return myElementType;
d74 1
a74 1
   Property (ElementType theElType, Class <V> theValueType, String theName)
d80 4
a83 4
      myElementType = theElType;
      myValueType   = theValueType;
      myName        = theName;
      myIndex       = theElType.getNProperties ();
d90 1
a90 1
 * To be called by ElementType.print (...).
d118 1
a118 1
 * The ElementType associated with this Property.
d121 1
a121 1
   private final ElementType myElementType;
d137 1
a137 1
 * The # of Properties for myElementType created before this Property.
@


1.11
log
@Storing of objects.
@
text
@d30 2
a31 2
 * The doc comment is inherited
 *******************************************************************************
@


1.10
log
@Category ==> Type
@
text
@d84 2
@


1.9
log
@CompoundCategory
@
text
@d13 1
a13 1
 * A Property {@@literal<V>} is associated with an ElementCategory and specifies
d15 1
a15 1
 * ElementCategory.<br>
d20 1
a20 1
 * newProperty of class ElementCategory.
d39 1
a39 1
 * @@return The ElementCategory of this Property
d42 1
a42 1
   public final ElementCategory getElementCategory ()
d44 1
a44 1
      return myElementCategory;
d71 1
a71 1
 * To be called by theElCat.newProperty (...).
d74 1
a74 1
   Property (ElementCategory theElCat, Class <V> theValueType, String theName)
d76 1
a76 1
      assert (theElCat     != null);
d80 4
a83 4
      myElementCategory = theElCat;
      myValueType       = theValueType;
      myName            = theName;
      myIndex           = theElCat.getNProperties ();
d88 1
a88 1
 * To be called by ElementCategory.print (...).
d116 1
a116 1
 * The ElementCategory associated with this Property.
d119 1
a119 1
   private final ElementCategory myElementCategory;
d135 1
a135 1
 * The # of Properties for myElementCategory created before this Property.
@


1.8
log
@Check for duplicate ComponentCategory name.
@
text
@d97 1
a97 2
       + "      Value Type: %s%n"
       + "%n",
@


1.7
log
@@@Override annotations
@
text
@d29 2
a30 1
/*******************************************************************************
@


1.6
log
@theElem.set (...)
@
text
@a29 1
 * Override from class Object
d32 1
a32 1
   public String toString ()
@


1.5
log
@Scheme printing
@
text
@d13 4
a16 4
 * A Property <V> is associated with an ElementCategory and specifies that a
 * value of type V is to be associated with each Element of the ElementCategory.
 *<br>
 * This is an immutable class.<br><br>
d19 2
a20 2
 * The factory method for creating instances of this class is method newProperty
 * of class ElementCategory.
a38 2
 * Accessor.
 * 
a47 2
 * Accessor.
 * 
a56 2
 * Accessor.
 * 
d83 1
d103 9
d134 7
@


1.4
log
@Class Property
@
text
@d10 2
d91 17
@


1.3
log
@Unique Property names.
@
text
@d13 2
a14 2
 * <br>
 * This is an immutable class. <br><br>
d16 1
a16 1
 * Please Note: <br>
d74 2
a75 2
 * Constructor. <br>
 * To be called by theScheme.newProperty (...).
@


1.2
log
@Property Accessors
@
text
@d13 2
a14 2
 * </br>
 * This is an immutable class. </br></br>
d16 1
a16 1
 * Please Note: </br>
d74 2
a75 1
 * Constructor.
@


1.1
log
@Created generic class Property.
@
text
@d27 42
d77 1
a77 1
   Property (Class <V> theValueType, ElementCategory theElCat, String theName)
d79 1
a80 1
      assert (theElCat     != null);
d83 3
a85 3
      myValueType      = theValueType;
      mElementCategory = theElCat;
      myName           = theName;
d93 1
a93 1
 * The value type of this Property.
d96 1
a96 2
                          @@SuppressWarnings ("unused")
   private final Class <V> myValueType;
d99 1
a99 1
 * The ElementCategory associated with this Property.
d102 1
a102 2
                                @@SuppressWarnings ("unused")
   private final ElementCategory mElementCategory;
a107 1
                       @@SuppressWarnings ("unused")
@

