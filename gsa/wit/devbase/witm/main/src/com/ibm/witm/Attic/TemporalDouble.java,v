head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2011.10.07.23.01.57;	author rjw;	state dead;
branches;
next	1.4;

1.4
date	2011.10.05.23.07.36;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.04.22.57.15;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.14.20.58.56;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.14.19.02.11;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TemporalVariable ==> VariableByPeriod, etc.
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File TemporalDouble.Java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.Utility.rejNull;

/*******************************************************************************
 * A TemporalDouble is a TemporalVariable {@@literal<Double>}.<br>
 * This class has no factory method; instances of it are constructed as needed
 * by WIT-M.
 *******************************************************************************
 */
public final class TemporalDouble extends TemporalVariable <Double>
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Fields
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * myDoubleArray[thePer.getIndex ()] is the double stored by this TemporalDouble
 * for thePer.
 *******************************************************************************
 */
   private final double[] myDoubleArray;
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////
   
   TemporalDouble (PeriodMgr thePerMgr)
      {
      super (thePerMgr);
      
      myDoubleArray = new double[thePerMgr.getAllPeriods ().size ()];
      }

////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */          @@Override
   final void setByIndex (int thePerIdx, Double theValue)
      {
      myDoubleArray[thePerIdx] = theValue;
      }
   
/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */            @@Override
   final Double getByIndex (int thePerIdx)
      {
      return myDoubleArray[thePerIdx];
      }
   
////////////////////////////////////////////////////////////////////////////////
// Public Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * Sets the values stored by this TemporalDouble to those in an array:
 * For each Period in the ModelInstance, the value stored for the Period is set
 * to the array element for the index of the Period.
 * 
 * @@param theDblArr The array
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the length of theDblArr does not match
 *                                  the number of Periods in the ModelInstance
 *******************************************************************************
 */
   public void setArray (double[] theDblArr)
      {
      rejNull           (theDblArr, "theDblArr");
      reqLengthNPeriods (theDblArr.length,
                         "theTemporalDouble.setArray (theDblArr)");
      
      System.arraycopy  (theDblArr, 0, myDoubleArray, 0, myDoubleArray.length);
      }
   
/*******************************************************************************
 * Sets the elements of an array to the values stored by this TemporalDouble:
 * For each Period in the ModelInstance, the array element for the index of the
 * Period is set to the value stored in this TemporalDouble for the Period.
 * 
 * @@param theDblArr The array
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the length of theDblArr does not match
 *                                  the number of Periods in the ModelInstance
 *******************************************************************************
 */
   public void getArray (double[] theDblArr)
      {
      rejNull           (theDblArr, "theDblArr");
      reqLengthNPeriods (theDblArr.length,
                         "theTemporalDouble.getArray (theDblArr)");
      
      System.arraycopy  (myDoubleArray, 0, theDblArr, 0, myDoubleArray.length);
      }
   
////////////////////////////////////////////////////////////////////////////////
}
@


1.4
log
@ban ==> rej
@
text
@@


1.3
log
@bar ==> ban
@
text
@d8 1
a8 1
import static com.ibm.witm.Utility.banNull;
d80 1
a80 1
      banNull           (theDblArr, "theDblArr");
d101 1
a101 1
      banNull           (theDblArr, "theDblArr");
@


1.2
log
@Added class TemporalInteger.
@
text
@d8 1
a8 1
import static com.ibm.witm.Utility.barNull;
d80 1
a80 1
      barNull           (theDblArr, "theDblArr");
d101 1
a101 1
      barNull           (theDblArr, "theDblArr");
@


1.1
log
@PeriodValue  ==> TemporalVariable
PeriodDouble ==> TemporalDouble
@
text
@a29 26
// Private Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * Verifies that the length of theArray is the # of Periods. 
 *******************************************************************************
 */
   private void reqLengthNPeriods (double[] theDblArr, String signature)
      {
      int nPeriods;
      
      nPeriods = getPeriodMgr ().getAllPeriods ().size ();
      
      if (theDblArr.length != nPeriods)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to TemporalDouble." + signature + " with an array\n"
             + "   whose length does not match the number of Periods in the\n"
             + "   ModelInstance.\n"
             + "\n"
             + "      Array Length:      " + theDblArr.length + "\n"
             + "      Number of Periods: " + nPeriods         + "\n");
      }

////////////////////////////////////////////////////////////////////////////////
d81 2
a82 1
      reqLengthNPeriods (theDblArr, "set (theDblArr)");
d102 2
a103 1
      reqLengthNPeriods (theDblArr, "get (theDblArr)");
@

