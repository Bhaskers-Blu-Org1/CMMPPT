head	1.12;
access;
symbols
	start:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2011.05.24.18.46.13;	author rjw;	state dead;
branches;
next	1.11;

1.11
date	2011.05.22.02.10.42;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.22.00.33.12;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.20.23.52.00;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.19.23.31.43;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.17.23.38.04;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.17.21.32.48;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.17.20.58.40;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.17.19.32.23;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.17.17.56.58;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.17.16.09.17;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Category ==> Type
@
text
@
//==============================================================================
// WIT-M Source File ElementCategory.java.
//==============================================================================

package       com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.io.PrintStream;
import java.util.ArrayList;

/*******************************************************************************
 * An ElementCategory represents a conceptual grouping of similar Elements. Each
 * Element belongs to a particular ElementCategory and all Elements that belong
 * to a given ElementCategory are treated uniformly by WIT-M. An
 * ElementCategory will belong to a Scheme and is considered to be a defining
 * aspect of the Scheme.
 *******************************************************************************
 */
public abstract class ElementCategory
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Factory method:<br>
 * Constructs a new Property <V> that will be associated with this
 * ElementCategory.
 * 
 * @@param theValueType The value type of the Property
 * @@param theName      The name       of the Property
 * @@return             The new Property <V>
 * 
 * @@throws NullPointerException  If any argument is null
 * @@throws IllegalStateException If the Scheme to which this ElementCategory
 *                               belongs is frozen
 *******************************************************************************
 */
   public final <V> Property <V> newProperty (
         Class <V> theValueType,
         String    theName)
      {
      Property <V> theProp;
      
      prohibitNull (theValueType, "theValueType");
      prohibitNull (theName,      "theName");
      
      myScheme.prohibitFrozen ();
      
      for (ElementCategory theElCat: myScheme.getPrimitiveCategories ())
         {
         theElCat.prohibitDupPropName (theName);
         }
      
      for (ElementCategory theElCat: myScheme.getTupleCategories ())
         {
         theElCat.prohibitDupPropName (theName);
         }
      
      theProp = new Property <V> (this, theValueType, theName);
      
      myProperties.add (theProp);
      
      return theProp;
      }

/*******************************************************************************
 * Accessor.
 * 
 * @@return The name of this ElementCategory
 *******************************************************************************
 */
   public final String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Accessor.
 * 
 * @@return The Scheme to which this ElementCategory belongs
 *******************************************************************************
 */
   public final Scheme getScheme ()
      {
      return myScheme;
      }

//==============================================================================
// Package-Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   ElementCategory (Scheme theScheme, String theName)
      {
      assert (theScheme != null);
      assert (theName   != null);
      
      myScheme     = theScheme;
      myName       = theName;
      myProperties = new ArrayList <Property <?>> ();
      }

/*******************************************************************************
 * Prints the Properties of this ElementCategory to theStream.
 *******************************************************************************
 */
   final void printProperties (PrintStream theStream)
      {
      for (Property <?> theProp: myProperties)
         theProp.print (theStream);
      }

/*******************************************************************************
 * @@return The # of Properties associated with this ElementCategory.
 *******************************************************************************
 */
   final int getNProperties ()
      {
      return myProperties.size ();
      }

//==============================================================================
// Private
//==============================================================================
   
/*******************************************************************************
 * Verifies that theName does not duplicate the name of an existing Property in
 * this ElementCategory.<br>
 * To be called by newProperty (...).
 *******************************************************************************
 */
   private final void prohibitDupPropName (String theName)
      {
      for (Property <?> theProp: myProperties)
         {
         if (theProp.getName ().equals (theName))
            {
            throw
               new IllegalArgumentException (
                  "\n\n"
                + "   theElCat.newProperty (theValueType, theName) was\n"
                + "   called where theName duplicates the name of an\n"
                + "   existing Property in the Scheme.\n"
                + "\n"
                + "      Duplicate Name: \"" + theName + "\"\n");
            }
         }
      }

/*******************************************************************************
 * The Scheme of the WIT model to which this ElementCategory belongs
 *******************************************************************************
 */
   private final Scheme myScheme;
   
/*******************************************************************************
 * The name of this ElementCategory
 *******************************************************************************
 */
   private final String myName;
   
/*******************************************************************************
 * A list of all Properties that belong to this ElementCategory.
 *******************************************************************************
 */
   private final ArrayList <Property <?>> myProperties;

//==============================================================================
}
@


1.11
log
@Compound ==> Tuple
@
text
@@


1.10
log
@Created class CompoundMgr.
@
text
@d57 1
a57 1
      for (ElementCategory theElCat: myScheme.getCompoundCategories ())
@


1.9
log
@CompoundCategory
@
text
@d57 5
@


1.8
log
@Created CompoundCategory
@
text
@d105 1
a105 5
 * Prints this ElementCategory.<br>
 * To be called by theScheme.print (...).
 * 
 * @@param theStream the PrintStream to which this ElementCategory is to be
 *        printed.
d108 1
a108 1
   final void print (PrintStream theStream)
a109 6
      theStream.printf (
         "%n"
       + "%s \"%s\":%n",
         getClass ().getSimpleName (),
         myName);
      
@


1.7
log
@theElem.set (...)
@
text
@d36 1
a36 2
 * @@throws NullPointerException  If theValueType is null
 * @@throws NullPointerException  If theName      is null
d153 1
a153 1
                + "   invoked where theName duplicates the name of an\n"
@


1.6
log
@Scheme printing
@
text
@d113 1
a113 1
   void print (PrintStream theStream)
d125 9
d144 1
a144 1
   private void prohibitDupPropName (String theName)
@


1.5
log
@Class Property
@
text
@d10 1
d105 20
@


1.4
log
@Unique Property names.
@
text
@d10 2
d27 1
a27 1
 * Factory method: <br>
d45 2
d52 8
a59 1
      myScheme.prohibitDupPropName (theName);
d61 1
a61 1
      return myScheme.newProperty (this, theValueType, theName);
d99 3
a101 2
      myScheme = theScheme;
      myName   = theName;
d109 24
d144 6
@


1.3
log
@Property Accessors
@
text
@d48 3
a50 1
      return new Property <V> (this, theValueType, theName);
@


1.2
log
@Created generic class Property.
@
text
@d48 1
a48 1
      return new Property <V> (theValueType, this, theName);
@


1.1
log
@Initial revision
@
text
@d25 27
d65 1
a65 1
 * @@return The Scheme for the WIT model to which this ElementCategory belongs
@


1.1.1.1
log
@Renaming WIT-ML to WIT-M.

@
text
@@
