head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2011.10.07.23.01.55;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.14.19.02.10;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.09.21.17.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.08.22.43.39;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.22.20.05.25;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.22.16.15.31;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@TemporalVariable ==> VariableByPeriod, etc.
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File PeriodMgr.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

/*******************************************************************************
 * "Period Manager":
 * A PeriodMgr is responsible for maintaining the Periods of a ModelInstance.
 *******************************************************************************
 */
final class PeriodMgr
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Fields
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * The ModelInstance that owns this PeriodMgr.
 *******************************************************************************
 */
   private final ModelInstance myModelInstance;
   
/*******************************************************************************
 * True, iff the set of of Periods for this PeriodMgr is "frozen", closed to
 * alteration.
 *******************************************************************************
 */
   private boolean frozen = false;
   
/*******************************************************************************
 * The list of all Periods maintained by this PeriodMgr.
 *******************************************************************************
 */
   private final ArrayList <Period> myPeriods;
   
/*******************************************************************************
 * An unmodifiable view of myPeriods.
 *******************************************************************************
 */
   private final List <Period> unmodPeriods;
   
/*******************************************************************************
 * myPeriodMap.get (theName) is the Period maintained by this PeriodMgr whose
 * name matches theName.
 *******************************************************************************
 */
   private final HashMap <String, Period> myPeriodMap;
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////

   PeriodMgr (ModelInstance theInst)
      {
      myPeriods       = new ArrayList <Period> ();
      
      unmodPeriods    = Collections.unmodifiableList (myPeriods);
      
      myPeriodMap     = new HashMap <String, Period> ();
      
      myModelInstance = theInst;
      }
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-Static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * Puts this PeriodMgr into a frozen state.
 *******************************************************************************
 */
   void freeze ()
      {
      ModelScheme theScheme;
      ItemMgr <?> theItemMgr;
      
      assert (! frozen);
      
      frozen    = true;
      
      theScheme = myModelInstance.getModelScheme ();
      
      for (ItemCategory <?> theItemCat: theScheme.getItemCategories ())
         {
         theItemMgr = myModelInstance.getItemMgr (theItemCat);
         
         for (Item theItem: theItemMgr.getAll ())
            {
            theItem.buildVariableByPeriods ();
            }
         }
      }
   
/*******************************************************************************
 * @@return True, iff the set of of Periods for this PeriodMgr is "frozen",
 *         closed to alteration.
 *******************************************************************************
 */
   boolean isFrozen ()
      {
      return frozen;
      }
   
/*******************************************************************************
 * Stores thePer in this PeriodMgr.
 *******************************************************************************
 */
   void store (Period thePer)
      {
      myPeriods  .add                    (thePer);
      myPeriodMap.put (thePer.getName (), thePer);
      }
   
/*******************************************************************************
 * @@return The ModelInstance that owns this PeriodMgr.
*******************************************************************************
 */
   ModelInstance getModelInstance ()
      {
      return myModelInstance;
      }
   
/*******************************************************************************
 * @@return an unmodifiable list of all Periods maintained by this PeriodMgr.
*******************************************************************************
 */
   List <Period> getAllPeriods ()
      {
      return unmodPeriods;
      }
   
/*******************************************************************************
 * @@return The Period maintained by this PeriodMgr whose name matches theName,
 * if any; otherwise null.
 *******************************************************************************
 */
   Period getPeriod (String theName)
      {
      return myPeriodMap.get (theName);
      }
   
////////////////////////////////////////////////////////////////////////////////
}
@


1.5
log
@PeriodValue  ==> TemporalVariable
PeriodDouble ==> TemporalDouble
@
text
@d96 1
a96 1
            theItem.buildTemporalVariables ();
@


1.4
log
@Class renaming:
   ValueByPeriod  ==> PeriodValue
   DoubleByPeriod ==> PeriodDouble
@
text
@d96 1
a96 1
            theItem.buildPeriodValues ();
@


1.3
log
@ValueByPeriod
@
text
@d96 1
a96 1
            theItem.buildValueByPeriods ();
@


1.2
log
@Period set freeze
@
text
@d25 6
d60 1
a60 1
   PeriodMgr ()
d62 1
a62 1
      myPeriods    = new ArrayList <Period> ();
d64 1
a64 1
      unmodPeriods = Collections.unmodifiableList (myPeriods);
d66 3
a68 1
      myPeriodMap  = new HashMap <String, Period> ();
d81 3
d86 13
a98 1
      frozen = true;
d122 9
@


1.1
log
@Class Period
@
text
@d25 7
d68 21
@

