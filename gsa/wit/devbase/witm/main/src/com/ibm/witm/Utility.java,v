head	1.21;
access;
symbols
	start:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.21
date	2011.10.05.23.07.37;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.10.04.22.57.17;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.14.15.31.35;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.07.20.20.18.28;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.20.18.38.47;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.07.19.21.13.18;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.19.19.22.03;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.07.15.21.46.56;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.07.05.21.15.06;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.07.01.18.51.34;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.01.15.56.24;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.30.23.43.51;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.06.30.23.25.42;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.06.07.22.57.44;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.31.19.26.22;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.26.22.32.19;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.26.21.00.50;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.26.00.17.16;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.24.23.44.43;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.19.23.31.45;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.16.22.08.56;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.16.22.08.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.21
log
@ban ==> rej
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File Utility.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.WitJHandler.getCurrentWitJHandler;

/*******************************************************************************
 * Contains various static utility methods.
 * Noninstantiatable class.
 *******************************************************************************
 */
final class Utility
{
////////////////////////////////////////////////////////////////////////////////
// Private Constructor
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * (Private Constructor (Not to be called).
 *******************************************************************************
 */
   private Utility ()
      {
      throw new AssertionError ();
      }

////////////////////////////////////////////////////////////////////////////////
// Package-Internal Static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * Verifies that an argument to a method is non-null.
 * 
 * @@param  theArg  The argument being checked.
 * @@param  argName The name of the argument being checked.
 *******************************************************************************
 */
   static void rejNull (Object theArg, String argName)
      {
      if (theArg == null)
         throw
            new NullPointerException (
               "\n\n"
             + "   The following argument was a prohibited null pointer:\n"
             + "\n"
             + "      " + argName  + "\n");
      }

/*******************************************************************************
 * Verifies that array-of-references argument is not null and its references are
 * not null.
 * 
 * @@param  theArr  The array argument being checked.
 * @@param  argName The name of the argument being checked.
 *******************************************************************************
 */
   static void rejNullArray (Object[] theArr, String argName)
      {
      int theIdx;
      
      rejNull (theArr, argName);
      
      for (theIdx = 0; theIdx < theArr.length; theIdx ++)
         if (theArr[theIdx] == null)
            rejNull (null, argName + "[" + theIdx + "]");
      }

/*******************************************************************************
 * @@return The current ModelInstance, if any; otherwise null.
 *******************************************************************************
 */
   static ModelInstance curModelInst ()
      {
      return ModelInstance.getCurrentModelInstance ();
      }

/*******************************************************************************
 * Verifies that the current ModelInstance is not null.
 *******************************************************************************
 */
   static void reqCurModelInst ()
      {
      if (curModelInst () == null)
         {
         throw
            new IllegalStateException (
               "\n\n"
             + "   Call to a method that requires a current ModelInstance\n"
             + "   when the current ModelInstance is null.\n");
         }
      }

/*******************************************************************************
 * Verifies that the current WitJHandler is not null.
 *******************************************************************************
 */
   static void reqCurProbMgr ()
      {
      if (getCurrentWitJHandler () == null)
         {
         throw
            new IllegalStateException (
               "\n\n"
             + "   Call to a method that requires a current WitJHandler\n"
             + "   when the current WitJHandler is null.\n");
         }
      }

/*******************************************************************************
 * Efficiently builds and returns the concatenation of the Strings in
 * theStrings.
 *******************************************************************************
 */
   static String concatenation (String... theStrings)
      {
      int           totalLength;
      StringBuilder theBuilder;
      
      totalLength = 0;
      
      for (String theString: theStrings)
         totalLength += theString.length ();
      
      theBuilder = new StringBuilder (totalLength);
      
      for (String theString: theStrings)
         theBuilder.append (theString);      
      
      return theBuilder.toString ();
      }

////////////////////////////////////////////////////////////////////////////////
}
@


1.20
log
@bar ==> ban
@
text
@a34 19
 * Verifies that array-of-references argument is not null and its references are
 * not null.
 * 
 * @@param  theArr  The array argument being checked.
 * @@param  argName The name of the argument being checked.
 *******************************************************************************
 */
   static void banNullArray (Object[] theArr, String argName)
      {
      int theIdx;
      
      banNull (theArr, argName);
      
      for (theIdx = 0; theIdx < theArr.length; theIdx ++)
         if (theArr[theIdx] == null)
            banNull (null, argName + "[" + theIdx + "]");
      }

/*******************************************************************************
d41 1
a41 1
   static void banNull (Object theArg, String argName)
d53 19
@


1.19
log
@ProblemManager ==> WitJHandler
@
text
@d42 1
a42 1
   static void barNullArray (Object[] theArr, String argName)
d46 1
a46 1
      barNull (theArr, argName);
d50 1
a50 1
            barNull (null, argName + "[" + theIdx + "]");
d60 1
a60 1
   static void barNull (Object theArg, String argName)
@


1.18
log
@ProblemMgr ==> ProblemManager
@
text
@d8 1
a8 1
import static com.ibm.witm.ProblemManager.getCurrentProblemManager;
d97 1
a97 1
 * Verifies that the current ProblemManager is not null.
d102 1
a102 1
      if (getCurrentProblemManager () == null)
d107 2
a108 2
             + "   Call to a method that requires a current ProblemManager\n"
             + "   when the current ProblemManager is null.\n");
@


1.17
log
@Some renaming.
@
text
@d8 1
a8 1
import static com.ibm.witm.ProblemMgr.getCurrentProblemMgr;
d97 1
a97 1
 * Verifies that the current ProblemMgr is not null.
d100 1
a100 1
   static void reqCurProblemMgr ()
d102 1
a102 1
      if (getCurrentProblemMgr () == null)
d107 2
a108 2
             + "   Call to a method that requires a current ProblemMgr when\n"
             + "   the current ProblemMgr is null.\n");
@


1.16
log
@Embodiment ==> ModelInstance
@
text
@d42 1
a42 1
   static void prohibitNullArray (Object[] theArr, String argName)
d46 1
a46 1
      prohibitNull (theArr, argName);
d50 1
a50 1
            prohibitNull (null, argName + "[" + theIdx + "]");
d60 1
a60 1
   static void prohibitNull (Object theArg, String argName)
d84 1
a84 1
   static void requireCurModelInst ()
d100 1
a100 1
   static void requireCurProblemMgr ()
@


1.15
log
@Efficient String concatenation.
@
text
@d72 1
a72 1
 * @@return The current Embodiment, if any; otherwise null.
d75 1
a75 1
   static Embodiment curEmbodiment ()
d77 1
a77 1
      return Embodiment.getCurrentEmbodiment ();
d81 1
a81 1
 * Verifies that the current Embodiment is not null.
d84 1
a84 1
   static void requireCurEmbodiment ()
d86 1
a86 1
      if (curEmbodiment () == null)
d91 2
a92 2
             + "   Call to a method that requires a current Embodiment when\n"
             + "   the current Embodiment is null.\n");
@


1.14
log
@Long names.
@
text
@d112 23
@


1.13
log
@Implementation ==> Embodiment
@
text
@d8 2
d96 16
@


1.12
log
@Moved newPrimitive from Implementation to PrimitiveCategory.
@
text
@d70 1
a70 1
 * @@return The current Implementation, if any; otherwise null.
d73 1
a73 1
   static Implementation curImplementation ()
d75 1
a75 1
      return Implementation.getCurrentImplementation ();
d79 1
a79 1
 * Verifies that the current Implementation is not null.
d82 1
a82 1
   static void requireCurImplementation ()
d84 1
a84 1
      if (curImplementation () == null)
d89 2
a90 2
             + "   Call to a method that requires a current Implementation\n"
             + "   when the current Implementation is null.\n");
@


1.11
log
@Moved newProperty to class Category
@
text
@d69 25
@


1.10
log
@//=== ==> /////
@
text
@a7 2
import static com.ibm.witm.Utility.prohibitNull;

@


1.9
log
@Re-arranged source code.
@
text
@d2 1
a2 1
//==============================================================================
d4 1
a4 1
//==============================================================================
d17 1
a17 1
//==============================================================================
d19 1
a19 1
//==============================================================================
d30 1
a30 1
//==============================================================================
d32 1
a32 1
//==============================================================================
d71 1
a71 1
//==============================================================================
@


1.8
log
@Moved current Implementation check.
@
text
@d18 14
a31 1
// Package-Internal
a71 13
// Private
//==============================================================================

/*******************************************************************************
 * Private Constructor (Not to be called).
 *******************************************************************************
 */
   private Utility ()
      {
      throw new AssertionError ();
      }

//==============================================================================
@


1.7
log
@Embodiment ==> Implementation
@
text
@a21 16
 * Verifies that the current Implementation is not null.
 *******************************************************************************
 */
   static void requireCurImplementation ()
      {
      if (curImplementation () == null)
         {
         throw
            new IllegalStateException (
               "\n\n"
             + "   Call to a method that requires a current Implementation\n"
             + "   when the current Implementation is null.\n");
         }
      }

/*******************************************************************************
a57 9
/*******************************************************************************
 * @@return The current Implementation
 *******************************************************************************
 */
   static Implementation curImplementation ()
      {
      return Implementation.getCurrentImplementation ();
      }

@


1.6
log
@getAll
@
text
@d22 1
a22 1
 * Verifies that the current Embodiment is not null.
d25 1
a25 1
   static void requireCurEmbodiment ()
d27 1
a27 1
      if (curEmbodiment () == null)
d32 2
a33 2
             + "   Call to a method that requires a current Embodiment\n"
             + "   when the current Embodiment is null.\n");
d75 1
a75 1
 * @@return The current Embodiment
d78 1
a78 1
   static Embodiment curEmbodiment ()
d80 1
a80 1
      return Embodiment.getCurrentEmbodiment ();
@


1.5
log
@Test of newPrimitive.
@
text
@d30 1
a30 1
            new NullPointerException (
@


1.4
log
@Current Embodiment
@
text
@d22 16
d78 1
a78 1
   static Embodiment getCurrentEmbodiment ()
@


1.3
log
@newTuple
@
text
@d58 9
@


1.2
log
@Created CompoundCategory
@
text
@d8 2
d22 19
d43 2
a44 3
 * @@param  theArg               The argument being checked.
 * @@param  argName              The name of the argument being checked.
 * @@throws NullPointerException If theArg is null
@


1.1
log
@Initial revision
@
text
@d24 1
a24 1
 * @@throws NullPointerException If theArg == null
@


1.1.1.1
log
@Renaming WIT-ML to WIT-M.

@
text
@@
