head	1.26;
access;
symbols
	start:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.26
date	2011.10.10.21.13.51;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.10.10.20.22.17;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.10.10.20.07.50;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.10.05.23.07.33;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.10.05.22.51.39;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.10.04.22.57.12;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.10.04.22.35.48;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.30.21.52.16;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.09.30.00.02.44;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.09.22.22.19.31;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.09.22.18.30.34;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.21.20.32.54;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.21.16.18.54;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.21.16.04.19;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.09.20.23.42.10;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.20.23.22.22;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.20.19.32.33;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.15.23.05.46;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.15.20.29.26;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.08.20.45.57;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.01.15.56.22;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.30.23.43.48;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.07.19.47.01;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.20.21.57.20;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.19.23.31.43;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.26
log
@getCellAsPrimitive (...)
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File InputRow.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*******************************************************************************
 * An InputRow represents a row in an InputTable.
 * Immutable class
 * @@see InputTable
 *******************************************************************************
 */
public final class InputRow
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Fields
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * The InputTable to which this InputRow belongs.
 *******************************************************************************
 */
   private final InputTable myInputTable;

/*******************************************************************************
 * The row index for the row represented by this InputRow
 *******************************************************************************
 */
   private final int myIndex;

/*******************************************************************************
 * {@@code myCells.get (colIdx-1)} is the table cell for the row represented by
 * this InputRow and column #{@@code colIdx}.
 *******************************************************************************
 */
   private final ArrayList <String> myCells;

////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * @@return The name of the file from which this InputRow was read.
 *******************************************************************************
 */
   private String getFileName ()
      {
      return myInputTable.getFileName ();
      }
   
/*******************************************************************************
 * Creates and returns a FileFormatException for a cell in this InputRow.
 * 
 * @@param  message The first part of the detail message for the
 *                 FileFormatException.
 * @@param  colIdx  The column index of the cell.
 * @@param  meaning The meaning of the cell.
 *                 This will be used in the detail message.
 * @@return         The FileFormatException.
 *******************************************************************************
 */
   private FileFormatException newFileFormatException (
         String message,
         int    colIdx,
         String meaning)
      {
      String theCell;
      
      theCell = myCells.get (colIdx - 1);

      return
         new FileFormatException (
            "\n\n"
          + message
          + "\n"
          + "      File:          "   + getFileName () + "\n" 
          + "      Row #:         "   + myIndex        + "\n"
          + "      Column #:      "   + colIdx         + "\n"
          + "      Cell Meaning:  "   + meaning        + "\n"
          + "      Cell Contents: \"" + theCell        + "\"\n");
      }

/*******************************************************************************
 * Verifies that the column index passed to getCell is within range.
 *******************************************************************************
 */
   private void rejIndexOutOfBounds (int colIdx, String methName)
      {
      if ((colIdx < 1) || (colIdx > nCells ()))
         throw
            new IndexOutOfBoundsException (
               "\n\n"
             + "   Call to InputRow." + methName + " (colIdx) with an index\n"
             + "   that's outside of the range 1 <= colIdx <= # of cells.\n"
             + "\n"
             + "      ColIdx:     " + colIdx         + "\n"
             + "      # of Cells: " + nCells ()      + "\n"
             + "      File:       " + getFileName () + "\n" 
             + "      Row #       " + myIndex        + "\n");
      }

////////////////////////////////////////////////////////////////////////////////
// Package-Internal Constructor
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * Constructs an InputRow from a line of input.
 * 
 * @@param theLine The line of input
 ******************************************************************************
 */
   InputRow (InputTable theTable, int theIdx, String theLine)
      {
      List <String> theCells; 
      
      myInputTable = theTable;
   
      myIndex      = theIdx;
   
      theCells     = Arrays.asList (theLine.split (",", -1));
      
      myCells      = new ArrayList <String> (theCells.size ());
      
      myCells.addAll (theCells);
      }

////////////////////////////////////////////////////////////////////////////////
// Public Non-Static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * Accessor.
 * 
 * @@return The row index for the row represented by this InputRow
 *******************************************************************************
 */ 
   public int getIndex ()
      {
      return myIndex;
      }

/*******************************************************************************
 * @@return The # of Cells in the InputRow. 
 *******************************************************************************
 */ 
   public int nCells ()
      {
      return myCells.size ();
      }

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */             @@Override
   public String toString ()
      {
      return
         concatenation (
            "InputRow #",
            String.valueOf (myIndex),
            " of ",
            myInputTable.toString ());
      }
   
/*******************************************************************************
 * Verifies that this InputRow contains the required number of cells.
 * 
 * @@param  nCellsReq           The required # of cells.
 * @@throws FileFormatException If the # of cells in this InputRow does not match
 *                             nCellsReq. 
 *******************************************************************************
 */ 
   public void requireNCells (int nCellsReq)
      {
      if (nCells () != nCellsReq)
         throw
            new FileFormatException (
               "\n\n"
             + "   A row in an input data file contained the wrong number of\n"
             + "   cells.\n"
             + "\n"
             + "      File:             " + getFileName () + "\n" 
             + "      Row #:            " + myIndex        + "\n"
             + "      # Cells in Row:   " + nCells ()      + "\n"
             + "      # Cells Required: " + nCellsReq      + "\n");
      }

/*******************************************************************************
 * Returns The cell of this InputRow for a column index.
 * 
 * @@param  colIdx                    The column index
 * @@return                           The cell
 * @@throws IndexOutOfBoundsException If colIdx < 1 or colIdx > nCells ()
 *******************************************************************************
 */ 
   public String getCell (int colIdx)
      {
      rejIndexOutOfBounds (colIdx, "getCell");
      
      return myCells.get (colIdx - 1);
      }

/*******************************************************************************
 * Returns The cell of this InputRow for a column index, converted to a double.
 * 
 * @@param  colIdx                    The column index.
 * @@param  meaning                   The meaning of the cell, to be used if a
 *                                   FileFormatException is thrown.
 * @@return                           The cell, as a double.
 * @@throws IndexOutOfBoundsException If colIdx < 1 or colIdx > nCells ().
 * @@throws FileFormatException       If the cell cannot be converted to a
 *                                   double.
 *******************************************************************************
 */ 
   public double getCellAsDouble (int colIdx, String meaning)
      {
      String theCell;
      double theDbl;
      
      rejIndexOutOfBounds (colIdx, "getCellAsDouble");
      
      theCell = myCells.get (colIdx - 1);
      
      try
         {
         theDbl = Double.parseDouble (theCell);
         }
      
      catch (NumberFormatException theExc)
         {
         throw
            newFileFormatException (
               "   A cell (in an input data file) that is to hold a double\n"
             + "   precision numerical value was not in the required format.\n",
               colIdx,
               meaning);
         }
      
      return theDbl;
      }

/*******************************************************************************
 * Returns The cell of this InputRow for a column index, converted to an int.
 * 
 * @@param  colIdx                    The column index.
 * @@param  meaning                   The meaning of the cell, to be used if a
 *                                   FileFormatException is thrown.
 * @@return                           The cell, as an int.
 * @@throws IndexOutOfBoundsException If colIdx < 1 or colIdx > nCells ().
 * @@throws FileFormatException       If the cell cannot be converted to a
 *                                   int.
 *******************************************************************************
 */ 
   public int getCellAsInt (int colIdx, String meaning)
      {
      String theCell;
      int    theInt;
      
      rejIndexOutOfBounds (colIdx, "getCellAsInt");
      
      theCell = myCells.get (colIdx - 1);
      
      try
         {
         theInt = Integer.parseInt (theCell);
         }
      
      catch (NumberFormatException theExc)
         {
         throw
            newFileFormatException (
               "   A cell (in an input data file) that is to hold an integer\n"
             + "   value was not in the required format.\n",
               colIdx,
               meaning);
         }
      
      return theInt;
      }

/*******************************************************************************
 * Returns The cell of this InputRow for a column index, converted to a Period.
 * 
 * @@param  colIdx                    The column index.
 * @@return                           The Period of the current ModelInstance
 *                                   whose name matches the contents of the
 *                                   cell.
 * @@throws IndexOutOfBoundsException If colIdx < 1 or colIdx > nCells ().
 * @@throws IllegalStateException     If the current ModelInstance is null.
 * @@throws FileFormatException       If the cell does not match the name of a
 *                                   Period in the current ModelInstance.
 *******************************************************************************
 */
   public Period getCellAsPeriod (int colIdx)
      {
      String theCell;
      Period thePer;
      
      rejIndexOutOfBounds (colIdx, "getCellAsPeriod");
      reqCurModelInst     ();
      
      theCell = myCells.get (colIdx - 1);
      
      thePer  = curModelInst ().getPeriodMgr ().getPeriod (theCell);
      
      if (thePer == null)
         throw
            newFileFormatException (
               "   A cell (in an input data file) that is to hold the name of\n"
             + "   a period does not match the name of any period.\n",
               colIdx,
               "Period");
      
      return thePer;
      }

/*******************************************************************************
 * Returns The cell of this InputRow for a column index, converted to a
 * Primitive.
 * 
 * @@param  colIdx                    The column index.
 * @@param  thePrimCat                The PrimitiveCategory to which the 
 *                                   Primitive is to belong.
 * @@return                           The Primitive of the current ModelInstance
 *                                   that belongs to thePrimCat and whose name
 *                                   matches the contents of the cell.
 * @@throws IndexOutOfBoundsException If colIdx < 1 or colIdx > nCells ().
 * @@throws IllegalStateException     If the current ModelInstance is null.
 * @@throws IllegalArgumentException  If the ModelScheme of thePrimCat does not
 *                                   match the ModelScheme of the current
 *                                   ModelInstance.
 * @@throws FileFormatException       If the cell does not match the name of a
 *                                   Primitive in the current ModelInstance
 *                                   that belongs to thePrimCat.
 *******************************************************************************
 */
   public Primitive getCellAsPrimitive (
         int               colIdx,
         PrimitiveCategory thePrimCat)
      {
      String    theCell;
      Primitive thePrim;
      
      rejIndexOutOfBounds             (colIdx, "getCellAsPrimitive");
      reqCurModelInst                 ();
      thePrimCat.
         reqSchemeMatchesCurModelInst ();
      
      theCell = myCells.get (colIdx - 1);
      
      thePrim =
         curModelInst ().getPrimitiveMgr (thePrimCat).getPrimitive (theCell);
      
      if (thePrim == null)
         throw
            newFileFormatException (
               "   A cell (in an input data file) that is to hold\n"
             + "   the name of a Primitive of Category "
             +     thePrimCat.getName () + "\n"
             + "   does not match the name of any Primitive of Category "
             +     thePrimCat.getName () + ".\n",
               colIdx,
               thePrimCat.getName ());
      
      return thePrim;
      }

////////////////////////////////////////////////////////////////////////////////
}
@


1.25
log
@getCellAsPeriod
@
text
@d328 1
a330 1
 * @@param  colIdx                    The column index.
d345 2
a346 2
         PrimitiveCategory thePrimCat,
         int               colIdx)
@


1.24
log
@getCellAsPrimitive (...).
@
text
@a291 2
 * @@param  meaning                   The meaning of the cell, to be used if a
 *                                   FileFormatException is thrown.
d301 1
a301 1
   public Period getCellAsPeriod (int colIdx, String meaning)
d319 1
a319 1
               meaning);
@


1.23
log
@ban ==> rej
@
text
@d65 1
d214 2
a215 1
 * @@param  meaning                   The meaning of the cell.
d253 2
a254 1
 * @@param  meaning                   The meaning of the cell.
d292 5
a296 2
 * @@param  meaning                   The meaning of the cell.
 * @@return                           The cell, as a Period.
d326 51
@


1.22
log
@getInputRow
@
text
@d93 1
a93 1
   private void banIndexOutOfBounds (int colIdx, String methName)
d204 1
a204 1
      banIndexOutOfBounds (colIdx, "getCell");
d225 1
a225 1
      banIndexOutOfBounds (colIdx, "getCellAsDouble");
d263 1
a263 1
      banIndexOutOfBounds (colIdx, "getCellAsInt");
d302 1
a302 1
      banIndexOutOfBounds (colIdx, "getCellAsPeriod");
@


1.21
log
@bar ==> ban
@
text
@d90 1
a90 1
 * Verifies that the column index passed to getCell is positive,
@


1.20
log
@getCellAsPeriod (...)
@
text
@d93 1
a93 1
   private void barIndexOutOfBounds (int colIdx, String methName)
d204 1
a204 1
      barIndexOutOfBounds (colIdx, "getCell");
d225 1
a225 1
      barIndexOutOfBounds (colIdx, "getCellAsDouble");
d263 1
a263 1
      barIndexOutOfBounds (colIdx, "getCellAsInt");
d302 1
a302 1
      barIndexOutOfBounds (colIdx, "getCellAsPeriod");
@


1.19
log
@getCellAsInt
@
text
@d285 35
@


1.18
log
@InputTable
@
text
@d238 2
a239 2
               "   A cell in an input data file was not in a valid format for\n"
             + "   a double precision number when this was required.\n",
d247 38
@


1.17
log
@InputRow
@
text
@d61 2
a64 1
 * @@param  message Part of the detail message for the FileFormatException.
d69 1
d71 1
a71 2
         String meaning,
         String message)
d238 2
d241 1
a241 3
               meaning,
               "   A cell in an input data file was not in a valid format for\n"
             + "   a double precision number when this was required.\n");
@


1.16
log
@FileFormatException
@
text
@a58 19
 * Verifies that the column index passed to getCell is positive,
 *******************************************************************************
 */
   private void barIndexOutOfBounds (int colIdx, String methName)
      {
      if ((colIdx < 1) || (colIdx > nCells ()))
         throw
            new IndexOutOfBoundsException (
               "\n\n"
             + "   Call to InputRow." + methName + " (colIdx) with an index\n"
             + "   that's outside of the range 1 <= colIdx <= # of cells.\n"
             + "\n"
             + "      ColIdx:     " + colIdx         + "\n"
             + "      # of Cells: " + nCells ()      + "\n"
             + "      File:       " + getFileName () + "\n" 
             + "      Row #       " + myIndex        + "\n");
      }

/*******************************************************************************
d61 4
a64 3
 * @@param colIdx  The column index of the cell.
 * @@param message Part of the detail message for the FileFormatException.
 * @@return        The FileFormatException.
d69 1
d84 1
d88 19
d171 23
d211 2
a212 1
 * @@param  colIdx                    The column index
d214 1
a214 1
 * @@throws IndexOutOfBoundsException If colIdx < 1 or colIdx > nCells ()
d219 1
a219 1
   public double getCellAsDouble (int colIdx)
d238 1
@


1.15
log
@getCellAsDouble
@
text
@d77 27
d105 1
a105 1
// Package-Internal Constructor.
d188 1
a188 1
 * @@throws NumberFormatException     If the cell cannot be converted to a
d195 1
d201 15
a215 1
      return Double.parseDouble (theCell);
@


1.14
log
@InputTables
@
text
@d62 1
a62 1
   private void barIndexOutOfBounds (int colIdx)
d68 2
a69 2
             + "   Call to InputRow.getCell (colIdx) with an index that's\n"
             + "   outside of the range 1 <= colIdx <= nCells.\n"
d71 4
a74 4
             + "      colIdx: " + colIdx         + "\n"
             + "      nCells: " + nCells ()      + "\n"
             + "      File:   " + getFileName () + "\n" 
             + "      Row #   " + myIndex        + "\n");
d141 1
a141 2
 * Returns The cell of this InputRow for a column index, or null if the column
 * index is beyond the end of the row.
d143 14
a156 2
 * @@param  colIdx The column index
 * @@return        The cell
d158 5
a162 1
 * @@throws IllegalArgumentException If colIdx <= 0
d165 1
a165 1
   public String getCell (int colIdx)
d167 5
a171 1
      barIndexOutOfBounds (colIdx);
d173 1
a173 4
      if (colIdx > myCells.size ())
         return null;
      else
         return myCells.get (colIdx - 1);
@


1.13
log
@InputTables
@
text
@d50 9
d71 4
a74 2
             + "      colIdx: " + colIdx    + "\n"
             + "      nCells: " + nCells () + "\n");
@


1.12
log
@InputRow
@
text
@d53 1
a53 1
   private void barNonPosIndex (int theColIdx)
d55 1
a55 1
      if (theColIdx <= 0)
d57 1
a57 1
            new IllegalArgumentException (
d59 2
a60 2
             + "   Call to InputRow.getCell (theColIdx) with a non-positive\n"
             + "   column index.\n"
d62 2
a63 1
             + "      theColIdx: " + theColIdx + "\n");
d84 1
a84 1
      theCells     = Arrays.asList (theLine.split (","));
d141 1
a141 1
      barNonPosIndex (colIdx);
@


1.11
log
@InputTables
@
text
@d106 9
@


1.10
log
@InputTables
@
text
@d8 2
d27 6
d75 1
a75 1
   InputRow (int theIdx, String theLine)
d79 3
a81 1
      myIndex  = theIdx;
d83 1
a83 1
      theCells = Arrays.asList (theLine.split (","));
d85 1
a85 1
      myCells  = new ArrayList <String> (theCells.size ());
d106 14
@


1.9
log
@Table reading.
@
text
@a7 2
import static com.ibm.witm.Utility.*;

d9 2
d25 1
a25 8
 * The InputTable to which this InputRow belongs
 *******************************************************************************
 */
   private final InputTable myInputTable;

/*******************************************************************************
 * The row index of the table row represented by this InputRow.
 * {@@code myIndex == 1} for the first row.
d42 1
a42 2
 * Throws an exception indicating that the getCell method was called with a
 * heading that is not in myInputTable.
d45 1
a45 1
   private void reportBadHeading (String theHeading)
d47 8
a54 7
      throw
         new IllegalArgumentException (
            "\n\n"
          + "   Call to InputRow.getCell (String) with a heading String that\n"
          + "   is not in the InputTable of the InputRow.\n"
          + "\n"
          + "      Heading Argument: \"" + theHeading + "\"\n");
d61 7
a67 4
   InputRow (
         InputTable         theInputTable,
         int                theIdx,
         ArrayList <String> theCells)
d69 9
a77 4
      myInputTable = theInputTable;
      myIndex      = theIdx;

      myCells      = new ArrayList <String> (theCells);
d96 2
a97 1
 * Returns a table cell stored by this InputRow indicated by a column heading.
d99 2
a100 2
 * @@param theHeading The column heading for the cell to be returned
 * @@return           The table cell
d102 4
a105 5
 * @@throws IllegalArgumentException If theHeading is not a heading in the
 *                                  InputTable for this InputRow
 ******************************************************************************
 */
   public String getCell (String theHeading)
d107 1
a107 1
      int colIdx;
d109 4
a112 8
      barNull (theHeading, "theHeading");

      colIdx = myInputTable.getColumnIndex (theHeading);

      if (colIdx == 0)
         reportBadHeading (theHeading);

      return myCells.get (colIdx - 1);
@


1.8
log
@Re-ordered members
@
text
@d8 2
d107 2
@


1.7
log
@Class ProblemMgr.
@
text
@d19 1
a19 1
// Public
d23 2
a24 8
 * Returns a table cell stored by this InputRow indicated by a column heading.
 * 
 * @@param theHeading The column heading for the cell to be returned
 * @@return           The table cell
 * 
 * @@throws IllegalArgumentException If theHeading is not a heading in the
 *                                  InputTable for this InputRow
 ******************************************************************************
d26 1
a26 3
   public String getCell (String theHeading)
      {
      int colIdx;
d28 6
a33 1
      colIdx = myInputTable.getColumnIndex (theHeading);
d35 6
a40 2
      if (colIdx == 0)
         reportBadHeading (theHeading);
d42 3
a44 2
      return myCells.get (colIdx - 1);
      }
d47 2
a48 3
 * Accessor.
 * 
 * @@return The row index for the row represented by this InputRow
d50 2
a51 2
 */ 
   public int getIndex ()
d53 7
a59 1
      return myIndex;
d63 1
a63 1
// Package-Internal
a65 4
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
d78 1
a78 1
// Private
d82 3
a84 2
 * Throws an exception indicating that the getCell method was called with a
 * heading that is not in myInputTable.
d86 2
a87 2
 */
   private void reportBadHeading (String theHeading)
d89 1
a89 7
      throw
         new IllegalArgumentException (
            "\n\n"
          + "   Call to InputRow.getCell (String) with a heading String that\n"
          + "   is not in the InputTable of the InputRow.\n"
          + "\n"
          + "      Heading Argument: \"" + theHeading + "\"\n");
d93 8
a100 2
 * The InputTable to which this InputRow belongs
 *******************************************************************************
d102 5
a106 1
   private final InputTable myInputTable;
d108 2
a109 6
/*******************************************************************************
 * The row index of the table row represented by this InputRow.
 * {@@code myIndex == 1} for the first row.
 *******************************************************************************
 */
   private final int myIndex;
d111 2
a112 6
/*******************************************************************************
 * {@@code myCells.get (colIdx-1)} is the table cell for the row represented by
 * this InputRow and column #{@@code colIdx}.
 *******************************************************************************
 */
   private final ArrayList <String> myCells;
@


1.6
log
@Moved newProperty to class Category
@
text
@d6 1
a6 1
package       com.ibm.witm;
@


1.5
log
@//=== ==> /////
@
text
@a7 2
import static com.ibm.witm.Utility.*;

@


1.4
log
@Revised some messsages.
@
text
@d2 1
a2 1
//==============================================================================
d4 1
a4 1
//==============================================================================
d20 1
a20 1
//==============================================================================
d22 1
a22 1
//==============================================================================
d57 1
a57 1
//==============================================================================
d59 1
a59 1
//==============================================================================
d76 1
a76 1
//==============================================================================
d78 1
a78 1
//==============================================================================
d116 1
a116 1
//==============================================================================
@


1.3
log
@Exception messages.
@
text
@d90 2
a91 2
          + "   Call to theInputRow.getCell (...) with a heading that is not\n"
          + "   in the InputTable.\n"
@


1.2
log
@Created CompoundCategory
@
text
@d90 2
a91 2
          + "   The getCell method of class InputRow was called with a\n"
          + "   heading that is not in the InputTable.\n"
@


1.1
log
@Initial revision
@
text
@d81 1
a81 1
 * Throws an exception indicating that the getCell method was invoked with a
d90 1
a90 1
          + "   The getCell method of class InputRow was invoked with a\n"
@


1.1.1.1
log
@Renaming WIT-ML to WIT-M.

@
text
@@
