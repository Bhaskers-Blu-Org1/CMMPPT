head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2011.06.06.20.33.30;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2011.06.06.16.39.06;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Type ==> Category
@
text
@
//==============================================================================
// WIT-M Source File ItemType.java.
//==============================================================================

package       com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.io.PrintStream;
import java.util.ArrayList;

/*******************************************************************************
 * An ItemType represents a conceptual grouping of similar Items. Each
 * Item belongs to a particular ItemType and all Items that belong
 * to a given ItemType are treated uniformly by WIT-M. An
 * ItemType will belong to a Scheme and is considered to be a defining
 * aspect of the Scheme.
 *******************************************************************************
 */
public abstract class ItemType
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Factory method:<br>
 * Constructs a new Property <V> that will be associated with this
 * ItemType.
 * 
 * @@param theValueType The value type of the Property
 * @@param theName      The name       of the Property
 * @@return             The new Property <V>
 * 
 * @@throws NullPointerException  If any argument is null
 * @@throws IllegalStateException If the Scheme to which this ItemType
 *                               belongs is frozen
 *******************************************************************************
 */
   public final <V> Property <V> newProperty (
         Class <V> theValueType,
         String    theName)
      {
      prohibitNull (theValueType, "theValueType");
      prohibitNull (theName,      "theName");
      
      myScheme.prohibitFrozen ();
      
      for (ItemType theElType: myScheme.getPrimitiveTypes ())
         {
         theElType.prohibitDupPropName (theName);
         }
      
      for (ItemType theElType: myScheme.getTupleTypes ())
         {
         theElType.prohibitDupPropName (theName);
         }
      
      return new Property <V> (this, theValueType, theName);
      }

/*******************************************************************************
 * Accessor.
 * 
 * @@return The name of this ItemType
 *******************************************************************************
 */
   public final String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Accessor.
 * 
 * @@return The Scheme to which this ItemType belongs
 *******************************************************************************
 */
   public final Scheme getScheme ()
      {
      return myScheme;
      }

//==============================================================================
// Package-Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   ItemType (Scheme theScheme, String theName)
      {
      assert (theScheme != null);
      assert (theName   != null);
      
      myScheme     = theScheme;
      myName       = theName;
      myProperties = new ArrayList <Property <?>> ();
      }

/*******************************************************************************
 * Stores theProperty in this ItemType.
 *******************************************************************************
 */
   <V> void store (Property <V> theProperty)
      {
      myProperties.add (theProperty);
      }

/*******************************************************************************
 * Prints the Properties of this ItemType to theStream.
 *******************************************************************************
 */
   final void printProperties (PrintStream theStream)
      {
      for (Property <?> theProp: myProperties)
         theProp.print (theStream);
      }

/*******************************************************************************
 * @@return The # of Properties associated with this ItemType.
 *******************************************************************************
 */
   final int getNProperties ()
      {
      return myProperties.size ();
      }

/*******************************************************************************
 * Verifies that the Scheme of this ItemType matches the Scheme of the
 * current Implementation.
 *******************************************************************************
 */
   void requireSchemeMatchesCurImp ()
      {
      if (getScheme () != curImplementation ().getScheme ())
         {
         throw
            new IllegalStateException (
               "\n\n"
             + "   Call to an ItemType method where the Scheme of the\n"
             + "   ItemType does not match the Scheme of the current\n"
             + "   Implementation.\n"
             + "\n"
             + "      ItemType:               "
             +                                                myName     + "\n"
             + "         Scheme:              "
             +                                   getScheme ().getName () + "\n"
             + "      Current Implementation: "
             +              curImplementation ()             .getName () + "\n"
             + "         Scheme:              "
             +              curImplementation ().getScheme ().getName () + "\n"
               );
         }
      }

//==============================================================================
// Private
//==============================================================================
   
/*******************************************************************************
 * Verifies that theName does not duplicate the name of an existing Property in
 * this ItemType.<br>
 * To be called by newProperty (...).
 *******************************************************************************
 */
   private final void prohibitDupPropName (String theName)
      {
      for (Property <?> theProp: myProperties)
         {
         if (theProp.getName ().equals (theName))
            {
            throw
               new IllegalArgumentException (
                  "\n\n"
                + "   theElType.newProperty (theValueType, theName) was\n"
                + "   called where theName duplicates the name of an\n"
                + "   existing Property in the Scheme.\n"
                + "\n"
                + "      Duplicate Name: \"" + theName + "\"\n");
            }
         }
      }

/*******************************************************************************
 * The Scheme of the WIT model to which this ItemType belongs
 *******************************************************************************
 */
   private final Scheme myScheme;
   
/*******************************************************************************
 * The name of this ItemType
 *******************************************************************************
 */
   private final String myName;
   
/*******************************************************************************
 * A list of all Properties that belong to this ItemType.
 *******************************************************************************
 */
   private final ArrayList <Property <?>> myProperties;

//==============================================================================
}
@


1.1
log
@Element     ==> Item
ElementType ==> ItemTYpe
@
text
@@

