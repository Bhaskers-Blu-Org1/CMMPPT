head	1.47;
access;
symbols
	start:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.47
date	2011.07.22.16.15.32;	author rjw;	state Exp;
branches;
next	1.46;

1.46
date	2011.07.21.21.46.41;	author rjw;	state Exp;
branches;
next	1.45;

1.45
date	2011.07.21.21.44.48;	author rjw;	state Exp;
branches;
next	1.44;

1.44
date	2011.07.20.19.16.43;	author rjw;	state Exp;
branches;
next	1.43;

1.43
date	2011.07.19.21.13.13;	author rjw;	state Exp;
branches;
next	1.42;

1.42
date	2011.07.19.19.21.59;	author rjw;	state Exp;
branches;
next	1.41;

1.41
date	2011.07.15.21.46.54;	author rjw;	state Exp;
branches;
next	1.40;

1.40
date	2011.07.15.17.42.31;	author rjw;	state Exp;
branches;
next	1.39;

1.39
date	2011.07.14.23.40.34;	author rjw;	state Exp;
branches;
next	1.38;

1.38
date	2011.07.08.20.45.59;	author rjw;	state Exp;
branches;
next	1.37;

1.37
date	2011.07.07.19.29.38;	author rjw;	state Exp;
branches;
next	1.36;

1.36
date	2011.07.07.19.05.03;	author rjw;	state Exp;
branches;
next	1.35;

1.35
date	2011.07.06.19.22.45;	author rjw;	state Exp;
branches;
next	1.34;

1.34
date	2011.07.05.21.15.04;	author rjw;	state Exp;
branches;
next	1.33;

1.33
date	2011.07.01.20.17.35;	author rjw;	state Exp;
branches;
next	1.32;

1.32
date	2011.07.01.15.56.23;	author rjw;	state Exp;
branches;
next	1.31;

1.31
date	2011.06.30.23.43.49;	author rjw;	state Exp;
branches;
next	1.30;

1.30
date	2011.06.30.23.25.40;	author rjw;	state Exp;
branches;
next	1.29;

1.29
date	2011.06.30.22.03.39;	author rjw;	state Exp;
branches;
next	1.28;

1.28
date	2011.06.23.22.52.05;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.06.22.15.07.26;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.06.21.22.18.04;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.06.17.18.23.04;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.06.09.18.19.22;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.06.07.20.14.10;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.06.06.20.33.31;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.06.06.16.39.06;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.06.03.23.47.45;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.06.03.22.23.43;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.05.31.19.26.19;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.05.27.22.12.25;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.05.26.21.00.49;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.05.24.23.44.41;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.05.24.21.09.37;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.24.18.46.14;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.24.17.56.46;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.24.00.11.50;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.20.21.30.11;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.20.19.26.50;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.20.15.16.17;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.19.23.31.44;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.18.17.46.04;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.17.23.38.04;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.17.20.58.41;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.17.19.32.24;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.17.16.09.18;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.47
log
@Class Period
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File Primitive.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.Utility.*;

/*******************************************************************************
 * A Primitive is an Item that represents a data object that's considered to
 * be "primitive", i.e., one that is not defined in terms of other data objects.
 * Each Primitive has a name and belongs to a particular PrimitiveCategory and a
 * particular ModelInstance.<br><br>
 * 
 * The factory method for this class is
 * PrimitiveCategory.newPrimitive (theName)
 *******************************************************************************
 */
public final class Primitive extends Item
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-static Fields
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * The name of this Primitive
 *******************************************************************************
 */
   private final String myName;

////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////
   
   Primitive (
         PrimitiveCategory thePrimCat,
         String            theName,
         ModelInstance     theInst)
      {
      super (thePrimCat, theInst);
      
      myName = theName;
      
      theInst.getPrimitiveMgr (thePrimCat).storePrimitive (this);
      }
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */      @@Override
   String getID ()
      {
      return concatenation ("'", myName, "'");
      }

////////////////////////////////////////////////////////////////////////////////
// Public Non-static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * @@return The name of this Primitive
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * @@return The PrimitiveCategory of this Primitive
 *******************************************************************************
 */
   public PrimitiveCategory getPrimitiveCategory ()
      {
      return (PrimitiveCategory) getItemCategory ();
      }

////////////////////////////////////////////////////////////////////////////////
}
@


1.46
log
@Minor revision
@
text
@a65 2
 * Accessor.
 * 
d69 1
a69 1
   public final String getName ()
@


1.45
log
@Removed first implementation of the period concept.
@
text
@d20 1
a20 1
public class Primitive extends Item
d80 1
a80 1
   public final PrimitiveCategory getPrimitiveCategory ()
@


1.44
log
@Revised String conventions
@
text
@a84 20
/*******************************************************************************
 * If this Primitive belongs to the PERIOD ItemCategory, this method returns the
 * period index of this Primitive: the number of PERIOD primitives in the
 * ModelInstance created before this one.
 * 
 * @@return The period index of this Primitive.
 * 
 * @@throws UnsupportedOperationException If this Primitive does not belong to
 *                                       the PERIOD ItemCategory
 *******************************************************************************
 */
   public int getPeriodIndex ()
      {
      throw
         new UnsupportedOperationException (
               "\n\n"
             + "   Call to Primitive.getPeriodIndex () on a Primitive that\n"
             + "   did not belong to the PERIOD ItemCategory.\n");
      }

@


1.43
log
@Embodiment ==> ModelInstance
@
text
@d58 1
a58 1
      return concatenation ("\"", myName, "\"");
@


1.42
log
@Efficient String concatenation.
@
text
@d14 1
a14 1
 * particular Embodiment.<br><br>
d39 1
a39 1
         Embodiment        theEmb)
d41 1
a41 1
      super (thePrimCat, theEmb);
d45 1
a45 1
      theEmb.getPrimitiveMgr (thePrimCat).store (this);
d88 1
a88 1
 * Embodiment created before this one.
@


1.41
log
@Long names.
@
text
@d8 2
d58 1
a58 1
      return "\"" + myName + "\"";
@


1.40
log
@Category ==> ItemCategory
@
text
@d47 13
a83 13
 * {@@inheritDoc}
 *******************************************************************************
 */            @@Override
   public final String toString ()
      {
      return
         getPrimitiveCategory ().getName ()
       + " \""
       + myName
       + "\"";
      }
   
/*******************************************************************************
@


1.39
log
@Signatures with argument names.
@
text
@d67 1
a67 1
      return (PrimitiveCategory) getCategory ();
d84 1
a84 1
 * If this Primitive belongs to the PERIOD Category, this method returns the
d91 1
a91 1
 *                                       the PERIOD Category
d100 1
a100 1
             + "   did not belong to the PERIOD Category.\n");
@


1.38
log
@Class ProblemMgr.
@
text
@d15 1
a15 1
 * PrimitiveCategory.newPrimitive (String)
@


1.37
log
@PERIOD Primitives
@
text
@d6 1
a6 1
package       com.ibm.witm;
@


1.36
log
@Period Primitives.
@
text
@d85 2
a86 2
 * index of the PERIOD: the number of PERIODs in the Embodiment created
 * before this one.
d88 1
a88 1
 * @@return The index of the period.
d94 1
a94 1
   public int getIndex ()
d99 2
a100 2
             + "   Call to Primitive.getIndex () on a Primitive that did not\n"
             + "   belong to the PERIOD Category.\n");
@


1.35
log
@Moved some responsibility to constructors.
@
text
@d18 1
a18 1
public final class Primitive extends Item
d56 1
a56 1
   public String getName ()
d65 1
a65 1
   public PrimitiveCategory getPrimitiveCategory ()
d73 2
a74 2
 */      @@Override
   public String toString ()
d83 20
@


1.34
log
@Implementation ==> Embodiment
@
text
@d42 2
@


1.33
log
@Moved newCompound from Implementation to CompoundCategory.
@
text
@d12 1
a12 1
 * particular Implementation.<br><br>
d37 1
a37 1
         Implementation    theImple)
d39 1
a39 1
      super (thePrimCat, theImple);
@


1.32
log
@Moved newProperty to class Category
@
text
@d15 1
a15 1
 * Implementation.newPrimitive (PrimitiveCategory, String)
@


1.31
log
@//=== ==> /////
@
text
@a7 2
import static com.ibm.witm.Utility.*;

@


1.30
log
@Re-arranged source code.
@
text
@d2 1
a2 1
//==============================================================================
d4 1
a4 1
//==============================================================================
d22 1
a22 1
//==============================================================================
d24 1
a24 1
//==============================================================================
d32 1
a32 1
//==============================================================================
d34 1
a34 1
//==============================================================================
d46 1
a46 1
//==============================================================================
d48 1
a48 1
//==============================================================================
d83 1
a83 1
//==============================================================================
@


1.29
log
@Various revisions.
@
text
@d23 1
a23 1
// Public
d27 1
a27 1
 * {@@inheritDoc}
d29 11
a39 2
 */      @@Override
   public String toString ()
d41 3
a43 5
      return
         getPrimitiveCategory ().getName ()
       + " \""
       + myName
       + "\"";
d46 4
a69 4
//==============================================================================
// Package Internal
//==============================================================================
   
d71 1
a71 1
 * Constructor.
d73 2
a74 5
 */
   Primitive (
         PrimitiveCategory thePrimCat,
         String            theName,
         Implementation    theImple)
d76 5
a80 3
      super (thePrimCat, theImple);
      
      myName = theName;
a83 10
// Private
//==============================================================================

/*******************************************************************************
 * The name of this Primitive
 *******************************************************************************
 */
   private final String myName;

//==============================================================================
@


1.28
log
@getSlice
@
text
@d29 2
a30 2
 */
   @@Override public String toString ()
@


1.27
log
@Doc comments
@
text
@d70 1
a70 1
         Implementation    theImpl)
d72 1
a72 1
      super (thePrimCat, theImpl);
@


1.26
log
@Revised comments, etc.
@
text
@d16 2
a17 2
 * The factory method for this class is method newPrimitive of class 
 * Implementation.
@


1.25
log
@Replaced ItemCategory with Category <?>.
@
text
@d26 3
a28 3
/* *****************************************************************************
 * Doc comment inherited.
 * *****************************************************************************
@


1.24
log
@theImple ==> theImpl
@
text
@d56 1
a56 1
      return (PrimitiveCategory) getItemCategory ();
@


1.23
log
@Renaming
@
text
@d70 1
a70 1
         Implementation    theImp)
d72 1
a72 1
      super (thePrimCat, theImp);
@


1.22
log
@Type ==> Category
@
text
@d68 1
a68 1
         PrimitiveCategory thePrimCategory,
d72 1
a72 1
      super (thePrimCategory, theImp);
@


1.21
log
@Element     ==> Item
ElementType ==> ItemTYpe
@
text
@d13 1
a13 1
 * Each Primitive has a name and belongs to a particular PrimitiveType and a
d33 1
a33 1
         getPrimitiveType ().getName ()
d51 1
a51 1
 * @@return The PrimitiveType of this Primitive
d54 1
a54 1
   public PrimitiveType getPrimitiveType ()
d56 1
a56 1
      return (PrimitiveType) getItemType ();
d68 3
a70 3
         PrimitiveType  thePrimType,
         String         theName,
         Implementation theImp)
d72 1
a72 1
      super (thePrimType, theImp);
@


1.20
log
@getPrimitiveMgr
@
text
@d11 1
a11 1
 * A Primitive is an Element that represents a data object that's considered to
d20 1
a20 1
public final class Primitive extends Element
d56 1
a56 1
      return (PrimitiveType) getElementType ();
@


1.19
log
@Moved some factory methods.
@
text
@a74 2
      
      theImp.getPrimitiveMgr (thePrimType).store (this);
@


1.18
log
@Embodiment ==> Implementation
@
text
@d16 2
a17 3
 * Please Note:<br>
 * The factory method for creating instances of this class is method
 * newPrimitive of class PrimitiveType.
@


1.17
log
@theTuple.toString.
@
text
@d14 1
a14 1
 * particular Embodiment.<br><br>
d69 3
a71 3
         PrimitiveType thePrimType,
         String        theName,
         Embodiment    theEmbodiment)
d73 1
a73 1
      super (thePrimType, theEmbodiment);
d77 1
a77 1
      theEmbodiment.getPrimitiveMgr (thePrimType).store (this);
@


1.16
log
@Test of newPrimitive.
@
text
@d34 1
a34 2
         "Primitive "
       + getPrimitiveType ().getName ()
@


1.15
log
@newTuple
@
text
@d71 2
a72 2
         Embodiment    theEmbodiment,
         String        theName)
@


1.14
log
@Storing of objects.
@
text
@d28 2
a29 2
 * The doc comment is inherited
 *******************************************************************************
d53 1
a53 1
 * @@return The PrimitiveType to which this Primitive belongs
@


1.13
log
@Category ==> Type
@
text
@d72 1
a72 1
         String         theName)
d77 2
@


1.12
log
@Fulfillment ==> Embodiment
@
text
@d13 1
a13 1
 * Each Primitive has a name and belongs to a particular PrimitiveCategory and a
d18 1
a18 1
 * newPrimitive of class PrimitiveCategory.
d35 1
a35 1
       + getPrimitiveCategory ().getName ()
d53 1
a53 1
 * @@return The PrimitiveCategory to which this Primitive belongs
d56 1
a56 1
   public PrimitiveCategory getPrimitiveCategory ()
d58 1
a58 1
      return (PrimitiveCategory) getElementCategory ();
d70 3
a72 3
         PrimitiveCategory thePrimCat,
         Embodiment       theEmbodiment,
         String            theName)
d74 1
a74 1
      super (thePrimCat, theEmbodiment);
@


1.11
log
@Primitives
@
text
@d14 1
a14 1
 * particular Fulfillment.<br><br>
d71 1
a71 1
         Fulfillment       theFulfillment,
d74 1
a74 1
      super (thePrimCat, theFulfillment);
@


1.10
log
@Check for duplicate ComponentCategory name.
@
text
@d18 1
a18 1
 * newPrimitive of class Fulfillment.
d70 1
a71 1
         PrimitiveCategory thePrimCat,
d74 1
a74 1
      super (theFulfillment, thePrimCat);
@


1.9
log
@AppProblem ==> Fulfillment
@
text
@d27 2
a28 1
/*******************************************************************************
@


1.8
log
@@@Override annotations
@
text
@d14 1
a14 1
 * particular AppProblem.<br><br>
d18 1
a18 1
 * newPrimitive of class AppProblem.
d69 1
a69 1
         AppProblem        theAppProblem,
d73 1
a73 1
      super (theAppProblem, thePrimCat);
@


1.7
log
@Created CompoundCategory
@
text
@a27 1
 * Override from class Object
d30 1
a30 1
   public String toString ()
@


1.6
log
@Error testing for theElem.set.
@
text
@a89 14
// Static initialization block
//
// This block contains vacuous code that refers to class InputTable, so that
// class InputTable and the classes it refers to will be compiled whenever class
// Primitive is compiled.
//==============================================================================

   static
      {
      if (false)
         InputTable.class.toString ();
      }
   
//==============================================================================
@


1.5
log
@theElem.set (...)
@
text
@d33 6
a38 1
      return getPrimitiveCategory ().getName () + " \"" + myName + "\"";
@


1.4
log
@Class Property
@
text
@d33 1
a33 1
      return myPrimitiveCategory.getName () + " \"" + myName + "\"";
a36 11
 * Override from class Element
 * 
 * @@return The PrimitiveCategory to which this Primitive belongs
 *******************************************************************************
 */
   public ElementCategory getElementCategory ()
      {
      return myPrimitiveCategory;
      }

/*******************************************************************************
a47 2
 * Accessor.
 * 
d53 1
a53 1
      return myPrimitiveCategory;
d69 1
a69 1
      super (theAppProblem);
d71 1
a71 4
      assert (thePrimCat.getScheme () == theAppProblem.getScheme ());
      
      myPrimitiveCategory = thePrimCat;
      myName              = theName;
a81 6
   private final PrimitiveCategory myPrimitiveCategory;
   
/*******************************************************************************
 * The name of this Primitive
 *******************************************************************************
 */
@


1.3
log
@Unique Property names.
@
text
@d14 1
a14 1
 * particular AppProblem. <br> <br>
d16 1
a16 1
 * Please Note: <br>
@


1.2
log
@Created generic class Property.
@
text
@d14 1
a14 1
 * particular AppProblem. </br> </br>
d16 1
a16 1
 * Please Note: </br>
@


1.1
log
@Initial revision
@
text
@d105 1
a105 1
   
@


1.1.1.1
log
@Renaming WIT-ML to WIT-M.

@
text
@@
