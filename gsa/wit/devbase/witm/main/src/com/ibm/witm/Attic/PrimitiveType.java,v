head	1.17;
access;
symbols;
locks; strict;
comment	@# @;


1.17
date	2011.06.06.20.33.32;	author rjw;	state dead;
branches;
next	1.16;

1.16
date	2011.06.06.16.39.07;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.06.03.23.15.50;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.06.03.22.48.04;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.03.22.23.43;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.31.19.26.20;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.27.23.55.11;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.27.16.39.27;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.26.23.40.14;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.26.22.58.16;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.26.22.32.18;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.26.21.24.26;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.26.21.00.50;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.26.00.17.15;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.24.23.44.41;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.24.21.09.38;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.24.18.46.15;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Type ==> Category
@
text
@
//==============================================================================
// WIT-M Source File PrimitiveType.java.
//==============================================================================

package       com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.io.PrintStream;
import java.util.List;

/*******************************************************************************
 * A PrimitiveType is an ItemType for Primitives.<br><br>
 * 
 * Please Note:<br>
 * The factory method for creating instances of this class is method
 * newPrimitiveType of class Scheme.
 *******************************************************************************
 */
public final class PrimitiveType extends ItemType
{
//==============================================================================
// Public
//==============================================================================

/* *****************************************************************************
 * Doc comment inherited.
 * *****************************************************************************
 */
   @@Override public String toString ()
      {
      return "PrimitiveType \"" + getName () + "\"";
      }
   
//==============================================================================
// Package Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   PrimitiveType (Scheme theScheme, String theName)
      {
      super (theScheme, theName);
      
      myIndex = theScheme.getPrimitiveTypes ().size ();
      
      theScheme.store (this);
      }

/*******************************************************************************
 * Prints this PrimitiveType to theStream.
 *******************************************************************************
 */
   void print (PrintStream theStream)
      {
      theStream.printf (
         "%n"
      +  "PrimitiveType \"%s\":%n",
         getName ());
      
      printProperties (theStream);
      }

/*******************************************************************************
 * @@return A unique index for this PrimitiveType.
 *******************************************************************************
 */
   int getIndex ()
      {
      return myIndex;
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * A unique index for this PrimitiveType.<br>
 * # of PrimitiveTypes in the Scheme that were constructed before this one.
 *******************************************************************************
 */
   private final int myIndex;

//==============================================================================
}
@


1.16
log
@Element     ==> Item
ElementType ==> ItemTYpe
@
text
@@


1.15
log
@Moved get (PT, Name).
@
text
@d14 1
a14 1
 * A PrimitiveType is an ElementType for Primitives.<br><br>
d21 1
a21 1
public final class PrimitiveType extends ElementType
@


1.14
log
@Moved getAll.
@
text
@a26 24
/*******************************************************************************
 * Primitive look-up method
 * 
 * @@param  theName The name of the Primitive to be retrieved
 * 
 * @@return         The Primitive of this PrimitiveType in the current 
 *                 Implementation whose name matches theName, if any;
 *                 otherwise null
 *         
 * @@throws NullPointerException  If theName is null
 * @@throws IllegalStateException If the current Implementation is null
 * @@throws IllegalStateException If the Scheme of this PrimitiveType does not
 *                               match the Scheme of the current Implementation
 *******************************************************************************
 */
   public Primitive get (String theName)
      {
      prohibitNull               (theName, "theName");
      requireCurImplementation   ();
      requireSchemeMatchesCurImp ();
      
      return getPrimitiveMgr ().getPrimitive (theName);
      }
   
a80 9
 * @@return The PrimitiveMgr of this PrimitiveType in the current Implementation.
 *******************************************************************************
 */
   private PrimitiveMgr getPrimitiveMgr ()
      {
      return curImplementation ().getPrimitiveMgr (this);
      }
   
/*******************************************************************************
@


1.13
log
@Moved some factory methods.
@
text
@a27 20
 * Primitive List method
 * 
 * @@return An unmodifiable List of all of the Primitives of this PrimitiveType
 *         in the current Implementation, listed in the order in which they were
 *         created.
 * 
 * @@throws IllegalStateException If the current Implementation is null
 * @@throws IllegalStateException If the Scheme of this PrimitiveType does not
 *                               match the Scheme of the current Implementation
 *******************************************************************************
 */
   public List <Primitive> getAll ()
      {
      requireCurImplementation   ();
      requireSchemeMatchesCurImp ();
      
      return getPrimitiveMgr ().getPrimitives ();
      }
   
/*******************************************************************************
@


1.12
log
@Embodiment ==> Implementation
@
text
@a27 27
 * Factory method:<br>
 * Constructs a new Primitive of this PrimitiveType in the current
 * Implementation.
 *   
 * @@param  theName                  The name for the Primitive 
 * @@return                          The new Primitive
 * @@throws NullPointerException     If theName is null
 * @@throws IllegalStateException    If the current Implementation is null
 * @@throws IllegalStateException    If the Scheme of this PrimitiveType does
 *                                  not match the Scheme of the current
 *                                  Implementation
 * @@throws IllegalArgumentException If theName matches the name of an existing
 *                                  Primitive of this PrimitiveType in the
 *                                  current Implementation
 *******************************************************************************
 */
   public Primitive newPrimitive (String theName)
      {
      prohibitNull               (theName, "theName");
      requireCurImplementation   ();
      requireSchemeMatchesCurImp ();
      prohibitDupName            (theName);
   
      return new Primitive (this, theName, curImplementation ());
      }

/*******************************************************************************
a124 23
 * Verifies that theName does not match the name of a Primitive of this
 * PrimitiveType in the current Implementation.
 *******************************************************************************
 */
   private void prohibitDupName (String theName)
      {
      if (getPrimitiveMgr ().getPrimitive (theName) != null)
         {
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to thePrimitiveType.newPrimitive (theName),"
             + "\n"
             + "   where the theName matches the name of an existing\n"
             + "   Primitive of thePrimitiveType in the current\n"
             +	"   Implementation.\n"
             + "\n"
             + "      PrimitiveType: "   + getName () + "\n"
             + "      Name:          \"" + theName    + "\"\n");
         }
      }
   
/*******************************************************************************
@


1.11
log
@theTupleType.getAll
@
text
@d29 2
a30 1
 * Constructs a new Primitive of this PrimitiveType in the current Embodiment.
d35 1
a35 1
 * @@throws IllegalStateException    If the current Embodiment is null
d38 1
a38 1
 *                                  Embodiment
d41 1
a41 1
 *                                  current Embodiment
d47 2
a48 2
      requireCurEmbodiment       ();
      requireSchemeMatchesCurEmb ();
d51 1
a51 1
      return new Primitive (this, theName, curEmbodiment ());
d58 1
a58 1
 *         in the current Embodiment, listed in the order in which they were
d61 1
a61 1
 * @@throws IllegalStateException If the current Embodiment is null
d63 1
a63 1
 *                               match the Scheme of the current Embodiment
d68 2
a69 2
      requireCurEmbodiment       ();
      requireSchemeMatchesCurEmb ();
d79 3
a81 2
 * @@return         The Primitive of this PrimitiveType in the current Embodiment
 *                 whose name matches theName, if any; otherwise null
d84 1
a84 1
 * @@throws IllegalStateException If the current Embodiment is null
d86 1
a86 1
 *                               match the Scheme of the current Embodiment
d92 2
a93 2
      requireCurEmbodiment       ();
      requireSchemeMatchesCurEmb ();
d153 1
a153 1
 * PrimitiveType in the current Embodiment.
d166 2
a167 1
             + "   Primitive of thePrimitiveType in the current Embodiment.\n"
d175 1
a175 1
 * @@return The PrimitiveMgr of the current Embodiment for this PrimitiveType.
d180 1
a180 1
      return curEmbodiment ().getPrimitiveMgr (this);
@


1.10
log
@Improved error messages.
@
text
@a149 24
 * Verifies that the Scheme of this PrimitiveType matches the Scheme of the
 * current Embodiment.
 *******************************************************************************
 */
   private void requireSchemeMatchesCurEmb ()
      {
      if (getScheme () != curEmbodiment ().getScheme ())
         {
         throw
            new IllegalStateException (
               "\n\n"
             + "   Call to a PrimitiveType method where the Scheme of the\n"
             + "   PrimitiveType does not match the Scheme of the current\n"
             + "   Embodiment.\n"
             + "\n"
             + "      PrimitiveType:      "                  + getName () + "\n"
             + "         Scheme:          "     + getScheme ().getName () + "\n"
             + "      Current Embodiment: " + curEmbodiment ().getName () + "\n"
             + "         Scheme:          "
             +                   curEmbodiment ().getScheme ().getName () + "\n");
         }
      }
 
/*******************************************************************************
@


1.9
log
@Removed some Embodiment arg methods.
@
text
@d165 5
a169 4
             + "      PrimitiveType Scheme:      "
             +                         getScheme ().getName () + "\n"
             + "      Current Embodiment Scheme: "
             +        curEmbodiment ().getScheme ().getName () + "\n");
@


1.8
log
@thePrimitiveType.get
@
text
@a28 17
 * Sets the current Embodiment to theEmbodiment, then constructs a new
 * Primitive of this PrimitiveType in the current Embodiment.
 *   
 * @@param theEmbodiment The Embodiment which is to become current.
 * @@see   Embodiment.setCurrentEmbodiment
 * @@see   newPrimitive (String)
 *******************************************************************************
 */
   public Primitive newPrimitive (String theName, Embodiment theEmbodiment)
      {
      Embodiment.setCurrentEmbodiment (theEmbodiment);
      
      return newPrimitive (theName);
      }

/*******************************************************************************
 * Factory method:<br>
a53 17
 * Primitive List method<br>
 * Sets the current Embodiment to theEmbodiment, then returns an unmodifiable
 * List of all of the Primitives of this PrimitiveType in the current
 * Embodiment.
 * 
 * @@see Embodiment.setCurrentEmbodiment
 * @@see getAll ()
 *******************************************************************************
 */
   public List <Primitive> getAll (Embodiment theEmbodiment)
      {
      Embodiment.setCurrentEmbodiment (theEmbodiment);
   
      return getAll ();
      }
   
/*******************************************************************************
a73 17
 * Primitive look-up method<br>
 * Sets the current Embodiment to theEmbodiment, then returns the Primitive of
 * this PrimitiveType in the current Embodiment whose name matches theName, if
 * any; otherwise null.
 * 
 * @@see Embodiment.setCurrentEmbodiment
 * @@see get ()
 *******************************************************************************
 */
   public Primitive get (String theName, Embodiment theEmbodiment)
      {
      Embodiment.setCurrentEmbodiment (theEmbodiment);
   
      return get (theName);
      }
   
/*******************************************************************************
@


1.7
log
@getAll
@
text
@d108 17
a125 2
 * @@param  theName        The name of the Primitive to be retrieved
 * @@param  theEmbodiment The Embodiment whose Primitive is to be retrieved
d127 4
a130 2
 * @@return The Primitive of this PrimitiveType in theEmbodiment whose name
 *         matches theName, if any; otherwise null
d132 4
a135 3
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theEmbodiment does not 
 *                                  match the Scheme of this PrimitiveType
d138 1
a138 1
   public Primitive get (String theName, Embodiment theEmbodiment)
d140 3
a142 2
      prohibitNull        (theEmbodiment, "theEmbodiment");
      prohibitNull        (theName,        "theName");
d144 1
a144 3
      requireSchemesMatch (theEmbodiment);
      
      return theEmbodiment.getPrimitiveMgr (this).getPrimitive (theName);
a200 21
 * Verifies that the Scheme of theEmbodiment matches the Scheme of this
 * PrimitiveType.
 *******************************************************************************
 */
   private void requireSchemesMatch (Embodiment theEmbodiment)
      {
      if (theEmbodiment.getScheme () != getScheme ())
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to a PrimitiveType method with an Embodiment\n"
             + "   argument whose Scheme does not match the Scheme of the\n"
             + "   PrimitiveType.\n"
             + "\n"
             + "      Embodiment Scheme:    "
             +        theEmbodiment.getScheme ().getName () + "\n"
             + "      PrimitiveType Scheme: "
             +                      getScheme ().getName () + "\n");
      }
 
/*******************************************************************************
@


1.6
log
@newPrimitive
@
text
@d51 1
a51 1
 * @@throws NullPointerException     If the current Embodiment is null
d71 17
d90 2
a91 3
 * @@param  theEmbodiment The Embodiment whose Primitives are to be listed.
 * @@return An unmodifiable List of all Primitives in a Embodiment that belong
 *         to this PrimitiveType, listed in the order in which they were
d94 3
a96 3
 * @@throws NullPointerException     If theEmbodiment is null
 * @@throws IllegalArgumentException If the Scheme of theEmbodiment does not
 *                                  match the Scheme of this PrimitiveType.
d99 1
a99 1
   public List <Primitive> getAll (Embodiment theEmbodiment)
d101 2
a102 1
      prohibitNull        (theEmbodiment, "theEmbodiment");
d104 1
a104 3
      requireSchemesMatch (theEmbodiment);
   
      return theEmbodiment.getPrimitiveMgr (this).getPrimitives ();
@


1.5
log
@Test of newPrimitive.
@
text
@d29 2
a30 1
 * Constructs a new Primitive of this PrimitiveType
d32 3
a34 10
 * @@param  theName                  The name for the Primitive 
 * @@param  theEmbodiment            The Embodiment to which the Primitive will
 *                                  belong
 * @@return                          The new Primitive
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of theEmbodiment does not
 *                                  match the Scheme of this PrimitiveType
 * @@throws IllegalArgumentException If theName matches the name of an existing
 *                                  Primitive of this PrimitiveType in
 *                                  theEmbodiment
d39 1
a39 2
      prohibitNull (theName,       "theName");
      prohibitNull (theEmbodiment, "theEmbodiment");
d41 1
a41 4
      requireSchemesMatch (theEmbodiment);
      prohibitDupName     (theName, theEmbodiment);
      
      return new Primitive (this, theName, theEmbodiment);
d46 1
a46 1
 * Constructs a new Primitive of this PrimitiveType in the current Embodiment
a213 23
 * PrimitiveType in theEmbodiment.
 *******************************************************************************
 */
   private void prohibitDupName (String theName, Embodiment theEmbodiment)
      {
      if (theEmbodiment.getPrimitiveMgr (this).getPrimitive (theName) != null)
         {
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to\n"
             + "   thePrimitiveType.newPrimitive (theEmbodiment, theName),"
             + "\n"
             + "   where the theName matches the name of an existing\n"
             + "   Primitive of thePrimitiveType in theEmbodiment.\n"
             + "\n"
             + "      PrimitiveType: "   + getName () + "\n"
             + "      Name:          \"" + theName    + "\"\n");
         }
      }
   
/*******************************************************************************
 * Verifies that theName does not match the name of a Primitive of this
@


1.4
log
@Current Embodiment
@
text
@a28 17
 * Constructs a new Primitive of this PrimitiveType in the current Embodiment.
 * <br>
 * Implemented by passing the current Embodiment to
 * newPrimitive (Embodiment, String).
 *   
 * @@param  theName The name for the Primitive 
 * @@return         The new Primitive
 * @@throws         Same as newPrimitive (Embodiment, theName)
 *******************************************************************************
 */
   public Primitive newPrimitive (String theName)
      {
      return newPrimitive (getCurrentEmbodiment (), theName);
      }

/*******************************************************************************
 * Factory method:<br>
d31 1
a33 1
 * @@param  theName                  The name for the Primitive 
d43 1
a43 1
   public Primitive newPrimitive (Embodiment theEmbodiment, String theName)
d45 1
a46 1
      prohibitNull (theName,       "theName");
d49 1
a49 1
      prohibitDupName     (theEmbodiment, theName);
d51 27
a77 1
      return new Primitive (this, theEmbodiment, theName);
d104 2
a106 2
 * @@param  theEmbodiment The Embodiment whose Primitive is to be retrieved
 * @@param  theName        The name of the Primitive to be retrieved
d111 2
a112 2
 * @@throws IllegalArgumentException If the Scheme of theEmbodiment does not match
 *                                  the Scheme of this PrimitiveType
d115 1
a115 1
   public Primitive get (Embodiment theEmbodiment, String theName)
d200 23
d227 1
a227 1
   private void prohibitDupName (Embodiment theEmbodiment, String theName)
d246 31
@


1.3
log
@newTuple
@
text
@d29 17
d48 1
a48 1
 * @@param  theEmbodiment           The Embodiment to which the Primitive will
a194 1
   @@SuppressWarnings("unused")
@


1.2
log
@Storing of objects.
@
text
@d46 1
a46 1
      prohibitNull (theName,        "theName");
d163 1
a163 1
             + "   Call to a PrimitiveType method will a Embodiment\n"
@


1.1
log
@Category ==> Type
@
text
@d51 1
a51 1
      return theEmbodiment.getPrimitiveMgr (this).newPrimitive (theName);
d121 2
@

