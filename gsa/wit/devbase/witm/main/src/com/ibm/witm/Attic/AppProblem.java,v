head	1.7;
access;
symbols
	start:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2011.05.20.19.26.48;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2011.05.20.15.16.16;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.19.23.31.42;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.17.23.38.03;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.17.20.58.40;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.17.19.32.23;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.16.22.08.55;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@AppProblem ==> Fulfillment
@
text
@
//==============================================================================
// WIT-M Source File AppProblem.java.
//==============================================================================

package       com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.util.List;

/*******************************************************************************
 * An AppProblem is the central object representing a WIT application problem,
 * i.e., a problem that is to be solved by using WIT.<br><br>
 * 
 * Please Note:<br>
 * The factory method for creating instances of this class is method
 * newAppProblem of class Scheme.
 *******************************************************************************
 */
public final class AppProblem
{
//==============================================================================
// Public
//==============================================================================

/*******************************************************************************
 * Factory method:<br>
 * Constructs a new Primitive that will belong to this AppProblem.
 *   
 * @@param  thePrimCat               The PrimitiveCategory to which the Primitive
 *                                  will belong
 * @@param  theName                  The name for the Primitive 
 * @@return                          The new Primitive
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of thePrimCat does not match
 *                                  the Scheme of this AppProblem
 * @@throws IllegalArgumentException If theName matches the name of an existing
 *                                  Primitive for thePrimCat in theAppProble
 *******************************************************************************
 */
   public Primitive newPrimitive (
         PrimitiveCategory thePrimCat,
         String            theName)
      {
      prohibitNull (thePrimCat, "thePrimCat");
      prohibitNull (theName,    "theName");
      
      requireSchemesMatch (thePrimCat);
      prohibitDupName     (thePrimCat, theName);
      
      return getPrimitiveMgr (thePrimCat).newPrimitive (theName);
      }
   
/*******************************************************************************
 * Primitive List method
 * 
 * @@return An unmodifiable List of all Primitives in this AppProblem that belong
 * to thePrimCat, listed in the order in which they were created.
 * 
 * @@throws NullPointerException     If thePrimCat is null
 * @@throws IllegalArgumentException If the Scheme of thePrimCat does not match
 *                                  the Scheme of this AppProblem
 *******************************************************************************
 */
   public List <Primitive> get (PrimitiveCategory thePrimCat)
      {
      prohibitNull        (thePrimCat, "thePrimCat");
      
      requireSchemesMatch (thePrimCat);
      
      return getPrimitiveMgr (thePrimCat).getPrimitives ();
      }
   
/*******************************************************************************
 * Primitive look-up method
 * 
 * @@return The Primitive in this AppProblem that belongs to thePrimCat and whose
 *         name matches theName, if any; otherwise null
 *         
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of thePrimCat does not match
 *                                  the Scheme of this AppProblem
 *******************************************************************************
 */
   public Primitive get (PrimitiveCategory thePrimCat, String theName)
      {
      prohibitNull        (thePrimCat, "thePrimCat");
      prohibitNull        (theName,    "theName");
      
      requireSchemesMatch (thePrimCat);
      
      return getPrimitiveMgr (thePrimCat).getPrimitive (theName);
      }
   
/*******************************************************************************
 *******************************************************************************
 */
   @@Override public String toString ()
      {
      return "AppProblem \"" + myName + "\"";
      }
   
/*******************************************************************************
 * Accessor.
 * 
 * @@return The name of this AppProblem
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Accessor
 * 
 * @@return The Scheme of this AppProblem
 *******************************************************************************
 */
   public Scheme getScheme ()
      {
      return myScheme;
      }

//==============================================================================
// Package Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   AppProblem (Scheme theScheme, String theName)
      {
      int          nPrimCats;
      PrimitiveMgr thePrimitiveMgr;
      
      assert (theScheme != null);
      assert (theName   != null);
      
      assert (theScheme.isFrozen ());
      
      myScheme          = theScheme;
      myName            = theName;
      
      nPrimCats         = theScheme.getPrimitiveCategories ().size ();
      
      myPrimitiveMgrArr = new PrimitiveMgr[nPrimCats];
      
      for (PrimitiveCategory thePrimCat: theScheme.getPrimitiveCategories ())
         {
         thePrimitiveMgr = new PrimitiveMgr (this, thePrimCat);
         
         myPrimitiveMgrArr[thePrimCat.getIndex ()] = thePrimitiveMgr;
         }
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * Verifies that the Scheme of theElCat matches the Scheme of this
 * AppProblem.<br>
 *******************************************************************************
 */
   private void requireSchemesMatch (ElementCategory theElCat)
      {
      if (theElCat.getScheme () != myScheme)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   An ElementCategory was passed as an argument to an\n"
             + "   AppProblem method, where the Scheme of the ElementCategory\n"
             + "   does not match the Scheme of theAppProblem.\n"
             + "\n"
             + "      ElementCategory Scheme: " + theElCat.getScheme () + "\n"
             + "      AppProblem      Scheme: " +          getScheme () + "\n");
      }
   
/*******************************************************************************
 * Verifies that theName does not match the name of a Primitive of thePromCat in
 * myAppProblem.<br>
 * To be called by newPrimitive (...).
 *******************************************************************************
 */
   private void prohibitDupName (PrimitiveCategory thePrimCat, String theName)
      {
      if (getPrimitiveMgr (thePrimCat).getPrimitive (theName) != null)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   theAppProblem.newPrimitive (thePrimCat, theName) was\n"
             + "   called where the theName matches the name of an existing\n"
             + "   Primitive for thePrimCat in theAppProblem.\n"
             + "\n"
             + "      PrimitiveCategory: "   + thePrimCat.getName () + "\n"
             + "      Name:              \"" + theName               + "\"\n");
      }
   
/*******************************************************************************
 * @@return the PrimitiveMgr for thePrimCat in this AppProblem.
 *******************************************************************************
 */
   private PrimitiveMgr getPrimitiveMgr (PrimitiveCategory thePrimCat)
      {
      assert (thePrimCat.getScheme () == myScheme);
         
      return myPrimitiveMgrArr[thePrimCat.getIndex ()];
      }
   
/*******************************************************************************
 * The Scheme of AppProblem
 *******************************************************************************
 */
   private final Scheme myScheme;
   
/*******************************************************************************
 * The name of this AppProblem
 *******************************************************************************
*/
   private final String myName;
   
/*******************************************************************************
 * myPrimitiveMgrArr[thePrimCat.getIndex ()] is the PrimitiveMgr for thePrimCat
 * in this AppProblem.
 *******************************************************************************
*/
   private final PrimitiveMgr[] myPrimitiveMgrArr;
   
//==============================================================================
// Static initialization block
//
// This block contains vacuous code that refers to class InputTable, so that
// class InputTable and the classes it refers to will be compiled whenever class
// AppProblem is compiled.
//==============================================================================

   static
      {
      if (false)
         InputTable.class.toString ();
      }
   
//==============================================================================
// Static initialization block
//
// This block contains vacuous code that refers to class CompoundCategory, so
// that class CompoundCategory and the classes it refers to will be compiled
// whenever class AppProblem is compiled.
//==============================================================================

   static
      {
      if (false)
         CompoundCategory.class.toString ();
      }
   
//==============================================================================
}
@


1.6
log
@@@Override annotations
@
text
@@


1.5
log
@Created CompoundCategory
@
text
@a96 4
 * Override from class Object
 * 
 * @@return Format:<br>
 *         AppProblem "{getName ()}" of {getScheme ()}
d99 1
a99 1
   public String toString ()
@


1.4
log
@theElem.set (...)
@
text
@d35 1
a35 2
 * @@throws NullPointerException     If thePrimCat is null
 * @@throws NullPointerException     If theName    is null
d81 1
a81 2
 * @@throws NullPointerException     If thePrimCat is null
 * @@throws NullPointerException     If theName    is null
d237 28
@


1.3
log
@Class Property
@
text
@d50 2
a51 2
      requireSchemeMatch (thePrimCat);
      prohibitDupName    (thePrimCat, theName);
d69 1
a69 1
      prohibitNull       (thePrimCat, "thePrimCat");
d71 1
a71 1
      requireSchemeMatch (thePrimCat);
d90 2
a91 2
      prohibitNull       (thePrimCat, "thePrimCat");
      prohibitNull       (theName,    "theName");
d93 1
a93 1
      requireSchemeMatch (thePrimCat);
d174 1
a174 1
   private final void requireSchemeMatch (ElementCategory theElCat)
d194 1
a194 3
   private final void prohibitDupName (
         PrimitiveCategory thePrimCat,
         String            theName)
d212 1
a212 1
   private final PrimitiveMgr getPrimitiveMgr (PrimitiveCategory thePrimCat)
@


1.2
log
@Unique Property names.
@
text
@d14 1
a14 1
 * i.e., a problem that is to be solved by using WIT. <br> <br>
d16 1
a16 1
 * Please Note: <br>
d28 1
a28 1
 * Factory method: <br>
d101 1
a101 1
 * @@return Format: <br>
d171 1
a171 1
 * AppProblem. <br>
d190 1
a190 1
 * myAppProblem. <br>
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
 * i.e., a problem that is to be solved by using WIT. </br> </br>
d16 1
a16 1
 * Please Note: </br>
d190 1
a190 1
 * myAppProblem. </br>
@


1.1.1.1
log
@Renaming WIT-ML to WIT-M.

@
text
@@
