head	1.29;
access;
symbols;
locks; strict;
comment	@# @;


1.29
date	2011.07.15.17.42.29;	author rjw;	state dead;
branches;
next	1.28;

1.28
date	2011.07.15.15.51.20;	author rjw;	state Exp;
branches;
next	1.27;

1.27
date	2011.07.14.20.24.02;	author rjw;	state Exp;
branches;
next	1.26;

1.26
date	2011.07.13.22.51.51;	author rjw;	state Exp;
branches;
next	1.25;

1.25
date	2011.07.13.20.49.31;	author rjw;	state Exp;
branches;
next	1.24;

1.24
date	2011.07.12.22.39.55;	author rjw;	state Exp;
branches;
next	1.23;

1.23
date	2011.07.08.20.45.55;	author rjw;	state Exp;
branches;
next	1.22;

1.22
date	2011.07.07.19.05.01;	author rjw;	state Exp;
branches;
next	1.21;

1.21
date	2011.07.06.22.29.18;	author rjw;	state Exp;
branches;
next	1.20;

1.20
date	2011.07.06.19.22.43;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.07.06.17.32.38;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.07.05.21.15.01;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.01.20.44.48;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.07.01.18.51.32;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.01.15.56.21;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.06.30.23.43.46;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.30.23.25.38;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.06.30.22.03.37;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.06.29.14.22.25;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.23.22.52.03;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.06.22.22.09.41;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.06.21.22.18.03;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.06.20.21.44.03;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.20.16.07.44;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.20.15.13.18;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.17.22.09.06;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.17.18.23.01;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.16.23.36.11;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.16.15.35.13;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Category ==> ItemCategory
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File Category.java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

/*******************************************************************************
 * A Category {@@literal<I>} represents a conceptual grouping of similar Items of
 * the I class. Each Item belongs to a particular Category and all Items that
 * belong to a given Category are treated uniformly by WIT-M. Each Category
 * belongs to a specific Scheme and is considered to be a defining aspect of the
 * Scheme.
 * 
 * @@param <I> The type of Item that will belong to this Category {@@literal<I>}:
 *            either Primitive or Tuple
 *******************************************************************************
 */
public abstract class Category <I extends Item>
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Fields
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * The Scheme of the WIT model to which this Category belongs
 *******************************************************************************
 */
   private final Scheme myScheme;
   
/*******************************************************************************
 * The name of this Category
 *******************************************************************************
 */
   private final String myName;
   
/*******************************************************************************
 * A list of all Properties that belong to this Category.
 *******************************************************************************
 */
   private final ArrayList <Property <?>> myProperties;

/*******************************************************************************
 * A unique index for this Category: the # of Categories in the Scheme created
 * before this one.
 *******************************************************************************
 */
   private final int myIndex;

/*******************************************************************************
 * True, iff this is the GLOBAL Category for its Scheme.
 *******************************************************************************
 */
   private final boolean amGlobalCategory;

////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////
   
   Category (Scheme theScheme, String theName)
      {
      assert (theScheme != null);
      assert (theName   != null);
      
      myScheme         = theScheme;
      myName           = theName;
      
      myProperties     = new ArrayList <Property <?>> ();
      
      myIndex          = theScheme.getCategories ().size ();
      
      amGlobalCategory = theName.equals ("GLOBAL");
      
      theScheme.store (this);
      
      theScheme.storeName (theName);
      }

////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * Performs actions to be taken by this Category when the Scheme is being
 * frozen.
 *******************************************************************************
 */
   abstract void freeze ();
   
/*******************************************************************************
 * @@return True, iff this Category is the GLOBAL Category for its Scheme.
 *******************************************************************************
 */
   boolean isGlobalCategory ()
      {
      return amGlobalCategory;
      }
   
/*******************************************************************************
 * Verifies that myScheme is not frozen.
 *******************************************************************************
 */
   void prohibitFrozenScheme (String signature)
      {
      if (myScheme.isFrozen ())
         throw
            new IllegalStateException (
               "\n\n"
             + "   Call to " + signature + ",\n"
             + "   on a Category whose Scheme is frozen.\n"
             + "\n"
             + "      Category: " + myName              + "\n"
             + "      Scheme:   " + myScheme.getName () + "\n");
      }

/*******************************************************************************
 * Verifies that the Scheme of this Category matches the Scheme of the current
 * Embodiment.
 *******************************************************************************
 */
   void requireSchemeMatchesCurEmb ()
      {
      if (myScheme != curEmbodiment ().getScheme ())
         throw
            new IllegalStateException (
               "\n\n"
             + "   A method was called on a Category that belongs to a Scheme\n"
             + "   that does not match the Scheme of the current Embodiment.\n"
             + "\n"
             + "      Category:           " + myName              + "\n"
             + "         Scheme:          " + myScheme.getName () + "\n"
             + "      Current Embodiment: " + curEmbodiment ().
                                                 getName ()       + "\n"
             + "         Scheme:          " + curEmbodiment ().
                                                 getScheme ().
                                                    getName ()    + "\n");
      }

/*******************************************************************************
 * Stores theProp (a newly created Property) in this Category.
 *******************************************************************************
 */
   void store (Property <?> theProp)
      {
      myProperties.add (theProp);
      }

/*******************************************************************************
 * Prints this Category to theStream.
 *******************************************************************************
 */
   final void print (PrintStream theStream)
      {
      printConcrete (theStream);
      
      theStream.printf ("%n");
      
      for (Property <?> theProp: myProperties)
         theProp.print (theStream);
      }

/*******************************************************************************
 * Prints the subclass-specific aspects of this Category to theStream.
 *******************************************************************************
 */
   abstract void printConcrete (PrintStream theStream);

/*******************************************************************************
 * @@return The number of Properties that belong to this Category.
 *******************************************************************************
 */
   final int nProperties ()
      {
      return myProperties.size ();
      }

/*******************************************************************************
 * @@return The unique index for this Category.
********************************************************************************
 */
   final int getIndex ()
      {
      return myIndex;
      }

/*******************************************************************************
 * Creates a new ItemMgr for this Category in theEmb.
 * @@return The new ItemMgr
********************************************************************************
 */
   abstract ItemMgr <?> newItemMgr (Embodiment theEmb);

////////////////////////////////////////////////////////////////////////////////
// Public Non-Static Methods
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * @@return The name of this Category
 *******************************************************************************
 */
   public final String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * @@return The Scheme to which this Category belongs
 *******************************************************************************
 */
   public final Scheme getScheme ()
      {
      return myScheme;
      }

/*******************************************************************************
 * Factory method:<br>
 * Constructs a new Property {@@literal<V>} that will belong to this Category.
 * 
 * @@param <V>          The value type of the Property (compile time)
 * @@param theName      The name of the Property
 * @@param theValueType The value type of the Property (run time)
 * @@return             The new Property {@@literal<V>}
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If theName duplicates the name of an 
 *                                  existing Property in the Scheme of this
 *                                  Category
 * @@throws IllegalStateException    If the Scheme of this Category is frozen
 *******************************************************************************
 */
   public <V> Property <V> newProperty (String theName, Class <V> theValueType)
      {
      prohibitNull             (theName,      "theName");
      prohibitNull             (theValueType, "theValueType");
      myScheme.prohibitDupName (theName,
                                "Category.newProperty (theName, theValueType)");
      prohibitFrozenScheme     ("Category.newProperty (theName, theValueType)");
      
      return new Property <V> (theName, theValueType, this);
      }

/*******************************************************************************
 * Item list retrieval method.
 * 
 * @@return  An unmodifiable view of an ArrayList of all of the I instances of
 *          this Category in in current Embodiment, listed in the order in which
 *          they were created.
 * 
 * @@throws IllegalStateException    If the current Embodiment is null
 * @@throws IllegalArgumentException If the Scheme of this Category does not
 *                                  match the Scheme of the current Embodiment
 *******************************************************************************
 */
   public List <I> getAll ()
      {
      requireCurEmbodiment       ();
      requireSchemeMatchesCurEmb ();
      
      return curEmbodiment ().getItemMgr (this).getInstances ();
      }

////////////////////////////////////////////////////////////////////////////////
}
@


1.28
log
@Checking for duplicate schematic names.
@
text
@@


1.27
log
@Error tests for newDimensionID.
@
text
@a62 25
// Private Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * Verifies that theName does not duplicate the name of an existing Property in
 * the Scheme of this Category.
*******************************************************************************
 */
   private void prohibitDupPropName (String theName)
      {
      for (Category <?> theCat: myScheme.getCategories ())
         for (Property <?> theProp: theCat.myProperties)
             if (theName.equals (theProp.getName ()))
               throw
                  new IllegalArgumentException (
                     "\n\n"
                   + "   Call to\n"
                   + "   Category.newProperty (theName, theValueType),\n"
                   + "   where theName duplicates the name of an existing\n"
                   + "   Property in the Scheme of the Category.\n"
                   + "\n"
                   + "      Duplicate Name: \"" + theName + "\"\n");
      }

////////////////////////////////////////////////////////////////////////////////
d81 2
d239 5
a243 4
      prohibitNull         (theName,      "theName");
      prohibitNull         (theValueType, "theValueType");
      prohibitDupPropName  (theName);
      prohibitFrozenScheme ("Category.newProperty (theValueType, theName)");
@


1.26
log
@Class DimensionID <I>
@
text
@d79 3
a81 2
                   + "   Call to Category.newProperty (Class <V>, String),\n"
                   + "   where the String duplicates the name of an existing\n"
d249 1
a250 1
 * @@param theName      The name of the Property
d260 1
a260 1
   public <V> Property <V> newProperty (Class <V> theValueType, String theName)
d262 1
a263 1
      prohibitNull         (theName,      "theName");
d267 1
a267 1
      return new Property <V> (theValueType, this, theName);
@


1.25
log
@Bug Fix: Prohibit newProperty on a frozen Scheme.
@
text
@a85 17
/*******************************************************************************
 * Verifies that myScheme is not frozen.
 *******************************************************************************
 */
   private void prohibitFrozenScheme ()
      {
      if (myScheme.isFrozen ())
         throw
            new IllegalStateException (
               "\n\n"
             + "   Call to Category.newProperty (Class <V>, String),\n"
             + "   on a Category whose Scheme is frozen.\n"
             + "\n"
             + "      Category: " + myName              + "\n"
             + "      Scheme:   " + myScheme.getName () + "\n");
      }

d128 17
d256 1
d264 1
a264 1
      prohibitFrozenScheme ();
@


1.24
log
@Compound ==> Tuple
@
text
@d86 17
d260 4
a263 3
      prohibitNull        (theValueType, "theValueType");
      prohibitNull        (theName,      "theName");
      prohibitDupPropName (theName);
@


1.23
log
@Class ProblemMgr.
@
text
@d22 1
a22 1
 *            either Primitive or Compound
@


1.22
log
@Period Primitives.
@
text
@d6 1
a6 1
package       com.ibm.witm;
@


1.21
log
@Removed period index Property.
@
text
@d57 1
a57 1
 * True, iff this is the global Category for its Scheme.
d60 1
a60 7
   private final boolean amGlobal;

/*******************************************************************************
 * True, iff this is the period Category for its Scheme.
 *******************************************************************************
 */
   private final boolean amPeriod;
d95 2
a96 2
      myScheme     = theScheme;
      myName       = theName;
d98 1
a98 1
      myProperties = new ArrayList <Property <?>> ();
d100 1
a100 1
      myIndex      = theScheme.getCategories ().size ();
d102 1
a102 2
      amGlobal     = theName.equals ("GLOBAL");
      amPeriod     = theName.equals ("PERIOD");
d119 1
a119 10
 * @@return True, iff this Category is the global Category for its Scheme.
 *******************************************************************************
 */
   boolean isGlobal ()
      {
      return amGlobal;
      }
   
/*******************************************************************************
 * @@return True, iff this Category is the period Category for its Scheme.
d122 1
a122 1
   boolean isPeriod ()
d124 1
a124 1
      return amPeriod;
d253 3
a255 3
 * @@return  An unmodifiable List of all of the I instances of this Category in
 *          in current Embodiment, listed in the order in which they were
 *          created.
@


1.20
log
@Moved some responsibility to constructors.
@
text
@d62 6
d109 1
d135 9
@


1.19
log
@Period Category
@
text
@d103 2
d151 1
a151 7
 * Constructs a new Property {@@literal<V>} that will belong to this Category
 * (Internal Version).
 * 
 * @@param <V>          The value type of the Property (compile time)
 * @@param theValueType The value type of the Property (run time)
 * @@param theName      The name of the Property
 * @@return             The new Property {@@literal<V>}
d154 1
a154 1
   <V> Property <V> newPropertyInternal (Class <V> theValueType, String theName)
a155 4
      Property <V> theProp;
      
      theProp = new Property <V> (theValueType, this, theName);
      
a156 2
      
      return theProp;
d247 1
a247 1
      return newPropertyInternal (theValueType, theName);
@


1.18
log
@Implementation ==> Embodiment
@
text
@d56 6
d101 2
d122 1
a122 1
      return (this == myScheme.getGlobalCategoryInternal ());
d149 21
a252 2
      Property <V> theProp;
      
d257 1
a257 5
      theProp = new Property <V> (theValueType, this, theName);
      
      myProperties.add (theProp);
      
      return theProp;
@


1.17
log
@Moved getAll from Implementation to Category.
@
text
@d119 1
a119 1
 * Implementation.
d122 1
a122 1
   void requireSchemeMatchesCurImp ()
d124 1
a124 1
      if (myScheme != curImplementation ().getScheme ())
d129 1
a129 2
             + "   that does not match the Scheme of the current\n"
             + "   Implementation.\n"
d131 7
a137 7
             + "      Category:               " + myName              + "\n"
             + "         Scheme:              " + myScheme.getName () + "\n"
             + "      Current Implementation: " + curImplementation ().
                                                     getName ()       + "\n"
             + "         Scheme:              " + curImplementation ().
                                                     getScheme ().
                                                        getName ()    + "\n");
d179 1
a179 1
 * Creates a new ItemMgr for this Category in theImple.
d183 1
a183 1
   abstract ItemMgr <?> newItemMgr (Implementation theImple);
d241 1
a241 1
 *          in current Implementation, listed in the order in which they were
d244 1
a244 1
 * @@throws IllegalStateException    If the current Implementation is null
d246 1
a246 2
 *                                  match the Scheme of the current 
 *                                  Implementation
d251 2
a252 2
      requireCurImplementation   ();
      requireSchemeMatchesCurImp ();
d254 1
a254 1
      return curImplementation ().getItemMgr (this).getInstances ();
@


1.16
log
@Moved newPrimitive from Implementation to PrimitiveCategory.
@
text
@d12 1
d238 21
@


1.15
log
@Moved newProperty to class Category
@
text
@d117 24
@


1.14
log
@//=== ==> /////
@
text
@a11 3
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
a48 6
 * An unmodifiable view of myProperties.
 *******************************************************************************
 */
   private final List <Property <?>> myPropertiesView;

/*******************************************************************************
d56 24
d88 2
a89 2
      myScheme         = theScheme;
      myName           = theName;
d91 1
a91 1
      myProperties     = new ArrayList <Property <?>> ();
d93 1
a93 3
      myPropertiesView = Collections.unmodifiableList (myProperties);
      
      myIndex          = theScheme.getCategories ().size ();
a100 9
 * Stores theProp in this Category.
 *******************************************************************************
 */
   void store (Property <?> theProp)
      {
      myProperties.add (theProp);
      }

/*******************************************************************************
d137 1
a137 1
 * @@return An unmodifiable list of all Properties that belong to this Category.
d140 1
a140 1
   final List <Property<?>> getProperties ()
d142 1
a142 1
      return myPropertiesView;
d183 30
@


1.13
log
@Re-arranged source code.
@
text
@d2 1
a2 1
//==============================================================================
d4 1
a4 1
//==============================================================================
d29 1
a29 1
//==============================================================================
d31 1
a31 1
//==============================================================================
d64 1
a64 1
//==============================================================================
d66 1
a66 1
//==============================================================================
d83 1
a83 1
//==============================================================================
d85 1
a85 1
//==============================================================================
d157 1
a157 1
//==============================================================================
d159 1
a159 1
//==============================================================================
d179 1
a179 1
//==============================================================================
@


1.12
log
@Various revisions.
@
text
@d30 1
a30 1
// Public
d32 18
d52 1
a52 1
 * @@return The name of this Category
d55 1
a55 4
   public final String getName ()
      {
      return myName;
      }
d58 2
a59 1
 * @@return The Scheme to which this Category belongs
d62 1
a62 4
   public final Scheme getScheme ()
      {
      return myScheme;
      }
d65 1
a65 1
// Package Internal
a67 4
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
d83 4
d158 1
a158 1
// Private
a159 18
   
/*******************************************************************************
 * The Scheme of the WIT model to which this Category belongs
 *******************************************************************************
 */
   private final Scheme myScheme;
   
/*******************************************************************************
 * The name of this Category
 *******************************************************************************
 */
   private final String myName;
   
/*******************************************************************************
 * A list of all Properties that belong to this Category.
 *******************************************************************************
 */
   private final ArrayList <Property <?>> myProperties;
d162 1
a162 1
 * An unmodifiable view of myProperties.
d165 4
a168 1
   private final List <Property <?>> myPropertiesView;
d171 1
a171 2
 * A unique index for this Category: the # of Categories in the Scheme created
 * before this one.
d174 4
a177 1
   private final int myIndex;
@


1.11
log
@Global Category / Primitive.
@
text
@d137 7
@


1.10
log
@getSlice
@
text
@a33 2
 * Accessor.
 * 
a42 2
 * Accessor.
 * 
d91 9
@


1.9
log
@Tuple ==> Compound
@
text
@a94 8
 * Creates a new ItemMgr for this Category.
 * 
 * @@return The new ItemMgr.
 *******************************************************************************
 */
   abstract ItemMgr <?> newItemMgr ();
   
/*******************************************************************************
@


1.8
log
@Revised comments, etc.
@
text
@d24 1
a24 1
 *            either Primitive or Tuple
@


1.7
log
@Tuple.get (Category, int)
@
text
@d18 7
a24 5
 * the I class. The I class will be either class Primitive or class Tuple. Each
 * I instance belongs to a particular Category {@@literal<I>} and all I instances
 * that belong to a given Category {@@literal<I>}  are treated uniformly by
 * WIT-M. Each Category {@@literal<I>} belongs to a specific Scheme and is
 * considered to be a defining aspect of the Scheme.
@


1.6
log
@Category.newItemMgr.
@
text
@d108 2
@


1.5
log
@Removed Scheme.myPropertyNames.
@
text
@d93 8
@


1.4
log
@myPrimitiveCategories and myTupleCategories ==> myCategories
@
text
@d13 2
d66 2
a67 2
      myScheme     = theScheme;
      myName       = theName;
d69 1
a69 1
      myProperties = new ArrayList <Property <?>> ();
d71 3
a73 1
      myIndex      = theScheme.getCategories ().size ();
d111 1
a111 1
 * @@return The # of Properties associated with this Category.
d114 1
a114 1
   final int getNProperties ()
d116 1
a116 1
      return myProperties.size ();
d151 6
@


1.3
log
@Replaced ItemCategory with Category <?>.
@
text
@d12 1
d69 1
a69 2
      myIndex      =   theScheme.getPrimitiveCategories ().size ()
                     + theScheme.getTupleCategories     ().size ();
d82 2
a83 1
 * Prints the Properties of this Category to theStream.
d86 7
a92 1
   final void printProperties (PrintStream theStream)
d94 2
d101 6
@


1.2
log
@ItemMgr <I>
@
text
@d10 3
d14 6
a19 1
 * A Category {@@literal<I>} is an ItemCategory for Items of class I.
d22 1
a22 1
public abstract class Category <I extends Item> extends ItemCategory
d25 26
d60 38
a97 1
      super (theScheme, theName);
d100 38
@


1.1
log
@Added Category <I extends Item>
@
text
@a9 2
import java.util.ArrayList;

@

