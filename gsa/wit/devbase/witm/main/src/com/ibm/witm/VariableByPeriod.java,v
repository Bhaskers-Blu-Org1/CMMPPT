head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2011.10.07.23.01.59;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@TemporalVariable ==> VariableByPeriod, etc.
@
text
@
////////////////////////////////////////////////////////////////////////////////
// WIT-M Source File VariableByPeriod.Java.
////////////////////////////////////////////////////////////////////////////////

package com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.util.Arrays;

/*******************************************************************************
 * A VariableByPeriod {@@literal<V>} is associated with a ModelInstance and
 * stores a value of type V for each Period in the ModelInstance.
 * 
 * @@param <V> The type of value stored for each Period.
 *******************************************************************************
 */
public abstract class VariableByPeriod <V>
{
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Fields
////////////////////////////////////////////////////////////////////////////////

/*******************************************************************************
 * The PeriodMgr for this VariableByPeriod.
 *******************************************************************************
 */
   private final PeriodMgr myPeriodMgr;
   
////////////////////////////////////////////////////////////////////////////////
// Private Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * Verifies that the ModelInstances of thePer and of this VariableByPeriod
 * match.
 *******************************************************************************
 */
   private void reqModelInstsMatch (Period thePer, String signature)
      {
      if (thePer.getPeriodMgr () != myPeriodMgr)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to VariableByPeriod." + signature + ", with a Period\n"
             + "   and a VariableByPeriod that belong to different\n"
             + "   ModelInstances.\n"
             + "\n"
             + "      Period           ModelInstance: " + thePer.
                                                          getPeriodMgr ().
                                                          getModelInstance ().
                                                          getName () + "\n"
             + "      VariableByPeriod ModelInstance: " + myPeriodMgr.
                                                          getModelInstance ().
                                                          getName () + "\n");
      }
   
////////////////////////////////////////////////////////////////////////////////
// Package Internal Constructor
////////////////////////////////////////////////////////////////////////////////
   
   VariableByPeriod (PeriodMgr thePerMgr)
      {
      myPeriodMgr = thePerMgr;
      }

////////////////////////////////////////////////////////////////////////////////
// Package Internal Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * @@return The PeriodMgr for this VariableByPeriod.
 *******************************************************************************
 */
   PeriodMgr getPeriodMgr ()
      {
      return myPeriodMgr;
      }
   
/*******************************************************************************
 * Verifies that the length of an array is the # of Periods. 
 *******************************************************************************
 */
   void reqLengthNPeriods (int theLength, String signature)
      {
      int nPeriods;
      
      nPeriods = getPeriodMgr ().getAllPeriods ().size ();
      
      if (theLength != nPeriods)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   Call to " + signature + " with an array whose length\n"
             + "   does not match the number of Periods in the ModelInstance.\n"
             + "\n"
             + "      Array Length:      " + theLength + "\n"
             + "      Number of Periods: " + nPeriods  + "\n");
      }

/*******************************************************************************
 * Internal "set" method.
 *******************************************************************************
 */
   abstract void setByIndex (int thePerIdx, V theValue);
   
/*******************************************************************************
 * Internal "get" method.
 *******************************************************************************
 */
   abstract V getByIndex (int thePerIdx);
   
////////////////////////////////////////////////////////////////////////////////
// Public Non-Static Methods
////////////////////////////////////////////////////////////////////////////////
   
/*******************************************************************************
 * Sets a value stored by this VariableByPeriod for a Period to a given value.
 * 
 * @@param  thePer   The Period whose value is to be set
 * @@param  theValue The value to which the stored value is to be set
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the ModelInstance of thePer does not
 *                                  match the ModelInstance of this
 *                                  VariableByPeriod
 *******************************************************************************
 */
   public final void set (Period thePer, V theValue)
      {
      rejNull            (thePer,   "thePer");
      rejNull            (theValue, "theValue");
      reqModelInstsMatch (thePer,   "set (thePer, theValue)");
      
      setByIndex (thePer.getIndex (), theValue);
      }
   
/*******************************************************************************
 * Returns a value stored by this VariableByPeriod for a Period.
 * 
 * @@param  thePer The Period whose value is to be returned
 * @@return        The stored value
 * 
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the ModelInstance of thePer does not
 *                                  match the ModelInstance of this
 *                                  VariableByPeriod
 *******************************************************************************
 */
   public V get (Period thePer)
      {
      rejNull            (thePer, "thePer");
      reqModelInstsMatch (thePer, "get (thePer)");
      
      return getByIndex (thePer.getIndex ());
      }
   
/*******************************************************************************
 * {@@inheritDoc}
 *******************************************************************************
 */                   @@Override
   public final String toString ()
      {
      int      nPeriods;
      String[] theStrings;
      int      theIdx;
      
      nPeriods   = myPeriodMgr.getAllPeriods ().size ();
      
      theStrings = new String[(2 * nPeriods) + 1];
      
      Arrays.fill (theStrings, ", ");
      
      theStrings[0]            = "(";
      theStrings[2 * nPeriods] = ")";
      
      theIdx = 1;
      
      for (Period thePer: myPeriodMgr.getAllPeriods ())
         {
         theStrings[theIdx] = get (thePer).toString ();
         
         theIdx += 2;
         }
      
      return concatenation (theStrings);
      }
   
////////////////////////////////////////////////////////////////////////////////
}
@
