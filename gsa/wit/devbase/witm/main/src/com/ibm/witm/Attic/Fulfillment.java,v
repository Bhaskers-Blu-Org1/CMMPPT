head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2011.05.24.17.56.46;	author rjw;	state dead;
branches;
next	1.6;

1.6
date	2011.05.24.00.11.49;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.22.02.19.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.22.02.10.42;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.22.00.33.12;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.20.21.30.11;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.20.19.26.49;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fulfillment ==> Embodiment
@
text
@
//==============================================================================
// WIT-M Source File Fulfillment.java.
//==============================================================================

package       com.ibm.witm;

import static com.ibm.witm.Utility.*;

import java.util.List;

/*******************************************************************************
 * A Fulfillment is the central object representing a WIT model as populated
 * with specific data. A Fulfillment is said to "fulfill" the Scheme of the WIT
 * model.<br><br>

 * Please Note:<br>
 * The factory method for creating instances of this class is method
 * newFulfillment of class Scheme.
 *******************************************************************************
 */
public final class Fulfillment
{
//==============================================================================
// Public
//==============================================================================

/* *****************************************************************************
 * The doc comment is inherited
 *******************************************************************************
 */
   @@Override public String toString ()
      {
      return "Fulfillment \"" + myName + "\"";
      }
   
/*******************************************************************************
 * Accessor.
 * 
 * @@return The name of this Fulfillment
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Accessor
 * 
 * @@return The Scheme of this Fulfillment
 *******************************************************************************
 */
   public Scheme getScheme ()
      {
      return myScheme;
      }

//==============================================================================
// Package Internal
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   Fulfillment (Scheme theScheme, String theName)
      {
      int nPrimCats;
      int theIdx;
      int nTupleCats;
      
      assert (theScheme != null);
      assert (theName   != null);
      
      assert (theScheme.isFrozen ());
      
      myScheme          = theScheme;
      myName            = theName;
      
      nPrimCats         = theScheme.getPrimitiveCategories ().size ();
      
      myPrimitiveMgrArr = new PrimitiveMgr[nPrimCats];
      
      for (PrimitiveCategory thePrimCat: theScheme.getPrimitiveCategories ())
         {
         theIdx                    = thePrimCat.getIndex ();
         
         myPrimitiveMgrArr[theIdx] = new PrimitiveMgr (this, thePrimCat);
         }
      
      nTupleCats    = theScheme.getTupleCategories ().size ();
      
      myTupleMgrArr = new TupleMgr[nTupleCats];
      
      for (TupleCategory theTupleCat: theScheme.getTupleCategories ())
         {
         theIdx                = theTupleCat.getIndex ();
         
         myTupleMgrArr[theIdx] = new TupleMgr (this, theTupleCat);
         }
      }

/*******************************************************************************
 * @@return the PrimitiveMgr for thePrimCat in this Fulfillment.
 *******************************************************************************
 */
   PrimitiveMgr getPrimitiveMgr (PrimitiveCategory thePrimCat)
      {
      assert (thePrimCat.getScheme () == myScheme);
         
      return myPrimitiveMgrArr[thePrimCat.getIndex ()];
      }
   
/*******************************************************************************
 * @@return the TupleMgr for thePrimCat in this Fulfillment.
 *******************************************************************************
 */
   TupleMgr getTupleMgr (TupleCategory theTupleCat)
      {
      assert (theTupleCat.getScheme () == myScheme);
         
      return myTupleMgrArr[theTupleCat.getIndex ()];
      }
   
//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * The Scheme of this Fulfillment
 *******************************************************************************
 */
   private final Scheme myScheme;
   
/*******************************************************************************
 * The name of this Fulfillment
 *******************************************************************************
*/
   private final String myName;
   
/*******************************************************************************
 * myPrimitiveMgrArr[thePrimCat.getIndex ()] is the PrimitiveMgr for thePrimCat
 * in this Fulfillment.
 *******************************************************************************
*/
   private final PrimitiveMgr[] myPrimitiveMgrArr;
   
/*******************************************************************************
 * myTupleMgrArr[theTupleCat.getIndex ()] is the TupleMgr for thePrimCat
 * in this Fulfillment.
 *******************************************************************************
*/
   private final TupleMgr[] myTupleMgrArr;
   
//==============================================================================
// Static initialization block
//
// This block contains vacuous code that refers to class InputTable, so that
// class InputTable and the classes it refers to will be compiled whenever class
// Fulfillment is compiled.
//==============================================================================

   static
      {
      if (false)
         InputTable.class.toString ();
      }
   
//==============================================================================
}
@


1.6
log
@Primitives
@
text
@@


1.5
log
@getTupleMgr
@
text
@a27 69
/*******************************************************************************
 * Factory method:<br>
 * Constructs a new Primitive that will belong to this Fulfillment.
 *   
 * @@param  thePrimCat               The PrimitiveCategory to which the Primitive
 *                                  will belong
 * @@param  theName                  The name for the Primitive 
 * @@return                          The new Primitive
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of thePrimCat does not match
 *                                  the Scheme of this Fulfillment
 * @@throws IllegalArgumentException If theName matches the name of an existing
 *                                  Primitive for thePrimCat in theFulfillment
 *******************************************************************************
 */
   public Primitive newPrimitive (
         PrimitiveCategory thePrimCat,
         String            theName)
      {
      prohibitNull (thePrimCat, "thePrimCat");
      prohibitNull (theName,    "theName");
      
      requireSchemesMatch (thePrimCat);
      prohibitDupName     (thePrimCat, theName);
      
      return getPrimitiveMgr (thePrimCat).newPrimitive (theName);
      }
   
/*******************************************************************************
 * Primitive List method
 * 
 * @@return An unmodifiable List of all Primitives in this Fulfillment that
 * belong to thePrimCat, listed in the order in which they were created.
 * 
 * @@throws NullPointerException     If thePrimCat is null
 * @@throws IllegalArgumentException If the Scheme of thePrimCat does not match
 *                                  the Scheme of this Fulfillment
 *******************************************************************************
 */
   public List <Primitive> get (PrimitiveCategory thePrimCat)
      {
      prohibitNull        (thePrimCat, "thePrimCat");
      
      requireSchemesMatch (thePrimCat);
      
      return getPrimitiveMgr (thePrimCat).getPrimitives ();
      }
   
/*******************************************************************************
 * Primitive look-up method
 * 
 * @@return The Primitive in this Fulfillment that belongs to thePrimCat and
 *         whose name matches theName, if any; otherwise null
 *         
 * @@throws NullPointerException     If any argument is null
 * @@throws IllegalArgumentException If the Scheme of thePrimCat does not match
 *                                  the Scheme of this Fulfillment
 *******************************************************************************
 */
   public Primitive get (PrimitiveCategory thePrimCat, String theName)
      {
      prohibitNull        (thePrimCat, "thePrimCat");
      prohibitNull        (theName,    "theName");
      
      requireSchemesMatch (thePrimCat);
      
      return getPrimitiveMgr (thePrimCat).getPrimitive (theName);
      }
   
a103 44
//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * Verifies that the Scheme of theElCat matches the Scheme of this
 * Fulfillment.<br>
 *******************************************************************************
 */
   private void requireSchemesMatch (ElementCategory theElCat)
      {
      if (theElCat.getScheme () != myScheme)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   An ElementCategory was passed as an argument to a\n"
             + "   Fulfillment method, where the Scheme of the\n"
             + "   ElementCategory does not match the Scheme of\n"
             + "   the Fulfillment.\n"
             + "\n"
             + "      ElementCategory Scheme: " + theElCat.getScheme () + "\n"
             + "      Fulfillment     Scheme: " +          getScheme () + "\n");
      }
   
/*******************************************************************************
 * Verifies that theName does not match the name of aTuplee of thePromCat in
 * myFulfillment.<br>
 * To be called by newPrimitive (...).
 *******************************************************************************
 */
   private void prohibitDupName (PrimitiveCategory thePrimCat, String theName)
      {
      if (getPrimitiveMgr (thePrimCat).getPrimitive (theName) != null)
         throw
            new IllegalArgumentException (
               "\n\n"
             + "   theFulfillment.newPrimitive (thePrimCat, theName) was\n"
             + "   called where the theName matches the name of an existing\n"
             + "   Primitive for thePrimCat in theFulfillment.\n"
             + "\n"
             + "      PrimitiveCategory: "   + thePrimCat.getName () + "\n"
             + "      Name:              \"" + theName               + "\"\n");
      }
   
d108 1
a108 1
   private PrimitiveMgr getPrimitiveMgr (PrimitiveCategory thePrimCat)
d119 1
a119 2
   @@SuppressWarnings("unused")
   private TupleMgr getTupleMgr (TupleCategory theTupleCat)
d126 4
@


1.4
log
@Compound ==> Tuple
@
text
@d229 13
a241 1
 * The Scheme of Fulfillment
@


1.3
log
@Created class CompoundMgr.
@
text
@d140 1
a140 1
      int nCompCats;
d161 1
a161 1
      nCompCats         = theScheme.getCompoundCategories ().size ();
d163 1
a163 1
      myCompoundMgrArr = new CompoundMgr[nCompCats];
d165 1
a165 1
      for (CompoundCategory theCompCat: theScheme.getCompoundCategories ())
d167 1
a167 1
         theIdx                   = theCompCat.getIndex ();
d169 1
a169 1
         myCompoundMgrArr[theIdx] = new CompoundMgr (this, theCompCat);
d198 1
a198 1
 * Verifies that theName does not match the name of aCompounde of thePromCat in
d248 1
a248 1
 * myCompoundMgrArr[theCompCat.getIndex ()] is the CompoundMgr for thePrimCat
d252 1
a252 1
   private final CompoundMgr[] myCompoundMgrArr;
@


1.2
log
@Check for duplicate ComponentCategory name.
@
text
@d138 3
a140 2
      int          nPrimCats;
      PrimitiveMgr thePrimitiveMgr;
d156 1
a156 1
         thePrimitiveMgr = new PrimitiveMgr (this, thePrimCat);
d158 12
a169 1
         myPrimitiveMgrArr[thePrimCat.getIndex ()] = thePrimitiveMgr;
d198 1
a198 1
 * Verifies that theName does not match the name of a Primitive of thePromCat in
d247 7
@


1.1
log
@AppProblem ==> Fulfillment
@
text
@d97 2
a98 1
/*******************************************************************************
a249 14
// Static initialization block
//
// This block contains vacuous code that refers to class CompoundCategory, so
// that class CompoundCategory and the classes it refers to will be compiled
// whenever class Fulfillment is compiled.
//==============================================================================

   static
      {
      if (false)
         CompoundCategory.class.toString ();
      }
   
//==============================================================================
@

