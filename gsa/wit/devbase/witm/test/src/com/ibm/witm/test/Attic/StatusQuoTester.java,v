head	1.4;
access;
symbols
	start:1.1.1.1 dummy-vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2011.05.18.18.23.56;	author rjw;	state dead;
branches;
next	1.3;

1.3
date	2011.05.18.17.46.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.17.19.32.28;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.16.22.08.54;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.16.22.08.54;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Status Quo Test ==> Error Test
@
text
@
//==============================================================================
// WIT-M/Test Source File StatusQuoTester.java.
//==============================================================================

package com.ibm.witm.test;

import com.ibm.witm.AppProblem;
import com.ibm.witm.InputTable;
import com.ibm.witm.Primitive;
import com.ibm.witm.PrimitiveCategory;
import com.ibm.witm.Property;
import com.ibm.witm.Scheme;

/*******************************************************************************
 * Responsible for performing a series of tests on WIT-M each of which
 * generates an error condition that that causes an Exception to be thrown,
 * but which does not change the state of WIT-M.
 *******************************************************************************
 */
final class StatusQuoTester
{
//==============================================================================
// Package-Internal
//==============================================================================

/*******************************************************************************
 * Performs a status quo test.
 *******************************************************************************
 */
   static void performTest ()
      {
      int             theCaseIdx;
      StatusQuoTester theSQTester;
      
      for (theCaseIdx = 1; theCaseIdx <= 10; theCaseIdx ++)
         {
         theSQTester = new StatusQuoTester (theCaseIdx);
      
         theSQTester.testCurCase ();
         }

      System.out.println (
         "\n"
       + "Normal termination of status quo test.");
      }

//==============================================================================
// Private
//==============================================================================

/*******************************************************************************
 * Private Constructor
 *******************************************************************************
 */
   private StatusQuoTester (int theCaseIdx)
      {
      curCaseIdx = theCaseIdx;
      
      STATUS_QUO = Scheme.newScheme ("STATUS_QUO");
      }

/*******************************************************************************
 * Performs the status quo test indexed by curCaseIdx.
 *******************************************************************************
 */
   private void testCurCase ()
      {
      try
         {
         innerTestCurCase ();
 
         throw new AssertionError ();
         }

      catch (Exception theExc)
         {
         System.out.flush ();
         
         theExc.printStackTrace ();
                  
         System.out.flush ();
         }

      System.out.printf (
         "\n"
       + "Status Quo Test Case %d now concludes.\n",
         curCaseIdx);
      }

/*******************************************************************************
 * Performs the status quo test indexed by curCaseIdx.
 *******************************************************************************
 */
   private void innerTestCurCase ()
      throws
         Exception
      {
      switch (curCaseIdx)
         {
         case 1:
            testCase1 ();
            break;

         case 2:
            testCase2 ();
            break;

         case 3:
            testCase3 ();
            break;

         case 4:
            testCase4 ();
            break;

         case 5:
            testCase5 ();
            break;

         case 6:
            testCase6 ();
            break;

         case 7:
            testCase7 ();
            break;

         case 8:
            testCase8 ();
            break;

         case 9:
            testCase9 ();
            break;

         case 10:
            testCase10 ();
            break;

         default:
            throw new AssertionError ();
         }
      }

/*******************************************************************************
 * Performs status quo test case 1.
 *******************************************************************************
 */
   
   private void testCase1 ()
      {
      printHeading (
         "Passing a null argument to Scheme.newScheme (...).");

      Scheme.newScheme (null);
      }

/*******************************************************************************
 * Performs status quo test case 2.
 *******************************************************************************
 */
   private void testCase2 ()
      throws
         Exception
      {
      InputTable theTable;

      printHeading (
         "Call to theInputRow.getCell (...) with an invalid heading.");

      theTable = InputTable.newInputTable ("area.csv");
         
      theTable.getRows ().get (0).getCell ("nonsense");
      }

/*******************************************************************************
 * Performs status quo test case 3.
 *******************************************************************************
 */
   private void testCase3 ()
      {
      printHeading (
         "Creating a PrimitiveCategory with a duplicate name.");

      STATUS_QUO.newPrimitiveCategory ("PRIMCAT3");
      STATUS_QUO.newPrimitiveCategory ("PRIMCAT3");
      }

/*******************************************************************************
 * Performs status quo test case 4.
 *******************************************************************************
 */
   private void testCase4 ()
      {
      Scheme            SCHEME4;
      PrimitiveCategory PRIMCAT4;

      printHeading (
         "Call to theAppProblem.newPrimitive (...) with a Scheme mismatch.");
      
      SCHEME4  = Scheme.newScheme ("SCHEME4");
      
      PRIMCAT4 = SCHEME4.newPrimitiveCategory ("PRIMCAT4");
      
      makeAppProblem ();
      
      myAppProblem.newPrimitive (PRIMCAT4, "Prim4");
      }
   
/*******************************************************************************
 * Performs status quo test case 5.
 *******************************************************************************
 */
   private void testCase5 ()
      {
      printHeading (
         "Call to theScheme.newPrimitiveCategory (...) on a frozen Scheme.");
      
      STATUS_QUO.freeze ();
      
      STATUS_QUO.newPrimitiveCategory ("PRIMCAT5");
      }

/*******************************************************************************
 * Performs status quo test case 6.
 *******************************************************************************
 */
   private void testCase6 ()
      {
      printHeading (
         "Call to theScheme.newAppProblem (...) on an unfrozen Scheme.");
      
      STATUS_QUO.newAppProblem ("Test Case #6");
      }

/*******************************************************************************
 * Performs status quo test case 7.
 *******************************************************************************
 */
   private void testCase7 ()
      {
      PrimitiveCategory PRIMCAT7;

      printHeading (
         "Call to theAppProblem.newPrimitive (...) with a name collision.");
      
      PRIMCAT7 = STATUS_QUO.newPrimitiveCategory ("PRIMCAT7");
      
      makeAppProblem ();
      
      myAppProblem.newPrimitive (PRIMCAT7, "Prim7");
      myAppProblem.newPrimitive (PRIMCAT7, "Prim7");
      }

/*******************************************************************************
 * Performs status quo test case 8.
 *******************************************************************************
 */
   private void testCase8 ()
      {
      PrimitiveCategory PRIMCAT8;

      printHeading (
         "Call to a modifying method on the result of "
       + "theAppProblem.get (thePrimCat).");
      
      PRIMCAT8 = STATUS_QUO.newPrimitiveCategory ("PRIMCAT8");
      
      makeAppProblem ();
      
      myAppProblem.get (PRIMCAT8).clear ();
      }

/*******************************************************************************
 * Performs status quo test case 9.
 *******************************************************************************
 */
   private void testCase9 ()
      {
      PrimitiveCategory PRIMCAT91;
      PrimitiveCategory PRIMCAT92;

      printHeading ("Creating a Property with a duplicate name.");
      
      PRIMCAT91 = STATUS_QUO.newPrimitiveCategory ("PRIMCAT91");
      PRIMCAT92 = STATUS_QUO.newPrimitiveCategory ("PRIMCAT92");
      
      PRIMCAT91.newProperty (Boolean.class, "PROP9");
      PRIMCAT92.newProperty (String .class, "PROP9");
      }

/*******************************************************************************
 * Performs status quo test case 10.
 *******************************************************************************
 */
   private void testCase10 ()
      {
      PrimitiveCategory PRIMCAT10_1; 
      PrimitiveCategory PRIMCAT10_2; 
      Property <String> PROP10_1;
      Primitive         thePRIMCAT10_2;
      
      printHeading (
         "Calling theElem.set (...) with an ElementCategory mismatch.");
      
      PRIMCAT10_1 = STATUS_QUO.newPrimitiveCategory ("PRIMCAT10_1");
      PRIMCAT10_2 = STATUS_QUO.newPrimitiveCategory ("PRIMCAT10_2");
      
      PROP10_1    = PRIMCAT10_1.newProperty (String.class, "PROP10_1");
      
      makeAppProblem ();
      
      thePRIMCAT10_2 = myAppProblem.newPrimitive (PRIMCAT10_2, "#1");
      
      thePRIMCAT10_2.set (PROP10_1, "Test");
      }

/*******************************************************************************
 * Prints a heading for the status quo test case indexed by theCaseIdx.
 * 
 * @@param text Text describing the status quo test case.
 *******************************************************************************
 */
   private void printHeading (String text)
      {
      System.out.printf (
         "\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "WIT-MF Status Quo Test Case %d:\n"
       + "\n"
       + "%s\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "\n",
         curCaseIdx,
         text);
      }

/*******************************************************************************
 * Creates myAppProblem.
 *******************************************************************************
 */
   private void makeAppProblem ()
      {
      STATUS_QUO.freeze ();
      
      myAppProblem = STATUS_QUO.newAppProblem ("Test Case #" + curCaseIdx);
      }

/*******************************************************************************
 * The index of the status quo test cased to be performed.
 *******************************************************************************
 */
   private final int curCaseIdx;
   
/*******************************************************************************
 * The main Scheme to be used for a status quo test.
 *******************************************************************************
 */
   private final Scheme STATUS_QUO;

/*******************************************************************************
 * The main AppProblem to be used for a status quo test.
 *******************************************************************************
 */
   private AppProblem myAppProblem = null;

//==============================================================================
}
@


1.3
log
@Error testing for theElem.set.
@
text
@@


1.2
log
@Unique Property names.
@
text
@d10 1
d12 1
d36 1
a36 1
      for (theCaseIdx = 1; theCaseIdx <= 9; theCaseIdx ++)
d137 4
d294 26
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
      for (theCaseIdx = 1; theCaseIdx <= 8; theCaseIdx ++)
d131 4
d270 18
@


1.1.1.1
log
@Renaming WIT-ML to WIT-M.

@
text
@@
