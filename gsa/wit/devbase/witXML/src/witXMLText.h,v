head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 IBM:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2001.04.04.18.43.50;  author fasano;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2001.04.04.18.43.50;  author fasano;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 *	Description: WitXMLText.h
 *		class WitXMLText is used to deal with the value of an attribute in  
 *		xml file	
 *		
 *	Owner:
 *		IBM T. J. Watson Research Center
 *		Route 134
 *		Yorktown Heights, NY 10598
 *
 *	Author: Shuzheng Liu (LSZ)     
 *		35-238   liusz@@watson.ibm.com    8-862-2952
 *
 *	Proprietary Statement:
 *		IBM Confidential
 *		(C) Copyright IBM Corp. 2000
 *
 * 	Change History:
 *    	March, 2001  LSZ: New code.
 */
#ifndef WitXMLText_h
#define WitXMLText_h

#include <dom/DOMString.hpp>
#include <dom/DOM_Node.hpp>
#include <fstream.h>

enum witDataFormat{
		    single,
		    dense,
		    sparse};

enum witBool {False,True};

const double DEFAULTVALUE=0.0;

class  WitXMLText
{
  public:
	// -----------------------------------------------------------------------
	//  Constructors and Destructor
	// -----------------------------------------------------------------------
	WitXMLText(const DOM_Node &thisNode,const char *filename,const int LineNum);

	WitXMLText(const DOMString &name,const DOMString &adomstring,const char *filename,int LineNum);

	WitXMLText();

	~WitXMLText()
	{
	}; 

	WitXMLText(WitXMLText& aWitXMLText);

	WitXMLText& operator=(WitXMLText& aWitXMLText);

	int		GetInteger();
	bool	GetBool();
	char *	GetText();
	float	GetFloat();
	// Get an integer vecotr
	int *	GetIntegerVector(const int NPeriods);
	// Get a float vecotr
	float *	GetFloatVector(const int NPeriods);
	// Print a vecotr
	static int PrintVector(const char *attr,const int *avector,ofstream &outFile,const int NPeriods);
	static int PrintVector(const char *attr,const float *avector,ofstream &outFile,const int NPeriods);

  private:
	static const int	numOfDataFormat;
	static const char	*witdataformat[];
	int					nPeriods;
	int					dataFormat;
	int 				LineNumber;
	double *			dVector;
	char *				inString;
	DOMString 			inDOMString;
	DOMString 			attrName;
	const char *		fileName;

	DOMString & convertContent(DOMString &);
	// create a float
	double	GetDouble(const char *str);
	// create a float
	double	*GetDoubleVector();
	// create a vector of float
	int createDoubleVector();
	// create a vector of float of dense format
	int createDenseVector();
	// create a vector of float of sparse format 
	int createSparseVector();
	// get next token from inString and modify inString, the user is resposible to 
	// delete the returned char*
	char *GetNextToken();
	// check if a string represents a number
	int IsNumber(const char *str);
	// set private attributes
	void setAttr(WitXMLText& aWitXMLText);
};
#endif
@


1.1.1.1
log
@Importing wit xml code
@
text
@@
