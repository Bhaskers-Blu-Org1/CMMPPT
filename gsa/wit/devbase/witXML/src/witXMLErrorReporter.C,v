head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 IBM:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2001.04.04.18.43.51;  author fasano;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2001.04.04.18.43.51;  author fasano;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 *	Description: WitXMLErrorReporter.C
 *		class WitXMLText is used to deal with errors occured during parsing  
 *		the xml file	
 *		
 *	Owner:
 *		IBM T. J. Watson Research Center
 *		Route 134
 *		Yorktown Heights, NY 10598
 *
 *	Author: Shuzheng Liu (LSZ)     
 *			35-238   liusz@@watson.ibm.com    8-862-2952
 *
 *	Proprietary Statement:
 *		IBM Confidential
 *		(C) Copyright IBM Corp. 2000
 *
 *   Acknowledgments:
 *      This product includes software developed by the
 *      Apache Software Foundation (http://www.apache.org/).
 *      The Apache Software License, Version 1.1
 *      Copyright (c) 1999-2000 The Apache Software Foundation.
 *      All rights reserved.
 * 
 * 	Change History:
 *    		March, 2001  LSZ: New code.
 */
// ---------------------------------------------------------------------------
//  Includes
// ---------------------------------------------------------------------------
#include "witXMLErrorReporter.h"

// ---------------------------------------------------------------------------
//  PParseHandlers: Overrides of the SAX ErrorHandler interface
// ---------------------------------------------------------------------------
void WitXMLErrorReporter::error(const SAXParseException& toCatch)
{
    cerr << "\nError at file ";
    this->operator<<(DOMString(toCatch.getSystemId()))
	 << ", line " << toCatch.getLineNumber()
	 << ", char " << toCatch.getColumnNumber()
         << "\n  Message: ";
    this->operator<<(DOMString(toCatch.getMessage())) << endl;
    throw SAXParseException(toCatch);
}

void WitXMLErrorReporter::fatalError(const SAXParseException& toCatch)
{
    cerr << "\nFatal Error at file ";
    this->operator<<(DOMString(toCatch.getSystemId()))
	 << ", line " << toCatch.getLineNumber()
	 << ", char " << toCatch.getColumnNumber()
         << "\n  Message: ";
    this->operator<<(DOMString(toCatch.getMessage())) << endl;
    throw SAXParseException(toCatch);
}

void WitXMLErrorReporter::warning(const SAXParseException& toCatch)
{
    cerr << "\nWarning at file ";
    this->operator<<(DOMString(toCatch.getSystemId()))
	 << ", line " << toCatch.getLineNumber()
	 << ", char " << toCatch.getColumnNumber()
         << "\n  Message: ";
    this->operator<<(DOMString(toCatch.getMessage())) << endl;
}

void WitXMLErrorReporter::resetErrors()
{
    // No-op in this case
}

ostream& WitXMLErrorReporter::operator<< (const DOMString& toDump)
{
    char *p = toDump.transcode();
    cerr << p;
#ifndef _MSC_VER
    delete [] p;
#endif
    return cerr;
}

@


1.1.1.1
log
@Importing wit xml code
@
text
@@
