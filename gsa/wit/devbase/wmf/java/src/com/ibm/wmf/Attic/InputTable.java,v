head	1.2;
access;
symbols
	dummy-releasetag:1.1.1.1 dummy-vendortag:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2011.04.19.21.51.40;	author rjw;	state dead;
branches;
next	1.1;

1.1
date	2011.04.19.20.28.17;	author rjw;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.04.19.20.28.17;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Removing all files from wmf.
@
text
@
//==============================================================================
// WMF Source File InputTable.java.
//
// Contains the declaration of class InputTable.
//==============================================================================

package com.ibm.wmf;

import    java.util.*;
import      java.io.*;

//==============================================================================
// Class InputTable
//
// Represents a table of Strings that was read in from a CSV file.
// Immutable class
//==============================================================================

public final class InputTable
{
//==============================================================================
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// newInstance (theFileName)
//
// Factory method: Constructs and returns a new InputTable that stores the data
// given in the CSV file whose name is given by theFileName.
//------------------------------------------------------------------------------

   public static InputTable newInstance (String theFileName)
      throws
         FileNotFoundException,
         IOException
      {
      return new InputTable (theFileName);
      }

//------------------------------------------------------------------------------
// findNonHeadings (theHeadings)
//
// Returns an array listing all of the Strings given in theHeadings that are not
// column headings in this InputTable.
//------------------------------------------------------------------------------

   public String[] findNonHeadings (String... theHeadings)
      {
      ArrayList <String> nonHeads;

      nonHeads = new ArrayList <String> (theHeadings.length);

      for (String theHeading: theHeadings)
         {
         if (! myColIndexMap.containsKey (theHeading))
            {
            nonHeads.add (theHeading);
            }
         }

      return nonHeads.toArray (new String[0]);
      }

//------------------------------------------------------------------------------
// getRows ()
//
// Returns the List of InputRows for this InputTable, as an unmodifiable view of
// an ArrayList.
//------------------------------------------------------------------------------

   public List <InputRow> getRows ()
      {
      return Collections.unmodifiableList (myRows);
      }

//==============================================================================
// Package-Internal Methods
//==============================================================================

//------------------------------------------------------------------------------
// getColumnIndex (theHeading)
//
// Returns the index of the column whose heading matches theHeading, if any,
// otherwise 0.
//------------------------------------------------------------------------------

   int getColumnIndex (String theHeading)
      {
      Integer colIdx;

      colIdx = myColIndexMap.get (theHeading);

      return (colIdx != null)? colIdx: 0;
      }

//==============================================================================
// Private Constructor
//==============================================================================

   InputTable (String theFileName)
      throws
         FileNotFoundException,
         IOException
      {
      ArrayList  <String>             theHeadings;
      LinkedList <ArrayList <String>> theCellRows;

      theHeadings   = new ArrayList  <String>             (0);
      theCellRows   = new LinkedList <ArrayList <String>> ();

      CsvFileReader.read (theFileName, theHeadings, theCellRows);

      myColIndexMap = buildColIndexMap (theHeadings);
      myRows        = buildRows        (theCellRows);
      }

//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// buildColIndexMap (theHeadings)
//
// Builds and returns the Map to be used as myColIndexMap, based on theHeadings.
//------------------------------------------------------------------------------

   private HashMap <String, Integer> buildColIndexMap (
         List <String> theHeadings)
      {
      HashMap <String, Integer> theColIndexMap;
      String                    theHeading;
      int                       colIdx;

      theColIndexMap = new HashMap <String, Integer> (theHeadings.size () * 3);

      for (colIdx = 1; colIdx <= theHeadings.size (); colIdx ++)
         {
         theHeading = theHeadings.get (colIdx - 1);

         assert (! theColIndexMap.containsKey (theHeading));

         theColIndexMap.put (theHeading, colIdx);
         }

      return theColIndexMap;
      }

//------------------------------------------------------------------------------
// buildRows (theCellRows)
// 
// Creates the InputRows for this InputTable from theCellRows, stores them in an
// ArrayList, and returns it.
//------------------------------------------------------------------------------

   private ArrayList <InputRow> buildRows (
         List <ArrayList <String>> theCellRows)
      {
      ArrayList <InputRow> theRows;
      int                  rowIdx;
      ArrayList <String>   theCells;
      InputRow             theRow;

      theRows = new ArrayList <InputRow> (theCellRows.size ());

      for (rowIdx = 1; rowIdx <= theCellRows.size (); rowIdx ++)
         {
         theCells = theCellRows.get (rowIdx - 1);

         assert (theCells.size () == myColIndexMap.size ());

         theRow   = new InputRow (this, rowIdx, theCells);

         theRows.add (theRow);
         }

      return theRows;
      }

//==============================================================================
// Private Fields
//==============================================================================

//------------------------------------------------------------------------------
// myColIndexMap
//
// myColIndexMap.get (theHeading) is the column index for theHeading.
//------------------------------------------------------------------------------

   private final HashMap <String, Integer> myColIndexMap;

//------------------------------------------------------------------------------
// myRows
//
// myRows.get (rowIdx - 1) is the InputRow that represents row #rowIdx in this
// InputTable.
//------------------------------------------------------------------------------

   private final ArrayList <InputRow> myRows;

//==============================================================================
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Creating the wmf project (WIT Modeling Framework).

@
text
@@
