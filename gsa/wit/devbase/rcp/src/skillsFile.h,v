head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2005.09.18.01.58.57;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@:wq
@
text
@#ifndef RCPskillsFile_h
#define RCPskillsFile_h

#include "scoFile.h"

class RCPskillsFile : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(jobRole);
  getFieldH(primarySkill);
  getFieldH(skillSet);
  getFloatFieldH(percentage);
 
  
  // preferred constructor
  RCPskillsFile(std::string filename )
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(4);
       
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & jobRole, const std::string & primarySkill, const std::string & skillSet) 
  {
 
    std::string retVal = jobRole + "!@@#$%" + primarySkill + "!@@#$%" + skillSet;

    return retVal;
  };  
  // destructor
  ~RCPskillsFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPskillsFile file("../data/testflexmix/skills/skills.csv");
    
    // Test reading first record

    std::string e = file.jobRole(0);
    assert( e=="developer");
    //assert( file.percentageAsFloat(0) == 0.260870 );
  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {


    std::string jobRole, primarySkill, skillGroup;
    

    jobRole = fieldNAsString(recNum,0);
    primarySkill = fieldNAsString(recNum,1);
    skillGroup = fieldNAsString(recNum,2);
    
    
    std::string retVal = key(jobRole, primarySkill, skillGroup);
    return retVal;
  };


private:
  
  // default constructor -- don't use!
  RCPskillsFile();
  
  // copy constructor  -- don't use!
  RCPskillsFile( const RCPskillsFile& source );
  
  // assignment operator -- don't use!
  RCPskillsFile&
  operator=(const RCPskillsFile& rhs);

  
};



class RCPskillsFileIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(jobRole);
  getFieldFileWithIteratorH(primarySkill);
  getFieldFileWithIteratorH(skillSet);
  getFloatFieldFileWithIteratorH(percentage);
  // preferred constructor
  RCPskillsFileIterator(const RCPskillsFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPskillsFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPskillsFile file("../data/testflexmix/skills/skills.csv");
    RCPskillsFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
                
      std::string e = fileIter.jobRole();
      assert( e=="developer");
      //assert( fileIter.percentageAsFloat() == 0.260870 );
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPskillsFileIterator();
  
  // copy constructor  -- don't use!
  RCPskillsFileIterator( const RCPskillsFileIterator& source );
  
  // assignment operator -- don't use!
  RCPskillsFileIterator&
  operator=(const RCPskillsFileIterator& rhs);

  
};
#endif
@
