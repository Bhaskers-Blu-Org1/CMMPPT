head	1.7;
access;
symbols;
locks; strict;
comment	@// @;


1.7
date	2006.01.30.15.46.58;	author gresh;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.23.14.27.49;	author gresh;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.22.17.57.24;	author dpc;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.17.14.33.18;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.16.20.48.22;	author dpc;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.01.22.54.03;	author dpc;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.21.02.08.47;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.7
log
@changes for nasco multiple skills
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include "rcpProblem.h"
#include "resourceAppData.h"


void RCPresourceAppData::setSupplyAppData(int period, float exSup )
{
  assert((unsigned int)period<exogenousSupply_.size());
  exogenousSupply_[period] = exSup;
}
void RCPresourceAppData::setSupplyAppData(const std::vector<float> & exSupVec )
{
  exogenousSupply_ = exSupVec;
}
const std::vector<float> & RCPresourceAppData::getSupplyAppData()const
{
  return exogenousSupply_;
}

void RCPresourceAppData::setGapAppData(int period, float gapQty )
{
  assert((unsigned int)period<gapQuantity_.size());
  gapQuantity_[period] = gapQty;
}
void RCPresourceAppData::setGapAppData(const std::vector<float> & gapQtyVec )
{
  gapQuantity_ = gapQtyVec;
}
const std::vector<float> & RCPresourceAppData::getGapAppData()const
{
  return gapQuantity_;
}

void RCPresourceAppData::setGlutAppData(int period, float glutQty )
{
  assert((unsigned int)period<glutQuantity_.size());
  glutQuantity_[period] = glutQty;
}
void RCPresourceAppData::setGlutAppData(const std::vector<float> & glutQtyVec )
{
  glutQuantity_ = glutQtyVec;
}
const std::vector<float> & RCPresourceAppData::getGlutAppData()const
{
  return glutQuantity_;
}
void RCPresourceAppData::setResourceAcquireAppData(float acquireTime) 
{
  acquireTime_ = acquireTime;
}
const float RCPresourceAppData::getResourceAcquireAppData()const
{
  return acquireTime_;
}

 
void RCPresourceAppData::setMrpAppData(int period, float mrpQty )
{
  assert((unsigned int)period<mrpGrossQuantity_.size());
  mrpGrossQuantity_[period] = mrpQty;
}
void RCPresourceAppData::setMrpAppData(const std::vector<float> & mrpQtyVec )
{
  mrpGrossQuantity_ = mrpQtyVec;
}
const std::vector<float> & RCPresourceAppData::getMrpAppData()const
{
  return mrpGrossQuantity_;
}

void RCPresourceAppData::setBenchAppData(int period, float benchQty )
{
  assert((unsigned int)period<benchQuantity_.size());
  benchQuantity_[period] = benchQty;
}
void RCPresourceAppData::setBenchAppData(const std::vector<float> & benchQtyVec )
{
  benchQuantity_ = benchQtyVec;
}
const std::vector<float> & RCPresourceAppData::getBenchAppData()const
{
  return benchQuantity_;
}

void RCPresourceAppData::setReleaseAppData(int period, float releaseQty )
{
  assert((unsigned int)period<releaseQuantity_.size());
  releaseQuantity_[period] = releaseQty;
}
void RCPresourceAppData::setReleaseAppData(const std::vector<float> & releaseQtyVec )
{
  releaseQuantity_ = releaseQtyVec;
}
const std::vector<float> & RCPresourceAppData::getReleaseAppData()const
{
  return releaseQuantity_;
}

void RCPresourceAppData::setWorkingAppData(int period, float workingQty )
{
  assert((unsigned int)period<workingQuantity_.size());
  workingQuantity_[period] = workingQty;
}
void RCPresourceAppData::setWorkingAppData(const std::vector<float> & workingQtyVec )
{
  workingQuantity_ = workingQtyVec;
}
const std::vector<float> & RCPresourceAppData::getWorkingAppData()const
{
  return workingQuantity_;
}

void RCPresourceAppData::setAcquireAppData(int period, float acquireQty )
{
  assert((unsigned int)period<acquireQuantity_.size());
  acquireQuantity_[period] = acquireQty;
}
void RCPresourceAppData::setAcquireAppData(const std::vector<float> & acquireQtyVec )
{
  acquireQuantity_ = acquireQtyVec;
}
const std::vector<float> & RCPresourceAppData::getAcquireAppData()const
{
  return acquireQuantity_;
}






// default constructor
RCPresourceAppData::RCPresourceAppData()
:
RCPappData(),
exogenousSupply_(),
mrpGrossQuantity_(),
gapQuantity_(),
glutQuantity_(),
benchQuantity_(),
releaseQuantity_(),
workingQuantity_(),
acquireQuantity_()
{}

// preferred constructor
RCPresourceAppData::RCPresourceAppData(int nPeriods)
:
RCPappData(),
exogenousSupply_(),
mrpGrossQuantity_(),
gapQuantity_(),
glutQuantity_(),
benchQuantity_(),
releaseQuantity_(),
workingQuantity_(),
acquireQuantity_()
{
  setVector(nPeriods,0.0f,exogenousSupply_);
  setVector(nPeriods,0.0f,mrpGrossQuantity_);
  setVector(nPeriods,0.0f,gapQuantity_);
  setVector(nPeriods,0.0f,glutQuantity_);
  setVector(nPeriods,0.0f,benchQuantity_);
  setVector(nPeriods,0.0f,releaseQuantity_);
  setVector(nPeriods,0.0f,workingQuantity_);
  setVector(nPeriods,0.0f,acquireQuantity_);
}


// destructor

RCPresourceAppData::~RCPresourceAppData()
{}

// copy constructor
RCPresourceAppData::RCPresourceAppData( const RCPresourceAppData& source ):
RCPappData(source),
exogenousSupply_(source.exogenousSupply_),
mrpGrossQuantity_(source.mrpGrossQuantity_),
gapQuantity_(source.gapQuantity_),
glutQuantity_(source.glutQuantity_),
benchQuantity_(source.benchQuantity_),
releaseQuantity_(source.releaseQuantity_),
workingQuantity_(source.workingQuantity_),
acquireQuantity_(source.acquireQuantity_)
{};

// assignment operator
RCPresourceAppData&
RCPresourceAppData::operator=(const RCPresourceAppData& rhs)
{  
  if (this != &rhs) {        
    RCPappData::operator=(rhs);
    exogenousSupply_ = rhs.exogenousSupply_;
    mrpGrossQuantity_ = rhs.mrpGrossQuantity_;
    gapQuantity_ = rhs.gapQuantity_;
    glutQuantity_ = rhs.glutQuantity_;
    benchQuantity_ = rhs.benchQuantity_;
    releaseQuantity_ = rhs.releaseQuantity_;
    workingQuantity_ = rhs.workingQuantity_;
    acquireQuantity_ = rhs.acquireQuantity_;
  }
  return *this;
}


RCPappData * RCPresourceAppData::clone() const
{ return (new RCPresourceAppData(*this));}

// Self-test
void RCPresourceAppData::test()
{
  
  RCPresourceAppData ad1;
  assert(ad1.getSupplyAppData().size()==0);
  
  {
    int nP = 2;
    RCPresourceAppData ad0(nP);
    assert(ad0.getSupplyAppData().size()==2);
    assert(ad0.getSupplyAppData()[0]==0.0f);
    assert(ad0.getSupplyAppData()[1]==0.0f);
    
    ad0.setSupplyAppData(0,1.0f);
    assert(ad0.getSupplyAppData()[0]==1.0f);

    ad0.setSupplyAppData(1,2.0f);
    assert(ad0.getSupplyAppData()[1]==2.0f);

    ad1 = ad0;
    
    std::vector<float> es;
    es.push_back(3.0f);
    es.push_back(4.0f);
    
    ad0.setSupplyAppData(es);
    
    assert(ad0.getSupplyAppData()[0]==3.0f);
    assert(ad0.getSupplyAppData()[1]==4.0f);

  }

  assert(ad1.getSupplyAppData().size()==2);
  assert(ad1.getSupplyAppData()[0]==1.0f);
  assert(ad1.getSupplyAppData()[1]==2.0f);
  
}
@


1.6
log
@misc. compiler warning fixes
@
text
@d51 9
@


1.5
log
@Added priorityResourceAction capability.  Fixed a problem in resourceAppData where I was writing the wrong value to workingQuantity.
@
text
@d12 1
a12 1
  assert(period<exogenousSupply_.size());
d26 1
a26 1
  assert(period<gapQuantity_.size());
d40 1
a40 1
  assert(period<glutQuantity_.size());
d54 1
a54 1
  assert(period<mrpGrossQuantity_.size());
d68 1
a68 1
  assert(period<benchQuantity_.size());
d82 1
a82 1
  assert(period<releaseQuantity_.size());
d96 1
a96 1
  assert(period<workingQuantity_.size());
d110 1
a110 1
  assert(period<acquireQuantity_.size());
@


1.4
log
@Changed [sg]et{Attribute}Quantity to [sg]etResource{Attribute}Quantity
Saved the Optimal Resource Action plans to the appData
Fixed a method that was for Acquire;  it had been setting another attribute
@
text
@d97 1
a97 1
  releaseQuantity_[period] = workingQty;
@


1.3
log
@Added bench, working, acquire and release quantities to the app data of the bench and working resources.  Also cleaned up the merge conflicts.
@
text
@d111 1
a111 1
  releaseQuantity_[period] = acquireQty;
@


1.2
log
@The rcp program now reads the algorithm and problem and branches internally to the appropriate code for gapGlut or resourceAction (problem) and priorityPlan or optimalPlan (algorithm).
@
text
@d10 1
a10 1
void RCPresourceAppData::setExogenousSupplyAppData(int period, float exSup )
d15 1
a15 1
void RCPresourceAppData::setExogenousSupplyAppData(const std::vector<float> & exSupVec )
d19 1
a19 1
const std::vector<float> & RCPresourceAppData::getExogenousSupplyAppData()const
d66 61
d134 5
a138 1
glutQuantity_()
d148 5
a152 1
glutQuantity_()
d158 4
d175 6
a180 1
gapQuantity_(source.gapQuantity_)
d193 4
d210 1
a210 1
  assert(ad1.getExogenousSupplyAppData().size()==0);
d215 3
a217 3
    assert(ad0.getExogenousSupplyAppData().size()==2);
    assert(ad0.getExogenousSupplyAppData()[0]==0.0f);
    assert(ad0.getExogenousSupplyAppData()[1]==0.0f);
d219 2
a220 2
    ad0.setExogenousSupplyAppData(0,1.0f);
    assert(ad0.getExogenousSupplyAppData()[0]==1.0f);
d222 2
a223 2
    ad0.setExogenousSupplyAppData(1,2.0f);
    assert(ad0.getExogenousSupplyAppData()[1]==2.0f);
d231 1
a231 1
    ad0.setExogenousSupplyAppData(es);
d233 2
a234 2
    assert(ad0.getExogenousSupplyAppData()[0]==3.0f);
    assert(ad0.getExogenousSupplyAppData()[1]==4.0f);
d238 3
a240 3
  assert(ad1.getExogenousSupplyAppData().size()==2);
  assert(ad1.getExogenousSupplyAppData()[0]==1.0f);
  assert(ad1.getExogenousSupplyAppData()[1]==2.0f);
@


1.1
log
@Added resource appData
@
text
@d10 1
a10 1
void RCPresourceAppData::setExogenousSupply(int period, float exSup )
d15 1
a15 1
void RCPresourceAppData::setExogenousSupply(const std::vector<float> & exSupVec )
d19 1
a19 1
const std::vector<float> & RCPresourceAppData::getExogenousSupply()const
d24 41
d70 4
a73 1
exogenousSupply_()
d80 4
a83 1
exogenousSupply_()
d86 3
d100 3
a102 1
exogenousSupply_(source.exogenousSupply_)
d112 3
d119 1
d128 1
a128 1
  assert(ad1.getExogenousSupply().size()==0);
d133 3
a135 3
    assert(ad0.getExogenousSupply().size()==2);
    assert(ad0.getExogenousSupply()[0]==0.0f);
    assert(ad0.getExogenousSupply()[1]==0.0f);
d137 2
a138 2
    ad0.setExogenousSupply(0,1.0f);
    assert(ad0.getExogenousSupply()[0]==1.0f);
d140 2
a141 2
    ad0.setExogenousSupply(1,2.0f);
    assert(ad0.getExogenousSupply()[1]==2.0f);
d149 1
a149 1
    ad0.setExogenousSupply(es);
d151 2
a152 2
    assert(ad0.getExogenousSupply()[0]==3.0f);
    assert(ad0.getExogenousSupply()[1]==4.0f);
d156 3
a158 3
  assert(ad1.getExogenousSupply().size()==2);
  assert(ad1.getExogenousSupply()[0]==1.0f);
  assert(ad1.getExogenousSupply()[1]==2.0f);
@

