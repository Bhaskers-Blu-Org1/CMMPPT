head	1.147;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.147
date	2007.03.21.14.24.29;	author fasano;	state Exp;
branches;
next	1.146;

1.146
date	2006.05.15.14.07.58;	author gresh;	state Exp;
branches;
next	1.145;

1.145
date	2006.02.06.17.58.45;	author gresh;	state Exp;
branches;
next	1.144;

1.144
date	2006.01.30.15.46.58;	author gresh;	state Exp;
branches;
next	1.143;

1.143
date	2006.01.23.12.42.44;	author gresh;	state Exp;
branches;
next	1.142;

1.142
date	2005.12.21.17.45.57;	author gresh;	state Exp;
branches;
next	1.141;

1.141
date	2005.09.08.14.57.49;	author gresh;	state Exp;
branches;
next	1.140;

1.140
date	2005.08.19.19.15.25;	author gresh;	state Exp;
branches;
next	1.139;

1.139
date	2005.08.18.13.58.25;	author gresh;	state Exp;
branches;
next	1.138;

1.138
date	2005.08.16.18.18.51;	author gresh;	state Exp;
branches;
next	1.137;

1.137
date	2005.08.16.16.21.20;	author gresh;	state Exp;
branches;
next	1.136;

1.136
date	2005.08.15.17.32.41;	author gresh;	state Exp;
branches;
next	1.135;

1.135
date	2005.08.04.18.33.06;	author gresh;	state Exp;
branches;
next	1.134;

1.134
date	2004.08.03.15.32.01;	author dpc;	state Exp;
branches;
next	1.133;

1.133
date	2004.07.28.13.53.03;	author dpc;	state Exp;
branches;
next	1.132;

1.132
date	2004.07.28.13.50.06;	author dpc;	state Exp;
branches;
next	1.131;

1.131
date	2004.07.23.17.07.17;	author gresh;	state Exp;
branches;
next	1.130;

1.130
date	2004.07.23.12.37.22;	author dpc;	state Exp;
branches;
next	1.129;

1.129
date	2004.07.21.20.00.16;	author dpc;	state Exp;
branches;
next	1.128;

1.128
date	2004.07.21.17.42.03;	author gresh;	state Exp;
branches;
next	1.127;

1.127
date	2004.07.15.15.31.45;	author dpc;	state Exp;
branches;
next	1.126;

1.126
date	2004.07.14.17.43.52;	author gresh;	state Exp;
branches;
next	1.125;

1.125
date	2004.06.25.02.22.32;	author fasano;	state Exp;
branches;
next	1.124;

1.124
date	2004.06.24.21.36.10;	author dpc;	state Exp;
branches;
next	1.123;

1.123
date	2004.06.24.19.19.58;	author fasano;	state Exp;
branches;
next	1.122;

1.122
date	2004.06.22.19.15.32;	author gresh;	state Exp;
branches;
next	1.121;

1.121
date	2004.06.21.14.32.09;	author gresh;	state Exp;
branches;
next	1.120;

1.120
date	2004.06.18.17.31.25;	author gresh;	state Exp;
branches;
next	1.119;

1.119
date	2004.06.07.18.42.30;	author dpc;	state Exp;
branches;
next	1.118;

1.118
date	2004.05.17.16.49.26;	author gresh;	state Exp;
branches;
next	1.117;

1.117
date	2004.05.17.15.41.30;	author gresh;	state Exp;
branches;
next	1.116;

1.116
date	2004.05.14.17.41.38;	author gresh;	state Exp;
branches;
next	1.115;

1.115
date	2004.05.03.23.08.36;	author dpc;	state Exp;
branches;
next	1.114;

1.114
date	2004.04.14.18.55.32;	author dpc;	state Exp;
branches;
next	1.113;

1.113
date	2004.04.13.20.59.29;	author fasano;	state Exp;
branches;
next	1.112;

1.112
date	2004.04.13.20.16.51;	author fasano;	state Exp;
branches;
next	1.111;

1.111
date	2004.04.05.21.37.12;	author dpc;	state Exp;
branches;
next	1.110;

1.110
date	2004.04.05.12.40.44;	author dpc;	state Exp;
branches;
next	1.109;

1.109
date	2004.04.03.02.08.17;	author fasano;	state Exp;
branches;
next	1.108;

1.108
date	2004.04.02.20.27.22;	author dpc;	state Exp;
branches;
next	1.107;

1.107
date	2004.03.24.15.16.41;	author gresh;	state Exp;
branches;
next	1.106;

1.106
date	2004.03.22.20.40.31;	author gresh;	state Exp;
branches;
next	1.105;

1.105
date	2004.03.22.17.57.24;	author dpc;	state Exp;
branches;
next	1.104;

1.104
date	2004.03.20.02.35.04;	author fasano;	state Exp;
branches;
next	1.103;

1.103
date	2004.03.19.19.27.53;	author fasano;	state Exp;
branches;
next	1.102;

1.102
date	2004.03.19.16.48.50;	author fasano;	state Exp;
branches;
next	1.101;

1.101
date	2004.03.19.16.40.23;	author fasano;	state Exp;
branches;
next	1.100;

1.100
date	2004.03.19.02.49.45;	author fasano;	state Exp;
branches;
next	1.99;

1.99
date	2004.03.19.02.35.11;	author fasano;	state Exp;
branches;
next	1.98;

1.98
date	2004.03.18.22.13.00;	author fasano;	state Exp;
branches;
next	1.97;

1.97
date	2004.03.18.21.22.39;	author fasano;	state Exp;
branches;
next	1.96;

1.96
date	2004.03.18.21.18.49;	author fasano;	state Exp;
branches;
next	1.95;

1.95
date	2004.03.18.21.09.38;	author fasano;	state Exp;
branches;
next	1.94;

1.94
date	2004.03.18.20.45.45;	author fasano;	state Exp;
branches;
next	1.93;

1.93
date	2004.03.18.20.35.19;	author fasano;	state Exp;
branches;
next	1.92;

1.92
date	2004.03.18.18.23.39;	author gresh;	state Exp;
branches;
next	1.91;

1.91
date	2004.03.18.16.57.57;	author fasano;	state Exp;
branches;
next	1.90;

1.90
date	2004.03.18.16.54.58;	author fasano;	state Exp;
branches;
next	1.89;

1.89
date	2004.03.18.16.51.51;	author fasano;	state Exp;
branches;
next	1.88;

1.88
date	2004.03.18.16.45.57;	author fasano;	state Exp;
branches;
next	1.87;

1.87
date	2004.03.18.16.44.49;	author fasano;	state Exp;
branches;
next	1.86;

1.86
date	2004.03.18.16.38.39;	author fasano;	state Exp;
branches;
next	1.85;

1.85
date	2004.03.18.16.31.30;	author fasano;	state Exp;
branches;
next	1.84;

1.84
date	2004.03.18.16.25.37;	author fasano;	state Exp;
branches;
next	1.83;

1.83
date	2004.03.18.16.20.01;	author fasano;	state Exp;
branches;
next	1.82;

1.82
date	2004.03.17.22.34.40;	author fasano;	state Exp;
branches;
next	1.81;

1.81
date	2004.03.17.18.21.24;	author dpc;	state Exp;
branches;
next	1.80;

1.80
date	2004.03.17.14.33.18;	author dpc;	state Exp;
branches;
next	1.79;

1.79
date	2004.03.17.03.08.16;	author fasano;	state Exp;
branches;
next	1.78;

1.78
date	2004.03.16.21.46.08;	author gresh;	state Exp;
branches;
next	1.77;

1.77
date	2004.03.16.21.23.58;	author gresh;	state Exp;
branches;
next	1.76;

1.76
date	2004.03.16.20.48.21;	author dpc;	state Exp;
branches;
next	1.75;

1.75
date	2004.03.16.20.25.59;	author gresh;	state Exp;
branches;
next	1.74;

1.74
date	2004.03.16.18.58.22;	author gresh;	state Exp;
branches;
next	1.73;

1.73
date	2004.03.16.18.41.06;	author gresh;	state Exp;
branches;
next	1.72;

1.72
date	2004.03.16.17.23.33;	author gresh;	state Exp;
branches;
next	1.71;

1.71
date	2004.03.15.20.56.45;	author gresh;	state Exp;
branches;
next	1.70;

1.70
date	2004.03.15.20.38.31;	author gresh;	state Exp;
branches;
next	1.69;

1.69
date	2004.03.15.19.02.10;	author fasano;	state Exp;
branches;
next	1.68;

1.68
date	2004.03.15.18.08.34;	author fasano;	state Exp;
branches;
next	1.67;

1.67
date	2004.03.15.17.01.39;	author fasano;	state Exp;
branches;
next	1.66;

1.66
date	2004.03.14.10.11.27;	author fasano;	state Exp;
branches;
next	1.65;

1.65
date	2004.03.13.19.15.30;	author fasano;	state Exp;
branches;
next	1.64;

1.64
date	2004.03.13.17.19.51;	author fasano;	state Exp;
branches;
next	1.63;

1.63
date	2004.03.13.17.06.26;	author fasano;	state Exp;
branches;
next	1.62;

1.62
date	2004.03.13.14.55.23;	author fasano;	state Exp;
branches;
next	1.61;

1.61
date	2004.03.13.11.34.22;	author fasano;	state Exp;
branches;
next	1.60;

1.60
date	2004.03.13.05.50.41;	author fasano;	state Exp;
branches;
next	1.59;

1.59
date	2004.03.11.16.38.54;	author dpc;	state Exp;
branches;
next	1.58;

1.58
date	2004.03.10.20.52.13;	author gresh;	state Exp;
branches;
next	1.57;

1.57
date	2004.03.10.19.16.59;	author gresh;	state Exp;
branches;
next	1.56;

1.56
date	2004.03.10.17.08.44;	author dpc;	state Exp;
branches;
next	1.55;

1.55
date	2004.03.08.21.01.48;	author gresh;	state Exp;
branches;
next	1.54;

1.54
date	2004.03.01.22.54.03;	author dpc;	state Exp;
branches;
next	1.53;

1.53
date	2004.02.12.21.24.31;	author gresh;	state Exp;
branches;
next	1.52;

1.52
date	2004.02.12.17.56.03;	author gresh;	state Exp;
branches;
next	1.51;

1.51
date	2004.02.12.17.26.59;	author gresh;	state Exp;
branches;
next	1.50;

1.50
date	2004.02.12.15.24.09;	author gresh;	state Exp;
branches;
next	1.49;

1.49
date	2004.02.11.19.39.09;	author gresh;	state Exp;
branches;
next	1.48;

1.48
date	2004.01.30.13.28.08;	author dpc;	state Exp;
branches;
next	1.47;

1.47
date	2004.01.23.03.29.12;	author fasano;	state Exp;
branches;
next	1.46;

1.46
date	2004.01.22.22.30.09;	author dpc;	state Exp;
branches;
next	1.45;

1.45
date	2004.01.21.20.40.03;	author dpc;	state Exp;
branches;
next	1.44;

1.44
date	2004.01.21.17.51.37;	author gresh;	state Exp;
branches;
next	1.43;

1.43
date	2004.01.21.15.47.32;	author gresh;	state Exp;
branches;
next	1.42;

1.42
date	2004.01.21.14.43.07;	author dpc;	state Exp;
branches;
next	1.41;

1.41
date	2004.01.20.13.36.51;	author fasano;	state Exp;
branches;
next	1.40;

1.40
date	2004.01.16.22.07.39;	author fasano;	state Exp;
branches;
next	1.39;

1.39
date	2004.01.16.19.44.12;	author fasano;	state Exp;
branches;
next	1.38;

1.38
date	2004.01.13.00.14.33;	author fasano;	state Exp;
branches;
next	1.37;

1.37
date	2004.01.12.19.55.26;	author fasano;	state Exp;
branches;
next	1.36;

1.36
date	2004.01.12.17.39.32;	author gresh;	state Exp;
branches;
next	1.35;

1.35
date	2004.01.12.14.51.38;	author dpc;	state Exp;
branches;
next	1.34;

1.34
date	2004.01.11.17.40.44;	author fasano;	state Exp;
branches;
next	1.33;

1.33
date	2004.01.10.03.16.42;	author fasano;	state Exp;
branches;
next	1.32;

1.32
date	2004.01.09.22.23.25;	author fasano;	state Exp;
branches;
next	1.31;

1.31
date	2004.01.09.21.39.50;	author dpc;	state Exp;
branches;
next	1.30;

1.30
date	2004.01.08.21.04.09;	author fasano;	state Exp;
branches;
next	1.29;

1.29
date	2004.01.08.20.00.04;	author dpc;	state Exp;
branches;
next	1.28;

1.28
date	2004.01.07.23.18.32;	author fasano;	state Exp;
branches;
next	1.27;

1.27
date	2004.01.07.22.18.35;	author dpc;	state Exp;
branches;
next	1.26;

1.26
date	2004.01.07.20.35.02;	author fasano;	state Exp;
branches;
next	1.25;

1.25
date	2004.01.07.14.01.53;	author dpc;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.13.05.08.12;	author fasano;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.13.04.52.49;	author fasano;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.13.01.15.22;	author fasano;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.12.17.04.18;	author dpc;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.09.14.17.45;	author dpc;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.03.21.33.17;	author fasano;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.03.19.30.04;	author dpc;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.01.17.44.13;	author gresh;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.01.14.19.06;	author gresh;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.26.03.25.20;	author fasano;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.25.18.58.54;	author gresh;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.25.14.57.48;	author gresh;	state Exp;
branches;
next	1.12;

1.12
date	2003.11.21.22.34.57;	author dpc;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.21.04.22.25;	author fasano;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.20.21.21.31;	author dpc;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.20.02.12.59;	author fasano;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.19.19.34.24;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.19.15.07.03;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.18.21.35.11;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.18.19.32.19;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.14.21.38.03;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.14.20.23.15;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.13.19.22.46;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.13.14.23.40;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.13.14.23.40;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.147
log
@Added RcpProblem::setOptWithLotsSizes method to replace witSetOptWithLotSizes
(WIT no longer has the function witSetOptWithLotSizes).
Added some pragma's to reduce the warnings issued by the MS V8 compiler
@
text
@#ifndef RCPproblem_h
#define RCPproblem_h


#include "problemBase.h"
#include "baseSubs.h"
#include "bomAppData.h"
#include "rcpOptTimer.h"

typedef std::vector<std::string> RCPvectorString;
  
// ---------
// Typedefs for sorting resourceIdNames by priority
// ---------
typedef std::pair<std::string,int> RCPstringIntPair;
struct RCPsortIntInStringIntPair
{
  bool operator()( RCPstringIntPair p1,  RCPstringIntPair p2) const
  {
    if ( p1.second==p2.second ) return p1.first<p2.first;
    if ( p1.second<=0 && p2.second<=0 ) return p1.second<p2.second;
    if ( p1.second<=0 ) return false;
    if ( p2.second<=0 ) return true;
    return p1.second<p2.second;
  };
};
typedef std::set<RCPstringIntPair,RCPsortIntInStringIntPair> RCPsortStringIntPairSet;
typedef RCPsortStringIntPairSet::const_iterator RCPsortStringIntPairSetConstIter;
// ---------

class RCPproblem : public SCOproblemBase {
public:
  
  RcpOptTimer& getTimer();

  void priorityNASCO();

  //----------------------
  // Methods for engagements.
  //----------------------
  void addEngagementFamily (const std::string & engagementFamilyName);
  void setEngagementFamily(const std::string & engagementName, const std::string & engagementFamilyName);
  void addEngagement       (const std::string & engagementName);
  void addEngagementNoDemand (const std::string &engagementName);
  void setEngagementMustDo(const std::string & engagementName, int mustDo);
  int RCPproblem::getEngagementMustDo(const std::string & engName)const;
  void addDemandForEngagement(const std::string &engagementName, const std::string &demandName, int period, float quantity);
  void computeCumDemands();
  void setEngagementRevenue    (const std::string & engagementName, float revenue );
  //void setEngagementDuration   (const std::string & engagementName, int startPeriod );
  void setEngagementLateAllowance   (const std::string & engagementName, int lateAllowance );
  void setEngagementStartPeriod(const std::string & engagementName, int startPeriod );
  void setEngagementPriority(const std::string & engagementName, int priority);
  void setEngagementQuantity(const std::string & engagementName, float quanity);

  void getEngagementNames( std::vector<std::string> & engagementNames )const;
  bool engagementExists    (const std::string & engagementName)const;
  bool engagementFamilyExists (const std::string & engagementFamilyName)const;
  bool getInfeasibleExecution (const std::string & engagementName)const;
  float getEngagementRevenue(const std::string & engagementName)const;
  //int getEngagementDuration(const std::string & engagementName)const;
  int getEngagementLateAllowance(const std::string & engagementName)const;
  int getEngagementStartPeriod(const std::string & engagementName)const;
  int getEngagementPriority(const std::string & engagementName)const;
  float getEngagementQuantity(const std::string & engagementName)const;

  std::vector<RCPvectorString> getEngagementConsumedResources(const std::string & engagementName) const;

  bool getEngagementExecuted(const std::string & engagementName)const;
  std::vector<float> getEngagementExecutionQuantity(const std::string & engName)const;
  int getEngagementRequestedStartPeriod(const std::string & engagementName)const;
  
#if 0
  void setEngagementReasonableReward(const std::string & engagementName);
#endif
  std::string sortLayerEngagementName(const std::string & engagementName, const std::string & orderName);
void getEngagementPeggedQuantitiesFromSupply(const std::string &engName, 
                                             int period,
                                             std::vector<RCPvectorString> & resources,
                                             std::vector<float> &quantities) const;
void getEngagementPeggedQuantitiesFromAcquisition(const std::string &engName, 
                                             int period,
                                             std::vector<RCPvectorString> & resources,
                                             std::vector<float> &quantities) const;
void getEngagementPeggedQuantitiesFromSubstitution(const std::string &engName, 
                                                   int period,
                                                   std::vector<RCPvectorString> & resources,
                                                   std::vector<float> &quantities,
                                                   std::vector<RCPvectorString> & subResources) const;
float getEngagementPeggedQuantityFromSupply(const std::string &engName, 
                                             int period,
                                             RCPvectorString & resource) const;
float getEngagementPeggedQuantityFromAcquisition(const std::string &engName, 
                                             int period,
                                             RCPvectorString & resource) const;
void getEngagementPeggedQuantitiesFromSubstitution(const std::string &engName, 
                                                   int period,
                                                   RCPvectorString & resources,
                                                   std::vector<float> &quantities,
                                                   std::vector<RCPvectorString> & subResources) const;

 
  //----------------------
  // Resource Identifier methods.  
  //----------------------
  // Resources have resource identifier names.
  //
  // For example: resource identifier names might be: jobRole, band, city
  //
  // The names of the resource identifiefers are defined by
  // using the method addResourceIdentifierName.
  //
  // Each resource has a resource identifier values
  // These might be: javaProgrammer, band9, Orlando
  //---------------------
  std::string createSkillGroupName(std::vector<std::vector<std::string> >);

  void addResourceAcquire(const std::vector<std::string> &resourceAttributeVector, std::string eName);
  void addResourceIdentifierName(const std::string & identifierName);
  const std::vector<std::string> & getResourceIdentifierNames() const;
  bool resourceIdentifierNameExists( const std::string & name ) const;
  std::string getResourceValueFromAttributeName(const std::vector<std::string> & resourcename, std::string &resourceAttribute)const;
  int getIndexOfAttribute(std::string resourceAttribute) const;
  bool isDemandFor(RCPvectorString resource) const;
  void AttachCrossTerm(RCPvectorString originalResource, RCPvectorString resourceWithAlternate, int skillSetPosition, float fraction); 

  void addAlternateResource(std::vector<std::string> skillList, int skillSetPosition,  RCPvectorString originalResource,  float * supplyAlternate);
  std::string createAltName(RCPvectorString resourceWithAlternate, RCPvectorString originalResource, int skillSetPosition) const;
  void setResourceIdentifierPriority(const std::string & identifierName, int priority );
  int getResourceIdentifierPriority(const std::string & identifierName )const;
  

  //----------------------
  // Methods for resources.
  //----------------------
  void setSimpleResourceAcquireAversion(std::vector<std::string>, float);
  void setSimpleResourceAcquireAppData(const std::vector<std::string> &resourceAttributeVector, float acquireTime);
  void setMultipleSkillResourceSupplyQuantity(std::vector<std::vector<std::string> >, float, int);
  float * getMultipleSkillResourceSupplyQuantity(std::vector<std::vector<std::string> >);
  void addSkillGroupResource(const std::vector<std::vector<std::string> > &skillGroup);
  void addMultipleSkillGroups(std::vector<std::vector<std::string> >);
  void addResource(const std::vector<std::string> &resourceIdentifierValues);
  void addSimpleResource(const std::vector<std::string> &resourceIdentifierValues);
  void addFlexibleResource(const std::vector<std::string> &resourceIdentifierValues, bool isFlexResource);
  void RCPproblem::addFlexibleResourceAcquire(const std::vector<std::string> &resourceAttributeVector, std::string ename);
  std::string  makeFlexSkillName(std::vector<std::string>);
  void setResourceAcquireCost(const std::vector<std::string> & resourceIdentifierValues, float acquireCost);
  void setResourceAcquireTime(const std::vector<std::string> & resourceIdentifierValues, float acquireTime);
  void setResourceReleaseCost(const std::vector<std::string> & resourceIdentifierValues, float releaseCost);
  void setResourceReleaseTime(const std::vector<std::string> & resourceIdentifierValues, float releaseTime);

  void setResourceAcquireQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float acquireQuantity);
  void setResourceBenchQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float benchQuantity);
  void setResourceFixedCost(const std::vector<std::string> &resourceIdentifierValues, int period, float fixedCost);
  void setResourceGapQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float mrpGrossQuantity);
  void setResourceGlutQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float mrpGrossQuantity);
  void setSkillGroupGlutQuantity(const std::vector<std::vector<std::string> > &skillGroup, int period, float mrpGrossQuantity);
  void setFlexibleResourceGapQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float mrpGrossQuantity);
  void setFlexibleResourceGlutQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float mrpGrossQuantity);
  void setResourceMrpQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float mrpGrossQuantity);
  void setResourceReleaseQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float releaseQuantity);
  void setFlexibleResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues,  float * supplyQty);
  void setSimpleResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues,  float * supplyQty);
  void setResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float supplyQty);
  void setResourceWorkingQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float workingQuantity);

  void setBenchResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float supplyQuantity);
#if 0
  void setResourceReasonableReleaseCost(const std::vector<std::string> &resourceAttributeValuesc);
#endif
 
  //------------------------------------------------------------
  // getResourceNames - this method is used to get a list of all
  //                    added resources.
  // returned value names[i][j]
  //   where i=[0,numberOfResources]
  //         j=[0,numberOfResourceIdentifierNames]
  void getResourceNames( std::vector<RCPvectorString> & names )const;
  void getSkillGroupNames( std::vector<std::vector<std::vector<std::string> > > & names )const;
  bool resourceExists(const std::vector<std::string> &resourceIdentifierValues)const;
  bool workingResourceExists(const std::vector<std::string> &resourceIdentifierValues)const;
 
  std::string getResourceValueFromAttribute(const std::vector<std::string> & resourceIdentifierValues, std::string &resourceAttribute) const;
  float getResourceAcquireCost(const std::vector<std::string> & resourceIdentifierValues) const;
  float getResourceAcquireTime(const std::vector<std::string> & resourceIdentifierValues) const;
  float getResourceReleaseCost(const std::vector<std::string> & resourceIdentifierValues) const;
  float getResourceReleaseTime(const std::vector<std::string> & resourceIdentifierValues) const;

  std::vector<float> getResourceAcquireQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getResourceBenchQuantity(const std::vector<std::string> &resourceAttributeVector)const;
  std::vector<float> getResourceFixedCost(const std::vector<std::string> &resourceIdentifierValues) const;
  std::vector<float> getResourceGapQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getResourceGlutQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getSkillGroupGlutQuantity(std::vector<std::vector<std::string> > skillGroup);
  std::vector<float> getFlexibleResourceGapQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getFlexibleResourceGlutQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getResourceMrpQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getResourceReleaseQuantity(const std::vector<std::string> &resourceIdentifierValues) const;
  float * getFlexibleResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  float * getSimpleResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getResourceWorkingQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getOptimalWorkingQuantity(const std::vector<std::string> &resourceIdentifierValues )const;
  
  std::vector<float> getResourceMRPGrossQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getOptimalBenchQuantity(const std::vector<std::string> &resourceIdentifierValues) const;
  void addReleaseLeadtimeStructure(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<std::string> getPrimaryNameFromFlexibleName(std::vector<std::string> name);
  //----------------------
  // Methods for boms.
  //----------------------
  void addBom     (const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues);
  void updateEngagementBom(const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues, int period,float quantity,int mustDo);
  void setBomMatch(const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues, 
    int period, const std::string & resourceIdName , int match);
  void setBomSub  (const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues, 
    int period, const std::string & resourceIdName , int sub);   
  void setBomUsageQuantity(const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues, 
    int period, float usageQuantity);
  
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<RCPvectorString> & names )const;
  bool bomExists(const std::string & engagementName,const std::vector<std::string> &resourceIdentifierValues)const; 
 
  int  getBomMatch(const std::string & engName, const std::vector<std::string> &resourceIdentifierValues, int period, const std::string & resourceIdName ) const;  
  int  getBomSub(const std::string & engName, const std::vector<std::string> &resourceIdentifierValues, int period, const std::string & resourceIdName ) const;  
  float getBomUsageQuantity(const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues,int period)const;
  std::vector<float> getBomUsageQuantity(const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues)const;
    
  void addFlexibleDemand(const std::vector<std::string> &resourceIdentifierValues, std::string engagementName, int period, float usageQuantity);
  //--------------------------------------------------------------------------------
  // Substitution.
  //--------------------------------------------------------------------------------
  void addSubs(const std::string & resourceIdName, const std::string & from, const std::string & to ); 
  void setSubsCost(const std::string & resourceIdName, const std::string & from, const std::string & to, float cost ); 
  void setSubsLeadTime(const std::string & resourceIdName, const std::string & from, const std::string & to, float leadTime ); 
  void setSubsAversion(const std::string & resourceIdName, const std::string & from, const std::string & to, int aversion );
  
  void getSubsNames(const std::string & resourceIdName, std::vector<std::string> & froms, std::vector<std::string> & tos)const;
  bool subsExists(const std::string & resourceIdName, const std::string & from, const std::string & toJobRole )const;
  float getSubsCost(const std::string & resourceIdName, const std::string & from, const std::string & to )const;
  float getSubsLeadTime(const std::string & resourceIdName, const std::string & from, const std::string & to )const;
  int getSubsAversion(const std::string & resourceIdName, const std::string & from, const std::string & to )const;

  //--------------------
  // Solve Methods. 
  //--------------------
  void gapGlut();
  void resourceAction();

  //--------------------
  // algorithm and problem Methods. 
  //--------------------
  void setAlgorithmName(const std::string & algName);
  void setProblemName(const std::string & probName);
  void setFormatName(const std::string & formatName);
  std::string getAlgorithmName();
  std::string getProblemName();
  std::string getFormatName();
  bool isLongFormat();
  
  void setSkillSetPosition(int skillSetPosition);
  int getSkillSetPosition();



  // default constructor
  RCPproblem();
  
  // copy constructor
  RCPproblem( const RCPproblem& source );
  
  // assignment operator
  RCPproblem&
  operator=(const RCPproblem& rhs);
  
  // destructor
  ~RCPproblem();
  

  // Self-test
  static void test();


private:

  // witSetOptWithLotSizes no longer exists.
  // This is a method to replace witSetOptWithLotSizes
  void RCPproblem::setOptWithLotSizes();

  RcpOptTimer timer_;
  int skillSetPosition_; //only used for FlexibleResource model
  void saveMrpResults();
  void saveOptimalResourceActionResults();
  void priorityGapGlut();
  void GapGlutFlexMix();
  void GapGlutDemandEngagement();
  void priorityGapGlut1();
  void priorityGapGlutDemandEngagement();
  void optimalGapGlut();
  void priorityGapGlut2();
  void priorityResourceAction();
  void optimalResourceAction();
  void generatePriorityGapGlut1PeggingResults();
  void generatePriorityGapGlut2PeggingResults();
  void prtExecVolPegging(const char* partName,const char* demandName,int shipPer);
  void prtSubExecVolPegging(const char* partName,const char* demandName,int shipPer);
  void computePegging(std::string demandName);
  void computePegging3(std::string demandName);

  // Getting wit attributes
  std::vector<float> getDemandShipReward(const std::string & engagementName)const;


  // Get the index for the bom connecting the operation to the part for this period
  int getBomEntryIndex(const std::string & engagementName, const std::string & workingRes,int period)const;
  std::vector<int> getBomEntryIndex( const std::string & engagementName, const std::string & workingRes) const;


  //----------------------
  // Methods for handling substitution in a common way
  //----------------------
  typedef std::map<std::string,RCPbaseSubs> RCPmapStringToSubs;
  typedef std::map<std::string,RCPmapStringToSubs> RCPmapMapStringToSubs;
  typedef std::map<std::string,RCPmapStringToSubs>::const_iterator RCPmapMapStringToSubsConstIterator;


  RCPbaseSubs & getSubs(const std::string & resourceIdName, const std::string & from, const std::string & to );
  const RCPbaseSubs & getSubs(const std::string & resourceIdName, const std::string & from, const std::string & to ) const;


  // Add substitute arcs.
  // Returns collection of subsArcs which were added
  typedef std::vector<int> RCPsubBomIndices;
  typedef std::map<int,RCPsubBomIndices> RCPbomSubBomIndices;
  typedef std::map<int,RCPsubBomIndices>::const_iterator RCPbomSubBomIndicesConstIter;
  typedef std::map<std::string,RCPbomSubBomIndices> RCPoperationBomSubBomIndices;
  typedef std::map<std::string,RCPbomSubBomIndices>::const_iterator RCPoperationBomSubBomIndicesConstIter;
  void addSubsArcsToWitModel04Feb(RCPoperationBomSubBomIndices & subBomsAdded);
  void addSubsArcsToWitModelFlexMix(RCPoperationBomSubBomIndices & subBomsAdded);

  // remove substitute arcs
  void removeSubsArcsFromWitModel04Feb(RCPoperationBomSubBomIndices & subBomsToBeRemoved );


  typedef std::set<std::string> RCPcollectionOfStrings;
  void removeIneligibleResources(
                                   RCPcollectionOfStrings & currentToResources,
                                   int subAllowed,
                                   const std::string & resourceIdName,
                                   const std::string & fromResourceAttribute );

  
  // Methods to simplify readability of code
  static void unionCollectionOfStrings(
                                       const RCPcollectionOfStrings & set1,
                                       const RCPcollectionOfStrings & set2,
                                       RCPcollectionOfStrings & retVal);
  static void intersectionCollectionOfStrings(
                                       const RCPcollectionOfStrings & set1,
                                       const RCPcollectionOfStrings & set2,
                                       RCPcollectionOfStrings & retVal);


  // For a specified BOM return all of the resources that are substituting for it
  // At the moment this is intended for debugging
  
  void getSubsResources( 
    const std::string & engagementName, 
    const RCPvectorString & resourceIdentifierValues,
    RCPcollectionOfStrings & reVal)const;

  // presolve methods
  // presolve will add subsBoms. A collection of subsBoms that are added are returned, so postsolve can remove them
  void presolve(RCPoperationBomSubBomIndices & subBomsAdded);
  void presolve04Feb(RCPoperationBomSubBomIndices & subBomsAdded);
  void presolveFlexMix();
  void presolveForOptimalGapGlut();
  void presolveForGapGlut04Feb();
  void presolveForPriorityAllocation();

  //-----------------------------
  // Postsolve methods.
  //-----------------------------
  // remove subs boms which were added by presolve
  void postsolve(RCPoperationBomSubBomIndices & subsAddedByPresolve);
  void postsolve04Feb(RCPoperationBomSubBomIndices & subsAddedByPresolve);

  // reset soft lower bounds on engagement execution to zero
  void postsolveForOptimalGapGlut();

  // Methods for manipulating names
  // Engagement Names
  static std::string engagementFamilyName(const std::string &engFamilyName);
  static std::string engagementName(const std::string & engName);
  static std::string engagementFromEngagementName(const std::string & baseEngagementName);
  static std::string demandTypeFromEngagementName(const std::string & baseEngagementName);

  // Get list of ResourceIdentifiers sorted by priority
  std::vector<std::string> getResourceIdentifiersSortedByPriority() const;

  // Resource Names
  std::string acquireResourceOperationName(const std::vector<std::string> &resourceIdentifierValues)const;
  std::string acquireWorkingResourceName(const std::vector<std::string> &resourceIdentifierValues)const;
  std::string benchResourceName(const std::vector<std::string> &resourceIdentifierValues)const;
  std::string enableResourceOperationName(const std::vector<std::string> &resourceIdentifierValues)const;
  std::string enableFlexResourceOperationName(const std::vector<std::string> &resourceAttributeVector, const std::vector<std::string> &targetAttributeVector )const;
  std::string workingResourceName(const std::vector<std::string> &resourceIdentifierValues)const;
  std::string scrapResourceName(const std::vector<std::string> &resourceIdentifierValues )const;
  std::string enableScrapResourceName(const std::vector<std::string> &resourceIdentifierValues )const;
  std::string baseResourceName(const std::vector<std::string> &resourceIdentifierValues)const;
  static std::string getBenchFromWorkingName(const std::string &workingName);
  static std::string getScrapFromWorkingName(const std::string &workingName);
  static std::string getEnableScrapFromWorkingName(const std::string &workingName);
  static std::string getAcquireOperationFromWorkingName(const std::string &workingName);
  static std::string baseNameFromWorkingResourceName(const std::string & workingName);
  std::string skillGroupToWorkingOperationName(std::vector<std::vector<std::string> >, std::vector<std::string>);
  std::string resourceIdentifierValueFromResourceName(const std::string &baseResourceName, int which) const;
  RCPvectorString resourceIdentifierValuesFromResourceName(const std::string &baseResourceName ) const;

  // bom Names   
  std::string engagementFromBomName(const std::string & bomName)const;
  std::string bomName(const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues)const;
  


  void gutsOfCopy( const RCPproblem& source );
  void gutsOfDestructor();

  
  RCPvectorString resourceIdentifierNames_;
  std::map<std::string,int> mapResourceIdentifierNameToSubsPriority_;
  std::map<std::string,int> mapDemandTypeToPriority_;
  RCPcollectionOfStrings engagementNames_;
  RCPcollectionOfStrings resourceNames_;
  RCPcollectionOfStrings engagementFamilyNames_;
  

  std::vector<std::vector<std::vector<std::string> > > multipleSkillResourceNames_;

  RCPcollectionOfStrings bomNames_;
  typedef std::vector<RCPvectorString> RCPvectorVectorString;
  std::map<std::string,RCPvectorVectorString> mapEngagementToConsumedResources_;

  
  //-------------------------------------------------------
  //  resourceIdToSubs_ is a structure for accessing
  //  a resourcesId's substitution rules.
  //
  //  For example:
  //  resourceIdToSubs_["skillSet"]["javaProg"] is a set of skills
  //  that can substitute for a javaProg.
  //  The returned set might contain C++Prog and AdaProg.
  //
  //  resourceIdToSubs_["skillSet"]["javaProg"]["C++Prog"] is an RCPbaseSubs
  //  which contains among other things to cost and leadTime 
  //  when a C++Prog substitutes for a javaProg.
  //-------------------------------------------------------
  typedef std::map<std::string,RCPmapMapStringToSubs> RCPmapResoruceIdToSubs;
  typedef std::map<std::string,RCPmapMapStringToSubs>::const_iterator RCPmapResoruceIdToSubsConstIterator;
  RCPmapResoruceIdToSubs resourceIdToSubs_;

  //-------------------------------------------------------
  //  resourceIdToResourceNames_ is a structure for quickly accessing
  //  a list of resources that have a particular resourceIdValue.
  //  The structure is created when resources are added to the rcpProblem.
  //  The structure is used when determining what subBomEntries should be
  //  added based on substitution and matching rules.
  //
  //  An example usage is the following:
  //  RCPcollectionOfStrings r = resourceIdToResourceNames_["skillSet"]["javaProg"];
  //  r is a collection resource names that have javaProg as the skillSet.
  //-------------------------------------------------------
  typedef std::set<std::string>::const_iterator RCPcollectionOfStringsConstIterator;
  typedef std::map<std::string,RCPcollectionOfStrings> RCPmapResouceIdValueToResources;
  std::map<std::string,RCPmapResouceIdValueToResources> resourceIdToResourceNames_; 
  
  std::string algorithmName_;
  std::string problemName_;
  std::string formatName_;
};


#endif
@


1.146
log
@added engagement families for the "portfolio" option.
@
text
@d286 4
@


1.145
log
@look for "panic"
@
text
@d41 2
d58 1
d389 1
d431 1
@


1.144
log
@changes for nasco multiple skills
@
text
@d56 1
a56 1

@


1.143
log
@checked in some NASCO specific code
@
text
@d36 1
d43 2
d113 2
d133 6
d154 1
d176 1
d191 1
d210 1
a210 1
  void updateEngagementBom(const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues, int period,float quantity);
a293 1
  void priorityNASCO();
d408 1
d427 4
@


1.142
log
@changes for deal hub example (demandengagement format)
@
text
@d280 1
@


1.141
log
@getting the flex mix stuff working. Seems to be pretty close to correct
@
text
@d41 3
a43 1

d129 1
d148 1
d165 1
d183 1
d196 1
a196 1

d275 1
d277 1
@


1.140
log
@many changes to support the "simple" flexmix model. Doesn't work yet.
@
text
@d108 1
d127 2
a128 1
  void addFlexibleResource(const std::vector<std::string> &resourceIdentifierValues, bool isFlexResource, bool isDemandedResource, std::string engagementName);
d185 1
a185 1

d206 1
d237 3
d264 1
d310 1
d347 1
@


1.139
log
@attach acquire as a substitute for each demanded resource
@
text
@d116 1
a116 1
  void addAlternateResource(std::vector<std::string> skillList, int skillSetPosition,  RCPvectorString originalResource,  std::vector<float> supplyAlternate);
d126 1
a126 2
  void addFlexibleResource(const std::vector<std::string> &resourceIdentifierValues);
  void addFlexibleResourceAcquisition(const std::vector<std::string> &resourceIdentifierValues);
d138 2
d142 1
d171 2
d175 1
d261 1
@


1.138
log
@fixed up some errors for the flex mix; adding separate engagements for each
flex group
@
text
@d126 2
a127 1
  //void addFlexibleResource(const std::vector<std::string> &resourceIdentifierValues);
d358 1
@


1.137
log
@supporting flex mix
@
text
@d359 1
@


1.136
log
@flexible mix groups. Beginning changes
@
text
@d127 1
a127 1

@


1.135
log
@skeleton for flexible mix changes
@
text
@d116 1
a116 1
  void addAlternateResource(RCPvectorString alternateResource, RCPvectorString originalResource, std::vector<float> supplyAlternate);
d126 1
a126 1
  void addFlexibleResource(const std::vector<std::string> &resourceIdentifierValues);
@


1.134
log
@Added quantity to the engagement file.  The BOM or demand file is now more like a description of the offering.  Updated the reporting in engagementO.csv.
@
text
@d111 4
d116 2
d126 1
d157 1
@


1.133
log
@Fixed some more declarations.
@
text
@d47 1
d57 1
d62 1
@


1.132
log
@Fixed a declaration.
@
text
@d349 2
a350 2
  std::string RCPproblem::scrapResourceName(const std::vector<std::string> &resourceIdentifierValues )const;
  std::string RCPproblem::enableScrapResourceName(const std::vector<std::string> &resourceIdentifierValues )const;
d354 1
a354 1
  static std::string RCPproblem::getEnableScrapFromWorkingName(const std::string &workingName);
@


1.131
log
@added some methods for extracting pegging information to rcpProblem; also added more tests to unitTest to check pegging
@
text
@d74 5
a78 5
void RCPproblem::getEngagementPeggedQuantitiesFromSubstitution(const std::string &engName, 
                                                               int period,
                                                               std::vector<RCPvectorString> & resources,
                                                               std::vector<float> &quantities,
                                                               std::vector<RCPvectorString> & subResources) const;
d85 5
a89 5
void RCPproblem::getEngagementPeggedQuantitiesFromSubstitution(const std::string &engName, 
                                                               int period,
                                                               RCPvectorString & resources,
                                                               std::vector<float> &quantities,
                                                               std::vector<RCPvectorString> & subResources) const;
@


1.130
log
@Added pegging reports and methods for getting results out of the engagementAppData.
@
text
@d79 11
@


1.129
log
@Pegging is implemented for GapGlut2 (03Dec) model.
@
text
@d66 13
@


1.128
log
@remove "duration" from engagement files, along with "engagement location". Also, implement month/year format for engagement start times.
@
text
@d226 1
d230 1
@


1.127
log
@gapGlut for 03Dec
@
text
@d43 1
a43 1
  void setEngagementDuration   (const std::string & engagementName, int startPeriod );
a45 1
  void setEngagementLocation(const std::string & engagementName, const std::string & location);
d52 1
a52 1
  int getEngagementDuration(const std::string & engagementName)const;
a54 1
  std::string getEngagementLocation(const std::string & engagementName)const;
d240 1
a240 1
  // Methods for handling jobRole, skill, location, lob, and source substitution in a common way
@


1.126
log
@removed unused methods
@
text
@d224 1
@


1.125
log
@Modifed operator() used for sorting resourceIds by priority
@
text
@a89 3
  //Demand Type methods
  void setDemandTypePriority(const std::string &demandType, int priority);
  int  getDemandTypePriority(const std::string &demandType)const;
@


1.124
log
@populate.cpp:  added newline at the end of the file

rcpProblem.cpp:  Added some new structure to handle the sorting layer;
modified the sorting test case

rcpProblem.h:  modified the comparison operator for the sorting of the id
priorities to handle ids that default to zero.
@
text
@d21 1
@


1.123
log
@Added method to get list of ResourceIdentifiers sorted by priority.
std::vector<std::string> getResourceIdentifiersSortedByPriority() const;
@
text
@d21 2
d66 2
@


1.122
log
@folding together original "engagement" oriented files with new ER5 files
@
text
@d11 16
d314 2
@


1.121
log
@more changes to support demandType
@
text
@d28 1
d38 1
@


1.120
log
@support for handling demandType and demandTypePriority
@
text
@d294 1
a294 1
  
@


1.119
log
@Implemented the reasource action leadtime notification model and updated some unitTest cases to reflect this change.  In earlier versions, although we read in the leadtime parameter, the optimization model didn't implement the leadtime and set it to zero.
@
text
@d66 4
d325 1
@


1.118
log
@removed some extraneous things
@
text
@d119 1
a119 1

d298 2
d302 2
@


1.117
log
@fixed timing issues
@
text
@d16 1
a16 1
  void setTimer(RcpOptTimer &timer);
@


1.116
log
@adding timing capability
@
text
@d15 2
a16 3
  
  void setTimer (RcpOptTimer timer);
  RcpOptTimer getTimer();
@


1.115
log
@priorityGapGlut1 now works off the multiple demands that get created, one for each resource, in populate.  Turn off the definition of MULTIPLEENGAGEMENTS at the top of rcpProblem.cpp and populate.cpp to get back to the old approach of one engagement.
@
text
@d8 1
d15 3
d174 1
d195 1
a195 1

@


1.114
log
@New file:  resourceIdPriorityFile.h  defines a new input file format for resource identifier priorities
and added code to read in this file in populate

Changed the spelling of ...Identifer... to ...Identifier...

Modified priorityGapGlut1(), but this is not invoked yet.
@
text
@d198 4
d296 1
@


1.113
log
@added methods
void setResourceIdentifierSubstitutePriority(const std::string & identifierName, int priority );
int getResourceIdentifierSubstitutePriority(const std::string & identifierName )const;
@
text
@d59 1
a59 1
  bool resourceIdentiferNameExists( const std::string & name ) const;
d61 2
a62 2
  void setResourceIdentifierSubstitutePriority(const std::string & identifierName, int priority );
  int getResourceIdentifierSubstitutePriority(const std::string & identifierName )const;
d94 1
a94 1
  //         j=[0,numberOfResourceIdentiferNames]
d307 1
a307 1
  std::map<std::string,int> mapResourceIdentiferNameToSubsPriority_;
@


1.112
log
@added method
bool resourceIdentiferNameExists( const std::string & name ) const
@
text
@d61 3
d307 1
a307 1
  std::map<std::string,int> mapResourceIdentiferNameToIndex_;
@


1.111
log
@Made changes to gapGlut and resourceAction to make the RCP code more re-entrant.
@
text
@d59 1
@


1.110
log
@All references to gapGlut04Feb and resourceAction04Feb have been renamed to gapGlut and resourceAction.
@
text
@d260 1
a260 1
  void presolveForGapGlut();
d270 3
@


1.109
log
@Added postsolve which removes substitute arcs added by presolve.
@
text
@a152 2
  void gapGlut04Feb();
  void resourceAction04Feb();
@


1.108
log
@Added priorityGapGlut1() which computes gap/gluts according to a priority scheme.  It's not called by anything but you can look for $$$$ in the code and change priorityGapGlut() to priorityGapGlut1() to call it.

Also I cleaned up some stuff in rcpOpt.cpp.
@
text
@d217 14
a230 1
  void addSubsArcsToWitModel04Feb();
d258 4
a261 2
  // presolve
  void presolve();
a262 1
  void presolve04Feb();
d265 7
@


1.107
log
@remove unused function addSubsArcsToWitModel
@
text
@d192 1
@


1.106
log
@adding support for priority substitution on bom arcs
@
text
@a215 1
  void addSubsArcsToWitModel();
@


1.105
log
@Added priorityResourceAction capability.  Fixed a problem in resourceAppData where I was writing the wrong value to workingQuantity.
@
text
@d140 2
a141 1
    
d146 1
a146 1
  
@


1.104
log
@ifdef'ed implemtation and prototype of setEngagementReasonableReward.
ifdef'ed out all references to setResourceReasonableReleaseCost.
It was only used in unitTest, not in populate.
@
text
@d108 1
@


1.103
log
@Implemented the functionality of setEngagementReasonableReward using RCPproblem public methods in populate.
@
text
@d40 1
d42 1
d80 2
a81 1
  void setBenchResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float supplyQuantity); 
d83 1
@


1.102
log
@removed prototype of remaining old style methods.
(there were not implementations of these methods)
@
text
@d35 2
d39 1
a39 1
 
d273 1
d279 2
@


1.101
log
@reorgainizing up rcpProblem header file
@
text
@a256 2

 
d258 2
a259 2


a260 16
  std::string resourceIdentifierValueFromResourceName(const std::string &baseResourceName, int which) const;
  static std::string jobRoleFromResourceName(const std::string & baseResourceName);
  static std::string skillSetFromResourceName(const std::string & baseResourceName);
  static std::string LOBFromResourceName(const std::string & baseResourceName);
  static std::string sourceFromResourceName(const std::string & baseResourceName);
  static std::string locationFromResourceName(const std::string & baseResourceName);
  static std::string baseNameFromWorkingResourceName(const std::string & workingName);

  static std::string regionFromResourceName(const std::string & baseResourceName);
  static std::string countryFromResourceName(const std::string & baseResourceName);
  static std::string cityFromResourceName(const std::string & baseResourceName);
  static std::string reportingUnitFromResourceName(const std::string & baseResourceName);
  static std::string bandFromResourceName(const std::string & baseResourceName);
  static std::string globalFromResourceName(const std::string & baseResourceName);
  static std::string competencyFromResourceName(const std::string & baseResourceName);
  static std::string industryFromResourceName(const std::string & baseResourceName);
d262 1
a262 2
  // bom Names  
  
@


1.100
log
@modifed some member data items to be handled in constructors.
@
text
@d19 1
a20 1
  void setEngagementStartPeriod(const std::string & engagementName, int startPeriod );
d23 1
d26 1
a26 1
 
d28 1
a28 2
  void getEngagementNames( std::vector<std::string> & engagementNames )const;
  bool getEngagementExecuted(const std::string & engagementName)const;
a29 2
  int getEngagementRequestedStartPeriod(const std::string & engagementName)const;
  int getEngagementStartPeriod(const std::string & engagementName)const;
d32 1
d35 5
a39 1
  
d54 1
a54 4
  const RCPvectorString & getResourceIdentifierNames() const;
  //int getNumberResourceIdentifiers() const;
  //std::string getResourceIdentifierName(int which)const;

a59 12
  void setResourceMrpQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float mrpGrossQuantity);
  void setResourceGapQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float mrpGrossQuantity);
  void setResourceGlutQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float mrpGrossQuantity);
  std::vector<float> getResourceBenchQuantity(const std::vector<std::string> &resourceAttributeVector)const;
  void setBenchResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float supplyQuantity);
  //void setWorkingResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
  void setResourceAcquireTime(const std::vector<std::string> &resourceIdentifierValues, float acquireTime);
  void setResourceAcquireCost(const std::vector<std::string>&resourceIdentifierValues, float acquireCost);
  void setResourceReleaseTime(const std::vector<std::string>&resourceIdentifierValues, float releaseTime);
  void setResourceReleaseCost(const std::vector<std::string> &resourceIdentifierValues, float releaseCost);
  void setResourceFixedCost(const std::vector<std::string> &resourceIdentifierValues, int period, float fixedCost);
  bool resourceExists    (const std::vector<std::string> &resourceIdentifierValues)const;
d61 4
a64 3
  
  //void setResourceAcquireCost(const std::vector<std::string> &resourceIdentifierValues, float acquireCost);
  //void setResourceReleaseCost(const std::vector<std::string> &resourceIdentifierValues, float releaseCost);
a65 2
  void setResourceWorkingQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float workingQuantity);
  void setResourceReleaseQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float releaseQuantity);
d68 7
a74 1
 
d76 2
a77 2

  void setResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues, int period, float supplyQty);
d86 6
d93 2
a94 1
  //void getResourceNames( std::vector<std::string> & jobRoles, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & sources, std::vector<std::string> & locNames )const;
a95 2
  std::vector<float> getResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getResourceMrpQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
d98 3
a100 1
  //std::vector<float> getResourceSupplyQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
a101 45
  std::vector<float> getResourceAcquireQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  //std::vector<float> getResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  //std::vector<float> getResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceReleaseQuantity(const std::vector<std::string> &resourceIdentifierValues) const;
  std::vector<float> getOptimalBenchQuantity(const std::vector<std::string> &resourceIdentifierValues) const;
 
 
 #if 0
  void getResourceNames( std::vector<std::string> & jobRoles, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & sources, std::vector<std::string> & locNames )const;
  std::vector<float> getResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
  std::vector<float> getResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  //  std::vector<float> getResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  //std::vector<float> getResourceAcquireQuantity(const std::vector<std::string> &resourceIdentifierValues)const;
  std::vector<float> getResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getOptimalWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getOptimalBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  void getResourceNames( std::vector<std::string> & jobRoles, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & sources, std::vector<std::string> & regions, std::vector<std::string> & countries, std::vector<std::string> & cities, std::vector<std::string> &reportingUnits, std::vector<std::string> &bands, std::vector<std::string> & globals, std::vector<std::string> & compentencies, std::vector<std::string> &industries )const;
  std::vector<float> getResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &compentency, const std::string &industry)const;
  //  std::vector<float> getResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getResourceMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getResourceWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;

  std::vector<float> getResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getOptimalWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry)const;
  std::vector<float> getOptimalBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
 #endif 
 

 
  float getResourceAcquireTime(const std::vector<std::string> & resourceIdentifierValues) const;
  float getResourceAcquireCost(const std::vector<std::string> & resourceIdentifierValues) const;
  float getResourceReleaseTime(const std::vector<std::string> & resourceIdentifierValues) const;
  float getResourceReleaseCost(const std::vector<std::string> & resourceIdentifierValues) const;
  
a102 13
#if 0
  float getResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & location) const;
  float getResourceAcquireCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & location) const;
  float getResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & location) const;
  float getResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & location) const;

  float getResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry) const;
  float getResourceAcquireCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry) const;
  float getResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry) const;
  float getResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry) const;
 #endif
 
 
d104 1
a104 19
  //std::vector<float> getResourceStockQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry)const;
  void setResourceReasonableReleaseCost(const std::vector<std::string> &resourceAttributeValuesc);
  //void setEngagementReasonableReward(const std::string & engagementName);

  void setEngagementReasonableReward(const std::string & engagementName);

#if 0
  std::vector<float> getResourceMRPGrossQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
  //  std::vector<float> getResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
  //  std::vector<float> getResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
  std::vector<float> getResourceStockQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry)const;
  //void setResourceReasonableReleaseCost(const std::string & jobRole,const std::string & skillSet,const std::string & LOB,const std::string & source,const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
  
  std::vector<float> getResourceMRPGrossQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  //  std::vector<float> getResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  //  std::vector<float> getResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceStockQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  //void setResourceReasonableReleaseCost(const std::string & jobRole,const std::string & skillSet,const std::string & LOB,const std::string & source,const std::string & locName);
#endif
a106 7
  void saveMrpResults();
  void saveOptimalResourceActionResults();
  void priorityGapGlut();
  void optimalGapGlut();
  void priorityResourceAction();
  void optimalResourceAction();

d110 1
a110 8
  void addBom(const std::string & engagementName,  
              const std::vector<std::string> &resourceIdentifierValues);

#if 0
  void addBom(const std::string & engagementName,  
              const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName);
  void addBom(const std::string & engagementName,  
              const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry);
d112 5
a116 1
  void setBomUsageQuantity(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName,
d118 3
a120 21
  void setBomJobRoleMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int match);
  void setBomSkillSetMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int match);
  void setBomLocationMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int match);
  void setBomLobMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int match);
  void setBomSourceMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int match);
  void setBomJobRoleSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int sub);
  void setBomSkillSetSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int sub);
  void setBomLocationSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int sub);
  void setBomLobSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int sub);
  void setBomSourceSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, 
    int sub);
 #endif
d122 1
a122 84
 
  void setBomUsageQuantity(const std::string & engagementName, const std::vector<std::string> &resourceIdentifierValues,
    int period, float usageQuantity);
#if 0
  void setBomUsageQuantity(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry,
    int period, float usageQuantity);
  void setBomJobRoleMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomSkillSetMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomRegionMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
   void setBomCountryMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomCityMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomReportingUnitMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomBandMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomGlobalMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomCompetencyMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomIndustryMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomLobMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomSourceMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int match);
  void setBomJobRoleSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomSkillSetSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomRegionSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomCountrySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomCitySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomReportingUnitSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomBandSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomGlobalSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomCompetencySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomIndustrySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomLobSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
  void setBomSourceSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
    int sub);
#endif  
  
  bool bomExists(const std::string & engagementName,  
                 const std::vector<std::string> &resourceIdentifierValues)const; 

#if 0
  bool bomExists(const std::string & engagementName,  
                 const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName)const;
  bool bomExists(const std::string & engagementName,  
                 const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string &comptency, const std::string &industry)const;

#endif
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<RCPvectorString> & names )const;


#if 0
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<std::string> & jobRoles, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & sources, std::vector<std::string> & resourceLocNames )const;
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<std::string> & jobRoles, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & sources, std::vector<std::string> & regions, std::vector<std::string> & countries, std::vector<std::string> & cities, std::vector<std::string> & reportingUnits, std::vector<std::string> & bands, std::vector<std::string> & globals, std::vector<std::string> & competencies, std::vector<std::string> & industries )const;
#endif
  std::vector<float> getBomUsageQuantity(const std::string & engagementName,  
                                         const std::vector<std::string> &resourceIdentifierValues)const;
  float getBomUsageQuantity(const std::string & engagementName,  
                            const std::vector<std::string> &resourceIdentifierValues,int period)const;

#if 0
  std::vector<float> getBomUsageQuantity(const std::string & engagementName,  
                                         const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName)const;
  float getBomUsageQuantity(const std::string & engagementName,  
                            const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName,int period)const;
#endif    
d124 3
a126 45
  void setBomSub(const std::string & engName, const std::vector<std::string> &resourceIdentifierValues, int period, const std::string & resourceIdName , int sub);   
  int  getBomMatch(const std::string & engName, const std::vector<std::string> &resourceIdentifierValues, int period, const std::string & resourceIdName ) const;  
  void setBomMatch(const std::string & engName, const std::vector<std::string> &resourceIdentifierValues, int period, const std::string & resourceIdName , int match);


#if 0
  int getBomJobRoleMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);
  int getBomSkillSetMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);
  int getBomLocationMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);
  int getBomLobMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);
  int getBomSourceMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);
  int getBomJobRoleSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);
  int getBomSkillSetSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);
  int getBomLocationSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);
  int getBomLobSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);
  int getBomSourceSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period);


  int getBomJobRoleMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomSkillSetMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomRegionMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCountryMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCityMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomReportingUnitMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomBandMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomGlobalMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCompetencyMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomIndustryMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomLobMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomSourceMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomJobRoleSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomSkillSetSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomRegionSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCountrySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCitySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomReportingUnitSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomBandSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomGlobalSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCompetencySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomIndustrySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomLobSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomSourceSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period);
#endif

  
d134 1
a135 1
  void getSubsNames(const std::string & resourceIdName, std::vector<std::string> & froms, std::vector<std::string> & tos)const;
a138 13
    

  //methods for setting and getting the simple match flags
  //void setJobRoleMatch(int m);
  //void setSkillSetMatch(int m);
  //void setLOBMatch(int m);
  //void setSourceMatch(int m);
  //void setResourceLocMatch(int m);
  //int getJobRoleMatch();
  //int getSkillSetMatch();
  //int getLOBMatch();
  //int getSourceMatch();
  //int getResourceLocMatch();
a142 2
  

d181 7
a195 45
  // Methods that do the common part of setting and getting bom substitute values in app data
#if 0
  void setBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period,
    int sub,
    void (RCPbomAppData::*setSubFunc) (int) );
  int  getBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period,
    int (RCPbomAppData::*getSubFunc) () const ) const;
   
  void setBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period,
    int sub,
    void (RCPbomAppData::*setSubFunc) (int) );
  int  getBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period,
    int (RCPbomAppData::*getSubFunc) () const ) const;
#endif

  //int  getBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period,
    //const std::string & resourceIdName ) const;


#if 0
  void setBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period,
    int sub,
    const std::string & resourceIdName );
  int  getBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period,
    const std::string & resourceIdName ) const;

  void setBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period,
    int sub,
    const std::string & resourceIdName  );
  int  getBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period,
    const std::string & resourceIdName  ) const;
  

  void setBomMatch(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period,
    int sub,
    const std::string & resourceIdName );
  int  getBomMatch(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period,
    const std::string & resourceIdName ) const;

  void setBomMatch(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period,
    int sub,
    const std::string & resourceIdName  );
  int  getBomMatch(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period,
    const std::string & resourceIdName  ) const;
#endif
d236 1
a236 10
#if 0
  void getSubsResources( 
    const std::string & engagementName, 
    const std::string & jobRole,
    const std::string & skillSet,
    const std::string & location,
    const std::string & lob,
    const std::string & source,
    RCPcollectionOfStrings & reVal)const;
#endif
d257 1
a257 16
  //DLG non static above in order to call things like getResourceIdentifier
 
 #if 0
  static std::string acquireResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
  std::string benchResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName) const;
  static std::string enableResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
  static std::string workingResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
  static std::string enableExternalResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
  static std::string baseResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
  static std::string acquireResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string benchResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string enableResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string workingResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string enableExternalResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string baseResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
 #endif
a281 3
#if 0
  static std::string bomName(const std::string & engagementName,const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &resourceLocName);
#endif
a282 8
 
 #if 0
  static std::string resourceFromBomName(const std::string & bomName);
  static std::string skillSetFromBomName(const std::string & bomName);
  static std::string LOBFromBomName(const std::string & bomName);
  static std::string sourceFromBomName(const std::string & bomName);
  static std::string resourceLocFromBomName(const std::string & bomName);
#endif
a284 31
  
#if 0
  static std::string bomNameLong(const std::string & engagementName,const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
  std::string engagementFromLongBomName(const std::string & bomName)const;
  static std::string resourceFromLongBomName(const std::string & bomName);
  static std::string skillSetFromLongBomName(const std::string & bomName);
  static std::string LOBFromLongBomName(const std::string & bomName);
  static std::string sourceFromLongBomName(const std::string & bomName);
  static std::string regionFromLongBomName(const std::string & bomName);
  static std::string countryFromLongBomName(const std::string & bomName);
  static std::string cityFromLongBomName(const std::string & bomName);
  static std::string reportingUnitFromLongBomName(const std::string & bomName);
  static std::string bandFromLongBomName(const std::string & bomName);
  static std::string globalFromLongBomName(const std::string & bomName);
  static std::string competencyFromLongBomName(const std::string & bomName);
  static std::string industryFromLongBomName(const std::string & bomName);
  static std::string jobRoleFromLongResourceName(const std::string & bomName);
  static std::string skillSetFromLongResourceName(const std::string & bomName);
  static std::string LOBFromLongResourceName(const std::string & bomName);
  static std::string sourceFromLongResourceName(const std::string & bomName);
  static std::string regionFromLongResourceName(const std::string & bomName);
  static std::string countryFromLongResourceName(const std::string & bomName);
  static std::string cityFromLongResourceName(const std::string & bomName);
  static std::string reportingUnitFromLongResourceName(const std::string & bomName);
  static std::string bandFromLongResourceName(const std::string & bomName);
  static std::string globalFromLongResourceName(const std::string & bomName);
  static std::string competencyFromLongResourceName(const std::string & bomName);
  static std::string industryFromLongResourceName(const std::string & bomName);
#endif 
  // skillSubs Names  
  //static std::string skillSubsName(const std::string & fromSkill,const std::string & toSkill);
a296 16
  typedef std::map<std::string,RCPmapMapStringToSubs> RCPmapResoruceIdToSubs;
  typedef std::map<std::string,RCPmapMapStringToSubs>::const_iterator RCPmapResoruceIdToSubsConstIterator;
  //RCPmapMapStringToSubs jobRoleSubs_;
  //RCPmapMapStringToSubs skillSubs_;
  //RCPmapMapStringToSubs locationSubs_;
  //RCPmapMapStringToSubs regionSubs_;
  //RCPmapMapStringToSubs countrySubs_;
  //RCPmapMapStringToSubs citySubs_;
  //RCPmapMapStringToSubs reportingUnitSubs_;
  //CPmapMapStringToSubs bandSubs_;
  //RCPmapMapStringToSubs globalSubs_;
  //RCPmapMapStringToSubs competencySubs_;
  //RCPmapMapStringToSubs industrySubs_;
  //RCPmapMapStringToSubs lobSubs_;
  //RCPmapMapStringToSubs sourceSubs_;

d310 2
a313 16
  typedef std::set<std::string>::const_iterator RCPcollectionOfStringsConstIterator;
  typedef std::map<std::string,RCPcollectionOfStrings> RCPmapResouceIdValueToResources;
  //std::map<std::string,RCPcollectionOfStrings> jobToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> skillToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> lobToResourceNames_;  
  //std::map<std::string,RCPcollectionOfStrings> sourceToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> locToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> regionToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> countryToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> cityToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> reportingUnitToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> globalToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> competencyToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> industryToResourceNames_; 
  //std::map<std::string,RCPcollectionOfStrings> bandToResourceNames_; 

d325 2
a326 1
  //
@


1.99
log
@changed parameter names
@
text
@a423 3
  std::string algorithmName;
  std::string problemName;
  std::string formatName;
d705 4
@


1.98
log
@removed setResourceIdentifierNames
and added addResourceIdentifierName
@
text
@d59 4
a62 4
  void addResource(const std::vector<std::string> &resourceAttributeValues);
  void setResourceMrpQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float mrpGrossQuantity);
  void setResourceGapQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float mrpGrossQuantity);
  void setResourceGlutQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float mrpGrossQuantity);
d64 1
a64 1
  void setBenchResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float supplyQuantity);
d66 6
a71 6
  void setResourceAcquireTime(const std::vector<std::string> &resourceAttributeValues, float acquireTime);
  void setResourceAcquireCost(const std::vector<std::string>&resourceAttributeValues, float acquireCost);
  void setResourceReleaseTime(const std::vector<std::string>&resourceAttributeValues, float releaseTime);
  void setResourceReleaseCost(const std::vector<std::string> &resourceAttributeValues, float releaseCost);
  void setResourceFixedCost(const std::vector<std::string> &resourceAttributeValues, int period, float fixedCost);
  bool resourceExists    (const std::vector<std::string> &resourceAttributeValues)const;
d74 2
a75 2
  //void setResourceAcquireCost(const std::vector<std::string> &resourceAttributeValues, float acquireCost);
  //void setResourceReleaseCost(const std::vector<std::string> &resourceAttributeValues, float releaseCost);
d77 4
a80 4
  void setResourceWorkingQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float workingQuantity);
  void setResourceReleaseQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float releaseQuantity);
  void setResourceAcquireQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float acquireQuantity);
  void setResourceBenchQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float benchQuantity);
d84 1
a84 1
  void setResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float supplyQty);
d95 8
a102 8
  std::vector<float> getResourceFixedCost(const std::vector<std::string> &resourceAttributeValues) const;
  std::vector<float> getResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  std::vector<float> getResourceMrpQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  std::vector<float> getResourceGapQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  std::vector<float> getResourceGlutQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  //std::vector<float> getResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  std::vector<float> getResourceWorkingQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  std::vector<float> getResourceAcquireQuantity(const std::vector<std::string> &resourceAttributeValues)const;
d105 2
a106 2
  std::vector<float> getResourceReleaseQuantity(const std::vector<std::string> &resourceAttributeValues) const;
  std::vector<float> getOptimalBenchQuantity(const std::vector<std::string> &resourceAttributeValues) const;
d119 1
a119 1
  //std::vector<float> getResourceAcquireQuantity(const std::vector<std::string> &resourceAttributeValues)const;
d142 4
a145 4
  float getResourceAcquireTime(const std::vector<std::string> & resourceAttributeValues) const;
  float getResourceAcquireCost(const std::vector<std::string> & resourceAttributeValues) const;
  float getResourceReleaseTime(const std::vector<std::string> & resourceAttributeValues) const;
  float getResourceReleaseCost(const std::vector<std::string> & resourceAttributeValues) const;
d161 1
a161 1
  std::vector<float> getResourceMRPGrossQuantity(const std::vector<std::string> &resourceAttributeValues)const;
d194 1
a194 1
              const std::vector<std::string> &resourceAttributeValues);
d227 1
a227 1
  void setBomUsageQuantity(const std::string & engagementName, const std::vector<std::string> &resourceAttributeValues,
d283 1
a283 1
                 const std::vector<std::string> &resourceAttributeValues)const; 
d300 1
a300 1
                                         const std::vector<std::string> &resourceAttributeValues)const;
d302 1
a302 1
                            const std::vector<std::string> &resourceAttributeValues,int period)const;
d310 4
a313 4
  int  getBomSub(const std::string & engName, const std::vector<std::string> &resourceAttributeValues, int period, const std::string & resourceIdName ) const;  
  void setBomSub(const std::string & engName, const std::vector<std::string> &resourceAttributeValues, int period, const std::string & resourceIdName , int sub);   
  int  getBomMatch(const std::string & engName, const std::vector<std::string> &resourceAttributeValues, int period, const std::string & resourceIdName ) const;  
  void setBomMatch(const std::string & engName, const std::vector<std::string> &resourceAttributeValues, int period, const std::string & resourceIdName , int match);
d519 1
a519 1
    const RCPvectorString & resourceAttributeValues,
d546 5
a550 5
  std::string acquireResourceOperationName(const std::vector<std::string> &resourceAttributeValues)const;
  std::string benchResourceName(const std::vector<std::string> &resourceAttributeValues)const;
  std::string enableResourceOperationName(const std::vector<std::string> &resourceAttributeValues)const;
  std::string workingResourceName(const std::vector<std::string> &resourceAttributeValues)const;
  std::string baseResourceName(const std::vector<std::string> &resourceAttributeValues)const;
d603 1
a603 1
  std::string bomName(const std::string & engagementName, const std::vector<std::string> &resourceAttributeValues)const;
@


1.97
log
@commented method prototypes that don't appear to have an implementation.
@
text
@d36 20
d86 7
a92 1

a139 11
 
  // Return list of names.
  // returned value names[i][j]
  //   where i=[0,numberOfResources]
  //         j=[0,numberOfResourceIdentifers]
  void getResourceNames( std::vector<RCPvectorString> & names )const;
  int getNumberResourceIdentifiers() const;

  void RCPproblem::setResourceIdentifierNames(const RCPvectorString & identifierNames);
  const RCPvectorString & getResourceIdentifierNames() const;
  std::string getResourceIdentifierName(int which)const;
@


1.96
log
@Removed remaining methods:
add*Subs
set*SubsCost
set*SubsLeadTime
*SubsExists
get*SubsNames
get*SubsCost
@
text
@d356 10
a365 10
  void setJobRoleMatch(int m);
  void setSkillSetMatch(int m);
  void setLOBMatch(int m);
  void setSourceMatch(int m);
  void setResourceLocMatch(int m);
  int getJobRoleMatch();
  int getSkillSetMatch();
  int getLOBMatch();
  int getSourceMatch();
  int getResourceLocMatch();
@


1.95
log
@Removed methods:
addSkillSubs
setSkillSubsCost
setSkillSubsLeadTime
skillSubsExists
getSkillSubsNames
getSkillSubsCost
@
text
@a353 35
  //----------------------
  // Methods for location substitution.
  //----------------------
  void addLocationSubs(const std::string & fromLocation, const std::string & toLocation ); 
  void setLocationSubsCost(const std::string & fromLocation, const std::string & toLocation, float cost ); 
  void setLocationSubsLeadTime(const std::string & fromLocation, const std::string & toLocation, float leadTime ); 
  
  bool locationSubsExists(const std::string & fromLocation, const std::string & toLocation )const;
  void getLocationSubsNames( std::vector<std::string> & fromLocations, std::vector<std::string> & toLocations)const;
  float getLocationSubsCost(const std::string & fromLocation, const std::string & toLocation )const;
  float getLocationSubsLeadTime(const std::string & fromLocation, const std::string & toLocation )const;

  //----------------------
  // Methods for lob substitution.
  //----------------------
  void addLobSubs(const std::string & fromLob, const std::string & toLob ); 
  void setLobSubsCost(const std::string & fromLob, const std::string & toLob, float cost ); 
  void setLobSubsLeadTime(const std::string & fromLob, const std::string & toLob, float leadTime ); 
  
  bool lobSubsExists(const std::string & fromLob, const std::string & toLob )const;
  void getLobSubsNames( std::vector<std::string> & fromLobs, std::vector<std::string> & toLobs)const;
  float getLobSubsCost(const std::string & fromLob, const std::string & toLob )const;
  float getLobSubsLeadTime(const std::string & fromLob, const std::string & toLob )const;

  //----------------------
  // Methods for location substitution.
  //----------------------
  void addSourceSubs(const std::string & fromSource, const std::string & toSource ); 
  void setSourceSubsCost(const std::string & fromSource, const std::string & toSource, float cost ); 
  void setSourceSubsLeadTime(const std::string & fromSource, const std::string & toSource, float leadTime ); 
  
  bool sourceSubsExists(const std::string & fromSource, const std::string & toSource )const;
  void getSourceSubsNames( std::vector<std::string> & fromSources, std::vector<std::string> & toSources)const;
  float getSourceSubsCost(const std::string & fromSource, const std::string & toSource )const;
  float getSourceSubsLeadTime(const std::string & fromSource, const std::string & toSource )const;
@


1.94
log
@removed job role subs methods
@
text
@a352 19

  //----------------------
  // Methods for skill substitution.
  //----------------------
  void addSkillSubs(const std::string & fromSkill, const std::string & toSkill ); 
  void setSkillSubsCost(const std::string & fromSkill, const std::string & toSkill, float cost ); 
  void setSkillSubsLeadTime(const std::string & fromSkill, const std::string & toSkill, float leadTime ); 
  
  bool skillSubsExists(const std::string & fromSkill, const std::string & toSkill )const;
  void getSkillSubsNames( std::vector<std::string> & fromSkills, std::vector<std::string> & toSkills)const;
  float getSkillSubsCost(const std::string & fromSkill, const std::string & toSkill )const;
  float getSkillSubsLeadTime(const std::string & fromSkill, const std::string & toSkill )const;

  //void setBomSub(const std::string & engName, const std::vector<std::string> &resourceAttributeValues, int period,
  //  int sub,
  //  const std::string & resourceIdName );
  //void setBomMatch(const std::string & engName, const std::vector<std::string>&resourceAttributeValues, int period,
  //  int sub,
  //  const std::string & resourceIdName );
@


1.93
log
@Removed from populate references to
  addSkillSubs
  setSkillSubsCost
  setSkillSubsLeadTime
  addLocationSubs
  setLocationSubsCost
  setLocationSubsLeadTime
  etc
I believe populate is now just using the general methods
@
text
@d347 6
a352 12

  //----------------------
  // Methods for jobRole substitution.
  //----------------------
  void addJobRoleSubs(const std::string & fromJobRole, const std::string & toJobRole ); 
  void setJobRoleSubsCost(const std::string & fromJobRole, const std::string & toJobRole, float cost ); 
  void setJobRoleSubsLeadTime(const std::string & fromJobRole, const std::string & toJobRole, float leadTime ); 
  
  bool jobRoleSubsExists(const std::string & fromJobRole, const std::string & toJobRole )const;
  void getJobRoleSubsNames( std::vector<std::string> & fromJobRoles, std::vector<std::string> & toJobRoles)const;
  float getJobRoleSubsCost(const std::string & fromJobRole, const std::string & toJobRole )const;
  float getJobRoleSubsLeadTime(const std::string & fromJobRole, const std::string & toJobRole )const;
d365 1
a365 1
 
a526 5
  
  bool subsExists(const std::string & resourceIdName, const std::string & from, const std::string & toJobRole )const;
  void getSubsNames(const std::string & resourceIdName, std::vector<std::string> & froms, std::vector<std::string> & tos)const;
  float getSubsCost(const std::string & resourceIdName, const std::string & from, const std::string & to )const;
  float getSubsLeadTime(const std::string & resourceIdName, const std::string & from, const std::string & to )const;
@


1.92
log
@remove lots of old code calling old-style functions
@
text
@d340 8
a532 3
  void addSubs(const std::string & resourceIdName, const std::string & from, const std::string & to ); 
  void setSubsCost(const std::string & resourceIdName, const std::string & from, const std::string & to, float cost ); 
  void setSubsLeadTime(const std::string & resourceIdName, const std::string & from, const std::string & to, float leadTime ); 
@


1.91
log
@Removed commented method prototypes
@
text
@d80 4
a96 1
  std::vector<float> getOptimalBenchQuantity(const std::vector<std::string> &resourceAttributeValues) const;
d112 3
d132 2
d143 2
d151 3
a158 1
  void setEngagementReasonableReward(const std::string & engagementName);
d165 2
d180 2
d209 3
a211 1
    
d214 1
a214 1

d265 1
a265 1
  
d269 2
d275 2
d278 3
d283 1
a283 1

d289 1
a289 1

d294 1
a294 1
    
d300 2
d338 1
a338 1

d422 2
d491 2
d517 1
a517 1

d566 1
d575 1
a575 1

d597 2
d611 2
d615 1
d635 2
d638 4
a641 1
  static std::string engagementFromBomName(const std::string & bomName);
d647 2
a649 1
  std::string bomName(const std::string & engagementName, const std::vector<std::string> &resourceAttributeValues)const;
d651 1
d678 1
a678 1
 
@


1.90
log
@Removed old forms of:
  setResourceFixedCost
  resourceExists
@
text
@a65 12
  //void setResourceAcquireCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float acquireCost);
  //void setResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float releaseTime);
  //void setResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float releaseCost);
  //void setResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float fixedCost);
  //bool resourceExists    (const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;

  //void setResourceAcquireCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float acquireCost);
  //void setResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float releaseTime);
  //void setResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float releaseCost);
  //void setResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float fixedCost);
  //bool resourceExists    (const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
   
@


1.89
log
@Removed old forms of:
  setResourceReasonableReleaseCost
  setResourceAcquireCost
  setResourceReleaseTime
  setResourceReleaseCost
@
text
@d69 2
a70 2
  void setResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float fixedCost);
  bool resourceExists    (const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d75 2
a76 2
  void setResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float fixedCost);
  bool resourceExists    (const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
@


1.88
log
@removed commented lines from header file
@
text
@d66 3
a68 3
  void setResourceAcquireCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float acquireCost);
  void setResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float releaseTime);
  void setResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float releaseCost);
d72 3
a74 3
  void setResourceAcquireCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float acquireCost);
  void setResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float releaseTime);
  void setResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float releaseCost);
d157 1
a157 1
  void setResourceReasonableReleaseCost(const std::string & jobRole,const std::string & skillSet,const std::string & LOB,const std::string & source,const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
d164 1
a164 1
  void setResourceReasonableReleaseCost(const std::string & jobRole,const std::string & skillSet,const std::string & LOB,const std::string & source,const std::string & locName);
@


1.87
log
@Removed old forms of:
  setResourceGlutQuantity
  setBenchResourceSupplyQuantity
  setResourceAcquireTime
@
text
@a65 5
  //void setResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
  //void setResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
  //void setBenchResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
  //  void setWorkingResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
  //void setResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float acquireTime);
a71 6
  //void setResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float mrpGrossQuantity);
  //void setResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float mrpGrossQuantity);
  //void setBenchResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float supplyQuantity);
  //  void setWorkingResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float supplyQuantity);
  void setWorkingAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float acquireTime);
  //void setResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float acquireCost);
@


1.86
log
@Removed old forms of:
  setResourceGapQuantity
@
text
@d67 2
a68 2
  void setResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
  void setBenchResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
d70 1
a70 1
  void setResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float acquireTime);
d78 2
a79 2
  void setResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float mrpGrossQuantity);
  void setBenchResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float supplyQuantity);
d82 1
a82 1
  void setResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float acquireCost);
@


1.85
log
@Removed old forms of:
  setResourceReleaseQuantity,
  setResourceAcquireQuantity,
  setResourceBenchQuantity
@
text
@d66 1
a66 5
  //void setResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float releaseQuantity);
  //void setResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float acquireQuantity);
  //void setResourceBenchQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float benchQuantity);
  //void setResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float benchQuantity);
  void setResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
d77 1
a77 4
  //void setResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float releaseQuantity);
  //void setResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float acquireQuantity);
  //void setResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float acquireQuantity);
  void setResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float mrpGrossQuantity);
@


1.84
log
@Removed setResourceWorkingQuantity
@
text
@d66 2
a67 2
  void setResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float releaseQuantity);
  void setResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float acquireQuantity);
d69 1
a69 1
  void setResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float benchQuantity);
d81 3
a83 3
  void setResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float releaseQuantity);
  void setResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float acquireQuantity);
  void setResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float acquireQuantity);
@


1.83
log
@Removed dead code.
@
text
@a63 2
  //void addResource(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName);
  //void setResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
d65 1
a65 3
  //void setResourceMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
  //void setResourceWorkingQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float workingQuantity);
  void setResourceWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float workingQuantity);
a80 4
  //void addResource(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry);
  //void setResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float supplyQuantity);
  //void setResourceMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float mrpGrossQuantity);
  void setResourceWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float workingQuantity);
@


1.82
log
@Lots of changes to use new way of identifying resources
@
text
@d64 2
a65 2
  void addResource(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName);
  void setResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
d67 1
a67 1
  void setResourceMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
d85 3
a87 3
  void addResource(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string & reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry);
  void setResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float supplyQuantity);
  void setResourceMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float mrpGrossQuantity);
@


1.81
log
@Changed [sg]et[Gap,Glut]Quantity to [sg]etResource[Gap,Glut]ResourceQuantity
@
text
@d48 1
a48 1
  //void setResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float releaseTime);
d57 7
d68 1
a68 1
void setResourceWorkingQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float workingQuantity);
d72 1
a72 1
  void setResourceBenchQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float benchQuantity);
d114 1
a114 1
  //std::vector<float> getResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d127 1
a127 1
  std::vector<float> getResourceAcquireQuantity(const std::vector<std::string> &resourceAttributeValues)const;
d568 5
@


1.80
log
@Changed [sg]et{Attribute}Quantity to [sg]etResource{Attribute}Quantity
Saved the Optimal Resource Action plans to the appData
Fixed a method that was for Acquire;  it had been setting another attribute
@
text
@d40 4
a43 4
  //void setExogenousResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float supplyQuantity);
  void setMrpQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float mrpGrossQuantity);
  void setGapQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float mrpGrossQuantity);
  void setGlutQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float mrpGrossQuantity);
d60 9
a68 7
  void setMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
  void setWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float workingQuantity);
  void setReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float releaseQuantity);
  void setAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float acquireQuantity);
  void setBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float benchQuantity);
  void setGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
  void setGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
d80 7
a86 7
  void setMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float mrpGrossQuantity);
  void setWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float workingQuantity);
  void setReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float releaseQuantity);
  void setAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float acquireQuantity);
  void setBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float acquireQuantity);
  void setGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float mrpGrossQuantity);
  void setGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float mrpGrossQuantity);
d102 3
a104 4
  //std::vector<float> getExogenousResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  std::vector<float> getMrpQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  std::vector<float> getGapQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  std::vector<float> getGlutQuantity(const std::vector<std::string> &resourceAttributeValues)const;
d110 1
a110 1

d115 1
a115 1
  std::vector<float> getMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d120 3
a122 2
  std::vector<float> getGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d124 1
d130 1
a130 1
  std::vector<float> getMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
d133 1
d136 2
a137 2
  std::vector<float> getGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
a167 2
  std::vector<float> getResourceGapQuantity(const std::vector<std::string> &resourceAttributeValues)const;
  std::vector<float> getResourceGlutQuantity(const std::vector<std::string> &resourceAttributeValues)const;
d173 2
a174 2
  //  std::vector<float> getGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
  //  std::vector<float> getGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
d180 2
a181 2
  //  std::vector<float> getGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  //  std::vector<float> getGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
a588 2
  std::string enableExogenousResourceOperationName(const std::vector<std::string> &resourceAttributeValues)const;
  std::string exogenousResourceName(const std::vector<std::string> &resourceAttributeValues)const;
a595 1
  static std::string exogenousResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
a596 1

a601 1
  static std::string exogenousResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
@


1.79
log
@implemented several resource methods to work with resourceAttributeValues as parameter.
updated RCPproblem test to use these new methods.
@
text
@d115 4
a118 4
  std::vector<float> getWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
a121 1
  std::vector<float> getResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
a122 2
  std::vector<float> getResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  
d128 4
a131 4
  std::vector<float> getWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
a134 1
  std::vector<float> getResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
a135 2
  std::vector<float> getResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
  
@


1.78
log
@more updates for handling vector substitution and matching
@
text
@a8 2
#define JPF
#ifdef JPF
a9 1
#endif
d40 1
a40 1
  void setExogenousResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeValues, int period, float supplyQuantity);
d46 1
a46 1
  //void setResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float acquireTime);
d49 1
a49 1
  //void setResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float releaseCost);
d53 4
d94 3
a96 1
  
d98 3
a100 3
  //std::vector<float> getResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
  //std::vector<float> getResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getExogenousResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeValues)const;
d104 1
a104 1
  std::vector<float> getResourceSupplyQuantity(const std::vector<std::string> &resourceAttributeValues)const;
a141 1
#ifdef JPF
d144 2
a145 2
  //   where i=[0,numberOfResourceIdentifers]
  //         j=[0,numberOfResources]
a147 5
  void RCPproblem::setResourceIdentifiers(std::vector<std::string> *identifiers);
  std::string getResourceValue(const std::string &resourceName, int which)const;
  std::string getResourceIdentifier(int which)const;
  std::vector<std::string> *resourceIdentifiers;
#endif
d149 3
d153 5
d173 1
a173 1
  //void setResourceReasonableReleaseCost(const std::string & jobRole,const std::string & skillSet,const std::string & LOB,const std::string & source,const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
d293 7
d304 5
d372 6
a377 6
  void setBomSub(const std::string & engName, const std::vector<std::string> &resourceAttributeValues, int period,
    int sub,
    const std::string & resourceIdName );
  void setBomMatch(const std::string & engName, const std::vector<std::string>&resourceAttributeValues, int period,
    int sub,
    const std::string & resourceIdName );
a509 1
    
d598 1
a598 1
  static std::string benchResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
d614 2
d677 2
@


1.77
log
@more work on the substitute stuff for vectors
@
text
@d358 3
a491 3
  void setBomMatch(const std::string & engName, const std::vector<std::string>&resourceAttributeValues, int period,
    int sub,
    const std::string & resourceIdName );
@


1.76
log
@Added bench, working, acquire and release quantities to the app data of the bench and working resources.  Also cleaned up the merge conflicts.
@
text
@d354 5
a358 1

d473 4
a476 1
  
d488 4
@


1.75
log
@updated match.csv files for consistency in naming. Also added some
selftests for the new gnrl format files
@
text
@d57 2
a58 1
  void setExogenousResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
d60 4
d67 1
a67 1
  void setWorkingResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
d76 1
a76 1
  void setExogenousResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float supplyQuantity);
d78 4
d85 1
a85 1
  void setWorkingResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, int period, float supplyQuantity);
d99 3
a101 2
  //std::vector<float> getGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  //std::vector<float> getGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d110 1
a110 1
  std::vector<float> getExogenousResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d112 4
d118 1
a118 1
  std::vector<float> getResourceWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d120 1
a120 1
  std::vector<float> getResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d126 1
a126 1
  std::vector<float> getExogenousResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
d128 4
d134 1
a134 1
  std::vector<float> getResourceWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string & global, const std::string & competency, const std::string & industry)const;
d136 1
a136 1
  std::vector<float> getResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string & industry)const;
d172 2
a173 2
  std::vector<float> getResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
  std::vector<float> getResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
d179 2
a180 2
  std::vector<float> getResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d185 1
d189 1
d574 1
a574 1
  static std::string enableExogenousResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
d582 1
a582 1
  static std::string enableExogenousResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
@


1.74
log
@minor changes
@
text
@d260 1
a260 1
                 const std::vector<std::string> &resourceAttributeValues)const; //DLG had to make non-const
a592 1
  //DLG had to make the above non-static
@


1.73
log
@add gnrlBomFile.h, and a few other changes
@
text
@d260 1
a260 1
                 const std::vector<std::string> &resourceAttributeValues); //DLG had to make non-const
d592 1
a592 1
  std::string bomName(const std::string & engagementName, const std::vector<std::string> &resourceAttributeValues);
@


1.72
log
@massive commit to handle vector resource descriptions.
substitution for the "long" format is NOT yet implemented.
tests need to be updated
@
text
@d44 1
a44 1
  //void setMrpQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float mrpGrossQuantity);
d146 1
a146 1
  //std::vector<float> getResourceMRPGrossQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
@


1.71
log
@vector handling updaes
@
text
@d42 14
d85 12
d145 7
d175 2
d204 3
d260 2
d265 1
d542 8
d592 3
d596 1
a596 1
  static std::string engagementFromLongBomName(const std::string & bomName);
@


1.70
log
@support for vector handling
@
text
@d102 1
@


1.69
log
@added gnrl method for getting resourceNames
@
text
@d9 1
a9 1
//#define JPF
d101 4
a104 1
  int getNumberResources() const;
@


1.68
log
@changes tom bomAppData to use resourceIdName for sub
@
text
@d9 5
d95 10
@


1.67
log
@changes tom bomAppData to use resourceIdName for matching
@
text
@d376 1
a376 1
#if 1
d401 15
@


1.66
log
@modifed member data item that had been declared mutable so that this was no longer necessary.
The mutable modifier was removed.
@
text
@d376 1
d382 1
a382 1
  
d388 13
a400 1
   
@


1.65
log
@Modified private methods that were called with parameter  resourceIdToResourceNames_["string"],
to just pass "string" as the parameter.
@
text
@d536 1
d564 1
a564 1
  mutable RCPmapResoruceIdToSubs resourceIdToSubs_;
@


1.64
log
@Modified private methods that were called with parameter  resourceIdToSubs_["string"],
to just pass "string" as the parameter.
@
text
@a413 1
                                   const std::map<std::string,RCPcollectionOfStrings> & attributeToResourceNames,
@


1.63
log
@Modified private methods that were called with parameter  resourceIdToSubs_["string"],
to just pass "string" as the parameter.
@
text
@d399 1
a399 1
  void getSubsNames(const RCPmapMapStringToSubs & subCollection, std::vector<std::string> & froms, std::vector<std::string> & tos)const;
d413 1
a413 1
                                   const RCPmapMapStringToSubs & attributeSubs,
@


1.62
log
@RCPproblem member data:
  jobRoleSubs_
  skillSubs_
  locationSubs_
  regionSubs_
  countrySubs_
  citySubs_
  reportingUnitSubs_
  bandSubs_
  globalSubs_
  competencySubs_
  industrySubs_
  lobSubs_
  sourceSubs_
was replaced with
  resourceIdToSubs_

The current mapping to the prior structures from the one new is:
  resourceIdToSubs_["jobRoll"] is jobRoleSubs_
  resourceIdToSubs_["skillSet"] is skillSubs_
  resourceIdToSubs_["locName"] is locationSubs_
  resourceIdToSubs_["region"] is regionSubs_
  resourceIdToSubs_["country"] is countrySubs_
  resourceIdToSubs_["city"] is citySubs_
  resourceIdToSubs_["reportingUnit"] is reportingUnitSubs_
  resourceIdToSubs_["band"] is bandSubs_
  resourceIdToSubs_["global"] is globalSubs_
  resourceIdToSubs_["competency"] is competencySubs_
  resourceIdToSubs_["industry"] is industrySubs_
  resourceIdToSubs_["LOB"] is lobSubs_
  resourceIdToSubs_["source"] is sourceSubs_
@
text
@d394 3
a396 3
  void addSubs(RCPmapMapStringToSubs & subCollection, const std::string & from, const std::string & to ); 
  void setSubsCost(RCPmapMapStringToSubs & subCollection, const std::string & from, const std::string & to, float cost ); 
  void setSubsLeadTime(RCPmapMapStringToSubs & subCollection, const std::string & from, const std::string & to, float leadTime ); 
d398 1
a398 1
  bool subsExists(const RCPmapMapStringToSubs & subCollection, const std::string & from, const std::string & toJobRole )const;
d400 2
a401 2
  float getSubsCost(const RCPmapMapStringToSubs & subCollection, const std::string & from, const std::string & to )const;
  float getSubsLeadTime(const RCPmapMapStringToSubs & subCollection, const std::string & from, const std::string & to )const;
d404 2
a405 2
  RCPbaseSubs & getSubs(RCPmapMapStringToSubs & subCollection, const std::string & from, const std::string & to );
  const RCPbaseSubs & getSubs(const RCPmapMapStringToSubs & subCollection, const std::string & from, const std::string & to ) const;
@


1.61
log
@Added some comments to header file to better describe new collection class added as member data
@
text
@d392 5
a396 3
  void addSubs(std::map<std::string,RCPmapStringToSubs> & subCollection, const std::string & from, const std::string & to ); 
  void setSubsCost(std::map<std::string,RCPmapStringToSubs> & subCollection, const std::string & from, const std::string & to, float cost ); 
  void setSubsLeadTime(std::map<std::string,RCPmapStringToSubs> & subCollection, const std::string & from, const std::string & to, float leadTime ); 
d398 4
a401 4
  bool subsExists(const std::map<std::string,RCPmapStringToSubs> & subCollection, const std::string & from, const std::string & toJobRole )const;
  void getSubsNames(const std::map<std::string,RCPmapStringToSubs> & subCollection, std::vector<std::string> & froms, std::vector<std::string> & tos)const;
  float getSubsCost(const std::map<std::string,RCPmapStringToSubs> & subCollection, const std::string & from, const std::string & to )const;
  float getSubsLeadTime(const std::map<std::string,RCPmapStringToSubs> & subCollection, const std::string & from, const std::string & to )const;
d403 3
a405 2
  RCPbaseSubs & getSubs(std::map<std::string,RCPmapStringToSubs> & subCollection, const std::string & from, const std::string & to );
  const RCPbaseSubs & getSubs(const std::map<std::string,RCPmapStringToSubs> & subCollection, const std::string & from, const std::string & to ) const;
d413 1
a413 1
                                   const std::map<std::string,RCPmapStringToSubs> & attributeSubs,
d535 30
a564 14
  typedef std::map<std::string,RCPbaseSubs> RCPmapStringToSubs;
  std::map<std::string,RCPmapStringToSubs> jobRoleSubs_;
  std::map<std::string,RCPmapStringToSubs> skillSubs_;
  std::map<std::string,RCPmapStringToSubs> locationSubs_;
  std::map<std::string,RCPmapStringToSubs> regionSubs_;
  std::map<std::string,RCPmapStringToSubs> countrySubs_;
  std::map<std::string,RCPmapStringToSubs> citySubs_;
  std::map<std::string,RCPmapStringToSubs> reportingUnitSubs_;
  std::map<std::string,RCPmapStringToSubs> bandSubs_;
  std::map<std::string,RCPmapStringToSubs> globalSubs_;
  std::map<std::string,RCPmapStringToSubs> competencySubs_;
  std::map<std::string,RCPmapStringToSubs> industrySubs_;
  std::map<std::string,RCPmapStringToSubs> lobSubs_;
  std::map<std::string,RCPmapStringToSubs> sourceSubs_;
@


1.60
log
@Replaced RCPproblem member data
  jobToResourceNames_
  skillToResourceNames_
  lobToResourceNames_
  sourceToResourceNames_
  locToResourceNames_
  regionToResourceNames_
  countryToResourceNames_
  cityToResourceNames_
  reportingUnitToResourceNames_
  globalToResourceNames_
  competencyToResourceNames_
  industryToResourceNames_
  bandToResourceNames_
with the single strucure
  resourceIdToResourceNames_

To access what was in jobToResourceNames_ one uses resourceIdToResourceNames_["jobRole"].
To access what was in skillToResourceNames_ one uses resourceIdToResourceNames_["skilSet"].
To access what was in lobToResourceNames_one uses resourceIdToResourceNames_["LOB"].
To access what was in sourceToResourceNames_ one uses resourceIdToResourceNames_["source"].
To access what was in locToResourceNames_ one uses resourceIdToResourceNames_["locName"].
To access what was in regionToResourceNames_ one uses resourceIdToResourceNames_["region"].
To access what was in countryToResourceNames_ one uses resourceIdToResourceNames_["country"].
To access what was in cityToResourceNames_ one uses resourceIdToResourceNames_["city"].
To access what was in reportingUnitToResourceNames_ one uses resourceIdToResourceNames_["reportingUnit"].
To access what was in globalToResourceNames_ one uses resourceIdToResourceNames_["global"].
To access what was in competencyToResourceNames_one uses resourceIdToResourceNames_["competency"].
To access what was in industryToResourceNames_one uses resourceIdToResourceNames_["industry"].
@
text
@d548 1
d563 12
a574 1
  typedef std::map<std::string,RCPcollectionOfStrings> RCPmapResouceIdValueToResources;
@


1.59
log
@Removed rcpProblem:: from the definitions of some functions.  This wasn't needed and AIX doesn't like it.
@
text
@d548 13
a560 13
  std::map<std::string,RCPcollectionOfStrings> jobToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> skillToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> lobToResourceNames_;  
  std::map<std::string,RCPcollectionOfStrings> sourceToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> locToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> regionToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> countryToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> cityToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> reportingUnitToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> globalToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> competencyToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> industryToResourceNames_; 
  std::map<std::string,RCPcollectionOfStrings> bandToResourceNames_; 
d562 2
@


1.58
log
@improve "reasonableEngagementRevenue" computation to include bench costs rather than assuming them equal to 1.
@
text
@d105 2
a106 2
  void RCPproblem::setResourceReasonableReleaseCost(const std::string & jobRole,const std::string & skillSet,const std::string & LOB,const std::string & source,const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry);
  void RCPproblem::setEngagementReasonableReward(const std::string & engagementName);
d112 1
a112 1
  void RCPproblem::setResourceReasonableReleaseCost(const std::string & jobRole,const std::string & skillSet,const std::string & LOB,const std::string & source,const std::string & locName);
d340 1
a340 1
  bool RCPproblem::isLongFormat();
@


1.57
log
@changed the engagement reward to be data-driven
@
text
@d467 1
@


1.56
log
@Fixed some reporting issues with gaps and gluts.
@
text
@d106 2
a107 1
 
@


1.55
log
@fixed a number of problems with the new format
@
text
@d116 1
@


1.54
log
@The rcp program now reads the algorithm and problem and branches internally to the appropriate code for gapGlut or resourceAction (problem) and priorityPlan or optimalPlan (algorithm).
@
text
@d505 13
a517 1
  
@


1.53
log
@yet more refinements for the new model.
@
text
@d39 3
d43 1
d53 3
d57 3
a59 1
  void setResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry, float acquireTime);
d70 3
d82 3
d101 1
a101 1
  std::vector<float> getResourceGrossQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, const std::string & band, const std::string &global, const std::string &competency, const std::string &industry)const;
d107 1
a107 1
  std::vector<float> getResourceGrossQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d113 4
d320 1
d325 1
a325 1
  void optimalPlan();
d327 13
a339 1
  void optimalPlan04Feb();
d360 5
d440 1
@


1.52
log
@more updates for extra fields. Not done yet though.
@
text
@d66 2
a67 2
  void getResourceNames( std::vector<std::string> & jobRoles, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & sources, std::vector<std::string> & regions, std::vector<std::string> & countries, std::vector<std::string> & cities, std::vector<std::string> &reportingUnits, std::vector<std::string> &bands, std::vector<std::string> & globals, std::vector<std::string> compentencies, std::vector<std::string> industries )const;
  std::vector<float> getResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, std::vector<std::string> & regions, std::vector<std::string> & countries, std::vector<std::string> & cities, std::vector<std::string> &reportingUnits, std::vector<std::string> &bands, std::vector<std::string> & globals, std::vector<std::string> compentencies, std::vector<std::string> industries) const;
d71 3
a73 3
  std::vector<float> getResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, std::string & region, std::string & country, std::string & city, std::string &reportingUnit, const std::string & band, std::string & global, std::string &competency, std::string &industry)const;
  std::vector<float> getResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, std::string & region, std::string & country, std::string & city, std::string &reportingUnit, const std::string & band, std::string & global, std::string &competency, std::string &industry)const;
  std::vector<float> getResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, std::string & region, std::string & country, std::string & city, std::string &reportingUnit, const std::string & band, std::string & global, std::string &competency, std::string &industry)const;
d434 9
@


1.51
log
@more updates for the additional fields
@
text
@d474 8
@


1.50
log
@new fields
@
text
@d47 9
a55 9
  void addResource(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry);
  void setExogenousResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period, float supplyQuantity);
  void setBenchResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period, float supplyQuantity);
  void setResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, float acquireTime);
  void setResourceAcquireCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, float acquireCost);
  void setResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, float releaseTime);
  void setResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, float releaseCost);
  void setResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period, float fixedCost);
  bool resourceExists    (const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry)const;
d66 8
a73 8
  void getResourceNames( std::vector<std::string> & jobRoles, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & sources, std::vector<std::string> & regions, std::vector<std::string> & countries, std::vector<std::string> & cities, std::vector<std::string> &reportingUnits, std::vector<int> &bands, std::vector<std::string> & globals, std::vector<std::string> compentencies, std::vector<std::string> industries )const;
  std::vector<float> getResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, std::vector<std::string> & regions, std::vector<std::string> & countries, std::vector<std::string> & cities, std::vector<std::string> &reportingUnits, std::vector<int> &bands, std::vector<std::string> & globals, std::vector<std::string> compentencies, std::vector<std::string> industries) const;
  std::vector<float> getResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &compentency, const std::string &industry)const;
  std::vector<float> getExogenousResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string & industry)const;
  std::vector<float> getResourceWorkingQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry)const;
  std::vector<float> getResourceAcquireQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, std::string & region, std::string & country, std::string & city, std::string &reportingUnit, int band, std::string & global, std::string &competency, std::string &industry)const;
  std::vector<float> getResourceBenchQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, std::string & region, std::string & country, std::string & city, std::string &reportingUnit, int band, std::string & global, std::string &competency, std::string &industry)const;
  std::vector<float> getResourceReleaseQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, std::string & region, std::string & country, std::string & city, std::string &reportingUnit, int band, std::string & global, std::string &competency, std::string &industry)const;
d81 10
a90 10
  float getResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry) const;
  float getResourceAcquireCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry) const;
  float getResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry) const;
  float getResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry) const;

  std::vector<float> getResourceGrossQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry)const;
  std::vector<float> getResourceGapQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry)const;
  std::vector<float> getResourceGlutQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry)const;
  std::vector<float> getResourceStockQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry)const;
  void RCPproblem::setResourceReasonableReleaseCost(const std::string & jobRole,const std::string & skillSet,const std::string & LOB,const std::string & source,const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry);
d104 1
a104 1
              const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry);
d129 1
a129 1
  void setBomUsageQuantity(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry,
d131 1
a131 1
  void setBomJobRoleMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d133 1
a133 1
  void setBomSkillSetMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d135 1
a135 1
  void setBomRegionMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d137 1
a137 1
   void setBomCountryMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d139 1
a139 1
  void setBomCityMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d141 1
a141 1
  void setBomReportingUnitMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d143 1
a143 1
  void setBomBandMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d145 1
a145 1
  void setBomGlobalMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d147 1
a147 1
  void setBomCompetencyMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d149 1
a149 1
  void setBomIndustryMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d151 1
a151 1
  void setBomLobMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d153 1
a153 1
  void setBomSourceMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d155 1
a155 1
  void setBomJobRoleSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d157 1
a157 1
  void setBomSkillSetSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d159 1
a159 1
  void setBomRegionSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d161 1
a161 1
  void setBomCountrySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d163 1
a163 1
  void setBomCitySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d165 1
a165 1
  void setBomReportingUnitSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d167 1
a167 1
  void setBomBandSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d169 1
a169 1
  void setBomGlobalSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d171 1
a171 1
  void setBomCompetencySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d173 1
a173 1
  void setBomIndustrySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d175 1
a175 1
  void setBomLobSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d177 1
a177 1
  void setBomSourceSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string & competency, const std::string & industry, int period, 
d184 1
a184 1
                 const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string & country, const std::string & city, const std::string & reportingUnit, int band, const std::string & global, const std::string &comptency, const std::string &industry)const;
d186 1
d204 24
a227 24
  int getBomJobRoleMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomSkillSetMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomRegionMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCountryMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCityMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomReportingUnitMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomBandMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomGlobalMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCompetencyMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomIndustryMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomLobMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomSourceMatch(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomJobRoleSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomSkillSetSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomRegionSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCountrySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCitySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomReportingUnitSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomBandSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomGlobalSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomCompetencySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomIndustrySub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomLobSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
  int getBomSourceSub(const std::string & engagementName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period);
d306 2
d343 1
a343 1
  void setBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period,
d346 1
a346 1
  int  getBomSub(const std::string & engName, const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry, int period,
d366 1
d401 2
d420 7
a426 7
  static std::string acquireResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string benchResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string enableResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string workingResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string enableExogenousResourceOperationName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string exogenousResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry);
  static std::string baseResourceName(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string & country, const std::string & city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry);
d444 1
a444 1
  static std::string bomNameLong(const std::string & engagementName,const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &region, const std::string &country, const std::string &city, const std::string &reportingUnit, int band, const std::string &global, const std::string &competency, const std::string &industry);
d490 1
a490 1
  std::map<int,RCPcollectionOfStrings> bandToResourceNames_; 
@


1.49
log
@more preparation for more complex input files
@
text
@d103 3
d128 51
d183 2
d203 26
d339 6
d437 15
@


1.48
log
@Added setResourceReasonableReleaseCost method that sets the release cost of the bench resource to 2*nPeriods*maximum_period_cost.  This method is invoked for the 04Jan formats, because we don't have data for the release cost.  The default wit scrapping cost is 0 and this isn't good for our rcp model.
@
text
@a39 1
  void getBenchResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
d45 1
d47 10
a56 1
  bool resourceExists    (const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d59 1
a59 1
  std::vector<float> setBenchResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d65 27
a91 5
  float getResourceAcquireTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
  float getResourceAcquireCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
  float getResourceReleaseTime(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
  float getResourceReleaseCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;

d326 8
d374 8
a381 1
  
@


1.47
log
@more changes to substitute arc code to try to simplify and make more readable
@
text
@d65 1
@


1.46
log
@Added presolveForGapGlut() to rcpProblem.  This sets the soft lower bounds for the gap/glut calculations.  I moved the witSetOptWithLotSizes() from the constructor of rcpProblem to the optimalPlan() method.
@
text
@d244 6
a249 9
  void unionOfToResources(
    RCPcollectionOfStrings & currentToResources,
    const std::map<std::string,RCPmapStringToSubs> & attributeSubs,
    const std::map<std::string,RCPcollectionOfStrings> & attributeToResourceNames,
    const std::string & fromResourceAttribute );
  void intersectionOfToResources(
    RCPcollectionOfStrings & currentToResources,
    const std::map<std::string,RCPcollectionOfStrings> & attributeToResourceNames,
    const std::string & fromResourceAttribute );
@


1.45
log
@Removed the MRP branch of the model and put the exogenous supply in the bench resource's appData.
@
text
@d279 1
@


1.44
log
@preparing for handling "simple" format files. Not yet exercised in unitTest.
@
text
@d39 2
a40 1
  void setAcquireResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
d50 1
a50 1
  std::vector<float> getAcquireResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
a63 1
  std::vector<float> getResourceResidualQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
@


1.43
log
@moved the fixedCost from the resourceaction file to the resource file.
examle data files needed to be modified accordingly.
@
text
@d23 1
d175 11
a210 1

d336 2
@


1.42
log
@Changed the interpretation of the resource supply to be "Ron's supply" and updated the code for that.  Also, compute gap/glut and print the result in the mrpO.csv file.
@
text
@d43 1
a43 1
  void setResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float fixedCost);
d47 1
a57 1
  float getResourceFixedCost(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
@


1.41
log
@Added static member functions to perform union and intersections. The hope is that this will allow the code to be more readable as compared to using the STL functions directly.
@
text
@d37 2
a38 1
  void setResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
d47 2
a48 1
  std::vector<float> getResourceSupplyQuantity(const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d63 1
d281 2
@


1.40
log
@Added some code to facilitate testing of substitutes.
@
text
@d240 12
@


1.39
log
@algorithm in globalAttr is now gapGlut or optimalPlan
The rcpProblem::solve method was removed.
Added methods rcpProblem::gapGlut and rcpProblem::optimalPlan
@
text
@d240 11
d273 1
@


1.38
log
@Added code to read and add substitute arcs for location, lob, and source
@
text
@d174 2
a175 1
  void solve();
d239 3
@


1.37
log
@in rcpProblem changed name of addSkillSubsArcs method to be addSubsArcsToWitModel.
This renamed method now adds substitutes for jobRoles and skillSets.
@
text
@d109 8
a116 1
 
d118 4
d136 25
a160 1
  // Methods for jobRole substitution.
d162 3
a164 3
  void addJobRoleSubs(const std::string & fromJobRole, const std::string & toJobRole ); 
  void setJobRoleSubsCost(const std::string & fromJobRole, const std::string & toJobRole, float cost ); 
  void setJobRoleSubsLeadTime(const std::string & fromJobRole, const std::string & toJobRole, float leadTime ); 
d166 4
a169 4
  bool jobRoleSubsExists(const std::string & fromJobRole, const std::string & toJobRole )const;
  void getJobRoleSubsNames( std::vector<std::string> & fromJobRoles, std::vector<std::string> & toJobRoles)const;
  float getJobRoleSubsCost(const std::string & fromJobRole, const std::string & toJobRole )const;
  float getJobRoleSubsLeadTime(const std::string & fromJobRole, const std::string & toJobRole )const;
@


1.36
log
@added match flags
@
text
@d192 11
a202 4

  //RCPbaseSubs & getSkillSubs(const std::string & fromSkill, const std::string & toSkill );
  //const RCPbaseSubs & getSkillSubs(const std::string & fromSkill, const std::string & toSkill ) const;
  void addSkillSubsArcs();
d218 5
a222 5
  static std::string resourceFromResourceName(const std::string & jobRole);
  static std::string skillSetFromResourceName(const std::string & jobRole);
  static std::string LOBFromResourceName(const std::string & jobRole);
  static std::string sourceFromResourceName(const std::string & jobRole);
  static std::string locationFromResourceName(const std::string & jobRole);
d240 3
a242 3
  std::set<std::string> engagementNames_;
  std::set<std::string> jobRoles_;
  std::set<std::string> bomNames_;
a250 1
  typedef std::set<std::string> RCPcollectionOfStrings;
@


1.35
log
@Modified code to get to compile on Linux.
@
text
@d69 10
d90 1
d99 5
@


1.34
log
@ jobRoleSubs:
-Added file class for reading.
-Created new datafiles.
-in rcpProblem added add/set/get methods
-populateRCP added stanza to read file and invoke add & set methods.
Have not yet added code for adding substitute arcs to wit model.
@
text
@d151 1
a151 1
  std::vector<int> RCPproblem::getBomEntryIndex( const std::string & engagementName, const std::string & workingRes) const;
@


1.33
log
@Added fields to bomAppData:
   jobRoleSub, skillSetSub, locationSub, lobSub, sourceSub
Added set/gets for these fields in rcpProblem.
Added reading of these fields in populateRCP.cpp and the calls to set their values in rcpProblem.
@
text
@d6 1
a6 1
#include "skillSubs.h"
d108 12
d159 17
d177 2
a178 3
  // Methods for skillSubs
  RCPskillSubs & getSkillSubs(const std::string & fromSkill, const std::string & toSkill );
  const RCPskillSubs & getSkillSubs(const std::string & fromSkill, const std::string & toSkill ) const;
d221 6
a226 2
  typedef std::map<std::string,RCPskillSubs> RCPmapStringToSkillSubs;
  std::map<std::string,RCPmapStringToSkillSubs> skillSubs_;
@


1.32
log
@Modifed method addSkillSubsArcs.
It now creates a set of all resources that have the toSkills by taking union of all sets that have the toSkill.
This was a change that was suggested at today's code review.
@
text
@d7 1
d67 12
a78 2
  void setBomUsageQuantity(const std::string & engagementName,  
                           const std::string & jobRole, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, float usageQuantity);
d88 7
d140 7
@


1.31
log
@Changed globally "resourceName" to "jobRole"
@
text
@d173 1
a173 1
  std::map<std::string,RCPcollectionOfStrings> resourceToResourceNames_; 
@


1.30
log
@added code that calls witAddSubsBomEntry for substitute skills
@
text
@d35 25
a59 25
  void addResource(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName);
  void setResourceSupplyQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, int period, float supplyQuantity);
  void setResourceAcquireTime(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float acquireTime);
  void setResourceAcquireCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float acquireCost);
  void setResourceReleaseTime(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float releaseTime);
  void setResourceReleaseCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float releaseCost);
  void setResourceFixedCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName, float fixedCost);

  bool resourceExists    (const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  void getResourceNames( std::vector<std::string> & resourceNames, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & sources, std::vector<std::string> & locNames )const;
  std::vector<float> getResourceSupplyQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceWorkingQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceAcquireQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceBenchQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceReleaseQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  float getResourceAcquireTime(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
  float getResourceAcquireCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
  float getResourceReleaseTime(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
  float getResourceReleaseCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;
  float getResourceFixedCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName) const;

  std::vector<float> getResourceGrossQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceGapQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceGlutQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
  std::vector<float> getResourceResidualQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & locName)const;
d65 1
a65 1
              const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName);
d67 1
a67 1
                           const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName, int period, float usageQuantity);
d70 2
a71 2
                 const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName)const;
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<std::string> & resourceNames, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & sources, std::vector<std::string> & resourceLocNames )const;
d73 1
a73 1
                                         const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName)const;
d75 1
a75 1
                            const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string & resourceLocName,int period)const;
d136 11
a146 11
  static std::string acquireResourceOperationName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
  static std::string benchResourceName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
  static std::string enableResourceOperationName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
  static std::string workingResourceName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);
  static std::string baseResourceName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &locName);

  static std::string resourceFromResourceName(const std::string & resourceName);
  static std::string skillSetFromResourceName(const std::string & resourceName);
  static std::string LOBFromResourceName(const std::string & resourceName);
  static std::string sourceFromResourceName(const std::string & resourceName);
  static std::string locationFromResourceName(const std::string & resourceName);
d149 1
a149 1
  static std::string bomName(const std::string & engagementName,const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & source, const std::string &resourceLocName);
d165 1
a165 1
  std::set<std::string> resourceNames_;
@


1.29
log
@Added "source" field to the resource description and all the related code to use "source"
@
text
@d121 1
d126 1
d158 1
a158 1
  static std::string skillSubsName(const std::string & fromSkill,const std::string & toSkill);
d167 11
a177 1
  std::map<std::string,RCPskillSubs> skillSubs_;
@


1.28
log
@Added rcpProblem methods associated with skillSubs.
Code to add WIT subs arcs still needs to be added.
@
text
@d35 25
a59 25
  void addResource(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName);
  void setResourceSupplyQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName, int period, float supplyQuantity);
  void setResourceAcquireTime(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName, float acquireTime);
  void setResourceAcquireCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName, float acquireCost);
  void setResourceReleaseTime(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName, float releaseTime);
  void setResourceReleaseCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName, float releaseCost);
  void setResourceFixedCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName, float fixedCost);

  bool resourceExists    (const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
  void getResourceNames( std::vector<std::string> & resourceNames, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & locNames )const;
  std::vector<float> getResourceSupplyQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
  std::vector<float> getResourceWorkingQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
  std::vector<float> getResourceAcquireQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
  std::vector<float> getResourceBenchQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
  std::vector<float> getResourceReleaseQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
  float getResourceAcquireTime(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName) const;
  float getResourceAcquireCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName) const;
  float getResourceReleaseTime(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName) const;
  float getResourceReleaseCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName) const;
  float getResourceFixedCost(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName) const;

  std::vector<float> getResourceGrossQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
  std::vector<float> getResourceGapQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
  std::vector<float> getResourceGlutQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
  std::vector<float> getResourceResidualQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & locName)const;
d65 1
a65 1
              const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & resourceLocName);
d67 1
a67 1
                           const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & resourceLocName, int period, float usageQuantity);
d70 2
a71 2
                 const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & resourceLocName)const;
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<std::string> & resourceNames, std::vector<std::string> & skillSets, std::vector<std::string> & LOBs, std::vector<std::string> & resourceLocNames )const;
d73 1
a73 1
                                         const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & resourceLocName)const;
d75 1
a75 1
                            const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string & resourceLocName,int period)const;
d134 5
a138 5
  static std::string acquireResourceOperationName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string &locName);
  static std::string benchResourceName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string &locName);
  static std::string enableResourceOperationName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string &locName);
  static std::string workingResourceName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string &locName);
  static std::string baseResourceName(const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string &locName);
d143 1
d147 1
a147 1
  static std::string bomName(const std::string & engagementName,const std::string & resourceName, const std::string & skillSet, const std::string & LOB, const std::string &resourceLocName);
d152 1
@


1.27
log
@Added skillSet to rcp code;  added skillSubs* to appl.mk
@
text
@d6 1
d81 8
a88 8
  //void addSkillSubs(const std::string & fromSkill, const std::string & toSkill ); 
  //void setSkillSubsCost(const std::string & fromSkill, const std::string & toSkill, float cost ); 
  //void setSkillSubsLeadTime(const std::string & fromSkill, const std::string & toSkill, float leadTime ); 
  
  //bool skillSubsExists(const std::string & fromSkill, const std::string & toSkill )const;
  //void getSkillSubsNames( std::vector<std::string> & fromSkill, std::vector<std::string> & toSkill)const;
  //float getSkillSubsCost(const std::string & fromSkill, const std::string & toSkill )const;
  //float getSkillSubsLeadTime(const std::string & fromSkill, const std::string & toSkill )const;
d122 4
a126 2


d152 4
d163 1
@


1.26
log
@Added skillSubs class
@
text
@d34 25
a58 25
  void addResource(const std::string & resourceName, const std::string & skillSet, const std::string & locName);
  void setResourceSupplyQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName, int period, float supplyQuantity);
  void setResourceAcquireTime(const std::string & resourceName, const std::string & skillSet, const std::string & locName, float acquireTime);
  void setResourceAcquireCost(const std::string & resourceName, const std::string & skillSet, const std::string & locName, float acquireCost);
  void setResourceReleaseTime(const std::string & resourceName, const std::string & skillSet, const std::string & locName, float releaseTime);
  void setResourceReleaseCost(const std::string & resourceName, const std::string & skillSet, const std::string & locName, float releaseCost);
  void setResourceFixedCost(const std::string & resourceName, const std::string & skillSet, const std::string & locName, float fixedCost);

  bool resourceExists    (const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
  void getResourceNames( std::vector<std::string> & resourceNames, std::vector<std::string> & skillSets, std::vector<std::string> & locNames )const;
  std::vector<float> getResourceSupplyQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
  std::vector<float> getResourceWorkingQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
  std::vector<float> getResourceAcquireQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
  std::vector<float> getResourceBenchQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
  std::vector<float> getResourceReleaseQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
  float getResourceAcquireTime(const std::string & resourceName, const std::string & skillSet, const std::string & locName) const;
  float getResourceAcquireCost(const std::string & resourceName, const std::string & skillSet, const std::string & locName) const;
  float getResourceReleaseTime(const std::string & resourceName, const std::string & skillSet, const std::string & locName) const;
  float getResourceReleaseCost(const std::string & resourceName, const std::string & skillSet, const std::string & locName) const;
  float getResourceFixedCost(const std::string & resourceName, const std::string & skillSet, const std::string & locName) const;

  std::vector<float> getResourceGrossQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
  std::vector<float> getResourceGapQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
  std::vector<float> getResourceGlutQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
  std::vector<float> getResourceResidualQuantity(const std::string & resourceName, const std::string & skillSet, const std::string & locName)const;
d64 1
a64 1
              const std::string & resourceName, const std::string & skillSet, const std::string & resourceLocName);
d66 1
a66 1
                           const std::string & resourceName, const std::string & skillSet, const std::string & resourceLocName, int period, float usageQuantity);
d69 2
a70 2
                 const std::string & resourceName, const std::string & skillSet, const std::string & resourceLocName)const;
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<std::string> & resourceNames, std::vector<std::string> & skillSets, std::vector<std::string> & resourceLocNames )const;
d72 1
a72 1
                                         const std::string & resourceName, const std::string & skillSet, const std::string & resourceLocName)const;
d74 1
a74 1
                            const std::string & resourceName, const std::string & skillSet, const std::string & resourceLocName,int period)const;
d131 5
a135 5
  static std::string acquireResourceOperationName(const std::string & resourceName, const std::string & skillSet, const std::string &locName);
  static std::string benchResourceName(const std::string & resourceName, const std::string & skillSet, const std::string &locName);
  static std::string enableResourceOperationName(const std::string & resourceName, const std::string & skillSet, const std::string &locName);
  static std::string workingResourceName(const std::string & resourceName, const std::string & skillSet, const std::string &locName);
  static std::string baseResourceName(const std::string & resourceName, const std::string & skillSet, const std::string &locName);
d139 1
d143 1
a143 1
  static std::string bomName(const std::string & engagementName,const std::string & resourceName, const std::string & skillSet, const std::string &resourceLocName);
d147 1
@


1.25
log
@Added "skillSet" field to input files and updated the code to use this field.
@
text
@d13 1
a13 1
  //----------------------uu
d77 11
@


1.24
log
@modified some method names
@
text
@d34 25
a58 25
  void addResource(const std::string & resourceName, const std::string & locName);
  void setResourceSupplyQuantity(const std::string & resourceName, const std::string & locName, int period, float supplyQuantity);
  void setResourceAcquireTime(const std::string & resourceName, const std::string & locName, float acquireTime);
  void setResourceAcquireCost(const std::string & resourceName, const std::string & locName, float acquireCost);
  void setResourceReleaseTime(const std::string & resourceName, const std::string & locName, float releaseTime);
  void setResourceReleaseCost(const std::string & resourceName, const std::string & locName, float releaseCost);
  void setResourceFixedCost(const std::string & resourceName, const std::string & locName, float fixedCost);

  bool resourceExists    (const std::string & resourceName, const std::string & locName)const;
  void getResourceNames( std::vector<std::string> & resourceNames, std::vector<std::string> & locNames )const;
  std::vector<float> getResourceSupplyQuantity(const std::string & resourceName, const std::string & locName)const;
  std::vector<float> getResourceWorkingQuantity(const std::string & resourceName, const std::string & locName)const;
  std::vector<float> getResourceAcquireQuantity(const std::string & resourceName, const std::string & locName)const;
  std::vector<float> getResourceBenchQuantity(const std::string & resourceName, const std::string & locName)const;
  std::vector<float> getResourceReleaseQuantity(const std::string & resourceName, const std::string & locName)const;
  float getResourceAcquireTime(const std::string & resourceName, const std::string & locName) const;
  float getResourceAcquireCost(const std::string & resourceName, const std::string & locName) const;
  float getResourceReleaseTime(const std::string & resourceName, const std::string & locName) const;
  float getResourceReleaseCost(const std::string & resourceName, const std::string & locName) const;
  float getResourceFixedCost(const std::string & resourceName, const std::string & locName) const;

  std::vector<float> getResourceGrossQuantity(const std::string & resourceName, const std::string & locName)const;
  std::vector<float> getResourceGapQuantity(const std::string & resourceName, const std::string & locName)const;
  std::vector<float> getResourceGlutQuantity(const std::string & resourceName, const std::string & locName)const;
  std::vector<float> getResourceResidualQuantity(const std::string & resourceName, const std::string & locName)const;
d64 1
a64 1
              const std::string & resourceName, const std::string & resourceLocName);
d66 1
a66 1
                           const std::string & resourceName, const std::string & resourceLocName, int period, float usageQuantity);
d69 2
a70 2
                 const std::string & resourceName, const std::string & resourceLocName)const;
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<std::string> & resourceNames, std::vector<std::string> & resourceLocNames )const;
d72 1
a72 1
                                         const std::string & resourceName, const std::string & resourceLocName)const;
d74 1
a74 1
                            const std::string & resourceName, const std::string & resourceLocName,int period)const;
d120 5
a124 5
  static std::string acquireResourceOperationName(const std::string & resourceName, const std::string &locName);
  static std::string benchResourceName(const std::string & resourceName, const std::string &locName);
  static std::string enableResourceOperationName(const std::string & resourceName, const std::string &locName);
  static std::string workingResourceName(const std::string & resourceName, const std::string &locName);
  static std::string baseResourceName(const std::string & resourceName, const std::string &locName);
d127 1
d131 1
a131 1
  static std::string bomName(const std::string & engagementName,const std::string & resourceName, const std::string &resourceLocName);
d134 1
@


1.23
log
@Code modifed so that an engagment is only uniquely identified by enagementName.
Engagement location is now an attribute of an engagement stored in appData.
@
text
@d114 2
a115 3
  static std::string baseEngagementName(const std::string & engagementName);

  static std::string engagementFromBaseEngagementName(const std::string & baseEngagementName);
@


1.22
log
@change getEngagementShipReward to be named getDemandShipReward and made method private rather than public.
@
text
@d14 16
a29 14
  void addEngagement       (const std::string & engagementName, const std::string & engagementLocationName);
  void setEngagementRevenue    (const std::string & engagementName, const std::string & engagementLocationName, float revenue );
  void setEngagementStartPeriod(const std::string & engagementName, const std::string & engagementLocationName, int startPeriod );
  void setEngagementDuration   (const std::string & engagementName, const std::string & engagementLocationName, int startPeriod );
  void setEngagementLateAllowance   (const std::string & engagementName, const std::string & engagementLocationName, int lateAllowance );

  bool engagementExists    (const std::string & engagementName, const std::string & engagementLocationName)const;
  void getEngagementNames( std::vector<std::string> & engagementNames, std::vector<std::string> & engagementLocationName )const;
  bool getEngagementExecuted(const std::string & engagementName, const std::string & engagementLocationName)const;
  float getEngagementRevenue(const std::string & engagementName, const std::string & engagementLocationName)const;
  int getEngagementRequestedStartPeriod(const std::string & engagementName,const std::string & engagementLocationName)const;
  int getEngagementStartPeriod(const std::string & engagementName, const std::string & engagementLocationName)const;
  int getEngagementDuration(const std::string & engagementName, const std::string & engagementLocationName)const;
  int getEngagementLateAllowance(const std::string & engagementName,const std::string & engagementLocationName)const;
d63 1
a63 1
  void addBom(const std::string & engagementName, const std::string & engagementLocationName, 
d65 1
a65 1
  void setBomUsageQuantity(const std::string & engagementName, const std::string & engagementLocationName, 
d68 1
a68 1
  bool bomExists(const std::string & engagementName, const std::string & engagementLocationName, 
d70 2
a71 2
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<std::string> & engagementLocationNames, std::vector<std::string> & resourceNames, std::vector<std::string> & resourceLocNames )const;
  std::vector<float> getBomUsageQuantity(const std::string & engagementName, const std::string & engagementLocationName, 
d73 1
a73 1
  float getBomUsageQuantity(const std::string & engagementName, const std::string & engagementLocationName, 
d104 1
a104 1
  std::vector<float> getDemandShipReward(const std::string & engagementName,const std::string & engagementLocationName)const;
d114 1
a114 1
  static std::string baseEngagementName(const std::string & engagementName, const std::string &engagementLocationName);
d117 1
a117 2
  static std::string engagementLocationFromBaseEngagementName(const std::string & baseEngagementName);

d131 1
a131 2
  static std::string bomName(const std::string & engagementName,const std::string & engagementLocationName,const std::string & resourceName, const std::string &resourceLocName);
  static std::string engagementLocationFromBomName(const std::string & bomName);
a139 1
  std::set<std::string> engagementLocationNames_;
@


1.21
log
@Added MRP stuff and fixed duration/offset calculations
@
text
@a27 1
  std::vector<float> getEngagementShipReward(const std::string & engagementName,const std::string & engagementLocationName)const;
d100 4
@


1.20
log
@Added engagement location to the model.
@
text
@d54 4
d74 1
@


1.19
log
@Added resourceLocation to rcpProblem methods.
Hardcode resourceLocation as l1 in function populateRCP
@
text
@d13 16
a28 16
  //----------------------
  void addEngagement       (const std::string & engagementName);
  void setEngagementRevenue    (const std::string & engagementName, float revenue );
  void setEngagementStartPeriod(const std::string & engagementName, int startPeriod );
  void setEngagementDuration   (const std::string & engagementName, int startPeriod );
  void setEngagementLateAllowance   (const std::string & engagementName, int lateAllowance );

  bool engagementExists    (const std::string & engagementName)const;
  void getEngagementNames( std::vector<std::string> & engagementNames )const;
  bool getEngagementExecuted(const std::string & engagementName)const;
  float getEngagementRevenue(const std::string & engagementName)const;
  int getEngagementRequestedStartPeriod(const std::string & engagementName)const;
  int getEngagementStartPeriod(const std::string & engagementName)const;
  int getEngagementDuration(const std::string & engagementName)const;
  int getEngagementLateAllowance(const std::string & engagementName)const;
  std::vector<float> getEngagementShipReward(const std::string & engagementName)const;
d58 4
a61 2
  void addBom(const std::string & engagementName, const std::string & resourceName, const std::string & resourceLocName);
  void setBomUsageQuantity(const std::string & engagementName, const std::string & resourceName, const std::string & resourceLocName, int period, float usageQuantity);
d63 7
a69 4
  bool bomExists(const std::string & engagementName, const std::string & resourceName, const std::string & resourceLocName)const;
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<std::string> & resourceNames, std::vector<std::string> & resourceLocNames )const;
  std::vector<float> getBomUsageQuantity(const std::string & engagementName, const std::string & resourceName, const std::string & resourceLocName)const;
  float getBomUsageQuantity(const std::string & engagementName, const std::string & resourceName, const std::string & resourceLocName,int period)const;
d101 10
d122 2
a123 1
  static std::string bomName(const std::string & engagementName,const std::string & resourceName, const std::string &resourceLocName);
d132 1
@


1.18
log
@Added the concept of lateAllowance to allow us to set the ShipReward for a fixed number of periods following the due date.  The lateAllowance value is stored in the engagementAppData.  The engagementFile was modified to add the new field.  I added a CR/LF to the end of populateRCP.h to avoid the warning message from the Linux compiler.
@
text
@d33 20
a52 20
  void addResource(const std::string & resourceName);
  void setResourceSupplyQuantity(const std::string & resourceName, int period, float supplyQuantity);
  void setResourceAcquireTime(const std::string & resourceName, float acquireTime);
  void setResourceAcquireCost(const std::string & resourceName, float acquireCost);
  void setResourceReleaseTime(const std::string & resourceName, float releaseTime);
  void setResourceReleaseCost(const std::string & resourceName, float releaseCost);
  void setResourceFixedCost(const std::string & resourceName, float fixedCost);

  bool resourceExists    (const std::string & resourceName)const;
  void getResourceNames( std::vector<std::string> & resourceNames )const;
  std::vector<float> getResourceSupplyQuantity(const std::string & resourceName)const;
  std::vector<float> getResourceWorkingQuantity(const std::string & resourceName)const;
  std::vector<float> getResourceAcquireQuantity(const std::string & resourceName)const;
  std::vector<float> getResourceBenchQuantity(const std::string & resourceName)const;
  std::vector<float> getResourceReleaseQuantity(const std::string & resourceName)const;
  float getResourceAcquireTime(const std::string & resourceName) const;
  float getResourceAcquireCost(const std::string & resourceName) const;
  float getResourceReleaseTime(const std::string & resourceName) const;
  float getResourceReleaseCost(const std::string & resourceName) const;
  float getResourceFixedCost(const std::string & resourceName) const;
d58 2
a59 2
  void addBom(const std::string & engagementName, const std::string & resourceName);
  void setBomUsageQuantity(const std::string & engagementName, const std::string & resourceName, int period, float usageQuantity);
d61 4
a64 4
  bool bomExists(const std::string & engagementName, const std::string & resourceName)const;
  void getBomNames( std::vector<std::string> & engagementNames, std::vector<std::string> & resourceNames )const;
  std::vector<float> getBomUsageQuantity(const std::string & engagementName, const std::string & resourceName)const;
  float getBomUsageQuantity(const std::string & engagementName, const std::string & resourceName,int period)const;
d97 8
a104 4
  static std::string acquireResourceOperationName(const std::string & resourceName);
  static std::string benchResourceName(const std::string & resourceName);
  static std::string enableResourceOperationName(const std::string & resourceName);
  static std::string workingResourceName(const std::string & resourceName);
d107 1
a107 1
  static std::string bomName(const std::string & engagementName,const std::string & resourceName);
d110 1
@


1.17
log
@moved populate function to a separate file (not part of rcpProblem)
@
text
@d18 1
d27 2
@


1.16
log
@cleaning up the testing procedures
@
text
@a9 2
  //given an RCPproblem, populate it using the files in the given directory.
	void populate(std::string idir, std::string odir, int nperiods);
@


1.15
log
@-added methods:
   getResourceBenchQuantity
   getResourceReleaseQuantity
-renamed getResourceConsumptionQuantity to getResourceWorkingQuantity
-Global wit attribute execEmptyBom is now being set to true
@
text
@d10 3
@


1.14
log
@added new examples (very simple) in example3. Also changed various routines
related to "getEngagementStart" to "getRequestedEngagementStart" so that
we could have a routine to supply the actual start time.
@
text
@d40 1
a40 1
  std::vector<float> getResourceConsumptionQuantity(const std::string & resourceName)const;
d42 2
@


1.13
log
@added resourceActionO file
@
text
@d22 1
@


1.12
log
@Added methods to get/set resource Action costs and times and then added the calls in rcp.cpp to set action costs.  Also added witWriteData to rcpProblem.cpp to help debug the model.
@
text
@d40 1
@


1.11
log
@Modified so an RCP bom maps to many WIT bomEntries. One for each consumption period.
@
text
@d30 1
d32 3
a34 1
  void setResourceAcquireTime(const std::string & resourceName, float acquireTime);
d40 1
d42 4
a45 1
  float getResourceAcquireTime(const std::string & resourceName) const;
@


1.10
log
@Added set/get for resources acquire time and cost
@
text
@d49 2
d76 3
@


1.9
log
@added code to write an output file
@
text
@d30 2
d37 2
@


1.8
log
@added code methods to addBom and set/get attributes.
added code to read bom file and addBoms and attributes.
@
text
@d26 1
a26 1
  // Methods for engagements.
d34 1
@


1.7
log
@Added set/get methods for Resource SupplyQuantity
@
text
@d35 10
d70 2
a71 1
  // Methods for creating wit object names
d77 5
d87 1
@


1.6
log
@Modified to use witPartAppData for setting/getting rcp engagement revenue, startPeriod, and duration
@
text
@a13 1
  bool engagementExists    (const std::string & engagementName)const;
d18 1
d29 2
a31 1

d33 1
@


1.5
log
@fixed problem where resources of the same name were being created
@
text
@d15 3
a17 2
  void setEngagementParms(const std::string & engagementName, 
    float revenue, int startPeriod, int duration);
d20 1
d22 2
a23 1
  bool getEngagementExecuted(const std::string & engagementName)const;
@


1.4
log
@Added code to read resource file and add resources
@
text
@d26 1
@


1.3
log
@modified setEngagementRevenue to have 2 additional parms (startPeriod and duration).
@
text
@d21 8
d54 6
d64 1
@


1.2
log
@implemented getEngagementRevenue and getEngagements
@
text
@d15 2
a16 1
  void setEngagementRevenue(const std::string & engagementName, float revenue);
d20 1
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
  void getEngagements( std::vector<std::string> & engagementNames )const;
@


1.1.1.1
log
@initial import
@
text
@@
