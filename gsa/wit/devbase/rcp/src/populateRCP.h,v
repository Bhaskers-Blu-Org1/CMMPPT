head	1.44;
access;
symbols;
locks; strict;
comment	@ * @;


1.44
date	2006.05.15.14.07.57;	author gresh;	state Exp;
branches;
next	1.43;

1.43
date	2006.01.30.15.46.57;	author gresh;	state Exp;
branches;
next	1.42;

1.42
date	2006.01.23.12.42.43;	author gresh;	state Exp;
branches;
next	1.41;

1.41
date	2005.12.21.17.45.57;	author gresh;	state Exp;
branches;
next	1.40;

1.40
date	2005.12.15.18.26.20;	author gresh;	state Exp;
branches;
next	1.39;

1.39
date	2005.09.13.17.53.29;	author gresh;	state Exp;
branches;
next	1.38;

1.38
date	2005.09.08.14.57.48;	author gresh;	state Exp;
branches;
next	1.37;

1.37
date	2005.08.15.17.32.41;	author gresh;	state Exp;
branches;
next	1.36;

1.36
date	2005.08.04.18.33.06;	author gresh;	state Exp;
branches;
next	1.35;

1.35
date	2004.10.19.17.12.21;	author gresh;	state Exp;
branches;
next	1.34;

1.34
date	2004.08.18.14.52.46;	author gresh;	state Exp;
branches;
next	1.33;

1.33
date	2004.07.14.16.16.51;	author gresh;	state Exp;
branches;
next	1.32;

1.32
date	2004.06.24.18.18.54;	author gresh;	state Exp;
branches;
next	1.31;

1.31
date	2004.06.22.19.15.32;	author gresh;	state Exp;
branches;
next	1.30;

1.30
date	2004.06.21.14.32.09;	author gresh;	state Exp;
branches;
next	1.29;

1.29
date	2004.06.17.14.50.43;	author gresh;	state Exp;
branches;
next	1.28;

1.28
date	2004.05.14.17.41.38;	author gresh;	state Exp;
branches;
next	1.27;

1.27
date	2004.05.11.18.25.28;	author gresh;	state Exp;
branches;
next	1.26;

1.26
date	2004.04.30.17.13.50;	author gresh;	state Exp;
branches;
next	1.25;

1.25
date	2004.04.29.17.44.15;	author gresh;	state Exp;
branches;
next	1.24;

1.24
date	2004.04.15.19.39.30;	author gresh;	state Exp;
branches;
next	1.23;

1.23
date	2004.04.14.18.55.32;	author dpc;	state Exp;
branches;
next	1.22;

1.22
date	2004.04.14.17.05.53;	author gresh;	state Exp;
branches;
next	1.21;

1.21
date	2004.04.14.14.52.40;	author gresh;	state Exp;
branches;
next	1.20;

1.20
date	2004.04.13.20.59.29;	author fasano;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.09.17.22.21;	author gresh;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.31.16.05.43;	author gresh;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.22.20.40.30;	author gresh;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.22.15.51.17;	author gresh;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.18.20.35.19;	author fasano;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.18.15.41.46;	author fasano;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.18.14.18.39;	author gresh;	state Exp;
branches;
next	1.12;

1.12
date	2004.03.09.20.36.38;	author gresh;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.12.17.26.59;	author gresh;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.12.15.24.09;	author gresh;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.10.19.43.33;	author gresh;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.29.15.00.55;	author gresh;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.22.14.26.10;	author gresh;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.21.14.43.07;	author dpc;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.11.17.40.44;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.06.17.10.02;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.03.19.30.04;	author dpc;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.01.20.14.28;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.01.17.44.13;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.44
log
@added engagement families for the "portfolio" option.
@
text
@#ifndef RCP_populatePRC_h
#define RCP_populatePRC_h


#include "rcpProblem.h"
#include "toFromSubsFile.h"
#include "rcpOptCal.h"
#include "rcpOptTimer.h"

typedef std::vector<std::pair<std::vector<std::string>,float> > FlexSkillsObject;
typedef std::map<std::string, FlexSkillsObject > MapStringToFlexSkillsObject;
typedef std::map<std::string,FlexSkillsObject>::iterator MapStringToFlexSkillsObjectIterator;
std::vector<std::string>  getSkillSet(std::string skillSet);
void readResourceFile(
                      RCPproblem & prob, 
                      const std::string & resourceFileName,
                      bool readFixedCost, // read fixedCosted from file
                      float fixedCost,    // value to set fixed cost (ignored if readFixedCost=true).

                      bool setAcquireCost,  // if true, then acquireCost is set to value of next parameter
                      float acquireCost,   // value to set acquire cost
                      bool setReleaseCost,
                      float releaseCost,
                      bool setReleaseTime,
                      float releaseTime,
                      std::vector<int> matchVector,
                      RcpOptCalendar & rcpCal
                      );
void readPrioritySubstitutionDescriptionFile(
                      RCPproblem & prob, 
                      const std::string & substitutionFileName
                      );
std::string makeJobRolePrimarySkillName(std::string jobRole, std::string primarySkill);


void populate04Feb(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              const std::string & resourceFileName,
              const std::string & bomFileName,
              int   nPeriods,
              bool   prioritySubs,
	          bool resourceIdPriority,
              RcpOptCalendar & rcpCal,
              bool isGapGlut);
 void populateNASCO(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              int   nPeriods,
              RcpOptCalendar & rcpCal,
              bool considerMultSkills);
void populateFlexMix(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              const std::string & resourceFileName,
              const std::string & bomFileName,
              int   nPeriods,
              bool   prioritySubs,
	          bool resourceIdPriority,
              RcpOptCalendar & rcpCal);
void populateDemandEngagement(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              int   nPeriods, RcpOptCalendar & rcpCal);

void populate03Dec(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              const std::string & resourceFileName,
              const std::string & bomFileName,
              int   nPeriods,
              bool  tfSubs,
              bool  globalSubstitution,
              bool  resourceIdPriority,
              RcpOptCalendar & rcpCal,
              bool hasResourceCosts,
              bool isGapGlut,
			  bool portfolio);
void populate(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              RcpOptCalendar & rcpCal);


std::string createEngagementName(std::vector<std::string> resourceAttributeVector);
void addFlextibleDemand(std::vector<std::string> resourceAttributeVector, int period, float quantity);
//std::vector<std::pair<std::vector<std::string>,float> > getAltSkills( std::string country, std::string resourceType, std::string jobRole, std::string primarySkillSet);
FlexSkillsObject getAltSkills(std::string jobRole, std::string primarySkillSet,MapStringToFlexSkillsObject map);
float getAltSkillsFraction(std::string jobRole, std::string primarySkillSet, std::string skillSet);
RCPvectorString replaceSkillSet(RCPvectorString names,int skillSetPosition,std::string alternateSkillSet);

void readFlexSkillsFile(
              RCPproblem & prob, 
              std::string fileName);

void readSubsFile(
              RCPproblem & prob, 
              const SCOcsvFormatFile & file,
              const std::string & resourceIdName);

#endif
@


1.43
log
@changes for nasco multiple skills
@
text
@d82 2
a83 1
              bool isGapGlut);
@


1.42
log
@checked in some NASCO specific code
@
text
@d52 2
a53 1
              RcpOptCalendar & rcpCal);
@


1.41
log
@changes for deal hub example (demandengagement format)
@
text
@d47 6
@


1.40
log
@some changes for flex mix
@
text
@d57 5
@


1.39
log
@more support of flex mix. Now actually reading the skills file.
@
text
@d81 1
a81 1
FlexSkillsObject getAltSkills( std::string country, std::string resourceType, std::string jobRole, std::string primarySkillSet,MapStringToFlexSkillsObject map);
@


1.38
log
@getting the flex mix stuff working. Seems to be pretty close to correct
@
text
@d10 4
a13 1

d33 1
d80 2
a81 1
std::vector<std::pair<std::vector<std::string>,float> > getAltSkills( std::string country, std::string resourceType, std::string jobRole, std::string primarySkillSet);
d85 3
d89 1
a89 1
  void readSubsFile(
@


1.37
log
@flexible mix groups. Beginning changes
@
text
@d75 1
@


1.36
log
@skeleton for flexible mix changes
@
text
@d52 1
a52 2
              RcpOptCalendar & rcpCal,
              bool optimalSolutionMethod);
d75 1
a75 1
std::vector<std::string> getAltSkills(std::string jobRole, std::string primarySkillSet);
@


1.35
log
@simplify and rationalize the logic for what params are acceptable together. Also fixed up the default leadtime/costs for the various scenarios.
@
text
@d43 11
d76 3
@


1.34
log
@removed some unused methods in populate, and added a new function to riskanalysis
@
text
@d41 2
a42 1
              RcpOptCalendar & rcpCal);
d55 2
a56 1
              int hasResourceCosts);
@


1.33
log
@changes to merge various formats together
@
text
@d61 1
a61 1
std::string createEngagementName();
a62 1
std::string createEngagementName(std::vector<std::string> resourceAttributeVector, std::string demandType);
@


1.32
log
@modifications to support ER5 format
@
text
@a49 1
              bool  pSubs,
d51 1
@


1.31
log
@folding together original "engagement" oriented files with new ER5 files
@
text
@d6 1
a6 1
#include "gnrlSubsFile.h"
d51 1
@


1.30
log
@more changes to support demandType
@
text
@d42 1
a42 8
void populate04Jun(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              const std::string & resourceFileName,
              const std::string & bomFileName,
              int   nPeriods,
              RcpOptCalendar & rcpCal);
d50 4
a53 1
              RcpOptCalendar & rcpCal);
@


1.29
log
@some changes to support ER5; adding columns for demand type, flags for substituion
@
text
@d66 1
@


1.28
log
@adding timing capability
@
text
@d40 9
a48 1
	      bool resourceIdPriority,
@


1.27
log
@updates for more genearlity in the substitution
@
text
@d8 1
@


1.26
log
@added in one engagement per bom entry. Ifdef'd out currently
@
text
@d6 1
a6 1
#include "skillSubsFile.h"
d62 1
a62 2
                  const std::string & resourceIdName,    
              const std::string & subsName );
@


1.25
log
@accept UNSPECIFIED and PRIORITY
@
text
@d56 1
a56 1

@


1.24
log
@cleaner handling of match=0; just set that field to "unmatched"
@
text
@d18 4
@


1.23
log
@New file:  resourceIdPriorityFile.h  defines a new input file format for resource identifier priorities
and added code to read in this file in populate

Changed the spelling of ...Identifer... to ...Identifier...

Modified priorityGapGlut1(), but this is not invoked yet.
@
text
@d18 1
@


1.22
log
@more calendar handling
@
text
@d34 1
@


1.21
log
@preparation for handling calendar style period information.
@
text
@a17 1
                      RcpOptCalendar::CalendarType calendarType,
a33 1
              RcpOptCalendar::CalendarType calendarType,
a41 1
              RcpOptCalendar::CalendarType calendarType,
@


1.20
log
@added methods
void setResourceIdentifierSubstitutePriority(const std::string & identifierName, int priority );
int getResourceIdentifierSubstitutePriority(const std::string & identifierName )const;
@
text
@d18 2
a19 1
                      RcpOptCalendar::CalendarType calendarType
d35 2
a36 1
              RcpOptCalendar::CalendarType calendarType);
d44 2
a45 1
              RcpOptCalendar::CalendarType calendarType);
d49 2
a50 1
              const std::string & odir);
@


1.19
log
@allow variable names for resource and bom (supply and demand)
@
text
@d7 1
d17 2
a18 1
                      float acquireCost   // value to set acquire cost
d33 2
a34 1
              bool   prioritySubs);
d41 2
a42 1
              int   nPeriods);
@


1.18
log
@changes to the format of the priority substitution files; cleaner and neater
@
text
@d28 2
d36 2
@


1.17
log
@adding support for priority substitution on bom arcs
@
text
@a19 5
                      const std::string & rootFileName,
                      const std::string & substitutionFileName
                      );
void readPrioritySubstitutionFile(
                      RCPproblem & prob, 
d22 1
@


1.16
log
@adding a "prioritySubstitution" flag to the global attribute file for
the feb04 format. To be used later.
@
text
@d18 5
@


1.15
log
@Removed from populate references to
  addSkillSubs
  setSkillSubsCost
  setSkillSubsLeadTime
  addLocationSubs
  setLocationSubsCost
  setLocationSubsLeadTime
  etc
I believe populate is now just using the general methods
@
text
@d18 5
d27 2
a28 1
              int   nPeriods);
@


1.14
log
@added function readResourceFile which is used be all populate functions.
@
text
@d39 3
a41 5
              const SCOcsvFormatFile & file,    
              const std::string & subsName,
              void (RCPproblem::*addSubsFunc)(const std::string &, const std::string &),         
              void (RCPproblem::*setSubsCostFunc)(const std::string &, const std::string &, float),         
              void (RCPproblem::*setSubsLeadTimeFunc)(const std::string &, const std::string &, float) );
@


1.13
log
@removing some extraneous formats and fixing some writing of output files
@
text
@d9 5
d15 3
@


1.12
log
@change to "getEngagementName"
@
text
@d8 2
a9 10
void populate04Jan(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              int   nPeriods);
void populate04JanSubs(
              RCPproblem & prob, 
              const std::string & idir, 
              const std::string & odir,
              int   nPeriods);
@


1.11
log
@more updates for the additional fields
@
text
@d33 1
a33 2
std::string createEngagementName(std::string jobRole, std::string skillSet, std::string LOB, std::string source, std::string resourceLoc);
std::string createEngagementName(std::string jobRole, std::string skillSet, std::string LOB, std::string source, std::string region, std::string country, std::string city, std::string reportingUnit, std::string band, std::string global, std::string competency, std::string industry);
@


1.10
log
@new fields
@
text
@d34 1
a34 1
std::string createEngagementName(std::string jobRole, std::string skillSet, std::string LOB, std::string source, std::string region, std::string country, std::string city, std::string reportingUnit, int band, std::string global, std::string competency, std::string industry);
@


1.9
log
@preparation for new "complete" format (with more fields)
@
text
@d34 1
@


1.8
log
@added another format to populate, where resources have costs, and
explicit substitution matching is performed
@
text
@d18 5
@


1.7
log
@added fileformat globalAttr flag. Call populateSimple for example_simple
@
text
@d8 1
a8 1
void populate(
d11 3
a13 2
              const std::string & odir);
void populate04Jan(
d23 5
@


1.6
log
@Changed the interpretation of the resource supply to be "Ron's supply" and updated the code for that.  Also, compute gap/glut and print the result in the mrpO.csv file.
@
text
@d12 12
@


1.5
log
@ jobRoleSubs:
-Added file class for reading.
-Created new datafiles.
-in rcpProblem added add/set/get methods
-populateRCP added stanza to read file and invoke add & set methods.
Have not yet added code for adding substitute arcs to wit model.
@
text
@d22 1
a22 1
#endif@


1.4
log
@Added globalAttr file containing algorithm and nPeriods
@
text
@d1 6
d12 11
@


1.3
log
@Added the concept of lateAllowance to allow us to set the ShipReward for a fixed number of periods following the due date.  The lateAllowance value is stored in the engagementAppData.  The engagementFile was modified to add the new field.  I added a CR/LF to the end of populateRCP.h to avoid the warning message from the Linux compiler.
@
text
@d5 1
a5 2
              const std::string & odir, 
              int nPeriods);
@


1.2
log
@changed signature on populateRCP function so rcpProblem is passed by reference.
@
text
@d6 1
a6 1
              int nPeriods);@


1.1
log
@moved populate function to a separate file (not part of rcpProblem)
@
text
@d2 5
a6 1
void populate(RCPproblem prob, std::string idir, std::string odir, int nPeriods);@

