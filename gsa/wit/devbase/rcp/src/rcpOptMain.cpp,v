head	1.9;
access;
symbols;
locks; strict;
comment	@// @;


1.9
date	2004.05.14.13.34.19;	author dpc;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.23.18.13.39;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.15.13.11.15;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.09.23.43.43;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.18.17.08.40;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.17.18.21.24;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.16.20.48.21;	author dpc;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.10.20.50.20;	author dpc;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.10.19.13.31;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.9
log
@More checks were added to catch potential WIT severe or fatal issues.  You must update WIT for these changes to work.
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include <iostream>
#include <vector>
#include <string>
#include "rcpOpt.h"
#include "rcpOptException.h"

int
main (int argc, char * argv[])
{
  
  int retVal = 0;
  
  // Put Parms into a vector
  std::vector<std::string> args;
  for (int i=0; i<argc; i++) 
    args.push_back(argv[i]);
  
  {
    // Check parm passed to program
    bool parmError = false;
    
    if ( args.size()> 1 ) {
      if (args[1]=="?" ) {
        parmError = true; // set flag to provide usage info
      }
    }
    
    if ( ! parmError ) {
      if ( args.size()!=2 ) {
        // Wrong number of parms. Write message
        std::cerr 
          <<"-------------------------------------------------------"  <<std::endl
          <<"Wrong number of parmeters specified"                      <<std::endl
          <<"  Number parameters specified: " <<args.size()-1          <<std::endl
          <<"  Expected number of parameters: 1"                       <<std::endl
          <<"-------------------------------------------------------"  <<std::endl;
        parmError = true;
      }
    }
    
    
    
    if ( parmError ) {
      // Write correct usage
      std::cerr 
        <<"-------------------------------------------------------"  <<std::endl
        <<argv[0] <<" dataDirectory "                                <<std::endl
        <<"  where:"                                                 <<std::endl
        <<"    dataDirectory:"                                       <<std::endl
        <<"      Directory where input files are located and"        <<std::endl
        <<"      output files are written."                          <<std::endl
        <<"  example usage:"                                         <<std::endl
        <<"    " <<argv[0] <<" example_finalformat"                  <<std::endl
        <<"-------------------------------------------------------"  <<std::endl;
      return 1;
    }
  }
  
  try {
    // Call rcpOpt that has exception handling
    rcpOpt(args[1].c_str());
  }
  catch ( RcpOptException e ) {
    std::cerr <<e.what() <<std::endl;
    retVal = 1;
  }
  return retVal;

}
@


1.8
log
@Updated api to only have method rcpOpt which throws an exception
@
text
@d73 1
@


1.7
log
@Modified to distribute example_finalformat data directory rather than example_tucson
@
text
@d10 1
d66 1
a66 1
    rcpOptExp(args[1].c_str());
@


1.6
log
@Added new api rcpOptExp.
This is the same as rcpOpt except this one throws an exception
@
text
@d57 1
a57 1
        <<"    " <<argv[0] <<" example_tucson"                       <<std::endl
@


1.5
log
@Removed ifdef'ed out code
@
text
@a10 1

d15 1
a15 1
  //std::cout <<"rcp2 Build date: " <<__DATE__ <<std::endl;
a61 1

d63 9
a71 2
  rcpOpt(args[1].c_str());
  return 0;
@


1.4
log
@Changed [sg]et[Gap,Glut]Quantity to [sg]etResource[Gap,Glut]ResourceQuantity
@
text
@a67 459


#if 0
#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif


#include "wit.h"

#include <map>
#include <vector>

#include <assert.h>
#include <iostream>
#include <float.h>
#include <math.h>


#include "rcpProblem.h"
#include "populateRCP.h"
#include "globalAttrFile.h"


int
main (int argc, char * argv[])
{
  
  std::cout <<"rcp2 Build date: " <<__DATE__ <<std::endl;
  
  // Put Parms into a vector
  std::vector<std::string> args;
  for (int i=0; i<argc; i++) 
    args.push_back(argv[i]);
  
  {
    // Check parm passed to program
    bool parmError = false;
    
    if ( args.size()> 1 ) {
      if (args[1]=="?" ) {
        parmError = true; // set flag to provide usage info
      }
    }
    
    if ( ! parmError ) {
      if ( args.size()!=2 ) {
        // Wrong number of parms. Write message
        std::cerr 
          <<"-------------------------------------------------------"  <<std::endl
          <<"Wrong number of parmeters specified"                      <<std::endl
          <<"  Number parameters specified: " <<args.size()-1          <<std::endl
          <<"  Expected number of parameters: 1"                       <<std::endl
          <<"-------------------------------------------------------"  <<std::endl;
        parmError = true;
      }
    }
    
    
    
    if ( parmError ) {
      // Write correct usage
      std::cerr 
        <<"-------------------------------------------------------"  <<std::endl
        <<argv[0] <<" dataDirectory "                                <<std::endl
        <<"  where:"                                                 <<std::endl
        <<"    dataDirectory:"                                       <<std::endl
        <<"      Directory where input files are located and"        <<std::endl
        <<"      output files are written."                          <<std::endl
        <<"  example usage:"                                         <<std::endl
        <<"    " <<argv[0] <<" example_tucson"                       <<std::endl
        <<"-------------------------------------------------------"  <<std::endl;
      return 1;
    }
  }
  
  std::string outputDirectory=args[1];
  std::string inputDirectory=args[1];
  
  RCPproblem rcpProb;
  populate(rcpProb, inputDirectory, outputDirectory);

  // Get the name of the problem to be solved and the algorithm method
  std::string globalAttrFileName = inputDirectory + "/globalAttr.csv";
  RCPglobalAttrFile globalAttrFile(globalAttrFileName);
  std::string format = globalAttrFile.fieldAsString("fileFormat","attrValue");
  std::string prob = globalAttrFile.fieldAsString("problem","attrValue");
  std::string alg = globalAttrFile.fieldAsString("algorithm","attrValue");

  // Check the name of the problem
  if ( prob!="resourceAction" && prob!="gapGlut" ) {
    // Write warning message
    std::cout 
      <<"-------------------------------------------------------"      <<std::endl
      <<"Warning: unknown problem specified."                          <<std::endl
      <<"   globalAttr filename: " <<globalAttrFile.filename()         <<std::endl
      <<"   problem specified: " <<prob                                <<std::endl
      <<"   allowed values: resourceAction gapGlut"                    <<std::endl
      <<"   resourceAction performed "                                 <<std::endl
      <<"-------------------------------------------------------"      <<std::endl;
    prob="resourceAction";
  }


  // Check the name of the algorithm to be used

  if ( alg!="optimalPlan" && alg!="priorityPlan" ) {
    // Write warning message
    std::cout 
      <<"-------------------------------------------------------"      <<std::endl
      <<"Warning: unknown algorithm specified."                        <<std::endl
      <<"   globalAttr filename: " <<globalAttrFile.filename()         <<std::endl
      <<"   algorithm specified: " <<alg                               <<std::endl
      <<"   allowed values: optimalPlan priorityPlan"                  <<std::endl
      <<"   resourceAction will be performed "                         <<std::endl
      <<"-------------------------------------------------------"      <<std::endl;
    alg="optimalPlan";
  }



  if (format=="04Feb") {
       // Is GapGlut Solve to be done?
       if ( prob=="gapGlut" )
         rcpProb.gapGlut04Feb();
       if ( prob=="resourceAction" )
         rcpProb.resourceAction04Feb(); 
  }
  else {
       // Is GapGlut Solve to be done?
       if ( prob=="gapGlut" )
         rcpProb.gapGlut();
       if ( prob=="resourceAction" )
         rcpProb.resourceAction();   
  }
  
  
  // Write Results
 
  if (format=="04Feb") {
  // Write resource plan
  if ( prob=="resourceAction" )
  {
    // Open file
    std::string resourcePlanFileName = outputDirectory+"/resourceO.csv";
    FILE * resourcePlanFilePtr = fopen(resourcePlanFileName.c_str(),"w");
    
    // Write header record
    std::string heading="\"jobRole\",\"skillSet\","
      "\"LOB\",\"source\","
      "\"region\",\"period\","
      "\"region\",\"country\","
      "\"city\",\"reportingUnit\","
      "\"band\",\"global\","
      "\"competency\",\"industry\","
      "\"supplyQuantity\",\"benchQuantity\","
      "\"workingQuantity\",\"acquireQuantity\""
      "\"releaseQuantity\""; 
    fprintf(resourcePlanFilePtr,"%s\n",heading.c_str());
    
    
    // Get list of all resources
    std::vector<std::string> jobRoles,skillSets,LOBs,sources,regions,countries,cities,reportingUnits,bands,globals,competencies,industries;
    rcpProb.getResourceNames(jobRoles,skillSets,LOBs,sources,regions,countries,cities,reportingUnits,bands,globals,competencies,industries);

  
    // loop once for each resource
    int r;
    for ( r=0; r<jobRoles.size(); ++r ) {
      std::vector<float> supQty = rcpProb.getResourceSupplyQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      std::vector<float> benchQty = rcpProb.getResourceBenchQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      std::vector<float> workingQty = rcpProb.getResourceWorkingQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      std::vector<float> acquireQty =rcpProb.getResourceAcquireQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      std::vector<float> releaseQty =rcpProb.getResourceReleaseQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      
      for ( int t=0; t<supQty.size(); t++ ) {
        fprintf(resourcePlanFilePtr,
          "\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",%d,%f,%f,%f,%f,%f,\n",
          jobRoles[r].c_str(),skillSets[r].c_str(),LOBs[r].c_str(),sources[r].c_str(),regions[r].c_str(),
          countries[r].c_str(),cities[r].c_str(),reportingUnits[r].c_str(),bands[r].c_str(),globals[r].c_str(),competencies[r].c_str(),industries[r].c_str(),
          t,
          supQty[t],benchQty[t],workingQty[t],acquireQty[t],releaseQty[t]);
      } // finished t loop
      
    } // end of r loop
    
    fclose(resourcePlanFilePtr);
  } // end of write resource plan block


  // Write engagment plan
  if ( prob=="resourceAction" )
  {
    // Open file
    std::string engagementPlanFileName = outputDirectory+"/engagementO.csv";
    FILE * engagementPlanFilePtr = fopen(engagementPlanFileName.c_str(),"w");
    
    // Write header record
    std::string heading="\"engagementName\",\"engLocation\",\"engagementExecuted\",\"reqStartPeriod\",\"actStartPeriod\""; 
    fprintf(engagementPlanFilePtr,"%s\n",heading.c_str());
    
    
    // Get list of all engagements
    std::vector<std::string> engagementNames;
    
    rcpProb.getEngagementNames(engagementNames);
    
    // loop once for each engagement
    int e;
    bool engagementExecuted;
    int reqStartPeriod;
    int actStartPeriod;
    for ( e=0; e<engagementNames.size(); ++e ) {
      engagementExecuted = rcpProb.getEngagementExecuted(engagementNames[e]);
      reqStartPeriod = rcpProb.getEngagementRequestedStartPeriod(engagementNames[e]);
      actStartPeriod = rcpProb.getEngagementStartPeriod(engagementNames[e]);
      std::string engLoc = rcpProb.getEngagementLocation(engagementNames[e]);
      fprintf(engagementPlanFilePtr,
        "\"%s\",\"%s\",%d,%d, %d\n",
        engagementNames[e].c_str(),engLoc.c_str(),engagementExecuted, reqStartPeriod, actStartPeriod);
      
    } // end of e loop
    
    fclose(engagementPlanFilePtr);
  } // end of write engagement plan block  
  
  
  if ( prob=="gapGlut" )
  {
    // Open file
    std::string mrpPlanFileName = outputDirectory+"/mrpO.csv";
    FILE * mrpPlanFilePtr = fopen(mrpPlanFileName.c_str(),"w");
    
    //    std::string heading="\"jobRole\",\"skillSet\",\"LOB\",\"source\",\"locationName\",\"period\","
    //"\"supplyQuantity\",\"benchQuantity\","
    //"\"workingQuantity\",\"acquireQuantity\""
    //"\"releaseQuantity\""; 
    
    
    
    
    // this will work for all formats; one will only find the "dummy" fields in 
    // format 04Jan
    
    // Get list of all resources
    std::vector<std::string> jobRoles,skillSets,LOBs,sources,regions,countries,cities,reportingUnits,bands,globals,competencies,industries;
    rcpProb.getResourceNames(jobRoles,skillSets,LOBs,sources,regions,countries,cities,reportingUnits,bands,globals,competencies,industries);
    // Write header record
    //std::string heading="\"jobRole\",\"skillSet\",\"LOB\",\"source\",\"locationName\",\"period\",\"supplyQty\",\"grossReq\",\"gap\",\"glut\""; 
    //fprintf(mrpPlanFilePtr,"%s\n",heading.c_str());
    fprintf(mrpPlanFilePtr,"\"jobRole\",");
    fprintf(mrpPlanFilePtr,"\"skillSet\",");
    fprintf(mrpPlanFilePtr,"\"LOB\",");
    fprintf(mrpPlanFilePtr,"\"source\",");
    fprintf(mrpPlanFilePtr,"\"region\",");
    fprintf(mrpPlanFilePtr,"\"country\",");
    fprintf(mrpPlanFilePtr,"\"city\",");
    fprintf(mrpPlanFilePtr,"\"reportingUnit\",");
    fprintf(mrpPlanFilePtr,"\"band\",");
    fprintf(mrpPlanFilePtr,"\"global\",");
    fprintf(mrpPlanFilePtr,"\"competency\",");
    fprintf(mrpPlanFilePtr,"\"industry\",");
    fprintf(mrpPlanFilePtr,"\"period\",\"supplyQty\",\"grossReq\",\"gap\",\"glut\"\n");
    // loop once for each resource
    int r;
    for ( r=0; r<jobRoles.size(); ++r ) {
      std::vector<float> grossQty = rcpProb.getResourceMrpQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      std::vector<float> gapQty = rcpProb.getResourceGapQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      std::vector<float> glutQty = rcpProb.getResourceGlutQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      std::vector<float> exogSup = rcpProb.getResourceSupplyQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      for ( int t=0; t<grossQty.size(); t++ ) {
        //fprintf(mrpPlanFilePtr,
          //"\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",%d,%f,%f,%f,%f,%f\n",
          //jobRoles[r].c_str(),skillSets[r].c_str(),LOBs[r].c_str(),sources[r].c_str(),resourceLocs[r].c_str(),
          //t, 
          //exogSup[t],grossQty[t],gapQty[t],glutQty[t],workingQty[t]);
        fprintf(mrpPlanFilePtr,"\"%s\",",jobRoles[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",skillSets[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",LOBs[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",sources[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",regions[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",countries[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",cities[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",reportingUnits[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",bands[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",globals[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",competencies[r].c_str());
        fprintf(mrpPlanFilePtr,"\"%s\",",industries[r].c_str());
        fprintf(mrpPlanFilePtr,
          "%d,%f,%f,%f,%f\n",
          t, 
          exogSup[t],grossQty[t],gapQty[t],glutQty[t]);

      } // finished t loop
      
    } // end of r loop
    
    fclose(mrpPlanFilePtr);
  } // end of write mrp plan block
  
  }
  else { // original format 
  // Write resource plan
  if ( prob=="resourceAction" )
  {
    // Open file
    std::string resourcePlanFileName = outputDirectory+"/resourceO.csv";
    FILE * resourcePlanFilePtr = fopen(resourcePlanFileName.c_str(),"w");
    
    // Write header record
    std::string heading="\"jobRole\",\"skillSet\",\"LOB\",\"source\",\"locationName\",\"period\","
      "\"supplyQuantity\",\"benchQuantity\","
      "\"workingQuantity\",\"acquireQuantity\""
      "\"releaseQuantity\""; 
    fprintf(resourcePlanFilePtr,"%s\n",heading.c_str());
    
    
    // Get list of all resources
    std::vector<std::string> jobRoles,skillSets,LOBs,sources,resourceLocs;
    rcpProb.getResourceNames(jobRoles,skillSets,LOBs,sources,resourceLocs);

  
    // loop once for each resource
    int r;
    for ( r=0; r<jobRoles.size(); ++r ) {
      std::vector<float> supQty = rcpProb.getResourceSupplyQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      std::vector<float> benchQty = rcpProb.getResourceBenchQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      std::vector<float> workingQty = rcpProb.getResourceWorkingQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      std::vector<float> acquireQty =rcpProb.getResourceAcquireQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      std::vector<float> releaseQty =rcpProb.getResourceReleaseQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      
      for ( int t=0; t<supQty.size(); t++ ) {
        fprintf(resourcePlanFilePtr,
          "\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",%d,%f,%f,%f,%f,%f\n",
          jobRoles[r].c_str(),skillSets[r].c_str(),LOBs[r].c_str(),sources[r].c_str(),resourceLocs[r].c_str(),
          t,
          supQty[t],benchQty[t],workingQty[t],acquireQty[t],releaseQty[t]);
      } // finished t loop
      
    } // end of r loop
    
    fclose(resourcePlanFilePtr);
  } // end of write resource plan block


  // Write engagment plan
  if ( prob=="resourceAction" )
  {
    // Open file
    std::string engagementPlanFileName = outputDirectory+"/engagementO.csv";
    FILE * engagementPlanFilePtr = fopen(engagementPlanFileName.c_str(),"w");
    
    // Write header record
    std::string heading="\"engagementName\",\"engLocation\",\"engagementExecuted\",\"reqStartPeriod\",\"actStartPeriod\""; 
    fprintf(engagementPlanFilePtr,"%s\n",heading.c_str());
    
    
    // Get list of all engagements
    std::vector<std::string> engagementNames;
    
    rcpProb.getEngagementNames(engagementNames);
    
    // loop once for each engagement
    int e;
    bool engagementExecuted;
    int reqStartPeriod;
    int actStartPeriod;
    for ( e=0; e<engagementNames.size(); ++e ) {
      engagementExecuted = rcpProb.getEngagementExecuted(engagementNames[e]);
      reqStartPeriod = rcpProb.getEngagementRequestedStartPeriod(engagementNames[e]);
      actStartPeriod = rcpProb.getEngagementStartPeriod(engagementNames[e]);
      std::string engLoc = rcpProb.getEngagementLocation(engagementNames[e]);
      fprintf(engagementPlanFilePtr,
        "\"%s\",\"%s\",%d,%d, %d\n",
        engagementNames[e].c_str(),engLoc.c_str(),engagementExecuted, reqStartPeriod, actStartPeriod);
      
    } // end of e loop
    
    fclose(engagementPlanFilePtr);
  } // end of write engagement plan block  
  
  
  if ( prob=="gapGlut" )
  {
    // Open file
    std::string mrpPlanFileName = outputDirectory+"/mrpO.csv";
    FILE * mrpPlanFilePtr = fopen(mrpPlanFileName.c_str(),"w");
    
    //    std::string heading="\"jobRole\",\"skillSet\",\"LOB\",\"source\",\"locationName\",\"period\","
    //"\"supplyQuantity\",\"benchQuantity\","
    //"\"workingQuantity\",\"acquireQuantity\""
    //"\"releaseQuantity\""; 
    
    
    
    
    // this will work for all formats; one will only find the "dummy" fields in 
    // format 04Jan
    
    // Get list of all resources
    std::vector<std::string> jobRoles,skillSets,LOBs,sources,resourceLocs;
    rcpProb.getResourceNames(jobRoles,skillSets,LOBs,sources,resourceLocs);
    // Write header record
    //std::string heading="\"jobRole\",\"skillSet\",\"LOB\",\"source\",\"locationName\",\"period\",\"supplyQty\",\"grossReq\",\"gap\",\"glut\""; 
    //fprintf(mrpPlanFilePtr,"%s\n",heading.c_str());
    if (strcmp(jobRoles[0].c_str(),"dummy"))
       fprintf(mrpPlanFilePtr,"\"jobRole\",");
    if (strcmp(skillSets[0].c_str(),"dummy"))
       fprintf(mrpPlanFilePtr,"\"skillSet\",");
    if (strcmp(LOBs[0].c_str(),"dummy"))
       fprintf(mrpPlanFilePtr,"\"LOB\",");
    if (strcmp(sources[0].c_str(),"dummy"))
       fprintf(mrpPlanFilePtr,"\"source\",");
    if (strcmp(resourceLocs[0].c_str(),"dummy"))
       fprintf(mrpPlanFilePtr,"\"locationName\",");
    //std::string heading="\"jobRole\",\"skillSet\",\"LOB\",\"source\",\"locationName\",\"period\",\"supplyQty\",\"grossReq\",\"gap\",\"glut\""; 
    fprintf(mrpPlanFilePtr,"\"period\",\"supplyQty\",\"grossReq\",\"gap\",\"glut\"\n");
    // loop once for each resource
    int r;
    for ( r=0; r<jobRoles.size(); ++r ) {
      std::vector<float> grossQty = rcpProb.getResourceMrpQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      std::vector<float> gapQty = rcpProb.getResourceGapQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      std::vector<float> glutQty = rcpProb.getResourceGlutQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      std::vector<float> exogSup = rcpProb.getResourceSupplyQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      for ( int t=0; t<grossQty.size(); t++ ) {
        //fprintf(mrpPlanFilePtr,
          //"\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",%d,%f,%f,%f,%f,%f\n",
          //jobRoles[r].c_str(),skillSets[r].c_str(),LOBs[r].c_str(),sources[r].c_str(),resourceLocs[r].c_str(),
          //t, 
          //exogSup[t],grossQty[t],gapQty[t],glutQty[t]);
        if (strcmp(jobRoles[r].c_str(),"dummy"))
          fprintf(mrpPlanFilePtr,"\"%s\",",jobRoles[r].c_str());
        if (strcmp(skillSets[r].c_str(),"dummy"))
          fprintf(mrpPlanFilePtr,"\"%s\",",skillSets[r].c_str());
        if (strcmp(LOBs[r].c_str(),"dummy"))
          fprintf(mrpPlanFilePtr,"\"%s\",",LOBs[r].c_str());
        if (strcmp(sources[r].c_str(),"dummy"))
          fprintf(mrpPlanFilePtr,"\"%s\",",sources[r].c_str());
        if (strcmp(resourceLocs[r].c_str(),"dummy"))
          fprintf(mrpPlanFilePtr,"\"%s\",",resourceLocs[r].c_str());
        fprintf(mrpPlanFilePtr,
          "%d,%f,%f,%f,%f\n",
          t, 
          exogSup[t],grossQty[t],gapQty[t],glutQty[t]);

      } // finished t loop
      
    } // end of r loop
    
    fclose(mrpPlanFilePtr);
  } // end of write mrp plan block
  }  
  
  
  std::cout <<"rcp application is finished." <<std::endl;
  return 0;
}
#endif
@


1.3
log
@Added bench, working, acquire and release quantities to the app data of the bench and working resources.  Also cleaned up the merge conflicts.
@
text
@d335 3
a337 3
      std::vector<float> grossQty = rcpProb.getMrpQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      std::vector<float> gapQty = rcpProb.getGapQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
      std::vector<float> glutQty = rcpProb.getGlutQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
d489 3
a491 3
      std::vector<float> grossQty = rcpProb.getMrpQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      std::vector<float> gapQty = rcpProb.getGapQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
      std::vector<float> glutQty = rcpProb.getGlutQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
@


1.2
log
@Updated appl.mk for building rcpOptMain.  Changed the argument of rcpOpt to char const *.
@
text
@d338 1
a338 1
      std::vector<float> exogSup = rcpProb.getExogenousResourceSupplyQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],regions[r],countries[r],cities[r],reportingUnits[r],bands[r],globals[r],competencies[r],industries[r]);
d492 1
a492 1
      std::vector<float> exogSup = rcpProb.getExogenousResourceSupplyQuantity(jobRoles[r],skillSets[r],LOBs[r],sources[r],resourceLocs[r]);
@


1.1
log
@- rcp.cpp renamed to rcpOptMain.cpp. This is the rcp standalone executable. (rcp.cpp remains for now in repository but is unused).
- removed main program rcpInvoke.cpp, because rcpOptMain will be used.(rcpInvoke.cpp remains for now in repository but is unused).
- invokeRcp.cpp was renamed rcpOpt.cpp (invokeRcp.cpp remains for now in the repository but is unused)
- rcpAlone.h was renamed rcpOpt.h (rcpAlone.h remains for now in repository but is unused).

- mds project rcp was replaced with project rcpOptMain.
- new mds project named rcpOptDll was created.  This project exposes the public members of RCPproblem and function rcpOpt(String directory);
@
text
@d526 1
a526 1
#endif@

