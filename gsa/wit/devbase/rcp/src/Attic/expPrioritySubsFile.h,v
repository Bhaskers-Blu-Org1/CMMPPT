head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.07.14.16.16.51;	author gresh;	state dead;
branches;
next	1.1;

1.1
date	2004.06.24.18.18.54;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.2
log
@changes to merge various formats together
@
text
@#ifndef RCPexpPrioritySubsFile_h
#define RCPexpPrioritySubsFile_h

#include "scoFile.h"


class RCPexpPrioritySubsFile : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(resourceIdName);
  getFieldH(resourceIdValue);
  getIntFieldH(priority);
  getFloatFieldH(leadTime);
  getFloatFieldH(cost);
  
  // preferred constructor
  RCPexpPrioritySubsFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(5);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & resourceIdName,
    const std::string & resourceIdValue
    ) 
  {
    std::string retVal = 
      resourceIdName  + "!@@#$%" + 
      resourceIdValue + "!@@#$%" ;
    return retVal;
  };
  
  // destructor
  ~RCPexpPrioritySubsFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPexpPrioritySubsFile file("../data/ER5/priority.csv");
    
    // Test reading first record

    assert( file.resourceIdName(0) =="source");
    assert( file.resourceIdValue(0) == "IBM" );
    assert( file.priorityAsInt(0) == 1 );
    assert( file.costAsFloat(0) == 0 );
    assert( file.leadTimeAsFloat(0) == 0 );
    assert( file.resourceIdName(1) =="source");
    assert( file.resourceIdValue(1) == "Cont" );
    assert( file.priorityAsInt(1) == 4 );
    assert( file.costAsFloat(1) == 0 );
    assert( file.leadTimeAsFloat(1) == 0 );

    
    // Test reading record by key    
    std::string key = file.key("global","non-global");
    assert( file.priorityAsInt(key) == 2 );
    assert( file.costAsFloat(key) == 0 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      resourceIdName(recNum),
      resourceIdValue(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPexpPrioritySubsFile();
  
  // copy constructor  -- don't use!
  RCPexpPrioritySubsFile( const RCPexpPrioritySubsFile& source );
  
  // assignment operator -- don't use!
  RCPexpPrioritySubsFile&
  operator=(const RCPexpPrioritySubsFile& rhs);

  
};



class RCPexpPrioritySubsFileIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(resourceIdName);
  getFieldFileWithIteratorH(resourceIdValue);
  getIntFieldFileWithIteratorH(priority);
  getFloatFieldFileWithIteratorH(cost);
  getFloatFieldFileWithIteratorH(leadTime);
  
  // preferred constructor
  RCPexpPrioritySubsFileIterator(const RCPexpPrioritySubsFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPexpPrioritySubsFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPexpPrioritySubsFile file("../data/ER5/priority.csv");
    RCPexpPrioritySubsFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
                
      assert( fileIter.resourceIdName() == "source");
      assert( fileIter.resourceIdValue() == "IBM");
      assert( fileIter.priorityAsInt() == 1);
      assert( fileIter.costAsFloat() == 0);
      assert( fileIter.leadTimeAsFloat() == 0);
          
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPexpPrioritySubsFileIterator();
  
  // copy constructor  -- don't use!
  RCPexpPrioritySubsFileIterator( const RCPexpPrioritySubsFileIterator& source );
  
  // assignment operator -- don't use!
  RCPexpPrioritySubsFileIterator&
  operator=(const RCPexpPrioritySubsFileIterator& rhs);

  
};
#endif
@


1.1
log
@modifications to support ER5 format
@
text
@@

