head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2004.03.30.23.42.48;	author fasano;	state dead;
branches;
next	1.3;

1.3
date	2004.03.10.19.13.31;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.09.17.00.17;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.09.14.06.23;	author dpc;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Cleaning up last vestiges of old style code. Removed dead files and if defed out sections.
@
text
@#if 0
#include <iostream>
#include <vector>
#include "rcpAlone.h"


int main (int argc, char * argv[])
{
  std::cout <<"rcp2 Build date: " <<__DATE__ <<std::endl;
  
  // Put Parms into a vector
  std::vector<std::string> args;
  for (int i=0; i<argc; i++) 
    args.push_back(argv[i]);
  
  // Check parm passed to program
  bool parmError = false;
  
  if ( args.size()> 1 ) {
    if (!strcmp(argv[1],"?") ) {
      parmError = true; // set flag to provide usage info
    }
  }
  
  if ( ! parmError ) {
    if ( args.size()!=2 ) {
      // Wrong number of parms. Write message
      std::cerr 
	<<"-------------------------------------------------------"  <<std::endl
	<<"Wrong number of parmeters specified"                      <<std::endl
	<<"  Number parameters specified: " <<args.size()-1          <<std::endl
	<<"  Expected number of parameters: 1"                       <<std::endl
	<<"-------------------------------------------------------"  <<std::endl;
      parmError = true;
    }
  }
  
  
    
  if ( parmError ) {
    // Write correct usage
    std::cerr 
      <<"-------------------------------------------------------"  <<std::endl
      <<argv[0] <<" dataDirectory "                                <<std::endl
      <<"  where:"                                                 <<std::endl
      <<"    dataDirectory:"                                       <<std::endl
      <<"      Directory where input files are located and"        <<std::endl
      <<"      output files are written."                          <<std::endl
      <<"  example usage:"                                         <<std::endl
      <<"    " <<argv[0] <<" example_tucson"                       <<std::endl
      <<"-------------------------------------------------------"  <<std::endl;
    return 1;
  }

  std::string directoryName=args[1];
  int rcpReturnCode = invokeRCP(directoryName);
  if (rcpReturnCode == 0)
    {
      std::cout << "RCP ran successfully" << std::endl;
      return 0;
    }
  else
    {
      std::cout << "RCP failed" << std::endl;
      return 1;
    }
}
#endif
@


1.3
log
@- rcp.cpp renamed to rcpOptMain.cpp. This is the rcp standalone executable. (rcp.cpp remains for now in repository but is unused).
- removed main program rcpInvoke.cpp, because rcpOptMain will be used.(rcpInvoke.cpp remains for now in repository but is unused).
- invokeRcp.cpp was renamed rcpOpt.cpp (invokeRcp.cpp remains for now in the repository but is unused)
- rcpAlone.h was renamed rcpOpt.h (rcpAlone.h remains for now in repository but is unused).

- mds project rcp was replaced with project rcpOptMain.
- new mds project named rcpOptDll was created.  This project exposes the public members of RCPproblem and function rcpOpt(String directory);
@
text
@@


1.2
log
@change to parsing of input commands
@
text
@d1 1
d68 1
@


1.1
log
@A simple main program to invoke the api for RCP.
@
text
@d19 1
a19 1
    if (args[1]=="?" ) {
@

