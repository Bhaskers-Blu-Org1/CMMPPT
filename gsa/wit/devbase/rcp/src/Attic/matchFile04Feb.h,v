head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.05.11.15.40.07;	author gresh;	state dead;
branches;
next	1.2;

1.2
date	2004.03.15.20.12.30;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.08.14.34.25;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.3
log
@more progress to generalizing the 03Dec format
@
text
@#ifndef RCPmatchFile04Feb_h
#define RCPmatchFile04Feb_h

#include "scoFile.h"


class RCPmatchFile04Feb : public SCOcsvFormatFile {
public:

  // Fields 
  getIntFieldH(jobRoleMatch);
  getIntFieldH(skillSetMatch);
  getIntFieldH(lobMatch);
  getIntFieldH(sourceMatch);
  getIntFieldH(regionMatch);
  getIntFieldH(countryMatch);
  getIntFieldH(cityMatch);
  getIntFieldH(reportingUnitMatch);
  getIntFieldH(bandMatch);
  getIntFieldH(globalMatch);
  getIntFieldH(competencyMatch);
  getIntFieldH(industryMatch);
  
  // preferred constructor
  RCPmatchFile04Feb(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(12);
    commentRecords(true);
  };

 
  
  // destructor
  ~RCPmatchFile04Feb(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPmatchFile04Feb file("../data/example04feb/match.csv");
    
    // Test reading first record

    assert( file.jobRoleMatchAsInt(0)==1 );
    assert( file.skillSetMatchAsInt(0)==1 );
    assert( file.regionMatchAsInt(0)==0 );
    assert( file.sourceMatchAsInt(0)==1 );
    assert( file.lobMatchAsInt(0)==0 );
   

  }
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
    key( unsigned recNum ) const
  {
    std::string retVal = fieldAsString(recNum,"jobRoleMatch");
    return retVal;
  }
private:
  
  // default constructor -- don't use!
  RCPmatchFile04Feb();
  
  // copy constructor  -- don't use!
  RCPmatchFile04Feb( const RCPmatchFile04Feb& source );
  
  // assignment operator -- don't use!
  RCPmatchFile04Feb&
  operator=(const RCPmatchFile04Feb& rhs);

  
};



class RCPmatchFile04FebIterator : public SCOfileIterator {
public:
  
  // fields 
  getIntFieldFileWithIteratorH(jobRoleMatch);
  getIntFieldFileWithIteratorH(skillSetMatch);
  getIntFieldFileWithIteratorH(LOBMatch);
  getIntFieldFileWithIteratorH(sourceMatch);
  getIntFieldFileWithIteratorH(regionMatch);
  getIntFieldFileWithIteratorH(countryMatch);
  getIntFieldFileWithIteratorH(cityMatch);
  getIntFieldFileWithIteratorH(reportingUnitMatch);
  getIntFieldFileWithIteratorH(bandMatch);
  getIntFieldFileWithIteratorH(globalMatch);
  getIntFieldFileWithIteratorH(competencyMatch);
  getIntFieldFileWithIteratorH(industryMatch);
  
  // preferred constructor
  RCPmatchFile04FebIterator(const RCPmatchFile04Feb & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPmatchFile04FebIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPmatchFile04Feb file("../data/example04Feb/match.csv");
    RCPmatchFile04FebIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.jobRoleMatchAsInt()==1 );
        assert( fileIter.skillSetMatchAsInt()==1 );
        assert( fileIter.LOBMatchAsInt()==0 );
        assert( fileIter.sourceMatchAsInt()==1 );
        assert( fileIter.regionMatchAsInt()==0 );
        
        
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPmatchFile04FebIterator();
  
  // copy constructor  -- don't use!
  RCPmatchFile04FebIterator( const RCPmatchFile04FebIterator& source );
  
  // assignment operator -- don't use!
  RCPmatchFile04FebIterator&
  operator=(const RCPmatchFile04FebIterator& rhs);

  
};
#endif
@


1.2
log
@incremental changes in support of vector handling of resources
@
text
@@


1.1
log
@error in addresource
@
text
@d87 1
a87 1
  getIntFieldFileWithIteratorH(lobMatch);
d119 1
a119 1
        assert( fileIter.lobMatchAsInt()==0 );
@

