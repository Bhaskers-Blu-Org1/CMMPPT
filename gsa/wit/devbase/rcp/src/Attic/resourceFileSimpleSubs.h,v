head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.05.11.15.46.47;	author gresh;	state dead;
branches;
next	1.3;

1.3
date	2004.03.13.23.18.50;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.30.15.16.09;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.29.15.00.02;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove dead .h files
@
text
@#if 0
#ifndef RCPresourceFileSimpleSubs_h
#define RCPresourceFileSimpleSubs_h

#include "scoFile.h"


class RCPresourceFileSimpleSubs : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(jobRole);
  getFieldH(skillSet);
  getFieldH(LOB);
  getFieldH(source);
  getFieldH(resourceLocName);
  getIntFieldH(period);
  getFloatFieldH(supplyQuantity);
  getFloatFieldH(fixedCost);
  
  
  // preferred constructor
  RCPresourceFileSimpleSubs(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(8);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & jobRole,
    const std::string & skillSet,
    const std::string & LOB,
    const std::string & source,
    const std::string & locName,
    int period) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = jobRole + "!@@#$%" + skillSet + "!@@#$%"+ LOB + "!@@#$%" + source + "!@@#$%" + locName + "!@@#$%" + periodchar ;
    return retVal;
  };
  
  // destructor
  ~RCPresourceFileSimpleSubs(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPresourceFileSimpleSubs file("../data/example1/resource.csv");
    
    // Test reading first record

    assert( file.jobRole(0)=="r1" );
    assert( file.skillSet(0)=="s1" );
    assert( file.LOB(0)=="LOB1" );
    assert( file.source(0)=="src1" );
    assert( file.resourceLocName(0)=="l1" );
    assert( file.periodAsInt(0) == 1 );
    assert( file.supplyQuantityAsFloat(0) == 20.f );


    assert( file.jobRole(1)=="r1" );
    assert( file.skillSet(1)=="s1" );
    assert( file.LOB(1)=="LOB1" );
    assert( file.source(1)=="src1" );
    assert( file.periodAsInt(1) == 2 );
    assert( file.supplyQuantityAsFloat(1) == 40.f );
 


    assert( file.jobRole(2)=="r1" );
    assert( file.skillSet(2)=="s1" );
    assert( file.LOB(2)=="LOB1" );
    assert( file.source(2)=="src1" );
    assert( file.periodAsInt(2) == 3 );
    assert( file.supplyQuantityAsFloat(2) == 43.f );


    
    // Test reading record by key    
    std::string key = file.key("r2","s2","LOB2","src2","l1",1);
    assert( file.supplyQuantityAsFloat(key) == 10.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      jobRole(recNum),
      skillSet(recNum),
      LOB(recNum),
      source(recNum),
      resourceLocName(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPresourceFileSimpleSubs();
  
  // copy constructor  -- don't use!
  RCPresourceFileSimpleSubs( const RCPresourceFileSimpleSubs& source );
  
  // assignment operator -- don't use!
  RCPresourceFileSimpleSubs&
  operator=(const RCPresourceFileSimpleSubs& rhs);

  
};



class RCPresourceFileSimpleSubsIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(jobRole);
  getFieldFileWithIteratorH(skillSet);
  getFieldFileWithIteratorH(LOB);
  getFieldFileWithIteratorH(source);
  getFieldFileWithIteratorH(resourceLocName);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(supplyQuantity);
  getFloatFieldFileWithIteratorH(fixedCost);


  // preferred constructor
  RCPresourceFileSimpleSubsIterator(const RCPresourceFileSimpleSubs & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPresourceFileSimpleSubsIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPresourceFileSimpleSubs file("../data/example_simplesubs/resource.csv");
    RCPresourceFileSimpleSubsIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.jobRole()=="DetailA" );
        assert( fileIter.skillSet()=="s1" );
        assert( fileIter.LOB()=="LOB1" );
        assert( fileIter.source()=="src1" );
        assert( fileIter.resourceLocName()=="l1" );
        assert( fileIter.periodAsInt() == 0 );
        assert( fileIter.supplyQuantityAsFloat() == 20.f );
        assert( fileIter.fixedCostAsFloat() == 10.f);

        
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPresourceFileSimpleSubsIterator();
  
  // copy constructor  -- don't use!
  RCPresourceFileSimpleSubsIterator( const RCPresourceFileSimpleSubsIterator& source );
  
  // assignment operator -- don't use!
  RCPresourceFileSimpleSubsIterator&
  operator=(const RCPresourceFileSimpleSubsIterator& rhs);

  
};
#endif
#endif
@


1.3
log
@New file gnrlResourceFile.h with classes
  RCPgnrlResourceFile
  RCPgnrlResourceFileIterator
These classes generalize the reading of the various resource files
and replaces the use of files:
  resourceFile04Feb.h
  resourceFileSimple.h
  resourceFileSimpleSubs.h
  resourceFile.h
These replaced files are still in cvs but are ifdef'ed out.

RCPgnrlResourceFile's constructor is:
  RCPgnrlResourceFile(fileName,numResourceIdFields,x)
where x is true if the file contains fixedCost field.
@
text
@@


1.2
log
@added unittests for various of the new file iterators.
@
text
@d1 1
d111 1
a111 1
  RCPresourceFileSimpleSubs( const RCPresourceFileSimple& source );
d180 1
a180 1
  RCPresourceFileSimpleSubsIterator( const RCPresourceFileSimpleIterator& source );
d188 1
@


1.1
log
@another format, where resource cost is included
@
text
@d18 1
a18 1
  getFloatFieldH(supplyCost);
d132 1
a132 1
  getFloatFieldFileWithIteratorH(supplyCost);
d146 1
a146 1
    RCPresourceFileSimpleSubs file("../data/example6/resource.csv");
d154 1
a154 1
        assert( fileIter.jobRole()=="r1" );
d159 1
a159 1
        assert( fileIter.periodAsInt() == 1 );
d161 1
@

