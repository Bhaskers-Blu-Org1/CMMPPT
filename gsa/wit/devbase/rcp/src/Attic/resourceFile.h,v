head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2004.04.13.19.20.01;	author gresh;	state dead;
branches;
next	1.10;

1.10
date	2004.03.13.23.18.50;	author fasano;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.21.15.47.32;	author gresh;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.09.21.39.50;	author dpc;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.08.20.00.04;	author dpc;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.07.22.18.36;	author dpc;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.07.14.01.53;	author dpc;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.09.14.17.45;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.03.21.51.01;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.17.19.48.48;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.14.20.23.34;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.11
log
@removed some unused files
@
text
@#if 0
#ifndef RCPresourceFile_h
#define RCPresourceFile_h

#include "scoFile.h"


class RCPresourceFile : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(jobRole);
  getFieldH(skillSet);
  getFieldH(LOB);
  getFieldH(source);
  getFieldH(resourceLocName);
  getIntFieldH(period);
  getFloatFieldH(supplyQuantity);
  getFloatFieldH(fixedCost);
  
  // preferred constructor
  RCPresourceFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(8);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & jobRole,
    const std::string & skillSet,
    const std::string & LOB,
    const std::string & source,
    const std::string & locName,
    int period) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = jobRole + "!@@#$%" + skillSet + "!@@#$%"+ LOB + "!@@#$%" + source + "!@@#$%" + locName + "!@@#$%" + periodchar ;
    return retVal;
  };
  
  // destructor
  ~RCPresourceFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPresourceFile file("../data/example1/resource.csv");
    
    // Test reading first record

    assert( file.jobRole(0)=="r1" );
    assert( file.skillSet(0)=="s1" );
    assert( file.LOB(0)=="LOB1" );
    assert( file.source(0)=="src1" );
    assert( file.resourceLocName(0)=="l1" );
    assert( file.periodAsInt(0) == 1 );
    assert( file.supplyQuantityAsFloat(0) == 20.f );
    assert( file.fixedCostAsFloat(0) == 1.f );

    assert( file.jobRole(1)=="r1" );
    assert( file.skillSet(1)=="s1" );
    assert( file.LOB(1)=="LOB1" );
    assert( file.source(1)=="src1" );
    assert( file.periodAsInt(1) == 2 );
    assert( file.supplyQuantityAsFloat(1) == 40.f );
    assert( file.fixedCostAsFloat(0) == 1.f );


    assert( file.jobRole(2)=="r1" );
    assert( file.skillSet(2)=="s1" );
    assert( file.LOB(2)=="LOB1" );
    assert( file.source(2)=="src1" );
    assert( file.periodAsInt(2) == 3 );
    assert( file.supplyQuantityAsFloat(2) == 43.f );
    assert( file.fixedCostAsFloat(0) == 1.f );

    
    // Test reading record by key    
    std::string key = file.key("r2","s2","LOB2","src2","l1",1);
    assert( file.supplyQuantityAsFloat(key) == 10.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      jobRole(recNum),
      skillSet(recNum),
      LOB(recNum),
      source(recNum),
      resourceLocName(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPresourceFile();
  
  // copy constructor  -- don't use!
  RCPresourceFile( const RCPresourceFile& source );
  
  // assignment operator -- don't use!
  RCPresourceFile&
  operator=(const RCPresourceFile& rhs);

  
};



class RCPresourceFileIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(jobRole);
  getFieldFileWithIteratorH(skillSet);
  getFieldFileWithIteratorH(LOB);
  getFieldFileWithIteratorH(source);
  getFieldFileWithIteratorH(resourceLocName);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(supplyQuantity);
  getFloatFieldFileWithIteratorH(fixedCost);

  // preferred constructor
  RCPresourceFileIterator(const RCPresourceFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPresourceFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPresourceFile file("../data/example1/resource.csv");
    RCPresourceFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.jobRole()=="r1" );
        assert( fileIter.skillSet()=="s1" );
        assert( fileIter.LOB()=="LOB1" );
        assert( fileIter.source()=="src1" );
        assert( fileIter.resourceLocName()=="l1" );
        assert( fileIter.periodAsInt() == 1 );
        assert( fileIter.supplyQuantityAsFloat() == 20.f );
        assert( fileIter.fixedCostAsFloat() == 1.0f );
        
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPresourceFileIterator();
  
  // copy constructor  -- don't use!
  RCPresourceFileIterator( const RCPresourceFileIterator& source );
  
  // assignment operator -- don't use!
  RCPresourceFileIterator&
  operator=(const RCPresourceFileIterator& rhs);

  
};
#endif
#endif
@


1.10
log
@New file gnrlResourceFile.h with classes
  RCPgnrlResourceFile
  RCPgnrlResourceFileIterator
These classes generalize the reading of the various resource files
and replaces the use of files:
  resourceFile04Feb.h
  resourceFileSimple.h
  resourceFileSimpleSubs.h
  resourceFile.h
These replaced files are still in cvs but are ifdef'ed out.

RCPgnrlResourceFile's constructor is:
  RCPgnrlResourceFile(fileName,numResourceIdFields,x)
where x is true if the file contains fixedCost field.
@
text
@@


1.9
log
@moved the fixedCost from the resourceaction file to the resource file.
examle data files needed to be modified accordingly.
@
text
@d1 1
d185 1
@


1.8
log
@Changed globally "resourceName" to "jobRole"
@
text
@d18 1
d26 1
a26 1
    hasHeaderRecord(7);
d41 1
a41 1
    std::string retVal = jobRole + "!@@#$%" + skillSet + "!@@#$%"+ LOB + "!@@#$%" + source + "!@@#$%" + locName + "!@@#$%" + periodchar;
d62 1
d70 2
d79 2
d131 1
d159 1
@


1.7
log
@Added "source" field to the resource description and all the related code to use "source"
@
text
@d11 1
a11 1
  getFieldH(resourceName);
d31 1
a31 1
    const std::string & resourceName,
d40 1
a40 1
    std::string retVal = resourceName + "!@@#$%" + skillSet + "!@@#$%"+ LOB + "!@@#$%" + source + "!@@#$%" + locName + "!@@#$%" + periodchar;
d54 1
a54 1
    assert( file.resourceName(0)=="r1" );
d62 1
a62 1
    assert( file.resourceName(1)=="r1" );
d69 1
a69 1
    assert( file.resourceName(2)=="r1" );
d88 1
a88 1
      resourceName(recNum),
d118 1
a118 1
  getFieldFileWithIteratorH(resourceName);
d145 1
a145 1
        assert( fileIter.resourceName()=="r1" );
@


1.6
log
@Added skillSet to rcp code;  added skillSubs* to appl.mk
@
text
@d14 1
d25 1
a25 1
    hasHeaderRecord(6);
d34 1
d40 1
a40 1
    std::string retVal = resourceName + "!@@#$%" + skillSet + "!@@#$%"+ LOB + "!@@#$%" + locName + "!@@#$%" + periodchar;
d57 1
d65 1
d72 1
d77 1
a77 1
    std::string key = file.key("r2","s2","LOB2","l1",1);
d91 1
d121 1
d148 1
@


1.5
log
@Added "skillSet" field to input files and updated the code to use this field.
@
text
@d13 1
d24 1
a24 1
    hasHeaderRecord(5);
d32 1
d38 1
a38 1
    std::string retVal = resourceName + "!@@#$%" + skillSet + "!@@#$%" + locName + "!@@#$%" + periodchar;
d54 1
d61 1
d67 1
d72 1
a72 1
    std::string key = file.key("r2","s2","l1",1);
d85 1
d114 1
d140 1
@


1.4
log
@Added engagement location to the model.
@
text
@d12 1
d23 1
a23 1
    hasHeaderRecord(4);
d30 1
d36 1
a36 1
    std::string retVal = resourceName + "!@@#$%" + locName + "!@@#$%" + periodchar;
d51 1
d57 1
d62 1
d67 1
a67 1
    std::string key = file.key("r2","l1",1);
d79 1
d107 1
d132 1
@


1.3
log
@added locationName to resource files
@
text
@d12 1
a12 1
  getFieldH(locationName);
d49 1
a49 1
    assert( file.locationName(0)=="l1" );
d74 1
a74 1
      locationName(recNum),
d101 1
a101 1
  getFieldFileWithIteratorH(locationName);
d125 1
a125 1
        assert( fileIter.locationName()=="l1" );
@


1.2
log
@updated unitTest for new resource file
@
text
@d12 1
d22 1
a22 1
    hasHeaderRecord(3);
d29 1
d34 1
a34 1
    std::string retVal = resourceName + "!@@#$%" + periodchar;
d49 1
d62 1
a62 1
    std::string key = file.key("r2",1);
d74 1
d101 1
d125 1
@


1.1
log
@Added resource file
@
text
@d50 3
a52 3
    assert( file.resourceName(1)=="r2" );
    assert( file.periodAsInt(1) == 1 );
    assert( file.supplyQuantityAsFloat(1) == 30.f );
d55 2
a56 2
    assert( file.periodAsInt(2) == 2 );
    assert( file.supplyQuantityAsFloat(2) == 40.f );
d60 1
a60 1
    assert( file.supplyQuantityAsFloat(key) == 30.0f );
@

