head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.06.22.19.15.31;	author gresh;	state dead;
branches;
next	1.1;

1.1
date	2004.06.18.17.31.25;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.2
log
@folding together original "engagement" oriented files with new ER5 files
@
text
@#ifndef RCPdemandTypePriorityFile_h
#define RCPdemandTypePriorityFile_h

#include "scoFile.h"


class RCPdemandTypePriorityFile : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(demandType);
  getIntFieldH(priority);
  
  // preferred constructor
  RCPdemandTypePriorityFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(2);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & demandType
    ) 
  {
    std::string retVal = 
      demandType   ;
    return retVal;
  };
  
  // destructor
  ~RCPdemandTypePriorityFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPdemandTypePriorityFile file("../data/ER5/demandTypePriority.csv");
    
    // Test reading first record

    assert( file.demandType(0) =="firm");
    assert( file.priorityAsInt(0) == 1 );
    assert( file.demandType(1) =="opportunity");
    assert( file.priorityAsInt(1) == 2 );
    assert( file.demandType(2) =="forecast");
    assert( file.priorityAsInt(2) == 3 );
    
    // Test reading record by key    
    std::string key = file.key("opportunity");
    assert( file.priorityAsInt(key) == 2 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      demandType(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPdemandTypePriorityFile();
  
  // copy constructor  -- don't use!
  RCPdemandTypePriorityFile( const RCPdemandTypePriorityFile& source );
  
  // assignment operator -- don't use!
  RCPdemandTypePriorityFile&
  operator=(const RCPdemandTypePriorityFile& rhs);

  
};



class RCPdemandTypePriorityFileIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(demandType);
  getIntFieldFileWithIteratorH(priority);
  
  // preferred constructor
  RCPdemandTypePriorityFileIterator(const RCPdemandTypePriorityFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPdemandTypePriorityFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPdemandTypePriorityFile file("../data/ER5/demandTypePriority.csv");
    RCPdemandTypePriorityFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
                
      assert( fileIter.demandType() == "firm");
      assert( fileIter.priorityAsInt() == 1);
          
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPdemandTypePriorityFileIterator();
  
  // copy constructor  -- don't use!
  RCPdemandTypePriorityFileIterator( const RCPdemandTypePriorityFileIterator& source );
  
  // assignment operator -- don't use!
  RCPdemandTypePriorityFileIterator&
  operator=(const RCPdemandTypePriorityFileIterator& rhs);

  
};
#endif
@


1.1
log
@support for handling demandType and demandTypePriority
@
text
@@

