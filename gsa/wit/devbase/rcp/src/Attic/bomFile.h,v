head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2004.06.22.19.15.31;	author gresh;	state dead;
branches;
next	1.10;

1.10
date	2004.01.22.14.26.10;	author gresh;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.12.17.39.32;	author gresh;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.10.01.11.20;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.09.21.39.49;	author dpc;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.08.20.00.04;	author dpc;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.07.22.18.33;	author dpc;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.07.14.01.52;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.13.04.52.48;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.09.14.17.45;	author dpc;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.19.15.45.07;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.11
log
@folding together original "engagement" oriented files with new ER5 files
@
text
@#ifndef RCPbomFileSimple_h
#define RCPbomFileSimple_h

#include "scoFile.h"


class RCPbomFile : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(engagementName);
  getFieldH(jobRole);
  getFieldH(skillSet);
  getFieldH(LOB);
  getFieldH(source);
  getFieldH(resourceLocName);
  getIntFieldH(period);
  getFloatFieldH(usageQuantity);
  getIntFieldH(jobRoleMatch);
  getIntFieldH(skillSetMatch);
  getIntFieldH(locationMatch);
  getIntFieldH(lobMatch);
  getIntFieldH(sourceMatch);
  getIntFieldH(jobRoleSub);
  getIntFieldH(skillSetSub);
  getIntFieldH(locationSub);
  getIntFieldH(lobSub);
  getIntFieldH(sourceSub);
  
  // preferred constructor
  RCPbomFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(18);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & engagementName,
    const std::string & jobRole,
    const std::string & skillSet,
    const std::string & LOB,
    const std::string & source,
    const std::string & resourceLocName,
    int period) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = 
      engagementName  + "!@@#$%" + 
      jobRole         + "!@@#$%" + 
      skillSet        + "!@@#$%" + 
      LOB             + "!@@#$%" + 
      source          + "!@@#$%" + 
      resourceLocName + "!@@#$%" + 
      periodchar;
    return retVal;
  };
  
  // destructor
  ~RCPbomFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPbomFile file("../data/example1/bom.csv");
    
    // Test reading first record

    assert( file.engagementName(0) =="e1");

    assert( file.jobRole(0) == "r1" );
    assert( file.skillSet(0) == "s1" );
    assert( file.LOB(0) == "LOB1" );
    assert( file.source(0) == "src1" );
    assert( file.resourceLocName(0) == "l1" );
    assert( file.periodAsInt(0) == 1 );
    assert( file.usageQuantityAsFloat(0) == 2.0f );
    assert( file.jobRoleMatchAsInt(0) == 1 );
    assert( file.skillSetMatchAsInt(0) == 1 );
    assert( file.locationMatchAsInt(0) == 1 );
    assert( file.lobMatchAsInt(0) == 1 );
    assert( file.sourceMatchAsInt(0) == 1 );
    assert( file.jobRoleSubAsInt(0) == 0 );
    assert( file.skillSetSubAsInt(0) == 0 );
    assert( file.locationSubAsInt(0) == 0 );
    assert( file.lobSubAsInt(0) == 0 );
    assert( file.sourceSubAsInt(0) == 0 );

    assert( file.engagementName(1) =="e1");
    assert( file.jobRole(1) == "r1" );
    assert( file.skillSet(1) == "s1" );
    assert( file.LOB(1) == "LOB1" );
    assert( file.source(1) == "src1" );
    assert( file.resourceLocName(1) == "l1" );
    assert( file.periodAsInt(1) == 2 );
    assert( file.usageQuantityAsFloat(1) == 3.0f );
    assert( file.jobRoleMatchAsInt(1) == 1 );
    assert( file.skillSetMatchAsInt(1) == 1 );
    assert( file.locationMatchAsInt(1) == 1 );
    assert( file.lobMatchAsInt(1) == 1 );
    assert( file.sourceMatchAsInt(1) == 1 );
    assert( file.jobRoleSubAsInt(1) == 0 );
    assert( file.skillSetSubAsInt(1) == 0 );
    assert( file.locationSubAsInt(1) == 0 );
    assert( file.lobSubAsInt(1) == 0 );
    assert( file.sourceSubAsInt(1) == 0 );
    
    // Test reading record by key    
    std::string key = file.key("e2","r2","s2","LOB2","src2","l1",2);
    assert( file.usageQuantityAsFloat(key) == 7.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      engagementName(recNum),
      jobRole(recNum),
      skillSet(recNum),
      LOB(recNum),
      source(recNum),
      resourceLocName(recNum),
      periodAsInt(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPbomFile();
  
  // copy constructor  -- don't use!
  RCPbomFile( const RCPbomFile& source );
  
  // assignment operator -- don't use!
  RCPbomFile&
  operator=(const RCPbomFile& rhs);

  
};



class RCPbomFileIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(engagementName);
  getFieldFileWithIteratorH(jobRole);
  getFieldFileWithIteratorH(skillSet);
  getFieldFileWithIteratorH(LOB);
  getFieldFileWithIteratorH(source);
  getFieldFileWithIteratorH(resourceLocName);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(usageQuantity);
  getIntFieldFileWithIteratorH(jobRoleMatch);
  getIntFieldFileWithIteratorH(skillSetMatch);
  getIntFieldFileWithIteratorH(locationMatch);
  getIntFieldFileWithIteratorH(lobMatch);
  getIntFieldFileWithIteratorH(sourceMatch);
  getIntFieldFileWithIteratorH(jobRoleSub);
  getIntFieldFileWithIteratorH(skillSetSub);
  getIntFieldFileWithIteratorH(locationSub);
  getIntFieldFileWithIteratorH(lobSub);
  getIntFieldFileWithIteratorH(sourceSub);
  
  // preferred constructor
  RCPbomFileIterator(const RCPbomFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPbomFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPbomFile file("../data/example1/bom.csv");
    RCPbomFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
                
      assert( fileIter.engagementName() == "e1");
      assert( fileIter.jobRole() == "r1");
      assert( fileIter.skillSet() == "s1");
      assert( fileIter.LOB() == "LOB1");
      assert( fileIter.source() == "src1");
      assert( fileIter.resourceLocName() == "l1");
      assert( fileIter.periodAsInt() == 1 );
      assert( fileIter.usageQuantityAsFloat() == 2.0f );
      assert( fileIter.jobRoleMatchAsInt() == 1 );
      assert( fileIter.skillSetMatchAsInt() == 1 );
      assert( fileIter.locationMatchAsInt() == 1 );
      assert( fileIter.lobMatchAsInt() == 1 );
      assert( fileIter.sourceMatchAsInt() == 1 );
      assert( fileIter.jobRoleSubAsInt() == 0 );
      assert( fileIter.skillSetSubAsInt() == 0 );
      assert( fileIter.locationSubAsInt() == 0 );
      assert( fileIter.lobSubAsInt() == 0 );
      assert( fileIter.sourceSubAsInt() == 0 );

        //assert( fileIter.recNum() == 11 );
          
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPbomFileIterator();
  
  // copy constructor  -- don't use!
  RCPbomFileIterator( const RCPbomFileIterator& source );
  
  // assignment operator -- don't use!
  RCPbomFileIterator&
  operator=(const RCPbomFileIterator& rhs);

  
};
#endif
@


1.10
log
@added fileformat globalAttr flag. Call populateSimple for example_simple
@
text
@@


1.9
log
@added match flags
@
text
@d1 2
a2 2
#ifndef RCPbomFile_h
#define RCPbomFile_h
@


1.8
log
@modified bomFile.h and bom.csv files to have the fields:
jobRoleSub, skillSetSub, locationSub, lobSub, sourceSub
@
text
@d19 5
d36 1
a36 1
    hasHeaderRecord(13);
d82 5
d101 5
d163 5
d201 5
d211 1
@


1.7
log
@Changed globally "resourceName" to "jobRole"
@
text
@d19 5
d31 1
a31 1
    hasHeaderRecord(8);
d47 8
a54 1
    std::string retVal = engagementName + "!@@#$%"+ jobRole + "!@@#$%" + skillSet + "!@@#$%" + LOB + "!@@#$%" + source + "!@@#$%" + resourceLocName + "!@@#$%" + periodchar;
d77 5
d91 5
d148 5
d181 5
@


1.6
log
@Added "source" field to the resource description and all the related code to use "source"
@
text
@d12 1
a12 1
  getFieldH(resourceName);
d33 1
a33 1
    const std::string & resourceName,
d42 1
a42 1
    std::string retVal = engagementName + "!@@#$%"+ resourceName + "!@@#$%" + skillSet + "!@@#$%" + LOB + "!@@#$%" + source + "!@@#$%" + resourceLocName + "!@@#$%" + periodchar;
d58 1
a58 1
    assert( file.resourceName(0) == "r1" );
d67 1
a67 1
    assert( file.resourceName(1) == "r1" );
d88 1
a88 1
      resourceName(recNum),
d119 1
a119 1
  getFieldFileWithIteratorH(resourceName);
d147 1
a147 1
      assert( fileIter.resourceName() == "r1");
@


1.5
log
@Added skillSet to rcp code;  added skillSubs* to appl.mk
@
text
@d15 1
d26 1
a26 1
    hasHeaderRecord(7);
d36 1
d42 1
a42 1
    std::string retVal = engagementName + "!@@#$%"+ resourceName + "!@@#$%" + skillSet + "!@@#$%" + LOB + "!@@#$%" + resourceLocName + "!@@#$%" + periodchar;
d61 1
d70 1
d76 1
a76 1
    std::string key = file.key("e2","r2","s2","LOB2","l1",2);
d91 1
d122 1
d150 1
@


1.4
log
@Added "skillSet" field to input files and updated the code to use this field.
@
text
@d14 1
d25 1
a25 1
    hasHeaderRecord(6);
d34 1
d40 1
a40 1
    std::string retVal = engagementName + "!@@#$%"+ resourceName + "!@@#$%" + skillSet + "!@@#$%" + resourceLocName + "!@@#$%" + periodchar;
d58 1
d66 1
d72 1
a72 1
    std::string key = file.key("e2","r2","s2","l1",2);
d86 1
d116 1
d143 1
@


1.3
log
@Code modifed so that an engagment is only uniquely identified by enagementName.
Engagement location is now an attribute of an engagement stored in appData.
@
text
@d13 1
d24 1
a24 1
    hasHeaderRecord(5);
d32 1
d38 1
a38 1
    std::string retVal = engagementName + "!@@#$%"+ resourceName + "!@@#$%" +resourceLocName+ "!@@#$%" + periodchar;
d55 1
d62 1
d68 1
a68 1
    std::string key = file.key("e2","r2","l1",2);
d81 1
d110 1
d136 1
@


1.2
log
@Added engagement location to the model.
@
text
@a11 1
  getFieldH(engLocationName);
d23 1
a23 1
    hasHeaderRecord(6);
a29 1
    const std::string & engLocationName,
d36 1
a36 1
    std::string retVal = engagementName + "!@@#$%" + engLocationName + "!@@#$%"+ resourceName + "!@@#$%" +resourceLocName+ "!@@#$%" + periodchar;
a50 1
    assert( file.engLocationName(0) =="Loc1");
a57 1
    assert( file.engLocationName(1) =="Loc1");
d64 1
a64 1
    std::string key = file.key("e2","Loc1","r2","l1",2);
a75 1
      engLocationName(recNum),
a103 1
  getFieldFileWithIteratorH(engLocationName);
a128 1
      assert( fileIter.engLocationName() == "Loc1");
@


1.1
log
@added bomFile.h
@
text
@d12 1
d14 1
d24 1
a24 1
    hasHeaderRecord(4);
d31 1
d33 1
d38 1
a38 1
    std::string retVal = engagementName + "!@@#$%" +resourceName + "!@@#$%" + periodchar;
d53 2
d56 1
d61 1
d63 1
d68 1
a68 1
    std::string key = file.key("e2","r2",2);
d80 1
d82 1
d109 1
d111 1
d135 1
d137 1
@

