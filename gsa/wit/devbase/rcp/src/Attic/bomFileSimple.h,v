head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.05.11.15.46.47;	author gresh;	state dead;
branches;
next	1.4;

1.4
date	2004.04.12.17.34.03;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.14.14.39.52;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.30.15.16.09;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.21.17.51.37;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove dead .h files
@
text
@#ifndef RCPbomFile_h
#define RCPbomFile_h

#include "scoFile.h"


class RCPbomFileSimple : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(jobRole);
  getFieldH(skillSet);
  getFieldH(LOB);
  getFieldH(source);
  getFieldH(resourceLocName);
  getIntFieldH(period);
  getFloatFieldH(usageQuantity);
  
  // preferred constructor
  RCPbomFileSimple(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(7);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & jobRole,
    const std::string & skillSet,
    const std::string & LOB,
    const std::string & source,
    const std::string & resourceLocName,
    int period) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = 
      jobRole         + "!@@#$%" + 
      skillSet        + "!@@#$%" + 
      LOB             + "!@@#$%" + 
      source          + "!@@#$%" + 
      resourceLocName + "!@@#$%" + 
      periodchar;
    return retVal;
  };
  
  // destructor
  ~RCPbomFileSimple(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPbomFileSimple file("../data/example_simple/bom.csv");
    
    // Test reading first record


    assert( file.jobRole(0) == "DetailA" );
    assert( file.skillSet(0) == "s1" );
    assert( file.LOB(0) == "LOB1" );
    assert( file.source(0) == "src1" );
    assert( file.resourceLocName(0) == "l1" );
    assert( file.periodAsInt(0) == 0 );
    assert( file.usageQuantityAsFloat(0) == 30.0f );


    assert( file.jobRole(1) == "DetailB" );
    assert( file.skillSet(1) == "s1" );
    assert( file.LOB(1) == "LOB1" );
    assert( file.source(1) == "src1" );
    assert( file.resourceLocName(1) == "l1" );
    assert( file.periodAsInt(1) == 0 );
    assert( file.usageQuantityAsFloat(1) == 20.0f );
    
    // Test reading record by key    
    std::string key = file.key("DetailC","s1","LOB1","src1","l2",0);
    assert( file.usageQuantityAsFloat(key) == 20.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      jobRole(recNum),
      skillSet(recNum),
      LOB(recNum),
      source(recNum),
      resourceLocName(recNum),
      periodAsInt(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPbomFileSimple();
  
  // copy constructor  -- don't use!
  RCPbomFileSimple( const RCPbomFileSimple& source );
  
  // assignment operator -- don't use!
  RCPbomFileSimple&
  operator=(const RCPbomFileSimple& rhs);

  
};




class RCPbomFileSimpleIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(jobRole);
  getFieldFileWithIteratorH(skillSet);
  getFieldFileWithIteratorH(LOB);
  getFieldFileWithIteratorH(source);
  getFieldFileWithIteratorH(resourceLocName);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(usageQuantity);
  
  // preferred constructor
  RCPbomFileSimpleIterator(const RCPbomFileSimple & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPbomFileSimpleIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPbomFileSimple file("../data/example_simple/bom.csv");
    RCPbomFileSimpleIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
                

      assert( fileIter.jobRole() == "DetailA");
      assert( fileIter.skillSet() == "s1");
      assert( fileIter.LOB() == "LOB1");
      assert( fileIter.source() == "src1");
      assert( fileIter.resourceLocName() == "l1");
      assert( fileIter.periodAsInt() == 0 );
      assert( fileIter.usageQuantityAsFloat() == 30.0f );
        //assert( fileIter.recNum() == 11 );
          
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPbomFileSimpleIterator();
  
  // copy constructor  -- don't use!
  RCPbomFileSimpleIterator( const RCPbomFileSimpleIterator& source );
  
  // assignment operator -- don't use!
  RCPbomFileSimpleIterator&
  operator=(const RCPbomFileSimpleIterator& rhs);

  
};
#endif
@


1.4
log
@Remove reference to throwing exception
@
text
@@


1.3
log
@added
    throw(SCOexection)
to method prototypes for case when specified file does not exist
@
text
@d20 1
a20 1
  RCPbomFileSimple(std::string filename) throw(SCOexception)
@


1.2
log
@added unittests for various of the new file iterators.
@
text
@d20 1
a20 1
  RCPbomFileSimple(std::string filename)
@


1.1
log
@preparing for handling "simple" format files. Not yet exercised in unitTest.
@
text
@d56 1
a56 1
    RCPbomFileSimple file("../data/example6/bom.csv");
d61 1
a61 1
    assert( file.jobRole(0) == "r1" );
d66 2
a67 2
    assert( file.periodAsInt(0) == 1 );
    assert( file.usageQuantityAsFloat(0) == 2.0f );
d70 1
a70 1
    assert( file.jobRole(1) == "r1" );
d75 2
a76 2
    assert( file.periodAsInt(1) == 2 );
    assert( file.usageQuantityAsFloat(1) == 3.0f );
d79 2
a80 2
    std::string key = file.key("r2","s2","LOB2","src2","l1",2);
    assert( file.usageQuantityAsFloat(key) == 7.0f );
d140 1
a140 1
    RCPbomFileSimple file("../data/example6/bom.csv");
d149 1
a149 1
      assert( fileIter.jobRole() == "r1");
d154 2
a155 2
      assert( fileIter.periodAsInt() == 1 );
      assert( fileIter.usageQuantityAsFloat() == 2.0f );
@

