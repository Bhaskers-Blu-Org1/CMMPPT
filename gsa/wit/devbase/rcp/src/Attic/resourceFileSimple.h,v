head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.05.11.15.46.47;	author gresh;	state dead;
branches;
next	1.3;

1.3
date	2004.03.13.23.18.50;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.30.15.16.09;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.21.17.51.37;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove dead .h files
@
text
@#if 0
#ifndef RCPresourceFileSimple_h
#define RCPresourceFileSimple_h

#include "scoFile.h"


class RCPresourceFileSimple : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(jobRole);
  getFieldH(skillSet);
  getFieldH(LOB);
  getFieldH(source);
  getFieldH(resourceLocName);
  getIntFieldH(period);
  getFloatFieldH(supplyQuantity);
  
  
  // preferred constructor
  RCPresourceFileSimple(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(7);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & jobRole,
    const std::string & skillSet,
    const std::string & LOB,
    const std::string & source,
    const std::string & locName,
    int period) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = jobRole + "!@@#$%" + skillSet + "!@@#$%"+ LOB + "!@@#$%" + source + "!@@#$%" + locName + "!@@#$%" + periodchar ;
    return retVal;
  };
  
  // destructor
  ~RCPresourceFileSimple(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPresourceFileSimple file("../data/example_simple/resource.csv");
    
    // Test reading first record

    assert( file.jobRole(0)=="DetailA" );
    assert( file.skillSet(0)=="s1" );
    assert( file.LOB(0)=="LOB1" );
    assert( file.source(0)=="src1" );
    assert( file.resourceLocName(0)=="l1" );
    assert( file.periodAsInt(0) == 0 );
    assert( file.supplyQuantityAsFloat(0) == 20.f );


    assert( file.jobRole(1)=="DetailB" );
    assert( file.skillSet(1)=="s1" );
    assert( file.LOB(1)=="LOB1" );
    assert( file.source(1)=="src1" );
    assert( file.periodAsInt(1) == 0 );
    assert( file.supplyQuantityAsFloat(1) == 10.f );
 


    assert( file.jobRole(2)=="DetailC" );
    assert( file.skillSet(2)=="s1" );
    assert( file.LOB(2)=="LOB1" );
    assert( file.source(2)=="src1" );
    assert( file.periodAsInt(2) == 0 );
    assert( file.supplyQuantityAsFloat(2) == 40.f );


    
    // Test reading record by key    
    std::string key = file.key("DetailC","s1","LOB1","src1","l1",1);
    assert( file.supplyQuantityAsFloat(key) == 40.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      jobRole(recNum),
      skillSet(recNum),
      LOB(recNum),
      source(recNum),
      resourceLocName(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPresourceFileSimple();
  
  // copy constructor  -- don't use!
  RCPresourceFileSimple( const RCPresourceFileSimple& source );
  
  // assignment operator -- don't use!
  RCPresourceFileSimple&
  operator=(const RCPresourceFileSimple& rhs);

  
};



class RCPresourceFileSimpleIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(jobRole);
  getFieldFileWithIteratorH(skillSet);
  getFieldFileWithIteratorH(LOB);
  getFieldFileWithIteratorH(source);
  getFieldFileWithIteratorH(resourceLocName);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(supplyQuantity);


  // preferred constructor
  RCPresourceFileSimpleIterator(const RCPresourceFileSimple & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPresourceFileSimpleIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPresourceFileSimple file("../data/example_simple/resource.csv");
    RCPresourceFileSimpleIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.jobRole()=="DetailA" );
        assert( fileIter.skillSet()=="s1" );
        assert( fileIter.LOB()=="LOB1" );
        assert( fileIter.source()=="src1" );
        assert( fileIter.resourceLocName()=="l1" );
        assert( fileIter.periodAsInt() == 0 );
        assert( fileIter.supplyQuantityAsFloat() == 20.f );

        
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPresourceFileSimpleIterator();
  
  // copy constructor  -- don't use!
  RCPresourceFileSimpleIterator( const RCPresourceFileSimpleIterator& source );
  
  // assignment operator -- don't use!
  RCPresourceFileSimpleIterator&
  operator=(const RCPresourceFileSimpleIterator& rhs);

  
};
#endif
#endif
@


1.3
log
@New file gnrlResourceFile.h with classes
  RCPgnrlResourceFile
  RCPgnrlResourceFileIterator
These classes generalize the reading of the various resource files
and replaces the use of files:
  resourceFile04Feb.h
  resourceFileSimple.h
  resourceFileSimpleSubs.h
  resourceFile.h
These replaced files are still in cvs but are ifdef'ed out.

RCPgnrlResourceFile's constructor is:
  RCPgnrlResourceFile(fileName,numResourceIdFields,x)
where x is true if the file contains fixedCost field.
@
text
@@


1.2
log
@added unittests for various of the new file iterators.
@
text
@d1 1
d185 1
@


1.1
log
@preparing for handling "simple" format files. Not yet exercised in unitTest.
@
text
@d51 1
a51 1
    RCPresourceFileSimple file("../data/example1/resource.csv");
d55 1
a55 1
    assert( file.jobRole(0)=="r1" );
d60 1
a60 1
    assert( file.periodAsInt(0) == 1 );
d64 1
a64 1
    assert( file.jobRole(1)=="r1" );
d68 2
a69 2
    assert( file.periodAsInt(1) == 2 );
    assert( file.supplyQuantityAsFloat(1) == 40.f );
d73 1
a73 1
    assert( file.jobRole(2)=="r1" );
d77 2
a78 2
    assert( file.periodAsInt(2) == 3 );
    assert( file.supplyQuantityAsFloat(2) == 43.f );
d83 2
a84 2
    std::string key = file.key("r2","s2","LOB2","src2","l1",1);
    assert( file.supplyQuantityAsFloat(key) == 10.0f );
d144 1
a144 1
    RCPresourceFileSimple file("../data/example6/resource.csv");
d152 1
a152 1
        assert( fileIter.jobRole()=="r1" );
d157 1
a157 1
        assert( fileIter.periodAsInt() == 1 );
@

