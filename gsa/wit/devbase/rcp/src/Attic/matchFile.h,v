head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.04.13.19.20.01;	author gresh;	state dead;
branches;
next	1.4;

1.4
date	2004.03.18.14.43.58;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.16.20.25.59;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.30.15.16.09;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.21.17.51.37;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.5
log
@removed some unused files
@
text
@#ifndef RCPmatchFile_h
#define RCPmatchFile_h

#include "scoFile.h"


class RCPmatchFile : public SCOcsvFormatFile {
public:

  // Fields 
  getIntFieldH(jobRoleMatch);
  getIntFieldH(skillSetMatch);
  getIntFieldH(LOBMatch);
  getIntFieldH(sourceMatch);
  getIntFieldH(locationMatch);
  
  // preferred constructor
  RCPmatchFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(5);
    commentRecords(true);
  };

 
  
  // destructor
  ~RCPmatchFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
  //DLG need a test here
   }
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
    key( unsigned recNum ) const
  {
    std::string retVal = fieldAsString(recNum,"jobRoleMatch");//DLG does this make sense?
    return retVal;
  }
private:
  
  // default constructor -- don't use!
  RCPmatchFile();
  
  // copy constructor  -- don't use!
  RCPmatchFile( const RCPmatchFile& source );
  
  // assignment operator -- don't use!
  RCPmatchFile&
  operator=(const RCPmatchFile& rhs);

  
};



class RCPmatchFileIterator : public SCOfileIterator {
public:
  
  // fields 
  getIntFieldFileWithIteratorH(jobRoleMatch);
  getIntFieldFileWithIteratorH(skillSetMatch);
  getIntFieldFileWithIteratorH(LOBMatch);
  getIntFieldFileWithIteratorH(sourceMatch);
  getIntFieldFileWithIteratorH(locationMatch);
  
  // preferred constructor
  RCPmatchFileIterator(const RCPmatchFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPmatchFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    //DLG need a test here
    #if 0
    RCPmatchFile file("../data/example_simple/match.csv");
    RCPmatchFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.jobRoleMatchAsInt()==1 );
        assert( fileIter.skillSetMatchAsInt()==1 );
        assert( fileIter.LOBMatchAsInt()==0 );
        assert( fileIter.sourceMatchAsInt()==1 );
        assert( fileIter.locationMatchAsInt()==0 );
        
        
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
    #endif
  }

private:
  
  
  // default constructor -- don't use!
  RCPmatchFileIterator();
  
  // copy constructor  -- don't use!
  RCPmatchFileIterator( const RCPmatchFileIterator& source );
  
  // assignment operator -- don't use!
  RCPmatchFileIterator&
  operator=(const RCPmatchFileIterator& rhs);

  
};
#endif
@


1.4
log
@iterator self-tests were using a non-existant directory
@
text
@@


1.3
log
@updated match.csv files for consistency in naming. Also added some
selftests for the new gnrl format files
@
text
@d35 2
a36 12
    RCPmatchFile file("../data/example_simple/match.csv");
    
    // Test reading first record

    assert( file.jobRoleMatchAsInt(0)==1 );
    assert( file.skillSetMatchAsInt(0)==1 );
    assert( file.locationMatchAsInt(0)==0 );
    assert( file.sourceMatchAsInt(0)==1 );
    assert( file.LOBMatchAsInt(0)==0 );
   

  }
d85 2
d108 1
@


1.2
log
@added unittests for various of the new file iterators.
@
text
@d13 1
a13 1
  getIntFieldH(lobMatch);
d43 1
a43 1
    assert( file.lobMatchAsInt(0)==0 );
d54 1
a54 1
    std::string retVal = fieldAsString(recNum,"jobRoleMatch");
d80 1
a80 1
  getIntFieldFileWithIteratorH(lobMatch);
d105 1
a105 1
        assert( fileIter.lobMatchAsInt()==0 );
@


1.1
log
@preparing for handling "simple" format files. Not yet exercised in unitTest.
@
text
@d39 2
a40 2
    assert( file.jobRoleMatchAsInt(1)==1 );
    assert( file.skillSetMatchAsInt(0)==0 );
d43 1
a43 1
    assert( file.lobMatchAsInt(0)==1 );
d95 1
a95 1
    RCPmatchFile file("../data/example6/match.csv");
d104 1
a104 1
        assert( fileIter.skillSetMatchAsInt()==0 );
d107 1
a107 1
        assert( fileIter.locationMatchAsInt()==1 );
@

