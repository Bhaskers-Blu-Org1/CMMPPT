head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.05.11.18.25.28;	author gresh;	state dead;
branches;
next	1.1;

1.1
date	2004.01.13.14.07.18;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@updates for more genearlity in the substitution
@
text
@#ifndef RCPsourceSubsFile_h
#define RCPsourceSubsFile_h

#include "scoFile.h"
#include "CoinFloatEqual.h"


class RCPsourceSubsFile : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(fromSource);
  getFieldH(toSource);
  getFloatFieldH(cost);
  getFloatFieldH(leadTime);
  
  // preferred constructor
  RCPsourceSubsFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(4);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & fromSource,
    const std::string & toSource ) 
  {
    //char periodchar[100];
    //sprintf( periodchar, "%d", period );
    std::string retVal = fromSource + "!@@#$%" + toSource;
    return retVal;
  };
  
  // destructor
  ~RCPsourceSubsFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
	CoinRelFltEq eq;
    RCPsourceSubsFile file("../data/example1/sourceSubs.csv");
    
    // Test reading first record

    std::string e = file.fromSource(0);
    assert( e=="source1");
    assert( file.toSource(0) == "source2" );
    assert( eq(file.costAsFloat(0),9999.99f) );
    assert( eq(file.leadTimeAsFloat(0),20.0f) );

    
    // Test reading record by key    
    std::string key = file.key("source1", "source2");
    assert( eq(file.costAsFloat(key),9999.99f) );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      fromSource(recNum),
      toSource(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPsourceSubsFile();
  
  // copy constructor  -- don't use!
  RCPsourceSubsFile( const RCPsourceSubsFile& source );
  
  // assignment operator -- don't use!
  RCPsourceSubsFile&
  operator=(const RCPsourceSubsFile& rhs);

  
};



class RCPsourceSubsFileIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(fromSource);
  getFieldFileWithIteratorH(toSource);
  getFloatFieldFileWithIteratorH(cost);
  getFloatFieldFileWithIteratorH(leadTime);

  // preferred constructor
  RCPsourceSubsFileIterator(const RCPsourceSubsFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPsourceSubsFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
	CoinRelFltEq eq;
    RCPsourceSubsFile file("../data/example1/sourceSubs.csv");
    RCPsourceSubsFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
                
      std::string e = fileIter.fromSource();
      assert( e=="source1");
      assert( fileIter.toSource() == "source2" );
      assert( eq(fileIter.costAsFloat(),9999.99f) );
      assert( eq(fileIter.leadTimeAsFloat(),20.0f) );
          
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPsourceSubsFileIterator();
  
  // copy constructor  -- don't use!
  RCPsourceSubsFileIterator( const RCPsourceSubsFileIterator& source );
  
  // assignment operator -- don't use!
  RCPsourceSubsFileIterator&
  operator=(const RCPsourceSubsFileIterator& rhs);

  
};
#endif
@


1.1
log
@Added code to read and add substitute arcs for location, lob, and source
@
text
@@

