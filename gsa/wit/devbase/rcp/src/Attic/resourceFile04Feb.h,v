head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2004.05.11.15.46.47;	author gresh;	state dead;
branches;
next	1.5;

1.5
date	2004.03.13.23.18.50;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.08.21.46.34;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.12.17.26.59;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.11.19.39.09;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.10.19.43.33;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove dead .h files
@
text
@#if 0
#ifndef RCPresourceFile04Feb_h
#define RCPresourceFile04Feb_h

#include "scoFile.h"


class RCPresourceFile04Feb : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(reportingUnit);
  getFieldH(band);
  getFieldH(global);
  getFieldH(jobRole);
  getFieldH(skillSet);
  getFieldH(LOB);
  getFieldH(source);
  getFieldH(region);
  getFieldH(country);
  getFieldH(city);
  getFieldH(competency);
  getFieldH(industry);
  getIntFieldH(period);
  getFloatFieldH(supplyQuantity);
  getFloatFieldH(fixedCost);
  
  
  // preferred constructor
  RCPresourceFile04Feb(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(14);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & jobRole,
    const std::string & skillSet,
    const std::string & LOB,
    const std::string & source,
    const std::string & region,
    const std::string & country,
    const std::string & city,
    const std::string & reportingUnit,
    const std::string & band,
    const std::string & global,
    const std::string & competency,
    const std::string & industry,
    int period) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = jobRole + "!@@#$%" + skillSet + "!@@#$%"+ LOB + "!@@#$%" + source + "!@@#$%" + region + "!@@#$%"+ country + "!@@#$%"+ city + "!@@#$%"+ reportingUnit + "!@@#$%"+ band + "!@@#$%"+ global + "!@@#$%"+ competency + "!@@#$%" + industry + "!@@#$%"+ periodchar ;
    return retVal;
  };
  
  // destructor
  ~RCPresourceFile04Feb(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPresourceFile04Feb file("../data/example04Feb/resource.csv");
    
    // Test reading first record

    assert( file.jobRole(0)=="j1" );
    assert( file.skillSet(0)=="s1" );
    assert( file.LOB(0)=="LOB1" );
    assert( file.source(0)=="ibm" );
    assert( file.region(0)=="emea" );
    assert( file.country(0)=="gb" );
    assert( file.city(0)=="london" );
    assert( file.periodAsInt(0) == 0 );
    assert( file.band(0) == "7" );
    assert( file.supplyQuantityAsFloat(0) == 20.f );

    assert( file.jobRole(1)=="j1" );
    assert( file.skillSet(1)=="s1" );
    assert( file.LOB(1)=="LOB1" );
    assert( file.source(1)=="ibm" );
    assert( file.region(1)=="na" );
    assert( file.country(1)=="gb" );
    assert( file.city(1)=="london" );
    assert( file.periodAsInt(1) == 0 );
    assert( file.band(1) == "7" );
    assert( file.supplyQuantityAsFloat(1) == 10.f );


    
    // Test reading record by key    
    std::string key = file.key("j1","s1","LOB1","ibm","emea","gb","london","abc","7","global","foo","transportation",0);
    assert( file.supplyQuantityAsFloat(key) == 20.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      jobRole(recNum),
      skillSet(recNum),
      LOB(recNum),
      source(recNum),
      region(recNum),
      country(recNum),
      city(recNum),
      reportingUnit(recNum),
      band(recNum),
      global(recNum),
      competency(recNum),
      industry(recNum),
      periodAsInt(recNum) );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPresourceFile04Feb();
  
  // copy constructor  -- don't use!
  RCPresourceFile04Feb( const RCPresourceFile04Feb& source );
  
  // assignment operator -- don't use!
  RCPresourceFile04Feb&
  operator=(const RCPresourceFile04Feb& rhs);

  
};



class RCPresourceFile04FebIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(jobRole);
  getFieldFileWithIteratorH(skillSet);
  getFieldFileWithIteratorH(LOB);
  getFieldFileWithIteratorH(source);
  getFieldFileWithIteratorH(region);
  getFieldFileWithIteratorH(country);
  getFieldFileWithIteratorH(city);
  getFieldFileWithIteratorH(reportingUnit);
  getFieldFileWithIteratorH(band);
  getFieldFileWithIteratorH(global);
  getFieldFileWithIteratorH(competency);
  getFieldFileWithIteratorH(industry);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(supplyQuantity);


  // preferred constructor
  RCPresourceFile04FebIterator(const RCPresourceFile04Feb & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPresourceFile04FebIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPresourceFile04Feb file("../data/example04Feb/resource.csv");
    RCPresourceFile04FebIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        
        assert( fileIter.jobRole()=="j1" );
        assert( fileIter.skillSet()=="s1" );
        assert( fileIter.LOB()=="LOB1" );
        assert( fileIter.source()=="ibm" );
        assert( fileIter.region()=="emea" );
        assert( fileIter.periodAsInt() == 0 );
        assert( fileIter.supplyQuantityAsFloat() == 20.f );

        
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPresourceFile04FebIterator();
  
  // copy constructor  -- don't use!
  RCPresourceFile04FebIterator( const RCPresourceFile04FebIterator& source );
  
  // assignment operator -- don't use!
  RCPresourceFile04FebIterator&
  operator=(const RCPresourceFile04FebIterator& rhs);

  
};
#endif
#endif
@


1.5
log
@New file gnrlResourceFile.h with classes
  RCPgnrlResourceFile
  RCPgnrlResourceFileIterator
These classes generalize the reading of the various resource files
and replaces the use of files:
  resourceFile04Feb.h
  resourceFileSimple.h
  resourceFileSimpleSubs.h
  resourceFile.h
These replaced files are still in cvs but are ifdef'ed out.

RCPgnrlResourceFile's constructor is:
  RCPgnrlResourceFile(fileName,numResourceIdFields,x)
where x is true if the file contains fixedCost field.
@
text
@@


1.4
log
@Changed some asserts to match the input data
@
text
@d1 1
d129 1
a129 1
  RCPresourceFile04Feb( const RCPresourceFileSimple& source );
d211 1
@


1.3
log
@more updates for the additional fields
@
text
@d77 1
a77 1
    assert( file.periodAsInt(0) == 1 );
d88 1
a88 1
    assert( file.periodAsInt(1) == 1 );
d90 1
a90 1
    assert( file.supplyQuantityAsFloat(1) == 20.f );
d95 1
a95 1
    std::string key = file.key("j1","s1","LOB1","ibm","emea","gb","london","abc","7","global","foo","transportation",1);
d183 1
a183 1
        assert( fileIter.periodAsInt() == 1 );
@


1.2
log
@more preparation for more complex input files
@
text
@d12 1
a12 1
  getIntFieldH(band);
d48 1
a48 1
    int band,
d54 1
a54 1
    char periodchar[100], bandchar[100];
d56 1
a56 2
    sprintf( bandchar, "%d", band);
    std::string retVal = jobRole + "!@@#$%" + skillSet + "!@@#$%"+ LOB + "!@@#$%" + source + "!@@#$%" + region + "!@@#$%"+ country + "!@@#$%"+ city + "!@@#$%"+ reportingUnit + "!@@#$%"+ bandchar + "!@@#$%"+ global + "!@@#$%"+ competency + "!@@#$%" + industry + "!@@#$%"+ periodchar ;
d78 1
a78 1
    assert( file.bandAsInt(0) == 7 );
d89 1
a89 1
    assert( file.bandAsInt(1) == 7 );
d95 1
a95 1
    std::string key = file.key("j1","s1","LOB1","ibm","emea","gb","london","abc",7,"global","foo","transportation",1);
d114 1
a114 1
      bandAsInt(recNum),
d151 1
a151 1
  getIntFieldFileWithIteratorH(band);
@


1.1
log
@preparation for new "complete" format (with more fields)
@
text
@d11 3
d18 5
a22 1
  getFieldH(resourceLocName);
d34 1
a34 1
    hasHeaderRecord(8);
d44 8
a51 1
    const std::string & locName,
d54 1
a54 1
    char periodchar[100];
d56 2
a57 1
    std::string retVal = jobRole + "!@@#$%" + skillSet + "!@@#$%"+ LOB + "!@@#$%" + source + "!@@#$%" + locName + "!@@#$%" + periodchar ;
d67 1
a67 1
    RCPresourceFile04Feb file("../data/example1/resource.csv");
d71 1
a71 1
    assert( file.jobRole(0)=="r1" );
d74 4
a77 2
    assert( file.source(0)=="src1" );
    assert( file.resourceLocName(0)=="l1" );
d79 1
d82 1
a82 2

    assert( file.jobRole(1)=="r1" );
d85 7
a91 12
    assert( file.source(1)=="src1" );
    assert( file.periodAsInt(1) == 2 );
    assert( file.supplyQuantityAsFloat(1) == 40.f );
 


    assert( file.jobRole(2)=="r1" );
    assert( file.skillSet(2)=="s1" );
    assert( file.LOB(2)=="LOB1" );
    assert( file.source(2)=="src1" );
    assert( file.periodAsInt(2) == 3 );
    assert( file.supplyQuantityAsFloat(2) == 43.f );
d96 2
a97 2
    std::string key = file.key("r2","s2","LOB2","src2","l1",1);
    assert( file.supplyQuantityAsFloat(key) == 10.0f );
d111 8
a118 1
      resourceLocName(recNum),
d148 8
a155 1
  getFieldFileWithIteratorH(resourceLocName);
a157 1
  getFloatFieldFileWithIteratorH(fixedCost);
d171 1
a171 1
    RCPresourceFile04Feb file("../data/example_simplesubs/resource.csv");
d179 1
a179 1
        assert( fileIter.jobRole()=="DetailA" );
d182 3
a184 3
        assert( fileIter.source()=="src1" );
        assert( fileIter.resourceLocName()=="l1" );
        assert( fileIter.periodAsInt() == 0 );
a185 1
        assert( fileIter.fixedCostAsFloat() == 10.f);
@

