head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2004.05.11.15.46.47;	author gresh;	state dead;
branches;
next	1.5;

1.5
date	2004.03.09.14.23.56;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.08.21.46.33;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.12.17.26.59;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.12.15.24.09;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.10.19.43.32;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove dead .h files
@
text
@#ifndef RCPbomFile04Feb_h
#define RCPbomFile04Feb_h

#include "scoFile.h"


class RCPbomFile04Feb : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(jobRole);
  getFieldH(skillSet);
  getFieldH(LOB);
  getFieldH(source);
  getFieldH(region);
  getFieldH(country);
  getFieldH(city);
  getFieldH(reportingUnit);
  getFieldH(band);
  getFieldH(global);
  getFieldH(competency);
  getFieldH(industry);
  getIntFieldH(period);
  getFloatFieldH(usageQuantity);
  
  // preferred constructor
  RCPbomFile04Feb(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(14);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & jobRole,
    const std::string & skillSet,
    const std::string & LOB,
    const std::string & source,
    const std::string & region,
    const std::string & country,
    const std::string & city,
    const std::string & reportingUnit,
    const std::string & band,
    const std::string & global,
    const std::string & competency,
    const std::string & industry,
    int period) 
  {
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    std::string retVal = 
      jobRole         + "!@@#$%" + 
      skillSet        + "!@@#$%" + 
      LOB             + "!@@#$%" + 
      source          + "!@@#$%" + 
      region + "!@@#$%" + 
      country + "!@@#$%" + 
      city + "!@@#$%" + 
      reportingUnit + "!@@#$%" + 
      band + "!@@#$%" + 
      global + "!@@#$%" + 
      competency + "!@@#$%" + 
      industry + "!@@#$%" + 
      periodchar;
    return retVal;
  };
  
  // destructor
  ~RCPbomFile04Feb(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPbomFile04Feb file("../data/example04Feb/bom.csv");
    
    // Test reading first record


    assert( file.jobRole(0) == "j1" );
    assert( file.skillSet(0) == "s1" );
    assert( file.LOB(0) == "LOB1" );
    assert( file.source(0) == "ibm" );
    assert( file.region(0) == "emea" );
    assert( file.periodAsInt(0) == 0 );
    assert( file.usageQuantityAsFloat(0) == 18.0f );


    
    
    // Test reading record by key    
    std::string key = file.key("j1","s1","LOB1","ibm","emea","gb","london","abc","7","global","foo","transportation",0);
    assert( file.usageQuantityAsFloat(key) == 18.0f );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      jobRole(recNum),
      skillSet(recNum),
      LOB(recNum),
      source(recNum),
      region(recNum),
      country(recNum),
      city(recNum),
      reportingUnit(recNum),
      band(recNum),
      global(recNum),
      competency(recNum),
      industry(recNum),
      periodAsInt(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPbomFile04Feb();
  
  // copy constructor  -- don't use!
  RCPbomFile04Feb( const RCPbomFile04Feb& source );
  
  // assignment operator -- don't use!
  RCPbomFile04Feb&
  operator=(const RCPbomFile04Feb& rhs);

  
};




class RCPbomFile04FebIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(jobRole);
  getFieldFileWithIteratorH(skillSet);
  getFieldFileWithIteratorH(LOB);
  getFieldFileWithIteratorH(source);
  getFieldFileWithIteratorH(region);
  getFieldFileWithIteratorH(country);
  getFieldFileWithIteratorH(city);
  getFieldFileWithIteratorH(reportingUnit);
  getFieldFileWithIteratorH(band);
  getFieldFileWithIteratorH(global);
  getFieldFileWithIteratorH(competency);
  getFieldFileWithIteratorH(industry);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(usageQuantity);
  
  // preferred constructor
  RCPbomFile04FebIterator(const RCPbomFile04Feb & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPbomFile04FebIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPbomFile04Feb file("../data/example04Feb/bom.csv");
    RCPbomFile04FebIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
        assert( fileIter.jobRole() == "j1");
        assert( fileIter.skillSet() == "s1");
        assert( fileIter.LOB() == "LOB1");
        assert( fileIter.source() == "ibm");
        assert( fileIter.region() == "emea");
        assert( fileIter.country() == "gb");
        assert( fileIter.city() == "london");
        assert( fileIter.reportingUnit() == "abc");
        assert( fileIter.band() == "7");
        assert( fileIter.global() == "global");
        assert( fileIter.competency() == "foo");
        assert( fileIter.industry() == "transportation");
        assert( fileIter.periodAsInt() == 0 );
        assert( fileIter.usageQuantityAsFloat() == 18.0f );
        //assert( fileIter.recNum() == 11 );    
      }
      if ( recNo == 1 ) {
        assert( fileIter.jobRole() == "j1");
        assert( fileIter.skillSet() == "s1");
        assert( fileIter.LOB() == "LOB1");
        assert( fileIter.source() == "ibm");
        assert( fileIter.region() == "na");
        assert( fileIter.country() == "gb");
        assert( fileIter.city() == "london");
        assert( fileIter.reportingUnit() == "abc");
        assert( fileIter.band() == "7");
        assert( fileIter.global() == "non-global");
        assert( fileIter.competency() == "foo");
        assert( fileIter.industry() == "transportation");
        assert( fileIter.periodAsInt() == 0 );
        assert( fileIter.usageQuantityAsFloat() == 8.0f );
        //assert( fileIter.recNum() == 11 );    
      }

      recNo++;
    }
    
    // number of records 

    assert( fileIter.recNum()==20);
  }

private:
  
  
  // default constructor -- don't use!
  RCPbomFile04FebIterator();
  
  // copy constructor  -- don't use!
  RCPbomFile04FebIterator( const RCPbomFile04FebIterator& source );
  
  // assignment operator -- don't use!
  RCPbomFile04FebIterator&
  operator=(const RCPbomFile04FebIterator& rhs);

  
};
#endif
@


1.5
log
@more tests for new (expanded) format. Also fixed memory leak in appdata,
and moved the setting of global variables regarding format, algorithm, and
problem to populate (out of rcp.cpp)
@
text
@@


1.4
log
@Changed some asserts to match the input data
@
text
@d176 33
a208 1
                
a209 17
      assert( fileIter.jobRole() == "j1");
      assert( fileIter.skillSet() == "s1");
      assert( fileIter.LOB() == "LOB1");
      assert( fileIter.source() == "ibm");
      assert( fileIter.region() == "emea");
      assert( fileIter.country() == "gb");
      assert( fileIter.city() == "london");
      assert( fileIter.reportingUnit() == "abc");
      assert( fileIter.band() == "7");
      assert( fileIter.global() == "global");
      assert( fileIter.competency() == "foo");
      assert( fileIter.industry() == "transportation");
      assert( fileIter.periodAsInt() == 0 );
      assert( fileIter.usageQuantityAsFloat() == 18.0f );
        //assert( fileIter.recNum() == 11 );
          
      }
d213 3
a215 2
    // number of records including comments
    //assert( fileIter.recNum()==27);
@


1.3
log
@more updates for the additional fields
@
text
@d85 1
a85 1
    assert( file.source(0) == "src1" );
d87 2
a88 2
    assert( file.periodAsInt(0) == 1 );
    assert( file.usageQuantityAsFloat(0) == 3.0f );
d94 2
a95 2
    std::string key = file.key("j1","s1","LOB1","src1","emea","gb","london","foo","7","global","abc","transportation",1);
    assert( file.usageQuantityAsFloat(key) == 3.0f );
d181 1
a181 1
      assert( fileIter.source() == "src1");
d185 1
a185 1
      assert( fileIter.reportingUnit() == "foo");
d188 1
a188 1
      assert( fileIter.competency() == "abc");
d190 2
a191 2
      assert( fileIter.periodAsInt() == 1 );
      assert( fileIter.usageQuantityAsFloat() == 3.0f );
@


1.2
log
@new fields
@
text
@d19 1
a19 1
  getIntFieldH(band);
d46 1
a46 1
    int band,
a52 1
    char bandchar[100];
a53 1
    sprintf( bandchar, "%d", band);
d63 1
a63 1
      bandchar + "!@@#$%" + 
d94 1
a94 1
    std::string key = file.key("j1","s1","LOB1","src1","emea","gb","london","foo",7,"global","abc","transportation",1);
d113 1
a113 1
      bandAsInt(recNum),
d151 1
a151 1
  getIntFieldFileWithIteratorH(band);
d186 1
a186 1
      assert( fileIter.bandAsInt() == 7);
@


1.1
log
@preparation for new "complete" format (with more fields)
@
text
@d15 8
a22 1
  getFieldH(resourceLocName);
d32 1
a32 1
    hasHeaderRecord(7);
d42 8
a49 1
    const std::string & resourceLocName,
d53 1
d55 1
d61 8
a68 1
      resourceLocName + "!@@#$%" + 
d79 1
a79 1
    RCPbomFile04Feb file("../data/example_simple/bom.csv");
d84 1
a84 1
    assert( file.jobRole(0) == "DetailA" );
d88 3
a90 3
    assert( file.resourceLocName(0) == "l1" );
    assert( file.periodAsInt(0) == 0 );
    assert( file.usageQuantityAsFloat(0) == 30.0f );
d93 1
a93 7
    assert( file.jobRole(1) == "DetailB" );
    assert( file.skillSet(1) == "s1" );
    assert( file.LOB(1) == "LOB1" );
    assert( file.source(1) == "src1" );
    assert( file.resourceLocName(1) == "l1" );
    assert( file.periodAsInt(1) == 0 );
    assert( file.usageQuantityAsFloat(1) == 20.0f );
d96 2
a97 2
    std::string key = file.key("DetailC","s1","LOB1","src1","l2",0);
    assert( file.usageQuantityAsFloat(key) == 20.0f );
d111 8
a118 1
      resourceLocName(recNum),
d149 8
a156 1
  getFieldFileWithIteratorH(resourceLocName);
d171 1
a171 1
    RCPbomFile04Feb file("../data/example_simple/bom.csv");
d180 1
a180 1
      assert( fileIter.jobRole() == "DetailA");
d184 10
a193 3
      assert( fileIter.resourceLocName() == "l1");
      assert( fileIter.periodAsInt() == 0 );
      assert( fileIter.usageQuantityAsFloat() == 30.0f );
@

