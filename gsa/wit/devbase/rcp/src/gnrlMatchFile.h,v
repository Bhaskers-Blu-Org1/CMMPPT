head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2004.03.18.15.52.03;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.18.15.46.12;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.18.14.43.58;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.16.20.26.26;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fixed some unit test cases
@
text
@#ifndef RCPgnrlMatchFile_h
#define RCPgnrlMatchFile_h

#include "scoFile.h"


class RCPgnrlMatchFile : public SCOcsvFormatFile {
public:

  
  // preferred constructor
  RCPgnrlMatchFile(
    std::string filename,
    int numResourceIdFields)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    numResourceIdFields_ = numResourceIdFields;

    hasHeaderRecord(numResourceIdFields);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  
  // destructor
  ~RCPgnrlMatchFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    {
      RCPgnrlMatchFile file("../data/example_match2/match.csv",2);
      
      // Test reading first record
      
      assert( file.fieldAsInt(0,"jobRoleMatch")==1 );
      assert( file.fieldAsInt(0,"skillSetMatch")==0 );
      
    }
    
    // tests from resourceFile04Feb.h
    {

      RCPgnrlMatchFile file("../data/example04Feb/match.csv",12);
      
      // Test reading first record
      
      assert( file.fieldAsInt(0,"jobRoleMatch")==1 );
      assert( file.fieldAsInt(0,"skillSetMatch")==1 );
      assert( file.fieldAsInt(0,"LOBMatch")==1 );
      assert( file.fieldAsInt(0,"sourceMatch")==1 );
      assert( file.fieldAsInt(0,"regionMatch")==1);
      assert( file.fieldAsInt(0,"countryMatch")==1 );
      assert( file.fieldAsInt(0,"cityMatch")==1 );
     }


  }
  

protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
    key( unsigned recNum ) const
  {
    std::string retVal = fieldAsString(recNum,"jobRoleMatch"); //DLG does this make sense?
    return retVal;
  }
private:
  
  // default constructor -- don't use!
  RCPgnrlMatchFile();
  
  // copy constructor  -- don't use!
  RCPgnrlMatchFile( const RCPgnrlMatchFile& source );
  
  // assignment operator -- don't use!
  RCPgnrlMatchFile&
  operator=(const RCPgnrlMatchFile& rhs);

  int numResourceIdFields_;
};



class RCPgnrlMatchFileIterator : public SCOfileIterator {
public:
  
  // fields 
 
  

  // preferred constructor
  RCPgnrlMatchFileIterator(const RCPgnrlMatchFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPgnrlMatchFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    // tests from resourceFile.h
    {
      RCPgnrlMatchFile file("../data/example_match2/match.csv",2);
      RCPgnrlMatchFileIterator fileIter(file);
      
      // loop once for each record
      int recNo=0;
      for ( ; fileIter()!=NULL; ) {    
        if ( recNo == 0 ) {
          
          assert( fileIter.fieldOnRecordAsInt("jobRoleMatch")==1 );
          assert( fileIter.fieldOnRecordAsInt("skillSetMatch")==0 );
          
          
        }
        recNo++;
      }
    }
    
    // tests from resourceFile04Feb.h
    {
      RCPgnrlMatchFile file("../data/example04Feb/match.csv",12);
      RCPgnrlMatchFileIterator fileIter(file);
      
      // loop once for each record
      int recNo=0;
      for ( ; fileIter()!=NULL; ) {    
        if ( recNo == 0 ) {
          
          assert( fileIter.fieldOnRecordAsInt("jobRoleMatch")==1 );
          assert( fileIter.fieldOnRecordAsInt("skillSetMatch")==1 );
          
          
        }
        recNo++;
      }
      
      // number of records including comments
      //assert( fileIter.recNum()==27);
    }
    
   
  }

private:
  
  
  // default constructor -- don't use!
  RCPgnrlMatchFileIterator();
  
  // copy constructor  -- don't use!
  RCPgnrlMatchFileIterator( const RCPgnrlMatchFileIterator& source );
  
  // assignment operator -- don't use!
  RCPgnrlMatchFileIterator&
  operator=(const RCPgnrlMatchFileIterator& rhs);

  
};
#endif
@


1.3
log
@cleaned up unitTest, and which .h files need to be included in unitTest and populate.
@
text
@d110 2
d113 12
@


1.2
log
@iterator self-tests were using a non-existant directory
@
text
@d34 6
@


1.1
log
@*** empty log message ***
@
text
@a33 1
      RCPgnrlMatchFile file("../data/example_simple/match.csv",5);
a34 6
      // Test reading first record
      assert(file.fieldAsInt(0,"jobRoleMatch") == 1);
      assert( file.fieldAsInt(0,"skillSetMatch")==1 );
      assert( file.fieldAsInt(0,"LOBMatch")==0 );
      assert( file.fieldAsInt(0,"sourceMatch")==1 );
      assert( file.fieldAsInt(0,"locationMatch")==0 );
a103 17
      RCPgnrlMatchFile file("../data/example_simple/match.csv",5);
      RCPgnrlMatchFileIterator fileIter(file);
      
      // loop once for each record
      int recNo=0;
      for ( ; fileIter()!=NULL; ) {    
        if ( recNo == 0 ) {
          
          assert( fileIter.fieldOnRecordAsInt("jobRoleMatch")==1 );
          assert( fileIter.fieldOnRecordAsInt("skillSetMatch")==1 );
          assert( fileIter.fieldOnRecordAsInt("LOBMatch")==0 );
          assert( fileIter.fieldOnRecordAsInt("sourceMatch")==1 );
          assert( fileIter.fieldOnRecordAsInt("locationMatch")==0 );
         
        }
        recNo++;
      }
a104 2
      // number of records including comments
      //assert( fileIter.recNum()==27);
@

