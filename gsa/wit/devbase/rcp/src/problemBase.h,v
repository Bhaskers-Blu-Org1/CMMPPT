head	1.12;
access;
symbols
	start:1.1.1.1 IBM:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2007.03.21.14.24.28;	author fasano;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.08.14.57.48;	author gresh;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.12.14.04.25;	author dpc;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.04.02.08.01;	author fasano;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.03.13.29.27;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.08.21.04.09;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.23.11.10.48;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.21.04.22.25;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.19.19.34.24;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.18.21.35.12;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.18.19.32.19;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.13.14.23.39;	author fasano;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.13.14.23.39;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Added RcpProblem::setOptWithLotsSizes method to replace witSetOptWithLotSizes
(WIT no longer has the function witSetOptWithLotSizes).
Added some pragma's to reduce the warnings issued by the MS V8 compiler
@
text
@#ifndef SCO_PROBLEM_BASE_H
#define SCO_PROBLEM_BASE_H

#if defined(_MSC_VER)
#pragma warning(disable:4996)
#endif

//#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <cassert>
#include "checkWitRC.h"

#include <wit.h>

extern "C" {typedef witReturnCode (STDCALL * witSetNameFloatStar) (
   WitRun * const theWitRun,
   const char * const name,
   const float * const floatVec);}

extern "C" {typedef witReturnCode (STDCALL * witSetDblNameIntStar) (
   WitRun * const theWitRun,
   const char * const partName,
   const char * const demandName,
   const int * const intVec);}

extern "C" {typedef witReturnCode (STDCALL * witGetNameFloatStarStar) (
   WitRun * const theWitRun,
   const char * const name,
   float ** floatVec);}

extern "C" {typedef witReturnCode (STDCALL * witSetName3FloatStar) (
   WitRun * const theWitRun,
   const char * const operationName,
   const float * const hardLower,
   const float * const softLower,
   const float * const hardUpper);}

extern "C" {typedef witReturnCode (STDCALL * witGetName3FloatStar) (
   WitRun * const theWitRun,
   const char * const operationName,
   float ** hardLower,
   float ** softLower,
   float ** hardUpper);}

extern "C" {typedef witReturnCode (STDCALL * witSetNameIndexFloatStar) (
   WitRun * const theWitRun,
   const char * const name,   
   const int bopEntryIndex,
   const float * const floatVec);}

extern "C" {typedef witReturnCode (STDCALL * witSetNameIndexIndexFloatStar) (
   WitRun * const theWitRun,
   const char * const name,   
   const int bopEntryIndex,   
   const int subEntryIndex,
   const float * const floatVec);}

extern "C" {typedef witReturnCode (STDCALL * witGetNameIndexFloatStarStar) (
   WitRun * const theWitRun,
   const char * const name,   
   const int bopEntryIndex,
   float ** floatVec);}

extern "C" {typedef witReturnCode (STDCALL * witGetNameIndexIntStarStar) (
   WitRun * const theWitRun,
   const char * const name,   
   const int bopEntryIndex,
   int ** intVec);}

extern "C" {typedef witReturnCode (STDCALL * witGetNameIndexIndexFloatStarStar) (
   WitRun * const theWitRun,
   const char * const name,   
   const int bopEntryIndex,   
   const int subEntryIndex,
   float ** floatVec);}

extern "C" {typedef witReturnCode (STDCALL * witGetNameIndexIndexIntStarStar) (
   WitRun * const theWitRun,
   const char * const name,   
   const int bopEntryIndex,   
   const int subEntryIndex,
   int ** intVec);}

extern "C" {typedef witReturnCode (STDCALL * witGetNameIndexIndexIntStar) (
   WitRun * const theWitRun,
   const char * const consumingOperationName,
   const int bomEntryIndex,
   const int subsBomEntryIndex,
   int * earliestPeriod);}

extern "C" {typedef witReturnCode (STDCALL * witSetDblNameFloatStar) (
   WitRun * const theWitRun,
   const char * const partName,  
   const char * const demandName, 
   const float * const floatVec);}

extern "C" {typedef witReturnCode (STDCALL * witGetDblNameFloatStarStar) (
   WitRun * const theWitRun,
   const char * const partName,
   const char * const demandName,
   float ** floatVec);}

class SCOproblemBase  {
public:

  //----------------------------------
  // Methods for global attributes.
  //----------------------------------
  // Set/Get String Describing Problem
  void setTitle(const std::string & title);
  std::string getTitle() const;

  // Set/Get Number of Periods in Problem
  void setNPeriods(int nP);
  inline int getNPeriods() const
  {
    int retVal = nPeriods_;
#ifndef NDEBUG
    //std::cout <<"called getNPeriods()" <<std::endl;
    int nP;
    checkWitRC(witGetNPeriods(mutableWitRun(),&nP));
    assert(nP==retVal);
#endif
    return retVal;
  }


  // Set OSL Logfile name
  void setOslMesgFileName(const std::string & name);
  

  
  //--------------------
  // Key Performance Indicators
  //--------------------
  double getObjValue() const;


  //----------------------------------------------------------------------

  void writeWitData( std::string filename ) const;


  // default constructor
  SCOproblemBase();
  
  // copy constructor
  SCOproblemBase( const SCOproblemBase& source );
  
  // assignment operator
  SCOproblemBase&
  operator=(const SCOproblemBase& rhs);
  
  // destructor
  ~SCOproblemBase();
  

  // Self-test
  static void test();

protected:
   
  // Set element of Part/Operation float* attribute, given period and fltValue
  void witSetNameAttribute(
    witGetNameFloatStarStar witGetFunc,
    witSetNameFloatStar     witSetFunc,
    const std::string & name,
    int period, 
    float supply ); 
  
  // Set Part/Operation float* attribute, given std::vector<float>
  void witSetNameAttribute(
    witSetNameFloatStar     witSetFunc,
    const std::string & name,
    const std::vector<float> & value );

  // Set Part/Operation float* attribute, given float
  void witSetNameAttribute(
    witSetNameFloatStar     witSetFunc,
    const std::string & name,
    float value );
  
  // Set Part/Operation bound attribute, given three std::vector<float> vectors
  void witSetNameBoundAttribute(
    witSetName3FloatStar     witSetFunc,
    const std::string & name,
    const std::vector<float> & hlb,
    const std::vector<float> & slb,
    const std::vector<float> & hub );

  // Set element on bom/bop float* attribute, given period and fltValue
  void witSetArcAttribute(
    witGetNameIndexFloatStarStar witGetFunc,
    witSetNameIndexFloatStar     witSetFunc,
    const std::string & opName,
    int index,
    int period, 
    float flt );

  // Set element on bom/bop float* attribute, given std::vector<float>
  void witSetArcAttribute(
    witSetNameIndexFloatStar     witSetFunc,
    const std::string & opName,
    int index,
    const std::vector<float> & value );

  // Set element on bom/bop float* attribute, given float
  void witSetArcAttribute(
    witSetNameIndexFloatStar     witSetFunc,
    const std::string & opName,
    int index,
    float value );

  // Set element on demand float* attribute, given period and fltValue
  void witSetDemandAttribute(
    witGetDblNameFloatStarStar      witGetFunc,
    witSetDblNameFloatStar          witSetFunc,
    const std::string & partName,
    const std::string & demandName,
    int period, 
    float flt );
  
  void witSetDemandAttribute(
    witSetDblNameFloatStar          witSetFunc,
    const std::string & partName,
    const std::string & demandName,
    float flt );
  
  // Set an int * demand attribute
  void witSetDemandAttribute(
    witSetDblNameIntStar          witSetFunc,
    const std::string & partName,
    const std::string & demandName,
    int i );
  
  // Get vector of wit part/Operation float* attribute
  std::vector<float> witGetNameAttribute(
    witGetNameFloatStarStar witGetFunc,
    const std::string & name )const;

  // Get vector of bom/bop float* attribute
  std::vector<float> witGetArcAttribute(
    witGetNameIndexFloatStarStar     witGetFunc,
    const std::string & opName,
    int index )const;
  // Get vector of bom/bop int* attribute
  std::vector<int> witGetArcAttribute(
    witGetNameIndexIntStarStar     witGetFunc,
    const std::string & opName,
    int index )const;

  
  // Get vector of sub float* attribute
  std::vector<float> witGetSubArcAttribute(
    witGetNameIndexIndexFloatStarStar     witGetFunc,
    const std::string & opName,
    int index, int subIndex )const;
  // Get vector of sub int* attribute
  std::vector<int> witGetSubArcAttribute(
    witGetNameIndexIndexIntStarStar     witGetFunc,
    const std::string & opName,
    int index, int subIndex )const;
  // Get vector of sub int attribute
  int witGetSubArcAttribute(
    witGetNameIndexIndexIntStar     witGetFunc,
    const std::string & opName,
    int index, int subIndex )const;
  
  // Set sub float* attribute, given period and fltValue
  void witSetSubArcAttribute(
    witGetNameIndexIndexFloatStarStar witGetFunc,
    witSetNameIndexIndexFloatStar     witSetFunc,
    const std::string & opName,
    int index, int subIndex,
    int period, 
    float flt );

  // Set sub float* attribute
  void witSetSubArcAttribute(
    witSetNameIndexIndexFloatStar     witSetFunc,
    const std::string & opName,
    int index, int subIndex,
    const std::vector<float> & fltVec );

  void witSetSubArcAttribute(
    witSetNameIndexIndexFloatStar     witSetFunc,
    const std::string & opName,
    int index, int subIndex,
    float flt );

  // Get vector of wit demand float* attribute
  std::vector<float> witGetDemandAttribute(
    witGetDblNameFloatStarStar witGetFunc,
    const std::string & partName,
    const std::string & demandName )const;

  
  // Get Part/Operation bound attributes, given three std::vector<float> vectors
  void witGetNameBoundAttribute(
    witGetName3FloatStar     witGetFunc,
    const std::string & name,
    std::vector<float> & hlb,
    std::vector<float> & slb,
    std::vector<float> & hub )const;

  
  // Set wit bounds and ensure that hlb<=slb<=hub
  // This condition is not being met.
  void setExecBounds(
    const std::string opName,
    std::vector<float> hlb,
    std::vector<float> slb,
    std::vector<float> hub );

    
  public:
  inline std::vector<float> witFloatStarToStlVec(const float * inputVec ) const
  {
    std::vector<float>  retVal;
    int np = getNPeriods();
    int i;
    for ( i=0; i<np; ++i ) retVal.push_back(inputVec[i]);
    return retVal;
  };

  inline std::vector<int> witIntStarToStlVec(const int * inputVec ) const
  {
    std::vector<int>  retVal;
    int np = getNPeriods();
    int i;
    for ( i=0; i<np; ++i ) retVal.push_back(inputVec[i]);
    return retVal;
  };

  inline float * stlVecToFloatStar(const std::vector<float> & inputVector ) const
  {
    int len = inputVector.size();
    float * retVal = NULL;
    if ( len > 0 ) {
      //retVal = (float *) malloc(len*sizeof(float));
      retVal = new float[len];
      int i;
      for ( i=0; i<len; ++i ) retVal[i] = inputVector[i];
    }
    return retVal;
  };
  
  inline float * floatToFloatStar(float input ) const
  {
    int len = getNPeriods();
    //float * retVal = (float *) malloc(len*sizeof(float));
    float * retVal = new float[len];
    int i;
    for ( i=0; i<len; ++i ) retVal[i] = input;
    return retVal;
  };

  inline int * intToIntStar(int input ) const
  {
    int len = getNPeriods();
    //float * retVal = (float *) malloc(len*sizeof(float));
    int * retVal = new int[len];
    int i;
    for ( i=0; i<len; ++i ) retVal[i] = input;
    return retVal;
  };
  
  inline std::vector<float> floatToStlVec(float input ) const
  {
    int len = getNPeriods();
    std::vector<float> retVal;
    int i;
    for ( i=0; i<len; ++i ) retVal.push_back(input);
    return retVal;
  };

  
  // String Utilities
  static std::string textBetween(const std::string & src, const std::string & before,const std::string & after);
  static std::string textAfter(const std::string & src, const std::string & before);
  static bool beginsWith(const std::string & src, const std::string & begString);
 
  protected:

  //------------------------
  bool witPartExists( const std::string & name ) const;
  bool witGetDemandExists(const std::string & demandedPartName,const std::string & demandName) const;
  bool witGetSubsBomEntryExists(
    const std::string & operationName,
    int bomEntry,
    int subEntry) const;
  bool witOperationExists( const std::string & name ) const;
  
  // Get Bom Entry Index
  // Return first bomEntryIndex for specified operation and part
  // -1 returned if bomEntryIndex does not exist
  int getBomEntryIndex( 
    const std::string & opName, 
    const std::string & partName
    ) const;

  static void compareWitSolutionsTimeVec(
                                const std::string & id,
                                const std::vector<float> & execTv1,
                                const std::vector<float> & execTv2, 
                                const std::vector<float> & costTv1,
                                const std::vector<float> & costTv2 );
  static void compareWitSolutions( const SCOproblemBase & p1,  const SCOproblemBase & p2 );
  //------------------------


  WitRun * mutableWitRun() const;
  WitRun * witRun();

  // return number of calls to witImplode
  int implosionCount() const;

  void gutsOfCopy( const SCOproblemBase& source );
  void gutsOfDestructor();

private:
  mutable WitRun * wr_;
  int implosionCount_;

  int nPeriods_; // cached for performance


};


#endif
@


1.11
log
@getting the flex mix stuff working. Seems to be pretty close to correct
@
text
@d4 4
@


1.10
log
@Added a wrapper around all WIT calls:  checkWitRC(witReturnCode wrc)
@
text
@d381 1
a381 1

@


1.9
log
@added method witSetDemandAttribute
@
text
@d10 1
d120 1
a120 1
    witGetNPeriods(mutableWitRun(),&nP);
@


1.8
log
@Added some more debug testing code
@
text
@d18 6
d227 7
d351 10
@


1.7
log
@added code that calls witAddSubsBomEntry for substitute skills
@
text
@d367 1
@


1.6
log
@changed name of method floatToConstFloatStar to floatToFloatStar because it makes more sense
@
text
@d263 13
@


1.5
log
@Modified so an RCP bom maps to many WIT bomEntries. One for each consumption period.
@
text
@d320 1
a320 1
  inline float * floatToConstFloatStar(float input ) const
@


1.4
log
@added code methods to addBom and set/get attributes.
added code to read bom file and addBoms and attributes.
@
text
@d199 7
@


1.3
log
@Modified to use witPartAppData for setting/getting rcp engagement revenue, startPeriod, and duration
@
text
@d344 12
a355 3
                                           const std::string & operationName,
                                           int bomEntry,
                                           int subEntry) const;
@


1.2
log
@fixed problem where resources of the same name were being created
@
text
@a362 1
private:
d366 1
@


1.1
log
@Initial revision
@
text
@d341 1
@


1.1.1.1
log
@initial import
@
text
@@
