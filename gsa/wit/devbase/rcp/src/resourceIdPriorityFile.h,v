head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.04.20.14.19.47;	author dpc;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.14.18.55.32;	author dpc;	state Exp;
branches;
next	;


desc
@@


1.2
log
@populate.cpp will truncate resource ID priorities to 1 million
@
text
@#ifndef RCPresourceIdPriorityFile_h
#define RCPresourceIdPriorityFile_h

#include "scoFile.h"

// NOTE: Resource ID priorities larger than 1 million will be truncated in populate.cpp to 1 million

class RCPresourceIdPriorityFile : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(resourceIdName);
  getIntFieldH(priority);
  
  // preferred constructor
  RCPresourceIdPriorityFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(2);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & resourceIdName
    ) 
  {
    std::string retVal = 
      resourceIdName  + "!@@#$%";
    return retVal;
  };
  
  // destructor
  ~RCPresourceIdPriorityFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPresourceIdPriorityFile file("../data/example_prioritysubstitute/idPriority.csv");
    
    // Test reading first record

    assert( file.resourceIdName(0) =="source");
    assert( file.priorityAsInt(0) == 1 );
    assert( file.resourceIdName(1) =="global");
    assert( file.priorityAsInt(1) == 4 );

    
    // Test reading record by key    
    std::string key = file.key("jobRole");
    assert( file.priorityAsInt(key) == 2 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
			     resourceIdName(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPresourceIdPriorityFile();
  
  // copy constructor  -- don't use!
  RCPresourceIdPriorityFile( const RCPresourceIdPriorityFile& source );
  
  // assignment operator -- don't use!
  RCPresourceIdPriorityFile&
  operator=(const RCPresourceIdPriorityFile& rhs);

  
};



class RCPresourceIdPriorityFileIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(resourceIdName);
  getIntFieldFileWithIteratorH(priority);
  
  // preferred constructor
  RCPresourceIdPriorityFileIterator(const RCPresourceIdPriorityFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPresourceIdPriorityFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPresourceIdPriorityFile file("../data/example_prioritysubstitute/idPriority.csv");
    RCPresourceIdPriorityFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
                
      assert( fileIter.resourceIdName() == "source");
      assert( fileIter.priorityAsInt() == 1);
          
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPresourceIdPriorityFileIterator();
  
  // copy constructor  -- don't use!
  RCPresourceIdPriorityFileIterator( const RCPresourceIdPriorityFileIterator& source );
  
  // assignment operator -- don't use!
  RCPresourceIdPriorityFileIterator&
  operator=(const RCPresourceIdPriorityFileIterator& rhs);

  
};
#endif
@


1.1
log
@New file:  resourceIdPriorityFile.h  defines a new input file format for resource identifier priorities
and added code to read in this file in populate

Changed the spelling of ...Identifer... to ...Identifier...

Modified priorityGapGlut1(), but this is not invoked yet.
@
text
@d6 1
@

