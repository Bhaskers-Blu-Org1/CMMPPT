head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2004.03.22.20.40.30;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.11.17.40.44;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.10.14.04.33;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@adding support for priority substitution on bom arcs
@
text
@#ifndef RCPbaseSubs_h
#define RCPbaseSubs_h

#include <string>
//#include "appData.h"

// This class contains information about an allowed substitution
// It contains:
//    - the name of the from attribute
//    - the name of the to attribute
//    - the cost of the substitution
//    - the leadTime required for the substitution
// It is intended that the allowed:
//   -job role substitutions 
//   -skill set substitutions
//   -location substitutions
//   -lob(line of buisness) substitutions
//   -source substitutions 
// will each be stored in a collection of this class

// This class can not be an abstract base class as originally intended,
// because then it does not seem to be usable in the STL collection classes
class RCPbaseSubs /*: public RCPappData */{
public:
  
  void setToName(const std::string & toName );
  std::string getToName() const;

  void setFromName(const std::string & fromName );
  std::string getFromName() const;

  void setCost(float cost );
  float getCost()const;

  void setLeadTime(float leadTime );
  float getLeadTime()const;
  
  void setAversion(int aversion);
  int getAversion()const;

  // default constructor
  RCPbaseSubs();

  // preferred constructor
  RCPbaseSubs(const std::string & fromSkill, const std::string & toSkill);
  
  // destructor
  virtual ~RCPbaseSubs();
  
  // copy constructor
  RCPbaseSubs( const RCPbaseSubs& source );
  
  // assignment operator
  RCPbaseSubs&
    operator=(const RCPbaseSubs& rhs);

  //virtual RCPbaseSubs * clone() const = 0;

  // Self-test
  static void test();

private:

  std::string fromName_;
  std::string toName_;
  float cost_;
  float leadTime_;
  int aversion_;
  
};


/** Operator< needed so can be key in std::map. */
inline bool
operator<(const RCPbaseSubs& s0, const RCPbaseSubs& s1) {
  bool retVal = false;
  if ( s0.getFromName() < s1.getFromName() ) 
    retVal = true;
  else 
    if ( s0.getFromName() == s1.getFromName() 
      && 
      s0.getToName() < s1.getToName() )
      retVal = true;
    return retVal;
}



#endif
@


1.2
log
@ jobRoleSubs:
-Added file class for reading.
-Created new datafiles.
-in rcpProblem added add/set/get methods
-populateRCP added stanza to read file and invoke add & set methods.
Have not yet added code for adding substitute arcs to wit model.
@
text
@d37 3
d68 1
@


1.1
log
@Added abstract base class baseSubs.
Modified skillSubs class to use baseSubs.
Will eventually add lobSubs, locSubs, jobRoleSubs all inheriting from baseSubs.
@
text
@d7 16
d54 1
a54 1
  virtual RCPbaseSubs * clone() const = 0;
d57 1
a57 1
  //static void test();
@

