head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2006.01.30.15.46.57;	author gresh;	state Exp;
branches;
next	1.10;

1.10
date	2004.08.03.15.32.00;	author dpc;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.23.18.46.50;	author fasano;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.22.23.49.13;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.22.00.51.52;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.21.17.42.02;	author gresh;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.22.19.15.31;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.13.04.52.48;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.03.19.30.04;	author dpc;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.25.18.58.54;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.18.21.35.12;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.11
log
@changes for nasco multiple skills
@
text
@#ifndef RCPengagementAppData_h
#define RCPengagementAppData_h


#include "appData.h"
#include "rcpProblem.h"

// Demand Period
// Resource QtyFromSupply QtyAcquired

// Demand Period
// Resource QtyFromSubs SubsResource

typedef std::map<RCPvectorString,float> RCPresourceQuantityMap;
typedef std::map<RCPvectorString,float>::const_iterator RCPresourceQuantityMapConstIter;

typedef std::pair<float,RCPvectorString> RCPquantitySubResourcePair;
typedef std::set<RCPquantitySubResourcePair> RCPsetQuantitySubResourcePair;
typedef std::set<RCPquantitySubResourcePair>::const_iterator RCPsetQuantitySubResourcePairConstIter;
typedef std::map<RCPvectorString,RCPsetQuantitySubResourcePair> RCPmapSetQuantitySubResourcePair;
typedef std::map<RCPvectorString,RCPsetQuantitySubResourcePair>::const_iterator RCPmapSetQuantitySubResourcePairConstIter;

class RCPengagementAppData : public RCPappData {
public:
  
  void setRevenue(float rev );
  void setRequestedStartPeriod(int period );
  //void setDuration(int d );
  void setLateAllowance(int l );
  void setPriority(int prior);
  void setQuantity(float quantity);
  void setMustDo(int mustDo);

  float getRevenue()const;
  int getRequestedStartPeriod()const;
  //int getDuration()const;
  int getLateAllowance()const;
  int getPriority()const;
  float getQuantity()const;
  int getMustDo()const;
  

  void addPeggedQuantityFromSupply(
    int period,
    const std::vector<std::string> & resourceIdValues,
    float quantityFromSupply);
  // given period, return pegged resources consumed from supply and the consumed quantities
  void getPeggedQuantitiesFromSupply(
    int period,
    std::vector<RCPvectorString> & resourcesIdValues,
    std::vector<float> & quantitiesFromSupply) const;
  // given period and resource, return quantity satisfied from supply
  float getPeggedQuantityFromSupply(
    int period,
    std::vector<std::string> & resourceIdValues) const;

  void addPeggedQuantityFromAcquisition(
    int period,
    const std::vector<std::string> & resourceIdValues,
    float quantityFromAcquisition);
  // given period, return pegged resources that are acquired and the acquired quantities
  void getPeggedQuantitiesFromAcquisition(
    int period,
    std::vector<RCPvectorString> & resourcesIdValues,
    std::vector<float> & quantitiesFromAcquisition) const;
  // given period and resource, return quantity satisfied by acquistion
  float getPeggedQuantityFromAcquisition(
    int period,
    std::vector<std::string> & resourceIdValues) const;

  void addPeggedQuantityFromSubstitution(
    int period,
    const std::vector<std::string> & resourceIdValues,
    float quantityFromSubstitution,    
    const std::vector<std::string> & subResourceIdValues);
  // given period, return pegged resources which are satifified from substitutes with quantity and substitute name
  void getPeggedQuantitiesFromSubstitution(
    int period,
    std::vector<RCPvectorString> & resourcesIdValues,
    std::vector<float> & quantitiesFromSubstitution,
    std::vector<RCPvectorString> & subResourcesIdValues) const;
  // given period and resource, return quantity and substitute resourceIdValues used to satisfy the engagement
  void getPeggedQuantitiesFromSubstitution(
    int period,
    const std::vector<std::string> & resourceIdValues,
    std::vector<float> & quantitiesFromSubstitution,
    std::vector<RCPvectorString> & subResourcesIdValues) const;

  void clearPegging();

  // default constructor
  RCPengagementAppData();
  
  // destructor
  virtual ~RCPengagementAppData();
  
  // copy constructor
  RCPengagementAppData( const RCPengagementAppData& source );
  
  // assignment operator
  RCPengagementAppData&
    operator=(const RCPengagementAppData& rhs);

  virtual RCPappData * clone() const;

  // Self-test
  static void test();

private:
  
  void addPeggedQuantity(
    std::map<int,RCPresourceQuantityMap> & peggedInfo,
    int period,
    const std::vector<std::string> & resource,
    float quantityFromSupply);
  void getPeggedQuantities(
    const std::map<int,RCPresourceQuantityMap> & peggedInfo,
    int period,
    std::vector<RCPvectorString> & resources,
    std::vector<float> & quantitiesFromSupply) const;
  float getPeggedQuantity(
    const std::map<int,RCPresourceQuantityMap> & peggedInfo,
    int period,
    std::vector<std::string> & resource) const;

  float revenue_;
  int requestedStartPeriod_;
  //int duration_;
  int lateAllowance_;
  int priority_;
  float quantity_;
  int mustDo_;
  std::map<int,RCPresourceQuantityMap> peggedFromSupply_;
  std::map<int,RCPresourceQuantityMap> peggedFromAcquisition_;
  std::map<int,RCPmapSetQuantitySubResourcePair> peggedFromSubstitution_;
  
};



#endif
@


1.10
log
@Added quantity to the engagement file.  The BOM or demand file is now more like a description of the offering.  Updated the reporting in engagementO.csv.
@
text
@d32 1
d40 2
d132 1
@


1.9
log
@Added code to clear out the stored pegging info so subsequent calls to solve can be made.
@
text
@d31 1
d38 1
d128 1
@


1.8
log
@added additional methods to get pegging info from engagementAppData
@
text
@d84 2
@


1.7
log
@engagementAppData updated to contain pegging info
@
text
@d14 2
a15 3
typedef std::pair<RCPvectorString,float> RCPresourceQuantityPair;
typedef std::set<RCPresourceQuantityPair> RCPsetResourceQuantityPair;
typedef std::set<RCPresourceQuantityPair>::const_iterator RCPsetResourceQuantityPairConstIter;
d17 5
a21 4

typedef std::pair<RCPresourceQuantityPair,RCPvectorString> RCPresourceQuantitySubResourceTriple;
typedef std::set<RCPresourceQuantitySubResourceTriple> RCPsetResourceQuantitySubResourceTriple;
typedef std::set<RCPresourceQuantitySubResourceTriple>::const_iterator RCPsetResourceQuantitySubResourceTripleConstIter;
d40 1
a40 1
    const std::vector<std::string> & resource,
d42 1
d45 1
a45 1
    std::vector<RCPvectorString> & resources,
d47 5
d54 1
a54 1
    const std::vector<std::string> & resource,
d56 1
d59 1
a59 1
    std::vector<RCPvectorString> & resources,
d61 5
d68 1
a68 1
    const std::vector<std::string> & resource,
d70 2
a71 1
    const std::vector<std::string> & subResource);
d74 7
a80 1
    std::vector<RCPvectorString> & resources,
d82 1
a82 1
    std::vector<RCPvectorString> & subResources) const;
d105 1
a105 1
    std::map<int,RCPsetResourceQuantityPair> & peggedInfo,
d110 1
a110 1
    const std::map<int,RCPsetResourceQuantityPair> & peggedInfo,
d114 4
d124 3
a126 3
  std::map<int,RCPsetResourceQuantityPair> peggedFromSupply_;
  std::map<int,RCPsetResourceQuantityPair> peggedFromAcquisition_;
  std::map<int,RCPsetResourceQuantitySubResourceTriple> peggedFromSubstitution_;
@


1.6
log
@remove "duration" from engagement files, along with "engagement location". Also, implement month/year format for engagement start times.
@
text
@d4 1
d6 16
d38 27
d84 11
d101 3
@


1.5
log
@folding together original "engagement" oriented files with new ER5 files
@
text
@d11 1
a11 1
  void setDuration(int d );
a12 1
  void setLocation(const std::string & loc );
d17 1
a17 1
  int getDuration()const;
a18 1
  std::string getLocation()const;
d43 1
a43 1
  int duration_;
a44 1
  std::string location_;
@


1.4
log
@Code modifed so that an engagment is only uniquely identified by enagementName.
Engagement location is now an attribute of an engagement stored in appData.
@
text
@d14 1
d21 1
d48 1
@


1.3
log
@Added the concept of lateAllowance to allow us to set the ShipReward for a fixed number of periods following the due date.  The lateAllowance value is stored in the engagementAppData.  The engagementFile was modified to add the new field.  I added a CR/LF to the end of populateRCP.h to avoid the warning message from the Linux compiler.
@
text
@d13 1
d19 1
d45 1
@


1.2
log
@added new examples (very simple) in example3. Also changed various routines
related to "getEngagementStart" to "getRequestedEngagementStart" so that
we could have a routine to supply the actual start time.
@
text
@d12 1
d17 1
d42 1
@


1.1
log
@Modified to use witPartAppData for setting/getting rcp engagement revenue, startPeriod, and duration
@
text
@d10 1
a10 1
  void setStartPeriod(int period );
d14 1
a14 1
  int getStartPeriod()const;
d38 1
a38 1
  int startPeriod_;
@

