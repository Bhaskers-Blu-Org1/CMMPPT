head	1.7;
access;
symbols;
locks; strict;
comment	@// @;


1.7
date	2004.03.15.18.08.34;	author fasano;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.15.17.01.38;	author fasano;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.12.15.24.09;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.12.18.00.43;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.12.17.39.32;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.10.03.16.41;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.21.04.22.25;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.7
log
@changes tom bomAppData to use resourceIdName for sub
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

#include "rcpProblem.h"
#include "bomAppData.h"


void RCPbomAppData::setPeriod( int p )
{
  period_ = p;
}

int RCPbomAppData::getPeriod() const
{
  return period_;
}


void RCPbomAppData::setMatch(const std::string & resourceIdName, int match )
{
  match_[resourceIdName] = match;
}
int RCPbomAppData::getMatch(const std::string & resourceIdName) const
{
  std::map<std::string,int>::const_iterator it = match_.find(resourceIdName);
  int retVal = 0;
  if ( it != match_.end() ) retVal = it->second;
  return retVal;
}


void RCPbomAppData::setSub(const std::string & resourceIdName, int sub )
{
  sub_[resourceIdName] = sub;
}
int RCPbomAppData::getSub(const std::string & resourceIdName) const
{
  std::map<std::string,int>::const_iterator it = sub_.find(resourceIdName);
  int retVal = 0;
  if ( it != sub_.end() ) retVal = it->second;
  return retVal;
}


// default constructor
RCPbomAppData::RCPbomAppData()
:
RCPappData(),
period_(-1),
match_(),
sub_()
{}


// destructor

RCPbomAppData::~RCPbomAppData()
{}

// copy constructor
RCPbomAppData::RCPbomAppData( const RCPbomAppData& source ):
RCPappData(source),
period_(source.period_),
match_(source.match_),
sub_(source.sub_)
{};

// assignment operator
RCPbomAppData&
RCPbomAppData::operator=(const RCPbomAppData& rhs)
{  
  if (this != &rhs) {        
    RCPappData::operator=(rhs);
    period_ = rhs.period_;
    match_ = rhs.match_;
    sub_ = rhs.sub_;
  }
  return *this;
}

RCPappData * RCPbomAppData::clone() const
{ return (new RCPbomAppData(*this));}

// Self-test
void RCPbomAppData::test()
{
  
  RCPbomAppData ad1;
  
  {
    RCPbomAppData ad0;
    assert(ad0.getPeriod()==-1);
    
    ad0.setPeriod(2);
    assert(ad0.getPeriod()==2);

    assert( ad0.getMatch("jobRole")==0 );
    assert( ad0.getMatch("skillSet")==0 );
    assert( ad0.getMatch("location")==0 );
    assert( ad0.getMatch("lob")==0 );
    assert( ad0.getMatch("source")==0 );
    
    assert( ad0.getSub("jobRole")==0 );
    assert( ad0.getSub("skillSet")==0 );
    assert( ad0.getSub("location")==0 );
    assert( ad0.getSub("lob")==0 );
    assert( ad0.getSub("source")==0 );
   
    ad0.setMatch("jobRole",1);
    ad0.setMatch("skillSet",1);
    ad0.setMatch("location",1);
    ad0.setMatch("lob",1);
    ad0.setMatch("source",1);
    
    ad0.setSub("jobRole",1);
    ad0.setSub("skillSet",1);
    ad0.setSub("location",1);
    ad0.setSub("lob",1);
    ad0.setSub("source",1);

    assert( ad0.getMatch("jobRole")==1 );
    assert( ad0.getMatch("skillSet")==1 );
    assert( ad0.getMatch("location")==1 );
    assert( ad0.getMatch("lob")==1 );
    assert( ad0.getMatch("source")==1 );
    
    assert( ad0.getSub("jobRole")==1 );
    assert( ad0.getSub("skillSet")==1 );
    assert( ad0.getSub("location")==1 );
    assert( ad0.getSub("lob")==1 );
    assert( ad0.getSub("source")==1 );

    ad1 = ad0;
    
    ad0.setPeriod(3);
    assert(ad0.getPeriod()==3);
    
    ad0.setSub("jobRole",0);
    ad0.setSub("skillSet",0);
    ad0.setSub("location",0);
    ad0.setSub("lob",0);
    ad0.setSub("source",0);
    ad0.setMatch("jobRole",0);
    ad0.setMatch("skillSet",0);
    ad0.setMatch("location",0);
    ad0.setMatch("lob",0);
    ad0.setMatch("source",0);


    assert( ad0.getSub("jobRole")==0 );
    assert( ad0.getSub("skillSet")==0 );
    assert( ad0.getSub("location")==0 );
    assert( ad0.getSub("lob")==0 );
    assert( ad0.getSub("source")==0 );
    assert( ad0.getMatch("jobRole")==0 );
    assert( ad0.getMatch("skillSet")==0 );
    assert( ad0.getMatch("location")==0 );
    assert( ad0.getMatch("lob")==0 );
    assert( ad0.getMatch("source")==0 );
    
  }
  assert(ad1.getPeriod()==2);
  
  assert( ad1.getSub("jobRole")==1 );
  assert( ad1.getSub("skillSet")==1 );
  assert( ad1.getSub("location")==1 );
  assert( ad1.getSub("lob")==1 );
  assert( ad1.getSub("source")==1 );
  assert( ad1.getMatch("jobRole")==1 );
  assert( ad1.getMatch("skillSet")==1 );
  assert( ad1.getMatch("location")==1 );
  assert( ad1.getMatch("lob")==1 );
  assert( ad1.getMatch("source")==1 );
  
}
@


1.6
log
@changes tom bomAppData to use resourceIdName for matching
@
text
@a32 100
#if 0
void RCPbomAppData::setMatch("jobRole",int jobRoleMatch )
{
  jobRoleMatch_ = jobRoleMatch;
}
int RCPbomAppData::getMatch("jobRole")const
{
  return jobRoleMatch_;
}

void RCPbomAppData::setMatch("skillSet",int skillSetMatch )
{
  skillSetMatch_ = skillSetMatch;
}
int RCPbomAppData::getMatch("skillSet")const
{
  return skillSetMatch_;
}

void RCPbomAppData::setMatch("location",int locationMatch )
{
  locationMatch_ = locationMatch;
}
int RCPbomAppData::getMatch("location")const
{
  return locationMatch_;
}
void RCPbomAppData::setMatch("region",int regionMatch )
{
  regionMatch_ = regionMatch;
}
int RCPbomAppData::getRegionMatch()const
{
  return regionMatch_;
}
void RCPbomAppData::setCountryMatch(int countryMatch )
{
  countryMatch_ = countryMatch;
}
int RCPbomAppData::getCountryMatch()const
{
  return countryMatch_;
}
void RCPbomAppData::setCityMatch(int cityMatch )
{
  cityMatch_ = cityMatch;
}
int RCPbomAppData::getCityMatch()const
{
  return cityMatch_;
}
void RCPbomAppData::setReportingUnitMatch(int ruMatch )
{
  reportingUnitMatch_ = ruMatch;
}
int RCPbomAppData::getReportingUnitMatch()const
{
  return reportingUnitMatch_;
}
void RCPbomAppData::setBandMatch(int bandMatch )
{
  bandMatch_ = bandMatch;
}
int RCPbomAppData::getBandMatch()const
{
  return bandMatch_;
}
void RCPbomAppData::setGlobalMatch(int globalMatch )
{
  globalMatch_ = globalMatch;
}
int RCPbomAppData::getGlobalMatch()const
{
  return globalMatch_;
}
void RCPbomAppData::setCompetencyMatch(int competencyMatch )
{
  competencyMatch_ = competencyMatch;
}
int RCPbomAppData::getCompetencyMatch()const
{
  return competencyMatch_;
}
void RCPbomAppData::setIndustryMatch(int industryMatch )
{
  industryMatch_ = industryMatch;
}
int RCPbomAppData::getIndustryMatch()const
{
  return industryMatch_;
}

void RCPbomAppData::setMatch("lob",(int lobMatch )
{
  lobMatch_ = lobMatch;
}
int RCPbomAppData::getMatch("lob")const
{
  return lobMatch_;
}
d34 1
a34 1
void RCPbomAppData::setMatch("source",(int sourceMatch )
d36 1
a36 1
  sourceMatch_ = sourceMatch;
d38 1
a38 1
int RCPbomAppData::getMatch("source"()const
d40 4
a43 111
  return sourceMatch_;
}
#endif

void RCPbomAppData::setJobRoleSub(int jobRoleSub )
{
  jobRoleSub_ = jobRoleSub;
}
int RCPbomAppData::getJobRoleSub()const
{
  return jobRoleSub_;
}

void RCPbomAppData::setSkillSetSub(int skillSetSub )
{
  skillSetSub_ = skillSetSub;
}
int RCPbomAppData::getSkillSetSub()const
{
  return skillSetSub_;
}

void RCPbomAppData::setLocationSub(int locationSub )
{
  locationSub_ = locationSub;
}
int RCPbomAppData::getLocationSub()const
{
  return locationSub_;
}
void RCPbomAppData::setRegionSub(int regionSub )
{
  regionSub_ = regionSub;
}
int RCPbomAppData::getRegionSub()const
{
  return regionSub_;
}
void RCPbomAppData::setCountrySub(int countrySub )
{
  countrySub_ = countrySub;
}
int RCPbomAppData::getCountrySub()const
{
  return countrySub_;
}
void RCPbomAppData::setCitySub(int citySub )
{
  citySub_ = citySub;
}
int RCPbomAppData::getCitySub()const
{
  return citySub_;
}
void RCPbomAppData::setReportingUnitSub(int ruSub )
{
  reportingUnitSub_ = ruSub;
}
int RCPbomAppData::getReportingUnitSub()const
{
  return reportingUnitSub_;
}
void RCPbomAppData::setBandSub(int bandSub )
{
  bandSub_ = bandSub;
}
int RCPbomAppData::getBandSub()const
{
  return bandSub_;
}
void RCPbomAppData::setGlobalSub(int globalSub )
{
  globalSub_ = globalSub;
}
int RCPbomAppData::getGlobalSub()const
{
  return globalSub_;
}
void RCPbomAppData::setCompetencySub(int competencySub )
{
  competencySub_ = competencySub;
}
int RCPbomAppData::getCompetencySub()const
{
  return competencySub_;
}
void RCPbomAppData::setIndustrySub(int industrySub )
{
  industrySub_ = industrySub;
}
int RCPbomAppData::getIndustrySub()const
{
  return industrySub_;
}

void RCPbomAppData::setLobSub(int lobSub )
{
  lobSub_ = lobSub;
}
int RCPbomAppData::getLobSub()const
{
  return lobSub_;
}

void RCPbomAppData::setSourceSub(int sourceSub )
{
  sourceSub_ = sourceSub;
}
int RCPbomAppData::getSourceSub()const
{
  return sourceSub_;
d53 1
a53 6
jobRoleSub_(0),
skillSetSub_(0),
locationSub_(0),
lobSub_(0),
sourceSub_(0)

d67 1
a67 6
jobRoleSub_(source.jobRoleSub_),
skillSetSub_(source.skillSetSub_),
locationSub_(source.locationSub_),
lobSub_(source.lobSub_),
sourceSub_(source.sourceSub_)

d78 1
a78 6
    jobRoleSub_ = rhs.jobRoleSub_;
    skillSetSub_ = rhs.skillSetSub_;
    locationSub_ = rhs.locationSub_;
    lobSub_ = rhs.lobSub_;
    sourceSub_ = rhs.sourceSub_;

d105 5
a109 5
    assert( ad0.getJobRoleSub()==0 );
    assert( ad0.getSkillSetSub()==0 );
    assert( ad0.getLocationSub()==0 );
    assert( ad0.getLobSub()==0 );
    assert( ad0.getSourceSub()==0 );
d117 5
a121 5
    ad0.setJobRoleSub(1);
    ad0.setSkillSetSub(1);
    ad0.setLocationSub(1);
    ad0.setLobSub(1);
    ad0.setSourceSub(1);
d129 5
a133 5
    assert( ad0.getJobRoleSub()==1 );
    assert( ad0.getSkillSetSub()==1 );
    assert( ad0.getLocationSub()==1 );
    assert( ad0.getLobSub()==1 );
    assert( ad0.getSourceSub()==1 );
d140 5
a144 5
    ad0.setJobRoleSub(0);
    ad0.setSkillSetSub(0);
    ad0.setLocationSub(0);
    ad0.setLobSub(0);
    ad0.setSourceSub(0);
d152 5
a156 5
    assert( ad0.getJobRoleSub()==0 );
    assert( ad0.getSkillSetSub()==0 );
    assert( ad0.getLocationSub()==0 );
    assert( ad0.getLobSub()==0 );
    assert( ad0.getSourceSub()==0 );
d166 5
a170 5
  assert( ad1.getJobRoleSub()==1 );
  assert( ad1.getSkillSetSub()==1 );
  assert( ad1.getLocationSub()==1 );
  assert( ad1.getLobSub()==1 );
  assert( ad1.getSourceSub()==1 );
@


1.5
log
@new fields
@
text
@d20 15
a34 1
void RCPbomAppData::setJobRoleMatch(int jobRoleMatch )
d38 1
a38 1
int RCPbomAppData::getJobRoleMatch()const
d43 1
a43 1
void RCPbomAppData::setSkillSetMatch(int skillSetMatch )
d47 1
a47 1
int RCPbomAppData::getSkillSetMatch()const
d52 1
a52 1
void RCPbomAppData::setLocationMatch(int locationMatch )
d56 1
a56 1
int RCPbomAppData::getLocationMatch()const
d60 1
a60 1
void RCPbomAppData::setRegionMatch(int regionMatch )
d125 1
a125 1
void RCPbomAppData::setLobMatch(int lobMatch )
d129 1
a129 1
int RCPbomAppData::getLobMatch()const
d134 1
a134 1
void RCPbomAppData::setSourceMatch(int sourceMatch )
d138 1
a138 1
int RCPbomAppData::getSourceMatch()const
d142 2
d259 1
a259 5
jobRoleMatch_(0),
skillSetMatch_(0),
locationMatch_(0),
lobMatch_(0),
sourceMatch_(0),
d278 1
a278 5
jobRoleMatch_(source.jobRoleMatch_),
skillSetMatch_(source.skillSetMatch_),
locationMatch_(source.locationMatch_),
lobMatch_(source.lobMatch_),
sourceMatch_(source.sourceMatch_),
d294 1
a294 5
    jobRoleMatch_ = rhs.jobRoleMatch_;
    skillSetMatch_ = rhs.skillSetMatch_;
    locationMatch_ = rhs.locationMatch_;
    lobMatch_ = rhs.lobMatch_;
    sourceMatch_ = rhs.sourceMatch_;
d321 5
a325 5
    assert( ad0.getJobRoleMatch()==0 );
    assert( ad0.getSkillSetMatch()==0 );
    assert( ad0.getLocationMatch()==0 );
    assert( ad0.getLobMatch()==0 );
    assert( ad0.getSourceMatch()==0 );
d333 5
a337 5
    ad0.setJobRoleMatch(1);
    ad0.setSkillSetMatch(1);
    ad0.setLocationMatch(1);
    ad0.setLobMatch(1);
    ad0.setSourceMatch(1);
d345 5
a349 5
    assert( ad0.getJobRoleMatch()==1 );
    assert( ad0.getSkillSetMatch()==1 );
    assert( ad0.getLocationMatch()==1 );
    assert( ad0.getLobMatch()==1 );
    assert( ad0.getSourceMatch()==1 );
d367 5
a371 5
    ad0.setJobRoleMatch(0);
    ad0.setSkillSetMatch(0);
    ad0.setLocationMatch(0);
    ad0.setLobMatch(0);
    ad0.setSourceMatch(0);
d379 5
a383 5
    assert( ad0.getJobRoleMatch()==0 );
    assert( ad0.getSkillSetMatch()==0 );
    assert( ad0.getLocationMatch()==0 );
    assert( ad0.getLobMatch()==0 );
    assert( ad0.getSourceMatch()==0 );
d393 5
a397 5
  assert( ad1.getJobRoleMatch()==1 );
  assert( ad1.getSkillSetMatch()==1 );
  assert( ad1.getLocationMatch()==1 );
  assert( ad1.getLobMatch()==1 );
  assert( ad1.getSourceMatch()==1 );
@


1.4
log
@additional unit tests for the new match flags
@
text
@d46 64
d153 64
@


1.3
log
@added match flags
@
text
@d115 5
d125 1
d138 5
d148 1
d158 5
d168 1
d189 6
d200 6
d213 6
d235 6
d247 5
d261 5
@


1.2
log
@Added fields to bomAppData:
   jobRoleSub, skillSetSub, locationSub, lobSub, sourceSub
Added set/gets for these fields in rcpProblem.
Added reading of these fields in populateRCP.cpp and the calls to set their values in rcpProblem.
@
text
@d20 44
d108 1
@


1.1
log
@Modified so an RCP bom maps to many WIT bomEntries. One for each consumption period.
@
text
@a14 1

d20 44
d68 7
a74 1
RCPappData(),period_(-1)
d86 6
a91 1
period_(source.period_)
d101 5
d125 6
d132 12
d147 1
d149 11
a159 1
    assert(ad0.getPeriod()==3);
d163 6
@

