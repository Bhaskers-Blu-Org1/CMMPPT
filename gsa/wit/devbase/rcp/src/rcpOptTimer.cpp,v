head	1.7;
access;
symbols;
locks; strict;
comment	@// @;


1.7
date	2004.06.02.13.50.01;	author gresh;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.17.17.04.19;	author gresh;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.17.16.49.26;	author gresh;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.17.15.41.29;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.14.19.23.39;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.14.19.09.16;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.14.17.41.38;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.7
log
@undefine "DOTIMING"
@
text
@#include <time.h>
#include <sys/timeb.h>

#include "rcpOptTimer.h"
//#define DOTIMING

// Preferred Constructor
RcpOptTimer::RcpOptTimer()
{  
  initializeTimer();
}
void RcpOptTimer::initializeTimer() {

#ifdef DOTIMING
  double t = getCurrentTime();
  setStartTime(t);
  setLastTime(t);
#endif
}
double RcpOptTimer::getCurrentTime()
{
#ifdef DOTIMING
  clock_t t;
  t = clock();
  double tt = t/(double)CLOCKS_PER_SEC;
  return tt;
#else
  return 0;
#endif
}

double RcpOptTimer::getStartTime() 
{
  return initialTime_;
}
double RcpOptTimer::getLastTime()
{
  return lastTime_;
}
void RcpOptTimer::setStartTime(double t) 
{
   initialTime_ = t;
}
void RcpOptTimer::setLastTime(double t)
{
   lastTime_ = t;
}

double RcpOptTimer::getElapsedTime()
{
#ifdef DOTIMING
  double t = getCurrentTime();
  double l = getLastTime();
  return (t-l);
#else
  return 0;
#endif

}


void RcpOptTimer::printElapsedTime(std::string msg) 
{
#ifdef DOTIMING
   //check the timing
   double e = getElapsedTime();
   double t = getCurrentTime();
   setLastTime(t);
   printf( "%s: %f \n", msg.c_str(), (float)e);
#endif
}


// Destructor
RcpOptTimer::~RcpOptTimer()
{}

@


1.6
log
@moved initialization back to the constructor of the timer
@
text
@d5 1
a5 1
#define DOTIMING
@


1.5
log
@removed some extraneous things
@
text
@d10 1
@


1.4
log
@fixed timing issues
@
text
@d53 1
a53 1
  return ((double)(t-l));
@


1.3
log
@minor fixes
@
text
@d5 1
d7 5
d13 6
a18 2
#define DOTIMING

d21 9
a29 9
  struct __timeb64 tstruct;
  __time64_t ltime;

  _ftime64( &tstruct );
  _time64(&ltime);
  int milli = tstruct.millitm;
  float frac = milli/(float)1000.;
  double t = ltime+frac;
  return t;
d31 11
d43 1
a43 1
double RcpOptTimer::getElapsedTimeSinceStart()
d45 2
a46 3
  
  double t = getCurrentTime();
  return ((float)(t-initialTime_));
a47 1
}
d50 1
a50 1
  
d52 5
a56 1
  return ((float)(t-lastTime_));
d60 1
a60 8
// Preferred Constructor
RcpOptTimer::RcpOptTimer()
  
{
  double t = getCurrentTime();
  initialTime_ = t;
  lastTime_ = t;
}
a65 1

d67 1
a67 1
   lastTime_= t;
a68 10
#endif
}
void RcpOptTimer::printElapsedTimeSinceStart(std::string msg) 
{
#ifdef DOTIMING
   //check the timing
   double e = getElapsedTimeSinceStart();
   double t = getCurrentTime();
   lastTime_=t;
   printf( "%s: %f \n", msg.c_str(), (float)e );
@


1.2
log
@finer resolution in time
@
text
@d9 1
a9 1
double RcpOptTimer::getElapsedTime()
d19 1
a19 1
  return ((float)(t-lastTime_));
d24 3
a26 2
  struct __timeb64 tstruct;
  __time64_t ltime;
d28 6
a33 6
  _ftime64( &tstruct );
  _time64(&ltime);
  int milli = tstruct.millitm;
  float frac = milli/(float)1000.;
  double t = ltime+frac;
  return ((float)(t-initialTime_));
d41 1
a41 8
 struct __timeb64 tstruct;
  __time64_t ltime;

  _ftime64( &tstruct );
  _time64(&ltime);
  int milli = tstruct.millitm;
  double frac = milli/(float)1000.;
  double t = (float)ltime+frac;
d49 5
a53 3
   double t = getElapsedTime();
   lastTime_=getElapsedTime();
   printf( "%s: %f \n", msg.c_str(), (float)t );
d60 4
a63 3
   double t = getElapsedTimeSinceStart();
   lastTime_=getElapsedTime();
   printf( "%s: %f \n", msg.c_str(), (float)t );
@


1.1
log
@adding timing capability
@
text
@d2 1
d9 1
a9 1
int RcpOptTimer::getElapsedTime()
d11 1
d14 6
a19 2
  _time64( &ltime );
  return ((int)(ltime-initialTime_));
d22 11
d34 1
d40 2
a41 1
 __time64_t ltime;
d43 7
a49 2
  _time64( &ltime );
  initialTime_ = ltime;
d55 12
a66 2
   int t = getElapsedTime();
   printf( "%s: %d \n", msg.c_str(), t );
a68 1

@

