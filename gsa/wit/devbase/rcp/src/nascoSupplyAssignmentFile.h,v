head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.01.31.15.45.39;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@new files for handling nasco input
@
text
@#ifndef RCPnascoSupplyAssignmentFile_h
#define RCPnascoSupplyAssignmentFile_h

#include "scoFile.h"
#include "rcpOptCal.h"


class RCPnascoSupplyAssignmentFile : public SCOcsvFormatFile {
public:
  getFieldH(name);
  getFieldH(engagement);
  getIntFieldH(month);
  getIntFieldH(year);
  getFloatFieldH(quantity);
 

  
  // preferred constructor
  RCPnascoSupplyAssignmentFile(
    std::string filename,
    int numResourceIdFields)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    numResourceIdFields_ = numResourceIdFields;
    int numFields = numResourceIdFields + 5; //for name,engagement,month,year,quantity
   
    hasHeaderRecord(numFields);
    commentRecords(true);
  };

  // compute key for storing record in dictionary

  std::string key(std::string &name,
    std::string engagement,
    const std::vector<std::string> & resourceIdValues,
    int month,
    int year
    ) const
  {
    //assert( resourceIdValues.size() == numResourceIdFields_);
    std::string retVal;
    retVal = retVal + name + "!@@#$%" + engagement + "!@@#$%";
    unsigned int i;
    for ( i=0; i<resourceIdValues.size(); ++i ) {
      retVal = retVal + resourceIdValues[i] + "!@@#$%";
    }
    char monthchar[100];
    char yearchar[100];
    sprintf( monthchar, "%d", month );
    sprintf( yearchar, "%d", year);
    retVal = retVal + monthchar+yearchar ;
    return retVal;
  };
 
  
  
  // destructor
  ~RCPnascoSupplyAssignmentFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
 
  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {


    std::vector<std::string> vals;
    std::string name, engagement;
    int f;
    name = fieldAsString(recNum,"name");
    engagement = fieldAsString(recNum,"engagement");
    int month = monthAsInt(recNum);
    int year = yearAsInt(recNum);
    

    for ( f=0; f<numResourceIdFields_; ++f ) {
      std::string fv;
      std::string attributeValue = fieldNAsString(recNum,f+2);
      vals.push_back(attributeValue);
    }
    
    std::string retVal = key(name, engagement, vals, month, year );
   
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPnascoSupplyAssignmentFile();
  
  // copy constructor  -- don't use!
  RCPnascoSupplyAssignmentFile( const RCPnascoSupplyAssignmentFile& source );
  
  // assignment operator -- don't use!
  RCPnascoSupplyAssignmentFile&
  operator=(const RCPnascoSupplyAssignmentFile& rhs);

  int numResourceIdFields_;
};



class RCPnascoSupplyAssignmentFileIterator : public SCOfileIterator {
public:
  
  // fields 
 
  getFieldFileWithIteratorH(engagement);
  getFieldFileWithIteratorH(name);
  getIntFieldFileWithIteratorH(month);
  getIntFieldFileWithIteratorH(year);
  getFloatFieldFileWithIteratorH(quantity);
  


  // preferred constructor
  RCPnascoSupplyAssignmentFileIterator(const RCPnascoSupplyAssignmentFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPnascoSupplyAssignmentFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    

 
  }

private:
  
  
  // default constructor -- don't use!
  RCPnascoSupplyAssignmentFileIterator();
  
  // copy constructor  -- don't use!
  RCPnascoSupplyAssignmentFileIterator( const RCPnascoSupplyAssignmentFileIterator& source );
  
  // assignment operator -- don't use!
  RCPnascoSupplyAssignmentFileIterator&
  operator=(const RCPnascoSupplyAssignmentFileIterator& rhs);

  
};
#endif
@
