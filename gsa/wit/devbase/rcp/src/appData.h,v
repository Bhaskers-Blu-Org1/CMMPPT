head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.03.22.13.40.16;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.18.21.35.12;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.2
log
@trivial changes from int to unsigned int to make the compiler happier
@
text
@#ifndef RCPappData_h
#define RCPappData_h

#include <vector>
#include <map>
#include <cassert>

class RCPappData  {
public:
  virtual RCPappData * clone() const = 0;

  // destructor
  virtual ~RCPappData(){};

protected:
  
  // constructor
  RCPappData(){};
  
  // copy constructor
  RCPappData( const RCPappData& source ){};
  
  // assignment operator
  RCPappData & operator=(const RCPappData& rhs)
  {  
    if (this != &rhs) {        
    // nothing to do here
    }
    return *this;
  }
  
  // Self-test
  //static void test();

  static void setVector(int len, const float * inputVec, std::vector<float> & outputVec )
  {
    int i;
    for ( i=0; outputVec.size()<(unsigned int)len; ++i ) outputVec.push_back(0.0);
    for ( i=0; i<len; ++i ) outputVec[i] = inputVec[i];
  };
  
  static void setVector(int len, float inputScalar, std::vector<float> & outputVec )
  {
    int i;
    for ( i=0; outputVec.size()<(unsigned int)len; ++i ) outputVec.push_back(0.0);
    for ( i=0; i<len; ++i ) outputVec[i] = inputScalar;
  };

  //v2=v2+v1
  static void addVector(const std::vector<float> & v1, std::vector<float> & v2)
  { 
    assert(v1.size()==v2.size());
    for (unsigned int t=0; t<v1.size(); t++) v2[t]+=v1[t];
  };

};



#endif
@


1.1
log
@Modified to use witPartAppData for setting/getting rcp engagement revenue, startPeriod, and duration
@
text
@d38 1
a38 1
    for ( i=0; outputVec.size()<len; ++i ) outputVec.push_back(0.0);
d45 1
a45 1
    for ( i=0; outputVec.size()<len; ++i ) outputVec.push_back(0.0);
d53 1
a53 1
    for (int t=0; t<v1.size(); t++) v2[t]+=v1[t];
@

