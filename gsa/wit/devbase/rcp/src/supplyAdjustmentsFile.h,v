head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.02.06.17.57.56;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@new file for resource actions
@
text
@#ifndef RCPsupplyAdjustmentsFile_h
#define RCPsupplyAdjustmentsFile_h

#include "scoFile.h"
#include "rcpOptCal.h"


class RCPsupplyAdjustmentsFile : public SCOcsvFormatFile {
public:

  // Fields 
  //getFieldH(jobRole);
  //getFieldH(skillSet);
  //getFieldH(LOB);
  //getFieldH(source);
  //getFieldH(resourceLocName);

  getIntFieldH(period);
  getIntFieldH(month);
  getIntFieldH(year);
  getFloatFieldH(supplyAdjustment);

  
  // preferred constructor
  RCPsupplyAdjustmentsFile(
    std::string filename,
    int numResourceIdFields,
    RcpOptCalendar::CalendarType calType )
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    numResourceIdFields_ = numResourceIdFields;
    int numFields = numResourceIdFields + 1; //for quantity
    if ( calType==RcpOptCalendar::PERIOD ) ++numFields;
    if ( calType==RcpOptCalendar::MONTH_YEAR ) numFields = numFields+2;
    hasHeaderRecord(numFields);
    commentRecords(true);
  };

  // compute key for storing record in dictionary

  std::string key( 
    const std::vector<std::string> & resourceIdValues,
    int period) const
  {
    //assert( resourceIdValues.size() == (unsigned int)numResourceIdFields_);
    std::string retVal;
    unsigned int i;
    for ( i=0; i<resourceIdValues.size(); ++i ) {
      retVal = retVal + resourceIdValues[i] + "!@@#$%";
    }
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    retVal = retVal + periodchar ;
    return retVal;
  };
  
  // destructor
  ~RCPsupplyAdjustmentsFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
  
  

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {


    std::vector<std::string> vals;
    int f;
    for ( f=0; f<numResourceIdFields_; ++f ) {
      std::string fv = fieldNAsString(recNum,f);
      vals.push_back(fv);
    }
    
    int p = periodAsInt(recNum);
    std::string retVal = key(vals, p );
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPsupplyAdjustmentsFile();
  
  // copy constructor  -- don't use!
  RCPsupplyAdjustmentsFile( const RCPsupplyAdjustmentsFile& source );
  
  // assignment operator -- don't use!
  RCPsupplyAdjustmentsFile&
  operator=(const RCPsupplyAdjustmentsFile& rhs);

  int numResourceIdFields_;
};



class RCPsupplyAdjustmentsFileIterator : public SCOfileIterator {
public:
  
 
  getIntFieldFileWithIteratorH(month);
  getIntFieldFileWithIteratorH(year);
  getIntFieldFileWithIteratorH(period);
  getFloatFieldFileWithIteratorH(supplyAdjustment);
  //getFloatFieldFileWithIteratorH(fixedCost);

  // preferred constructor
  RCPsupplyAdjustmentsFileIterator(const RCPsupplyAdjustmentsFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPsupplyAdjustmentsFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {

  }

private:
  
  
  // default constructor -- don't use!
  RCPsupplyAdjustmentsFileIterator();
  
  // copy constructor  -- don't use!
  RCPsupplyAdjustmentsFileIterator( const RCPsupplyAdjustmentsFileIterator& source );
  
  // assignment operator -- don't use!
  RCPsupplyAdjustmentsFileIterator&
  operator=(const RCPsupplyAdjustmentsFileIterator& rhs);

  
};
#endif
@
