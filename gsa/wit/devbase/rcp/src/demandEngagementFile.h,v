head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2006.01.23.12.42.43;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.21.17.46.22;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.2
log
@checked in some NASCO specific code
@
text
@#ifndef RCPdemandEngagementFile_h
#define RCPdemandEngagementFile_h

#include "scoFile.h"
#include "rcpOptCal.h"


class RCPdemandEngagementFile : public SCOcsvFormatFile {
public:

  getFieldH(engagement);
  getIntFieldH(period);
  getIntFieldH(month);
  getIntFieldH(year);
  getFloatFieldH(usageQuantity);

  
  // preferred constructor
  RCPdemandEngagementFile(
    std::string filename,
    bool hasRequiredFlag,
    bool hasFlexibleFlag,
    RcpOptCalendar::CalendarType calType )
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    int numFields = 2; //engagement and quantity
    if (calType==RcpOptCalendar::MONTH_YEAR)
       numFields = numFields+2;
    else
       numFields = numFields+1;
       
    if (hasRequiredFlag)
       numFields++;
    if (hasFlexibleFlag)
       numFields++;
       

    hasHeaderRecord(numFields);
    commentRecords(true);
  };

  // compute key for storing record in dictionary

  std::string key(std::string &engagementName,
    int period) const
  {
    //assert( resourceIdValues.size() == numResourceIdFields_);
    std::string retVal;
    retVal = retVal + engagementName + "!@@#$%";
   
 
    char periodchar[100];
    sprintf( periodchar, "%d", period );
    retVal = retVal + periodchar ;
    return retVal;
  };
 
  
  
  // destructor
  ~RCPdemandEngagementFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    // tests from resourceFile.h
    {
 
    }
  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {


 
   std::string eName = fieldAsString(recNum,"engagement");
  
   int p = periodAsInt(recNum);

   std::string retVal = key(eName, p );
 
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPdemandEngagementFile();
  
  // copy constructor  -- don't use!
  RCPdemandEngagementFile( const RCPdemandEngagementFile& source );
  
  // assignment operator -- don't use!
  RCPdemandEngagementFile&
  operator=(const RCPdemandEngagementFile& rhs);

};



class RCPdemandEngagementFileIterator : public SCOfileIterator {
public:
  
  // fields 
 
  getIntFieldFileWithIteratorH(period);
  getIntFieldFileWithIteratorH(month);
  getIntFieldFileWithIteratorH(year);
  getFloatFieldFileWithIteratorH(usageQuantity);
  getFieldFileWithIteratorH(engagement);

  // preferred constructor
  RCPdemandEngagementFileIterator(const RCPdemandEngagementFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPdemandEngagementFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    
   }

private:
  
  
  // default constructor -- don't use!
  RCPdemandEngagementFileIterator();
  
  // copy constructor  -- don't use!
  RCPdemandEngagementFileIterator( const RCPdemandEngagementFileIterator& source );
  
  // assignment operator -- don't use!
  RCPdemandEngagementFileIterator&
  operator=(const RCPdemandEngagementFileIterator& rhs);

  
};
#endif
@


1.1
log
@*** empty log message ***
@
text
@d21 2
d34 5
@

