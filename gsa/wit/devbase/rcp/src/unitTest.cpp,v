head	1.53;
access;
symbols;
locks; strict;
comment	@// @;


1.53
date	2005.09.13.17.53.30;	author gresh;	state Exp;
branches;
next	1.52;

1.52
date	2004.08.10.14.31.40;	author gresh;	state Exp;
branches;
next	1.51;

1.51
date	2004.08.05.17.41.09;	author gresh;	state Exp;
branches;
next	1.50;

1.50
date	2004.08.03.14.43.09;	author gresh;	state Exp;
branches;
next	1.49;

1.49
date	2004.07.21.14.47.29;	author gresh;	state Exp;
branches;
next	1.48;

1.48
date	2004.07.16.14.28.24;	author gresh;	state Exp;
branches;
next	1.47;

1.47
date	2004.06.24.18.18.54;	author gresh;	state Exp;
branches;
next	1.46;

1.46
date	2004.06.22.19.45.46;	author gresh;	state Exp;
branches;
next	1.45;

1.45
date	2004.06.22.19.15.32;	author gresh;	state Exp;
branches;
next	1.44;

1.44
date	2004.06.18.17.31.26;	author gresh;	state Exp;
branches;
next	1.43;

1.43
date	2004.06.18.16.00.28;	author gresh;	state Exp;
branches;
next	1.42;

1.42
date	2004.06.17.18.59.29;	author gresh;	state Exp;
branches;
next	1.41;

1.41
date	2004.06.17.14.50.43;	author gresh;	state Exp;
branches;
next	1.40;

1.40
date	2004.05.11.18.25.28;	author gresh;	state Exp;
branches;
next	1.39;

1.39
date	2004.04.14.18.55.32;	author dpc;	state Exp;
branches;
next	1.38;

1.38
date	2004.04.12.15.59.14;	author dpc;	state Exp;
branches;
next	1.37;

1.37
date	2004.03.31.16.05.43;	author gresh;	state Exp;
branches;
next	1.36;

1.36
date	2004.03.23.14.27.49;	author gresh;	state Exp;
branches;
next	1.35;

1.35
date	2004.03.18.19.15.31;	author gresh;	state Exp;
branches;
next	1.34;

1.34
date	2004.03.18.15.46.12;	author gresh;	state Exp;
branches;
next	1.33;

1.33
date	2004.03.18.15.41.46;	author fasano;	state Exp;
branches;
next	1.32;

1.32
date	2004.03.18.14.43.58;	author gresh;	state Exp;
branches;
next	1.31;

1.31
date	2004.03.18.14.18.39;	author gresh;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.18.03.18.02;	author fasano;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.17.22.35.26;	author fasano;	state Exp;
branches;
next	1.28;

1.28
date	2004.03.17.22.34.40;	author fasano;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.16.20.25.59;	author gresh;	state Exp;
branches;
next	1.26;

1.26
date	2004.03.15.17.01.39;	author fasano;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.14.14.39.52;	author fasano;	state Exp;
branches;
next	1.24;

1.24
date	2004.03.14.10.37.00;	author fasano;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.13.23.18.50;	author fasano;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.10.20.02.41;	author gresh;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.10.19.43.33;	author gresh;	state Exp;
branches;
next	1.20;

1.20
date	2004.01.30.15.16.09;	author gresh;	state Exp;
branches;
next	1.19;

1.19
date	2004.01.21.02.08.47;	author fasano;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.16.19.44.12;	author fasano;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.13.00.14.34;	author fasano;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.11.17.40.44;	author fasano;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.10.14.04.33;	author fasano;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.07.20.35.02;	author fasano;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.07.16.55.39;	author fasano;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.06.17.10.02;	author fasano;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.01.20.19.38;	author fasano;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.01.20.03.21;	author fasano;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.01.17.44.13;	author gresh;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.23.11.56.32;	author fasano;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.21.18.53.43;	author gresh;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.21.16.58.55;	author dpc;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.21.04.22.25;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.19.15.45.07;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.18.21.35.11;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.14.20.23.34;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.13.14.57.02;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.53
log
@more support of flex mix. Now actually reading the skills file.
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#pragma warning(disable:4290)
#endif

#include <assert.h>

#include <iostream>

#include <float.h>

#include "rcpOptException.h"
#include "globalAttrFile.h"
#include "engagementFile.h"
#include "skillsFile.h"
//#include "matchFile.h"
#include "gnrlMatchFile.h"
#include "gnrlResourceFile.h"
#include "gnrlBomFile.h"
#include "prioritySubsFile.h"
#include "toFromSubsFile.h"
//#include "bomFile.h"
//#include "gnrlSubsFile.h"
#include "baseSubs.h"
#include "engagementAppData.h"
#include "bomAppData.h"
#include "resourceAppData.h"
#include "resourceIdPriorityFile.h"
#include "rcpProblem.h"
#include "gnrlResourceActionFile.h"
#include "populateRCP.h"
#include "rcpOpt.h"
#include "rcpOptCal.h"

// Function Prototypes. Function definitions is in this file.
void testingMessage( const char * const msg );



int
main (int argc, char * argv[])
{


  testingMessage (  "Testing rcpOptCal\n");
  RcpOptCalendar::test();

  

  //testingMessage( "Testing rcpOpt(example_missingHeaderField)\n" );
  //rcpOpt("../data/example_missingHeaderField");

  //testingMessage( "Testing rcpOpt(example_missingFile)\n" );
  //rcpOpt("../data/example_missingFile");

  testingMessage( "Testing RCPglobalAttrFile\n" );
  RCPglobalAttrFile::test();

  testingMessage( "Testing RCPengagementFile\n" );
  RCPengagementFile::test();

  testingMessage( "Testing RCPengagementFileIterator\n" );
  RCPengagementFileIterator::test();

  testingMessage( "Testing RCPskillsFile\n" );
  RCPskillsFile::test();

  testingMessage( "Testing RCPskillsFileIterator\n" );
  RCPskillsFileIterator::test();
  
  testingMessage( "Testing RCPprioritySubsFile\n" );
  RCPprioritySubsFile::test();
  
  testingMessage( "Testing RCPprioritySubsFileIterator\n");
  RCPprioritySubsFileIterator::test();
  
  testingMessage( "Testing RCPtoFromSubsFile\n" );
  RCPtoFromSubsFile::test();
  
  testingMessage( "Testing RCPtoFromSubsFileIterator\n");
  RCPtoFromSubsFileIterator::test();
  

  testingMessage( "Testing RCPresourceIdPriorityFile\n" );
  RCPresourceIdPriorityFile::test();
  
  testingMessage( "Testing RCPresourceIdPriorityFileIterator\n");
  RCPresourceIdPriorityFileIterator::test();

  //testingMessage( "Testing RCPmatchFile\n" );
  //RCPmatchFile::test();
  
  //testingMessage( "Testing RCPmatchFileIterator\n" );
  //RCPmatchFileIterator::test();
  
  testingMessage( "Testing RCPgnrlMatchFile\n" );
  RCPgnrlMatchFile::test();
  
  testingMessage( "Testing RCPgnrlMatchFileIterator\n" );
  RCPgnrlMatchFileIterator::test();

  testingMessage( "Testing RCPgnrlResourceFile\n" );
  RCPgnrlResourceFile::test();

  testingMessage( "Testing RCPgnrlResourceFileIterator\n" );
  RCPgnrlResourceFileIterator::test();

  //testingMessage( "Testing RCPresourceFile\n" );
  //RCPresourceFile::test();

  //testingMessage( "Testing RCPresourceFileSimple\n" );
  //RCPresourceFileSimple::test();

  //testingMessage( "Testing RCPresourceFileSimpleSubs\n" );
  //RCPresourceFileSimpleSubs::test();

  //testingMessage( "Testing RCPresourceFile04Feb\n" );
  //RCPresourceFile04Feb::test();


  //testingMessage( "Testing RCPresourceFileIterator\n" );
  //RCPresourceFileIterator::test();

  //testingMessage( "Testing RCPresourceFileSimpleIterator\n" );
  //RCPresourceFileSimpleIterator::test();

  //testingMessage( "Testing RCPresourceFileSimpleSubsIterator\n" );
  //RCPresourceFileSimpleSubsIterator::test();

  //testingMessage( "Testing RCPresourceFile04FebIterator\n" );
  //RCPresourceFile04FebIterator::test();

  testingMessage( "Testing RCPresourceActionFile\n" );
  RCPgnrlResourceActionFile::test();

  testingMessage( "Testing RCPresourceActionFileIterator\n" );
  RCPgnrlResourceActionFileIterator::test();

  //testingMessage( "Testing RCPbomFile\n" );
  //RCPbomFile::test();

  //testingMessage( "Testing RCPbomFileIterator\n" );
 // RCPbomFileIterator::test();


  
  testingMessage( "Testing RCPgnrlBomFile\n" );
  RCPgnrlBomFile::test();

  testingMessage( "Testing RCPgnrlBomFileIterator\n" );
  RCPgnrlBomFileIterator::test();


 #if 0
  testingMessage( "Testing RCPgnrlSubsFile\n" );
  RCPgnrlSubsFile::test();

  testingMessage( "Testing RCPgnrlSubsFileIterator\n" );
  RCPgnrlSubsFileIterator::test();
  #endif //removed this file reader because a different subs format is used now

  testingMessage( "Testing RCPbaseSubs\n" );
  RCPbaseSubs::test();

#if 0
  testingMessage( "Testing RCPskillSubs\n" );
  RCPskillSubs::test();
#endif

  testingMessage( "Testing RCPengagementAppData\n" );
  RCPengagementAppData::test();

  testingMessage( "Testing RCPbomAppData\n" );
  RCPbomAppData::test();

  testingMessage( "Testing RCPresourceAppData\n" );
  RCPresourceAppData::test();

  testingMessage( "Testing RCPproblem\n" );
  RCPproblem::test();

  testingMessage( "Testing rcpOpt(example1)\n" );
  rcpOpt("../data/example1");

  testingMessage( "Testing rcpOpt(example_04feb_nomatchlob)\n" );
  rcpOpt("../data/example_04feb_nomatchlob");

  testingMessage( "Testing rcpOpt(example_acquire)\n" );
  rcpOpt("../data/example_acquire");

  testingMessage( "Testing rcpOpt(example_baseline)\n" );
  rcpOpt("../data/example_baseline");

  testingMessage( "Testing rcpOpt(example_decline)\n" );
  rcpOpt("../data/example_decline");

  testingMessage( "Testing rcpOpt(example_delay)\n" );
  rcpOpt("../data/example_delay");


#if 0
  // Abandoned file format
  testingMessage( "Testing rcpOpt(example_simple)\n" );
  rcpOpt("../data/example_simple");
#endif

  
  testingMessage( "Testing rcpOpt(example_simplesubs)\n" );
  rcpOpt("../data/example_simplesubs");

  testingMessage( "Testing rcpOpt(example_tucsonsubs)\n" );
  rcpOpt("../data/example_tucsonsubs");


  testingMessage( "Testing rcpOpt(example04Feb)\n" );
  rcpOpt("../data/example04Feb");

  testingMessage( "Testing rcpOpt(example1)\n" );
  rcpOpt("../data/example1");

#if 0
  // Abandoned file format
  // Failing when reading file
  // Error: field not found in file.
  //     Filename: ../data/example2/resource.csv
  //testingMessage( "Testing rcpOpt(example2)\n" );
  //rcpOpt("../data/example2");

  // Failing when reading file
  // ERROR: Key not in file.
  //   Filename : ../data/example3/globalAttr.csv
  //   key value: "fileFormat"
  //testingMessage( "Testing rcpOpt(example3)\n" );
  //rcpOpt("../data/example3");
#endif

  testingMessage( "Testing rcpOpt(example4)\n" );
  rcpOpt("../data/example4");

  testingMessage( "Testing rcpOpt(example7)\n" );
  rcpOpt("../data/example7");

  testingMessage( "Testing rcpOpt(IGS)\n" );
  rcpOpt("../data/IGS");
  
  testingMessage( "Testing rcpOpt(ER5)\n");
  rcpOpt("../data/ER5");
  
  testingMessage( "Testing rcpOpt(er5_test1)\n");
  rcpOpt("../data/er5_test1");
  
  testingMessage( "Testing rcpOpt(er5_test2)\n");
  rcpOpt("../data/er5_test2");
  
  testingMessage( "Testing rcpOpt(er5_test3)\n");
  rcpOpt("../data/er5_test3");
  
  testingMessage( "Testing rcpOpt(er5_test4)\n");
  rcpOpt("../data/er5_test4");
  
  testingMessage( "Testing rcpOpt(er5_test5)\n");
  rcpOpt("../data/er5_test5");
  
  testingMessage( "Testing rcpOpt(er5_example)\n");
  rcpOpt("../data/er5_example");
  
  // this one throws an exception
  bool exceptionCaught=false;
  try {
        testingMessage( "Testing rcpOpt(example_er5neg)\n");
        rcpOpt("../data/example_er5neg");
  }
  catch ( RcpOptException e ) {
        exceptionCaught = true;
  }
  assert (exceptionCaught);
  // this one throws an exception
  try {
        testingMessage( "Testing rcpOpt(example_negsupply)\n");
        rcpOpt("../data/example_negsupply");
  }
  catch ( RcpOptException e ) {
        exceptionCaught = true;
  }
  assert (exceptionCaught);




  // This test case was commented prior to working on generalized resource identification
  //testingMessage( "Testing rcpOpt(IGS2)\n" );
  //rcpOpt("../data/IGS2");

  testingMessage( "All tests completed successfully\n" );

  return 0;
}


// Display message on stdout and stderr
void testingMessage( const char * const msg )
{
  std::cerr <<msg;
  //cout <<endl <<"*****************************************"
  //     <<endl <<msg <<endl;
}
@


1.52
log
@changed many warnings to exceptions.
@
text
@d16 1
d65 6
@


1.51
log
@run a test on directories with negative quantities
@
text
@d13 1
a13 1

d261 20
a280 2
  testingMessage( "Testing rcpOpt(example_er5neg)\n");
  rcpOpt("../data/example_er5neg");
a281 2
   testingMessage( "Testing rcpOpt(example_negsupply)\n");
   rcpOpt("../data/example_negsupply");
@


1.50
log
@generalize number of header fields in gnrlResourceActionFile.h and also
really run different directories in unitTest (as was being reported)
@
text
@d260 8
a267 1
 
@


1.49
log
@change a 0 to a "no" in input files for consistency
@
text
@d250 1
a250 1
  rcpOpt("../data/er5_test2");
d253 1
a253 1
  rcpOpt("../data/er5_test2");
d256 1
a256 1
  rcpOpt("../data/er5_test2");
d259 1
a259 1
  rcpOpt("../data/er5_test2");
@


1.48
log
@added some tests
@
text
@d249 11
@


1.47
log
@modifications to support ER5 format
@
text
@d242 8
a249 1

@


1.46
log
@few more changes to support new/updated format
@
text
@d21 1
d23 1
a23 1
#include "gnrlSubsFile.h"
d71 6
d148 1
a148 1
 
d154 1
@


1.45
log
@folding together original "engagement" oriented files with new ER5 files
@
text
@d21 1
a21 1
#include "bomFile.h"
d231 3
@


1.44
log
@support for handling demandType and demandTypePriority
@
text
@a20 2
//#include "priority04JunFile.h"
#include "demandTypePriorityFile.h"
a69 6
  testingMessage( "Testing RCPdemandTypePriorityFile\n" );
  RCPdemandTypePriorityFile::test();
  
  testingMessage( "Testing RCPdemandTypePriorityFileIterator\n");
  RCPdemandTypePriorityFileIterator::test();

@


1.43
log
@moved the comment symbol to where it was supposed to be
@
text
@d22 1
d71 7
@


1.42
log
@comment out unused .h file
@
text
@d21 1
a21 1
#//include "priority04JunFile.h"
@


1.41
log
@some changes to support ER5; adding columns for demand type, flags for substituion
@
text
@d21 1
a21 1
#include "priority04JunFile.h"
@


1.40
log
@updates for more genearlity in the substitution
@
text
@d21 1
@


1.39
log
@New file:  resourceIdPriorityFile.h  defines a new input file format for resource identifier priorities
and added code to read in this file in populate

Changed the spelling of ...Identifer... to ...Identifier...

Modified priorityGapGlut1(), but this is not invoked yet.
@
text
@a20 4
//#include "resourceFile.h"
//#include "resourceFileSimple.h"
//#include "resourceFileSimpleSubs.h"
//#include "resourceFile04Feb.h"
d22 1
a22 7
//#include "bomFileSimple.h"
//#include "bomFile04Feb.h"
#include "jobRoleSubsFile.h"
#include "skillSubsFile.h"
#include "locationSubsFile.h"
#include "lobSubsFile.h"
#include "sourceSubsFile.h"
a23 1
//#include "skillSubs.h"
d29 1
a29 1
#include "resourceActionFile.h"
d120 1
a120 1
  RCPresourceActionFile::test();
d123 1
a123 1
  RCPresourceActionFileIterator::test();
d141 2
a142 2
  testingMessage( "Testing RCPjobRoleSubsFile\n" );
  RCPjobRoleSubsFile::test();
d144 2
a145 26
  testingMessage( "Testing RCPjobRoleSubsFileIterator\n" );
  RCPjobRoleSubsFileIterator::test();

  testingMessage( "Testing RCPskillSubsFile\n" );
  RCPskillSubsFile::test();

  testingMessage( "Testing RCPskillSubsFileIterator\n" );
  RCPskillSubsFileIterator::test();

  testingMessage( "Testing RCPlocationSubsFile\n" );
  RCPlocationSubsFile::test();

  testingMessage( "Testing RCPlocationSubsFileIterator\n" );
  RCPlocationSubsFileIterator::test();

  testingMessage( "Testing RCPlobSubsFile\n" );
  RCPlobSubsFile::test();

  testingMessage( "Testing RCPlobSubsFileIterator\n" );
  RCPlobSubsFileIterator::test();

  testingMessage( "Testing RCPsourceSubsFile\n" );
  RCPsourceSubsFile::test();

  testingMessage( "Testing RCPsourceSubsFileIterator\n" );
  RCPsourceSubsFileIterator::test();
@


1.38
log
@appl.mk :  added rcpOptCal and rcpOptException to the list of files that get compiles
rcpOptCal.cpp and .h : new files that implement rcpOptCalendar
populateRCP.cpp : added tests to see if period is negative
rcpProblem.cpp : In priorityGapGlut1(), I now check to see that there is just one engagement and it
has a startPeriod of 0
unitTest.cpp : Call added to test rcpOptCalendar
@
text
@d38 1
d80 6
@


1.37
log
@changes to the format of the priority substitution files; cleaner and neater
@
text
@d42 1
a42 1

d52 5
@


1.36
log
@misc. compiler warning fixes
@
text
@d20 1
d68 6
@


1.35
log
@just a couple comments
@
text
@d4 1
@


1.34
log
@cleaned up unitTest, and which .h files need to be included in unitTest and populate.
@
text
@a187 1
  // Fails when writting output when looking for string dummy in jobRoles[0]
@


1.33
log
@added function readResourceFile which is used be all populate functions.
@
text
@d15 1
a15 1
#include "matchFile.h"
d67 2
a68 2
  testingMessage( "Testing RCPmatchFile\n" );
  RCPmatchFile::test();
d70 2
a71 2
  testingMessage( "Testing RCPmatchFileIterator\n" );
  RCPmatchFileIterator::test();
d116 2
a117 2
  testingMessage( "Testing RCPbomFile\n" );
  RCPbomFile::test();
d119 2
a120 2
  testingMessage( "Testing RCPbomFileIterator\n" );
  RCPbomFileIterator::test();
@


1.32
log
@iterator self-tests were using a non-existant directory
@
text
@a211 1
  // Fails when gapGlut calls presolve
d222 2
d236 1
d241 2
a242 3
  // Fails when writting output when looking for string dummy in jobRoles[0]
  //testingMessage( "Testing rcpOpt(example7)\n" );
  //rcpOpt("../data/example7");
@


1.31
log
@removing some extraneous formats and fixing some writing of output files
@
text
@d24 2
a25 2
#include "bomFileSimple.h"
#include "bomFile04Feb.h"
a118 3
  testingMessage( "Testing RCPbomFileSimple\n" );
  RCPbomFileSimple::test();

a121 2
  testingMessage( "Testing RCPbomFile04Feb\n" );
  RCPbomFile04Feb::test();
a122 2
  testingMessage( "Testing RCPbomFile04FebIterator\n" );
  RCPbomFile04FebIterator::test();
d131 1
a131 3
  testingMessage( "Testing RCPbomFileSimpleIterator\n" );
  RCPbomFileSimpleIterator::test();

d189 2
a190 2
  //testingMessage( "Testing rcpOpt(example_acquire)\n" );
  //rcpOpt("../data/example_acquire");
@


1.30
log
@modified a poplute function for new format.
with this change
  rcpOpt(example_simplesubs)
will run without crashing
@
text
@a220 4
  // Fails when resourceAction calls presolve
  //testingMessage( "Testing rcpOpt(example_tucson)\n" );
  //rcpOpt("../data/example_tucson");

d222 2
a223 2
  //testingMessage( "Testing rcpOpt(example_tucsonsubs)\n" );
  //rcpOpt("../data/example_tucsonsubs");
@


1.29
log
@Lots of changes to use new way of identifying resources
@
text
@d218 2
a219 3
  // Fails when resourceAction calls presolve
  //testingMessage( "Testing rcpOpt(example_simplesubs)\n" );
  //rcpOpt("../data/example_simplesubs");
d236 3
d242 4
@


1.28
log
@Lots of changes to use new way of identifying resources
@
text
@d253 1
@


1.27
log
@updated match.csv files for consistency in naming. Also added some
selftests for the new gnrl format files
@
text
@d197 3
a199 2
  testingMessage( "Testing rcpOpt(example_acquire)\n" );
  rcpOpt("../data/example_acquire");
d210 3
d215 1
d217 12
a228 5
  testingMessage( "Testing rcpOpt(example_simplesubs)\n" );
  rcpOpt("../data/example_simplesubs");

  testingMessage( "Testing rcpOpt(example_tucson)\n" );
  rcpOpt("../data/example_tucson");
a229 2
  testingMessage( "Testing rcpOpt(example_tucsonsubs)\n" );
  rcpOpt("../data/example_tucsonsubs");
d246 3
a248 2
  testingMessage( "Testing rcpOpt(example7)\n" );
  rcpOpt("../data/example7");
@


1.26
log
@changes tom bomAppData to use resourceIdName for matching
@
text
@d16 1
d18 1
d72 6
d130 7
@


1.25
log
@added
    throw(SCOexection)
to method prototypes for case when specified file does not exist
@
text
@d50 3
@


1.24
log
@modified unitTest to invoke rcpOpt function
@
text
@d48 1
a48 9
#if 0
  // NPR Will Shortz Sunday Morning Puzzle Jan 11.
  //  http://www.npr.org/programs/wesun/puzzle/
  {
    std::vector<int> v;
    for ( int i=0; i<10; ++i ) v.push_back(i);
    std::vector<int>::iterator start = v.begin();
    std::vector<int>::iterator end = v.end();
    std::vector<int>::iterator it;
d50 2
a51 87
    do
    {

      // Check sum 
      int sum1 = 100*v[0] + 10*v[1] + v[2];
      int sum2 = 100*v[3] + 10*v[4] + v[5];
      int sum3 = 100*v[6] + 10*v[7] + v[8];
      if ( sum1 + sum2 != sum3 ) continue;

      // check adjacency of sequence
      bool adj = true;
      for (int i=0; i<8; i++ ) {
        if ( !adj ) break;
        int j = i+1;

        // 1
        if ( v[i]==1 ) {
          if ( v[j]!=2 && v[j]!=5 && v[j]!=4 ) 
            adj=false;
        }

        // 2
        if ( v[i]==2 ) {
          if ( v[j]!=1 && v[j]!=4 && v[j]!=5 && v[j]!=6 && v[j]!=3 ) 
            adj=false;
        }

        // 3
        if ( v[i]==3 ) {
          if ( v[j]!=2 && v[j]!=5 && v[j]!=6 ) 
            adj=false;
        }

        // 4
        if ( v[i]==4 ) {
          if ( v[j]!=1 && v[j]!=2 && v[j]!=5 && v[j]!=8 && v[j]!=7 ) 
            adj=false;
        }

        // 5
        if ( v[i]==5 ) {
          if ( v[j]!=1 && v[j]!=2 && v[j]!=3 && v[j]!=4 && v[j]!=6 && v[j]!=7 && v[j]!=8 && v[j]!=9 ) 
            adj=false;
        }

        // 6
        if ( v[i]==6 ) {
          if ( v[j]!=3 && v[j]!=2 && v[j]!=5 && v[j]!=8 && v[j]!=9 ) 
            adj=false;
        }

        // 7
        if ( v[i]==7 ) {
          if ( v[j]!=4 && v[j]!=5 && v[j]!=8 && v[j]!=0 ) 
            adj=false;
        }

        // 8
        if ( v[i]==8 ) {
          if ( v[j]!=4 && v[j]!=5 && v[j]!=6 && v[j]!=7 && v[j]!=9  && v[j]!=0 ) 
            adj=false;
        }

        // 9
        if ( v[i]==9 ) {
          if ( v[j]!=6 && v[j]!=5 && v[j]!=8 && v[j]!=0 )
            adj=false;
        }

        // 0
        if ( v[i]==0 ) {
          if ( v[j]!=7 && v[j]!=8 && v[j]!=9 )
            adj=false;
        }

      }
      if ( !adj ) continue;

      for ( it = v.begin(); it!=v.end(); ++it ) {
        std::cout <<*it <<"  " ;
      }
      std::cout <<std::endl;
        
    }while ( std::next_permutation(start, end) );

  }
#endif
@


1.23
log
@New file gnrlResourceFile.h with classes
  RCPgnrlResourceFile
  RCPgnrlResourceFileIterator
These classes generalize the reading of the various resource files
and replaces the use of files:
  resourceFile04Feb.h
  resourceFileSimple.h
  resourceFileSimpleSubs.h
  resourceFile.h
These replaced files are still in cvs but are ifdef'ed out.

RCPgnrlResourceFile's constructor is:
  RCPgnrlResourceFile(fileName,numResourceIdFields,x)
where x is true if the file contains fixedCost field.
@
text
@d37 1
d266 53
@


1.22
log
@fixed unit test
@
text
@d16 5
a20 4
#include "resourceFile.h"
#include "resourceFileSimple.h"
#include "resourceFileSimpleSubs.h"
#include "resourceFile04Feb.h"
d38 1
d160 8
a167 2
  testingMessage( "Testing RCPresourceFile\n" );
  RCPresourceFile::test();
d169 2
a170 2
  testingMessage( "Testing RCPresourceFileSimple\n" );
  RCPresourceFileSimple::test();
d172 2
a173 2
  testingMessage( "Testing RCPresourceFileSimpleSubs\n" );
  RCPresourceFileSimple::test();
d175 2
a176 2
  testingMessage( "Testing RCPresourceFile04Feb\n" );
  RCPresourceFile04Feb::test();
d179 2
a180 2
  testingMessage( "Testing RCPresourceFileIterator\n" );
  RCPresourceFileIterator::test();
d182 2
a183 2
  testingMessage( "Testing RCPresourceFileSimpleIterator\n" );
  RCPresourceFileSimpleIterator::test();
d185 2
a186 2
  testingMessage( "Testing RCPresourceFileSimpleSubsIterator\n" );
  RCPresourceFileSimpleSubsIterator::test();
d188 2
a189 2
  testingMessage( "Testing RCPresourceFile04FebIterator\n" );
  RCPresourceFile04FebIterator::test();
@


1.21
log
@preparation for new "complete" format (with more fields)
@
text
@d199 1
a199 1
  RCPbomFileSimple::test();
d202 1
a202 1
  RCPbomFileIterator::test();
@


1.20
log
@added unittests for various of the new file iterators.
@
text
@d19 1
d22 1
d167 4
d180 3
d196 6
@


1.19
log
@Added resource appData
@
text
@d15 1
d17 2
d20 1
d150 6
d159 6
d168 6
d183 3
d188 3
@


1.18
log
@algorithm in globalAttr is now gapGlut or optimalPlan
The rcpProblem::solve method was removed.
Added methods rcpProblem::gapGlut and rcpProblem::optimalPlan
@
text
@d26 1
d207 3
@


1.17
log
@Added code to read and add substitute arcs for location, lob, and source
@
text
@d38 97
@


1.16
log
@ jobRoleSubs:
-Added file class for reading.
-Created new datafiles.
-in rcpProblem added add/set/get methods
-populateRCP added stanza to read file and invoke add & set methods.
Have not yet added code for adding substitute arcs to wit model.
@
text
@d19 3
d77 18
@


1.15
log
@Added abstract base class baseSubs.
Modified skillSubs class to use baseSubs.
Will eventually add lobSubs, locSubs, jobRoleSubs all inheriting from baseSubs.
@
text
@d17 1
d20 1
a20 1
#include "skillSubs.h"
d63 6
a74 1
#if 0
a76 1
#endif
d78 1
d81 1
@


1.14
log
@Added skillSubs class
@
text
@d18 1
d67 5
@


1.13
log
@added file for reading skillSubs. unitTest was updated to test these new classes.
@
text
@d18 1
d66 3
@


1.12
log
@Added globalAttr file containing algorithm and nPeriods
@
text
@d17 1
d59 6
@


1.11
log
@Moved tests that read data from directories from unitTest.cpp to rcpProblem.cpp
@
text
@d13 1
d31 3
@


1.10
log
@Modified so scope of for loop index variable works on many compilers.
Updated dsp files to accomodate new populateRCP.[cpp,h]
@
text
@a63 51
  //now do some meaningful tests with various test directories
  RCPproblem prob_acquire;
  std::string inputDirectory, outputDirectory;
  inputDirectory = outputDirectory = "../data/example_acquire";
  //this problem has a short time horizon, and revenue is set so that
  //acquiring new resources is worthwhile
  populate(prob_acquire, inputDirectory, outputDirectory, 5);
  prob_acquire.solve();
  //test that resources got acquired; 2 of r1 and 3 of r2, both in period 1
  std::vector<float> acquireQty =prob_acquire.getResourceAcquireQuantity("r1");
  assert(acquireQty[0]==2);
  acquireQty =prob_acquire.getResourceAcquireQuantity("r2");
  assert(acquireQty[0]==3);
  //test that both engagements get executed starting in period 1 (they have to wait one period to acquire the resources)
  assert(prob_acquire.getEngagementExecuted("e1"));
  assert(prob_acquire.getEngagementExecuted("e2"));
  assert(prob_acquire.getEngagementStartPeriod("e1")==1);
  assert(prob_acquire.getEngagementStartPeriod("e2")==0);


  RCPproblem prob_delay;
  inputDirectory = outputDirectory = "../data/example_delay";
  //this problem has a longer time horizon, and revenue is set so that
  //delaying the execution of jobs is worthwhile
  populate(prob_delay, inputDirectory, outputDirectory, 15);
  prob_delay.solve();
  //test that no resources were acquired, and that a job was done late
  assert(prob_delay.getEngagementStartPeriod("e2")==0);
  assert(prob_delay.getEngagementStartPeriod("e1")==3);
  acquireQty =prob_delay.getResourceAcquireQuantity("r1");
  int i;
  for (i=0; i<acquireQty.size(); i++)
      assert(acquireQty[i]==0);
  acquireQty =prob_delay.getResourceAcquireQuantity("r2");
  for (i=0; i<acquireQty.size(); i++)
      assert(acquireQty[i]==0);

  RCPproblem prob_decline;
  inputDirectory = outputDirectory = "../data/example_decline";
  //this problem has a short time horizon, but revenue and acquire costs are such that
  //it is better to decline an engagement
  populate(prob_decline, inputDirectory, outputDirectory, 5);
  prob_decline.solve();
  //test that resources were not acquired and that a job was declined
  assert(prob_decline.getEngagementExecuted("e1")==false);
  acquireQty =prob_decline.getResourceAcquireQuantity("r1");
  for (i=0; i<acquireQty.size(); i++)
     assert(acquireQty[i]==0);
  acquireQty =prob_decline.getResourceAcquireQuantity("r2");
  for (i=0; i<acquireQty.size(); i++)
     assert(acquireQty[i]==0);
@


1.9
log
@moved populate function to a separate file (not part of rcpProblem)
@
text
@d94 2
a95 1
  for (int i=0; i<acquireQty.size(); i++)
d98 1
a98 1
  for (int i=0; i<acquireQty.size(); i++)
d110 1
a110 1
  for (int i=0; i<acquireQty.size(); i++)
d113 1
a113 1
  for (int i=0; i<acquireQty.size(); i++)
@


1.8
log
@Attempt to get code to compile on aix, linux, MS V6 and MS .Net without ifdefs
@
text
@d20 1
d64 50
@


1.7
log
@added ifdef for microsoft compiler versions
@
text
@a7 1
#if defined(_MSC_VER)&& (_MSC_VER>700)
a8 4
using namespace std;
#else
#include <iostream.h>
#endif
d73 1
a73 1
  cerr <<msg;
@


1.6
log
@Created resourceActionFile.h and all the unitTest stuff for it.
@
text
@d7 5
d13 2
@


1.5
log
@Modified so an RCP bom maps to many WIT bomEntries. One for each consumption period.
@
text
@d17 1
d39 6
@


1.4
log
@added bomFile.h
@
text
@d15 1
d47 3
@


1.3
log
@Modified to use witPartAppData for setting/getting rcp engagement revenue, startPeriod, and duration
@
text
@d13 1
d37 6
@


1.2
log
@Added resource file
@
text
@d13 1
d36 3
@


1.1
log
@Added unitTest
@
text
@d12 1
d26 9
@

