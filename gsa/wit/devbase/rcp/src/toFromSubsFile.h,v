head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2004.07.15.13.11.52;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.24.19.08.24;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fixed some tests in unitTest
@
text
@#ifndef RCPtoFromSubsFile_h
#define RCPtoFromSubsFile_h

#include "scoFile.h"


class RCPtoFromSubsFile : public SCOcsvFormatFile {
public:

  // Fields 
  getFieldH(resourceIdName);
  getFieldH(resourceIdFromValue);
  getFieldH(resourceIdToValue);
  getIntFieldH(priority);
  getFloatFieldH(leadTime);
  getFloatFieldH(cost);
  
  // preferred constructor
  RCPtoFromSubsFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(6);
    commentRecords(true);
  };

  // compute key for storing record in dictionary
  static std::string key( 
    const std::string & resourceIdName,
    const std::string & resourceIdFromValue,
    const std::string & resourceIdToValue
    ) 
  {
    std::string retVal = 
      resourceIdName  + "!@@#$%" + 
      resourceIdFromValue + "!@@#$%" +
      resourceIdToValue;
    return retVal;
  };
  
  // destructor
  ~RCPtoFromSubsFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
    RCPtoFromSubsFile file("../data/ER5/toFromSubs.csv");
    
    // Test reading first record

    assert( file.resourceIdName(0) =="resourceType");
    assert( file.resourceIdFromValue(0) == "IBM" );
    assert( file.resourceIdToValue(0) == "Cont" );
    assert( file.priorityAsInt(0) == 1 );
    assert( file.costAsFloat(0) == 0 );
    assert( file.leadTimeAsFloat(0) == 0 );
    assert( file.resourceIdName(1) =="resourceType");
    assert( file.resourceIdFromValue(1) == "IBM" );
    assert( file.resourceIdToValue(1) == "WOS" );
    assert( file.priorityAsInt(1) == 2 );
    assert( file.costAsFloat(1) == 0 );
    assert( file.leadTimeAsFloat(1) == 0 );

    
    // Test reading record by key    
    std::string key = file.key("resourceType","IBM","Cont");
    assert( file.priorityAsInt(key) == 1 );
    assert( file.costAsFloat(key) == 0 );

  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {
    std::string retVal = key(
      resourceIdName(recNum),
      resourceIdFromValue(recNum),
      resourceIdToValue(recNum));
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPtoFromSubsFile();
  
  // copy constructor  -- don't use!
  RCPtoFromSubsFile( const RCPtoFromSubsFile& source );
  
  // assignment operator -- don't use!
  RCPtoFromSubsFile&
  operator=(const RCPtoFromSubsFile& rhs);

  
};



class RCPtoFromSubsFileIterator : public SCOfileIterator {
public:
  
  // fields 
  getFieldFileWithIteratorH(resourceIdName);
  getFieldFileWithIteratorH(resourceIdFromValue);
  getFieldFileWithIteratorH(resourceIdToValue);
  getIntFieldFileWithIteratorH(priority);
  getFloatFieldFileWithIteratorH(cost);
  getFloatFieldFileWithIteratorH(leadTime);
  
  // preferred constructor
  RCPtoFromSubsFileIterator(const RCPtoFromSubsFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPtoFromSubsFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    RCPtoFromSubsFile file("../data/ER5/toFromSubs.csv");
    RCPtoFromSubsFileIterator fileIter(file);
    
    // loop once for each record
    int recNo=0;
    for ( ; fileIter()!=NULL; ) {    
      if ( recNo == 0 ) {
                
      assert( fileIter.resourceIdName() == "resourceType");
      assert( fileIter.resourceIdFromValue() == "IBM");
      assert( fileIter.resourceIdToValue() == "Cont");
      assert( fileIter.priorityAsInt() == 1);
      assert( fileIter.costAsFloat() == 0);
      assert( fileIter.leadTimeAsFloat() == 0);
          
      }
      recNo++;
    }
    
    // number of records including comments
    //assert( fileIter.recNum()==27);
  }

private:
  
  
  // default constructor -- don't use!
  RCPtoFromSubsFileIterator();
  
  // copy constructor  -- don't use!
  RCPtoFromSubsFileIterator( const RCPtoFromSubsFileIterator& source );
  
  // assignment operator -- don't use!
  RCPtoFromSubsFileIterator&
  operator=(const RCPtoFromSubsFileIterator& rhs);

  
};
#endif
@


1.1
log
@*** empty log message ***
@
text
@d52 1
a52 1
    assert( file.resourceIdName(0) =="source");
d58 1
a58 1
    assert( file.resourceIdName(1) =="source");
d67 1
a67 1
    std::string key = file.key("source","IBM","Cont");
d132 1
a132 1
      assert( fileIter.resourceIdName() == "source");
@

