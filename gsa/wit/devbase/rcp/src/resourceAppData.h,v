head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2006.01.30.15.46.58;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.16.20.48.22;	author dpc;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.01.22.54.03;	author dpc;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.21.02.08.47;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.4
log
@changes for nasco multiple skills
@
text
@#ifndef RCPresourceAppData_h
#define RCPresourceAppData_h

#include "appData.h"

class RCPresourceAppData : public RCPappData {
public:
  
  void setSupplyAppData(int period, float exSup );
  void setSupplyAppData(const std::vector<float> & exSupVec );
  const std::vector<float> & getSupplyAppData()const;

  void setGapAppData(int period, float gapQty );
  void setGapAppData(const std::vector<float> & gapQtyVec );
  const std::vector<float> & getGapAppData()const;

  void setGlutAppData(int period, float glutQty );
  void setGlutAppData(const std::vector<float> & glutQtyVec );
  const std::vector<float> & getGlutAppData()const;

  void setMrpAppData(int period, float mrpQty );
  void setMrpAppData(const std::vector<float> & mrpVec );
  const std::vector<float> & getMrpAppData()const;

  void setBenchAppData(int period, float benchQty );
  void setBenchAppData(const std::vector<float> & benchQtyVec );
  const std::vector<float> & getBenchAppData()const;
  
  void setResourceAcquireAppData(float acquireTime);
  const float getResourceAcquireAppData()const;

  void setReleaseAppData(int period, float releaseQty );
  void setReleaseAppData(const std::vector<float> & releaseQtyVec );
  const std::vector<float> & getReleaseAppData()const;

  void setWorkingAppData(int period, float workingQty );
  void setWorkingAppData(const std::vector<float> & workingQtyVec );
  const std::vector<float> & getWorkingAppData()const;

  void setAcquireAppData(int period, float acquireQty );
  void setAcquireAppData(const std::vector<float> & acquireQtyVec );
  const std::vector<float> & getAcquireAppData()const;

  // default constructor
  RCPresourceAppData();

  // preferred constructor
  RCPresourceAppData(int nPeriods);

  
  // destructor
  virtual ~RCPresourceAppData();
  
  // copy constructor
  RCPresourceAppData( const RCPresourceAppData& source );
  
  // assignment operator
  RCPresourceAppData&
    operator=(const RCPresourceAppData& rhs);

  virtual RCPappData * clone() const;

  // Self-test
  static void test();

private:

  std::vector<float> exogenousSupply_;
  std::vector<float> mrpGrossQuantity_;
  std::vector<float> glutQuantity_;
  std::vector<float> gapQuantity_;
  std::vector<float> benchQuantity_;
  std::vector<float> releaseQuantity_;
  std::vector<float> workingQuantity_;
  std::vector<float> acquireQuantity_;
  float acquireTime_;

  
};



#endif
@


1.3
log
@Added bench, working, acquire and release quantities to the app data of the bench and working resources.  Also cleaned up the merge conflicts.
@
text
@d28 3
d76 1
@


1.2
log
@The rcp program now reads the algorithm and problem and branches internally to the appropriate code for gapGlut or resourceAction (problem) and priorityPlan or optimalPlan (algorithm).
@
text
@d9 3
a11 3
  void setExogenousSupplyAppData(int period, float exSup );
  void setExogenousSupplyAppData(const std::vector<float> & exSupVec );
  const std::vector<float> & getExogenousSupplyAppData()const;
d25 15
a39 3
  void setExogenousSupply(int period, float exSup );
  void setExogenousSupply(const std::vector<float> & exSupVec );
  const std::vector<float> & getExogenousSupply()const;
d69 5
@


1.1
log
@Added resource appData
@
text
@d9 16
d54 3
@

