head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2006.01.31.15.45.39;	author gresh;	state Exp;
branches;
next	;


desc
@@


1.1
log
@new files for handling nasco input
@
text
@#ifndef RCPnascoSupplyFile_h
#define RCPnascoSupplyFile_h

#include "scoFile.h"
#include "rcpOptCal.h"


class RCPnascoSupplyFile : public SCOcsvFormatFile {
public:
  getFieldH(name);
  getIntFieldH(primary);
 

  
  // preferred constructor
  RCPnascoSupplyFile(
    std::string filename,
    int numResourceIdFields)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    numResourceIdFields_ = numResourceIdFields;
    int numFields = numResourceIdFields + 2; //for name and primary
   
    hasHeaderRecord(numFields);
    commentRecords(true);
  };

  // compute key for storing record in dictionary

  std::string key(std::string &name,
    const std::vector<std::string> & resourceIdValues,
    int primary) const
  {
    //assert( resourceIdValues.size() == numResourceIdFields_);
    std::string retVal;
    retVal = retVal + name + "!@@#$%";
    unsigned int i;
    for ( i=0; i<resourceIdValues.size(); ++i ) {
      retVal = retVal + resourceIdValues[i] + "!@@#$%";
    }
    char primarychar[100];
    sprintf( primarychar, "%d", primary );
    retVal = retVal + primarychar ;
    return retVal;
  };
 
  
  
  // destructor
  ~RCPnascoSupplyFile(){/*nothing to do here*/};
  
  // Self-test
  static void test()
  {
 
  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual std::string key( unsigned int recNum ) const
  {


    std::vector<std::string> vals;
    std::string name;
    int f;
    name = fieldAsString(recNum,"name");
    int p = primaryAsInt(recNum);

    for ( f=0; f<numResourceIdFields_; ++f ) {
      std::string fv;
      std::string attributeValue = fieldNAsString(recNum,f+1);
      vals.push_back(attributeValue);
    }
    
    std::string retVal = key(name, vals, p );
   
    return retVal;
  };

private:
  
  // default constructor -- don't use!
  RCPnascoSupplyFile();
  
  // copy constructor  -- don't use!
  RCPnascoSupplyFile( const RCPnascoSupplyFile& source );
  
  // assignment operator -- don't use!
  RCPnascoSupplyFile&
  operator=(const RCPnascoSupplyFile& rhs);

  int numResourceIdFields_;
};



class RCPnascoSupplyFileIterator : public SCOfileIterator {
public:
  
  // fields 
 
  getIntFieldFileWithIteratorH(primary);
  getFieldFileWithIteratorH(name);
  


  // preferred constructor
  RCPnascoSupplyFileIterator(const RCPnascoSupplyFile & file)
    :SCOfileIterator(file)
  { /* Nothing to do here */};
  
  // destructor
  ~RCPnascoSupplyFileIterator(){/* nothing to do here */};
  
  // Self-test
  static void test()
  {
    

 
  }

private:
  
  
  // default constructor -- don't use!
  RCPnascoSupplyFileIterator();
  
  // copy constructor  -- don't use!
  RCPnascoSupplyFileIterator( const RCPnascoSupplyFileIterator& source );
  
  // assignment operator -- don't use!
  RCPnascoSupplyFileIterator&
  operator=(const RCPnascoSupplyFileIterator& rhs);

  
};
#endif
@
