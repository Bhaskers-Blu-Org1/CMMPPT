head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2004.04.12.17.34.36;	author fasano;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.01.22.54.02;	author dpc;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.16.21.05.34;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.07.22.18.33;	author dpc;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.06.17.10.01;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Added testing of reading files with errors
@
text
@#ifndef RCP_GLOBALATTRDATA_h
#define RCP_GLOBALATTRDATA_h

#include "scoFile.h"


class RCPglobalAttrFile : public SCOcsvFormatFile {
public:
  
  // fields  
  getFieldH(attrName);  
  getFieldH(attrValue);
  
  // preferred constructor
  RCPglobalAttrFile(std::string filename)
    : SCOcsvFormatFile(filename)
  {  
    fieldSeperator(',');
    strip(true);
    hasHeaderRecord(2);
    commentRecords(true);
  };
  
  // destructor
  ~RCPglobalAttrFile()  
  {
    // Nothing to do here
  }
  
  // Self-test
  static void test()
  {
    
    RCPglobalAttrFile file("../data/example1/globalAttr.csv");
    
    assert( file.attrValue("problem") == "resourceAction" );
    assert( file.attrValue("algorithm") == "optimalPlan" );
    assert( file.fieldAsInt("nPeriods","attrValue") == 16 );

    // Test that that wrong file name causes an exception
    {
      bool except = false;
      try {
         RCPglobalAttrFile file("../data/example1/globalAttrXXX.csv");
         assert( file.attrValue("problem") == "resourceAction" );
      }
      catch ( SCOexception e ) {
        except = true;
      }
      assert( except );
    }

    // Test that that wrong field name casuse an exception
    {
      bool except = false;
      try {
         RCPglobalAttrFile file("../data/example1/globalAttr.csv");
         assert( file.attrValue("problemXXX") == "resourceAction" );
      }
      catch ( SCOexception e ) {
        except = true;
      }
      assert( except );
    }

    // Test that that wrong field name casuse an exception
    {
      bool except = false;
      try {
         RCPglobalAttrFile file("../data/example_missingHeaderField/globalAttr.csv");
         assert( file.attrValue("problem") == "resourceAction" );
      }
      catch ( SCOexception e ) {
        except = true;
      }
      assert( except );
    }


  }
  
protected:
  
  // compute key for storing record in dictionary
  virtual
    std::string
    key( unsigned recNum ) const
  {
    std::string retVal = fieldAsString(recNum,"attrName");
    return retVal;
  }
  
private:
  
  
  // default constructor -- don't use!
  RCPglobalAttrFile();
  
  // copy constructor  -- don't use!
  RCPglobalAttrFile( const RCPglobalAttrFile& source );
  
  // assignment operator -- don't use!
  RCPglobalAttrFile&
  operator=(const RCPglobalAttrFile& rhs);

  
};


#if 0
class RCPglobalAttrFileIterator : public SCOfileIterator {
public:
  
  // fields
  //std::string locName() const;

  // preferred constructor
  RCPglobalAttrFileIterator(const RCPglobalAttrFile &);
  
  // destructor
  ~RCPglobalAttrFileIterator();
  
  // Self-test
  static void test();

private:
  
  
  // default constructor -- don't use!
  RCPglobalAttrFileIterator();
  
  // copy constructor  -- don't use!
  RCPglobalAttrFileIterator( const RCPglobalAttrFileIterator& source );
  
  // assignment operator -- don't use!
  RCPglobalAttrFileIterator&
  operator=(const RCPglobalAttrFileIterator& rhs);

  
};
#endif
#endif
@


1.4
log
@The rcp program now reads the algorithm and problem and branches internally to the appropriate code for gapGlut or resourceAction (problem) and priorityPlan or optimalPlan (algorithm).
@
text
@d40 40
@


1.3
log
@Fixed problem with unitTest
@
text
@d36 1
@


1.2
log
@Added skillSet to rcp code;  added skillSubs* to appl.mk
@
text
@d36 1
a36 1
    assert( file.attrValue("algorithm") == "implode" );
@


1.1
log
@Added globalAttr file containing algorithm and nPeriods
@
text
@d101 1
a101 1
#endif@

