head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2004.04.14.17.05.53;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.13.19.20.15;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.13.12.52.16;	author gresh;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.12.15.59.13;	author dpc;	state Exp;
branches;
next	;


desc
@@


1.4
log
@more calendar handling
@
text
@#include <string>
#include <iostream>
#include <cstdio>
#include <cassert>
#include "rcpOptCal.h"

void RcpOptCalendar::setStartMonth(int startMonth)
{
  startMonth_ = startMonth;
}

void RcpOptCalendar::setStartYear(int startYear)
{
  startYear_ = startYear;
}
void RcpOptCalendar::setCalendarType(RcpOptCalendar::CalendarType calType)
{
  calType_ = calType;
}

int RcpOptCalendar::getStartMonth()const
{
  return startMonth_;
}

int RcpOptCalendar::getStartYear()const
{
  return startYear_;
}
RcpOptCalendar::CalendarType RcpOptCalendar::getCalendarType()const
{
  return calType_;
}
  
int RcpOptCalendar::computeMonthFromPeriod(int period)const
{
  return ( (period + startMonth_ - 1) % 12 + 1 );
}

int RcpOptCalendar::computeYearFromPeriod(int period)const
{
  return 
    ((period - (period + startMonth_ - 1) % 12 + startMonth_) / 12 + startYear_ );
}
  
int RcpOptCalendar::computePeriodFromMonthAndYear(int month, int year)const
{
  return( month - startMonth_ + 12 * (year - startYear_) );
}


// Preferred Constructor
RcpOptCalendar::RcpOptCalendar(int startMonth, int startYear)
  :
  startMonth_(startMonth),
  startYear_(startYear)
{}
 
// Default Constructor
RcpOptCalendar::RcpOptCalendar()
  :
  startMonth_(1),
  startYear_(2004)
{}


// Copy Constructor
RcpOptCalendar::RcpOptCalendar(RcpOptCalendar & source)
  :
  startMonth_(source.startMonth_),
  startYear_(source.startYear_)
{}

RcpOptCalendar&
RcpOptCalendar::operator=(const RcpOptCalendar& rhs)
{  
  if (this != &rhs) { 
    startMonth_=rhs.startMonth_;
    startYear_=rhs.startYear_;
  }
  return *this;
}

// Destructor
RcpOptCalendar::~RcpOptCalendar()
{}

// Test
void RcpOptCalendar::test()
{
  RcpOptCalendar calendar(4, 2004);
  assert (calendar.getStartMonth() == 4);
  assert (calendar.getStartYear() == 2004);

  assert (calendar.computeMonthFromPeriod(0) == 4);
  assert (calendar.computeYearFromPeriod(0) == 2004);
  
  assert (calendar.computeMonthFromPeriod(1) == 5);
  assert (calendar.computeYearFromPeriod(1) == 2004);

  assert (calendar.computeMonthFromPeriod(2) == 6);
  assert (calendar.computeYearFromPeriod(2) == 2004);

  assert (calendar.computeMonthFromPeriod(3) == 7);
  assert (calendar.computeYearFromPeriod(3) == 2004);

  assert (calendar.computeMonthFromPeriod(4) == 8);
  assert (calendar.computeYearFromPeriod(4) == 2004);

  assert (calendar.computeMonthFromPeriod(5) == 9);
  assert (calendar.computeYearFromPeriod(5) == 2004);

  assert (calendar.computeMonthFromPeriod(6) == 10);
  assert (calendar.computeYearFromPeriod(6) == 2004);

  assert (calendar.computeMonthFromPeriod(7) == 11);
  assert (calendar.computeYearFromPeriod(7) == 2004);

  assert (calendar.computeMonthFromPeriod(8) == 12);
  assert (calendar.computeYearFromPeriod(8) == 2004);

  assert (calendar.computeMonthFromPeriod(9) == 1);
  assert (calendar.computeYearFromPeriod(9) == 2005);

  assert (calendar.computeMonthFromPeriod(10) == 2);
  assert (calendar.computeYearFromPeriod(10) == 2005);

  assert (calendar.computeMonthFromPeriod(11) == 3);
  assert (calendar.computeYearFromPeriod(11) == 2005);
 
  assert (calendar.computeMonthFromPeriod(12) == 4);
  assert (calendar.computeYearFromPeriod(12) == 2005);

  calendar.setStartMonth(6);
  assert (calendar.getStartMonth() == 6);

  calendar.setStartYear(2005);
  assert (calendar.getStartYear() == 2005);

  assert (calendar.computePeriodFromMonthAndYear(7, 2006) == 13);
  assert (calendar.computePeriodFromMonthAndYear(8, 2006) == 14);
  assert (calendar.computePeriodFromMonthAndYear(9, 2006) == 15);
  assert (calendar.computePeriodFromMonthAndYear(10, 2006) == 16);
  assert (calendar.computePeriodFromMonthAndYear(11, 2006) == 17);
  assert (calendar.computePeriodFromMonthAndYear(12, 2006) == 18);
  assert (calendar.computePeriodFromMonthAndYear(1, 2007) == 19);
  assert (calendar.computePeriodFromMonthAndYear(2, 2008) == 32);
  assert (calendar.computePeriodFromMonthAndYear(3, 2009) == 45);
  assert (calendar.computePeriodFromMonthAndYear(4, 2010) == 58);
  assert (calendar.computePeriodFromMonthAndYear(5, 2011) == 71);
  assert (calendar.computePeriodFromMonthAndYear(6, 2012) == 84);
  
}
@


1.3
log
@modified to include cassert instead of assert.h
@
text
@d16 4
d29 4
@


1.2
log
@minor changes to make microsoft happy
@
text
@d4 1
a4 1
#include <assert.h>
@


1.1
log
@appl.mk :  added rcpOptCal and rcpOptException to the list of files that get compiles
rcpOptCal.cpp and .h : new files that implement rcpOptCalendar
populateRCP.cpp : added tests to see if period is negative
rcpProblem.cpp : In priorityGapGlut1(), I now check to see that there is just one engagement and it
has a startPeriod of 0
unitTest.cpp : Call added to test rcpOptCalendar
@
text
@d4 1
@

