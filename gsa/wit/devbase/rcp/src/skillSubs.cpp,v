head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2004.01.11.17.40.44;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.10.14.04.33;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.07.20.35.02;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.3
log
@ jobRoleSubs:
-Added file class for reading.
-Created new datafiles.
-in rcpProblem added add/set/get methods
-populateRCP added stanza to read file and invoke add & set methods.
Have not yet added code for adding substitute arcs to wit model.
@
text
@#if 0
#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

//#include "rcpProblem.h"
#include "skillSubs.h"

#include <cassert>


void RCPskillSubs::setFromSkill( const std::string & skill )
{
  setFromName(skill);
}
std::string RCPskillSubs::getFromSkill() const
{
  return getFromName();
}

void RCPskillSubs::setToSkill( const std::string & skill )
{
  setToName(skill);
}
std::string RCPskillSubs::getToSkill() const
{
  return getToName();
}

#if 0
void RCPskillSubs::setCost( float cost )
{
  cost_ = cost;
}


float RCPskillSubs::getCost() const
{
  return cost_;
}

void RCPskillSubs::setLeadTime( float lt )
{
  leadTime_ = lt;
}


float RCPskillSubs::getLeadTime() const
{
  return leadTime_;
}
#endif

// default constructor
RCPskillSubs::RCPskillSubs()
:
RCPbaseSubs()
{}

// preferred constructor
RCPskillSubs::RCPskillSubs(const std::string & fromSkill, const std::string & toSkill )
:
RCPbaseSubs(fromSkill,toSkill)
{}


// destructor

RCPskillSubs::~RCPskillSubs()
{}

// copy constructor
RCPskillSubs::RCPskillSubs( const RCPskillSubs& source ):
RCPbaseSubs(source)
{};

// assignment operator
RCPskillSubs&
RCPskillSubs::operator=(const RCPskillSubs& rhs)
{  
  if (this != &rhs) {        
    RCPbaseSubs::operator=(rhs);
  }
  return *this;
}

RCPbaseSubs * RCPskillSubs::clone() const
{ return (new RCPskillSubs(*this));}

// Self-test
void RCPskillSubs::test()
{
  
  RCPskillSubs ad1;
  RCPbaseSubs * ad2Ptr;
  
  {
    RCPskillSubs ad0("fs","ts");
    assert(ad0.getFromSkill()=="fs");
    assert(ad0.getToSkill()=="ts");
    assert(ad0.getCost()==-1.f);
    assert(ad0.getLeadTime()==-1.f);
    assert(ad0.getFromSkill()==ad0.getFromName());
    assert(ad0.getToSkill()==ad0.getToName());
    
    ad0.setFromSkill("fromSkill");
    assert( ad0.getFromSkill()=="fromSkill");
    assert(ad0.getFromSkill()==ad0.getFromName());
    
    ad0.setToSkill("toSkill");
    assert( ad0.getToSkill()=="toSkill");
    assert(ad0.getToSkill()==ad0.getToName());
    
    ad0.setCost(2.f);
    assert(ad0.getCost()==2.f);
    
    ad0.setLeadTime(3.f);
    assert(ad0.getLeadTime()==3.f);
    
    ad1 = ad0;
    ad2Ptr = ad0.clone();
    
    ad0.setFromSkill("fSkill");
    assert( ad0.getFromSkill()=="fSkill");
    assert(ad0.getFromSkill()==ad0.getFromName());
    
    ad0.setToSkill("tSkill");
    assert( ad0.getToSkill()=="tSkill");
    assert(ad0.getToSkill()==ad0.getToName());
    
    ad0.setCost(20.f);
    assert(ad0.getCost()==20.f);
    
    ad0.setLeadTime(30.f);
    assert(ad0.getLeadTime()==30.f);
        
  }
  
  assert( ad1.getFromSkill()=="fromSkill");
  assert(ad1.getFromSkill()==ad1.getFromName());
  assert( ad1.getToSkill()=="toSkill");
  assert(ad1.getToSkill()==ad1.getToName());
  assert(ad1.getCost()==2.f);
  assert(ad1.getLeadTime()==3.f);

  assert(ad2Ptr->getFromName()=="fromSkill");
  assert(ad2Ptr->getToName()=="toSkill");
  assert(ad2Ptr->getCost()==2.f);
  assert(ad2Ptr->getLeadTime()==3.f);
  delete ad2Ptr;
  
}
#endif
@


1.2
log
@Added abstract base class baseSubs.
Modified skillSubs class to use baseSubs.
Will eventually add lobSubs, locSubs, jobRoleSubs all inheriting from baseSubs.
@
text
@d1 1
d154 1
@


1.1
log
@Added skillSubs class
@
text
@d14 1
a14 1
  fromSkill_ = skill;
d18 1
a18 1
  return fromSkill_;
d23 1
a23 1
  toSkill_ = skill;
d27 1
a27 1
  return toSkill_;
d30 1
d52 1
a52 1

d57 1
a57 4
fromSkill_(),
toSkill_(),
cost_(-1.f),
leadTime_(-1.f)
d63 1
a63 4
fromSkill_(fromSkill),
toSkill_(toSkill),
cost_(-1.f),
leadTime_(-1.f)
d74 1
a74 5
//RCPappData(source),
fromSkill_(source.fromSkill_),
toSkill_(source.toSkill_),
cost_(source.cost_),
leadTime_(source.leadTime_)
d82 1
a82 5
    //RCPappData::operator=(rhs);
    fromSkill_ = rhs.fromSkill_;
    toSkill_ = rhs.toSkill_;
    cost_ = rhs.cost_;
    leadTime_ = rhs.leadTime_;
d87 2
a88 2
//RCPappData * RCPskillSubs::clone() const
//{ return (new RCPskillSubs(*this));}
d95 1
d103 2
d108 1
d112 1
d121 1
d125 1
d129 1
d140 1
d142 1
d145 6
@

