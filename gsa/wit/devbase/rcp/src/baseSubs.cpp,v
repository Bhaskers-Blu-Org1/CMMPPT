head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2004.04.02.17.25.23;	author gresh;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.22.20.40.30;	author gresh;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.11.17.40.44;	author fasano;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.10.14.04.33;	author fasano;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix defaults for substitute costs and lead times to be reasonable values
@
text
@#if defined(_MSC_VER)
#pragma warning(disable:4786)
#pragma warning(disable:4503)
#endif

//#include "rcpProblem.h"
#include "baseSubs.h"

#include <cassert>


void RCPbaseSubs::setFromName( const std::string & skill )
{
  fromName_ = skill;
}
std::string RCPbaseSubs::getFromName() const
{
  return fromName_;
}

void RCPbaseSubs::setToName( const std::string & skill )
{
  toName_ = skill;
}
std::string RCPbaseSubs::getToName() const
{
  return toName_;
}

void RCPbaseSubs::setCost( float cost )
{
  cost_ = cost;
}


float RCPbaseSubs::getCost() const
{
  return cost_;
}

void RCPbaseSubs::setLeadTime( float lt )
{
  leadTime_ = lt;
}


float RCPbaseSubs::getLeadTime() const
{
  return leadTime_;
}

void RCPbaseSubs::setAversion( int a )
{
  aversion_ = a;
}


int RCPbaseSubs::getAversion() const
{
  return aversion_;
}
// default constructor
RCPbaseSubs::RCPbaseSubs()
:
fromName_(),
toName_(),
cost_(0.f),
leadTime_(0.f)
{}

// preferred constructor
RCPbaseSubs::RCPbaseSubs(const std::string & fromName, const std::string & toName )
:
fromName_(fromName),
toName_(toName),
cost_(0.f),
leadTime_(0.f)
{}


// destructor

RCPbaseSubs::~RCPbaseSubs()
{}

// copy constructor
RCPbaseSubs::RCPbaseSubs( const RCPbaseSubs& source ):
//RCPappData(source),
fromName_(source.fromName_),
toName_(source.toName_),
cost_(source.cost_),
leadTime_(source.leadTime_)
{};

// assignment operator
RCPbaseSubs&
RCPbaseSubs::operator=(const RCPbaseSubs& rhs)
{  
  if (this != &rhs) {        
    //RCPappData::operator=(rhs);
    fromName_ = rhs.fromName_;
    toName_ = rhs.toName_;
    cost_ = rhs.cost_;
    leadTime_ = rhs.leadTime_;
  }
  return *this;
}

//RCPappData * RCPbaseSubs::clone() const
//{ return (new RCPbaseSubs(*this));}

// Self-test
void RCPbaseSubs::test()
{
  
  RCPbaseSubs ad1;
  
  {
    RCPbaseSubs ad0("fs","ts");
    assert(ad0.getFromName()=="fs");
    assert(ad0.getToName()=="ts");
    assert(ad0.getCost()==0.f);
    assert(ad0.getLeadTime()==0.f);
    
    ad0.setFromName("fromName");
    assert( ad0.getFromName()=="fromName");
    
    ad0.setToName("toName");
    assert( ad0.getToName()=="toName");
    
    ad0.setCost(2.f);
    assert(ad0.getCost()==2.f);
    
    ad0.setLeadTime(3.f);
    assert(ad0.getLeadTime()==3.f);
    
    ad1 = ad0;
    
    ad0.setFromName("fSkill");
    assert( ad0.getFromName()=="fSkill");
    
    ad0.setToName("tSkill");
    assert( ad0.getToName()=="tSkill");
    
    ad0.setCost(20.f);
    assert(ad0.getCost()==20.f);
    
    ad0.setLeadTime(30.f);
    assert(ad0.getLeadTime()==30.f);
        
  }
  
  assert( ad1.getFromName()=="fromName");
  assert( ad1.getToName()=="toName");
  assert(ad1.getCost()==2.f);
  assert(ad1.getLeadTime()==3.f);
  
}

@


1.3
log
@adding support for priority substitution on bom arcs
@
text
@d67 2
a68 2
cost_(-1.f),
leadTime_(-1.f)
d76 2
a77 2
cost_(-1.f),
leadTime_(-1.f)
d122 2
a123 2
    assert(ad0.getCost()==-1.f);
    assert(ad0.getLeadTime()==-1.f);
@


1.2
log
@ jobRoleSubs:
-Added file class for reading.
-Created new datafiles.
-in rcpProblem added add/set/get methods
-populateRCP added stanza to read file and invoke add & set methods.
Have not yet added code for adding substitute arcs to wit model.
@
text
@d52 4
d57 5
@


1.1
log
@Added abstract base class baseSubs.
Modified skillSubs class to use baseSubs.
Will eventually add lobSubs, locSubs, jobRoleSubs all inheriting from baseSubs.
@
text
@a102 1
#if 0
d150 1
a150 1
#endif
@

