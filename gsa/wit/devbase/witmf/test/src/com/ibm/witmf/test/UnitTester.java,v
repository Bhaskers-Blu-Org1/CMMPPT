head	1.20;
access;
symbols;
locks; strict;
comment	@# @;


1.20
date	2011.05.05.15.56.12;	author rjw;	state Exp;
branches;
next	1.19;

1.19
date	2011.05.05.15.52.02;	author rjw;	state Exp;
branches;
next	1.18;

1.18
date	2011.05.04.20.20.17;	author rjw;	state Exp;
branches;
next	1.17;

1.17
date	2011.05.03.23.05.29;	author rjw;	state Exp;
branches;
next	1.16;

1.16
date	2011.05.03.20.25.23;	author rjw;	state Exp;
branches;
next	1.15;

1.15
date	2011.05.03.20.06.54;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2011.05.02.20.11.32;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.02.16.38.48;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2011.04.28.19.13.12;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.27.23.39.27;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.27.23.06.35;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.27.22.00.58;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.04.27.20.25.17;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.26.17.50.55;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.22.23.03.19;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.22.23.01.53;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.22.22.59.13;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.22.22.05.14;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.20.16.18.54;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.19.22.34.56;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.20
log
@CVS Test 1a
@
text
@
//==============================================================================
// WIT-MF/Test Source File UnitTester.java.
//==============================================================================

package com.ibm.witmf.test;

import com.ibm.witmf.InputRow;
import com.ibm.witmf.InputTable;
import com.ibm.witmf.Modeler;
import com.ibm.witmf.Realization;
import com.ibm.witmf.Scheme;

/*******************************************************************************
 * Responsible for performing a unit test of WIT-MF.
 *******************************************************************************
 */
final class UnitTester extends Modeler
{
//==============================================================================
// Package internal Methods
//==============================================================================

/*******************************************************************************
 * Performs a unit test of WIT-MF: Invokes all public methods of WIT-MF.
 *******************************************************************************
 */
   static void performTest ()
      {
      try
         {
         Realization theRealization;
         UnitTester  theUnitTester;

         theRealization =
            Realization.newInstance ("Unit-Test-Realization", UNIT_TEST_SCHEME);
      
         theUnitTester = new UnitTester (theRealization);

         theUnitTester.perfTest ();
         }

      catch (Exception theExc)
         {
         theExc.printStackTrace ();

         System.exit (4);
         }

      System.out.printf (
         "\n"
       + "Normal termination of unit test.%n");
      }

//==============================================================================
// Private Methods & Constructors
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   private UnitTester (Realization theRealization)
      {
      super (theRealization);
      }

/*******************************************************************************
 * Internal implementation of the unit test.
 *******************************************************************************
 */
   private void perfTest ()
      throws
         Exception
      {
      testInputTable  ();
      testScheme      ();
      testRealization ();
      }

/*******************************************************************************
 * Tests class InputTable and the classes that support it.
 *******************************************************************************
 */
   private void testInputTable ()
      throws
         Exception
      {
      InputTable theTable;

      theTable = InputTable.newInstance ("area.csv");

      printTable       (theTable);
      printNonHeadings (theTable);
      }

/*******************************************************************************
 * Prints theTable.
 *******************************************************************************
 */
   private void printTable (InputTable theTable)
      {
      for (InputRow theRow: theTable.getRows ())
         {
         System.out.printf (
            "%n"
          + "Row %2d:%n"
          + "   Area:          = \"%s\"%n"
          + "   Work_Type:     = \"%s\"%n"
          + "   Workload_Type: = \"%s\"%n"
          + "   #Shifts:       = \"%s\"%n"
          + "   Min_IBM%%:      = \"%s\"%n"
          + "   #999:          = \"%s\"%n"
          + "   Training_Time: = \"%s\"%n",
            theRow.getIndex (),
            theRow.getCell ("Area"),
            theRow.getCell ("Work_Type"),
            theRow.getCell ("Workload_Type"),
            theRow.getCell ("#Shifts"),
            theRow.getCell ("Min_IBM%"),
            theRow.getCell ("#999"),
            theRow.getCell ("Training_Time"));
         }
      }

/*******************************************************************************
 * Prints some Strings that are not headings in theTable.
 *******************************************************************************
 */
   private void printNonHeadings (InputTable theTable)
      {
      String[] nonHeadings;

      System.out.printf (
         "%n"
       + "Not headings in the table:%n"
       + "%n");

      nonHeadings =
         theTable.findNonHeadings (
            "#Shifts",
            "Something Else",
            "Min_IBM%");

      for (String nonHeading: nonHeadings)
         System.out.printf (
            "   \"%s\"%n",
            nonHeading);
      }

/*******************************************************************************
 * Tests class Scheme.
 *******************************************************************************
 */
   private void testScheme ()
      {
      System.out.printf (
         "%n"
       + "%s:%n"
       + "   Name: \"%s\"%n",
         UNIT_TEST_SCHEME,
         UNIT_TEST_SCHEME.getName ());
      }

/*******************************************************************************
 * Tests class Realization.
 *******************************************************************************
 */
   private void testRealization ()
      {
      System.out.printf (
         "%n"
       + "%s:%n"
       + "   Name:   \"%s\"%n"
       + "   Scheme: %s%n",
         getRealization (),
         getRealization ().getName   (),
         getRealization ().getScheme ());
      }

//==============================================================================
// Private Static Fields
//==============================================================================

/*******************************************************************************
 * The Scheme for the unit test.
 *******************************************************************************
 */
   private static final Scheme UNIT_TEST_SCHEME;
   
//==============================================================================
// Private Non-Static Fields
//==============================================================================
   
//==============================================================================
// Static initialization block
//==============================================================================

   static
      {
      UNIT_TEST_SCHEME = Scheme.newInstance ("UNIT_TEST_SCHEME");
      }
   
//==============================================================================
}
@


1.19
log
@CVS Test 1
@
text
@a21 1
// CVS Test 1
@


1.18
log
@Started class Modeler.
@
text
@d22 1
@


1.17
log
@Classes Realization and Scheme.
@
text
@d10 1
d18 1
a18 1
final class UnitTester
d32 2
a33 1
         UnitTester theUnitTester;
d35 4
a38 1
         theUnitTester = new UnitTester ();
d56 1
a56 1
// Private Methods
d58 1
a58 1

d60 1
a60 1
 * Private Constructor.
d63 1
a63 1
   private UnitTester ()
d65 1
a170 3
      myRealization =
         Realization.newInstance ("Unit-Test-Realization", UNIT_TEST_SCHEME);
      
d176 3
a178 3
         myRealization,
         myRealization.getName   (),
         myRealization.getScheme ());
a194 6
/*******************************************************************************
 * The Realization for the unit test.
 *******************************************************************************
 */
   private Realization myRealization = null;

@


1.16
log
@Added a comment.
@
text
@d10 1
d70 3
a72 2
      testInputTable ();
      testScheme     ();
d153 3
a155 1
       + "Scheme: \"%s\"%n",
d159 19
d179 1
a179 1
// Private Fields
d189 10
@


1.15
log
@Testing of class Scheme.
@
text
@d159 4
@


1.14
log
@Added doc comments.
@
text
@a148 4
      Scheme theScheme;
      
      theScheme = Scheme.newInstance ("Unit-Test-Scheme");

d152 1
a152 1
         theScheme.getName ());
d156 15
@


1.13
log
@Revised some comments.
@
text
@d12 4
a15 6
//==============================================================================
// Class UnitTester
//
// Responsible for performing a unit test of WIT-MF.
//==============================================================================

d22 4
a25 6
//------------------------------------------------------------------------------
// performTest ()
//
// Performs a unit test of WIT-MF.
//------------------------------------------------------------------------------

d50 1
a50 1
// Private Constructor
d53 4
d61 4
a64 10
//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// perfTest ()
//
// Performs the test.
//------------------------------------------------------------------------------

d73 4
a76 6
//------------------------------------------------------------------------------
// testInputTable ()
//
// Tests class InputTable and the classes that support it.
//------------------------------------------------------------------------------

d89 4
a92 6
//------------------------------------------------------------------------------
// printTable (theTable)
//
// Prints theTable.
//------------------------------------------------------------------------------

d118 4
a121 6
//------------------------------------------------------------------------------
// printNonHeadings (theTable)
//
// Prints some Strings that are not headings in theTable.
//------------------------------------------------------------------------------

d143 4
a146 6
//------------------------------------------------------------------------------
// testScheme ()
//
// Tests classScheme.
//------------------------------------------------------------------------------

@


1.12
log
@Added a status quo test.
@
text
@a3 2
//
// Contains the declaration of class UnitTester.
@


1.11
log
@Minor revision.
@
text
@d40 1
a40 1
         theUnitTester.perform ();
d68 1
a68 1
// perform ()
d73 1
a73 1
   private void perform ()
@


1.10
log
@Added status quo test.
@
text
@d169 1
a169 1
       System.out.printf (
@


1.9
log
@Added class Tester to the test package.
@
text
@d68 1
a68 1
// perfTest ()
@


1.8
log
@Class Scheme
@
text
@d20 1
a20 1
public final class UnitTester
d23 1
a23 26
// Public Methods
//==============================================================================

//------------------------------------------------------------------------------
// Main Program.
//------------------------------------------------------------------------------

   public static void main (String[] theArgs)
      {
      UnitTester theUnitTester;

      theUnitTester = new UnitTester ();

      theUnitTester.performTest ();
      }

//==============================================================================
// Private Constructor
//==============================================================================

   private UnitTester ()
      {
      }

//==============================================================================
// Private Methods
d32 1
a32 1
   private void performTest ()
d36 5
a40 1
         perfTest ();
d55 12
d73 1
a73 1
   private void perfTest ()
d168 1
a168 1
      
@


1.7
log
@Import by type.
@
text
@d12 1
d86 14
d166 18
@


1.6
log
@CVS Test.
@
text
@d10 2
a11 1
import  com.ibm.witmf.*;
d87 1
a87 1
      theTable = InputTable.newInstance ("data/area.csv");
@


1.5
log
@CVS Test.
@
text
@d13 1
a13 1
// Class UnitTester...
@


1.4
log
@Moved the location of the data file.
@
text
@d13 1
a13 1
// Class UnitTester
@


1.3
log
@Removed an unneeded imported spotted by Eclipse.
@
text
@d86 1
a86 1
      theTable = InputTable.newInstance ("area.csv");
@


1.2
log
@Switched to POK data.
@
text
@a10 1
import        java.io.*;
@


1.1
log
@Initial files for WIT-MF.
@
text
@d87 1
a87 1
      theTable = InputTable.newInstance ("Availability.csv");
d105 8
a112 4
          + "Row %2d: Empl ID           = \"%s\"%n"
          + "        Loc St            = \"%s\"%n"
          + "        Availability Date = \"%s\"%n"
          + "        Availability %%    = \"%s\"%n",
d114 7
a120 4
            theRow.getCell ("Empl ID"),
            theRow.getCell ("Loc St"),
            theRow.getCell ("Availability Date"),
            theRow.getCell ("Availability %"));
d141 1
a141 1
            "Empl ID",
d143 1
a143 4
            "Loc St",
            "Loc ST",
            "Availability Date",
            "Availability %");
@

