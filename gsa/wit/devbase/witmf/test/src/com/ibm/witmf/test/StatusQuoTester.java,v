head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2011.05.04.20.20.16;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.02.20.11.31;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.02.16.38.47;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.28.23.47.57;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.28.19.13.11;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.27.23.06.34;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Started class Modeler.
@
text
@//==============================================================================
// WIT-MF/Test Source File StatusQuoTester.java.
//==============================================================================

package com.ibm.witmf.test;

import com.ibm.witmf.InputTable;
import com.ibm.witmf.Scheme;

/*******************************************************************************
 * Responsible for performing a series of tests on WIT-MF each of which
 * generates an error condition that that causes an Exception to be thrown,
 * but which does not change the state of WIT-MF.
 *******************************************************************************
 */
final class StatusQuoTester
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

/*******************************************************************************
 * Performs a status quo test.
 *******************************************************************************
 */
   static void performTest ()
      {
      StatusQuoTester theStatusQuoTester;

      theStatusQuoTester = new StatusQuoTester ();

      theStatusQuoTester.perfTest ();
      }

//==============================================================================
// Private Methods & Constructors
//==============================================================================

/*******************************************************************************
 * Private Constructor
 *******************************************************************************
 */
   private StatusQuoTester ()
      {
      }

/*******************************************************************************
 * Internal implementation of performTest ().
 *******************************************************************************
 */
   private void perfTest ()
      {
      for (curCaseIdx = 1; curCaseIdx <= 2; curCaseIdx ++)
         {
         try
            {
            testCurCase ();
 
            throw new AssertionError ();
            }

         catch (Exception theExc)
            {
            System.out.flush ();
         
            theExc.printStackTrace ();
                  
            System.out.flush ();
            }

         System.out.printf (
            "\n"
          + "Status Quo Test Case %d now concludes.\n",
            curCaseIdx);
         }

      System.out.println (
         "\n"
       + "Normal termination of status quo test.");
      }

/*******************************************************************************
 * Performs the status quo test indexed by curCaseIdx.
 *******************************************************************************
 */
   private void testCurCase ()
      throws
         Exception
      {
      switch (curCaseIdx)
         {
         case 1:
            testCase1 ();
            break;

         case 2:
            testCase2 ();
            break;

         default:
            throw new AssertionError ();
         }
      }

/*******************************************************************************
 * Performs status quo test case 1.
 *******************************************************************************
 */
   private void testCase1 ()
      {
      printHeading (
         "Passing a null argument to Scheme.newInstance (...).");

      Scheme.newInstance (null);
      }

/*******************************************************************************
 * Performs status quo test case 2.
 *******************************************************************************
 */
   private void testCase2 ()
      throws
         Exception
      {
      printHeading (
         "Call to theInputRow.getCell (...) with an invalid heading.");

      InputTable theTable;

      theTable = InputTable.newInstance ("area.csv");
         
      theTable.getRows ().get (0).getCell ("nonsense");
      }

/*******************************************************************************
 * Prints a heading for the status quo test case indexed by theCaseIdx.
 * 
 * @@param text Text describing the status quo test case.
 *******************************************************************************
 */
   private void printHeading (String text)
      {
      System.out.printf (
         "\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "WIT-MF Status Quo Test Case %d:\n"
       + "\n"
       + "%s\n"
       + "----------------------------------------"
       + "----------------------------------------\n"
       + "\n",
         curCaseIdx,
         text);
      }

///==============================================================================
// Private Fields
//==============================================================================

/*******************************************************************************
 * The index of the status quo test cased to be performed.
 *******************************************************************************
 */
   private int curCaseIdx;

//==============================================================================
}
@


1.5
log
@Added doc comments.
@
text
@d36 1
a36 1
// Private Methods
@


1.4
log
@Revised some comments.
@
text
@d10 6
a15 8
//==============================================================================
// Class StatusQuoTester
//
// Responsible for performing a series of tests on WIT-MF each of which
// generates an error condition that that causes an Exception to be thrown,
// but which do not change the state of WIT-MF.
//==============================================================================

d22 4
a25 6
//------------------------------------------------------------------------------
// performTest ().
//
// Performs a status quo test.
//------------------------------------------------------------------------------

d36 1
a36 1
// Private Constructor
d39 4
d47 4
a50 10
//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// perfTest ().
//
// Internal implementation of performTest ().
//------------------------------------------------------------------------------

d82 4
a85 6
//------------------------------------------------------------------------------
// testCurCase ().
//
// Tests the case for curCaseIdx.
//------------------------------------------------------------------------------

d105 4
a108 6
//------------------------------------------------------------------------------
// testCase1 ().
//
// Performs status quo test case 1.
//------------------------------------------------------------------------------

d117 4
a120 6
//------------------------------------------------------------------------------
// testCase2 ().
//
// Performs status quo test case 2.
//------------------------------------------------------------------------------

d135 6
a140 7
//------------------------------------------------------------------------------
// printHeading (theCaseIdx, text)
//
// Prints a heading for the status quo test case of theCaseIdx, where text
// describes status quo test case.
//------------------------------------------------------------------------------

d161 4
@


1.3
log
@Status quo test.
@
text
@a2 2
//
// Contains the declaration of class StatusQuoTester.
@


1.2
log
@Added a status quo test.
@
text
@d61 23
a83 2
      testCase1 ();
      testCase2 ();
d90 25
a114 1
  
a123 1
         1,
d126 2
a127 6
      try
         {
         Scheme.newInstance (null);
 
         throw new AssertionError ();
         }
a128 11
      catch (RuntimeException theExc)
         {
         System.out.flush ();
         
         theExc.printStackTrace ();
                  
         System.out.flush ();
         }
         
      printClosing (1);
      }
d136 2
d140 1
a140 2
         2,
         "Passing a null argument to Scheme.newInstance (...).");
d142 1
a142 3
      try
         {
         InputTable theTable;
d144 1
a144 10
         theTable = InputTable.newInstance ("area.csv");
         
         theTable.getRows ().get (0).getCell ("nonsense");

         throw new AssertionError ();
         }

      catch (Exception theExc)
         {
         System.out.flush ();
d146 1
a146 6
         theExc.printStackTrace ();
         
         System.out.flush ();
         }
         
      printClosing (2);
d156 1
a156 1
   private void printHeading (int theCaseIdx, String text)
d163 1
d168 1
a168 1
         theCaseIdx,
d172 3
a174 5
//------------------------------------------------------------------------------
// printClosing (theCaseIdx)
//
// Prints a closing for the status quo test case of theCaseIdx.
//------------------------------------------------------------------------------
d176 1
a176 7
   private void printClosing (int theCaseIdx)
      {
      System.out.printf (
         "\n"
       + "Successful completion of Status Quo Test Case %d.\n",
         theCaseIdx);
      }
@


1.1
log
@Added status quo test.
@
text
@d9 2
a10 1
import  com.ibm.witmf.Scheme;
d62 1
d94 2
d100 34
@

