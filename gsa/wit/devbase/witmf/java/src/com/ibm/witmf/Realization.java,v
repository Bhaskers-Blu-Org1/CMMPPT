head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2011.05.04.21.03.46;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.04.20.20.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.03.23.05.22;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.02.23.16.41;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Revised doc comments.
@
text
@
//==============================================================================
// WIT-MF Source File Realization.java.
//==============================================================================

package       com.ibm.witmf;

import static com.ibm.witmf.Utility.*;

/*******************************************************************************
 * A Realization is the central object representing a "realization" of a WIT
 * model, i.e., a concrete instance of a WIT model, as populated with actual
 * data.
 *******************************************************************************
 */
public final class Realization
{
//==============================================================================
// Public Methods
//==============================================================================

/*******************************************************************************
 * Factory method: Constructs a new Realization.
 *
 * @@param  theName          The name of the new Realization
 * @@param  theScheme        The Scheme of the WIT model 
 * @@return                  The new Realization
 * @@throws RuntimeException If theName   is null
 * @@throws RuntimeException If theScheme is null
 *******************************************************************************
 */
   public static Realization newInstance (String theName, Scheme theScheme)
      {
      mustBeNonNull (theName, "theName",   "Realization.newInstance");
      mustBeNonNull (theName, "theScheme", "Realization.newInstance");
      
      return new Realization (theName, theScheme);
      }
   
//******************************************************************************
// Override from class Object
//******************************************************************************
//
   public String toString ()
      {
      return "Realization \"" + myName + "\" of " + myScheme; 
      }
   
/*******************************************************************************
 * Getter.
 * 
 * @@return The name of this Realization
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

/*******************************************************************************
 * Getter
 * 
 * @@return The Scheme of the WIT model realized by this Realization
 *******************************************************************************
 */
   public Scheme getScheme ()
      {
      return myScheme;
      }

//==============================================================================
// Private Methods & Constructors
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   private Realization (String theName, Scheme theScheme)
      {
      assert (theName   != null);
      assert (theScheme != null);
      
      myName   = theName;
      myScheme = theScheme;
      }

//==============================================================================
// Private Fields
//==============================================================================

/*******************************************************************************
 * The name of this Realization
 *******************************************************************************
 */
   private final String myName;
   
/*******************************************************************************
 * The Scheme of the WIT model realized by this Realization
 *******************************************************************************
 */
   private final Scheme myScheme;
   
//==============================================================================
}
@


1.3
log
@Started class Modeler.
@
text
@d11 3
a13 4
 * A Realization is the central object representing a concrete instance of a WIT
 * model, as populated with actual data. All objects pertaining to a particular
 * concrete instance of a particular WIT model will belong to the same
 * Realization.
@


1.2
log
@Classes Realization and Scheme.
@
text
@d73 1
a73 1
// Private Methods
d75 1
a75 1

@


1.1
log
@Started class Realization.
@
text
@d23 49
a77 3
 * 
 * @@param theScheme The Scheme of the WIT model.
 * @@param theName   The name of the Realization.
d80 1
a80 1
   private Realization (Scheme theScheme, String theName)
d82 5
d93 12
@

