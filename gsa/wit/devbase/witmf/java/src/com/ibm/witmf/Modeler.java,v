head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2011.05.05.15.56.07;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.05.15.51.57;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.04.20.20.06;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@CVS Test 1a
@
text
@
//==============================================================================
// WIT-MF Source File Modeler.java.
//==============================================================================

package       com.ibm.witmf;

import static com.ibm.witmf.Utility.*;

/*******************************************************************************
 * Class Modeler is intended to be subclassed by any class in the application
 * program whose instances will be working with a particular Realization of a
 * particular WIT model. A Modeler is associated with a particular Realization
 * and the class has various methods whose behavior is defined in terms of that
 * Realization.
 *******************************************************************************
 */
public abstract class Modeler
{
//==============================================================================
// Public Methods
//==============================================================================

/*******************************************************************************
 * Getter
 * 
 * @@return The Realization associated with this Modeler.
 *******************************************************************************
 */
   public Realization getRealization ()
      {
      return myRealization;
      }

//==============================================================================
// Protected Methods & Constructors
//==============================================================================

/*******************************************************************************
 * Constructor.
 * 
 * @@param  theRealization <br>
 *         The Realization to be associated with the constructed Modeler.
 * @@throws RuntimeException <br>
 *         If theRealization is null
 *******************************************************************************
 */
   protected Modeler (Realization theRealization)
      {
      mustBeNonNull (theRealization, "theRealization",  "Modeler constructor");
      
      myRealization = theRealization;
      }

//==============================================================================
// Private Methods
//==============================================================================

//==============================================================================
// Private Fields
//==============================================================================

/*******************************************************************************
 * The Realization associated with this Modeler.
 *******************************************************************************
 */
   private final Realization myRealization;
   
//==============================================================================
// Static initialization block
//
// This block contains vacuous code that refers to class InputTable, so that
// class InputTable and the classes it refers to will be compiled whenever class
// Modeler is compiled.
//==============================================================================

   static
      {
      if (false)
         InputTable.class.toString ();
      }
   
//==============================================================================
}
@


1.2
log
@CVS Test 1
@
text
@a21 1
// CVS Test 1
@


1.1
log
@Started class Modeler.
@
text
@d22 1
@

