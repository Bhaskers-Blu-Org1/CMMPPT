head	1.10;
access;
symbols;
locks; strict;
comment	@# @;


1.10
date	2011.05.04.21.03.47;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2011.05.03.23.05.23;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.02.23.16.41;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.02.22.01.14;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.02.16.38.35;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.02.15.25.03;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.29.19.42.56;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.28.19.13.02;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.27.20.24.06;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.27.16.11.34;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Revised doc comments.
@
text
@
//==============================================================================
// WIT-MF Source File Scheme.java.
//==============================================================================

package       com.ibm.witmf;

import static com.ibm.witmf.Utility.*;

/*******************************************************************************
 * A Scheme is the central object representing the static structure or "scheme"
 * of a WIT model, i.e., the data-independent aspects of a model.
 *******************************************************************************
 */
public final class Scheme
{
//==============================================================================
// Public Methods
//==============================================================================

/*******************************************************************************
 * Factory method: Constructs a new Scheme.
 *
 * @@param  theName          The name of the WIT Model
 * @@return                  The new Scheme
 * @@throws RuntimeException If theName is null
 *******************************************************************************
 */
   public static Scheme newInstance (String theName)
      {
      mustBeNonNull (theName, "theName", "Scheme.newInstance");
      
      return new Scheme (theName);
      }

//******************************************************************************
// Override from class Object
//******************************************************************************
//
   public String toString ()
      {
      return "Model Scheme \"" + myName + "\""; 
      }
   
/*******************************************************************************
 * Getter.
 * 
 * @@return The name of the WIT model
 *******************************************************************************
 */
   public String getName ()
      {
      return myName;
      }

//==============================================================================
// Private Methods
//==============================================================================

/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   private Scheme (String theName)
      {
      myName = theName;
      }

//==============================================================================
// Private Fields
//==============================================================================

/*******************************************************************************
 * The name of the WIT model.
 *******************************************************************************
 */
   private final String myName;

//==============================================================================
}
@


1.9
log
@Classes Realization and Scheme.
@
text
@d11 2
a12 4
 * A Scheme is the central object representing the static structure of a WIT
 * model, i.e., the data-independent aspects the model. All objects pertaining
 * to the static structure of a particular WIT model will belong to the same
 * Scheme.
@


1.8
log
@Started class Realization.
@
text
@d26 1
a26 1
 * @@param  theName          The name of WIT Model
d38 9
@


1.7
log
@Added class Utility.
Revised imports.
@
text
@d13 2
a14 1
 * to the static structure of a particular WIT model belong to the same Scheme.
@


1.6
log
@Revised some comments.
@
text
@d6 1
a6 1
package com.ibm.witmf;
d8 1
a8 3
//==============================================================================
// Class Scheme
//==============================================================================
d19 1
a19 1
// Public Members
d32 1
a32 9
      if (theName == null)
         {
         throw
            new RuntimeException (
               "\n"
             + "\n"
             + "   Scheme.newInstance was called with a null reference for\n"
             + "   the argument \"theName\".\n");
         }
d49 1
a49 1
// Package-Internal Members
d56 1
a56 1
   Scheme (String theName)
d62 1
a62 1
// Private Members
@


1.5
log
@Doc comments
@
text
@a3 2
//
// Contains the declaration of class Scheme.
@


1.4
log
@Added doc comments.
@
text
@d29 3
a31 3
 * @@param  theName          The name of WIT Model.
 * @@return                  The new Scheme.
 * @@throws RuntimeException {@@code theName} must not be {@@code null}.
d34 5
a38 5
	public static Scheme newInstance (String theName)
	   {
	   if (theName == null)
	      {
	      throw
d44 4
a47 4
	      }
	   
	   return new Scheme (theName);
	   }
d52 1
a52 1
 * @@return The name of the WIT model.
d55 4
a58 4
	public String getName ()
	   {
	   return myName;
	   }
a65 2
 * 
 * @@param theName The name of WIT Model.
@


1.3
log
@Added a status quo test.
@
text
@a11 3
//
// An instance of this class is the central object for the static structure of a
// model: the data-independent aspects the model.
d14 6
d23 1
a23 1
// Public Methods
d26 8
a33 6
//------------------------------------------------------------------------------
// newInstance (theName)
//
// Factory method: Constructs and returns a new Scheme with theName.
//------------------------------------------------------------------------------

d49 6
a54 6
//------------------------------------------------------------------------------
// getName ()
//
// Getter
//------------------------------------------------------------------------------

d61 1
a61 1
// Package-Internal Constructor
d64 6
d76 1
a76 1
// Private Fields
d79 4
@


1.2
log
@Class Scheme
@
text
@d37 2
a38 2
             + "   Scheme.newInstance was called with a null reference for the\n"
             + "   argument \"theName\".\n");
@


1.1
log
@Class Structure ==> Scheme
@
text
@d13 2
a14 1
// Represents the data-independent aspects of a model.
d31 10
@

