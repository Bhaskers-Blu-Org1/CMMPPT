head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2011.05.04.20.20.05;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.02.22.01.13;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.02.16.38.33;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.02.15.25.02;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.19.22.34.50;	author rjw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Started class Modeler.
@
text
@
//==============================================================================
// WIT-MF Source File CsvFileReader.java.
//==============================================================================

package       com.ibm.witmf;

import static com.ibm.witmf.Utility.*;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;

/*******************************************************************************
 * A CsvFileReader is responsible for reading a CSV file and storing the
 * resulting data.
 *******************************************************************************
 */
final class CsvFileReader
{
//==============================================================================
// Package-Internal Methods
//==============================================================================

/*******************************************************************************
 * Reads a CSV file.
 * 
 * @@param theFileName The name of the file to be read.
 * @@param theHeadings On return, {@@code theHeadings.get (colIdx-1)} is the
 *                    heading for column {@@code #colIdx}.
 * @@param theCellRows On return,
 *                    {@@code theCellRows.get (rowIdx-1).get (colIdx-1)}
 *                    is the table cell for {@@code rowIdx} and {@@code colIdx}.
 *
 * @@throws FileNotFoundException If thrown when reading the file
 * @@throws IOException           If thrown when reading the file
 * @@throws RuntimeException      If the file is empty
 * @@throws RuntimeException      If two or more column headings are identical
 * @@throws RuntimeException      If a row is read whose length does not match
 *                               the number of column headings
 *******************************************************************************
 */
   static void read (
         String                          theFileName,
         ArrayList  <String>             theHeadings,
         LinkedList <ArrayList <String>> theCellRows)
      throws
         FileNotFoundException,
         IOException
      {
      CsvFileReader theCsvFileReader;

      theCsvFileReader =
         new CsvFileReader (theFileName, theHeadings, theCellRows);

      theCsvFileReader.readFile ();
      }

//==============================================================================
// Private Methods & Constructors
//==============================================================================
   
/*******************************************************************************
 * Constructor.
 *******************************************************************************
 */
   private CsvFileReader (
         String                          theFileName,
         ArrayList  <String>             theHeadings,
         LinkedList <ArrayList <String>> theCellRows)
      {
      myFileName = theFileName;
      myHeadings = theHeadings;
      myCellRows = theCellRows;
      }

/*******************************************************************************
 * Reads the CSV file and stores the resulting column headings and cells.
 *******************************************************************************
 */
   private void readFile ()
      throws
         FileNotFoundException,
         IOException
      {
      FileReader theFileReader = null;

      myHeadings.clear ();
      myCellRows.clear ();

      try
         {
         theFileReader = new FileReader     (myFileName);
         myBufReader   = new BufferedReader (theFileReader);

         readHeadings ();
         readRows     ();
         }

      finally
         {
         if (theFileReader != null)
            {
            theFileReader.close ();
            }
         }
      }

/*******************************************************************************
 * Reads the column headings from the first line of the file.
 *******************************************************************************
 */
   private void readHeadings ()
      throws
         IOException
      {
      String                    firstLine;
      HashMap <String, Integer> theColIndexMap;
      int                       colIdx;
      String                    theHeading;

      firstLine      = myBufReader.readLine ();

      if (firstLine == null)
         reportEmptyFile ();

      myHeadings.addAll (Arrays.asList (firstLine.split (",")));

      theColIndexMap = new HashMap <String, Integer> (3 * myHeadings.size ());

      for (colIdx = 1; colIdx <= myHeadings.size (); colIdx ++)
         {
         theHeading = myHeadings.get (colIdx - 1);

         if (theColIndexMap.containsKey (theHeading))
            {
            reportDupHeading (
               theHeading,
               theColIndexMap.get (theHeading),
               colIdx);
            }
         
         theColIndexMap.put (theHeading, colIdx);
         }
      }

/*******************************************************************************
 * Throws an exception indicating an empty CSV file.
 *******************************************************************************
 */
   private void reportEmptyFile ()
      {
      throw
         new RuntimeException (
            "\n"
          + "\n"
          + "   The CSV file is empty.\n"
          + "\n"
          + "      File: " + myFileName + "\n");
      }

/*******************************************************************************
 * Throws an exception indicating theHeading appeared twice, once in the each
 * the indicated columns.
 *******************************************************************************
 */
   private void reportDupHeading (String theHeading, int colIdx1, int colIdx2)
      {
      throw
         new RuntimeException (
            "\n"
          + "\n"
          + "   A duplicate column heading was found in a CSV file.\n"
          + "\n"
          + "      File:              \"" + myFileName + "\"\n"
          + "      Duplicate Heading: \"" + theHeading + "\"\n"
          + "      First  Column:     "   + colIdx1    + "\n"
          + "      Second Column:     "   + colIdx2    + "\n");
      }

/*******************************************************************************
 * Reads the rows of cells and stores them in myCellRows.
 *******************************************************************************
 */
   private void readRows ()
      throws
         IOException
      {
      int                lineNo;
      String             curLine;
      ArrayList <String> theCells;

      for (lineNo = 2; ; lineNo ++)
         {
         curLine = myBufReader.readLine ();

         if (curLine == null)
            break;

         theCells = new ArrayList <String> (myHeadings.size ());

         theCells.addAll (Arrays.asList (curLine.split (",")));

         if (theCells.size () != myHeadings.size ())
            reportCellCountMisMatch (lineNo, theCells.size ());

         myCellRows.addLast (theCells);
         }
      }

/*******************************************************************************
 * Throws an exception indicating that the current line has a different number
 * of cells than the number of column headings.
 *******************************************************************************
 */
   private void reportCellCountMisMatch (int lineNo, int nCells)
      {
      throw
         new RuntimeException (
            "\n"
          + "\n"
          + "   A line in a CSV file was read that contained a number of\n"
          + "   cells that was different from the number of column headings.\n"
          + "\n"
          + "      File:       \"" + myFileName         + "\"\n"
          + "      # Headings: "   + myHeadings.size () +   "\n"
          + "      Line #      "   + lineNo             +   "\n"
          + "      # Cells:    "   + nCells             +   "\n");
      }

//==============================================================================
// Private Fields
//==============================================================================

/*******************************************************************************
 * The name of the CSV file to be read by this CsvFileReader.
 *******************************************************************************
 */
   private final String myFileName;

/*******************************************************************************
 * BufferedReader of the CSV file.
 *******************************************************************************
 */
   private BufferedReader myBufReader = null;

/*******************************************************************************
 * {@@code myHeadings.get (colIdx-1)} is the heading for column #{@@code colIdx}.
 *******************************************************************************
 */
   private final ArrayList <String> myHeadings;

/*******************************************************************************
 * {@@code myCellRows.get (rowIdx-1).get (colIdx-1)} is the table cell for
 * {@@code rowIdx} and {@@code colIdx}.
 *******************************************************************************
 */
   private final LinkedList <ArrayList <String>> myCellRows;

//==============================================================================
}
@


1.4
log
@Added class Utility.
Revised imports.
@
text
@d65 1
a65 1
// Private Methods
d67 1
a67 1

@


1.3
log
@Revised some comments.
@
text
@d6 1
a6 1
package com.ibm.witmf;
d8 10
a17 2
import    java.util.*;
import      java.io.*;
@


1.2
log
@Doc comments
@
text
@a3 2
//
// Contains the declaration of class CsvFileReader.
@


1.1
log
@Initial files for WIT-MF.
@
text
@d13 5
a17 6
//==============================================================================
// Class CsvFileReader
//
// Responsible for reading a CSV file and storing the resulting data.
//==============================================================================

d24 18
a41 11
//------------------------------------------------------------------------------
// read (theFileName, theHeadings, theCellRows)
//
// Reads a CVS file whose name is given by theFileName.
// On return:
// * theHeadings.get (colIdx - 1) is the heading for column #colIdx.
// * theCellRows.get (rowIdx - 1).get (colIdx - 1) is the table cell for rowIdx
//   and colIdx.
// Verifies that each row is the same length as the list of headings.
//------------------------------------------------------------------------------

d55 1
a55 1
      theCsvFileReader.read ();
d59 1
a59 1
// Private Constructor
d62 4
d76 5
a80 11
//==============================================================================
// Private Methods
//==============================================================================

//------------------------------------------------------------------------------
// read ()
//
// Reads the CVS file and stores the resulting column headings and cells.
//------------------------------------------------------------------------------

   private void read ()
d108 4
a111 6
//------------------------------------------------------------------------------
// readHeadings ()
//
// Reads the column headings from the first line of the file.
//------------------------------------------------------------------------------

d146 4
a149 6
//------------------------------------------------------------------------------
// reportEmptyFile ()
//
// Throws an exception indicating an empty CSV file.
//------------------------------------------------------------------------------

d161 5
a165 7
//------------------------------------------------------------------------------
// reportDupHeading (theHeading, colIdx1, colIdx2)
//
// Throws an exception indicating theHeading appeared twice, once in the each
// the indicated columns.
//------------------------------------------------------------------------------

d180 4
a183 6
//------------------------------------------------------------------------------
// readRows ()
//
// Reads the rows of cells and stores them in myCellRows.
//------------------------------------------------------------------------------

d210 5
a214 7
//------------------------------------------------------------------------------
// reportCellCountMisMatch (lineNo, nCells)
//
// Throws an exception indicating that the current line has a different number
// of cells than the number of column headings.
//------------------------------------------------------------------------------

d234 4
a237 6
//------------------------------------------------------------------------------
// myFileName
//
// The name of the CSV file to be read by this CsvFileReader.
//------------------------------------------------------------------------------

d240 4
a243 6
//------------------------------------------------------------------------------
// myBufReader
//
// BufferedReader of the CSV file.
//------------------------------------------------------------------------------

d246 4
a249 6
//------------------------------------------------------------------------------
// myHeadings
// 
// myHeadings.get (colIdx - 1) is the heading for column #colIdx.
//------------------------------------------------------------------------------

d252 5
a256 7
//------------------------------------------------------------------------------
// myCellRows
//
// myCellRows.get (rowIdx - 1).get (colIdx - 1) is the table cell for rowIdx and
// colIdx.
//------------------------------------------------------------------------------

@

