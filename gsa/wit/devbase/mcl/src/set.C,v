head	1.7;
access;
symbols
	sce_5_01_20080919:1.6
	latest_sce_4_20_20060523:1.6.0.4
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.6.0.2
	sce_4_20_OSL:1.6
	sce_4_05_20040511:1.6
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.1.1.1.0.12
	Root-of-EndRw:1.1.1.1
	rwToStl:1.1.1.1.0.10
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.09.29.18.27.14;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.22.19.21.30;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.21.22.55.55;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.04.20.22.14;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.09.13.09.12;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.25.15.13.16;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.21.35.08;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.21.35.08;	author wit;	state Exp;
branches
	1.1.1.1.10.1;
next	;

1.1.1.1.10.1
date	2002.11.06.21.02.53;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Added a proprietary statement to the source code and to the object code.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Message Class Library
//
// (C) Copyright IBM Corp. 1997, 2005  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//-----------------------------------------------------------------------------
// File set.C
//
// Contains the implementation of the following classes:
//
// MsgUnitSet
//-----------------------------------------------------------------------------

#include <assert.h>
#include <mcl/src/mdsPragma.h>
#include <mcl/src/msg.h>
#include <mcl/src/set.h>

//-----------------------------------------------------------------------------
// Implementation of class MsgUnitSet
//-----------------------------------------------------------------------------

MclMsgUnitSet::MclMsgUnitSet ()
   {
   }

//-----------------------------------------------------------------------------

MclMsgUnitSet::~MclMsgUnitSet ()
   {
   std::map <std::string, MclMsgUnit *>:: iterator theItr;

   myMsgUnitsByNum_.clear ();

   theItr = myMsgUnitsById_.begin ();

   while (theItr != myMsgUnitsById_.end ())
      {
      delete theItr->second;

      theItr->second = NULL;

      theItr ++;
      }
   }

//-----------------------------------------------------------------------------

void MclMsgUnitSet::insert (MclMsgUnit * theMsgUnit)
   {
   int theExtNum;

   myMsgUnitsById_[theMsgUnit->id ()] = theMsgUnit;

   theExtNum =
      theMsgUnit->asaMsg ()?
         theMsgUnit->asaMsg ()->externalNumber ():
         -1;

   myMsgUnitsByNum_.insert (std::make_pair (theExtNum, theMsgUnit));
   }

//-----------------------------------------------------------------------------

MclMsgUnit * MclMsgUnitSet::findValue (const char * msgId)
   {
   std::map <std::string, MclMsgUnit *>::iterator theItr;

   theItr = myMsgUnitsById_.find (msgId);

   return
      (theItr == myMsgUnitsById_.end ())?
         NULL:
         theItr->second;
   }
@


1.6
log
@Minor changes.
@
text
@d1 14
@


1.5
log
@Attempt to fix a major memory leak.
@
text
@d28 1
a28 1
   msgUnitsByNumber_.clear ();
d30 1
a30 1
   theItr = msgUnitsById_.begin ();
d32 1
a32 1
   while (theItr != msgUnitsById_.end ())
d48 1
a48 1
   msgUnitsById_[theMsgUnit->id ()] = theMsgUnit;
d55 1
a55 1
   msgUnitsByNumber_.insert (std::make_pair (theExtNum, theMsgUnit));
d64 1
a64 1
   theItr = msgUnitsById_.find (msgId);
d67 1
a67 1
      (theItr == msgUnitsById_.end ())?
@


1.4
log
@Modified to reduce microsoft compiler warning messages
@
text
@d8 1
d18 3
a20 1
MclMsgUnitSet::MclMsgUnitSet() {}
d24 17
a40 1
MclMsgUnitSet::~MclMsgUnitSet() {}
d46 10
a55 8
      // ids are unique, so they go in a map.
      msgUnitsById_[ theMsgUnit->id() ] = theMsgUnit;
      // but sequence number are not because of Fragments
      typedef std::pair<int, MclMsgUnit *> intMsgPair;
      if( theMsgUnit->asaMsg() )
         msgUnitsByNumber_.insert( intMsgPair( theMsgUnit->asaMsg()->externalNumber(), theMsgUnit ) );
      else
         msgUnitsByNumber_.insert( intMsgPair( -1, theMsgUnit ) );
d62 8
a69 2
      MsgUnitsById::iterator it = msgUnitsById_.find( msgId );
      return it == msgUnitsById_.end() ? 0 : it->second;
@


1.3
log
@Went to std::cout all the way
@
text
@d9 1
a9 1

@


1.2
log
@modications to change rogueWave tools.h++ to STL
@
text
@a6 1
// HashDictEl
@


1.1
log
@Initial revision
@
text
@a13 2
#include <rw/collstr.h>

d18 1
a18 7
MclMsgUnitSet::MclMsgUnitSet():
      hashDict_     (0),
      hashDictSize_ (200),
      msgUnitList_  ()
   {
   hashDict_.resize (hashDictSize_);
   }
d22 1
a22 20
MclMsgUnitSet::~MclMsgUnitSet()
   {
      //----------------------------------------------
      // For each key-value pair in the set, delete:
      //    The key
      //    The HashDictEl
      //    Not the MsgUnit
      //----------------------------------------------

   hashDict_.clearAndDestroy ();

      //---------------------------------------------
      // For each element in the MsgUnitList, delete:
      //    The List element
      //    The MsgUnit
      //---------------------------------------------

   while (! msgUnitList_.isEmpty ())
      delete msgUnitList_.get ();
   }
d28 8
a35 2
   insertInHashDict (theMsgUnit);
   insertInList     (theMsgUnit);
d42 2
a43 123
   static RWCollectableString key (' ', 100);

   key = msgId;

   MclHashDictEl * theEl =
      (MclHashDictEl *) (hashDict_.findValue (& key));

   return
      (theEl == NULL)?
         NULL:
         theEl->myMsgUnit ();
   }

//-----------------------------------------------------------------------------

void MclMsgUnitSet::insertInHashDict (MclMsgUnit * theMsgUnit)
   {
   RWCollectableString * theKey;
   MclHashDictEl *       theEl;
   RWCollectable *       result;

   if (hashDict_.entries () * 2 >= hashDictSize_)
      {
      hashDictSize_ *= 2;

      hashDict_.resize (hashDictSize_);
      }

   theKey = new RWCollectableString (theMsgUnit->id ());
   theEl  = new MclHashDictEl       (theMsgUnit);
   result = hashDict_.insertKeyAndValue (theKey, theEl);

   assert (result);
   }

//-----------------------------------------------------------------------------
// insertInList
//
// Inserts theMsgUnit at the end of msgUnitList_, if it is a MsgFrag.
// Inserts it in externalNumber order, if it is a Msg.
//-----------------------------------------------------------------------------

void MclMsgUnitSet::insertInList (MclMsgUnit * theMsgUnit)
   {
   MclMsg * theMsg = theMsgUnit->asaMsg ();

   //-------------
   // MsgFrag case
   //-------------

   if (theMsg == NULL)
      {
      msgUnitList_.append (theMsgUnit);

      return;
      }

   //---------
   // Msg case
   //---------

   int theExtNum = theMsg->externalNumber ();

   RWGSlistIterator(MclMsgUnit) theItr (msgUnitList_);

   MclMsgUnit * theOtherMsgUnit;
   MclMsg     * theOtherMsg;
   int          i = 0;


   while (theOtherMsgUnit = theItr ())
      {
      theOtherMsg = theOtherMsgUnit->asaMsg ();

      if (theOtherMsg != NULL)
         if (theOtherMsg->externalNumber () > theExtNum)
            break;

      ++ i;
      }

   msgUnitList_.insertAt (i, theMsgUnit);
   }

//-----------------------------------------------------------------------------
// Implementation of class MclHashDictEl
//-----------------------------------------------------------------------------

RWDEFINE_COLLECTABLE (MclHashDictEl, 900)

//-----------------------------------------------------------------------------

MclHashDictEl::MclHashDictEl (MclMsgUnit * theMsgUnit):
      RWCollectable (),

      myMsgUnit_    (theMsgUnit)
   {
   }

//-----------------------------------------------------------------------------

MclHashDictEl::MclHashDictEl ():
      RWCollectable (),

      myMsgUnit_    (NULL)
   {
   assert (! "Default ctor for class MclHashDictEl was invoked.");
   }

//-----------------------------------------------------------------------------

MclHashDictEl::MclHashDictEl (const MclHashDictEl &):
      RWCollectable (),

      myMsgUnit_    (NULL)
   {
   assert (! "Copy ctor for class MclHashDictEl was invoked.");
   }

//-----------------------------------------------------------------------------

MclHashDictEl::~MclHashDictEl ()
   {
@


1.1.1.1
log
@MCL Import
@
text
@@


1.1.1.1.10.1
log
@Removed references to misc RWVectors, dictionaries, hash, etc
@
text
@d14 2
d20 7
a26 1
MclMsgUnitSet::MclMsgUnitSet() {}
d30 20
a49 1
MclMsgUnitSet::~MclMsgUnitSet() {}
d55 2
a56 8
      // ids are unique, so they go in a map.
      msgUnitsById_[ theMsgUnit->id() ] = theMsgUnit;
      // but sequence number are not because of Fragments
      typedef std::pair<int, MclMsgUnit *> intMsgPair;
      if( theMsgUnit->asaMsg() )
         msgUnitsByNumber_.insert( intMsgPair( theMsgUnit->asaMsg()->externalNumber(), theMsgUnit ) );
      else
         msgUnitsByNumber_.insert( intMsgPair( -1, theMsgUnit ) );
d63 123
a185 2
      MsgUnitsById::iterator it = msgUnitsById_.find( msgId );
      return it == msgUnitsById_.end() ? 0 : it->second;
@

