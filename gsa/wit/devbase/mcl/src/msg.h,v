head	1.7;
access;
symbols
	sce_5_01_20080919:1.6
	latest_sce_4_20_20060523:1.2.0.6
	sce_4_20_20060523:1.2
	latest_sce4_20_OSL:1.2.0.4
	sce_4_20_OSL:1.2
	sce_4_05_20040511:1.2
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.12
	Root-of-EndRw:1.1.1.1
	rwToStl:1.1.1.1.0.10
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.09.29.18.27.13;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.14.15.36.45;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.12.19.41.39;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2006.07.12.16.18.21;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.10.21.53.26;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.25.15.13.16;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.21.35.07;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.21.35.07;	author wit;	state Exp;
branches
	1.1.1.1.10.1;
next	;

1.1.1.1.10.1
date	2002.11.05.22.47.19;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.10.2;

1.1.1.1.10.2
date	2002.11.06.23.25.30;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Added a proprietary statement to the source code and to the object code.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Message Class Library
//
// (C) Copyright IBM Corp. 1997, 2005  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef mcl_msg_h
#define mcl_msg_h

//-----------------------------------------------------------------------------
// File msg.h
//
// Contains the declaration of the following classes:
//
// MsgUnit
//    Msg
//    MsgFrag
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Notes on Implementation:
//
// * The classes: MclMsg and MclMsgFrag are sub-classes of the MclMsgUnit
//   which are the type of objects that are held and issued by the facilities.
//
// * These message units must be created after the MclFacility object to which
//   it will "belong" has been instantiated. They can be created by allocating
//   memory dynamically as in the examples given in unitTest.C and in the
//   Notes on Implementation for the MclFacility class in facility.h.
//
//    new MclMsg(someMclFacil,"messageID1",someMclLevel,9999);
//    new MclMsg(someMclFacil,"messageID2",otherMclLevel,100);
//     .
//     .
//    etc.
//
// * Message units own attributes which effect how it is issued, but only
//   the MclMsg class has methods to manipulate them (from below):
//
//    MclMsg * maxTimesIssued        (int        theValue);
//    MclMsg * preceedingLineFeeds   (int        theValue);
//    MclMsg * trailingLineFeeds     (int        theValue);
//    MclMsg * vectorIndent          (int        theValue);
//    MclMsg * displayExternalNumber (MclBoolean theValue);
//    MclMsg * allowedToChange       (MclBoolean theValue);
//
//   These, along with their respective "get" methods and the constructors, 
//   should be the only methods used externally.
//
//
// * When a message is issued by its facility, the facility takes care of
//   locating the proper message determined by its key (<STRING> message id),
//   but the actual final-formatting and printing of the message is done
//   within the MclMsg object.
//
//-----------------------------------------------------------------------------

#include <stdlib.h>
#include <string>

#include <mcl/src/defs.h>

//-----------------------------------------------------------------------------

class MclArg;
class DECLSPEC MclArgList;
class DECLSPEC MclFacility;
class DECLSPEC MclLevel;
class DECLSPEC MclMsg;
class DECLSPEC MclMsgFrag;

//-----------------------------------------------------------------------------
// class MsgUnit.
//
// Message unit: either a complete message or a fragment of one.
// Note: The classes Msg and MsgFrag directly derive from this class: No
// other classes should be derived from it, except by deriving fron Msg or
// MsgFrag.
//-----------------------------------------------------------------------------

class DECLSPEC MclMsgUnit
   {
   public:

      virtual ~MclMsgUnit ();
         //
         // Destructor

      //-----------------------------------------------------------------------
      // Access functions.
      //-----------------------------------------------------------------------

      inline MclFacility & myFacility () const
         {
         return myFacility_;
         }

      const char * id () const;
         //
         // Returns id_;

      const char * text () const;
         //
         // Returns text_;

      inline MclBoolean isInserting () const
         {
         return isInserting_;
         }

      //-----------------------------------------------------------------------

      virtual MclMsg * asaMsg ();
         //
         // If this MsgUnit is actually a Msg, the Msg is returned;
         // otherwise NULL is returned.

      virtual MclMsgFrag * asaMsgFrag ();
         //
         // If this MsgUnit is actually a MsgFrag, the MsgFrag is returned.
         // Otherwise NULL is returned.

      void clientError (const char * text) const;
         //
         // Reports an error, printing text and aborting for a client error
         // associated with this MsgUnit.

   protected:

      MclMsgUnit (
            MclFacility & theFacility,
            const char *  idVal,
            const char *  textVal);
         //
         // myFacility_ <-- theFacility
         // id_         <-- idVal
         // text_       <-- textVal

      void insertSelf ();
         //
         // Inserts this MsgUnit into myFacility.

   private:

      MclMsgUnit             (const MclMsgUnit &);
      MclMsgUnit & operator= (const MclMsgUnit &);
         //
         // Copy ctor and assignment are declared private and not implemented
         // so as to prevent inadvertant copying and assignment.

      void forbidBlankId () const;
         //
         // Disallows id_ == all blanks.
         // (This includes the case of a null string.)

      void forbidDupId () const;
         //
         // Disallows id_ duplicated within myFacility ().

      //-----------------------------------------------------------------------
      // Data.
      //-----------------------------------------------------------------------

      MclFacility & myFacility_;
         //
         // The Facility that owns with this MsgUnit.

      std::string id_;
         //
         // String for identifying this MsgUnit.

      std::string text_;
         //
         // The (unprocessed) text of this MsgUnit.

      MclBoolean isInserting_;
         //
         // TRUE, iff this MsgUnit is currently inserting itself into
         // myFacility ().
   };

//-----------------------------------------------------------------------------

class DECLSPEC MclMsg: public MclMsgUnit
{

public:

  MclMsg (
     MclFacility &    theFacility,
     const char *     id,
     const MclLevel & theLevel,
     const char *     textVal,
     int              externalNumber);

  // Destructor
  virtual ~MclMsg();

  //---------------------------------------------------------------------------
  // Access functions.
  //---------------------------------------------------------------------------

  inline int externalNumber () const
     {
     return externalNumber_;
     }

  inline int maxTimesIssued () const
     {
     return maxTimesIssued_;
     }

  inline int timesIssued () const
     {
     return timesIssued_;
     }

  inline int preceedingLineFeeds () const
     {
     return preceedingLineFeeds_;
     }

  inline int trailingLineFeeds () const
     {
     return trailingLineFeeds_;
     }

  inline int vectorIndent () const
     {
     return vectorIndent_;
     }

  inline MclBoolean displayExternalNumber () const
     {
     return displayExternalNumber_;
     }

  inline MclBoolean allowedToChange () const
     {
     return allowedToChange_;
     }

  inline const MclLevel & myLevel () const
     {
     return myLevel_;
     }
  
  inline MclBoolean mark() const
  {
    return mark_;
  }
  
  //---------------------------------------------------------------------------
  // Attribute setting functions.
  //---------------------------------------------------------------------------

  MclMsg * maxTimesIssued        (int        theValue);
  MclMsg * preceedingLineFeeds   (int        theValue);
  MclMsg * trailingLineFeeds     (int        theValue);
  MclMsg * vectorIndent          (int        theValue);
  MclMsg * displayExternalNumber (MclBoolean theValue);
  MclMsg * allowedToChange       (MclBoolean theValue);

  inline void mark(MclBoolean theValue) { mark_ = theValue; }
 
  //---------------------------------------------------------------------------

  virtual MclMsg * asaMsg ();
     //
     // Override from class MsgUnit;

  //Prints message text with arguments

  void issue(const MclArgList &);

protected:

   virtual void postIssue ();
      //
      // Called by issue () after it completes its activities.
      // Called even if timesIssued > maxTimesIssued.
      // The main purpose of this function is to allow client specific error
      // handling behavior.

  MclMsg * set (
        int &        theAttr,
        const char * attrName,
        int          theValue);
     //
     // Sets attribute theAttr, whose name is given by attrName to theValue.
     // Returns this Msg.
     // Issues a client error if allowedToChange is FALSE.

private:

  void checkExtNumRange () const;
     //
     // Disallows externalNumber_ out of range.

  void forbidDupExtNum () const;
     //
     // Disallows externalNumber_ duplicated with myFacility ().

  MclMsg * setNonNeg (
        int &        theAttr,
        const char * attrName,
        int          theValue);
     //
     // Sets attribute theAttr, whose name is given by attrName to theValue,
     // after verifying that theValue >= 0. Returns this Msg.

  void getFinalText (
        std::string &        finalText,
        const MclArgList & theArgList)
        const;
     //
     // Sets finalText to text_, processed for issuing, applying the Args in
     // theArgList.

  void validateArgNum (
        size_t             argNum,
        const MclArgList & theArgList)
        const;
     //
     // Verifies that theArgList specifies argument # argNum.

  void validateMaxArgNum (
        int                maxArgNum,
        const MclArgList & theArgList)
        const;
     //
     // Verifies that theArgList specifies no more arguments than maxArgNum.

  void missingFormatFlag (const char * argSpec) const;
     //
     // Reports an error indicating that the argument specification argSpec
     // is missing a format flag.

  void procForAttrs (std::string & finalText) const;
     //
     // Processes finalText according to the attributes of this Msg.
  
  void validateCurArgFmt (
        const std::string & finalText,
        size_t              start,
        size_t &            posPercent,
        int&                number,
        size_t &            posDollar,
        size_t &            posv,
        size_t &            posFmt)
        const;
     //
     // Checks that current arg output format begins with '%', followed by a
     // sequence of digits, by an optional 'v' and then followed by the '$'

  /* Obsoleted by the new version of the above
  size_t indexInCurArgFmt(const char* c,
                          const std::string & finalText,
                          size_t start) const;*/
  
  void procLine (std::string & finalText) const;
  //
  // if any line is longer than lineLength, break it
  //
  
  MclMsg             (const MclMsg &);
  MclMsg & operator= (const MclMsg &);
     //
     // Copy ctor and assignment are declared private and not implemented
     // so as to prevent inadvertant copying and assignment.

  //---------------------------------------------------------------------------
  // Data.
  //---------------------------------------------------------------------------

  const int  externalNumber_;
  int        maxTimesIssued_;
  int        timesIssued_;
  int        preceedingLineFeeds_;
  int        trailingLineFeeds_;

  int        vectorIndent_;
     //
     // The # of chars to indent each new line when formatting a vector.

  MclBoolean displayExternalNumber_;
  MclBoolean allowedToChange_;
     //
     // True if client can change attribute values.
  
  MclBoolean mark_;
  //
  // True if this message is issued.
  
  const MclLevel & myLevel_;
     //
     // The Level for this Msg.
};

//-----------------------------------------------------------------------------
// class MsgFrag.
//
// Message fragment.
//-----------------------------------------------------------------------------

class DECLSPEC MclMsgFrag: public MclMsgUnit
   {
   public:

      MclMsgFrag (
            MclFacility & theFacility,
            const char *  idVal,
            const char *  textVal);
         //
         // Constructor.
         // See MsgUnit ctor for meaning of args.

      virtual ~MclMsgFrag ();
         //
         // Destructor

      virtual MclMsgFrag * asaMsgFrag ();
         //
         // Override from class MsgUnit;

   private:

      MclMsgFrag             (const MclMsgFrag &);
      MclMsgFrag & operator= (const MclMsgFrag &);
         //
         // Copy ctor and assignment are declared private and not implemented
         // so as to prevent inadvertant copying and assignment.
   };

#endif
@


1.6
log
@Removed some experimental code.
@
text
@d1 14
@


1.5
log
@Experiment for Purify on Windows.
@
text
@a415 7
      static MclMsgFrag * newMsgFrag (
            MclFacility & theFacility,
            const char *  idVal,
            const char *  textVal);
         //
         // Constructs and returns a new MsgFrag.

@


1.4
log
@An attempt to fix a memory problem found by purify on Windows.
@
text
@d133 1
a133 1
      void insertMe ();
a428 7
      MclMsgFrag (
            const char *  idVal,
            const char *  textVal,
            MclFacility & theFacility);
         //
         // Non-inserting constructor.

@


1.3
log
@Replaced data members asaMsg_ and asaMsgFrag_ with virtual functions.
@
text
@d337 9
a345 2
  // old version: void validateCurArgFmt (const std::string & finalText, size_t start) const;
  void validateCurArgFmt (const std::string & finalText, size_t start, size_t& posPercent, int& number, size_t& posDollar, size_t& posv, size_t& posFmt ) const;
d416 10
a425 3
  virtual MclMsgFrag * asaMsgFrag ();
     //
     // Override from class MsgUnit;
d429 7
@


1.2
log
@modications to change rogueWave tools.h++ to STL
@
text
@d107 1
a107 4
      inline MclMsg * asaMsg ()
         {
         return asaMsg_;
         }
d109 2
a110 2
         // If this MsgUnit is actually a Msg, the Msg is returned.
         // Otherwise NULL is returned.
d112 1
a112 4
      inline MclMsgFrag * asaMsgFrag ()
         {
         return asaMsgFrag_;
         }
d127 1
a127 4
            const char *  textVal,
            MclMsg *      thisMsg);
         //
         // MsgUnit ctor for use by the Msg ctor.
a131 16
         //
         // thisMsg must == this MsgUnit.

      MclMsgUnit (
            MclFacility & theFacility,
            const char *  idVal,
            const char *  textVal,
            MclMsgFrag *  thisMsgFrag);
         //
         // MsgUnit ctor for use by the MsgFrag ctor.
         //
         // myFacility_ <-- theFacility
         // id_         <-- idVal
         // text_       <-- textVal
         //
         // thisMsgFrag must == this MsgUnit.
a144 11
      void setup (
            const char * idVal,
            const char * textVal,
            MclMsgUnit * thisMsgUnit);
         //
         // id_   <-- idVal
         // text_ <-- textVal
         //
         // Sets up this MsgUnit at construction time.
         // thisMsgUnit must == this MsgUnit.

a173 10

      MclMsg * const asaMsg_;
         //
         // If this MsgUnit is actually a Msg, asaMsg is the Msg;
         // Otherwise NULL.

      MclMsgFrag * const asaMsgFrag_;
         //
         // If this MsgUnit is actually a MsgFrag, asaMsgFrag is the MsgFrag;
         // Otherwise NULL.
d262 4
d409 4
@


1.1
log
@Initial revision
@
text
@d53 2
a65 2
class RWCString;

d198 1
a198 1
      RWCString & id_;
d202 1
a202 1
      RWCString & text_;
d349 1
a349 1
        RWCString &        finalText,
d375 1
a375 1
  void procForAttrs (RWCString & finalText) const;
d379 2
a380 1
  void validateCurArgFmt (const RWCString & finalText, size_t start) const;
d385 1
d387 2
a388 2
                          const RWCString & finalText,
                          size_t start) const;
d390 1
a390 1
  void procLine (RWCString & finalText) const;
@


1.1.1.1
log
@MCL Import
@
text
@@


1.1.1.1.10.1
log
@Removed references to RWCString, RWRegExp, RWSubString
@
text
@a52 2
#include <string>

d64 2
d198 1
a198 1
      std::string & id_;
d202 1
a202 1
      std::string & text_;
d349 1
a349 1
        std::string &        finalText,
d375 1
a375 1
  void procForAttrs (std::string & finalText) const;
d379 1
a379 2
  // old version: void validateCurArgFmt (const std::string & finalText, size_t start) const;
  void validateCurArgFmt (const std::string & finalText, size_t start, size_t& posPercent, int& number, size_t& posDollar, size_t& posv, size_t& posFmt ) const;
a383 1
  /* Obsoleted by the new version of the above
d385 2
a386 2
                          const std::string & finalText,
                          size_t start) const;*/
d388 1
a388 1
  void procLine (std::string & finalText) const;
@


1.1.1.1.10.2
log
@Removed references to misc RWGOrdered and related classes and some compiler warnings
@
text
@d198 1
a198 1
      std::string id_;
d202 1
a202 1
      std::string text_;
@


