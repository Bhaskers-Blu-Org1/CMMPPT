head	1.12;
access;
symbols
	sce_5_01_20080919:1.11
	latest_sce_4_20_20060523:1.11.0.4
	sce_4_20_20060523:1.11
	latest_sce4_20_OSL:1.11.0.2
	sce_4_20_OSL:1.11
	sce_4_05_20040511:1.6
	sce_4_00_20040201:1.4
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.1.1.1.0.12
	Root-of-EndRw:1.1.1.1
	rwToStl:1.1.1.1.0.10
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2011.09.29.18.27.11;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.04.17.20.42;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.03.22.43.33;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.03.21.15.42;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.03.19.19.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.11.17.34.03;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.22.19.21.30;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.21.22.55.54;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.09.16.25.27;	author rwToStl;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.09.13.09.12;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.25.15.13.16;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.21.35.07;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.21.35.07;	author wit;	state Exp;
branches
	1.1.1.1.10.1;
next	;

1.1.1.1.10.1
date	2002.11.05.22.47.19;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.10.2;

1.1.1.1.10.2
date	2002.11.06.21.02.53;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.10.3;

1.1.1.1.10.3
date	2002.11.06.23.25.30;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Added a proprietary statement to the source code and to the object code.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Message Class Library
//
// (C) Copyright IBM Corp. 1997, 2005  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef mcl_facility_h
#define mcl_facility_h

//-----------------------------------------------------------------------------
// File facility.h
//
// Contains the declaration of the following classes:
//
// Facility
// MsgUnitItr
//-----------------------------------------------------------------------------

#include <mcl/src/defs.h>
#include <string>
#include <map>

//-----------------------------------------------------------------------------

class DECLSPEC MclArgList;
class MclMsgUnit;
class MclMsg;
class MclMsgFrag;
class MclLevel;
class MclOutputDisplayer;
class MclMsgUnitSet;

//-----------------------------------------------------------------------------
// class MclFacility
//
// Notes on Usage:
//
// * The MclFacility serves as the public interface for the
//   Message Class Library.  It serves as a container for messages and for
//   the methods which issue them.
//
// * For concrete examples of usage, see the file: unitTest.C
//
// * General Steps of Implementation:
//
//   1) First, create an instance of the a class derived from the 
//      MclOutputDisplayer class (ie: MclPrintfOutputDisplayer)
//
//       MclPrintfOutputDisplayer myMsgDisplayer("myMsgFileName","w+");
//                                                      |         |
//        <STRING> messages are printed to this file ----         |
//        {r(+),w(+),a(+)} open method for file - C convention ----
//
//   2) Second, create an instance of the MclFacility class with a call
//      that should resemble the following:
//
//       MclFacility myMsgFacility("XYZ", myMsgDisplayer);
//                                   |           |
//       <STRING> Three character prefix         |
//       <MclOutputDisplayer-DERIVED class> name of the displayer object
//
//   3) Now, once the facility has been created, messages can be created.
//      Note: they are "added" in the sense that the constructors for the
//            messages require an MclFacility object -- they belong to the
//            facility with which it is constructed.
//
//       new MclMsg(myMsgFacility,    <-- the MclFacility object to which
//                                        this message will belong
//                  "MESSAGE_1",      <-- <STRING> the "name" of this message
//                                        which is not printed, but is used
//                                        when issuing.
//                  MclLevel::info(), <-- this is returns a pointer to one
//                                        member of a set of "MclLevel"s
//                                        (see level.h, level.C for more)
//                  "This is Message number %1$d", <-- <STRING> this is the
//                                                  frame of the message using
//                                                  "printf"-type syntax.
//                  101);             <-- <INT> an external number associated
//                                        with this message. Can be printed 
//                                        when message is issued, or can be
//                                        "turned off" with method:
//                                   MclFacility::displayExternalNumber( . . )
//
//   4) After all the desired messages have been added, they can be issued
//      by invoking a method of an MclFacility object, using the parentheses
//      operator.
//
//       myMsgFacility("MESSAGE_1",MclArgList() << 1234);
//                         |       \__________________/
//        <STRING> a message id              |
//        <MclArgList object> this seems to be the most compact way to pass
//                            an argument list to the facility in this method
//                            but there are other ways to create such lists.
//-----------------------------------------------------------------------------

class DECLSPEC MclFacility
{
 friend class MclMsgUnitItr;
 friend class MclTester;

public:

  MclFacility(const char* prefix, MclOutputDisplayer& theOutputDisplayer);

  ~MclFacility();

  void insert (MclMsgUnit * msgUnit);
     //
     // adds a message unit to myMsgUnits

  void operator()(const char * msgId, const MclArgList&);

  void operator()(const char * msgId);

  //---------------------------------------------------------------------------
  // Access functions.
  //---------------------------------------------------------------------------

  const char * prefix () const;
     //
     // Returns prefix_.

  const char * booleanText (MclBoolean theValue) const;
     //
     // Returns the text representing theValue.

  int lineLength () const;
     //
     // Returns lineLength.

  inline const MclLevel & minErrOutLevel () const
     {
     return * minErrOutLevelPtr_;
     }

  MclBoolean deletingMsgUnits () const;
     //
     // Returns TRUE, iff this Facility is currently deleting its MsgUnits.

  //---------------------------------------------------------------------------

  MclMsgUnit * findMsgUnit (const char * theId);
     //
     // Returns the MsgUnit in this Facility whose id_ matches theId, if one
     // exists; otherwise returns NULL.

  MclMsg * findMsg (const char * theId);
     //
     // Returns the Msg in this Facility whose id_ matches theId, if one
     // exists; otherwise returns NULL.

  MclMsg * findMsg (int theExtNumber);
     //
     // Returns the Msg in this Facility whose externalNumber_ matches
     // theExtNumber, if one exists; otherwise returns NULL.

  MclMsgFrag * findMsgFrag (const char * theId);
     //
     // Returns the MsgFrag in this Facility whose id_ matches theId, if one
     // exists; otherwise returns NULL.

  int maxSeverityOfMsgsIssued();
  //
  // find out the worst severity level of messages being isuued.
  
  void output      (const char * finalText);
     //
     // Performs a normal output of the finalTest of a Msg.

  void outputError (const char * finalText);
     //
     // Performs an error output of the finalTest of a Msg.

  static void forbidNullArg (
        const void * thePtr,
        const char * argName,
        const char * funcName);
     //
     // If thePtr is NULL, aborts, indicating funcName as the function name
     // and argName as the NULL pointer argument name.

  static void calledByClientError (const char * funcName);
     //
     // Aborts, indicating that an inappropriate function was called by the
     // client.
     // funcName: function name

  static void abortMcl ();
     //
     // Aborts the program.

  void booleanMsgFrags (
        const MclMsgFrag *  trueFrag,
        const MclMsgFrag * falseFrag);
     //
     // Sets booleanText values to the text of the arguments.

  void lineLength (int theValue);

  void minErrOutLevel (const MclLevel & theLevel);
     //
     // Sets minErrOutLevel () to theLevel.

  //---------------------------------------------------------------------------
  // Attribute set-by-Level functions.
  //
  // Each of these functions sets the named message attribute to theValue for
  // each Msg in this Facility associated with theLevel and for which
  // allowedToChange () is TRUE.
  //---------------------------------------------------------------------------

  void maxTimesIssued        (const MclLevel & theLevel, int        theValue);
  void displayExternalNumber (const MclLevel & theLevel, MclBoolean theValue);

private:

  MclFacility             (const MclFacility & );
  MclFacility & operator= (const MclFacility &);
     //
     // Copy ctor and assignment are declared private and not implemented so as
     // to avoid inadvertant copying and assignment.

  //---------------------------------------------------------------------------
  
   static const char * proprietaryStmt_;
      //
      // The proprietary statement for MCL.
      // The purpose of this data member is to cause the MCL object library file
      // (e.g., libmcl.a) to contain MCL's propretary statement as a sequence of
      // text characters.

  int lineLength_;

  std::string prefix_;
  
  MclMsgUnitSet & myMsgUnitSet_;

  MclOutputDisplayer & myOutDisp_;

  std::string trueText_;
  std::string falseText_;
     //
     // Text used to implement the 'b' format.

  const MclLevel * minErrOutLevelPtr_;
     //
     // A Msg will use errorOutput, iff
     // theMsg->myLevel () >= * minErrOutLevelPtr_.

  MclBoolean deletingMsgUnits_;
     //
     // TRUE, iff this Facility is currently deleting its MsgUnits.
};

//-----------------------------------------------------------------------------
// Class MsgUnitItr.
//
// Allows iteration through the set of all Msgs owned by a Facility.
//-----------------------------------------------------------------------------

class DECLSPEC MclMsgUnitItr
   {
   public:

      //-----------------------------------------------------------------------
      // Constructors
      //-----------------------------------------------------------------------

      MclMsgUnitItr (MclFacility & theFacility);

      //-----------------------------------------------------------------------

      ~MclMsgUnitItr ();
         //
         // Destructor

      //-----------------------------------------------------------------------

      MclMsg * nextMsgForChange (const MclLevel & theLevel);
         //
         // Advances this MsgUnitItr to the next Msg with theLevel whose
         // allowedToChange attribute is TRUE. Returns the resulting Msg or
         // NULL, if this MsgUnitItr gets to the end of the MsgUnits for the
         // Facility.

      MclMsg * nextMsg ();
         //
         // Advances this MsgUnitItr to the next Msg and returns it.
         // Returns NULL, if the MsgUnitItr gets to the end of the MsgUnits for
         // the Facility.

      MclMsgFrag * nextMsgFrag ();
         //
         // Advances this MsgUnitItr to the next MsgFrag and returns it.
         // Returns NULL, if the MsgUnitItr gets to the end of the MsgUnits for
         // the Facility.

      MclMsgUnit * nextMsgUnit ();
         //
         // Advances this MsgUnitItr to the next MsgUnit and returns it.
         // Returns NULL, if the MsgUnitItr gets to the end of the MsgUnits for
         // the Facility.

      void reset ();
         //
         // Resets this MsgUnitItr to its initial state.

   private:

      MclMsgUnitItr             (const MclMsgUnitItr &);
      MclMsgUnitItr & operator= (const MclMsgUnitItr &);
         //
         // Copy ctor and assigment are declared private and not implemented
         // so as to prevent inadvertant copying and assignment.

      //-----------------------------------------------------------------------
      // Data.
      //-----------------------------------------------------------------------

      std::multimap <int, MclMsgUnit*>::iterator myItr_;
         //
         // Iterator for the actual MclMsgUnit, the one ordered by
         // externalMsgNumber.

      bool iteratorValid_;
         //
         // Flag to invalidate the iterator so it starts fresh next time it's
         // called

      MclMsgUnitSet & myMsgUnitSet_;
         //
         // We need to rememebr this in order to restart the above iterator
   };

#endif
@


1.11
log
@[multi-thread]
@
text
@d1 14
d233 7
@


1.10
log
@[multi-thread]
@
text
@a87 5
//        Note: It is essential that arguments are of the correct TYPE and
//              ORDER in this list. Beware of accidentally passing octal or
//              other type values in the place of base-10 values. Also make
//              sure not to pass ambiguous values to << operator or you may
//              get compile-time errors. To be sure, maybe do a type cast.
a239 5

  static bool ctorCalled_;
     //
     // True, iff the Facility ctor has been called at least once during the
     // program process.
@


1.9
log
@[multi-thread]
@
text
@a134 11
  inline static bool ctorCalled ()
     {
     return ctorCalled_;
     }

  static void mustBeInitShutDown (const char * funcName);
     //
     // If MCL is not currently initializing or shutting down, aborts the
     // program, indicating a client call to an inappropriate function.
     // nameName: function name

a213 4
  static int nInstances ();
     //
     // Returns # of existing instances of this class in the program process.

a221 8
  static void initialize ();
     //
     // Initializes MCL.

  static void shutDown ();
     //
     // Shuts down MCL: Returns it to an uninitialized state.

a241 8
  static int nInstances_;
     //
     // # of existing instances of this class in the program process.

  static MclBoolean initShutDown_;
     //
     // TRUE, iff MCL is currently initializing or shutting down.

@


1.8
log
@[multi-thread]
@
text
@d135 5
d276 5
@


1.7
log
@[Multi-thread]
@
text
@d135 6
d220 4
d232 8
d260 8
@


1.6
log
@Minor changes.
@
text
@a134 6
  static void mustBeInitShutDown (const char * funcName);
     //
     // If MCL is not currently initializing or shutting down, aborts the
     // program, indicating a client call to an inappropriate function.
     // nameName: function name

a213 4
  static int nInstances ();
     //
     // Returns # of existing instances of this class in the program process.

a221 8
  static void initialize ();
     //
     // Initializes MCL.

  static void shutDown ();
     //
     // Shuts down MCL: Returns it to an uninitialized state.

a241 8
  static int nInstances_;
     //
     // # of existing instances of this class in the program process.

  static MclBoolean initShutDown_;
     //
     // TRUE, iff MCL is currently initializing or shutting down.

@


1.5
log
@Attempt to fix a major memory leak.
@
text
@d13 4
d18 12
d32 1
a32 1
// * The MclFacility serves basically as the public interface for the
a92 33
//
//   *) Other Stuff:
//
//      There are a couple of problems with incorporating MclFacility objects
//      as data members of other classes.
//      - First, there is no explicit default constructor for the MclFacility 
//        class.
//      - The assignment operator = , is overloaded as a private method so
//        it cannot be used.
//
//      Possible solutions include:
//      - writing another class which serves as a wrapper for the MclFacility 
//        class, with the desired functionality and a default constructor.
//      - having the data member be of type MclFacility* , and dynamically
//        allocate memory for and instantiate a facility object.
//      - ??
//
//-----------------------------------------------------------------------------

#include <mcl/src/defs.h>
#include <string>
#include <map>

//-----------------------------------------------------------------------------

class DECLSPEC MclArgList;
class MclMsgUnit;
class MclMsg;
class MclMsgFrag;
class MclLevel;
class MclOutputDisplayer;
class MclMsgUnitSet;

@


1.4
log
@Went to std for cout,
moved to std::multimap for facility message containers
@
text
@d263 1
a263 1
  MclMsgUnitSet & myMsgUnitsSet_;
d293 1
a293 1
// Allows iteration thru the set of all Msgs owned by a Facility.
d355 1
a355 1
      std::multimap<int,MclMsgUnit*>::iterator  myItr_;
d357 4
a360 2
         // Iterator for the actual MclMsgUnit, the one ordered by externalMsgNumber.
      bool                                      iteratorValid_;
d362 4
a365 2
         // Flag to invalidate the iterator so it starts fresh next time it's called
      MclMsgUnitSet&                            myMsgUnitSet_;
@


1.3
log
@Went to std::cout all the way
@
text
@d355 1
a355 1
      std::map<int,MclMsgUnit*>::iterator  myItr_;
@


1.2
log
@modications to change rogueWave tools.h++ to STL
@
text
@d355 1
a355 1
      std::multimap<int,MclMsgUnit*>::iterator  myItr_;
@


1.1
log
@Initial revision
@
text
@d97 2
a108 3
class MclMsgUnitRWGSlistItr;

class RWCString;
d261 1
a261 1
  RWCString & prefix_;
d263 1
a263 1
  MclMsgUnitSet & myMsgUnits_;
d267 2
a268 2
  RWCString &  trueText_;
  RWCString & falseText_;
d355 7
a361 1
      MclMsgUnitRWGSlistItr & myRWItr_;
d363 1
a363 1
         // Iterator for the actual RWGSlist.
@


1.1.1.1
log
@MCL Import
@
text
@@


1.1.1.1.10.1
log
@Removed references to RWCString, RWRegExp, RWSubString
@
text
@a96 1
#include <string>
d109 2
d262 1
a262 1
  std::string & prefix_;
d268 2
a269 2
  std::string &  trueText_;
  std::string & falseText_;
@


1.1.1.1.10.2
log
@Removed references to misc RWVectors, dictionaries, hash, etc
@
text
@a97 1
#include <map>
d263 1
a263 1
  MclMsgUnitSet & myMsgUnitsSet_;
d355 1
a355 3
      std::multimap<int,MclMsgUnit*>::iterator myRWItr_;
      bool                                iteratorValid_;
      MclMsgUnitSet&                      myMsgUnitSet_;
@


1.1.1.1.10.3
log
@Removed references to misc RWGOrdered and related classes and some compiler warnings
@
text
@d109 1
d262 1
a262 1
  std::string prefix_;
d268 2
a269 2
  std::string trueText_;
  std::string falseText_;
d356 3
a358 1
      std::multimap<int,MclMsgUnit*>::iterator  myItr_;
d360 1
a360 7
         // Iterator for the actual MclMsgUnit, the one ordered by externalMsgNumber.
      bool                                      iteratorValid_;
         //
         // Flag to invalidate the iterator so it starts fresh next time it's called
      MclMsgUnitSet&                            myMsgUnitSet_;
         //
         // We need to rememebr this in order to restart the above iterator
@


