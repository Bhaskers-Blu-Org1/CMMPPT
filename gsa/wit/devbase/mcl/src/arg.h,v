head	1.10;
access;
symbols
	sce_5_01_20080919:1.9
	latest_sce_4_20_20060523:1.9.0.4
	sce_4_20_20060523:1.9
	latest_sce4_20_OSL:1.9.0.2
	sce_4_20_OSL:1.9
	sce_4_05_20040511:1.4
	sce_4_00_20040201:1.2
	nextGenBranch:1.2.0.2
	nextGenRoot:1.2
	sce_3_30_20030627:1.2
	EndRw-branch:1.1.1.1.0.12
	Root-of-EndRw:1.1.1.1
	rwToStl:1.1.1.1.0.10
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2011.09.29.18.27.10;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.03.21.15.41;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.03.19.19.06;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.11.17.22.26;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.09.21.36.39;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.24.19.45.12;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.16.19.34.41;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.14.22.52.08;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.25.15.13.16;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.21.35.07;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.21.35.07;	author wit;	state Exp;
branches
	1.1.1.1.10.1;
next	;

1.1.1.1.10.1
date	2002.11.05.22.47.19;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.10.2;

1.1.1.1.10.2
date	2002.11.06.23.25.30;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.10.3;

1.1.1.1.10.3
date	2002.11.25.13.49.58;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Added a proprietary statement to the source code and to the object code.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Message Class Library
//
// (C) Copyright IBM Corp. 1997, 2005  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef mcl_arg_h
#define mcl_arg_h

//-----------------------------------------------------------------------------
// File arg.h
//
// Contains the declaration of the following classes:
//
// Arg
//    BoolArg
//    IntArg
//    FloatArg
//    DoubleArg
//    StringArg
//    MsgFragArg
//    VectorArg
//       BoolVectorArg
//       IntVectorArg
//       FloatVectorArg
//       DoubleVectorArg
//       StringVectorArg
//
// ArgList
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Notes on Implementation:
//
// * All the classes including MclArg and its derived classes, are used
//   internally within MCL. There is no intended public interface for these
//   classes.
//
// * Of the class declarations in this file, MclArgList is the only one that
//   should be used outside of MCL.
//
// * Objects of type MclArgList are required as arguments to the MclFacility
//   parentheses operator which is used when issuing messages. These
//   MclArgList objects are used to hold the data values that are then 
//   printed within the framework of the message being printed.
//
// * The most compact method of creating and passing one of these argument
//   lists to the facility is by a call such as:
//
//    MclArgList() << arg1 << arg2 << etc;
//
//   which invokes the default constructor, and appends to the list using
//   the overloaded << operator.
//
// * it is also possible to index members of the argument list using the 
//   [] operator.
//
// * implementation is left up to the user, but it is important to make
//   sure that the arguments are of the correct (and unambiguous) type,
//   and also that they are in the correct order (determined by the format
//   string associated with the message being issued.
//
//-----------------------------------------------------------------------------

#include <mcl/src/defs.h>

#include <stddef.h>
#include <string>
#include <vector>
//-----------------------------------------------------------------------------

class MclFacility;
class MclMsg;
class MclMsgFrag;
class MclVectorArg;
class MclArgValueType;
class MclArg;

typedef MclArg * MclArgPtr;

//-----------------------------------------------------------------------------

class DECLSPEC MclArg
{
public:
  virtual ~MclArg();

  virtual MclArg * clone() const = 0;

  void format (
        std::string &       formattedArg,
        const std::string & theFormat,
        MclBoolean        reqVector,
        int               argNum,
        const MclMsg *    theMsg)
        const;
     //
     // Assumes this Arg is being formatted as arg # argNum for theMsg.
     // Formats this Arg, according to theFormat and stores the result in
     // formattedArg. This Arg is required to be either a vector or a
     // non-vector depending on reqVector.

  void getValueText (
        std::string &    valueText,
        const MclMsg * theMsg)
        const;
     //
     // Sets valueText to a formatted string representing the value of
     // this Arg for testing purposes. Uses theMsg as a context.

   static void setUpClass ();
      //
      // Does initial set up of this class the first time it is called
      // during the program process.

protected:

  MclArg (const MclArgValueType & theValueType);
     //
     // myValueType_ <-- theValueType.

  MclArg(const MclArg& arg);

  virtual void getTypeName (std::string & theName) const;
     //
     // Sets theName to text indicating the type of the argument that this Arg
     // represents.

  virtual MclBoolean isaVector () const;
     //
     // Returns TRUE, iff this Arg is really a VectorArg.
     // This default implementation does the FALSE case.

  virtual void formatValidArg (
        std::string &       formattedArg,
        const std::string & theFormat,
        const MclMsg *    theMsg)
        const = 0;
     //
     // Formats this Arg, according to theFormat and stores the result in
     // formattedArg. Assumes this Arg is valid for theFormat.
     // Uses theMsg as a context.

  static void formatValidData (
        std::string &         formattedData,
        const std::string &   theFormat,
        int                 theData,
        const MclFacility & theFacility);
     //
     // Formats theData, according to theFormat and stores the result in
     // formattedData. Assumes theFormat is valid for an int.
     // Uses theFacility as a context.

  static void formatValidData (std::string &, const std::string &, float);
  static void formatValidData (std::string &, const std::string &, double);
  static void formatValidData (std::string &, const std::string &, const char *);
  static int getWidth(const std::string &);
     //
     // formatValidData for floats and strings.
     // (No Facility context needed for these.)

  static char & formatFlag (std::string & theFormat);
     //
     // Returns the format flag in theFormat, as an lvalue.

  static char formatFlag (const std::string & theFormat);
     //
     // Returns the format flag in theFormat, as a const value.

private:

  MclArg & operator= (const MclArg &);
  //
  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.

  void vectornessError (
        MclBoolean     reqVector,
        int            argNum,
        const MclMsg * theMsg)
        const;
     //
     // Assumes this Arg is being formatted as arg # argNum for theMsg.
     // Reports an error indicating that is Arg is or is not a vector,
     // contrary to reqVector.

  void flagError (
        char           formatFlag,
        int            argNum,
        const MclMsg * theMsg)
        const;
     //
     // Assumes this Arg is being formatted as arg # argNum for theMsg.
     // Reports an error indicating a mismatch between formatFlag and the type
     // of this Arg.

  const MclArgValueType & myValueType_;
     //
     // The ArgValueType for this Arg.
};

class DECLSPEC MclBoolArg : public MclArg
{
public:
  MclBoolArg(bool);
  ~MclBoolArg(){}
  MclArg* clone()const { return new MclBoolArg(*this); }

private:

  MclBoolArg& operator=(const MclBoolArg&);
  //
  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.

  MclBoolArg(const MclBoolArg&  i);

  virtual void formatValidArg (
     std::string &,
     const std::string &,
     const MclMsg *)
     const;

  const bool myBool_;
};

class DECLSPEC MclIntArg : public MclArg
{
public:
  MclIntArg(int i);
  ~MclIntArg(){}
  MclArg* clone()const { return new MclIntArg(*this); }

private:

  MclIntArg& operator=(const MclIntArg&);
  //
  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.

  MclIntArg(const MclIntArg&  i);

  virtual void formatValidArg (
     std::string &,
     const std::string &,
     const MclMsg *)
     const;

  const int i_;
};

class DECLSPEC MclFloatArg : public MclArg
{
public:
  MclFloatArg(float f);
  ~MclFloatArg(){}
  MclArg* clone()const { return new MclFloatArg(*this); }

private:

  MclFloatArg& operator=(const MclFloatArg&);
  //
  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.

  MclFloatArg(const MclFloatArg& f);

  virtual void formatValidArg (
     std::string &,
     const std::string &,
     const MclMsg *)
     const;

  const float f_;
};

class DECLSPEC MclDoubleArg: public MclArg
   {
   public:

      MclDoubleArg (double theDouble);

      ~MclDoubleArg ();

      MclArg * clone () const;

   private:

      MclDoubleArg & operator= (const MclDoubleArg &);
         //
         // Assignment is declared private and not implemented so as to avoid
         // inadvertant assignment.

      MclDoubleArg (const MclDoubleArg & theDouble);

      virtual void formatValidArg (
         std::string &,
         const std::string &,
         const MclMsg *)
         const;

      const double myDouble_;
   };

class DECLSPEC MclStringArg : public MclArg
{
public:
  MclStringArg(const char * s);
  ~MclStringArg();
  MclArg* clone()const;
private:

  MclStringArg& operator=(const MclStringArg&);
     //
     // Assignment is declared private and not implemented so as to avoid
     // inadvertant assignment.

  MclStringArg(const MclStringArg & s);

  virtual void formatValidArg (
     std::string &,
     const std::string &,
     const MclMsg *)
     const;

  const char * const string_;
};

class DECLSPEC MclMsgFragArg: public MclArg
   {
   public:

      MclMsgFragArg (const MclMsgFrag * theFrag);

      ~MclMsgFragArg ();

      MclArg * clone () const;

   private:

      MclMsgFragArg& operator= (const MclMsgFragArg &);
         //
         // Assignment is declared private and not implemented so as to avoid
         // inadvertant assignment.

      MclMsgFragArg (const MclMsgFragArg & s);

      virtual void formatValidArg (
         std::string &,
         const std::string &,
         const MclMsg *)
         const;

      const MclMsgFrag * const myFrag_;
   };

//----------------------------------------------------------------------------
//
// MclVectorArg and its derived classes
//
//----------------------------------------------------------------------------


class DECLSPEC MclVectorArg : public MclArg
{
public:

  virtual ~MclVectorArg();
  virtual MclArg* clone() const = 0;

protected:

  MclVectorArg (int l, const MclArgValueType & theValueType);
     //
     // length_ <-- l
      // Arg     <-- theValueType

  MclVectorArg(const MclVectorArg& v);

  virtual void formatElem (
        std::string &         formattedElem,
        const std::string &   theFormat,
        int                 theIndex,
        const MclFacility & theFacility)
        const = 0;
     //
     // Formats the element of this VectorArg indexed by theIndex, according
     // to theFormat and stores the result in formattedElem.
     // Uses theFacility as a context.

private:

  MclVectorArg & operator= (const MclVectorArg &);
  //
  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.

  virtual void getTypeName (std::string &) const;

  virtual MclBoolean isaVector () const;

  virtual void formatValidArg (
     std::string &,
     const std::string &,
     const MclMsg *)
     const;

  const size_t length_;
};

class DECLSPEC MclBoolVectorArg: public MclVectorArg
{
public:
  MclBoolVectorArg(const bool*, int);
  MclBoolVectorArg(const MclBoolVectorArg&);
  ~MclBoolVectorArg();
  MclArg * clone() const;

private:

  MclBoolVectorArg & operator= (const MclBoolVectorArg &);
  //
  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.

  virtual void formatElem (
     std::string &,
     const std::string &,
     int,
     const MclFacility &)
     const;

  const bool * const boolVec_;
};

class DECLSPEC MclIntVectorArg: public MclVectorArg
{
public:
  MclIntVectorArg(const int*, int);
  MclIntVectorArg(const MclIntVectorArg&);
  ~MclIntVectorArg();
  MclArg * clone() const;

private:

  MclIntVectorArg & operator= (const MclIntVectorArg &);
  //
  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.

  virtual void formatElem (
     std::string &,
     const std::string &,
     int,
     const MclFacility &)
     const;

  const int * const intVec_;
};

class DECLSPEC MclFloatVectorArg: public MclVectorArg
{
public:
  MclFloatVectorArg(const float*, int); 
  MclFloatVectorArg(const MclFloatVectorArg&);
  ~MclFloatVectorArg();
  MclArg * clone() const;

private:

  MclFloatVectorArg & operator= (const MclFloatVectorArg &);
  //
  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.

  virtual void formatElem (
     std::string &,
     const std::string &,
     int,
     const MclFacility &)
     const;

  const float * const floatVec_;
};

class DECLSPEC MclDoubleVectorArg: public MclVectorArg
   {
   public:

      MclDoubleVectorArg (const double *, int); 

      MclDoubleVectorArg (const MclDoubleVectorArg &);

      ~MclDoubleVectorArg ();

      MclArg * clone () const;

   private:

      MclDoubleVectorArg & operator= (const MclDoubleVectorArg &);
         //
         // Assignment is declared private and not implemented so as to avoid
         // inadvertant assignment.

      virtual void formatElem (
         std::string &,
         const std::string &,
         int,
         const MclFacility &)
         const;

      const double * const doubleVec_;
   };

class DECLSPEC MclStringVectorArg: public MclVectorArg
{
public:
  MclStringVectorArg(const char* const *, int);
  MclStringVectorArg(const MclStringVectorArg&);
  ~MclStringVectorArg();
  MclArg * clone() const;

private:

  MclStringVectorArg & operator= (const MclStringVectorArg &);
  //
  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.

  virtual void formatElem (
     std::string &,
     const std::string &,
     int,
     const MclFacility &)
     const;

  const char * const * const strVec_;
};

//---------------------------------------------------------------------------
// MclMakeVec functions.
//
// Several global functions all called MclMakeVec.
// Each of these functions constructs (on the stack) an instance of a derived
// class of VectorArg (using the arguments to the function) and returns a
// copy of it.
//---------------------------------------------------------------------------

DECLSPEC MclBoolVectorArg   STDCALL MclMakeVec (const bool *,         int); 
DECLSPEC MclIntVectorArg    STDCALL MclMakeVec (const int *,          int); 
DECLSPEC MclFloatVectorArg  STDCALL MclMakeVec (const float *,        int);
DECLSPEC MclStringVectorArg STDCALL MclMakeVec (const char * const *, int);

//---------------------------------------------------------------------------
//
// MclArgList Interface
//
//---------------------------------------------------------------------------

class DECLSPEC MclArgList
{
public:
   MclArgList();
  ~MclArgList();
 
  //Allows access to the i'th element of the list
  // Indexing begins with 1, not 0.
  const MclArg &
    operator[]
      ( size_t i )
        const;

  // Returns the # Args in this ArgList.
  size_t length () const;

  // Methods for appending to list
  
  MclArgList& operator<< (const MclArg& arg);
  MclArgList& operator<< (bool);
  MclArgList& operator<< (int i);
  MclArgList& operator<< (float f);
  MclArgList& operator<< (const char * s);
  MclArgList& operator<< (const MclMsgFrag * theFrag);
  MclArgList& operator<< (const std::string& s);
 
private:

  // Copy ctor is declared private and not implemented so as to avoid
  // inadvertant copying.  
  MclArgList(const MclArgList&);


  // Assignment is declared private and not implemented so as to avoid
  // inadvertant assignment.
  MclArgList & operator= (const MclArgList &);

  // Member Data

  std::vector<MclArgPtr> list_;
};

#endif
@


1.9
log
@[multi-thread]
@
text
@d1 14
@


1.8
log
@[multi-thread]
@
text
@a69 1
class MclArgPtrVector;
d105 1
a105 1
   static void initialize ();
d107 2
a108 5
      // Initializes this class.

   static void shutDown ();
      //
      // Shuts down this class: returns it to an uninitialized.
@


1.7
log
@[multi-thread]
@
text
@d70 2
d106 8
d116 3
a118 5
  MclArg (
     char         validFlag1Val,
     char         validFlag2Val,
     const char * testFormatVal,
     const char * typeNameVal);
d122 1
a122 1
  void getTypeName (std::string & theName) const;
d195 1
a195 5
  const char validFlag1_;
     //
     // The first valid output format flag this Arg.

  const char validFlag2_;
d197 1
a197 10
     // The second valid output format flag this Arg, if any;
     // otherwise blank.

  const char * const testFormat_;
     //
     // The format to be used for testing purposes.

  const char * const typeName_;
     //
     // The name of the underlying type for this Arg.
d364 1
a364 1
protected:
d369 3
a371 6
  MclVectorArg (
        int          l,
        char         validFlag1Val,
        char         validFlag2Val,
        const char * testFormatVal,
        const char * typeNameVal);
d374 1
d396 2
@


1.6
log
@WIT Wish List item [multi-threading].
@
text
@a69 1
class MclArgValueType;
a103 8
   static void initialize ();
      //
      // Initializes this class.

   static void shutDown ();
      //
      // Shuts down this class: returns it to an uninitialized.

d106 5
a110 3
  MclArg (const MclArgValueType & theValueType);
     //
     // myValueType_ <-- theValueType.
d114 1
a114 1
  virtual void getTypeName (std::string & theName) const;
d187 5
a191 1
  const MclArgValueType & myValueType_;
d193 10
a202 1
     // The ArgValueType for this Arg.
d369 1
a369 1
public:
d374 6
a379 3
protected:

  MclVectorArg (int l, const MclArgValueType & theValueType);
a381 1
      // Arg     <-- theValueType
a402 2
  virtual void getTypeName (std::string &) const;

@


1.5
log
@Added code to pass arguments of type "bool" and "const bool *" to a Msg.
@
text
@a69 1
class MclArgPtrVector;
@


1.4
log
@Added double vector arguments.
@
text
@d10 1
d17 1
d200 25
d409 25
d547 1
d577 1
@


1.3
log
@Adding double precision argument capability.
@
text
@d18 1
d431 29
@


1.2
log
@modications to change rogueWave tools.h++ to STL
@
text
@d12 1
d150 1
d246 28
@


1.1
log
@Initial revision
@
text
@d58 2
a59 1

d68 1
d70 1
a70 1
class RWCString;
d82 2
a83 2
        RWCString &       formattedArg,
        const RWCString & theFormat,
d95 1
a95 1
        RWCString &    valueText,
d118 1
a118 1
  virtual void getTypeName (RWCString & theName) const;
d129 2
a130 2
        RWCString &       formattedArg,
        const RWCString & theFormat,
d139 2
a140 2
        RWCString &         formattedData,
        const RWCString &   theFormat,
d148 3
a150 3
  static void formatValidData (RWCString &, const RWCString &, float);
  static void formatValidData (RWCString &, const RWCString &, const char *);
  static int getWidth(const RWCString &);
d155 1
a155 1
  static char & formatFlag (RWCString & theFormat);
d159 1
a159 1
  static char formatFlag (const RWCString & theFormat);
d212 2
a213 2
     RWCString &,
     const RWCString &,
d237 2
a238 2
     RWCString &,
     const RWCString &,
d261 2
a262 2
     RWCString &,
     const RWCString &,
d289 2
a290 2
         RWCString &,
         const RWCString &,
d321 2
a322 2
        RWCString &         formattedElem,
        const RWCString &   theFormat,
d338 1
a338 1
  virtual void getTypeName (RWCString &) const;
d343 2
a344 2
     RWCString &,
     const RWCString &,
d348 1
a348 1
  const int length_;
d367 2
a368 2
     RWCString &,
     const RWCString &,
d392 2
a393 2
     RWCString &,
     const RWCString &,
d417 2
a418 2
     RWCString &,
     const RWCString &,
d468 1
d483 1
a483 1
  MclArgPtrVector & list_;
@


1.1.1.1
log
@MCL Import
@
text
@@


1.1.1.1.10.1
log
@Removed references to RWCString, RWRegExp, RWSubString
@
text
@d58 1
a58 1
#include <string>
d68 2
d80 2
a81 2
        std::string &       formattedArg,
        const std::string & theFormat,
d93 1
a93 1
        std::string &    valueText,
d116 1
a116 1
  virtual void getTypeName (std::string & theName) const;
d127 2
a128 2
        std::string &       formattedArg,
        const std::string & theFormat,
d137 2
a138 2
        std::string &         formattedData,
        const std::string &   theFormat,
d146 3
a148 3
  static void formatValidData (std::string &, const std::string &, float);
  static void formatValidData (std::string &, const std::string &, const char *);
  static int getWidth(const std::string &);
d153 1
a153 1
  static char & formatFlag (std::string & theFormat);
d157 1
a157 1
  static char formatFlag (const std::string & theFormat);
d210 2
a211 2
     std::string &,
     const std::string &,
d235 2
a236 2
     std::string &,
     const std::string &,
d259 2
a260 2
     std::string &,
     const std::string &,
d287 2
a288 2
         std::string &,
         const std::string &,
d319 2
a320 2
        std::string &         formattedElem,
        const std::string &   theFormat,
d336 1
a336 1
  virtual void getTypeName (std::string &) const;
d341 2
a342 2
     std::string &,
     const std::string &,
d365 2
a366 2
     std::string &,
     const std::string &,
d390 2
a391 2
     std::string &,
     const std::string &,
d415 2
a416 2
     std::string &,
     const std::string &,
@


1.1.1.1.10.2
log
@Removed references to misc RWGOrdered and related classes and some compiler warnings
@
text
@a58 1
#include <vector>
a66 3
class MclArg;

typedef MclArg * MclArgPtr;
d344 1
a344 1
  const size_t length_;
d478 1
a478 1
  std::vector<MclArgPtr> list_;
@


1.1.1.1.10.3
log
@Added output operator
@
text
@a467 1
  MclArgList& operator<< (const std::string& s);
@


