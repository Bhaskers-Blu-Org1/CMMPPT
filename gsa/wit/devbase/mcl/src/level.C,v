head	1.7;
access;
symbols
	sce_5_01_20080919:1.6
	latest_sce_4_20_20060523:1.6.0.4
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.6.0.2
	sce_4_20_OSL:1.6
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.3
	EndRw-branch:1.1.1.1.0.12
	Root-of-EndRw:1.1.1.1
	rwToStl:1.1.1.1.0.10
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.09.29.18.27.11;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.03.22.43.33;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.03.19.19.06;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.08.09.21.36.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.09.13.19.36;	author fasano;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.09.13.09.12;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.21.35.08;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.21.35.08;	author wit;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Added a proprietary statement to the source code and to the object code.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Message Class Library
//
// (C) Copyright IBM Corp. 1997, 2005  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//-----------------------------------------------------------------------------
// File level.C
//
// Contains the implementation of the following classes:
//
// Level
//-----------------------------------------------------------------------------

#include <mcl/src/level.h>
#include <mcl/src/facility.h>

#include <iostream>

#include <assert.h>

//-----------------------------------------------------------------------------
// Implementation of class Level.
//-----------------------------------------------------------------------------

const MclLevel * MclLevel::   infoPtr_ = NULL;
const MclLevel * MclLevel::warningPtr_ = NULL;
const MclLevel * MclLevel::  errorPtr_ = NULL;
const MclLevel * MclLevel:: severePtr_ = NULL;
const MclLevel * MclLevel::  fatalPtr_ = NULL;

bool             MclLevel:: setUpDone_ = false;

//-----------------------------------------------------------------------------

void MclLevel::setUpClass ()
   {
   if (setUpDone_)
      return;

      infoPtr_  = new MclLevel ('I', 0);
   warningPtr_  = new MclLevel ('W', 1);
     errorPtr_  = new MclLevel ('E', 2);
    severePtr_  = new MclLevel ('S', 3);
     fatalPtr_  = new MclLevel ('F', 4);

   setUpDone_   = true;
   }

//-----------------------------------------------------------------------------

MclLevel::MclLevel (char levelFlag, int severityVal):
      flag_     (levelFlag),
      severity_ (severityVal)
   {
   }

//-----------------------------------------------------------------------------

void MclLevel::setUpNotDone ()
   {
   std::cerr <<
      "\n\n"
      "MCL CLIENT ERROR:\n\n"
      "   A Level instance access function was called when \n"
      "   the MclFacility constructor had not yet been called.\n";

   MclFacility::abortMcl ();
   }
@


1.6
log
@[multi-thread]
@
text
@d1 14
@


1.5
log
@[multi-thread]
@
text
@d20 5
a24 5
MclLevel * MclLevel::   infoPtr_ = NULL;
MclLevel * MclLevel::warningPtr_ = NULL;
MclLevel * MclLevel::  errorPtr_ = NULL;
MclLevel * MclLevel:: severePtr_ = NULL;
MclLevel * MclLevel::  fatalPtr_ = NULL;
d26 1
a26 14
//-----------------------------------------------------------------------------

void MclLevel::initialize ()
   {
   MclFacility::mustBeInitShutDown ("MclLevel::initialize");

   assert (infoPtr_ == NULL);

      infoPtr_  = new MclLevel ('I', 0, FALSE, TRUE);
   warningPtr_  = new MclLevel ('W', 1, TRUE, TRUE);
     errorPtr_  = new MclLevel ('E', 2, TRUE, TRUE);
    severePtr_  = new MclLevel ('S', 3, TRUE, TRUE);
     fatalPtr_  = new MclLevel ('F', 4, TRUE, TRUE);
   }
d30 1
a30 1
void MclLevel::shutDown ()
d32 2
a33 1
   MclFacility::mustBeInitShutDown ("MclLevel::shutDown");
d35 5
a39 1
   assert (infoPtr_ != NULL);
d41 1
a41 11
   delete    infoPtr_;
   delete warningPtr_;
   delete   errorPtr_;
   delete  severePtr_;
   delete   fatalPtr_;

      infoPtr_  = NULL;
   warningPtr_  = NULL;
     errorPtr_  = NULL;
    severePtr_  = NULL;
     fatalPtr_  = NULL;
d46 1
a46 2
MclLevel::MclLevel (char levelFlag, int severityVal,
                    MclBoolean fGoToStdout, MclBoolean fGoToFile):
d48 1
a48 3
      severity_ (severityVal),
      fGoToStdout_(fGoToStdout),
      fGoToFile_(fGoToFile)
d54 1
a54 1
MclLevel::~MclLevel ()
a55 8
   }

//-----------------------------------------------------------------------------

void MclLevel::missingFacility ()
   {
   assert (MclFacility::nInstances () == 0);

d59 2
a60 2
      "   An MclLevel access function was called "
         "when no MclFacility exists.\n";
@


1.4
log
@WIT Wish List item [multi-threading].
@
text
@d10 5
d20 20
a39 5
const MclLevel MclLevel::   info_ ('I', 0);
const MclLevel MclLevel::warning_ ('W', 1);
const MclLevel MclLevel::  error_ ('E', 2);
const MclLevel MclLevel:: severe_ ('S', 3);
const MclLevel MclLevel::  fatal_ ('F', 4);
d43 23
a65 1
MclLevel::MclLevel (char levelFlag, int severityVal):
d67 3
a69 1
      severity_ (severityVal)
d78 15
@


1.3
log
@Modified to always include iostream and not iostream.h
@
text
@a9 5
#include <mcl/src/facility.h>

#include <iostream>

#include <assert.h>
d15 5
a19 20
MclLevel * MclLevel::   infoPtr_ = NULL;
MclLevel * MclLevel::warningPtr_ = NULL;
MclLevel * MclLevel::  errorPtr_ = NULL;
MclLevel * MclLevel:: severePtr_ = NULL;
MclLevel * MclLevel::  fatalPtr_ = NULL;

//-----------------------------------------------------------------------------

void MclLevel::initialize ()
   {
   MclFacility::mustBeInitShutDown ("MclLevel::initialize");

   assert (infoPtr_ == NULL);

      infoPtr_  = new MclLevel ('I', 0, FALSE, TRUE);
   warningPtr_  = new MclLevel ('W', 1, TRUE, TRUE);
     errorPtr_  = new MclLevel ('E', 2, TRUE, TRUE);
    severePtr_  = new MclLevel ('S', 3, TRUE, TRUE);
     fatalPtr_  = new MclLevel ('F', 4, TRUE, TRUE);
   }
d23 1
a23 23
void MclLevel::shutDown ()
   {
   MclFacility::mustBeInitShutDown ("MclLevel::shutDown");

   assert (infoPtr_ != NULL);

   delete    infoPtr_;
   delete warningPtr_;
   delete   errorPtr_;
   delete  severePtr_;
   delete   fatalPtr_;

      infoPtr_  = NULL;
   warningPtr_  = NULL;
     errorPtr_  = NULL;
    severePtr_  = NULL;
     fatalPtr_  = NULL;
   }

//-----------------------------------------------------------------------------

MclLevel::MclLevel (char levelFlag, int severityVal,
                    MclBoolean fGoToStdout, MclBoolean fGoToFile):
d25 1
a25 3
      severity_ (severityVal),
      fGoToStdout_(fGoToStdout),
      fGoToFile_(fGoToFile)
a33 15

//-----------------------------------------------------------------------------

void MclLevel::missingFacility ()
   {
   assert (MclFacility::nInstances () == 0);

   std::cerr <<
      "\n\n"
      "MCL CLIENT ERROR:\n\n"
      "   An MclLevel access function was called "
         "when no MclFacility exists.\n";

   MclFacility::abortMcl ();
   }
@


1.2
log
@Went to std::cout all the way
@
text
@d12 1
a12 5
#ifdef STD_CPP_LIB
#  include <iostream>
#else
#  include <iostream.h>
#endif
@


1.1
log
@Initial revision
@
text
@d89 1
a89 1
   cerr <<
@


1.1.1.1
log
@MCL Import
@
text
@@
