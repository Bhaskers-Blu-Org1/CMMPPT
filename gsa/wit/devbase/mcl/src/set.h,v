head	1.7;
access;
symbols
	sce_5_01_20080919:1.6
	latest_sce_4_20_20060523:1.6.0.4
	sce_4_20_20060523:1.6
	latest_sce4_20_OSL:1.6.0.2
	sce_4_20_OSL:1.6
	sce_4_05_20040511:1.6
	sce_4_00_20040201:1.4
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.1.1.1.0.12
	Root-of-EndRw:1.1.1.1
	rwToStl:1.1.1.1.0.10
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2011.09.29.18.27.14;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.22.19.21.30;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.21.22.55.55;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.09.16.25.27;	author rwToStl;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.09.13.09.12;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.25.15.13.16;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.21.35.08;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.21.35.08;	author wit;	state Exp;
branches
	1.1.1.1.10.1;
next	;

1.1.1.1.10.1
date	2002.11.06.21.02.53;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Added a proprietary statement to the source code and to the object code.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Message Class Library
//
// (C) Copyright IBM Corp. 1997, 2005  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef mcl_set_h
#define mcl_set_h

//-----------------------------------------------------------------------------
// File set.h
//
// Contains the declaration of the following classes:
//
// MsgUnitSet
//-----------------------------------------------------------------------------

#include <map>

class DECLSPEC MclMsgUnitSet
   {
   friend class MclMsgUnitItr;

   public:
      MclMsgUnitSet ();

     ~MclMsgUnitSet ();

     void insert (MclMsgUnit * theMsgUnit);
        //
        // theMsgUnit into this MsgUnitSet.

     MclMsgUnit * findValue (const char * msgId);
        //
        // Returns the key, or nil if no match was found

   private:

      std::map      <std::string, MclMsgUnit *> myMsgUnitsById_;
      std::multimap <int,         MclMsgUnit *> myMsgUnitsByNum_;
   };


#endif
@


1.6
log
@Minor changes.
@
text
@d1 14
@


1.5
log
@Attempt to fix a major memory leak.
@
text
@d33 2
a34 2
      std::map      <std::string, MclMsgUnit *> msgUnitsById_;
      std::multimap <int,         MclMsgUnit *> msgUnitsByNumber_;
@


1.4
log
@Went to std for cout,
moved to std::multimap for facility message containers
@
text
@d14 8
a21 2
typedef std::map<std::string, MclMsgUnit*>  MsgUnitsById;
typedef std::multimap<int, MclMsgUnit*>     MsgUnitsByNumber;
d23 9
a31 3
class DECLSPEC MclMsgUnitSet
{
friend class MclMsgUnitItr;
d33 3
a35 19
 public:
  MclMsgUnitSet();
  ~MclMsgUnitSet();

  void insert (MclMsgUnit * theMsgUnit);
     //
     // theMsgUnit into this MsgUnitSet.

  MclMsgUnit * findValue (const char * msgId);
     //
     // Returns the key, or nil if no match was found

private:

  MsgUnitsById       msgUnitsById_;
  MsgUnitsByNumber   msgUnitsByNumber_;
     //
     // # buckets in hashDict_.
};
@


1.3
log
@Went to std::cout all the way
@
text
@d15 1
a15 1
typedef std::map<int, MclMsgUnit*>          MsgUnitsByNumber;
@


1.2
log
@modications to change rogueWave tools.h++ to STL
@
text
@a9 1
// HashDictEl
d14 2
a15 2
typedef std::map<std::string, MclMsgUnit*> MsgUnitsById;
typedef std::multimap<int, MclMsgUnit*> MsgUnitsByNumber;
@


1.1
log
@Initial revision
@
text
@d13 1
a13 2
#include <rw/hashdict.h>
#include <rw/gslist.h>
d15 2
a16 4
class MclHashDictEl;
class MclMsgUnit;

declare (RWGSlist, MclMsgUnit)
d36 2
a37 12
   void insertInHashDict (MclMsgUnit * theMsgUnit);
     //
     // theMsgUnit into hashDict_.
     // Asserts that the msgId is not already in hashDict_.

   void insertInList (MclMsgUnit * theMsgUnit);
     //
     // theMsgUnit into msgUnitList_.

  RWHashDictionary hashDict_;

  int hashDictSize_;
a39 2

  RWGSlist(MclMsgUnit) msgUnitList_;
a41 63
//-----------------------------------------------------------------------------
// Class HashDictEl.
//
// An element in MsgUnitSet::hashDict_.
// Corresponds to an associated MsgUnit.
// The purpose of this class is to avoid the need to make class MsgUnit an
// RWCollectable, since doing so would require class MsgUnit to have functions
// that it would be undesirable for a client to call and require that msg.h
// include an RW header file.
//-----------------------------------------------------------------------------

class DECLSPEC MclHashDictEl: public RWCollectable
   {
   RWDECLARE_COLLECTABLE (MclHashDictEl)

   public:

      //-----------------------------------------------------------------------
      // Constructors
      //-----------------------------------------------------------------------

      MclHashDictEl (MclMsgUnit * theMsgUnit);
         //
         // myMsgUnit_ <-- theMsgUnit.

      MclHashDictEl ();
         //
         // Not to be invoked. (Required by RWCollectable.)

      MclHashDictEl (const MclHashDictEl &);
         //
         // Not to be invoked. (Required by RWCollectable.)

      //-----------------------------------------------------------------------

      virtual ~MclHashDictEl ();
         //
         // Destructor

      //-----------------------------------------------------------------------
      // Access functions
      //-----------------------------------------------------------------------

      inline MclMsgUnit * myMsgUnit () const
         {
         return myMsgUnit_;
         }

   private:

      MclHashDictEl & operator= (const MclHashDictEl &);
         //
         // Assigment is declared private and not implemented
         // so as to avoid inadvertant assignment.

      //-----------------------------------------------------------------------
      // Data.
      //-----------------------------------------------------------------------

      MclMsgUnit * const myMsgUnit_;
         //
         // The Msg associated with this HashDictEl.
   };
@


1.1.1.1
log
@MCL Import
@
text
@@


1.1.1.1.10.1
log
@Removed references to misc RWVectors, dictionaries, hash, etc
@
text
@d13 2
a14 1
#include <map>
d16 4
a19 2
typedef std::map<std::string, MclMsgUnit*> MsgUnitsById;
typedef std::multimap<int, MclMsgUnit*> MsgUnitsByNumber;
d39 12
a50 2
  MsgUnitsById       msgUnitsById_;
  MsgUnitsByNumber   msgUnitsByNumber_;
d53 2
d57 63
@

