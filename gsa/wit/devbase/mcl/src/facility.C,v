head	1.15;
access;
symbols
	sce_5_01_20080919:1.14
	latest_sce_4_20_20060523:1.14.0.4
	sce_4_20_20060523:1.14
	latest_sce4_20_OSL:1.14.0.2
	sce_4_20_OSL:1.14
	sce_4_05_20040511:1.6
	sce_4_00_20040201:1.4
	nextGenBranch:1.4.0.2
	nextGenRoot:1.4
	sce_3_30_20030627:1.4
	EndRw-branch:1.1.1.1.0.12
	Root-of-EndRw:1.1.1.1
	rwToStl:1.1.1.1.0.10
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2011.09.29.18.27.11;	author rjw;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.04.17.20.42;	author rjw;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.03.22.43.33;	author rjw;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.03.21.15.42;	author rjw;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.03.19.19.06;	author rjw;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.11.17.34.03;	author rjw;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.11.17.22.26;	author rjw;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.09.21.36.39;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.20.23.59.37;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.22.19.21.30;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.21.22.55.54;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.09.13.19.36;	author fasano;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.09.13.09.12;	author rwToStl;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.25.15.13.16;	author rwToStl;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.21.35.07;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.21.35.07;	author wit;	state Exp;
branches
	1.1.1.1.10.1;
next	;

1.1.1.1.10.1
date	2002.11.05.22.47.19;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.10.2;

1.1.1.1.10.2
date	2002.11.06.21.02.53;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.10.3;

1.1.1.1.10.3
date	2002.11.06.23.25.30;	author rwToStl;	state Exp;
branches;
next	1.1.1.1.10.4;

1.1.1.1.10.4
date	2002.11.25.13.49.36;	author rwToStl;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Added a proprietary statement to the source code and to the object code.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Message Class Library
//
// (C) Copyright IBM Corp. 1997, 2005  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

//-----------------------------------------------------------------------------
// File facility.C
//
// Contains the implementation of the following classes:
//
// Facility
// MsgUnitItr
//-----------------------------------------------------------------------------

#include <mcl/src/facility.h>
#include <mcl/src/arg.h>
#include <mcl/src/level.h>
#include <mcl/src/msg.h>
#include <mcl/src/output.h>
#include <mcl/src/set.h>

#include <assert.h>

#include <stdlib.h>

#include <iostream>

//-----------------------------------------------------------------------------

const char * MclFacility::proprietaryStmt_ =
   "\n"
   "=======================================================\n"
   "Licensed Materials - Property of IBM\n"
   "\n"
   "Message Class Library\n"
   "\n"
   "(C) Copyright IBM Corp. 1997, 2005  All Rights Reserved\n"
   "\n"
   "US Government Users Restricted Rights -\n"
   "Use, duplication or disclosure restricted by\n"
   "GSA ADP Schedule Contract with IBM Corp.\n"
   "=======================================================\n";

//-----------------------------------------------------------------------------

MclFacility::MclFacility (
         const char* prefix,
         MclOutputDisplayer& theOutputDisplayer):
  
      lineLength_        (80),
      myMsgUnitSet_      (* new MclMsgUnitSet),
      myOutDisp_         (theOutputDisplayer),
      trueText_          ("TRUE"),
      falseText_         ("FALSE"),
      minErrOutLevelPtr_ (NULL),
      deletingMsgUnits_  (FALSE)
   {
   MclArg  ::setUpClass ();
   MclLevel::setUpClass ();

   forbidNullArg (prefix, "prefix", "MclFacility::MclFacility");

   prefix_ = prefix;

   if (prefix_.length () != 3)
      {
      printf("\n\nPrefix to a msg should be 3 characters.\n\n");

      abortMcl ();
      }

   // This was performed by the toUpper method of std::string.
   // It was used only here, so the best thing was to code it 
   // with a std::string;
   for( size_t i = 0; i < prefix_.length(); i++ )
	   prefix_[i] = toupper(prefix_[i]);

   minErrOutLevel (MclLevel::warning ());
   }

MclFacility::~MclFacility()
   {
   deletingMsgUnits_ = TRUE;

   delete & myMsgUnitSet_;

   deletingMsgUnits_ = FALSE;
   }

void MclFacility::insert (MclMsgUnit * msgUnit)
   {
   if (! msgUnit->isInserting ())
      calledByClientError ("MclFacility::insert");

   assert (& (msgUnit->myFacility ()) == this);

   myMsgUnitSet_.insert (msgUnit);
   }

void MclFacility::operator() (const char * msgId, const MclArgList& al)
   {
   MclMsg * theMsg = findMsg (msgId);

   if (theMsg == NULL)
      {
      std::cerr <<
         "\n\n"
         "MCL CLIENT ERROR:\n\n"
         "   MclFacility::operator() was called for a message ID\n"
         "   that does not match any message in the facility.\n\n"
         "   Message ID: \"" << msgId << "\"\n";

      abortMcl ();
      }

   theMsg->issue (al);
   }

void MclFacility::operator () (const char * msgId)
   {
   MclArgList emptyArgList;

   (* this) (msgId, emptyArgList);
   }

const char * MclFacility::prefix () const
   {
   return prefix_.c_str();
   }

int MclFacility::lineLength() const
   {
   return lineLength_;
   }

void MclFacility::minErrOutLevel (const MclLevel & theLevel)
   {
   minErrOutLevelPtr_ = & theLevel;
   }

MclBoolean MclFacility::deletingMsgUnits () const
   {
   return deletingMsgUnits_;
   }

const char * MclFacility::booleanText (MclBoolean theValue) const
   {
   return
      theValue?
         trueText_.c_str():
         falseText_.c_str();
   }

MclMsgUnit * MclFacility::findMsgUnit (const char * theId)
   {
   forbidNullArg (theId, "theId", "MclFacility::findMsgUnit");

   return myMsgUnitSet_.findValue (theId);
   }

MclMsg * MclFacility::findMsg (const char * theId)
   {
   MclMsgUnit * theMsgUnit = findMsgUnit (theId);

   return
      (theMsgUnit == NULL)?
         NULL:
         theMsgUnit->asaMsg ();
   }

MclMsg * MclFacility::findMsg (int theExtNumber)
   {
   MclMsgUnitItr theItr (* this);
   MclMsg *      theMsg;

   while (theMsg = theItr.nextMsg ())
      if (theMsg->externalNumber () == theExtNumber)
         return theMsg;

   return NULL;
   }

MclMsgFrag * MclFacility::findMsgFrag (const char * theId)
   {
   MclMsgUnit * theMsgUnit = findMsgUnit (theId);

   return
      (theMsgUnit == NULL)?
         NULL:
         theMsgUnit->asaMsgFrag ();
   }

int MclFacility::maxSeverityOfMsgsIssued()
{
  MclMsgUnitItr theItr (* this);
  MclMsg *      theMsg;
  int max = 0;

   while (theMsg = theItr.nextMsg ())
      if (theMsg->mark())
        {
          int level = (theMsg->myLevel ()).severity ();
          if (level > max)
            {
              max = level;
            }
        }
  return max;
}

void MclFacility::output (const char * finalText)
   {
   myOutDisp_.output (finalText);
   }

void MclFacility::outputError (const char * finalText)
   {
   myOutDisp_.outputError (finalText);
   }

void MclFacility::forbidNullArg (
      const void * thePtr,
      const char * argName,
      const char * funcName)
   {
   if (thePtr != NULL)
      return;

   std::cerr <<
      "\n\n"
      "MCL CLIENT ERROR:\n\n"
      "   A null pointer was passed as a function argument.\n\n"
      "   Function:  " << funcName << "\n"
      "   Argument:  " << argName  << "\n";

   abortMcl ();
   }

void MclFacility::abortMcl ()
   {
   std::cerr <<
      "\n"
      "Program aborted by MCL.\n\n";

   exit (1);
   }

void MclFacility::calledByClientError (const char * funcName)
   {
   std::cerr <<
      "\n\n"
      "MCL CLIENT ERROR:\n\n"
      "   The function " << funcName << " was called by the client.\n";

   MclFacility::abortMcl ();
   }

void MclFacility::booleanMsgFrags (
      const MclMsgFrag *  trueFrag,
      const MclMsgFrag * falseFrag)
   {
   forbidNullArg ( trueFrag,  "trueFrag", "MclFacility::booleanMsgFrags");
   forbidNullArg (falseFrag, "falseFrag", "MclFacility::booleanMsgFrags");

    trueText_ =  trueFrag->text ();
   falseText_ = falseFrag->text ();
   }

void MclFacility::lineLength (int theValue)
   {
   if (theValue < 20)
      {
      std::cerr <<
         "\n\n"
         "MCL CLIENT ERROR:\n\n"
         "   Attempt to set lineLength to a value < 20.\n"
         "   Value:  " << theValue << "\n";

      abortMcl ();
      }

   lineLength_ = theValue;
   }

void MclFacility::maxTimesIssued (const MclLevel & theLevel, int theValue)
   {
   MclMsgUnitItr theItr (* this);
   MclMsg *      theMsg;

   while (theMsg = theItr.nextMsgForChange (theLevel))
      theMsg->maxTimesIssued (theValue);
   }

void MclFacility::displayExternalNumber (
      const MclLevel & theLevel,
      MclBoolean       theValue)
   {
   MclMsgUnitItr theItr (* this);
   MclMsg *      theMsg;

   while (theMsg = theItr.nextMsgForChange (theLevel))
      theMsg->displayExternalNumber (theValue);
   
   }

//---------------------------------------------------------------------------
// Implementation of class MsgUnitItr.
//---------------------------------------------------------------------------

MclMsgUnitItr::MclMsgUnitItr (MclFacility & theFacility) : 

      myItr_         (),
      myMsgUnitSet_  (theFacility.myMsgUnitSet_),
      iteratorValid_ (false)
   {
   }

//---------------------------------------------------------------------------

MclMsgUnitItr::~MclMsgUnitItr ()
   {
   }

//---------------------------------------------------------------------------

MclMsg * MclMsgUnitItr::nextMsgForChange (const MclLevel & theLevel)
   {
   MclMsg * theMsg;

   while (theMsg = nextMsg ())
      if (theMsg->myLevel () == theLevel)
         if (theMsg->allowedToChange ())
            return theMsg;

   return NULL;
   }

//---------------------------------------------------------------------------

MclMsg * MclMsgUnitItr::nextMsg ()
   {
   MclMsgUnit * theMsgUnit;
   MclMsg     * theMsg;

   while (theMsgUnit = nextMsgUnit ())
      {
      theMsg = theMsgUnit->asaMsg ();

      if (theMsg != NULL)
         return theMsg;
      }

   return NULL;
   }

//---------------------------------------------------------------------------

MclMsgFrag * MclMsgUnitItr::nextMsgFrag ()
   {
   MclMsgUnit * theMsgUnit;
   MclMsgFrag * theMsgFrag;

   while (theMsgUnit = nextMsgUnit ())
      {
      theMsgFrag = theMsgUnit->asaMsgFrag ();

      if (theMsgFrag != NULL)
         return theMsgFrag;
      }

   return NULL;
   }

//---------------------------------------------------------------------------

MclMsgUnit * MclMsgUnitItr::nextMsgUnit ()
   {
   if (! iteratorValid_)
      {
      myItr_         = myMsgUnitSet_.myMsgUnitsByNum_.begin ();

      iteratorValid_ = true;
      }
   else
      myItr_ ++;

   return
      (myItr_ != myMsgUnitSet_.myMsgUnitsByNum_.end ())?
         myItr_->second:
         NULL;
   }

//---------------------------------------------------------------------------

void MclMsgUnitItr::reset ()
   {
   iteratorValid_ = false; 
      //
      // this will trigger getting a fresh iterator next time next gets called
   }
@


1.14
log
@[multi-thread]
@
text
@d1 14
d39 16
@


1.13
log
@[multi-thread]
@
text
@a24 4
bool MclFacility::ctorCalled_ = false;

//-----------------------------------------------------------------------------

a57 2

   ctorCalled_ = true;
@


1.12
log
@[multi-thread]
@
text
@d25 1
a25 3
int        MclFacility::nInstances_   = 0;
MclBoolean MclFacility::initShutDown_ = FALSE;
bool       MclFacility::ctorCalled_   = false;
d41 2
a42 6
   if (nInstances_ == 0)
      initialize ();

   ++ nInstances_;

   MclArg::setUpClass ();
a72 5

   -- nInstances_;

   if (nInstances_ == 0)
      shutDown ();
a125 6
void MclFacility::mustBeInitShutDown (const char * funcName)
   {
   if (! initShutDown_)
      calledByClientError (funcName);
   }

a290 23
int MclFacility::nInstances ()
   {
   return nInstances_;
   }

void MclFacility::initialize ()
   {
   initShutDown_ = TRUE;

   MclLevel::initialize ();

   initShutDown_ = FALSE;
   }

void MclFacility::shutDown ()
   {
   initShutDown_ = TRUE;

   MclLevel::shutDown ();

   initShutDown_ = FALSE;
   }

@


1.11
log
@[multi-thread]
@
text
@d27 1
d48 2
d68 2
a317 1
   MclArg  ::initialize ();
a326 1
   MclArg  ::shutDown ();
@


1.10
log
@[Multi-thread]
@
text
@d25 5
d42 5
d74 5
d132 6
d303 25
@


1.9
log
@[multi-thread]
@
text
@a24 5
int        MclFacility::nInstances_   = 0;
MclBoolean MclFacility::initShutDown_ = FALSE;

//-----------------------------------------------------------------------------

a36 5
   if (nInstances_ == 0)
      initialize ();

   ++ nInstances_;

a63 5

   -- nInstances_;

   if (nInstances_ == 0)
      shutDown ();
a116 6
void MclFacility::mustBeInitShutDown (const char * funcName)
   {
   if (! initShutDown_)
      calledByClientError (funcName);
   }

a281 19
int MclFacility::nInstances ()
   {
   return nInstances_;
   }

void MclFacility::initialize ()
   {
   initShutDown_ = TRUE;

   initShutDown_ = FALSE;
   }

void MclFacility::shutDown ()
   {
   initShutDown_ = TRUE;

   initShutDown_ = FALSE;
   }

@


1.8
log
@WIT Wish List item [multi-threading].
@
text
@a311 2
   MclArg::initialize ();

a318 2
   MclArg::shutDown ();

@


1.7
log
@Attempt to fix syntax errors from the gcc 3.4.1 compiler.
@
text
@d312 1
a312 2
   MclLevel::initialize ();
   MclArg  ::initialize ();
d321 1
a321 2
   MclLevel::shutDown ();
   MclArg  ::shutDown ();
@


1.6
log
@Minor changes.
@
text
@d110 1
a110 1
void MclFacility::operator()(const char * msgId)
d112 3
a114 1
   (* this) (msgId, MclArgList ());
@


1.5
log
@Attempt to fix a major memory leak.
@
text
@d400 1
a400 1
      myItr_         = myMsgUnitSet_.msgUnitsByNumber_.begin ();
d408 1
a408 1
      (myItr_ != myMsgUnitSet_.msgUnitsByNumber_.end ())?
@


1.4
log
@Modified to always include iostream and not iostream.h
@
text
@d35 1
a35 1
      myMsgUnitsSet_        (* new MclMsgUnitSet),
d71 1
a71 1
   delete & myMsgUnitsSet_;
d88 1
a88 1
   myMsgUnitsSet_.insert (msgUnit);
d153 1
a153 1
   return myMsgUnitsSet_.findValue (theId);
d331 4
a334 1
   myMsgUnitSet_( theFacility.myMsgUnitsSet_ ), iteratorValid_(false)
d398 3
a400 7
      if( !iteratorValid_ )
         {
            myItr_ = myMsgUnitSet_.msgUnitsByNumber_.begin();
            iteratorValid_ = true;
         }
      else
         myItr_++;
d402 9
a410 1
      return myItr_ != myMsgUnitSet_.msgUnitsByNumber_.end() ? myItr_->second : 0;
d417 3
a419 2
    // this will trigger getting a fresh iterator next time next gets called
     iteratorValid_ = false; 
@


1.3
log
@Went to std::cout all the way
@
text
@d21 1
a21 5
#ifdef STD_CPP_LIB
#  include <iostream>
#else
#  include <iostream.h>
#endif
@


1.2
log
@modications to change rogueWave tools.h++ to STL
@
text
@d101 1
a101 1
      cerr <<
d228 1
a228 1
   cerr <<
d240 1
a240 1
   cerr <<
d249 1
a249 1
   cerr <<
d272 1
a272 1
      cerr <<
@


1.1
log
@Initial revision
@
text
@a16 2
#include <rw/cstring.h>

d39 1
a39 2
      prefix_            (* new RWCString),
      myMsgUnits_        (* new MclMsgUnitSet),
d41 2
a42 2
      trueText_          (* new RWCString ("TRUE" )),
      falseText_         (* new RWCString ("FALSE")),
d62 5
a66 1
   prefix_.toUpper();
d75 1
a75 1
   delete & myMsgUnits_;
a78 4
   delete & falseText_;
   delete & trueText_;
   delete & prefix_;

d92 1
a92 1
   myMsgUnits_.insert (msgUnit);
d121 1
a121 1
   return prefix_;
d149 2
a150 2
         trueText_:
         falseText_;
d157 1
a157 1
   return myMsgUnits_.findValue (theId);
a329 29
//-----------------------------------------------------------------------------
// class MsgUnitRWGSlistItr.
//
// Wrapper (by inheritance) for RWGSlistIterator(MclMsgUnit).
// The purpose of this class is to avoid the need to #include rw/gslist.h in
// facility.h. It allows MsgUnitItr to use a forward reference to this class,
// rather than a forward reference to class RWGSlistIterator(MclMsgUnit),
// which would not be possible, because it is a generic class.
// All implementation is inline.
//-----------------------------------------------------------------------------

class MclMsgUnitRWGSlistItr: public RWGSlistIterator(MclMsgUnit)
   {
   public:

      inline MclMsgUnitRWGSlistItr (RWGSlist(MclMsgUnit) & theList):
            RWGSlistIterator(MclMsgUnit) (theList)
         {
         }

   private:

      MclMsgUnitRWGSlistItr             (const MclMsgUnitRWGSlistItr &);
      MclMsgUnitRWGSlistItr & operator= (const MclMsgUnitRWGSlistItr &);
         //
         // Copy ctor and assignment are declared private and not implemented
         // so as to prevent inadvertant copying and assignment.
   };

d334 2
a335 3
MclMsgUnitItr::MclMsgUnitItr (MclFacility & theFacility):
      myRWItr_ (
         * new MclMsgUnitRWGSlistItr (theFacility.myMsgUnits_.msgUnitList_))
a342 1
   delete & myRWItr_;
d399 9
a407 1
   return myRWItr_ ();
d414 2
a415 1
   myRWItr_.reset ();
@


1.1.1.1
log
@MCL Import
@
text
@@


1.1.1.1.10.1
log
@Removed references to RWCString, RWRegExp, RWSubString
@
text
@d17 2
d41 1
a41 1
      prefix_            (* new std::string),
d44 2
a45 2
      trueText_          (* new std::string ("TRUE" )),
      falseText_         (* new std::string ("FALSE")),
d65 1
a65 5
   // This was performed by the toUpper method of RWCString.
   // It was used only here, so the best thing was to code it 
   // with a std::string;
   for( size_t i = 0; i < prefix_.length(); i++ )
	   prefix_[i] = toupper(prefix_[i]);
d124 1
a124 1
   return prefix_.c_str();
d152 2
a153 2
         trueText_.c_str():
         falseText_.c_str();
@


1.1.1.1.10.2
log
@Removed references to misc RWVectors, dictionaries, hash, etc
@
text
@d40 1
a40 1
      myMsgUnitsSet_        (* new MclMsgUnitSet),
d76 1
a76 1
   delete & myMsgUnitsSet_;
d97 1
a97 1
   myMsgUnitsSet_.insert (msgUnit);
d162 1
a162 1
   return myMsgUnitsSet_.findValue (theId);
d346 1
a346 1
/*   class MclMsgUnitRWGSlistItr: public std::map<std::string,MclMsgUnit*>::iterator
d363 1
a363 1
*/
d368 3
a370 2
MclMsgUnitItr::MclMsgUnitItr (MclFacility & theFacility) : 
   myMsgUnitSet_( theFacility.myMsgUnitsSet_ ), iteratorValid_(false)
d378 1
d435 1
a435 9
      if( !iteratorValid_ )
         {
            myRWItr_ = myMsgUnitSet_.msgUnitsByNumber_.begin();
            iteratorValid_ = true;
         }
      else
         myRWItr_++;

      return myRWItr_ != myMsgUnitSet_.msgUnitsByNumber_.end() ? myRWItr_->second : 0;
d442 1
a442 2
    // this will trigger getting a fresh iterator next time next gets called
     iteratorValid_ = false; 
@


1.1.1.1.10.3
log
@Removed references to misc RWGOrdered and related classes and some compiler warnings
@
text
@d39 1
d42 2
a43 2
      trueText_          ("TRUE"),
      falseText_         ("FALSE"),
d80 4
d335 29
d435 1
a435 1
            myItr_ = myMsgUnitSet_.msgUnitsByNumber_.begin();
d439 1
a439 1
         myItr_++;
d441 1
a441 1
      return myItr_ != myMsgUnitSet_.msgUnitsByNumber_.end() ? myItr_->second : 0;
@


1.1.1.1.10.4
log
@updated comment
@
text
@d62 1
a62 1
   // This was performed by the toUpper method of std::string.
@


