head	1.8;
access;
symbols
	sce_5_01_20080919:1.7
	latest_sce_4_20_20060523:1.7.0.4
	sce_4_20_20060523:1.7
	latest_sce4_20_OSL:1.7.0.2
	sce_4_20_OSL:1.7
	sce_4_05_20040511:1.3
	sce_4_00_20040201:1.3
	nextGenBranch:1.3.0.2
	nextGenRoot:1.3
	sce_3_30_20030627:1.1.1.1
	EndRw-branch:1.1.1.1.0.12
	Root-of-EndRw:1.1.1.1
	rwToStl:1.1.1.1.0.10
	latest_sce_3_10_20010924:1.1.1.1.0.8
	sce_3_10_20010924:1.1.1.1
	latest_sce_3_00_20010601:1.1.1.1.0.6
	sce_3_00_20010601:1.1.1.1
	latest_sce_2_31_20010308:1.1.1.1.0.4
	sce_2_31_20010308:1.1.1.1
	latest_sce_2_31_20001003:1.1.1.1.0.2
	sce_2_31_20001003:1.1.1.1
	start:1.1.1.1
	IBM:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2011.09.29.18.27.12;	author rjw;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.03.22.43.33;	author rjw;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.03.19.19.06;	author rjw;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.24.17.26.07;	author rjw;	state Exp;
branches;
next	1.4;

1.4
date	2005.08.09.21.36.40;	author rjw;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.18.18.57.28;	author rjw;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.17.18.28.27;	author rjw;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.21.35.08;	author wit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.23.21.35.08;	author wit;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Added a proprietary statement to the source code and to the object code.
@
text
@//==============================================================================
// IBM Confidential
//
// OCO Source Materials
//
// Message Class Library
//
// (C) Copyright IBM Corp. 1997, 2005  All Rights Reserved
//
// The Source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U. S.
// Copyright office.
//==============================================================================

#ifndef mcl_level_h
#define mcl_level_h

//-----------------------------------------------------------------------------
// File level.h
//
// Contains the declaration of the following classes:
//
// Level
//-----------------------------------------------------------------------------

#include <mcl/src/defs.h>

#include <stddef.h>

//-----------------------------------------------------------------------------
// Forward declarations.
//-----------------------------------------------------------------------------

class MclFacility;

//-----------------------------------------------------------------------------
// class Level.
//
// The severity level of a Msg.
// The ctor for this class is declared private: The only instances of this
// class that are allowed to exist are created by the Level class itself and
// accessable thru the "Level instance access functions".
//-----------------------------------------------------------------------------

class DECLSPEC MclLevel
   {
   public:

      //-----------------------------------------------------------------------
      // Access functions
      //-----------------------------------------------------------------------

      inline char flag () const
         {
         return flag_;
         }

      inline int severity () const
         {
         return severity_;
         }

      //-----------------------------------------------------------------------
      // Level instance access functions.
      // Each of these functions returns a reference to one of the Level
      // instances defined by this class.
      //-----------------------------------------------------------------------

      inline static const MclLevel & info ()
         {
         reqSetUpDone ();

         return * infoPtr_;
         }

      inline static const MclLevel & warning ()
         {
         reqSetUpDone ();

         return * warningPtr_;
         }

      inline static const MclLevel & error ()
         {
         reqSetUpDone ();

         return * errorPtr_;
         }

      inline static const MclLevel & severe ()
         {
         reqSetUpDone ();

         return * severePtr_;
         }

      inline static const MclLevel & fatal ()
         {
         reqSetUpDone ();

         return * fatalPtr_;
         }

      //-----------------------------------------------------------------------
      // Comparison operators.
      //-----------------------------------------------------------------------

      inline MclBoolean operator== (const MclLevel & theLevel) const
         {
         return (severity_ == theLevel.severity_);
         }

      inline MclBoolean operator!= (const MclLevel & theLevel) const
         {
         return (severity_ != theLevel.severity_);
         }

      inline MclBoolean operator<= (const MclLevel & theLevel) const
         {
         return (severity_ <= theLevel.severity_);
         }

      inline MclBoolean operator>= (const MclLevel & theLevel) const
         {
         return (severity_ >= theLevel.severity_);
         }

      inline MclBoolean operator< (const MclLevel & theLevel) const
         {
         return (severity_ < theLevel.severity_);
         }

      inline MclBoolean operator> (const MclLevel & theLevel) const
         {
         return (severity_ > theLevel.severity_);
         }
     
      //-----------------------------------------------------------------------

      static void setUpClass ();
         //
         // Does initial set up of this class the first time it is called
         // during the program process.

   private:

      MclLevel             (const MclLevel &);
      MclLevel & operator= (const MclLevel &);
         //
         // Copy ctor and assignment are declared private and not implemented
         // so as to prevent inadvertant copying and assignment.

      MclLevel (char levelFlag, int severityVal);
         //
         // Constructor.
         // flag_     <-- levelFlag
         // severity_ <-- severityVal

      ~MclLevel ();
         //
         // Destructor
         // It is not implemented, because the instances of this class are never
         // destructed.

      inline static void reqSetUpDone ()
         {
         if (! setUpDone_)
            setUpNotDone ();
         }

      static void setUpNotDone ();
         //
         // Issues a client error indicating that a Level instance access
         // function was called when the Facility has not yet been called.

      //-----------------------------------------------------------------------
      // Data.
      //-----------------------------------------------------------------------

      const char flag_;
         //
         // This is the severity flag for that level

      const int severity_;
         //
         // Severity number.

      //-----------------------------------------------------------------------
      // Pointers to the only instances of class Level that are allowed to
      // exist.
      // They are constructed by the first call to setUpClass and never
      // destructed.
      //-----------------------------------------------------------------------

      static const MclLevel *    infoPtr_;
      static const MclLevel * warningPtr_;
      static const MclLevel *   errorPtr_;
      static const MclLevel *  severePtr_;
      static const MclLevel *   fatalPtr_;

      //-----------------------------------------------------------------------

      static bool setUpDone_;
         //
         // True, iff setUpClass () has been called at least once during the
         // program process.
   };

#endif
@


1.7
log
@[multi-thread]
@
text
@d1 14
@


1.6
log
@[multi-thread]
@
text
@d57 3
a59 1
         return derefNonNull (infoPtr_);
d64 3
a66 1
         return derefNonNull (warningPtr_);
d71 3
a73 1
         return derefNonNull (errorPtr_);
d78 3
a80 1
         return derefNonNull (severePtr_);
d85 3
a87 1
         return derefNonNull (fatalPtr_);
d126 1
a126 5
      static void initialize ();
         //
         // Initializes this class.

      static void shutDown ();
d128 2
a129 1
         // Shuts down this class: returns it to an uninitialized state.
d139 1
a139 1
      MclLevel (char levelFlag, int severityVal, MclBoolean, MclBoolean);
d148 2
d151 1
a151 2
      inline static MclLevel & derefNonNull (
                                             MclLevel * theLevelPtr)
d153 2
a154 4
         if (theLevelPtr == NULL)
            missingFacility ();

         return * theLevelPtr;
d157 1
a157 1
      static void missingFacility ();
d159 2
a160 2
         // Issues a client error indicating a Level instance access function
         // was called when no Facility exists.
a173 3
      MclBoolean fGoToFile_;
      MclBoolean fGoToStdout_;

d177 10
d189 4
a192 5
      static MclLevel *    infoPtr_;
      static MclLevel * warningPtr_;
      static MclLevel *   errorPtr_;
      static MclLevel *  severePtr_;
      static MclLevel *   fatalPtr_;
@


1.5
log
@Attempt to fix 2 syntax errors found by the MS compiler.
@
text
@a34 10
      MclLevel (char levelFlag, int severityVal);
         //
         // Constructor.
         // flag_     <-- levelFlag
         // severity_ <-- severityVal

      ~MclLevel ();
         //
         // Destructor

d57 1
a57 1
         return info_;
d62 1
a62 1
         return warning_; 
d67 1
a67 1
         return error_; 
d72 1
a72 1
         return severe_; 
d77 1
a77 1
         return fatal_; 
d116 8
d132 24
d168 3
d172 2
a173 1
      // The only instances of class Level that are allowed to exist.
d176 5
a180 5
      static const MclLevel    info_;
      static const MclLevel warning_;
      static const MclLevel   error_;
      static const MclLevel  severe_;
      static const MclLevel   fatal_;
@


1.4
log
@WIT Wish List item [multi-threading].
@
text
@d35 10
a133 10
      MclLevel (char levelFlag, int severityVal);
         //
         // Constructor.
         // flag_     <-- levelFlag
         // severity_ <-- severityVal

      ~MclLevel ();
         //
         // Destructor

@


1.3
log
@Removed previous solution to the dtor privacy warning.
@
text
@d57 1
a57 1
         return derefNonNull (infoPtr_);
d62 1
a62 1
         return derefNonNull (warningPtr_);
d67 1
a67 1
         return derefNonNull (errorPtr_);
d72 1
a72 1
         return derefNonNull (severePtr_);
d77 1
a77 1
         return derefNonNull (fatalPtr_);
a115 8
      static void initialize ();
         //
         // Initializes this class.

      static void shutDown ();
         //
         // Shuts down this class: returns it to an uninitialized state.

d124 1
a124 1
      MclLevel (char levelFlag, int severityVal, MclBoolean, MclBoolean);
a133 14
      inline static MclLevel & derefNonNull (
                                             MclLevel * theLevelPtr)
         {
         if (theLevelPtr == NULL)
            missingFacility ();

         return * theLevelPtr;
         }

      static void missingFacility ();
         //
         // Issues a client error indicating a Level instance access function
         // was called when no Facility exists.

a145 3
      MclBoolean fGoToFile_;
      MclBoolean fGoToStdout_;

d147 1
a147 2
      // Pointers to the only instances of class Level that are allowed to
      // exist.
d150 5
a154 5
      static MclLevel *    infoPtr_;
      static MclLevel * warningPtr_;
      static MclLevel *   errorPtr_;
      static MclLevel *  severePtr_;
      static MclLevel *   fatalPtr_;
@


1.2
log
@Removed a compiler option that turned off a category of warnings and eliminated
the warnings.
@
text
@a180 10

      //-----------------------------------------------------------------------
      // Friends.
      //-----------------------------------------------------------------------

      friend class MclNoClass;
         //
         // A non-existent class.
         // Declaring this friend prevents a warning message from the GNU C++
         // compiler.
@


1.1
log
@Initial revision
@
text
@d168 3
a170 2
     MclBoolean fGoToFile_;
     MclBoolean fGoToStdout_;
d181 10
@


1.1.1.1
log
@MCL Import
@
text
@@
