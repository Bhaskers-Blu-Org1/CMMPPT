--- dspcg.f	Mon Apr 22 18:22:03 2002
+++ dspcg_p.f	Mon Apr 22 18:22:17 2002
@@ -2,7 +2,41 @@
      +                 rtol,s,nv,itermax,iters,info,
      +                 b,bdiag,bcol_ptr,brow_ind,
      +                 l,ldiag,lcol_ptr,lrow_ind,
-     +                 indfree,gfree,w,wa,iwa)
+     +                 indfree,gfree,w,wa,iwa,
+     1     IPITER, IPN, NIND, M, NORIG, XORIG, CSCALE, IVAR,
+     1     NFIX, IFIX, SOFLAG, C,
+     1     NLB, ILB, NUB, IUB, S_L, S_U,
+     1     KCONSTR, LRS, RS, LIS, IS, LRW, RW, LIW, IW, IERR)
+      IMPLICIT NONE
+      integer IPITER
+      integer IPN
+      integer NIND
+      integer M
+      integer NORIG
+      double precision XORIG(NORIG)
+      double precision CSCALE(*)
+      integer IVAR(IPN)
+      integer NFIX
+      integer IFIX(NFIX)
+      logical SOFLAG
+      double precision C(M)
+      integer NLB
+      integer ILB(NLB)
+      integer NUB
+      integer IUB(NUB)
+      double precision S_L(NLB)
+      double precision S_U(NUB)
+      integer KCONSTR(6)
+      integer LRS
+      double precision RS(LRS)
+      integer LIS
+      integer IS(LIS)
+      integer LRW
+      double precision RW(LRW)
+      integer LIW
+      integer IW(LIW)
+      integer IERR
+
       integer n, nv, itermax, iters, info
       integer acol_ptr(n+1), arow_ind(*)
       integer lcol_ptr(n+1), lrow_ind(*)
@@ -228,9 +262,23 @@
       external dmid, dprsrch, dtrpcg, dssyax, dstrsol
       external daxpy, dnrm2
 
+      include 'IPOPT.INC'
+CTRY
+      integer infotr_store
+      common /wnrm_max/ infotr_store
+
 c     Compute A*(x[1] - x[0]) and store in w. 
-   
-      call dssyax(n,a,adiag,acol_ptr,arow_ind,s,w)
+
+      
+      if( QTRONHESS.eq.0 ) then
+         call RES_HV(IPITER, IPN, NIND, M, NORIG, XORIG, CSCALE,
+     1        IVAR, NFIX, IFIX, SOFLAG, C, s, w,
+     1        NLB, ILB, NUB, IUB, S_L, S_U,
+     1        KCONSTR, LRS, RS, LIS, IS, LRW, RW, LIW, IW, IERR)
+         if( IERR.ne.0 ) return
+      else
+         call dssyax(n,a,adiag,acol_ptr,arow_ind,s,w)
+      endif
 
 c     Compute the Cauchy point.
 
@@ -268,30 +316,34 @@
             return
          end if
 
+         if( QTRONHESS.ne.0 ) then
 c        Obtain the submatrix of A for the free variables.
 c        Recall that iwa allows the detection of free variables.
         
-         bcol_ptr(1) = 1 
-         nnz = 0
-         do j = 1, nfree
-            jfree = indfree(j)
-            bdiag(j) = adiag(jfree)
-            do ip = acol_ptr(jfree), acol_ptr(jfree+1)-1
-               if (iwa(arow_ind(ip)) .gt. 0) then
-                  nnz = nnz + 1
-                  brow_ind(nnz) = iwa(arow_ind(ip))
-                  b(nnz) = a(ip)
-               end if
+            bcol_ptr(1) = 1 
+            nnz = 0
+            do j = 1, nfree
+               jfree = indfree(j)
+               bdiag(j) = adiag(jfree)
+               do ip = acol_ptr(jfree), acol_ptr(jfree+1)-1
+                  if (iwa(arow_ind(ip)) .gt. 0) then
+                     nnz = nnz + 1
+                     brow_ind(nnz) = iwa(arow_ind(ip))
+                     b(nnz) = a(ip)
+                  end if
+               end do
+               bcol_ptr(j+1) = nnz + 1
             end do
-            bcol_ptr(j+1) = nnz + 1
-         end do
-        
+         endif
+
+         if( QTRONHESS.eq.2 ) then
 c        Compute the incomplete Cholesky factorization.
 
-         alpha = zero
-         call dicfs(nfree,nnz,b,bdiag,bcol_ptr,brow_ind,
-     +              l,ldiag,lcol_ptr,lrow_ind,nv,alpha,
-     +              iwa,wa(1),wa(n+1)) 
+            alpha = zero
+            call dicfs(nfree,nnz,b,bdiag,bcol_ptr,brow_ind,
+     +           l,ldiag,lcol_ptr,lrow_ind,nv,alpha,
+     +           iwa,wa(1),wa(n+1))
+         endif
 
 c        Compute the gradient grad q(x[k]) = g + A*(x[k] - x[0]),
 c        of q at x[k] for the free variables. 
@@ -313,10 +365,20 @@
          call dtrpcg(nfree,b,bdiag,bcol_ptr,brow_ind,gfree,delta,
      +               l,ldiag,lcol_ptr,lrow_ind,
      +               tol,stol,itermax,w,itertr,infotr,
-     +               wa(1),wa(n+1),wa(2*n+1),wa(3*n+1),wa(4*n+1))
+     +               wa(1),wa(n+1),wa(2*n+1),wa(3*n+1),wa(4*n+1),
+     1        indfree,
+     1        IPITER, IPN, NIND, M, NORIG, XORIG, CSCALE, IVAR,
+     1        NFIX, IFIX, SOFLAG, C,
+     1        NLB, ILB, NUB, IUB, S_L, S_U,
+     1        KCONSTR, LRS, RS, LIS, IS, LRW, RW, LIW, IW, IERR)
+         if( IERR.ne.0 ) return
+CTRY
+         infotr_store = infotr
 
          iters = iters + itertr 
-         call dstrsol(nfree,l,ldiag,lcol_ptr,lrow_ind,w,'T')
+         if( QTRONHESS.eq.2 ) then
+            call dstrsol(nfree,l,ldiag,lcol_ptr,lrow_ind,w,'T')
+         endif
 
 c        Use a projected search to obtain the next iterate.
 c        The projected search algorithm stores s[k] in w.
@@ -329,7 +391,13 @@
         
          call dprsrch(nfree,wa(1),wa(n+1),wa(2*n+1),
      +                b,bdiag,bcol_ptr,brow_ind,gfree,w,
-     +                wa(3*n+1),wa(4*n+1))
+     +                wa(3*n+1),wa(4*n+1),
+     1        indfree,
+     1        IPITER, IPN, NIND, M, NORIG, XORIG, CSCALE, IVAR,
+     1        NFIX, IFIX, SOFLAG, C,
+     1        NLB, ILB, NUB, IUB, S_L, S_U,
+     1        KCONSTR, LRS, RS, LIS, IS, LRW, RW, LIW, IW, IERR)
+         if( IERR.ne.0 ) return
 
 c        Update the minimizer and the step.
 c        Note that s now contains x[k+1] - x[0].
@@ -341,7 +409,15 @@
 
 c        Compute A*(x[k+1] - x[0]) and store in w.
 
-         call dssyax(n,a,adiag,acol_ptr,arow_ind,s,w)
+         if( QTRONHESS.eq.0 ) then
+            call RES_HV(IPITER, IPN, NIND, M, NORIG, XORIG, CSCALE,
+     1           IVAR, NFIX, IFIX, SOFLAG, C, s, w,
+     1           NLB, ILB, NUB, IUB, S_L, S_U,
+     1           KCONSTR, LRS, RS, LIS, IS, LRW, RW, LIW, IW, IERR)
+            if( IERR.ne.0 ) return
+         else
+            call dssyax(n,a,adiag,acol_ptr,arow_ind,s,w)
+         endif
 
 c        Compute the gradient grad q(x[k+1]) = g + A*(x[k+1] - x[0])
 c        of q at x[k+1] for the free variables.
@@ -372,5 +448,3 @@
       return
 
       end
-
-      
