--- dtrpcg.f	Mon Apr 22 18:28:47 2002
+++ dtrpcg_p.f	Mon Apr 22 18:28:33 2002
@@ -1,8 +1,46 @@
       subroutine dtrpcg(n,a,adiag,acol_ptr,arow_ind,g,delta,
      +                  l,ldiag,lcol_ptr,lrow_ind,
      +                  tol,stol,itermax,w,iters,info,
-     +                  p,q,r,t,z)
-      integer n, itermax, iters, info
+     +                  p,q,r,t,z,
+     1     indfree,
+     1     IPITER, IPN, NIND, M, NORIG, XORIG, CSCALE, IVAR,
+     1     NFIX, IFIX, SOFLAG, C,
+     1     NLB, ILB, NUB, IUB, S_L, S_U,
+     1     KCONSTR, LRS, RS, LIS, IS, LRW, RW, LIW, IW, IERR)
+      IMPLICIT NONE
+      integer n
+      integer indfree(n)
+      integer IPITER
+      integer IPN
+      integer NIND
+      integer M
+      integer NORIG
+      double precision XORIG(NORIG)
+      double precision CSCALE(*)
+      integer IVAR(IPN)
+      integer NFIX
+      integer IFIX(NFIX)
+      logical SOFLAG
+      double precision C(M)
+      integer NLB
+      integer ILB(NLB)
+      integer NUB
+      integer IUB(NUB)
+      double precision S_L(NLB)
+      double precision S_U(NUB)
+      integer KCONSTR(6)
+      integer LRS
+      double precision RS(LRS)
+      integer LIS
+      integer IS(LIS)
+      integer LRW
+      double precision RW(LRW)
+      integer LIW
+      integer IW(LIW)
+      integer IERR
+
+      integer itermax, iters, info
+C      integer n, itermax, iters, info
       integer acol_ptr(n+1), arow_ind(*), lcol_ptr(n+1), lrow_ind(*)
       double precision delta
       double precision stol, tol
@@ -190,24 +228,49 @@
       double precision alpha, beta, ptq, rho, rtr, sigma
       double precision rnorm, rnorm0, tnorm
 
+CAWAE
+      integer p_rwend, p_iwend
+      integer p_vin, p_vout
+
+      include 'IPOPT.INC'
+
       double precision ddot
       external dtrqsol, dstrsol, dssyax
       external daxpy, dcopy, ddot
 
+      p_rwend = 0
+      p_iwend = 0
+      if( QTRONHESS.eq.0 ) then
+         p_vin   = p_rwend
+         p_vout  = p_vin + IPN
+         p_rwend = p_vout + IPN
+         if( p_rwend.gt.LRW ) then
+            IERR = 98
+            return
+         endif
+      else
+         p_vin   = 0
+         p_vout  = 0
+      endif
+
 c     Initialize the iterate w and the residual r.
 
-      do i = 1, n
-         w(i) = zero
-      end do
+CORIG
+C      do i = 1, n
+C         w(i) = zero
+C      end do
+      call DCOPY(n,zero,0,w,1)
 
 c     Initialize the residual t of grad q to -g.
 c     Initialize the residual r of grad Q by solving L*r = -g.
 c     Note that t = L*r.
 
       call dcopy(n,g,1,t,1)
-      call dscal(n,-one,t,1)         
+      call dscal(n,-one,t,1)
       call dcopy(n,t,1,r,1)
-      call dstrsol(n,l,ldiag,lcol_ptr,lrow_ind,r,'N')
+      if( QTRONHESS.eq.2 ) then
+         call dstrsol(n,l,ldiag,lcol_ptr,lrow_ind,r,'N')
+      endif
 
 c     Initialize the direction p.
 
@@ -231,14 +294,35 @@
 c        Compute z by solving L'*z = p.
 
          call dcopy(n,p,1,z,1)
-         call dstrsol(n,l,ldiag,lcol_ptr,lrow_ind,z,'T')
+         if( QTRONHESS.eq.2 ) then
+            call dstrsol(n,l,ldiag,lcol_ptr,lrow_ind,z,'T')
+         endif
 
 c        Compute q by solving L*q = A*z and save L*q for
 c        use in updating the residual t.
 
-         call dssyax(n,a,adiag,acol_ptr,arow_ind,z,q)
+         if( QTRONHESS.ne.0 ) then
+            call dssyax(n,a,adiag,acol_ptr,arow_ind,z,q)
+         else
+            call DCOPY(IPN, zero, 0, RW(p_vin+1), 1)
+            do i = 1, n
+               RW(p_vin+indfree(i)) = z(i)
+            enddo
+            call RES_HV(IPITER, IPN, NIND, M, NORIG, XORIG, CSCALE,
+     1           IVAR, NFIX, IFIX, SOFLAG, C, RW(p_vin+1), RW(p_vout+1),
+     1           NLB, ILB, NUB, IUB, S_L, S_U,
+     1           KCONSTR, LRS, RS, LIS, IS, LRW-p_rwend, RW(p_rwend+1),
+     1           LIW-p_iwend, IW(p_iwend+1), IERR)
+            if( IERR.ne.0 ) return
+            do i = 1, n
+               q(i) = RW(p_vout+indfree(i))
+            enddo
+         endif
+
          call dcopy(n,q,1,z,1)
-         call dstrsol(n,l,ldiag,lcol_ptr,lrow_ind,q,'N')
+         if( QTRONHESS.eq.2 ) then
+            call dstrsol(n,l,ldiag,lcol_ptr,lrow_ind,q,'N')
+         endif
 
 c        Compute alpha and determine sigma such that the trust region 
 c        constraint || w + sigma*p || = delta is satisfied.
@@ -298,7 +382,9 @@
 
       end do
 
-      iters = itmax
+CTELLMORE
+C      iters = itmax
+      iters = itermax
       info = 5
 
       return
