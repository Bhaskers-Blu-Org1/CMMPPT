#!/bin/csh

# Poor man's distributed make
# This script compiles a bunch of files at the same time on different computers.

# $Id: distCompile.sh,v 1.2 2000/02/23 18:43:58 fasano Exp $

# Syntax:
#   distmake listfile make_option_1 make_option_2 ...
# where
#   listfile is the name of a file containing the names of the files to be made
#     separated by whitespace (usually a bunch of .o files)
#   make_option_* are the options to be passed to make

set noglob

# Warning: you have to know how variable expansion is influenced by the
# various quote characters in csh to understand this script.  You also
# have to know about list variables in csh.

########################################################################
########################################################################
##
##   THE FOLLOWING LINE IS THE ONLY ONE YOU HAVE TO CHANGE TO ADD
##   OR REMOVE SERVERS, as long as you don't want to compile on more
##   than 5 machines and less than 2 machines at a time.
##
########################################################################
########################################################################

if (${?DS_SERVER_POOL}) then
    set serverPool = ( $DS_SERVER_POOL )
  else
    set serverPool = (woodenshoe wit implode )
endif

# cs is short for Compilation Server
# lcs: local cs
# rcs: remote cs's
set lcs = `hostname | sed 's/.watson.ibm.com//'`

# Figure out which machines are the remote ones
# (If the local machine is not in the server pool compiles will be done
# on it anyway)
set rcs = ( `echo $serverPool | sed "s/$lcs//" ` )

set allHosts = ($lcs $rcs)
if ($#allHosts < 3) then
  echo "Too few compilation servers"
  exit 15
endif
  
set platform = power
set files = (`cat $1`)

set cleanMakeflags = (`echo $MAKEFLAGS | /bin/sed 's/ -- / /' `)
#echo "Using make arguments: $argv[2-]"
#echo "Using make options: $MAKEFLAGS"
#echo "Using make options: $cleanMakeflags"
set command = (nice /usr/gnu/bin/make $cleanMakeflags -j 2 $argv[2-])

if ($#files == 0) then
  @ finalrc = 0
else
  if ($#files < $#allHosts) then
    # Run local shell in foreground so return code can be grabbed
    eval $command $files
    @ finalrc = $status
  else
    # Find out which shell the user uses when rsh is executed
    set userShell = \
        `/bin/egrep "^${USER}:" < /etc/passwd | /usr/bin/cut -f7 -d:`
    if ($userShell == /bin/csh || $userShell == /bin/tcsh) then
      echo Using csh or derivative
      set rcommand = (setvars; hostname; cd `pwd`; $command)
    else
      echo Using sh or derivative
      set rcommand = (export PATH=/usr/gnu/bin/:${PATH}; . /u/wit/bin/setvars.ksh; cd `pwd`; $command)
    endif

    # Allocate files to hosts
    alias let @
    let j = $#files / $#allHosts
    set lcsFiles = ( $files[1-$j] )
    echo "Compiling on ${lcs}: $lcsFiles"
    let jp1 = $j + 1
    let k = $j + $j
    set rcs1Files = ( $files[$jp1-$k] )
    echo "Compiling on ${rcs[1]}: $rcs1Files"
    let kp1 = $k + 1
    if ($#allHosts == 3) then
      set rcs2Files = ( $files[$kp1-] )
      echo "Compiling on ${rcs[2]}: $rcs2Files"
    else
      let l = $k + $j
      set rcs2Files = ( $files[$kp1-$l] )
      echo "Compiling on ${rcs[2]}: $rcs2Files"
      let lp1 = $l + 1
      if ($#allHosts == 4) then
        set rcs3Files = ( $files[$lp1-] )
        echo "Compiling on ${rcs[3]}: $rcs3Files"
      else
        if ($#allHosts > 5) then
          echo "Too many hosts defined in the allHosts variable"
          exit 10
        endif
        let m = $l + $j
        set rcs3Files = ( $files[$lp1-$m] )
        let mp1 = $m + 1
        set rcs4Files = ( $files[$mp1-] )
        echo "Compiling on ${rcs[3]}: $rcs3Files"
        echo "Compiling on ${rcs[4]}: $rcs4Files"
      endif
    endif

    # Run remote shells in background
    # Note: rsh doesn't return the remote commands return code so do not
    # even try to save it
    rsh $rcs[1] $rcommand $rcs1Files &
    rsh $rcs[2] $rcommand $rcs2Files &
    if ($#allHosts > 3) then
      rsh $rcs[3] $rcommand $rcs3Files &
      if ($#allHosts > 4) then
        rsh $rcs[4] $rcommand $rcs4Files &
      endif
    endif
    
    # Run local shell in foreground so return code can be grabbed

    eval $command $lcsFiles
    let finalrc = $status

    # Wait for background shells to finish
    wait
  endif
endif

exit $finalrc
