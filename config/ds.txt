Decision Support Makefile Documentation

This document describes the overall scheme of the Decision
Support/Logistics Framework tree hierarchy and the makefiles and
environment variables that go with it.

The directory structure

The root directory is named $DS_DIR.  Under this directory are
directories for the development base, and working directories where
code is developed and tested prior to insertion into the development
base.  The development base directory is named $DSD_DIR.  Under
$DSD_DIR are directories for each of the distict projects, such as WIT
and PMRP, and a directory for configuration information, named
$DSCONF_DIR.

The Devlopment Base Directory's Project Directories

Under each project directory is a directory named ``src'' and a group
of directories named after various hardware/operating system
combinations.  Each hardware/operating system combination is called a
``platform''.  The ``src'' directory contains source code.  The
platform directories contain object code, object-code libraries, and
executables for those specific platforms.

The binaries are put into the platform directory using make-files.
These makefiles include a makefile named appl.mk in the ../src
directory that specifies how to make the binaries.

The Makefile Scheme

The makefiles are designed to make them as platform-independent as
possible.  To this end there is a make variable, ``platform'', that
should contain the name of the target platform.  In the configuration
directory $DSCONF_DIR, there is a p_<platform>.mk for each supported
platform.  Each p_<platform>.mk file defines machine-dependent
variables for its platform.  These include, for example, the directory
name seperator character (``/'' on Unix, ``\\'' on DOS), and
machine-specific compiler flags (such as -g and -d2 for debugging on
Unix and DOS respectively).

The configuration directory also contains a make include file named
ds.mk that defines generaly useful make variables and rules when
making WIT, and programs that use the WIT API.  It should be included
by every appl.mk file.

Variables defined in appl.mk

Wherever possible, the implicit rules built into (gnu-)make are used.
The function of the implicit rules is customized using the variables
that are associated with them, such as $(CPPFLAGS) for the extra flags
given to the C preprocessor and compilers that use it.  

Vpath

In order to have make search multiple directories for target and
dependency files (such as source and object files), the make vpath
function is used.  This can be used, for example, to tell make to
search for .h files first in the ../src directory, then in the
../../wit/src directory.  (In this case, you should also set
$(CPPFLAGS) to tell the compiler to look in both of those directories.)

There seem to be problems with using vpath though.  In particular, if
make finds a .o file using in some directory using vpath, it only
checks to see if the .o file is up-to-date relative to the files in
that directory.
